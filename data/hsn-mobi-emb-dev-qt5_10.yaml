- en: Where Am I? Location and Positioning
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我在哪里？定位和定位
- en: Devices with GPS chips are everywhere. You can even track your cat or chicken!
    In this chapter, you will learn how to use Qt for location and positioning services.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 带有GPS芯片的设备无处不在。你甚至可以追踪你的猫或鸡！在本章中，你将学习如何使用Qt进行定位和定位服务。
- en: Qt Positioning entails geographic coordinates from various sources, including
    satellites, Wi-Fi, and log files. Qt Location is all about local places, for example
    services, such as restaurants or public parks, and also routing information.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Qt定位包含来自各种来源的地理坐标，包括卫星、Wi-Fi和日志文件。Qt位置则是关于本地地点，例如服务，如餐厅或公共公园，以及路线信息。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Positioning with satellites
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用卫星进行定位
- en: Mapping the positions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 映射位置
- en: Places of interest
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 兴趣点
- en: Positioning with satellites
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用卫星进行定位
- en: 'A phone usually has a built-in GPS modem but also other sources of positioning
    information, so I will use Android for this example. The main Qt classes we will
    look at are as follows:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 一部手机通常内置了GPS调制解调器，但也拥有其他定位信息来源，因此我将使用Android作为示例。我们将关注的Qt主要类如下：
- en: 'Here are the Qt Positioning APIs:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是Qt定位API：
- en: '`QGeoSatelliteInfo`'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QGeoSatelliteInfo`'
- en: '`QGeoLocation`'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QGeoLocation`'
- en: '`QGeoPositionInfoSource`'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QGeoPositionInfoSource`'
- en: '`QGeoCoordinate`'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QGeoCoordinate`'
- en: 'And here are the Qt Location APIs:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是Qt位置API：
- en: '`QPlaceSearchResult`'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QPlaceSearchResult`'
- en: '`QPlaceContent`'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QPlaceContent`'
- en: '`QGeoRoute`'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QGeoRoute`'
- en: First, we need to edit the `.pro` file and add `QT += positioning`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要编辑`.pro`文件并添加`QT += positioning`。
- en: QGeoSatelliteInfoSource
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QGeoSatelliteInfoSource
- en: You can show the user satellite information by using `QGeoSatelliteInfoSource`, which
    has a `static` method to get `QGeoSatelliteInfoSource.`
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`QGeoSatelliteInfoSource`来向用户展示卫星信息，它有一个`static`方法来获取`QGeoSatelliteInfoSource`。
- en: The source code can be found on the Git repository under the `Chapter08-1` directory,
    in the `cp8` branch.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 源代码可以在Git仓库的`Chapter08-1`目录下的`cp8`分支中找到。
- en: We will start by calling `QGeoSatelliteInfoSource::createDefaultSource`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先调用`QGeoSatelliteInfoSource::createDefaultSource`。
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: On some systems, such as iOS, satellite information is not exposed to the public
    API, so `QGeoSatelliteInfoSource` will not work on that platform.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些系统，如iOS上，卫星信息不会公开到公共API，因此`QGeoSatelliteInfoSource`在该平台上将不起作用。
- en: 'This constructs a `QGeoSatelliteInfoSource` object for the highest-priority
    plugin on the system, which is about the same as doing the following:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在系统上构建一个`QGeoSatelliteInfoSource`对象，该对象是最高优先级的插件，这大致等同于以下操作：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'There are two signals of particular interest: `satellitesInUseUpdated` and
    `satellitesInViewUpdated`. In addition, there is the overloaded `error` signal,
    so we need to use the special `QOverload` syntax:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个特别感兴趣的信号：`satellitesInUseUpdated`和`satellitesInViewUpdated`。此外，还有一个重载的`error`信号，因此我们需要使用特殊的`QOverload`语法：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `satellitesInUseUpdated` signal is emitted when the number of satellites
    that the system is using changes. The `satellitesInViewUpdated` signal gets emitted
    when the number of satellites the system can see changes. We will receive a list
    of `QGeoSatelliteInfo` objects.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当系统使用的卫星数量发生变化时，会发出`satellitesInUseUpdated`信号。当系统可以看到的卫星数量发生变化时，会发出`satellitesInViewUpdated`信号。我们将接收到一个`QGeoSatelliteInfo`对象列表。
- en: QGeoSatelliteInfo
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QGeoSatelliteInfo
- en: 'Let''s connect the `satellitesInViewUpdated` signal so we can detect when satellites
    are found:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们连接`satellitesInViewUpdated`信号，以便我们可以检测到卫星被找到：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We can receive information for individual satellites this way. Information
    such as a satellite identifier, signal strength, elevation, and azimuth is included:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过这种方式接收单个卫星的信息。包括卫星标识符、信号强度、仰角和方位角等信息：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'There''s a lot to see here on a small screen. Every update is a new line, and
    you can see as it locates and adds different satellites when they come into view:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在小屏幕上这里有很多东西可以看。每次更新都是新的一行，你可以看到它定位并添加不同的卫星，当它们进入视野时：
- en: '![](img/e67199f7-ab26-4d0e-84eb-0aa5d209cc9e.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e67199f7-ab26-4d0e-84eb-0aa5d209cc9e.png)'
- en: The next step is to use those satellites to triangulate our position on the
    globe. We start by using `QGeoPositionInfoSource`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是使用这些卫星来在全球上定位我们的位置。我们首先使用`QGeoPositionInfoSource`。
- en: QGeoPositionInfoSource
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QGeoPositionInfoSource
- en: 'We can get the latitude and longitude position of the device by using `QGeoPositionInfoSource`,
    which encapsulates positional data. Like `QGeoSatelliteInfoSource`, it has two
    `static` methods to create the `source` object:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用`QGeoPositionInfoSource`来获取设备的纬度和经度位置，它封装了位置数据。类似于`QGeoSatelliteInfoSource`，它有两个`static`方法来创建`source`对象：
- en: The source code can be found on the Git repository under the `Chapter08-2` directory,
    in the `cp8` branch.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 源代码可以在Git仓库的`Chapter08-2`目录下的`cp8`分支中找到。
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `QGeoPositionInfoSource` signal we are interested in is `positionUpdated(const
    QGeoPositionInfo &update)`:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们感兴趣的`QGeoPositionInfoSource`信号是`positionUpdated(const QGeoPositionInfo &update)`：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To start receiving updates, call `startUpdates();`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始接收更新，请调用`startUpdates();`：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `positionUpdated` signal receives a `QGeoPositionInfo`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`positionUpdated`信号接收一个`QGeoPositionInfo`。'
- en: QGeoPositionInfo
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QGeoPositionInfo
- en: '`QGeoPositionInfo` contains a `QGeoCoordinate` that contains our latitude and
    longitude coordinates, as well as a timestamp for the location data.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`QGeoPositionInfo`包含一个`QGeoCoordinate`，其中包含我们的纬度和经度坐标，以及位置数据的时间戳。'
- en: 'It can also contain the following optional attributes:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 它还可以包含以下可选属性：
- en: '`Direction`'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Direction`'
- en: '`GroundSpeed`'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GroundSpeed`'
- en: '`VerticalSpeed`'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VerticalSpeed`'
- en: '`MagneticVariation`'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MagneticVariation`'
- en: '`HorizontalAccuracy`'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HorizontalAccuracy`'
- en: '`VerticalAccuracy`'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VerticalAccuracy`'
- en: 'The attributes can be checked with `hasAttribute(QGeoPositionInfo::Attribute)`
    and retrieved with the `attribute(QGeoPositionInfo::Attribute)` function:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`hasAttribute(QGeoPositionInfo::Attribute)`检查属性，并使用`attribute(QGeoPositionInfo::Attribute)`函数检索：
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: To get latitude and longitude information, call the `coordinate()` function
    in the `QGeoPositionInfo` class, which returns a `QGeoCoordinate`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取纬度和经度信息，请调用`QGeoPositionInfo`类中的`coordinate()`函数，它返回一个`QGeoCoordinate`。
- en: QGeoCoordinate
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QGeoCoordinate
- en: '`QGeoCoordinate` contains the latitude and longitude coordinates, and can be
    found calling the respective `latitude()` and `longitude()` functions. It can
    be made up of different types of data, and can be discovered by calling the `type()`
    function, which returns an `enum` of `QGeoCoordinate::CoordinateType`, which can
    be one of the following values:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`QGeoCoordinate`包含纬度和经度坐标，可以通过调用相应的`latitude()`和`longitude()`函数找到。它可以由不同类型的数据组成，可以通过调用`type()`函数来发现，该函数返回一个`QGeoCoordinate::CoordinateType`的`enum`，它可以有以下值之一：'
- en: '`InvalidCoordinate`: Invalid coordinate'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`InvalidCoordinate`：无效坐标'
- en: '`Coordinate2D`: Contains latitude and longitude coordinates'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Coordinate2D`：包含纬度和经度坐标'
- en: '`Coordinate3D`: Contains latitude, longitude, and altitude coordinates'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Coordinate3D`：包含纬度、经度和高度坐标'
- en: 'We can get the `QGeoCoordinate` from the `QGeoPositionInfo` object''s `coordinate()`
    function which, in turn, has `latitude` and `longitude` values:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过调用`QGeoPositionInfo`对象的`coordinate()`函数从`QGeoPositionInfo`对象中获取`QGeoCoordinate`，该函数反过来具有`latitude`和`longitude`值：
- en: '[PRE9]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Let's take a look at how we do this using Qt Quick and QML.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们如何使用Qt Quick和QML来完成这个操作。
- en: Qt Quick
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Qt Quick
- en: There are corresponding QML elements available for positioning.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 有相应的QML元素可用于定位。
- en: The `import` statement would be `import QtPositioning 5.12`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`import`语句将是`import QtPositioning 5.12`。'
- en: Let's do the same simple thing with QML and show our latitude and longitude
    values.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用QML做同样简单的事情，并显示我们的纬度和经度值。
- en: 'Here are the Qt Quick item equivalents of the previously-mentioned classes:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是之前提到的类的Qt Quick项目等效：
- en: '`PositionSource`: `QGeoPositionInfoSource`'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PositionSource`：`QGeoPositionInfoSource`'
- en: '`Position`: `QGeoPositionInfo`'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Position`：`QGeoPositionInfo`'
- en: '`Coordinate`: `QGeoCoordinate`'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Coordinate`：`QGeoCoordinate`'
- en: Qt Quick is often much simpler, and quick to implement these things.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Qt Quick通常要简单得多，并且快速实现这些功能。
- en: The source code can be found on the Git repository under the `Chapter08-3` directory,
    in the `cp8` branch.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 源代码可以在Git仓库的`Chapter08-3`目录下的`cp8`分支中找到。
- en: 'We implement `PositionSource` with an `updateInterval` of 1,000, which means
    the devices position will update every 1,000 milliseconds. We set it to `active`
    to start the updates:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用1,000毫秒的`updateInterval`实现了`PositionSource`，这意味着设备的位置将每1,000毫秒更新一次。我们将其设置为`active`以开始更新：
- en: '[PRE10]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This component has a signal named `onPositionChanged`, which gets called when
    the position changes. We receive the changed coordinates and can then use them:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 此组件有一个名为`onPositionChanged`的信号，当位置改变时会被调用。我们接收改变后的坐标，然后可以使用它们：
- en: '[PRE11]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now that we know where we are, we can use those location details to get certain
    details around the coordinates, like the map and location's place details.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了我们的位置，我们可以使用这些位置细节来获取坐标周围的一些详细信息，比如地图和位置详情。
- en: Mapping the positions
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 映射位置
- en: We now need a map of some sort to show our location findings.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在需要一个某种地图来显示我们的位置发现。
- en: The `Map` component for QML is the only way Qt provides for mapping, so you
    will have to use Qt Quick.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: QML 的 `Map` 组件是 Qt 提供的唯一地图功能，因此您必须使用 Qt Quick。
- en: 'The `Map` component can be backed by various backend plugins. In fact, you
    need to specify which plugin you are using. `Map` has built-in support for the
    following plugins:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`Map` 组件可以由各种后端插件支持。实际上，您需要指定您正在使用哪个插件。`Map` 内置支持以下插件：'
- en: '| **Provider** | **Key** | **Notes** | **Url** |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| **Provider** | **Key** | **Notes** | **Url** |'
- en: '| Esri | esri | Subscription required | `www.esri.com` |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| Esri | esri | 需要订阅 | `www.esri.com` |'
- en: '| HERE | here | Access token required | `developer.here.com/terms-and-conditions`
    |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| HERE | here | 需要访问令牌 | `developer.here.com/terms-and-conditions` |'
- en: '| Mapbox | mapbox | Access token required | `www.mapbox.com/tos` |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| Mapbox | mapbox | 需要访问令牌 | `www.mapbox.com/tos` |'
- en: '| Mapbox GL | mapboxgl | Access token required | `www.mapbox.com/tos` |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| Mapbox GL | mapboxgl | 需要访问令牌 | `www.mapbox.com/tos` |'
- en: '| **Open Street Map** (**OSM**) | osm | Free access | `openstreetmap.org/`
    |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| **Open Street Map** (**OSM**) | osm | 免费访问 | `openstreetmap.org/` |'
- en: I will be using the OSM and HERE providers.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我将使用 OSM 和 HERE 提供商。
- en: The HERE plugin requires an account at `developer.here.com`. It's easy to sign
    up and there is a free version. You need the app ID and app code to access their
    maps and API.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: HERE 插件需要在 `developer.here.com` 上有一个账户。注册很容易，并且有一个免费版本。您需要应用程序 ID 和应用程序代码才能访问他们的地图和
    API。
- en: Map
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 地图
- en: 'To start using the `Map` component, in your chosen `.qml` file, add both `QtLocation`
    and `QtPositioning` in the `import` lines:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用 `Map` 组件，在您选择的 `.qml` 文件中，在 `import` 行中添加 `QtLocation` 和 `QtPositioning`：
- en: '[PRE12]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The source code can be found on the Git repository under the `Chapter08-4` directory,
    in the `cp8` branch.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 源代码可以在 Git 仓库的 `Chapter08-4` 目录下的 `cp8` 分支中找到。
- en: The `Map` component needs a `plugin` object, whose `name` property is one of
    the keys from the preceding table. You can set where the map is centered by setting
    the `center` property to a coordinate.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`Map` 组件需要一个 `plugin` 对象，其 `name` 属性是前面表格中的一个键。您可以通过设置 `center` 属性为一个坐标来设置地图的中心位置。'
- en: 'I am using the OSM backend and it is centered on the Gold Coast, Australia:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我正在使用 OSM 后端，并且它以澳大利亚的黄金海岸为中心：
- en: '[PRE13]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The Map centers on the coordinates we indicate with the `center` property, which
    is used to position the map to the user's current location.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 地图以 `center` 属性中我们指定的坐标为中心，该属性用于将地图定位到用户的当前位置。
- en: We defined the Map's `plugin` property to be the `"osm"` plugin, which is an
    identifier for the Open Street Map plugin.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将地图的 `plugin` 属性定义为 `"osm"` 插件，这是 Open Street Map 插件的标识符。
- en: It is that easy to show a map.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 显示地图就这么简单。
- en: MapCircle
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MapCircle
- en: You can highlight an area by placing a `MapCircle` in the `Map`. Again, centered
    on the Gold Coast.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在 `Map` 中放置一个 `MapCircle` 来突出显示一个区域。再次以黄金海岸为中心。
- en: A `MapCircle` has a `center` property that we can define by using a `latitude`
    and `longitude` location in a signed decimal value.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`MapCircle` 有一个 `center` 属性，我们可以通过使用一个带有符号十进制值的 `latitude` 和 `longitude` 位置来定义它。'
- en: The `radius` property here is in the unit of meters according to the map. So
    in our example, the `MapCircle` will have a radius of 5,000 meters.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这里 `radius` 属性的单位是米，根据地图。所以在我们这个例子中，`MapCircle` 的半径将是 5,000 米。
- en: '[PRE14]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Each map backend has its own parameters, which can be set using the `PluginParameter`
    component in the `Map` component.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 每个地图后端都有自己的参数，可以使用 `Map` 组件中的 `PluginParameter` 组件来设置。
- en: PluginParameter
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PluginParameter
- en: 'By default, the OSM backend downloads lower-resolution tiles. If you want high-resolution
    maps, you can specify the `''osm.mapping.highdpi_tiles''` parameter:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，OSM 后端下载的是低分辨率的瓦片。如果您想要高分辨率的地图，您可以指定 `'osm.mapping.highdpi_tiles'` 参数：
- en: '[PRE15]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Each `PluginParameter` element holds just one `name`/`value` parameter pair.
    If you need to set several parameters, you will need a `PluginParameter` element
    for each:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 `PluginParameter` 元素只包含一个 `name`/`value` 参数对。如果您需要设置多个参数，您将需要一个 `PluginParameter`
    元素来设置每个：
- en: '[PRE16]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Other `PluginParameters` you could consider are tokens and app IDs for various
    map providers, such as HERE maps.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以考虑的其他 `PluginParameters` 包括各种地图提供商的令牌和应用程序 ID，例如 HERE 地图。
- en: 'Here''s how our map looks, running on Android:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的地图在 Android 上运行的样子：
- en: '![](img/49538139-169e-48a8-8e2c-0309ad29cccf.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/49538139-169e-48a8-8e2c-0309ad29cccf.png)'
- en: There are other Qt Quick items that we can use with addresses on the map. Let's
    look at routing.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用地址在地图上使用其他 Qt Quick 元素。让我们看看路线规划。
- en: RouteModel
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: RouteModel
- en: To show a route on a map, you will need to use `RouteModel`, which is a property
    of the `Map` item, `RouteQuery` to add waypoints, and a `MapItemView` to display
    it.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 要在地图上显示路线，您需要使用`RouteModel`，它是`Map`项的一个属性，`RouteQuery`用于添加航点，以及`MapItemView`用于显示它。
- en: '`RouteModel` needs a plugin, so we just reuse the plugin for the `Map` item.
    It also needs a `RouteQuery` for its `query` property:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`RouteModel`需要一个插件，所以我们只是重用了`Map`项的插件。它还需要一个`RouteQuery`来设置其`query`属性：'
- en: '[PRE17]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '`MapItemView` is used to display model data on the map. It also needs a delegate
    of `MapRoute`. In our case, this is a line that describes the route:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`MapItemView`用于在地图上显示模型数据。它还需要一个`MapRoute`的代理。在我们的案例中，这是一条描述路线的线：'
- en: '[PRE18]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now what we need is a starting point, an ending point, and any point in between.
    In this example, I keep it simple and only specify start and end points. You can
    specify a GPS coordinate by using `QtPositioning.coordinate`, which takes a latitude
    and longitude value as arguments:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要的是一个起点、一个终点以及任何中间点。在这个例子中，我保持简单，只指定起点和终点。您可以通过使用`QtPositioning.coordinate`来指定GPS坐标，它接受纬度和经度值作为参数：
- en: '[PRE19]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The start-point coordinate is some random area on the Gold Coast, Australia;
    the endpoint is where the last south-of-the-equator Trolltech office was. The
    `RouteQuery travelModes` property determines how the route is figured, whether
    traveling by car, foot, or public transport. It can be one of the following values:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 起始点坐标位于澳大利亚黄金海岸的某个随机区域；终点是南半球最后一个Trolltech办公室的位置。`RouteQuery travelModes`属性决定了路线是如何计算的，是开车、步行还是公共交通。它可以有以下几种值：
- en: '`CarTravel`'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CarTravel`'
- en: '`PedestrianTravel`'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PedestrianTravel`'
- en: '`BicycleTravel`'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BicycleTravel`'
- en: '`PublicTransit`'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PublicTransit`'
- en: '`TruckTravel`'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TruckTravel`'
- en: 'The `RouteQuery` property, `routeOptimzations`, limits the query to the following
    different values:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`RouteQuery`属性`routeOptimzations`限制了查询到以下不同的值：'
- en: '`ShortestRoute`'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ShortestRoute`'
- en: '`FastestRoute`'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FastestRoute`'
- en: '`MostEconomicRoute`'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MostEconomicRoute`'
- en: '`MostScenicRoute`'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MostScenicRoute`'
- en: 'In this example, I made `routeQuery` fire off in the `Component.onCompleted`
    signal. Usually, something like this would be triggered after the user has configured
    the query:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我在`Component.onCompleted`信号中触发了`routeQuery`。通常，这种操作会在用户配置查询后触发：
- en: '[PRE20]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Here is how the route looks. This route indicated by the blue line starting
    in the big red circle:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这是路线的显示方式。这条由蓝色线条指示的路线从大红色圆圈开始：
- en: '![](img/189324f1-d058-4353-a244-4acaed6350f0.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](img/189324f1-d058-4353-a244-4acaed6350f0.png)'
- en: You can add more `Waypoints` to establish different routes or get turn-by-turn
    directions by setting `routeModel` to a `ListView` or similar.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以添加更多`Waypoints`来建立不同的路线或通过将`routeModel`设置为`ListView`或类似的内容来获取逐段方向指示。
- en: Not only can Qt Location show maps and routes, but there is also support for
    displaying places of interest, such as restaurants, gas stations, and national
    parks, in the `Places` API.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅Qt Location可以显示地图和路线，而且`Places` API还支持显示兴趣点，如餐厅、加油站和国家公园。
- en: Places of interest
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 兴趣点
- en: At this point, I am going to switch to the HERE maps plugin. I tried to get
    the OpenStreetMaps places to work, but it could not find anything around.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我将切换到HERE地图插件。我尝试让OpenStreetMaps地点工作，但它找不到任何东西。
- en: In the next step of the construction of our map, we use `PlaceSearchModel` to
    search for places. As with the `RouteModel` before, `MapItemView` can display
    this model on our map.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们地图构建的下一步中，我们使用`PlaceSearchModel`来搜索地点。与之前的`RouteModel`一样，`MapItemView`可以在我们的地图上显示此模型。
- en: Just like `RouteModel`, `PlaceSearchModel` needs some way of displaying the
    data; we could choose a `ListView`, which is useful for some purposes, but let's
    choose `MapItemView` for the visual effect.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 就像`RouteModel`一样，`PlaceSearchModel`需要一种显示数据的方式；我们可以选择`ListView`，这在某些用途上很有用，但让我们选择`MapItemView`以获得视觉效果。
- en: 'We need to state which plugin we are using with `searchArea` and `searchTerm`:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要使用`searchArea`和`searchTerm`来声明我们正在使用哪个插件：
- en: '[PRE21]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Our `MapItemView` and `delegate` code look like this. The `searchView` delegate
    will show up as an icon with its title text, from the resulting place :'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`MapItemView`和`delegate`代码如下。`searchView`代理将以图标的形式显示，其标题文本来自结果地点：
- en: '[PRE22]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: As you can see here, the place points are a bit difficult to read and are superimposed
    on top of the other ones that are around. This indicates that there are places
    too near each other for the zoom level and the map is having difficulties in placing
    the names. You can work around this issue by using a different zoom level or by
    using some collision detection and layout algorithms that I won't go into there.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，地点点有些难以阅读，并且叠加在周围的点上。这表明附近有太多地点，对于缩放级别来说太近了，地图在放置名称时遇到了困难。您可以通过使用不同的缩放级别或使用一些碰撞检测和布局算法来解决这个问题，这里我不会深入讨论。
- en: '![](img/90adbe26-04ad-42a1-a2a8-680274dde9d2.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](img/90adbe26-04ad-42a1-a2a8-680274dde9d2.png)'
- en: The `map-pin.png` icon is from [https://feathericons.com/](https://feathericons.com/)
    and is released under the open source MIT license.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '`map-pin.png` 图标来自 [https://feathericons.com/](https://feathericons.com/)，并采用开源
    MIT 许可协议发布。'
- en: Summary
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered many aspects of mapping using Qt Location and Qt
    Positioning. We can get satellite information with `QGeoSatelliteInfo`, and locate
    the exact current position coordinates with `QGeoPositionInfo`. We learned how
    to use Qt Quick `Map` and different map providers to show the current location.
    We covered how to provide a route with `RouteModel`, search for places nearby
    using `PlaceSearchModel`, and show them using `MapItemView`.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用 Qt Location 和 Qt Positioning 覆盖了映射的许多方面。我们可以使用 `QGeoSatelliteInfo`
    获取卫星信息，并使用 `QGeoPositionInfo` 定位精确的当前位置坐标。我们学习了如何使用 Qt Quick `Map` 和不同的地图提供商来显示当前位置。我们介绍了如何使用
    `RouteModel` 提供路线，使用 `PlaceSearchModel` 在附近搜索地点，并使用 `MapItemView` 显示它们。
- en: In the next chapter, we will discuss audio and video with Qt Multimedia.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论使用 Qt Multimedia 的音频和视频。
