["```cpp\nQT += sql\n```", "```cpp\n#ifndef IDATABASECONTROLLER_H\n#define IDATABASECONTROLLER_H\n\n#include <QJsonArray>\n#include <QJsonObject>\n#include <QList>\n#include <QObject>\n#include <QString>\n\n#include <cm-lib_global.h>\n\nnamespace cm {\nnamespace controllers {\n\nclass CMLIBSHARED_EXPORT IDatabaseController : public QObject\n{\n    Q_OBJECT\n\npublic:\n    IDatabaseController(QObject* parent) : QObject(parent){}\n    virtual ~IDatabaseController(){}\n\n    virtual bool createRow(const QString& tableName, const QString& id, \n                           const QJsonObject& jsonObject) const = 0;\n    virtual bool deleteRow(const QString& tableName, const QString& id) \n                                                     const = 0;\n    virtual QJsonArray find(const QString& tableName, const QString& \n                                           searchText) const = 0;\n    virtual QJsonObject readRow(const QString& tableName, const \n                                      QString& id) const = 0;\n    virtual bool updateRow(const QString& tableName, const QString& id, \n                           const QJsonObject& jsonObject) const = 0;\n};\n\n}}\n\n#endif\n```", "```cpp\n#ifndef DATABASECONTROLLER_H\n#define DATABASECONTROLLER_H\n\n#include <QObject>\n#include <QScopedPointer>\n\n#include <controllers/i-database-controller.h>\n\n#include <cm-lib_global.h>\n\nnamespace cm {\nnamespace controllers {\n\nclass CMLIBSHARED_EXPORT DatabaseController : public IDatabaseController\n{\n    Q_OBJECT\n\npublic:\n    explicit DatabaseController(QObject* parent = nullptr);\n    ~DatabaseController();\n\n    bool createRow(const QString& tableName, const QString& id, const \n                         QJsonObject& jsonObject) const override;\n    bool deleteRow(const QString& tableName, const QString& id) const \n                                                            override;\n    QJsonArray find(const QString& tableName, const QString& \n                                   searchText) const override;\n    QJsonObject readRow(const QString& tableName, const QString& id) \n                                                  const override;\n    bool updateRow(const QString& tableName, const QString& id, const \n                         QJsonObject& jsonObject) const override;\n\nprivate:\n    class Implementation;\n    QScopedPointer<Implementation> implementation;\n};\n\n}}\n\n#endif\n```", "```cpp\nclass DatabaseController::Implementation\n{\npublic:\n    Implementation(DatabaseController* _databaseController)\n        : databaseController(_databaseController)\n    {\n        if (initialise()) {\n            qDebug() << \"Database created using Sqlite version: \" + \n                                                sqliteVersion();\n            if (createTables()) {\n                qDebug() << \"Database tables created\";\n            } else {\n                qDebug() << \"ERROR: Unable to create database tables\";\n            }\n        } else {\n            qDebug() << \"ERROR: Unable to open database\";\n        }\n    }\n\n    DatabaseController* databaseController{nullptr};\n    QSqlDatabase database;\n\nprivate:\n    bool initialise()\n    {\n        database = QSqlDatabase::addDatabase(\"QSQLITE\", \"cm\");\n        database.setDatabaseName( \"cm.sqlite\" );\n        return database.open();\n    }\n\n    bool createTables()\n    {\n        return createJsonTable( \"client\" );\n    }\n\n    bool createJsonTable(const QString& tableName) const\n    {\n        QSqlQuery query(database);\n        QString sqlStatement = \"CREATE TABLE IF NOT EXISTS \" + \n         tableName + \" (id text primary key, json text not null)\";\n\n        if (!query.prepare(sqlStatement)) return false;\n\n        return query.exec();\n    }\n\n    QString sqliteVersion() const\n    {\n        QSqlQuery query(database);\n\n        query.exec(\"SELECT sqlite_version()\");\n\n        if (query.next()) return query.value(0).toString();\n\n        return QString::number(-1);\n    }\n};\n```", "```cpp\nbool DatabaseController::createRow(const QString& tableName, const QString& id, const QJsonObject& jsonObject) const\n{\n    if (tableName.isEmpty()) return false;\n    if (id.isEmpty()) return false;\n    if (jsonObject.isEmpty()) return false;\n\n    QSqlQuery query(implementation->database);\n\n    QString sqlStatement = \"INSERT OR REPLACE INTO \" + tableName + \" \n                            (id, json) VALUES (:id, :json)\";\n\n    if (!query.prepare(sqlStatement)) return false;\n\n    query.bindValue(\":id\", QVariant(id));\n    query.bindValue(\":json\",    \n   QVariant(QJsonDocument(jsonObject).toJson(QJsonDocument::Compact)));\n\n    if(!query.exec()) return false;\n\n    return query.numRowsAffected() > 0;\n}\n\nbool DatabaseController::deleteRow(const QString& tableName, const QString& id) const\n{\n    if (tableName.isEmpty()) return false;\n    if (id.isEmpty()) return false;\n\n    QSqlQuery query(implementation->database);\n\n    QString sqlStatement = \"DELETE FROM \" + tableName + \" WHERE \n                            id=:id\";\n\n    if (!query.prepare(sqlStatement)) return false;\n\n    query.bindValue(\":id\", QVariant(id));\n\n    if(!query.exec()) return false;\n\n    return query.numRowsAffected() > 0;\n}\n\nQJsonObject DatabaseController::readRow(const QString& tableName, const QString& id) const\n{\n    if (tableName.isEmpty()) return {};\n    if (id.isEmpty()) return {};\n\n    QSqlQuery query(implementation->database);\n\n    QString sqlStatement = \"SELECT json FROM \" + tableName + \" WHERE \n                            id=:id\";\n\n    if (!query.prepare(sqlStatement)) return {};\n\n    query.bindValue(\":id\", QVariant(id));\n\n    if (!query.exec()) return {};\n\n    if (!query.first()) return {};\n\n    auto json = query.value(0).toByteArray();\n    auto jsonDocument = QJsonDocument::fromJson(json);\n\n    if (!jsonDocument.isObject()) return {};\n\n    return jsonDocument.object();\n}\n\nbool DatabaseController::updateRow(const QString& tableName, const QString& id, const QJsonObject& jsonObject) const\n{\n    if (tableName.isEmpty()) return false;\n    if (id.isEmpty()) return false;\n    if (jsonObject.isEmpty()) return false;\n\n    QSqlQuery query(implementation->database);\n\n    QString sqlStatement = \"UPDATE \" + tableName + \" SET json=:json \n                            WHERE id=:id\";\n\n    if (!query.prepare(sqlStatement)) return false;\n\n    query.bindValue(\":id\", QVariant(id));\n    query.bindValue(\":json\", \n   QVariant(QJsonDocument(jsonObject).toJson(QJsonDocument::Compact)));\n\n    if(!query.exec()) return false;\n\n    return query.numRowsAffected() > 0;\n}\n```", "```cpp\nQJsonArray DatabaseController::find(const QString& tableName, const QString& searchText) const\n{\n    if (tableName.isEmpty()) return {};\n    if (searchText.isEmpty()) return {};\n\n    QSqlQuery query(implementation->database);\n\n    QString sqlStatement = \"SELECT json FROM \" + tableName + \" where \n                            lower(json) like :searchText\";\n\n    if (!query.prepare(sqlStatement)) return {};\n\n    query.bindValue(\":searchText\", QVariant(\"%\" + searchText.toLower() \n                                                             + \"%\"));\n\n    if (!query.exec()) return {};\n\n    QJsonArray returnValue;\n\n    while ( query.next() ) {\n        auto json = query.value(0).toByteArray();\n        auto jsonDocument = QJsonDocument::fromJson(json);\n        if (jsonDocument.isObject()) {\n            returnValue.append(jsonDocument.object());\n        }\n    }\n\n    return returnValue;\n}\n```", "```cpp\nQString id;\n```", "```cpp\nImplementation(Entity* _entity, IDatabaseController* _databaseController, const QString& _key)\n    : entity(_entity)\n    , databaseController(_databaseController)\n    , key(_key)\n    , id(QUuid::createUuid().toString())\n{\n}\n```", "```cpp\nconst QString& Entity::id() const\n{\n    return implementation->id;\n}\n```", "```cpp\nvoid Entity::update(const QJsonObject& jsonObject)\n{\n    if (jsonObject.contains(\"id\")) {\n        implementation->id = jsonObject.value(\"id\").toString();\n    }\n\n    \u2026\n\n}\n```", "```cpp\nQJsonObject Entity::toJson() const\n{\n    QJsonObject returnValue;\n    returnValue.insert(\"id\", implementation->id);\n    \u2026\n}\n```", "```cpp\nclass Entity::Implementation\n{\n    ...\n    StringDecorator* primaryKey{nullptr};\n    ...\n}\n```", "```cpp\nvoid Entity::setPrimaryKey(StringDecorator* primaryKey) \n{ \n    implementation->primaryKey = primaryKey; \n}\n```", "```cpp\nconst QString& Entity::id() const\n{\n    if(implementation->primaryKey != nullptr && !implementation->primaryKey->value().isEmpty()) {\n        return implementation->primaryKey->value();\n    }\n    return implementation->id;\n}\n```", "```cpp\nClient::Client(QObject* parent)\n    : Entity(parent, \"client\")\n{\n    ...\n\n    setPrimaryKey(reference);\n}\n```", "```cpp\nvoid id_givenPrimaryKeyWithNoValue_returnsUuid();\nvoid id_givenPrimaryKeyWithValue_returnsPrimaryKey();\n```", "```cpp\nvoid ClientTests::id_givenPrimaryKeyWithNoValue_returnsUuid()\n{\n    Client testClient(this);\n\n    // Using individual character checks\n    QCOMPARE(testClient.id().left(1), QString(\"{\"));\n    QCOMPARE(testClient.id().mid(9, 1), QString(\"-\"));\n    QCOMPARE(testClient.id().mid(14, 1), QString(\"-\"));\n    QCOMPARE(testClient.id().mid(19, 1), QString(\"-\"));\n    QCOMPARE(testClient.id().mid(24, 1), QString(\"-\"));\n    QCOMPARE(testClient.id().right(1), QString(\"}\"));\n\n    // Using regular expression pattern matching\n    QVERIFY(QRegularExpression(\"\\\\{.{8}-(.{4})-(.{4})-(.{4})-(.\n                        {12})\\\\}\").match(testClient.id()).hasMatch());\n}\n\nvoid ClientTests::id_givenPrimaryKeyWithValue_returnsPrimaryKey()\n{\n    Client testClient(this, QJsonDocument::fromJson(jsonByteArray).object());\n    QCOMPARE(testClient.reference->value(), QString(\"CM0001\"));\n    QCOMPARE(testClient.id(), testClient.reference->value());\n}\n```", "```cpp\nexplicit CommandController(QObject* _parent = nullptr, IDatabaseController* databaseController = nullptr, models::Client* newClient = nullptr);\n```", "```cpp\nIDatabaseController* databaseController{nullptr};\nClient* newClient{nullptr};\n```", "```cpp\nImplementation(CommandController* _commandController, IDatabaseController* _databaseController, Client* _newClient)\n    : commandController(_commandController)\n    , databaseController(_databaseController)\n    , newClient(_newClient)           \n{\n    ...\n}\n```", "```cpp\nCommandController::CommandController(QObject* parent, IDatabaseController* databaseController, Client* newClient)\n    : QObject(parent)\n{\n    implementation.reset(new Implementation(this, databaseController, newClient));\n}\n```", "```cpp\nvoid CommandController::onCreateClientSaveExecuted()\n{\n    qDebug() << \"You executed the Save command!\";\n\n    implementation->databaseController->createRow(implementation->newClient->key(), implementation->newClient->id(), implementation->newClient->toJson());\n\n    qDebug() << \"New client saved.\";\n}\n```", "```cpp\nImplementation(MasterController* _masterController)\n    : masterController(_masterController)\n{\n    databaseController = new DatabaseController(masterController);\n    navigationController = new NavigationController(masterController);\n    newClient = new Client(masterController);\n    commandController = new CommandController(masterController, databaseController, newClient);\n}\n```", "```cpp\nDatabase created using Sqlite version: 3.20.1\nDatabase tables created\n```", "```cpp\nYou executed the Save command!\nNew client saved\n```", "```cpp\nimport QtQuick 2.9\nimport assets 1.0\n\nItem {\n    implicitWidth: parent.width\n    implicitHeight: headerBackground.height +    \n    contentLoader.implicitHeight + (Style.sizeControlSpacing * 2)\n    property alias headerText: title.text\n    property alias contentComponent: contentLoader.sourceComponent\n\n    Rectangle {\n        id: shadow\n        width: parent.width\n        height: parent.height\n        x: Style.sizeShadowOffset\n        y: Style.sizeShadowOffset\n        color: Style.colourShadow\n    }\n\n    Rectangle {\n        id: headerBackground\n        anchors {\n            top: parent.top\n            left: parent.left\n            right: parent.right\n        }\n        height: Style.heightPanelHeader\n        color: Style.colourPanelHeaderBackground\n\n        Text {\n            id: title\n            text: \"Set Me!\"\n            anchors {\n                fill: parent\n                margins: Style.heightDataControls / 4\n            }\n            color: Style.colourPanelHeaderFont\n            font.pixelSize: Style.pixelSizePanelHeader\n            verticalAlignment: Qt.AlignVCenter\n        }\n    }\n\n    Rectangle {\n        id: contentBackground\n        anchors {\n            top: headerBackground.bottom\n            left: parent.left\n            right: parent.right\n            bottom: parent.bottom\n        }\n        color: Style.colourPanelBackground\n\n        Loader {\n            id: contentLoader\n            anchors {\n                left: parent.left\n                right: parent.right\n                top: parent.top\n                margins: Style.sizeControlSpacing\n            }\n        }\n    }\n}\n```", "```cpp\nreadonly property real sizeControlSpacing: 10\n```", "```cpp\nreadonly property color colourPanelBackground: \"#ffffff\"\nreadonly property color colourPanelBackgroundHover: \"#ececec\"\nreadonly property color colourPanelHeaderBackground: \"#131313\"\nreadonly property color colourPanelHeaderFont: \"#ffffff\"\nreadonly property color colourPanelFont: \"#131313\"\nreadonly property int pixelSizePanelHeader: 18\nreadonly property real heightPanelHeader: 40\nreadonly property real sizeShadowOffset: 5\nreadonly property color colourShadow: \"#dedede\"\n```", "```cpp\nimport QtQuick 2.9\nimport CM 1.0\nimport assets 1.0\n\nPanel {\n    property Address address\n\n    contentComponent:\n        Column {\n            id: column\n            spacing: Style.sizeControlSpacing\n            StringEditorSingleLine {\n                stringDecorator: address.ui_building\n                anchors {\n                    left: parent.left\n                    right: parent.right\n                }\n            }\n            StringEditorSingleLine {\n                stringDecorator: address.ui_street\n                anchors {\n                    left: parent.left\n                    right: parent.right\n                }\n            }\n            StringEditorSingleLine {\n                stringDecorator: address.ui_city\n                anchors {\n                    left: parent.left\n                    right: parent.right\n                }\n            }\n            StringEditorSingleLine {\n                stringDecorator: address.ui_postcode\n                anchors {\n                    left: parent.left\n                    right: parent.right\n                }\n            }\n        }\n}\n```", "```cpp\nimport QtQuick 2.9\nimport QtQuick.Controls 2.2\nimport CM 1.0\nimport assets 1.0\nimport components 1.0\n\nItem {\n    property Client newClient: masterController.ui_newClient\n\n    Column {\n        spacing: Style.sizeScreenMargin\n        anchors {\n            left: parent.left\n            right: parent.right\n            top: parent.top\n            margins: Style.sizeScreenMargin\n        }\n        Panel {\n            headerText: \"Client Details\"\n            contentComponent:\n                Column {\n                    spacing: Style.sizeControlSpacing\n                    StringEditorSingleLine {\n                        stringDecorator: newClient.ui_reference\n                        anchors {\n                            left: parent.left\n                            right: parent.right\n                        }\n                    }\n                    StringEditorSingleLine {\n                        stringDecorator: newClient.ui_name\n                        anchors {\n                            left: parent.left\n                            right: parent.right\n                        }\n                    }\n                }\n        }\n        AddressEditor {\n            address: newClient.ui_supplyAddress\n            headerText: \"Supply Address\"\n        }\n        AddressEditor {\n            address: newClient.ui_billingAddress\n            headerText: \"Billing Address\"\n        }\n    }\n    CommandBar {\n        commandList: masterController.ui_commandController.ui_createClientViewContextCommands\n    }\n}\n```", "```cpp\nRectangle {\n    width: Style.widthDataControls\n    height: Style.heightDataControls\n    color: Style.colourPanelBackground\n    Text {\n        id: textLabel\n        \u2026\n    }\n}\n```", "```cpp\n#ifndef CLIENTSEARCH_H\n#define CLIENTSEARCH_H\n\n#include <QScopedPointer>\n\n#include <cm-lib_global.h>\n#include <controllers/i-database-controller.h>\n#include <data/string-decorator.h>\n#include <data/entity.h>\n#include <data/entity-collection.h>\n#include <models/client.h>\n\nnamespace cm {\nnamespace models {\n\nclass CMLIBSHARED_EXPORT ClientSearch : public data::Entity\n{\n    Q_OBJECT\n    Q_PROPERTY( cm::data::StringDecorator* ui_searchText READ \n                                           searchText CONSTANT )\n    Q_PROPERTY( QQmlListProperty<cm::models::Client> ui_searchResults \n                READ ui_searchResults NOTIFY searchResultsChanged )\n\npublic:\n    ClientSearch(QObject* parent = nullptr, \n    controllers::IDatabaseController* databaseController = nullptr);\n    ~ClientSearch();\n\n    data::StringDecorator* searchText();\n    QQmlListProperty<Client> ui_searchResults();\n    void search();\n\nsignals:\n    void searchResultsChanged();\n\nprivate:\n    class Implementation;\n    QScopedPointer<Implementation> implementation;\n};\n\n}}\n\n#endif\n```", "```cpp\n#include \"client-search.h\"\n#include <QDebug>\n\nusing namespace cm::controllers;\nusing namespace cm::data;\n\nnamespace cm {\nnamespace models {\n\nclass ClientSearch::Implementation\n{\npublic:\n    Implementation(ClientSearch* _clientSearch, IDatabaseController* \n                                                _databaseController)\n        : clientSearch(_clientSearch)\n        , databaseController(_databaseController)\n    {\n    }\n\n    ClientSearch* clientSearch{nullptr};\n    IDatabaseController* databaseController{nullptr};\n    data::StringDecorator* searchText{nullptr};\n    data::EntityCollection<Client>* searchResults{nullptr};\n};\n\nClientSearch::ClientSearch(QObject* parent, IDatabaseController* databaseController)\n    : Entity(parent, \"ClientSearch\")\n{\n    implementation.reset(new Implementation(this, databaseController));\n    implementation->searchText = static_cast<StringDecorator*>(addDataItem(new StringDecorator(this, \"searchText\", \"Search Text\")));\n    implementation->searchResults = static_cast<EntityCollection<Client>*>(addChildCollection(new EntityCollection<Client>(this, \"searchResults\")));\n\n    connect(implementation->searchResults, &EntityCollection<Client>::collectionChanged, this, &ClientSearch::searchResultsChanged);\n}\n\nClientSearch::~ClientSearch()\n{\n}\n\nStringDecorator* ClientSearch::searchText()\n{\n    return implementation->searchText;\n}\n\nQQmlListProperty<Client> ClientSearch::ui_searchResults()\n{\n    return QQmlListProperty<Client>(this, implementation->searchResults->derivedEntities());\n}\n\nvoid ClientSearch::search()\n{\n    qDebug() << \"Searching for \" << implementation->searchText->value() << \"...\";\n}\n\n}}\n```", "```cpp\nqmlRegisterType<cm::models::ClientSearch>(\"CM\", 1, 0, \"ClientSearch\");\n```", "```cpp\nimport QtQuick 2.9\nimport assets 1.0\nimport CM 1.0\nimport components 1.0\n\nItem {\n    property ClientSearch clientSearch: masterController.ui_clientSearch\n\n    Rectangle {\n        anchors.fill: parent\n        color: Style.colourBackground\n\n        Panel {\n            id: searchPanel\n            anchors {\n                left: parent.left\n                right: parent.right\n                top: parent.top\n                margins: Style.sizeScreenMargin\n            }\n            headerText: \"Find Clients\"\n            contentComponent:\n                StringEditorSingleLine {\n                    stringDecorator: clientSearch.ui_searchText\n                    anchors {\n                        left: parent.left\n                        right: parent.right\n                    }\n                }\n        }\n    }\n}\n```", "```cpp\nCommandController::CommandController(QObject* parent, IDatabaseController* databaseController, Client* newClient, ClientSearch* clientSearch)\n    : QObject(parent)\n{\n    implementation.reset(new Implementation(this, databaseController, newClient, clientSearch));\n}\n```", "```cpp\ncommandController = new CommandController(masterController, databaseController, newClient, clientSearch);\n```", "```cpp\nvoid CommandController::onFindClientSearchExecuted()\n{\n    qDebug() << \"You executed the Search command!\";\n\n    implementation->clientSearch->search();\n}\n```", "```cpp\nCommand* findClientSearchCommand = new Command( commandController, QChar( 0xf002 ), \"Search\" );\nQObject::connect( findClientSearchCommand, &Command::executed, commandController, &CommandController::onFindClientSearchExecuted );\nfindClientViewContextCommands.append( findClientSearchCommand );\n```", "```cpp\nCommandBar {\n    commandList: masterController.ui_commandController.ui_findClientViewContextCommands\n} \n```", "```cpp\nYou executed the Search command!\nSearching for \"Testing\"...\n```", "```cpp\nvoid ClientSearch::search()\n{\n    qDebug() << \"Searching for \" << implementation->searchText->value() \n                                 << \"...\";\n\n    auto resultsArray = implementation->databaseController-\n         >find(\"client\", implementation->searchText->value());\n    implementation->searchResults->update(resultsArray);\n\n    qDebug() << \"Found \" << implementation->searchResults-\n             >baseEntities().size() << \" matches\";\n}\n```", "```cpp\nListView {\n    id: itemsView\n    anchors {\n        top: searchPanel.bottom\n        left: parent.left\n        right: parent.right\n        bottom: parent.bottom\n        margins: Style.sizeScreenMargin\n    }\n    clip: true\n    model: clientSearch.ui_searchResults\n    delegate:\n        Text {\n            text: modelData.ui_reference.ui_label + \": \" + \n                  modelData.ui_reference.ui_value\n            font.pixelSize: Style.pixelSizeDataControls\n            color: Style.colourPanelFont\n        }\n}\n```", "```cpp\nimport QtQuick 2.9\nimport assets 1.0\nimport CM 1.0\n\nItem {\n    property Client client\n\n    implicitWidth: parent.width\n    implicitHeight: Math.max(clientColumn.implicitHeight, \n    textAddress.implicitHeight) + (Style.heightDataControls / 2)\n\n    Rectangle {\n        id: background\n        width: parent.width\n        height: parent.height\n        color: Style.colourPanelBackground\n\n        Column {\n            id: clientColumn\n            width: parent / 2\n            anchors {\n                left: parent.left\n                top: parent.top\n                margins: Style.heightDataControls / 4\n            }\n            spacing: Style.heightDataControls / 2\n\n            Text {\n                id: textReference\n                anchors.left: parent.left\n                text: client.ui_reference.ui_label + \": \" + \n                      client.ui_reference.ui_value\n                font.pixelSize: Style.pixelSizeDataControls\n                color: Style.colourPanelFont\n            }\n            Text {\n                id: textName\n                anchors.left: parent.left\n                text: client.ui_name.ui_label + \": \" + \n                      client.ui_name.ui_value\n                font.pixelSize: Style.pixelSizeDataControls\n                color: Style.colourPanelFont\n            }\n        }\n\n        Text {\n            id: textAddress\n            anchors {\n                top: parent.top\n                right: parent.right\n                margins: Style.heightDataControls / 4\n            }\n            text: client.ui_supplyAddress.ui_fullAddress\n            font.pixelSize: Style.pixelSizeDataControls\n            color: Style.colourPanelFont\n            horizontalAlignment: Text.AlignRight\n        }\n\n        Rectangle {\n            id: borderBottom\n            anchors {\n                bottom: parent.bottom\n                left: parent.left\n                right: parent.right\n            }\n            height: 1\n            color: Style.colourPanelFont\n        }\n\n        MouseArea {\n            anchors.fill: parent\n            cursorShape: Qt.PointingHandCursor\n            hoverEnabled: true\n            onEntered: background.state = \"hover\"\n            onExited: background.state = \"\"\n            onClicked: masterController.selectClient(client)\n        }\n\n        states: [\n            State {\n                name: \"hover\"\n                PropertyChanges {\n                    target: background\n                    color: Style.colourPanelBackgroundHover\n                }\n            }\n        ]\n    }\n}\n```", "```cpp\nListView {\n    id: itemsView\n    ...\n    delegate:\n        SearchResultDelegate {\n            client: modelData\n        }\n}\n```", "```cpp\npublic slots:\n    void selectClient(cm::models::Client* client);\n```", "```cpp\nvoid MasterController::selectClient(Client* client)\n{\n    implementation->navigationController->goEditClientView(client);\n}\n```", "```cpp\nvoid CommandController::onEditClientSaveExecuted()\n{\n    qDebug() << \"You executed the Save command!\";\n}\n```", "```cpp\nCommand* editClientSaveCommand = new Command( commandController, QChar( 0xf0c7 ), \"Save\" );\nQObject::connect( editClientSaveCommand, &Command::executed, commandController, &CommandController::onEditClientSaveExecuted );\neditClientViewContextCommands.append( editClientSaveCommand );\n```", "```cpp\nClient* selectedClient{nullptr};\n```", "```cpp\nvoid CommandController::setSelectedClient(cm::models::Client* client)\n{\n    implementation->selectedClient = client;\n}\n```", "```cpp\nvoid CommandController::onEditClientSaveExecuted()\n{\n    qDebug() << \"You executed the Save command!\";\n\n    implementation->databaseController->updateRow(implementation->selectedClient->key(), implementation->selectedClient->id(), implementation->selectedClient->toJson());\n\n    qDebug() << \"Updated client saved.\";\n}\n```", "```cpp\nimport QtQuick 2.9\nimport QtQuick.Controls 2.2\nimport CM 1.0\nimport assets 1.0\nimport components 1.0\n\nItem {\n    property Client selectedClient\n    Component.onCompleted: masterController.ui_commandController.setSelectedClient(selectedClient)\n\n    Rectangle {\n        anchors.fill: parent\n        color: Style.colourBackground\n    }\n\n    ScrollView {\n        id: scrollView\n        anchors {\n            left: parent.left\n            right: parent.right\n            top: parent.top\n            bottom: commandBar. top\n            margins: Style.sizeScreenMargin\n        }\n        clip: true\n\n        Column {\n            spacing: Style.sizeScreenMargin\n            width: scrollView.width\n\n            Panel {\n                headerText: \"Client Details\"\n                contentComponent:\n                    Column {\n                        spacing: Style.sizeControlSpacing\n                        StringEditorSingleLine {\n                            stringDecorator: \n                            selectedClient.ui_reference\n                            anchors {\n                                left: parent.left\n                                right: parent.right\n                            }\n                        }\n                        StringEditorSingleLine {\n                            stringDecorator: selectedClient.ui_name\n                            anchors {\n                                left: parent.left\n                                right: parent.right\n                            }\n                        }\n                    }\n            }\n\n            AddressEditor {\n                address: selectedClient.ui_supplyAddress\n                headerText: \"Supply Address\"\n            }\n\n            AddressEditor {\n                address: selectedClient.ui_billingAddress\n                headerText: \"Billing Address\"\n            }\n        }\n    }\n\n    CommandBar {\n        id: commandBar\n        commandList: masterController.ui_commandController.ui_editClientViewContextCommands\n    }\n}\n```", "```cpp\nvoid CommandController::onEditClientDeleteExecuted()\n{\n    qDebug() << \"You executed the Delete command!\";\n\n    implementation->databaseController->deleteRow(implementation->selectedClient->key(), implementation->selectedClient->id());\n    implementation->selectedClient = nullptr;\n\n    qDebug() << \"Client deleted.\";\n\n    implementation->clientSearch->search();\n}\n```", "```cpp\nvoid CommandController::onEditClientDeleteExecuted()\n{\n    ...\n\n    implementation->navigationController->goDashboardView();\n}\n```", "```cpp\nvoid CommandController::onCreateClientSaveExecuted()\n{\n    ...\n\n    implementation->clientSearch->searchText()-\n                   >setValue(implementation->newClient->id());\n    implementation->clientSearch->search();\n    implementation->navigationController->goFindClientView();\n}\n```", "```cpp\nCommand* editClientDeleteCommand = new Command( commandController, QChar( 0xf235 ), \"Delete\" );\nQObject::connect( editClientDeleteCommand, &Command::executed, commandController, &CommandController::onEditClientDeleteExecuted );\neditClientViewContextCommands.append( editClientDeleteCommand );\n```", "```cpp\nStringEditorSingleLine {\n    property StringDecorator temporaryObject\n    stringDecorator: selectedClient ? selectedClient.ui_reference : \n    temporaryObject\n    anchors {\n        left: parent.left\n        right: parent.right\n    }\n}\n```", "```cpp\nproperty Client selectedClient\nproperty Client localTemporaryClient\nproperty Client clientToBindTo: selectedClient ? selectedClient : localTemporaryClient\n```"]