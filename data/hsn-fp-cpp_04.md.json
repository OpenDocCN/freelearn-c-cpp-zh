["```cpp\ndef add = {first, second -> first + second}\nadd(1,2) //returns 3\n```", "```cpp\ndef first = 5\ndef addToFirst = {second -> first + second}\naddToFirst(10) // returns 5 + 10 = 15\n```", "```cpp\nint main(){\n    auto add = [](int first, int second){ return first + second;};\n    cout << add(1,2) << endl; // writes 3\n}\n```", "```cpp\n    auto add = [](int first, int second) -> int { return first +   \n        second;};\n```", "```cpp\nint main(){\n    int first = 5;\n    auto addToFirst = [](int second){ return first + second;}; \n    // error: variable 'first' cannot be implicitly captured \n    cout << add(10) << endl;\n}\n```", "```cpp\nint main(){\n    int first = 5;\n    auto addToFirst = [first](int second){ return first + second;};\n    cout << addToFirst(10) << endl; // writes 15\n}\n```", "```cpp\nint main(){\n    int first = 5;\n    auto addToFirstByReference = [&first](int second){ return first + \n        second;};\n    cout << addToFirstByReference(10) << endl; // writes 15\n}\n```", "```cpp\n    int second = 6;\n    int third = 7;\n    int fourth = 8;\n    int fifth = 9;\n\n    auto addTheFive = [&first, &second, &third, &fourth, &fifth]()   \n    {return first + second + third + fourth + fifth;};\n    cout << addTheFive() << endl; // writes 35\n```", "```cpp\n    auto addTheFiveWithDefaultReferenceCapture = [&](){return first + second + third + fourth + fifth;};\n    cout << addTheFiveWithDefaultReferenceCapture() << endl; // writes 35\n```", "```cpp\nauto addTheFiveWithDefaultValueCapture = [=](){return first + \nsecond + third + fourth + fifth;};\ncout << addTheFiveWithDefaultValueCapture() << endl; // writes 35\n```", "```cpp\nauto addTheFiveWithDefaultValueCaptureForAllButFirst = [=, &first](){return first + second + third + fourth + fifth;};\ncout << addTheFiveWithDefaultValueCaptureForAllButFirst() << endl; // writes 35\n```", "```cpp\n    int* pFirst = new int(5);\n    auto addToThePointerValue = [pFirst](int second){return *pFirst + \n        second;};\n    cout << addToThePointerValue(10) << endl; // writes 15\n    delete pFirst;\n```", "```cpp\nauto addToThePointerValue = [&pFirst](int second){return *pFirst + \n    second;};\n```", "```cpp\n auto addToThePointerValue = [=](int second){return *pFirst + second;};\n```", "```cpp\n    auto addToThePointerValue = [&](int second){return *pFirst + \n    second;};\n```", "```cpp\nauto increment = [](int value) { \n    return ++value;\n};\n```", "```cpp\n    int valueToIncrement = 41;\n    cout << increment(valueToIncrement) << endl;// prints 42\n    cout << valueToIncrement << endl;// prints 41\n```", "```cpp\nauto incrementImmutable = [](const int value) { \n    return value + 1;\n};\n```", "```cpp\nauto increment = [](int& value) { \n    return ++value;\n};\n```", "```cpp\nint valueToIncrement = 41;\ncout << increment(valueToIncrement) << endl;// prints 42\ncout << valueToIncrement << endl;// prints 42\n```", "```cpp\nauto incrementImmutable = [](const int& value){\n    return value + 1;\n};\n```", "```cpp\nauto incrementAddress = [](int* value) { \n    return ++value;\n};\n\nint main(){\n    int* pValue = new int(41);\n    cout << \"Address before:\" << pValue << endl;\n    cout << \"Address returned by increment address:\" <<   \n    incrementAddress(pValue) << endl;\n    cout << \"Address after increment address:\" << pValue << endl;\n}\n\nOutput:\nAddress before:0x55835628ae70\nAddress returned by increment address:0x55835628ae74\nAddress after increment address:0x55835628ae70\n```", "```cpp\nauto incrementAddressByReference = [](int*& value) { \n    return ++value;\n};\n\nvoid printResultsForIncrementAddressByReference(){\n    int* pValue = new int(41);\n    int* initialPointer = pValue;\n    cout << \"Address before:\" << pValue << endl;\n    cout << \"Address returned by increment address:\" <<    \n    incrementAddressByReference(pValue) << endl;\n    cout << \"Address after increment address:\" << pValue << endl;\n    delete initialPointer;\n}\n\nOutput:\nAddress before:0x55d0930a2e70\nAddress returned by increment address:0x55d0930a2e74\nAddress after increment address:0x55d0930a2e74\n```", "```cpp\nauto incrementAddressByReferenceImmutable = [](int* const& value) { \n    return value + 1;\n};\n\nOutput:\nAddress before:0x557160931e80\nAddress returned by increment address:0x557160931e84\nAddress after increment address:0x557160931e80\n```", "```cpp\nauto incrementPointedValueImmutable = [](const int* const& value) { \n    return *value + 1;\n};\n```", "```cpp\nauto hello = [](){cout << \"Hello, world!\" << endl;};\n\nint main(){\n    hello();\n}\n```", "```cpp\nint value = 1;\nauto increment = [=](){return ++value;};\n```", "```cpp\nvoid captureByReference(){\n    int value = 1;\n    auto increment = [&](){return ++value;};\n\n    cout << \"Value before: \" << value << endl;\n    cout << \"Result of increment:\" << increment() << endl;\n    cout << \"Value after: \" << value << endl;\n}\n\nOutput:\nValue before: 1\nResult of increment:2\nValue after: 2\n```", "```cpp\n#include <utility>\nusing namespace std;\n...\n\n    int value = 1;\n    auto increment = [&immutableValue = as_const(value)](){return  \n        immutableValue + 1;};\n\nOutput:\nValue before: 1\nResult of increment:2\nValue after: 1\n```", "```cpp\n    int* pValue = new int(1);\n    auto incrementAddress = [=](){return ++pValue;}; // compilation \n    error\n```", "```cpp\n    int* pValue = new int(1);\n    auto increment= [=](){return ++(*pValue);};\n\nOutput:\nValue before: 1\nResult of increment:2\nValue after: 2\n```", "```cpp\n    const int* pValue = new int(1);\n    auto increment= [=](){return ++(*pValue);}; // compilation error\n```", "```cpp\n int* pValue = new int(1);\n int value = *pValue;\n auto increment = [=](){return ++value;}; // compilation error\n```", "```cpp\n auto increment = [&](){return ++pValue;};\n```", "```cpp\n auto increment = [&pImmutable = as_const(pValue)](){return pImmutable \n    + 1;};\n```", "```cpp\nclass ImaginaryNumber{\n    private:\n        int real;\n        int imaginary;\n\n    public:\n        ImaginaryNumber() : real(0), imaginary(0){};\n        ImaginaryNumber(int real, int imaginary) : real(real), \n        imaginary(imaginary){};\n};\n```", "```cpp\nstring toString(){\n    return to_string(real) + \" + \" + to_string(imaginary) + \"i\";\n}\n```", "```cpp\nclass ImaginaryNumber{\n...\n    public:\n        auto toStringLambda = [](){\n            return to_string(real) + \" + \" + to_string(imaginary) +  \n             \"i\";\n        };\n...\n}\n```", "```cpp\ninclude <functional>\n...\n    public:\n        function<string()> toStringLambda = [](){\n            return to_string(real) + \" + \" + to_string(imaginary) +    \n            \"i\";\n        };\n```", "```cpp\n function<string()> toStringLambda = [this](){\n     return to_string(real) + \" + \" + to_string(imaginary) + \n     \"i\";\n };\n```", "```cpp\n    static function<string(const ImaginaryNumber&)>   \n         toStringLambdaStatic;\n...\n// after class declaration ends\nfunction<string(const ImaginaryNumber&)> ImaginaryNumber::toStringLambdaStatic = [](const ImaginaryNumber& number){\n    return to_string(number.real) + \" + \" + to_string(number.imaginary)  \n        + \"i\";\n};\n\n// Call it\ncout << ImaginaryNumber::toStringLambdaStatic(Imaginary(1,1)) << endl;\n// prints 1+1i\n```", "```cpp\nstatic string toStringStatic(const ImaginaryNumber& number){\n    return to_string(number.real) + \" + \" + to_string(number.imaginary)  \n    + \"i\";\n }\nstring toStringUsingLambda(){\n    auto toStringLambdaLocal = ImaginaryNumber::toStringStatic;\n    return toStringLambdaLocal(*this);\n}\n```", "```cpp\n  auto toStringLambdaLocal = ImaginaryNumber::toStringStatic;\n```", "```cpp\nfunction<string(const ImaginaryNumber&)> ImaginaryNumber::toStringLambdaStatic = [](const ImaginaryNumber& number){\n    return to_string(number.real) + \" + \" + to_string(number.imaginary)  \n        + \"i\";\n};\n```", "```cpp\nauto toImaginaryString = [](auto real, auto imaginary){\n    return to_string(real) + \" + \" + to_string(imaginary) + \"i\";\n};\n```"]