["```cpp\n    #include <QPropertyAnimation>\n    ```", "```cpp\n    QPropertyAnimation *animation = new QPropertyAnimation(ui->pushButton, \"geometry\");\n    animation->setDuration(10000);\n    animation->setStartValue(ui->pushButton->geometry());\n    animation->setEndValue(QRect(200, 200, 100, 50));\n    animation->start();\n    ```", "```cpp\n    QPropertyAnimation *animation = new QPropertyAnimation(ui->pushButton, \"geometry\");\n    animation->setDuration(3000);\n    animation->setStartValue(ui->pushButton->geometry());\n    animation->setEndValue(QRect(200, 200, 100, 50));\n    QEasingCurve curve;\n    curve.setType(QEasingCurve::OutBounce);\n    animation->setEasingCurve(curve);\n    animation->start();\n    ```", "```cpp\n    QPropertyAnimation *animation = new QPropertyAnimation(ui->pushButton, \"geometry\");\n    animation->setDuration(3000);\n    animation->setStartValue(ui->pushButton->geometry());\n    animation->setEndValue(QRect(200, 200, 100, 50));\n    QEasingCurve curve;\n    Curve.setType(EasingCurve::OutBounce);\n    animation->setEasingCurve(curve);\n    animation->setLoopCount(2);\n    animation->start();\n    ```", "```cpp\n    QEasingCurve curve;\n    curve.setType(QEasingCurve::OutBounce);\n    curve.setAmplitude(1.00);\n    curve.setOvershoot(1.70);\n    curve.setPeriod(0.30);\n    animation->setEasingCurve(curve);\n    animation->start();\n    ```", "```cpp\nanimation->setEasingCurve(QEasingCurve::OutBounce);\n```", "```cpp\nanimation->setLoopCount(-1);\n```", "```cpp\n    QPropertyAnimation *animation1 = new QPropertyAnimation(ui->pushButton, \"geometry\");\n    animation1->setDuration(3000);\n    animation1->setStartValue(ui->pushButton->geometry());\n    animation1->setEndValue(QRect(50, 200, 100, 50));\n\n    QPropertyAnimation *animation2 = new QPropertyAnimation(ui->pushButton_2, \"geometry\");\n    animation2->setDuration(3000);\n    animation2->setStartValue(ui->pushButton_2->geometry());\n    animation2->setEndValue(QRect(150, 200, 100, 50));\n\n    QPropertyAnimation *animation3 = new QPropertyAnimation(ui->pushButton_3, \"geometry\");\n    animation3->setDuration(3000);\n    animation3->setStartValue(ui->pushButton_3->geometry());\n    animation3->setEndValue(QRect(250, 200, 100, 50));\n    ```", "```cpp\n    QEasingCurve curve;\n    curve.setType(QEasingCurve::OutBounce);\n    curve.setAmplitude(1.00);\n    curve.setOvershoot(1.70);\n    curve.setPeriod(0.30);\n\n    animation1->setEasingCurve(curve);\n    animation2->setEasingCurve(curve);\n    animation3->setEasingCurve(curve);\n    ```", "```cpp\n    QParallelAnimationGroup *group = new QParallelAnimationGroup;group->addAnimation(animation1);\n    group->addAnimation(animation2);\n    group->addAnimation(animation3);\n    ```", "```cpp\n    group->start();\n    ```", "```cpp\nQSequentialAnimationGroup *group = new QSequentialAnimationGroup;\n```", "```cpp\ngroup->addAnimation(animation3);\ngroup->addAnimation(animation2);\ngroup->addAnimation(animation1);\n```", "```cpp\n    QPropertyAnimation *animation1 = new QPropertyAnimation(ui->pushButton, \"geometry\");\n    animation1->setDuration(3000);\n    animation1->setStartValue(ui->pushButton->geometry());\n    animation1->setEndValue(QRect(50, 50, 100, 50));\n\n    QPropertyAnimation *animation2 = new QPropertyAnimation(ui->pushButton_2, \"geometry\");\n    animation2->setDuration(3000);\n    animation2->setStartValue(ui->pushButton_2->geometry());\n    animation2->setEndValue(QRect(150, 50, 100, 50));\n\n    QPropertyAnimation *animation3 = new QPropertyAnimation(ui->pushButton_3, \"geometry\");\n    animation3->setDuration(3000);\n    animation3->setStartValue(ui->pushButton_3->geometry());\n    animation3->setEndValue(QRect(250, 50, 100, 50));\n\n    QPropertyAnimation *animation4 = new QPropertyAnimation(ui->pushButton_4, \"geometry\");\n    animation4->setDuration(3000);\n    animation4->setStartValue(ui->pushButton_4->geometry());\n    animation4->setEndValue(QRect(50, 200, 100, 50));\n\n    QPropertyAnimation *animation5 = new QPropertyAnimation(ui->pushButton_5, \"geometry\");\n    animation5->setDuration(3000);\n    animation5->setStartValue(ui->pushButton_5->geometry());\n    animation5->setEndValue(QRect(150, 200, 100, 50));\n\n    QPropertyAnimation *animation6 = new QPropertyAnimation(ui->pushButton_6, \"geometry\");\n    animation6->setDuration(3000);\n    animation6->setStartValue(ui->pushButton_6->geometry());\n    animation6->setEndValue(QRect(250, 200, 100, 50));\n\n    QEasingCurve curve;\n    curve.setType(QEasingCurve::OutBounce);\n    curve.setAmplitude(1.00);\n    curve.setOvershoot(1.70);\n    curve.setPeriod(0.30);\n\n    animation1->setEasingCurve(curve);\n    animation2->setEasingCurve(curve);\n    animation3->setEasingCurve(curve);\n    animation4->setEasingCurve(curve);\n    animation5->setEasingCurve(curve);\n    animation6->setEasingCurve(curve);\n    ```", "```cpp\n    QParallelAnimationGroup *group1 = new QParallelAnimationGroup;\n    group1->addAnimation(animation1);\n    group1->addAnimation(animation2);\n    group1->addAnimation(animation3);\n\n    QParallelAnimationGroup *group2 = new QParallelAnimationGroup;\n    group2->addAnimation(animation4);\n    group2->addAnimation(animation5);\n    group2->addAnimation(animation6);\n    ```", "```cpp\n    QSequentialAnimationGroup *groupAll = new QSequentialAnimationGroup;\n    groupAll->addAnimation(group1);\n    groupAll->addAnimation(group2);\n    groupAll->start();\n    ```", "```cpp\n    #include <QStateMachine>\n    #include <QPropertyAnimation>\n    #include <QEventTransition>\n    ```", "```cpp\n    QStateMachine *machine = new QStateMachine(this);\n    QState *s1 = new QState();\n    QState *s2 = new QState();\n    ```", "```cpp\n    QState *s1 = new QState();\n    s1->assignProperty(ui->stateLabel, \"text\", \"Current state: 1\");\n    s1->assignProperty(ui->pushButton, \"geometry\", QRect(50, 200, 100, 50));\n\n    QState *s2 = new QState();\n    s2->assignProperty(ui->stateLabel, \"text\", \"Current state: 2\");\n    s2->assignProperty(ui->pushButton, \"geometry\", QRect(200, 50, 140, 100));\n\n    ```", "```cpp\n    QEventTransition *t1 = new QEventTransition(ui->changeState, QEvent::MouseButtonPress);\n    t1->setTargetState(s2);\n    s1->addTransition(t1);\n\n    QEventTransition *t2 = new QEventTransition(ui->changeState, QEvent::MouseButtonPress);\n    T2->setTargetState(s1);\n    s2->addTransition(t2);\n    ```", "```cpp\n    machine->addState(s1);\n    machine->addState(s2);\n\n    machine->setInitialState(s1);\n    machine->start();\n    ```", "```cpp\n    QEventTransition *t1 = new QEventTransition(ui->changeState, QEvent::MouseButtonPress);\n    t1->setTargetState(s2);\n    t1->addAnimation(new QPropertyAnimation(ui->pushButton, \"geometry\"));\n    s1->addTransition(t1);\n\n    QEventTransition *t2 = new QEventTransition(ui->changeState, QEvent::MouseButtonPress);\n    t2->setTargetState(s1);\n    t2->addAnimation(new QPropertyAnimation(ui->pushButton, \"geometry\"));\n    s2->addTransition(t2);\n    ```", "```cpp\n    QPropertyAnimation *animation = new QPropertyAnimation(ui->pushButton, \"geometry\");\n    animation->setEasingCurve(QEasingCurve::OutBounce);\n    QEventTransition *t1 = new QEventTransition(ui->changeState, QEvent::MouseButtonPress);\n    t1->setTargetState(s2);\n    t1->addAnimation(animation);\n    s1->addTransition(t1);\n\n    QEventTransition *t2 = new QEventTransition(ui->changeState, QEvent::MouseButtonPress);\n    t2->setTargetState(s1);\n    t2->addAnimation(animation);\n    s2->addTransition(t2);\n    ```", "```cpp\n    import QtQuick 2.3\n    import QtQuick.Window 2.2\n\n    Window {\n      visible: true\n      width: 480;\n      height: 320;\n\n      Rectangle {\n        id: background;\n        anchors.fill: parent;\n        color: \"blue\";\n      }\n\n      Text {\n        text: qsTr(\"Hello World\");\n        anchors.centerIn: parent;\n        color: \"white\";\n        font.pointSize: 15;\n      }\n    }\n    ```", "```cpp\n    Rectangle {\n      id: background;\n      anchors.fill: parent;\n      color: \"blue\";\n      SequentialAnimation on color\n      {\n        ColorAnimation { to: \"yellow\"; duration: 1000 }\n        ColorAnimation { to: \"red\"; duration: 1000 }\n        ColorAnimation { to: \"blue\"; duration: 1000 }\n        loops: Animation.Infinite;\n      }\n    }\n    ```", "```cpp\n    Text {\n      text: qsTr(\"Hello World\");\n      anchors.centerIn: parent;\n      color: \"white\";\n      font.pointSize: 15;\n      SequentialAnimation on opacity {\n     NumberAnimation { to: 0.0; duration: 200}\n     NumberAnimation { to: 1.0; duration: 200}\n     loops: Animation.Infinite;\n     }\n    }\n    ```", "```cpp\n    Text {\n      text: qsTr(\"Hello World\");\n      anchors.centerIn: parent;\n      color: \"white\";\n      font.pointSize: 15;\n      SequentialAnimation on opacity {\n        NumberAnimation { to: 0.0; duration: 200}\n        NumberAnimation { to: 1.0; duration: 200}\n        loops: Animation.Infinite;\n      }\n     NumberAnimation on rotation {\n     from: 0;\n     to: 360;\n     duration: 2000;\n     loops: Animation.Infinite;\n     }\n    }\n    ```", "```cpp\n    Rectangle {\n      id: background;\n      anchors.fill: parent;\n\n     state: \"RELEASED\";\n     states: [\n     State {\n     name: \"PRESSED\"\n     PropertyChanges { target: background; color: \"blue\"}\n     },\n     State {\n     name: \"RELEASED\"\n     PropertyChanges { target: background; color: \"red\"}\n     }\n     ]\n    }\n    ```", "```cpp\n    MouseArea {\n      anchors.fill: parent;\n      onPressed: background.state = \"PRESSED\";\n      onReleased: background.state = \"RELEASED\";\n    }\n    ```", "```cpp\n    transitions: [\n      Transition {\n        from: \"PRESSED\"\n        to: \"RELEASED\"\n        ColorAnimation { target: background; duration: 200}\n      },\n      Transition {\n        from: \"RELEASED\"\n        to: \"PRESSED\"\n        ColorAnimation { target: background; duration: 200}\n      }\n    ]\n    ```", "```cpp\n    Rectangle {\n      id: myBox;\n      width: 50;\n      height: 50;\n      anchors.horizontalCenter: parent.horizontalCenter;\n      anchors.verticalCenter: parent.verticalCenter;\n      color: \"blue\";\n\n      ScaleAnimator {\n        target: myBox;\n        from: 5;\n        to: 1;\n        duration: 2000;\n        running: true;\n      }\n    }\n    ```", "```cpp\n    ParallelAnimation {\n      ScaleAnimator {\n        target: myBox;\n        from: 5;\n        to: 1;\n        duration: 2000;\n      }\n      RotationAnimator {\n        target: myBox;\n        from: 0;\n        to: 360;\n        duration: 1000;\n      }\n      running: true;\n    }\n    ```", "```cpp\n    ScaleAnimator {\n      target: myBox;\n      from: 5;\n      to: 1;\n      duration: 2000;\n      easing.type: Easing.InOutElastic;\n     easing.amplitude: 2.0;\n     asing.period: 1.5;\n      running: true;\n    }\n    ```", "```cpp\n    import QtQuick 2.3\n    import QtQuick.Window 2.2\n\n    Window {\n      visible: true\n      width: 420\n      height: 380\n      Rectangle {\n        anchors.fill: parent\n        color: \"white\"\n      }\n    }\n    ```", "```cpp\n    import QtQuick 2.3\n    import QtQuick.Window 2.2\n\n    Window {\n      visible: true;\n      width: 420;\n      height: 380;\n      Rectangle {\n        anchors.fill: parent;\n        color: \"white\";\n      }\n\n     AnimatedSprite {\n     id: sprite;\n     width: 128;\n     height: 128;\n     anchors.centerIn: parent;\n     source: \"qrc:///horse_1.png\";\n     frameCount: 11;\n     frameWidth: 128;\n     frameHeight: 128;\n     frameRate: 25;\n     loops: Animation.Infinite;\n     running: true;\n     }\n    }\n    ```", "```cpp\n    MouseArea {\n      anchors.fill: parent;\n      onClicked: {\n        if (sprite.paused)\n          sprite.resume();\n        else\n          sprite.pause();\n      }\n    }\n    ```", "```cpp\n    AnimatedSprite {\n      id: sprite;\n      width: 128;\n      height: 128;\n      x: -128;\n      y: parent.height / 2;\n      source: \"qrc:///horse_1.png\";\n      frameCount: 11;\n      frameWidth: 128;\n      frameHeight: 128;\n      frameRate: 25;\n      loops: Animation.Infinite;\n      running: true;\n    }\n    ```", "```cpp\n    NumberAnimation {\n      target: sprite;\n      property: \"x\";\n      from: -128;\n      to: 512;\n      duration: 3000;\n      loops: Animation.Infinite;\n      running: true;\n    }\n    ```"]