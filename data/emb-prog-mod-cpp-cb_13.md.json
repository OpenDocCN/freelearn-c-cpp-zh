["```cpp\n#include <iostream>\n#include <system_error>\n#include <thread>\n#include <chrono>\n\n#include <pthread.h>\n\nusing namespace std::chrono_literals;\n```", "```cpp\nvoid ConfigureRealtime(pthread_t thread_id, int priority) {\n    sched_param sch;\n    sch.sched_priority = 20;\n    if (pthread_setschedparam(thread_id,\n                              SCHED_FIFO, &sch)) {\n        throw std::system_error(errno, \n                std::system_category(),\n                \"Failed to set real-time priority\");\n    }\n}\n```", "```cpp\nvoid Measure(const char* text) {\n    struct timespec prev;\n    timespec_get(&prev, TIME_UTC);\n    struct timespec delay{0, 10};\n    for (int i = 0; i < 100000; i++) {\n      nanosleep(&delay, nullptr);\n    }\n    struct timespec ts;\n    timespec_get(&ts, TIME_UTC);\n    double delta = (ts.tv_sec - prev.tv_sec) + \n        (double)(ts.tv_nsec - prev.tv_nsec) / 1000000000;\n    std::clog << text << \" completed in \" \n              << delta << \" sec\" << std::endl;\n}\n```", "```cpp\nvoid RealTimeThread(const char* txt) {\n    ConfigureRealtime(pthread_self(), 1);\n    Measure(txt);\n}\n\nint main() {\n    std::thread t1(RealTimeThread, \"Real-time\");\n    std::thread t2(Measure, \"Normal\");\n    t1.join();\n    t2.join();\n}\n```", "```cpp\ncmake_minimum_required(VERSION 3.5.1)\nproject(realtime)\nadd_executable(realtime realtime.cpp)\ntarget_link_libraries(realtime pthread)\n\nSET(CMAKE_CXX_FLAGS \"--std=c++14\") \nset(CMAKE_CXX_COMPILER /usr/bin/arm-linux-gnueabihf-g++)\n```", "```cpp\nvoid ConfigureRealtime(pthread_t thread_id, int priority) {\n```", "```cpp\n    if (pthread_setschedparam(thread_id,\n SCHED_FIFO, &sch)) {\n```", "```cpp\n    struct timespec delay{0, 10};\n    for (int i = 0; i < 100000; i++) {\n      nanosleep(&delay, nullptr);\n    }\n```", "```cpp\n    struct timespec ts;\n    timespec_get(&ts, TIME_UTC);\n    double delta = (ts.tv_sec - prev.tv_sec) + \n        (double)(ts.tv_nsec - prev.tv_nsec) / 1000000000;\n```", "```cpp\n    ConfigureRealtime(pthread_self(), 1);\n    Measure(txt);\n```", "```cpp\n#include <algorithm>\n#include <array>\n#include <iostream>\n#include <random>\n\nusing DataFrame = std::array<uint32_t, 8>;\n```", "```cpp\nvoid GenerateData(DataFrame& frame) {\n  std::random_device rd;\n std::generate(frame.begin(), frame.end(),\n [&rd]() { return rd() % 100; });\n}\n```", "```cpp\nvoid ProcessData(const DataFrame& frame) {\n  std::cout << \"Processing array of \"\n            << frame.size() << \" elements: [\";\n  for (auto x : frame) {\n    std::cout << x << \" \";\n  }\n  auto mm = std::minmax_element(frame.begin(),frame.end());\n  std::cout << \"] min: \" << *mm.first\n            << \", max: \" << *mm.second << std::endl;\n}\n```", "```cpp\nint main() {\n  DataFrame data;\n\n  for (int i = 0; i < 4; i++) {\n    GenerateData(data);\n    ProcessData(data);\n  }\n  return 0;\n}\n```", "```cpp\ncmake_minimum_required(VERSION 3.5.1)\nproject(array)\nadd_executable(array array.cpp)\n\nset(CMAKE_SYSTEM_NAME Linux)\nset(CMAKE_SYSTEM_PROCESSOR arm)\n\nSET(CMAKE_CXX_FLAGS_RELEASE \"--std=c++17\") \nSET(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_RELEASE} -g -DDEBUG\") \n\nset(CMAKE_C_COMPILER /usr/bin/arm-linux-gnueabihf-gcc)\nset(CMAKE_CXX_COMPILER /usr/bin/arm-linux-gnueabihf-g++)\n\nset(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\nset(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\nset(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nset(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n```", "```cpp\nusing DataFrame = std::array<uint32_t, 8>;\n```", "```cpp\nvoid GenerateData(DataFrame& frame) {\n```", "```cpp\n std::generate(frame.begin(), frame.end(),\n [&rd]() { return rd() % 100; });\n```", "```cpp\nvoid ProcessData(const DataFrame& frame) {\n```", "```cpp\n  for (auto x : frame) {\n    std::cout << x << \" \";\n  }\n```", "```cpp\nauto mm = std::minmax_element(frame.begin(),frame.end());\n```", "```cpp\nDataFrame data;\n```", "```cpp\nGenerateData(data);\nProcessData(data);\n```", "```cpp\n#include <iostream>\n#include <system_error>\n#include <variant>\n\n#include <unistd.h>\n#include <sys/fcntl.h>\n\ntemplate <typename T>\nclass Expected {\n  std::variant<T, std::error_code> v;\n\npublic:\n  Expected(T val) : v(val) {}\n  Expected(std::error_code e) : v(e) {}\n\n  bool valid() const {\n    return std::holds_alternative<T>(v);\n  }\n\n  const T& value() const {\n    return std::get<T>(v);\n  }\n\n  const std::error_code& error() const {\n    return std::get<std::error_code>(v);\n  }\n};\n```", "```cpp\nExpected<int> OpenForRead(const std::string& name) {\n  int fd = ::open(name.c_str(), O_RDONLY);\n  if (fd < 0) {\n    return Expected<int>(std::error_code(errno, \n                         std::system_category()));\n  }\n  return Expected<int>(fd);\n}\n```", "```cpp\nint main() {\n  auto result = OpenForRead(\"nonexistent.txt\");\n  if (result.valid()) {\n    std::cout << \"File descriptor\"\n              << result.value() << std::endl;\n  } else {\n    std::cout << \"Open failed: \" \n              << result.error().message() << std::endl;\n  }\n  return 0;\n}\n```", "```cpp\ncmake_minimum_required(VERSION 3.5.1)\nproject(expected)\nadd_executable(expected expected.cpp)\n\nset(CMAKE_SYSTEM_NAME Linux)\n#set(CMAKE_SYSTEM_PROCESSOR arm)\n\nSET(CMAKE_CXX_FLAGS \"--std=c++17\") \n\n#set(CMAKE_C_COMPILER /usr/bin/arm-linux-gnueabihf-gcc)\n#set(CMAKE_CXX_COMPILER /usr/bin/arm-linux-gnueabihf-g++)\n\nset(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\nset(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\nset(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nset(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n```", "```cpp\n  std::variant<T, std::error_code> v;\n```", "```cpp\n  bool valid() const {\n    return std::holds_alternative<T>(v);\n  }\n```", "```cpp\n  const T& value() const {\n    return std::get<T>(v);\n  }\n\n  const std::error_code& error() const {\n    return std::get<std::error_code>(v);\n  }\n```", "```cpp\n  if (fd < 0) {\n    return Expected<int>(std::error_code(errno, \n std::system_category()));\n  }\n  return Expected<int>(fd);\n```", "```cpp\n$ cd /mnt\n```", "```cpp\n$ wget -O simulator.zip http://interactive.freertos.org/attachments/token/r6d5gt3998niuc4/?name=Posix_GCC_Simulator_6.0.4.zip\n```", "```cpp\n$ unzip simulator.zip\n```", "```cpp\n$ cd Posix_GCC_Simulator/FreeRTOS_Posix/Debug\n```", "```cpp\n$ sed -i -e 's/\\(.*gcc.*\\)-lrt\\(.*\\)/\\1\\2 -lrt/' makefile\n```", "```cpp\n$ make\n```", "```cpp\n$ ./FreeRTOS_Posix\n```", "```cpp\n$ sed -i -e 's/\\(.*gcc.*\\)-lrt\\(.*\\)/\\1\\2 -lrt/' makefile\n```"]