- en: '*Chapter 5*: Cross-Platform Development'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第5章*：跨平台开发'
- en: Qt has been well known for its cross-platform capability since its initial release—it
    was the primary vision behind creating this framework. You can use Qt Creator
    on your favorite desktop platforms such as Windows, Linux, and macOS, and create
    fluid, modern, touch-friendly **graphical user interfaces** (**GUIs**) and desktop,
    mobile, or embedded applications with the same code base or with a little modification.
    You can easily modify your code and deploy it on a target platform. Qt has several
    built-in tools to analyze your application and its performance on various supported
    platforms. Furthermore, it's easy to use and has an intuitive **user interface**
    (**UI**), unlike with other cross-platform frameworks.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 自其最初发布以来，Qt以其跨平台能力而闻名——这是创建该框架的主要愿景。您可以在Windows、Linux和macOS等喜爱的桌面平台上使用Qt Creator，并使用相同的代码库或稍作修改创建流畅、现代、触摸友好的**图形用户界面**（**GUI**）和桌面、移动或嵌入式应用程序。您可以轻松修改您的代码并将其部署到目标平台上。Qt具有几个内置工具，可分析您的应用程序及其在各种支持的平台上的性能。此外，与其他跨平台框架不同，它易于使用，并且具有直观的**用户界面**（**UI**）。
- en: In this chapter, you will learn cross-platform development essentials and how
    to build applications on different platforms. With this, you will be able to run
    sample applications on your favorite desktop and mobile platforms.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习跨平台开发的基本知识以及如何在不同平台上构建应用程序。有了这些，您将能够在您喜爱的桌面和移动平台上运行示例应用程序。
- en: 'In this chapter, we''re going to cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Understanding cross-platform development
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解跨平台开发
- en: Understanding compilers
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解编译器
- en: Building with `qmake`
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`qmake`构建
- en: Qt project (`.pro`) files
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Qt项目（`.pro`）文件
- en: Understanding build settings
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解构建设置
- en: Platform-specific settings
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特定于平台的设置
- en: Using Qt with Microsoft Visual Studio
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Microsoft Visual Studio中使用Qt
- en: Running a Qt application on Linux
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Linux上运行Qt应用程序
- en: Running a Qt application on macOS and iOS
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在macOS和iOS上运行Qt应用程序
- en: Other Qt-supported platforms
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他Qt支持的平台
- en: Porting from Qt 5 into Qt 6
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从Qt 5迁移到Qt 6
- en: By the end of this chapter, you will understand Qt project files, essential
    settings, and how to run your Qt application on a mobile device. Let's get started!
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章结束时，您将了解Qt项目文件、基本设置以及如何在移动设备上运行Qt应用程序。让我们开始吧！
- en: Technical requirements
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The technical requirements for this chapter include minimum versions of Qt 6.0.0
    and Qt Creator 4.14.0 installed on a latest desktop platform such as Windows 10,
    Ubuntu 20.04, or macOS 10.14.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的技术要求包括在最新的桌面平台（如Windows 10、Ubuntu 20.04或macOS 10.14）上安装Qt 6.0.0和Qt Creator
    4.14.0的最低版本。
- en: 'All the code used in this chapter can be downloaded from the following GitHub
    link:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的所有代码都可以从以下GitHub链接下载：
- en: '[https://github.com/PacktPublishing/Cross-Platform-Development-with-Qt-6-and-Modern-Cpp/tree/master/Chapter05/HelloWorld](https://github.com/PacktPublishing/Cross-Platform-Development-with-Qt-6-and-Modern-Cpp/tree/master/Chapter05/HelloWorld)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Cross-Platform-Development-with-Qt-6-and-Modern-Cpp/tree/master/Chapter05/HelloWorld](https://github.com/PacktPublishing/Cross-Platform-Development-with-Qt-6-and-Modern-Cpp/tree/master/Chapter05/HelloWorld)'
- en: Important note
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: The screenshots used in this chapter are taken on the Windows platform. You
    will see similar screens based on the underlying platforms in your machine.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的屏幕截图是在Windows平台上拍摄的。您将在您的机器上看到基于底层平台的类似屏幕。
- en: Understanding cross-platform development
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解跨平台开发
- en: There are several cross-platform frameworks available on the market, but Qt
    is a better option to select owing to its maturity and available community support.
    It's easy for a traditional C++ developer to adapt to Qt faster and develop high-quality
    applications. The Qt framework allows developers to develop applications that
    are compatible with multiple platforms such as Windows, Linux, macOS, **QNX**
    (originally known as **Quick Unix** [**Qunix**]), iOS, and Android. It facilitates
    faster application development with better code quality, with its ability to code
    once and its deploy-anywhere philosophy. Qt handles platform-specific implementations
    internally, and also enables you to build amazing ultra-lightweight applications
    with an impressive GUI on microcontroller-powered devices.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 市场上有几种跨平台框架可供选择，但由于其成熟度和可用的社区支持，Qt是更好的选择。对于传统的C++开发人员来说，很容易适应Qt并开发高质量的应用程序。Qt框架允许开发人员开发与多个平台兼容的应用程序，如Windows、Linux、macOS、**QNX**（最初称为**Quick
    Unix** [**Qunix**]）、iOS和Android。它通过一次编码和随处部署的理念，促进更快的应用程序开发和更好的代码质量。Qt在内部处理特定于平台的实现，并且还能让您在微控制器驱动的设备上构建令人印象深刻的超轻量级应用程序。
- en: To develop applications using Qt for embedded platforms, you will require a
    commercial license to use **Qt for Device Creation**. Qt also supports some of
    the **microcontroller unit** (**MCU**) platforms such as Renesas, STM32, and NXP.
    At the time of writing this book, Qt for MCUs 1.8 was launched, which provides
    ultra-lightweight modules with a small memory footprint.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Qt开发嵌入式平台的应用程序，您将需要商业许可证来使用**Qt for Device Creation**。Qt还支持一些**微控制器单元**（**MCU**）平台，如瑞萨、STM32和NXP。在撰写本书时，Qt
    for MCUs 1.8已推出，提供了具有较小内存占用的超轻量级模块。
- en: 'Some advantages of cross-platform development using the Qt framework are listed
    here:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Qt框架进行跨平台开发的一些优势列在这里：
- en: Cost efficiency with reduced cost of development
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 降低开发成本的成本效益
- en: Better code reusability
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更好的代码可重用性
- en: Convenience
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 便利性
- en: Faster **time to market** (**TTM**)
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更快的**上市时间**（**TTM**）
- en: Wider market reach
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更广泛的市场覆盖
- en: Delivers a near-native experience
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供接近本机体验
- en: High on performance
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性能优越
- en: 'There are also some disadvantages, such as these:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 也有一些缺点，比如：
- en: Unavailability of platform-specific features and access to all platform **application
    programming interfaces** (**APIs**)
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无法使用特定于平台的功能和访问所有平台的**应用程序编程接口**（**API**）
- en: Communication challenges between native and non-native components
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本地和非本地组件之间的通信挑战
- en: Certain device-specific features and hardware-compatibility challenges
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特定设备功能和硬件兼容性挑战
- en: Delayed platform updates
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 延迟的平台更新
- en: In this section, you got a basic idea of the cross-platform nature of Qt and
    learned about the pros and cons of cross-platform development. Before you can
    run an application on any platform, you will need a compiler to compile an application
    for a target platform. In the next section, we will learn about compilers supported
    by the Qt framework.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您对Qt的跨平台特性有了基本了解，并了解了跨平台开发的利弊。在您可以在任何平台上运行应用程序之前，您需要一个编译器来为目标平台编译应用程序。在下一节中，我们将了解Qt框架支持的编译器。
- en: Understanding compilers
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解编译器
- en: In this section, you will learn what a compiler is and how to use it for cross-platform
    development. A compiler is a piece of software that transforms your program into
    machine code or low-level instructions that can be read and executed by a computer.
    These low-level machine instructions vary from platform to platform. You can compile
    Qt applications with different compilers such as the **GNU Compiler Collection**
    (**GCC**), or you can use a vendor-supplied one. In Qt Creator, you can find a
    compiler supported for a kit under the **Kits** tab, along with other essential
    tools for building an application on a particular platform such as Windows, Linux,
    or macOS. Not all supported compilers are provided with the Qt installer, but
    you can find the most widely used compilers automatically listed in the recommended
    kit. Qt may drop support for certain kit configurations or replace them with the
    latest version.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将学习什么是编译器，以及如何在跨平台开发中使用它。编译器是一种软件，它将您的程序转换为计算机可以读取和执行的机器代码或低级指令。这些低级机器指令因平台而异。您可以使用不同的编译器（如**GNU编译器集合**（**GCC**））编译Qt应用程序，或者使用供应商提供的编译器。在Qt
    Creator中，您可以在**Kits**选项卡下找到一个支持的编译器，以及在特定平台（如Windows、Linux或macOS）上构建应用程序所需的其他基本工具。并非所有支持的编译器都包含在Qt安装程序中，但您可以在推荐的工具包中自动列出最常用的编译器。Qt可能会停止支持某些工具包配置，或者用最新版本替换它们。
- en: 'Currently, Qt supports the following compilers:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，Qt支持以下编译器：
- en: GCC
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GCC
- en: '**Minimalist GNU for Windows** (**MinGW**)'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows的极简GNU**（**MinGW**）'
- en: '**Microsoft Visual C++** (**MSVC**)'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Microsoft Visual C++**（**MSVC**）'
- en: '**Low Level Virtual Machine** (**LLVM**)'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**低级虚拟机**（**LLVM**）'
- en: '**Intel C++ Compiler** (**ICC**)'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**英特尔C++编译器**（**ICC**）'
- en: '`clang-cl`'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clang-cl`'
- en: Nim
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Nim
- en: QCC
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: QCC
- en: 'Additionally, the **Qt Creator Bare Metal Device** plugin offers provision
    for the following compilers:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，**Qt Creator裸机设备**插件提供以下编译器的支持：
- en: '**IAR Embedded Workbench** (**IAREW**)'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IAR嵌入式工作台**（**IAREW**）'
- en: KEIL
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: KEIL
- en: '**Small Device C Compiler** (**SDCC**)'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**小型设备C编译器**（**SDCC**）'
- en: 'Apart from the preceding compilers, Qt uses specific built-in compilers while
    building a Qt project. These are listed here:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 除了上述编译器，Qt在构建Qt项目时还使用特定的内置编译器。这些列在这里：
- en: '`moc`)'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`moc`)'
- en: '`uic`)'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`uic`)'
- en: '`rcc`)'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rcc`)'
- en: You can use the aforementioned compilers to build applications for a target
    platform or to add a custom compiler configuration. In the next section, you will
    learn how to create a custom compiler configuration.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用上述编译器构建目标平台的应用程序，或者添加自定义编译器配置。在下一节中，您将学习如何创建自定义编译器配置。
- en: Adding custom compilers
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加自定义编译器
- en: To add a compiler that is not automatically detected by Qt Creator or is unavailable,
    use the **Custom** option. You can specify the compiler and toolchain paths to
    the directories and configure these accordingly.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加Qt Creator未自动检测到或不可用的编译器，请使用**自定义**选项。您可以指定编译器和工具链路径到相应的目录，并进行相应的配置。
- en: 'To add a custom compiler configuration, follow these steps:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加自定义编译器配置，请按照以下步骤操作：
- en: To create a new compiler configuration in Qt, click on the **Tools** menu on
    the menu bar and then select the **Kits** tab from the left-side pane.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在Qt中创建新的编译器配置，请单击菜单栏上的**工具**菜单，然后从左侧窗格中选择**Kits**选项卡。
- en: Then, click on the **Compilers** tab and select **Custom** from the **Add**
    dropdown. You will see **C** and **C++** options in the context menu. Select the
    type as per your requirement. You can see an overview of this in the following
    screenshot:![Figure 5.1 – Custom compiler option
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，单击**编译器**选项卡，并从**添加**下拉菜单中选择**自定义**。您将在上下文菜单中看到**C**和**C++**选项。根据您的需求选择类型。您可以在以下截图中看到这个概述：![图5.1-自定义编译器选项
- en: '](img/Figure_5.1_B16231.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.1_B16231.jpg)'
- en: Figure 5.1 – Custom compiler option
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.1-自定义编译器选项
- en: In the next step, complete the **Name** field with a customized name for the
    compiler.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一步中，使用自定义名称填写**名称**字段。
- en: Next, in the **Compiler path** field, select a path to the directory where the
    compiler is located.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在**编译器路径**字段中，选择编译器所在目录的路径。
- en: Next, in the `make` tool is located.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，指定`make`工具的位置。
- en: In the next step, specify the **application binary interface** (**ABI**) version
    in the **ABI** field.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一步中，在**ABI**字段中指定**应用程序二进制接口**（**ABI**）版本。
- en: 'You can see an overview of this in the following screenshot:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下截图中看到这个概述：
- en: '![Figure 5.2 – Required fields for a custom compiler'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.2-自定义编译器所需字段'
- en: '](img/Figure_5.2_B16231.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.2_B16231.jpg)'
- en: Figure 5.2 – Required fields for a custom compiler
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.2-自定义编译器所需字段
- en: Next, you can specify the default required macros in the `MACRO[=value]`.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，您可以在`MACRO[=value]`中指定默认所需的宏。
- en: In the next step, specify in the **Header paths** field the paths to directories
    that the compiler checks for headers.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一步中，在**头文件路径**字段中指定编译器检查头文件的路径。
- en: Next, in the `C++11` support.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在`C++11`支持中。
- en: In the next step, specify the location of `mkspecs` (a set of compilation rules)
    in the **Qt mkspecs** field.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一步中，在**Qt mkspecs**字段中指定`mkspecs`（一组编译规则）的位置。
- en: Next, in the **Error parser** field, select a suitable error parser.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在**错误解析器**字段中，选择合适的错误解析器。
- en: Click on the **Apply** button to save the configuration.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**应用**按钮以保存配置。
- en: In this section, you learned about supported compilers and how to create a new
    compiler configuration in Qt Creator, but to build and run a project we need more
    tools than just a compiler. Qt provides `qmake` as a built-in build tool for our
    convenience. In the next section, we will discuss what `qmake` is.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您了解了支持的编译器以及如何在Qt Creator中创建新的编译器配置，但是要构建和运行项目，我们需要比编译器更多的工具。Qt提供了`qmake`作为我们方便使用的内置构建工具。在下一节中，我们将讨论`qmake`是什么。
- en: Building with qmake
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用qmake构建
- en: '`Makefile` and builds executable programs and libraries. `qmake` is a Qt-provided
    build tool that simplifies the build process for development projects across multiple
    platforms. It expands the information in each project file to a `Makefile` that
    executes the necessary commands for compiling and linking. It can also be used
    for non-Qt projects. `qmake` generates a `Makefile` based on the information in
    a project file, and contains supplementary features to support development with
    Qt, automatically including build rules for `moc` and `uic`. `qmake` can also
    create projects for Microsoft Visual Studio without requiring the developer to
    change the project file.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`Makefile`并构建可执行程序和库。`qmake`是Qt提供的一个构建工具，可简化跨多个平台的开发项目的构建过程。它将每个项目文件中的信息扩展到一个`Makefile`中，以执行必要的编译和链接命令。它也可以用于非Qt项目。`qmake`根据项目文件中的信息生成一个`Makefile`，并包含支持Qt开发的附加功能，自动包括`moc`和`uic`的构建规则。`qmake`还可以创建Microsoft
    Visual Studio项目，而无需开发人员更改项目文件。'
- en: 'Being a community-driven framework, Qt is really flexible toward developers
    and gives them the freedom to choose the most suitable tools for their project,
    without forcing them to use its own build system. Qt supports the following types
    of build systems:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个社区驱动的框架，Qt对开发者非常灵活，并且给予他们选择最合适的工具来进行项目开发的自由，而不是强迫他们使用自己的构建系统。Qt支持以下类型的构建系统：
- en: '`qmake`'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`qmake`'
- en: CMake
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CMake
- en: Qbs
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Qbs
- en: Meson
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Meson
- en: Incredibuild
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Incredibuild
- en: 'You can run `qmake` from the Qt Creator UI or from the command line. You should
    run `qmake` every time you make changes to your project files. Here is the syntax
    to run `qmake` from the command line:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从Qt Creator UI或命令行中运行`qmake`。每次对项目文件进行更改时，都应该运行`qmake`。以下是从命令行运行`qmake`的语法：
- en: '[PRE0]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`qmake` provisions two different modes of operation. In the default mode, `qmake`
    uses the information in a project file to generate a `Makefile`, but it can also
    generate project files. The modes are listed as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`qmake`提供了两种不同的操作模式。在默认模式下，`qmake`使用项目文件中的信息生成`Makefile`，但它也可以生成项目文件。模式如下所示：'
- en: '`-makefile`'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-makefile`'
- en: '`-project`'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-project`'
- en: 'In `qmake` will generate a `Makefile` that is used to build the project. The
    syntax to run `qmake` in Makefile mode is shown here:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在`qmake`中，将生成一个用于构建项目的`Makefile`。运行`qmake`以Makefile模式的语法如下所示：
- en: '[PRE1]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In project mode, `qmake` will generate a project file. The syntax to run `qmake`
    in project mode is shown here:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目模式下，`qmake`将生成一个项目文件。运行`qmake`的语法如下所示：
- en: '[PRE2]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If you use Visual Studio as an `qmake` project into Visual Studio. `qmake`
    can create a Visual Studio project that contains all the essential information
    required by the development environment. It can recursively generate `.vcproj`
    files in subdirectories and a `.sln` file in the main directory, with the following
    command:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您将Visual Studio作为`qmake`项目，`qmake`可以创建一个包含开发环境所需的所有基本信息的Visual Studio项目。它可以递归生成子目录中的`.vcproj`文件和主目录中的`.sln`文件，使用以下命令：
- en: '[PRE3]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'For example, you can generate a Visual Studio project for your `HelloWorld`
    project by running this command:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可以通过运行以下命令为您的`HelloWorld`项目生成一个Visual Studio项目：
- en: '[PRE4]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Please note that every time you modify your project file, you need to run `qmake`
    to generate an updated Visual Studio project.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，每次修改项目文件时，都需要运行`qmake`以生成更新的Visual Studio项目。
- en: 'You can find more details about `qmake` at the following link:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下链接找到有关`qmake`的更多详细信息：
- en: '[https://doc.qt.io/qt-6/qmake-manual.html](https://doc.qt.io/qt-6/qmake-manual.html)'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://doc.qt.io/qt-6/qmake-manual.html](https://doc.qt.io/qt-6/qmake-manual.html)'
- en: 'Most `qmake` project files define the source and header files used by a project,
    using a list of `name = value` and `name += value definitions`, but there are
    additional advanced features in `qmake` that use other operators, functions, platform
    scope, and conditions to create a cross-platform application. Further details
    of the `qmake` language can be found at the following link: [https://doc.qt.io/qt-6/qmake-language.html](https://doc.qt.io/qt-6/qmake-language.html).'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数`qmake`项目文件使用`name = value`和`name += value`定义的列表定义项目中使用的源文件和头文件，但`qmake`中还有其他高级功能，使用其他运算符、函数、平台范围和条件来创建跨平台应用程序。有关`qmake`语言的更多详细信息，请访问以下链接：[https://doc.qt.io/qt-6/qmake-language.html](https://doc.qt.io/qt-6/qmake-language.html)。
- en: 'The Qt team has put a lot of effort into Qt 6 to make it future-proof by moving
    to a broadly adopted, popular build tool: **CMake**. There were changes implemented
    to make Qt more modular by using **Conan** as a package manager for some of the
    add-ons. Some of the Qt modules in Qt 6 are no longer available as binary packages
    in the Qt online installer but are available as Conan recipes. You can learn more
    about the build system changes and the addition of CMake as the default build
    tool at the following link: [https://doc.qt.io/qt-6/qt6-buildsystem.html](https://doc.qt.io/qt-6/qt6-buildsystem.html).'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Qt团队在Qt 6中付出了很多努力，使其具有未来的可扩展性，通过使用广泛采用的流行构建工具**CMake**。已经实施了一些变化，通过使用**Conan**作为一些附加组件的包管理器，使Qt更加模块化。在Qt
    6中，一些Qt模块不再作为Qt在线安装程序中的二进制包可用，而是作为Conan配方可用。您可以在以下链接了解有关构建系统更改以及将CMake作为默认构建工具的更多信息：[https://doc.qt.io/qt-6/qt6-buildsystem.html](https://doc.qt.io/qt-6/qt6-buildsystem.html)。
- en: Important note
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: In Qt 5, the build system was made on top of `qmake`, but in Qt 6, CMake is
    the build system for building Qt from the source code. This change only affects
    developers who want to build Qt from sources. You can still use `qmake` as a build
    tool for your Qt applications.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在Qt 5中，构建系统是基于`qmake`构建的，但在Qt 6中，CMake是构建Qt源代码的构建系统。这种变化只影响想要从源代码构建Qt的开发人员。您仍然可以使用`qmake`作为Qt应用程序的构建工具。
- en: In this section, you learned about `qmake`. We are skipping advanced `qmake`
    topics for self-exploration. In the next section, we will discuss Qt project files,
    which are parsed by `qmake`.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您了解了`qmake`。我们将跳过高级的`qmake`主题，以便自行探索。在下一节中，我们将讨论Qt项目文件，这些文件由`qmake`解析。
- en: Qt Project (.pro) files
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Qt项目（.pro）文件
- en: The `.pro` files created by Qt Creator in the earlier examples are actually
    Qt project files. A `.pro` file contains all the information required by `qmake`
    to build an application, a library, or a plugin. A project file supports both
    simple and complex build systems. A simple project file may use straightforward
    declarations, defining standard variables to indicate the source and header files
    that are used in a project. Complex projects may use multiple flow structures
    to optimize the build process. A project file contains a series of declarations
    to specify resources, such as links to the source and header files, libraries
    required by a project, custom-build processes for different platforms, and so
    on.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在早期示例中由Qt Creator创建的`.pro`文件实际上是Qt项目文件。`.pro`文件包含`qmake`构建应用程序、库或插件所需的所有信息。项目文件支持简单和复杂的构建系统。简单的项目文件可以使用直接的声明，定义标准变量以指示项目中使用的源文件和头文件。复杂的项目可能使用多个流结构来优化构建过程。项目文件包含一系列声明，用于指定资源，例如指向项目所需的源文件和头文件的链接、项目所需的库、不同平台的自定义构建过程等。
- en: 'A Qt project file has several sections and uses certain predefined `qmake`
    variables. Let''s have a look here at our earlier `HelloWorld` example `.pro`
    file:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Qt项目文件有几个部分，并使用某些预定义的`qmake`变量。让我们看一下我们早期的`HelloWorld`示例`.pro`文件：
- en: '[PRE5]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The project file simply tells `qmake` what the required Qt modules in the project
    are, as well as the name of the executable program. It also links to the header
    files, source files, form files, and resource files that need to be included in
    the project. All of this information is crucial in order for `qmake` to create
    the configuration files and build the application. For a more complex project,
    you may configure your project file differently for different operating systems.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 项目文件只是告诉`qmake`项目中所需的Qt模块，以及可执行程序的名称。它还链接到需要包含在项目中的头文件、源文件、表单文件和资源文件。所有这些信息对于`qmake`创建配置文件和构建应用程序至关重要。对于更复杂的项目，您可能需要为不同的操作系统不同地配置项目文件。
- en: 'The following list describes the most frequently used variables and describes
    their purpose:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列表描述了最常用的变量，并描述了它们的目的：
- en: '`QT`: A list of Qt modules used in a project'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QT`：项目中使用的Qt模块列表'
- en: '`CONFIG`: General project configuration options'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CONFIG`：一般项目配置选项'
- en: '`DESTDIR`: The directory in which the executable or binary file will be placed'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DESTDIR`：可执行文件或二进制文件将放置在其中的目录'
- en: '`FORMS`: A list of UI files to be processed by the UI compiler (`uic`)'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FORMS`：要由UI编译器（`uic`）处理的UI文件列表'
- en: '`HEADERS`: A list of filenames of header (`.h`) files used when building a
    project'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HEADERS`：构建项目时使用的头文件（`.h`）文件名列表'
- en: '`RESOURCES`: A list of resource (`.qrc`) files to be included in the final
    project'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RESOURCES`：要包含在最终项目中的资源（`.qrc`）文件列表'
- en: '`SOURCES`: A list of source code (`.cpp`) files to be used when building a
    project'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SOURCES`：在构建项目时要使用的源代码（`.cpp`）文件列表'
- en: '`TEMPLATE`: The template to use for a project'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TEMPLATE`：用于项目的模板'
- en: 'You can add different Qt modules, configurations, and definitions to your project.
    Let''s take a look at how we can accomplish this. To add additional modules, you
    simply add the module keyword after `QT +=`, as shown here:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以向项目添加不同的Qt模块、配置和定义。让我们看看如何做到这一点。要添加额外的模块，只需在`QT +=`之后添加模块关键字，如下所示：
- en: '`QT += core gui sql`'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`QT += core gui sql`'
- en: 'You can also add a condition in front to determine when to add a specific module
    to your project, as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在前面添加条件，以确定何时向项目添加特定模块，如下所示：
- en: '`greaterThan(QT_MAJOR_VERSION, 4): QT += widgets`'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`greaterThan(QT_MAJOR_VERSION, 4): QT += widgets`'
- en: 'You can also add configuration settings to your project. For example, if you
    want to specify `c++17` specifications while compiling a project, then add the
    following line to your `.pro` file:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以向项目添加配置设置。例如，如果要在编译项目时指定`c++17`规范，则将以下行添加到您的`.pro`文件中：
- en: '`CONFIG += c++17`'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`CONFIG += c++17`'
- en: 'You can add a comment to a project file, starting with the hash symbol (`#`),
    and the build system will ignore the corresponding line of text. Now, let''s have
    a look at the `TEMPLATE` variable. This determines whether the output of the build
    process will be an application, a library, or a plugin. There are different variables
    available to outline the type of file `qmake` will generate. These are listed
    as follows:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以向项目文件添加注释，以井号（`#`）开头，构建系统将忽略相应的文本行。现在，让我们看一下`TEMPLATE`变量。这确定构建过程的输出是应用程序、库还是插件。有不同的变量可用于概述`qmake`将生成的文件类型。这些列在下面：
- en: '`app` is used to build an application.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app`用于构建应用程序。'
- en: '`lib` is used to build a library.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lib`用于构建库。'
- en: '`aux` is used to build nothing. Use this if no compiler needs to be invoked
    to create a target—for instance, because your project is written in an interpreted
    language.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`aux`用于构建空内容。如果不需要调用编译器来创建目标（例如，因为项目是用解释语言编写的），则使用此选项。'
- en: '`subdirs` is used for the subdirectories specified using the `SUBDIRS` variable.
    Each subdirectory must contain its own project file.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`subdirs`用于使用`SUBDIRS`变量指定的子目录。每个子目录必须包含自己的项目文件。'
- en: '`vcapp` is used to create a Visual Studio project file to build an application.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vcapp`用于创建用于构建应用程序的Visual Studio项目文件。'
- en: '`vclib` is used to create a Visual Studio project file to build a library.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vclib`用于创建一个Visual Studio项目文件，以构建库。'
- en: '`vcsubdirs` is used to create a Visual Studio solution file to build projects
    in subdirectories.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vcsubdirs`用于创建一个Visual Studio解决方案文件，以在子目录中构建项目。'
- en: 'Qt project files sometimes need to depend on the `include` feature. In a Qt
    project file, you can also define two significant variables: `INCLUDEPATH` and
    `DEPENDPATH`. You can use the `SUBDIRS` variable to compile a set of dependent
    libraries or modules.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: Qt项目文件有时需要依赖于`include`功能。在Qt项目文件中，您还可以定义两个重要的变量：`INCLUDEPATH`和`DEPENDPATH`。您可以使用`SUBDIRS`变量来编译一组依赖库或模块。
- en: Now, let's discuss what a `.pri` file is.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们讨论一下`.pri`文件是什么。
- en: Understanding differences between .pro and .pri files
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解`.pro`和`.pri`文件之间的区别
- en: You can create a `.pri` file to include project files in a complex project.
    This improves readability and segregates different modules. A `.pri` file is usually
    called a `qmake` include file, and its format is similar to that of a `.pro` file.
    The main difference is in the intent of use; a `.pro` file is what we expect to
    run `qmake` on directly, while a `.pri` file is included by a `.pro` file. You
    can add common configurations such as source files, header files, `.ui` files,
    and `.qrc` files into `.pri` files and include them from multiple `.pro` files
    as per your project needs.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以创建一个`.pri`文件来包含复杂项目中的项目文件。这样可以提高可读性并将不同模块分隔开。`.pri`文件通常被称为`qmake`包含文件，其格式与`.pro`文件类似。主要区别在于使用意图；`.pro`文件是我们期望直接在其上运行`qmake`的文件，而`.pri`文件是由`.pro`文件包含的。您可以将常见配置，如源文件、头文件、`.ui`文件和`.qrc`文件添加到`.pri`文件中，并根据项目需求从多个`.pro`文件中包含它们。
- en: 'You can include a `.pri` file inside a `.pro` file, as illustrated here:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`.pro`文件中包含一个`.pri`文件，如下所示：
- en: '`include($$PWD/common.pri)`'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`include($$PWD/common.pri)`'
- en: In this section, you learned about what a Qt project file is, as well as the
    different variables used in it. In the next section, we will discuss different
    build settings.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您了解了Qt项目文件是什么，以及其中使用的不同变量。在下一节中，我们将讨论不同的构建设置。
- en: Understanding build settings
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解构建设置
- en: Before a project is compiled or built, the compiler requires certain details,
    which are known as the build settings. This is a very important part of the compilation
    process. In this section, you will learn about build settings and how to configure
    them in a proper way. You can have multiple build configurations for the same
    project. Usually, Qt Creator creates debug, release, and profile build configurations
    automatically. A debug build contains additional debug symbols required for debugging
    an application, whereas the release version is an optimized version without such
    symbols. Generally, developers use a debug configuration for testing and a release
    configuration for creating the final binaries. A profile build is an optimized
    release build that is delivered with separate debug information and is best suited
    to analyzing applications.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在编译或构建项目之前，编译器需要某些细节，这些细节称为构建设置。这是编译过程中非常重要的一部分。在本节中，您将了解构建设置以及如何以正确的方式配置它们。您可以为同一个项目拥有多个构建配置。通常，Qt
    Creator会自动创建调试、发布和配置文件构建配置。调试构建包含用于调试应用程序的额外调试符号，而发布版本是一个经过优化的版本，不包含这样的符号。通常，开发人员使用调试配置进行测试，使用发布配置创建最终的二进制文件。配置文件构建是一个经过优化的发布构建，附带单独的调试信息，最适合于分析应用程序。
- en: Build settings can be specified in the **Projects** mode. You may find that
    the **Projects** button is disabled if there are no projects opened in the IDE.
    You can add a new build configuration by clicking the **Add** drop-down button
    and then selecting the type of configuration you would like to add. The options
    may depend on the build system selected for the project. You can add multiple
    build configurations as per your requirement. You can click on the **Clone…**
    button to add a build configuration based on the current build configuration,
    or click on the **Rename…** button to rename the currently selected build configuration.
    Click on the **Remove** button to remove a build configuration.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 构建设置可以在**项目**模式中指定。如果IDE中没有打开项目，则可能会发现**项目**按钮被禁用。您可以通过单击**添加**下拉按钮，然后选择要添加的配置类型来添加新的构建配置。选项可能取决于为项目选择的构建系统。您可以根据需要添加多个构建配置。您可以单击**克隆…**按钮，以基于当前构建配置添加一个构建配置，或单击**重命名…**按钮来重命名当前选定的构建配置。单击**删除**按钮来删除一个构建配置。
- en: 'You can see an overview of this in the following screenshot:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下截图中看到这个概述：
- en: '![Figure 5.3 – Build settings and Qt Quick Compiler option'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.3 - 构建设置和Qt Quick编译器选项'
- en: '](img/Figure_5.3_B16231.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.3_B16231.jpg)'
- en: Figure 5.3 – Build settings and Qt Quick Compiler option
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.3 - 构建设置和Qt Quick编译器选项
- en: Normally, Qt Creator builds projects in a different directory from the source
    directory, known as shadow builds. This segregates the files generated for each
    build and run kit. If you want to only build and run with a single kit, then you
    can deselect the **Shadow build** checkbox. The Qt Creator project wizard creates
    a Qt Quick project that can be compiled to use the **Qt Resource System**. To
    use the default settings, select **Leave at Default**. To compile Qt Quick code,
    select **Enable** in the **Qt Quick Compiler** field, as shown in *Figure 5.3*.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，Qt Creator在与源目录不同的目录中构建项目，称为影子构建。这样可以将为每个构建和运行工具生成的文件分隔开。如果您只想使用单个工具包构建和运行，则可以取消选择**影子构建**复选框。Qt
    Creator项目向导创建了一个可以编译使用**Qt资源系统**的Qt Quick项目。要使用默认设置，请选择**保持默认**。要编译Qt Quick代码，请在**Qt
    Quick编译器**字段中选择**启用**，如*图5.3*所示。
- en: 'You can read more about different build configurations at the following link:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下链接中了解有关不同构建配置的更多信息：
- en: '[https://doc.qt.io/qtcreator/creator-build-settings.html](https://doc.qt.io/qtcreator/creator-build-settings.html)'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://doc.qt.io/qtcreator/creator-build-settings.html](https://doc.qt.io/qtcreator/creator-build-settings.html)'
- en: In this section, we discussed build settings. While building a cross-platform
    application, it is important to add platform-specific configurations to the project
    file. In the next section, we will learn about platform-specific settings.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论了构建设置。在构建跨平台应用程序时，向项目文件添加特定于平台的配置非常重要。在下一节中，我们将学习有关特定于平台的设置。
- en: Platform-specific settings
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 特定于平台的设置
- en: 'You can define different configurations for different platforms, since not
    every configuration can fit all use cases. For example, if you want to include
    different header paths for different operating systems, you can add the following
    lines of code to your `.pro` file:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以为不同的平台定义不同的配置，因为并非每种配置都适用于所有用例。例如，如果您想为不同的操作系统包含不同的头文件路径，您可以将以下代码行添加到您的`.pro`文件中：
- en: '[PRE6]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the preceding code snippet, we have added some Windows-specific and Linux-specific
    header files. You can also put configurations such as `if` statements in C++,
    as shown here:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码片段中，我们添加了一些特定于Windows和特定于Linux的头文件。您还可以像这样在C++中放置配置，例如`if`语句：
- en: '[PRE7]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The preceding code is intended only for Windows platforms, which is why we have
    added a `win32` keyword before it. If your target platform is based on Linux,
    then you can add a `unix` keyword to add Linux-specific configurations.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码仅适用于Windows平台，这就是为什么我们在前面加了一个`win32`关键字。如果您的目标平台是基于Linux的，那么您可以添加一个`unix`关键字来添加特定于Linux的配置。
- en: 'To set a custom icon for your application on the Windows platform, you should
    add the following line of code to your project (`.pro`) file:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Windows平台上为应用程序设置自定义图标，您应该将以下代码行添加到您的项目（`.pro`）文件中：
- en: '`RC_ICONS = myapplication.ico`'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`RC_ICONS = myapplication.ico`'
- en: 'To set a custom icon for your application on macOS, you should add the following
    line of code to your project (`.pro`) file:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 要在macOS上为应用程序设置自定义图标，您应该将以下代码行添加到您的项目（`.pro`）文件中：
- en: '`ICON = myapplication.icns`'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`ICON = myapplication.icns`'
- en: Note that the icon format is different for Windows and macOS. For Linux distributions,
    there is a different approach to making the desktop entry for each flavor.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，Windows和macOS的图标格式不同。对于Linux发行版，制作每种风格的桌面条目有不同的方法。
- en: In this section, we discussed some of the platform-specific settings. In the
    next section, we will learn about the use of Visual Studio with Qt VS Tools.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论了一些特定于平台的设置。在下一节中，我们将学习如何在Qt VS工具中使用Visual Studio。
- en: Using Qt with Microsoft Visual Studio
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Microsoft Visual Studio中使用Qt
- en: Some developers choose Visual Studio as their preferred IDE. So, if your favorite
    IDE is Visual Studio, then you can integrate Qt VS Tools with Microsoft Visual
    Studio. This will allow you to use the standard Windows development environment
    without having to worry about Qt-related build steps or tools. You can install
    and update Qt VS Tools directly from Microsoft Visual Studio.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 一些开发人员选择Visual Studio作为他们首选的IDE。因此，如果您喜欢的IDE是Visual Studio，那么您可以将Qt VS工具与Microsoft
    Visual Studio集成。这将允许您在标准的Windows开发环境中使用，而无需担心与Qt相关的构建步骤或工具。您可以直接从Microsoft Visual
    Studio安装和更新Qt VS工具。
- en: 'You can find Qt Visual Studio Tools from Visual Studio Marketplace for the
    corresponding versions. For Visual Studio 2019, you can download the tool from
    the following link: [https://marketplace.visualstudio.com/items?itemName=TheQtCompany.QtVisualStudioTools2019](https://marketplace.visualstudio.com/items?itemName=TheQtCompany.QtVisualStudioTools2019).
    You can also download the `VS` add-in from the following Qt download link: [https://download.qt.io/official_releases/vsaddin/](https://download.qt.io/official_releases/vsaddin/).'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从Visual Studio Marketplace找到相应版本的Qt Visual Studio工具。对于Visual Studio 2019，您可以从以下链接下载该工具：[https://marketplace.visualstudio.com/items?itemName=TheQtCompany.QtVisualStudioTools2019](https://marketplace.visualstudio.com/items?itemName=TheQtCompany.QtVisualStudioTools2019)。您还可以从以下Qt下载链接下载`VS`插件：[https://download.qt.io/official_releases/vsaddin/](https://download.qt.io/official_releases/vsaddin/)。
- en: 'These are some of the important features of Qt VS Tools:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是Qt VS工具的一些重要功能：
- en: Wizards to create new projects and classes
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建新项目和类的向导
- en: Automated build setup for `moc`, `uic`, and `rcc` compilers
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`moc`、`uic`和`rcc`编译器的自动构建设置'
- en: Import and export of `.pro` and `.pri` files
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入和导出`.pro`和`.pri`文件
- en: Automatic conversion of a Qt VS Tools project to a `qmake` project
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Qt VS工具项目自动转换为`qmake`项目
- en: Integrated Qt resource management
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成Qt资源管理
- en: Ability to create Qt translation files and integration with **Qt Linguist**
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够创建Qt翻译文件并与**Qt Linguist**集成
- en: Integrated **Qt Designer**
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成**Qt Designer**
- en: Integrated Qt documentation
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成Qt文档
- en: Debugging extensions for Qt data types
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于Qt数据类型的调试扩展
- en: To start using the features in the Visual Studio environment, you must set the
    Qt version. Select the appropriate version from `.pro` files with `qmake` or `.vcproj`
    files with Visual Studio to build your project. Since Visual Studio is used for
    Windows-specific development, it is recommended to use Qt Creator as the IDE for
    cross-platform development.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始在Visual Studio环境中使用这些功能，您必须设置Qt版本。从`.pro`文件中选择适当的版本与`qmake`或从Visual Studio中的`.vcproj`文件构建您的项目。由于Visual
    Studio用于特定于Windows的开发，建议将Qt Creator用作跨平台开发的IDE。
- en: If you don't have a `.vcproj` file, then you can generate one from a `.pro`
    file through the command line or through VS Tools. We have already discussed the
    command-line instruction in the *Building with qmake* section. You can also convert
    your `.pro` file to a `.vcproj` file by using the `.vcproj` file only contains
    Windows-specific settings.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有`.vcproj`文件，那么您可以通过命令行或通过VS工具从`.pro`文件生成一个。我们已经在*使用qmake构建*部分讨论了命令行指令。您还可以通过使用`.vcproj`文件将您的`.pro`文件转换为`.vcproj`文件，该文件仅包含特定于Windows的设置。
- en: In this section, we discussed the `VS` add-in. In the next section, we will
    learn how to run a sample application on Linux. We will skip a discussion on building
    and running a Qt application on Windows as we have already discussed this in earlier
    chapters.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论了`VS`插件。在下一节中，我们将学习如何在Linux上运行一个示例应用程序。我们将跳过在Windows上构建和运行Qt应用程序的讨论，因为我们已经在前几章中讨论过这个问题。
- en: Running a Qt application on Linux
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Linux上运行Qt应用程序
- en: 'Building and running a Qt application on Linux is similar to running it on
    Windows, but Linux has many distributions and thus it is difficult to build an
    application that flawlessly runs on all Linux variants. In most distributions,
    the application will run smoothly. We will focus on Ubuntu 20.04 as our target
    platform. When you install Qt on Ubuntu, it will automatically detect the kit
    and configurations automatically. You can also configure a kit with the appropriate
    compiler and Qt version, as illustrated in the following screenshot:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux上构建和运行Qt应用程序与在Windows上运行类似，但Linux有许多发行版，因此很难构建一个完美运行在所有Linux变体上的应用程序。在大多数发行版中，应用程序将会顺利运行。我们将以Ubuntu
    20.04作为目标平台。当你在Ubuntu上安装Qt时，它会自动检测套件和配置。你也可以配置一个带有适当编译器和Qt版本的套件，如下截图所示：
- en: '![Figure 5.4 – Desktop kit configuration on Ubuntu'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.4 - Ubuntu上的桌面套件配置'
- en: '](img/Figure_5.4_B16231.jpg)'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.4_B16231.jpg)'
- en: Figure 5.4 – Desktop kit configuration on Ubuntu
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.4 - Ubuntu上的桌面套件配置
- en: 'Let''s run our `HelloWorld` example on Ubuntu. Hit the **Run** button on the
    left-side pane. A UI showing **Hello World!** will appear in no time, as illustrated
    in the following screenshot:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在Ubuntu上运行我们的`HelloWorld`示例。点击左侧窗格上的**运行**按钮。一个显示**Hello World!**的UI将立即出现，如下截图所示：
- en: '![Figure 5.5 – Application running on Ubuntu'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.5 - Ubuntu上运行的应用程序'
- en: '](img/Figure_5.5_B16231.jpg)'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.5_B16231.jpg)'
- en: Figure 5.5 – Application running on Ubuntu
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.5 - Ubuntu上运行的应用程序
- en: 'You can also run the application from the command line, as shown in the following
    code snippet:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以从命令行运行应用程序，如下面的代码片段所示：
- en: '[PRE8]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In this section, we discussed how to run our application on Linux distributions.
    In the next section, we will learn about running a Qt application on macOS and
    iOS.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论了如何在Linux发行版上运行我们的应用程序。在下一节中，我们将学习如何在macOS和iOS上运行Qt应用程序。
- en: Running a Qt application on macOS and iOS
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在macOS和iOS上运行Qt应用程序
- en: We have already discussed how to build and run applications on Windows and Linux
    platforms in earlier chapters. Let's move on to learn how to run our applications
    on platforms such as macOS and iOS. To build a Qt application on macOS and iOS,
    you will need Xcode from the App Store. Xcode is the IDE for macOS, comprising
    a suite of software development tools for developing applications in macOS and
    iOS. If you have already installed Xcode, Qt Creator will detect its existence
    and will automatically detect the suitable kits. As for the kit selection, Qt
    for macOS supports kits for Android, `clang` 64-bit, iOS, and iOS Simulator.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在前几章讨论了如何在Windows和Linux平台上构建和运行应用程序。让我们继续学习如何在macOS和iOS等平台上运行我们的应用程序。要在macOS和iOS上构建Qt应用程序，你需要从App
    Store下载Xcode。Xcode是macOS的IDE，包括一套用于在macOS和iOS中开发应用程序的软件开发工具。如果你已经安装了Xcode，Qt Creator将检测到其存在并自动检测到合适的套件。至于套件选择，Qt
    for macOS支持Android、`clang` 64位、iOS和iOS模拟器的套件。
- en: 'You can see a sample desktop kit configuration on macOS in the following screenshot:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在下面的截图中看到macOS上的桌面套件配置示例：
- en: '![Figure 5.6 – Desktop kit configuration on macOS'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.6 - macOS上的桌面套件配置
- en: '](img/Figure_5.6_B16231.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.6_B16231.jpg)'
- en: Figure 5.6 – Desktop kit configuration on macOS
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.6 - macOS上的桌面套件配置
- en: 'You can also manually add a debugger in the **Debuggers** tab if you don''t
    want to use the **Auto-detected** debugger, as illustrated in the following screenshot:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想使用自动检测的调试器，你也可以在**调试器**选项卡中手动添加调试器，如下截图所示：
- en: '![Figure 5.7 – Debugger option on macOS'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.7 - macOS上的调试器选项'
- en: '](img/Figure_5.7_B16231.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.7_B16231.jpg)'
- en: Figure 5.7 – Debugger option on macOS
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.7 - macOS上的调试器选项
- en: Running an application on macOS is similar to running it on Windows. Just hit
    the **Run** button and you will see the application running in no time.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在macOS上运行应用程序与在Windows上运行类似。只需点击**运行**按钮，你将立即看到应用程序运行。
- en: Mobile platforms hold equal importance to desktop platforms such as Windows,
    Linux, and macOS. Let's explore how to set up an environment for running applications
    on iOS.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 移动平台与Windows、Linux和macOS等桌面平台同等重要。让我们探讨如何设置运行iOS应用程序的环境。
- en: Configuring Qt Creator for iOS
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为iOS配置Qt Creator
- en: 'Running Qt applications on iOS is really simple. You can connect your iOS device
    and select a suitable device type from the device selection list. You can select
    **Device type** from the **Kits** selection screen. You can also run the application
    on iOS Simulator, as illustrated in the following screenshot:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在iOS上运行Qt应用程序非常简单。你可以连接你的iOS设备，并从设备选择列表中选择合适的设备类型。你可以从**套件**选择屏幕中选择**设备类型**。你也可以在iOS模拟器上运行应用程序，如下截图所示：
- en: '![Figure 5.8 – iOS Simulator option on macOS'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.8 - macOS上的iOS模拟器选项'
- en: '](img/Figure_5.8_B16231.jpg)'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.8_B16231.jpg)'
- en: Figure 5.8 – iOS Simulator option on macOS
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.8 - macOS上的iOS模拟器选项
- en: 'After configuring the kit, just plug in your iPhone and hit the **Run** button.
    You can see a sample output in the following screenshot:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 配置好套件后，只需将iPhone连接上并点击**运行**按钮。你可以在下面的截图中看到一个示例输出：
- en: '![Figure 5.9 – Qt Creator running an application on an iPhone'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.9 - Qt Creator在iPhone上运行应用程序
- en: '](img/Figure_5.9_B16231.jpg)'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.9_B16231.jpg)'
- en: Figure 5.9 – Qt Creator running an application on an iPhone
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.9 - Qt Creator在iPhone上运行应用程序
- en: It is relatively easy to build and run an application on the iOS platform. However,
    distributing the application is not easy as the App Store is a very closed ecosystem.
    You should have an Apple ID and will need to sign in your iOS applications before
    you can distribute them to your users. You can't avoid these steps, but let's
    skip the deployment part for now.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '在iOS平台上构建和运行应用程序相对容易。然而，分发应用程序并不容易，因为App Store是一个非常封闭的生态系统。你需要一个Apple ID，并且需要在分发应用程序给用户之前登录你的iOS应用程序。你无法避开这些步骤，但现在让我们跳过部署部分。 '
- en: 'You can learn more about App Store submissions at the following link:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在以下链接了解更多关于App Store提交的信息：
- en: '[https://developer.apple.com/app-store/submissions](https://developer.apple.com/app-store/submissions)'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://developer.apple.com/app-store/submissions](https://developer.apple.com/app-store/submissions)'
- en: In this section, we learned about running an application on macOS and iOS. In
    the next section, we will learn how to configure and build an application for
    the Android platform.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了如何在macOS和iOS上运行应用程序。在下一节中，我们将学习如何为Android平台配置和构建应用程序。
- en: Configuring Qt Creator for Android
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为Android配置Qt Creator
- en: Android is the most popular mobile platform today, hence developers want to
    build applications for Android. Although Android is a Linux-based operating system,
    it is very different from other Linux distributions. In order to use it, you have
    to configure Qt Creator and install certain packages.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: Android是当今最流行的移动平台，因此开发人员希望为Android构建应用程序。尽管Android是基于Linux的操作系统，但它与其他Linux发行版非常不同。为了使用它，您必须配置Qt
    Creator并安装某些软件包。
- en: For smooth functioning of your Qt Creator configuration for Android, use OpenJDK
    8, NDK r21 with clang toolchain. You can run sdkmanager from the `ANDROID_SDK_ROOT\cmdline-tools\latest\bin`
    with required arguments to configure with required dependencies.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使Qt Creator配置Android顺利运行，请使用OpenJDK 8，带有clang工具链的NDK r21。您可以从`ANDROID_SDK_ROOT\cmdline-tools\latest\bin`运行sdkmanager，并使用必要的参数配置所需的依赖项。
- en: 'You can learn more about android specific requirements and instructions in
    the following link:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下链接中了解有关Android特定要求和说明的更多信息：
- en: '[https://doc.qt.io/qt-6/android-getting-started.html](https://doc.qt.io/qt-6/android-getting-started.html)'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://doc.qt.io/qt-6/android-getting-started.html](https://doc.qt.io/qt-6/android-getting-started.html)'
- en: 'Let''s get started with configuring your machine for Android by following these
    next steps:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始按照以下步骤配置您的机器以用于Android：
- en: To build a Qt application on Android, you have to install the Android **software
    development kit** (**SDK**), the Android **native development kit** (**NDK**),
    the **Java Development Kit** (**JDK**), and OpenSSL to your development PC, irrespective
    of your desktop platform. You will find the download option with a globe icon
    or **Download** button next to each corresponding field, to download from the
    respective package's page.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在Android上构建Qt应用程序，您必须在开发PC上安装Android**软件开发工具包**（**SDK**），Android**本机开发工具包**（**NDK**），**Java开发工具包**（**JDK**）和OpenSSL，无论您的桌面平台如何。您将在每个相应字段旁边找到带有地球图标或**下载**按钮的下载选项，以从各自软件包的页面下载。
- en: After all the required packages are installed, restart Qt Creator. Qt Creator
    should be able to detect the build and platform tools automatically.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装所有必需的软件包后，重新启动Qt Creator。Qt Creator应该能够自动检测构建和平台工具。
- en: However, you may have to configure further to fix errors in **Android** settings.
    You may find the SDK manager, the platform SDK, and essential packages missing,
    as shown in the following screenshot:![Figure 5.10 – Android Settings screen
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 但是，您可能需要进一步配置以修复**Android**设置中的错误。您可能会发现SDK管理器、平台SDK和必要的软件包缺失，如下截图所示：![图5.10
    - Android设置屏幕
- en: '](img/Figure_5.10_B16231.jpg)'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.10_B16231.jpg)'
- en: Figure 5.10 – Android Settings screen
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.10 - Android设置屏幕
- en: Select the correct SDK and NDK path under **Android Settings**. Click on the
    **Apply** button to save the changes.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Android设置**下选择正确的SDK和NDK路径。点击**应用**按钮以保存更改。
- en: Click on the **SDK Manager** tab and click on the **Update Installed** button.
    You may see a message box prompting you to install missing packages, as illustrated
    in the following screenshot. Click on the **Yes** button to install the packages:![Figure
    5.11 – Information message showing missing Android packages
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**SDK管理器**选项卡，然后点击**更新已安装**按钮。您可能会看到一个消息框，提示您安装缺少的软件包，如下截图所示。点击**是**按钮来安装这些软件包：![图5.11
    - 显示缺少Android软件包的信息消息
- en: '](img/Figure_5.11_B16231.jpg)'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.11_B16231.jpg)'
- en: Figure 5.11 – Information message showing missing Android packages
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.11 - 显示缺少Android软件包的信息消息
- en: You may get another message warning of Android SDK changes, listing missing
    essential packages, as illustrated in the following screenshot. Click on the **OK**
    button:![Figure 5.12 – Warning about missing Android packages
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可能会收到另一条消息，警告Android SDK更改，列出缺少的基本软件包，如下截图所示。点击**确定**按钮：![图5.12 - 关于缺少Android软件包的警告
- en: '](img/Figure_5.12_B16231.jpg)'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.12_B16231.jpg)'
- en: Figure 5.12 – Warning about missing Android packages
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.12 - 关于缺少Android软件包的警告
- en: Click on the `–-verbose`, and click on the **OK** button. You can see an overview
    of this in the following screenshot:![Figure 5.13 – Android SDK Manager tool
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`--verbose`，然后点击**确定**按钮。您可以在以下截图中看到概述：![图5.13 - Android SDK管理器工具
- en: '](img/Figure_5.13_B16231.jpg)'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.13_B16231.jpg)'
- en: Figure 5.13 – Android SDK Manager tool
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.13 - Android SDK管理器工具
- en: Once the issues are resolved, you will see that all Android settings have been
    properly configured, as shown in the following screenshot:![Figure 5.14 – Proper
    Android configuration in Qt Creator
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦问题解决，您将看到所有Android设置已经正确配置，如下截图所示：![图5.14 - Qt Creator中正确的Android配置
- en: '](img/Figure_5.14_B16231.jpg)'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.14_B16231.jpg)'
- en: Figure 5.14 – Proper Android configuration in Qt Creator
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.14 - 在Qt Creator中正确的Android配置
- en: If the issues are still not resolved or if you want to install a specific platform,
    you can enter the appropriate command, as shown in the following screenshot. You
    may also install the required packages from the command line. Qt will automatically
    detect the build tools and platforms available in the SDK location:![Figure 5.15
    – Android SDK Manager tool
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果问题仍未解决，或者您想安装特定平台，您可以输入适当的命令，如下截图所示。您还可以从命令行安装所需的软件包。Qt将自动检测SDK位置中可用的构建工具和平台：![图5.15
    - Android SDK管理器工具
- en: '](img/Figure_5.15_B16231.jpg)'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.15_B16231.jpg)'
- en: Figure 5.15 – Android SDK Manager tool
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.15 - Android SDK管理器工具
- en: Once the Android settings are properly configured, you can see the Android kit
    is ready for development, as illustrated in the following screenshot:![Figure
    5.16 – Properly configured Android kit
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦Android设置正确配置，您可以看到Android kit已准备好进行开发，如下面的截图所示：![图5.16 - 正确配置的Android kit
- en: '](img/Figure_5.16_B16231.jpg)'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.16_B16231.jpg)'
- en: Figure 5.16 – Properly configured Android kit
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.16 - 正确配置的Android kit
- en: Select an Android kit from the **Kit** selection option, as illustrated in the
    following screenshot:![Figure 5.17 – Android Kit selection option
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**Kit**选择选项中选择一个Android kit，如下面的截图所示：![图5.17 - Android Kit选择选项
- en: '](img/Figure_5.17_B16231.jpg)'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.17_B16231.jpg)'
- en: Figure 5.17 – Android Kit selection option
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.17 - Android Kit选择选项
- en: In this step, you can select a target Android version and configure your Android
    application by creating a `AndroidManifest.xml` file with Qt Creator. You can
    set the package name, version code, SDK version, application icon, permissions,
    and so on. The settings can be seen in the following screenshot:![Figure 5.18
    – Android manifest option in build settings
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这一步中，您可以选择目标Android版本，并通过Qt Creator创建`AndroidManifest.xml`文件来配置您的Android应用程序。您可以设置包名称、版本代码、SDK版本、应用程序图标、权限等。设置如下截图所示：![图5.18
    - 构建设置中的Android清单选项
- en: '](img/Figure_5.18_B16231.jpg)'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.18_B16231.jpg)'
- en: Figure 5.18 – Android manifest option in build settings
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.18 - 构建设置中的Android清单选项
- en: Your machine is now ready for Android development. However, your Android hardware
    requires developer options to be enabled or the Android emulator to be used. To
    enable the **Developer** mode, go to **Settings**, tap on **System**, and then
    on **About phone**.
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的计算机现在已准备好进行Android开发。但是，您的Android硬件需要启用开发者选项，或者使用Android模拟器。要启用**Developer**模式，转到**Settings**，点击**System**，然后点击**About
    phone**。
- en: Then, tap on **Software info** and find the build number. Keep tapping **Builder
    number** until you see **Developer** mode activated. It may take seven taps to
    activate the **Developer** mode. Now, go back to the **Settings** pane, where
    you will now find **Developer** options as an entry.
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击**Software info**，找到构建号。不断点击**Builder number**，直到看到**Developer**模式已激活。可能需要点击七次才能激活**Developer**模式。现在，返回到**Settings**面板，您现在将找到**Developer**选项。
- en: Your Android device is ready to run the Android application. Click on the **Run**
    button and select a device from the **Compatible device** list screen.
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的Android设备已准备好运行Android应用程序。单击**Run**按钮，然后从**Compatible device**列表屏幕中选择设备。
- en: Next, tap `.apk` file generated inside the `build` folder.
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，点击`build`文件夹中生成的`.apk`文件。
- en: Congratulations! You have successfully developed your Android application. Unlike
    iOS, Android is an open system. You can copy or distribute the .`apk` file into
    other Android devices running on the same Android version, and then install it.
    However, if you want to distribute your apps on Google Play Store, then you will
    have to register as a Google Play developer and sign the package.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您已成功开发了Android应用程序。与iOS不同，Android是一个开放系统。您可以将`.apk`文件复制或分发到运行相同Android版本的其他Android设备上，然后安装它。但是，如果您想在Google
    Play商店上分发您的应用程序，那么您将需要注册为Google Play开发者并签署包。
- en: In this section, we learned how to configure and build for an Android platform.
    In the next section, we will discuss other platforms supported by Qt 6 at the
    time this book was authored.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了如何配置和构建Android平台。在下一节中，我们将讨论在本书编写时Qt 6支持的其他平台。
- en: Other Qt-supported platforms
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他Qt支持的平台
- en: Qt 5 had support for a great range of platforms, from desktop and mobile platforms
    to embedded and web platforms. Qt 6 is yet to support all platforms that were
    supported in Qt 5, but the platforms will be gradually supported as Qt 6 matures.
    Currently, only embedded Linux is supported in the latest release of Qt 6 under
    the commercial license. You may have to wait some time to port your application
    to Qt 6 on a different embedded platform. Otherwise, if you want to migrate to
    Qt 6 immediately for your favorite embedded platform, you have to build from the
    source code and do the necessary modifications.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: Qt 5支持广泛的平台，从桌面和移动平台到嵌入式和Web平台。Qt 6尚未支持Qt 5中支持的所有平台，但随着Qt 6的成熟，这些平台将逐渐得到支持。目前，在商业许可下，Qt
    6的最新版本仅支持嵌入式Linux。您可能需要等一段时间才能将应用程序移植到不同的嵌入式平台上的Qt 6。否则，如果您想立即迁移到Qt 6以适用于您喜爱的嵌入式平台，您必须从源代码构建并进行必要的修改。
- en: 'The following link provides a snapshot of embedded Linux support in Qt 6.2:
    [https://doc-snapshots.qt.io/qt6-dev/embedded-linux.html](https://doc-snapshots.qt.io/qt6-dev/embedded-linux.html).
    This link may get updated as Qt moves to the next release.'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 以下链接提供了Qt 6.2中嵌入式Linux支持的快照：[https://doc-snapshots.qt.io/qt6-dev/embedded-linux.html](https://doc-snapshots.qt.io/qt6-dev/embedded-linux.html)。随着Qt迈向下一个版本，此链接可能会更新。
- en: Qt also provides a **Boot to Qt** software stack for embedded Linux systems
    under commercial licenses. It is a lightweight, Qt-optimized complete software
    stack that is installed on the target system. The conventional embedded Linux
    kernel is used in the Boot to Qt software stack, which is designed with the Poky
    and Yocto packages.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: Qt还为商业许可下的嵌入式Linux系统提供了**Boot to Qt**软件堆栈。这是一个轻量级的、经过Qt优化的完整软件堆栈，安装在目标系统上。Boot
    to Qt软件堆栈使用传统的嵌入式Linux内核，设计有Poky和Yocto软件包。
- en: 'Explore more about Boot to Qt at the following link:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下链接中了解更多关于Boot to Qt的信息：
- en: '[https://doc.qt.io/QtForDeviceCreation/b2qt-index.html](https://doc.qt.io/QtForDeviceCreation/b2qt-index.html)'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://doc.qt.io/QtForDeviceCreation/b2qt-index.html](https://doc.qt.io/QtForDeviceCreation/b2qt-index.html)'
- en: '**Qt for WebAssembly** allows you to build Qt applications for web platforms.
    It does not necessarily require any client-side installations, and saves server
    resources. It is a platform plugin that lets you build Qt applications that can
    be embedded into web pages. It is not yet available to open source developers
    in Qt 6\. Commercial license holders may get early access to use this plugin.'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '**Qt for WebAssembly** 允许您为 Web 平台构建 Qt 应用程序。它不一定需要任何客户端安装，并节省服务器资源。它是一个平台插件，可以让您构建可以嵌入到网页中的
    Qt 应用程序。在 Qt 6 中，尚未向开源开发人员提供此插件。商业许可证持有人可能会提前获得使用此插件的权限。'
- en: 'You can learn more about the **Qt for WebAssembly** plugin at the following
    link:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下链接上了解有关 **Qt for WebAssembly** 插件的更多信息：
- en: '[https://wiki.qt.io/Qt_for_WebAssembly](https://wiki.qt.io/Qt_for_WebAssembly)'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://wiki.qt.io/Qt_for_WebAssembly](https://wiki.qt.io/Qt_for_WebAssembly)'
- en: In this section, we learned about other platforms supported in Qt 6\. In the
    next section, we will discuss how to port your application from Qt 5 to Qt 6.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们了解了 Qt 6 支持的其他平台。在下一节中，我们将讨论如何将应用程序从 Qt 5 迁移到 Qt 6。
- en: Porting from Qt 5 into Qt 6
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 Qt 5 迁移到 Qt 6
- en: '**Qt 6** is a major change to the Qt framework, therefore it breaks some of
    the backward compatibility. So, before upgrading to Qt 6, make sure that your
    Qt 5 application is updated to Qt 5.15\. Porting will be easier from Qt 5.15 to
    Qt 6, with the fewest number of changes. However, APIs marked as deprecated or
    obsolete in Qt 5.15 may have been removed from Qt 6.0.'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '**Qt 6** 是 Qt 框架的重大变化，因此它会破坏一些向后兼容性。因此，在升级到 Qt 6 之前，请确保您的 Qt 5 应用程序已更新到 Qt
    5.15。从 Qt 5.15 迁移到 Qt 6 将更容易，需要的更改最少。但是，在 Qt 5.15 中标记为已弃用或过时的 API 在 Qt 6.0 中可能已被移除。'
- en: 'The CMake APIs in Qt 5 and Qt 6 are almost identical in terms of semantics.
    As a result, Qt 5.15 introduced versionless targets and commands, allowing CMake
    code to be written that is completely independent of Qt versions. Versionless
    imported targets are most useful for projects that require both Qt 5 and Qt 6
    compilation. It is not recommended to use them by default because of the missing
    target properties. You can read more on this at the following link: [https://doc.qt.io/qt-6/cmake-qt5-and-qt6-compatibility.html](https://doc.qt.io/qt-6/cmake-qt5-and-qt6-compatibility.html).'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: Qt 5 和 Qt 6 中的 CMake API 在语义上几乎是相同的。因此，Qt 5.15 引入了无版本目标和命令，允许编写完全独立于 Qt 版本的
    CMake 代码。无版本导入目标对于需要同时进行 Qt 5 和 Qt 6 编译的项目非常有用。不建议默认使用它们，因为缺少目标属性。您可以在以下链接上阅读更多信息：[https://doc.qt.io/qt-6/cmake-qt5-and-qt6-compatibility.html](https://doc.qt.io/qt-6/cmake-qt5-and-qt6-compatibility.html)。
- en: 'Some of the classes and modules have been removed in Qt 6, but these are kept
    in `Qt5Compat` for ease of porting. Apart from build system changes, you may need
    to fix up the includes directives of obsolete classes—for example, classes such
    as `QLinkedList`, `QRegExp`, and `QTextCodec` are replaced in Qt6 with new classes.
    But for ease of porting, you need to add `core5compat` into your `.pro` file,
    as shown here:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Qt 6 中，一些类和模块已被移除，但这些类和模块在 `Qt5Compat` 中保留以便于迁移。除了构建系统的更改之外，您可能需要修复过时类的包含指令，例如，Qt6
    中的类如 `QLinkedList`、`QRegExp` 和 `QTextCodec` 都被新类替换。但为了便于迁移，您需要将 `core5compat`
    添加到您的 `.pro` 文件中，如下所示：
- en: '`QT += core5compat`'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '`QT += core5compat`'
- en: 'There are also changes with respect to the drawing mechanism. If you were using
    OpenGL-style `qsb` tool. Your shader code should be compiled into **Standard Portable
    Intermediate Representation-Vulkan** (**SPIR-V**) format. We will discuss graphics
    in detail in [*Chapter 8*](B16231_08_Final_ASB_ePub.xhtml#_idTextAnchor176), *Graphics
    and Animations*. Further details can be found at the following link: [https://doc.qt.io/qt-6/qtshadertools-index.html](https://doc.qt.io/qt-6/qtshadertools-index.html).'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 关于绘图机制也有一些变化。如果您使用了 OpenGL 风格的 `qsb` 工具，您的着色器代码应该编译成 **Standard Portable Intermediate
    Representation-Vulkan** (**SPIR-V**) 格式。我们将在 [*第 8 章*](B16231_08_Final_ASB_ePub.xhtml#_idTextAnchor176)
    中详细讨论图形和动画。更多细节可以在以下链接找到：[https://doc.qt.io/qt-6/qtshadertools-index.html](https://doc.qt.io/qt-6/qtshadertools-index.html)。
- en: 'There are also some changes to `QtGraphicalEffects` have been removed from
    Qt 6 and will be available with a different license. Qt Quick MultiEffect is available
    in the Qt Marketplace and provides better performance. You might also consider
    updating your earlier signal connections in QML to use a JavaScript function declaration,
    as shown in the following code snippet:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '`QtGraphicalEffects` 也有一些变化，已从 Qt 6 中移除，并将以不同的许可证提供。Qt Quick MultiEffect 可在
    Qt Marketplace 上获得，并提供更好的性能。您还可以考虑将 QML 中的早期信号连接更新为使用 JavaScript 函数声明，如以下代码片段所示：'
- en: '[PRE9]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The Qt State Machine module is largely source-compatible with the Qt 5 version,
    so you should be able to continue working on their projects with no—or only slight—changes.
    To use the State Machine module''s classes, add the following line of code to
    your Qt project (`.pro`) file:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: Qt 状态机模块在很大程度上与 Qt 5 版本兼容，因此您应该能够继续在其项目上工作，而不需要或只需要进行轻微的更改。要使用状态机模块的类，请将以下代码添加到您的
    Qt 项目（`.pro`）文件中：
- en: '[PRE10]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To import the State Machine module inside the QML file, use the following `import`
    statement:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 QML 文件中导入状态机模块，请使用以下 `import` 语句：
- en: '`import QtQml.StateMachine`'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '`import QtQml.StateMachine`'
- en: 'Qt provides detailed porting guidelines. Have a look at the following documentation
    if you are looking to port your Qt 5 applications to Qt 6:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: Qt 提供了详细的迁移指南。如果您希望将 Qt 5 应用程序迁移到 Qt 6，请查看以下文档：
- en: '[https://doc.qt.io/qt-6/portingguide.html](https://doc.qt.io/qt-6/portingguide.html)'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://doc.qt.io/qt-6/portingguide.html](https://doc.qt.io/qt-6/portingguide.html)'
- en: '[https://www.qt.io/blog/porting-from-qt-5-to-qt-6-using-qt5compat-library](https://www.qt.io/blog/porting-from-qt-5-to-qt-6-using-qt5compat-library)'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.qt.io/blog/porting-from-qt-5-to-qt-6-using-qt5compat-library](https://www.qt.io/blog/porting-from-qt-5-to-qt-6-using-qt5compat-library)'
- en: '[https://doc.qt.io/qt-6/porting-to-qt6-using-clazy.html](https://doc.qt.io/qt-6/porting-to-qt6-using-clazy.html)'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://doc.qt.io/qt-6/porting-to-qt6-using-clazy.html](https://doc.qt.io/qt-6/porting-to-qt6-using-clazy.html)'
- en: In this section, you learned how to port your application from Qt 5 to Qt 6\.
    In the next section, we will summarize what we learned in this chapter.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您学习了如何将您的应用程序从Qt 5迁移到Qt 6。在下一节中，我们将总结本章学到的内容。
- en: Summary
  id: totrans-290
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter explained cross-platform development using Qt Creator. You learned
    about various compilers, build tools, and build- and platform-specific settings.
    In this chapter, you learned to configure and build applications on desktop and
    mobile platforms and how to run applications on iPhone and Android devices. We
    discussed how to port your Qt project to different platforms without too many
    challenges.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了使用Qt Creator进行跨平台开发。您了解了各种编译器、构建工具以及构建和特定平台的设置。在本章中，您学会了在桌面和移动平台上配置和构建应用程序，以及如何在iPhone和Android设备上运行应用程序。我们讨论了如何在不太多的挑战下将您的Qt项目移植到不同的平台。
- en: In the next chapter, you will learn about the signal and slots mechanism, the
    Qt meta object system, and event handling. Let's continue!
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习有关信号和槽机制、Qt元对象系统和事件处理的知识。让我们继续吧！
