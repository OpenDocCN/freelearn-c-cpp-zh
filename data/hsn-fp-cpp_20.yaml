- en: Standard Language Support and Proposals
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标准语言支持和提案
- en: We've gone through a lot of topics in this book, so now it's time to group them
    all in a handy chapter that you can use to help remember how to use the functional
    programming techniques we covered. We will take this opportunity to look at the
    C++ 20 standard as well, mentioning how we can use these new features in our code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们已经涉及了许多主题，现在是时候将它们全部归纳到一个方便的章节中，以帮助您记住我们涵盖的函数式编程技术的使用方法。我们将利用这个机会来看看C++
    20标准，并提及我们如何在我们的代码中使用这些新功能。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Supported ways of writing pure functions in C++, and future proposals
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C++中编写纯函数的支持方式和未来提案
- en: Supported ways of writing lambdas in C++, and future proposals
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C++中编写lambda的支持方式和未来提案
- en: Supported ways for currying in C++, and future proposals
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C++中柯里化的支持方式和未来提案
- en: Supported ways for functional composition in C++, and future proposals
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C++中函数组合的支持方式和未来提案
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You will need a compiler that supports C++ 17; I used GCC 7.4.0c.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 您将需要一个支持C++ 17的编译器；我使用的是GCC 7.4.0c。
- en: The code is on GitHub at [https:/​/​github.​com/​PacktPublishing/​Hands-​On-​Functional-Programming-​with-​Cpp](https://github.%E2%80%8Bcom/PacktPublishing/Hands-On-Functional-Programming-with-Cpp)
    in the `Chapter16` folder. It includes and uses `doctest`, which is a single-header
    open source unit testing library. You can find it in the GitHub repository at [https:/​/github.​com/​onqtam/​doctest](https://github.%E2%80%8Bcom/onqtam/doctest).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 代码在GitHub上的[https:/​/​github.​com/​PacktPublishing/​Hands-​On-​Functional-Programming-​with-​Cpp](https://github.%E2%80%8Bcom/PacktPublishing/Hands-On-Functional-Programming-with-Cpp)的`Chapter16`文件夹中。它包括并使用`doctest`，这是一个单头开源单元测试库。您可以在GitHub存储库中找到它：[https:/​/github.​com/​onqtam/​doctest](https://github.%E2%80%8Bcom/onqtam/doctest)。
- en: Standard language support and proposals
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标准语言支持和提案
- en: So far, we've explored several ways of writing code in a functional style in
    C++. Now, we'll take a look at some additional options that are allowed by the
    C++ 17 standard, and at a few options that are enabled by C++ 20\. So, let's start
    by writing pure functions.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经探讨了在C++中以函数式风格编写代码的几种方式。现在，我们将看看C++ 17标准允许的一些额外选项，以及C++ 20允许的一些选项。因此，让我们开始编写纯函数。
- en: Pure functions
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 纯函数
- en: '**Pure functions** are functions that return the same outputs when receiving
    the same inputs. Their predictability makes them useful for understanding how
    the written code correlates with its runtime performance.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 纯函数是在接收相同输入时返回相同输出的函数。它们的可预测性使它们对于理解编写的代码与其运行时性能的相关性非常有用。
- en: 'We discovered in [Chapter 2](79295589-e861-4722-96a5-d131b429aac0.xhtml), *Understanding
    Pure Functions,* that writing pure functions in C++ requires a combination of
    `const` and `static`, depending on whether the function is part of a class or
    is a free function, and on how we pass the parameters to the function. For your
    ease, I will reproduce the conclusions we reached on the syntax for pure functions
    here:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第2章](79295589-e861-4722-96a5-d131b429aac0.xhtml)中发现，要在C++中编写纯函数，需要结合`const`和`static`，具体取决于函数是类的一部分还是自由函数，并且取决于我们如何将参数传递给函数。为了方便起见，我将在此重述我们在纯函数语法上的结论：
- en: 'Class functions, pass by value:'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类函数，按值传递：
- en: '`static int increment(const int value)`'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`static int increment(const int value)`'
- en: '`int increment(const int value) const`'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int increment(const int value) const`'
- en: 'Class functions, pass by reference:'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类函数，按引用传递：
- en: '`static int increment(const int& value)`'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`static int increment(const int& value)`'
- en: '`int increment(const int&value) const`'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int increment(const int&value) const`'
- en: 'Class functions, pass pointer by value:'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类函数，按值传递指针：
- en: '`static const int* increment(const int* value)`'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`static const int* increment(const int* value)`'
- en: '`const int* increment(const int* value) const`'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`const int* increment(const int* value) const`'
- en: 'Class functions, pass pointer by reference:'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类函数，按引用传递指针：
- en: '`static const int* increment(const int* const& value)`'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`static const int* increment(const int* const& value)`'
- en: '`const int* increment(const int* const& value) const`'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`const int* increment(const int* const& value) const`'
- en: Standalone function, pass by value `int increment(const int value)`
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 独立函数，按值传递`int increment(const int value)`
- en: Standalone function, pass by reference `int increment(const int& value)`
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 独立函数，按引用传递`int increment(const int& value)`
- en: Standalone function, pass pointer by value `const int* increment(const int*
    value)`
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 独立函数，按指针传递值`const int* increment(const int* value)`
- en: Standalone function, pass pointer by reference `const int* increment(const int*
    const& value)`
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 独立函数，按引用传递指针`const int* increment(const int* const& value)`
- en: 'We''ve also discovered that while the compiler is helpful for reducing side
    effects, it doesn''t always tell us when a function is pure or not. We always
    need to remember to use these three criteria when writing a pure function, and
    be careful to apply them:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还发现，虽然编译器有助于减少副作用，但它并不总是告诉我们一个函数是纯的还是不纯的。在编写纯函数时，我们始终需要记住使用这三个标准，并小心应用它们：
- en: It always returns the same output values for the same input values.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它总是为相同的输入值返回相同的输出值。
- en: It has no side effects.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它没有副作用。
- en: It does not change its parameter values.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它不会改变其参数值。
- en: Lambdas
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Lambda表达式
- en: Lambdas are a fundamental part of functional programming, allowing us to make
    operations with functions. C++ has had lambdas since C++11, but there were some
    recent additions to the syntax. Additionally, we will explore some lambda features
    that we haven't used until now in this book, but which can come in handy for your
    own code.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Lambda是函数式编程的基本部分，允许我们对函数进行操作。C++自C++11以来就有lambda，但最近对语法进行了一些添加。此外，我们将探讨一些lambda功能，在本书中我们还没有使用过，但对您自己的代码可能会有用。
- en: 'Let''s begin with a simple lambda—`increment` has one input and returns the
    incremented value:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一个简单的lambda开始——`increment`有一个输入并返回增加后的值：
- en: '[PRE0]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The square brackets (`[]`) specify the list of captured values, as we''ll see
    in the following code. We can specify the type of the parameter in the same way
    we do for any function:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 方括号（`[]`）指定了捕获值的列表，我们将在以下代码中看到。我们可以以与任何函数相同的方式指定参数的类型：
- en: '[PRE1]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We can also specify the return value immediately after the list of parameters
    and a `->` sign:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在参数列表后立即指定返回值，并加上`->`符号：
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If there''s no input value, the list of parameters and the round parentheses, `()`,
    can be ignored:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有输入值，参数列表和圆括号`()`可以被忽略：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We can capture a value by specifying its name, in which case it''s captured
    by copy:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 通过指定名称来捕获一个值，这样它就会被复制：
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Alternatively, we can capture a value by reference, using the `&` operator
    in the capture specification:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以通过引用捕获一个值，使用捕获说明中的`&`运算符：
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If we capture multiple values, we can either enumerate them or just capture
    all of them. For capture by value, we use the `=` specifier:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们捕获多个值，我们可以枚举它们，也可以捕获所有值。对于按值捕获，我们使用`=`说明符：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To capture all values by reference, we use the `&` specifier without any variable
    name:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过引用捕获所有值，我们使用`&`说明符而不带任何变量名：
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'While not recommended, we can make the lambda call mutable with the `mutable`
    specifier after the argument list:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然不推荐，但我们可以在参数列表后使用`mutable`说明符使lambda调用可变：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Additionally, starting in C++ 20, we can specify that the function call is
    `consteval` instead of the default `constexpr`:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，从C++ 20开始，我们可以指定函数调用为`consteval`，而不是默认的`constexpr`：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Unfortunately, this use case is not yet supported in g++8.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，这种用法在g++8中尚不受支持。
- en: 'Exceptions specifiers are also possible; that is, if the lambda throws no exception,
    then `noexcept` may come in handy:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 异常说明也是可能的；也就是说，如果lambda没有抛出异常，那么`noexcept`可能会派上用场：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If the lambda throws an exception, it can be specified as either general or
    specific:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果lambda抛出异常，可以指定为通用或特定：
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'But what if you want to use generic types? Well, in C++ 11, you can use the
    `function<>` type for this. Starting with C++ 20, all the goodness of type constraints
    is available for your lambdas in a neat syntax:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果您想使用通用类型怎么办？在C++ 11中，您可以使用`function<>`类型。从C++ 20开始，所有类型约束的好处都可以以一种简洁的语法用于lambda。
- en: '[PRE12]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Unfortunately, this is not yet supported in g++8 either.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，这在g++8中也尚不受支持。
- en: Partial application and currying
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部分应用和柯里化
- en: '**Partial application** means obtaining a new function by applying a function
    with *N* arguments on `1` (or more, but fewer than *N*) arguments.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**部分应用**意味着通过在`1`（或更多，但少于*N*）个参数上应用具有*N*个参数的函数来获得一个新函数。'
- en: 'We can implement partial application manually by implementing a function or
    a lambda that passes the arguments along. Here''s an example of partial application
    that uses the `std::plus` function to obtain an `increment` function by setting
    one of its parameters to `1`:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过实现一个传递参数的函数或lambda来手动实现部分应用。以下是使用`std::plus`函数实现部分应用以获得一个`increment`函数的例子，将其中一个参数设置为`1`：
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In this book, we''ve mainly focused on how to use lambdas in these situations;
    it''s worth mentioning, however, that we can use pure functions for the same goal.
    For example, the same increment function can be written as a normal C++ function:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们主要关注了如何在这些情况下使用lambda；然而值得一提的是，我们也可以使用纯函数来实现相同的目标。例如，相同的增量函数可以编写为普通的C++函数：
- en: '[PRE14]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Partial application can be done in C++ with the help of the `bind()` function.
    The `bind()` function allows us to bind parameters to values for a function, allowing
    us to derive the `increment` function from `plus`, as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在C++中可以使用`bind()`函数进行部分应用。`bind()`函数允许我们为函数绑定参数值，从而可以从`plus`派生出`increment`函数，如下所示：
- en: '[PRE15]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '`bind` takes the following parameters:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`bind`接受以下参数：'
- en: The function that we want to bind.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们想要绑定的函数。
- en: The arguments to bind to; these can either be a value or a placeholder (such
    as `_1`, `_2`, and so on). Placeholders allow arguments to be forwarded to the
    final function.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要绑定到的参数；这些可以是值或占位符（如`_1`、`_2`等）。占位符允许将参数转发到最终函数。
- en: 'In pure functional programming languages, partial application is linked with
    currying. **Currying** is the decomposition of a function that takes *N* arguments
    into *N* functions that take one argument. There is no standard way to curry a
    function in C++, but we can do it through the use of lambdas. Let''s take a look
    at an example that curries the `pow` function:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在纯函数式编程语言中，部分应用与柯里化相关联。**柯里化**是将接受*N*个参数的函数分解为接受一个参数的*N*个函数。在C++中没有标准的柯里化函数，但我们可以通过使用lambda来实现。让我们看一个柯里化`pow`函数的例子：
- en: '[PRE16]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'As you can see, with the help of currying, we can naturally do a partial application
    by simply calling the curried function with just one parameter instead of two:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，借助柯里化的帮助，我们可以通过只使用一个参数调用柯里化函数来自然地进行部分应用，而不是两个参数：
- en: '[PRE17]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This mechanism is enabled by default in many pure functional programming languages.
    However, it is more difficult to do in C++. There is no standard support for currying,
    but we can create our own `curry` function that takes an existing function and
    returns its curried form. Here''s an example of a generalized `curry` function
    for functions with two parameters:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这种机制在许多纯函数式编程语言中默认启用。然而，在C++中更难实现。C++中没有标准支持柯里化，但我们可以创建自己的`curry`函数，该函数接受现有函数并返回其柯里化形式。以下是一个具有两个参数的通用`curry`函数的示例：
- en: '[PRE18]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Additionally, here''s how we can use it to curry and do partial application:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，以下是如何使用它进行柯里化和部分应用：
- en: '[PRE19]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Let's now look at ways to implement functional composition.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看实现函数组合的方法。
- en: Functional composition
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数组合
- en: 'Functional composition means taking two functions, *f* and *g*, and obtaining
    a new function, *h;* for any value, *h(x) = f(g(x))*. We can implement functional
    composition manually, either in a lambda or in a normal function. For example,
    given two functions, `powerOf2`, which computes powers of `2`, and `increment`,
    which increments a value, we will see the following:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 函数组合意味着取两个函数*f*和*g*，并获得一个新函数*h*；对于任何值，*h(x) = f(g(x))*。我们可以手动实现函数组合，无论是在lambda中还是在普通函数中。例如，给定两个函数，`powerOf2`计算`2`的幂，`increment`增加一个值，我们将看到以下结果：
- en: '[PRE20]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We can compose them by simply encapsulating the call into a lambda called `incrementPowerOf2`:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过简单地将调用封装到一个名为`incrementPowerOf2`的lambda中来组合它们：
- en: '[PRE21]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Alternatively, we could just use a simple function, as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以简单地使用一个简单的函数，如下所示：
- en: '[PRE22]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'However, an operator that takes two functions and returns the composed function
    is handy, and it''s implemented in many programming languages. The closest thing
    available in C++ to a functional composition operator is the `|` pipe operator
    from the ranges library, which is currently in the C++ 20 standard. However, while
    it implements composition, it does not work for general functions or lambdas.
    Fortunately, C++ is a powerful language and we can write our own compose function,
    as we discovered in [Chapter 4](d361a3f0-acc7-4e77-9387-2b563fac2f09.xhtml), *The
    Idea of Functional Composition*:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，一个接受两个函数并返回组合函数的运算符非常方便，在许多编程语言中都有实现。在C++中最接近函数组合运算符的是`|`管道运算符，它来自于ranges库，目前已经包含在C++
    20标准中。然而，虽然它实现了组合，但对于一般函数或lambda并不适用。幸运的是，C++是一种强大的语言，我们可以编写自己的compose函数，正如我们在[第4章](d361a3f0-acc7-4e77-9387-2b563fac2f09.xhtml)中发现的，*函数组合的概念*。
- en: '[PRE23]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Going back to the ranges library and the pipe operator, we can use this form
    of functional composition within the context of ranges. We''ve explored this topic
    extensively in [Chapter 14](1edd5963-94e4-48dc-830f-8f201b3a39c7.xhtml), *Lazy
    Evaluation Using the Ranges Library*, and here''s an example of using the pipe
    operator to compute the sum of all numbers that are multiples of both `2` and
    `3` from a collection:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 回到ranges库和管道运算符，我们可以在ranges的上下文中使用这种形式的函数组合。我们在[第14章](1edd5963-94e4-48dc-830f-8f201b3a39c7.xhtml)中对这个主题进行了广泛探讨，*使用ranges库进行惰性求值*，这里有一个使用管道运算符计算集合中既是`2`的倍数又是`3`的倍数的所有数字的和的例子：
- en: '[PRE24]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: As you can see, there are multiple options for functional programming in standard
    C++, and a few exciting developments coming in C++ 20.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，在标准C++中有多种函数式编程的选项，而且C++ 20中还有一些令人兴奋的发展。
- en: Summary
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This is it! We have gone through a quick overview of the most important operations
    in functional programming and how we can implement them using C++ 17 and C++ 20\.
    I trust that you are now in possession of more tools in your toolkit—including
    pure functions, lambdas, partial application, currying, and functional composition,
    to name only a few.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是了！我们已经快速概述了函数式编程中最重要的操作，以及我们如何可以使用C++ 17和C++ 20来实现它们。我相信你现在掌握了更多工具，包括纯函数、lambda、部分应用、柯里化和函数组合，仅举几例。
- en: From now on, it's your choice in terms of how to use them. Pick a few, or combine
    them, or slowly move your code based on mutable state to immutability; mastering
    these tools will enable more choice and flexibility in the way you write code.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在开始，你可以自行选择如何使用它们。选择一些，或者组合它们，或者慢慢将你的代码从可变状态转移到不可变状态；掌握这些工具将使你在编写代码的方式上拥有更多选择和灵活性。
- en: Whatever you choose to do, I wish you good luck with your projects and your
    programming career. Happy coding!
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你选择做什么，我祝你在你的项目和编程生涯中好运。愉快编码！
