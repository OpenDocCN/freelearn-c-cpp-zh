- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: Using the C++20 Modules
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用C++20模块
- en: 'C++20 introduces a new feature to the language: modules. They replace the plain-text
    symbol declarations in header files with a module file that will be precompiled
    to an intermediary binary format, greatly reducing the build time.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: C++20引入了一个新的语言特性：模块。它们将头文件中的纯文本符号声明替换为模块文件，模块文件将预编译成中间二进制格式，极大地减少了构建时间。
- en: 'We will discuss the most essential topics for C++20 modules in CMake, starting
    with a general introduction to C++20 modules as a concept: their advantages over
    standard header files and how they simplify the management of units in source
    code. Although the promise of streamlining the build process is exciting, this
    chapter highlights how difficult and long the road to their adoption is.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将讨论CMake中C++20模块的最重要话题，从C++20模块作为概念的概述开始：它们相较于标准头文件的优势，以及如何简化源代码中单元的管理。尽管精简构建过程的前景令人兴奋，本章也将重点讲解模块采用过程中的困难与漫长道路。
- en: 'With the theory out of the way, we’ll move on to the practical aspects of implementing
    the modules in our projects: we’ll discuss enabling their experimental support
    in earlier versions of CMake, and the full release in CMake 3.28.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在理论部分讲解完毕后，我们将进入实践部分，讨论如何在项目中实现模块：我们将讨论如何在早期版本的CMake中启用它们的实验性支持，以及在CMake 3.28中的完整发布。
- en: Our journey through C++20 modules is not just about understanding a new feature—it’s
    about rethinking how components interact in large C++ projects. By the end of
    this chapter, you’ll not only grasp the theoretical aspects of modules but also
    gain practical insights through examples, enhancing your ability to leverage this
    feature for better project outcomes.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对C++20模块的探讨不仅仅是为了理解这一新特性——更是为了重新思考大型C++项目中组件的交互方式。到本章结束时，你不仅能掌握模块的理论方面内容，还将通过实例获得实践经验，提升你利用这一特性优化项目结果的能力。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将讨论以下主要内容：
- en: What are the C++20 modules?
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C++20模块是什么？
- en: Writing projects with C++20 module support
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写支持C++20模块的项目
- en: Configuring the toolchain
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置工具链
- en: This chapter has different technical requirements than others. Make sure you
    read the next section thoroughly.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的技术要求与其他章节不同，请确保仔细阅读下一节内容。
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You can find the code files that are present in this chapter on GitHub at [https://github.com/PacktPublishing/Modern-CMake-for-Cpp-2E/tree/main/examples/ch10](https://github.com/PacktPublishing/Modern-CMake-for-Cpp-2E/tree/main/examples/ch10).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在GitHub上找到本章中涉及的代码文件，网址为[https://github.com/PacktPublishing/Modern-CMake-for-Cpp-2E/tree/main/examples/ch10](https://github.com/PacktPublishing/Modern-CMake-for-Cpp-2E/tree/main/examples/ch10)。
- en: 'The following toolchain utilities are required to try out the examples in this
    chapter:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试本章示例所需的工具链实用程序如下：
- en: CMake 3.26 or newer (3.28 recommended)
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CMake 3.26或更新版本（推荐使用3.28）
- en: 'Any of the supported generators:'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何受支持的生成器：
- en: Ninja 1.11 and newer (Ninja and Ninja Multi-Config)
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ninja 1.11及更新版本（包括Ninja和Ninja多配置版本）
- en: Visual Studio 17 2022 and newer
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio 17 2022及更新版本
- en: 'Any of the supported compilers:'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何受支持的编译器：
- en: MSVC toolset 14.34 and newer
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: MSVC工具集14.34及更新版本
- en: Clang 16 and newer
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Clang 16及更新版本
- en: GCC 14 (for the in-development branch, after 2023-09-20) and newer
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: GCC 14（适用于开发中的分支，2023年9月20日后）及更新版本
- en: If you’re familiar with Docker, you can use a fully tooled image introduced
    in the *Installing CMake on different platforms* section from *Chapter 1*, *First
    Steps with CMake*.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你熟悉Docker，可以使用在《第一章：CMake入门》中“在不同平台上安装CMake”部分介绍的完全配置的镜像。
- en: 'To build the examples provided in this chapter, use the following command:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建本章提供的示例，请使用以下命令：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Be sure to replace the placeholders `<build tree>` and `<source tree>` with
    appropriate paths.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 请确保将占位符`<build tree>`和`<source tree>`替换为适当的路径。
- en: What are the C++20 modules?
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: C++20模块是什么？
- en: I wanted to write about how to use C++ modules over three years ago. Despite
    the fact that modules were already accepted as part of the C++20 specification,
    the support of the C++ ecosystem was still nowhere near ready to use this feature.
    Fortunately, a lot has changed since the first edition of this book, and with
    the release of CMake 3.28, the C++20 modules are officially supported (although
    experimental support has been available since 3.26).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 三年前，我就想写关于如何使用C++模块的内容。尽管模块已被纳入C++20规范，但C++生态系统的支持当时还远未准备好使用这一功能。幸运的是，自本书第一版以来，情况发生了很大变化，随着CMake
    3.28的发布，C++20模块得到了正式支持（尽管从3.26版本起就已提供实验性支持）。
- en: Three years may seem like a long time to implement a single feature, but we
    need to remember that it’s not only up to CMake. Many pieces of the puzzle have
    to come together and work well. First, we need compilers to understand how to
    deal with modules, then buildsystems like GNU Make or Ninja have to be able to
    work with modules, and only then can CMake use these new mechanisms to provide
    its support for modules.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 三年时间看似很长，用来实现一个特性，但我们需要记住，这不仅仅取决于CMake。许多拼图的部分必须协调工作。首先，我们需要编译器理解如何处理模块，其次，像GNU
    Make或Ninja这样的构建系统必须能够与模块兼容，只有这样CMake才能利用这些新机制来支持模块。
- en: 'This tells us one thing: not everyone will have the latest compatible tooling,
    and even then, the current support is still in an early phase. These limitations
    make modules unsuitable for a wide audience. So maybe don’t build production-grade
    projects depending on them just yet.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉我们一件事：并不是每个人都会拥有最新的兼容工具，即便如此，目前的支持仍处于初期阶段。这些限制使得模块不适合广泛使用。所以，可能现在还不要依赖它们来构建生产级项目。
- en: Nevertheless, if you are an enthusiast of cutting-edge solutions, you’re in
    for a treat! If you can strictly control the build environment of your project,
    for example, with dedicated machines or build containerization (Docker et al.),
    you can effectively use modules internally. Just proceed with caution and understand
    that your mileage may vary. There may be a point at which you’ll need to back
    out of the modules altogether because of a missing or incorrectly implemented
    feature in any of the utilities.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果你是前沿解决方案的爱好者，那你有福了！如果你能够严格控制项目的构建环境，比如使用专用机器或构建容器化（如Docker等），你可以在内部有效使用模块。只需小心行事，并理解你的使用情况可能会有所不同。可能会有一个时刻，你需要完全放弃模块，因为任何工具中的功能缺失或实现错误。
- en: '“Module” is quite an overloaded word in the context of C++ builds. We previously
    discussed modules in this book in the context of CMake: find modules, utility
    modules, and such. To clarify, C++ modules have nothing to do with CMake modules.
    Instead, they are a native feature of the language added in the C++20 version.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: “模块”在C++构建的语境中是一个非常多义的词。我们在本书中之前已经讨论过CMake中的模块：查找模块、实用模块等等。为了澄清，C++模块与CMake模块没有任何关系。实际上，它们是C++20版本中添加的语言原生特性。
- en: 'At its core, a C++ module is a single source file that encapsulates the functionality
    of headers and implementation files into one coherent unit of code. It comprises
    two primary components:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 从本质上讲，一个C++模块是一个单一的源文件，它将头文件和实现文件的功能封装成一个连贯的代码单元。它包括两个主要组件：
- en: The **Binary Module Interface** (**BMI**) serves a similar purpose to a header
    file but is in a binary format, significantly reducing the need for recompilation
    when consumed by other translation units.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**二进制模块接口**（**BMI**）的作用与头文件类似，但它采用二进制格式，显著减少了其他翻译单元在使用时的重新编译需求。'
- en: The **Module Implementation Unit** provides the implementation, definitions,
    and internal details of the module. Its contents are not directly accessible from
    outside the module, effectively encapsulating the implementation details.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模块实现单元**提供模块的实现、定义和内部细节。其内容不能直接从模块外部访问，有效地封装了实现细节。'
- en: Modules were introduced to reduce compilation time and address some problematic
    aspects of the preprocessor and traditional header files. Let’s see how multiple
    translation units are glued together in a typical, legacy project.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 引入模块是为了减少编译时间，并解决预处理器和传统头文件的一些问题。让我们来看一下在一个典型的传统项目中，多个翻译单元是如何结合在一起的。
- en: '![](img/B19844_10_01.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19844_10_01.png)'
- en: 'Figure 10.1: Project structure using traditional headers'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.1：使用传统头文件的项目结构
- en: The preceding figure shows how the preprocessor would traverse the project tree
    to build the program. As we learned in *Chapter 7*, *Compiling C++ Sources with
    CMake*, to build each translation unit, the preprocessor mechanically stitches
    files together. This means producing a long file containing all the headers included
    by preprocessor directives. That way, `main.cpp` would first include its own source,
    then the contents of `lib.h`, `a.h`, `1.h`, and `2.h`. Only then will the compiler
    kick in and start parsing every single character to produce binary object files.
    There’s nothing wrong with that until we realize that to compile `lib.cpp`, headers
    included in `main.cpp` have to be compiled again. And this redundancy keeps growing
    with every translation unit added.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 上图展示了预处理器如何遍历项目树以构建程序。正如我们在*第 7 章*《使用 CMake 编译 C++ 源代码》中学到的，为了构建每个翻译单元，预处理器会机械地将文件拼接在一起。这意味着生成一个包含所有通过预处理器指令包含的头文件的长文件。这样，`main.cpp`
    会先包含自己的源文件，然后是 `lib.h`、`a.h`、`1.h` 和 `2.h` 的内容。只有这样，编译器才会启动并开始解析每个字符以生成二进制目标文件。直到我们意识到，为了编译
    `lib.cpp`，在 `main.cpp` 中包含的头文件必须再次被编译。这种冗余随着每个翻译单元的增加而不断增长。
- en: 'There are other complications with traditional headers:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 传统头文件还存在其他问题：
- en: '**Include guards** are required, leading to problems when forgotten.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**包含保护** 是必需的，如果忘记了，会导致问题。'
- en: Symbols with circular references need **forward declarations.**
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有循环引用的符号需要**前向声明**。
- en: Small changes to headers are required for the recompilation of all translation
    units.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对头文件的小改动会导致所有翻译单元的重新编译。
- en: Preprocessor macros can be difficult to debug and maintain.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预处理器宏很难调试和维护。
- en: 'Modules solve many of these problems right off the bat, but some still remain
    relevant: modules, like headers, can depend on each other. When one module imports
    another, we still need to compile them in the right order, starting from the most
    nested one first. This usually isn’t a significant issue, as modules tend to be
    much larger in size. In many cases, an entire library can be stored in a single
    module.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 模块立即解决了许多这些问题，但仍然存在一些相关问题：像头文件一样，模块之间也可以相互依赖。当一个模块导入另一个模块时，我们仍然需要按照正确的顺序编译它们，从最嵌套的模块开始。这通常不是一个重大问题，因为模块往往比头文件大得多。在许多情况下，整个库可以存储在一个模块中。
- en: 'Let’s take a look at how modules are written and used in practice. In this
    simple example, we’ll just return the sum of two arguments:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看模块在实践中是如何编写和使用的。在这个简单的示例中，我们只会返回两个参数的和：
- en: '**ch10/01-cxx-modules/math.cppm**'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**ch10/01-cxx-modules/math.cppm**'
- en: '[PRE1]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Such a module is self-explanatory: we start with a statement that tells the
    rest of the program that this is indeed a module called `math`. We then follow
    with a regular function definition that has been designated with the `export`
    keyword as available from outside the module.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这样的模块不言自明：我们从一个声明开始，告诉程序的其余部分这是一个名为 `math` 的模块。接着，我们使用 `export` 关键字标注一个普通的函数定义，使其可以从模块外部访问。
- en: 'You’ll notice the extension of module files is different than of regular C++
    source code. This is a matter of convention and shouldn’t affect how this code
    is treated. My advice is to pick based on the toolchain you’ll be using:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到模块文件的扩展名与普通的 C++ 源代码不同。这只是一个约定，不应影响代码的处理方式。我的建议是根据你将使用的工具链来选择：
- en: '`.ixx` is an MSVC extension.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.ixx` 是 MSVC 的扩展名。'
- en: '`.cppm` is a Clang extension.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.cppm` 是 Clang 的扩展名。'
- en: '`.cxx` is a GCC extension.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.cxx` 是 GCC 的扩展名。'
- en: 'To use this module, we need to import it in our program:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用这个模块，我们需要在程序中导入它：
- en: '**ch10/01-cxx-modules/main.cpp**'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**ch10/01-cxx-modules/main.cpp**'
- en: '[PRE2]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `import math` statement is enough to bring the symbols exported from the
    module directly into the `main` program. We can now use the `add()` function in
    the body of the `main()` function. On the surface, modules look very similar to
    headers. But if we tried to write our CMake listfile as usual, we wouldn’t have
    much success with building the project. Time to introduce the necessary steps
    to use the C++ modules.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`import math` 语句足以将模块中导出的符号直接引入到 `main` 程序中。现在，我们可以在 `main()` 函数的主体中使用 `add()`
    函数。表面上看，模块与头文件非常相似。但是，如果我们像往常一样编写 CMake 列表文件，我们可能无法成功构建项目。是时候引入使用 C++ 模块所需的步骤了。'
- en: Writing projects with C++20 module support
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 C++20 模块支持编写项目
- en: This book mainly discusses CMake 3.26, but it’s worth noting that CMake frequently
    updates, and version 3.28 was released just before this chapter went to press.
    If you’re using this version or newer, you can access the latest features by setting
    the `cmake_minimum_required()` command to `VERSION 3.28.0`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 本书主要讨论 CMake 3.26，但值得注意的是 CMake 经常更新，版本 3.28 就在本章印刷前发布。如果你正在使用此版本或更新版本，你可以通过将
    `cmake_minimum_required()` 命令设置为 `VERSION 3.28.0` 来访问最新功能。
- en: On the other hand, if you need to stick with an older version or want to cater
    to a broader audience who might not have upgraded, you’ll need to enable experimental
    support to use C++20 modules in CMake.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果你需要坚持使用旧版本或想要服务于那些可能没有升级的更广泛受众，你需要启用实验性支持以在 CMake 中使用 C++20 模块。
- en: Let’s explore how to do that.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探讨如何实现这个。
- en: Enabling the experimental support in CMake 3.26 and 3.27
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启用对 CMake 3.26 和 3.27 的实验性支持
- en: 'Experimental support represents a form of agreement: you, as the developer,
    acknowledge that this feature is not yet production-ready and should be used solely
    for testing purposes. To *sign* such an agreement, you’ll need to set the `CMAKE_EXPERIMENTAL_CXX_MODULE_CMAKE_API`
    variable in the project’s listfile to a specific value for the CMake version you’re
    using.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 实验性支持代表了一种协议：作为开发者，你承认这个特性还没有准备好用于生产环境，应仅用于测试目的。要*签署*这样的协议，你需要在项目的列表文件中将 `CMAKE_EXPERIMENTAL_CXX_MODULE_CMAKE_API`
    变量设置为与你使用的 CMake 版本对应的特定值。
- en: The official Kitware repository for CMake hosts an issue tracker, where you
    can search for the label `area:cxxmodules`. Until 3.28 was released, only one
    issue was reported (in 3.25.0), which is a good indicator of a potentially stable
    feature. If you decide to enable the experiment, build your project to confirm
    it will work for your users.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: CMake 官方的 Kitware 仓库托管了一个问题追踪器，你可以搜索标签 `area:cxxmodules`。在 3.28 发布之前，只有一个问题被报告（在
    3.25.0 中），这是一个潜在稳定特性的良好指标。如果你决定启用实验功能，构建你的项目以确认它能为你的用户工作。
- en: 'Here are flags that can be found in the repository and documentation of CMake:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是可以在 CMake 的仓库和文档中找到的标志：
- en: '`3c375311-a3c9-4396-a187-3227ef642046` for 3.25 (undocumented)'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`3c375311-a3c9-4396-a187-3227ef642046` 用于 3.25（未记录）'
- en: '`2182bf5c-ef0d-489a-91da-49dbc3090d2a` for 3.26'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`2182bf5c-ef0d-489a-91da-49dbc3090d2a` 用于 3.26'
- en: '`aa1f7df0-828a-4fcd-9afc-2dc80491aca7` for 3.27'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`aa1f7df0-828a-4fcd-9afc-2dc80491aca7` 用于 3.27'
- en: 'Unfortunately, if you don’t have access to at least CMake 3.25, you’re out
    of luck. Modules weren’t available before that version. Additionally, if CMake
    is older than 3.27, you’ll need to set one more variable to enable dynamic dependencies
    for modules:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，如果你没有至少访问 CMake 3.25，你将无法使用。模块在此版本之前不可用。此外，如果 CMake 版本低于 3.27，你需要设置另一个变量来启用模块的动态依赖：
- en: '[PRE3]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here’s how you might automatically pick the correct API key for the current
    version, and explicitly disable builds for versions you don’t support (in this
    example, we’ll only support CMake 3.26 and above).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是你如何自动选择当前版本的正确 API 密钥，并明确禁用不支持的版本的构建（在此示例中，我们只支持 CMake 3.26 及以上）。
- en: '**ch10/01-cxx-modules/CMakeLists.txt**'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**ch10/01-cxx-modules/CMakeLists.txt**'
- en: '[PRE4]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let’s break it down statement by statement:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐条分析：
- en: First, we check if the version is 3.28 or newer. This allows us to enable the
    `CMP0155` policy, with `cmake_policy()`. This is required if we want to support
    versions older than 3.28.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们检查版本是否为 3.28 或更高。这使我们能够启用 `CMP0155` 策略，使用 `cmake_policy()`。如果我们希望支持低于 3.28
    的版本，这是必需的。
- en: If that’s not the case, we’ll check if the version is above 3.27\. If so, we’ll
    set the appropriate API key.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果不是这种情况，我们将检查版本是否高于 3.27。如果是，我们将设置相应的 API 密钥。
- en: If it’s not above 3.27, we’ll check if it’s above 3.26\. If that’s the case,
    set the appropriate API key and enable the experimental C++20 module dynamic dependency
    flag.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果版本不高于 3.27，我们将检查它是否高于 3.26。如果是这样，设置适当的 API 密钥并启用实验性的 C++20 模块动态依赖标志。
- en: If the version is lower than 3.26, it’s not supported by our project, and a
    fatal error message will be printed informing the user.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果版本低于 3.26，则不受我们的项目支持，将打印一个致命错误消息通知用户。
- en: This allows us to support the range of CMake versions, starting from 3.26\.
    If we have the benefit of running CMake 3.28 in every environment the project
    is going to be built in, the above `if()` block is not necessary. So, what is?
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这使我们能够支持从 3.26 开始的一系列 CMake 版本。如果我们在项目要构建的每个环境中都能使用 CMake 3.28，那么上面的 `if()`
    代码块就不再需要。那么，什么是必需的呢？
- en: Enabling support for CMake 3.28 and up
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启用对 CMake 3.28 及更高版本的支持
- en: 'To use C++20 modules since 3.28, you explicitly have to declare this version
    as minimal. Use a project header like this:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用C++20模块（从3.28开始），你必须明确声明此版本为最小版本。可以使用如下的项目头文件：
- en: '[PRE5]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: It will enable the `CMP0155` policy by default if the minimum required version
    is set to 3.28 or above. Read on to learn what other aspects we need to configure
    before defining a module. If you require 3.27 or lower, your build will likely
    fail, even if the project is being built with CMake 3.28 or newer.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果最小所需版本设置为3.28或更高，它将默认启用`CMP0155`策略。继续阅读，了解在定义模块之前，我们还需要配置哪些其他方面。如果需要3.27或更低版本，构建可能会失败，即使项目是使用CMake
    3.28或更新版本构建的。
- en: The next thing to consider is the compiler requirements.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来需要考虑的是编译器要求。
- en: Setting the compiler requirements
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置编译器要求
- en: Regardless of whether we’re building with CMake 3.26, 3.27, 3.28, or newer,
    to create solutions using C++ modules, there are two global variables that we
    need to set. The first disables unsupported C++ extensions, and the second ensures
    that the compiler supports the required standard.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 无论我们使用CMake 3.26、3.27、3.28还是更新版本构建，要创建使用C++模块的解决方案，都需要设置两个全局变量。第一个禁用不支持的C++扩展，第二个确保编译器支持所需的标准。
- en: '**ch10/01-cxx-modules/CMakeLists.txt (continued)**'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**ch10/01-cxx-modules/CMakeLists.txt（续）**'
- en: '[PRE6]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Setting the standard may seem redundant, given that there’s a very limited number
    of compilers that support modules. Nonetheless, it’s good practice for future-proofing
    projects.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 设置标准可能看起来是多余的，因为支持模块的编译器数量非常有限。然而，为了确保项目的未来可用性，这是一个很好的实践。
- en: The general configuration is quite straightforward and concludes here. We can
    now proceed to define a module within CMake.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 一般配置相当直接，到此为止。我们现在可以继续在CMake中定义一个模块。
- en: Declaring a C++ module
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 声明C++模块
- en: 'CMake module definition leverages the `target_sources()` command and the `FILE_SET`
    keyword:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: CMake模块定义利用了`target_sources()`命令和`FILE_SET`关键字：
- en: '[PRE7]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the highlighted line above, we introduce a new file set type: `CXX_MODULES`.
    This type is supported by default only since CMake 3.28\. For 3.26, the experimental
    API has to be enabled. Without proper support, an error message like the following
    will occur:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面突出显示的行中，我们引入了一种新的文件集类型：`CXX_MODULES`。从CMake 3.28开始，默认支持此类型。对于3.26版本，需要启用实验性API。如果没有正确的支持，将会出现如下错误信息：
- en: '[PRE8]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: If you see this in the build output, check if your code is correct. This message
    will also appear if the API key value is incorrect for the version used.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在构建输出中看到这个消息，请检查你的代码是否正确。如果API密钥值对于所用版本不正确，也会出现此消息。
- en: Defining modules within the same binary where they are used offers benefits,
    as discussed earlier. However, the advantages are more pronounced when creating
    a library. Such libraries can be utilized in other projects or within the same
    project by other libraries, further enhancing modularity.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在同一个二进制文件中定义模块，正如之前讨论的那样，具有许多好处。然而，当创建一个库时，这些优势更加明显。这样的库可以在其他项目中使用，也可以被同一个项目中的其他库使用，从而进一步增强模块化。
- en: 'To declare the module and link it with the main program, the following CMake
    configuration is used:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 要声明模块并将其与主程序链接，可以使用以下CMake配置：
- en: '**ch10/01-cxx-modules/CMakeLists.txt (continued)**'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '**ch10/01-cxx-modules/CMakeLists.txt（续）**'
- en: '[PRE9]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: To ensure that this library can be used in other projects, we must use the `target_compile_features()`
    command and explicitly require `cxx_std_20`. Additionally, we have to repeat setting
    the `CXX_EXTENSIONS OFF` on the target level. Without this, CMake will generate
    an error and halt the build. This seems redundant and will likely be solved in
    future versions of CMake.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保这个库可以在其他项目中使用，我们必须使用`target_compile_features()`命令，并明确要求`cxx_std_20`。此外，我们还需要在目标级别重复设置`CXX_EXTENSIONS
    OFF`。如果没有这个设置，CMake会生成错误并停止构建。这看起来有些冗余，可能会在未来的CMake版本中解决。
- en: With the project setup complete, it’s time to finally build it.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 项目设置完成后，是时候进行最终的构建了。
- en: Configuring the toolchain
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置工具链
- en: According to a blog post on Kitware’s page (see the *Further reading* section),
    CMake supports modules as early as version 3.25\. Despite the fact that 3.28 makes
    the feature officially supported, this isn’t the only piece of the puzzle that
    we have to get right to enjoy the convenience of modules.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 根据Kitware页面上的一篇博客文章（见*进一步阅读*部分），CMake早在版本3.25就已支持模块。尽管3.28正式支持此功能，但这并不是我们享受模块便利所需解决的唯一问题。
- en: 'The next requirement focuses on the buildsystem: it needs to support dynamic
    dependencies. As of now, you have only two choices:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个要求集中在构建系统上：它需要支持动态依赖。目前，你只有两个选择：
- en: Ninja 1.11 and newer (Ninja and Ninja Multi-Config)
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ninja 1.11 及更新版本（Ninja 和 Ninja Multi-Config）
- en: Visual Studio 17 2022 and newer
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio 17 2022 及更新版本
- en: 'Similarly, your compiler needs to produce files that map source dependencies
    for CMake in a specific format. This format is described in a paper written by
    Kitware developers known as `p1589r5`. This paper has been submitted to all major
    compilers for implementation. Currently, only three compilers have managed to
    implement the required format:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，你的编译器需要生成特定格式的文件，以便 CMake 映射源依赖。该格式在 Kitware 开发人员撰写的论文 `p1589r5` 中有描述。这篇论文已提交给所有主要编译器进行实现。目前，只有三种编译器已经成功实现了所需的格式：
- en: Clang 16
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Clang 16
- en: MSVC in Visual Studio 2022 17.4 (19.34)
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio 2022 17.4（19.34）中的 MSVC
- en: GCC 14 (for the in-development branch, after 2023-09-20) and newer
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GCC 14（用于开发中的分支，在 2023-09-20 后）及更新版本
- en: 'Assuming you have all the necessary tools in your environment (you may use
    the Docker image we’re providing for this book), and your CMake project is ready
    for building, all that remains is to configure CMake to use the required toolchain.
    As you may recall from the first chapter, you can select the buildsystem generator
    using the `-G` command-line argument:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你已经在环境中配置了所有必要的工具（你可以使用我们为本书提供的 Docker 镜像），并且你的 CMake 项目已经准备好构建，那么剩下的就是配置
    CMake 以使用所需的工具链。正如你在第一章中回顾的那样，你可以使用 `-G` 命令行参数选择构建系统生成器：
- en: '[PRE10]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This command will configure the project to use the Ninja buildsystem. The next
    step is to set the compiler. If your default compiler doesn’t support the modules
    and you have another one installed to try things out, you can do this by defining
    the global variable `CMAKE_CXX_COMPILER` like this:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令将配置项目使用 Ninja 构建系统。下一步是设置编译器。如果你的默认编译器不支持模块，而你已安装了另一个编译器来尝试，那么你可以通过像这样定义全局变量
    `CMAKE_CXX_COMPILER` 来实现：
- en: '[PRE11]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We chose Clang 18 in our example because it’s the latest version available
    at the time of writing (bundled in the Docker image). After successfully configuring
    (you might see some warnings about experimental features), you need to build the
    project:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在示例中选择了 Clang 18，因为它是撰写本文时最新的版本（捆绑在 Docker 镜像中）。在成功配置后（你可能会看到一些关于实验性功能的警告），你需要构建项目：
- en: '[PRE12]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'As always, be sure to replace the placeholders `<build tree>` and `<source
    tree>` with appropriate paths. If everything goes smoothly, you can run your program
    and observe the module function working as expected:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 一如既往，请确保将占位符 `<build tree>` 和 `<source tree>` 替换为适当的路径。如果一切顺利，你可以运行你的程序并观察模块功能是否按预期工作：
- en: '[PRE13]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: There you have it, C++20 modules working in practice.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是 C++20 模块在实践中工作的方式。
- en: The Further reading section includes a blog post from Kitware and a proposal
    on the source de­pendency format for C++ compilers, providing more insights into
    the implementation and usage of C++20 modules.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 进一步阅读部分包括来自 Kitware 的一篇博客文章，以及关于 C++ 编译器源依赖格式的提案，提供了有关 C++20 模块实现和使用的更多见解。
- en: Summary
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we’ve delved into C++20 modules, clarifying that they are distinct
    from CMake modules and represent a significant advancement in C++ to streamline
    compilation and address challenges associated with redundant header compilation
    and problematic preprocessor macros. We demonstrated how to write and import a
    C++20 module using a simple example. We then explored setting up CMake for C++20
    modules. Since this feature is experimental, specific variables need to be set,
    and we provided a series of conditional statements to ensure your project is configured
    correctly for the CMake version in use.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们深入探讨了 C++20 模块，明确它们不同于 CMake 模块，并代表了 C++ 在简化编译方面的一项重大进展，解决了与冗余头文件编译和有问题的预处理器宏相关的挑战。我们展示了如何使用一个简单的示例编写并导入
    C++20 模块。接着，我们探索了如何为 C++20 模块设置 CMake。由于此功能仍处于实验阶段，因此需要设置特定的变量，我们提供了一系列条件语句，以确保你的项目正确配置了所使用的
    CMake 版本。
- en: Regarding the necessary tools, we emphasized that the buildsystem must support
    dynamic dependencies, with Ninja 1.11 or newer being the current option. For compiler
    support, Clang 16 and MSVC in Visual Studio 2022 17.4 (19.34) are suitable for
    full C++20 module support, while GCC support is still pending. We additionally
    guided you through configuring CMake to use the selected toolchain, involving
    choosing a buildsystem generator and setting the compiler version. After configuring
    and building the project, you can run your program to see the C++20 module in
    action.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 关于所需的工具，我们强调了构建系统必须支持动态依赖，目前的选项是 Ninja 1.11 或更新版本。对于编译器支持，Clang 16 和 Visual
    Studio 2022 17.4（19.34）中的 MSVC 支持完整的 C++20 模块，而 GCC 的支持仍在等待中。我们还指导您如何配置 CMake
    以使用选定的工具链，包括选择构建系统生成器并设置编译器版本。在配置并构建项目之后，您可以运行程序查看 C++20 模块的实际效果。
- en: In the next chapter, we’ll learn about importance and application of automated
    testing, and the available CMake support for testing frameworks.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习自动化测试的重要性及其应用，以及 CMake 对测试框架的支持。
- en: Further reading
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'For more information, you can refer to the following resources:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更多信息，您可以参考以下资源：
- en: 'Blog post describing the new feature: [https://www.kitware.com/import-cmake-c20-modules/](https://www.kitware.com/import-cmake-c20-modules/)'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述新特性的博客文章：[https://www.kitware.com/import-cmake-c20-modules/](https://www.kitware.com/import-cmake-c20-modules/)
- en: 'Proposed source dependency format for C++ compilers: [https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1689r5.html](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1689r5.html)'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提议的 C++ 编译器源依赖格式：[https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1689r5.html](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1689r5.html)
- en: Leave a review!
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 留下评价！
- en: Enjoying this book? Help readers like you by leaving an Amazon review. Scan
    the QR code below to get a free eBook of your choice.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 喜欢这本书吗？通过在亚马逊上留下评价来帮助像您一样的读者。扫描下面的二维码，获取您选择的免费电子书。
- en: '![](img/Review_Copy.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Review_Copy.png)'
