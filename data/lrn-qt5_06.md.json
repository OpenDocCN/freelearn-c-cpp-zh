["```cpp\nint add(intx, int y);\n```", "```cpp\n********* Start testing of ClientTests *********\nConfig: Using QtTest library 5.10.0, Qt 5.10.0 (i386-little_endian-ilp32 shared (dynamic) debug build; by GCC 5.3.0)\nPASS : ClientTests::initTestCase()\nPASS : ClientTests::testCase1()\nPASS : ClientTests::cleanupTestCase()\nTotals: 3 passed, 0 failed, 0 skipped, 0 blacklisted, 0ms\n********* Finished testing of ClientTests *********\n```", "```cpp\n********* Start testing of ClientTests *********\nConfig: Using QtTest library 5.10.0, Qt 5.10.0 (i386-little_endian-ilp32 shared (dynamic) debug build; by GCC 5.3.0)\nPASS : ClientTests::initTestCase()\nPASS : ClientTests::testCase1()\nFAIL! : ClientTests::testCase2() 'false' returned FALSE. (Failure)\n..\\..\\cm\\cm-tests\\source\\models\\client-tests.cpp(37) : failure location\nPASS : ClientTests::cleanupTestCase()\nTotals: 3 passed, 1 failed, 0 skipped, 0 blacklisted, 0ms\n********* Finished testing of ClientTests *********\n```", "```cpp\n#ifndef TESTSUITE_H\n#define TESTSUITE_H\n\n#include <QObject>\n#include <QString>\n#include <QtTest/QtTest>\n\n#include <vector>\n\nnamespace cm {\n\nclass TestSuite : public QObject\n{\n    Q_OBJECT\npublic:\n    explicit TestSuite(const QString& _testName = \"\");\n    virtual ~TestSuite();\n\n    QString testName;\n    static std::vector<TestSuite*>& testList();\n};\n\n}\n\n#endif\n```", "```cpp\n#include \"test-suite.h\"\n\n#include <QDebug>\n\nnamespace cm {\n\nTestSuite::TestSuite(const QString& _testName)\n    : QObject()\n    , testName(_testName)\n{\n    qDebug() << \"Creating test\" << testName;\n    testList().push_back(this);\n    qDebug() << testList().size() << \" tests recorded\";\n}\n\nTestSuite::~TestSuite()\n{\n    qDebug() << \"Destroying test\";\n}\n\nstd::vector<TestSuite*>& TestSuite::testList()\n{\n    static std::vector<TestSuite*> instance = std::vector<TestSuite*>();\n    return instance;\n}\n\n}\n\n```", "```cpp\n#include <QtTest/QtTest>\n#include <QDebug>\n\n#include \"test-suite.h\"\n\nusing namespace cm;\n\nint main(int argc, char *argv[])\n{\n    Q_UNUSED(argc);\n    Q_UNUSED(argv);\n\n    qDebug() << \"Starting test suite...\";\n    qDebug() << \"Accessing tests from \" << &TestSuite::testList();\n    qDebug() << TestSuite::testList().size() << \" tests detected\";\n\n    int failedTestsCount = 0;\n\n    for(TestSuite* i : TestSuite::testList()) {\n        qDebug() << \"Executing test \" << i->testName;\n        QString filename(i->testName + \".xml\");\n        int result = QTest::qExec(i, QStringList() << \" \" << \"-o\" << \n                                  filename << \"-xunitxml\");\n        qDebug() << \"Test result \" << result;\n        if(result != 0) {\n            failedTestsCount++;\n        }\n    }\n\n    qDebug() << \"Test suite complete - \" << \n          QString::number(failedTestsCount) << \" failures detected.\";\n\n    return failedTestsCount;\n}\n```", "```cpp\nStarting test suite...\nAccessing tests from 0x40b040\n0 tests detected\nTest suite complete - \"0\" failures detected.\n```", "```cpp\nINCLUDEPATH += source \\\n    ../cm-lib/source\n```", "```cpp\n#ifndef MASTERCONTROLLERTESTS_H\n#define MASTERCONTROLLERTESTS_H\n\n#include <QtTest>\n\n#include <controllers/master-controller.h>\n#include <test-suite.h>\n\nnamespace cm {\nnamespace controllers {\n\nclass MasterControllerTests : public TestSuite\n{\n    Q_OBJECT\n\npublic:\n    MasterControllerTests();\n\nprivate slots:\n    /// @brief Called before the first test function is executed\n    void initTestCase();\n    /// @brief Called after the last test function was executed.\n    void cleanupTestCase();\n    /// @brief Called before each test function is executed.\n    void init();\n    /// @brief Called after every test function.\n    void cleanup();\n\nprivate slots:\n    void welcomeMessage_returnsCorrectMessage();\n\nprivate:\n    MasterController masterController;\n};\n\n}}\n\n#endif\n```", "```cpp\n#include \"master-controller-tests.h\"\n\nnamespace cm {\nnamespace controllers { // Instance\n\nstatic MasterControllerTests instance;\n\nMasterControllerTests::MasterControllerTests()\n    : TestSuite( \"MasterControllerTests\" )\n{\n}\n\n}\n\nnamespace controllers { // Scaffolding\n\nvoid MasterControllerTests::initTestCase()\n{\n}\n\nvoid MasterControllerTests::cleanupTestCase()\n{\n}\n\nvoid MasterControllerTests::init()\n{\n}\n\nvoid MasterControllerTests::cleanup()\n{\n}\n\n}\n\nnamespace controllers { // Tests\n\nvoid MasterControllerTests::welcomeMessage_returnsCorrectMessage()\n{\n    QCOMPARE( masterController.welcomeMessage(), QString(\"Welcome to the Client Management system!\") );\n}\n\n}}\n```", "```cpp\ndivideTwoNumbers_givenTwoValidNumbers_returnsCorrectResult()\ndivideTwoNumbers_givenZeroDivisor_throwsInvalidArgumentException()\n```", "```cpp\nCreating test \"MasterControllerTests\"\n1 tests recorded\nStarting test suite...\nAccessing tests from 0x40b040\n1 tests detected\nExecuting test \"MasterControllerTests\"\nTest result 1\nTest suite complete - \"1\" failures detected.\nDestroying test\n```", "```cpp\n<testsuite name=\"cm::controllers::MasterControllerTests\" tests=\"3\" failures=\"1\" errors=\"0\">\n    <properties>\n       <property name=\"QTestVersion\" value=\"5.10.0\"/>\n       <property name=\"QtVersion\" value=\"5.10.0\"/>\n       <property name=\"QtBuild\" value=\"Qt 5.10.0 (i386-little_endian- \n                 ilp32 shared (dynamic) debug build; by GCC 5.3.0)\"/>\n    </properties>\n    <testcase name=\"initTestCase\" result=\"pass\"/>\n    <testcase name=\"welcomeMessage_returnsCorrectMessage\" \n                    result=\"fail\">\n    <failure result=\"fail\" message=\"Compared values are not the same Actual (masterController.welcomeMessage) : \"This is MasterController to Major Tom\" Expected (QString(\"Welcome to the Client Management system!\")): \"Welcome to the Client Management system!\"\"/>\n    </testcase>\n    <testcase name=\"cleanupTestCase\" result=\"pass\"/>\n    <system-err/>\n</testsuite>\n```", "```cpp\nQString welcomeMessage = \"Welcome to the Client Management system!\";\n```", "```cpp\nCreating test \"MasterControllerTests\"\n1 tests recorded\nStarting test suite...\nAccessing tests from 0x40b040\n1 tests detected\nExecuting test \"MasterControllerTests\"\nTest result 0\nTest suite complete - \"0\" failures detected.\nDestroying test\n```", "```cpp\n#ifndef INTDECORATORTESTS_H\n#define INTDECORATORTESTS_H\n\n#include <QtTest>\n\n#include <data/int-decorator.h>\n#include <test-suite.h>\n\nnamespace cm {\nnamespace data {\n\nclass IntDecoratorTests : public TestSuite\n{\n    Q_OBJECT\n\npublic:\n    IntDecoratorTests();\n\nprivate slots:\n    void constructor_givenNoParameters_setsDefaultProperties();\n    void constructor_givenParameters_setsProperties();\n    void setValue_givenNewValue_updatesValueAndEmitsSignal();\n    void setValue_givenSameValue_takesNoAction();\n    void jsonValue_whenDefaultValue_returnsJson();\n    void jsonValue_whenValueSet_returnsJson();\n    void update_whenPresentInJson_updatesValue();\n    void update_whenNotPresentInJson_updatesValueToDefault();\n};\n\n}}\n\n#endif\n```", "```cpp\n#include \"int-decorator-tests.h\"\n\n#include <QSignalSpy>\n\n#include <data/entity.h>\n\nnamespace cm {\nnamespace data { // Instance\n\nstatic IntDecoratorTests instance;\n\nIntDecoratorTests::IntDecoratorTests()\n    : TestSuite( \"IntDecoratorTests\" )\n{\n}\n\n}\n\nnamespace data { // Tests\n\nvoid IntDecoratorTests::constructor_givenNoParameters_setsDefaultProperties()\n{\n    IntDecorator decorator;\n    QCOMPARE(decorator.parentEntity(), nullptr);\n    QCOMPARE(decorator.key(), QString(\"SomeItemKey\"));\n    QCOMPARE(decorator.label(), QString(\"\"));\n    QCOMPARE(decorator.value(), 0);\n}\n\nvoid IntDecoratorTests::constructor_givenParameters_setsProperties()\n{\n    Entity parentEntity;\n    IntDecorator decorator(&parentEntity, \"Test Key\", \"Test Label\", \n                                                       99);\n    QCOMPARE(decorator.parentEntity(), &parentEntity);\n    QCOMPARE(decorator.key(), QString(\"Test Key\"));\n    QCOMPARE(decorator.label(), QString(\"Test Label\"));\n    QCOMPARE(decorator.value(), 99);\n}\n\nvoid IntDecoratorTests::setValue_givenNewValue_updatesValueAndEmitsSignal()\n{\n    IntDecorator decorator;\n    QSignalSpy valueChangedSpy(&decorator, \n                               &IntDecorator::valueChanged);\n    QCOMPARE(decorator.value(), 0);\n    decorator.setValue(99);\n    QCOMPARE(decorator.value(), 99);\n    QCOMPARE(valueChangedSpy.count(), 1);\n}\n\nvoid IntDecoratorTests::setValue_givenSameValue_takesNoAction()\n{\n    Entity parentEntity;\n    IntDecorator decorator(&parentEntity, \"Test Key\", \"Test Label\", \n                                                               99);\n    QSignalSpy valueChangedSpy(&decorator, \n                               &IntDecorator::valueChanged);\n    QCOMPARE(decorator.value(), 99);\n    decorator.setValue(99);\n    QCOMPARE(decorator.value(), 99);\n    QCOMPARE(valueChangedSpy.count(), 0);\n}\n\nvoid IntDecoratorTests::jsonValue_whenDefaultValue_returnsJson()\n{\n    IntDecorator decorator;\n    QCOMPARE(decorator.jsonValue(), QJsonValue(0));\n}\nvoid IntDecoratorTests::jsonValue_whenValueSet_returnsJson()\n{\n    IntDecorator decorator;\n    decorator.setValue(99);\n    QCOMPARE(decorator.jsonValue(), QJsonValue(99));\n}\n\nvoid IntDecoratorTests::update_whenPresentInJson_updatesValue()\n{\n    Entity parentEntity;\n    IntDecorator decorator(&parentEntity, \"Test Key\", \"Test Label\", 99);\n    QSignalSpy valueChangedSpy(&decorator, \n                               &IntDecorator::valueChanged);\n    QCOMPARE(decorator.value(), 99);\n    QJsonObject jsonObject;\n    jsonObject.insert(\"Key 1\", \"Value 1\");\n    jsonObject.insert(\"Test Key\", 123);\n    jsonObject.insert(\"Key 3\", 3);\n    decorator.update(jsonObject);\n    QCOMPARE(decorator.value(), 123);\n    QCOMPARE(valueChangedSpy.count(), 1);\n}\n\nvoid IntDecoratorTests::update_whenNotPresentInJson_updatesValueToDefault()\n{\n    Entity parentEntity;\n    IntDecorator decorator(&parentEntity, \"Test Key\", \"Test Label\", \n                                                                99);\n    QSignalSpy valueChangedSpy(&decorator, \n                               &IntDecorator::valueChanged);\n    QCOMPARE(decorator.value(), 99);\n    QJsonObject jsonObject;\n    jsonObject.insert(\"Key 1\", \"Value 1\");\n    jsonObject.insert(\"Key 2\", 123);\n    jsonObject.insert(\"Key 3\", 3);\n    decorator.update(jsonObject);\n    QCOMPARE(decorator.value(), 0);\n    QCOMPARE(valueChangedSpy.count(), 1);\n}\n\n}}\n```", "```cpp\nbool isCalled = false;\nQObject::connect(&decorator, &IntDecorator::valueChanged, [&isCalled](){\n    isCalled = true;\n});\n\n/*...Perform action...*/ \n\nQVERIFY(isCalled);\n```", "```cpp\nQCOMPARE(decorator.value(), static_cast<int>(eTestEnum::Value2));\n```", "```cpp\nQCOMPARE(decorator.value(), 2);\n```", "```cpp\nenum eTestEnum {\n    Unknown = 0,\n    MyAmazingNewTestValue,\n    Value1,\n    Value2,\n    Value3\n};\n```", "```cpp\n#ifndef CLIENTTESTS_H\n#define CLIENTTESTS_H\n\n#include <QtTest>\n#include <QJsonObject>\n\n#include <models/client.h>\n#include <test-suite.h>\n\nnamespace cm {\nnamespace models {\n\nclass ClientTests : public TestSuite\n{\n    Q_OBJECT\n\npublic:\n    ClientTests();\n\nprivate slots:\n    void constructor_givenParent_setsParentAndDefaultProperties();\n    void constructor_givenParentAndJsonObject_setsParentAndProperties();\n    void toJson_withDefaultProperties_constructsJson();\n    void toJson_withSetProperties_constructsJson();\n    void update_givenJsonObject_updatesProperties();\n    void update_givenEmptyJsonObject_updatesPropertiesToDefaults();\n\nprivate:\n    void verifyBillingAddress(const QJsonObject& jsonObject);\n    void verifyDefaultBillingAddress(const QJsonObject& jsonObject);\n    void verifyBillingAddress(Address* address);\n    void verifyDefaultBillingAddress(Address* address);\n    void verifySupplyAddress(const QJsonObject& jsonObject);\n    void verifyDefaultSupplyAddress(const QJsonObject& jsonObject);\n    void verifySupplyAddress(Address* address);\n    void verifyDefaultSupplyAddress(Address* address);\n    void verifyAppointments(const QJsonObject& jsonObject);\n    void verifyDefaultAppointments(const QJsonObject& jsonObject);\n    void verifyAppointments(const QList<Appointment*>& appointments);\n    void verifyDefaultAppointments(const QList<Appointment*>& appointments);\n    void verifyContacts(const QJsonObject& jsonObject);\n    void verifyDefaultContacts(const QJsonObject& jsonObject);\n    void verifyContacts(const QList<Contact*>& contacts);\n    void verifyDefaultContacts(const QList<Contact*>& contacts);\n\n    QByteArray jsonByteArray = R\"(\n    {\n        \"reference\": \"CM0001\",\n        \"name\": \"Mr Test Testerson\",\n        \"billingAddress\": {\n            \"building\": \"Billing Building\",\n            \"city\": \"Billing City\",\n            \"postcode\": \"Billing Postcode\",\n            \"street\": \"Billing Street\"\n        },\n        \"appointments\": [\n         {\"startAt\": \"2017-08-20T12:45:00\", \"endAt\": \"2017-08-\n                      20T13:00:00\", \"notes\": \"Test appointment 1\"},\n         {\"startAt\": \"2017-08-21T10:30:00\", \"endAt\": \"2017-08-\n                      21T11:30:00\", \"notes\": \"Test appointment 2\"}\n        ],\n        \"contacts\": [\n            {\"contactType\": 2, \"address\":\"email@test.com\"},\n            {\"contactType\": 1, \"address\":\"012345678\"}\n        ],\n        \"supplyAddress\": {\n            \"building\": \"Supply Building\",\n            \"city\": \"Supply City\",\n            \"postcode\": \"Supply Postcode\",\n            \"street\": \"Supply Street\"\n        }\n    })\";\n};\n\n}}\n\n#endif\n```", "```cpp\nvoid ClientTests::constructor_givenParent_setsParentAndDefaultProperties()\n{\n    Client testClient(this);\n    QCOMPARE(testClient.parent(), this);\n    QCOMPARE(testClient.reference->value(), QString(\"\"));\n    QCOMPARE(testClient.name->value(), QString(\"\"));\n\n    verifyDefaultBillingAddress(testClient.billingAddress);\n    verifyDefaultSupplyAddress(testClient.supplyAddress);\n    verifyDefaultAppointments(testClient.appointments-\n                              >derivedEntities());\n    verifyDefaultContacts(testClient.contacts->derivedEntities());\n}\n\nvoid ClientTests::constructor_givenParentAndJsonObject_setsParentAndProperties()\n{\n    Client testClient(this, QJsonDocument::fromJson(jsonByteArray).object());\n    QCOMPARE(testClient.parent(), this);\n    QCOMPARE(testClient.reference->value(), QString(\"CM0001\"));\n    QCOMPARE(testClient.name->value(), QString(\"Mr Test Testerson\"));\n\n    verifyBillingAddress(testClient.billingAddress);\n    verifySupplyAddress(testClient.supplyAddress);\n    verifyAppointments(testClient.appointments->derivedEntities());\n    verifyContacts(testClient.contacts->derivedEntities());\n}\n```", "```cpp\nvoid ClientTests::toJson_withDefaultProperties_constructsJson()\n{\n    Client testClient(this);\n    QJsonDocument jsonDoc(testClient.toJson());\n    QVERIFY(jsonDoc.isObject());\n    QJsonObject jsonObject = jsonDoc.object();\n    QVERIFY(jsonObject.contains(\"reference\"));\n    QCOMPARE(jsonObject.value(\"reference\").toString(), QString(\"\"));\n    QVERIFY(jsonObject.contains(\"name\"));\n    QCOMPARE(jsonObject.value(\"name\").toString(), QString(\"\"));\n    verifyDefaultBillingAddress(jsonObject);\n    verifyDefaultSupplyAddress(jsonObject);\n    verifyDefaultAppointments(jsonObject);\n    verifyDefaultContacts(jsonObject);\n}\n\nvoid ClientTests::toJson_withSetProperties_constructsJson()\n{\n    Client testClient(this, QJsonDocument::fromJson(jsonByteArray).object());\n    QCOMPARE(testClient.reference->value(), QString(\"CM0001\"));\n    QCOMPARE(testClient.name->value(), QString(\"Mr Test Testerson\"));\n\n    verifyBillingAddress(testClient.billingAddress);\n    verifySupplyAddress(testClient.supplyAddress);\n    verifyAppointments(testClient.appointments->derivedEntities());\n    verifyContacts(testClient.contacts->derivedEntities());\n    QJsonDocument jsonDoc(testClient.toJson());\n    QVERIFY(jsonDoc.isObject());\n    QJsonObject jsonObject = jsonDoc.object();\n    QVERIFY(jsonObject.contains(\"reference\"));\n    QCOMPARE(jsonObject.value(\"reference\").toString(), QString(\"CM0001\"));\n    QVERIFY(jsonObject.contains(\"name\"));\n    QCOMPARE(jsonObject.value(\"name\").toString(), QString(\"Mr Test \n                                                  Testerson\"));\n    verifyBillingAddress(jsonObject);\n    verifySupplyAddress(jsonObject);\n    verifyAppointments(jsonObject);\n    verifyContacts(jsonObject);\n}\n```", "```cpp\nvoid ClientTests::update_givenJsonObject_updatesProperties()\n{\n    Client testClient(this);\n    testClient.update(QJsonDocument::fromJson(jsonByteArray).object());\n    QCOMPARE(testClient.reference->value(), QString(\"CM0001\"));\n    QCOMPARE(testClient.name->value(), QString(\"Mr Test Testerson\"));\n\n    verifyBillingAddress(testClient.billingAddress);\n    verifySupplyAddress(testClient.supplyAddress);\n    verifyAppointments(testClient.appointments->derivedEntities());\n    verifyContacts(testClient.contacts->derivedEntities());\n}\n\nvoid ClientTests::update_givenEmptyJsonObject_updatesPropertiesToDefaults()\n{\n    Client testClient(this, QJsonDocument::fromJson(jsonByteArray).object());\n    QCOMPARE(testClient.reference->value(), QString(\"CM0001\"));\n    QCOMPARE(testClient.name->value(), QString(\"Mr Test Testerson\"));\n    verifyBillingAddress(testClient.billingAddress);\n    verifySupplyAddress(testClient.supplyAddress);\n    verifyAppointments(testClient.appointments->derivedEntities());\n    verifyContacts(testClient.contacts->derivedEntities());\n    testClient.update(QJsonObject());\n    QCOMPARE(testClient.reference->value(), QString(\"\"));\n    QCOMPARE(testClient.name->value(), QString(\"\"));\n\n    verifyDefaultBillingAddress(testClient.billingAddress);\n    verifyDefaultSupplyAddress(testClient.supplyAddress);\n    verifyDefaultAppointments(testClient.appointments-\n                              >derivedEntities());\n    verifyDefaultContacts(testClient.contacts->derivedEntities());\n}\n```", "```cpp\nvoid ClientTests::verifyDefaultSupplyAddress(Address* address)\n{\n    QVERIFY(address != nullptr);\n    QCOMPARE(address->building->value(), QString(\"\"));\n    QCOMPARE(address->street->value(), QString(\"\"));\n    QCOMPARE(address->city->value(), QString(\"\"));\n    QCOMPARE(address->postcode->value(), QString(\"\"));\n}\n```", "```cpp\n#ifndef MOCKING_H\n#define MOCKING_H\n\n#include <QDebug>\n\nclass Client\n{\npublic:\n    void save()\n    {\n        qDebug() << \"Saving Client\";\n    }\n};\n\n#endif\n```", "```cpp\nengine.load(QUrl(QStringLiteral(\"qrc:/main.qml\")));\n\nClient client;\nclient.save();\n```", "```cpp\nSaving Client\n```", "```cpp\nclass Client;\n\nclass DatabaseController\n{\npublic:\n    DatabaseController()\n    {\n        qDebug() << \"Creating a new database connection\";\n    }\n\n    void save(Client* client)\n    {\n        qDebug() << \"Saving a Client to the production database\";\n    }\n};\n```", "```cpp\nclass Client\n{\n    DatabaseController databaseController;\n\npublic:\n    void save()\n    {\n        qDebug() << \"Saving Client\";\n        databaseController.save(this);\n    }\n};\n```", "```cpp\nqDebug() << \"Running the production code...\";\n\nClient client1;\nclient1.save();\nClient client2;\nclient2.save();\n```", "```cpp\nRunning the production code\u2026\nCreating a new database connection\nSaving Client\nSaving a Client to the production database\nCreating a new database connection\nSaving Client\nSaving a Client to the production database\n```", "```cpp\nclass Client\n{\n    DatabaseController& databaseController;\n\npublic:\n    Client(DatabaseController& _databaseController)\n        : databaseController(_databaseController)\n    {\n    }\n\n    void save()\n    {\n        qDebug() << \"Saving Client\";\n        databaseController.save(this);\n    }\n};\n```", "```cpp\nqDebug() << \"Running the production code...\";\n\nDatabaseController databaseController;\n\nClient client1(databaseController);\nclient1.save();\nClient client2(databaseController);\nclient2.save();\n```", "```cpp\nRunning the production code\u2026\nCreating a new database connection\nSaving Client\nSaving a Client to the production database\nSaving Client\nSaving a Client to the production database\n```", "```cpp\nclass ClientTestSuite\n{\npublic:\n    void saveTests()\n    {\n        DatabaseController databaseController;\n        Client client1(databaseController);\n        client1.save();\n        Client client2(databaseController);\n        client2.save();\n\n        qDebug() << \"Test passed!\";\n    }\n};\n```", "```cpp\nqDebug() << \"Running the test code...\";\n\nClientTestSuite testSuite;\ntestSuite.saveTests();\n```", "```cpp\nRunning the production code...\nCreating a new database connection\nSaving Client\nSaving a Client to the production database\nSaving Client\nSaving a Client to the production database\nRunning the test code...\nCreating a new database connection\nSaving Client\nSaving a Client to the production database\nSaving Client\nSaving a Client to the production database\nTest passed!\n```", "```cpp\nclass IDatabaseController\n{\npublic:\n    virtual ~IDatabaseController(){}\n    virtual void save(Client* client) = 0;\n};\n\nclass DatabaseController : public IDatabaseController\n{\npublic:\n    DatabaseController()\n    {\n        qDebug() << \"Creating a new database connection\";\n    }\n\n    void save(Client* client) override\n    {\n        qDebug() << \"Saving a Client to the production database\";\n    }\n};\n```", "```cpp\nclass MockDatabaseController : public IDatabaseController\n{\npublic:\n    MockDatabaseController()\n    {\n        qDebug() << \"Absolutely not creating any database connections \n                                                           at all\";\n    }\n\n    void save(Client* client) override\n    {\n        qDebug() << \"Just testing - not saving any Clients to any \n                                                   databases\";\n    }\n};\n```", "```cpp\nclass Client\n{\n    IDatabaseController& databaseController;\n\npublic:\n    Client(IDatabaseController& _databaseController)\n        : databaseController(_databaseController)\n    {\n    }\n\n    void save()\n    {\n        qDebug() << \"Saving Client\";\n        databaseController.save(this);\n    }\n};\n```", "```cpp\nvoid saveTests()\n{\n    MockDatabaseController databaseController;\n    ...\n}\n```", "```cpp\nRunning the production code...\nCreating a new database connection\nSaving Client\nSaving a Client to the production database\nSaving Client\nSaving a Client to the production database\nRunning the test code...\nAbsolutely not creating any database connections at all\nSaving Client\nJust testing - not saving any Clients to any databases\nSaving Client\nJust testing - not saving any Clients to any databases\nTest passed!\n```"]