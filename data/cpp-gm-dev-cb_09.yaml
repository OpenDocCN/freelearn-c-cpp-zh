- en: Chapter 9. Physics in Game Development
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章 游戏开发中的物理
- en: 'In this chapter, the following recipes will be covered:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，将介绍以下食谱：
- en: Using physics rules in your game
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在游戏中使用物理规则
- en: Making things collide
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使物体发生碰撞
- en: Installing and integrating Box2D
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和集成Box2D
- en: Making a basic 2D game
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 制作基本的2D游戏
- en: Making a 3D game
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 制作3D游戏
- en: Creating a particle system
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个粒子系统
- en: Using ragdoll in your game
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在游戏中使用布娃娃
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: In modern games, and games of the past, some type of physics has always been
    added to increase the sense of realism. Although most physics in games is an approximation
    or optimization of actual physics rules, it does a good job of achieving the desired
    results. Physics in games is basically a rough implementation of the Newtonian
    laws of motion, mixed with the basic fundamentals of collision detection.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代游戏和过去的游戏中，总是添加了某种类型的物理以增加现实感。尽管游戏中的大多数物理是对实际物理规则的近似或优化，但它确实很好地实现了期望的结果。游戏中的物理基本上是牛顿运动定律的粗略实现，结合了基本的碰撞检测原理。
- en: The trick for a games developer is to write the code in such a way that it does
    not bottleneck the CPU and the game still runs at a desired framework. We will
    discuss some basic concepts that we require to introduce physics into our game.
    For the sake of simplicity, we have integrated **Box2D** into our engine and,
    along with a renderer (**OpenGL**), we will output some physics interaction between
    objects. For 3D physics, we will get help from the **Bullet Physics** SDK and
    display the desired result.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏开发者的诀窍是以这样一种方式编写代码，使其不会成为CPU的瓶颈，游戏仍然以期望的框架运行。我们将讨论一些我们需要引入物理到游戏中的基本概念。为了简单起见，我们已经将**Box2D**集成到我们的引擎中，并且与渲染器（**OpenGL**）一起，我们将输出物体之间的一些物理交互。对于3D物理，我们将从**Bullet
    Physics** SDK获得帮助，并显示期望的结果。
- en: Using physics rules in your game
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在游戏中使用物理规则
- en: The first step to have physics in the game is to have the environment ready
    so that proper calculations can be applied to the bodies, and the physics simulation
    can work on them.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在游戏中引入物理的第一步是准备好环境，以便可以对物体应用适当的计算，并且物理模拟可以对其进行操作。
- en: Getting ready
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 做好准备
- en: To work through this recipe, you will need a machine running Windows and Visual
    Studio. No other prerequisites are required.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个食谱，您需要一台运行Windows和Visual Studio的计算机。不需要其他先决条件。
- en: How to do it…
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In this recipe, we will see how easy it is to add physics rules to our game:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将看到向游戏中添加物理规则是多么容易：
- en: First, set up all the objects in the game scene.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在游戏场景中设置所有物体。
- en: Give them properties so that they have vector points and velocities.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给它们属性，使它们具有矢量点和速度。
- en: Assign bounding boxes or bounding circles, depending on the shape of the object.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据物体的形状分配边界框或边界圆。
- en: Apply forces on each of the bodies.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对每个物体施加力。
- en: Detect collisions between them based on the shape.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据形状检测它们之间的碰撞。
- en: Solve for the constraints.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解决约束。
- en: Output the result.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出结果。
- en: 'Take a look at the following code snippet:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下以下代码片段：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How it works…
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The first step for a body to exhibit physics properties is for it to be a rigid
    body. This is however not true if your body is supposed to have some kind of fluid
    physics, as is the case for a plastic or any other soft body. In that case, we
    will have to set up the world differently, as it is a far more complex problem.
    A rigid body, in short, is any object in world space that will not deform, even
    if external sources are applied to it. Even in game engines such as Unity or UE4,
    if you assign a body as a rigid body, it will automatically react, based on the
    physics simulation property of the engine. After the rigid body is set up, we
    need to determine if the body is static or dynamic. This step is important as
    we can greatly reduce the number of calculations if we know that the body is static.
    A dynamic body must be assigned velocities as well as vector positions.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 身体展现物理属性的第一步是成为刚体。然而，如果您的身体应该具有某种流体物理特性，比如塑料或其他软体，这就不成立了。在这种情况下，我们将不得不以不同的方式设置世界，因为这是一个更加复杂的问题。简而言之，刚体是世界空间中的任何物体，即使外部力作用于它，它也不会变形。即使在Unity或UE4等游戏引擎中，如果将一个物体分配为刚体，它也会根据引擎的物理模拟属性自动反应。设置好刚体后，我们需要确定物体是静态的还是动态的。这一步很重要，因为如果我们知道物体是静态的，我们可以大大减少计算量。动态物体必须分配速度和矢量位置。
- en: 'After the previous step is complete, the next step is to add colliders or bounding
    objects. These will actually be used for the calculation of collision points.
    For example, if we have a 3D model of a human, it is sometimes not very wise to
    use the exact body mesh for collisions. Instead, we could use a capsule, which
    is a cylinder with two half spheres on either end for the body and a similar structure
    for the hands. In the case of a 2D object, we make a choice between a circular
    bounding object or a box bounding object. The following diagram shows the object
    in black and the bounding box in red. We can now apply force or impulse to the
    objects:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成上一步之后，下一步是添加碰撞器或边界对象。这些实际上将用于计算碰撞点。例如，如果我们有一个人的3D模型，有时使用精确的身体网格进行碰撞并不明智。相反，我们可以使用一个胶囊，它是一个在身体两端各有两个半球的圆柱体，手部也有类似的结构。对于2D物体，我们可以在圆形边界对象或矩形边界对象之间做出选择。以下图表显示了物体为黑色，边界框为红色。现在我们可以对物体施加力或冲量：
- en: '![How it works…](img/4929_09_01.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/4929_09_01.jpg)'
- en: The next step in the pipeline is to actually detect when two objects have collided.
    We will discuss this further in the next recipe. But let's say we have to detect
    whether `circle A` has collided with `circle B`; in most cases we just need information
    on whether they have collided, rather than the exact point of contact. In this
    case, we need to write some mathematical functions to detect that. We then return
    the output and, based on that, we write our logic for collision and finally display
    the result.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 管道中的下一步是实际检测两个物体何时发生碰撞。我们将在下一个步骤中进一步讨论这个问题。但是假设我们需要检测`圆A`是否与`圆B`发生了碰撞；在大多数情况下，我们只需要知道它们是否发生了碰撞，而不需要知道具体的接触点。在这种情况下，我们需要编写一些数学函数来检测。然后我们返回输出，并根据此编写我们的碰撞逻辑，最后显示结果。
- en: In the preceding example, there is a function called `b2CollidePolygonAndCircle`
    which is used to calculate the collision between a polygon and a circle. We define
    the two shapes and then try to calculate various details that determine whether
    the points of the polygon and the circle intersect. We need to find the edge list
    point and then calculate whether the points lie inside the other shape, and so
    on.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，有一个名为`b2CollidePolygonAndCircle`的函数，用于计算多边形和圆之间的碰撞。我们定义了两个形状，然后尝试计算确定多边形和圆的点是否相交的各种细节。我们需要找到边缘列表点，然后计算这些点是否在另一个形状内部，依此类推。
- en: Making things collide
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使物体发生碰撞
- en: A huge part of the physics system is making things collide. We need to figure
    out whether the objects have collided and pass on the relevant information. In
    this recipe, we will look at different techniques to do this.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 物理系统的一个重要部分是使物体发生碰撞。我们需要弄清楚物体是否发生了碰撞，并传递相关信息。在这个步骤中，我们将看看不同的技术来做到这一点。
- en: Getting ready
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You need a Windows machine and a working copy of Visual Studio. No other prerequisites
    are required.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要一台运行正常的Windows机器和一个可用的Visual Studio副本。不需要其他先决条件。
- en: How to do it…
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'In this recipe, we will find out how easy it is to detect collisions:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个步骤中，我们将找出检测碰撞有多容易：
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How it works…
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: Assuming the objects in the scene are already set up as rigid body, and the
    proper impulses are added to each, the next step is to detect collisions. An impulse
    is a force that acts on a body. The force acts briefly on the body and results
    in some change of momentum.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 假设场景中的物体已经设置为刚体，并且为每个物体添加了适当的冲量，下一步是检测碰撞。冲量是作用在物体上的力。这种力短暂地作用在物体上，并导致动量的一些变化。
- en: In games, collision detection usually happens in two phases. The first phase
    is called the **broad-phase** **collision** and the next phase is called the **narrow-phase
    collision**. The broad phase is less expensive, as it deals with the concept of
    which bodies are most likely to collide. The narrow phase is more expensive because
    it actually compares each body for collisions. In a games environment, it is not
    feasible to have everything in the narrow phase. Hence, most of the work is done
    in the broad phase. Broad phase algorithms work with sweep and prune (sort and
    prune) or Space partition trees. In the sweep and prune technique, all the lower
    ends and upper ends of the bounding boxes of a solid are sorted and checked for
    intersections. After that, it is sent to a more detailed check in the narrow phase.
    So in this method, we need to update the bounding box of the solid every time
    it changes its orientation. The other technique used is **BSP**. We have already
    discussed BSP in previous chapters. We need to partition the scene in such a way
    that in each subdivision, only a certain number of objects can collide. In the
    narrow phase collision, a more pixel-perfect collision detection algorithm is
    applied.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在游戏中，碰撞检测通常分为两个阶段。第一阶段称为**广相碰撞**，下一阶段称为**窄相碰撞**。广相阶段成本较低，因为它处理的是哪些物体最有可能发生碰撞的概念。窄相阶段成本更高，因为它实际上比较了每个物体是否发生碰撞。在游戏环境中，不可能将所有内容都放在窄相阶段。因此，大部分工作都是在广相阶段完成的。广相算法使用扫描和修剪（排序和修剪）或空间分区树。在扫描和修剪技术中，对实体的边界框的所有下端和上端进行排序并检查是否相交。之后，它被发送到窄相阶段进行更详细的检查。因此，在这种方法中，我们需要在实体改变方向时更新其边界框。另一种使用的技术是**BSP**。我们已经在之前的章节中讨论过BSP。我们需要将场景分割成这样的方式，使得在每个子分区中，只有一定数量的物体可以发生碰撞。在窄相碰撞中，会应用更像素完美的碰撞检测算法。
- en: 'There are various ways to check for collisions. It entirely depends on the
    shape that is acting as the bounding box. Also, it is important to understand
    how the bounding box is aligned. In a normal scenario, a bounding box would be
    axes-aligned and would be referred to as `AABB`. To detect whether two Box2D bounding
    boxes have collided, we would have to do the following:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 有各种方法来检查碰撞。这完全取决于充当边界框的形状。此外，了解边界框的对齐方式也很重要。在正常情况下，边界框将是轴对齐的，并且将被称为`AABB`。要检测两个Box2D边界框是否发生碰撞，我们需要执行以下操作：
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We can then extend this to detect more complex shapes for rectangles, circles,
    lines, and other polygons. If we are writing our own 2D physics engine, then we
    would have to write a function for each combination of shapes intersecting with
    one another. If we use a physics engine such as Box2D or PhysX, these functions
    would already be written for us and we would have to just use them properly and
    consistently.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以扩展这一点，以检测更复杂的形状，如矩形、圆形、线条和其他多边形。如果我们正在编写自己的2D物理引擎，那么我们将不得不为每种形状相互交叉编写一个函数。如果我们使用诸如Box2D或PhysX之类的物理引擎，这些函数已经被写好，我们只需要正确和一致地使用它们。
- en: Installing and integrating Box2D
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和集成Box2D
- en: To be able to work with 2D physics, one great open source physics engine is
    Box2D. This comes with lots of functions that are common for any 2D game built
    in, so we do not have to reinvent the wheel and write them again.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要能够使用2D物理，一个很好的开源物理引擎是Box2D。这个引擎带有许多对于任何2D游戏都常见的函数，因此我们不必重新发明轮子并重新编写它们。
- en: Getting ready
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You need to have a working Windows machine.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要有一台运行正常的Windows机器。
- en: How to do it…
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Go through the following steps:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤进行：
- en: Go to [http://box2d.org/](http://box2d.org/).
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到[http://box2d.org/](http://box2d.org/)。
- en: Browse to [http://box2d.org/downloads/](http://box2d.org/downloads/).
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览到[http://box2d.org/downloads/](http://box2d.org/downloads/)。
- en: Download or clone the latest copy from GitHub.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从GitHub下载或克隆最新版本。
- en: Build the solution in your version of Visual Studio. Some projects may not work,
    as they were built in different versions of Visual Studio.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的Visual Studio版本中构建解决方案。一些项目可能无法工作，因为它们是在不同版本的Visual Studio中构建的。
- en: If this throws an error, clean the solution, delete the `bin` folder, and rebuild
    it.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果出现错误，请清理解决方案，删除“bin”文件夹，然后重新构建它。
- en: After the solution rebuilds successfully, run the `TestBed` projects.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解决方案成功重建后，运行“TestBed”项目。
- en: If you can run the application successfully, Box2D has been integrated.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您能成功运行应用程序，Box2D已经集成。
- en: How it works…
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: Box2D is a physics engine built entirely in C++. As it has given us access to
    the source code, it means we can build it from scratch as well, and check for
    ourselves how each function is written. As the project is hosted on GitHub, every
    time a new development is made, we can clone it and be updated with all the latest
    code.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Box2D是一个完全由C++构建的物理引擎。由于它给了我们访问源代码的权限，这意味着我们也可以从头开始构建它，并检查每个函数是如何编写的。由于该项目托管在GitHub上，每次进行新开发时，我们都可以克隆它并更新所有最新的代码。
- en: In the solution, Box2D already has a project called `TestBed`, which has loads
    of sample applications that can be run. It is actually a collection of loads of
    different types of application. `Test Entries` is the entry point of all the applications.
    It is a long array of the different applications that we want rendered in the
    `TestBed` project. The array contains the name of the application and the static
    function to initialize the world.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在解决方案中，Box2D已经有一个名为“TestBed”的项目，其中包含许多可以运行的示例应用程序。实际上，这是许多不同类型应用程序的集合。“Test
    Entries”是所有应用程序的入口点。它是一个包含我们想要在“TestBed”项目中呈现的不同应用程序的长数组。该数组包含应用程序的名称和初始化世界的静态函数。
- en: Finally, the output of the physics simulation is fed to the renderer, which
    in this case is OpenGL, and it draws the scene for us.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，物理模拟的输出被馈送到渲染器，这种情况下是OpenGL，并为我们绘制场景。
- en: Making a basic 2D game
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 制作基本的2D游戏
- en: Every 2D game is different. However, we can generalize the physics functions
    that are going to be used in most 2D games. In this recipe, we will create a basic
    scene using Box2D's built-in functions and the `TestBed` project. The scene will
    mimic one of the most popular 2D games of our times, *Angry Birds*TM.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 每个2D游戏都是不同的。然而，我们可以概括将在大多数2D游戏中使用的物理函数。在这个教程中，我们将使用Box2D的内置函数和“TestBed”项目创建一个基本场景。该场景将模仿我们这个时代最流行的2D游戏之一，*愤怒的小鸟*TM。
- en: Getting ready
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, you will need a Windows machine and an installed version of
    Visual Studio. No other prerequisites are required.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个教程，您需要一台Windows机器和安装了Visual Studio的版本。不需要其他先决条件。
- en: How to do it…
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤…
- en: 'In this recipe, we will find out how easy it is to add a barebones architecture
    for a 2D game using Box2D:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将发现使用Box2D为2D游戏添加一个简单的架构是多么容易：
- en: '[PRE3]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How it works…
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: In this example, we are using the Box2D engine to calculate the physics. The
    main class of `Test Entries`, as described previously, is used to store the name
    of the application and the static create method. In this case, the name of the
    application is `Tiles`. In the tiles application, we have created a physics world
    using Box2D shapes and functions. The pyramid of tiles is created with the help
    of boxes. These boxes are dynamic in nature, which means they will react and move
    based on the forces applied to them. The base or the ground is also made of tiles.
    However, those tiles are stationary and do not move. We assign a position and
    velocity for all the tiles that make up the ground and the pyramid. It is not
    practical to individually assign a position and velocity to each tile, so we do
    this with an iteration loop.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们使用Box2D引擎来计算物理。如前所述，“Test Entries”的主类用于存储应用程序的名称和静态创建方法。在这种情况下，应用程序的名称是“Tiles”。在瓷砖应用程序中，我们使用Box2D形状和函数创建了一个物理世界。瓷砖金字塔是用方块创建的。这些方块是动态的，这意味着它们会根据施加在它们身上的力而做出反应和移动。基座或地面也由瓷砖制成。但是，这些瓷砖是静止的，不会移动。我们为构成地面和金字塔的所有瓷砖分配位置和速度。逐个为每个瓷砖分配位置和速度是不切实际的，因此我们使用迭代循环来实现这一点。
- en: After the scene is built, we can interact with the pyramid using a mouse click.
    From the GUI, other properties can also be switched on or off. Pressing the Space
    bar also triggers a ball at a random position which will destroy the formation
    of the tiles, much like *Angry Birds*. We can also write logic to make all the
    tiles that collide with the ground disappear and add points to the score every
    time that happens, and then we have ourselves a small 2D *Angry Birds* clone.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 场景构建完成后，我们可以通过鼠标点击与金字塔进行交互。从GUI中，还可以打开或关闭其他属性。按下空格键还会在随机位置触发一个球，它将摧毁瓷砖的形成，就像*愤怒的小鸟*一样。我们还可以编写逻辑，使所有与地面碰撞的瓷砖消失，并在每次发生碰撞时为得分加分，然后我们就有了一个小型的2D
    *愤怒的小鸟*克隆。
- en: Making a 3D game
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 制作3D游戏
- en: Not much changes when we shift our focus from physics in 2D to physics in 3D.
    We now need to worry about another dimension. As mentioned in the previous recipes,
    we still need to maintain the environment so that it follows Newtonian rules and
    solves constraints. There are a lot of things that can go wrong while rotating
    the body in 3D space. In this recipe, we will look at a very basic implementation
    of 3D physics using the Bullet Engine SDK.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们把注意力从2D物理转移到3D物理时，变化不大。现在我们需要担心另一个维度。如前面的教程中所述，我们仍然需要维护环境，使其遵循牛顿规则并解决约束。在3D空间中旋转物体时可能会出现很多问题。在这个教程中，我们将使用Bullet
    Engine SDK来查看3D物理的一个非常基本的实现。
- en: Getting ready
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, you will need a Windows machine and an installed version of
    Visual Studio.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个教程，您需要一台Windows机器和安装了Visual Studio的版本。
- en: How to do it…
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤…
- en: In this recipe, we will see how easy it is to write a physics world in 3D.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将看到在3D中编写物理世界是多么容易。
- en: 'For broad-phase collision take a look at the following snippet:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 对于广相碰撞，请查看以下代码片段：
- en: '[PRE4]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'For narrow-phase collision, see the following code:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 对于窄相碰撞，请参阅以下代码：
- en: '[PRE5]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How it works…
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: 'As we can see from the example above, even in 3D the physics collision system
    has to be divided into phases: the broad phase and the narrow phase. In a broad-phase
    collision, we now take into account Vector3, instead of just two float points,
    as we now have three axes (*x*, *y*, and *z*). We need to enter the object ID
    and then check within the bounds of the bounding boxes. Similarly, for a narrow-phase
    collision, our problem domain and calculations remain the same. We now change
    it to support 3D. The previous example shows a part of a problem that would arise
    if we need to find the contact points in a narrow phase collision. We create an
    array and, based on the collision callbacks, we save out all the points that are
    in contact. Later on, we can write other methods to check whether the points are
    overlapping or not.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们从上面的示例中看到的，即使在3D中，物理碰撞系统也必须分为阶段：广相和窄相。在广相碰撞中，我们现在考虑Vector3，而不仅仅是两个浮点数，因为现在我们有三个轴（*x*，*y*和*z*）。我们需要输入对象ID，然后检查边界框的范围。同样，对于窄相碰撞，我们的问题域和计算保持不变。我们现在将其更改为支持3D。先前的示例显示了在窄相碰撞中需要找到接触点的问题的一部分。我们创建一个数组，并根据碰撞回调保存所有接触点。稍后，我们可以编写其他方法来检查这些点是否重叠。
- en: Creating a particle system
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个粒子系统
- en: Particle systems are quite important in games in order to add to the visual
    representation of the whole feel of the game. Particle systems are quite easy
    to write and are merely a collection of one or more particles. So we need to create
    a single particle with some properties and then let the particle system decide
    how many particles it wants.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 粒子系统在游戏中非常重要，可以增加游戏整体感觉的视觉表现。粒子系统很容易编写，只是一个或多个粒子的集合。因此，我们需要创建一个具有一些属性的单个粒子，然后让粒子系统决定需要多少粒子。
- en: Getting ready
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, you will need a Windows machine and an installed version of
    Visual Studio.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，您需要一台Windows机器和安装了Visual Studio的版本。
- en: How to do it…
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Add a source file called `Source.cpp`. Then add the following code to it:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 添加一个名为`Source.cpp`的源文件。然后将以下代码添加到其中：
- en: '[PRE6]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works…
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: 'As we can see in the example, our first task is to create a `particle` class.
    The `particle` class will have properties such as `velocity`, `acceleration`,
    `position`, and `lifespan`. Because we are making the particle in 3D space, we
    are using Vector3 to denote the particle''s properties. If we were to create the
    particle in 2D space, we would have used Vector2 to do this. In the constructor,
    we assign the starting values of the attributes. We then have two main functions,
    `update` and `display`. The `update` function updates the `velocity` and `position`
    every frame, and also reduces the lifespan so that it disappears when its lifespan
    is over. In the `display` function, we need to specify how we want the particle
    to be viewed: whether it should have stroke or fill, and so on. Here we also have
    to specify the shape of the particle. The most common shape is a sphere or a cone.
    We have used a trapezoid just to denote that we can specify any shape. Finally,
    from the client program, we need to call this object and then access the various
    functions to display the particle.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在示例中看到的，我们的第一个任务是创建一个`particle`类。`particle`类将具有诸如`velocity`、`acceleration`、`position`和`lifespan`之类的属性。因为我们在3D空间中制作粒子，所以我们使用Vector3来表示粒子的属性。如果我们要在2D空间中创建粒子，我们将使用Vector2来做到这一点。在构造函数中，我们分配属性的起始值。然后我们有两个主要函数，`update`和`display`。`update`函数在每一帧更新`velocity`和`position`，并减少寿命，以便在寿命结束时消失。在`display`函数中，我们需要指定我们希望如何查看粒子：它是否应该有描边或填充等。在这里，我们还必须指定粒子的形状。最常见的形状是球体或圆锥体。我们使用了梯形只是为了表示我们可以指定任何形状。最后，从客户程序中，我们需要调用这个对象，然后访问各种函数来显示粒子。
- en: However, all this will do is display just one particle on the screen. Of course,
    we can create an array of 100 objects and that would display 100 particles on
    the screen. A better approach is to create a particle system, which creates an
    array of particles. The number of particles that will be drawn is specified by
    the client program. Based on the request, the particle system draws the required
    number of particles. Also, there must be a function to determine which particles
    are to be removed from the screen. This is dependent on the lifespan of each particle.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，所有这些只会在屏幕上显示一个粒子。当然，我们可以创建一个包含100个对象的数组，这样就可以在屏幕上显示100个粒子。更好的方法是创建一个粒子系统，它可以创建一个粒子数组。要绘制的粒子数量由客户程序指定。根据请求，粒子系统绘制所需数量的粒子。此外，必须有一个函数来确定哪些粒子需要从屏幕上移除。这取决于每个粒子的寿命。
- en: Using ragdoll in your game
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在游戏中使用布娃娃
- en: '**Ragdoll physics** is a special kind of procedural animation that is often
    used as a replacement for traditional static death animations in games. The whole
    idea of ragdoll animation is that after death a character falls as if the bones
    of the body are behaving like a ragdoll. Hence the name. It has nothing to do
    with realism, but adds a special fun element to the game.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**布娃娃物理**是一种特殊的程序动画，通常用作游戏中传统静态死亡动画的替代品。布娃娃动画的整个理念是，角色死亡后，身体的骨骼就像布娃娃一样行为。因此得名。这与现实主义无关，但为游戏增添了特别的乐趣元素。'
- en: Getting ready
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, you will need a Windows machine and an installed version of
    Visual Studio. The DirectX SDK is also required; preferably use the DirectX June
    2010 edition.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，您需要一台Windows机器和安装了Visual Studio的版本。还需要DirectX SDK；最好使用DirectX 2010年6月版。
- en: How to do it…
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Let us take a look at the following code:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下以下代码：
- en: '[PRE7]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How it works…
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: As you can see from the example above, for this example you require a skinned
    mesh model. The mesh model can either be downloaded from some royalty-free website,
    or made via Blender or any other 3D software package, such as Maya or Max. As
    the whole concept of a ragdoll is based on the bones of the mesh, we have to make
    sure that the 3D model has the bones set up correctly.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 从上面的例子中可以看出，对于这个例子，你需要一个蒙皮网格模型。网格模型可以从一些免版税的网站下载，也可以通过Blender或任何其他3D软件包（如Maya或Max）制作。由于布娃娃的整个概念是基于网格的骨骼，我们必须确保3D模型的骨骼设置正确。
- en: After that, there are lots of small parts in the code. The first part of the
    problem is to write a bone container class, which stores all the bone information.
    Next, we need to use the bone container class and by using the Bullet physics
    SDK, assign a rigid body to each of the bones. After the rigid body has been set
    up, we need to traverse through the bones once again and create a relationship
    between each bone, so that when one bone moves, the neighboring bones move as
    well. Finally, we also need to add constraints so that when the physics engine
    simulates the ragdoll, it can solve the constraints properly and output the result
    to the bones.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，代码中有很多小部分。问题的第一部分是编写一个骨骼容器类，用于存储所有骨骼信息。接下来，我们需要使用骨骼容器类，并使用Bullet物理SDK，为每个骨骼分配一个刚体。在设置好刚体之后，我们需要再次遍历骨骼，并创建骨骼之间的关系，这样当一个骨骼移动时，相邻的骨骼也会移动。最后，我们还需要添加约束，以便当物理引擎模拟布娃娃时，可以正确解决约束并将结果输出到骨骼。
