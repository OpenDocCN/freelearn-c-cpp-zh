- en: Chapter 3. Data Structures in Game Development
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章 游戏开发中的数据结构
- en: 'In chapter, the following recipes will be covered:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，将涵盖以下示例：
- en: Using more advanced data structures
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用更高级的数据结构
- en: Using linked lists to store data
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用链表存储数据
- en: Using stacks to store data
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用栈存储数据
- en: Using queues to store data
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用队列存储数据
- en: Using trees to store data
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用树存储数据
- en: Using graphs to store data
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用图形存储数据
- en: Using STL lists to store data
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用STL列表存储数据
- en: Using STL maps to store data
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用STL映射存储数据
- en: Using STL hash tables to store data
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用STL哈希表存储数据
- en: Introduction
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Data structures are used in the video games industry to organize code into more
    cleaner and more manageable. An average video game will have about 20,000 lines
    of code at least. If we do not use an effective storage system and structure to
    manage that code, it will become very difficult to debug. Also, we may end up
    writing the same code multiple times.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 数据结构在视频游戏行业中用于将代码组织得更加清晰和易于管理。一个普通的视频游戏至少会有大约2万行代码。如果我们不使用有效的存储系统和结构来管理这些代码，调试将变得非常困难。此外，我们可能会多次编写相同的代码。
- en: Data structures are also very useful for searching elements if we have a large
    data set. Let us consider that we are making a MMO. From the thousands of players
    online playing the game, we need to isolate a player who has the most points on
    a certain day. If we have not organized the user data into some meaningful data
    structure, this might take a long time. On the other hand, using a suitable data
    structure can help us achieve this within seconds.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们有一个大型数据集，数据结构对于搜索元素也非常有用。假设我们正在制作一个大型多人在线游戏。从成千上万在线玩游戏的玩家中，我们需要找出在某一天得分最高的玩家。如果我们没有将用户数据组织成有意义的数据结构，这可能需要很长时间。另一方面，使用合适的数据结构可以帮助我们在几秒钟内实现这一目标。
- en: Using more advanced data structures
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用更高级的数据结构
- en: In this recipe, we will see how to use advanced data structures. The main task
    of a programmer is to choose the correct data structure based on the need, so
    that the time taken to store and parse the data is minimized. Sometimes the choice
    of a correct data structure is more important than selecting a suitable algorithm
    to solve a problem.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将看到如何使用更高级的数据结构。程序员的主要任务是根据需要选择正确的数据结构，以便最大限度地减少存储和解析数据所需的时间。有时，选择正确的数据结构比选择适当的算法更重要。
- en: Getting ready
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To work through this recipe, you will need a machine running Windows. You also
    need to have a working copy of Visual Studio installed on your Windows machine.
    No other prerequisites are required.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个示例，您需要一台运行Windows的计算机。您还需要在Windows计算机上安装一个可用的Visual Studio副本。不需要其他先决条件。
- en: How to do it…
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: In this recipe, we will see how easy it is to use advanced data structures and
    why we should use them. If we organize data into suitable structures, it becomes
    faster to access data and easier to apply complex algorithms to it.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将看到使用高级数据结构是多么容易，以及为什么我们应该使用它们。如果我们将数据组织成合适的结构，访问数据会更快，也更容易对其应用复杂的算法。
- en: Open Visual Studio.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio。
- en: Create a new C++ project.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的C++项目。
- en: Select **Win32 Console Application**.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**Win32控制台应用程序**。
- en: Add source files called `Source.cpp`, `LinkedList.h`/ `LinkedList.cpp` and `HashTables.h`/
    `HashTables.cpp`.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加名为`Source.cpp`、`LinkedList.h`/`LinkedList.cpp`和`HashTables.h`/`HashTables.cpp`的源文件。
- en: 'Add the following lines of code to `Source.cpp`:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到`Source.cpp`中：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Add the following lines of code to `LinkedList.h`:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到`LinkedList.h`中：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Add the following lines of code to `LinkedList.cpp`:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到`LinkedList.cpp`中：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Add the following lines of code to `HashTable.cpp`:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到`HashTable.cpp`中：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Add the following lines of code to `HashTables.h`:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到`HashTables.h`中：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How it works…
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We have created this class to store different enemies using a hash table and
    then search for a particular enemy from the hash table using a key. The hash table
    in turn is created using a linked list.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了这个类来使用哈希表存储不同的敌人，然后使用键从哈希表中搜索特定的敌人。而哈希表则是使用链表创建的。
- en: In the `LINKEDLIST` file, we have defined a struct to store a key and a pointer
    to the next value in the hash table. The main class contains a pointer reference
    of the struct called `ITEM`. Apart from that, the class contains length of the
    data and member functions to insert an item, remove an item, find an element,
    display the entire list, and find the length of the list.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在`LINKEDLIST`文件中，我们定义了一个结构来存储哈希表中的键和指向下一个值的指针。主类包含了一个名为`ITEM`的结构的指针引用。除此之外，该类还包含了数据的长度和用于插入项、删除项、查找元素、显示整个列表以及查找列表长度的成员函数。
- en: In the `HASHTABLE` file, a hash table is created using a linked list. A reference
    of the linked list is created along with the length of the hash table array and
    a private function to return an array location of a particular item in the hash
    table array. Apart from that, the hash table has similar functionalities to the
    linked list, such as inserting an item, removing an item, and displaying the hash
    table.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在`HASHTABLE`文件中，使用链表创建了一个哈希表。创建了一个链表的引用，以及哈希表数组的长度和一个返回哈希表数组中特定项的数组位置的私有函数。除此之外，哈希表具有与链表类似的功能，如插入项、删除项和显示哈希表。
- en: From the driver program, an object of the struct is created to initialize the
    items to be pushed into the hash table. Then an object of the hash table is created
    and the items are pushed to the table and displayed. An item is also deleted from
    the table. Finally, a particular item called `Enemy4` is searched and the next
    key is displayed.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 从驱动程序中，创建一个结构的对象来初始化要推送到哈希表中的项。然后创建一个哈希表的对象，并将项推送到表中并显示。还可以从表中删除一个项。最后，搜索一个名为`Enemy4`的特定项并显示下一个键。
- en: Using linked lists to store data
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用链表存储数据
- en: In this recipe, we will see how we can use linked lists to store and organize
    data. The main advantage of a linked list in the games industry is that it is
    a dynamic data structure. However, it is bad for searching and inserting elements,
    as you need to find the information. The search is *O(n)*. This means we can assign
    memory to this data structure at runtime. In games, most things are created, destroyed,
    and updated at runtime, so using a linked list is very suitable. Linked lists
    can also be used to create linear data structures such as stacks and queues, which
    are equally important in game programming.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将看到如何使用链表来存储和组织数据。链表在游戏行业的主要优势是它是一种动态数据结构。然而，它不适合搜索和插入元素，因为您需要找到信息。搜索是*O(n)*。这意味着我们可以在运行时为这种数据结构分配内存。在游戏中，大多数东西都是在运行时创建、销毁和更新的，因此使用链表非常合适。链表还可以用于创建堆栈和队列等线性数据结构，在游戏编程中同样重要。
- en: Getting ready
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You need to have a working copy of Visual Studio installed on your Windows machine.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在Windows机器上安装一个可用的Visual Studio副本。
- en: How to do it…
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'In this recipe, we will see how easy it is to use linked lists. Linked lists
    are a great way to store data and are used as base mechanics for other data structures:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将看到使用链表是多么容易。链表是存储数据的好方法，并且被用作其他数据结构的基本机制：
- en: Open Visual Studio.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio。
- en: Create a new C++ project.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的C++项目。
- en: Select **Win32 Console Application**.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**Win32控制台应用程序**。
- en: Add a source file called `Source.cpp`.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`Source.cpp`的源文件。
- en: 'Add the following lines of code to it:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到其中：
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How it works…
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: A linked list is used to create a data structure that stores data, and a field
    that contains the address of the next node. A linked list is made up of nodes.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 链表用于创建存储数据和包含下一个节点地址的字段的数据结构。链表由节点组成。
- en: '![How it works…](img/B04929_03_01.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/B04929_03_01.jpg)'
- en: In our example, we have created a linked list using struct and used an iteration
    to populate the linked list. The main concept of a linked list, as explained before,
    is that it contains data of some kind and contains the address information of
    the next node. In our example, we have created a linked list to store the current
    level number and the address of the next level to be loaded. This kind of structure
    is really important in order to store the levels we want to load. Just by traversing
    the linked list, we can load the levels in the correct order. Even checkpoints
    in the game can be programmed in a similar manner.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，我们使用结构创建了一个链表，并使用迭代来填充链表。如前所述，链表的主要概念是它包含某种数据，并包含下一个节点的地址信息。在我们的例子中，我们创建了一个链表来存储当前级别的编号和下一个要加载的级别的地址。这种结构对于存储我们想要加载的级别非常重要。通过遍历链表，我们可以按正确的顺序加载级别。甚至游戏中的检查点也可以以类似的方式编程。
- en: Using stacks to store data
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用堆栈存储数据
- en: Stacks are an example of a linear data structure in C++. In this type of data
    structure, the order in which the data is entered into the data structure is very
    important. The last piece of data to be entered is the first piece of data to
    be deleted. That is why this is sometimes also referred to as the **last in first
    out** (**LIFO**) data structure. The process for entering data into a stack is
    called **push**, and the process of deleting data is called **pop**. Sometimes
    we just want to print the value at the top of the stack, without deleting or popping.
    The stack is used in a variety of areas in the games industry, but especially
    when creating a UI system for a game.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 堆栈是C++中线性数据结构的一个例子。在这种类型的数据结构中，数据输入的顺序非常重要。最后输入的数据是要删除的第一条数据。这就是为什么有时也称为**后进先出**（**LIFO**）数据结构。将数据输入堆栈的过程称为**push**，删除数据的过程称为**pop**。有时我们只想打印堆栈顶部的值，而不删除或弹出。堆栈在游戏行业的各个领域都有用，尤其是在为游戏创建UI系统时。
- en: Getting ready
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You need to have a working copy of Visual Studio installed on your Windows machine.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在Windows机器上安装一个可用的Visual Studio副本。
- en: How to do it…
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'In this recipe, we will find out how easy it is to use the stack data structure.
    A stack is one of the easiest data structures to implement and is used in multiple
    areas:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将发现使用堆栈数据结构是多么容易。堆栈是最容易实现的数据结构之一，并且在多个领域中使用：
- en: Open Visual Studio.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio。
- en: Create a new C++ project.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的C++项目。
- en: Select **Win32 Console Application**.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**Win32控制台应用程序**。
- en: Add a source file called `Source.cpp`.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`Source.cpp`的源文件。
- en: 'Add the following lines of code to it:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到其中：
- en: '[PRE6]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works…
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'In this example, we have used the `STACK` data structure to push the various
    UI elements into the stack. The `STACK` itself is created with the help of an
    array. While pushing an element, we need to check whether the stack is empty or
    already has some elements present. While popping elements, we need to delete the
    element that is at the top of the stack and change the pointer address accordingly.
    While printing the UI elements of the stack, we traverse the entire stack and
    display them from the top. Let us consider a game with the following levels: Main
    Menu, Chapter Select, Level Select, and Play Game. When we want to quit the game,
    we want the user to select the levels in reverse order. So the first level should
    be Play Game (Pause State), followed by Level Select, Chapter Select, and finally
    Main Menu. This can be easily achieved with a stack as explained in the previous
    example.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用`STACK`数据结构将各种UI元素推入堆栈。`STACK`本身是通过数组创建的。在推入元素时，我们需要检查堆栈是否为空或已经存在一些元素。在弹出元素时，我们需要删除堆栈顶部的元素，并相应地更改指针地址。在打印堆栈的UI元素时，我们遍历整个堆栈，并从顶部显示它们。让我们考虑一个具有以下级别的游戏：主菜单、章节选择、级别选择和游戏开始。当我们想退出游戏时，我们希望用户以相反的顺序选择级别。因此，第一个级别应该是游戏开始（暂停状态），然后是级别选择、章节选择，最后是主菜单。这可以很容易地通过堆栈来实现，就像前面的例子中所解释的那样。
- en: Using queues to store data
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用队列存储数据
- en: A queue is an example of a dynamic data structure. This means the size of the
    queue can be changed at runtime. This is a huge advantage when it comes to programming
    in games. Queues are enqeued/inserted from the rear of the data structure and
    dequeued/deleted/pushed out from the front of the data structure. This makes it
    a **first in first out** (**FIFO**) data structure. Imagine, in a game, we have
    an inventory but we want to make the player use the first item he has picked up
    unless he manually changes to a different item. This can be easily achieved by
    a queue. If we want to design it so that the current item switches to the most
    powerful item in the inventory, we can use a priority queue for that purpose.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 队列是动态数据结构的一个例子。这意味着队列的大小可以在运行时改变。这在编程游戏时是一个巨大的优势。队列从数据结构的后面进行入队/插入操作，从数据结构的前面进行出队/删除/推出操作。这使它成为一个**先进先出**（**FIFO**）的数据结构。想象一下，在游戏中，我们有一个库存，但我们希望玩家使用他拿起的第一个物品，除非他手动切换到另一个物品。这可以很容易地通过队列实现。如果我们想设计成当前物品切换到库存中最强大的物品，我们可以使用优先队列来实现这个目的。
- en: Getting ready
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, you will need a Windows machine with a working copy of Visual
    Studio.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个教程，你需要一台装有Visual Studio的Windows机器。
- en: How to do it…
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'In this recipe, we will implement the queue data structure using a linked list.
    It is very easy to implement a queue and it is a very robust data structure to
    use:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将使用链表来实现队列数据结构。实现队列非常容易，它是一个非常健壮的数据结构：
- en: Open Visual Studio.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio。
- en: Create a new C++ project.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的C++项目。
- en: Select **Win32 Console Application**.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**Win32控制台应用程序**。
- en: Add a source file called `Source.cpp`.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`Source.cpp`的源文件。
- en: 'Add the following lines of code to it:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向其中添加以下代码行：
- en: '[PRE7]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How it works…
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: We have used an STL queue to create the queue structure, or rather use the queue
    structure. The queue structure, as we know, is important when we need to use the
    FIFO data structure. As in a First Person Shooter, we may want the user to use
    the first gun he picks up and the remaining guns be put in the inventory. This
    is an ideal case for a queue, as explained in the example. The front of the queue
    structure holds the first gun picked up, or the current gun, and the remaining
    guns are stored in the inventory in the order in which they were picked up. Sometimes,
    we do want in our game that if we pick up a gun that is more powerful than the
    one we are using, it should automatically swap to that. In such a case, we can
    use a more specialized form of queue called a priority queue, where we need to
    use the same queue structure but just specify by what parameters the queue is
    to be sorted.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用STL队列来创建队列结构，或者说使用队列结构。队列结构，正如我们所知，是在需要使用FIFO数据结构时非常重要的。就像在第一人称射击游戏中，我们可能希望用户使用他拿起的第一把枪，剩下的枪放在库存中。这是队列的一个理想案例，就像例子中解释的那样。队列结构的前端保存了拿起的第一把枪，或者当前的枪，剩下的枪按照拿起的顺序存储在库存中。有时候，在游戏中，我们希望如果拿起的枪比正在使用的更强大，它应该自动切换到那个枪。在这种情况下，我们可以使用一个更专门的队列形式，称为优先队列，我们只需要指定队列按照什么参数进行排序。
- en: Using trees to store data
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用树来存储数据
- en: A tree is an example of a non-linear data structure, unlike arrays and linked
    lists which are linear. A tree is often used in games that require hierarchy.
    Imagine a car with many parts and all the parts are functional, upgradable, and
    can be interacted with. In this case, we will create the entire class for the
    car using a tree data structure. A tree uses a parent-child relationship to traverse
    between all the nodes.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 树是非线性数据结构的一个例子，不像数组和链表是线性的。树经常用在需要层次结构的游戏中。想象一辆汽车有很多部件，所有部件都是功能的，可升级的，并且可以互动。在这种情况下，我们将使用树数据结构为汽车创建整个类。树使用父子关系在所有节点之间进行遍历。
- en: Getting ready
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, you will need a Windows machine with a working copy of Visual
    Studio.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个教程，你需要一台装有Visual Studio的Windows机器。
- en: How to do it…
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'In this recipe, we will be implementing a binary tree. There are many variations
    of the binary tree. We will be creating the most basic binary tree. It is very
    easy to add new logic to a binary tree to implement a balanced binary, or AVL
    tree, and so on:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将实现一个二叉树。二叉树有很多变种。我们将创建最基本的二叉树。很容易向二叉树添加新的逻辑来实现平衡二叉树，AVL树等等：
- en: Open Visual Studio.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio。
- en: Create a new C++ project.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的C++项目。
- en: Select **Win32 Console Application**.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**Win32控制台应用程序**。
- en: Add a source file called `CTree.cpp`.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`CTree.cpp`的源文件。
- en: 'Add the following lines of code to it:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向其中添加以下代码行：
- en: '[PRE8]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: How it works…
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: We use a struct to store the value and a pointer to the left child and the right
    child. There is no particular rule as to which elements should be your left child
    and which elements should be the right child. We can decide, if we want, that
    all elements lower than the root element should be on the left and all elements
    greater that the root are on the right.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用一个结构来存储值和左孩子和右孩子的指针。没有特定的规则来决定哪些元素应该是左孩子，哪些元素应该是右孩子。如果我们愿意，我们可以决定所有低于根元素的元素都在左边，所有高于根元素的元素都在右边。
- en: '![How it works…](img/B04929_03_02.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的…](img/B04929_03_02.jpg)'
- en: Both insertion and deletion in the tree data structure are done in a recursive
    way. To insert elements, we traverse the tree and check if it is empty. If it
    is empty, we create a new node and add all the corresponding nodes recursively,
    by checking whether the new node's value is greater than or less than the root
    node. Searching for an element is done in a similar way. If the element to be
    searched has a value lower than the root node, we can ignore the entire right-hand
    section of the tree, as we can see in our `search` function, and keep searching
    recursively. This reduces the search space considerably and optimizes our algorithm.
    This means searching for an item at runtime will be faster. Let us say we are
    creating a game where we need to implement procedural terrain. After the scene
    is loaded, we can use a binary tree to divide the entire level into sections based
    on whether they appear on the left or the right. If this information is correctly
    stored in the tree, then the game camera can use this information to decide which
    section is rendered and which is not. This also creates a great level of culling
    optimization. If the parent does not get rendered, we can neglect checking the
    remainder of the tree for rendering.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 树数据结构中的插入和删除都是以递归方式完成的。要插入元素，我们遍历树并检查它是否为空。如果为空，我们创建一个新节点，并通过递归方式添加所有相应的节点，通过检查新节点的值是大于还是小于根节点。搜索元素的方式也类似。如果要搜索的元素的值小于根节点，则我们可以忽略树的整个右侧部分，正如我们在`search`函数中所看到的，并继续递归搜索。这大大减少了搜索空间并优化了我们的算法。这意味着在运行时搜索项目将更快。假设我们正在创建一个需要实现程序化地形的游戏。在场景加载后，我们可以使用二叉树根据它们出现在左侧还是右侧来将整个级别划分为部分。如果这些信息在树中正确存储，那么游戏摄像机可以使用这些信息来决定哪个部分被渲染，哪个部分不被渲染。这也创建了一个很好的剔除优化级别。如果父级没有被渲染，我们可以忽略检查树的其余部分进行渲染。
- en: Using graphs to store data
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用图来存储数据
- en: In this recipe, we will see how easy it is to store data using the graph data
    structure. The graph data structure is extremely useful if we have to create a
    system like Facebook to sell and share our game with friends, and friends of friends.
    A graph can be implemented in a few ways. The most commonly used method is by
    using edges and nodes.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将看到使用图数据结构存储数据是多么容易。如果我们必须创建一个像Facebook一样的系统来与朋友和朋友的朋友分享我们的游戏，图数据结构非常有用。图可以以几种方式实现。最常用的方法是使用边和节点。
- en: Getting ready
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To work through this recipe, you will need a machine running Windows. You also
    need to have a working copy of Visual Studio installed on your Windows machine.
    No other prerequisites are required.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个教程，您需要一台运行Windows的机器。您还需要在Windows机器上安装一个可用的Visual Studio副本。不需要其他先决条件。
- en: How to do it…
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'In this recipe, we will see how we can implement graphs. Graphs are a very
    good data structure for interconnecting various states and data together with
    edge conditions. Any social networking algorithm uses the graph data structure
    in one way or another:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将看到如何实现图。图是一个非常好的数据结构，用于将各种状态和数据与边缘条件相互连接。任何社交网络算法都以某种方式使用图数据结构：
- en: Open Visual Studio.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio。
- en: Create a new C++ project.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的C++项目。
- en: Select **Win32 Console Application**.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**Win32控制台应用程序**。
- en: Add the `CGraph.h`/`CGraph.cpp` files.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`CGraph.h`/`CGraph.cpp`文件。
- en: 'Add the following lines of code to `CGraph.h`:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到`CGraph.h`：
- en: '[PRE9]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Add the following lines of code to `CGraph.cpp`:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到`CGraph.cpp`：
- en: '[PRE10]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: How it works…
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: A graph comprises of edges and nodes. So, the first thing to do while implementing
    a graph data structure is to create a struct to store the node and vertex information.
    The following diagram has six nodes and seven edges. To implement a graph, we
    need to understand the cost of each edge to go from one node to another. These
    are called adjacency costs. To insert a node, we create a node. To add an edge
    to the node, we need to supply the information about the two nodes that need to
    be connected and the cost of the edge.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图由边和节点组成。因此，在实现图数据结构时，首先要做的是创建一个结构来存储节点和顶点信息。下图有六个节点和七条边。要实现一个图，我们需要了解从一个节点到另一个节点的每条边的成本。这些被称为邻接成本。要插入一个节点，我们创建一个节点。要向节点添加边，我们需要提供有关需要连接的两个节点和边的成本的信息。
- en: 'After we get that information, we create a pair using the cost of the edge
    and one of the nodes and push that edge information to the other node:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 获取信息后，我们使用边的成本和其中一个节点创建一对，并将该边的信息推送到另一个节点：
- en: '![How it works…](img/B04929_03_03.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的…](img/B04929_03_03.jpg)'
- en: Using STL lists to store data
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用STL列表来存储数据
- en: STL is a standard template library that contains a lot of implementations of
    the basic data structures, which means we can directly use them for our purpose.
    The list is internally implemented as a doubly linked list, which means insertion
    and deletion can happen at both ends.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: STL是一个标准模板库，其中包含许多基本数据结构的实现，这意味着我们可以直接用它们来实现我们的目的。列表在内部实现为双向链表，这意味着插入和删除可以在两端进行。
- en: Getting ready
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, you will need a Windows machine with a working copy of Visual
    Studio.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个教程，您需要一台安装有Visual Studio的Windows机器。
- en: How to do it…
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'In this recipe, we will see how we can easily use the inbuilt template library
    provided for us by C++ to create complex data structures. After the complex data
    structure has been created, we can easily use it to store data and access it:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将看到如何使用C++为我们提供的内置模板库来轻松创建复杂的数据结构。创建复杂的数据结构后，我们可以轻松地使用它来存储数据和访问数据：
- en: Open Visual Studio.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio。
- en: Create a new C++ project.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的C++项目。
- en: Add a source file called `Source.cpp`.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`Source.cpp`的源文件。
- en: 'Add the following lines of code to it:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到其中：
- en: '[PRE11]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: How it works…
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: We have used the list to push back the values of possible path costs for a certain
    AI player to reach a destination. We have used an STL list, which comes with a
    few functions built in that we can apply on the container. We use the `sort` function
    to sort the list in ascending order. We also have the `unique` function to delete
    all duplicate values from the list. After sorting the list, we have the least
    path cost, and accordingly we can apply that path to the AI player. Although the
    code size is reduced immensely and it is much easier to write, we should use STL
    with caution as we are never sure about the algorithm behind the inbuilt functions.
    For example, the `sort` function most likely uses QuickSort but we don't know.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经使用列表将可能的路径成本值推送到某个AI玩家到达目的地的值中。我们使用了STL列表，它带有一些内置的函数，我们可以在容器上应用这些函数。我们使用`sort`函数按升序对列表进行排序。我们还有`unique`函数来删除列表中的所有重复值。在对列表进行排序后，我们得到了最小的路径成本，因此我们可以将该路径应用于AI玩家。尽管代码大小大大减小，编写起来更容易，但我们应该谨慎使用STL，因为我们从来不确定内置函数背后的算法。例如，`sort`函数很可能使用快速排序，但我们不知道。
- en: Using STL maps to store data
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用STL地图来存储数据
- en: A map is one of the associative containers of STL and stores elements formed
    by a combination of a key value and a mapped value, following a specific order.
    Maps are a part of the STL provided for us by C++.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 地图是STL的关联容器之一，它存储由键值和映射值组成的元素，遵循特定的顺序。地图是C++为我们提供的STL的一部分。
- en: Getting ready
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: For this recipe, you will need a Windows machine with a working copy of Visual
    Studio.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，您需要一台安装有Visual Studio的Windows机器。
- en: How to do it…
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'In this recipe, we will see how we can easily use the inbuilt template library
    provided by C++ to create complex data structures. After the complex data structure
    is created, we can easily use it to store data and access it:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将看到如何使用C++提供的内置模板库来创建复杂的数据结构。创建复杂的数据结构后，我们可以轻松地使用它来存储数据和访问数据：
- en: Open Visual Studio.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio。
- en: Create a new C++ project.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的C++项目。
- en: Add a source file called `Source.cpp`.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加名为`Source.cpp`的源文件。
- en: 'Add the following lines of code to it:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码行添加到其中：
- en: '[PRE12]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: How it works…
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: We have used the STL map to create a key/value pair to store the names of the
    players playing our game, along with their high scores. We can use any data type
    in a map. In our example, we have used a string and an int. After creating the
    data structure, it is very easy to find whether a player exists in the database,
    and we can also sort the map and display the score associated with the player.
    The second field gives us the values, whereas the first field gives us the key.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经使用STL地图创建了一个键/值对，用于存储玩我们游戏的玩家的姓名和他们的高分。我们可以在地图中使用任何数据类型。在我们的示例中，我们使用了一个字符串和一个整数。创建数据结构后，非常容易找到玩家是否存在于数据库中，我们还可以对地图进行排序并显示与玩家关联的分数。第二个字段给出了值，而第一个字段给出了键。
- en: Using STL hash tables to store data
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用STL哈希表来存储数据
- en: The biggest difference between a map and a hash table is that while the map
    data structure is ordered, a hash table is unordered. Both use the same principle
    of key/value pairs. The worst case search complexity for an unordered map is *O(N)*,
    as it is not ordered like a map, which has a complexity of *O(log N)*.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 地图和哈希表之间最大的区别在于，地图数据结构是有序的，而哈希表是无序的。两者都使用键/值对的相同原则。无序地图的最坏情况搜索复杂度为*O(N)*，因为它不像地图那样有序，地图的复杂度为*O(log
    N)*。
- en: Getting ready
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: For this recipe, you will need a Windows machine with a working copy of Visual
    Studio.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，您需要一台安装有Visual Studio的Windows机器。
- en: How to do it…
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'In this recipe, we will see how we can easily use the inbuilt template library
    provided for us by C++ to create complex data structures. After the complex data
    structure has been created, we can easily use it to store data and access it:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将看到如何使用C++为我们提供的内置模板库来创建复杂的数据结构。创建复杂的数据结构后，我们可以轻松地使用它来存储数据和访问数据：
- en: Open Visual Studio.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio。
- en: Create a new C++ project.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的C++项目。
- en: Add a source file called `Source.cpp`.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加名为`Source.cpp`的源文件。
- en: 'Add the following lines of code to it:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码行添加到其中：
- en: '[PRE13]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: How it works…
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The program calculates the ping time of all players who are currently playing
    our game on the server. We create a hash table and store all their names and ping
    times using the `emplace` keyword. We can also insert a new player later with
    their ping time by using the `make_pair` keyword. After the hash table has been
    created, we can easily display the ping time of a particular player, or the ping
    time of all players in the server. We use an iterator to iterate through the hash
    table. The first parameter gives us the key and the second parameter gives us
    the value.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 该程序计算当前在服务器上玩我们游戏的所有玩家的ping时间。我们创建一个哈希表，并使用`emplace`关键字存储所有玩家的姓名和ping时间。我们还可以使用`make_pair`关键字稍后插入新玩家及其ping时间。创建哈希表后，我们可以轻松地显示特定玩家的ping时间，或者服务器上所有玩家的ping时间。我们使用迭代器来遍历哈希表。第一个参数给出了键，第二个参数给出了值。
