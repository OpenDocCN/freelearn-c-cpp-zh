["```cpp\nemcc --show-ports\n```", "```cpp\n#include <SDL2/SDL.h>\n#include <SDL2/SDL_ttf.h>\n#include <emscripten.h>\n#include <stdio.h>\n\n#define MESSAGE \"HELLO SDL!\"\n#define FONT_SIZE 16\n#define FONT_FILE \"font/Roboto-Black.ttf\"\n\nint main() {\n    SDL_Window *window;\n    SDL_Renderer *renderer;\n\n    SDL_Rect dest = {.x = 160, .y = 100, .w = 0, .h = 0 };\n\n    TTF_Font *font;\n    SDL_Texture* texture;\n\n    SDL_Init( SDL_INIT_VIDEO );\n    TTF_Init();\n\n    SDL_CreateWindowAndRenderer( 320, 200, 0, &window, &renderer );\n\n    SDL_SetRenderDrawColor( renderer, 0, 0, 0, 255 );\n    SDL_RenderClear( renderer );\n\n    font = TTF_OpenFont( FONT_FILE, FONT_SIZE );\n\n    SDL_Color font_color = {255, 255, 255, 255 }; // WHITE COLOR\n    SDL_Surface *temp_surface = TTF_RenderText_Blended( font, \n                                                        MESSAGE, \n                                                       font_color );\n\n    texture = SDL_CreateTextureFromSurface( renderer, temp_surface );\n\n    SDL_FreeSurface( temp_surface );\n    SDL_QueryTexture( texture,\n                        NULL, NULL,\n                        &dest.w, &dest.h ); // query the width and \n                                               height\n\n    dest.x -= dest.w / 2;\n    dest.y -= dest.h / 2;\n\n    SDL_RenderCopy( renderer, texture, NULL, &dest );\n    SDL_RenderPresent( renderer );\n\n    return EXIT_SUCCESS;\n}\n```", "```cpp\n#include <SDL2/SDL.h>\n#include <SDL2/SDL_ttf.h>\n#include <emscripten.h>\n#include <stdio.h>\n```", "```cpp\n#define MESSAGE \"HELLO SDL!\"\n#define FONT_SIZE 16\n#define FONT_FILE \"font/Roboto-Black.ttf\"\n```", "```cpp\nint main() {\n    SDL_Window *window;\n    SDL_Renderer *renderer;\n\n    SDL_Rect dest = {.x = 160, .y = 100, .w = 0, .h = 0 };\n    TTF_Font *font;\n\n    SDL_Texture *texture;\n```", "```cpp\nSDL_Init( SDL_INIT_VIDEO );\nTTF_Init();\n\nSDL_CreateWindowAndRenderer( 320, 200, 0, &window, &renderer );\n```", "```cpp\n SDL_Init( SDL_INIT_VIDEO | SDL_INIT_AUDIO | SDL_INIT_HAPTIC );\n```", "```cpp\nSDL_SetRenderDrawColor( renderer, 0, 0, 0, 255 );\nSDL_RenderClear( renderer );\n```", "```cpp\nSDL_SetRenderDrawColor( renderer, 255, 0, 0, 255 );\n```", "```cpp\nfont = TTF_OpenFont( FONT_FILE, FONT_SIZE );\nSDL_Color font_color = {255, 255, 255, 255 }; // WHITE COLOR\nSDL_Surface *temp_surface = TTF_RenderText_Blended( font, MESSAGE,\n                                                    font_color );\ntexture = SDL_CreateTextureFromSurface( renderer, temp_surface );\nSDL_FreeSurface( temp_surface ); \n```", "```cpp\nSDL_QueryTexture( texture,\n                    NULL, NULL,\n                    &dest.w, &dest.h ); // query the width and height\n\ndest.x -= dest.w / 2;\ndest.y -= dest.h / 2;\n\nSDL_RenderCopy( renderer, texture, NULL, &dest );\nSDL_RenderPresent( renderer ); \n```", "```cpp\nreturn EXIT_SUCCESS;\n```", "```cpp\nSDL_Delay(5000);\nSDL_DestroyWindow(window);\nSDL_Quit();\n```", "```cpp\nemcc hello_sdl.c --emrun --preload-file font -s USE_SDL=2 -s USE_SDL_TTF=2 -o hello_sdl.html\n```", "```cpp\n#include <SDL2/SDL.h>\n#include <SDL2/SDL_image.h>\n#include <emscripten.h>\n#include <stdio.h>\n#define SPRITE_FILE \"sprites/Franchise1.png\"\n\nint main() {\n    SDL_Window *window;\n    SDL_Renderer *renderer;\n    SDL_Rect dest = {.x = 160, .y = 100, .w = 0, .h = 0 };\n    SDL_Texture *texture;\n    SDL_Init( SDL_INIT_VIDEO );\n    SDL_CreateWindowAndRenderer( 320, 200, 0, &window, &renderer );\n    SDL_SetRenderDrawColor( renderer, 0, 0, 0, 255 );\n    SDL_RenderClear( renderer );\n    SDL_Surface *temp_surface = IMG_Load( SPRITE_FILE );\n\n    if( !temp_surface ) {\n        printf(\"failed to load image: %s\\n\", IMG_GetError() );\n        return 0;\n    }\n\n    texture = SDL_CreateTextureFromSurface( renderer, temp_surface );\n\n    SDL_FreeSurface( temp_surface );\n\n    SDL_QueryTexture( texture,\n                        NULL, NULL,\n                        &dest.w, &dest.h ); // query the width and \n                        height\n\n    dest.x -= dest.w / 2;\n    dest.y -= dest.h / 2;\n\n    SDL_RenderCopy( renderer, texture, NULL, &dest );\n    SDL_RenderPresent( renderer );\n\n SDL_Delay(5000);\n SDL_DestroyWindow(window);\n SDL_Quit();\n    return 1;\n}\n```", "```cpp\nSDL_Surface *temp_surface = IMG_Load( SPRITE_FILE );\n\nif( !temp_surface ) {\n    printf(\"failed to load image: %s\\n\", IMG_GetError() );\n    return 0;\n}\n```", "```cpp\n#include <SDL2/SDL.h>\n#include <SDL2/SDL_image.h>\n\n#include <emscripten.h>\n#include <stdio.h>\n\n#define SPRITE_FILE \"sprites/Franchise1.png\"\n#define EXP_FILE \"sprites/FranchiseExplosion%d.png\"\n#define FRAME_COUNT 7\n\nint current_frame = 0;\nUint32 last_time;\nUint32 current_time;\nUint32 ms_per_frame = 100; // animate at 10 fps\n\nSDL_Window *window;\nSDL_Renderer *renderer;\nSDL_Rect dest = {.x = 160, .y = 100, .w = 0, .h = 0 };\nSDL_Texture *sprite_texture;\nSDL_Texture *temp_texture;\nSDL_Texture* anim[FRAME_COUNT];\n\nvoid show_animation() {\n    current_time = SDL_GetTicks();\n    int ms = current_time - last_time;\n\n    if( ms < ms_per_frame) {\n        return;\n    }\n\n    if( current_frame >= FRAME_COUNT ) {\n        SDL_RenderClear( renderer );\n        return;\n    }\n\n    last_time = current_time;\n    SDL_RenderClear( renderer );\n\n    temp_texture = anim[current_frame++];\n\n    SDL_QueryTexture( temp_texture,\n                        NULL, NULL,\n                        &dest.w, &dest.h ); // query the width and       \n                                               height\n\n    dest.x = 160 - dest.w / 2;\n    dest.y = 100 - dest.h / 2;\n\n    SDL_RenderCopy( renderer, temp_texture, NULL, &dest );\n    SDL_RenderPresent( renderer );\n}\n\n```", "```cpp\nint main() {\n    char explosion_file_string[40];\n    SDL_Init( SDL_INIT_VIDEO );\n    SDL_CreateWindowAndRenderer( 320, 200, 0, &window, &renderer );\n\n    SDL_SetRenderDrawColor( renderer, 0, 0, 0, 255 );\n    SDL_RenderClear( renderer );\n\n    SDL_Surface *temp_surface = IMG_Load( SPRITE_FILE );\n\n    if( !temp_surface ) {\n        printf(\"failed to load image: %s\\n\", IMG_GetError() );\n        return 0;\n    }\n\n    sprite_texture = SDL_CreateTextureFromSurface( renderer, \n    temp_surface );\n\n    SDL_FreeSurface( temp_surface );\n\n    for( int i = 1; i <= FRAME_COUNT; i++ ) {\n        sprintf( explosion_file_string, EXP_FILE, i );\n        SDL_Surface *temp_surface = IMG_Load( explosion_file_string );\n\n        if( !temp_surface ) {\n            printf(\"failed to load image: %s\\n\", IMG_GetError() );\n            return 0;\n        }\n\n        temp_texture = SDL_CreateTextureFromSurface( renderer, \n        temp_surface );\n        anim[i-1] = temp_texture;\n        SDL_FreeSurface( temp_surface );\n    }\n\n    SDL_QueryTexture( sprite_texture,\n                        NULL, NULL,\n                        &dest.w, &dest.h ); // query the width and \n                                               height\n\n    dest.x -= dest.w / 2;\n    dest.y -= dest.h / 2;\n\n    SDL_RenderCopy( renderer, sprite_texture, NULL, &dest );\n    SDL_RenderPresent( renderer );\n\n    last_time = SDL_GetTicks();\n    emscripten_set_main_loop(show_animation, 0, 0);\n    return 1;\n}\n```", "```cpp\nemscripten_set_main_loop(show_animation, 0, 0);\n```", "```cpp\nfor( int i = 1; i <= FRAME_COUNT; i++ ) {\n sprintf( explosion_file_string, EXP_FILE, i );\n    SDL_Surface *temp_surface = IMG_Load( explosion_file_string );\n\n    if( !temp_surface ) {\n        printf(\"failed to load image: %s\\n\", IMG_GetError() );\n        return 0;\n    }\n\n    temp_texture = SDL_CreateTextureFromSurface( renderer, temp_surface );\n    anim[i-1] = temp_texture;\n    SDL_FreeSurface( temp_surface );\n}\n```", "```cpp\nvoid show_animation() {\n    current_time = SDL_GetTicks();\n    int ms = current_time - last_time;\n\n    if( ms < ms_per_frame) {\n        return;\n    }\n\n    if( current_frame >= FRAME_COUNT ) {\n        SDL_RenderClear( renderer );\n        return;\n    }\n\n    last_time = current_time;\n    SDL_RenderClear( renderer );\n\n    temp_texture = anim[current_frame++];\n\n    SDL_QueryTexture( temp_texture,\n                        NULL, NULL,\n                        &dest.w, &dest.h ); // query the width and \n                                               height\n\n    dest.x = 160 - dest.w / 2;\n    dest.y = 100 - dest.h / 2;\n\n    SDL_RenderCopy( renderer, temp_texture, NULL, &dest );\n    SDL_RenderPresent( renderer );\n}\n```", "```cpp\n#include <SDL2/SDL.h>\n#include <SDL2/SDL_image.h>\n\n#include <emscripten.h>\n#include <stdio.h>\n\n#define SPRITE_FILE \"sprites/Franchise1.png\"\n#define EXP_FILE \"sprites/Franchise%d.png\"\n\n#define FRAME_COUNT 4\n\nint current_frame = 0;\nUint32 last_time;\nUint32 current_time;\nUint32 ms_per_frame = 100; // animate at 10 fps\n\nSDL_Window *window;\n\nSDL_Renderer *renderer;\nSDL_Rect dest = {.x = 160, .y = 100, .w = 0, .h = 0 };\nSDL_Texture *sprite_texture;\nSDL_Texture *temp_texture;\nSDL_Texture* anim[FRAME_COUNT];\n```", "```cpp\nvoid show_animation() {\n    current_time = SDL_GetTicks();\n    int ms = current_time - last_time;\n\n    if( ms >= ms_per_frame) {\n        ++current_frame;\n        last_time = current_time;\n    }\n\n    if( current_frame >= FRAME_COUNT ) {\n        current_frame = 0;\n    }\n\n    SDL_RenderClear( renderer );\n    temp_texture = anim[current_frame];\n\n    dest.y--;\n\n    if( dest.y < -16 ) {\n        dest.y = 200;\n    }\n\n    SDL_RenderCopy( renderer, temp_texture, NULL, &dest );\n    SDL_RenderPresent( renderer );\n}\n\n```", "```cpp\nint main() {\n    char explosion_file_string[40];\n    SDL_Init( SDL_INIT_VIDEO );\n    SDL_CreateWindowAndRenderer( 320, 200, 0, &window, &renderer );\n    SDL_SetRenderDrawColor( renderer, 0, 0, 0, 255 );\n    SDL_RenderClear( renderer );\n    SDL_Surface *temp_surface = IMG_Load( SPRITE_FILE );\n\n    if( !temp_surface ) {\n        printf(\"failed to load image: %s\\n\", IMG_GetError() );\n        return 0;\n    }\n\n    sprite_texture = SDL_CreateTextureFromSurface( renderer, \n    temp_surface );\n    SDL_FreeSurface( temp_surface );\n\n    for( int i = 1; i <= FRAME_COUNT; i++ ) {\n        sprintf( explosion_file_string, EXP_FILE, i );\n        SDL_Surface *temp_surface = IMG_Load( explosion_file_string );\n\n        if( !temp_surface ) {\n            printf(\"failed to load image: %s\\n\", IMG_GetError() );\n            return 0;\n        }\n\n        temp_texture = SDL_CreateTextureFromSurface( renderer, \n        temp_surface );\n\n        anim[i-1] = temp_texture;\n        SDL_FreeSurface( temp_surface );\n    }\n\n    SDL_QueryTexture( sprite_texture,\n                        NULL, NULL,\n                        &dest.w, &dest.h ); // query the width and \n                                               height\n\n    dest.x -= dest.w / 2;\n    dest.y -= dest.h / 2;\n\n    SDL_RenderCopy( renderer, sprite_texture, NULL, &dest );\n    SDL_RenderPresent( renderer );\n\n    last_time = SDL_GetTicks();\n    emscripten_set_main_loop(show_animation, 0, 0);\n    return 1;\n}\n```", "```cpp\nvoid show_animation() {\n    current_time = SDL_GetTicks();\n\n    int ms = current_time - last_time;\n\n    if( ms >= ms_per_frame) {\n        ++current_frame;\n        last_time = current_time;\n    }\n\n    if( current_frame >= FRAME_COUNT ) {\n        current_frame = 0;\n    }\n\n    SDL_RenderClear( renderer );\n    temp_texture = anim[current_frame];\n\n    dest.y--;\n\n    if( dest.y < -16 ) {\n        dest.y = 200;\n    }\n\n    SDL_RenderCopy( renderer, temp_texture, NULL, &dest );\n    SDL_RenderPresent( renderer );\n}\n```", "```cpp\nemcc sprite_move.c --preload-file sprites -s USE_SDL=2 -s USE_SDL_IMAGE=2 -s SDL2_IMAGE_FORMATS=[\"png\"] -o sprite_move.html\n```"]