["```cpp\n    #include <iostream>\n    #include <vector>\n    ```", "```cpp\n    using uint = unsigned int;\n    class hash_map\n    {\n    \u00a0\u00a0\u00a0\u00a0std::vector<int> data;\n    ```", "```cpp\n    public:\n    hash_map(size_t n)\n    {\n    \u00a0\u00a0\u00a0\u00a0data = std::vector<int>(n, -1);\n    }\n    ```", "```cpp\n    void insert(uint value)\n    {\n    \u00a0\u00a0\u00a0\u00a0int n = data.size();\n    \u00a0\u00a0\u00a0\u00a0data[value % n] = value;\n    \u00a0\u00a0\u00a0\u00a0std::cout << \"Inserted \" << value << std::endl;\n    }\n    ```", "```cpp\n    bool find(uint value)\n    {\n    \u00a0\u00a0\u00a0\u00a0int n = data.size();\n    \u00a0\u00a0\u00a0\u00a0return (data[value % n] == value);\n    }\n    ```", "```cpp\n    void erase(uint value)\n    {\n    \u00a0\u00a0\u00a0\u00a0int n = data.size();\n    \u00a0\u00a0\u00a0\u00a0if(data[value % n] == value)\n    \u00a0\u00a0\u00a0\u00a0{\n    data[value % n] = -1;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Removed \" << value << std::endl;\n    }\n    }\n    };\n    ```", "```cpp\n    int main()\n    {\n    \u00a0\u00a0\u00a0\u00a0hash_map map(7);\n    \u00a0\u00a0\u00a0\u00a0auto print = [&](int value)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(map.find(value))\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << value << \" found in the hash map\";\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << value << \" NOT found in the hash map\";\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << std::endl;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0map.insert(2);\n    \u00a0\u00a0\u00a0\u00a0map.insert(25);\n    \u00a0\u00a0\u00a0\u00a0map.insert(290);\n    \u00a0\u00a0\u00a0\u00a0print(25);\n    \u00a0\u00a0\u00a0\u00a0print(100);\n    \u00a0\u00a0\u00a0\u00a0map.insert(100);\n    \u00a0\u00a0\u00a0\u00a0print(100);\n    \u00a0\u00a0\u00a0\u00a0map.erase(25);\n    }\n    ```", "```cpp\n    Inserted 2\n    Inserted 25\n    Inserted 290\n    25 found in the hash map\n    100 NOT found in the hash map\n    Inserted 100\n    100 found in the hash map\n    Removed 25\n    ```", "```cpp\n    #include <iostream>\n    #include <vector>\n    #include <list>\n    #include <algorithm>\n    ```", "```cpp\n    using uint = unsigned int;\n    class hash_map\n    {\n    \u00a0\u00a0\u00a0\u00a0std::vector<std::list<int>> data;\n    ```", "```cpp\n    public:\n    hash_map(size_t n)\n    {\n    \u00a0\u00a0\u00a0\u00a0data.resize(n);\n    }\n    ```", "```cpp\n    void insert(uint value)\n    {\n    \u00a0\u00a0\u00a0\u00a0int n = data.size();\n    \u00a0\u00a0\u00a0\u00a0data[value % n].push_back(value);\n    \u00a0\u00a0\u00a0\u00a0std::cout << \"Inserted \" << value << std::endl;\n    }\n    ```", "```cpp\n    bool find(uint value)\n    {\n    \u00a0\u00a0\u00a0\u00a0int n = data.size();\n    \u00a0\u00a0\u00a0\u00a0auto& entries = data[value % n];\n    \u00a0\u00a0\u00a0\u00a0return std::find(entries.begin(), entries.end(), value) != entries.end();\n    }\n    ```", "```cpp\n    void erase(uint value)\n    {\n    \u00a0\u00a0\u00a0\u00a0int n = data.size();\n    \u00a0\u00a0\u00a0\u00a0auto& entries = data[value % n];\n    \u00a0\u00a0\u00a0\u00a0auto iter = std::find(entries.begin(), entries.end(), value);\n\n    \u00a0\u00a0\u00a0\u00a0if(iter != entries.end())\n    \u00a0\u00a0\u00a0\u00a0{\n    entries.erase(iter);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Removed \" << value << std::endl;\n    }\n    }\n    };\n    ```", "```cpp\n    int main()\n    {\n    \u00a0\u00a0\u00a0\u00a0hash_map map(7);\n    \u00a0\u00a0\u00a0\u00a0auto print = [&](int value)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(map.find(value))\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << value << \" found in the hash map\";\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << value << \" NOT found in the hash map\";\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << std::endl;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0map.insert(2);\n    \u00a0\u00a0\u00a0\u00a0map.insert(25);\n    \u00a0\u00a0\u00a0\u00a0map.insert(290);\n    \u00a0\u00a0\u00a0\u00a0map.insert(100);\n    \u00a0\u00a0\u00a0\u00a0map.insert(55);\n    \u00a0\u00a0\u00a0\u00a0print(100);\n    \u00a0\u00a0\u00a0\u00a0map.erase(2);\n    }\n    ```", "```cpp\n    Inserted 2\n    Inserted 25\n    Inserted 290\n    Inserted 100\n    Inserted 55\n    100 found in the hash map\n    Removed 2\n    ```", "```cpp\n    #include <iostream>\n    #include <vector>\n    ```", "```cpp\n    class hash_map\n    {\n    \u00a0\u00a0\u00a0\u00a0std::vector<int> data1;\n    \u00a0\u00a0\u00a0\u00a0std::vector<int> data2;\n    \u00a0\u00a0\u00a0\u00a0int size;\n    ```", "```cpp\n    int hash1(int key) const\n    {\n    \u00a0\u00a0\u00a0\u00a0return key % size;\n    }\n    int hash2(int key) const\n    {\n    \u00a0\u00a0\u00a0\u00a0return (key / size) % size;\n    }\n    ```", "```cpp\n    public:\n    hash_map(int n) : size(n)\n    {\n    \u00a0\u00a0\u00a0\u00a0data1 = std::vector<int>(size, -1);\n    \u00a0\u00a0\u00a0\u00a0data2 = std::vector<int>(size, -1);\n    }\n    ```", "```cpp\n    std::vector<int>::iterator lookup(int key)\n    {\n    \u00a0\u00a0\u00a0\u00a0auto hash_value1 = hash1(key);\n    \u00a0\u00a0\u00a0\u00a0if(data1[hash_value1] == key)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Found \" << key << \" in first table\" << std::endl;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return data1.begin() + hash_value1;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0auto hash_value2 = hash2(key);\n    \u00a0\u00a0\u00a0\u00a0if(data2[hash_value2] == key)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Found \" << key << \" in second table\" << std::endl;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return data2.begin() + hash_value2;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0return data2.end();\n    }\n    ```", "```cpp\n    void erase(int key)\n    {\n    \u00a0\u00a0\u00a0\u00a0auto position = lookup(key);\n    \u00a0\u00a0\u00a0\u00a0if(position != data2.end())\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0*position = -1;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Removed the element \" << key << std::endl;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Key \" << key << \" not found.\" << std::endl;\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```cpp\n    void insert(int key)\n    {\n    \u00a0\u00a0\u00a0\u00a0insert_impl(key, 0, 1);\n    }\n    void insert_impl(int key, int cnt, int table)\n    {\n    \u00a0\u00a0\u00a0\u00a0if(cnt >= size)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Cycle detected, while inserting \" << key << \". Rehashing required.\" << std::endl;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0if(table == 1)\n    \u00a0\u00a0\u00a0\u00a0{\n    int hash = hash1(key);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(data1[hash] == -1)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Inserted key \" << key << \" in table \" << table << std::endl;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data1[hash] = key;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int old = data1[hash];\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data1[hash] = key;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Inserted key \" << key << \" in table \" << table << \" by replacing \" << old << std::endl;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0insert_impl(old, cnt + 1, 2);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0\u00a0{\n    int hash = hash2(key);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(data2[hash] == -1)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Inserted key \" << key << \" in table \" << table << std::endl;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data2[hash] = key;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int old = data2[hash];\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data2[hash] = key;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Inserted key \" << key << \" in table \" << table << \" by replacing \" << old << std::endl;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0insert_impl(old, cnt + 1, 2);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```cpp\n    void print()\n    {\n    \u00a0\u00a0\u00a0\u00a0std::cout << \"Index: \";\n    \u00a0\u00a0\u00a0\u00a0for(int i = 0; i < size; i++)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << i << '\\t';\n    \u00a0\u00a0\u00a0\u00a0std::cout << std::endl;\n    \u00a0\u00a0\u00a0\u00a0std::cout << \"Data1: \";\n    \u00a0\u00a0\u00a0\u00a0for(auto i: data1)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << i << '\\t';\n    \u00a0\u00a0\u00a0\u00a0std::cout << std::endl;\n    \u00a0\u00a0\u00a0\u00a0std::cout << \"Data2: \";\n    \u00a0\u00a0\u00a0\u00a0for(auto i: data2)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << i << '\\t';\n    \u00a0\u00a0\u00a0\u00a0std::cout << std::endl;\n    }\n    };\n    ```", "```cpp\n    int main()\n    {\n    \u00a0\u00a0\u00a0\u00a0hash_map map(7);\n    \u00a0\u00a0\u00a0\u00a0map.print();\n    \u00a0\u00a0\u00a0\u00a0map.insert(10);\n    \u00a0\u00a0\u00a0\u00a0map.insert(20);\n    \u00a0\u00a0\u00a0\u00a0map.insert(30);\n    \u00a0\u00a0\u00a0\u00a0std::cout << std::endl;\n    \u00a0\u00a0\u00a0\u00a0map.insert(104);\n    \u00a0\u00a0\u00a0\u00a0map.insert(2);\n    \u00a0\u00a0\u00a0\u00a0map.insert(70);\n    \u00a0\u00a0\u00a0\u00a0map.insert(9);\n    \u00a0\u00a0\u00a0\u00a0map.insert(90);\n    \u00a0\u00a0\u00a0\u00a0map.insert(2);\n    \u00a0\u00a0\u00a0\u00a0map.insert(7);\n    \u00a0\u00a0\u00a0\u00a0std::cout << std::endl;\n    \u00a0\u00a0\u00a0\u00a0map.print();\n    \u00a0\u00a0\u00a0\u00a0std::cout << std::endl;\n    \u00a0\u00a0\u00a0\u00a0map.insert(14);\u00a0\u00a0// This will cause cycle.\n    }\n    ```", "```cpp\n    Index: 0\u00a0\u00a0\u00a0\u00a01\u00a0\u00a0\u00a0\u00a02\u00a0\u00a0\u00a0\u00a03\u00a0\u00a0\u00a0\u00a04\u00a0\u00a0\u00a0\u00a05\u00a0\u00a0\u00a0\u00a06\u00a0\u00a0\u00a0\u00a0\n    Data1: -1\u00a0\u00a0\u00a0\u00a0-1\u00a0\u00a0\u00a0\u00a0-1\u00a0\u00a0\u00a0\u00a0-1\u00a0\u00a0\u00a0\u00a0-1\u00a0\u00a0\u00a0\u00a0-1\u00a0\u00a0\u00a0\u00a0-1\u00a0\u00a0\u00a0\u00a0\n    Data2: -1\u00a0\u00a0\u00a0\u00a0-1\u00a0\u00a0\u00a0\u00a0-1\u00a0\u00a0\u00a0\u00a0-1\u00a0\u00a0\u00a0\u00a0-1\u00a0\u00a0\u00a0\u00a0-1\u00a0\u00a0\u00a0\u00a0-1\u00a0\u00a0\u00a0\u00a0\n    Inserted key 10 in table 1\n    Inserted key 20 in table 1\n    Inserted key 30 in table 1\n    Inserted key 104 in table 1 by replacing 20\n    Inserted key 20 in table 2\n    Inserted key 2 in table 1 by replacing 30\n    Inserted key 30 in table 2\n    Inserted key 70 in table 1\n    Inserted key 9 in table 1 by replacing 2\n    Inserted key 2 in table 2\n    Inserted key 90 in table 1 by replacing 104\n    Inserted key 104 in table 2 by replacing 2\n    Inserted key 2 in table 1 by replacing 9\n    Inserted key 9 in table 2\n    Inserted key 2 in table 1 by replacing 2\n    Inserted key 2 in table 2 by replacing 104\n    Inserted key 104 in table 1 by replacing 90\n    Inserted key 90 in table 2\n    Inserted key 7 in table 1 by replacing 70\n    Inserted key 70 in table 2\n    Index:\u00a00\u00a0\u00a0\u00a0\u00a01\u00a0\u00a0\u00a0\u00a02\u00a0\u00a0\u00a0\u00a03\u00a0\u00a0\u00a0\u00a04\u00a0\u00a0\u00a0\u00a05\u00a0\u00a0\u00a0\u00a0\u00a06\n    Data1:\u00a07\u00a0\u00a0\u00a0-1\u00a0\u00a0\u00a0\u00a02\u00a0\u00a0\u00a0\u00a010\u00a0\u00a0-1\u00a0\u00a0\u00a0-1\u00a0\u00a0\u00a0\u00a0\u00a0104\n    Data2:\u00a02\u00a0\u00a0\u00a0\u00a09\u00a0\u00a0\u00a0\u00a020\u00a0\u00a0\u00a070\u00a0\u00a0\u00a030\u00a0\u00a0\u00a090\u00a0\u00a0\u00a0-1\n    Inserted key 14 in table 1 by replacing 7\n    Inserted key 7 in table 2 by replacing 9\n    Inserted key 9 in table 1 by replacing 2\n    Inserted key 2 in table 2 by replacing 2\n    Inserted key 2 in table 1 by replacing 9\n    Inserted key 9 in table 2 by replacing 7\n    Inserted key 7 in table 1 by replacing 14\n    Cycle detected, while inserting 14\\. Rehashing required.\n    ```", "```cpp\n    #include <iostream>\n    #include <unordered_map>\n    #include <unordered_set>\n    ```", "```cpp\n    void print(const std::unordered_set<int>& container)\n    {\n    \u00a0\u00a0\u00a0\u00a0for(const auto& element: container)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << element << \" \";\n    \u00a0\u00a0\u00a0\u00a0std::cout << std::endl;\n    }\n    void print(const std::unordered_map<int, int>& container)\n    {\n    \u00a0\u00a0\u00a0\u00a0for(const auto& element: container)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << element.first << \": \" << element.second << \", \";\n    \u00a0\u00a0\u00a0\u00a0std::cout << std::endl;\n    }\n    ```", "```cpp\n    void find(const std::unordered_set<int>& container, const auto& element)\n    {\n    \u00a0\u00a0\u00a0\u00a0if(container.find(element) == container.end())\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << element << \" not found\" << std::endl;\n    \u00a0\u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << element << \" found\" << std::endl;\n    }\n    void find(const std::unordered_map<int, int>& container, const auto& element)\n    {\n    \u00a0\u00a0\u00a0\u00a0auto it = container.find(element);\n    \u00a0\u00a0\u00a0\u00a0if(it == container.end())\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << element << \" not found\" << std::endl;\n    \u00a0\u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << element << \" found with value=\" << it->second << std::endl;\n    }\n    ```", "```cpp\n    int main()\n    {\n    \u00a0\u00a0\u00a0\u00a0std::cout << \"Set example: \" << std::endl;\n    \u00a0\u00a0\u00a0\u00a0std::unordered_set<int> set1 = {1, 2, 3, 4, 5};\n    \u00a0\u00a0\u00a0\u00a0std::cout << \"Initial set1: \";\n    \u00a0\u00a0\u00a0\u00a0print(set1);\n    \u00a0\u00a0\u00a0\u00a0set1.insert(2);\n    \u00a0\u00a0\u00a0\u00a0std::cout << \"After inserting 2: \";\n    \u00a0\u00a0\u00a0\u00a0print(set1);\n    \u00a0\u00a0\u00a0\u00a0set1.insert(10);\n    \u00a0\u00a0\u00a0\u00a0set1.insert(351);\n    \u00a0\u00a0\u00a0\u00a0std::cout << \"After inserting 10 and 351: \";\n    \u00a0\u00a0\u00a0\u00a0print(set1);\n    \u00a0\u00a0\u00a0\u00a0find(set1, 4);\n    \u00a0\u00a0\u00a0\u00a0find(set1, 100);\n    \u00a0\u00a0\u00a0\u00a0set1.erase(2);\n    \u00a0\u00a0\u00a0\u00a0std::cout << \"Erased 2 from set1\" << std::endl;\n    \u00a0\u00a0\u00a0\u00a0find(set1, 2);\n    \u00a0\u00a0\u00a0\u00a0std::cout << \"Map example: \" << std::endl;\n    \u00a0\u00a0\u00a0\u00a0std::unordered_map<int, int> squareMap;\n    \u00a0\u00a0\u00a0\u00a0squareMap.insert({2, 4});\n    \u00a0\u00a0\u00a0\u00a0squareMap[3] = 9;\n    \u00a0\u00a0\u00a0\u00a0std::cout << \"After inserting squares of 2 and 3: \";\n    \u00a0\u00a0\u00a0\u00a0print(squareMap);\n    \u00a0\u00a0\u00a0\u00a0squareMap[30] = 900;\n    \u00a0\u00a0\u00a0\u00a0squareMap[20] = 400;\n    \u00a0\u00a0\u00a0\u00a0std::cout << \"After inserting squares of 20 and 30: \";\n    \u00a0\u00a0\u00a0\u00a0print(squareMap);\n    \u00a0\u00a0\u00a0\u00a0find(squareMap, 10);\n    \u00a0\u00a0\u00a0\u00a0find(squareMap, 20);\n    \u00a0\u00a0\u00a0\u00a0std::cout << \"Value of map[3]=\" << squareMap[3] << std::endl;\n    \u00a0\u00a0\u00a0\u00a0std::cout << \"Value of map[100]=\" << squareMap[100] << std::endl;\n    }\n    ```", "```cpp\n    Set example: \n    Initial set1: 5 4 3 2 1 \n    After inserting 2: 5 4 3 2 1 \n    After inserting 10 and 351: 351 10 1 2 3 4 5 \n    4 found\n    100 not found\n    Erased 2 from set1\n    2 not found\n    Map example: \n    After inserting squares of 2 and 3: 3: 9, 2: 4, \n    After inserting squares of 20 and 30: 20: 400, 30: 900, 2: 4, 3: 9, \n    10 not found\n    20 found with value=400\n    Value of map[3]=9\n    Value of map[100]=0\n    ```", "```cpp\n#include <boost/functional/hash.hpp>\nstruct Car\n{\n\u00a0\u00a0\u00a0\u00a0std::string model;\n\u00a0\u00a0\u00a0\u00a0std::string brand;\n\u00a0\u00a0\u00a0\u00a0int buildYear;\n};\nstruct CarHasher\n{\n\u00a0\u00a0\u00a0\u00a0std::size_t operator()(const Car& car) const\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::size_t seed = 0;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0boost::hash_combine(seed, car.model);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0boost::hash_combine(seed, car.brand);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return seed;\n\u00a0\u00a0\u00a0\u00a0}\n};\nstruct CarComparator\n{\n\u00a0\u00a0\u00a0\u00a0bool operator()(const Car& car1, const Car& car2) const\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0return (car1.model == car2.model) && (car1.brand == car2.brand);\n\u00a0\u00a0\u00a0\u00a0}\n};\n// We can use the hasher as follows:\nstd::unordered_set<Car, CarHasher, CarComparator> carSet;\nstd::unordered_map<Car, std::string, CarHasher, CarComparator> carDescriptionMap;\n```", "```cpp\n    #include <iostream>\n    #include <vector>\n    ```", "```cpp\n    class bloom_filter\n    {\n    \u00a0\u00a0\u00a0\u00a0std::vector<bool> data;\n    \u00a0\u00a0\u00a0\u00a0int nBits;\n    ```", "```cpp\n    int hash(int num, int key)\n    {\n    \u00a0\u00a0\u00a0\u00a0switch(num)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0case 0:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return key % nBits;\n    \u00a0\u00a0\u00a0\u00a0case 1:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return (key / 7) % nBits;\n    \u00a0\u00a0\u00a0\u00a0case 2:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return (key / 11) % nBits;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0return 0;\n    }\n    ```", "```cpp\n    public:\n    bloom_filter(int n) : nBits(n)\n    {\n    \u00a0\u00a0\u00a0\u00a0data = std::vector<bool>(nBits, false);\n    }\n    ```", "```cpp\n    void lookup(int key)\n    {\n    \u00a0\u00a0\u00a0\u00a0bool result = data[hash(0, key)] & data[hash(1, key)] & data[hash(2, key)];\n    \u00a0\u00a0\u00a0\u00a0if(result)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << key << \" may be present.\" << std::endl;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << key << \" is not present.\" << std::endl;\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```cpp\n    void insert(int key)\n    {\n    \u00a0\u00a0\u00a0\u00a0data[hash(0, key)] = true;\n    \u00a0\u00a0\u00a0\u00a0data[hash(1, key)] = true;\n    \u00a0\u00a0\u00a0\u00a0data[hash(2, key)] = true;\n    \u00a0\u00a0\u00a0\u00a0std::cout << key << \" inserted.\" << std::endl;\n    }\n    };\n    ```", "```cpp\n    int main()\n    {\n    bloom_filter bf(11);\n    bf.insert(100);\n    bf.insert(54);\n    bf.insert(82);\n    bf.lookup(5);\n    bf.lookup(50);\n    bf.lookup(2);\n    bf.lookup(100);\n    bf.lookup(8);\n    bf.lookup(65);\n    }\n    ```", "```cpp\n    100 inserted.\n    54 inserted.\n    82 inserted.\n    5 may be present.\n    50 is not present.\n    2 is not present.\n    100 may be present.\n    8 is not present.\n    65 may be present.\n    ```"]