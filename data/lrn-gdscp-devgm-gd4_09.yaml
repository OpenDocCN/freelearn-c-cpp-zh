- en: '9'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '9'
- en: Cameras, Collisions, and Collectibles
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相机、碰撞和收藏品
- en: While playing a game, the player doesn’t want to have to think about the camera
    and its placement. The camera should always follow the player’s character and
    anticipate what the player wants to achieve so it doesn’t obstruct the player’s
    vision.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在玩游戏时，玩家不希望必须考虑相机及其位置。相机应该始终跟随玩家的角色，并预测玩家想要实现的目标，以免阻碍玩家的视线。
- en: In bigger games, full teams are tasked with producing the smoothest camera possible.
    In this chapter, we will attempt to do the same with some Godot Engine nodes.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在更大的游戏中，整个团队的任务是制作最平滑的相机。在本章中，我们将尝试使用一些 Godot 引擎节点来完成同样的工作。
- en: After that, we’ll stop the player from walking through walls and have a look
    at sprinkling collectibles, such as health and money, around our arena.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们将阻止玩家穿过墙壁，并查看在竞技场周围撒播收集品，如健康和金钱。
- en: 'In this chapter, we will cover the following main topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Making a camera that follows the player
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 制作跟随玩家的相机
- en: Collisions with boulders and walls
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与巨石和墙壁的碰撞
- en: Collision masks
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 碰撞掩码
- en: Creating inherited scenes
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建继承场景
- en: Connecting to signals
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接到信号
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: As for every chapter, you can find the final code on the GitHub repository in
    the subfolder for this chapter at [https://github.com/PacktPublishing/Learning-GDScript-by-Developing-a-Game-with-Godot-4/tree/main/chapter9](https://github.com/PacktPublishing/Learning-GDScript-by-Developing-a-Game-with-Godot-4/tree/main/chapter9).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 就像每个章节一样，你可以在 GitHub 仓库的子文件夹中找到本章的最终代码，该文件夹位于 [https://github.com/PacktPublishing/Learning-GDScript-by-Developing-a-Game-with-Godot-4/tree/main/chapter9](https://github.com/PacktPublishing/Learning-GDScript-by-Developing-a-Game-with-Godot-4/tree/main/chapter9)。
- en: Making a camera that follows the player
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 制作跟随玩家的相机
- en: At the moment, our character can run around, but at some point, it will run
    off the screen and get lost forever. Our in-game camera should follow them around
    so the player knows where they are.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们的角色可以四处奔跑，但迟早它会跑出屏幕并永远消失。我们的游戏内相机应该跟随它们，以便玩家知道它们在哪里。
- en: Luckily, the Godot Engine has a pretty nice camera system that we can use. It
    can be a bit basic, but it is all we need, and with some extra nodes, we’ll be
    able to achieve a very smooth-moving camera.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，Godot 引擎有一个相当不错的相机系统，我们可以使用。它可能有点基础，但这是我们需要的所有功能，并且通过一些额外的节点，我们将能够实现一个非常平滑移动的相机。
- en: Setting up a basic camera
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置基本相机
- en: For 2D games, Godot provides the **Camera2D** node.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 2D 游戏，Godot 提供了 **Camera2D** 节点。
- en: 'Open up the `player.tscn` scene and add a `Player` node. This is all we need
    to make a basic camera that follows the player:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 `player.tscn` 场景并添加一个 `Player` 节点。这就是我们制作一个基本的跟随玩家相机的所有所需：
- en: '![Figure 9.1 – The player scene with an added Camera2D node](img/B19358_09_1.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.1 – 添加了 Camera2D 节点的玩家场景](img/B19358_09_1.jpg)'
- en: Figure 9.1 – The player scene with an added Camera2D node
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.1 – 添加了 Camera2D 节点的玩家场景
- en: But this basic camera feels a bit stiff; it starts and stops moving at exactly
    the moment the character does. This doesn’t feel very natural. Let’s see how to
    solve this.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 但这个基本的相机感觉有点僵硬；它开始和停止移动的时间与角色完全一致。这感觉不太自然。让我们看看如何解决这个问题。
- en: Adding drag margins
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加拖动边距
- en: 'To make the camera movement appear natural, we will use **drag margins**. Find
    and enable **Horizontal** and **Vertical** drag in the camera’s inspector:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使相机移动看起来自然，我们将使用 **拖动边距**。在相机的检查器中找到并启用**水平**和**垂直**拖动：
- en: '![Figure 9.2 – The drag margin settings for the Camera2D node in the inspector.](img/B19358_09_2.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.2 – 在检查器中设置 Camera2D 节点的拖动边距设置](img/B19358_09_2.jpg)'
- en: Figure 9.2 – The drag margin settings for the Camera2D node in the inspector.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.2 – 在检查器中设置 Camera2D 节点的拖动边距设置
- en: 'Now, the camera only moves when the player exits a certain area in the middle
    of the screen. This is the margin within which nothing happens. If you enable
    **Draw Drag Margin** in the camera’s inspector, you can see the drag margins visualized:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，相机只有在玩家退出屏幕中间的某个区域时才会移动。这是没有任何事情发生的边距。如果你在相机的检查器中启用**绘制拖动边距**，你可以看到拖动边距的视觉表示：
- en: '![Figure 9.3 – Showing the drag margins in the editor by enabling them in the
    Camera2D inspector](img/B19358_09_3.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.3 – 通过在 Camera2D 检查器中启用它们来在编辑器中显示拖动边距](img/B19358_09_3.jpg)'
- en: Figure 9.3 – Showing the drag margins in the editor by enabling them in the
    Camera2D inspector
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.3 – 通过在 Camera2D 检查器中启用它们来在编辑器中显示拖动边距
- en: 'With **Draw Drag Margin** enabled, you should be able to see the blue rectangles
    indicating when the camera will start moving:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当启用**Draw Drag Margin**时，你应该能够看到表示相机即将开始移动的蓝色矩形：
- en: '![Figure 9.4 – The editor now shows the drag margins in light blue](img/B19358_09_4.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图9.4 – 编辑器现在以浅蓝色显示拖动边距](img/B19358_09_4.jpg)'
- en: Figure 9.4 – The editor now shows the drag margins in light blue
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.4 – 编辑器现在以浅蓝色显示拖动边距
- en: You can play a bit with the left, top, right, and bottom margins in the inspector.
    I chose to set them all to `0.1`, as seen in *Figure* *9**.2* earlier.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在检查器中稍微调整左、上、右和下边距。我选择将它们都设置为`0.1`，如之前在*图* *9**.2*中看到的。
- en: Great, the drag margins already feel great. But the camera still starts and
    stops moving very abruptly and seems to lag behind the player. Let’s fix that
    next.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 很好，拖动边距已经感觉很好了。但是，相机的移动仍然开始和停止非常突然，似乎落后于玩家。让我们接下来修复这个问题。
- en: Making the camera look ahead
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 让相机向前看
- en: The movement of the camera feels pretty great now. But there is something wrong;
    we need something more fundamental than nice, smooth movement. When the player
    moves, the camera drags behind, showing where the player has been and not where
    the player is going.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在相机的移动感觉很好。但是，有些地方不对劲；我们需要比平滑运动更基本的东西。当玩家移动时，相机拖在后面，显示玩家已经去过的位置，而不是玩家将要去的位置。
- en: '![Figure 9.5 – The camera lags behind the player and does not show where the
    player is going](img/B19358_09_5.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图9.5 – 相机落后于玩家，没有显示玩家将要去哪里](img/B19358_09_5.jpg)'
- en: Figure 9.5 – The camera lags behind the player and does not show where the player
    is going
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.5 – 相机落后于玩家，没有显示玩家将要去哪里
- en: 'This is not great; imagine running somewhere and only being able to look backward.
    What we actually want is for the camera to look ahead in the direction the player
    is moving. We can do this by, instead of tracking the player itself, tracking
    a point in front of the player. Basically, it is as if the player character is
    holding a selfie stick. So, follow these steps:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不理想；想象一下跑在某处，只能向后看。我们实际上想要的是相机向前看，朝向玩家移动的方向。我们可以通过跟踪玩家前方的一个点来做到这一点，而不是跟踪玩家本身。基本上，就像玩家角色拿着自拍杆一样。所以，按照以下步骤操作：
- en: Add a new `Player` and call it `CameraPosition`. This will become the point
    we are going to track instead of the player itself.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个新的`Player`并命名为`CameraPosition`。这将变成我们要跟踪的点，而不是玩家本身。
- en: 'Now drag the camera we already made onto this `CameraPosition` so that it is
    a child of the new node:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在将我们已创建的相机拖动到这个`CameraPosition`上，使其成为新节点的子节点：
- en: '![Figure 9.6 – Put the Camera2D node under a separate node called CameraPosition](img/B19358_09_6.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图9.6 – 将Camera2D节点放在一个名为CameraPosition的单独节点下](img/B19358_09_6.jpg)'
- en: Figure 9.6 – Put the Camera2D node under a separate node called CameraPosition
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.6 – 将Camera2D节点放在一个名为CameraPosition的单独节点下
- en: 'Make sure that the position of the `CameraPosition` is set to `(0, 0)` in the
    inspector:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保在检查器中`CameraPosition`的位置设置为`(0, 0)`：
- en: '![Figure 9.7 – Make sure the Camera2D and CameraPosition nodes are at position
    (0, 0)](img/B19358_09_7.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图9.7 – 确保Camera2D和CameraPosition节点位于位置(0, 0)](img/B19358_09_7.jpg)'
- en: Figure 9.7 – Make sure the Camera2D and CameraPosition nodes are at position
    (0, 0)
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.7 – 确保Camera2D和CameraPosition节点位于位置(0, 0)
- en: Add a script to the `CameraPosition` called `camera_position.gd`.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向`CameraPosition`添加一个名为`camera_position.gd`的脚本。
- en: This script will keep the position in front of the camera. We can do this based
    on the `velocity` that the player character has.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本将保持相机前的位置。我们可以根据玩家角色的`velocity`来实现这一点。
- en: 'The complete script looks like this:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的脚本如下：
- en: '[PRE0]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: First, we define an export variable that we can play with called `camera_distance`.
    This will be the distance in front of the player at which we will keep the camera
    while the player is moving.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们定义一个可以操作的导出变量，称为`camera_distance`。这将是在玩家移动时，我们将保持相机距离玩家前方的距离。
- en: With `_physics_process()`, which gets executed for each physics frame of the
    game, we calculate the position of the camera point. Remember that this position
    is relative to the `Player` node, so a position of `(0, 0)` is right where the
    player is.The idea is to take the direction in which the player is moving and
    multiply that by the `camera_distance`. The direction the player is moving in
    can be derived from the `velocity` of the player. So first, we get the player
    node using the `get_parent` function and cache it in the `_player` variable. This
    function returns the parent of a node, in this case, the `Player` node because
    the `CameraPosition` is a direct child of that node.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 `_physics_process()`，它在游戏的每个物理帧上执行，我们计算摄像机点的位置。记住，这个位置相对于 `Player` 节点，所以
    `(0, 0)` 的位置就在玩家那里。想法是取玩家移动的方向并将其乘以 `camera_distance`。玩家移动的方向可以通过玩家的 `velocity`
    得到。因此，首先，我们使用 `get_parent` 函数获取玩家节点并将其缓存到 `_player` 变量中。这个函数返回一个节点的父节点，在这种情况下，是
    `Player` 节点，因为 `CameraPosition` 是该节点的直接子节点。
- en: Then, to get the direction the player is moving in, we normalize this `velocity`
    vector. Normalizing a vector, as we saw in [*Chapter 7*](B19358_07.xhtml#_idTextAnchor523),
    means that you take the whole vector and make it of length `1`. So, the whole
    vector is `1` pixel long. This will leave us with the direction of the `velocity`
    without its length. Now we can easily scale this direction to whatever length
    we want by multiplying it with the `camera_distance` to define the `position`
    of the `CameraPosition`. If you run the game now, you’ll see that `CameraPosition`
    does what you want it to and makes the camera look ahead in the direction the
    character is moving. But it is still a bit janky, so let’s smooth that out one
    last time.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，为了获取玩家移动的方向，我们将这个 `velocity` 向量标准化。正如我们在 [*第7章*](B19358_07.xhtml#_idTextAnchor523)
    中看到的，标准化一个向量意味着你取整个向量并使其长度为 `1`。因此，整个向量长度为 `1` 像素。这将使我们得到 `velocity` 的方向，而不包括其长度。现在我们可以通过将其与
    `camera_distance` 相乘来轻松地将这个方向缩放到我们想要的任何长度，以定义 `CameraPosition` 的 `position`。如果你现在运行游戏，你会看到
    `CameraPosition` 正如你想要的那样工作，使摄像机朝向角色移动的方向看去。但它仍然有点不稳定，所以让我们最后一次将其平滑化。
- en: Smoothing out the look ahead
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 平滑前瞻
- en: The problem now is that the camera starts moving very suddenly and abruptly
    stops. This happens because the `CameraPosition` we created jumps around quite
    quickly. To fix this problem, we should make the movement of the `CameraPosition`
    itself smooth.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在的问题是，摄像机开始非常突然地移动，然后又突然停止。这是因为我们创建的 `CameraPosition` 移动得相当快。为了解决这个问题，我们应该使
    `CameraPosition` 的移动本身更加平滑。
- en: 'First, add a new exported variable, like so:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，添加一个新的导出变量，如下所示：
- en: '[PRE1]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, let’s change the `_process()` function of the `camera_position.gd` script
    as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将 `camera_position.gd` 脚本的 `_process()` 函数更改为以下内容：
- en: '[PRE2]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: class_name Collectible
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 类名 Collectible
- en: '[PRE3]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'func _on_area_2d_body_entered(body):'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'func _on_area_2d_body_entered(body):'
- en: body.health += 5
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: body.health += 5
- en: queue_free()
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: queue_free()
- en: '[PRE4]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'var position: Vector2 = Vector2(1, 1)'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'var position: Vector2 = Vector2(1, 1)'
- en: 'var target_position: Vector2 = Vector2(3, 5)'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'var target_position: Vector2 = Vector2(3, 5)'
- en: position.lerp(target_position, 0.5)
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: position.lerp(target_position, 0.5)
- en: '[PRE5]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
