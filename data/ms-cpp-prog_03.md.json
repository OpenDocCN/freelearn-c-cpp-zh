["```cpp\n#include <iostream>\n#include <algorithm>\n#include <iterator>\nusing namespace std;\n\ntemplate <typename T, int size>\nvoid sort ( T input[] ) {\n\n     for ( int i=0; i<size; ++i) { \n         for (int j=0; j<size; ++j) {\n              if ( input[i] < input[j] )\n                  swap (input[i], input[j] );\n         }\n     }\n\n}\n\nint main () {\n        int a[10] = { 100, 10, 40, 20, 60, 80, 5, 50, 30, 25 };\n\n        cout << \"\\nValues in the int array before sorting ...\" << endl;\n        copy ( a, a+10, ostream_iterator<int>( cout, \"\\t\" ) );\n        cout << endl;\n\n        ::sort<int, 10>( a );\n\n        cout << \"\\nValues in the int array after sorting ...\" << endl;\n        copy ( a, a+10, ostream_iterator<int>( cout, \"\\t\" ) );\n        cout << endl;\n\n        double b[5] = { 85.6d, 76.13d, 0.012d, 1.57d, 2.56d };\n\n        cout << \"\\nValues in the double array before sorting ...\" << endl;\n        copy ( b, b+5, ostream_iterator<double>( cout, \"\\t\" ) );\n        cout << endl;\n\n        ::sort<double, 5>( b );\n\n        cout << \"\\nValues in the double array after sorting ...\" << endl;\n        copy ( b, b+5, ostream_iterator<double>( cout, \"\\t\" ) );\n        cout << endl;\n\n        string names[6] = {\n               \"Rishi Kumar Sahay\",\n               \"Arun KR\",\n               \"Arun CR\",\n               \"Ninad\",\n               \"Pankaj\",\n               \"Nikita\"\n        };\n\n        cout << \"\\nNames before sorting ...\" << endl;\n        copy ( names, names+6, ostream_iterator<string>( cout, \"\\n\" ) );\n        cout << endl;\n\n        ::sort<string, 6>( names );\n\n        cout << \"\\nNames after sorting ...\" << endl;\n        copy ( names, names+6, ostream_iterator<string>( cout, \"\\n\" ) );\n        cout << endl;\n\n        return 0;\n}\n\n```", "```cpp\ng++ main.cpp -std=c++17\n./a.out\n```", "```cpp\nValues in the int array before sorting ...\n100  10   40   20   60   80   5   50   30   25\n\nValues in the int array after sorting ...\n5    10   20   25   30   40   50   60   80   100\n\nValues in the double array before sorting ...\n85.6d 76.13d 0.012d 1.57d 2.56d\n\nValues in the double array after sorting ...\n0.012   1.57   2.56   76.13   85.6\n\nNames before sorting ...\nRishi Kumar Sahay\nArun KR\nArun CR\nNinad\nPankaj\nNikita\n\nNames after sorting ...\nArun CR\nArun KR\nNikita\nNinad\nPankaj\nRich Kumar Sahay\n```", "```cpp\ntemplate <typename T, int size>\nvoid sort ( T input[] ) {\n\n for ( int i=0; i<size; ++i) { \n     for (int j=0; j<size; ++j) {\n         if ( input[i] < input[j] )\n             swap (input[i], input[j] );\n     }\n }\n\n}\n```", "```cpp\n int a[10] = { 100, 10, 40, 20, 60, 80, 5, 50, 30, 25 };\n cout << \"\\nValues in the int array before sorting ...\" << endl;\n copy ( a, a+10, ostream_iterator<int>( cout, \"\\t\" ) );\n cout << endl;\n```", "```cpp\n::sort<int, 10>( a );\n```", "```cpp\n::sort<double, 5>( b );\n::sort<string, 6>( names );\n```", "```cpp\nnm ./a.out | grep sort\n\n00000000000017f1 W _Z4sortIdLi5EEvPT_\n0000000000001651 W _Z4sortIiLi10EEvPT_\n000000000000199b W _Z4sortINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELi6EEvPT_\n```", "```cpp\nc++filt _Z4sortIdLi5EEvPT_\nvoid sort<double, 5>(double*)\n\nc++filt _Z4sortIiLi10EEvPT_\nvoid sort<int, 10>(int*)\n\nc++filt _Z4sortINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELi6EEvPT_\nvoid sort<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, 6>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)\n```", "```cpp\n#include <iostream>\n#include <array>\nusing namespace std;\n\nvoid sort ( array<int,6> data ) {\n\n     cout << \"Non-template sort function invoked ...\" << endl;\n\n     int size = data.size();\n\n     for ( int i=0; i<size; ++i ) { \n          for ( int j=0; j<size; ++j ) {\n                if ( data[i] < data[j] )\n                    swap ( data[i], data[j] );\n          }\n     }\n\n}\n\ntemplate <typename T, int size>\nvoid sort ( array<T, size> data ) {\n\n     cout << \"Template sort function invoked with one argument...\" << endl;\n\n     for ( int i=0; i<size; ++i ) {\n         for ( int j=0; j<size; ++j ) {\n             if ( data[i] < data[j] )\n                swap ( data[i], data[j] );\n         }\n     }\n\n}\n\ntemplate <typename T>\nvoid sort ( T data[], int size ) {\n     cout << \"Template sort function invoked with two arguments...\" << endl;\n\n     for ( int i=0; i<size; ++i ) {\n         for ( int j=0; j<size; ++j ) {\n             if ( data[i] < data[j] )\n                swap ( data[i], data[j] );\n         }\n     }\n\n}\n\nint main() {\n\n    //Will invoke the non-template sort function\n    array<int, 6> a = { 10, 50, 40, 30, 60, 20 };\n    ::sort ( a );\n\n    //Will invoke the template function that takes a single argument\n    array<float,6> b = { 10.6f, 57.9f, 80.7f, 35.1f, 69.3f, 20.0f };\n    ::sort<float,6>( b );\n\n    //Will invoke the template function that takes a single argument\n    array<double,6> c = { 10.6d, 57.9d, 80.7d, 35.1d, 69.3d, 20.0d };\n    ::sort<double,6> ( c );\n\n    //Will invoke the template function that takes two arguments\n    double d[] = { 10.5d, 12.1d, 5.56d, 1.31d, 81.5d, 12.86d };\n    ::sort<double> ( d, 6 );\n\n    return 0;\n\n}\n```", "```cpp\ng++ main.cpp -std=c++17\n\n./a.out\n```", "```cpp\nNon-template sort function invoked ...\n\nTemplate sort function invoked with one argument...\n\nTemplate sort function invoked with one argument...\n\nTemplate sort function invoked with two arguments...\n```", "```cpp\nvoid sort ( array<int,6> data ) { \n\n     cout << \"Non-template sort function invoked ...\" << endl;\n\n     int size = data.size();\n\n     for ( int i=0; i<size; ++i ) { \n         for ( int j=0; j<size; ++j ) {\n             if ( data[i] < data[j] )\n                 swap ( data[i], data[j] );\n         }\n     }\n\n}\n```", "```cpp\ntemplate <typename T, int size>\nvoid sort ( array<T, size> data ) {\n\n     cout << \"Template sort function invoked with one argument...\" << endl;\n\n     for ( int i=0; i<size; ++i ) {\n         for ( int j=0; j<size; ++j ) {\n             if ( data[i] < data[j] )\n                swap ( data[i], data[j] );\n         }\n     }\n\n}\n```", "```cpp\ntemplate <typename T>\nvoid sort ( T data[], int size ) {\n\n     cout << \"Template sort function invoked with two argument...\" << endl;\n\n     for ( int i=0; i<size; ++i ) {\n         for ( int j=0; j<size; ++j ) {\n             if ( data[i] < data[j] )\n                swap ( data[i], data[j] );\n         }\n     }\n\n}\n```", "```cpp\n //Will invoke the non-template sort function\n array<int, 6> a = { 10, 50, 40, 30, 60, 20 };\n ::sort ( a );\n```", "```cpp\n//Will invoke the template function that takes a single argument\narray<float,6> b = { 10.6f, 57.9f, 80.7f, 35.1f, 69.3f, 20.0f };\n::sort<float,6>( b );\n```", "```cpp\n  //Will invoke the template function that takes a single argument\n array<double,6> c = { 10.6d, 57.9d, 80.7d, 35.1d, 69.3d, 20.0d };\n ::sort<double,6> ( c );\n```", "```cpp\n //Will invoke the template function that takes two arguments\n double d[] = { 10.5d, 12.1d, 5.56d, 1.31d, 81.5d, 12.86d };\n ::sort<double> ( d, 6 );\n```", "```cpp\n//myalgorithm.h\n#include <iostream>\n#include <algorithm>\n#include <array>\n#include <iterator>\nusing namespace std;\n\ntemplate <typename T, int size>\nclass MyAlgorithm {\n\npublic:\n        MyAlgorithm() { } \n        ~MyAlgorithm() { }\n\n        void sort( array<T, size> &data ) {\n             for ( int i=0; i<size; ++i ) {\n                 for ( int j=0; j<size; ++j ) {\n                     if ( data[i] < data[j] )\n                         swap ( data[i], data[j] );\n                 }\n             }\n        }\n\n        void sort ( T data[size] );\n\n};\n\ntemplate <typename T, int size>\ninline void MyAlgorithm<T, size>::sort ( T data[size] ) {\n       for ( int i=0; i<size; ++i ) {\n           for ( int j=0; j<size; ++j ) {\n               if ( data[i] < data[j] )\n                  swap ( data[i], data[j] );\n           }\n       }\n}\n```", "```cpp\n#include \"myalgorithm.h\"\n\nint main() {\n\n    MyAlgorithm<int, 10> algorithm1;\n\n    array<int, 10> a = { 10, 5, 15, 20, 25, 18, 1, 100, 90, 18 };\n\n    cout << \"\\nArray values before sorting ...\" << endl;\n    copy ( a.begin(), a.end(), ostream_iterator<int>(cout, \"\\t\") );\n    cout << endl;\n\n    algorithm1.sort ( a );\n\n    cout << \"\\nArray values after sorting ...\" << endl;\n    copy ( a.begin(), a.end(), ostream_iterator<int>(cout, \"\\t\") );\n    cout << endl;\n\n    MyAlgorithm<int, 10> algorithm2;\n    double d[] = { 100.0, 20.5, 200.5, 300.8, 186.78, 1.1 };\n\n    cout << \"\\nArray values before sorting ...\" << endl;\n    copy ( d.begin(), d.end(), ostream_iterator<double>(cout, \"\\t\") );\n    cout << endl;\n\n    algorithm2.sort ( d );\n\n    cout << \"\\nArray values after sorting ...\" << endl;\n    copy ( d.begin(), d.end(), ostream_iterator<double>(cout, \"\\t\") );\n    cout << endl;\n\n    return 0;  \n\n}\n```", "```cpp\ng++ main.cpp -std=c++17\n\n./a.out\n```", "```cpp\n\nArray values before sorting ...\n10  5   15   20   25   18   1   100   90   18\n\nArray values after sorting ...\n1   5   10   15   18   18   20   25   90   100\n\nArray values before sorting ...\n100   20.5   200.5   300.8   186.78   1.1\n\nArray values after sorting ...\n1.1     20.5   100   186.78  200.5  300.8\n```", "```cpp\ntemplate <typename T, int size>\nclass MyAlgorithm \n```", "```cpp\n void sort( array<T, size> &data ) {\n      for ( int i=0; i<size; ++i ) {\n          for ( int j=0; j<size; ++j ) {\n              if ( data[i] < data[j] )\n                 swap ( data[i], data[j] );\n          }\n      }\n } \n```", "```cpp\ntemplate <typename T, int size>\nclass MyAlgorithm {\n      public:\n           void sort ( T data[size] );\n};\n```", "```cpp\ntemplate <typename T, int size>\ninline void MyAlgorithm<T, size>::sort ( T data[size] ) {\n       for ( int i=0; i<size; ++i ) {\n           for ( int j=0; j<size; ++j ) {\n               if ( data[i] < data[j] )\n                  swap ( data[i], data[j] );\n           }\n       }\n}\n```", "```cpp\n#include <iostream>\n#include <deque>\n#include <algorithm>\n#include <iterator>\nusing namespace std;\n\ntemplate < class T >\nclass DynamicArray {\n      private:\n           deque< T > dynamicArray;\n           typename deque< T >::iterator pos;\n\n      public:\n           DynamicArray() { initialize(); }\n           ~DynamicArray() { }\n\n           void initialize() {\n                 pos = dynamicArray.begin();\n           }\n\n           void appendValue( T element ) {\n                 dynamicArray.push_back ( element );\n           }\n\n           bool hasNextValue() { \n                 return ( pos != dynamicArray.end() );\n           }\n\n           T getValue() {\n                 return *pos++;\n           }\n\n};\n```", "```cpp\n#include \"dynamicarray.h\"\n#include \"dynamicarrayforbool.h\"\n\nint main () {\n\n    DynamicArray<int> intArray;\n\n    intArray.appendValue( 100 );\n    intArray.appendValue( 200 );\n    intArray.appendValue( 300 );\n    intArray.appendValue( 400 );\n\n    intArray.initialize();\n\n    cout << \"\\nInt DynamicArray values are ...\" << endl;\n    while ( intArray.hasNextValue() )\n          cout << intArray.getValue() << \"\\t\";\n    cout << endl;\n\n    DynamicArray<char> charArray;\n    charArray.appendValue( 'H' );\n    charArray.appendValue( 'e' );\n    charArray.appendValue( 'l' );\n    charArray.appendValue( 'l' );\n    charArray.appendValue( 'o' );\n\n    charArray.initialize();\n\n    cout << \"\\nChar DynamicArray values are ...\" << endl;\n    while ( charArray.hasNextValue() )\n          cout << charArray.getValue() << \"\\t\";\n    cout << endl;\n\n    DynamicArray<bool> boolArray;\n\n    boolArray.appendValue ( true );\n    boolArray.appendValue ( false );\n    boolArray.appendValue ( true );\n    boolArray.appendValue ( false );\n\n    boolArray.initialize();\n\n    cout << \"\\nBool DynamicArray values are ...\" << endl;\n    while ( boolArray.hasNextValue() )\n         cout << boolArray.getValue() << \"\\t\";\n    cout << endl;\n\n    return 0;\n\n}\n```", "```cpp\ng++ main.cpp -std=c++17\n\n./a.out\n```", "```cpp\nInt DynamicArray values are ...\n100   200   300   400\n\nChar DynamicArray values are ...\nH   e   l   l   o\n\nBool DynamicArray values are ...\n1   0   1   0\n```", "```cpp\ntemplate < class T >\nclass DynamicArray {\n      private:\n           deque< T > dynamicArray;\n           typename deque< T >::iterator pos;\n```", "```cpp\nDynamicArray<int> intArray;\n\nintArray.appendValue( 100 );\nintArray.appendValue( 200 );\nintArray.appendValue( 300 );\nintArray.appendValue( 400 );\n```", "```cpp\nintArray.initialize();\ncout << \"\\nInt DynamicArray values are ...\" << endl;\nwhile ( intArray.hasNextValue() )\n      cout << intArray.getValue() << \"\\t\";\ncout << endl;\n```", "```cpp\nDynamicArray<bool> boolArray;\n\nboolArray.appendValue ( \"1010\" );\n\nboolArray.initialize();\n\ncout << \"\\nBool DynamicArray values are ...\" << endl;\n\nwhile ( boolArray.hasNextValue() )\n      cout << boolArray.getValue() << \"\\t\";\ncout << endl;\n```", "```cpp\n#include <iostream>\n#include <bitset>\n#include <algorithm>\n#include <iterator>\nusing namespace std;\n\ntemplate <>\nclass DynamicArray<bool> {\n      private:\n          deque< bitset<8> *> dynamicArray;\n          bitset<8> oneByte;\n          typename deque<bitset<8> * >::iterator pos;\n          int bitSetIndex;\n\n          int getDequeIndex () {\n              return (bitSetIndex) ? (bitSetIndex/8) : 0;\n          }\n      public:\n          DynamicArray() {\n              bitSetIndex = 0;\n              initialize();\n          }\n\n         ~DynamicArray() { }\n\n         void initialize() {\n              pos = dynamicArray.begin();\n              bitSetIndex = 0;\n         }\n\n         void appendValue( bool value) {\n              int dequeIndex = getDequeIndex();\n              bitset<8> *pBit = NULL;\n\n              if ( ( dynamicArray.size() == 0 ) || ( dequeIndex >= ( dynamicArray.size()) ) ) {\n                   pBit = new bitset<8>();\n                   pBit->reset();\n                   dynamicArray.push_back ( pBit );\n              }\n\n              if ( !dynamicArray.empty() )\n                   pBit = dynamicArray.at( dequeIndex );\n\n              pBit->set( bitSetIndex % 8, value );\n              ++bitSetIndex;\n         }\n\n         bool hasNextValue() {\n              return (bitSetIndex < (( dynamicArray.size() * 8 ) ));\n         }\n\n         bool getValue() {\n              int dequeIndex = getDequeIndex();\n\n              bitset<8> *pBit = dynamicArray.at(dequeIndex);\n              int index = bitSetIndex % 8;\n              ++bitSetIndex;\n\n              return (*pBit)[index] ? true : false;\n         }\n};\n```", "```cpp\n#include \"dynamicarray.h\"\n#include \"dynamicarrayforbool.h\"\n\nint main () {\n\n    DynamicArray<int> intArray;\n\n    intArray.appendValue( 100 );\n    intArray.appendValue( 200 );\n    intArray.appendValue( 300 );\n    intArray.appendValue( 400 );\n\n    intArray.initialize();\n\n    cout << \"\\nInt DynamicArray values are ...\" << endl;\n\n    while ( intArray.hasNextValue() )\n          cout << intArray.getValue() << \"\\t\";\n    cout << endl;\n\n    DynamicArray<char> charArray;\n\n    charArray.appendValue( 'H' );\n    charArray.appendValue( 'e' );\n    charArray.appendValue( 'l' );\n    charArray.appendValue( 'l' );\n    charArray.appendValue( 'o' );\n\n    charArray.initialize();\n\n    cout << \"\\nChar DynamicArray values are ...\" << endl;\n    while ( charArray.hasNextValue() )\n          cout << charArray.getValue() << \"\\t\";\n    cout << endl;\n\n    DynamicArray<bool> boolArray;\n\n    boolArray.appendValue ( true );\n    boolArray.appendValue ( false );\n    boolArray.appendValue ( true );\n    boolArray.appendValue ( false );\n\n    boolArray.appendValue ( true );\n    boolArray.appendValue ( false );\n    boolArray.appendValue ( true );\n    boolArray.appendValue ( false );\n\n    boolArray.appendValue ( true );\n    boolArray.appendValue ( true);\n    boolArray.appendValue ( false);\n    boolArray.appendValue ( false );\n\n    boolArray.appendValue ( true );\n    boolArray.appendValue ( true);\n    boolArray.appendValue ( false);\n    boolArray.appendValue ( false );\n\n    boolArray.initialize();\n\n    cout << \"\\nBool DynamicArray values are ...\" << endl;\n    while ( boolArray.hasNextValue() )\n          cout << boolArray.getValue() ;\n    cout << endl;\n\n    return 0;\n\n}\n```", "```cpp\nDynamicArray<char> charArray;\ncharArray.appendValue( 'H' );\ncharArray.appendValue( 'e' );\n\ncharArray.initialize();\n\ncout << \"\\nChar DynamicArray values are ...\" << endl;\nwhile ( charArray.hasNextValue() )\ncout << charArray.getValue() << \"\\t\";\ncout << endl;\n\nDynamicArray<bool> boolArray;\nboolArray.appendValue ( true );\nboolArray.appendValue ( false );\n\nboolArray.initialize();\n\ncout << \"\\nBool DynamicArray values are ...\" << endl;\nwhile ( boolArray.hasNextValue() )\n      cout << boolArray.getValue() ;\ncout << endl;\n```", "```cpp\n#include <iostream>\nusing namespace std;\n\ntemplate <typename T1, typename T2, typename T3>\nclass MyTemplateClass {\npublic:\n     void F1( T1 t1, T2 t2, T3 t3 ) {\n          cout << \"\\nPrimary Template Class - Function F1 invoked ...\" << endl;\n          cout << \"Value of t1 is \" << t1 << endl;\n          cout << \"Value of t2 is \" << t2 << endl;\n          cout << \"Value of t3 is \" << t3 << endl;\n     }\n\n     void F2(T1 t1, T2 t2) {\n          cout << \"\\nPrimary Tempalte Class - Function F2 invoked ...\" << endl;\n          cout << \"Value of t1 is \" << t1 << endl;\n          cout << \"Value of t2 is \" << 2 * t2 << endl;\n     }\n};\n```", "```cpp\ntemplate <typename T1, typename T2, typename T3>\nclass MyTemplateClass< T1, T2*, T3*> : public MyTemplateClass<T1, T2, T3> {\n      public:\n          void F1( T1 t1, T2* t2, T3* t3 ) {\n               cout << \"\\nPartially Specialized Template Class - Function F1 invoked ...\" << endl;\n               cout << \"Value of t1 is \" << t1 << endl;\n               cout << \"Value of t2 is \" << *t2 << endl;\n               cout << \"Value of t3 is \" << *t3 << endl;\n          }\n};\n```", "```cpp\n#include \"partiallyspecialized.h\"\n\nint main () {\n    int x = 10;\n    int *y = &x;\n    int *z = &x;\n\n    MyTemplateClass<int, int*, int*> obj;\n    obj.F1(x, y, z);\n    obj.F2(x, x);\n\n    return 0;\n}\n```", "```cpp\ntemplate <typename T1, typename T2, typename T3>\nclass MyTemplateClass< T1, T2*, T3*> : public MyTemplateClass<T1, T2, T3> { };\n```", "```cpp\ng++ main.cpp -std=c++17\n\n./a.out\n```", "```cpp\nPartially Specialized Template Classs - Function F1 invoked ...\nValue of t1 is 10\nValue of t2 is 10\nValue of t3 is 10\n\nPrimary Tempalte Class - Function F2 invoked ...\nValue of t1 is 10\nValue of t2 is 20\n```"]