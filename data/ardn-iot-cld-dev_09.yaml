- en: '9'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '9'
- en: Project 4 – Collecting Data from the Soil and Environment for Smart Farming
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目4 – 为智能农业收集土壤和环境数据
- en: This chapter is dedicated to **smart agriculture**. Our population is growing
    rapidly and food consumption is directly proportional to population. Fortunately,
    we have the latest tools and technologies that help us to boost our crop yields
    by using fewer natural resources. In smart agriculture, there are different parameters
    to monitor, but we will only focus on soil moisture and soil temperature as both
    are linked to water consumption; access to clean water is another issue with the
    rapid growth of industries and population.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章专门介绍**智能农业**。我们的人口正在迅速增长，食物消耗与人口直接相关。幸运的是，我们有最新的工具和技术，帮助我们通过使用更少的自然资源来提高作物产量。在智能农业中，有多个参数需要监控，但我们将只关注土壤湿度和土壤温度，因为它们都与水资源消耗有关；随着工业和人口的快速增长，清洁水的获取也是一个问题。
- en: In this chapter, we will practically explore smart agriculture by monitoring
    the soil moisture level, soil temperature, and outdoor temperature and humidity,
    which will help us to understand how our soil responds to changes in the outside
    environment and for how many days the soil retains moisture after watering the
    crop. Our smart agriculture device will send all the data to the Arduino IoT Cloud,
    where we will monitor it in real time and make decisions that will help us to
    use controlled watering for crops, which will save water and improve the soil
    quality.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将通过监测土壤湿度、土壤温度和室外温度湿度来实际探索智能农业，这将帮助我们了解土壤如何对外部环境的变化做出反应，以及灌溉作物后土壤保持水分的天数。我们的智能农业设备将把所有数据发送到Arduino
    IoT Cloud，在那里我们将实时监控并做出有助于我们使用控制灌溉来节约用水并提高土壤质量的决策。
- en: In this chapter, we are going to use open source and cost-effective sensors
    to carry out experiments in labs as well as in the field. For the development
    board, we are using the **ESP32** and **ADS1115** **analog-to-digital converter**
    (**ADC**) modules in combination with four capacitive soil moisture and four **DS18B20**
    sensors for soil temperature monitoring, as well as a **DHT22** module for outdoor
    temperature and humidity monitoring. This project will help you optimize your
    crops with precision farming, tunnel farming, and drip irrigation, as well as
    be useful for home gardening.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用开源且成本效益高的传感器在实验室和田间进行实验。对于开发板，我们使用**ESP32**和**ADS1115**模拟数字转换器（ADC）模块，结合四个电容式土壤湿度和四个**DS18B20**传感器进行土壤温度监测，以及一个**DHT22**模块进行室外温度和湿度监测。这个项目将帮助你通过精准农业、温室农业和滴灌来优化你的作物，同时对于家庭园艺也非常有用。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Smart farming with IoT
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于物联网的智能农业
- en: Essential hardware for your agri-tech project
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的农业技术项目必备硬件
- en: Architecting your agriculture IoT system
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建你的农业物联网系统
- en: Perfecting sensor calibration
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完善传感器校准
- en: Setting up things, networks, and cloud variables
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置事物、网络和云变量
- en: Creating web and mobile dashboards
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建网页和移动仪表板
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The following hardware components are required to complete this chapter:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本章所需的以下硬件组件：
- en: ESP32 development board
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ESP32开发板
- en: ADS1115 ADC module
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ADS1115 ADC模块
- en: DHT22 module
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DHT22模块
- en: Soil moisture sensor x4
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 土壤湿度传感器 x4
- en: DS18B20 x4
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DS18B20 x4
- en: PCB (link is available in the *PCB design and the assembly of hardware* *components*
    section)
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PCB（在*PCB设计和硬件组件组装*部分可找到链接）
- en: 2.54 mm three-pin connectors
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2.54毫米三针连接器
- en: Female headers
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 女性端子
- en: Jumper cables
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跳线电缆
- en: For coding, we will use the Arduino Web Editor, which includes a large collection
    of development board and sensor libraries, and we will use the Arduino IoT Cloud
    for Thing and dashboard setup. To develop hardware and sensor designs, we need
    the Fritzing desktop software.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 对于编码，我们将使用Arduino Web Editor，它包含大量开发板和传感器库，我们将使用Arduino IoT Cloud进行设备和仪表板的设置。为了开发硬件和传感器设计，我们需要Fritzing桌面软件。
- en: The chapter code is available in the book’s official GitHub repository, or you
    can directly download the code at [https://github.com/PacktPublishing/Arduino-IoT-Cloud-for-Developers](https://github.com/PacktPublishing/Arduino-IoT-Cloud-for-Developers).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码可在本书的官方GitHub仓库中找到，或者您可以直接在[https://github.com/PacktPublishing/Arduino-IoT-Cloud-for-Developers](https://github.com/PacktPublishing/Arduino-IoT-Cloud-for-Developers)下载代码。
- en: Smart farming with IoT
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于物联网的智能农业
- en: '**Internet of Things** (**IoT**) technology is used in smart agriculture to
    optimize farm operations, improve crop yields, reduce waste, and increase profits.
    Here are some examples of how IoT is used in smart agriculture:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**物联网**（**IoT**）技术在智能农业中用于优化农场运营，提高作物产量，减少浪费，并增加利润。以下是一些物联网在智能农业中应用的例子：'
- en: '**Automated irrigation**: IoT sensors can be used to monitor soil moisture
    levels and weather conditions to determine when to irrigate crops. Automated irrigation
    systems can then be triggered to deliver the right amount of water to crops, which
    can reduce water wastage and increase crop yields.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动灌溉**：物联网传感器可以用来监测土壤湿度水平和天气条件，以确定何时灌溉作物。然后可以触发自动灌溉系统，为作物提供适量的水，这可以减少水浪费并提高作物产量。'
- en: '**Livestock management**: IoT sensors can be used to monitor the health and
    behavior of livestock, such as their movement, feeding habits, and sleeping patterns.
    This data can be used to detect early signs of illness, track breeding cycles,
    and ensure optimal conditions for the livestock.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**畜牧业管理**：物联网传感器可以用来监测牲畜的健康和行为，如它们的移动、进食习惯和睡眠模式。这些数据可以用来检测疾病的早期迹象，追踪繁殖周期，并确保牲畜的最佳条件。'
- en: '**Crop monitoring**: IoT sensors can be used to monitor crop growth, detect
    pests and diseases, and identify areas that need attention. This data can be used
    to make timely interventions and improve crop yields.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**作物监测**：物联网传感器可以用来监测作物生长，检测害虫和疾病，并确定需要关注的区域。这些数据可以用来进行及时干预并提高作物产量。'
- en: '**Precision farming**: IoT sensors can be used to gather data on individual
    plants or crops, enabling farmers to optimize their use of resources, such as
    water, fertilizers, and pesticides. This can help reduce waste, improve yields,
    and save money.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**精准农业**：物联网传感器可以用来收集有关单个植物或作物的数据，使农民能够优化其资源的使用，如水、肥料和杀虫剂。这有助于减少浪费，提高产量并节省金钱。'
- en: '**Smart harvesting**: IoT sensors can be used to monitor crop ripeness and
    determine the optimal time for harvesting. This can help reduce waste and improve
    the quality of harvested crops.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**智能收获**：物联网传感器可以用来监测作物成熟度并确定收获的最佳时间。这有助于减少浪费并提高收获作物的质量。'
- en: '**Weather monitoring**: IoT sensors can be used to monitor weather conditions
    such as temperature, humidity, and rainfall. This data can be used to make informed
    decisions about planting, harvesting, and other farming operations.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**天气监测**：物联网传感器可以用来监测天气条件，如温度、湿度和降雨量。这些数据可以用来做出关于种植、收获和其他农业操作的明智决策。'
- en: Overall, IoT technology is transforming the way that agriculture is practiced.
    By using real-time data and analytics, farmers can make better decisions and achieve
    better outcomes, ultimately leading to a more sustainable food supply for the
    world.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，物联网技术正在改变农业的实践方式。通过使用实时数据和数据分析，农民可以做出更好的决策，实现更好的结果，最终导致世界粮食供应的更加可持续。
- en: In this section, we have discussed smart agriculture and different terms and
    techniques that are common in smart agriculture. In the next section, we will
    discuss the hardware components that we are going to use in this chapter’s project.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论了智能农业以及智能农业中常见的不同术语和技术。在下一节中，我们将讨论本章项目中将要使用的硬件组件。
- en: Essential hardware for your agri-tech project
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 您农业技术项目的必备硬件
- en: In this project, we have chosen open source and easily available hardware components.
    To demonstrate how the Arduino IoT Cloud works with ESP32 series development boards,
    we have chosen the following hardware. In the ESP32 series, we have a wide selection
    of development boards that vary in size and number of pins. In this chapter, we
    are using **ESP32-DevKit V1** as it’s very compact and smaller in size compared
    to other boards. It is, of course, also cheaper and provides a 5V pin, which is
    also known as VIN, as well as having the option of a 3.3V pin. The following figure
    shows the **pin layout** (**pinout**) diagram of ESP32 V1.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们选择了开源且易于获得的硬件组件。为了展示Arduino IoT Cloud如何与ESP32系列开发板协同工作，我们选择了以下硬件。在ESP32系列中，我们有多种尺寸和引脚数量的开发板可供选择。在本章中，我们使用**ESP32-DevKit
    V1**，因为它与其他板相比非常紧凑，尺寸更小。当然，它也更便宜，并提供一个5V引脚，也称为VIN，同时还有一个3.3V引脚。以下图显示了ESP32 V1的**引脚布局**（**引脚图**）。
- en: '![Figure 9.1: ESP32-DevKit V1](img/B19752_09_01.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图9.1：ESP32-DevKit V1](img/B19752_09_01.jpg)'
- en: 'Figure 9.1: ESP32-DevKit V1'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.1：ESP32-DevKit V1
- en: ESP32 provides multiple pins for digital and analog input/output. If you want
    to use multiple analog sensors, then ADCs are available. One of the most well-known
    ADCs is the ADS1115/ADS1015 module, which provides four analog pins and is good
    when you need to add additional analog pins to your project. In this project,
    four analog pins are required to fetch soil moisture sensor values; this board
    has enough analog pins but I am using ADS1115 to demonstrate how we can use the
    ADC module to add extra analog pins to our projects.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: ESP32提供了多个数字和模拟输入/输出引脚。如果你想使用多个模拟传感器，那么ADCs是可用的。最著名的ADC之一是ADS1115/ADS1015模块，它提供四个模拟引脚，当你需要为你的项目添加额外的模拟引脚时，它是个不错的选择。在这个项目中，需要四个模拟引脚来获取土壤湿度传感器的值；这个板子有足够的模拟引脚，但我使用ADS1115来演示我们如何使用ADC模块为我们的项目添加额外的模拟引脚。
- en: In the current project, we need five digital pins for the DHT22 module and DS18B20
    temperature probe and four analog pins for the capacitive soil moisture sensors.
    One of the good features of this development board is that it provides a 5V power
    pin, which is not available in most ESP32 series development boards.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在当前项目中，我们需要五个数字引脚用于DHT22模块和DS18B20温度探头，以及四个模拟引脚用于电容式土壤湿度传感器。这个开发板的一个优点是它提供了一个5V电源引脚，这在大多数ESP32系列开发板上是不提供的。
- en: Next, we are using the DHT22 module to sense outdoor temperature and humidity,
    but you can also use the DHT11 sensor, depending on your requirements. If specifically
    talking about features, then the DHT22 provides a broader range of sensors compared
    to the DHT11, but it costs more. The following figure shows the DHT22 module,
    and we have labeled the pins for better understanding.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用DHT22模块来感应室外温度和湿度，但根据你的需求，你也可以使用DHT11传感器。如果具体谈到特性，那么DHT22相比DHT11提供了更广泛的传感器范围，但它的成本更高。以下图示展示了DHT22模块，我们已为引脚标注以供更好地理解。
- en: '![Figure 9.2: DHT22 and DHT11 module pinout](img/B19752_09_02.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图9.2：DHT22和DHT11模块引脚排列](img/B19752_09_02.jpg)'
- en: 'Figure 9.2: DHT22 and DHT11 module pinout'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.2：DHT22和DHT11模块引脚排列
- en: The preceding figure shows the pinout of the DHT22/DHT11 sensor module; the
    complete pin connection configuration can be seen in *Table 9.3*. The first pin
    (**VCC**) works with both 3.3V and 5V. The second pin is the **DATA** pin, which
    connects with any digital pin of ESP32-DevKit V1\. The third pin is the **GND**
    pin, which connects with the GND pin of the development board.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图示展示了DHT22/DHT11传感器模块的引脚排列；完整的引脚连接配置可以在*表9.3*中查看。第一个引脚（**VCC**）可以与3.3V和5V同时工作。第二个引脚是**数据**引脚，它连接到ESP32-DevKit
    V1的任何数字引脚。第三个引脚是**地**引脚，它连接到开发板的地引脚。
- en: 'Before moving on, the following table explains all the specification differences
    between the DHT22 and DHT11\. The most notable things are the sensing range and
    sensing period:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，以下表格解释了DHT22和DHT11之间的所有规格差异。最值得注意的是测量范围和测量周期：
- en: '| **Feature** | **DHT22** | **DHT11** |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| **特性** | **DHT22** | **DHT11** |'
- en: '| Power supply | 3.3 to 5V |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| 电源 | 3.3至5V |'
- en: '| Output signal | Digital signal via a single bus |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| 输出信号 | 通过单总线传递的数字信号 |'
- en: '| Sensing element | Polymer capacitor |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| 测量元件 | 聚合物电容器 |'
- en: '| Sensing range | Humidity 0-100% Relative Humidity (RH)Temperature 40-0°C
    | Humidity 20-90% RHTemperature 0-50°C |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| 测量范围 | 湿度 0-100% 相对湿度（RH）温度 40-0°C | 湿度 20-90% RHT温度 0-50°C |'
- en: '| Accuracy | Humidity: +-2% RH (max +-5% RH)Temperature: <+-0.5°C | Humidity:
    1% RH (max 5% RH)Temperature: <2°C |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| 精度 | 湿度：+-2% RH（最大+-5% RH）温度：<+-0.5°C | 湿度：1% RH（最大5% RH）温度：<2°C |'
- en: '| Sensing period | Average 2 s | Average 1 s |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| 测量周期 | 平均2秒 | 平均1秒 |'
- en: 'Table 9.1: DHT22 and DHT11 sensor specification'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 表9.1：DHT22和DHT11传感器规格
- en: The main sensor of the project is a capacitive soil moisture sensor and it is
    used to monitor the soil moisture of a specific area. It is a low-cost soil moisture
    monitoring sensor and is rustproof due to its use of PCB (PCB sheets use plastic
    and paint, making them rustproof). It senses the soil moisture by passing a small
    amount of electric current into the soil moisture sensors, as shown in *Figure
    9**.3*, and determining the soil moisture based on the returned current. If the
    sensor receives a higher current, then it means the moisture is high; if it receives
    a low current, then there is little or no moisture content in the soil.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 项目的主要传感器是一个电容式土壤湿度传感器，用于监测特定区域的土壤湿度。它是一种低成本土壤湿度监测传感器，由于其使用 PCB（PCB 板使用塑料和油漆，使其防锈）而具有防锈性。它通过向土壤湿度传感器中通入少量电流来感应土壤湿度，如图
    *图 9**.3* 所示，并根据返回的电流确定土壤湿度。如果传感器接收到的电流较高，则表示湿度较高；如果接收到的电流较低，则表示土壤中水分含量很少或没有。
- en: '![Figure 9.3: Capacitive soil moisture sensor pinout](img/B19752_09_03.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.3：电容式土壤湿度传感器引脚图](img/B19752_09_03.jpg)'
- en: 'Figure 9.3: Capacitive soil moisture sensor pinout'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.3：电容式土壤湿度传感器引脚图
- en: 'The soil moisture sensor consists of three pins: `map()` method under the `FetchSoilMoisture()`
    method. The complete code is available on GitHub in the folder for this chapter.
    The sensor operates with both 5V power as well as 3.3V, but 5V is recommended.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 土壤湿度传感器由三个引脚组成：在 `FetchSoilMoisture()` 方法下的 `map()` 方法。完整的代码可在 GitHub 的本章文件夹中找到。该传感器既可以用
    5V 电源也可以用 3.3V 电源运行，但推荐使用 5V。
- en: The other main sensor of this project is the DS18B20 waterproof temperature
    sensor probe, which is used to monitor the soil temperature of a specific area,
    along with soil moisture levels. It is a low-cost waterproof temperature monitoring
    sensor and is rustproof due to its steel enclosure. The following figure shows
    the DS18B20 waterproof temperature probe and its pinout and connection diagram
    with ESP32-DevKit V1.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目的另一个主要传感器是 DS18B20 防水温度传感器探头，用于监测特定区域的土壤温度以及土壤湿度。它是一种低成本防水温度监测传感器，由于其钢制外壳而具有防锈性。以下图显示了
    DS18B20 防水温度探头及其引脚图和与 ESP32-DevKit V1 的连接图。
- en: '![Figure 9.4: DS18B20 waterproof temperature probe](img/B19752_09_04.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.4：DS18B20 防水温度探头](img/B19752_09_04.jpg)'
- en: 'Figure 9.4: DS18B20 waterproof temperature probe'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.4：DS18B20 防水温度探头
- en: 'The preceding figure shows the sensor and its pinout diagram. DS18B20 contains
    three colored wires: the black wire is used for GND, the red wire is used to connect
    VCC either with 3.3V or 5V, and the yellow wire is used to connect with any digital
    pin but with a 4.7k pull resistor, as shown in the figure. If we’re talking about
    sensor specifications, then its temperature sensing range is good – it is capable
    of measuring a temperature from -55 to 125°C. All the other details are given
    in the following table for further exploration:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图显示了传感器及其引脚图。DS18B20 包含三根彩色线：黑色线用于 GND，红色线用于连接 VCC，可以是 3.3V 或 5V，黄色线用于连接任何数字引脚，但需要串联一个
    4.7k 拉电阻，如图所示。如果我们谈论传感器的规格，那么其温度感测范围很好——它能够测量从 -55 到 125°C 的温度。所有其他详细信息都在以下表格中提供，以供进一步探索：
- en: '| **Feature** | **DS18B20** |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| **特性** | **DS18B20** |'
- en: '| Power supply | 3.3 to 5V |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| 电源 | 3.3 至 5V |'
- en: '| Output signal | Digital signal/one wire |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| 输出信号 | 数字信号/单线 |'
- en: '| Temperature sensing range | -55~125°C |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| 温度感测范围 | -55~125°C |'
- en: '| Temperature accuracy | Temperature ± 0.5°C |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| 温度精度 | 温度 ± 0.5°C |'
- en: '| Sensing period | <750 ms |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| 感测周期 | <750 毫秒 |'
- en: Table 9.2 – DS18B20 specification table
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 表 9.2 – DS18B20 规格表
- en: In this section, we have discussed development boards and sensors in detail,
    with complete specifications and pinout diagrams. In the next section, we will
    talk about how these sensors connect to ESP32-DevKit V1 as well as the PCB design
    of the project.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们详细讨论了开发板和传感器，包括完整的规格和引脚图。在下一节中，我们将讨论这些传感器如何连接到 ESP32-DevKit V1 以及项目的
    PCB 设计。
- en: Architecting your agriculture IoT system
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建你的农业物联网系统
- en: In the previous sections, we discussed the sensors and development board in
    detail. Now it’s time to put things into practice. In hardware development, before
    starting to work with sensors and development boards, we need to develop the design
    concepts to get a better understanding of how things will be connected. There
    are many pieces of software available to design and develop design concepts for
    electronic projects, but we are going to use **Fritzing**.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们详细讨论了传感器和开发板。现在，是时候将理论付诸实践了。在硬件开发中，在开始与传感器和开发板一起工作之前，我们需要开发设计概念，以便更好地理解事物如何连接。有许多软件可用于设计电子项目的概念和开发，但我们将使用
    **Fritzing**。
- en: In the following two subsections, we will first talk about the schematics and
    design of the project and explain how to connect the pins with the development
    board. Then, we will talk about PCB design and its implementation to make the
    product ready for deployment in the field.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的两个小节中，我们将首先讨论项目的电路图和设计，并解释如何将引脚与开发板连接。然后，我们将讨论PCB设计和其实施，以便产品可以部署到现场。
- en: Schematics and design
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 电路图和设计
- en: The purpose of the design is to get a clear understanding of how sensors will
    connect with the development board. It helps engineers develop prototypes on a
    breadboard or Veroboard by basing them on these design files. A major benefit
    of designing using Fritzing is that it builds hardware schematics and PCB design
    in the background according to your design, which can be adjusted by designers
    according to the system requirements. The following figure shows the whole project
    diagram, illustrating how the sensors and ADS1115 module connect to the ESP32-DevKit
    V1 board.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 设计的目的是清楚地了解传感器如何与开发板连接。它帮助工程师基于这些设计文件在面包板或Veroboard上开发原型。使用Fritzing进行设计的重大优势是它会在后台根据您的设计构建硬件电路图和PCB设计，设计师可以根据系统要求进行调整。以下图显示了整个项目图，说明了传感器和ADS1115模块如何连接到ESP32-DevKit
    V1板。
- en: '![Figure 9.5: Smart agriculture system design](img/B19752_09_05.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图9.5：智能农业系统设计](img/B19752_09_05.jpg)'
- en: 'Figure 9.5: Smart agriculture system design'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.5：智能农业系统设计
- en: '*Figure 9**.5* depicts the whole project schematic diagram, which also includes
    the pin numbers. But to make it easier for you, we have provided the following
    tables with all the pin numbers. *Table 9.3* contains the pin configuration for
    DHT22 with ESP32:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '*图9.5* 展示了整个项目的电路图，其中也包括了引脚号。但为了使您更容易理解，我们提供了以下表格，其中包含了所有引脚号。*表9.3* 包含了ESP32与DHT22的引脚配置：'
- en: '| **ESP32** | **DHT22** |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| **ESP32** | **DHT22** |'
- en: '| D13 | Data (I/O) |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| D13 | 数据（I/O） |'
- en: '| GND | GND |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| GND | GND |'
- en: '| 3.3V | VCC |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| 3.3V | VCC |'
- en: 'Table 9.3: ESP32 and DHT22 pinout table'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 表9.3：ESP32和DHT22引脚分配表
- en: '*Table 9.4* contains the pin configuration for DS18B20 temperature probes with
    ESP32\. Here, we are using four DS18B20 temperature probes, and in each column
    of sensors, we have mentioned the ESP32 pin number that will connect with the
    DS18B20 data pin. GND and VCC pins of ESP32 development board will be common to
    all sensors:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '*表9.4* 包含了ESP32与DS18B20温度探头的引脚配置。在这里，我们使用了四个DS18B20温度探头，在每个传感器的列中，我们都提到了将连接到DS18B20数据引脚的ESP32引脚号。ESP32开发板的GND和VCC引脚将适用于所有传感器：'
- en: '| **Soil Temperature** **Sensor #1** | **Soil Temperature** **Sensor #2** |
    **Soil Temperature** **Sensor #3** | **Soil Temperature** **Sensor #4** |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| **土壤温度** **传感器 #1** | **土壤温度** **传感器 #2** | **土壤温度** **传感器 #3** | **土壤温度**
    **传感器 #4** |'
- en: '| Data pin with ESP32 (D32) | Data pin with ESP32 (D33) | Data pin with ESP32
    (D25) | Data pin with ESP32 (D26) |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| 与ESP32（D32）的数据引脚 | 与ESP32（D33）的数据引脚 | 与ESP32（D25）的数据引脚 | 与ESP32（D26）的数据引脚
    |'
- en: '| ESP32 GND to GND | ESP32 GND to GND | ESP32 GND to GND | ESP32 GND to GND
    |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| ESP32 GND到GND | ESP32 GND到GND | ESP32 GND到GND | ESP32 GND到GND |'
- en: '| ESP32 3.3V to VCC | ESP32 3.3V to VCC | ESP32 3.3V to VCC | ESP32 3.3V to
    VCC |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| ESP32 3.3V到VCC | ESP32 3.3V到VCC | ESP32 3.3V到VCC | ESP32 3.3V到VCC |'
- en: 'Table 9.4: ESP32 and DS18B20 temperature probes pinout table'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 表9.4：ESP32和DS18B20温度探头引脚分配表
- en: '*Table 9.5* illustrates ESP32 to ADS1115 pin configuration. The rest of the
    soil moisture sensors will connect to the system via ADS1115 analog pins, which
    are explained in *Table 9.6*:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '*表9.5* 展示了ESP32到ADS1115的引脚配置。其余的土壤湿度传感器将通过ADS1115模拟引脚连接到系统，这些引脚在 *表9.6* 中有详细说明：'
- en: '| **ESP32** | **ADS1115** |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| **ESP32** | **ADS1115** |'
- en: '| D22 | SCL |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| D22 | SCL |'
- en: '| D21 | SDA |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| D21 | SDA |'
- en: '| 3.3V | VCC |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| 3.3V | VCC |'
- en: '| GND | GND |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| GND | GND |'
- en: 'Table 9.5: ESP32 and ADS1115 pinout table'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 表9.5：ESP32和ADS1115引脚分配表
- en: 'In *Table 9.6*, you will see how we have attached soil moisture sensors to
    the system using ADS1115\. The second row of the table states which pin of ADS1115
    will be used to connect soil moisture sensors to the system:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在*表9.6*中，您将看到我们如何使用ADS1115将土壤湿度传感器连接到系统中。表格的第二行说明了ADS1115的哪个引脚将被用于将土壤湿度传感器连接到系统中：
- en: '| **Soil Moisture** **Sensor #1** | **Soil Moisture** **Sensor #2** | **Soil
    Moisture** **Sensor #3** | **Soil Moisture** **Sensor #4** |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| **土壤湿度** **传感器 #1** | **土壤湿度** **传感器 #2** | **土壤湿度** **传感器 #3** | **土壤湿度**
    **传感器 #4** |'
- en: '| Soil moisture analog pin to ADS1115 (A0) | Soil moisture analog pin to ADS1115
    (A1) | Soil moisture analog pin to ADS1115 (A2) | Soil moisture analog pin to
    ADS1115 (A3) |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| 土壤湿度模拟引脚到ADS1115（A0） | 土壤湿度模拟引脚到ADS1115（A1） | 土壤湿度模拟引脚到ADS1115（A2） | 土壤湿度模拟引脚到ADS1115（A3）
    |'
- en: '| ESP32 GND to GND | ESP32 GND to GND | ESP32 GND to GND | ESP32 GND to GND
    |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| ESP32 GND到GND | ESP32 GND到GND | ESP32 GND到GND | ESP32 GND到GND |'
- en: '| ESP32 VCC to VCC | ESP32 VCC to VCC | ESP32 VCC to VCC | ESP32 VCC to VCC
    |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| ESP32 VCC到VCC | ESP32 VCC到VCC | ESP32 VCC到VCC | ESP32 VCC到VCC |'
- en: 'Table 9.6: ADS1115 and soil moisture sensors pinout table'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 表9.6：ADS1115和土壤湿度传感器引脚表
- en: The preceding design provides a full overview showing how you can connect the
    sensors to the development board. According to the design, we have only one 5V
    and one GND from the development board, which will be used across all the sensors.
    Soil moisture sensors are analog sensors, so we connected all the sensors with
    ADS1115 module pins from the AO pin to the A4 pin, as shown in *Figure 9**.5*
    and *Table 9.6*, while the DHT22 module and DS18B20 are digital sensors and are
    connected to the D12, D32, D33, D25, and D26 pins of ESP32, as shown in *Figure
    9**.5* and in *Table 9.3* and *Table 9.4*, respectively. The ESP32 to ADS1115
    pinout is shown in *Table 9.5* as well as in *Figure 9**.5*.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 上述设计提供了一个全面概述，展示了您如何将传感器连接到开发板上。根据设计，我们从开发板中只取了一个5V和一个GND，这些将被用于所有传感器。土壤湿度传感器是模拟传感器，因此我们将所有传感器通过ADS1115模块的引脚从AO引脚连接到A4引脚，如图*图9.5*和*表9.6*所示，而DHT22模块和DS18B20是数字传感器，它们连接到ESP32的D12、D32、D33、D25和D26引脚，如图*图9.5*以及分别如图*表9.3*和*表9.4*所示。ESP32到ADS1115的引脚分配如图*表9.5*以及*图9.5*所示。
- en: PCB design and the assembly of hardware components
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PCB设计和硬件组件的组装
- en: In the preceding section, we saw a design that is good for creating prototypes
    using a breadboard or Veroboard, but what if we want to deploy that solution in
    the field? Fritzing is a great tool that provides the option to design a PCB,
    and when you develop the design, it automatically creates the PCB design in the
    backend, which is accessible in the Fritzing software via the **PCB Design** tab.
    Automatic PCB design is just a basic functionality and is not suitable for direct
    production, so it’s mandatory to review and rearrange the design according to
    professional practices. The following figure shows the PCB design for the current
    project.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们看到了一个适合使用面包板或Veroboard创建原型的好设计，但如果我们想在野外部署该解决方案怎么办？Fritzing是一个很好的工具，它提供了设计PCB的选项，当您开发设计时，它会在后台自动创建PCB设计，这可以通过Fritzing软件中的**PCB设计**选项卡访问。自动PCB设计只是一个基本功能，并不适合直接生产，因此必须根据专业实践审查和重新排列设计。以下图显示了当前项目的PCB设计。
- en: '![Figure 9.6: Smart agriculture system PCB design](img/B19752_09_06.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![图9.6：智能农业系统PCB设计](img/B19752_09_06.jpg)'
- en: 'Figure 9.6: Smart agriculture system PCB design'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.6：智能农业系统PCB设计
- en: The preceding figure shows the final PCB design of the project. (I was able
    to create this design easily thanks to Fritzing.) There are many different tools
    available for PCB design, such as **EasyEDA**, **Circuit Maker**, and **Altium**.
    It’s easy to develop a PCB; just make sure that the connection line on the PCB
    doesn’t intersect with other connection lines.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 上述图显示了项目的最终PCB设计。（我能够轻松创建这个设计得益于Fritzing。）有许多不同的工具可用于PCB设计，例如**EasyEDA**、**Circuit
    Maker**和**Altium**。开发PCB很容易；只需确保PCB上的连接线不要与其他连接线交叉。
- en: 'After the PCB design, you have two options: either develop the PCB yourself
    using the DIY method (which is good for learning purposes but not suitable for
    large-scale products) or choose a professional organization that will manufacture
    the PCB professionally. Many organizations in China provide PCB manufacturing
    and fabrication services, such as Seeed Studio, JLCPCB, and PCBWay. We tried PCBWay
    and were impressed with their working and delivery time. We have uploaded the
    PCB design to the PCBWay project repository, and from there, you can select the
    PCB design and order easily: [https://www.pcbway.com/project/shareproject/ESP32_Based_Smart_Agriculture_Node_11223e5a.html](https://www.pcbway.com/project/shareproject/ESP32_Based_Smart_Agriculture_Node_11223e5a.html).'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: PCB设计完成后，你有两种选择：要么自己使用DIY方法开发PCB（这对于学习目的很好，但不适合大规模产品），要么选择一个专业机构来专业制造PCB。中国有许多组织提供PCB制造和加工服务，例如Seeed
    Studio、JLCPCB和PCBWay。我们尝试了PCBWay，并对他们的工作和交货时间印象深刻。我们已经将PCB设计上传到PCBWay项目仓库，您可以从那里选择PCB设计并轻松订购：[https://www.pcbway.com/project/shareproject/ESP32_Based_Smart_Agriculture_Node_11223e5a.html](https://www.pcbway.com/project/shareproject/ESP32_Based_Smart_Agriculture_Node_11223e5a.html)。
- en: After getting the PCBs, it’s time to solder the female headers and 2.54 mm three-pin
    connectors for development boards and sensors. Never solder the development board
    and sensors directly on a PCB so that if anything stops working, then it’s easy
    to detach and replace. The following figure shows the final face of the PCB which
    contains 2.5mm three-pin connectors in white color for soil moisture sensors,
    DS18B20 & DHT22 while black female headers are used to insert the ESP32-DevKit
    V1 and ADS1115 module.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在获得PCB板后，是时候焊接用于开发板和传感器的母头和2.54毫米三针连接器了。切勿直接在PCB板上焊接开发板和传感器，这样如果任何东西停止工作，那么很容易拆卸和更换。以下图显示了PCB板的最终面，其中包含白色2.5毫米三针连接器，用于土壤湿度传感器、DS18B20和DHT22，而黑色母头用于插入ESP32-DevKit
    V1和ADS1115模块。
- en: '![Figure 9.7: Smart agriculture system PCB](img/B19752_09_07.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![图9.7：智能农业系统PCB](img/B19752_09_07.jpg)'
- en: 'Figure 9.7: Smart agriculture system PCB'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.7：智能农业系统PCB
- en: The preceding figure shows how the PCB looks after soldering the three-pin 2.54
    mm connectors and female headers. Soil moisture connectors are marked with **SM**
    while DS18B20 connectors are marked with **T** and resistances are marked with
    **R**, as shown in *Figure 9**.7*. Now it’s time to plug all the connectors to
    get our smart agriculture node ready for further procedures. But wait – by default,
    soil moisture sensors come with a very small length of wire, which is not enough,
    so here you need to extend the cable lengths by putting 2.54 mm female connectors
    on both ends, as soil moisture sensors also use the same connectors for connectivity.
    DS18B20 also comes with a naked terminal but we plugged a 2.54 mm female connector
    for easy and clean connectivity. The following figure shows the complete setup
    with all the sensors and cabling arrangement.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 上述图显示了焊接了三针2.54毫米连接器和母头后的PCB板外观。土壤湿度连接器标记为**SM**，DS18B20连接器标记为**T**，电阻标记为**R**，如*图9.7*所示。现在，是时候将所有连接器插入，以便将我们的智能农业节点准备好进行后续步骤。但是等等——默认情况下，土壤湿度传感器附带非常短的电线，这不够用，所以你需要通过在两端放置2.54毫米母头来延长电缆长度，因为土壤湿度传感器也使用相同的连接器进行连接。DS18B20也附带裸端子，但我们插入了2.54毫米母头，以便于清洁的连接。以下图显示了包含所有传感器和电缆布线的完整设置。
- en: '![Figure 9.8: Smart agriculture system with all sensors and modules](img/B19752_09_08.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图9.8：包含所有传感器和模块的智能农业系统](img/B19752_09_08.jpg)'
- en: 'Figure 9.8: Smart agriculture system with all sensors and modules'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.8：包含所有传感器和模块的智能农业系统
- en: The preceding figure shows all the components stacked on the PCB. We can see
    that soil moisture sensors are extended with custom cabling with the help of connectors,
    while the DS18B20 naked terminal is connected to female connectors, and the same
    for the DHT22 module. After hardware assembly, we need to calibrate the soil moisture
    and DS18B20 temperature before deploying the node into the field.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 上述图显示了所有组件堆叠在PCB板上。我们可以看到土壤湿度传感器通过连接器使用定制电缆进行扩展，而DS18B20裸端子连接到母头，DHT22模块也是如此。硬件组装完成后，在将节点部署到现场之前，我们需要校准土壤湿度和DS18B20温度。
- en: Perfecting sensor calibration
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 完善传感器校准
- en: Sensor calibration is a very important aspect of product development, especially
    when you have a plan to deploy your product in a real-time environment. So, before
    moving on, first we need to calibrate the capacitive soil moisture and DS18B20
    sensors. The soil moisture sensor operation varies from area to area due to air
    humidity and water levels.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 传感器校准是产品开发中非常重要的一个方面，尤其是在你计划将产品部署到实时环境中的时候。因此，在继续之前，我们首先需要校准电容式土壤湿度和DS18B20传感器。由于空气湿度和水位不同，土壤湿度传感器的操作因地区而异。
- en: So firstly, we will calibrate the soil moisture sensor by taking the values
    of sensors in the air and then putting sensors in the water. These values will
    be used to bind the final readings and, finally, we will convert the soil moisture
    sensor value from 0 to 100% via the map method. The soil moisture sensor is an
    analog sensor, so there is no requirement for an extra helping library, except
    the **ADS module library**, which is shown in the following figure with the name
    **Adafruit ADS1X15**.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，首先，我们将通过在空气中取传感器的值，然后将传感器放入水中来校准土壤湿度传感器。这些值将用于绑定最终读数，最后，我们将通过map方法将土壤湿度传感器的值从0转换为100%。土壤湿度传感器是一个模拟传感器，因此除了**ADS模块库**外，不需要额外的辅助库，该库如图所示，名称为**Adafruit
    ADS1X15**。
- en: '![Figure 9.9 – ADS1115 library](img/B19752_09_09.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![图9.9 – ADS1115库](img/B19752_09_09.jpg)'
- en: Figure 9.9 – ADS1115 library
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.9 – ADS1115库
- en: 'Here, we need to install a library for ADS1115/ADS1015 in the Arduino IDE so
    we can use the ADS module. Navigate to `Adafruit ADS1X15`, and install the latest
    version, which is shown in the preceding figure. After installation of the library,
    download the code from the official GitHub book repository and open the code from
    the `Soil-Moisture-Calibration` folder:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们需要在Arduino IDE中安装ADS1115/ADS1015库，以便我们可以使用ADS模块。导航到`Adafruit ADS1X15`，并安装最新版本，如图所示。安装库后，从官方GitHub书库下载代码，并从`Soil-Moisture-Calibration`文件夹打开代码：
- en: '[PRE0]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preceding code snippet contains two arrays: one for air values and one
    for sensor values when they are dipped into the water. For soil sensor calibration,
    we need to get `AirValue` and then `WaterValue` values only by one time. Upload
    the code to the development board and make sure your soil moisture sensors are
    dry. Open the serial monitor and note down the `AirValue` value for each sensor.
    After that, dip the sensors into a pot of water and note down the `WaterValue`
    value of the sensors.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码片段包含两个数组：一个用于空气值，一个用于传感器浸入水中的值。对于土壤传感器校准，我们只需要通过一次获取`AirValue`和`WaterValue`值。将代码上传到开发板，并确保你的土壤湿度传感器是干燥的。打开串行监视器，并记下每个传感器的`AirValue`值。之后，将传感器浸入一盆水中，并记下传感器的`WaterValue`值。
- en: 'Let’s look at the `AirValue`s of AIN0, AIN1, AIN2, and AIN3, as shown in *Figure
    9**.10*. **AIN** is short for **Analog Input** and the proceeding 0, 1, 2, and
    3 are the pin numbers of the ADC1115 module where soil moisture sensors are connected:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看*图9.10*中AIN0、AIN1、AIN2和AIN3的`AirValue`。**AIN**是**模拟输入**的缩写，而前面的0、1、2和3是连接土壤湿度传感器的ADC1115模块的引脚号：
- en: '![Figure 9.10: Air values of soil moisture sensors](img/B19752_09_10.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![图9.10：土壤湿度传感器的空气值](img/B19752_09_10.jpg)'
- en: 'Figure 9.10: Air values of soil moisture sensors'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.10：土壤湿度传感器的空气值
- en: 'Now let’s look at the `WaterValue`s after putting the soil moisture sensors
    in the water:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看将土壤湿度传感器放入水中后的`WaterValue`：
- en: '![Figure 9.11: Water values of soil moisture sensors](img/B19752_09_11.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![图9.11：土壤湿度传感器的水值](img/B19752_09_11.jpg)'
- en: 'Figure 9.11: Water values of soil moisture sensors'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.11：土壤湿度传感器的水值
- en: Wait for some time and note down the values when they become stable. After fetching
    the `Air` and `Water` values, put these values into the preceding arrays and upload
    the code again to the development board. Verify the values of the soil moisture
    percentage levels by putting the sensors into the water and then cleaning them.
    Here, you will get 100% when sensors are deeply in water and 0% when they are
    dry.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 等待一段时间，当值稳定时记下。在获取`Air`和`Water`值后，将这些值放入前面的数组中，并将代码再次上传到开发板。通过将传感器放入水中并清洁它们来验证土壤湿度百分比级别的值。在这里，当传感器完全浸入水中时，你会得到100%，而当它们干燥时，你会得到0%。
- en: 'After the soil moisture levels, it’s time to verify the DS18B20 temperature
    probe sensor readings. Firstly, we need to install a library for the DS18B20 temperature
    sensor. Navigate to `Dallas Temperature by Miles Burton`, and install the latest
    version. After installation of the library, download the code from the official
    GitHub book repository and open the code from the `DS18B20-Calibration` folder:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在土壤湿度水平之后，是时候验证DS18B20温度探头传感器的读数了。首先，我们需要为DS18B20温度传感器安装一个库。导航到“Miles Burton的Dallas温度”，并安装最新版本。安装库后，从官方GitHub书库下载代码，并从“DS18B20-Calibration”文件夹打开代码：
- en: '[PRE1]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the preceding code, we have mentioned digital pin numbers, which are reserved
    on the PCB to connect DS18B20 sensors. If you are using different pins on the
    breadboard, then update the pin number according to your selection. Upload the
    code on the development board, then after uploading, open up the serial monitor
    and see whether you are getting the values from the sensors or not. The following
    figure shows the DS18B20 temperature probe readings on the serial monitor for
    calibration purposes.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们提到了数字引脚号，这些引脚在PCB上预留用于连接DS18B20传感器。如果你在面包板上使用不同的引脚，那么根据你的选择更新引脚号。将代码上传到开发板，然后上传后，打开串行监视器，查看你是否从传感器获得了值。以下图显示了用于校准目的的DS18B20温度探头在串行监视器上的读数。
- en: '![Figure 9.12: DS18B20 temperature sensor values on the Serial Monitor](img/B19752_09_12.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![图9.12：DS18B20温度传感器在串行监视器上的值](img/B19752_09_12.jpg)'
- en: 'Figure 9.12: DS18B20 temperature sensor values on the Serial Monitor'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.12：DS18B20温度传感器在串行监视器上的值
- en: The preceding figure shows that the DS18B20 temperature sensors are working
    fine and the values are stabilized. Now, we can move forward with lab calibration.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图显示了DS18B20温度传感器工作正常，值已稳定。现在，我们可以继续进行实验室校准。
- en: Important note
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: A 4.7k **pull resistor** is mandatory for DS18B20\. Without pull-up resistor,
    you will not get the values.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 对于DS18B20，必须使用4.7k**上拉电阻**。没有上拉电阻，你将无法获得值。
- en: 'After the soil moisture sensors have tested with the `Air` and `Water` values,
    it’s time to calibrate both sensors in the lab. For moisture testing, we used
    the hot air oven method to verify the accuracy of the soil moisture sensor. We
    added water to soil, sand, and salt at different levels and measured it with sensors.
    After that, we inserted these samples into a hot air oven and compared the sensor
    readings between the two methods; the results were incredible: only a ±0.5 difference.
    For DS18B20, we used a calibrated analog thermometer and observed only a ±0.5
    difference. The following figure shows a photo of the lab where we calibrated
    the soil moisture and DS18B20 sensors to industry standards.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在土壤湿度传感器用“空气”和“水”值测试之后，是时候在实验室中对两个传感器进行校准了。对于湿度测试，我们使用了热空气烤箱方法来验证土壤湿度传感器的准确性。我们在土壤、沙子和盐中添加了不同水平的水，并用传感器进行测量。然后，我们将这些样品放入热空气烤箱中，比较两种方法之间的传感器读数；结果令人难以置信：只有±0.5的差异。对于DS18B20，我们使用校准过的模拟温度计，观察到的差异也只有±0.5。以下图显示了我们在实验室中对土壤湿度传感器和DS18B20传感器进行行业标准校准的照片。
- en: '![Figure 9.13: Moisture sensor and temperature sensor calibration in the lab](img/B19752_09_13.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![图9.13：实验室中的湿度传感器和温度传感器校准](img/B19752_09_13.jpg)'
- en: 'Figure 9.13: Moisture sensor and temperature sensor calibration in the lab'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.13：实验室中的湿度传感器和温度传感器校准
- en: The preceding figure shows the calibration of sensors in the lab. Here, we have
    tested the sensors with soil, sand, and salt.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图显示了实验室中传感器的校准。在这里，我们用土壤、沙子和盐测试了传感器。
- en: In this section, we discussed sensors and their connection to ES32-DevKit V1
    using a schematic diagram, as well as PCB design and its implementation. After
    that, we discussed soil moisture and DS18B20 sensor calibration. In the upcoming
    section, we will set up things, network credentials, and cloud variables and look
    into the code.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们通过原理图讨论了传感器及其与ES32-DevKit V1的连接，以及PCB设计和其实施。之后，我们讨论了土壤湿度和DS18B20传感器的校准。在下一节中，我们将设置事物、网络凭据和云变量，并查看代码。
- en: Setting up things, networks, and cloud variables
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置事物、网络和云变量
- en: After setting up the hardware, it’s time to set up a thing in the Arduino IoT
    Cloud. For this project, we need 10 cloud variables to fetch monitoring parameters
    from the device; the network settings will be different due to the ESP series
    board. The following figure gives a complete overview of the **AgriStack** Thing
    we will set up.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置好硬件后，是时候在 Arduino IoT Cloud 中设置事物了。对于本项目，我们需要 10 个云变量来从设备获取监控参数；由于 ESP 系列板，网络设置将不同。以下图提供了我们将要设置的
    **AgriStack** 事物的完整概述。
- en: '![Figure 9.14: Smart agriculture system thing setup](img/B19752_09_14.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.14：智能农业系统事物设置](img/B19752_09_14.jpg)'
- en: 'Figure 9.14: Smart agriculture system thing setup'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.14：智能农业系统事物设置
- en: 'Set up a new thing with the name `AgriStack`. Follow these steps to create
    variables, an associated device, network configuration, and, finally, the code.
    We have marked the preceding figure with different red boxes and assigned numbers.
    These numbers correspond to the following steps, which will help you to set up
    the Thing:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 使用名称 `AgriStack` 创建一个新事物。按照以下步骤创建变量、相关设备、网络配置，最后是代码。我们已在先前的图中用不同的红色方框标记并分配了数字。这些数字对应以下步骤，将帮助您设置事物：
- en: Firstly, we need to set up 10 cloud variables, as shown in *Figure 9**.14*.
    There are two cloud variables for outdoor temperature and humidity; these values
    will be taken from DHT22\. There are four cloud variables for soil moisture and
    four variables for soil temperature. The previous four will use soil moisture
    sensor and the latter four will use the DS18B20 temperature probe. More details
    about cloud variables are available in the next subsection.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要设置 10 个云变量，如图 *图 9**.14* 所示。有两个云变量用于户外温度和湿度；这些值将从 DHT22 中获取。有四个云变量用于土壤湿度，四个变量用于土壤温度。前四个将使用土壤湿度传感器，后四个将使用
    DS18B20 温度探头。更多关于云变量的详细信息将在下一小节中提供。
- en: After that, we need to associate the device with the Thing. In the current project,
    we are going to use ESP32-DevKit V1, so the wizard will be different compared
    to Arduino boards. Complete details are available in the *Associating a* *device*
    section.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，我们需要将设备与事物关联起来。在当前项目中，我们将使用 ESP32-DevKit V1，因此向导将与 Arduino 板不同。完整详情请参阅 *关联设备*
    部分。
- en: Finally, we need to set up the network configuration for the device, but this
    time, we need to provide a security key for ESP series boards to make the connection
    secure, whereas Arduino-compatible boards are configured by the Arduino IoT Cloud
    automatically during the device setup wizard.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要为设备设置网络配置，但这次，我们需要为 ESP 系列板提供安全密钥以使连接安全，而 Arduino 兼容板将在设备设置向导期间自动由 Arduino
    IoT Cloud 配置。
- en: Here, we have discussed the different steps that help us to set up our thing.
    In the proceeding section, we will start looking into cloud variables.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们讨论了帮助我们设置事物的不同步骤。在下文中，我们将开始探讨云变量。
- en: Cloud variables
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 云变量
- en: The following table explains all the properties of variables that we need to
    use during cloud variable creation. An integer (`int`) is a very famous data type,
    but here you will observe two new variable types regarding humidity and temperature,
    which take values in percentage and Celsius, respectively. Also, ensure you have
    the same variable declaration as per the table; otherwise, you will need to modify
    the example code according to your naming.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 下表解释了我们在创建云变量时需要使用的所有变量属性。整数（`int`）是一个非常著名的数据类型，但在这里您将观察到两种关于湿度和温度的新变量类型，它们分别以百分比和摄氏度取值。同时，确保您有与表格相同的变量声明；否则，您需要根据您的命名修改示例代码。
- en: 'We have set the permission of all cloud variables to **Read Only**, but we
    also have the **Read/Write** option. In this project, we only want to receive
    data from the device instead of sending data from dashboard, which is why **Read
    Only** mode is used, to avoid issues with data consistency. **Update Policy**
    is set to **On change**, as the device will send the data after five minutes,
    so this option is more appropriate compared to **Periodically update**:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已将所有云变量的权限设置为**只读**，但我们也有**读写**选项。在本项目中，我们只想从设备接收数据，而不是从仪表板发送数据，这就是为什么使用**只读**模式，以避免数据一致性问题。**更新策略**设置为**有变化时**，因为设备将在五分钟后发送数据，所以这个选项比**定期更新**更合适：
- en: '| **Serial** **no.** | **Variable Name** | **Variable Type** | **Declaration**
    | **Permission** | **Update** **Policy** |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| **序列号** | **变量名称** | **变量类型** | **声明** | **权限** | **更新策略** |'
- en: '| 1 | `Humidity` | `CloudRelativeHumidity` | `humidity` | **Read Only** | **On
    change** |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| 1 | `Humidity` | `CloudRelativeHumidity` | `humidity` | **只读** | **变更时**
    |'
- en: '| 2 | `Temperature` | `CloudTemperatureSensor` | `temperature` | **Read Only**
    | **On change** |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| 2 | `Temperature` | `CloudTemperatureSensor` | `temperature` | **只读** | **变更时**
    |'
- en: '| 3 | `SM1` | `int` | `sM1` | **Read Only** | **On change** |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| 3 | `SM1` | `int` | `sM1` | **只读** | **变更时** |'
- en: '| 4 | `SM2` | `int` | `sM2` | **Read Only** | **On change** |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| 4 | `SM2` | `int` | `sM2` | **只读** | **变更时** |'
- en: '| 5 | `SM3` | `int` | `sM3` | **Read Only** | **On change** |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| 5 | `SM3` | `int` | `sM3` | **只读** | **变更时** |'
- en: '| 6 | `SM4` | `int` | `sM4` | **Read Only** | **On change** |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| 6 | `SM4` | `int` | `sM4` | **只读** | **变更时** |'
- en: '| 7 | `ST1` | `int` | `sT1` | **Read Only** | **On change** |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| 7 | `ST1` | `int` | `sT1` | **只读** | **变更时** |'
- en: '| 8 | `ST2` | `int` | `sT2` | **Read Only** | **On change** |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| 8 | `ST2` | `int` | `sT2` | **只读** | **变更时** |'
- en: '| 9 | `ST3` | `int` | `sT3` | **Read Only** | **On change** |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| 9 | `ST3` | `int` | `sT3` | **只读** | **变更时** |'
- en: '| 10 | `ST4` | `int` | `sT4` | **Read Only** | **On change** |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| 10 | `ST4` | `int` | `sT4` | **只读** | **变更时** |'
- en: 'Table 9.7: Cloud variables list with complete parameters'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 表9.7：带有完整参数的云变量列表
- en: After the successful creation of cloud variables, we will proceed further with
    the device association step, where we will add and associate the ESP32-DevKit
    V1 with our thing.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功创建云变量之后，我们将继续进行设备关联步骤，在这里我们将添加并将ESP32-DevKit V1与我们的设备关联。
- en: Associating a device
  id: totrans-169
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关联设备
- en: After variable creation, it’s time to add a device and associate it with the
    Thing. Before adding the device, connect the development board to the computer,
    and open the **Arduino Create Agent** application. We discussed the Arduino Create
    Agent in [*Chapter 2*](B19752_02.xhtml#_idTextAnchor038), in the *What is the
    Arduino Create* *Agent?* section.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 变量创建完成后，是时候添加一个设备并将其与设备关联了。在添加设备之前，请将开发板连接到计算机，并打开**Arduino Create Agent**应用程序。我们已经在[*第2章*](B19752_02.xhtml#_idTextAnchor038)的*什么是Arduino
    Create代理？*部分讨论了Arduino Create代理。
- en: '![Figure 9.15: Device selection wizard](img/B19752_09_15.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![图9.15：设备选择向导](img/B19752_09_15.jpg)'
- en: 'Figure 9.15: Device selection wizard'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.15：设备选择向导
- en: Click on the **Select Device** button under the **Associated Device** section
    on the Thing page. A popup will appear where you can see all the devices that
    are already available. If you have already added your WeMos D1 mini, select it.
    Otherwise, click on **SET UP NEW DEVICE**. Next, click on the **Set up a 3rd party
    device** option. Select **ESP32** and **DOIT ESP32 DEVKIT V1** from the dropdown
    and click on the **CONTINUE** button. Provide the device name and click on the
    **Next** button. In the final wizard, the **Device ID** and **Secret Key** details
    will be displayed. Copy the secret key to a safe place as it will be used during
    the network configuration.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在设备页面下**关联设备**部分点击**选择设备**按钮。将弹出一个窗口，其中你可以看到所有已可用的设备。如果你已经添加了WeMos D1 mini，请选择它。如果没有，点击**设置新设备**。接下来，点击**设置第三方设备**选项。从下拉菜单中选择**ESP32**和**DOIT
    ESP32 DEVKIT V1**，然后点击**继续**按钮。提供设备名称并点击**下一步**按钮。在最后的向导中，将显示**设备ID**和**密钥**详细信息。将密钥复制到安全的地方，因为它将在网络配置中使用。
- en: Network configuration
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络配置
- en: After associating the device with the Thing, it is time to configure the Wi-Fi
    settings for device communication, as shown in *Figure 9**.14*, in the area marked
    *3*. Under **Network**, you will find the option to fill in the form with the
    Wi-Fi name and password. In the last field, you will find a new field for the
    secret key. Paste the secret key that we received from the system during device
    creation.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在将设备与设备关联后，是时候配置设备通信的Wi-Fi设置了，如图9.14中标记的*3*区域所示。在**网络**下，你可以找到填写表单以输入Wi-Fi名称和密码的选项。在最后一个字段中，你将找到一个用于密钥的新字段。粘贴我们在设备创建期间从系统中接收到的密钥。
- en: '![Figure 9.16: Network configuration for the Thing](img/B19752_09_16.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![图9.16：设备网络配置](img/B19752_09_16.jpg)'
- en: 'Figure 9.16: Network configuration for the Thing'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.16：设备网络配置
- en: After network configuration, we are done with our main task; now, the coding
    task remains, and in the next section, we will go through it.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在网络配置完成后，我们的主要任务就完成了；现在，编码任务仍然存在，在下一节中，我们将对其进行介绍。
- en: Coding
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编码
- en: The project code is available in the book’s official GitHub repository in a
    ZIP file named `AgriStack_mar05a`. Download it and import it to your Arduino Web
    Editor.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 项目代码以名为`AgriStack_mar05a`的ZIP文件形式存储在书籍的官方GitHub仓库中。下载它并将其导入到Arduino Web编辑器中。
- en: 'You can download the code and put it into your thing by navigating to the `setup`
    method and use the `timer` library to delay calling; remember, never try to use
    the `delay` method as it will block the `ArduinoCloud.update()` method. Then,
    a method called `SmartAgri()` is called every five minutes. The following is the
    complete `SmartAgri()` method. After this, we will explore what operations are
    carried out by this method:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过导航到`setup`方法下载代码并将其放入您的设备中；记住，永远不要尝试使用`delay`方法，因为它将阻塞`ArduinoCloud.update()`方法。然后，每五分钟调用一次名为`SmartAgri()`的方法。以下是完全的`SmartAgri()`方法。在此之后，我们将探讨此方法执行的操作：
- en: '[PRE2]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In this project, we have divided all the operations into different methods
    for easiness. So, firstly, we are calling `FetchSoilMoisture()`, which is responsible
    for fetching soil moisture readings from sensors and storing them in an array.
    Before storing the data in an array, it maps the value for the percentage. Next,
    we have the `FetchTemperature()` method, which is responsible for fetching the
    temperatures from all DS18B20 sensors and saving them into the soil temperature
    array for further usage. Finally, we call `FetchDHTTempHum()` to fetch the outdoor
    temperature and humidity values from the DHT22 module, which will be stored in
    two variables. Now, we will explore how we get the values from the soil moisture
    sensors in the following method:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将所有操作都分成了不同的方法，以便于使用。因此，首先我们调用`FetchSoilMoisture()`方法，它负责从传感器获取土壤湿度读数并将它们存储在数组中。在将数据存储在数组之前，它将百分比值进行映射。接下来，我们有`FetchTemperature()`方法，它负责从所有DS18B20传感器获取温度并将它们保存到土壤温度数组中，以供进一步使用。最后，我们调用`FetchDHTTempHum()`来从DHT22模块获取户外温度和湿度值，这些值将存储在两个变量中。现在，我们将探讨如何在以下方法中获取土壤湿度传感器的值：
- en: '[PRE3]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The preceding technique is used in the `FetchSoilMoisture()` method to fetch
    the readings for soil moisture. Here, you will see that the method takes values
    from the sensor five times with a delay of one second and adds them to the variable;
    then later, it divides the sensor readings by 5 to get the average. The benefit
    of this technique is that you will get the best possible value from the soil sensor.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的技术在`FetchSoilMoisture()`方法中使用，用于获取土壤湿度的读数。在这里，您将看到该方法以一秒的延迟从传感器读取值五次，并将它们添加到变量中；然后稍后，它将传感器读数除以5以获得平均值。这种技术的优点是您将获得土壤传感器可能获得的最佳值。
- en: The previous three methods have been used to fetch values from different sensors
    and store them in global variables and arrays. Now it’s time to send these values
    to the Arduino IoT Cloud; for that reason, we have the `SendToArduinoIoTCloud()`
    method, which assigns all the values of sensors to cloud variables, and these
    values will be updated on the cloud with the help of the `ArduinoCloud.update()`
    method. At the end, we have the `PrintTheReadingsSerialPort()` method, which is
    optional for use at runtime and is used to display all the sensor values on the
    serial monitor.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 前三种方法已经被用来从不同的传感器中获取值并将它们存储在全局变量和数组中。现在，是时候将这些值发送到Arduino物联网云平台了；因此，我们有了`SendToArduinoIoTCloud()`方法，它将所有传感器的值分配给云变量，并且这些值将在`ArduinoCloud.update()`方法的帮助下在云上更新。最后，我们有`PrintTheReadingsSerialPort()`方法，这是一个在运行时可选使用的方法，用于在串行监视器上显示所有传感器值。
- en: Upload the code to the device and verify the connectivity and readings. If you
    want to change the reading time, then just modify the `timer.every(600000, SmartAgri);`
    value. Make sure you are providing the time in milliseconds, where 1 second equals
    1,000 milliseconds.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 将代码上传到设备并验证连接性和读数。如果您想更改读数时间，只需修改`timer.every(600000, SmartAgri);`的值。确保您提供的时间是以毫秒为单位的，其中1秒等于1,000毫秒。
- en: Important note
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: If you used a different naming scheme in the variable declaration, then update
    the code according to your naming scheme. But first, you should follow all the
    steps according to the book and then you can later change the cloud variable names
    and modify your code, respectively.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在变量声明中使用了不同的命名方案，那么请根据您的命名方案更新代码。但首先，您应该按照书中的所有步骤进行操作，然后您可以稍后更改云变量名称并修改您的代码。
- en: Never try to use the `delay` method, as it will block the `ArduinoCloud.update()`
    method. Always use milliseconds to calculate the waiting time. Review the `loop()`
    method to call the other methods after five minutes.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 永远不要尝试使用`delay`方法，因为它将阻塞`ArduinoCloud.update()`方法。始终使用毫秒来计算等待时间。回顾`loop()`方法，在五分钟后调用其他方法。
- en: The Arduino IoT Cloud only updates the value on the dashboard whenever the variable
    value is changed. For example, if the temperature is 30°C and it’s the same after
    five minutes, then the Arduino IoT Cloud will not record the value, so don’t get
    confused if values are not changing on the graph. Another benefit of this feature
    is you will not get duplicated data when you are exporting the content.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino物联网云平台仅在变量值更改时更新仪表板上的值。例如，如果温度是30°C，五分钟之后仍然是这个值，那么Arduino物联网云平台将不会记录这个值，所以如果图表上的值没有变化，请不要感到困惑。这个功能的另一个好处是，当你导出内容时，你不会得到重复的数据。
- en: After successfully discussing the different methods in the code and uploading
    the code to ESP32-DevKit V1, it’s time to explore how to visualize all the data
    using awesome Arduino IoT Cloud dashboard widgets.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功讨论了代码中的不同方法并将代码上传到ESP32-DevKit V1之后，现在是时候探索如何使用出色的Arduino物联网云平台仪表板小部件来可视化所有数据了。
- en: Creating web and mobile dashboards
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建网页和移动仪表板
- en: 'After uploading the code to the device, it’s time to set up a dashboard for
    web and mobile to visualize the data with different widgets. The following figure
    shows the visualization of readings with different widgets:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在将代码上传到设备后，现在是时候设置一个网页和移动仪表板，使用不同的仪表板小部件可视化数据了。以下图显示了使用不同小部件的读数可视化：
- en: '![Figure 9.17: Thing dashboard](img/B19752_09_17.jpg)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![图9.17：物事物仪表板](img/B19752_09_17.jpg)'
- en: 'Figure 9.17: Thing dashboard'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.17：物事物仪表板
- en: 'We have 10 different readings: **Outdoor Temperature**, **Outdoor Humidity**,
    four **Soil Moisture** readings, and four **Soil Temperature** readings. For every
    reading, we are using the gauge widget control, and advanced charts have been
    used to compare **Soil Moisture** and **Soil Temperature** to visualize the proper
    correlation between these two attributes. But we also want to monitor historical
    data; graphs are the best widgets to display live as well as older data. Here,
    as seen in the lower part of the preceding figure, we have used four graphs, and
    each graph is connected to a specific cloud variable.'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有10种不同的读数：**户外温度**、**户外湿度**、四个**土壤湿度**读数和四个**土壤温度**读数。对于每个读数，我们使用仪表小部件控件，并使用了高级图表来比较**土壤湿度**和**土壤温度**，以可视化这两个属性之间的适当相关性。但我们还希望监控历史数据；图表是显示实时数据以及旧数据的最佳小部件。在此，如图9.17所示，我们使用了四个图表，每个图表都连接到一个特定的云变量。
- en: In this section, we have successfully created a dashboard for a smart agriculture
    thing that shows all the sensor readings in text format, as well as used graphs
    for comparison purposes.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们成功地为智能农业事物创建了一个仪表板，以文本格式显示所有传感器读数，并使用图表进行比较。
- en: What next?
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接下来是什么？
- en: We still have a lot of options available to explore, but now it’s your turn
    to use different sensors and development boards to do some more experiments and
    learn from them. In this chapter, we used 10 sensors but only 3 different types,
    that is, moisture, temperature, and outdoor temperature and humidity. However,
    on the market, there are a lot of sensors that provide a wide variety of functionalities
    for soil, such as **NPK** (which stands for **nitrogen, phosphorus, and potassium**),
    **EC** (which stands for **electrical conductivity**), and pH sensors and different
    gas sensors for outdoor measurement.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有很多选项可供探索，但现在轮到您使用不同的传感器和开发板进行更多实验并从中学习。在本章中，我们使用了10个传感器，但只有3种不同类型，即湿度、温度和户外温度和湿度。然而，在市场上，有许多传感器为土壤提供广泛的多种功能，例如**NPK**（代表**氮、磷和钾**），**EC**（代表**电导率**），以及pH传感器和用于户外测量的不同气体传感器。
- en: 'Try the following sensors to enhance your practical knowledge and compare them
    with other sensors in terms of features, ranges, and cost:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试以下传感器以增强您的实践知识，并从功能、范围和成本方面与其他传感器进行比较：
- en: NPK sensor
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NPK传感器
- en: Soil EC sensor
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 土壤EC传感器
- en: Soil pH sensor
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 土壤pH传感器
- en: MQ series sensors, which are designed to sense specific gases, including MQ-2,
    MQ-3, MQ-4, MQ-5, MQ-7, MQ-8, and MQ-9, to find the correlation of gases and their
    effects on soil and crops
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MQ系列传感器，专为检测特定气体而设计，包括MQ-2、MQ-3、MQ-4、MQ-5、MQ-7、MQ-8和MQ-9，以找到气体及其对土壤和作物的影响之间的相关性
- en: Seeed Studio SCD30 (temperature, humidity, and CO2) for outdoor monitoring
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Seeed Studio SCD30（温度、湿度和CO2）用于户外监测
- en: Summary
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we explored how to develop a smart agriculture monitoring system
    using DHT22, capacitive soil moisture sensors, a DS18B20 probe for soil temperature,
    and an ESP32 development board along with the ADS1115 ADC module. We calibrated
    soil moisture and temperature sensors in the lab before using them in the field.
    We also set up a thing, which included creating cloud variables, device association,
    network configuration, and coding of the development board. Then, we created a
    dashboard to visualize the Thing’s sensor readings with different types of widgets
    to display current readings as well as historical data with the help of graphs.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了如何使用DHT22、电容式土壤湿度传感器、用于土壤温度的DS18B20探头以及ESP32开发板和ADS1115 ADC模块来开发智能农业监控系统。我们在将它们用于田野之前，在实验室中对土壤湿度和温度传感器进行了校准。我们还设置了一个事物，包括创建云变量、设备关联、网络配置和开发板的编码。然后，我们创建了一个仪表板，使用不同类型的仪表盘来可视化事物的传感器读数，显示当前读数以及借助图表显示的历史数据。
- en: This project will help you and give you the confidence to collaborate with agriculture
    researchers and soil scientists to work on a more advanced level. It will help
    you to add IoT systems to real fields and tunnel farms, as well as help you in
    home gardening.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目将帮助你并给你信心，与农业研究人员和土壤科学家合作，在更高级别上工作。它将帮助你将物联网系统添加到实际田野和隧道农场，同时也有助于你在家庭园艺中。
- en: In the next chapter, we will work on a smart home project where we will develop
    a smart RGB LED light that will be connected to the Amazon Alexa Voice assistant
    and help you to understand and develop smart home solutions.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将着手一个智能家居项目，我们将开发一个智能RGB LED灯，该灯将连接到亚马逊Alexa语音助手，帮助你理解和开发智能家居解决方案。
