["```cpp\n#ifndef _H_APPLICATION_\n#define _H_APPLICATION_\nclass Application {\nprivate:\n\u00a0\u00a0\u00a0\u00a0Application(const Application&);\n\u00a0\u00a0\u00a0\u00a0Application& operator=(const Application&);\npublic:\n\u00a0\u00a0\u00a0\u00a0inline Application() { }\n\u00a0\u00a0\u00a0\u00a0inline virtual ~Application() { }\n\u00a0\u00a0\u00a0\u00a0inline virtual void Initialize() { }\n\u00a0\u00a0\u00a0\u00a0inline virtual void Update(float inDeltaTime) { }\n\u00a0\u00a0\u00a0\u00a0inline virtual void Render(float inAspectRatio) { }\n\u00a0\u00a0\u00a0\u00a0inline virtual void Shutdown() { }\n};\n#endif\n```", "```cpp\n    #define _CRT_SECURE_NO_WARNINGS\n    #define WIN32_LEAN_AND_MEAN\n    #define WIN32_EXTRA_LEAN\n    #include \"glad.h\"\n    #include <windows.h>\n    #include <iostream>\n    #include \"Application.h\"\n    ```", "```cpp\n    int WINAPI WinMain(HINSTANCE, HINSTANCE, PSTR, int);\n    LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);\n    ```", "```cpp\n    #if _DEBUG\n    \u00a0\u00a0\u00a0\u00a0#pragma comment( linker, \"/subsystem:console\" )\n    \u00a0\u00a0\u00a0\u00a0int main(int argc, const char** argv) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return WinMain(GetModuleHandle(NULL), NULL,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0GetCommandLineA(), SW_SHOWDEFAULT);\n    \u00a0\u00a0\u00a0\u00a0}\n    #else\n    \u00a0\u00a0\u00a0\u00a0#pragma comment( linker, \"/subsystem:windows\" )\n    #endif\n    #pragma comment(lib, \"opengl32.lib\")\n    ```", "```cpp\n#define WGL_CONTEXT_MAJOR_VERSION_ARB\u00a0\u00a0\u00a0\u00a0 0x2091\n#define WGL_CONTEXT_MINOR_VERSION_ARB\u00a0\u00a0\u00a0\u00a0 0x2092\n#define WGL_CONTEXT_FLAGS_ARB\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 0x2094\n#define WGL_CONTEXT_CORE_PROFILE_BIT_ARB\u00a0\u00a00x00000001\n#define WGL_CONTEXT_PROFILE_MASK_ARB\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00x9126\ntypedef HGLRC(WINAPI* PFNWGLCREATECONTEXTATTRIBSARBPROC) \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 (HDC, HGLRC, const int*);\n```", "```cpp\ntypedef const char* \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(WINAPI* PFNWGLGETEXTENSIONSSTRINGEXTPROC) (void);\ntypedef BOOL(WINAPI* PFNWGLSWAPINTERVALEXTPROC) (int);\ntypedef int (WINAPI* PFNWGLGETSWAPINTERVALEXTPROC) (void);\n```", "```cpp\nApplication* gApplication = 0;\nGLuint gVertexArrayObject = 0;\n```", "```cpp\n    int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 hPrevInstance, PSTR szCmdLine, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 int iCmdShow) {\n    gApplication = new Application();\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0WNDCLASSEX wndclass;\n    \u00a0\u00a0\u00a0\u00a0wndclass.cbSize = sizeof(WNDCLASSEX);\n    \u00a0\u00a0\u00a0\u00a0wndclass.style = CS_HREDRAW | CS_VREDRAW;\n    \u00a0\u00a0\u00a0\u00a0wndclass.lpfnWndProc = WndProc;\n    \u00a0\u00a0\u00a0\u00a0wndclass.cbClsExtra = 0;\n    \u00a0\u00a0\u00a0\u00a0wndclass.cbWndExtra = 0;\n    \u00a0\u00a0\u00a0\u00a0wndclass.hInstance = hInstance;\n    \u00a0\u00a0\u00a0\u00a0wndclass.hIcon = LoadIcon(NULL, IDI_APPLICATION);\n    \u00a0\u00a0\u00a0\u00a0wndclass.hIconSm = LoadIcon(NULL, IDI_APPLICATION);\n    \u00a0\u00a0\u00a0\u00a0wndclass.hCursor = LoadCursor(NULL, IDC_ARROW);\n    \u00a0\u00a0\u00a0\u00a0wndclass.hbrBackground = (HBRUSH)(COLOR_BTNFACE + 1);\n    \u00a0\u00a0\u00a0\u00a0wndclass.lpszMenuName = 0;\n    \u00a0\u00a0\u00a0\u00a0wndclass.lpszClassName = \"Win32 Game Window\";\n    \u00a0\u00a0\u00a0\u00a0RegisterClassEx(&wndclass);\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0int screenWidth = GetSystemMetrics(SM_CXSCREEN);\n    \u00a0\u00a0\u00a0\u00a0int screenHeight = GetSystemMetrics(SM_CYSCREEN);\n    \u00a0\u00a0\u00a0\u00a0int clientWidth = 800;\n    \u00a0\u00a0\u00a0\u00a0int clientHeight = 600;\n    \u00a0\u00a0\u00a0\u00a0RECT windowRect;\n    \u00a0\u00a0\u00a0\u00a0SetRect(&windowRect, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(screenWidth / 2) - (clientWidth / 2), \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(screenHeight / 2) - (clientHeight / 2), \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(screenWidth / 2) + (clientWidth / 2), \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(screenHeight / 2) + (clientHeight / 2));\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0DWORD style = (WS_OVERLAPPED | WS_CAPTION | \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0WS_SYSMENU | WS_MINIMIZEBOX | WS_MAXIMIZEBOX); \n    \u00a0\u00a0\u00a0\u00a0// | WS_THICKFRAME to resize\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0AdjustWindowRectEx(&windowRect, style, FALSE, 0);\n    \u00a0\u00a0\u00a0\u00a0HWND hwnd = CreateWindowEx(0, wndclass.lpszClassName, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Game Window\", style, windowRect.left, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0windowRect.top, windowRect.right - \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0windowRect.left, windowRect.bottom - \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0windowRect.top, NULL, NULL, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0hInstance, szCmdLine);\n    \u00a0\u00a0\u00a0\u00a0HDC hdc = GetDC(hwnd);\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0PIXELFORMATDESCRIPTOR pfd;\n    \u00a0\u00a0\u00a0\u00a0memset(&pfd, 0, sizeof(PIXELFORMATDESCRIPTOR));\n    \u00a0\u00a0\u00a0\u00a0pfd.nSize = sizeof(PIXELFORMATDESCRIPTOR);\n    \u00a0\u00a0\u00a0\u00a0pfd.nVersion = 1;\n    \u00a0\u00a0\u00a0\u00a0pfd.dwFlags = PFD_SUPPORT_OPENGL | PFD_DRAW_TO_WINDOW \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0| PFD_DOUBLEBUFFER;\n    \u00a0\u00a0\u00a0\u00a0pfd.iPixelType = PFD_TYPE_RGBA;\n    \u00a0\u00a0\u00a0\u00a0pfd.cColorBits = 24;\n    \u00a0\u00a0\u00a0\u00a0pfd.cDepthBits = 32;\n    \u00a0\u00a0\u00a0\u00a0pfd.cStencilBits = 8;\n    \u00a0\u00a0\u00a0\u00a0pfd.iLayerType = PFD_MAIN_PLANE;\n    \u00a0\u00a0\u00a0\u00a0int pixelFormat = ChoosePixelFormat(hdc, &pfd);\n    \u00a0\u00a0\u00a0\u00a0SetPixelFormat(hdc, pixelFormat, &pfd);\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0HGLRC tempRC = wglCreateContext(hdc);\n    \u00a0\u00a0\u00a0\u00a0wglMakeCurrent(hdc, tempRC);\n    \u00a0\u00a0\u00a0\u00a0PFNWGLCREATECONTEXTATTRIBSARBPROC\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 wglCreateContextAttribsARB = NULL;\n    \u00a0\u00a0\u00a0\u00a0wglCreateContextAttribsARB =\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 (PFNWGLCREATECONTEXTATTRIBSARBPROC)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 wglGetProcAddress(\"wglCreateContextAttribsARB\");\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0const int attribList[] = {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0WGL_CONTEXT_MAJOR_VERSION_ARB, 3,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0WGL_CONTEXT_MINOR_VERSION_ARB, 3,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0WGL_CONTEXT_FLAGS_ARB, 0,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0WGL_CONTEXT_PROFILE_MASK_ARB,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0WGL_CONTEXT_CORE_PROFILE_BIT_ARB,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00, };\n    \u00a0\u00a0\u00a0\u00a0HGLRC hglrc = wglCreateContextAttribsARB(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 hdc, 0, attribList);\n    \u00a0\u00a0\u00a0\u00a0wglMakeCurrent(NULL, NULL);\n    \u00a0\u00a0\u00a0\u00a0wglDeleteContext(tempRC);\n    \u00a0\u00a0\u00a0\u00a0wglMakeCurrent(hdc, hglrc);\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0if (!gladLoadGL()) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Could not initialize GLAD\\n\";\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0else {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"OpenGL Version \" << \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0GLVersion.major << \".\" << GLVersion.minor <<\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"\\n\";\n    \u00a0\u00a0\u00a0\u00a0}\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0PFNWGLGETEXTENSIONSSTRINGEXTPROC\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 _wglGetExtensionsStringEXT =\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 (PFNWGLGETEXTENSIONSSTRINGEXTPROC)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 wglGetProcAddress(\"wglGetExtensionsStringEXT\");\n    \u00a0\u00a0\u00a0\u00a0bool swapControlSupported = strstr(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 _wglGetExtensionsStringEXT(), \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \"WGL_EXT_swap_control\") != 0;\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0int vsynch = 0;\n    \u00a0\u00a0\u00a0\u00a0if (swapControlSupported) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0PFNWGLSWAPINTERVALEXTPROC wglSwapIntervalEXT = \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(PFNWGLSWAPINTERVALEXTPROC)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0wglGetProcAddress(\"wglSwapIntervalEXT\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0PFNWGLGETSWAPINTERVALEXTPROC \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0wglGetSwapIntervalEXT =\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(PFNWGLGETSWAPINTERVALEXTPROC)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0wglGetProcAddress(\"wglGetSwapIntervalEXT\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (wglSwapIntervalEXT(1)) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Enabled vsynch\\n\";\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0vsynch = wglGetSwapIntervalEXT();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Could not enable vsynch\\n\";\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0else { // !swapControlSupported\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout << \"WGL_EXT_swap_control not supported\\n\";\n    \u00a0\u00a0\u00a0\u00a0}\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0glGenVertexArrays(1, &gVertexArrayObject);\n    \u00a0\u00a0\u00a0\u00a0glBindVertexArray(gVertexArrayObject);\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0ShowWindow(hwnd, SW_SHOW);\n    \u00a0\u00a0\u00a0\u00a0UpdateWindow(hwnd);\n    \u00a0\u00a0\u00a0\u00a0gApplication->Initialize();\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0DWORD lastTick = GetTickCount();\n    \u00a0\u00a0\u00a0\u00a0MSG msg;\n    \u00a0\u00a0\u00a0\u00a0while (true) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (PeekMessage(&msg, NULL, 0, 0, PM_REMOVE)) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (msg.message == WM_QUIT) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0TranslateMessage(&msg);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0DispatchMessage(&msg);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0DWORD thisTick = GetTickCount();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0float dt = float(thisTick - lastTick) * 0.001f;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0lastTick = thisTick;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (gApplication != 0) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0gApplication->Update(dt);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (gApplication != 0) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0RECT clientRect;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0GetClientRect(hwnd, &clientRect);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0clientWidth = clientRect.right - \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0clientRect.left;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0clientHeight = clientRect.bottom - \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 clientRect.top;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0glViewport(0, 0, clientWidth, clientHeight);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0glEnable(GL_DEPTH_TEST);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0glEnable(GL_CULL_FACE);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0glPointSize(5.0f);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0glBindVertexArray(gVertexArrayObject);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0glClearColor(0.5f, 0.6f, 0.7f, 1.0f);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0glClear(GL_COLOR_BUFFER_BIT | \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0GL_DEPTH_BUFFER_BIT | GL_STENCIL_BUFFER_BIT);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0float aspect = (float)clientWidth / \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 (float)clientHeight;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0gApplication->Render(aspect);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (gApplication != 0) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0SwapBuffers(hdc);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (vsynch != 0) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0glFinish();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0} // End of game loop\n    \u00a0\u00a0\u00a0\u00a0if (gApplication != 0) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Expected application to \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0be null on exit\\n\";\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0delete gApplication;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0return (int)msg.wParam;\n    }\n    ```", "```cpp\n    LRESULT CALLBACK WndProc(HWND hwnd, UINT iMsg, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0WPARAM wParam, LPARAM lParam) {\n    \u00a0\u00a0\u00a0\u00a0switch (iMsg) {\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0case WM_CLOSE:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (gApplication != 0) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0gApplication->Shutdown();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0delete gApplication;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0gApplication = 0;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0DestroyWindow(hwnd);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Already shut down!\\n\";\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0case WM_DESTROY:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (gVertexArrayObject != 0) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0HDC hdc = GetDC(hwnd);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0HGLRC hglrc = wglGetCurrentContext();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0glBindVertexArray(0);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0glDeleteVertexArrays(1, &gVertexArrayObject);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0gVertexArrayObject = 0;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0wglMakeCurrent(NULL, NULL);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0wglDeleteContext(hglrc);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ReleaseDC(hwnd, hdc);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0PostQuitMessage(0);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Multiple destroy messages\\n\";\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0case WM_PAINT:\n    \u00a0\u00a0\u00a0\u00a0case WM_ERASEBKGND:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 0;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0return DefWindowProc(hwnd, iMsg, wParam, lParam);\n    }\n    ```"]