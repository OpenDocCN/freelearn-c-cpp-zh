- en: Dynamic Memory Allocation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动态内存分配
- en: In the previous chapter, we talked about class definitions and how to devise
    your own custom class. We discussed how, by devising your own custom classes,
    you can construct variables that represent entities within your game or program.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们讨论了类的定义以及如何设计自己的自定义类。我们讨论了通过设计自定义类，可以构造代表游戏或程序中实体的变量。
- en: 'In this chapter, we will talk about dynamic memory allocation and how to create
    space in memory for groups of objects. Let''s take a look at the topics covered
    in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将讨论动态内存分配以及如何为对象组创建内存空间。让我们看看本章涵盖的主题：
- en: Constructors and destructors revisited
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构造函数和析构函数重访
- en: Dynamic memory allocation
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态内存分配
- en: Regular arrays
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 常规数组
- en: C++ style dynamic size arrays (new[] and delete[])
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C++风格的动态大小数组（new[]和delete[]）
- en: Dynamic C-style arrays
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态C风格数组
- en: Vectors
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向量
- en: Constructors and destructors revisited
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构造函数和析构函数重访
- en: 'Assume that we have a simplified version of `class Player`, as before, with
    only a constructor and a destructor:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个简化版本的`class Player`，与之前一样，只有构造函数和析构函数：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We talked earlier about the *scope* of a variable in C++; to recap, the scope
    of a variable is the section of the program where that variable can be used. The
    scope of a variable is generally inside the block in which it was declared. A
    block is just any section of code contained between `{` and `}`. Here is a sample
    program that illustrates variable scope:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前谈到了C++中变量的*作用域*；回顾一下，变量的作用域是程序中可以使用该变量的部分。变量的作用域通常在它声明的块内。块只是在`{`和`}`之间的任何代码段。下面是一个示例程序，说明了变量的作用域：
- en: '![](img/089f6225-04df-4f5c-993d-fcb0765a7f5a.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](img/089f6225-04df-4f5c-993d-fcb0765a7f5a.png)'
- en: In this sample program, the x variable has scope through all of main(). The
    y variable's scope is only inside the if block.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例程序中，x变量在整个main()函数中都有作用域。y变量的作用域只在if块内部。
- en: 'We mentioned previously that, in general, variables are destroyed when they
    go out of scope. Let''s test this idea out with instances of `class Player`:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前提到，一般情况下，变量在作用域结束时被销毁。让我们用`class Player`的实例来测试这个想法：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The output of this program is as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这个程序的输出如下：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The destructor for the `Player` object is called at the end of the player object's
    scope. Since the scope of a variable is the block within which it is defined in
    the three lines of code, the `Player` object would be destroyed immediately at
    the end of `main()`, when it goes out of scope.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`Player`对象的析构函数在玩家对象的作用域结束时被调用。由于变量的作用域是在代码的三行中定义的块内，`Player`对象将在`main()`结束时立即被销毁。'
- en: Dynamic memory allocation
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动态内存分配
- en: Now, let's try allocating a `Player` object dynamically. What does that mean?
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们尝试动态分配一个`Player`对象。这是什么意思？
- en: 'We use the `new` keyword to allocate it:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`new`关键字来分配它：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The output of this program is as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这个程序的输出如下：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The player does not die! How do we kill the player? We must explicitly call
    `delete` on the `player` pointer.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 玩家不会死！我们如何杀死玩家？我们必须明确调用`player`指针上的`delete`。
- en: The delete keyword
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除关键字
- en: 'The `delete` operator invokes the destructor on the object being deleted, as
    shown in the following code:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`delete`操作符在被删除的对象上调用析构函数，如下面的代码所示：'
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The output of the program is as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 程序的输出如下：
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: So, only normal (or automatic, also called non-pointer type) variable types
    get destroyed at the end of the block in which they were declared. Pointer types
    (variables declared with `*` and `new`) are not automatically destroyed, even
    when they go out of scope.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，只有普通（或自动，也称为非指针类型）变量类型在它们声明的块结束时被销毁。指针类型（用`*`和`new`声明的变量）即使作用域结束时也不会自动销毁。
- en: What is the use of this? Dynamic allocation lets you control when an object
    is created and destroyed. This will come in handy later.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这有什么用呢？动态分配可以让你控制对象何时被创建和销毁。这将在以后派上用场。
- en: Memory leaks
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内存泄漏
- en: So, dynamically allocated objects created with `new` are not automatically deleted,
    unless you explicitly call `delete` on them. There is a risk here! It is called
    a *memory leak*. Memory leaks happen when an object allocated with `new` is not
    ever deleted. What can happen is that, if a lot of objects in your program are
    allocated with `new` and then you stop using them, your computer will eventually
    run out of memory due to memory leakage.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，用`new`动态分配的对象不会自动删除，除非你明确调用`delete`。这里存在风险！这被称为*内存泄漏*。内存泄漏发生在用`new`分配的对象从未被删除时。可能发生的情况是，如果你的程序中有很多对象是用`new`分配的，然后你不再使用它们，你的计算机最终会因为内存泄漏而耗尽内存。
- en: 'Here is a ridiculous sample program to illustrate the problem:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个荒谬的示例程序，用来说明这个问题：
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This program, if left to run long enough, will eventually gobble the computer''s
    memory, as shown in the following screenshot:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果让这个程序运行足够长的时间，最终会吞噬计算机的内存，如下面的截图所示：
- en: '![](img/f33d9c48-4e20-4276-9e66-97d6a9c19fe3.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f33d9c48-4e20-4276-9e66-97d6a9c19fe3.png)'
- en: 2 GB of RAM used for Player objects.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 用于Player对象的2GB RAM。
- en: Note that no one ever intends to write a program with this type of problem in
    it! Memory leak problems happen accidentally. You must take care of your memory
    allocation and `delete` objects that are no longer in use.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，没有人打算写一个存在这种问题的程序！内存泄漏问题是意外发生的。你必须小心你的内存分配，并且`delete`不再使用的对象。
- en: Regular arrays
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常规数组
- en: 'An array in C++ can be declared as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在C++中，数组可以声明如下：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The way this looks in memory is something like this:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在内存中的样子大致如下：
- en: '![](img/110fedec-6e9f-4833-82f1-e9bd06c15964.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/110fedec-6e9f-4833-82f1-e9bd06c15964.png)'
- en: 'That is, inside the `array` variable are five slots or elements. Inside each
    of the slots is a regular `int` variable. You can also declare an array by passing
    in values, like this:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，在`array`变量内部有五个槽或元素。在每个槽内部是一个常规的`int`变量。你也可以通过传入值来声明数组，就像这样：
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You can also pass in `int` variables to use the values stored there.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以传入`int`变量来使用存储在那里的值。
- en: The array syntax
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数组语法
- en: 'So, how do you access one of the `int` values in the array? To access the individual
    elements of an array, we use square brackets, as shown in the following line of
    code:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，如何访问数组中的一个`int`值？要访问数组的各个元素，我们使用方括号，如下行代码所示：
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'It''s very similar to the syntax for creating an array in the first place.
    The preceding line of code would change the element at slot `0` of the array to
    a `10`:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这与最初创建数组的语法非常相似。上一行代码将更改数组的槽`0`中的元素为`10`：
- en: '![](img/da693da7-325f-4d27-b8eb-1f38a9f0786f.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/da693da7-325f-4d27-b8eb-1f38a9f0786f.png)'
- en: 'In general, to get to a particular slot of an array, you will write the following:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，要访问数组的特定槽，您将编写以下内容：
- en: '[PRE11]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Keep in mind that array slots are always indexed starting from `0` (some languages
    may start from `1`, but that's unusual and could get confusing). To get into the
    first slot of the array, use `array[0]`. The second slot of the array is `array[1]`
    (not `array[2]`). The final slot of the preceding array is `array[4]` (not `array[5]`).
    The `array[5]` data type is out of bounds of the array! (There is no slot with
    index 5 in the preceding diagram. The highest index is 4.)
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，数组槽始终从`0`开始索引（有些语言可能从`1`开始，但这是不寻常的，可能会令人困惑）。要进入数组的第一个槽，请使用`array[0]`。数组的第二个槽是`array[1]`（而不是`array[2]`）。前一个数组的最后一个槽是`array[4]`（而不是`array[5]`）。`array[5]`数据类型超出了数组的边界！（在前面的图中没有索引为5的槽。最高索引为4。）
- en: Don't go out of the bounds of the array! It might work sometimes, but other
    times your program will crash with a **memory access violation** (accessing memory
    that doesn't belong to your program). In general, accessing memory that does not
    belong to your program will will cause your app to crash, and if it doesn't do
    so immediately, there will be a hidden bug in your program that will only cause
    problems once in a while. You must always be careful when indexing an array.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 不要超出数组的边界！有时可能会起作用，但其他时候您的程序将崩溃并显示**内存访问违规**（访问不属于您的程序的内存）。通常情况下，访问不属于您的程序的内存将导致您的应用程序崩溃，如果不立即崩溃，那么您的程序中将会有一个隐藏的错误，只会偶尔引起问题。索引数组时必须始终小心。
- en: Arrays are built into C++, that is, you don't need to include anything special
    to have immediate use of arrays. You can have arrays of any type of data that
    you want, for example, arrays of `int`, `double`, `string`, and even your own
    custom object types (`Player`).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 数组内置于C++中，也就是说，您无需包含任何特殊内容即可立即使用数组。您可以拥有任何类型的数据数组，例如`int`、`double`、`string`，甚至您自己的自定义对象类型（`Player`）的数组。
- en: Exercise
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: Create an array of five strings and put some names inside it(made up or random—it
    doesn't matter).
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含五个字符串的数组，并在其中放入一些名称（虚构或随机 - 这无关紧要）。
- en: Create an array of doubles called `temps` with three elements and store the
    temperature for the last three days in it.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`temps`的双精度数组，其中包含三个元素，并将过去三天的温度存储在其中。
- en: Solution
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'The following is a sample program with an array of five strings:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下是一个包含五个字符串数组的示例程序：
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The following is just the array:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下只是数组：
- en: '[PRE13]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: C++ style dynamic size arrays (new[] and delete[])
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: C++风格的动态大小数组（new[]和delete[]）
- en: It probably occurred to you that we won't always know the size of an array at
    the start of a program. We would need to allocate the array's size dynamically.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经意识到，我们并不总是在程序开始时知道数组的大小。我们需要动态分配数组的大小。
- en: However, if you've tried it, you might have noticed that this doesn't work!
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果您尝试过，您可能已经注意到这行不通！
- en: 'Let''s try and use the `cin` command to take in an array size from the user.
    Let''s ask the user how big he wants his array and try to create one of that size
    for him:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试使用`cin`命令从用户那里获取数组大小。让我们询问用户他想要多大的数组，并尝试为他创建一个那么大的数组：
- en: '[PRE14]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We get an error. The problem is that the compiler wants to allocate the size
    of the array. However, unless the variable size is marked `const`, the compiler
    will not be sure of its value at compile time. The C++ compiler cannot size the
    array at compile time, so it generates a compile time error.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到一个错误。问题在于编译器希望分配数组的大小。然而，除非变量大小标记为`const`，否则编译器在编译时无法确定其值。C++编译器无法在编译时确定数组的大小，因此会生成编译时错误。
- en: 'To fix this, we have to allocate the array dynamically (on the "heap"):'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们必须动态分配数组（在“堆”上）：
- en: '[PRE15]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'So, the lessons here are as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这里的教训如下：
- en: To allocate an array of some type (for example, `int`) dynamically, you must
    use new `int[numberOfElementsInArray]`.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要动态分配某种类型（例如`int`）的数组，必须使用`new int[数组中的元素数量]`。
- en: Arrays allocated with `new[]` must be deleted later with `delete[]`, otherwise,
    you'll get a memory leak (that's `delete[]` with square brackets; not regular
    delete)!
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`new[]`分配的数组必须稍后使用`delete[]`删除，否则将导致内存泄漏（带有方括号的`delete[]`；不是常规的delete）！
- en: Dynamic C-style arrays
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动态C风格数组
- en: C-style arrays are a legacy topic, but they are still worth discussing, since
    even though they are old, you might still see them used sometimes.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: C风格数组是一个传统的话题，但仍然值得讨论，因为即使它们很古老，有时您仍然可能会看到它们被使用。
- en: 'The way we declare a C-style array is as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们声明C风格数组的方式如下：
- en: '[PRE16]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The differences are highlighted here.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 差异在这里突出显示。
- en: 'A C-style array is created using the `malloc()` function. The word malloc stands
    for memory allocate. This function requires you to pass in the size of the array
    in bytes to create, and not just the number of elements you want in the array.
    For this reason, we multiply the number of elements requested (`size`) by `sizeof`
    of the type inside the array. The sizes in bytes of a few typical C++ types are
    listed in the following table:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`malloc()`函数创建C风格的数组。malloc一词代表内存分配。此函数要求您传入要创建的数组的字节大小，而不仅仅是您想要的数组中的元素数量。因此，我们将请求的元素数量（大小）乘以数组内部类型的`sizeof`。以下表格列出了几种典型C++类型的字节大小：
- en: '| C++ primitive type | `sizeof` (size in bytes) |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| C++基本类型 | `sizeof`（字节大小） |'
- en: '| `int` | `4` |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| `int` | `4` |'
- en: '| `float` | `4` |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| `float` | `4` |'
- en: '| `double` | `8` |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| `double` | `8` |'
- en: '| `long long` | `8` |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| `long long` | `8` |'
- en: Memory allocated with the `malloc()` function must later be released using `free()`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`malloc()`函数分配的内存必须使用`free()`来释放。
- en: Vectors
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向量
- en: There's one other way of creating what are essentially arrays, and this one
    is the easiest to use and is preferred by many programmers—using a vector. Imagine
    that, in any of the previous examples, you were adding new items into an array
    and suddenly ran out of space while the program was running. What would you do?
    You could create a whole new array and copy everything over, but as you might
    guess, that's a lot of extra work and processing. So, what if you had a type of
    array that handled cases like that for you behind the scenes, without you even
    asking?
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一种创建本质上是数组的方式，这种方式是最容易使用的，也是许多程序员首选的方式——使用向量。想象一下，在以前的任何例子中，当你向数组中添加新项时，程序正在运行时突然用完了空间。你会怎么做？你可以创建一个全新的数组，把所有东西都复制过去，但是你可能会猜到，这是很多额外的工作和处理。那么，如果你有一种类型的数组，在幕后为你处理这样的情况，而你甚至都没有要求呢？
- en: 'This is what vectors do. A vector is a member of the Standard Template Library
    (we will get to templates in a couple of chapters, so just be patient), and as
    in other examples that have come up, you can set the type inside angled brackets
    (`<>`). You create a vector like this:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是向量的作用。向量是标准模板库的成员（我们将在接下来的几章中介绍模板，所以请耐心等待），就像其他例子一样，你可以在尖括号（`<>`）内设置类型。你可以像这样创建一个向量：
- en: '[PRE17]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This basically says you are creating a vector of strings, called names. To
    add new items to a vector, you can use the `push_back()` function, like this:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这基本上表示你正在创建一个名为names的字符串向量。要向向量添加新项，可以使用`push_back()`函数，就像这样：
- en: '[PRE18]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This will add the item you pass in to the end of the vector. You can call `push_back()`
    as many times as you want, and whenever the vector runs out of space, it will
    automatically increase its size without you having to do anything! So, you can
    keep adding as many items as you want (within reason, since you could run out
    of memory eventually), without worrying about how the memory is managed.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把你传入的项添加到向量的末尾。你可以调用`push_back()`任意次数，每当向量用完空间时，它都会自动增加大小，而你无需做任何事情！所以，你可以随意添加任意数量的项（在合理范围内，因为最终可能会用完内存），而不必担心内存是如何管理的。
- en: Vectors also add other useful functions, such as `size()`, which tells you how
    many items a vector contains (in a standard array, you have to keep track of this
    yourself).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 向量还添加了其他有用的函数，比如`size()`，它告诉你向量包含多少项（在标准数组中，你必须自己跟踪这一点）。
- en: 'Once you have created a vector, you can treat it just like an array to access
    it with standard `[]` syntax:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你创建了一个向量，你可以像访问标准数组一样对待它，使用`[]`语法来访问：
- en: '[PRE19]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Summary
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter introduced you to C and C++ style arrays and vectors. In most UE4
    code, you will use the UE4 editor built-in collection classes (`TArray<T>`), which
    are similar to vectors. However, you need familiarity with basic C and C++ style
    arrays to be a very good C++ programmer.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 本章向你介绍了C和C++风格的数组和向量。在大多数UE4代码中，你将使用UE4编辑器内置的集合类（`TArray<T>`），它们类似于向量。然而，你需要熟悉基本的C和C++风格的数组，才能成为一个非常优秀的C++程序员。
- en: We've now covered enough basic C++ to move on to UE4 next, with actors and pawns.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经涵盖了足够的基本C++知识，可以继续学习下一个章节，关于UE4的演员和棋子。
