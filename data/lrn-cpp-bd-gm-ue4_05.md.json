["```cpp\n#include <iostream> \n#include <cmath> \nusing namespace std; \nint main() \n{ \n  double rootOf5 = sqrt( 5 ); // function call to the sqrt  \n   function \n  cout << rootOf5  << endl; \n} \n```", "```cpp\ncout << \"*   *\" << endl; \ncout << \"* | *\" << endl; \ncout << \"* | *\" << endl; \ncout << \"*   *\" << endl; \n```", "```cpp\nvoid printRoad() \n{ \n  cout << \"*   *\" << endl; \n  cout << \"* | *\" << endl; \n  cout << \"* | *\" << endl; \n  cout << \"*   *\" << endl; \n} \n```", "```cpp\n#include <iostream> \nusing namespace std; \nvoid printRoad() \n{ \n  cout << \"*   *\" << endl; \n  cout << \"* | *\" << endl; \n  cout << \"* | *\" << endl; \n  cout << \"*   *\" << endl; \n} \nint main() \n{ \n  cout << \"Program begin!\" << endl; \n  printRoad(); \n  cout << \"Program end\" << endl; \n  return 0; \n} \n```", "```cpp\nvoid printRoad() \n{ \n  cout << \"*   *\" << endl;          // 3: then we jump up here \n  cout << \"* | *\" << endl;          // 4: run this \n  cout << \"* | *\" << endl;          // 5: and this \n  cout << \"*   *\" << endl;          // 6: and this \n} \nint main() \n{ \n  cout << \"Program begin!\" << endl; // 1: first line to execute \n  printRoad();                      // 2: second line.. \n  cout << \"Program end\" << endl;    // 7: finally, last line \n  return 0;                         // 8: and return to o/s \n} \n```", "```cpp\nProgram begin! \n*   * \n* | * \n* | * \n*   * \nProgram end \n```", "```cpp\nint main() \n{ \n        printRoad(); \n        printRoad(); \n        printRoad(); \n        printRoad(); \n} \n```", "```cpp\nfor( int i = 0; i < 4; i++ ) \n{\n    printRoad();\n}\n```", "```cpp\n#include <iostream> \nusing namespace std; \nvoid myFunction() \n{ \n   cout << \"You called?\" << endl; \n} \nint main() \n{ \n   cout << \"I'm going to call myFunction now.\" << endl; \n   myFunction; \n} \n```", "```cpp\nvoid printRoad(int numSegments) \n{ \n  // use a for loop to print numSegments road segments \n  for( int i = 0; i < numSegments; i++) \n  { \n    cout << \"*   *\" << endl; \n    cout << \"* | *\" << endl; \n    cout << \"* | *\" << endl; \n    cout << \"*   *\" << endl; \n  } \n} \n```", "```cpp\nprintRoad( 4 );    // function call \n```", "```cpp\ncout << sqrt( 4 ) << endl; \n```", "```cpp\nint sum(int a, int b) \n{ \n  return a + b; \n} \n```", "```cpp\nint sum( int a, int b ) \n{ \n  return a + b; \n} \nint main() \n{ \n  cout << \"The sum of 5 and 6 is \" << sum( 5,6 ) << endl;  \n} \n```", "```cpp\ncout << \"The sum of 5 and 6 is \" << 11 << endl;     \n```", "```cpp\n// function returns true when the magnitude of 'a' \n// is equal to the magnitude of 'b' (absolute value) \nbool absEqual(int a, int b)\n { \n    // to complete this exercise, try to not use \n    // cmath library functions \n}\n```", "```cpp\nbool isPositive( double value ) \n{ \n  return value > 0; \n} \n```", "```cpp\nbool absEqual( int a, int b ) \n{ \n  // Make a and b positive \n  if( a < 0 ) \n  {\n    a = -a;\n  } \n  if( b < 0 ) \n  {\n    b = -b; \n  }\n  // now since they're both +ve, \n  // we just have to compare equality of a and b together \n  return a == b; \n} \n```", "```cpp\nchar getGrade( int grade ) \n{ \n  if( grade >= 90 )\n  { \n    return 'A'; \n  }\n  else if( grade >= 80 ) \n  {\n    return 'B'; \n  }\n  else if( grade >= 70 ) \n  {\n    return 'C'; \n  }\n  else if( grade >= 60 ) \n  {\n    return 'D'; \n  }\n  else \n  {\n    return 'F'; \n  }\n} \n```", "```cpp\ndouble f( double x ) \n{ \n  return 3*x + 4; \n} \n```", "```cpp\n{ 1, 2, 3, 4 }\n```", "```cpp\n#include <initializer_list>\nusing namespace std;\n\nint sum(initializer_list<int> list) {\n    int total = 0;\n    for (int e : list) { // Iterate through the list\n        total += e;\n    }\n\n    return total;\n}\n```", "```cpp\nsum({ 1, 2, 3, 4 });\n```", "```cpp\n#include <iostream> \n#include <string> \nusing namespace std; \n\nstring g_string;             // global string variable, \n// accessible to all functions within the program \n// (because it is declared before any of the functions \n// below!) \n\nvoid addA(){ g_string += \"A\"; } \nvoid addB(){ g_string += \"B\"; } \nvoid addC(){ g_string += \"C\"; } \n\nint main() \n{ \n  addA(); \n  addB(); \n  cout << g_string << endl; \n  addC(); \n  cout << g_string << endl; \n} \n```", "```cpp\nint g_int; // global int, has scope until end of file \nvoid func( int arg ) \n{ \n  int fx; \n} // </fx> dies, </arg> dies \n\nint main() \n{ \n  int x = 0; // variable <x> has scope starting here.. \n         // until the end of main() \n  if( x == 0 ) \n  { \n    int y;  // variable <y> has scope starting here, \n            // until closing brace below \n  } // </y> dies \n  if( int x2 = x ) // variable <x2> created and set equal to <x> \n  { \n    // enter here if x2 was nonzero \n  } // </x2> dies \n\n  for( int c = 0; c < 5; c++ ) // c is created and has \n  { // scope inside the curly braces of the for loop \n    cout << c << endl; \n  } // </c> dies only when we exit the loop \n} // </x> dies \n```", "```cpp\nvoid func( int arg ) \n{ \n  int fx; \n} // </fx> dies, </arg> dies \n```", "```cpp\nfor( int c = 0; c < 5; c++ ) \n{ \n  cout << c << endl; \n} // c dies here \n```", "```cpp\nint c; \nfor( c = 0; c < 5; c++ ) \n{ \n  cout << c << endl; \n} // c does not die here \n```", "```cpp\nvoid testFunc() \n{ \n  static int runCount = 0; // this only runs ONCE, even on \n  // subsequent calls to testFunc()! \n  cout << \"Ran this function \" << ++runCount << \" times\" << endl; \n} // runCount stops being in scope, but does not die here \n\nint main() \n{ \n  testFunc();  // says 1 time \n  testFunc();  // says 2 times! \n} \n```", "```cpp\nRan this function 1 times \nRan this function 2 times \n```", "```cpp\nint runCount = 0; // if declared this way, runCount is local \n```", "```cpp\nRan this function 1 times \nRan this function 1 times \n```", "```cpp\nconst double pi = 3.14159; \n```", "```cpp\npi *= 2; \n```", "```cpp\nerror C3892: 'pi' : you cannot assign to a variable that is const \n```", "```cpp\nint sum(const int x, const int y)\n{\n    return x + y;\n}\n```", "```cpp\nint sum(const int x, const int y)\n{\n    x = x + y; //ERROR!\n    return x;\n}\n```", "```cpp\nconst int returnConst()\n```", "```cpp\nbool isPositive( double value ); \nbool absEqual( int a, int b ); \nchar getGrade( int grade ); \n```", "```cpp\n// Make sure these prototypes are \n// only included in compilation ONCE \n#pragma once \nextern int superglobal; // extern: variable \"prototype\" \n// function prototypes \nbool isPositive( double value ); \nbool absEqual( int a, int b ); \nchar getGrade( int grade ); \n```", "```cpp\n#include \"prototypes.h\" // every file that uses isPositive, \n// absEqual or getGrade must #include \"prototypes.h\" \nint superglobal; // variable \"implementation\" \n// The actual function definitions are here, in the .cpp file \nbool isPositive( double value ) \n{ \n  return value > 0; \n} \nbool absEqual( int a, int b ) \n{ \n  // Make a and b positive \n  if( a < 0 ) \n  {\n    a = -a; \n  }\n  if( b < 0 ) \n  {\n    b = -b; \n  }\n  // now since they're both +ve, \n  // we just have to compare equality of a and b together \n  return a == b; \n} \nchar getGrade( int grade ) \n{ \n  if( grade >= 90 ) \n  {\n    return 'A'; \n  }\n  else if( grade >= 80 ) \n  {\n    return 'B'; \n  }\n  else if( grade >= 70 ) \n  {\n    return 'C'; \n  }\n  else if( grade >= 60 ) \n  {\n    return 'D'; \n  }\n  else \n  {\n    return 'F'; \n  }\n} \n```", "```cpp\n #include <iostream> \nusing namespace std; \n#include \"prototypes.h\" // for use of isPositive, absEqual  \n// functions \nint main() \n{ \n  cout << boolalpha << isPositive( 4 ) << endl; \n  cout << absEqual( 4, -4 ) << endl; \n} \n```", "```cpp\n#define PI 3.14159 \n```", "```cpp\n#include <iostream> \nusing namespace std; \n#define PI 3.14159 \nint main() \n{ \n  double r = 4; \n  cout << \"Circumference is \" << 2*PI*r << endl; \n} \n```", "```cpp\ncout << \"Circumference is \" << 2*PI*r << endl; \n```", "```cpp\ncout << \"Circumference is \" << 2*3.14159*r << endl; \n```", "```cpp\n#define PI 3.14159 \n```", "```cpp\nconst double PI = 3.14159; \n```", "```cpp\n#define println(X) cout << X << endl; \n```", "```cpp\nprintln( \"Hello there\" ) \n```", "```cpp\ncout << \"Hello there\" << endl; \n```", "```cpp\ninline int max( int a, int b ) \n{ \n  if( a > b ) return a; \n  else return b; \n} \n```", "```cpp\n \\\nnewline characters \\\nlike this \\\nwhich is hard to read \\ \n```", "```cpp\nconstexpr float pi = 3.14129f;\n```", "```cpp\nconstexpr int increment(int i)\n{\n    return i + 1;\n}\n```", "```cpp\nif constexpr (kIsDemoVersion) {\n    //use demo version code here\n} else {\n   //use regular version code here\n}\n```"]