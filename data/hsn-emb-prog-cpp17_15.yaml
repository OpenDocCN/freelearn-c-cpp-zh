- en: Best Practices
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最佳实践
- en: 'As with every software project, there are a number of common issues and pitfalls.
    With embedded development, the hardware aspect is added to this, creating a unique
    set of issues. From resource management issues to interrupt troubles and weird
    behavior induced by hardware issues, this appendix shows you how to prevent and
    handle many of these issues. In addition, it shows you a variety of optimization
    approaches and what to be wary of. In this appendix, we''ll cover the following
    topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 与每个软件项目一样，存在许多常见问题和陷阱。在嵌入式开发中，硬件方面增加了独特的问题。从资源管理问题到中断故障和硬件问题引起的奇怪行为，本附录向您展示如何预防和处理许多这些问题。此外，它还向您展示了各种优化方法以及需要注意的事项。在本附录中，我们将涵盖以下主题：
- en: Safe ways to optimize your embedded code
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优化嵌入式代码的安全方法
- en: How to avoid and fix a variety of common software- and hardware-related issues
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何避免和解决各种常见的软件和硬件相关问题
- en: Recognizing the imperfect world of hardware and how to integrate this into your
    design
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 认识到硬件的不完美世界以及如何将其整合到设计中
- en: All the best-laid plans
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 所有最好的计划
- en: As with any project, there's the inevitable divide between the intended design
    and how it functions in reality. Even with the best planning and bountiful experience,
    there will always be unforeseen or unnoticed issues. The best you can do is to
    be as well-prepared as possible.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 与任何项目一样，预期设计与实际功能之间存在不可避免的差距。即使有最好的规划和丰富的经验，也总会有意想不到或未被注意到的问题。您能做的最好的事情就是尽可能做好准备。
- en: The first step is to have access to all of the available information for the
    target platform, understand the tools that are available, and have a solid development
    and testing plan. We ran through many of these aspects in this book already.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是要获得目标平台的所有可用信息，了解可用的工具，并拥有一个坚实的开发和测试计划。我们在本书中已经涵盖了许多这些方面。
- en: In this appendix, we'll summarize a number of best practices that should help
    you avoid some of the more common issues.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本附录中，我们将总结一些最佳实践，这些实践应该有助于避免一些更常见的问题。
- en: Working with the hardware
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与硬件合作
- en: Each target platform has its own quirks and characteristics. Much of this is
    due to the development history of that platform. For a platform such as AVR, it's
    fairly coherent, as it was developed by a single company (Atmel) over many years,
    so it's fairly consistent between different chips and the tools that are used
    for the platform.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 每个目标平台都有其自己的怪癖和特点。其中很大一部分是由于该平台的发展历史。对于AVR这样的平台，它相当一致，因为它是由一家公司（Atmel）在多年内开发的，因此在不同芯片和用于该平台的工具之间相当一致。
- en: A platform such as ESP8266 (and to some extent its ESP32 successor) was never
    designed to be used as a generic MCU system, which shows in its rather sketchy
    and fragmented software ecosystem. Though things have gotten better over the past
    few years, with various frameworks and open source tools smoothing over the roughest
    spots, it's a platform where it's easy to make mistakes due to a lack of documentation,
    issues with tools, and a lack of on-chip debugging.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 像ESP8266（以及在某种程度上其ESP32后继者）这样的平台从未被设计为用作通用MCU系统，这在其相当零碎和分散的软件生态系统中表现出来。尽管在过去几年中情况有所好转，各种框架和开源工具平滑了最粗糙的地方，但由于缺乏文档、工具问题和芯片内调试的缺乏，这是一个容易犯错误的平台。
- en: The ARM MCUs (Cortex-M) are being produced by a wide range of manufacturers
    in a dizzying number of configurations. Though programming these MCUs tends to
    be fairly consistent, using tools such as OpenOCD, the peripherals added to each
    MCU tend to be wildly different between manufacturers, as we will look at in the
    next section.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: ARM MCU（Cortex-M）由众多制造商生产，配置繁多。尽管编程这些MCU往往是相当一致的，使用诸如OpenOCD之类的工具，但每个MCU添加的外设在制造商之间往往大不相同，我们将在下一节中进行讨论。
- en: Finally, ARM SoCs and similar find themselves in a position similar to ARM MCUs,
    but with significantly more complicated architectures and fewer peripherals than
    their MCU brethren. To this, ARM SoCs add a complex initialization routine, requiring
    comprehensive bootloaders, which is why most people opt to use a ready-made Linux
    image or similar for the SoC, and develop for that instead.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，ARM SoCs和类似的平台与ARM MCU类似，但其体系结构更加复杂，外设较少。此外，ARM SoCs还添加了复杂的初始化程序，需要全面的引导加载程序，这就是为什么大多数人选择使用现成的Linux镜像或类似的SoC，并对其进行开发。
- en: Here, there's no real right or wrong answer. Most of it comes down to what works
    for the project, but it's essential that you have a good overview of the hardware
    platforms you work with.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，没有真正的对与错的答案。大部分取决于项目的需求，但重要的是您对所使用的硬件平台有一个良好的概述。
- en: The confusing world of peripherals
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 外设的混乱世界
- en: A highly amusing reality with ARM MCUs is that they have different and often
    incompatible peripherals, mapped to highly different areas in the memory space.
    Worst of all here are timer peripherals, which come in a variety of complexities,
    with them in general being able to generate any desired output signal on a GPIO
    pin, including PWM, as well as work as interrupt-based timers to control the execution
    of the firmware.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: ARM MCU的一个非常有趣的现实是，它们具有不同且通常不兼容的外设，映射到内存空间中高度不同的区域。最糟糕的是定时器外设，其复杂性各不相同，它们通常能够在GPIO引脚上生成任何所需的输出信号，包括PWM，以及作为基于中断的定时器来控制固件的执行。
- en: Configuring timer peripherals and similar complex peripherals isn't for the
    fainthearted. Similarly, using a built-in MAC with an external PHY (Ethernet physical
    interface) requires a lot of in-depth knowledge to know how to configure them.
    Reading the datasheets and application notes is essential here.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 配置定时器外设和类似的复杂外设并不是一件简单的事情。同样，使用内置MAC与外部PHY（以太网物理接口）需要大量深入的知识来了解如何配置它们。阅读数据手册和应用笔记在这里是必不可少的。
- en: Relying on autogenerated code by tools such as ST's CubeMX software for their
    STM32 range of ARM MCUs can lead to you wrestling with non-functional code because
    you forgot to tick a few boxes in CubeMX editor due to not being aware of what
    those options were for.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖诸如ST的CubeMX软件之类的工具生成的代码，用于他们的STM32系列ARM MCU，可能会导致你因为忘记在CubeMX编辑器中勾选一些选项而与非功能性代码搏斗，因为你不知道这些选项是用来做什么的。
- en: There's nothing wrong with using such auto-generating tools, or high-level libraries
    provided by the manufacturer, as they can make life significantly easier. It's
    however crucial to accept the risks that come with this decision, as it requires
    one to trust that the provided code is correct, or to spend time validating that
    it is indeed correct.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种自动生成工具或制造商提供的高级库没有错，因为它们可以显著地简化生活。然而，接受这一决定所带来的风险是至关重要的，因为这需要你相信提供的代码是正确的，或者花时间验证它确实是正确的。
- en: To make the use of peripherals across different MCUs and SoCs less confusing,
    one has to add a level of abstraction somewhere to allow for portability of the
    code. The key is to ensure that this does indeed make life easier and not just
    add another potential issue that may derail the current project or a future project.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使不同MCU和SoC上的外设使用不那么混乱，必须在某个地方添加一层抽象，以便实现代码的可移植性。关键是确保这确实会让生活变得更容易，而不仅仅是增加可能会使当前项目或未来项目受挫的另一个潜在问题。
- en: Knowing your tools
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解你的工具
- en: While working on an embedded project, you have to know which tools exist for
    the target platform and how they work. This ranges from programming an MCU via
    JTAG or other interface and starting a debugging session for on-chip debugging,
    to the limitations of on-chip debugging. It pays to read the manual or documentation
    for a tool before using it and doing some reading up on the experiences of other
    developers with these tools.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在嵌入式项目中工作时，你必须知道目标平台上存在哪些工具以及它们的工作原理。这包括通过JTAG或其他接口对MCU进行编程，并启动用于片上调试的调试会话，以及片上调试的限制。在使用工具之前，最好先阅读工具的手册或文档，并阅读其他开发人员对这些工具的经验。
- en: We looked at a number of these tools in previous chapters, both for MCU and
    SoC platforms, along with ways to validate an MCU design before even flashing
    it on the target hardware.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在之前的章节中看过许多这样的工具，包括MCU和SoC平台，以及在将其刷入目标硬件之前验证MCU设计的方法。
- en: Choosing asynchronous methods
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择异步方法
- en: Many hardware devices and operations take time to finish. It therefore makes
    sense to choose asynchronous actions using interrupts and timers instead of blocking
    operations.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 许多硬件设备和操作需要时间来完成。因此，选择使用中断和定时器进行异步操作而不是阻塞操作是有意义的。
- en: When doing bare-metal programming, you'll tend to use a single loop with interrupt
    routines and timers that allow you to respond to and poll for events. If programmed
    in a fully asynchronous manner, this main loop will efficiently work through the
    tasks while the interrupt handlers update the data that has to be processed.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行裸机编程时，你往往会使用一个单独的循环，其中包含中断例程和定时器，允许你响应和轮询事件。如果以完全异步的方式编程，这个主循环将有效地处理任务，而中断处理程序将更新需要处理的数据。
- en: Even on SoC platforms, the use of asynchronous methods is a good idea, as things
    such as network operations and other I/O operations may take longer than desirable.
    Having ways to deal with operations not completing is another issue that pops
    up.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在SoC平台上，使用异步方法也是一个好主意，因为诸如网络操作和其他I/O操作之类的事情可能需要比预期更长的时间。处理操作未完成的方法是另一个可能出现的问题。
- en: Reading the datasheet
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 阅读数据表
- en: Especially for MCUs, the datasheet gives us a lot of valuable information about
    how the hardware works, such as how to configure the internal system clock, how
    individual peripherals work, and available registers and their meaning.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是对于MCU，数据表为我们提供了关于硬件工作方式的许多宝贵信息，例如如何配置内部系统时钟，各个外设的工作方式，以及可用的寄存器及其含义。
- en: Even if you use an existing board instead of a custom hardware system, it pays
    to understand the underlying hardware, even if it's from a cursory read of the
    MCU or SoC datasheet.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你使用的是现有的板而不是自定义硬件系统，了解底层硬件也是值得的，即使只是从对MCU或SoC数据表的粗略阅读中。
- en: Keeping interrupt handlers short
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保持中断处理程序的简短
- en: The very nature of an interrupt dictates that it interrupts the regular execution
    of the processor, switching to the interrupt handler instead. Any microsecond
    that we spend in the interrupt handler code is a microsecond during which we aren't
    running the other routines or handling other interrupts.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 中断的本质决定了它会打断处理器的正常执行，转而执行中断处理程序。我们在中断处理程序中花费的每一微秒都意味着我们无法运行其他例程或处理其他中断。
- en: To prevent any issues arising from this, interrupt handlers (ISRs) should be
    kept as short as possible, ideally merely updating a single value in a quick and
    safe manner before ending the ISR and resuming normal operation.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止由此产生的任何问题，中断处理程序(ISR)应尽可能保持简短，最好只是在结束ISR并恢复正常操作之前以快速和安全的方式更新单个值。
- en: 8-bit means 8 bits
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 8位意味着8位
- en: Not surprisingly, the use of 16-bit and 32-bit integers on 8-bit MCUs is pretty
    slow. This is because the system has to perform multiple operations on the same
    integer value, as it can only fit 8 bits into its registers at a time.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 毫不奇怪，在8位MCU上使用16位和32位整数非常慢。这是因为系统必须对相同的整数值执行多次操作，因为它一次只能将8位装入其寄存器。
- en: Similarly, the use of floating-point variables on a system without a floating-point
    unit (FPU) means that such operations are highly suitable for slowing a system
    down to a crawl as the integer-only processor struggles to keep up with a flow
    of instructions aimed at simulating floating-point operations.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，对于没有浮点单元(FPU)的系统使用浮点变量意味着这样的操作非常适合使系统变得非常缓慢，因为只有整数处理器在努力跟上旨在模拟浮点操作的指令流。
- en: Don't reinvent the wheel
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不要重复造轮子
- en: If a library or framework exists that's of a good quality and available for
    your target platform and project license, use it instead of writing your own implementation.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果存在一个质量良好且适用于目标平台和项目许可的库或框架，那么使用它而不是编写自己的实现。
- en: Keep a library of commonly used snippets and examples as a reference-not only
    for yourself, but also for other team members. It's easier to remember where you
    can find an example of a feature than it is to remember the exact implementation
    details of that feature.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 保留一个常用片段和示例的库作为参考，不仅是为了自己，也是为了其他团队成员。记住可以找到某个功能示例的地方比记住该功能的确切实现细节更容易。
- en: Think before you optimize
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在优化之前三思
- en: The trick to optimizing code is that you should never attempt to do this without
    having a full understanding of what the change you're proposing will affect. Just
    having a feeling or a vague idea of how it might be a good idea isn't good enough.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 优化代码的诀窍在于，在没有充分了解你提出的改变会产生什么影响的情况下，你不应该尝试这样做。仅仅有一种感觉或模糊的想法可能不够好。
- en: While SoC-based platforms with a full OS tend to give you a bit more leeway,
    for MCU platforms, it's essential that you understand what the addition of a single
    keyword or use of a different data structure to store some information will mean.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然基于SoC的平台通常会给你更多的余地，但对于MCU平台来说，了解添加一个关键字或使用不同的数据结构来存储一些信息将意味着什么是至关重要的。
- en: The worst thing to do here is to assume that optimizations that you've used
    on SBCs and desktop systems will have a similar effect on an MCU platform. Due
    to the modified Harvard architecture and various quirks of platforms such as AVR,
    these are most likely to backfire or, if you're lucky, just be ineffective.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里最糟糕的事情是假设你在SBC和台式系统上使用的优化方法会对MCU平台产生类似的效果。由于修改后的哈佛架构和AVR等平台的各种怪癖，这些方法很可能会适得其反，或者幸运的话，只是无效。
- en: Here, the application notes provided for the (MCU) platform are useful to understand
    how the hardware can be optimized. The take-away message here is to do your research
    before making optimizations, just as one doesn't just start writing code without
    considering the project design.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，为（MCU）平台提供的应用程序说明对于了解如何优化硬件非常有用。这里的要点是在进行优化之前进行研究，就像在考虑项目设计之前不会只是开始编写代码一样。
- en: Requirements are not optional
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 需求不是可选的
- en: Writing embedded software without having a firm set of requirements for the
    project is like starting to build a new house without a clear idea of how many
    rooms it should have, where the windows and doors should be, and where the plumbing
    and wiring should run.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在没有为项目制定明确的需求的情况下编写嵌入式软件，就好像开始建造新房子却不清楚应该有多少个房间，窗户和门应该在哪里，以及管道和电线应该走在哪里。
- en: While you can totally start writing working code and hammer out a functioning
    prototype in no time, the reality is that these prototypes are usually put into
    production without having had time to fully consider the life cycle of the product,
    or those who will have to keep patching up the firmware over the coming years
    to add features that the original firmware code was never designed for.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然你完全可以开始编写可工作的代码，并在短时间内制作出一个功能原型，但现实是，这些原型通常会在没有充分考虑产品生命周期或那些将不得不在未来几年内不断修补固件以添加原始固件代码从未设计的功能的时间内投入生产。
- en: After completing the requirements that the product has to fulfill, these are
    then translated into an architecture (the overall structure of the application),
    which is then translated into a design (what will be implemented). The design
    is then translated into the actual code.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 完成产品需满足的需求后，这些需求被转化为架构（应用程序的整体结构），然后转化为设计（将要实现的内容）。设计然后被转化为实际的代码。
- en: The advantages of this approach are that not only do you need to answer a lot
    of questions about *why* something is done a particular way, it also generates
    a lot of documentation, which can then be used practically as is once the project
    is completed.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的优势在于，不仅需要回答很多关于为什么以某种特定方式完成某事的问题，而且还会产生大量文档，一旦项目完成，这些文档就可以实际使用。
- en: Additionally, in an embedded project having the full set of requirements can
    save a lot of money and time as it allows one to pick the right MCU or SoC for
    the project without having to spend more money on a more powerful than needed
    chip 'just in case'. It also prevents embarrassing mid-project discoveries where
    a feature which had been 'forgotten' about suddenly necessitates a change in the
    hardware design.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在嵌入式项目中，具备完整的需求集可以节省大量时间和金钱，因为它可以让人们在不必为了“以防万一”而在更强大的芯片上花费更多金钱，而是可以为项目选择合适的MCU或SoC。它还可以防止尴尬的中期发现，即“遗忘”的功能突然需要改变硬件设计。
- en: Documentation saves lives
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文档能拯救生命
- en: It's become somewhat of a running joke that programmers don't like to write
    documentation and thus refer to the code that they've written as *self-documenting
    code*. The reality is that without clear documentation of the design requirements,
    architecture overview, design plans, and with the API documentation, you risk
    the future of the project and both one's fellow developers and the end-users who
    rely on the software to function.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 程序员不喜欢编写文档，因此他们称自己编写的代码为“自我说明的代码”，这已经成为了一个笑话。事实是，如果没有清晰的设计需求、架构概述、设计计划和API文档，你就会冒着项目的未来以及依赖软件运行的其他开发人员和最终用户的风险。
- en: Following procedures and doing all the boring paperwork before you can start
    writing the first line of code may seem like a complete killjoy. Unfortunately,
    the reality is that, without this effort, this knowledge will remain locked in
    the heads of the project's developers, which complicates the integration of the
    firmware into the rest of an embedded project and makes future maintenance, especially
    if moved to a different team, a daunting prospect.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在你开始编写第一行代码之前，按照程序进行所有无聊的文书工作似乎是完全令人沮丧的。不幸的是，现实情况是，如果没有这种努力，这些知识将继续锁在项目开发人员的头脑中，这会使固件集成到嵌入式项目的其余部分变得复杂，并且使未来的维护，特别是如果转移到不同的团队，成为一个艰巨的前景。
- en: The simple fact is that no code is self-documenting, and even if it were, no
    hardware engineer is going to go through thousands of lines of code to figure
    out what kind of signal is being put out on a specific GPIO pin when a particular
    input condition for the MCU occurs.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 事实很简单，没有代码是自我说明的，即使是这样，也没有硬件工程师会浏览成千上万行的代码，以弄清在特定的输入条件下在特定的GPIO引脚上输出了什么样的信号。
- en: Testing code means trying to destroy it
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试代码意味着试图摧毁它
- en: A common mistake when writing tests is to write test scenarios that you expect
    will work. That's missing the point. While it's wonderful that a particular parsing
    routine did what it should do when it's handed perfectly formatted data, that's
    not very helpful in a real-life scenario.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 编写测试时的一个常见错误是编写你期望能够正常工作的测试场景。这样做是错过了重点。虽然当一个特定的解析例程在处理完美格式的数据时做到了它应该做的事情是很美妙的，但在现实场景中并没有多大帮助。
- en: While you can get perfect data, it's equally likely that you'll get completely
    corrupted or even garbage data in your code. The goal is to ensure that no matter
    what horrible things you do to the input data, it will never have a negative effect
    on the rest of the system.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然你可能会得到完美的数据，但同样有可能在你的代码中得到完全损坏甚至垃圾数据。目标是确保无论你对输入数据做了多么可怕的事情，它都不会对系统的其余部分产生负面影响。
- en: All input should be validated and sanity checked. If something doesn't seem
    right, it should be rejected rather than you allowing it to cause issues elsewhere
    in the code later on.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 所有输入都应该经过验证和检查。如果有什么不对劲，就应该拒绝，而不是允许它在以后的代码中引起问题。
- en: Summary
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this appendix, we ran through a number of common issues and pitfalls that
    are likely to occur when working on an embedded software design.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个附录中，我们列举了在嵌入式软件设计中可能出现的一些常见问题和陷阱。
- en: The reader should now know what phases exist in projects, along with the reasons
    behind documenting every step of the project.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 读者现在应该知道项目中存在哪些阶段，以及在项目的每一步都有记录的原因。
