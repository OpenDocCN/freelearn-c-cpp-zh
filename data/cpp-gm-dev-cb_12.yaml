- en: Chapter 12. Audio in Game Development
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第12章 游戏开发中的音频
- en: 'In this chapter, the following recipes are covered:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，将介绍以下教程：
- en: Installing FMOD
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装FMOD
- en: Adding background music
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加背景音乐
- en: Adding sound effects
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加音效
- en: Creating a sound effect manager
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建音效管理器
- en: Dealing with multiple sound file names
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理多个音频文件名
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: One of the most important aspects in games development is audio programming.
    However, it is, strangely, one of the most neglected and underrated sections of
    games development as well. To understand the impact of audio in games, try playing
    a game such as *Counter-Strike* or *Quake* with sounds and then try playing the
    games without sound. It has a huge impact. Audio programming, if not done correctly,
    can lead to games crashing and lots of other problems.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏开发中最重要的方面之一是音频编程。然而，令人奇怪的是，它也是游戏开发中最被忽视和低估的部分之一。要理解音频在游戏中的影响，可以尝试玩一款带有声音的游戏，比如*反恐精英*或*雷神*，然后再尝试没有声音的游戏。这会产生巨大的影响。如果音频编程没有正确完成，可能会导致游戏崩溃和许多其他问题。
- en: Therefore, it is very important to learn the correct way to do audio programming.
    Most engines will have a built-in sound component. For others, we need to add
    the audio component. In this chapter, we will have a look at one of the most popular
    sound engines. We will also have a look at how to integrate SDL into our C++ code,
    in order to play audio and sound effects.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，学习正确的音频编程方式非常重要。大多数引擎都会有内置的声音组件。对于其他引擎，我们需要添加音频组件。在本章中，我们将介绍最流行的声音引擎之一。我们还将看看如何将SDL集成到我们的C++代码中，以播放音频和音效。
- en: Installing FMOD
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装FMOD
- en: The first thing to get started with is to install FMOD. This is one of the most
    popular audio engines and used in almost all modern game engines. It can also
    be added to any game engine of your choice. The other popular audio engine is
    called **Wwise**. This is used to integrate the audio for console programming,
    such as on the PS4.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 开始的第一件事是安装FMOD。这是最流行的音频引擎之一，几乎所有现代游戏引擎都在使用。它也可以添加到您选择的任何游戏引擎中。另一个流行的音频引擎叫做**Wwise**。这用于集成控制台编程的音频，例如在PS4上。
- en: Getting ready
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To work through this recipe, you will need a machine running Windows.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本教程，您需要一台运行Windows的计算机。
- en: How to do it…
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作方法…
- en: 'In this recipe, we will see the different types of source control available
    to us:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将看到不同类型的源控制可用于我们：
- en: Go to [http://www.fmod.org/](http://www.fmod.org/).
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问[http://www.fmod.org/](http://www.fmod.org/)。
- en: To download FMOD, go to [http://www.fmod.org/download/](http://www.fmod.org/download/).
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要下载FMOD，请访问[http://www.fmod.org/download/](http://www.fmod.org/download/)。
- en: There is one authoring tool to edit the audio files.However, we should be downloading
    the FMOD Studio Programmer API and the Low Level Programmer API.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个编辑音频文件的创作工具。但是，我们应该下载FMOD Studio程序员API和低级程序员API。
- en: It also has plugins for all modern engine such as Cocos2d-x, Unreal Engine,
    and Unity3D.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 它还为所有现代引擎提供插件，如Cocos2d-x、Unreal Engine和Unity3D。
- en: How it works…
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: FMOD is a low-level API, so it provides callbacks that help us to use the interface
    of FMOD to play sounds, pause sounds, and do a whole lot of other things. Because
    we have the source files, we can build the libraries and also use it in our own
    engine. FMOD also provides an API for Unity3D, which means that the code is also
    exposed to C#, making it easier to work with in Unity3D.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: FMOD是一个低级API，因此它提供了回调，帮助我们使用FMOD的接口来播放声音，暂停声音，以及执行许多其他操作。因为我们有源文件，我们可以构建库并在我们自己的引擎中使用它。FMOD还为Unity3D提供了API，这意味着代码也暴露给C#，使其在Unity3D中更容易使用。
- en: Adding background music
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加背景音乐
- en: Any game would be incomplete if it did not have any background music. So it
    is very important that we integrate a way to play music into our C++ engine. There
    are various ways to do this. We are going to use SDL to play music in our game.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果游戏没有背景音乐，就会显得不完整。因此，非常重要的是我们将播放音乐的方式集成到我们的C++引擎中。有各种各样的方法可以做到这一点。我们将使用SDL在游戏中播放音乐。
- en: Getting ready
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You need a Windows machine and a working copy of Visual Studio. The SDL library
    is also required.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要一台运行Windows的计算机和一个可用的Visual Studio副本。还需要SDL库。
- en: How to do it…
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作方法…
- en: 'In this recipe, we will find out how easy it is to play background music:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将了解播放背景音乐有多容易：
- en: Add a source file called `Source.cpp`.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`Source.cpp`的源文件。
- en: 'Add the following code to it:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到其中：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How it works…
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: In this example, we are playing background music for our game. We need to create
    an interface as a wrapper to the existing SDL audio library. Interfaces are also
    good at providing a skeleton architecture that a base class can derive from in
    the future. We require `SDLAudioDevice`, which is the main handler object for
    playing the music. On top of that, we create a pointer to an audio data object,
    which creates audio from the file path provided. The device handler object has
    a built-in function called `CreateAudioFromFile` to help us with this process.
    Finally, we have an audio context class, which has functions to play, pause, and
    stop the audio. Each of the functions takes an audio object as a reference, which
    is used to perform the action on our audio file.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们正在为我们的游戏播放背景音乐。我们需要创建一个接口作为现有SDL音频库的包装器。接口还可以提供一个基类以便将来派生。我们需要`SDLAudioDevice`，这是播放音乐的主处理对象。除此之外，我们还创建了一个指向音频数据对象的指针，它可以从提供的文件路径创建音频。设备处理对象有一个内置函数叫做`CreateAudioFromFile`，可以帮助我们完成这个过程。最后，我们有一个音频上下文类，它有播放、暂停和停止音频的功能。每个函数都以音频对象作为引用，用于对我们的音频文件执行操作。
- en: Adding sound effects
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加音效
- en: Sound effects are a neat way of adding some sense of tension or achievement
    to the game. Playing, pausing, and stopping sound effects all work in the same
    way that we used for background music, which we saw in the previous recipe. However,
    we can add some variety to the sound files by controlling their position, volume,
    and pitch.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 音效是向游戏添加一些紧张感或成就感的好方法。播放、暂停和停止音效的操作方式与我们在上一个示例中看到的背景音乐相同。然而，我们可以通过控制它们的位置、音量和音调来为声音文件增加一些变化。
- en: Getting ready
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You need to have a working Windows machine.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要一台正常工作的Windows机器。
- en: How to do it…
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Add a source file called `Source.cpp` and add the following code to it:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 添加一个名为`Source.cpp`的源文件，并将以下代码添加到其中：
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How it works…
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: In this example, we are only looking at that part of the game that involves
    modifying the pitch, volume, and position of the sound file. These three things
    can be considered to be the attributes of the sound file, but there are other
    attributes as well. Therefore, the first thing to do would be to create a structure.
    The structure is used to store all the attributes of the sound. All we need to
    do is populate the structure with values as and when we want them. Finally, we
    create an audio object and pass in the `SampleInfo` struct as one of the parameters
    of the object. The constructor then initializes the sound to have these properties.
    Because we attached the properties to the object, it means we can also manipulate
    them at runtime and lower the volume dynamically if required. The pitch and other
    properties could also be manipulated in the same way.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们只关注游戏中涉及修改声音文件音调、音量和位置的部分。这三个属性可以被视为声音文件的属性，但还有其他属性。因此，首先要做的是创建一个结构。结构用于存储声音的所有属性。我们只需要在需要时填充结构的值。最后，我们创建一个音频对象，并将`SampleInfo`结构作为对象的参数之一传递进去。构造函数然后初始化声音具有这些属性。因为我们将属性附加到对象上，这意味着我们也可以在运行时操纵它们，并在需要时动态降低音量。音调和其他属性也可以以同样的方式进行操纵。
- en: Creating a sound effect manager
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建音效管理器
- en: Although not one of the best practices out there, one of the most common methods
    for handling audio is to create a manager class. The manager class should ensure
    that there is only one audio component in the whole game, which controls which
    sound is to be played, paused, looped, and so on. Although there are other ways
    of writing the manager class, this is the most standard practice.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管不是最佳实践之一，但处理音频的最常见方法之一是创建一个管理器类。管理器类应确保整个游戏中只有一个音频组件，控制要播放、暂停、循环等哪种声音。虽然有其他编写管理器类的方法，但这是最标准的做法。
- en: Getting ready
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, you will need a Windows machine and Visual Studio.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，你需要一台Windows机器和Visual Studio。
- en: How to do it…
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'In this recipe, we will find out how easy it is to add sound effect manager
    using the following snippet:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将了解如何使用以下代码片段轻松添加音效管理器：
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How it works…
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: In this example, we have written a singleton class to implement the audio manager.
    The singleton class has all the necessary `sdl` headers and other device and context
    objects required to play the sounds. All these are private, so they cannot be
    accessed from other classes. We also made a static pointer to the class and made
    the constructor private as well. If we need an instance of this audio manager,
    we have to use the static `GlobalAudioClass *instance()` function. This function
    automatically checks whether there is an instance already created, then it returns
    that instance, or it creates a new one. Hence, only one instance of the manager
    class exists at all times. We can also use the manager to set and get data for
    the sound file, for example by setting the path of the sound file.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们编写了一个单例类来实现音频管理器。单例类具有所有必要的`sdl`头文件和其他播放声音所需的设备和上下文对象。所有这些都是私有的，因此无法从其他类中访问。我们还创建了一个指向该类的静态指针，并将构造函数也设为私有。如果我们需要这个音频管理器的实例，我们必须使用静态的`GlobalAudioClass
    *instance()`函数。该函数会自动检查是否已经创建了一个实例，然后返回该实例，或者创建一个新的实例。因此，管理器类始终只存在一个实例。我们还可以使用管理器来设置和获取声音文件的数据，例如设置声音文件的路径。
- en: Dealing with multiple sound file names
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理多个声音文件名称
- en: In games, there will not be one sound file, but multiple sound files that we
    will have to deal with. Each will have a different name, type, and location. So
    it is not a wise move to define all of them separately. It will work, but it will
    be very messy coding if we have over 20 sound effects in our game, so there is
    a need for a slight improvement to the code.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在游戏中，不会只有一个声音文件，而是多个声音文件需要处理。每个文件都有不同的名称、类型和位置。因此，单独定义所有这些并不明智。虽然这样做可以工作，但如果游戏中有超过20个音效，那么编码将会非常混乱，因此需要对代码进行轻微改进。
- en: Getting ready
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, you will need a Windows machine and an installed version of
    an SVN client. A versioned project is also necessary.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，你需要一台Windows机器和安装了SVN客户端的版本化项目。
- en: How to do it…
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'In this recipe, you will see how easy it is to deal with multiple sound file
    names. All you have to do is add a source file called `Source.cpp`. Add the following
    code to it:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，你将看到处理多个声音文件名称有多么容易。你只需要添加一个名为`Source.cpp`的源文件。将以下代码添加到其中：
- en: '[PRE3]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How it works…
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: In this example, we have created an audio data handler class. The class has
    `enum`, which stores all the logical names of the sounds, for example `battle_music`,
    `background_music`, and so on. We also have a string array, which stores the actual
    names of the sound files. The order is important and it has to match the order
    in which we have written `enum`. Now that this `enum` is created, we can create
    an object of this class and set and get the audio filename. The `enum` is stored
    as integers and starts at `0` by default, and the names serve as an index for
    the string array. So `Files[AudioDataHandler::Background]` is actually `Files[1]`,
    which is `Hello.wav`, and so the correct file will be played. This is a very neat
    way of organizing audio data files. The other way to handle audio in games is
    to have the names of the audio files and the attributes of their location in an
    XML or JSON file, and have a reader which parses this information and then fills
    up the array in the same way as we are doing. That way, the code is extremely
    data driven because the designer or the audio engineer can just change the values
    of the XML or the JSON file, without having to make any changes to the code.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们创建了一个音频数据处理类。该类有一个`enum`，其中存储了所有声音的逻辑名称，例如`battle_music`，`background_music`等。我们还有一个字符串数组，其中存储了声音文件的实际名称。顺序很重要，它必须与我们编写的`enum`的顺序相匹配。现在这个`enum`被创建了，我们可以创建这个类的对象，并设置和获取音频文件名。`enum`被存储为整数，并默认从`0`开始，名称作为字符串数组的索引。所以`Files[AudioDataHandler::Background]`实际上是`Files[1]`，即`Hello.wav`，因此将播放正确的文件。这是一种非常整洁的组织音频数据文件的方式。在游戏中处理音频的另一种方式是在XML或JSON文件中具有音频文件的名称和其位置的属性，并有一个读取器解析这些信息，然后以与我们相同的方式填充数组。这样，代码就变得非常数据驱动，因为设计师或音频工程师可以只更改XML或JSON文件的值，而无需对代码进行任何更改。
