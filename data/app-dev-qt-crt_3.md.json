["```cpp\nclass Counter\n{\npublic:\n  Counter() { m_value = 0; }\n  int value() const { return m_value; }\n  void setValue(int value);\n\nprivate:\n  int m_value;\n };\n```", "```cpp\n#include <QObject>\n\nclass Counter : public QObject\n{\n  Q_OBJECT\n\npublic:\n  Counter() { m_value = 0; }\n\n  int value() const { return m_value; }\n\n   public slots:\n  void setValue(int value);\n  void increment();\n  void decrement();\n\nsignals:\n  void valueChanged(int newValue);\n\nprivate:\n  int m_value;\n};\n```", "```cpp\nvoid Counter::setValue(int newValue)\n{\n  if (newValue != m_value) {\n      m_value = newValue;\n      emit valueChanged(newValue);\n  }\n}\n\nvoid Counter::increment()\n{\n  setValue(value() + 1);\n}\n\nvoid Counter::decrement()\n{\n  setValue(value() \u2013 1);\n}\n```", "```cpp\nQPushButton* button = new QPushButton(tr(\"Increment\"), this);\nCounter* counter = new Counter(this);\nQObject::connect(button, SIGNAL(clicked(void)),\n                 Counter, SLOT(increment(void));\n```", "```cpp\nCounter a, b;\nQObject::connect(&a, SIGNAL(valueChanged(int)),\n                 &b, SLOT(setValue(int)));\n```", "```cpp\nQFile file(\":/data/myfile.txt\");\nfile.open(QIODevice::ReadOnly | QIODevice::Text);\n\nwhile (!file.atEnd()) {\n  QByteArray line = file.readLine();\n  process_line(line);\n}\n```", "```cpp\n#ifndef MAINWINDOW_H\n#define MAINWINDOW_H\n\n#include <QMainWindow>\n\nnamespace Ui {\n  class MainWindow;\n}\n\nclass ResultDialog;\n\nclass MainWindow : public QMainWindow\n{\n    Q_OBJECT\n\npublic:\n    explicit MainWindow(QWidget *parent = 0);\n    ~MainWindow();\n\nprivate:\n    Ui::MainWindow *ui;\n};\n\n#endif // MAINWINDOW_H\n\n// In mainwindow.cpp:\n#include \"mainwindow.h\"\n\n// mainwindow.cpp\n#include \"ui_mainwindow.h\"\n\nMainWindow::MainWindow(QWidget *parent) :\n    QMainWindow(parent),\n    ui(new Ui::MainWindow),\n{\n    ui->setupUi(this);\n}\n```", "```cpp\n    class MainWindow : public QMainWindow\n    {\n        Q_OBJECT\n\n    public:\n        explicit MainWindow(QWidget *parent = 0);\n        ~MainWindow();\n\n    public slots:\n        void aboutClicked();\n\n    private:\n        Ui::MainWindow *ui;\n    };\n    ```", "```cpp\n    void MainWindow::aboutClicked()\n    {\n        QMessageBox messageBox;\n        messageBox.setIconPixmap(QPixmap(\":/icon.png\"));\n        messageBox.setText(\"Lorem ipsum.\");\n        messageBox.setWindowTitle(\"About\");\n        messageBox.exec();\n    }\n    ```", "```cpp\n    #include <QMessageBox>\n    ```", "```cpp\n    MainWindow::MainWindow(QWidget *parent) :\n        QMainWindow(parent),\n        ui(new Ui::MainWindow),\n        results(0)\n    {\n        ui->setupUi(this);\n        QObject::connect(ui->aboutButton, SIGNAL(clicked()),\n                         this, SLOT(aboutClicked()));\n    }\n    ```", "```cpp\n#ifndef RESULTDIALOG_H\n#define RESULTDIALOG_H\n\n#include <QDialog>\n\nnamespace Ui {\n    class Dialog;\n}\n\nclass ResultDialog : public QDialog\n{\n    Q_OBJECT\npublic:\n    explicit ResultDialog(QWidget *parent = 0);\n    ~ResultDialog();\nprivate:\n    Ui::Dialog *ui;\n\n};\n\n#endif // RESULTDIALOG_H\n```", "```cpp\n#include \"resultdialog.h\"\n#include \"ui_resultdialog.h\"\n\nResultDialog::ResultDialog(QWidget *parent) :\n    QDialog(parent),\n    ui(new Ui::Dialog)\n{\n    ui->setupUi(this);\n\n}\n\nResultDialog::~ResultDialog()\n{\n    delete ui;\n}\n```", "```cpp\nvoid ResultDialog::setResult(float r)\n{\n    ui->result->setText(QString::number(r));\n}\n```", "```cpp\n#ifndef MAINWINDOW_H\n#define MAINWINDOW_H\n\n#include <QMainWindow>\n#include <QPair>\n\nnamespace Ui {\n    class MainWindow;\n}\n\nclass ResultDialog;\n\nclass MainWindow : public QMainWindow\n{\n    Q_OBJECT\n\n    typedef QPair<float, float> Arguments;\n\npublic:\n    explicit MainWindow(QWidget *parent = 0);\n    ~MainWindow();\n\n    Arguments arguments();\n\nsignals:\n    void computed(float f);\n\npublic slots:\n    void aboutClicked();\n    void plusClicked();\n    void minusClicked();\n    void timesClicked();\n    void divideClicked();\n\n    void showResult(float r);\nprivate:\n    Ui::MainWindow *ui;\n    ResultDialog* results;\n};\n\n#endif // MAINWINDOW_H\n```", "```cpp\nMainWindow::MainWindow(QWidget *parent) :\n    QMainWindow(parent),\n    ui(new Ui::MainWindow),\n    results(0)\n{\n    ui->setupUi(this);\n    QObject::connect(ui->aboutButton, SIGNAL(clicked()),\n                     this, SLOT(aboutClicked()));\n    QObject::connect(this, SIGNAL(computed(float)),\n                     this, SLOT(showResult(float)));\n    QObject::connect(ui->plusButton, SIGNAL(clicked()),\n                     this, SLOT(plusClicked()));\n    QObject::connect(ui->minusButton, SIGNAL(clicked()),\n                     this, SLOT(minusClicked()));\n    QObject::connect(ui->timesButton, SIGNAL(clicked()),\n                     this, SLOT(timesClicked()));\n    QObject::connect(ui->divdeButton, SIGNAL(clicked()),\n                     this, SLOT(divideClicked()));\n}\n```", "```cpp\nvoid MainWindow::showResult(float r)\n{\n    if (!results)\n    {\n        results = new ResultDialog();\n    }\n    results->setResult(r);\n    results->exec();\n}\n```", "```cpp\nMainWindow::Arguments MainWindow::arguments()\n{\n    bool ok1, ok2;\n    float a1 = ui->argument1Input->text().toFloat(&ok1);\n    float a2 = ui->argument2Input->text().toFloat(&ok2);\n    if (!ok1 || !ok2)\n    {\n        QMessageBox messageBox;\n        messageBox.setIconPixmap(QPixmap(\":/icon.png\"));\n        messageBox.setText(\"One of your entries is not a validnumber.\");\n        messageBox.setWindowTitle(\"Error\");\n        messageBox.exec();\n    }\n    return Arguments(a1, a2);\n}\n```", "```cpp\nvoid MainWindow::plusClicked()\n{\n    Arguments a = arguments();\n    emit computed(a.first + a.second);\n}\n```", "```cpp\nQRect r(0, 0, 16, 16);\nQPainter p;\np.setBrush(QBrush(Qt::blue));\np.drawRect(r);\n```", "```cpp\nimport QtQuick 2.0\nRectangle {\n    width: 16\n    height: 16\n    color: \"blue\"\n}\n```", "```cpp\nimport QtQuick 2.0\nimport \"calculatorLogic.js\" as CalculatorLogic\nItem {\n  // someplace in code\n  CalculatorLogic.add(argument1, argument2);\n}\n```", "```cpp\nimport QtQuick 2.0\n\nRectangle {\n    id: button\n    width: 64\n    height: 64\n\n    property alias operation: buttonText.text\n    signal clicked\n\n    color: \"green\"\n\n    Rectangle {\n        id: shade\n        anchors.fill: button;\n        color: \"black\"; opacity: 0\n    }\n\n    Text {\n        id: buttonText\n        anchors.centerIn: parent;\n        color: \"white\"\n        font.pointSize: 16\n    }\n\n    MouseArea {\n        id: mouseArea\n        anchors.fill: parent\n        onClicked: {\n            button.clicked();\n        }\n    }\n\n    states: State {\n        name: \"pressed\"; when: mouseArea.pressed == true\n        PropertyChanges { target: shade; opacity: .4 }\n    }\n}\n```", "```cpp\nimport QtQuick 2.0\n\nRectangle {\n    width: 360\n    height: 200\n    color: \"grey\"\n\n    TextInput {\n        id: argument1\n        anchors.left: parent.left\n        width: 160\n        anchors.top: parent.top\n        anchors.topMargin: 10\n        anchors.leftMargin: 10\n        anchors.rightMargin: 10\n        text: \"2\"\n        font.pointSize: 18\n    }\n\n    TextInput {\n        id: argument2\n        anchors.right: parent.right\n        width: 160\n        anchors.top: parent.top\n        anchors.topMargin: 10\n        anchors.leftMargin: 10\n        anchors.rightMargin: 10\n        text: \"2\"\n        font.pointSize: 18\n    }\n\n    Text {\n        id: result\n        anchors.left: parent.left\n        anchors.right: parent.right\n        anchors.top: argument2.bottom\n        anchors.topMargin: 10\n        anchors.leftMargin: 10\n        anchors.rightMargin: 10\n        text: \"4\"\n        font.pointSize: 24\n    }\n\n    Row {\n        id: buttonRow\n        anchors.bottom: parent.bottom\n        anchors.horizontalCenter: parent\n        anchors.bottomMargin: 20\n        spacing: 20\n        Button {\n            id: plusButton\n            operation: \"+\"\n            onClicked: result.text =\n              parseFloat(argument1.text) + parseFloat(argument2.text)\n        }\n\n        Button {\n            id: minusButton\n            operation: \"-\"\n            onClicked: result.text =\n              parseFloat(argument1.text) - parseFloat(argument2.text)\n        }\n\n        Button {\n            id: timesButton\n            operation: \"*\"\n            onClicked: result.text =\n              parseFloat(argument1.text) * parseFloat(argument2.text)\n        }\n\n        Button {\n            id: divideButton\n            operation: \"/\"\n            onClicked: result.text =\n              parseFloat(argument1.text) / parseFloat(argument2.text)\n        }\n    }\n}\n```"]