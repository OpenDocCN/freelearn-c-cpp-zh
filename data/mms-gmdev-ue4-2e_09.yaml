- en: Adding an In-game Cutscene with Sequencer
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Sequencer 添加游戏内过场动画
- en: Introduction
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引言
- en: Many games made with UE4 are known for having excellent in-engine and in-game
    cutscenes. Traditionally, these were made with the tool/system known as Matinee.
    These days, Sequencer is the new-and-improved system for creating these scenes
    and is being widely adopted in modern UE4 titles. The last section of this chapter
    will deal a bit with Matinee, namely, why it isn't used anymore. Games going back
    many years have done just fine with Matinee and it's still a viable tool; but
    first, let's get to know Sequencer and its capabilities and a bit of what working
    with it is like.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 许多使用 UE4 开发的游戏因其出色的引擎内和游戏内过场动画而闻名。传统上，这些动画是通过名为 Matinee 的工具/系统制作的。如今，Sequencer
    是创建这些场景的新一代改进系统，并且正在被现代 UE4 游戏广泛采用。本章的最后部分将简要介绍 Matinee，即为什么它不再被使用。许多年前的游戏使用 Matinee
    也做得很好，它仍然是一个可行的工具；但首先，让我们来了解 Sequencer 及其功能以及与之合作的一些情况。
- en: Sequencer basics
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sequencer 基础
- en: Adding a scene
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加场景
- en: Track editing
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 轨迹编辑
- en: Sequencer alternatives
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sequencer 的替代方案
- en: Dialog system, blueprint scripting
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对话系统，蓝图脚本
- en: Matinee
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Matinee
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter will use specific assets added over the course of the GitHub project.
    To follow the practical examples, please start with the `Chapter 9` GitHub branch: [https://github.com/PacktPublishing/Mastering-Game-Development-with-Unreal-Engine-4-Second-Edition/tree/Chapter-9](https://github.com/PacktPublishing/Mastering-Game-Development-with-Unreal-Engine-4-Second-Edition/tree/Chapter-9).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将使用 GitHub 项目过程中添加的特定资产。为了跟随实际示例，请从 `第 9 章` GitHub 分支开始：[https://github.com/PacktPublishing/Mastering-Game-Development-with-Unreal-Engine-4-Second-Edition/tree/Chapter-9](https://github.com/PacktPublishing/Mastering-Game-Development-with-Unreal-Engine-4-Second-Edition/tree/Chapter-9)。
- en: 'Engine version used: 4.19.2.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 使用的引擎版本：4.19.2。
- en: Sequencer – UE4's newest cutscene tool
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Sequencer – UE4 的最新过场动画工具
- en: Sequencer was launched around UE4 4.12 to replace (or rather, succeed) Matinee,
    and if a content developer or team has no experience with Matinee, and even if
    you do, it's the best place to work. It's similar enough that those with experience
    with any other sort of keyframe track-based tool can use it, it's easy enough
    to pick up, and will be the technology that Epic is using and improving going
    forward. Getting familiar with its capabilities is key for any game hoping to
    incorporate great-quality cutscenes into their game, whether they're simple arrangements
    of actors in a level that the player can passively view, or cinematic-quality
    fully-controlled scenes to help convey narrative and story. So let's take a look
    at what it can do.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Sequencer 大约在 UE4 4.12 版本中推出，旨在取代（或者说，继承）Matinee，如果内容开发者或团队没有 Matinee 的经验，即使你有，这也是最佳的工作场所。它与任何其他基于关键帧轨道的工具的经验足够相似，以至于可以轻松使用，并且将是
    Epic 将来使用和改进的技术。熟悉其功能对于任何希望将高质量过场动画融入游戏的游戏来说至关重要，无论是玩家可以被动观看的角色在关卡中的简单排列，还是用于传达叙事和故事的完全控制的电影级场景。因此，让我们看看它能够做什么。
- en: Why use sequencer?
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么使用 Sequencer？
- en: As discussed, sequencer is the technology to use going forward and has a massive
    amount of options and power for proficient users. As this is designed to help
    give a holistic knowledge of the engine's capabilities, and not a content-creation
    specialization course, we'll likely only scratch the surface of what's possible
    with the tool; but knowing what it can do, and how it can help you, is crucial
    to making those early decisions in content pipeline and delivering the best experience
    possible to your audience.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Sequencer 是未来要使用的技术，并且为熟练用户提供了大量的选项和功能。由于这是为了帮助提供对引擎功能的整体了解，而不是内容创作专业课程，我们可能只会触及这个工具可能性的表面；但了解它能够做什么，以及它如何帮助你，对于在内容管道中做出早期决策以及向观众提供最佳体验至关重要。
- en: 'A quick aside, for those following the GitHub project closely, you''ll notice
    some commits in this chapter''s beginning, which get it to build and run for HTML5
    (tested on PC/Chrome, and Mac/Safari – the latter seems to have some stability
    issues, but is testable now). Code-side, most of these are simply headers that
    the build does not otherwise pick up on as the Windows build did, this is fairly
    common with various platforms, but things like this:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一句，对于那些密切关注 GitHub 项目的人来说，你会在本章的开头注意到一些提交，这些提交使它能够为 HTML5 构建和运行（在 PC/Chrome
    和 Mac/Safari 上进行了测试——后者似乎有一些稳定性问题，但现在可以进行测试）。在代码方面，这些大多数只是构建时没有作为 Windows 构建那样被捕获的标题，这在各种平台上相当常见，但像这样的事情：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In `MasteringInventory.cpp` are harmless to the Windows build as it already
    picked up on the header elsewhere. But back to Sequencer.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `MasteringInventory.cpp` 中对 Windows 构建无害，因为它已经在其他地方获取了头文件。但回到序列器。
- en: 'While the history of sequencer''s addition and its ongoing and future support
    are reason enough to use it, a quick overview of its capabilities is in order.
    What does it do? Is there anything it can''t do? Let''s list a few of its more
    common features and their uses:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然序列器添加的历史及其持续和未来的支持足以成为使用它的理由，但对其功能的快速概述也是必要的。它做什么？有没有它做不到的事情？让我们列出其一些更常见的功能和它们的用途：
- en: '**Level Sequences**: These are where the bulk of the work is done in Sequencer
    Cinematics, they can be individual end-to-end scenes, or a hierarchy of subsequences
    (more level-sequence objects)'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**级别序列**：这些是序列器电影中大部分工作的地方，可以是单个端到端场景，也可以是子序列的层次结构（更多级别序列对象）。'
- en: '**Master Sequences**: Generally used to manage groups or dynamic-level sequence
    and shot objects, but can work as a thin wrapper for a standalone level sequence
    (adding a few options)'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主序列**：通常用于管理组或动态级别序列和拍摄对象，但也可以作为独立级别序列的薄包装（添加一些选项）。'
- en: '**Shot Track**: This is a track that can be added to a sequence, but is also
    saved as a standalone asset, it is the most fundamental track, typically controlling
    camera, focus, and so on'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**拍摄轨道**：这是一个可以添加到序列中的轨道，但也可以作为一个独立的资产保存，这是最基本的轨道，通常控制相机、焦点等。'
- en: '**Takes**: Upon arranging multiple shots in a shot track, a take object can
    be made, which is that particular sequence of the shot track, and takes can be
    swapped with each other to quickly iterate the feel and flow of a shot'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**拍摄对象**：在拍摄轨道中安排多个拍摄后，可以创建一个拍摄对象，即拍摄轨道的特定序列，拍摄对象可以相互交换，以便快速迭代拍摄的感受和流程。'
- en: '**Actor to Sequencer Track**: These are used to add individual actors from
    the level to a sequence, this is how things in the world are moved and animated
    within a sequence'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**演员到序列器轨道**：这些用于将级别中的单个演员添加到序列中，这是如何在序列中移动和动画化世界中的事物的方式。'
- en: 'While there are many other components, these are the primary ones we can use
    to get immediately familiar with Sequencer''s basic and most commonly used features.
    First however, we''ll also need to just lay some background changes into our FirstPersonExampleMap
    to get prepared. In the GitHub project, you''ll notice several changes without
    much direct effect at the moment: lighting was brightened back up again, the boxes
    except for the one special one were made to not use their special flashing (distracting)
    material, and a "backstage" area was added just under our main floor:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然有许多其他组件，但我们可以使用这些主要组件立即熟悉序列器的基本和最常用的功能。然而，首先我们还需要在我们的 FirstPersonExampleMap
    中做一些背景更改以做准备。在 GitHub 项目中，您会注意到一些没有太多直接效果的改变：灯光再次变亮，除了特殊的一个盒子外，其他盒子都不使用它们的特殊闪烁（分散注意力）材料，并在我们的主地板下方添加了一个“后台”区域：
- en: '![](img/ec06bcc3-b140-40d7-98f9-68d628afb5d3.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ec06bcc3-b140-40d7-98f9-68d628afb5d3.png)'
- en: A super convenient way to duplicate an object is just to drag its transform
    in a direction while holding the *Alt* key (the *command* key on Mac); this will
    make a copy and move it in the direction you want – in this case, a duplicated
    floor moving directly below our existing floor.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 复制对象的一个超级方便的方法是在按住 *Alt* 键（Mac上的 *command* 键）的同时将其变换拖动到某个方向；这将创建一个副本并将其移动到您想要的方向——在这种情况下，复制的地板直接位于我们现有的地板下方。
- en: 'Once we have a plane to place our scene''s actors on, we some new items to
    make our scene interesting. First, we''ll head to the content browser''s Add New
    button and at the very top is the option for Add Feature or Content Pack..., we''ll
    use this twice. Be sure to first click on the root, Content folder, in the content
    browser so everything goes to the right level; you''re welcome to organize assets
    as you or your team see fit; but this will make it match what is in GitHub and
    if you''re clever can save the GitHub download time (as this content is already
    on your computer from getting the full source of the engine, in [Chapter 1](dfc11944-e8b6-45b1-8997-5f1a59d0f8ac.xhtml), *Making
    a C++ Project for a First Person Shooter, *adding it just copies it over from
    the engine''s content folder to your project). We''ll add from the Blueprint Feature
    tab the Third Person pack, and from the Content Packs tab, Starter Content:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有一个平面来放置场景中的演员，我们就可以添加一些新项目来使场景更有趣。首先，我们将前往内容浏览器的“添加新”按钮，在最上方是添加功能或内容包...的选项，我们将使用这个选项两次。请确保首先点击内容浏览器中的根目录，内容文件夹，以确保所有内容都放置在正确的层级；你可以根据你或你的团队的需要组织资产；但这样可以使它匹配GitHub中的内容；如果你足够聪明，可以节省GitHub下载时间（因为从获取引擎完整源代码开始，[第1章](dfc11944-e8b6-45b1-8997-5f1a59d0f8ac.xhtml)，*制作第一人称射击游戏的C++项目，*添加它只是从引擎的内容文件夹复制到你的项目中）。我们将从蓝图功能选项卡添加第三人称包，并从内容包选项卡添加起始内容：
- en: '![](img/c0610540-f87a-47e2-a5c4-9e4a40a2e32d.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c0610540-f87a-47e2-a5c4-9e4a40a2e32d.png)'
- en: These have a number of assets that we likely won't use, which adds to the overall
    size in GitHub; but will *not* add to the game's package size on platforms unless
    directly referenced in a level by another asset (or the level itself), or added
    to the force cook list, which will be gone over in great detail in the next chapter!
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这些包含了一些我们可能不会使用的资产，这增加了GitHub的整体大小；但除非直接由另一个资产（或级别本身）引用或在强制烹饪列表中添加，否则不会增加游戏包的大小在平台上！这将在下一章中详细介绍！
- en: 'So now we can add our new assets to the backstage area. Keep two things in
    mind when making such a backstage area:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 因此现在我们可以将我们的新资产添加到后台区域。在制作这样的后台区域时，请记住两点：
- en: The player should never be able to see it or access it
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 玩家永远不应该能看到它或访问它
- en: It should have similar lighting to where you place the actors there so their
    lighting doesn't noticeably "pop" when added to another area during a sequence.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它应该有与放置演员的地方相似的照明，这样当它们在序列中添加到另一个区域时，照明就不会明显地“弹出”。
- en: 'Note also, you can make characters in a sequence "spawn" on cue, so they''re
    not visible anyway (we''ll demonstrate this); but then you are also potentially
    paying the cost of a synchronous load (if the character was not otherwise previously
    loaded) at the time you do, so beware. Here''s how our backstage is shaping up:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，你还可以让序列中的角色“根据提示”生成，这样它们就根本不可见（我们将演示这一点）；但这样你也在做的时候可能需要支付同步加载的成本（如果角色之前没有加载），所以请注意。我们的后台现在是这样的：
- en: '![](img/03a84bae-4fd5-4430-9c72-c04f8fa49c96.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/03a84bae-4fd5-4430-9c72-c04f8fa49c96.png)'
- en: 'Now notice, this is a plain skeletal mesh, not even a pawn, and importantly,
    is using as its animation "mode" on the right: Use Animation Asset *not* using
    the Animation Blueprint we made elsewhere as this will override what we try to
    do animation-wise in our sequence. The mannequin character, which most readers
    probably know well from Epic''s templates, is similarly setup to not use the AnimBP,
    for our sequence''s benefit. You can also see here that we can add that main-level
    sequence from the Cinematics button in the top main menu. I prefer to add these
    in the content folder, where the map is housed, since they tend to be closely
    associated; but it''s certainly possible and reasonable to make a separate Cinematics
    folder or something similar:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在请注意，这是一个普通的骨骼网格，甚至不是一个pawn，而且重要的是，它在其右侧使用的是“动画模式”：使用动画资产*而不是*使用我们在其他地方制作的动画蓝图，因为这会覆盖我们在序列中尝试做的动画。人偶角色，大多数读者可能都熟悉Epic的模板，也设置为不使用AnimBP，以利于我们的序列。你还可以在这里看到，我们可以从顶部主菜单的“电影”按钮添加主级别序列。我更喜欢在包含地图的内容文件夹中添加这些，因为它们通常紧密相关；但当然可以创建一个单独的电影文件夹或类似的东西：
- en: '![](img/2835a708-30e7-4096-897e-13411e995555.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2835a708-30e7-4096-897e-13411e995555.png)'
- en: As I had already added the scene when this shot was taken, you can see it in
    the editable cinematics, where it is named CountessIntro and kept in FirstPersonExampleMap.
    From here, we can get on with the fun of actually making and triggering a cutscene!
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我在拍摄这个镜头时已经添加了场景，你可以在可编辑的电影中看到它，它被命名为CountessIntro并保存在FirstPersonExampleMap中。从这里，我们可以继续制作和触发一个剪辑场景的乐趣！
- en: Adding a scene and triggering it
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加场景并触发它
- en: 'We''ve added an empty barebones-level sequence to our map now, but how do we
    use it? Let''s quickly go over the triggering side of things, then we can get
    to making a fairly basic scene and watching it play. We''ll then up the quality
    and detail it with some interesting options. The very first thing to do when working
    on a scene such as this, though, is to give yourself a proper view to do it from,
    so in the viewport drop-down, select the Two Panes layout seen here:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在我们地图中添加了一个空的骨架级别序列，但我们如何使用它呢？让我们快速浏览一下触发方面的事情，然后我们可以开始制作一个相当基本的场景并观看它的播放。然后我们将提高质量并使用一些有趣选项来详细说明。然而，在处理此类场景时，首先要做的事情是为自己提供一个合适的视角来进行操作，因此，在视口下拉菜单中，选择这里看到的“双面板”布局：
- en: '![](img/5b899bc7-d594-44df-bf2b-2f30e07961ac.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5b899bc7-d594-44df-bf2b-2f30e07961ac.png)'
- en: Make sure when using the cinematic preview window that you have your cinematic
    camera selected, it's easy to forget and that's the one that will be used during
    the scene of course.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 确保在使用电影预览窗口时，您已选择电影摄像机，很容易忘记，但当然这是场景中将要使用的那个。
- en: 'With the left pane selected, set it (in the same drop-down arrow in the top-left)
    to Cinematic Preview. So now with a dedicated cinematic preview pane, it''s easy
    to work quickly on the scene itself. But there''s one more step before we get
    started there – we need a space we can use and a trigger volume:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在左侧面板选择的情况下，将其（在左上角的相同下拉箭头中）设置为电影预览。现在有了专门的电影预览面板，就可以快速对场景本身进行工作了。但在我们开始之前，还有一步——我们需要一个可以使用并且可以触发体积的空间：
- en: '![](img/8e91e5c0-81b2-4608-9a9b-f07448092a8c.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8e91e5c0-81b2-4608-9a9b-f07448092a8c.png)'
- en: 'Also note that in the GitHub project, the platform, which begins up in the
    air in the scene, is just one of our level''s boxes scaled flat, and with Simulate
    Physics and Enable Gravity both unchecked in its properties. The trigger volume
    is set to only detect overlapping pawns and, as will be seen in the level blueprint,
    destroys itself upon being triggered once by a mastering character:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意，在GitHub项目中，场景中开始于空中的平台只是我们级别中的一个平面缩放的盒子，并且在其属性中Simulate Physics和Enable
    Gravity都没有勾选。触发体积被设置为仅检测重叠的pawns，并且在级别蓝图中所见，一旦被一个掌握角色触发，就会自我销毁：
- en: '![](img/a0dbd74f-2771-4647-b81c-330f626eaf0c.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a0dbd74f-2771-4647-b81c-330f626eaf0c.png)'
- en: 'though to show that this blueprint needed to be split to two shots, but you
    can see the trigger volume is then the immediate actor destroyed, and we have
    then created a level sequence player and done one other clever thing or two at
    the end of the scene:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管为了表明这个蓝图需要分成两个镜头，但你可以看到触发体积随后立即被销毁，然后我们在场景结束时创建了一个级别序列播放器并做了一两个聪明的事情：
- en: '![](img/a7ec551d-9b77-49bd-9c22-0c7e66f74df4.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a7ec551d-9b77-49bd-9c22-0c7e66f74df4.png)'
- en: 'At this point, our sequence actually plays, but until we have it do something,
    it should just immediately end and destroy the platform and spawn BP_Countess.
    So before we get to the "how" of the scene, let''s jump ahead for a second to
    the "what" of the scene: when the player walks into this corner, the countess
    rides down to the ground on a platform, playing her turn-in-place animation to
    face outward, pauses with an idle for a moment at the bottom, then plays a taunt
    animation in front of her. This is all from, of course, our backstage skeletal
    mesh countess, so this one can''t take damage and has no running AI. At the end
    of the sequence (noted by the event we bound to that), we destroy the platform
    she rode in on, the skeletal mesh is automatically returned backstage, and we
    replace at the same transform (with a 90-degree turn since we have that set in
    the BP_Countess class'' mesh) a fully-functional AI version.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，我们的序列实际上已经开始播放，但直到我们让它执行某些操作之前，它应该只是立即结束并摧毁平台，然后生成BP_Countess。所以在我们讨论场景的“如何”之前，让我们先跳到场景的“是什么”：当玩家走进这个角落时，伯爵夫人会骑在平台上降落到地面，播放她的原地转身动画以面向外侧，在底部暂停片刻后，然后在她面前播放嘲讽动画。这一切当然都是来自我们的后台骨骼网格伯爵夫人，所以这个角色不能受到伤害，也没有移动AI。在序列的末尾（由我们绑定到该事件的标记），我们摧毁了她骑的平台，骨骼网格自动返回后台，并在相同的变换（由于我们在BP_Countess类的网格中设置了90度旋转）处替换为一个完全功能的AI版本。
- en: 'Now on to the basic sequence itself:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是基本序列本身：
- en: '![](img/e1e66477-059d-4959-8510-189a63cad941.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e1e66477-059d-4959-8510-189a63cad941.png)'
- en: First, we need to add our two actors for this basic scene to the sequence, so
    double-click the CountessIntro to open it up and click the +Track button near
    the top. It's easiest if you already have the actor selected in the world (in
    this case our platform, and the countess skeletal mesh instance respectively)
    as they will then appear at the top to add instead of searching. Once added, it's
    best to add a transform keyframe right where they are currently at (assuming this
    is the desired start point for each actor). You can do this by clicking the transform
    as a whole, or like for our platform, you really only need its location selected.
    When the track is selected and the time slider (red notch at top with the line
    down the tracks) is at the start (click the <|| looking icon at the bottom to
    send it there), hit *Enter*, or you can click the tiny + icon between the left
    and right arrows in the track selector section to add one. Most content developer
    used to any sort of keyframing interface (animation in the major packages, other
    cinematic tools) should quickly get the hang of changing transforms and keyframing.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要将这个基本场景的两个演员添加到序列中，所以双击CountessIntro打开它，然后点击顶部附近的+Track按钮。如果你已经在世界中选择了演员（在这个例子中是我们的平台和伯爵夫人骨骼网格实例），那么它们将出现在顶部以便添加，而不是搜索。一旦添加，最好在它们当前的位置添加一个变换关键帧（假设这是每个演员的期望起点）。你可以通过点击整个变换来实现，或者对于我们的平台来说，你实际上只需要选择它的位置。当轨道被选中，时间滑块（顶部红色凹槽处的线）在开始位置（点击底部的<||图标将其发送到那里）时，按*Enter*键，或者你可以点击轨道选择器部分中左右箭头之间的微小+图标来添加一个。大多数习惯于任何类型的关键帧界面（主要软件包中的动画、其他电影工具）的内容开发者应该很快就能掌握变换和关键帧的更改。
- en: For the simplest example, selecting this platform, scrubbing the time slider
    forward to 125 , moving the platform down to ground level, and adding another
    keyframe in the sequence editor, will now let you scrub between, or play from
    the start, the sequence and see the platform move between the keyframes. You'll
    notice the keyframe is an orange circle by default; in this case, I right-clicked
    that starting keyframe and set its interpolation to linear (green triangle) so
    there's no acceleration on the motion as it moves from the start keyframe to the
    end keyframe. Similarly, for the countess, you'll see a square at the -1 unit
    mark, which moves her to be standing on the platform. Along with this, right-click
    the countess instance name/area itself and set it to Convert to Spawnable, this
    prevents a super-fast, but visible, motion from underground to the top of the
    platform. There are a number of alternate solutions to this; but since the backstage
    countess is always spawned at the start of the level, there's no load-time hit
    for keyframing the spawn. So at time 0, uncheck the Spawned box and add a keyframe
    to the Spawned track. At time 1, check it, add another keyframe. See also of course
    that there is a Constant type keyframe (blue box) of her translation and rotation
    (simply snaps to these) at time zero. Now she neatly appears there at the start
    of the scene (you could add a nice effect to this or whatever else makes sense
    for your design). To have the translation with the platform exactly match, I actually
    keyframed them, selected together with both of their translation tracks set as
    I moved the two actors down to the ground and set the first keyframe at time zero,
    then scrubbed to 125, moved them both down, and set both actors' second keyframes
    (and again, both to linear motion). I then did a curved rotation from facing away
    from the inside of the map, to facing in towards it, but in that case only selecting
    her rotation track as I set the initial rotation at 0, left it defaulted to Cubic
    (auto) transform type, and then at time 125, rotated her to face in the map and
    set the second keyframe.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 对于最简单的例子，选择这个平台，将时间滑块向前滑动到125，将平台移动到地面水平，并在序列编辑器中添加另一个关键帧，现在你可以在这个序列中前后滑动，或者从开始播放，看到平台在关键帧之间移动。你会注意到默认情况下关键帧是一个橙色圆圈；在这种情况下，我右击了起始关键帧，将其插值设置为线性（绿色三角形），这样在从起始关键帧移动到结束关键帧的过程中就没有加速度。同样，对于伯爵夫人，你会在-1单位标记处看到一个正方形，它会将她移动到平台上站立。此外，右击伯爵夫人实例名称/区域本身，将其设置为“转换为可生成”，这可以防止从地下到平台顶部的超快但可见的运动。对此有几种替代方案；但由于后台伯爵夫人总是在关卡开始时生成，因此对关键帧生成没有加载时间的影响。所以，在时间0时，取消勾选“已生成”框，并在“已生成”轨道上添加一个关键帧。在时间1时，勾选它，并添加另一个关键帧。当然，你也会看到在时间零时有一个常量类型的关键帧（蓝色框），代表她的平移和旋转（简单地将其设置为这些值）。现在她干净利落地出现在场景的开始处（你可以添加一个很好的效果，或者任何其他符合你设计逻辑的效果）。为了使平移与平台完全匹配，我实际上为它们添加了关键帧，选择它们的同时将它们的平移轨道设置为一起移动两个演员到地面，并在时间零设置第一个关键帧，然后滑动到125，将他们两个都向下移动，并设置两个演员的第二关键帧（并且再次，都是线性运动）。然后我进行了一个曲线旋转，从面对地图内部，转向面对地图内部，但在那种情况下，我只选择了她的旋转轨道，因为我将初始旋转设置为0，将其默认设置为立方（自动）转换类型，然后在时间125时，将她旋转到面对地图并设置第二个关键帧。
- en: If you view it as it stands, you can walk around wherever you like, see the
    scene play out once it's triggered, and then interact with a "normal" version
    of the countess upon its completion (which should be based on its vision sense,
    generally immediately comes after the player). She's currently not animating,
    so adding from her instance's Track+ button (to the right of her name, SM_Countess_Instance),
    you'll notice in the screenshot and GitHub, you can add multiple animations to
    one animation track, or multiple animation tracks. Here, one of each is done,
    picking her turning animation until down to the ground, putting a bit of overlap
    on her idle animation so there's not a visible pop between, and then adding a
    track to play her taunt and scrubbing its start until it also just overlaps the
    idle a little. In many games, this is exactly the level of "cinematic" experience
    needed. We'll put some audio on this for a more authentic feel; this is a fairly
    traditional "in-game" scene, rather than a dedicated "cinematic" cutscene which
    typically takes away player control and directly manipulates the camera. We'll
    handle this quickly here with the aforementioned audio.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你把它当作现状来看待，你可以随意走动，一旦触发场景就会看到场景的播放，然后在完成之后与“正常”版本的伯爵夫人互动（这应该基于她的视觉感知，通常紧随玩家之后）。目前她没有动画，所以从她的实例的Track+按钮（她的名字右侧，SM_Countess_Instance）添加，你会在截图和GitHub上注意到，你可以将多个动画添加到一个动画轨道上，或者多个动画轨道。在这里，每种都做了一次，选择她的转身动画直到她倒在地上，在她空闲动画上稍微重叠一点，以便在两者之间没有可见的突兀感，然后添加一个播放她挑衅的轨道，并调整其开始时间，直到它也稍微重叠空闲状态。在许多游戏中，这正是所需的“电影级”体验水平。我们将为这个场景添加一些音频，以增加真实感；这是一个相当传统的“游戏内”场景，而不是一个专门的“电影级”剪辑场景，后者通常会剥夺玩家的控制权并直接操纵摄像机。我们将使用上述音频快速处理这个问题。
- en: When working with the vast majority of tracks in Sequencer, double-clicking
    will size that track in your editor window to the length of the sequence, double-clicking
    again will bring it back to a typically more zoomed-in level. This is great when
    you want an overall look at your sequence.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当与Sequencer中的大多数轨道一起工作时，双击会将在你的编辑器窗口中调整该轨道的大小以匹配序列的长度，再次双击会将它恢复到通常更缩放的级别。当你想要查看整个序列时，这非常棒。
- en: 'Under Content/FirstPersonCPP/Maps, add one more LevelSequence object (found
    under Animation if you right-click in the content browser) to it: IntroShot1\.
    Opening shot 1, it''s not very helpful as it''s not "attached" to our sequence,
    but for rapidly making a number of shots focusing on actors that don''t have to
    keyframe into existence as ours does, this can be a very useful tool, making many
    level sequences used as shots in a single sequence. For reference, I did use several
    shots in experimenting with this scene (and again, we''re learning the tech and
    its capabilities, not proving artistic talent here!), but in the end found using
    a few select keyframe types in a single shot worked best for this scene, so that
    is the only one checked in to GitHub. However, using multiple shots, combining
    them into Takes, and quickly swapping those in and out of a single sequence has
    a very handy link from Epic in the *Further reading* section for those interested.
    The sheer depth and breadth of what is capable with Sequencer can be overwhelming,
    but once again: know your project''s level of expectations and your team''s ability
    to deliver, and you''ll succeed every time where other teams fail.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在Content/FirstPersonCPP/Maps下，向其中添加一个额外的LevelSequence对象（如果你在内容浏览器中右键单击，可以在动画下找到它）：IntroShot1。开篇镜头1，它并不很有帮助，因为它没有“附加”到我们的序列中，但为了快速制作多个镜头，专注于不需要像我们那样进行关键帧动画的演员，这可以是一个非常有用的工具，使得许多关卡序列在单个序列中用作镜头。为了参考，我在实验这个场景时确实使用了几个镜头（而且，我们在这里是在学习技术和其功能，而不是证明艺术才能！），但最终发现使用单个镜头中的一些精选关键帧类型效果最好，所以这是唯一一个提交到GitHub的。然而，使用多个镜头，将它们组合成Take，并快速在单个序列中切换这些镜头，Epic在“进一步阅读”部分提供了一个非常方便的链接，供感兴趣的人参考。Sequencer所能实现的功能深度和广度可能会让人感到不知所措，但再次强调：了解你项目的期望水平和你团队的能力，你将每次都成功，而其他团队则会失败。
- en: 'Now, on to finishing up our screen; in the countess intro sequence, add a track
    with the + button at the top and select Shot Track. Using the + shot button, add
    our IntroShot1\. Again just for the sake of learning, it''s fair to point out
    that I did lay out much of this track in the level as its own sequence, before
    importing, but had to do a bit of tweaking afterwards, which is a bit more difficult
    as you''re manipulating CineCameraActor directly in the level in viewports at
    that point, though you can always dedicate a viewport specifically to that camera
    actor for keyframing. Looking at the shot, you''ll see linear keyframes as we
    follow the countess descending, a pair of constant keyframes I use as a jump cut
    (rather than an alternate shot, but that''s always an option as noted), and then
    some more cubic keyframes as the camera pans out:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续完成我们的屏幕；在伯爵介绍序列中，使用顶部的+按钮添加一个轨道，并选择镜头轨道。使用+镜头按钮，添加我们的IntroShot1。仅仅为了学习的目的，公平地说，我在导入之前，已经在关卡中为这条轨道布置了大部分的序列，但之后不得不进行一些调整，这在当时因为直接在视图中操作CineCameraActor而变得有些困难，尽管你总是可以专门为该相机演员分配一个视口来进行关键帧动画。观察镜头，你会看到随着伯爵下楼梯，线性关键帧，我使用一对恒定关键帧作为跳切（而不是交替镜头，但正如所提到的，这始终是一个选项），然后随着相机拉远，还有一些立方关键帧：
- en: '![](img/45c6b61c-d238-4b62-b396-739d0a36d260.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/45c6b61c-d238-4b62-b396-739d0a36d260.png)'
- en: 'Note: your subtracks only exist for as long as they are set to in their parent
    sequence! In many cases, you may need to drag their end-time in the parent sequence
    to snap to the end of itself, to edit that subtrack in the sequence editor. Another is
    you can right click many tracks to allow the end-result to persist after the cinematic
    plays, this is very useful for moving entities around and then having them resume
    the game after the sequence exactly where they were placed, for example.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：你的子轨道只存在于它们在父序列中设置的时间范围内！在许多情况下，你可能需要将它们在父序列中的结束时间拖动，以使其与自身的结束对齐，以便在序列编辑器中编辑该子轨道。另一个方法是，你可以右键单击许多轨道，允许在电影播放后保持最终结果，这对于移动实体并在序列结束时精确地恢复游戏位置非常有用，例如。
- en: Back in the intro sequence itself, it's then just a matter of adding an audio
    track with a taunt at the right time (of course the scene could do with a good
    deal more audio). Lastly, add the mannequin to the scene to give the player a
    sense of their own location in perspective, but note that this is a fixed location
    as we're spawning the skeletal mesh into the cutscene once again, since the player's
    first-person pawn is even less palatable to look at. If you compare the first
    version of the scene where the player views it from their perspective against
    this final version, the differences should be highly obvious – and professional
    content creators can do even more impressive things once made aware of the tools
    available!
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 回到介绍序列本身，接下来只需在合适的时间添加一个带有嘲讽音轨（当然，场景还需要更多的音轨）。最后，将模特添加到场景中，让玩家对自己的位置有一个视角上的感知，但请注意，这是一个固定位置，因为我们再次将骨骼网格实例化到过场动画中，因为玩家的第一人称角色看起来甚至更不吸引人。如果你将场景的第一个版本（玩家从自己的视角观看）与这个最终版本进行比较，差异应该非常明显——一旦意识到可用的工具，专业的内容创作者可以做到更加令人印象深刻的事情！
- en: CineCamera Actors are immensely powerful in and of themselves. Now that we have
    one in this scene, feel free to explore what it can do, and check out the link
    from Epic in the *Further reading* section for some more useful info.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: CineCamera Actors本身非常强大。现在我们在这个场景中有一个，请随意探索它能做什么，并查看*进一步阅读*部分中Epic提供的链接，以获取更多信息。
- en: 'Let''s do one final bit of cleanup while the camera is in the scene, hide our
    reticle. Via the triggering and ending blueprint events, we hide the whole HUD,
    but this is the only visible piece in our game:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当相机在场景中时，让我们进行最后的清理工作，隐藏我们的准星。通过触发和结束蓝图事件，我们隐藏整个HUD，但这是游戏中唯一可见的部分：
- en: '![](img/f9aea769-6adc-4435-a5be-1a3578bd1ef4.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f9aea769-6adc-4435-a5be-1a3578bd1ef4.png)'
- en: And that's it! Without too much pain, the essentials of getting a cutscene are
    in and can be built upon for any level of professionalism needed with a little
    more experimentation and invested time.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！没有太多的痛苦，我们已经完成了过场动画的基本要素，并且可以通过更多的实验和投入的时间来构建所需的专业水平。
- en: Don't forget that when working with embedded sequences, you will frequently
    need to save the shot, the sequence the shot is contained in, and the level the
    sequence is in. Keep the volume of changes and the versioning-control of your
    levels in mind when creating a workflow. It's entirely possible to create a duplicate
    level and have cinematic artists work here while level designers work in the "real"
    level so they don't collide with binary assets you can't merge; but of course
    that means extra work making sure what each does remains in sync as they both
    evolve their pieces!
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记，当与嵌入序列一起工作时，你将经常需要保存镜头、包含镜头的序列以及包含序列的水平。在创建工作流程时，请考虑水平更改的频率和版本控制。完全有可能创建一个副本水平，让电影艺术家在这里工作，而水平设计师则在“真实”的水平上工作，这样他们就不会与无法合并的二进制资产发生冲突；但当然，这也意味着需要额外的工作来确保他们各自的工作保持同步，因为他们都在发展自己的作品！
- en: Alternatives to sequencer
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 序列器的替代方案
- en: The main goal of this chapter is to build familiarity and confidence with Sequencer.
    That said, if a team doesn't have time (or the need!) to generate such cinematic
    cutscenes, what else is available? Most games will require some level of scripted
    scenes to help the story learn the game (tutorials) or give story exposition,
    immersion, and emotional impact at certain moments. But given all that UE4 has
    to offer and that we've touched on several of these things, it's worth diving
    in a bit further to ensure the right tool is being used for the job.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的主要目标是使读者熟悉并建立对序列器的信心。话虽如此，如果一个团队没有时间（或需求！）来生成这样的电影级场景，还有什么其他选择呢？大多数游戏都需要一定程度的脚本场景来帮助玩家学习游戏（教程）或在某些时刻提供故事阐述、沉浸感和情感冲击。但鉴于UE4提供的所有功能和我们已经涉及到的这些内容，进一步深入研究以确保使用正确的工具来完成这项工作是非常有价值的。
- en: Fast and easy in-game scenes
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 快速且简单的游戏场景
- en: 'There are a few important ways to consider in-game scenes without the full
    Sequencer-based cinematic demonstrated in the last section. Here is a quick list
    of options and common uses:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在没有展示在上一节中的基于序列器的完整电影级场景的情况下，考虑游戏场景有几个重要方式。以下是一个快速选项列表和常见用途：
- en: '**The Dialog system**: This was discussed in some detail in [Chapter 7](1ce4a5c3-9cf2-4833-bd1f-d81fc181e789.xhtml), *Getting
    Audio in Your Game* with additional reading to help those using it further. Dialog
    is great for characters interacting with audio (and potentially animations) in
    the game, with customized localization text and tunable audio between individual
    character types (so dialog to a male character can differ from female, or friends
    versus enemies in a scene). That said, the flow of dialog, animations played,
    and the level of player control is largely up to the designer making these interactions,
    Dialog is more of an audio and flow-control tool than a full scene-creating device,
    hence our next possibility.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对话系统**：这在[第7章](1ce4a5c3-9cf2-4833-bd1f-d81fc181e789.xhtml)中已有详细讨论，即*在游戏中添加音频*，并提供额外的阅读材料以帮助那些正在使用它的人进一步了解。对话非常适合角色在游戏中与音频（以及潜在的动画）互动，具有定制的本地化文本和可调整的音频，这些音频可以在不同角色类型之间进行切换（例如，对男性角色的对话可以与女性角色的对话不同，或者场景中的朋友与敌人之间的对话）。尽管如此，对话的流程、播放的动画以及玩家的控制程度主要取决于设计这些交互的设计师，对话更多地是一个音频和流程控制工具，而不是一个完整的场景创建设备，因此我们的下一个可能性是。'
- en: '**Blueprint**: With enough effort, you can do just about anything you can imagine
    (including, as noted in [Chapter 3](267b875d-60d1-4f92-abf5-76d2e682a12d.xhtml), *Blueprint
    Review and When to Use BP Scripting*, creating entire games) in blueprint. It''s
    all just a matter of managing complexity in the end; but taking away player control,
    setting a specific camera actor, triggering that to play movement along a spline,
    delayed animations with audio playing, and special FX are all completely doable
    with blueprint. There is a huge amount of information on any subsection of blueprint
    you might want to learn more about for this context, too, and great community
    support if you run into any problems. The biggest drawback is that there is a
    steep learning curve to using blueprint this fully, and there is a huge amount
    of risk both for error when used by team members not deeply trained in what should
    maybe be "off-limits" without a deep level of training, and maintaining these
    massive graphs of logic can get overwhelming. Constantly reducing reused bits
    of logic into function libraries and oversight (or content being created) by highly
    technical people often mitigate these issues, but beware before launching it on
    unsuspecting artists!'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**蓝图**：只要付出足够的努力，你几乎可以做到你想象中的任何事情（包括在第3章中提到的，*蓝图审查和何时使用BP脚本*，创建整个游戏），在蓝图里都可以实现。最终，这只是一个管理复杂性的问题；但移除玩家控制、设置特定的相机演员、触发沿样条曲线播放运动、延迟播放带有音频的动画和特殊效果，所有这些都可以通过蓝图实现。对于你想要了解更多信息的任何蓝图子部分，也有大量的信息，如果你遇到任何问题，社区支持也非常好。最大的缺点是，完全使用蓝图有一个陡峭的学习曲线，而且对于没有深入训练的团队成员来说，使用时存在巨大的错误风险，而且维护这些庞大的逻辑图可能会变得令人难以承受。不断地将重复使用的逻辑块减少到函数库，并由高度技术的人员进行监督（或创建内容）通常可以缓解这些问题，但在向不知情的艺术家推出之前要小心！'
- en: '**Simple Sequences**: Our intro scene from the last section should be entirely
    manageable in a matter of hours simply going through this lesson even without
    any familiarity with Sequencer. The simple version in the first half will take
    a fraction of that time, if merely positioning actors, playing some animations,
    and maybe putting in a few cool effects is all that''s needed, technical and non-technical
    types should be able to manage these with minimal training.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简单序列**：我们上一节中的开场场景只需通过本课程就能在数小时内轻松完成，即使没有对序列器有任何熟悉度。如果只是定位演员、播放一些动画，或者加入一些酷炫效果，那么即使是技术和非技术类型的人也能通过最少量的培训来管理这些。'
- en: And what was that way back at the top about Matinee? Read on!
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 那么关于Matinee在顶部提到的内容是什么？继续阅读！
- en: Matinee
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 日场
- en: 'As has probably been hammered home enough by now, basically anything Epic''s
    previous tool, which is kept for legacy purposes, could do, Sequencer can also
    do. That said, there can arise situations where someone has a great deal of experience
    with Matinee, or maybe an outsourcing group still uses it, and they want to quickly
    bring that to bear on a project. Other than the already-stated reasons of Sequencer
    being the supported tool going forward, there''s not a specific reason Matinee
    can''t be used still. Matinee has been a classic for having flying cars loop around
    buildings in smooth parabolic curved circuits. It was the mainstay of cinematic
    work in any number of classic UE3 and all early UE4 titles. Anyone having just
    gone through the Sequencer work should immediately recognize a lot of familiar
    themes opening up the Matinee editor:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 到现在为止，可能已经反复强调过，基本上Epic之前保持的任何工具，出于遗留目的，序列器都可以做到。话虽如此，可能会出现某些情况，比如有人对Matinee有丰富的经验，或者可能有一个外包团队仍在使用它，他们希望快速将其应用于项目。除了已经提到的序列器是未来支持的工具这一原因外，没有特定的理由不能继续使用Matinee。Matinee因其能够在平滑的抛物线曲线中环绕建筑物的飞行汽车而成为经典。它是许多经典UE3和所有早期UE4游戏电影制作的主要支柱。刚刚完成序列器工作的任何人应该会立即认出Matinee编辑器中打开的许多熟悉主题：
- en: '![](img/82aa1587-0b4d-4aa3-80f9-d28b825c4810.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/82aa1587-0b4d-4aa3-80f9-d28b825c4810.png)'
- en: 'While the main striking difference is the curve-editing tools on the front
    face of Matinee, fear not, all these controls and some new perks are available
    in Sequencer (check out the tool button near the top of sequencer to view as a
    curve, and select a transform or other track with keyframes):'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然主要的不同之处在于Matinee的前端曲线编辑工具，但不必担心，所有这些控件和一些新功能在序列器中也是可用的（查看序列器顶部的工具按钮，将其视为曲线，并选择一个带有关键帧的变换或其他轨道）：
- en: '![](img/e0e51e53-1ce1-480a-a8ff-8db3a2bd2c98.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e0e51e53-1ce1-480a-a8ff-8db3a2bd2c98.png)'
- en: Regardless of what ultimately works best, knowing the options available is the
    name of the game in making your project a success, and in all likelihood, you'll
    end up using any number of the options available in some combination; but by now
    at least the risks and possibilities should be clear from the start.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 无论最终哪种方法最有效，了解可用的选项是使你的项目成功的关键，而且很可能会使用一些组合中的任何数量的选项；但到目前为止，至少风险和可能性应该从一开始就很清楚。
- en: Summary
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Sequencer is an amazing tool, people are literally making cinematic-quality
    movies in it in realtime these days with the technology Epic has made available,
    which is a wondrous thing. Like most aspects of UE4, these are deep topics and
    each of these can (and likely will) have experts in their field; but as a leader
    and driver of technology in a team, using them all with a level of comfort and
    knowing how they can and do all interact is held in extremely high value. Sequencer,
    and other available tools, can enhance any game and get it out the door to eager
    players hungry for more. Speaking of that, our next chapter will cover how to
    actually *reach* those players with your project.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 序列编辑器是一个惊人的工具，如今人们实际上正在使用Epic提供的技术实时制作电影级的电影，这是一件奇妙的事情。就像UE4的许多方面一样，这些都是深入的话题，每个话题都可能（并且很可能）有该领域的专家；但作为一个团队的技术领导者和推动者，能够舒适地使用它们，并了解它们如何以及如何相互作用，这一点被高度重视。序列编辑器和其他可用工具可以增强任何游戏，并将其推向渴望更多内容的玩家。说到这一点，我们下一章将介绍如何实际上*触及*那些玩家，并使用你的项目。
- en: Questions
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is the main reason to become familiar with Sequencer and use it going forward?
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么熟悉序列编辑器并继续使用它是一个主要的原因？
- en: What are the most commonly-used tracks added in Sequencer?
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在序列编辑器中最常用的轨道有哪些？
- en: How do you get an actor into a track?
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何将一个演员放入轨道中？
- en: Why not use a pawn with an animation blueprint directly in Sequencer?
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么不在序列编辑器中直接使用带有动画蓝图的傀儡？
- en: What is the purpose and benefit of using level-sequence Shots? How do they relate
    to tracks?
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用关卡序列镜头的目的是什么？它有什么好处？它与轨道有何关联？
- en: What is a major risk of having sequences embedded in your map levels directly?
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的地图关卡中嵌入序列的主要风险是什么？
- en: If blueprint scripting can do almost anything a sequence can do, what's the
    risk of using it for cutscenes?
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果蓝图脚本可以做到几乎任何序列可以做到的事情，那么使用它来制作过场动画有什么风险？
- en: How can you fine-tune the curves of keyframes in Sequencer?
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何在序列编辑器中微调关键帧的曲线？
- en: Further reading
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Multiple Shots and Takes:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 多个镜头和拍摄：
- en: '[https://docs.unrealengine.com/en-US/Engine/Sequencer/HowTo/TracksShot](https://docs.unrealengine.com/en-US/Engine/Sequencer/HowTo/TracksShot)'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.unrealengine.com/en-US/Engine/Sequencer/HowTo/TracksShot](https://docs.unrealengine.com/en-US/Engine/Sequencer/HowTo/TracksShot)'
- en: 'CineCamera Actors:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 电影摄像机演员：
- en: '[https://docs.unrealengine.com/en-US/Engine/Sequencer/HowTo/CineCameraActors](https://docs.unrealengine.com/en-US/Engine/Sequencer/HowTo/CineCameraActors)'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.unrealengine.com/en-US/Engine/Sequencer/HowTo/CineCameraActors](https://docs.unrealengine.com/en-US/Engine/Sequencer/HowTo/CineCameraActors)'
