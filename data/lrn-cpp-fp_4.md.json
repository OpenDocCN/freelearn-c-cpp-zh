["```cpp\n    /* factorial_iteration_do_while.cpp */\n    #include <iostream>\n\n    using namespace std;\n\n    // Function containing\n    // do-while loop iteration\n\n    int factorial (int n)\n    {\n      int result = 1;\n      int i = 1;\n\n      // Running iteration using do-while loop\n      do\n       {\n         result *= i;\n       }\n       while(++i <= n);\n\n       return result;\n    }\n\n    auto main() -> int\n    {\n      cout << \"[factorial_iteration_do_while.cpp]\" << endl;\n\n      // Invoking factorial() function nine times\n      for(int i = 1; i < 10; ++i)\n      {\n        cout << i << \"! = \" << factorial(i) << endl;\n      }\n\n      return 0;\n    } \n\n```", "```cpp\n    /* factorial_iteration_do_while.cpp */\n    #include <iostream>\n\n    using namespace std;\n\n    // Function containing\n    // for loop iteration\n    int factorial (int n)\n    {\n      int result = 1;\n\n      // Running iteration using for loop\n for(int i = 1; i <= n; ++i)\n {\n result *= i;\n }\n\n      return result;\n     }\n\n     auto main() -> int\n     {\n      cout << \"[factorial_iteration_for.cpp]\" << endl;\n\n      // Invoking factorial() function nine times\n      for(int i = 1; i < 10; ++i)\n       {\n         cout << i << \"! = \" << factorial(i) << endl;\n       }\n\n      return 0;\n    }\n\n```", "```cpp\n    /* factorial_recursion.cpp */\n    #include <iostream>\n\n    using namespace std;\n\n    int factorial(int n)\n    {\n      // Running recursion here\n      if (n == 0)\n        return 1;\n      else\n        return n * factorial (n - 1);\n    }\n\n    auto main() -> int\n    {\n       cout << \"[factorial_recursion.cpp]\" << endl;\n\n      for(int i = 1; i < 10; ++i)\n      {\n        cout << i << \"! = \" << factorial(i) << endl;\n      }\n\n      return 0;\n    }\n\n```", "```cpp\n    /* fibonacci_iteration.cpp */\n    #include <iostream>\n\n    using namespace std;\n\n    // Function for generating\n    // Fibonacci sequence using iteration\n    int fibonacci(int n)\n    {\n      if (n == 0)\n        return 0;\n\n      int previous = 0;\n      int current = 1;\n\n      for (int i = 1; i < n; ++i)\n      {\n        int next = previous + current;\n        previous = current;\n        current = next;\n      }\n\n      return current;\n    }\n\n    auto main() -> int\n    {\n      cout << \"[fibonacci_iteration.cpp]\" << endl;\n\n      // Invoking fibonacci() function ten times\n      for(int i = 0; i < 10; ++i)\n       {\n         cout << fibonacci(i) << \" \";\n       }\n      cout << endl;\n\n      return 0;\n    }\n\n```", "```cpp\n    /* fibonacci_recursion.cpp */\n    #include <iostream>\n\n    using namespace std;\n\n    // Function for generating\n    // Fibonacci sequence using recursion\n    int fibonacci(int n)\n    {\n      if(n <= 1)\n        return n;\n\n      return fibonacci(n-1) + fibonacci(n-2);\n    }\n\n    auto main() -> int\n    {\n      cout << \"[fibonacci_recursion.cpp]\" << endl;\n\n      // Invoking fibonacci() function ten times\n      for(int i = 0; i < 10; ++i)\n      {\n        cout << fibonacci(i) << \" \";\n      }\n      cout << endl;\n\n      return 0;\n    }\n\n```", "```cpp\n    /* tail_recursion.cpp */\n    #include <iostream>\n\n    using namespace std;\n\n    void displayNumber(long long n)\n    {\n      // Displaying the current n value\n      cout << n << endl;\n\n      // The last executed statement \n      // is the recursive call\n      displayNumber(n + 1);\n    }\n\n    auto main() -> int\n    {\n      cout << \"[tail_recursion.cpp]\" << endl;\n\n      // Invoking the displayNumber() function\n      // containing tail recursion\n      displayNumber(0);\n\n      return 0;\n    }\n\n```", "```cpp\n    /* tail_recursion_goto.cpp */\n    #include <iostream>\n\n    using namespace std;\n\n    void displayNumber(long long n)\n    {\n loop:\n        // Displaying the current n value\n        cout << n << endl;\n\n       // Update parameters of recursive call\n // and replace recursive call with goto\n n++;\n goto loop;\n    }\n\n    auto main() -> int\n    {\n      cout << \"[tail_recursion_goto.cpp]\" << endl;\n\n      // Invoking the displayNumber() function\n      // containing tail recursion\n      displayNumber(0);\n\n      return 0;\n    }\n\n```", "```cpp\n    /* factorial_recursion_tail.cpp */\n    #include <iostream>\n\n    using namespace std;\n\n // Function for calculating factorial\n // tail recursion\n int factorialTail(int n, int i)\n {\n if (n == 0)\n return i;\n\n return factorialTail(n - 1, n * i);\n } \n // The caller of tail recursion function\n int factorial(int n)\n {\n return factorialTail(n, 1);\n }\n\n    auto main() -> int\n    {\n      cout << \"[factorial_recursion_tail.cpp]\" << endl;\n\n      // Invoking fibonacci() function ten times\n      for(int i = 1; i < 10; ++i)\n      {\n        cout << i << \"! = \" << factorial(i) << endl;\n      }\n\n     return 0;\n    }\n\n```", "```cpp\n    /* exponential_iteration.cpp */\n    #include <iostream>\n\n    using namespace std;\n\n    // Calculating the power of number\n    // using iteration\n    int power(int base, int exp)\n    {\n      int result = 1;\n\n      for(int i = 0; i < exp; ++i)\n       {\n         result *= base;\n       }\n\n       return(result);\n    } \n\n    auto main() -> int\n    {\n      cout << \"[exponential_iteration.cpp]\" << endl;\n\n      // Invoking power() function six times\n      for(int i = 0; i <= 5; ++i)\n      {\n        cout << \"power (2, \" << i << \") = \";\n        cout << power(2, i) << endl;\n      }\n\n      return 0;\n    }\n\n```", "```cpp\n    /* exponential_recursion.cpp */\n    #include <iostream>\n\n    using namespace std;\n\n    // Calculating the power of number\n    // using recursion\n    int power(int base, int exp)\n    {\n      if(exp == 0)\n        return 1;\n      else\n        return base * power(base, exp - 1);\n    }\n\n    auto main() -> int\n    {\n      cout << \"[exponential_recursion.cpp]\" << endl;\n\n      // Invoking power() function six times\n      for(int i = 0; i <= 5; ++i)\n      {\n        cout << \"power (2, \" << i << \") = \";\n        cout << power(2, i) << endl;\n      }\n\n      return 0;\n    }\n\n```", "```cpp\n    /* permutation.cpp */\n    #include <iostream>\n\n    using namespace std;\n\n    // Calculation the permutation\n    // of the given string\n    void doPermute(\n      const string &chosen,\n      const string &remaining)\n      {\n       if(remaining == \"\")\n       {\n          cout << chosen << endl;\n       }\n       else\n       {\n         for(uint32_t u = 0; u < remaining.length(); ++u)\n         {\n            doPermute(\n              chosen + remaining[u],\n              remaining.substr(0, u)\n              + remaining.substr(u + 1));\n         }\n       }\n    }     \n\n    // The caller of doPermute() function\n    void permute(\n      const string &s)\n    {\n      doPermute(\"\", s);\n    }\n\n    auto main() -> int\n    {\n      cout << \"[permutation.cpp]\" << endl;\n\n      // Initializing str variable\n      // then ask user to fill in\n      string str;\n      cout << \"Permutation of a string\" << endl;\n      cout << \"Enter a string: \";\n      getline(cin, str);\n\n      // Finding the possibility of the permutation\n      // by calling permute() function\n      cout << endl << \"The possibility permutation of \";\n      cout << str << endl;\n      permute(str);\n\n      return 0;\n    }\n\n```", "```cpp\n    # # # # # # # #\n    # S           #\n    # # #   # # # #\n    #   #   # # # #\n    #             #\n    #   # # # # # #\n    #           F #\n    # # # # # # # #\n\n```", "```cpp\n    /* labyrinth.cpp */\n    #include <iostream>\n    #include <vector>\n\n    using namespace std;\n\n    vector<vector<char>> createLabyrinth()\n    {\n      // Initializing the multidimensional vector\n      // labyrinth \n      // # is a wall\n      // S is the starting point\n      // E is the finishing point\n      vector<vector<char>> labyrinth = \n      {\n        {'#', '#', '#', '#', '#', '#', '#', '#'},\n        {'#', 'S', ' ', ' ', ' ', ' ', ' ', '#'},\n        {'#', '#', '#', ' ', '#', '#', '#', '#'},\n        {'#', ' ', '#', ' ', '#', '#', '#', '#'},\n        {'#', ' ', ' ', ' ', ' ', ' ', ' ', '#'},\n        {'#', ' ', '#', '#', '#', '#', '#', '#'},\n        {'#', ' ', ' ', ' ', ' ', ' ', 'F', '#'},\n        {'#', '#', '#', '#', '#', '#', '#', '#'}\n     };\n\n     return labyrinth;\n    }\n\n    void displayLabyrinth(vector<vector<char>> labyrinth)\n    {\n      cout << endl;\n      cout << \"====================\" << endl;\n      cout << \"The Labyrinth\" << endl;\n      cout << \"====================\" << endl;\n\n      // Displaying all characters in labyrinth vector\n      for (int i = 0; i < rows; i++)\n      {\n        for (int j = 0; j < cols; j++)\n        {\n            cout << labyrinth[i][j] << \" \";\n        }\n        cout << endl;\n      }\n      cout << \"====================\" << endl << endl;\n    }\n\n    auto main() -> int\n    {\n      vector<vector<char>> labyrinth = createLabyrinth();\n      displayLabyrinth(labyrinth);\n\n      string line;\n      cout << endl << \"Press enter to continue...\" << endl;\n      getline(cin, line);\n\n      return 0;\n    }\n\n```", "```cpp\n    bool navigate(\n      vector<vector<char>> labyrinth,\n      int row,\n      int col)\n    {\n      // Displaying labyrinth\n      displayLabyrinth(labyrinth);\n\n      cout << \"Checking cell (\";\n      cout << row << \",\" << col << \")\" << endl;\n\n      // Pause 1 millisecond\n      // before navigating\n      sleep(1);\n\n      if (labyrinth[row][col] == 'F')\n      {\n        cout << \"Yeayy.. \";\n        cout << \"Found the finish flag \";\n        cout << \"at point (\" << row << \",\";\n        cout << col << \")\" << endl;\n        return (true);\n      }\n      else if (\n        labyrinth[row][col] == '#' ||\n        labyrinth[row][col] == '*')\n      {\n        return (false);\n      }\n      else if (labyrinth[row][col] == ' ')\n      {\n        labyrinth[row][col] = '*';\n      }\n\n      if ((row + 1 < rows) &&\n        navigate(labyrinth, row + 1, col))\n        return (true);\n\n      if ((col + 1 < cols) &&\n        navigate(labyrinth, row, col + 1))\n        return (true);\n\n      if ((row - 1 >= 0) &&\n        navigate(labyrinth, row - 1, col))\n        return (true);\n\n      if ((col - 1 >= 0) &&\n        navigate(labyrinth, row, col - 1))\n        return (true);\n\n        return (false);\n    }\n\n```", "```cpp\n    bool isLabyrinthSolvable(\n      vector<vector<char>> labyrinth)\n    {\n      int start_row = -1;\n      int start_col = -1;\n      for (int i = 0; i < rows; i++)\n      {\n        for (int j = 0; j < cols; j++)\n        {\n            if (labyrinth[i][j] == 'S')\n            {\n                start_row = i;\n                start_col = j;\n                break;\n            }\n        }\n      }\n\n      if (start_row == -1 || start_col == -1)\n      {\n        cout << \"No valid starting point found!\" << endl;\n        return (false);\n      }\n\n      cout << \"Starting at point (\" << start_row << \",\";\n      cout << start_col << \")\" << endl;\n\n      return navigate(labyrinth, start_row, start_col);\n    }\n\n```", "```cpp\n    const int rows = 8;\n    const int cols = 8;\n\n```", "```cpp\n    /* labyrinth.cpp */\n    #include <iostream>\n    #include <vector>\n #include <unistd.h>\n\n    using namespace std;\n\n const int rows = 8;\n const int cols = 8;\n\n    vector<vector<char>> createLabyrinth()\n    {\n      // Initializing the multidimensional vector\n      // labyrinth\n      // # is a wall\n      // S is the starting point\n      // E is the finishing point\n      vector<vector<char>> labyrinth =\n      {\n        {'#', '#', '#', '#', '#', '#', '#', '#'},\n        {'#', 'S', ' ', ' ', ' ', ' ', ' ', '#'},\n        {'#', '#', '#', ' ', '#', '#', '#', '#'},\n        {'#', ' ', '#', ' ', '#', '#', '#', '#'},\n        {'#', ' ', ' ', ' ', ' ', ' ', ' ', '#'},\n        {'#', ' ', '#', '#', '#', '#', '#', '#'},\n        {'#', ' ', ' ', ' ', ' ', ' ', 'F', '#'},\n        {'#', '#', '#', '#', '#', '#', '#', '#'}\n       };\n\n     return labyrinth;\n    }\n\n    void displayLabyrinth(\n      vector<vector<char>> labyrinth)\n    {\n      cout << endl;\n      cout << \"====================\" << endl;\n      cout << \"The Labyrinth\" << endl;\n      cout << \"====================\" << endl;\n      // Displaying all characters in labyrinth vector\n      for (int i = 0; i < rows; i++)\n      {\n        for (int j = 0; j < cols; j++)\n        {\n            cout << labyrinth[i][j] << \" \";\n        }\n        cout << endl;\n       }\n      cout << \"====================\" << endl << endl;\n    }\n\n bool navigate(\n vector<vector<char>> labyrinth,\n int row,\n int col)\n {\n // Displaying labyrinth\n displayLabyrinth(labyrinth);\n\n cout << \"Checking cell (\";\n cout << row << \",\" << col << \")\" << endl;\n\n // Pause 1 millisecond\n // before navigating\n sleep(1);\n\n if (labyrinth[row][col] == 'F')\n {\n cout << \"Yeayy.. \";\n cout << \"Found the finish flag \";\n        cout << \"at point (\" << row << \",\";\n cout << col << \")\" << endl;\n return (true);\n }\n else if (\n labyrinth[row][col] == '#' ||\n labyrinth[row][col] == '*')\n {\n return (false);\n }\n else if (labyrinth[row][col] == ' ')\n {\n labyrinth[row][col] = '*';\n }\n\n if ((row + 1 < rows) &&\n navigate(labyrinth, row + 1, col))\n return (true); \n if ((col + 1 < cols) &&\n navigate(labyrinth, row, col + 1))\n return (true); \n if ((row - 1 >= 0) &&\n navigate(labyrinth, row - 1, col))\n return (true); \n if ((col - 1 >= 0) &&\n navigate(labyrinth, row, col - 1))\n return (true); \n return (false);\n } \n bool isLabyrinthSolvable(\n vector<vector<char>> labyrinth)\n {\n int start_row = -1;\n int start_col = -1;\n for (int i = 0; i < rows; i++)\n {\n for (int j = 0; j < cols; j++)\n {\n if (labyrinth[i][j] == 'S')\n {\n start_row = i;\n start_col = j;\n break;\n }\n }\n }\n\n if (start_row == -1 || start_col == -1)\n {\n cerr << \"No valid starting point found!\" << endl;\n return (false);\n }\n\n cout << \"Starting at point (\" << start_row << \",\";\n cout << start_col << \")\" << endl;\n\n return navigate(labyrinth, start_row, start_col);\n }\n\n    auto main() -> int\n    {\n      vector<vector<char>> labyrinth = createLabyrinth();\n      displayLabyrinth(labyrinth);\n\n      string line;\n      cout << endl << \"Press enter to continue...\" << endl;\n      getline(cin, line);\n\n if (isLabyrinthSolvable(labyrinth))\n cout << \"Labyrinth solved!\" << endl;\n else\n cout << \"Labyrinth could not be solved!\" << endl;\n\n     return 0;\n    }\n\n```"]