["```cpp\n    virtual void Notify(USkeletalMeshComponent* MeshComp,   UAnimSequenceBase* Animation); \n    ```", "```cpp\n    public:\u00a0\u00a0virtual void Notify(USkeletalMeshComponent*   MeshComp,UAnimSequenceBase* Animation) override;\n    ```", "```cpp\n    void UAnim_ProjectileNotify::Notify(USkeletalMeshComponent*   MeshComp, UAnimSequenceBase* Animation)\n    {\n    \u00a0\u00a0UE_LOG(LogTemp, Warning, TEXT(\"Throw Notify\"));\n    }\n    ```", "```cpp\nNotify(USkeletalMeshComponent* MeshComp, UAnimSequenceBase* Animation)\n```", "```cpp\n    UPROPERTY(EditAnywhere)\n    class UAnimMontage* ThrowMontage;\n    ```", "```cpp\n    #include \"Animation/AnimInstance.h\"\n    ```", "```cpp\n    //Bind pressed action ThrowProjectile to your ThrowProjectile   function\n    PlayerInputComponent->BindAction(\"ThrowProjectile\", IE_Pressed,   this, &ASuperSideScroller_Player::ThrowProjectile);\n    ```", "```cpp\n    void ASuperSideScroller_Player::ThrowProjectile()\n    {\n    \u00a0\u00a0if (ThrowMontage)\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0bool bIsMontagePlaying = GetMesh()->GetAnimInstance()->      Montage_IsPlaying(ThrowMontage);\n    \u00a0\u00a0\u00a0\u00a0if (!bIsMontagePlaying)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0GetMesh()->GetAnimInstance()->Montage_Play(ThrowMontage,         2.0f);\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0}\n    ```", "```cpp\n    Location = (X=12.961717,Y=25.448450,Z=-7.120584)\n    ```", "```cpp\n    UPROPERTY(EditAnywhere)\n    TSubclassOf<class APlayerProjectile> PlayerProjectile;\n    ```", "```cpp\n    void SpawnProjectile();\n    ```", "```cpp\n    #include \"PlayerProjectile.h\"\n    #include \"Engine/World.h\"\n    #include \"Components/SphereComponent.h\"\n    ```", "```cpp\n    void ASuperSideScroller_Player::SpawnProjectile()\n    {\n    }\n    ```", "```cpp\n    void ASuperSideScroller_Player::SpawnProjectile()\n    {\n    \u00a0\u00a0if(PlayerProjectile)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```cpp\n    void ASuperSideScroller_Player::SpawnProjectile()\n    {\n    \u00a0\u00a0if(PlayerProjectile)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0UWorld* World = GetWorld();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (World)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```cpp\n    void ASuperSideScroller_Player::SpawnProjectile()\n    {\n    \u00a0\u00a0if(PlayerProjectile)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0UWorld* World = GetWorld();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (World)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0FActorSpawnParameters SpawnParams;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0SpawnParams.Owner = this; \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```cpp\n    FVector SpawnLocation = this->GetMesh()-  >GetSocketLocation(FName(\"ProjectileSocket\"));\n    FRotator Rotation = GetActorForwardVector().Rotation();\n    ```", "```cpp\n    APlayerProjectile* Projectile = World-  >SpawnActor<APlayerProjectile>(PlayerProjectile, SpawnLocation,   Rotation, SpawnParams);\n    ```", "```cpp\n    if (Projectile)\n    {\n    \u00a0\u00a0Projectile->CollisionComp->    MoveIgnoreActors.Add(SpawnParams.Owner);\n    }\n    ```", "```cpp\n    #include \"Anim_ProjectileNotify.h\"\n    void UAnim_ProjectileNotify::Notify(USkeletalMeshComponent*   MeshComp, UAnimSequenceBase* Animation)\n    {\n    \u00a0\u00a0UE_LOG(LogTemp, Warning, TEXT(\"Throw Notify\"));\n    }\n    ```", "```cpp\n    #include \"Components/SkeletalMeshComponent.h\"\n    #include \"SuperSideScroller/SuperSideScroller_Player.h\"\n    ```", "```cpp\n    ASuperSideScroller_Player* Player =   Cast<ASuperSideScroller_Player>(MeshComp->GetOwner());\n    ```", "```cpp\n    if (Player)\n    {\n    \u00a0\u00a0Player->SpawnProjectile();\n    }\n    ```", "```cpp\nbool AActor::Destroy( bool bNetForce, bool bShouldModifyLevel )\n```", "```cpp\nWorld->DestroyActor( this, bNetForce, bShouldModifyLevel );\n```", "```cpp\n    public:\n    \u00a0\u00a0void DestroyEnemy();\n    ```", "```cpp\n    void AEnemyBase::DestroyEnemy()\n    {\n    }\n    ```", "```cpp\n    void AEnemyBase::DestroyEnemy()\n    {\n    \u00a0\u00a0Destroy();\n    }\n    ```", "```cpp\n    void ExplodeProjectile();\n    ```", "```cpp\n    void APlayerProjectile::ExplodeProjectile()\n    {\n    }\n    ```", "```cpp\n    void APlayerProjectile::ExplodeProjectile()\n    {\n    \u00a0\u00a0Destroy();\n    }\n    ```", "```cpp\nUGameplayStatics::SpawnEmitterAtLocation\nUGameplayStatics:SpawnSoundAtLocation\n```", "```cpp\n    A_Guardian_Death_Cue\n    P_Goblin_Death\n    ```", "```cpp\n    UPROPERTY(EditAnywhere, BlueprintReadOnly)\n    class UParticleSystem* DeathEffect;\n    ```", "```cpp\n    UPROPERTY(EditAnywhere, BlueprintReadOnly)\n    class USoundBase* DeathSound;\n    ```", "```cpp\n    #include \"Kismet/GameplayStatics.h\"\n    #include \"Engine/World.h\"\n    ```", "```cpp\n    Destroy();\n    ```", "```cpp\n    UWorld* World = GetWorld();\n    ```", "```cpp\n    if(World)\n    {\n    }\n    ```", "```cpp\n    if(DeathEffect)\n    {\n    \u00a0\u00a0\u00a0\u00a0UGameplayStatics::SpawnEmitterAtLocation(World,       DeathEffect, GetActorTransform());\n    }\n    ```", "```cpp\n    if(DeathSound)\n    {\n    \u00a0\u00a0\u00a0\u00a0UGameplayStatics::SpawnSoundAtLocation(World,       DeathSound, GetActorLocation());\n    }\n    ```", "```cpp\n    P_Env_Fire_Grate_01\n    A_Ambient_Fire01_Cue\n    ```", "```cpp\n    UPROPERTY(VisibleDefaultsOnly, Category = Sound)\n    class UAudioComponent* ProjectileMovementSound;\n    ```", "```cpp\n    UPROPERTY(VisibleDefaultsOnly, Category = Projectile)\n    class UParticleSystemComponent* ProjectileEffect;\n    ```", "```cpp\n    #include \"Components/AudioComponent.h\"\n    #include \"Engine/Classes/Particles/ParticleSystemComponent.h\"\n    ```", "```cpp\n    ProjectileMovementSound = CreateDefaultSubobject<UAudioComponent>  (TEXT(\"ProjectileMovementSound\"));\n    \u00a0\u00a0ProjectileMovementSound->AttachToComponent(RootComponent,   FAttachmentTransformRules::KeepWorldTransform);\n    ```", "```cpp\n    ProjectileEffect = CreateDefaultSubobject<UParticleSystemComponent>(TEXT(\"Projectile   Effect\"));\n    ProjectileEffect->AttachToComponent(RootComponent,   FAttachmentTransformRules::KeepWorldTransform);\n    ```", "```cpp\n    P_Skill_001\n    A_Ability_FireballCast_Cue\n    ```", "```cpp\n    (X=0.000000,Y=100.000000,Z=0.000000)\n    ```", "```cpp\n    (X=0.500000,Y=0.500000,Z=0.500000)\n    ```"]