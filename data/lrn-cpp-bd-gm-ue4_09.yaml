- en: Templates and Commonly-Used Containers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模板和常用容器
- en: In [Chapter 7](9c9ba953-362d-4409-b6d5-3a3361238bce.xhtml), *Dynamic Memory
    Allocation*, we spoke about how you would use dynamic memory allocation if you
    want to create a new array whose size isn't known at compile time. Dynamic memory
    allocations are of the form `int * array = new int[ number_of_elements ]`.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第7章](9c9ba953-362d-4409-b6d5-3a3361238bce.xhtml)中，*动态内存分配*，我们讨论了如果要创建一个在编译时大小未知的新数组，您将如何使用动态内存分配。动态内存分配的形式为`int
    * array = new int[ number_of_elements ]`。
- en: You also saw that dynamic allocations using the `new[]` keyword require you
    to call `delete[]` on the array later, otherwise you'd have a memory leak. Having
    to manage memory this way is hard work.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 您还看到，使用`new[]`关键字进行动态分配需要稍后调用数组上的`delete[]`，否则将会出现内存泄漏。以这种方式管理内存是一项艰巨的工作。
- en: Is there a way to create an array of a dynamic size and have the memory automatically
    managed for you by C++? The answer is yes. There are C++ object types (commonly
    called containers) that handle dynamic memory allocations and deallocations automatically.
    UE4 provides a couple of container types to store your data in dynamically resizable
    collections.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 是否有一种方法可以创建一个动态大小的数组，并且C++可以自动为您管理内存？答案是肯定的。有C++对象类型（通常称为容器）可以自动处理动态内存分配和释放。UE4提供了一些容器类型，用于在动态可调整大小的集合中存储数据。
- en: There are two different groups of template containers. There is the UE4 family
    of containers (beginning with `T*`) and the C++ **Standard Template Library**
    (**STL**) family of containers. There are some differences between the UE4 containers
    and the C++ STL containers, but the differences are not major. UE4 container sets
    are written with game performance in mind. C++ STL containers also perform well,
    and their interfaces are a little more consistent (consistency in an API is something
    that you'd prefer). Which container set you use is up to you. However, it is recommended
    that you use the UE4 container set since it guarantees that you won't have cross-platform
    issues when you try to compile your code.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 有两组不同的模板容器。有UE4容器系列（以`T*`开头）和C++ **标准模板库**（**STL**）容器系列。UE4容器和C++ STL容器之间存在一些差异，但这些差异并不重大。UE4容器集是为游戏性能而编写的。C++
    STL容器也表现良好，它们的接口更加一致（API的一致性是您所期望的）。您可以自行选择使用哪种容器集。但是，建议您使用UE4容器集，因为它保证在尝试编译代码时不会出现跨平台问题。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Debugging the output in UE4
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在UE4中调试输出
- en: Templates and containers
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模板和容器
- en: UE4's TArray
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UE4的TArray
- en: TSet and TMap
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TSet和TMap
- en: C++ STL versions of commonly-used containers
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 常用容器的C++ STL版本
- en: Debugging the output in UE4
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在UE4中调试输出
- en: All of the code in this chapter (as well as in the later chapters) will require
    you to work in a UE4 project. For the purpose of testing `TArray`, I created a
    basic code project called `TArrays`. In the `ATArraysGameMode::ATArraysGameMode`
    constructor, I am using the debug output feature to print text to the console.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的所有代码（以及后面的章节）都需要您在UE4项目中工作。为了测试`TArray`，我创建了一个名为`TArrays`的基本代码项目。在`ATArraysGameMode::ATArraysGameMode`构造函数中，我使用调试输出功能将文本打印到控制台。
- en: 'Here''s how the code in `TArraysGameMode.cpp` will look:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`TArraysGameMode.cpp`中的代码：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Make sure you also add the function to the `.h` file. If you compile and run
    this project, you will see the debug text in the top-left corner of your game
    window when you start the game. You can use debug output to see the internals
    of your program at any time. Just make sure that the `GEngine` object exists at
    the time of debugging the output. The output of the preceding code is shown in
    the following screenshot (note that you may need to run it as a standalone game
    to see it):'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您还将函数添加到`.h`文件中。如果编译并运行此项目，您将在启动游戏时在游戏窗口的左上角看到调试文本。您可以使用调试输出随时查看程序的内部。只需确保在调试输出时`GEngine`对象存在。上述代码的输出显示在以下截图中（请注意，您可能需要将其作为独立游戏运行才能看到）：
- en: '![](img/e8c01c25-6466-44de-bba4-a0db06c1f05d.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e8c01c25-6466-44de-bba4-a0db06c1f05d.png)'
- en: Templates and containers
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模板和容器
- en: Templates are a special type of object. A template object lets you specify what
    type of data it should expect. For example, as you'll see soon, you could run
    a `TArray<T>` variable. This is an example of a template.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 模板是一种特殊类型的对象。模板对象允许您指定它应该期望的数据类型。例如，很快您将看到，您可以运行一个`TArray<T>`变量。这是一个模板的例子。
- en: To understand what a `TArray<T>` variable is, you first have to know what the
    `<T>` option between the angle brackets stands for. The `<T>` option means that
    the type of data stored in the array is a variable. Do you want an array of `int`?
    Then create a `TArray<int>` variable. A `TArray` variable of `double`? Create
    a `TArray<double>` variable.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解`TArray<T>`变量是什么，首先必须知道尖括号之间的`<T>`选项代表什么。`<T>`选项表示数组中存储的数据类型是一个变量。您想要一个`int`数组吗？然后创建一个`TArray<int>`变量。`double`的`TArray`变量？创建一个`TArray<double>`变量。
- en: So in general, wherever `<T>` appears, you can plug in a C++ data type of your
    choice.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，通常情况下，无论何时出现`<T>`，您都可以插入您选择的C++数据类型。
- en: Containers are different structures that are meant for storing objects. Templates
    are particularly useful for these because they can be used to store many different
    types of objects. You may want to store numbers with int or float, strings, or
    different types of game objects. Imagine if you had to write a new class for every
    type of object you want to store. Fortunately, you don't have to. Templates let
    one class be flexible enough to handle any objects you want to store in it.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 容器是用于存储对象的不同结构。模板对此特别有用，因为它们可以用于存储许多不同类型的对象。您可能希望使用int或float存储数字，字符串或不同类型的游戏对象。想象一下，如果您必须为您想要存储的每种对象类型编写一个新类。幸运的是，您不必这样做。模板让一个类足够灵活，可以处理您想要存储在其中的任何对象。
- en: Your first template
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你的第一个模板
- en: Creating templates is an advanced topic, and you could go years without having
    to create your own (although you'll use the standard ones all the time). But it
    can be helpful to see what one looks like just to help you understand what's going
    on behind the scenes.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 创建模板是一个高级主题，您可能多年不需要创建自己的模板（尽管您会一直使用标准模板）。但是，看看一个模板是什么样子可能有助于您了解幕后发生了什么。
- en: 'Imagine you want to create a number template that will let you use an int,
    float, or another type. You can do something like this:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，您想创建一个数字模板，让您可以使用int、float或其他类型。您可以做类似于这样的事情：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The first section is the class itself. As you can see, you want to use the type
    anywhere in the template, you make the class and you will use `T` instead of specifying
    a particular type. You can also use templates to specify the values sent to functions.
    In this case, the final section lets you add another number and return the sum.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 第一部分是类本身。正如您所看到的，您想在模板中的任何地方使用类型，您制作类并使用`T`而不是指定特定类型。您还可以使用模板来指定发送到函数的值。在这种情况下，最后一部分允许您添加另一个数字并返回总和。
- en: You can even make things simpler by overloading the + operator so you can add
    these numbers like you would any standard type. That's through something called
    operator overloading.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 您甚至可以通过重载+运算符来简化事情，以便您可以像使用任何标准类型一样添加这些数字。这是通过一种称为运算符重载的东西。
- en: UE4's TArray<T>
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: UE4的TArray<T>
- en: TArrays are UE4's Version of a dynamic array, built using templates. Like other
    dynamic arrays we discussed, you don't have to worry about managing the array
    size yourself. Let's move on and look at this with an example.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: TArrays是UE4的动态数组版本，使用模板构建。与我们讨论过的其他动态数组一样，您无需担心自己管理数组大小。让我们继续并通过一个示例来看看这个。
- en: An example that uses TArray<T>
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用TArray<T>的示例
- en: A `TArray<int>` variable is just an array of `int`. A `TArray<Player*>` variable
    will be an array of `Player*` pointers. An array is dynamically resizable, and
    elements can be added at the end of the array after its creation.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`TArray<int>`变量只是一个`int`数组。`TArray<Player*>`变量将是一个`Player*`指针数组。数组是动态可调整大小的，可以在创建后在数组末尾添加元素。'
- en: 'To create a `TArray<int>` variable, all you have to do is use the normal variable
    allocation syntax:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个`TArray<int>`变量，您只需使用正常的变量分配语法：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Changes to the `TArray` variable are done using member functions. There are
    a couple of member functions that you can use on a `TArray` variable:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 对`TArray`变量的更改是使用成员函数完成的。有几个成员函数可以在`TArray`变量上使用：
- en: 'The first member function that you need to know about is how you add a value
    to the array, as shown in the following code:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要了解的第一个成员函数是如何向数组添加值，如下面的代码所示：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'These four lines of code will produce the array value in memory, as shown in
    the following figure:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 以下四行代码将产生内存中的数组值，如下图所示：
- en: '![](img/8f29a440-73b4-4596-9a09-342c3fad4a2e.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8f29a440-73b4-4596-9a09-342c3fad4a2e.png)'
- en: When you call `array.Add( number )`, the new number goes to the end of the array.
    Since we added the numbers **1**, **10**, **5**, and **20** to the array, in this
    order, that is the order in which they will go into the array.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 当您调用`array.Add(number)`时，新数字将添加到数组的末尾。由于我们按顺序向数组添加了数字**1**、**10**、**5**和**20**，因此它们将按照这个顺序进入数组。
- en: 'If you want to insert a number in the front or middle of the array, this is
    also possible. All you have to do is use the `array.Insert(value, index)` function,
    as shown in the following line of code:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要在数组的前面或中间插入一个数字，也是可能的。您只需使用`array.Insert(value, index)`函数，如下面的代码所示：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This function will push the number `9` into position `0` of the array (at the
    front). This means that the rest of the array elements will be offset to the right,
    as shown in the following figure:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数将数字`9`推入数组的位置`0`（在前面）。这意味着数组的其余元素将向右偏移，如下图所示：
- en: '![](img/53088c53-3664-4a96-9f42-6fa30b9713f2.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/53088c53-3664-4a96-9f42-6fa30b9713f2.png)'
- en: 'We can insert another element into position `2` of the array using the following
    line of code:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下代码将另一个元素插入到数组的位置`2`：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This function will rearrange the array, as shown in the following diagram:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数将重新排列数组，如下图所示：
- en: '![](img/3b989010-02d1-4356-8a5e-e5bca807c402.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3b989010-02d1-4356-8a5e-e5bca807c402.png)'
- en: If you insert a number into a position in the array that is out of bounds (it
    doesn't exist), UE4 will crash. So, be careful not to do that. You can use `Add`
    to add a new item instead.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在数组中插入一个超出边界的位置的数字（它不存在），UE4将崩溃。所以，要小心不要这样做。您可以使用`Add`来添加一个新项目。
- en: Iterating a TArray
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 迭代TArray
- en: 'You can iterate (walk over) the elements of a `TArray` variable in two ways:
    using integer-based indexing or using an iterator. I will show you both ways here.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以以两种方式迭代（遍历）`TArray`变量的元素：使用基于整数的索引或使用迭代器。我将在这里向您展示两种方法。
- en: The vanilla-for-loop-and-square-brackets notation
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 普通for循环和方括号表示法
- en: 'Using integers to index the elements of an array is sometimes called a vanilla `for`
    loop. The elements of the array can be accessed using `array[ index ]`, where
    `index` is the numerical position of the element in the array:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 使用整数来索引数组元素有时被称为普通的`for`循环。可以使用`array[index]`来访问数组的元素，其中`index`是数组中元素的数字位置：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Iterators
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 迭代器
- en: 'You can also use an iterator to walk over the elements of the array one by
    one, as shown in the following code:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用迭代器逐个遍历数组的元素，如下面的代码所示：
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Iterators are pointers into the array. Iterators can be used to inspect or
    change values inside the array. An example of an iterator is shown in the following
    figure:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 迭代器是数组中的指针。迭代器可用于检查或更改数组中的值。迭代器的示例如下图所示：
- en: '![](img/47aabe5d-01fc-4220-9f22-726d1d5595db.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/47aabe5d-01fc-4220-9f22-726d1d5595db.png)'
- en: An iterator is an external object that can look into and inspect the values
    of an array. Doing `++it` moves the iterator to examine the next element.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 迭代器是一个外部对象，可以查看和检查数组的值。执行`++it`将迭代器移动到检查下一个元素。
- en: An iterator must be suitable for the collection it is walking through. To walk
    through a `TArray<int>` variable, you need a `TArray<int>::TIterator` type iterator.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 迭代器必须适用于它正在遍历的集合。要遍历`TArray<int>`变量，您需要一个`TArray<int>::TIterator`类型的迭代器。
- en: We use `*` to look at the value behind an iterator. In the preceding code, we
    used `(*it)` to get the integer value from the iterator. This is called dereferencing.
    To dereference an iterator means to look at its value.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`*`来查看迭代器后面的值。在上述代码中，我们使用`(*it)`从迭代器中获取整数值。这称为解引用。解引用迭代器意味着查看其值。
- en: The `++it` operation that happens at the end of each iteration of the `for`
    loop increments the iterator, moving it on to point to the next element in the
    list.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`for`循环的每次迭代结束时发生的`++it`操作会递增迭代器，将其移动到指向列表中的下一个元素。'
- en: 'Insert the code into the program and try it out now. Here''s the example program
    we have created so far using `TArray` (all in the `ATArraysGameMode::ATArraysGameMode()`
    constructor):'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 将代码插入程序并立即尝试。以下是我们迄今为止使用`TArray`创建的示例程序（全部在`ATArraysGameMode::ATArraysGameMode()`构造函数中）：
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The output of the preceding code is shown in the following screenshot:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是上述代码的输出：
- en: '![](img/657541c8-f2fd-4aa0-ba33-285189680049.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/657541c8-f2fd-4aa0-ba33-285189680049.png)'
- en: Determining whether an element is in the TArray
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 确定元素是否在TArray中
- en: 'Searching our UE4 containers is easy. It is commonly done using the `Find`
    member function. Using the array we created previously, we can find the index
    of the value of `10` by typing the following line of code:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索我们的UE4容器很容易。通常使用`Find`成员函数来完成。使用我们之前创建的数组，我们可以通过输入以下代码来找到值为`10`的索引：
- en: '[PRE9]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: TSet<T>
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TSet<T>
- en: A `TSet<int>` variable stores a set of integers. A `TSet<FString>` variable
    stores a set of strings. The main difference between `TSet` and `TArray` is that
    `TSet` does not allow duplicates; all the elements inside a `TSet` are guaranteed
    to be unique. A `TArray` variable doesn't mind duplicates of the same elements.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`TSet<int>`变量存储一组整数。`TSet<FString>`变量存储一组字符串。`TSet`和`TArray`之间的主要区别在于，`TSet`不允许重复；`TSet`中的所有元素都保证是唯一的。`TArray`变量不介意相同元素的重复。'
- en: 'To add numbers to `TSet`, simply call `Add`. Here''s an example:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 要向`TSet`添加数字，只需调用`Add`。以下是一个例子：
- en: '[PRE10]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This is how `TSet` will look:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`TSet`将如下所示：'
- en: '![](img/740b0648-f23d-4b33-887c-c11c86a96683.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/740b0648-f23d-4b33-887c-c11c86a96683.png)'
- en: Duplicate entries of the same value in  `TSet` will not be allowed. Notice how
    the entries in a `TSet` aren't numbered, as they were in a `TArray`; you can't
    use square brackets to access an entry in `TSet` arrays.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`TSet`中相同值的重复条目将不被允许。请注意，`TSet`中的条目没有编号，就像`TArray`中一样；您不能使用方括号来访问`TSet`数组中的条目。'
- en: Iterating a TSet
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 迭代TSet
- en: 'In order to look into a `TSet` array, you must use an iterator. You can''t
    use the square brackets notation to access the elements of a `TSet`:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看`TSet`数组，必须使用迭代器。您不能使用方括号表示法来访问`TSet`的元素：
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Intersecting TSet arrays
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交集TSet数组
- en: 'The `TSet` array has two special functions that the `TArray` variable does
    not. The intersection of two `TSet` arrays is basically the elements they have
    in common. If we have two `TSet` arrays, such as `X` and `Y`, and we intersect
    them, the result will be a third, new `TSet` array that contains only the elements
    common between them. Look at the following example:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`TSet`数组有两个`TArray`变量没有的特殊函数。两个`TSet`数组的交集基本上是它们共有的元素。如果我们有两个`TSet`数组，比如`X`和`Y`，并且我们对它们进行交集运算，结果将是一个第三个新的`TSet`数组，其中只包含它们之间的共同元素。看下面的例子：'
- en: '[PRE12]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The common elements between `X` and `Y` will then just be the element `2`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`X`和`Y`之间的共同元素将只是元素`2`。'
- en: Unioning TSet arrays
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 并集TSet数组
- en: Mathematically, the union of two sets is when you basically insert all the elements
    into the same set. Since we are talking about sets here, there won't be any duplicates.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 从数学上讲，两个集合的并集是指将所有元素插入到同一个集合中。由于我们在这里讨论的是集合，所以不会有重复项。
- en: 'If we take the `X` and `Y` sets from the previous example and create a union,
    we will get a new set, as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们从前面的示例中获取`X`和`Y`集合并创建一个并集，我们将得到一个新的集合，如下所示：
- en: '[PRE13]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Finding in TSet arrays
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在TSet数组中查找
- en: You can determine whether an element is inside a `TSet` or not by using the
    `Find()` member function on the set. `TSet` will return a pointer to the entry
    in the `TSet` that matches your query if the element exists in the `TSet`, or
    it will return `NULL` if the element you're asking for does not exist in the `TSet`.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在集合上使用`Find()`成员函数来确定元素是否在`TSet`中。如果元素存在于`TSet`中，`TSet`将返回与您的查询匹配的`TSet`中的条目的指针，如果您要查询的元素不存在于`TSet`中，它将返回`NULL`。
- en: TMap<T,S>
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TMap<T,S>
- en: '`TMap<T,S>` creates a table of sorts in the RAM. `TMap` represents a mapping
    of the keys at the left to the values on the right-hand side. You can visualize
    `TMap` as a two-column table, with keys in the left column and values in the right
    column.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`TMap<T,S>`在RAM中创建了一种表。`TMap`表示左侧键到右侧值的映射。您可以将`TMap`视为一个两列表，左列中是键，右列中是值。'
- en: A list of items for the player's inventory
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 玩家库存的物品列表
- en: 'For example, say we wanted to create a C++ data structure in order to store
    a list of items for the player''s inventory. On the left-hand side of the table
    (the keys), we''d have `FString` for the item''s name. On the right-hand side
    (the values), we''d have an `int` for the quantity of that item, as shown in the
    following table:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们想要创建一个C++数据结构，以便存储玩家库存的物品列表。在表的左侧（键）上，我们将使用`FString`表示物品的名称。在右侧（值）上，我们将使用`int`表示该物品的数量，如下表所示：
- en: '| Item (key) | Quantity (value) |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| 项目（键） | 数量（值） |'
- en: '| `apples` | `4` |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| `apples` | `4` |'
- en: '| `donuts` | `12` |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| `donuts` | `12` |'
- en: '| `swords` | `1` |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| `swords` | `1` |'
- en: '| `shields` | `2` |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| `shields` | `2` |'
- en: 'To do this in code, we''d simply use the following:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 要在代码中执行此操作，我们只需使用以下代码：
- en: '[PRE14]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Once you have created your `TMap`, you can access values inside the `TMap` using
    square brackets and by passing a key between the brackets. For example, in the
    `items` map in the preceding code, `items[ "apples" ]` is `4`.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了`TMap`之后，你可以使用方括号和在方括号之间传递键来访问`TMap`中的值。例如，在前面代码中的`items`映射中，`items[ "apples"
    ]`是`4`。
- en: UE4 will crash if you use square brackets to access a key that doesn't exist
    in the map yet, so be careful! The C++ STL does not crash if you do this.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用方括号访问地图中尚不存在的键，UE4会崩溃，所以要小心！C++ STL如果这样做不会崩溃。
- en: Iterating a TMap
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 迭代TMap
- en: 'In order to iterate a `TMap`, you use an iterator as well:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 为了迭代`TMap`，你也需要使用迭代器：
- en: '[PRE15]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '`TMap` iterators are slightly different from `TArray` or `TSet` iterators.
    A `TMap` iterator contains both a `Key` and a `Value`. We can access the key with
    `it->Key` and the value inside the `TMap` with `it->Value`.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`TMap`迭代器与`TArray`或`TSet`迭代器略有不同。`TMap`迭代器包含`Key`和`Value`。我们可以使用`it->Key`访问键，并使用`it->Value`访问`TMap`中的值。'
- en: 'Here''s an example:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个例子：
- en: '![](img/1f66537a-711e-4291-aae6-4fa91483e851.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1f66537a-711e-4291-aae6-4fa91483e851.png)'
- en: TLinkedList/TDoubleLinkedList
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TLinkedList/TDoubleLinkedList
- en: When you work with a TArray, each item has an index in numerical order, and
    array data is generally stored the same way, so each entry is right next to the
    one before it in memory too. But what if you need to put a new item somewhere
    in the middle (for example, if the array is filled with strings in alphabetical
    order)?
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用TArray时，每个项目都有一个按数字顺序排列的索引，数组数据通常以相同的方式存储，因此每个条目在内存中都紧邻前一个条目。但是，如果你需要在中间某个位置放置一个新项目（例如，如果数组中填充了按字母顺序排列的字符串），该怎么办呢？
- en: Since the items are next to each other, the one next to it will have to be moved
    over to make room. But to do that, the one next to that will also have to be moved
    over. This will continue until the end of the array, when it finally gets to memory
    it can use without moving something else. As you might imagine, this could get
    very slow, especially if you're doing it a lot.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 由于项目是相邻的，旁边的项目将不得不移动以腾出空间。但是为了做到这一点，旁边的那个也将不得不移动。这将一直持续到数组的末尾，当它最终到达可以在不移动其他东西的内存时。你可以想象，这可能会变得非常慢，特别是如果你经常这样做的话。
- en: 'This is where linked lists come in. A linked list doesn''t have any indices.
    A linked list has nodes that contain the items and give you access to the first
    node on the list. That node has a pointer to the next node on the list, which
    you can get by calling `Next()`. Then, you can call `Next()` on that one to get
    the one after it. It looks something like this:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是链表派上用场的地方。链表没有任何索引。链表有包含项目并让你访问列表上第一个节点的节点。该节点有指向列表上下一个节点的指针，你可以通过调用`Next()`来获取。然后，你可以在那个节点上调用`Next()`来获取它后面的节点。它看起来像这样：
- en: '![](img/d1ab445b-147b-4ff9-8f86-bbf2bdcc9859.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d1ab445b-147b-4ff9-8f86-bbf2bdcc9859.png)'
- en: 'As you might guess, this could get slow if you''re looking for an item at the
    end of the list. But at the same time, you might not be searching the list that
    often, and might instead be adding new items somewhere in the middle. Adding an
    item in the middle is a lot faster. Say you''re trying to insert a new node between
    **Node 1** and **Node 2**, like this:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会猜到，如果你在列表末尾寻找项目，这可能会变得很慢。但与此同时，你可能并不经常搜索列表，而是可能在中间添加新项目。在中间添加项目要快得多。比如，你想在**Node
    1**和**Node 2**之间插入一个新节点，就像这样：
- en: '![](img/edb6efd2-6025-4a81-b93c-aaf3f7fecc5a.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/edb6efd2-6025-4a81-b93c-aaf3f7fecc5a.png)'
- en: 'There''s no need to move things around in memory to make room this time. Instead,
    to insert an item after another one, get the node that `Next()` points to from
    **Node 1** (**Node 2**). Set the new node to point to that one (**Node 2**). Then,
    set Node 1 to point to the new node. It should now look something like this:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这次不需要在内存中移动东西来腾出空间。相反，要在另一个项目后插入一个项目，获取`Next()`指向的节点从**Node 1**（**Node 2**）开始。将新节点设置为指向该节点（**Node
    2**）。然后，将Node 1设置为指向新节点。现在它应该看起来像这样：
- en: '![](img/7286df8d-4f4e-498c-be18-19b9bb7fac08.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7286df8d-4f4e-498c-be18-19b9bb7fac08.png)'
- en: And you're done!
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你就完成了！
- en: So what if you are going to be spending more time looking for items toward the
    end of the list? That is where `TDoubleLinkedList` comes in handy. Doubly-linked
    lists can give you either the first node in the list or the last node in the list.
    Each node also has pointers to both the next node and the previous node. You can
    access these using `GetNextLink()` and `GetPrevLink()`. So, you have the choice
    to go forward or backward through the list, or even to do both and meet in the
    middle.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，如果你将花费更多时间查找列表末尾的项目怎么办？这就是`TDoubleLinkedList`派上用场的地方。双向链表可以给你列表中的第一个节点或最后一个节点。每个节点还有指向下一个节点和上一个节点的指针。你可以使用`GetNextLink()`和`GetPrevLink()`来访问这些。因此，你可以选择向前或向后遍历列表，甚至两者兼而有之，最终相遇在中间。
- en: Now, you may ask yourself, *"Why does it matter when I can just use TArray and
    not worry about what it's doing behind the scenes?"* For one thing, professional
    game programmers always have to worry about speed. Every advance in computers
    and game consoles is matched by more and better graphics, and other advances that
    slow things right back down again. So, optimizing speed is always important.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可能会问自己，“为什么要在我可以只使用TArray而不用担心它在幕后做什么的情况下？”首先，专业的游戏程序员总是要担心速度。计算机和游戏机的每一次进步都伴随着更多和更好的图形以及其他使事情变得更慢的进步。因此，优化速度总是很重要的。
- en: 'Plus, there''s the other practical reason: I can tell you from experience that
    there are people in this industry who will turn you down in job interviews if
    you don''t use linked lists. Programmers all have their own preferred ways of
    doing things, so you should always be familiar with anything that might come up.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，还有另一个实际的原因：我可以告诉你，根据我的经验，这个行业中有些人会在面试中拒绝你，如果你不使用链表。程序员都有自己偏好的做事方式，所以你应该熟悉可能出现的任何事情。
- en: C++ STL versions of commonly-used containers
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常用容器的C++ STL版本
- en: Now, we'll cover the C++ STL versions of a few containers. STL is the standard
    template library, which is shipped with most C++ compilers. The reason why I want
    to cover these STL versions is that they behave somewhat differently than the
    UE4 versions of the same containers. In some ways, their behavior is very good,
    but game programmers often complain of STL having performance issues. In particular,
    I want to cover STL's `set` and `map` containers, but I will also cover the commonly-used
    `vector`.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将介绍几种容器的C++ STL版本。STL是标准模板库，大多数C++编译器都附带。我想介绍这些STL版本的原因是它们的行为与相同容器的UE4版本有些不同。在某些方面，它们的行为非常好，但游戏程序员经常抱怨STL存在性能问题。特别是，我想介绍STL的`set`和`map`容器，但我也会介绍常用的`vector`。
- en: If you like STL's interface but want better performance, there is a well-known
    reimplementation of the STL library by Electronic Arts called EASTL, which you
    can use. It provides the same functionality as STL but is implemented with better
    performance (basically by doing things such as eliminating bounds checking). It
    is available on GitHub at [https://github.com/paulhodge/EASTL](https://github.com/paulhodge/EASTL).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您喜欢STL的接口但希望获得更好的性能，有一个由艺电重新实现的STL库，名为EASTL，您可以使用。它提供与STL相同的功能，但实现了更好的性能（基本上是通过消除边界检查等方式）。它可以在GitHub上找到[https://github.com/paulhodge/EASTL](https://github.com/paulhodge/EASTL)。
- en: The C++ STL set
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: C++ STL set
- en: A C++ set is a bunch of items that are unique and sorted. The good feature about
    the STL `set` is that it keeps the set elements sorted. A quick and dirty way
    to sort a bunch of values is actually to just shove them into the same `set`.
    The `set` will take care of the sorting for you.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: C++ set是一堆独特且排序的项目。STL `set`的好处是它保持了集合元素的排序。快速而粗糙的排序一堆值的方法实际上就是将它们塞入同一个`set`中。`set`会为您处理排序。
- en: 'We can return to a simple C++ console application for the use of sets. To use
    the C++ STL set, you need to include `<set>`, as shown here:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以回到一个简单的C++控制台应用程序来使用集合。要使用C++ STL set，您需要包含`<set>`，如下所示：
- en: '[PRE16]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The following is the output of the preceding code:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前面代码的输出：
- en: '[PRE17]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The duplicate `7` is filtered out, and the elements are kept in increasing order
    inside the `set`. The way we iterate over the elements of an STL container is
    similar to UE4's `TSet` array. The `intSet.begin()` function returns an iterator
    that points to the head of `intSet`.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 重复的`7`被过滤掉，并且元素在`set`中保持增序。我们遍历STL容器的方式类似于UE4的`TSet`数组。`intSet.begin()`函数返回一个指向`intSet`头部的迭代器。
- en: 'The condition to stop iterating is when it becomes `intSet.end()`. `intSet.end()`
    is actually one position past the end of the `set`, as shown in the following
    figure:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 停止迭代的条件是当它变为`intSet.end()`。`intSet.end()`实际上是`set`末尾的下一个位置，如下图所示：
- en: '![](img/2143e060-1cc8-4ded-a163-8a2aca5fb9be.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2143e060-1cc8-4ded-a163-8a2aca5fb9be.png)'
- en: Finding an element in a <set>
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在<set>中查找元素
- en: 'To find an element inside an STL `set`, we can use the `find()` member function. If
    the item we''re looking for turns up in the `set`, we get an iterator that points
    to the element we were searching for. If the item that we were looking for is
    not in the `set`, we get back `set.end()` instead, as shown here:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 要在STL `set`中查找元素，我们可以使用`find()`成员函数。如果我们要查找的项目出现在`set`中，我们将得到一个指向我们正在搜索的元素的迭代器。如果我们要查找的项目不在`set`中，我们将得到`set.end()`，如下所示：
- en: '[PRE18]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Exercise
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: Ask the user for a set of three unique names. Take each name in, one by one,
    and then print them in a sorted order. If the user repeats a name, ask them for
    another one until you get to three.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 要求用户提供三个唯一名称的集合。逐个输入每个名称，然后按排序顺序打印它们。如果用户重复名称，请要求他们再输入一个，直到达到三个为止。
- en: Solution
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'The solution for the preceding exercise can be found using the following code:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 前面练习的解决方案可以使用以下代码找到：
- en: '[PRE19]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The C++ STL map
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: C++ STL map
- en: The C++ STL `map` object is a lot like UE4's `TMap` object. The one thing it
    does that `TMap` does not is maintain a sorted order inside the map as well. Sorting
    introduces an additional cost, but if you want your map to be sorted, opting for
    the STL Version might be a good choice.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: C++ STL `map`对象很像UE4的`TMap`对象。它做的一件事是`TMap`不会在地图内部保持排序顺序。排序会引入额外的成本，但如果您希望地图排序，选择STL版本可能是一个不错的选择。
- en: 'To use the C++ STL `map` object, we include `<map>`. In the following example
    program, we populate a map of items with some key-value pairs:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用C++ STL `map`对象，我们包括`<map>`。在下面的示例程序中，我们使用一些键值对填充了一个项目的映射：
- en: '[PRE20]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This is the output of the preceding program:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这是前面程序的输出：
- en: '[PRE21]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Notice how the iterator's syntax for an STL map is slightly different than that
    of `TMap`; we access the key using `it->first` and the value using `it->second`.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，STL map的迭代器语法与`TMap`略有不同；我们使用`it->first`访问键，使用`it->second`访问值。
- en: Notice how C++ STL also offers a bit of syntactic sugar over `TMap`; you can
    use square brackets to insert into the C++ STL `map`. You cannot use square brackets
    to insert into a `TMap`.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，C++ STL还为`TMap`提供了一些语法糖；您可以使用方括号插入到C++ STL `map`中。您不能使用方括号插入到`TMap`中。
- en: Finding an element in a <map>
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在<map>中查找元素
- en: You can search a map for a <`key`, `value`> pair using the STL map's `find`
    member function. You generally search by `key` and it'll give you the value for
    that `key`.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用STL map的`find`成员函数在map中搜索<`key`，`value`>对。通常通过`key`进行搜索，它会给您该`key`的值。
- en: Exercise
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: Ask the user to enter five items and their quantities into an empty `map`. Print
    the results in sorted order (that is, alphabetically or lowest to highest in the
    case of numbers).
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 要求用户输入五个项目及其数量到空`map`中。以排序顺序打印结果（即按字母顺序或按数字顺序从低到高）。
- en: Solution
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'The solution for the preceding exercise uses the following code:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 前面练习的解决方案使用以下代码：
- en: '[PRE22]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In this solution code, we start by creating `map<string, int> items` to store
    all the items we're going to take in. Ask the user for an item and a quantity;
    then, we save the `item` in the `items` map using the square brackets notation.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个解决方案代码中，我们首先创建`map<string, int> items`来存储我们要带入的所有物品。询问用户一个物品和数量；然后，我们使用方括号表示法将`item`保存在`items`映射中。
- en: C++ STL Vector
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: C++ STL Vector
- en: '`Vector` is the STL equivalent of `TArray`. It''s basically an array that manages
    everything behind the scenes, the same way `TArray` does. You may not need to
    use it when working in UE4, but it''s good to know in case someone else uses it
    in a project.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`Vector`是STL中`TArray`的等价物。它基本上是一个在幕后管理一切的数组，就像`TArray`一样。在使用UE4时可能不需要使用它，但了解它是很好的，以防其他人在项目中使用它。'
- en: Summary
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: UE4's containers and the C++ STL family of containers are both excellent for
    storing game data. Often, a programming problem can be simplified a lot by selecting
    the right type of data container.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: UE4的容器和C++ STL容器系列都非常适合存储游戏数据。选择合适的数据容器类型可以大大简化编程问题。
- en: In the next chapter, we will actually start to program the beginning of our
    game by keeping track of what the player is carrying and storing that information
    in a `TMap` object.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将通过跟踪玩家携带的物品并将这些信息存储在`TMap`对象中，实际开始编写游戏的开头部分。
