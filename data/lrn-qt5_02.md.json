["```cpp\nQT -= gui\nTARGET = cm-lib\nTEMPLATE = lib\nCONFIG += c++14\nDEFINES += CMLIB_LIBRARY\nINCLUDEPATH += source\n\nSOURCES += source/models/client.cpp\n\nHEADERS += source/cm-lib_global.h \\\n    source/models/client.h\n```", "```cpp\nQT += testlib\nQT -= gui\nTARGET = client-tests\nTEMPLATE = app\n\nCONFIG += c++14 \nCONFIG += console \nCONFIG -= app_bundle\n\nINCLUDEPATH += source \n\nSOURCES += source/models/client-tests.cpp\n```", "```cpp\nQT += qml quick\n\nTEMPLATE = app\n\nCONFIG += c++14 \n\nINCLUDEPATH += source \n\nSOURCES += source/main.cpp \n\nRESOURCES += views.qrc \n\n# Additional import path used to resolve QML modules in Qt Creator's code model \nQML_IMPORT_PATH = $$PWD\n```", "```cpp\n<RCC>\n    <qresource prefix=\"/\">\n        <file>views/main.qml</file>\n    </qresource>\n</RCC>\n```", "```cpp\nengine.load(QUrl(QStringLiteral(\"qrc:/views/main.qml\")));\n```", "```cpp\n<RCC>\n    <qresource prefix=\"/views\">\n        <file alias=\"MasterView.qml\">views/MasterView.qml</file>\n    </qresource>\n</RCC>\n```", "```cpp\nengine.load(QUrl(QStringLiteral(\"qrc:/views/MasterView.qml\")));\n```", "```cpp\n#ifndef MASTERCONTROLLER_H\n#define MASTERCONTROLLER_H\n#include <QObject>\n\n#include <cm-lib_global.h>\nnamespace cm {\nnamespace controllers {\nclass CMLIBSHARED_EXPORT MasterController : public QObject\n{\n    Q_OBJECT\npublic:\n    explicit MasterController(QObject* parent = nullptr);\n};\n\n}}\n\n#endif\n```", "```cpp\n#include \"master-controller.h\"\n\nnamespace cm {\nnamespace controllers {\nMasterController::MasterController(QObject* parent)\n    : QObject(parent)\n{\n}\n\n}}\n\n```", "```cpp\nINCLUDEPATH += source \\\n    ../cm-lib/source\n```", "```cpp\nLIBS += -L$$PWD/../../build-cm-Desktop_Qt_5_10_0_MinGW_32bit-Debug/cm-lib/debug -lcm-lib\n```", "```cpp\n#include <controllers/master-controller.h>\n```", "```cpp\nqmlRegisterType<cm::controllers::MasterController>(\"CM\", 1, 0, \"MasterController\");\n```", "```cpp\ncm::controllers::MasterController masterController;\n\nQQmlApplicationEngine engine;\nengine.rootContext()->setContextProperty(\"masterController\", &masterController);\nengine.load(QUrl(QStringLiteral(\"qrc:/views/MasterView\")));\n```", "```cpp\n#include <QQmlContext>\n```", "```cpp\nWindow {\n    visible: true\n    width: 640\n    height: 480\n    title: qsTr(\"Client Management\")\n\n    Text {\n        text: \"Welcome to the Client Management system!\"\n    }\n}\n```", "```cpp\nQString welcomeMessage = \"This is MasterController to Major Tom\";\n```", "```cpp\nQ_PROPERTY( QString ui_welcomeMessage MEMBER welcomeMessage CONSTANT )\n```", "```cpp\ntext: masterController.ui_welcomeMessage\n```", "```cpp\nmessage(cm project dir: $${PWD})\n```", "```cpp\nmessage(cm-lib project dir: $${PWD})\n```", "```cpp\nDESTDIR = $$PWD/../binaries/windows/gcc/x86/debug\nmessage(cm-lib output dir: $${DESTDIR})\n```", "```cpp\ninclude(../qmake-target-platform.pri)\ninclude(../qmake-destination-path.pri)\n```", "```cpp\nwin32 {\n    CONFIG += PLATFORM_WIN\n    message(PLATFORM_WIN)\n    win32-g++ {\n        CONFIG += COMPILER_GCC\n        message(COMPILER_GCC)\n    }\n    win32-msvc2017 {\n        CONFIG += COMPILER_MSVC2017\n        message(COMPILER_MSVC2017)\n        win32-msvc2017:QMAKE_TARGET.arch = x86_64\n    }\n}\n\nlinux {\n    CONFIG += PLATFORM_LINUX\n    message(PLATFORM_LINUX)\n    # Make QMAKE_TARGET arch available for Linux\n    !contains(QT_ARCH, x86_64){\n        QMAKE_TARGET.arch = x86\n    } else {\n        QMAKE_TARGET.arch = x86_64\n    }\n    linux-g++{\n        CONFIG += COMPILER_GCC\n        message(COMPILER_GCC)\n    }\n}\n\nmacx {\n    CONFIG += PLATFORM_OSX\n    message(PLATFORM_OSX)\n    macx-clang {\n        CONFIG += COMPILER_CLANG\n        message(COMPILER_CLANG)\n        QMAKE_TARGET.arch = x86_64\n    }\n    macx-clang-32{\n        CONFIG += COMPILER_CLANG\n        message(COMPILER_CLANG)\n        QMAKE_TARGET.arch = x86\n    }\n}\n\ncontains(QMAKE_TARGET.arch, x86_64) {\n    CONFIG += PROCESSOR_x64\n    message(PROCESSOR_x64)\n} else {\n    CONFIG += PROCESSOR_x86\n    message(PROCESSOR_x86)\n}\nCONFIG(debug, release|debug) {\n    CONFIG += BUILD_DEBUG\n    message(BUILD_DEBUG)\n} else {\n    CONFIG += BUILD_RELEASE\n    message(BUILD_RELEASE)\n}\n```", "```cpp\nwin32 {\n    # This block will execute on Windows only\u2026\n}\n```", "```cpp\nProject MESSAGE: PLATFORM_WIN\nProject MESSAGE: COMPILER_GCC\nProject MESSAGE: PROCESSOR_x86\nProject MESSAGE: BUILD_DEBUG\n```", "```cpp\nProject MESSAGE: PLATFORM_WIN\nProject MESSAGE: COMPILER_MSVC2017\nProject MESSAGE: PROCESSOR_x64\nProject MESSAGE: BUILD_RELEASE\n```", "```cpp\nProject MESSAGE: PLATFORM_LINUX\nProject MESSAGE: COMPILER_GCC\nProject MESSAGE: PROCESSOR_x64\nProject MESSAGE: BUILD_DEBUG\n```", "```cpp\nProject MESSAGE: PLATFORM_OSX\nProject MESSAGE: COMPILER_CLANG\nProject MESSAGE: PROCESSOR_x64\nProject MESSAGE: BUILD_DEBUG\n```", "```cpp\nplatform_path = unknown-platform\ncompiler_path = unknown-compiler\nprocessor_path = unknown-processor\nbuild_path = unknown-build\n\nPLATFORM_WIN {\n    platform_path = windows\n}\nPLATFORM_OSX {\n    platform_path = osx\n}\nPLATFORM_LINUX {\n    platform_path = linux\n}\n\nCOMPILER_GCC {\n    compiler_path = gcc\n}\nCOMPILER_MSVC2017 {\n    compiler_path = msvc2017\n}\nCOMPILER_CLANG {\n    compiler_path = clang\n}\n\nPROCESSOR_x64 {\n    processor_path = x64\n}\nPROCESSOR_x86 {\n    processor_path = x86\n}\n\nBUILD_DEBUG {\n    build_path = debug\n} else {\n    build_path = release\n}\n\nDESTINATION_PATH = $$platform_path/$$compiler_path/$$processor_path/$$build_path\nmessage(Dest path: $${DESTINATION_PATH})\n```", "```cpp\nDest path: windows/gcc/x86/debug\n```", "```cpp\nDest path: windows/msvc2017/x64/release\n```", "```cpp\nDest path: linux/gcc/x64/debug\n```", "```cpp\nDest path: osx/clang/x64/debug\n```", "```cpp\nDESTDIR = $$PWD/../binaries/$$DESTINATION_PATH\nOBJECTS_DIR = $$PWD/build/$$DESTINATION_PATH/.obj\nMOC_DIR = $$PWD/build/$$DESTINATION_PATH/.moc\nRCC_DIR = $$PWD/build/$$DESTINATION_PATH/.qrc\nUI_DIR = $$PWD/build/$$DESTINATION_PATH/.ui\n```", "```cpp\nLIBS += -L$$PWD/../binaries/$$DESTINATION_PATH -lcm-lib\n```"]