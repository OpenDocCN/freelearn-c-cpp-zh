["```cpp\n> sudo apt-get install build-essential git cmake\n```", "```cpp\n> sudo apt-get install build-essential git cmake\n```", "```cpp\n> cd ~/\n> git clone https://github.com/PacktPublishing/Advanced-CPP-CookBook.git\n> cd Advanced-CPP-CookBook/chapter13\n```", "```cpp\n> cmake .\n> make recipe01_examples\n```", "```cpp\n> ./recipe01_example01\nThe answer is: 42\nThe answer is not: 43\n\n> ./recipe01_example02\nThe answer is: 42\nThe answer is not: 43\n```", "```cpp\nclass interface\n{\npublic:\n    virtual ~interface() = default;\n    virtual void foo() = 0;\n};\n```", "```cpp\nclass A :\n    public interface\n{\npublic:\n    void foo() override\n    {\n        std::cout << \"The answer is: 42\\n\";\n    }\n};\n```", "```cpp\nclass B :\n    public interface\n{\npublic:\n    void foo() override\n    {\n        std::cout << \"The answer is not: 43\\n\";\n    }\n};\n```", "```cpp\nclass client\n{\n    interface &m_i;\n\npublic:\n    client(interface &i) :\n        m_i{i}\n    { }\n\n    void bar()\n    {\n        m_i.foo();\n    }\n};\n```", "```cpp\nint main(void)\n{\n    A a;\n    B b;\n\n    client c1(a);\n    client c2(b);\n\n    c1.bar();\n    c2.bar();\n}\n```", "```cpp\n#include <iostream>\n\ntemplate<typename DERIVED>\nclass interface\n{\npublic:\n    constexpr void foo()\n    {\n        static_cast<DERIVED *>(this)->foo_override();\n    }\n};\n```", "```cpp\nclass A :\n    public interface<A>\n{\npublic:\n    void foo_override()\n    {\n        std::cout << \"The answer is: 42\\n\";\n    }\n};\n```", "```cpp\nclass B :\n    public interface<B>\n{\npublic:\n    void foo_override()\n    {\n        std::cout << \"The answer is not: 43\\n\";\n    }\n};\n```", "```cpp\ntemplate<typename T>\nclass client\n{\n    interface<T> &m_i;\n\npublic:\n    client(interface<T> &i) :\n        m_i{i}\n    { }\n\n    void bar()\n    {\n        m_i.foo();\n    }\n};\n```", "```cpp\nint main(void)\n{\n    A a;\n    B b;\n\n    client c1(a);\n    client c2(b);\n\n    c1.bar();\n    c2.bar();\n}\n```", "```cpp\nint main(void)\n{\n    client c(std::cout);\n}\n```", "```cpp\n/home/user/book/chapter13/recipe01.cpp: In function \u2018int main()\u2019:\n/home/user/book/chapter13/recipe01.cpp:187:23: error: class template argument deduction failed:\n  187 | client c(std::cout);\n      | ^\n/home/user/book/chapter13/recipe01.cpp:187:23: error: no matching function for call to \u2018client(std::ostream&)\u2019\n/home/user/book/chapter13/recipe01.cpp:175:5: note: candidate: \u2018template<class T> client(interface<T>&)-> client<T>\u2019\n  175 | client(interface<T> &i) :\n      | ^~~~~~\n\n...\n```", "```cpp\ntemplate <typename T>\nconcept interface = requires(T t)\n{\n    { t.foo() } -> void;\n};\n```", "```cpp\nclass A\n{\npublic:\n    void foo()\n    {\n        std::cout << \"The answer is: 42\\n\";\n    }\n};\n```", "```cpp\nclass B\n{\npublic:\n    void foo()\n    {\n        std::cout << \"The answer is not: 43\\n\";\n    }\n};\n```", "```cpp\ntemplate<interface T>\nclass client\n{\n    T &m_i;\n\npublic:\n    client(T &i) :\n        m_i{i}\n    { }\n\n    void bar()\n    {\n        m_i.foo();\n    }\n};\n```", "```cpp\ntemplate<typename T>\n```", "```cpp\ntemplate<interface T>\n```", "```cpp\n> sudo apt-get install build-essential git cmake\n```", "```cpp\n> cd ~/\n> git clone https://github.com/PacktPublishing/Advanced-CPP-CookBook.git\n> cd Advanced-CPP-CookBook/chapter13\n```", "```cpp\n> cmake .\n> make recipe02_examples\n```", "```cpp\n> ./recipe02_example01\nHello World\n\n> ./recipe02_example03\nThe answer is: 42\n```", "```cpp\n#include <iostream>\n\nint main(void)\n{\n    std::cout << \"Hello World\\n\";\n}\n```", "```cpp\nimport std.core;\n\nint main(void)\n{\n    std::cout << \"Hello World\\n\";\n}\n```", "```cpp\n#include <string>\n\ntemplate<size_t number>\nclass the_answer\n{\npublic:\n    auto operator()() const\n    {\n        return \"The answer is: \" + std::to_string(number);\n    }\n};\n\n#define CHECK(a) (a() == \"The answer is: 42\")\n```", "```cpp\n#include <iostream>\n#include \"header.h\"\n\nint main(void)\n{\n    the_answer<42> is;\n    std::cout << is() << '\\n';\n}\n```", "```cpp\nimport std.string;\nexport module answers;\n\nexport\ntemplate<size_t number>\nclass the_answer\n{\npublic:\n    auto operator()() const\n    {\n        return \"The answer is: \" + std::to_string(number);\n    }\n};\n\n#define CHECK(a) (a() == \"The answer is: 42\")\n```", "```cpp\nimport answers;\nimport std.core;\n\nint main(void)\n{\n    the_answer<42> is;\n    std::cout << is();\n}\n```", "```cpp\n> sudo apt-get install build-essential git cmake\n```", "```cpp\n> cd ~/\n> git clone https://github.com/PacktPublishing/Advanced-CPP-CookBook.git\n> cd Advanced-CPP-CookBook/chapter13\n```", "```cpp\n> cmake .\n> make recipe03_examples\n```", "```cpp\n> ./recipe03_example01\n4 8 15 16 23 42 \n\n> ./recipe03_example02\n4 8 15 16 23 42 \n\n> ./recipe03_example03\n4 8 15 16 23 42 \n\n> ./recipe03_example04\n4 8 15 16 23 42 \n\n> ./recipe03_example05\nsize: 6\nsize (in bytes): 24\nsize: 6\nsize (in bytes): 24\nsize: 6\nsize (in bytes): 24\n\n> ./recipe03_example06\n42 \n```", "```cpp\nvoid foo(const int *array, size_t size)\n{\n    for (auto i = 0; i < size; i++) {\n        std::cout << array[i] << ' ';\n    }\n\n    std::cout << '\\n';\n}\n```", "```cpp\nint main(void)\n{\n    int array[] = {4, 8, 15, 16, 23, 42};\n    foo(array, sizeof(array)/sizeof(array[0]));\n}\n```", "```cpp\ntemplate<size_t N>\nvoid foo(const int (&array)[N])\n{\n    for (auto i = 0; i < N; i++) {\n        std::cout << array[i] << ' ';\n    }\n\n    std::cout << '\\n';\n}\n```", "```cpp\nint main(void)\n{\n    int array[] = {4, 8, 15, 16, 23, 42};\n    foo(array);\n}\n```", "```cpp\nvoid foo(const std::span<int> &s)\n{\n    for (auto i = 0; i < s.size(); i++) {\n        std::cout << s[i] << ' ';\n    }\n\n    std::cout << '\\n';\n}\n```", "```cpp\nint main(void)\n{\n    int array[] = {4, 8, 15, 16, 23, 42};\n    foo(array);\n}\n```", "```cpp\nvoid foo(const std::span<int> &s)\n{\n    for (const auto &elem : s) {\n        std::cout << elem << ' ';\n    }\n\n    std::cout << '\\n';\n}\n```", "```cpp\nint main(void)\n{\n    auto ptr1 = new int[6]();\n    foo({ptr1, 6});\n    delete [] ptr1;\n\n    std::vector<int> v(6);\n    foo({v.data(), v.size()});\n\n    auto ptr2 = std::make_unique<int>(6);\n    foo({ptr2.get(), 6});\n}\n```", "```cpp\nvoid foo(const std::span<int> &s)\n{\n    std::cout << \"size: \" << s.size() << '\\n';\n    std::cout << \"size (in bytes): \" << s.size_bytes() << '\\n';\n}\n```", "```cpp\nvoid foo2(const std::span<int> &s)\n{\n    for (const auto &elem : s) {\n        std::cout << elem << ' ';\n    }\n\n    std::cout << '\\n';\n}\n```", "```cpp\nvoid foo1(const std::span<int> &s)\n{\n    foo2(s.subspan(5, 1));\n}\n```", "```cpp\n> sudo apt-get install build-essential git cmake\n```", "```cpp\n> cd ~/\n> git clone https://github.com/PacktPublishing/Advanced-CPP-CookBook.git\n> cd Advanced-CPP-CookBook/chapter13\n```", "```cpp\n> cmake .\n> make recipe04_examples\n```", "```cpp\n> ./recipe04_example01 \n1\n\n> ./recipe04_example02\n42\n\n> ./recipe04_example03\n42\n\n> ./recipe04_example04\n4 8 15 16 23 42 \n\n> ./recipe04_example05\n4 8 15 16 23 42 \n\n> ./recipe04_example06\n4 8 15 16 23 42 \n```", "```cpp\n#include <iostream>\n#include <range/v3/algorithm/count.hpp>\n\nint main(void)\n{\n    auto list = {4, 8, 15, 16, 23, 42};\n    std::cout << ranges::count(list, 42) << '\\n';\n}\n```", "```cpp\n#include <iostream>\n#include <range/v3/algorithm/find.hpp>\n\nint main(void)\n{\n    auto list = {4, 8, 15, 16, 23, 42};\n    if (auto i = ranges::find(list, 42); i != ranges::end(list)) {\n        std::cout << *i << '\\n';\n    }\n}\n```", "```cpp\n#include <iostream>\n#include <range/v3/algorithm/find.hpp>\n\nint main(void)\n{\n    int list[] = {4, 8, 15, 16, 23, 42};\n    if (auto i = ranges::find(list, 42); i != ranges::end(list)) {\n        std::cout << *i << '\\n';\n    }\n}\n```", "```cpp\n#include <iostream>\n#include <range/v3/algorithm/for_each.hpp>\n\nint main(void)\n{\n    auto list = {4, 8, 15, 16, 23, 42};\n\n    ranges::for_each(list, [](const int &val){\n        std::cout << val << ' ';\n    });\n\n    std::cout << '\\n';\n}\n```", "```cpp\n#include <iostream>\n#include <range/v3/view/transform.hpp>\n\nclass my_type\n{\n    int m_i;\n\npublic:\n    my_type(int i) :\n        m_i{i}\n    { }\n\n    auto get() const\n    {\n        return m_i;\n    }\n};\n```", "```cpp\nint main(void)\n{\n    using namespace ranges::views;\n\n    auto list1 = {4, 8, 15, 16, 23, 42};\n    auto list2 = list1 | transform([](int val){\n        return my_type(val);\n    });\n\n    for(const auto &elem : list2) {\n        std::cout << elem.get() << ' ';\n    }\n\n    std::cout << '\\n';\n}\n```", "```cpp\n#include <vector>\n#include <iostream>\n#include <range/v3/action/sort.hpp>\n\nint main(void)\n{\n    using namespace ranges;\n\n    std::vector<int> list = {4, 42, 15, 8, 23, 16};\n    list |= actions::sort;\n\n    for(const auto &elem : list) {\n        std::cout << elem << ' ';\n    }\n\n    std::cout << '\\n';\n}\n```", "```cpp\n> sudo apt-get install build-essential git cmake\n```", "```cpp\n> cd ~/\n> git clone https://github.com/PacktPublishing/Advanced-CPP-CookBook.git\n> cd Advanced-CPP-CookBook/chapter13\n```", "```cpp\n> cmake .\n> make recipe05_examples\n```", "```cpp\n> ./recipe05_example01 \n0 2 4 6 8 10 \n```", "```cpp\nauto\neven_numbers(size_t s, size_t e)\n{\n    std::vector<int> nums;\n\n    if (s % 2 != 0 || e % 2 != 0) {\n        std::terminate();\n    }\n\n    for (auto i = s; i <= e; i += 2) {\n        nums.push_back(i);\n    }\n\n    return nums;\n}\n```", "```cpp\nint main(void)\n{\n    for (const auto &num : even_numbers(0, 10)) {\n        std::cout << num << ' ';\n    }\n\n    std::cout << '\\n';\n}\n```", "```cpp\ngenerator<int>\neven_numbers(size_t s, size_t e)\n{\n    if (s % 2 != 0 || e % 2 != 0) {\n        std::terminate();\n    }\n\n    for (auto i = s; i < e; i += 2) {\n        co_yield i;\n    }\n\n    co_return e;\n}\n```", "```cpp\nint main(void)\n{\n    for (const auto &num : even_numbers(0, 10)) {\n        std::cout << num << ' ';\n    }\n\n    std::cout << '\\n';\n}\n```"]