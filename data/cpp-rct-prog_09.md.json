["```cpp\nvoid my_QLabel::mouseMoveEvent(QMouseEvent *evt)\n{\n    if (event->button() == Qt::LeftButton) {\n        // handle left mouse button here\n        qDebug() <<\" X: \" << evt->x() << \"t Y: \" << evt->y() << \"n\";\n    }\n    else {\n        // pass on other buttons to base class\n        QLabel::mouseMoveEvent(event);\n    }\n}\n```", "```cpp\n#include <QApplication> \n#include <QLabel> \n\nint main (int argc, char* argv[]) \n{ \n    QApplication app(argc, argv); \n    QLabel label(\"Hello World, QT!\"); \n    Label.show(); \n    return app.execute(); \n}\n```", "```cpp\n... \nINCLUDEPATH += . \nQT += widgets \n... \n```", "```cpp\nQLabel label(\"<h2><i>Hello World</i>, <font color=green>QT!</font></h2>\"); \n```", "```cpp\n#include <QLabel> \n#include <QMouseEvent> \n\nclass my_QLabel : public QLabel \n{ \n    Q_OBJECT \npublic: \n    explicit my_QLabel(QWidget *parent = nullptr); \n\n    void mouseMoveEvent(QMouseEvent *evt); \n    void mousePressEvent(QMouseEvent* evt); \n    void leaveEvent(QEvent* evt); \n\n    int x, y; \n\nsignals: \n    void Mouse_Pressed(); \n    void Mouse_Position(); \n    void Mouse_Left(); \n}; \n```", "```cpp\n#include \"my_qlabel.h\" \n\nmy_QLabel::my_QLabel(QWidget *parent) : QLabel(parent), x(0), y(0)  {} \n\nvoid my_QLabel::mouseMoveEvent(QMouseEvent *evt) \n{ \n    this->x = evt->x(); \n    this->y = evt->y(); \n    emit Mouse_Position(); \n} \n```", "```cpp\nvoid my_QLabel::mousePressEvent(QMouseEvent *evt) \n{ \n    emit Mouse_Pressed(); \n} \n\nvoid my_QLabel::leaveEvent(QEvent *evt) \n{ \n   emit Mouse_Left(); \n} \n```", "```cpp\n#include <QDialog> \n\nclass my_QLabel; \nclass QLabel; \n\nclass Dialog : public QDialog \n{ \n    Q_OBJECT \npublic: \n    explicit Dialog(QWidget *parent = 0); \n    ~Dialog(); \n\nprivate slots: \n    void Mouse_CurrentPosition(); \n    void Mouse_Pressed(); \n    void Mouse_Left(); \n\nprivate: \n    void initializeWidgets(); \n    my_QLabel *label_MouseArea; \n    QLabel *label_Mouse_CurPos; \n    QLabel *label_MouseEvents; \n}; \n```", "```cpp\n#include \"dialog.h\" \n#include \"my_qlabel.h\" \n#include <QVBoxLayout> \n#include <QGroupBox> \n\nDialog::Dialog(QWidget *parent) : QDialog(parent) \n{ \n    this->setWindowTitle(\"My Mouse-Event Handling App\"); \n    initializeWidgets(); \n\n    connect(label_MouseArea, SIGNAL(Mouse_Position()), this, SLOT(Mouse_CurrentPosition())); \n    connect(label_MouseArea, SIGNAL(Mouse_Pressed()), this, SLOT(Mouse_Pressed())); \n    connect(label_MouseArea, SIGNAL(Mouse_Left()), this, SLOT(Mouse_Left())); \n} \n```", "```cpp\nvoid Dialog::Mouse_CurrentPosition() \n{ \n    label_Mouse_CurPos->setText(QString(\"X = %1, Y = %2\") \n                                    .arg(label_MouseArea->x) \n                                    .arg(label_MouseArea->y)); \n    label_MouseEvents->setText(\"Mouse Moving!\"); \n} \n```", "```cpp\nvoid Dialog::Mouse_Pressed() \n{ \n    label_MouseEvents->setText(\"Mouse Pressed!\"); \n} \n```", "```cpp\nvoid Dialog::Mouse_Left() \n{ \n    label_MouseEvents->setText(\"Mouse Left!\"); \n} \n```", "```cpp\nvoid Dialog::initializeWidgets() \n{ \n    label_MouseArea = new my_QLabel(this); \n    label_MouseArea->setText(\"Mouse Area\"); \n    label_MouseArea->setMouseTracking(true); \n    label_MouseArea->setAlignment(Qt::AlignCenter|Qt::AlignHCenter); \n    label_MouseArea->setFrameStyle(2); \n```", "```cpp\nlabel_Mouse_CurPos = new QLabel(this);\nlabel_Mouse_CurPos->setText(\"X = 0, Y = 0\");\nlabel_Mouse_CurPos->setAlignment(Qt::AlignCenter|Qt::AlignHCenter);\nlabel_Mouse_CurPos->setFrameStyle(2);\nlabel_MouseEvents = new QLabel(this);\nlabel_MouseEvents->setText(\"Mouse current events!\");\nlabel_MouseEvents->setAlignment(Qt::AlignCenter|Qt::AlignHCenter);\nlabel_MouseEvents->setFrameStyle(2);\n```", "```cpp\n    QGroupBox *groupBox = new QGroupBox(tr(\"Mouse Events\"), this); \n    QVBoxLayout *vbox = new QVBoxLayout; \n    vbox->addWidget(label_Mouse_CurPos); \n    vbox->addWidget(label_MouseEvents); \n    vbox->addStretch(0); \n    groupBox->setLayout(vbox); \n\n    label_MouseArea->move(40, 40); \n    label_MouseArea->resize(280,260); \n    groupBox->move(330,40); \n    groupBox->resize(200,150); \n}\n```", "```cpp\n#include \"dialog.h\" \n#include <QApplication> \n\nint main(int argc, char *argv[]) \n{ \n    QApplication app(argc, argv); \n    Dialog dialog; \n    dialog.resize(545, 337); \n    dialog.show(); \n    return app.exec(); \n} \n```", "```cpp\nQT += widgets \n\nSOURCES +=  \n        main.cpp  \n        dialog.cpp  \n    my_qlabel.cpp \n\nHEADERS +=  \n        dialog.h  \n    my_qlabel.h \n```", "```cpp\n#include <rxcpp/rx.hpp> \n#include <QEvent> \nnamespace rxevt { \n    // Event filter object class \n    class EventEater: public QObject  { \n    Public: \n        EventEater(QObject* parent, QEvent::Type type, rxcpp::subscriber<QEvent*> s): \n        QObject(parent), eventType(type), eventSubscriber(s) {} \n       ~EventEater(){ eventSubscriber.on_completed();}\n```", "```cpp\n        bool eventFilter(QObject* obj, QEvent* event) { \n            if(event->type() == eventType) \n            { eventSubscriber.on_next(event);} \n            return QObject::eventFilter(obj, event); \n        } \n```", "```cpp\n    private: \n        QEvent::Type eventType; \n        rxcpp::subscriber<QEvent*> eventSubscriber; \n    }; \n```", "```cpp\n    // Utility function to retrieve the rxcpp::observable of filtered events \n    rxcpp::observable<QEvent*> from(QObject* qobject, QEvent::Type type) \n    { \n        if(!qobject) return rxcpp::sources::never<QEvent*>(); \n         return rxcpp::observable<>::create<QEvent*>( \n            [qobject, type](rxcpp::subscriber<QEvent*> s) { \n                qobject->installEventFilter(new EventEater(qobject, type, s)); \n            } \n        ); \n    } \n} // rxevt \n```", "```cpp\n#include \"rx_eventfilter.h\" \nint main(int argc, char *argv[]) \n{ \n    QApplication app(argc, argv); \n    // Create the application window \n    auto widget = std::unique_ptr<QWidget>(new QWidget()); \n    widget->resize(280,200); \n        // Create and set properties of mouse area label \n    auto label_mouseArea   = new QLabel(\"Mouse Area\"); \n    label_mouseArea->setMouseTracking(true); \n    label_mouseArea->setAlignment(Qt::AlignCenter|Qt::AlignHCenter); \n    label_mouseArea->setFrameStyle(2); \n    // Create and set properties of message display label \n    auto label_coordinates = new QLabel(\"X = 0, Y = 0\"); \n    label_coordinates->setAlignment(Qt::AlignCenter|Qt::AlignHCenter); \n    label_coordinates->setFrameStyle(2);\n```", "```cpp\n    // Adjusting the size policy of widgets to allow stretching \n    // inside the vertical layout \n    label_mouseArea->setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding); \n    label_coordinates->setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding); \n    auto layout = new QVBoxLayout; \n    layout->addWidget(label_mouseArea); \n    layout->addWidget(label_coordinates); \n    layout->setStretch(0, 4); \n    layout->setStretch(1, 1); \n    widget->setLayout(layout); \n```", "```cpp\n    // Display the mouse move message and the mouse coordinates \n    rxevt::from(label_mouseArea, QEvent::MouseMove) \n            .subscribe([&label_coordinates](const QEvent* e){ \n        auto me = static_cast<const QMouseEvent*>(e); \n        label_coordinates->setText(QString(\"Mouse Moving : X = %1, Y = %2\") \n                                   .arg(me->x()) \n                                   .arg(me->y())); \n    });\n```", "```cpp\n    // Display the mouse signle click message and the mouse coordinates \n    rxevt::from(label_mouseArea, QEvent::MouseButtonPress) \n            .subscribe([&label_coordinates](const QEvent* e){ \n        auto me = static_cast<const QMouseEvent*>(e); \n        label_coordinates->setText(QString(\"Mouse Single click at X = %1, Y = %2\") \n                                   .arg(me->x()) \n                                   .arg(me->y())); \n    }); \n```", "```cpp\n    // Display the mouse double click message and the mouse coordinates \n    rxevt::from(label_mouseArea, QEvent::MouseButtonDblClick) \n            .subscribe([&label_coordinates](const QEvent* e){ \n        auto me = static_cast<const QMouseEvent*>(e); \n        label_coordinates->setText(QString(\"Mouse Double click at X = %1, Y = %2\") \n                                   .arg(me->x()) \n                                   .arg(me->y())); \n    }); \n    widget->show(); \n    return app.exec(); \n} // End of main \n```", "```cpp\nQT += core widgets \nCONFIG += c++14 \n\nTARGET = Mouse_EventFilter \nINCLUDEPATH += include \n\nSOURCES +=  \n    main.cpp \nHEADERS +=  \n    rx_eventfilter.h  \n```", "```cpp\n#include <QApplication> \n#include <QLabel> \n#include <QMouseEvent> \n#include \"rxqt.hpp\" \n\nint main(int argc, char *argv[]) \n{ \n    QApplication app(argc, argv); \n\n    auto widget = new QWidget(); \n    widget->resize(350,300); \n    widget->setCursor(Qt::OpenHandCursor); \n\n    auto xDock = new QLabel((QWidget*)widget); \n    xDock->setStyleSheet(\"QLabel { background-color : red}\"); \n    xDock->resize(9,9); \n    xDock->setGeometry(0, 0, 9, 9); \n\n    auto yDock = new QLabel((QWidget*)widget); \n    yDock->setStyleSheet(\"QLabel { background-color : blue}\"); \n    yDock->resize(9,9); \n    yDock->setGeometry(0, 0, 9, 9); \n```", "```cpp\n    rxqt::from_event(widget, QEvent::MouseButtonPress) \n            .filter([](const QEvent* e) { \n        auto me = static_cast<const QMouseEvent*>(e); \n        return (Qt::LeftButton == me->buttons()); \n    }) \n            .subscribe([&](const QEvent* e) { \n        auto me = static_cast<const QMouseEvent*>(e); \n        widget->setCursor(Qt::ClosedHandCursor); \n        xDock->move(me->x(), 0); \n        yDock->move(0, me->y()); \n    }); \n```", "```cpp\n    rxqt::from_event(widget, QEvent::MouseMove) \n            .filter([](const QEvent* e) { \n        auto me = static_cast<const QMouseEvent*>(e); \n        return (Qt::LeftButton == me->buttons()); \n    }) \n            .subscribe([&](const QEvent* e) { \n        auto me = static_cast<const QMouseEvent*>(e); \n        xDock->move(me->x(), 0); \n        yDock->move(0, me->y()); \n    });\n```", "```cpp\n    rxqt::from_event(widget, QEvent::MouseButtonRelease) \n            .subscribe([&widget](const QEvent* e) { \n        widget->setCursor(Qt::OpenHandCursor); \n    }); \n\n    widget->show(); \n    return app.exec(); \n} \n```", "```cpp\n#ifndef GRAVITY_QLABEL_H \n#define GRAVITY_QLABEL_H \n\n#include <QLabel> \n\nclass Gravity_QLabel : public QLabel \n{ \n   public: \n    explicit Gravity_QLabel(QWidget *parent = nullptr): \n         QLabel(parent), prev_x(0), prev_y(0){} \n\n    int prev_x, prev_y; \n}; \n\n#endif // GRAVITY_QLABEL_H \n```", "```cpp\n    auto gravityDock = new Gravity_QLabel((QWidget*)widget); \n    gravityDock->setStyleSheet(\"QLabel { background-color : green}\"); \n    gravityDock->resize(9,9); \n    gravityDock->setGeometry(0, 0, 9, 9);\n```", "```cpp\n    gravityDock->move(me->x(),me->y()); \n```", "```cpp\n    gravityDock->prev_x = gravityDock->prev_x * .96 + me->x() * .04; \n    gravityDock->prev_y = gravityDock->prev_y * .96 + me->y() * .04; \n    gravityDock->move(gravityDock->prev_x, gravityDock->prev_y); \n```"]