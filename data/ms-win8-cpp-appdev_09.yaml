- en: Chapter 9. Packaging and the Windows Store
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。打包和Windows商店
- en: 'The previous chapters discussed various details for building Windows Store
    apps: from the basic Windows Runtime concepts, through building a user interface,
    to using unique Windows 8 features (for example live tiles, contracts). All that''s
    left is to build your app and finally to submit it to the Store, so that everyone
    can enjoy it.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 前几章讨论了构建Windows商店应用程序的各种细节：从基本的Windows Runtime概念，通过构建用户界面，到使用独特的Windows 8功能（例如动态磁贴，合同）。剩下的就是构建您的应用程序，并最终将其提交到商店，以便每个人都可以享受它。
- en: The Store, however, has its own rules and guidelines. Applications go through
    a certification process, to ensure they are of high quality, and will benefit
    users. "High quality" here encompasses many details, some related directly to
    quality experience (performance, touch experience, fluidity, and more) and some
    more subtle (such as responding appropriately to network fluctuations and adhering
    to modern UI design guidelines).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，商店有自己的规则和指南。应用程序经过认证过程，以确保它们具有高质量，并且将使用户受益。这里的“高质量”涵盖了许多细节，一些与质量体验直接相关（性能，触摸体验，流畅性等），一些更微妙（例如对网络波动的适当响应和遵守现代UI设计指南）。
- en: 'Windows Store apps provide many opportunities for developers. The Store is
    not yet saturated (as iOS and Android stores are), and so applications have a
    better chance of being noticed. Monetization is possible—apps may cost money,
    but other models exist: the Store model supports trial applications (with various
    expiration mechanisms), in-app purchases can be provided, so that the app may
    be downloaded for free, but items or services can be sold from within the app;
    the app can show ads—and get paid just because users are running the app—although
    the app itself is free.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Windows商店应用程序为开发人员提供了许多机会。商店还没有饱和（像iOS和Android商店那样），因此应用程序更有可能被注意到。可以实现货币化 -
    应用程序可能需要花钱，但还有其他模式：商店模式支持试用应用程序（具有各种过期机制），可以提供应用内购买，以便应用程序可以免费下载，但可以在应用程序内出售物品或服务；应用程序可以显示广告
    - 并因为用户运行应用程序而获得报酬 - 尽管应用程序本身是免费的。
- en: In this chapter, we'll take a look at application packaging for the Windows
    Store and discuss some of the issues that need to be considered for the application
    to pass certification successfully.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍Windows商店的应用程序打包，并讨论需要考虑的一些问题，以便应用程序成功通过认证。
- en: The application manifest
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序清单
- en: 'We''ve already met the app manifest several times in previous chapters. This
    is the basic declarations the application makes, before it''s even executed. Some
    important things to consider:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在前几章中已经多次遇到了应用程序清单。这是应用程序在执行之前所做的基本声明。一些重要的事项需要考虑：
- en: Image logos, other than the defaults, must be supplied—the default images will
    automatically cause certification to fail; all image logos must be provided, and
    the image sizes must be as required (no scaling).
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 除了默认值之外，必须提供图像标志 - 默认图像将自动导致认证失败；必须提供所有图像标志，并且图像大小必须符合要求（不得缩放）。
- en: In the capabilities tab, only the required capabilities should be checked. It's
    easy to check just almost everything, but this makes the app less secure and may
    even fail certification—the user will have to authorize capabilities that may
    not actually be used.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在功能选项卡中，只应选中所需的功能。很容易勾选几乎所有内容，但这会使应用程序不够安全，甚至可能导致认证失败 - 用户将不得不授权可能实际上未被使用的功能。
- en: Supported orientations may be supplied, leaving out some orientations that may
    make no sense for the particular app. Games, as an extreme example, can usually
    run with a particular orientation (landscape or portrait) only.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以提供支持的方向，省略一些对于特定应用程序可能毫无意义的方向。例如，游戏通常只能以特定方向（横向或纵向）运行。
- en: For some capabilities, a privacy policy statement must be supplied as part of
    the app or through a web link. This should state what the app is doing with those
    capabilities. Examples that need a privacy statement are Internet (client, server)
    and Location (GPS).
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于某些功能，隐私政策声明必须作为应用程序的一部分或通过网页链接提供。这应说明应用程序如何使用这些功能。需要隐私声明的示例包括互联网（客户端，服务器）和位置（GPS）。
- en: The question of orientation brings up a more general issue—application views.
    Besides the obvious landscape and portrait, the application (in landscape mode)
    can also share the screen with another application, in snapped or filled mode.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 方向的问题带来了一个更一般的问题 - 应用程序视图。除了明显的横向和纵向之外，应用程序（在横向模式下）还可以与另一个应用程序共享屏幕，处于捕捉或填充模式。
- en: The application view state
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序视图状态
- en: 'An application can be viewed in four different ways:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序可以以四种不同的方式查看：
- en: '**Landscape** – screen width is larger than its height.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**横向** - 屏幕宽度大于高度。'
- en: '**Portrait** – screen height is larger than its width.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**纵向** - 屏幕高度大于宽度。'
- en: '**Snapped** – the application takes up 320 pixels in width, while another application
    takes the rest of the screen width. This is only possible if the horizontal display
    resolution is at least 1366 pixels.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**捕捉** - 应用程序占据320像素的宽度，而另一个应用程序占据屏幕宽度的其余部分。只有在水平显示分辨率至少为1366像素时才可能实现这一点。'
- en: '**Filled** – the "mirror" of snapped. The application takes most of the horizontal
    space, leaving 320 pixels for another app.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**填充** - 捕捉的“镜像”。应用程序占据大部分水平空间，为另一个应用程序留下320像素。'
- en: 'Here''s a screenshot of two apps being in the snapped/filled states:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是两个应用程序处于捕捉/填充状态的屏幕截图：
- en: '![The application view state](img/5022_09_04.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![应用程序视图状态](img/5022_09_04.jpg)'
- en: Users expect the application to change its view accordingly when in snap mode.
    In the preceding screenshot, the News application is snapped, so news articles
    appear as small items and not full text as they do in other modes.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 用户期望应用程序在捕捉模式下相应地改变其视图。在前面的屏幕截图中，新闻应用程序被捕捉，因此新闻文章显示为小项目，而不像在其他模式下那样显示完整文本。
- en: Let's take the Flags app from the previous chapter and adapt it to display nicely,
    depending on its current view state.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从上一章中的Flags应用程序开始，并根据其当前视图状态进行适当的显示。
- en: Implementing view state changes
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现视图状态更改
- en: 'There are several ways to deal with view state changes. We''ll take a simple,
    pragmatic approach. Currently, our Flags application presents the same view irrespective
    of the orientation or "snappiness". To test orientations and views we can use
    the simulator that''s provided with the SDK (unless we happen to have a tablet-based
    device to do actual testing). Here''s what the application looks like in the snapped
    mode inside the simulator:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 处理视图状态更改有几种方法。我们将采取一种简单、务实的方法。目前，我们的标志应用程序无论方向或“捕捉性”如何都呈现相同的视图。为了测试方向和视图，我们可以使用SDK提供的模拟器（除非我们碰巧有一个基于平板电脑的设备进行实际测试）。以下是模拟器中捕捉模式下应用程序的外观：
- en: '![Implementing view state changes](img/5022_09_03.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![实现视图状态更改](img/5022_09_03.jpg)'
- en: Clearly, this is not the best user experience. The text next to each flag is
    too long, so not many flags are visible at the same time, and the text maybe cut
    off. A better approach would be to show just the flag images, without the country
    names.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，这不是最好的用户体验。每个标志旁边的文本太长，因此一次只能看到很少的标志，并且文本可能会被截断。更好的方法是只显示标志图像，而不显示国家名称。
- en: 'The system raises the `SizeChanged` event on the active page—this is something
    we can handle and make the necessary view changes. First, we''ll make the `ItemTemplate`
    of our `GridView` a bit more flexible by binding it to an additional property
    that we''ll change as needed when the view changes. Here''s the complete template:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 系统会在活动页面上引发`SizeChanged`事件——这是我们可以处理并进行必要的视图更改的内容。首先，我们将使我们的`GridView`的`ItemTemplate`更加灵活，通过将其绑定到一个额外的属性，根据需要在视图更改时进行更改。以下是完整的模板：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The change is in the topmost `Grid`—its `Width` is bound to a dependency property
    (`ColumnWidth`) on the `MainPage` object.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 更改在最顶层的`Grid`中进行——它的`Width`绑定到`MainPage`对象上的一个依赖属性（`ColumnWidth`）。
- en: Note
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It would be more elegant to implement this in a separate `ViewModel` that implements
    `INotifyPropertyChanged`, as discussed in [Chapter 5](ch05.html "Chapter 5. Data
    Binding"), *Data Binding*. The approach shown here is quicker, and is enough for
    demonstration purposes.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个单独的实现了`INotifyPropertyChanged`的`ViewModel`中实现这一点会更加优雅，如[第5章](ch05.html "第5章。数据绑定")*数据绑定*中所讨论的。这里展示的方法更快，足以用于演示目的。
- en: This `ColumnWidth` property would change, depending on the current view state.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`ColumnWidth`属性会根据当前的视图状态进行更改。
- en: Note
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This page's markup sustains both landscape and portrait orientations equally
    well. Sometimes, more drastic changes are required for good orientation support.
    Some layout panels are better suited for both orientations, such as the `StackPanel`.
    `Grid` is not suited for this, unless it's a very simple one. A complex `Grid`
    may have to undergo significant changes when switching orientations.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这个页面的标记同样适用于横向和纵向方向。有时，为了良好的方向支持，需要进行更大的改变。一些布局面板更适合两种方向，比如`StackPanel`。`Grid`不适合这样做，除非它是一个非常简单的`Grid`。一个复杂的`Grid`在切换方向时可能需要进行重大改变。
- en: 'The `SizeChanged` event is registered in the `MainPage` constructor like so:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`SizeChanged`事件在`MainPage`构造函数中注册如下：'
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The handler just calls a helper method, `HandleSizeChanges`:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 处理程序只是调用一个辅助方法`HandleSizeChanges`：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This same helper is called from the `OnNavigatedTo` override to make sure the
    view is adjusted when the page first loads. The basic idea is to inspect the `Windows::UI::ViewManagement::ApplicationView::Value`
    static property, and take appropriate actions based on the possible values:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这个相同的辅助方法也被从`OnNavigatedTo`重写中调用，以确保在页面首次加载时调整视图。基本思想是检查`Windows::UI::ViewManagement::ApplicationView::Value`静态属性，并根据可能的值采取适当的操作：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The code changes the `ColumnWidth` bound property as appropriate, based on
    the view state. The Filled and Landscape views are treated in the same way, but
    they could have been a bit different. In the Portrait mode the column width is
    narrower, so that more flags can be shown in a single screen. In the snapped view,
    the text portion is eliminated entirely, leaving the image only. This is the result
    in the snapped view:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 代码根据视图状态更改了绑定属性`ColumnWidth`，填充和横向视图以相同的方式处理，但它们可能有所不同。在纵向模式下，列宽较窄，因此可以在单个屏幕上显示更多的标志。在捕捉视图中，文本部分完全被消除，只留下图像。这是在捕捉视图中的结果：
- en: '![Implementing view state changes](img/5022_09_05.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![实现视图状态更改](img/5022_09_05.jpg)'
- en: Another common approach to deal with view state changes is using the `ViewStateManager`
    class. This allows for making changes in XAML and not requiring code, except the
    change to the correct view state, done with the `VisualStateManager::GoToState`
    static method. This approach is beyond the scope of this book, but many such examples
    can be found on the web.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 处理视图状态更改的另一种常见方法是使用`ViewStateManager`类。这允许在XAML中进行更改，而不需要代码，除了使用`VisualStateManager::GoToState`静态方法进行正确的视图状态更改。这种方法超出了本书的范围，但可以在网上找到许多这样的例子。
- en: Note
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If nothing else makes sense, at the very least, an application should show some
    logo image or text when in the snapped view. Otherwise, the app may fail certification
    if the view is unprepared for the snap view.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有其他意义，至少在“捕捉”视图中应用程序应该显示一些徽标图像或文本。否则，如果视图未准备好捕捉视图，应用程序可能无法通过认证。
- en: Packaging and validating
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打包和验证
- en: Once the application is done (or at least considered done by the developers),
    it's time to package and upload it to the Store. The first step should be testing
    the application for some types of errors that would fail certification, so these
    can be fixed right away.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦应用程序完成（或者至少被开发人员认为完成了），就该是打包并上传到商店的时候了。第一步应该是测试应用程序是否存在一些可能导致认证失败的错误，以便立即修复这些错误。
- en: 'To get started, we can use Visual Studio''s **Project** | **Store** submenu:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，我们可以使用Visual Studio的**项目** | **商店**子菜单：
- en: '![Packaging and validating](img/5022_09_06.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![打包和验证](img/5022_09_06.jpg)'
- en: The menu allows opening a developer account, reserving an app name (must be
    unique, and will be reserved for one year) and do some other stuff (such as capture
    a screenshot—at least one is required); you can find information on these options
    in the developer portal for Windows Store apps. We'll now take a look at the **Create
    App Packages** option.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 菜单允许开设开发人员账户，预留应用名称（必须是唯一的，并将被保留一年），以及执行其他一些操作（例如截取屏幕截图——至少需要一个）；你可以在Windows商店应用的开发者门户网站上找到有关这些选项的信息。现在我们来看一下**创建应用软件包**选项。
- en: 'The first question the dialog asks is whether we want to create a package to
    upload to the Store. If **Yes** is selected, the developer must sign with his/her
    Microsoft ID, and then the packages will be built and later uploaded. We''ll take
    the **No** answer route for now:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 对话框首先询问我们是否要创建一个要上传到商店的软件包。如果选择了**是**，开发人员必须使用他/她的Microsoft ID进行签名，然后软件包将被构建并稍后上传。我们现在选择**否**的路线：
- en: '![Packaging and validating](img/5022_09_07.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![打包和验证](img/5022_09_07.jpg)'
- en: 'Clicking on **Next** shows a dialog that allows selecting the configurations
    to build (and to test):'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**下一步**会显示一个对话框，允许选择要构建（和测试）的配置：
- en: '![Packaging and validating](img/5022_09_08.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![打包和验证](img/5022_09_08.jpg)'
- en: We must select a Release configuration for package creation and testing. Testing
    a Debug configuration would fail, no matter what. Uploads to the Store must be
    Release builds only, otherwise the app would fail certification. We can select
    the required architectures that we want to create packages for. x86 and ARM are
    recommended—ARM is the only architecture available on Windows RT machines, so
    should be supported. x86 is a good choice for Intel/AMD-based architectures.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须选择一个发布配置来创建和测试软件包。无论如何，测试调试配置都会失败。上传到商店的必须是发布版本，否则应用将无法通过认证。我们可以选择要为其创建软件包的所需架构。x86和ARM是推荐的——ARM是Windows
    RT设备上唯一可用的架构，因此应该得到支持。对于基于英特尔/AMD的架构，x86是一个不错的选择。
- en: 'Clicking on **Create** builds the project in the selected configurations and
    shows the following dialog:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**创建**会按照所选配置构建项目，并显示以下对话框：
- en: '![Packaging and validating](img/5022_09_01.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![打包和验证](img/5022_09_01.jpg)'
- en: This shows the location of the created packages, where all the required files
    to be uploaded reside. The dialog further suggests to launch the **Windows App
    Certification Kit** (**WACK**) to do some automatic validation testing on the
    app.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这显示了创建的软件包的位置，所有要上传的必需文件都在那里。对话框进一步建议启动**Windows应用认证工具**（**WACK**）对应用进行一些自动验证测试。
- en: Using the Windows App Certification Kit
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Windows应用认证工具
- en: 'Running the WACK is one of the first steps done in the Store; this means if
    the app fails the local WACK test, it will certainly fail certification in the
    Store. Once selected, the following dialog appears:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在商店中，运行WACK是第一步之一；这意味着如果应用未通过本地WACK测试，它肯定会在商店中未通过认证。一旦选择，将出现以下对话框：
- en: '![Using the Windows App Certification Kit](img/5022_09_02.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![使用Windows应用认证工具](img/5022_09_02.jpg)'
- en: The validation process takes a few minutes, in which the application will be
    started and terminated automatically. Finally, the results will be shown with
    a "Passed" or "Failed" notification and a link to a report that was created for
    the test (warnings may appear as well, but they are not considered a failure).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 验证过程需要几分钟时间，期间应用将自动启动和终止。最后，结果将显示为“通过”或“失败”通知，并附有为测试创建的报告链接（也可能出现警告，但它们不被视为失败）。
- en: Note
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The Flags app fails the WACK test because it did not replace the default image
    logos.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Flags应用未通过WACK测试，因为它没有替换默认图标。
- en: If the application passes the WACK test, we can go ahead and upload the app
    to the Store. Passing WACK does not mean that the app is sure to pass Store certification.
    The Store does a lot more testing than WACK, including manual testing with a live
    person; but passing the WACK test is a good first step. You should never upload
    a package without passing the local WACK test.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果应用程序通过了WACK测试，我们可以继续上传应用到商店。通过WACK并不意味着应用一定会通过商店认证。商店进行的测试比WACK多得多，包括与真人的手动测试；但通过WACK测试是一个很好的第一步。你绝对不应该在本地WACK测试未通过的情况下上传软件包。
- en: Note
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The complete requirement list for Store apps can be found at [http://msdn.microsoft.com/en-us/library/windows/apps/hh694083.aspx](http://msdn.microsoft.com/en-us/library/windows/apps/hh694083.aspx).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 商店应用的完整要求列表可以在[http://msdn.microsoft.com/en-us/library/windows/apps/hh694083.aspx](http://msdn.microsoft.com/en-us/library/windows/apps/hh694083.aspx)找到。
- en: Summary
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we saw the basic procedure of packaging and uploading an app
    to the Store and discussed some of the issues that must be addressed for the app
    to pass certification successfully. The reader is encouraged to consult the official
    Microsoft certification guidelines to get the full details.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了将应用打包并上传到商店的基本流程，并讨论了必须解决的一些问题，以便应用成功通过认证。鼓励读者查阅官方的微软认证指南，以获取完整的细节。
- en: Since the certification process can take a few days, it's better if the app
    is as tested as possible before actual submission. Using the Windows App Certification
    Kit is a must to improve chances of successful certification.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 由于认证过程可能需要几天时间，最好在实际提交之前尽可能多地测试应用。使用Windows应用认证工具是提高成功认证机会的必要步骤。
- en: Microsoft wants apps in the Store that are high quality and provide real value
    to users. This means the app has to behave "nicely", for sure, but that's not
    nearly enough; the content should be compelling and fun, so users return to the
    app again and again—and that's a challenge for a different book.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 微软希望商店中的应用具有高质量，并为用户提供真正的价值。这意味着应用必须表现得“好”，但这远远不够；内容应该引人入胜和有趣，以便用户一次又一次地返回应用——这对于另一本书来说是一个挑战。
