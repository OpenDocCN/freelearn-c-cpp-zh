- en: Building Documentation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建文档
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下食谱：
- en: Building documentation using Doxygen
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Doxygen构建文档
- en: Building documentation using Sphinx
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Sphinx构建文档
- en: Combining Doxygen and Sphinx
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结合Doxygen和Sphinx
- en: Introduction
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引言
- en: 'Documentation is essential in all software projects: for users, to explain
    how to obtain and build the code and to illustrate how to use your code or library
    effectively, and also for developers, to describe the internal details of your
    library and to help other programmers get involved with and contribute to your
    project. This chapter will show how to use CMake to build code documentation,
    using two popular frameworks: Doxygen and Sphinx.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 文档在所有软件项目中都是必不可少的：对于用户，解释如何获取和构建代码，并说明如何有效地使用您的代码或库，对于开发者，描述库的内部细节，并帮助其他程序员参与并贡献于您的项目。本章将展示如何使用CMake构建代码文档，使用两个流行的框架：Doxygen和Sphinx。
- en: Building documentation using Doxygen
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Doxygen构建文档
- en: The code for this recipe is available at [https://github.com/dev-cafe/cmake-cookbook/tree/v1.0/chapter-12/recipe-01](https://github.com/dev-cafe/cmake-cookbook/tree/v1.0/chapter-12/recipe-01),
    and includes a C++ example. The recipe is valid with CMake version 3.5 (and higher)
    and has been tested on GNU/Linux, macOS, and Windows.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱的代码可在[https://github.com/dev-cafe/cmake-cookbook/tree/v1.0/chapter-12/recipe-01](https://github.com/dev-cafe/cmake-cookbook/tree/v1.0/chapter-12/recipe-01)找到，并包含一个C++示例。该食谱适用于CMake版本3.5（及以上），并在GNU/Linux、macOS和Windows上进行了测试。
- en: Doxygen ([http://www.doxygen.nl](http://www.doxygen.nl)) is a very popular source
    code documentation tool. You can add documentation tags as comments in your code.
    Running Doxygen will extract these comments and create the documentation in a
    format defined in the Doxyfile configuration file. Doxygen can output HTML, XML,
    and even LaTeX or PDF. This recipe will show you how to use CMake to build your
    Doxygen documentation.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Doxygen（[http://www.doxygen.nl](http://www.doxygen.nl)）是一个非常流行的源代码文档工具。您可以在代码中添加文档标签作为注释。运行Doxygen将提取这些注释并在Doxyfile配置文件中定义的格式中创建文档。Doxygen可以输出HTML、XML，甚至是LaTeX或PDF。本食谱将向您展示如何使用CMake构建您的Doxygen文档。
- en: Getting ready
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'We will use a simplified version of the `message` library presented in previous
    chapters. The source tree is organized as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用之前章节中介绍的`message`库的简化版本。源树组织如下：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We still have our sources under the `src` subdirectory, and we have custom
    CMake modules in the `cmake` subdirectory. Since our emphasis is on the documentation,
    we have removed the dependency on UUID and simplified the source code. The most
    significant differences are the numerous code comments in the header file:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的源代码仍然位于`src`子目录下，自定义CMake模块位于`cmake`子目录下。由于我们的重点是文档，我们删除了对UUID的依赖并简化了源代码。最显著的区别是头文件中的大量代码注释：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: These comments are in the format `/*! */`, and include some special tags, which
    are understood by Doxygen (see [http://www.stack.nl/~dimitri/doxygen/manual/docblocks.html](http://www.stack.nl/~dimitri/doxygen/manual/docblocks.html)).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这些注释采用`/*! */`格式，并包含一些特殊标签，这些标签被Doxygen理解（参见[http://www.stack.nl/~dimitri/doxygen/manual/docblocks.html](http://www.stack.nl/~dimitri/doxygen/manual/docblocks.html)）。
- en: How to do it
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作
- en: 'First, let us discuss the `CMakeLists.txt` file in the root directory:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们讨论根目录中的`CMakeLists.txt`文件：
- en: 'As should be familiar, we declare a C++11 project, as follows:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如您所熟悉，我们声明一个C++11项目，如下所示：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We define the output directories for shared and static libraries and executables,
    as follows:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们定义共享和静态库以及可执行文件的输出目录，如下所示：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We append the `cmake` subdirectory to `CMAKE_MODULE_PATH`. This is required
    for CMake to find our custom modules:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将`cmake`子目录附加到`CMAKE_MODULE_PATH`。这是CMake找到我们的自定义模块所必需的：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The `UseDoxygenDoc.cmake` custom module is included. We will discuss its content
    later:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包含自定义模块`UseDoxygenDoc.cmake`。我们将在后面讨论其内容：
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We then add the `src` subdirectory:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们添加`src`子目录：
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The `CMakeLists.txt` file in the `src` subdirectory contains the following
    building blocks:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`src`子目录中的`CMakeLists.txt`文件包含以下构建块：'
- en: 'We add a `message` static library, as follows:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们添加一个`message`静态库，如下所示：
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We then add an executable target, `hello-world`:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们添加一个可执行目标，`hello-world`：
- en: '[PRE8]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Then, the `hello-world` executable should be linked to the message library:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，`hello-world`可执行文件应该链接到消息库：
- en: '[PRE9]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In the last stanza in the root `CMakeLists.txt` file, we call the `add_doxygen_doc`
    function. This adds a new `docs` target that will invoke Doxygen to build our
    documentation:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在根`CMakeLists.txt`文件的最后一节中，我们调用了`add_doxygen_doc`函数。这添加了一个新的`docs`目标，该目标将调用Doxygen来构建我们的文档：
- en: '[PRE10]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Finally, let us look at the `UseDoxygenDoc.cmake` module, where the `add_doxygen_doc`
    function is defined:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们看一下`UseDoxygenDoc.cmake`模块，其中定义了`add_doxygen_doc`函数：
- en: 'We find the `Doxygen` and `Perl` executables, as follows:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们找到`Doxygen`和`Perl`可执行文件，如下所示：
- en: '[PRE11]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Then, we declare the `add_doxygen_doc` function. This function understands
    one-value arguments: `BUILD_DIR`, `DOXY_FILE`, `TARGET_NAME`, and `COMMENT`. We
    parse these using the `cmake_parse_arguments` standard CMake command:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们声明`add_doxygen_doc`函数。该函数理解单值参数：`BUILD_DIR`、`DOXY_FILE`、`TARGET_NAME`和`COMMENT`。我们使用CMake的标准命令`cmake_parse_arguments`来解析这些参数：
- en: '[PRE12]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The `Doxyfile` contains all Doxygen settings to build the documentation. A
    template `Doxyfile.in` is passed as the function argument `DOXY_FILE`, and is
    parsed into the `DOXY_DOC_DOXY_FILE` variable. We configure the template file, `Doxyfile.in`,
    as follows:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Doxyfile`包含构建文档所需的所有Doxygen设置。模板`Doxyfile.in`作为函数参数`DOXY_FILE`传递，并被解析到`DOXY_DOC_DOXY_FILE`变量中。我们按照以下方式配置模板文件`Doxyfile.in`：'
- en: '[PRE13]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We then define a custom target, called `DOXY_DOC_TARGET_NAME`, which will execute
    Doxygen with the settings in the `Doxyfile` and output the results in `DOXY_DOC_BUILD_DIR`:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们定义一个名为`DOXY_DOC_TARGET_NAME`的自定义目标，它将使用`Doxyfile`中的设置执行Doxygen，并将结果输出到`DOXY_DOC_BUILD_DIR`：
- en: '[PRE14]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Finally, a status message is printed for the user:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最终，会向用户打印一条状态消息：
- en: '[PRE15]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We can configure the project as usual:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以像往常一样配置项目：
- en: '[PRE16]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The documentation can be built by invoking our custom `docs` target:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调用我们的自定义`docs`目标，可以构建文档：
- en: '[PRE17]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: You will notice that a `_build` subdirectory will have appeared in the build
    tree. This contains the HTML documentation that Doxygen has generated from your
    source files. Opening `index.html` with your favorite browser will show the Doxygen
    welcome page.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到，在构建树中会出现一个`_build`子目录。这包含Doxygen从你的源文件生成的HTML文档。使用你喜欢的浏览器打开`index.html`将显示Doxygen欢迎页面。
- en: 'If you navigate to the class list, you can for instance browse the documentation
    for the `Message` class:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你导航到类列表，你可以例如浏览`Message`类的文档：
- en: '![](img/1b2323e8-2dc6-4a22-90e5-b1dfedcfc6d1.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1b2323e8-2dc6-4a22-90e5-b1dfedcfc6d1.png)'
- en: How it works
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理
- en: CMake does not support documentation building by default. However, we can use
    `add_custom_target` to perform arbitrary operations, and this is the mechanism
    that we leveraged in the present recipe. The important point to note is that we
    need to make sure that the tools necessary to build the documentation (Doxygen
    and Perl in this particular case) are available on the system.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: CMake默认不支持文档构建。但是，我们可以使用`add_custom_target`来执行任意操作，这是我们在本食谱中利用的机制。需要注意的是，我们需要确保系统上存在构建文档所需的工具（在本例中为Doxygen和Perl）。
- en: 'In addition, note that the `UseDoxygenDoc.cmake` custom module only does the
    following:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，请注意`UseDoxygenDoc.cmake`自定义模块仅执行以下操作：
- en: Performs a search for the Doxygen and Perl executables
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行对Doxygen和Perl可执行文件的搜索
- en: Defines a function
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义一个函数
- en: 'The actual creation of the `docs` target is left to a later invocation of the
    `add_doxygen_doc` function. This is an *explicit is better than implicit* pattern,
    which we consider a good CMake practice: do not use module inclusion to perform
    macro-like (or function-like) actions.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 实际创建`docs`目标的操作留给了稍后调用`add_doxygen_doc`函数。这是一种“显式优于隐式”的模式，我们认为这是良好的CMake实践：不要使用模块包含来执行类似宏（或函数）的操作。
- en: We have implemented `add_doxygen_doc` by using a function, and not a macro,
    in order to limit the scope and possible side-effects of variable definitions.
    In this particular case, both a function and a macro would work (and would yield
    the same result), but we recommend preferring functions over macros unless variables
    in the parent scope need to be modified.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过使用函数而不是宏来实现`add_doxygen_doc`，以限制变量定义的作用域和可能的副作用。在这种情况下，函数和宏都可以工作（并且会产生相同的结果），但我们建议除非需要修改父作用域中的变量，否则应优先使用函数而不是宏。
- en: A new and improved `FindDoxygen.cmake` module was added in CMake 3.9\. The convenience
    function `doxygen_add_docs` was implemented, which will behave as the macro that
    we have presented in this recipe. For more details, check out the online documentation
    at [https://cmake.org/cmake/help/v3.9/module/FindDoxygen.html](https://cmake.org/cmake/help/v3.9/module/FindDoxygen.html).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: CMake 3.9中添加了一个新的改进的`FindDoxygen.cmake`模块。实现了便利函数`doxygen_add_docs`，它将作为我们在本食谱中介绍的宏。有关更多详细信息，请查看在线文档[https://cmake.org/cmake/help/v3.9/module/FindDoxygen.html](https://cmake.org/cmake/help/v3.9/module/FindDoxygen.html)。
- en: Building documentation using Sphinx
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Sphinx构建文档
- en: The code for this recipe is available at [https://github.com/dev-cafe/cmake-cookbook/tree/v1.0/chapter-12/recipe-02](https://github.com/dev-cafe/cmake-cookbook/tree/v1.0/chapter-12/recipe-02),
    and includes a C++ example. The recipe is valid with CMake version 3.5 (and higher)
    and has been tested on GNU/Linux, macOS, and Windows.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱的代码可在[https://github.com/dev-cafe/cmake-cookbook/tree/v1.0/chapter-12/recipe-02](https://github.com/dev-cafe/cmake-cookbook/tree/v1.0/chapter-12/recipe-02)找到，并包含一个C++示例。该食谱适用于CMake版本3.5（及以上），并在GNU/Linux、macOS和Windows上进行了测试。
- en: Sphinx is a Python program and a very popular documentation system ([http://www.sphinx-doc.org](http://www.sphinx-doc.org)).
    When used with Python projects, it can parse the source file for so-called docstrings
    and automatically produce documentation pages for functions and classes. However,
    Sphinx is not limited to Python, and can also parse reStructuredText, Markdown
    plain-text files, and generate HTML, ePUB, or PDF documentation. Coupled with
    the online Read the Docs service ([https://readthedocs.org](https://readthedocs.org)),
    it offers a great way to quickly get started with writing and deploying documentation.
    This recipe will show you how to use CMake to build documentation based on Sphinx.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Sphinx是一个Python程序，也是一个非常流行的文档系统（[http://www.sphinx-doc.org](http://www.sphinx-doc.org)）。当与Python项目一起使用时，它可以解析源文件中的所谓docstrings，并自动为函数和类生成文档页面。然而，Sphinx不仅限于Python，还可以解析reStructuredText、Markdown纯文本文件，并生成HTML、ePUB或PDF文档。与在线Read
    the Docs服务（[https://readthedocs.org](https://readthedocs.org)）结合使用，它提供了一种快速开始编写和部署文档的绝佳方式。本食谱将向您展示如何使用CMake基于Sphinx构建文档。
- en: Getting ready
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We wish to build a simple website documenting our messaging library. The source
    tree now looks as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望构建一个简单的网站来记录我们的消息库。源树现在看起来如下：
- en: '[PRE18]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: We have some custom modules in the `cmake` subdirectory, and the `docs` subdirectory
    contains the main page for our website in a plain-text reStructuredText format,
    `index.rst`, and a Python template file, `conf.py.in`, with settings for Sphinx.
    This file can be autogenerated using the `sphinx-quickstart` utility, which is
    a part of the Sphinx installation.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`cmake`子目录中有一些自定义模块，`docs`子目录包含我们网站的主页，以纯文本reStructuredText格式，`index.rst`，以及一个Python模板文件，`conf.py.in`，用于Sphinx的设置。此文件可以使用Sphinx安装的一部分`sphinx-quickstart`实用程序自动生成。
- en: How to do it
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作
- en: 'Compared to the previous recipe, we will modify the root `CMakeLists.txt` file,
    and will also implement a function (`add_sphinx_doc`):'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前的食谱相比，我们将修改根`CMakeLists.txt`文件，并实现一个函数（`add_sphinx_doc`）：
- en: 'After appending the `cmake` folder to the `CMAKE_MODULE_PATH`, we include the
    `UseSphinxDoc.cmake` custom module, as follows:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在将`cmake`文件夹附加到`CMAKE_MODULE_PATH`之后，我们如下包含`UseSphinxDoc.cmake`自定义模块：
- en: '[PRE19]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The `UseSphinxDoc.cmake` module defines the `add_sphinx_doc` function. We call
    this function with keyword arguments, in order to set up our Sphinx documentation
    build. The custom documentation target will be called `docs`:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`UseSphinxDoc.cmake`模块定义了`add_sphinx_doc`函数。我们使用关键字参数调用此函数，以设置我们的Sphinx文档构建。自定义文档目标将被称为`docs`：'
- en: '[PRE20]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The `UseSphinxDoc.cmake` module follows the same *explicit is better than implicit*
    pattern that we used in the previous recipe:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`UseSphinxDoc.cmake`模块遵循我们在前一个食谱中使用的相同“显式优于隐式”模式：'
- en: 'We need to find the Python interpreter and the `Sphinx` executable, as follows:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要找到Python解释器和`Sphinx`可执行文件，如下所示：
- en: '[PRE21]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We then define the `add_sphinx_doc` function with one-value keyword arguments.
    These are parsed by the `cmake_parse_arguments` command:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们定义带有单值关键字参数的`add_sphinx_doc`函数。这些参数由`cmake_parse_arguments`命令解析：
- en: '[PRE22]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The template file, `conf.py.in`, passed as the `CONF_FILE` keyword argument,
    is configured to `conf.py` in the `SPHINX_DOC_BUILD_DIR`:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 模板文件`conf.py.in`，作为`CONF_FILE`关键字参数传递，配置为在`SPHINX_DOC_BUILD_DIR`中的`conf.py`：
- en: '[PRE23]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We add a custom target, called `SPHINX_DOC_TARGET_NAME`, to orchestrate the
    documentation building with Sphinx:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们添加了一个名为`SPHINX_DOC_TARGET_NAME`的自定义目标，以协调使用Sphinx构建文档：
- en: '[PRE24]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Lastly, we print out a status message to the user:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们向用户打印出一条状态消息：
- en: '[PRE25]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We configure the project and build the `docs` target:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们配置项目并构建`docs`目标：
- en: '[PRE26]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This will produce the HTML documentation in the `SPHINX_DOC_HTML_DIR` subdirectory
    of the build tree. Once again, you can use your favorite browser to open `index.html`
    and see the shiny (but still sparse) documentation:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在构建树的`SPHINX_DOC_HTML_DIR`子目录中生成HTML文档。再次，您可以使用您喜欢的浏览器打开`index.html`并查看闪亮（但仍然稀疏）的文档：
- en: '![](img/b3ae5f45-8d88-4aec-83e4-c44e4b8890c3.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b3ae5f45-8d88-4aec-83e4-c44e4b8890c3.png)'
- en: How it works
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的
- en: Once again, we leveraged the power of `add_custom_target` to add an arbitrary
    build target to our build system. In this case, the documentation will be built
    using Sphinx. Since Sphinx is a Python program that can be extended with other
    Python modules, the `docs` target will depend on the Python interpreter. We make
    sure that dependencies are satisfied by using `find_package`. Note that the `FindSphinx.cmake`
    module is not yet a standard CMake module; a copy of it is included with the project
    source, under the `cmake` subdirectory.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们利用了`add_custom_target`的强大功能，向我们的构建系统添加了一个任意构建目标。在这种情况下，文档将使用Sphinx构建。由于Sphinx是一个可以与其他Python模块扩展的Python程序，因此`docs`目标将依赖于Python解释器。我们确保通过使用`find_package`来满足依赖关系。请注意，`FindSphinx.cmake`模块还不是标准的CMake模块；它的副本包含在项目源代码的`cmake`子目录下。
- en: Combining Doxygen and Sphinx
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结合Doxygen和Sphinx
- en: The code for this recipe is available at [https://github.com/dev-cafe/cmake-cookbook/tree/v1.0/chapter-12/recipe-03](https://github.com/dev-cafe/cmake-cookbook/tree/v1.0/chapter-12/recipe-03),
    and includes a C++ example. The recipe is valid with CMake version 3.5 (and higher)
    and has been tested on GNU/Linux, macOS, and Windows.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱的代码可在[https://github.com/dev-cafe/cmake-cookbook/tree/v1.0/chapter-12/recipe-03](https://github.com/dev-cafe/cmake-cookbook/tree/v1.0/chapter-12/recipe-03)找到，并包含一个C++示例。该食谱适用于CMake版本3.5（及以上），并在GNU/Linux、macOS和Windows上进行了测试。
- en: We have a C++ project, and thus, Doxygen is the ideal choice to generate source
    code documentation. However, we also wish to publish user-facing documentation,
    explaining, for example, our design choices. We would rather use Sphinx for that,
    because the generated HTML will also work on mobile devices, and because we can
    deploy the documentation to Read the Docs ([https://readthedocs.org](https://readthedocs.org)).
    This recipe will illustrate how to use the Breathe plugin ([https://breathe.readthedocs.io](https://breathe.readthedocs.io))
    to bridge Doxygen and Sphinx.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个C++项目，因此，Doxygen是生成源代码文档的理想选择。然而，我们也希望发布面向用户的文档，例如解释我们的设计选择。我们更愿意使用Sphinx来实现这一点，因为生成的HTML也可以在移动设备上工作，而且我们可以将文档部署到Read
    the Docs（[https://readthedocs.org](https://readthedocs.org)）。本食谱将说明如何使用Breathe插件（[https://breathe.readthedocs.io](https://breathe.readthedocs.io)）来桥接Doxygen和Sphinx。
- en: Getting ready
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'The source tree for this recipe is similar to the two previous recipes:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱的源代码树与前两个食谱类似：
- en: '[PRE27]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The `docs` subdirectory now contains both a `Doxyfile.in` and a `conf.py.in`
    template file, with settings for Doxygen and Sphinx, respectively. In addition,
    we also have a `code-reference` subdirectory.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`docs`子目录中包含了`Doxyfile.in`和`conf.py.in`模板文件，分别用于Doxygen和Sphinx的设置。此外，我们还有一个`code-reference`子目录。
- en: 'The files following `code-reference` contain Breathe instructions, to include
    Doxygen-generated documentation in Sphinx:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 紧随`code-reference`的文件包含Breathe指令，以在Sphinx中包含Doxygen生成的文档：
- en: '[PRE28]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This will output the documentation for the `Message` class.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这将输出`Message`类的文档。
- en: How to do it
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作
- en: 'The `CMakeLists.txt` file in the `src` directory is unchanged. The only changes
    in the root `CMakeLists.txt` file are as follows:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`src`目录中的`CMakeLists.txt`文件未更改。根目录中的`CMakeLists.txt`文件的唯一更改如下：'
- en: 'We include the `UseBreathe.cmake` custom module:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们包含`UseBreathe.cmake`自定义模块：
- en: '[PRE29]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'We call the `add_breathe_doc` function. This function is defined in the custom
    module, and it accepts keyword arguments to set up the combined Doxygen and Sphinx
    build:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们调用了`add_breathe_doc`函数。该函数在自定义模块中定义，并接受关键字参数来设置结合Doxygen和Sphinx的构建：
- en: '[PRE30]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Let us examine the `UseBreatheDoc.cmake` module. This follows the same explicit
    is better than implicit pattern that we described in the two previous recipes.
    The module is described in detail, as follows:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查`UseBreatheDoc.cmake`模块。这遵循了我们之前两个配方中描述的明确优于隐式的相同模式。该模块详细描述如下：
- en: 'The documentation generation depends on Doxygen:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 文档生成依赖于Doxygen：
- en: '[PRE31]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'We also depend on the Python interpreter and `Sphinx`:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还依赖于Python解释器和`Sphinx`：
- en: '[PRE32]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'In addition, we must also find the `breathe` Python module. We use the `FindPythonModule.cmake`
    module:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，我们还必须找到`breathe` Python模块。我们使用`FindPythonModule.cmake`模块：
- en: '[PRE33]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'We define the `add_breathe_doc` function. This function has a one-value keyword
    argument, which we will parse using the `cmake_parse_arguments` command:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们定义了`add_breathe_doc`函数。该函数有一个单值关键字参数，我们将使用`cmake_parse_arguments`命令对其进行解析：
- en: '[PRE34]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The `BREATHE_DOC_CONF_FILE` template file for Sphinx is configured to `conf.py`
    in `BREATHE_DOC_BUILD_DIR`:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`BREATHE_DOC_CONF_FILE`模板文件用于Sphinx，配置为`conf.py`在`BREATHE_DOC_BUILD_DIR`中：'
- en: '[PRE35]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Correspondingly, the `BREATHE_DOC_DOXY_FILE` template file for Doxygen is configured
    to `Doxyfile` in `BREATHE_DOC_BUILD_DIR`:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 相应地，Doxygen的`BREATHE_DOC_DOXY_FILE`模板文件配置为`Doxyfile`在`BREATHE_DOC_BUILD_DIR`中：
- en: '[PRE36]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'We then add our `BREATHE_DOC_TARGET_NAME` custom target. Note that only Sphinx
    is run; the necessary calls to Doxygen happen within `BREATHE_DOC_SPHINX_FILE`:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们添加了自定义目标`BREATHE_DOC_TARGET_NAME`。请注意，只运行了Sphinx；对Doxygen的必要调用在`BREATHE_DOC_SPHINX_FILE`内部发生：
- en: '[PRE37]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Finally, a status message is printed to the user:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，向用户打印一条状态消息：
- en: '[PRE38]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'After configuring, we can build the documentation as usual:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置完成后，我们可以像往常一样构建文档：
- en: '[PRE39]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The documentation will be available in the `BREATHE_DOC_HTML_DIR` subdirectory
    of the build tree. After firing up your browser to open the `index.html` file,
    you can navigate to the documentation for the `Message` class:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 文档将可在构建树的`BREATHE_DOC_HTML_DIR`子目录中找到。启动浏览器打开`index.html`文件后，您可以导航到`Message`类的文档：
- en: '![](img/0f7ce5f6-86c1-47c7-aeb6-9f045c12b203.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0f7ce5f6-86c1-47c7-aeb6-9f045c12b203.png)'
- en: How it works
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理
- en: 'You will note that both Doxygen and Sphinx are run, despite the fact that only
    the invocation to Sphinx was given when declaring the custom `BREATHE_DOC_TARGET_NAME`
    target. This is thanks to the following settings, defined in the `conf.py` file
    for Sphinx:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到，尽管在声明自定义`BREATHE_DOC_TARGET_NAME`目标时只给出了对Sphinx的调用，但Doxygen和Sphinx都运行了。这是由于Sphinx的`conf.py`文件中定义的以下设置：
- en: '[PRE40]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Doxygen will generate XML output that the Breathe plugin will be able to render
    in a form consistent with the chosen Sphinx documentation style.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: Doxygen将生成XML输出，Breathe插件将能够以与所选Sphinx文档样式一致的形式呈现这些输出。
