["```cpp\n    /* Customer.h - Step01 */\n    #ifndef __CUSTOMER_H__\n    #define __CUSTOMER_H__\n\n    #include <string>\n    #include <vector>\n\n    class Customer\n    {\n      public:\n        static std::vector<Customer> registeredCustomers;\n        int id = 0;\n        std::string name;\n        std::string address;\n        std::string phoneNumber;\n        std::string email;\n        bool isActive = true;\n\n        std::vector<std::string> GetActiveCustomerNames();\n        std::vector<std::string> GetActiveCustomerAddresses();\n        std::vector<std::string> GetActiveCustomerPhoneNumbers();\n        std::vector<std::string> GetActiveCustomerEmails();\n    };\n    #endif // __CUSTOMER_H__\n\n```", "```cpp\n    /* Customer.cpp - Step01 */\n    #include \"Customer.h\"\n\n    using namespace std;\n\n    vector<Customer> Customer::registeredCustomers;\n\n    vector<string> Customer::GetActiveCustomerNames()\n    {\n      vector<string> returnList;\n      for (auto &customer : Customer::registeredCustomers)\n      {\n        if (customer.isActive)\n        {\n            returnList.push_back(customer.name);\n        }\n      }\n       return returnList;\n    }\n\n    vector<string> Customer::GetActiveCustomerAddresses()\n    {\n      vector<string> returnList;\n      for (auto &customer : Customer::registeredCustomers)\n      {\n        if (customer.isActive)\n        {\n            returnList.push_back(customer.address);\n        }\n      }\n      return returnList;\n    }\n\n    vector<string> Customer::GetActiveCustomerPhoneNumbers()\n    {\n      vector<string> returnList;\n      for (auto &customer : Customer::registeredCustomers)\n      {\n        if (customer.isActive)\n        {\n            returnList.push_back(customer.phoneNumber);\n        }\n      }\n      return returnList;\n    }\n\n    vector<string> Customer::GetActiveCustomerEmails()\n    {\n      vector<string> returnList;\n      for (auto &customer : Customer::registeredCustomers)\n      {\n        if (customer.isActive)\n        {\n            returnList.push_back(customer.email);\n        }\n      }\n      return returnList;\n    } \n\n```", "```cpp\n    /* Main.cpp - Step01 */\n    #include <iostream>\n    #include <algorithm>\n    #include \"Customer.h\"\n\n    using namespace std;\n\n    void RegisterCustomers()\n    {\n      int i = 0;\n      bool b = false;\n\n      // Initialize name\n      vector<string> nameList =\n      {\n        \"William\",\n        \"Aiden\",\n        \"Rowan\",\n        \"Jamie\",\n        \"Quinn\",\n        \"Haiden\",\n        \"Logan\",\n        \"Emerson\",\n        \"Sherlyn\",\n        \"Molly\"\n       };\n\n       // Clear the registeredCustomers vector array\n       Customer::registeredCustomers.clear();\n\n       for (auto name : nameList)\n       {\n         // Create Customer object\n         // and fill all properties\n         Customer c;\n         c.id = i++;\n         c.name = name;\n         c.address = \"somewhere\";\n         c.phoneNumber = \"0123\";\n         c.email = name + \"@xyz.com\";\n         c.isActive = b;\n\n         // Flip the b value\n         b = !b;\n\n         // Send data to the registeredCustomers\n         Customer::registeredCustomers.push_back(c);\n      }\n    }\n\n    auto main() -> int\n    {\n      cout << \"[Step01]\" << endl;\n      cout << \"--------\" << endl;\n\n      // Fill the Customer::registeredCustomers\n      // with the content\n      RegisterCustomers();\n\n      // Instance Customer object\n      Customer customer;\n\n      // Get the active customer names\n      cout << \"List of active customer names:\" << endl;\n      vector<string> activeCustomerNames =\n        customer.GetActiveCustomerNames();\n      for (auto &name : activeCustomerNames)\n      {\n        cout << name << endl;\n      }\n\n      return 0;\n    }\n\n```", "```cpp\n    /* Customer.h - Step02 */\n    #ifndef __CUSTOMER_H__\n    #define __CUSTOMER_H__\n\n    #include <string>\n    #include <vector>\n    #include <functional>\n\n    class Customer\n    {\n      private:\n        std::string GetActiveCustomerNames(\n          Customer customer) const;\n        std::string GetActiveCustomerAddresses(\n          Customer customer) const;\n        std::string GetActiveCustomerPhoneNumbers(\n          Customer customer) const;\n        std::string GetActiveCustomerEmails(\n          Customer customer) const;\n\n      public:\n        static std::vector<Customer> registeredCustomers;\n        int id = 0;\n        std::string name;\n        std::string address;\n        std::string phoneNumber;\n        std::string email;\n        bool isActive = true;\n\n std::vector<std::string> GetActiveCustomerByField(\n const std::string &field);\n\n std::vector<std::string> GetActiveCustomerByFunctionField(\n std::function<std::string(const Customer&, Customer)> \n funcField);\n     };\n     #endif //#ifndef __CUSTOMER_H__\n\n```", "```cpp\n    /* Customer.cpp - Step02 */\n    #include <stdexcept>\n    #include \"Customer.h\"\n\n    using namespace std;\n\n    vector<Customer> Customer::registeredCustomers;\n\n    string Customer::GetActiveCustomerNames(\n      Customer customer) const\n      {\n        return customer.name;\n      }\n\n    string Customer::GetActiveCustomerAddresses(\n      Customer customer) const\n      {\n        return customer.address;\n      }\n\n    string Customer::GetActiveCustomerPhoneNumbers(\n      Customer customer) const\n      {\n        return customer.phoneNumber;\n      }\n\n    string Customer::GetActiveCustomerEmails(\n      Customer customer) const\n      {\n return customer.email;\n      }\n\n vector<string> Customer::GetActiveCustomerByFunctionField(\n function<string(const Customer&, Customer)> funcField)\n {\n vector<string> returnList;\n\n Customer c;\n\n for (auto customer : Customer::registeredCustomers)\n {\n if (customer.isActive)\n {\n returnList.push_back(\n funcField(c, customer));\n }\n }\n return returnList;\n }\n\n vector<string> Customer::GetActiveCustomerByField(\n const string &field)\n {\n function<string(const Customer&, Customer)> funct;\n\n if (field == \"name\")\n {\n funct = &Customer::GetActiveCustomerNames;\n }\n else if (field == \"address\")\n {\n funct = &Customer::GetActiveCustomerAddresses;\n }\n else if (field == \"phoneNumber\")\n {\n funct = &Customer::GetActiveCustomerPhoneNumbers;\n }\n else if (field == \"email\")\n {\n funct = &Customer::GetActiveCustomerEmails;\n }\n else\n {\n throw invalid_argument(\"Unknown field\");\n }\n\n return GetActiveCustomerByFunctionField(funct);\n }\n\n```", "```cpp\n    /* Main.cpp - Step02 */\n    #include <iostream>\n    #include \"Customer.h\"\n\n    using namespace std;\n\n    void RegisterCustomers()\n    {\n      int i = 0;\n      bool b = false;\n\n      // Initialize name\n      vector<string> nameList =\n      {\n        \"William\",\n        \"Aiden\",\n        \"Rowan\",\n        \"Jamie\",\n        \"Quinn\",\n        \"Haiden\",\n        \"Logan\",\n        \"Emerson\",\n        \"Sherlyn\",\n        \"Molly\"\n       };\n\n      // Clear the registeredCustomers vector array\n      Customer::registeredCustomers.clear();\n      for (auto name : nameList)\n      {\n        // Create Customer object\n        // and fill all properties\n        Customer c;\n        c.id = i++;\n        c.name = name;\n        c.address = \"somewhere\";\n        c.phoneNumber = \"0123\";\n        c.email = name + \"@xyz.com\";\n        c.isActive = b;\n\n        // Flip the b value\n        b = !b;\n\n        // Send data to the registeredCustomers\n        Customer::registeredCustomers.push_back(c);\n       }\n    }\n\n    auto main() -> int\n    {\n      cout << \"[Step02]\" << endl;\n      cout << \"--------\" << endl;\n\n      // Fill the Customer::registeredCustomers\n      // with the content\n      RegisterCustomers();\n\n      // Instance Customer object\n      Customer customer;\n\n      // Get the active customer names\n      cout << \"List of active customer names:\" << endl;\n      vector<string> activeCustomerNames =\n customer.GetActiveCustomerByField(\"name\");\n      for (auto &name : activeCustomerNames)\n      {\n        cout << name << endl;\n      }\n\n      return 0;\n    }\n\n```", "```cpp\n    template<typename T, typename U>\n    class BaseClass\n    {\n      public:\n        virtual U InvokeFunction(\n          const std::shared_ptr<T>&) = 0;\n    };\n\n```", "```cpp\n    class CustomerName :\n      public BaseClass<Customer, std::string>\n      {\n        public:\n          virtual std::string InvokeFunction(\n            const std::shared_ptr<Customer> &customer)\n          {\n             return customer->name;\n          }\n      };\n\n    class CustomerAddress :\n      public BaseClass<Customer, std::string>\n      {\n        public:\n          virtual std::string InvokeFunction(\n            const std::shared_ptr<Customer> &customer)\n            {\n              return customer->address;\n            }\n      };\n\n    class CustomerPhoneNumber :\n      public BaseClass<Customer, std::string>\n      {\n         public:\n           virtual std::string InvokeFunction(\n             const std::shared_ptr<Customer> &customer)\n             {\n               return customer->phoneNumber;\n             }\n      };\n\n    class CustomerEmail :\n      public BaseClass<Customer, std::string>\n      {\n        public:\n          virtual std::string InvokeFunction(\n            const std::shared_ptr<Customer> &customer)\n            {\n              return customer->email;\n            }\n    };\n\n```", "```cpp\n    template<typename T>\n    static std::vector<T> GetActiveCustomerByFunctionField(\n      const std::shared_ptr<BaseClass<Customer, T>>\n        &classField);\n\n```", "```cpp\n    /* Customer.h - Step03 */\n    #ifndef __CUSTOMER_H__\n    #define __CUSTOMER_H__\n\n    #include <string>\n    #include <vector>\n    #include <memory>\n\n    class Customer\n    {\n      private:\n        template<typename T, typename U>\n        class BaseClass\n        {\n          public:\n            virtual U InvokeFunction(\n            const std::shared_ptr<T>&) = 0;\n         };\n\n        class CustomerName :\n          public BaseClass<Customer, std::string>\n          {\n            public:\n              virtual std::string InvokeFunction(\n                const std::shared_ptr<Customer> &customer)\n                {\n                  return customer->name;\n                }\n          };\n\n        class CustomerAddress :\n          public BaseClass<Customer, std::string>\n          {\n            public:\n              virtual std::string InvokeFunction(\n                const std::shared_ptr<Customer> &customer)\n                {\n                  return customer->address;\n                }\n          };\n\n        class CustomerPhoneNumber :\n          public BaseClass<Customer, std::string>\n          {\n            public:\n            virtual std::string InvokeFunction(\n              const std::shared_ptr<Customer> &customer)\n              {\n                return customer->phoneNumber;\n               }\n          };\n\n        class CustomerEmail :\n          public BaseClass<Customer, std::string>\n          {\n            public:\n              virtual std::string InvokeFunction(\n                const std::shared_ptr<Customer> &customer)\n                {\n                  return customer->email;\n                }\n           };\n\n         public:\n           static std::vector<Customer> registeredCustomers;\n           int id = 0;\n           std::string name;\n           std::string address;\n           std::string phoneNumber;\n           std::string email;\n           bool isActive = true;\n\n           static std::vector<std::string> GetActiveCustomerNames();\n           static std::vector<std::string> \n             GetActiveCustomerAddresses();\n           static std::vector<std::string> \n             GetActiveCustomerPhoneNumbers();\n           static std::vector<std::string> GetActiveCustomerEmails();\n\n           template<typename T>\n           static std::vector<T> GetActiveCustomerByFunctionField(\n             const std::shared_ptr<BaseClass<Customer, T>>\n             &classField);\n      };\n     #endif // __CUSTOMER_H__\n\n```", "```cpp\n    template<typename T>\n    vector<T> Customer::GetActiveCustomerByFunctionField(\n      const shared_ptr<BaseClass<Customer, T>> &classField)\n      {\n        vector<T> returnList;\n        for (auto customer : Customer::registeredCustomers)\n        {\n          if (customer.isActive)\n           {\n            returnList.push_back(\n              classField->InvokeFunction(\n                make_shared<Customer>(customer)));\n           }\n         }\n         return returnList;\n       }\n\n```", "```cpp\n    vector<string> Customer::GetActiveCustomerNames()\n    {\n      return Customer::GetActiveCustomerByFunctionField<string>(\n        make_shared<CustomerName>());\n    }\n\n    vector<string> Customer::GetActiveCustomerAddresses()\n    {\n      return Customer::GetActiveCustomerByFunctionField<string>(\n        make_shared<CustomerAddress>());\n    }\n\n    vector<string> Customer::GetActiveCustomerPhoneNumbers()\n    {\n      return Customer::GetActiveCustomerByFunctionField<string>(\n        make_shared<CustomerPhoneNumber>());\n    }\n\n    vector<string> Customer::GetActiveCustomerEmails()\n    {\n      return Customer::GetActiveCustomerByFunctionField<string>(\n        make_shared<CustomerEmail>());\n    }\n\n```", "```cpp\n    /* Customer.cpp - Step03 */\n    #include \"Customer.h\"\n\n    using namespace std;\n\n    vector<Customer> Customer::registeredCustomers;\n\n    vector<string> Customer::GetActiveCustomerNames()\n    {\n      return Customer::GetActiveCustomerByFunctionField<string>(\n        make_shared<CustomerName>());\n    }\n\n    vector<string> Customer::GetActiveCustomerAddresses()\n    {\n      return Customer::GetActiveCustomerByFunctionField<string>(\n        make_shared<CustomerAddress>());\n    }\n\n    vector<string> Customer::GetActiveCustomerPhoneNumbers()\n    {\n      return Customer::GetActiveCustomerByFunctionField<string>(\n        make_shared<CustomerPhoneNumber>());\n    }\n\n    vector<string> Customer::GetActiveCustomerEmails()\n    {\n      return Customer::GetActiveCustomerByFunctionField<string>(\n        make_shared<CustomerEmail>());\n    }\n\n    template<typename T>\n    vector<T> Customer::GetActiveCustomerByFunctionField(\n    const shared_ptr<BaseClass<Customer, T>> &classField)\n    {\n      vector<T> returnList;\n      for (auto &customer : Customer::registeredCustomers)\n      {\n        if (customer.isActive)\n        {\n          returnList.push_back(\n            classField->InvokeFunction(\n              make_shared<Customer>(customer)));\n         }\n       }\n       return returnList;\n    }\n\n```", "```cpp\n    /* Main.cpp - Step03 */\n    #include <iostream>\n    #include \"Customer.h\"\n\n    using namespace std;\n\n    void RegisterCustomers()\n    {\n      int i = 0;\n      bool b = false;\n\n      // Initialize name\n      vector<string> nameList =\n      {\n        \"William\",\n        \"Aiden\",\n        \"Rowan\",\n        \"Jamie\",\n        \"Quinn\",\n        \"Haiden\",\n        \"Logan\",\n        \"Emerson\",\n        \"Sherlyn\",\n        \"Molly\"\n      };\n\n      // Clear the registeredCustomers vector array\n      Customer::registeredCustomers.clear();\n\n      for (auto name : nameList)\n      {\n        // Create Customer object\n        // and fill all properties\n        Customer c;\n        c.id = i++;\n        c.name = name;\n        c.address = \"somewhere\";\n        c.phoneNumber = \"0123\";\n        c.email = name + \"@xyz.com\";\n        c.isActive = b;\n\n        // Flip the b value\n        b = !b;\n\n        // Send data to the registeredCustomers\n        Customer::registeredCustomers.push_back(c);\n      }\n    }\n\n    auto main() -> int\n    {\n      cout << \"[Step03]\" << endl;\n      cout << \"--------\" << endl;\n\n      // Fill the Customer::registeredCustomers\n      // with the content\n      RegisterCustomers();\n\n      // Instance Customer object\n      Customer customer;\n\n      // Get the active customer names\n      cout << \"List of active customer names:\" << endl;\n vector<string> activeCustomerNames =\n customer.GetActiveCustomerNames();\n      for (auto &name : activeCustomerNames)\n      {\n        cout << name << endl;\n      }\n\n       return 0;\n    }\n\n```", "```cpp\n    template<typename T>\n    vector<T> Customer::GetActiveCustomerByFunctionField(\n      vector<Customer> customers,\n      const shared_ptr<BaseClass<Customer, T>>\n        &classField)\n        {\n          vector<T> returnList;\n          for (auto &customer : customers)\n          {\n            if (customer.isActive)\n            {\n              returnList.push_back(\n                classField->InvokeFunction(\n                make_shared<Customer>(customer)));\n            }\n          }\n          return returnList;\n        }\n\n```", "```cpp\n    template<typename T>\n    static std::vector<T> GetActiveCustomerByFunctionField(\n      std::vector<Customer> customers,\n      const std::shared_ptr<BaseClass<Customer, T>>\n        &classField);\n\n```", "```cpp\n    vector<string> Customer::GetActiveCustomerNames(\n      vector<Customer> customers)\n      {\n        return Customer::GetActiveCustomerByFunctionField<string>(\n        customers,\n        make_shared<CustomerName>());\n      }\n\n    vector<string> Customer::GetActiveCustomerAddresses(\n      vector<Customer> customer)\n      {\n        return Customer::GetActiveCustomerByFunctionField<string>(\n        customer,\n        make_shared<CustomerAddress>());\n      }\n\n    vector<string> Customer::GetActiveCustomerPhoneNumbers(\n      vector<Customer> customer)\n      {\n        return Customer::GetActiveCustomerByFunctionField<string>(\n        customer,\n        make_shared<CustomerPhoneNumber>());\n      }\n\n   vector<string> Customer::GetActiveCustomerEmails(\n     vector<Customer> customer)\n     {\n        return Customer::GetActiveCustomerByFunctionField<string>(\n        customer,\n        make_shared<CustomerEmail>());\n     }\n\n```", "```cpp\n    static std::vector<std::string> GetActiveCustomerNames(\n      std::vector<Customer> customer);\n    static std::vector<std::string> GetActiveCustomerAddresses(\n      std::vector<Customer> customer);\n    static std::vector<std::string> GetActiveCustomerPhoneNumbers(\n      std::vector<Customer> customer);\n    static std::vector<std::string> GetActiveCustomerEmails(\n      std::vector<Customer> customer);\n\n```", "```cpp\n    /* Customer.h - Step04 */\n    #ifndef __CUSTOMER_H__\n    #define __CUSTOMER_H__\n\n    #include <string>\n    #include <vector>\n    #include <memory>\n\n    class Customer\n    {\n      private:\n        template<typename T, typename U>\n        class BaseClass\n        {\n          public:\n            virtual U InvokeFunction(\n            const std::shared_ptr<T>&) = 0;\n        };\n\n        class CustomerName :\n          public BaseClass<Customer, std::string>\n          {\n            public:\n              virtual std::string InvokeFunction(\n                const std::shared_ptr<Customer> &customer)\n                {\n                  return customer->name;\n                }\n          };\n\n       class CustomerAddress :\n         public BaseClass<Customer, std::string>\n         {\n           public:\n             virtual std::string InvokeFunction(\n               const std::shared_ptr<Customer> &customer)\n              {\n            return customer->address;\n          }\n    };\n\n      class CustomerPhoneNumber :\n        public BaseClass<Customer, std::string>\n        {\n          public:\n            virtual std::string InvokeFunction(\n              const std::shared_ptr<Customer> &customer)\n              {\n                return customer->phoneNumber;\n              }\n       };\n\n     class CustomerEmail :\n        public BaseClass<Customer, std::string>\n        {\n          public:\n            virtual std::string InvokeFunction(\n            const std::shared_ptr<Customer> &customer)\n            {\n              return customer->email;\n            }\n        };\n\n      public:\n        int id = 0;\n        std::string name;\n        std::string address;\n        std::string phoneNumber;\n        std::string email;\n        bool isActive = true;\n\n        static std::vector<std::string> GetActiveCustomerNames(\n          std::vector<Customer> customer);\n       static std::vector<std::string> GetActiveCustomerAddresses(\n          std::vector<Customer> customer);\n       static std::vector<std::string> GetActiveCustomerPhoneNumbers(\n          std::vector<Customer> customer);\n       static std::vector<std::string> GetActiveCustomerEmails(\n          std::vector<Customer> customer);\n\n       template<typename T>\n       static std::vector<T> GetActiveCustomerByFunctionField(\n        std::vector<Customer> customers,\n        const std::shared_ptr<BaseClass<Customer, T>>\n          &classField);\n    };\n    #endif // __CUSTOMER_H__\n\n```", "```cpp\n    /* Customer.cpp - Step04 */\n    #include \"Customer.h\"\n\n    using namespace std;\n\n    vector<string> Customer::GetActiveCustomerNames(\n      vector<Customer> customers)\n      {\n        return Customer::GetActiveCustomerByFunctionField<string>(\n        customers,\n        make_shared<CustomerName>());\n      }\n\n    vector<string> Customer::GetActiveCustomerAddresses(\n      vector<Customer> customer)\n      {\n        return Customer::GetActiveCustomerByFunctionField<string>(\n          customer,\n        make_shared<CustomerAddress>());\n       }\n\n    vector<string> Customer::GetActiveCustomerPhoneNumbers(\n      vector<Customer> customer)\n      {\n        return Customer::GetActiveCustomerByFunctionField<string>(\n         customer,\n        make_shared<CustomerPhoneNumber>());\n      }\n\n    vector<string> Customer::GetActiveCustomerEmails(\n      vector<Customer> customer)\n      {\n        return Customer::GetActiveCustomerByFunctionField<string>(\n        customer,\n        make_shared<CustomerEmail>());\n       }\n\n    template<typename T>\n    vector<T> Customer::GetActiveCustomerByFunctionField(\n      vector<Customer> customers,\n      const shared_ptr<BaseClass<Customer, T>>\n        &classField)\n        {\n          vector<T> returnList;\n          for (auto &customer : customers)\n          {\n            if (customer.isActive)\n            {\n              returnList.push_back(\n                classField->InvokeFunction(\n                make_shared<Customer>(customer)));\n             }\n           }\n           return returnList;\n         }\n\n```", "```cpp\n    /* Main.cpp - Step04 */\n    #include <iostream>\n    #include \"Customer.h\"\n\n    using namespace std;\n\n vector<Customer> RegisterCustomers()\n    {\n      int i = 0;\n      bool b = false;\n\n      vector<Customer> returnValue;\n\n      // Initialize name\n      vector<string> nameList =\n      {\n        \"William\",\n        \"Aiden\",\n        \"Rowan\",\n        \"Jamie\",\n        \"Quinn\",\n        \"Haiden\",\n        \"Logan\",\n        \"Emerson\",\n        \"Sherlyn\",\n        \"Molly\"\n       };\n\n      for (auto name : nameList)\n      {\n        // Create Customer object\n        // and fill all properties\n        Customer c;\n        c.id = i++;\n        c.name = name;\n        c.address = \"somewhere\";\n        c.phoneNumber = \"0123\";\n        c.email = name + \"@xyz.com\";\n        c.isActive = b;\n        // Flip the b value\n        b = !b;\n        // Send data to the registeredCustomers\n        returnValue.push_back(c);\n      }\n\n      return returnValue;\n    }\n\n    auto main() -> int\n    {\n      cout << \"[Step04]\" << endl;\n      cout << \"--------\" << endl;\n\n      // Instance Customer object\n      Customer customer;\n\n      // Get the active customer names\n      cout << \"List of active customer names:\" << endl;\n      vector<string> activeCustomerNames =\n        customer.GetActiveCustomerNames(\n            RegisterCustomers());\n      for (auto name : activeCustomerNames)\n      {\n        cout << name << endl;\n       }\n\n       return 0;\n    }\n\n```", "```cpp\n    template<typename T>\n    vector<T> Customer::GetActiveCustomerByFunctionField(\n      vector<Customer> customers,\n      const shared_ptr<BaseClass<Customer, T>>\n        &classField)\n        {\n vector<Customer> activeCustomers;\n          vector<T> returnList;\n\n copy_if(\n customers.begin(),\n customers.end(),\n back_inserter(activeCustomers),\n [](Customer customer)\n {\n if (customer.isActive)\n return true;\n else\n return false;\n });\n\n            for (auto &customer : customers)\n             {\n                if (customer.isActive)\n                {\n                  returnList.push_back(\n                  classField->InvokeFunction(\n                  make_shared<Customer>(customer)));\n                 }\n             }\n\n          return returnList;\n      }\n\n```", "```cpp\n    template<typename T>\n    vector<T> Customer::GetActiveCustomerByFunctionField(\n      vector<Customer> customers,\n      const shared_ptr<BaseClass<Customer, T>> \n        &classField)\n        {\n          vector<Customer> activeCustomers;\n          vector<T> returnList;\n\n          copy_if(\n            customers.begin(),\n            customers.end(),\n            back_inserter(activeCustomers),\n            [](Customer customer)\n            {\n              if (customer.isActive)\n                return true;\n              else\n                return false;\n             });\n\n for_each(\n activeCustomers.begin(),\n activeCustomers.end(),\n [&returnList, &classField](Customer customer)\n {\n returnList.push_back(\n classField->InvokeFunction(\n make_shared<Customer>(customer))\n );\n });\n\n         return returnList;\n    }\n\n```", "```cpp\n    int Customer::CountActiveCustomers(\n      vector<Customer> customer)\n      {\n        int add = 0;\n\n        for (auto cust : customer)\n        {\n          // Adding 1 if the customer is active\n          if(cust.isActive)\n            ++add;\n        }\n\n        return add;\n    }\n\n```", "```cpp\n    /* Customer.cpp - Step05 */\n    #include <algorithm>\n    #include \"Customer.h\"\n\n    using namespace std;\n\n    vector<string> Customer::GetActiveCustomerNames(\n      vector<Customer> customers)\n      {\n        return Customer::GetActiveCustomerByFunctionField<string>(\n        customers,\n        make_shared<CustomerName>());\n      }\n\n    vector<string> Customer::GetActiveCustomerAddresses(\n      vector<Customer> customer)\n      {\n        return Customer::GetActiveCustomerByFunctionField<string>(\n          customer,\n        make_shared<CustomerAddress>());\n      }\n\n    vector<string> Customer::GetActiveCustomerPhoneNumbers(\n      vector<Customer> customer)\n      {\n        return Customer::GetActiveCustomerByFunctionField<string>(\n          customer,\n        make_shared<CustomerPhoneNumber>());\n      }\n\n    vector<string> Customer::GetActiveCustomerEmails(\n      vector<Customer> customer)\n      {\n        return Customer::GetActiveCustomerByFunctionField<string>(\n        customer,\n        make_shared<CustomerEmail>());\n      }\n\n int Customer::CountActiveCustomers(\n vector<Customer> customer)\n {\n int add = 0;\n\n for (auto cust : customer)\n {\n // Adding 1 if the customer is active\n if(cust.isActive)\n ++add;\n }\n\n return add;\n }\n\n    template<typename T>\n    vector<T> Customer::GetActiveCustomerByFunctionField(\n vector<Customer> customers,\n      const shared_ptr<BaseClass<Customer, T>>\n        &classField)\n        {\n vector<Customer> activeCustomers;\n          vector<T> returnList;\n\n copy_if(\n customers.begin(),\n customers.end(),\n back_inserter(activeCustomers),\n [](Customer customer)\n {\n if (customer.isActive)\n return true;\n else\n return false;\n });\n\n for_each(\n activeCustomers.begin(),\n activeCustomers.end(),\n [&returnList, &classField](Customer customer)\n {\n returnList.push_back(\n classField->InvokeFunction(\n make_shared<Customer>(customer))\n );\n });\n\n return returnList;\n     }\n\n```", "```cpp\n    /* Customer.h - Step05 */\n    #ifndef __CUSTOMER_H__\n    #define __CUSTOMER_H__\n\n    #include <string>\n    #include <vector>\n    #include <memory>\n\n    class Customer\n    {\n      private:\n        template<typename T, typename U>\n        class BaseClass\n        {\n          public:\n            virtual U InvokeFunction(\n            const std::shared_ptr<T>&) = 0;\n        };\n\n        class CustomerName :\n          public BaseClass<Customer, std::string>\n          {\n            public:\n              virtual std::string InvokeFunction(\n                const std::shared_ptr<Customer> &customer)\n                {\n                  return customer->name;\n                 }\n          };\n\n        class CustomerAddress :\n          public BaseClass<Customer, std::string>\n          {\n             public:\n               virtual std::string InvokeFunction(\n                 const std::shared_ptr<Customer> &customer)\n                 {\n                   return customer->address;\n                 }\n          };\n\n        class CustomerPhoneNumber :\n          public BaseClass<Customer, std::string>\n          {\n            public:\n              virtual std::string InvokeFunction(\n                const std::shared_ptr<Customer> &customer)\n                {\n                 return customer->phoneNumber;\n                }\n           };\n\n    class CustomerEmail :\n        public BaseClass<Customer, std::string>\n    {\n    public:\n        virtual std::string InvokeFunction(\n            const std::shared_ptr<Customer> &customer)\n        {\n            return customer->email;\n        }\n    };\n\n    public:\n      int id = 0;\n      std::string name;\n      std::string address;\n      std::string phoneNumber;\n      std::string email;\n      bool isActive = true;\n\n      static std::vector<std::string> GetActiveCustomerNames(\n        std::vector<Customer> customer);\n      static std::vector<std::string> GetActiveCustomerAddresses(\n        std::vector<Customer> customer);\n      static std::vector<std::string> GetActiveCustomerPhoneNumbers(\n        std::vector<Customer> customer);\n      static std::vector<std::string> GetActiveCustomerEmails(\n        std::vector<Customer> customer);\n\n static int CountActiveCustomers(\n std::vector<Customer> customer);\n\n      template<typename T>\n      static std::vector<T> GetActiveCustomerByFunctionField(\n        std::vector<Customer> customers,\n        const std::shared_ptr<BaseClass<Customer, T>>\n            &classField);\n    };\n    #endif // __CUSTOMER_H__\n\n```", "```cpp\n    /* Main.cpp - Step05 */\n    #include <iostream>\n    #include <chrono>\n    #include \"Customer.h\"\n\n    using namespace std;\n\n    vector<Customer> RegisterCustomers()\n    {\n      int i = 0;\n      bool b = false;\n\n      vector<Customer> returnValue;\n\n      // Initialize name\n      vector<string> nameList =\n      {\n        \"William\",\n        \"Aiden\",\n        \"Rowan\",\n        \"Jamie\",\n        \"Quinn\",\n        \"Haiden\",\n        \"Logan\",\n        \"Emerson\",\n        \"Sherlyn\",\n        \"Molly\"\n      };\n\n      for (auto name : nameList)\n      {\n        // Create Customer object\n        // and fill all properties\n        Customer c;\n        c.id = i++;\n        c.name = name;\n        c.address = \"somewhere\";\n        c.phoneNumber = \"0123\";\n        c.email = name + \"@xyz.com\";\n        c.isActive = b;\n\n        // Flip the b value\n        b = !b;\n\n        // Send data to the registeredCustomers\n        returnValue.push_back(c);\n      }\n\n     return returnValue;\n    }\n\n    auto main() -> int\n    {\n      cout << \"[Step05]\" << endl;\n      cout << \"--------\" << endl;\n\n // Recording start time for the program\n auto start = chrono::high_resolution_clock::now();\n\n      // Instance Customer object\n      Customer customer;\n\n // Counting active customers\n cout << \"Total active customers: \" << endl;\n cout << customer.CountActiveCustomers(\n RegisterCustomers());\n cout << endl << \"--------\" << endl;\n\n      // Get the active customer names\n      cout << \"List of active customer names:\" << endl;\n      vector<string> activeCustomerNames =\n        customer.GetActiveCustomerNames(\n            RegisterCustomers());\n      for (auto name : activeCustomerNames)\n      {\n        cout << name << endl;\n      }\n\n // Recording end time for the program\n auto finish = chrono::high_resolution_clock::now();\n\n // Calculating the elapsed time for the program\n chrono::duration<double, milli> elapsed = finish - start;\n\n // Displaying elapsed time for the program\n cout << \"--------\" << endl;\n cout << \"Total consuming time = \";\n cout << elapsed.count() << \" milliseconds\" << endl;\n\n      return 0;\n    }\n\n```", "```cpp\n    int Customer::CountActiveCustomers(\n      vector<Customer> customer)\n      {\n        if(customer.empty())\n          return 0;\n        else\n        {\n          // Adding 1 if the customer is active\n          int add = customer.front().isActive ? 1 : 0;\n\n          // Removing the first element of vector\n          // It's similar with removing head\n          // and pass the tail\n          customer.erase(customer.begin());\n\n          // Running the recursion\n          return add + CountActiveCustomers(\n            customer);\n         }\n       }\n\n```", "```cpp\n    auto main() -> int\n    {\n      cout << \"[Step06]\" << endl;\n      cout << \"--------\" << endl;\n\n      // Recording start time for the program\n      auto start = chrono::high_resolution_clock::now();\n\n      // Instance Customer object\n      Customer customer;\n\n      // Counting active customers\n      cout << \"Total active customers: \" << endl;\n      cout << customer.CountActiveCustomers(\n        RegisterCustomers());\n      cout << endl << \"--------\" << endl;\n\n // Initializing memoization instance\n Memoization<vector<string>> custMemo(\n [customer]()\n {\n return customer.GetActiveCustomerNames(\n RegisterCustomers());\n });\n\n      // Get the active customer names\n      cout << \"List of active customer names:\" << endl;\n vector<string> activeCustomerNames =\n custMemo.Fetch();\n      for (auto name : activeCustomerNames)\n      {\n        cout << name << endl;\n      }\n\n      // Recording end time for the program\n      auto finish = chrono::high_resolution_clock::now();\n\n      // Calculating the elapsed time for the program\n      chrono::duration<double, milli> elapsed = finish - start;\n\n      // Displaying elapsed time for the program\n      cout << \"--------\" << endl;\n      cout << \"Total consuming time = \";\n      cout << elapsed.count() << \" milliseconds\" << endl;\n\n      return 0;\n    }\n\n```", "```cpp\ng++ -Wall -g -c Main.cpp -o Main.o\ng++ -Wall -g -c Customer.cpp -o Customer.o\ng++ Main.o Customer.o -o Customer.exe\n\n```"]