["```cpp\n<RCC>\n    <qresource prefix=\"/assets\">\n        <file alias=\"Style.qml\">assets/Style.qml</file>\n    </qresource>\n</RCC>\n```", "```cpp\npragma Singleton\nimport QtQuick 2.9\n\nItem {\n    readonly property color colourBackground: \"#f4c842\"\n}\n```", "```cpp\n<file alias=\"qmldir\">assets/qmldir</file>\n```", "```cpp\nmodule assets\nsingleton Style 1.0 Style.qml\n```", "```cpp\nimport assets 1.0\n```", "```cpp\nengine.addImportPath(\"qrc:/\");\n```", "```cpp\nRESOURCES += views.qrc \\\n    assets.qrc\n```", "```cpp\nRectangle {\n    ...    \n    color: Style.colourBackground\n    ...\n}\n```", "```cpp\n<file alias=\"fontawesome.ttf\">assets/fontawesome-webfont.ttf</file>\n```", "```cpp\nFontLoader {\n    id: fontAwesomeLoader\n    source: \"qrc:/assets/fontawesome.ttf\"\n}    \n```", "```cpp\nItem {\n    property alias fontAwesome: fontAwesomeLoader.name\n\n    readonly property color colourBackground: \"#efefef\"\n\n    FontLoader {\n        id: fontAwesomeLoader\n        source: \"qrc:/assets/fontawesome.ttf\"\n    }    \n}\n```", "```cpp\nColumn {\n    Text {\n        font {\n            family: Style.fontAwesome\n            pixelSize: 42\n        }\n        color: \"#ffffff\"\n        text: \"\\uf0c9\"\n    }\n    Text {\n        font {\n            family: Style.fontAwesome\n            pixelSize: 42\n        }\n        color: \"#ffffff\"\n        text: \"\\uf015\"\n    }\n    Text {\n        font {\n            family: Style.fontAwesome\n            pixelSize: 42\n        }\n        color: \"#ffffff\"\n        text: \"\\uf234\"\n    }\n    Text {\n        font {\n            family: Style.fontAwesome\n            pixelSize: 42\n        }\n        color: \"#ffffff\"\n        text: \"\\uf002\"\n    }\n}\n```", "```cpp\nRow {\n    Text {\n        font {\n            family: Style.fontAwesome\n            pixelSize: 42\n        }\n        color: \"#ffffff\"\n        text: \"\\uf234\"\n    }\n    Text {\n        color: \"#ffffff\"\n        text: \"New Client\"\n    }\n}\n```", "```cpp\nNavigationButton {\n}\n```", "```cpp\n<RCC>\n    <qresource prefix=\"/components\">\n        <file alias=\"qmldir\">components/qmldir</file>\n        <file   \n alias=\"NavigationButton.qml\">components/NavigationButton.qml</file>\n    </qresource>\n</RCC>\n```", "```cpp\nmodule components\nNavigationButton 1.0 NavigationButton.qml\n```", "```cpp\nimport components 1.0\n```", "```cpp\nimport QtQuick 2.9\nimport assets 1.0\n\nItem {\n    property alias iconCharacter: textIcon.text\n    property alias description: textDescription.text\n\n    Row {\n        Text {\n            id: textIcon\n            font {\n                family: Style.fontAwesome\n                pixelSize: 42\n            }\n            color: \"#ffffff\"\n            text: \"\\uf11a\"\n        }\n        Text {\n            id: textDescription\n            color: \"#ffffff\"\n            text: \"SET ME!!\"\n        }\n    }\n}\n```", "```cpp\nColumn {\n    NavigationButton {\n        iconCharacter: \"\\uf0c9\"\n        description: \"\"\n    }\n    NavigationButton {\n        iconCharacter: \"\\uf015\"\n        description: \"Dashboard\"\n    }\n    NavigationButton {\n        iconCharacter: \"\\uf234\"\n        description: \"New Client\"\n    }\n    NavigationButton {\n        iconCharacter: \"\\uf002\"\n        description: \"Find Client\"\n    }\n}\n```", "```cpp\nreadonly property color colourNavigationBarBackground: \"#000000\"\nreadonly property color colourNavigationBarFont: \"#ffffff\"\nreadonly property int pixelSizeNavigationBarIcon: 42\n```", "```cpp\nreadonly property real widthNavigationButtonIcon: 80\nreadonly property real heightNavigationButtonIcon: widthNavigationButtonIcon\nreadonly property real widthNavigationButtonDescription: 240\nreadonly property real heightNavigationButtonDescription: heightNavigationButtonIcon\nreadonly property real widthNavigationButton: widthNavigationButtonIcon + widthNavigationButtonDescription\nreadonly property real heightNavigationButton: Math.max(heightNavigationButtonIcon, heightNavigationButtonDescription)\n```", "```cpp\nItem {\n    property alias iconCharacter: textIcon.text\n    property alias description: textDescription.text\n\n    width: Style.widthNavigationButton\n    height: Style.heightNavigationButton\n\n    Rectangle {\n        id: background\n        anchors.fill: parent\n        color: Style.colourNavigationBarBackground\n\n        Row {\n            Text {\n                id: textIcon\n                width: Style.widthNavigationButtonIcon\n                height: Style.heightNavigationButtonIcon\n                font {\n                    family: Style.fontAwesome\n                    pixelSize: Style.pixelSizeNavigationBarIcon\n                }\n                color: Style.colourNavigationBarFont\n                text: \"\\uf11a\"\n            }\n            Text {\n                id: textDescription\n                width: Style.widthNavigationButtonDescription\n                height: Style.heightNavigationButtonDescription\n                color: Style.colourNavigationBarFont\n                text: \"SET ME!!\"\n            }\n        }\n    }\n}\n```", "```cpp\nreadonly property real widthNavigationBarCollapsed: widthNavigationButtonIcon\nreadonly property real heightNavigationBarExpanded: widthNavigationButton\n```", "```cpp\n<file alias=\"NavigationBar.qml\">components/NavigationBar.qml</file>\n```", "```cpp\nNavigationBar 1.0 NavigationBar.qml\n```", "```cpp\nimport QtQuick 2.9\nimport assets 1.0\n\nItem {\n    anchors {\n        top: parent.top\n        bottom: parent.bottom\n        left: parent.left\n    }\n    width: 100\n\n    Rectangle {\n        anchors.fill: parent\n        color: \"#000000\"\n\n        Column {\n            NavigationButton {\n                iconCharacter: \"\\uf0c9\"\n                description: \"\"\n            }\n            NavigationButton {\n                iconCharacter: \"\\uf015\"\n                description: \"Dashboard\"\n            }\n            NavigationButton {\n                iconCharacter: \"\\uf234\"\n                description: \"New Client\"\n            }\n            NavigationButton {\n                iconCharacter: \"\\uf002\"\n                description: \"Find Client\"\n            }\n        }\n    }\n}\n```", "```cpp\nNavigationBar {\n    id: navigationBar\n}\n```", "```cpp\nproperty bool isCollapsed: true\n```", "```cpp\nwidth: isCollapsed ? Style.widthNavigationBarCollapsed : Style.heightNavigationBarExpanded\n```", "```cpp\nsignal navigationButtonClicked()\n```", "```cpp\nproperty color hoverColour: Style.colourNavigationBarBackground\n```", "```cpp\nstates: [\n    State {\n        name: \"hover\"\n        PropertyChanges {\n            target: background\n            color: hoverColour\n        }\n    }\n]\n```", "```cpp\nMouseArea {\n    anchors.fill: parent\n    cursorShape: Qt.PointingHandCursor\n    hoverEnabled: true\n    onEntered: background.state = \"hover\"\n    onExited: background.state = \"\"\n    onClicked: navigationButtonClicked()\n}\n```", "```cpp\nNavigationButton {\n    iconCharacter: \"\\uf0c9\"\n    description: \"\"\n    hoverColour: \"#993333\"\n    onNavigationButtonClicked: isCollapsed = !isCollapsed\n}\n```", "```cpp\nNavigationButton {\n    iconCharacter: \"\\uf015\"\n    description: \"Dashboard\"\n    hoverColour: \"#dc8a00\"\n    onNavigationButtonClicked: masterController.ui_navigationController.goDashboardView();\n}\nNavigationButton {\n    iconCharacter: \"\\uf234\"\n    description: \"New Client\"\n    hoverColour: \"#dccd00\"\n    onNavigationButtonClicked: masterController.ui_navigationController.goCreateClientView();\n}\nNavigationButton {\n    iconCharacter: \"\\uf002\"\n    description: \"Find Client\"\n    hoverColour: \"#8aef63\"\n    onNavigationButtonClicked: masterController.ui_navigationController.goFindClientView();\n}\n```", "```cpp\nverticalAlignment: Text.AlignVCenter\n```", "```cpp\nhorizontalAlignment: Text.AlignHCenter\n```", "```cpp\nreadonly property int pixelSizeNavigationBarText: 22\n```", "```cpp\nfont.pixelSize: Style.pixelSizeNavigationBarText\n```", "```cpp\n#ifndef COMMAND_H\n#define COMMAND_H\n\n#include <functional>\n\n#include <QObject>\n#include <QScopedPointer>\n#include <QString>\n\n#include <cm-lib_global.h>\n\nnamespace cm {\nnamespace framework {\n\nclass CMLIBSHARED_EXPORT Command : public QObject\n{\n    Q_OBJECT\n    Q_PROPERTY( QString ui_iconCharacter READ iconCharacter CONSTANT )\n    Q_PROPERTY( QString ui_description READ description CONSTANT )\n    Q_PROPERTY( bool ui_canExecute READ canExecute NOTIFY canExecuteChanged )\n\npublic:\n    explicit Command(QObject* parent = nullptr,\n                     const QString& iconCharacter = \"\",\n                     const QString& description = \"\",\n                     std::function<bool()> canExecute = [](){ return \n                                                           true; });\n    ~Command();\n\n    const QString& iconCharacter() const;\n    const QString& description() const;\n    bool canExecute() const;\n\nsignals:\n    void canExecuteChanged();\n    void executed();\n\nprivate:\n    class Implementation;\n    QScopedPointer<Implementation> implementation;\n};\n\n}}\n\n#endif\n```", "```cpp\n#include \"command.h\"\n\nnamespace cm {\nnamespace framework {\n\nclass Command::Implementation\n{\npublic:\n    Implementation(const QString& _iconCharacter, const QString& \n     _description, std::function<bool()> _canExecute)\n        : iconCharacter(_iconCharacter)\n        , description(_description)\n        , canExecute(_canExecute)\n    {\n    }\n\n    QString iconCharacter;\n    QString description;\n    std::function<bool()> canExecute;\n};\n\nCommand::Command(QObject* parent, const QString& iconCharacter, const QString& description, std::function<bool()> canExecute)\n    : QObject(parent)\n{\n    implementation.reset(new Implementation(iconCharacter, description, canExecute));\n}\n\nCommand::~Command()\n{\n}\n\nconst QString& Command::iconCharacter() const\n{\n    return implementation->iconCharacter;\n}\n\nconst QString& Command::description() const\n{\n    return implementation->description;\n}\n\nbool Command::canExecute() const\n{\n    return implementation->canExecute();\n}\n\n}\n}\n```", "```cpp\n#ifndef COMMANDCONTROLLER_H\n#define COMMANDCONTROLLER_H\n\n#include <QObject>\n#include <QtQml/QQmlListProperty>\n#include <cm-lib_global.h>\n#include <framework/command.h>\n\nnamespace cm {\nnamespace controllers {\n\nclass CMLIBSHARED_EXPORT CommandController : public QObject\n{\n    Q_OBJECT\n    Q_PROPERTY(QQmlListProperty<cm::framework::Command> \n     ui_createClientViewContextCommands READ  \n     ui_createClientViewContextCommands CONSTANT)\n\npublic:\n    explicit CommandController(QObject* _parent = nullptr);\n    ~CommandController();\n\n    QQmlListProperty<framework::Command> \n    ui_createClientViewContextCommands();\n\npublic slots:\n    void onCreateClientSaveExecuted();\n\nprivate:\n    class Implementation;\n    QScopedPointer<Implementation> implementation;\n};\n\n}}\n\n#endif\n```", "```cpp\n#include \"command-controller.h\"\n\n#include <QList>\n#include <QDebug>\n\nusing namespace cm::framework;\n\nnamespace cm {\nnamespace controllers {\n\nclass CommandController::Implementation\n{\npublic:\n    Implementation(CommandController* _commandController)\n        : commandController(_commandController)\n    {\n        Command* createClientSaveCommand = new Command( \n          commandController, QChar( 0xf0c7 ), \"Save\" );\n        QObject::connect( createClientSaveCommand, &Command::executed,   \n   commandController, &CommandController::onCreateClientSaveExecuted );\n        createClientViewContextCommands.append( createClientSaveCommand );\n    }\n\n    CommandController* commandController{nullptr};\n\n    QList<Command*> createClientViewContextCommands{};\n};\n\nCommandController::CommandController(QObject* parent)\n    : QObject(parent)\n{\n    implementation.reset(new Implementation(this));\n}\n\nCommandController::~CommandController()\n{\n}\n\nQQmlListProperty<Command> CommandController::ui_createClientViewContextCommands()\n{\n    return QQmlListProperty<Command>(this, implementation->createClientViewContextCommands);\n}\n\nvoid CommandController::onCreateClientSaveExecuted()\n{\n    qDebug() << \"You executed the Save command!\";\n}\n\n}}\n```", "```cpp\nqmlRegisterType<cm::controllers::CommandController>(\"CM\", 1, 0, \"CommandController\");\nqmlRegisterType<cm::framework::Command>(\"CM\", 1, 0, \"Command\");\n```", "```cpp\nQ_PROPERTY( cm::controllers::CommandController* ui_commandController READ commandController CONSTANT )\n```", "```cpp\nCommandController* commandController();\n```", "```cpp\nreadonly property color colourCommandBarBackground: \"#cecece\"\nreadonly property color colourCommandBarFont: \"#131313\"\nreadonly property color colourCommandBarFontDisabled: \"#636363\"\nreadonly property real heightCommandBar: heightCommandButton\nreadonly property int pixelSizeCommandBarIcon: 32\nreadonly property int pixelSizeCommandBarText: 12\n\nreadonly property real widthCommandButton: 80\nreadonly property real heightCommandButton: widthCommandButton\n```", "```cpp\nCommandBar 1.0 CommandBar.qml\nCommandButton 1.0 CommandButton.qml\n```", "```cpp\nimport QtQuick 2.9\nimport CM 1.0\nimport assets 1.0\n\nItem {\n    property Command command\n    width: Style.widthCommandButton\n    height: Style.heightCommandButton\n\n    Rectangle {\n        id: background\n        anchors.fill: parent\n        color: Style.colourCommandBarBackground\n\n        Text {\n            id: textIcon\n            anchors {\n                centerIn: parent\n                verticalCenterOffset: -10\n            }\n            font {\n                family: Style.fontAwesome\n                pixelSize: Style.pixelSizeCommandBarIcon\n            }\n            color: command.ui_canExecute ? Style.colourCommandBarFont : \n                                          colourCommandBarFontDisabled\n            text: command.ui_iconCharacter\n            horizontalAlignment: Text.AlignHCenter\n        }\n\n        Text {\n            id: textDescription\n            anchors {\n                top: textIcon.bottom\n                bottom: parent.bottom\n                left: parent.left\n                right: parent.right\n            }\n            font.pixelSize: Style.pixelSizeNavigationBarText\n            color: command.ui_canExecute ? Style.colourCommandBarFont : \n                                          colourCommandBarFontDisabled\n            text: command.ui_description\n            horizontalAlignment: Text.AlignHCenter\n            verticalAlignment: Text.AlignVCenter\n        }\n\n        MouseArea {\n            anchors.fill: parent\n            cursorShape: Qt.PointingHandCursor\n            hoverEnabled: true\n            onEntered: background.state = \"hover\"\n            onExited: background.state = \"\"\n            onClicked: if(command.ui_canExecute) {\n                           command.executed();\n                       }\n        }\n\n        states: [\n            State {\n                name: \"hover\"\n                PropertyChanges {\n                    target: background\n                    color: Qt.darker(Style.colourCommandBarBackground)\n                }\n            }\n        ]\n    }\n}\n```", "```cpp\nimport QtQuick 2.9\nimport assets 1.0\n\nItem {\n    property alias commandList: commandRepeater.model\n\n    anchors {\n        left: parent.left\n        bottom: parent.bottom\n        right: parent.right\n    }\n    height: Style.heightCommandBar\n\n    Rectangle {\n        anchors.fill: parent\n        color: Style.colourCommandBarBackground\n\n        Row {\n            anchors {\n                top: parent.top\n                bottom: parent.bottom\n                right: parent.right\n            }\n\n            Repeater {\n                id: commandRepeater\n                delegate: CommandButton {\n                    command: modelData\n                }\n            }\n        }\n    }\n}\n```", "```cpp\nCommandBar {\n    commandList: masterController.ui_commandController.ui_createClientViewContextCommands\n}\n```"]