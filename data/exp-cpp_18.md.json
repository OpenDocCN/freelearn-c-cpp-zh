["```cpp\nI love studying C++. It's hard, but interesting. \n```", "```cpp\nI love studying C++.\nIt's hard, but interesting.\n```", "```cpp\nI love studying C++!\n```", "```cpp\nIt's hard, but interesting...\n```", "```cpp\n[Human] Hello\n[Machine] Hello\n```", "```cpp\n[Human] I was walking yesterday and it was raining.\n[Machine] Nice.\n[Human] I should dress warmer next time.\n[Machine] OK.\n[Human] I think I have a temperature.\n[Machine] Did you caught a cold yesterday?\n[Human] I guess so.\n```", "```cpp\nint calculate()\n{\n  int a{14};\n  int b{27};\n  int c{a + b};\n  return c;\n}\n```", "```cpp\nint calculate(int a, int b)\n{\n  int c{a + b};\n  return c;\n}\n```", "```cpp\nint calculate(int a, int b)\n{\n  if (a < 0 && b < 0) {\n    return 0;\n  }\n  int c{a + b};\n  return c;\n}\n```", "```cpp\nint calculate(int a, int b)\n{\n  // some magic\n  // return value \n}\n```", "```cpp\nstruct Example\n{\n  int input1;\n  int input 2;\n  int output;\n};\n\nclass CalculationMachine\n{\npublic:\n  using Examples = std::vector<Example>;\n  // pass calculation examples through the setExamples()\n void setExamples(const Examples& examples);\n\n  // the main function of interest\n  // returns the result of the calculation\n int calculate(int a, int b);\n\nprivate:\n  // this function pointer will point to \n  // one of the arithmetic functions below\n int (*fptr_)(int, int) = nullptr;\n\nprivate:\n  // set of arithmetic functions\n  static int sum(int, int);\n  static int subtract(int, int);\n  static int multiply(int, int);\n  static int divide(int, int);\n};\n```", "```cpp\n3 4 7\n2 2 4\n5 5 10\n4 5 9\n```", "```cpp\nvoid CalculationMachine::setExamples(const Examples& examples)\n{\n  int sum_count{0};\n  int sub_count{0};\n  int mul_count{0};\n  int div_count{0};\n  for (const auto& example : Examples) {\n if (CalculationMachine.sum(example.input1, example.input2) == example.output) {\n ++sum_count;\n }\n if (CalculationMachine.subtract(example.input1, example.input2) == example.output) {\n ++sub_count;\n }\n    // the same for multiply() and divide()\n  }\n\n  // the function that has the maximum number of correct output results\n  // becomes the main function for called by calculate()\n  // fptr_ is assigned the winner arithmetic function\n}\n```", "```cpp\nint CalculationMachine::calculate(int a, int b)\n{\n  // fptr_ points to the sum() function\n return fptr_(a, b);\n}\n```", "```cpp\n3 4 7\n2 2 4\n5 5 10\n4 5 9\n```", "```cpp\nstruct Object\n{\n  int color;\n  int shape;\n  int width;\n  int height;\n};\n```", "```cpp\nusing objects_list = std::vector<Object>;\nusing categorized_table = std::unordered_map<int, objects_list>;\ncategorized_table clusterize(const objects_list& objects)\n{\n  // categorization logic \n}\n```", "```cpp\ncategorized_table clusterize(const objects_list& objects)\n{\n  categorized_table result;\n  for (const auto& obj : objects) {\n    result[obj.color].push_back(obj);\n    result[obj.shape].push_back(obj);\n  }\n  return result;\n}\n```"]