["```cpp\n    #define MAX(a,b) (((a) > (b)) ? (a) : (b))\n\n```", "```cpp\n    /* macro.cpp */\n    #include <iostream>\n\n    using namespace std;\n\n    // Defining macro\n    #define MAX(a,b) (((a) > (b)) ? (a) : (b))\n\n    auto main() -> int\n    {\n      cout << \"[macro.cpp]\" << endl;\n\n      // Initializing two int variables\n      int x = 10;\n      int y = 20;\n\n      // Consuming the MAX macro\n      // and assign the result to z variable\n      int z = MAX(x,y);\n\n      // Displaying the result\n      cout << \"Max number of \" << x << \" and \" << y;\n      cout << \" is \" << z << endl;\n\n      return 0;\n    }\n\n```", "```cpp\n    auto main() -> int\n    {\n      // same code\n      // ...\n\n      int z = (((a) > (b)) ? (a) : (b)); // <-- Notice this section\n\n      // same code\n      // ...\n\n      return 0;\n    }\n\n```", "```cpp\n    /* macroswap.cpp */\n    #include <iostream>\n\n    using namespace std;\n\n    // Defining multi line macro\n    #define SWAP(a,b) { \\\n      (a) ^= (b); \\\n      (b) ^= (a); \\\n      (a) ^= (b); \\\n    }\n\n    auto main() -> int\n    {\n      cout << \"[macroswap.cpp]\" << endl;\n\n      // Initializing two int variables\n      int x = 10;\n      int y = 20;\n\n      // Displaying original variable value\n      cout << \"before swapping\" << endl;\n      cout << \"x = \" << x << \", y = \" << y ;\n      cout << endl << endl;\n\n      // Consuming the SWAP macro\n      SWAP(x,y);\n\n      // Displaying swapped variable value\n      cout << \"after swapping\" << endl;\n      cout << \"x = \" << x << \", y = \" << y;\n      cout << endl;\n\n      return 0;\n    }\n\n```", "```cpp\n    template<typename T>\n    class Array\n    {\n      T element;\n    };\n\n```", "```cpp\n    Array<char> arrChar;\n    Array<int> arrInt;\n\n```", "```cpp\n    class ArrayChar\n    {\n      char element;\n    };\n\n    class ArrayInt\n    {\n      int element;\n    };\n\n    ArrayChar arrChar;\n    ArrayInt arrInt;\n\n```", "```cpp\n    struct ValueDataType\n    {\n      typedef int valueDataType;\n    };\n\n```", "```cpp\n    struct ValuePlaceHolder\n    {\n      enum \n       { \n        value = 1 \n       };\n    };\n\n```", "```cpp\n    template<int A, int B>\n    struct Multiplexer\n    {\n      enum \n      {\n        result = A * B \n      };\n    };\n\n```", "```cpp\n    int i = Multiplexer<2, 3>::result;\n\n```", "```cpp\n    template<typename A, typename B>\n    struct CheckingType\n    {\n      enum \n      { \n        result = 0 \n      };\n    };\n\n    template<typename X>\n    struct CheckingType<X, X>\n    {\n      enum \n      { \n        result = 1 \n      };\n    };\n\n```", "```cpp\n    if (CheckingType<UnknownType, int>::result)\n    {\n      // run the function if the UnknownType is int\n    } \n    else \n    { \n      // otherwise run any function \n    }\n\n```", "```cpp\n    template <int I>\n    struct Factorial\n    {\n      enum \n      { \n        value = I * Factorial<I-1>::value \n      };\n    };\n\n```", "```cpp\n    Factorial<I>::value;\n\n```", "```cpp\n    template <>\n    struct Factorial<0>\n    {\n      enum \n      { \n        value = 1 \n      };\n    };\n\n```", "```cpp\n    int main()\n    {\n      int fact10 = Factorial<10>::value;\n    }\n\n```", "```cpp\n    /* types.cpp */\n    #include <iostream>\n\n    using namespace std;\n\n // Defining a data type\n // in template\n template<typename T>\n struct datatype\n {\n using type = T;\n };\n\n    auto main() -> int\n    {\n      cout << \"[types.cpp]\" << endl;\n\n      // Selecting a data type in compile time\n      using t = typename datatype<int>::type;\n\n      // Using the selected data type\n      t myVar = 123;\n\n      // Displaying the selected data type\n      cout << \"myVar = \" << myVar;\n\n      return 0;\n    }\n\n```", "```cpp\n    /* selectingtype.cpp */\n    #include <iostream>\n\n    using namespace std;\n\n    // Defining IfElseDataType template\n    template<\n      bool predicate,\n      typename TrueType,\n      typename FalseType>\n      struct IfElseDataType\n      {\n      };\n\n    // Defining template for TRUE condition\n    // passed to 'predicate' parameter\n    template<\n      typename TrueType,\n      typename FalseType>\n      struct IfElseDataType<\n       true,\n       TrueType,\n       FalseType>\n       {\n         typedef TrueType type;\n       };\n\n    // Defining template for FALSE condition\n    // passed to 'predicate' parameter\n    template<\n      typename TrueType,\n      typename FalseType>\n      struct IfElseDataType<\n      false,\n      TrueType,\n      FalseType>\n      {\n         typedef FalseType type;\n      };\n\n    auto main() -> int\n    {\n      cout << \"[types.cpp]\" << endl;\n\n      // Consuming template and passing\n      // 'SHRT_MAX == 2147483647'\n      // It will be FALSE\n      // since the maximum value of short\n      // is 32767\n      // so the data type for myVar\n      // will be 'int'\n      IfElseDataType<\n        SHRT_MAX == 2147483647,\n        short,\n        int>::type myVar;\n\n      // Assigning myVar to maximum value\n      // of 'short' type\n      myVar = 2147483647;\n\n      // Displaying the data type of myVar\n      cout << \"myVar has type \";\n      cout << typeid(myVar).name() << endl;\n\n      return 0;\n    }\n\n```", "```cpp\n    /* condition.cpp */\n    #include <iostream>\n\n    using namespace std;\n\n    // Function that will run\n    // if the condition is TRUE\n    void TrueStatement()\n    {\n      cout << \"True Statement is run.\" << endl;\n    }\n\n    // Function that will run\n    // if the condition is FALSE\n    void FalseStatement()\n    {\n      cout << \"False Statement is run.\" << endl;\n    }\n\n    auto main() -> int\n    {\n      cout << \"[condition.cpp]\" << endl;\n\n      // Choosing the function\n      // based on the condition\n      if (2 + 3 == 5)\n        TrueStatement();\n      else\n        FalseStatement();\n\n      return 0;\n    }\n\n```", "```cpp\n    template<bool predicate> class IfElse\n\n```", "```cpp\n    template<> class IfElse<true>\n    template<> class IfElse<false> \n\n```", "```cpp\n    /* conditionmeta.cpp */\n    #include <iostream>\n\n    using namespace std;\n\n    // Function that will run\n    // if the condition is TRUE\n    void TrueStatement()\n    {\n      cout << \"True Statement is run.\" << endl;\n    }\n\n    // Function that will run\n    // if the condition is FALSE\n    void FalseStatement()\n    {\n      cout << \"False Statement is run.\" << endl;\n    }\n\n    // Defining IfElse template\n    template<bool predicate>\n    class IfElse\n    {\n    };\n\n    // Defining template for TRUE condition\n    // passed to 'predicate' parameter\n    template<>\n    class IfElse<true>\n    {\n      public:\n        static inline void func()\n        {\n          TrueStatement();\n        }\n    };\n\n    // Defining template for FALSE condition\n    // passed to 'predicate' parameter\n    template<>\n    class IfElse<false>\n    {\n      public:\n        static inline void func()\n        {\n          FalseStatement();\n        }\n    };\n\n    auto main() -> int\n    {\n      cout << \"[conditionmeta.cpp]\" << endl;\n\n      // Consuming IfElse template\n      IfElse<(2 + 3 == 5)>::func();\n\n      return 0;\n    }\n\n```", "```cpp\n    /* switch.cpp */\n    #include <iostream>\n\n    using namespace std;\n\n    // Function to find out\n    // the square of an int\n    int Square(int a)\n    {\n      return a * a;\n    }\n\n    auto main() -> int\n    {\n      cout << \"[switch.cpp]\" << endl;\n\n      // Initializing two int variables\n      int input = 2;\n      int output = 0;\n\n      // Passing the correct argument\n      // to the function\n      switch (input)\n      {\n        case 1:\n            output = Square(1);\n            break;\n        case 2:\n            output = Square(2);\n            break;\n        default:\n            output = Square(0);\n            break;\n      }\n\n      // Displaying the result\n      cout << \"The result is \" << output << endl;\n\n      return 0;\n    }\n\n```", "```cpp\n    template<int val> class SwitchTemplate \n\n```", "```cpp\n    template<> class SwitchTemplate<1>\n    template<> class SwitchTemplate<2> \n\n```", "```cpp\n    /* switchmeta.cpp */\n    #include <iostream>\n\n    using namespace std;\n\n    // Function to find out\n    // the square of an int\n    int Square(int a)\n    {\n      return a * a;\n    }\n\n    // Defining template for\n    // default output\n    // for any input value\n    template<int val>\n    class SwitchTemplate\n    {\n      public:\n        static inline int func()\n        {\n          return Square(0);\n        }\n    };\n\n    // Defining template for\n    // specific input value\n    // 'val' = 1\n    template<>\n    class SwitchTemplate<1>\n    {\n       public:\n         static inline int func()\n         {\n           return Square(1);\n         }\n    };\n\n    // Defining template for\n    // specific input value\n    // 'val' = 2\n    template<>\n    class SwitchTemplate<2>\n    {\n       public:\n         static inline int func()\n         {\n            return Square(2);\n         }\n    };\n\n    auto main() -> int\n    {\n      cout << \"[switchmeta.cpp]\" << endl;\n\n      // Defining a constant variable\n      const int i = 2;\n\n      // Consuming the SwitchTemplate template\n      int output = SwitchTemplate<i>::func();\n\n      // Displaying the result\n      cout << \"The result is \" << output << endl;\n\n      return 0;\n    }\n\n```", "```cpp\n    /* loop.cpp */\n    #include <iostream>\n\n    using namespace std;\n\n    // Function for printing\n    // given number\n    void PrintNumber(int i)\n    {\n      cout << i << \"\\t\";\n    }\n\n    auto main() -> int\n    {\n      cout << \"[loop.cpp]\" << endl;\n\n      // Initializing an int variable\n      // marking as maximum number\n      int i = 100;\n\n      // Looping to print out\n      // the numbers below i variable\n      cout << \"List of numbers between 100 and 1\";\n      cout << endl;\n      do\n      {\n        PrintNumber(i);\n      }\n      while (--i > 0);\n      cout << endl;\n\n      return 0;\n    }\n\n```", "```cpp\n    template<int limit> class DoWhile\n\n```", "```cpp\n    template<> class DoWhile<0>\n\n```", "```cpp\n    /* loopmeta.cpp */\n    #include <iostream>\n\n    using namespace std;\n\n    // Function for printing\n    // given number\n    void PrintNumber(int i)\n    {\n      cout << i << \"\\t\";\n    }\n\n    // Defining template for printing number\n    // passing to its 'limit' parameter\n    // It's only run\n    // if the 'limit' has not been reached\n    template<int limit>\n    class DoWhile\n    {\n       private:\n         enum\n         {\n           run = (limit-1) != 0\n         };\n\n       public:\n         static inline void func()\n         {\n           PrintNumber(limit);\n           DoWhile<run == true ? (limit-1) : 0>\n            ::func();\n         }\n    };\n\n    // Defining template for doing nothing\n    // when the 'limit' reaches 0\n    template<>\n    class DoWhile<0>\n    {\n      public:\n        static inline void func()\n        {\n        }\n    };\n\n    auto main() -> int\n    {\n      cout << \"[loopmeta.cpp]\" << endl;\n\n      // Defining a constant variable\n      const int i = 100;\n\n      // Looping to print out\n      // the numbers below i variable\n      // by consuming the DoWhile\n      cout << \"List of numbers between 100 and 1\";\n      cout << endl;\n      DoWhile<i>::func();\n      cout << endl;\n\n      return 0;\n    }\n\n```", "```cpp\n    /* fibonaccimeta.cpp */\n    #include <iostream>\n\n    using namespace std;\n\n    // Defining Fibonacci template\n    // to calculate the Fibonacci sequence\n    template <int number>\n    struct Fibonacci\n    {\n      enum\n      {\n        value =\n            Fibonacci<number - 1>::value +\n            Fibonacci<number - 2>::value\n      };\n    };\n\n    // Defining template for\n    // specific input value\n    // 'number' = 1\n    template <>\n    struct Fibonacci<1>\n    {\n      enum\n      {\n        value = 1\n      };\n    };\n\n    // Defining template for\n    // specific input value\n    // 'number' = 0\n    template <>\n    struct Fibonacci<0>\n    {\n      enum\n      {\n        value = 0\n      };\n    };\n\n    auto main() -> int\n    {\n      cout << \"[fibonaccimeta.cpp]\" << endl;\n\n      // Displaying the compile-time constant\n      cout << \"Getting compile-time constant:\";\n      cout << endl;\n      cout << \"Fibonacci(25) = \";\n      cout << Fibonacci<25>::value;\n      cout << endl;\n\n      return 0;\n    }\n\n```", "```cpp\n    /* isprimemeta.cpp */\n    #include <iostream>\n\n    using namespace std;\n\n    // Defining template that decide\n    // whether or not the passed argument\n    // is a prime number\n    template <\n      int lastNumber,\n      int secondLastNumber>\n    class IsPrime\n    {\n      public:\n        enum\n        {\n          primeNumber = (\n            (lastNumber % secondLastNumber) &&\n            IsPrime<lastNumber, secondLastNumber - 1>\n                ::primeNumber)\n        };\n     };\n\n    // Defining template for checking\n    // the number passed to the 'number' parameter\n    // is a prime number\n    template <int number>\n    class IsPrime<number, 1>\n    {\n      public:\n        enum\n        {\n          primeNumber = 1\n        };\n    };\n\n    // Defining template to print out\n    // the passed argument is it's a prime number\n    template <int number>\n    class PrimeNumberPrinter\n    {\n      public:\n        PrimeNumberPrinter<number - 1> printer;\n\n      enum\n      {\n        primeNumber = IsPrime<number, number - 1>\n            ::primeNumber\n      };\n\n      void func()\n      {\n        printer.func();\n\n        if (primeNumber)\n        {\n            cout << number << \"\\t\";\n        }\n      }\n    };\n\n    // Defining template to just ignoring the number\n    // we pass 1 as argument to the parameter\n    // since 1 is not prime number\n    template<>\n    class PrimeNumberPrinter<1>\n    {\n      public:\n        enum\n        {\n          primeNumber = 0\n        };\n\n        void func()\n        {\n        }\n    };\n\n    int main()\n    {\n      cout << \"[isprimemeta.cpp]\" << endl;\n\n      // Displaying the prime numbers between 1 and 500\n      cout << \"Filtering the numbers between 1 and 500 \";\n      cout << \"for of the prime numbers:\" << endl;\n\n      // Consuming PrimeNumberPrinter template\n      PrimeNumberPrinter<500> printer;\n\n      // invoking func() method from the template\n      printer.func();\n\n      cout << endl;\n      return 0;\n    }\n\n```"]