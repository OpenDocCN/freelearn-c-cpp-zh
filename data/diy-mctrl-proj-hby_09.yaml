- en: '*Chapter 9*: IoT Temperature-Logging System'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第9章*：物联网温度记录系统'
- en: In recent years, the use of the internet has increased. This same increase has
    allowed the internet to evolve. Now we speak of *things* connected to this network;
    devices for everyday use that were not originally designed to have connectivity.
    This evolution has created the concept of the **Internet of Things** (**IoT**),
    which is defined by Morgan in Forbes (2014) as the "*interconnection to the internet
    of commonly used devices that can complete tasks in an automated way*."
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 近年来，互联网的使用量有所增加。这种相同的增加使得互联网得以进化。现在我们谈论的是连接到这个网络的**事物**；原本未设计为具有连接性的日常使用设备。这种进化创造了**物联网**（**IoT**）的概念，正如摩根在《福布斯》杂志（2014年）中定义的，“*将常用设备连接到互联网，以自动完成任务*。”
- en: The IoT is present in practically all fields of daily life, from health to education,
    known as the **Internet of Medical Things** (**IoMT**) and the **Internet of Educational
    Things** (**IoET**), respectively.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 物联网几乎存在于日常生活的所有领域，从健康到教育，分别被称为**物联网医疗**（**IoMT**）和**物联网教育**（**IoET**）。
- en: In this chapter, you will be introduced to the world of creating IoT applications
    with a temperature logging application for an STM32 Blue Pill board using an **ESP8266
    Wi-Fi module**. With this knowledge, you will be able to build projects that can
    connect to the internet and present their data from sources such as sensors remotely.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将了解到如何使用**ESP8266 Wi-Fi模块**为STM32 Blue Pill板创建一个温度记录应用，从而进入物联网应用的创造世界。有了这些知识，您将能够构建可以连接到互联网并从传感器等来源远程展示数据的工程项目。
- en: 'In this chapter, we will cover the following main topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Connecting a temperature sensor to the Blue Pill board
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将温度传感器连接到Blue Pill板
- en: Coding a temperature reading system
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写温度读取系统代码
- en: Learning to connect the ESP8266 module
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习连接ESP8266模块
- en: Coding a program to send the sensed temperature to the internet
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写程序将感应到的温度发送到互联网
- en: Connecting the STM32 Blue Pill board to the internet
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将STM32 Blue Pill板连接到互联网
- en: By the end of this chapter, you will be able to understand the operation of
    one of the most popular Wi-Fi modules for creating IoT applications, the ESP8266,
    and also be familiar with how to connect the STM32 microcontroller card to the
    internet and send the data obtained from the temperature sensor.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将能够理解创建物联网应用中最受欢迎的Wi-Fi模块之一ESP8266的操作，并且熟悉如何将STM32微控制器板连接到互联网并发送从温度传感器获得的数据。
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The hardware components that will be needed to develop the temperature-logging
    system are as follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 开发温度记录系统所需的硬件组件如下：
- en: 1 solderless breadboard.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1个无焊面包板。
- en: 1 Blue Pill STM32 microcontroller board.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1块Blue Pill STM32微控制器板。
- en: 1 ST-Link/V2 electronic interface needed for uploading the compiled code to
    the Blue Pill board. Bear in mind that the ST-Link/V2 requires 4 female to female
    jumper wires.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1个ST-Link/V2电子接口，用于将编译后的代码上传到Blue Pill板。请注意，ST-Link/V2需要4根公对公跳线。
- en: 1 DS18B20 temperature sensor module.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1个DS18B20温度传感器模块。
- en: 1 ESP8266 Wi-Fi module.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1个ESP8266 Wi-Fi模块。
- en: 1 FTDI adapter board.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1块FTDI适配器板。
- en: 1 LED.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1个LED。
- en: 1 220 ohm resistor.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1个220欧姆电阻。
- en: 7 male to male jumper wires.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 7根公对公跳线。
- en: 5 female to female jumper wires.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 5根公对公跳线。
- en: A 5 V power source.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1个5V电源。
- en: 'As usual, these components are very common, and there will be no problems in
    obtaining them. On the software side, you will require the Arduino IDE and the
    GitHub repository for this chapter: [https://github.com/PacktPublishing/DIY-Microcontroller-Projects-for-Hobbyists/tree/master/Chapter09](https://github.com/PacktPublishing/DIY-Microcontroller-Projects-for-Hobbyists/tree/master/Chapter09)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如往常一样，这些组件非常常见，获取它们不会有任何问题。在软件方面，您将需要Arduino IDE和本章的GitHub仓库：[https://github.com/PacktPublishing/DIY-Microcontroller-Projects-for-Hobbyists/tree/master/Chapter09](https://github.com/PacktPublishing/DIY-Microcontroller-Projects-for-Hobbyists/tree/master/Chapter09)
- en: 'The Code in Action video for this chapter can be found here: [https://bit.ly/3vSwPSu](https://bit.ly/3vSwPSu)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的“代码在行动”视频可以在这里找到：[https://bit.ly/3vSwPSu](https://bit.ly/3vSwPSu)
- en: The following section presents an introduction to the temperature sensor module
    and its main features.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 以下部分介绍了温度传感器模块及其主要特性。
- en: Connecting a temperature sensor to the Blue Pill board
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将温度传感器连接到Blue Pill板
- en: In this section, we are going to learn the hardware components needed to build
    a temperature-logging sensor using the **STM32 Blue Pill** and a temperature module.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习构建温度记录传感器所需的硬件组件，使用**STM32 Blue Pill**和温度模块。
- en: To build an electronic device that measures temperature, you will need a sensor
    that monitors the environment and records temperature data. A microcontroller
    card is also necessary to be able to read the data from the sensor and to be able
    to display the information to users. We will begin by having a look at the temperature
    sensor module.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建一个测量温度的电子设备，你需要一个监控环境并记录温度数据的传感器。还需要一个微控制器卡，以便能够从传感器读取数据，并将信息显示给用户。我们将首先查看温度传感器模块。
- en: Introducing the DS18B20 temperature sensor module
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍DS18B20温度传感器模块
- en: 'Let''s get to know the main hardware component''s details to build the temperature
    log: the **DS18B20 sensor**. It is a digital temperature sensor that can measure
    air temperature, liquids (using a waterproof version), and soil.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解构建温度记录所需的主要硬件组件的详细信息：**DS18B20传感器**。它是一种数字温度传感器，可以测量空气温度、液体（使用防水版本）和土壤。
- en: Important note
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The DS18B20 temperature sensor has a unique 64-bit serial code, allowing multiple
    sensors to be connected using just one digital pin (1-wire protocol) from the
    STM32 microcontroller card.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: DS18B20温度传感器有一个独特的64位串行代码，允许通过STM32微控制器卡上的一个数字引脚（单线协议）连接多个传感器。
- en: 'We will use a generic breakout module that already includes a voltage LED and
    the required 4.7 kΩ pull-up resistor (as shown in *Figure 9.1*):'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一个通用的分线模块，该模块已经包含一个电压LED和所需的4.7 kΩ上拉电阻（如图*图9.1*所示）：
- en: '![Figure 9.1 – DS18B20 digital temperature sensor breakout board](img/Figure_9.1_B16413.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图9.1 – DS18B20数字温度传感器分线板](img/Figure_9.1_B16413.jpg)'
- en: Figure 9.1 – DS18B20 digital temperature sensor breakout board
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.1 – DS18B20数字温度传感器分线板
- en: It is a one-wire sensor, which means the sensor requires only one pin port for
    communication with the controller. Temperature is measured in degrees Celsius
    from –55 °C to +125 °C with an accuracy of +/-0.5 °C (between -10 °C and 85 °C).
    The main advantage of using this sensor instead of a thermally sensitive resistor
    (thermistor) is that we receive from the sensor a stream of bits on a digital
    pin instead of receiving voltage on an analog pin.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 它是一个单线传感器，这意味着传感器只需要一个引脚端口与控制器进行通信。温度以摄氏度为单位测量，从-55°C到+125°C，精度为±0.5°C（在-10°C和85°C之间）。使用此传感器而不是热敏电阻（热敏电阻）的主要优点是，我们从传感器接收一个数字引脚上的位流，而不是在模拟引脚上接收电压。
- en: Now that we know about the temperature sensor, let's move on to the following
    subsection to connect it to the STM32 Blue Pill on the solderless breadboard.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了温度传感器，让我们继续下一小节，学习如何将其连接到无焊面包板上的STM32 Blue Pill。
- en: Connecting the components
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接组件
- en: 'We will connect the electronic components to the solderless breadboard, do
    the wiring, and finally connect everything to the STM32 Blue Pill. The following
    are the steps to be performed:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把电子元件连接到无焊面包板上，进行布线，最后将所有东西连接到STM32 Blue Pill。以下是需要执行的步骤：
- en: Place the temperature sensor and the STM32 Blue Pill on a solderless breadboard
    with enough space to add the wiring layer, as shown in *Figure 9.2*:![Figure 9.2
    – Components on the breadboard](img/Figure_9.2_B16413.jpg)
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将温度传感器和STM32 Blue Pill放置在无焊面包板上，留有足够的空间添加布线层，如图*图9.2*所示：![图9.2 – 面包板上的组件](img/Figure_9.2_B16413.jpg)
- en: Figure 9.2 – Components on the breadboard
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.2 – 面包板上的组件
- en: Next, we will power up the temperature-logging system with an external power
    source. To do this, connect the STM32 Blue Pill's 5 V pin to the red rail on the
    solderless breadboard and a ground pin to the blue track, as shown in the following
    photo (*Figure 9.3*):![Figure 9.3 – Connections to the power supply](img/Figure_9.3_B16413.jpg)
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将使用外部电源为温度记录系统供电。为此，将STM32 Blue Pill的5 V引脚连接到无焊面包板上的红色轨道，并将地线引脚连接到蓝色轨道，如图下照片所示（*图9.3*）：![图9.3
    – 与电源的连接](img/Figure_9.3_B16413.jpg)
- en: Figure 9.3 – Connections to the power supply
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.3 – 与电源的连接
- en: Connect the ground (GND) pin of the sensor to the blue rail of the solderless
    breadboard or a GND terminal of the STM32 Blue Pill. Next, you need to connect
    the voltage (VCC) pin to the red rail of the solderless breadboard, or the 5 V
    bus of the STM32 Blue Pill, as shown in the following photo. The temperature sensor
    generates a digital output, so it must be connected to a digital input on the
    STM32 Blue Pill card. Connect the signal pin (S) of the temperature sensor to
    pin B12 of the Blue Pill, as shown in *Figure 9.4*:![Figure 9.4 – Temperature
    sensor connection to the Blue Pill](img/Figure_9.4_B16413.jpg)
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将传感器的地（GND）引脚连接到无焊面包板的蓝色轨道或STM32 Blue Pill的GND端子。接下来，您需要将电压（VCC）引脚连接到无焊面包板的红色轨道，或STM32
    Blue Pill的5V总线，如下面的照片所示。温度传感器产生数字输出，因此必须连接到STM32 Blue Pill卡上的数字输入。将温度传感器的信号引脚（S）连接到Blue
    Pill的B12引脚，如*图9.4*所示：![图9.4 – 温度传感器连接到Blue Pill](img/Figure_9.4_B16413.jpg)
- en: Figure 9.4 – Temperature sensor connection to the Blue Pill
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.4 – 温度传感器连接到Blue Pill
- en: 'Finally, you need to use a power source such as batteries or the STLink connected
    to the USB port of the computer to power up the board. As usual, we will use the
    STLink to upload the scripts to the microcontroller board. *Figure 9.5* summarizes
    all the hardware connections:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，您需要使用电池或连接到计算机USB端口的STLink等电源为板子供电。像往常一样，我们将使用STLink将脚本上传到微控制器板。*图9.5*总结了所有硬件连接：
- en: '![Figure 9.5 – Circuit for the temperature sensor connection](img/Figure_9.5_B16413.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![图9.5 – 温度传感器连接电路](img/Figure_9.5_B16413.jpg)'
- en: Figure 9.5 – Circuit for the temperature sensor connection
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.5 – 温度传感器连接电路
- en: The previous diagram shows all the connections between the STM32 Blue Pill and
    the electronic components and summarizes the connection steps we just completed.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的图示显示了STM32 Blue Pill和电子组件之间的所有连接，并总结了我们刚刚完成的连接步骤。
- en: '*Figure 9.6* presents the schematics for this project:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '*图9.6*展示了本项目的原理图：'
- en: '![Figure 9.6 – Schematics for the temperature sensor connection](img/Figure_9.6_B16413.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图9.6 – 温度传感器连接原理图](img/Figure_9.6_B16413.jpg)'
- en: Figure 9.6 – Schematics for the temperature sensor connection
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.6 – 温度传感器连接原理图
- en: 'The schematics diagram shows the electric diagram for the complete project.
    *Figure 9.7* shows how everything is connected in our temperature-logging system:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 原理图显示了整个项目的电路图。*图9.7*展示了我们温度记录系统中所有组件的连接方式：
- en: '![Figure 9.7 – Temperature-logging system](img/Figure_9.7_B16413.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图9.7 – 温度记录系统](img/Figure_9.7_B16413.jpg)'
- en: Figure 9.7 – Temperature-logging system
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.7 – 温度记录系统
- en: This section introduced you to the DS18B20 temperature sensor. We discovered
    its specifications and advantages versus other kinds of sensors for measuring
    temperature. Then you learned how to wire it on the breadboard to the interface
    with the STM32 Blue Pill.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 本节向您介绍了DS18B20温度传感器。我们发现了它的规格以及与其他类型温度传感器的优势。然后您学习了如何将其连接到面包板并与STM32 Blue Pill接口相连。
- en: It is now time to move on to the next section, which will present the C code
    to complete the first functionality of the IoT temperature logging.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候进入下一节了，该节将展示用于完成物联网温度记录第一功能的C代码。
- en: Coding a temperature reading system
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写温度读取系统代码
- en: 'In this section, we will develop the program to take temperature readers from
    a sensor. As mentioned, the DS18B20 sensor works with the 1-wire protocol, so
    we will use the Arduino IDE libraries to program it. Let''s get started:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将开发程序从传感器读取温度值。如前所述，DS18B20传感器使用1线协议，因此我们将使用Arduino IDE库来编程它。让我们开始吧：
- en: As the first step, we are going to install the **OneWire** library. Open the
    Arduino IDE, and then go to the **Tools** menu and then **Manage Libraries** (see
    *Figure 9.8*):![Figure 9.8 – Library manager](img/Figure_9.8_B16413.jpg)
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为第一步，我们将安装**OneWire**库。打开Arduino IDE，然后进入**工具**菜单，接着选择**管理库**（见*图9.8*）:![图9.8
    – 库管理器](img/Figure_9.8_B16413.jpg)
- en: Figure 9.8 – Library manager
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.8 – 库管理器
- en: Next, we will search the library by entering the word `OneWire` in the search
    box. We will install the one created by the 1-wire protocol developers, so please
    install the one from Jim Studt and his colleagues (see *Figure 9.9*):![Figure
    9.9 – Installing the OneWire library](img/Figure_9.9_B16413.jpg)
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将在搜索框中输入单词`OneWire`来搜索库。我们将安装由1线协议开发者创建的库，因此请安装Jim Studt及其同事创建的库（见*图9.9*）：![图9.9
    – 安装OneWire库](img/Figure_9.9_B16413.jpg)
- en: Figure 9.9 – Installing the OneWire library
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 9.9 – 安装 OneWire 库
- en: Next, we are going to add the Dallas Temperature library. For this, we enter
    `ds18b20` in the search box and install the library developed by Miles Burton
    and collaborators (see *Figure 9.10*). This library is also available from the
    sensor producers, Dallas Semiconductor (now Maxim):![Figure 9.10 – Installing
    the Dallas Temperature library](img/Figure_9.10_B16413.jpg)
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将添加 Dallas 温度库。为此，我们在搜索框中输入 `ds18b20` 并安装由 Miles Burton 和合作者开发的库（如图 *图
    9.10* 所示）。此库也可从传感器生产商 Dallas Semiconductor（现 Maxim）获得：![图 9.10 – 安装 Dallas 温度库](img/Figure_9.10_B16413.jpg)
- en: Figure 9.10 – Installing the Dallas Temperature library
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 9.10 – 安装 Dallas 温度库
- en: Another way to install the libraries without using the built-in function of
    the Arduino IDE is to download the libraries from their repositories on GitHub
    manually. After downloading, please place them in the `Arduino/Libraries` folder.
    Next, find the repositories for the libraries at the following links.
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另一种不使用 Arduino IDE 内置功能安装库的方法是从 GitHub 上的存储库手动下载库。下载后，请将它们放置在 `Arduino/Libraries`
    文件夹中。接下来，在以下链接中找到库的存储库。
- en: 'OneWire: [https://github.com/PaulStoffregen/OneWire](https://github.com/PaulStoffregen/OneWire).'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'OneWire: [https://github.com/PaulStoffregen/OneWire](https://github.com/PaulStoffregen/OneWire)。'
- en: 'Maxim (former Dallas) Temperature: [https://github.com/milesburton/Arduino-Temperature-Control-Library](https://github.com/milesburton/Arduino-Temperature-Control-Library).'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Maxim（前身为 Dallas）温度：[https://github.com/milesburton/Arduino-Temperature-Control-Library](https://github.com/milesburton/Arduino-Temperature-Control-Library)。
- en: 'Let''s write the code. We need to include the previously installed libraries
    and define which pin of the STM32 Blue Pill card pins will be used for input:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们编写代码。我们需要包含之前安装的库，并定义 STM32 Blue Pill 卡的哪个引脚将被用于输入：
- en: '[PRE0]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As you can see in the preceding snippet, the One Wire Bus will be PB12 (labeled
    P12 on the Blue Pill). Also, an instance has been created to carry out the communication,
    and the instance's reference is passed to the temperature sensor.
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如前文片段所示，单总线将使用 PB12（在 Blue Pill 上标记为 P12）。此外，已创建一个实例以执行通信，并将实例的引用传递给温度传感器。
- en: 'Next, in the `setup()` part, we need to start the serial data transmission
    and assign the speed of the transfer (as usual, we will use 9,600 bps as the standard
    value):'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在 `setup()` 部分中，我们需要启动串行数据传输并分配传输速度（通常，我们将使用 9,600 bps 作为标准值）：
- en: '[PRE1]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We also need to start reading the sensor:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要开始读取传感器：
- en: '[PRE2]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now comes the `loop()` part in the sketch. The `requestTemperatures()` function
    reads the value of the temperature sensor after reading the value shown on the
    console:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在是草图中的 `loop()` 部分。`requestTemperatures()` 函数在读取控制台显示的值后读取温度传感器的值：
- en: '[PRE3]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Important note
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重要提示
- en: If the DS18B20 temperature sensor's read value is -127, this means that something
    is not well connected. Verify all the wiring. Perhaps the pin connections are
    wrong or it is simply a case of slack cables.
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果 DS18B20 温度传感器的读取值为 -127，这意味着连接存在问题。验证所有接线。也许引脚连接错误，或者只是松散的电缆。
- en: We have the complete code for reading the temperature. Next, we can see the
    complete sketch, available in the `Chapter9/temperature_reading` folder in the
    GitHub repository.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经有了读取温度的完整代码。接下来，我们可以看到完整的草图，位于 GitHub 仓库的 `Chapter9/temperature_reading`
    文件夹中。
- en: 'Now that the sketch is complete, you can upload it to the Blue Pill Board.
    You can see in the **Serial monitor** the temperature that the sensor is measuring
    (as shown in *Figure 9.11*):'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在草图已经完成，您可以将其上传到 Blue Pill 板。您可以在 **串行监视器** 中看到传感器正在测量的温度（如图 *图 9.11* 所示）：
- en: '![Figure 9.11 – Serial monitor temperature readings](img/Figure_9.11_B16413.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.11 – 串行监视器温度读数](img/Figure_9.11_B16413.jpg)'
- en: Figure 9.11 – Serial monitor temperature readings
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.11 – 串行监视器温度读数
- en: So far, we have learned to measure the environment temperature from a sensor.
    During the main loop, the device keeps sensing the sensor and displays its data
    gathered on the serial monitor.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经学会了从传感器测量环境温度。在主循环期间，设备持续感应传感器并显示在串行监视器上收集的数据。
- en: Next, we are ready to learn about the ESP8266 sensor module and how to connect
    it to load the required scripts for internet connection
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将学习关于 ESP8266 传感器模块以及如何连接它来加载所需的互联网连接脚本。
- en: Learning to connect the ESP8266 module
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学习连接 ESP8266 模块
- en: As we learned at the beginning of the chapter, an electronic device to be considered
    an IoT device must have an internet connection and make its data available through
    this medium.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们在本章开头所学的，一个要被视为物联网设备的电子设备必须具备互联网连接，并通过这种媒介提供其数据。
- en: Due to the aforementioned requirement, we will use a module that will give our
    temperature-logging system the ability to connect to the internet. This component
    is the ESP8266 Wi-Fi module.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 由于上述要求，我们将使用一个模块，将使我们的温度记录系统具备连接到互联网的能力。这个组件是 ESP8266 Wi-Fi 模块。
- en: Now, we are going to learn the hardware components needed to connect the **STM32
    Blue Pill** to the internet using the ESP8266 Wi-Fi module. The first thing will
    be to know and understand the Wi-Fi module.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将学习连接 STM32 Blue Pill 到互联网所需的硬件组件，首先要知道和理解 Wi-Fi 模块。
- en: An introduction to the ESP8266 Wi-Fi module
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ESP8266 Wi-Fi 模块的简介
- en: The **ESP8266** is a microcontroller with integrated Wi-Fi communication, and
    its main advantage is its very low cost compared to other chips with similar characteristics.
    By itself, it can work as a microcontroller, such as Arduino or Blue Pill, but
    it is widely used as a Wi-Fi module for other microcontrollers that do not have
    a built-in internet connection. This project will use it as the main microcontroller
    to manage the internet connection and temperature measurement. After the ESP8266
    receives a remote interaction from the internet, it will connect to the STM32
    Blue Pill to demonstrate the connection between both microcontrollers.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**ESP8266** 是一个集成了 Wi-Fi 通信的微控制器，其主要优势是与其他具有类似特性的芯片相比成本非常低。它本身可以作为微控制器工作，如
    Arduino 或 Blue Pill，但它广泛用作没有内置互联网连接的其他微控制器的 Wi-Fi 模块。本项目将使用它作为主要微控制器来管理互联网连接和温度测量。ESP8266
    收到来自互联网的远程交互后，将连接到 STM32 Blue Pill 以展示两个微控制器之间的连接。'
- en: 'This chapter will use the ESP-01 module, which includes in a breakout board
    the ESP8266 chip, Wi-Fi antenna, flash memory, LEDs, and pins to connect to solderless
    breadboards without the need for soldering (as shown in *Figure 9.12*), just with
    a few jumper wires:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将使用 ESP-01 模块，该模块包含 ESP8266 芯片、Wi-Fi 天线、闪存、LED 和引脚，无需焊接即可连接到无焊点面包板（如图 *9.12*
    所示），只需几根跳线：
- en: '![Figure 9.12 – ESP-01 breakout board with an ESP8266 Wi-Fi](img/Figure_9.12_B16413.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.12 – 带有 ESP8266 Wi-Fi 的 ESP-01 扩展板](img/Figure_9.12_B16413.jpg)'
- en: Figure 9.12 – ESP-01 breakout board with an ESP8266 Wi-Fi
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.12 – 带有 ESP8266 Wi-Fi **接入点** (**AP**) 的 ESP-01 扩展板。
- en: The ESP-01 enables Wi-Fi communication using the TCP/IP stack over the serial
    port using AT commands by default from the factory.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: ESP-01 默认情况下通过串行端口使用 AT 命令通过 TCP/IP 堆栈进行 Wi-Fi 通信。
- en: 'The ESP8266 module has three types of operation:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: ESP8266 模块有三种操作模式：
- en: '**Station** (**STA**).'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Station** (**STA**)。'
- en: '**Access Point** (**AP**).'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**接入点** (**AP**)。'
- en: Both.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 两者都。
- en: In **AP mode**, the module acts as an access point on a Wi-Fi network to connect
    other IoT devices. In the **STA** type, our modules can be connected to a Wi-Fi
    access point of a network. The latter mode allows the SP-01 to operate as **AP**
    and **STA**. In this chapter, we will override the AT firmware of the SP-01 to
    use firmware coded by ourselves as a C script.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **AP 模式**下，该模块在 Wi-Fi 网络上充当接入点，以连接其他物联网设备。在 **STA** 类型中，我们的模块可以连接到网络的 Wi-Fi
    接入点。后一种模式允许 SP-01 同时作为 **AP** 和 **STA** 运行。在本章中，我们将覆盖 SP-01 的 AT 固件，以使用我们自己编写的
    C 脚本作为固件。
- en: With a knowledge of basic features composing the ESP8266, including the ESP-01
    module, let's move on to the following subsection to learn how to connect it to
    the STM32 Blue Pill.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在了解 ESP8266 的基本功能，包括 ESP-01 模块后，让我们继续学习如何将其连接到 STM32 Blue Pill。
- en: Connecting an ESP8266 Wi-Fi module
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接 ESP8266 Wi-Fi 模块
- en: In this subsection, we will learn to interface the ESP-01 for uploading our
    C scripts. In the end, we will have an electronic device with the ability to connect
    to a Wi-Fi network.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在本小节中，我们将学习如何将 ESP-01 连接起来以上传我们的 C 脚本。最终，我们将拥有一个能够连接到 Wi-Fi 网络的电子设备。
- en: One of the most critical issues when prototyping with the SP-01 is that the
    pins are not physically compatible with a solderless breadboard, so we will need
    jumper cables to accomplish the connections.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 SP-01 进行原型设计时，最关键的问题之一是其引脚与无焊点面包板在物理上不兼容，因此我们需要跳线来完成连接。
- en: 'The pin configuration of the SP-01 is as follows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: SP-01 的引脚配置如下：
- en: '**GND** corresponds to the ground.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GND** 对应地线。'
- en: '**GPIO2** general-purpose input-output. It is digital pin number 2.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GPIO2** 是通用输入输出引脚。它是数字引脚编号 2。'
- en: '**GPIO0** general-purpose input-output. It is digital pin number 0.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GPIO0** 是通用输入输出引脚。它是数字引脚编号 0。'
- en: '**RXD** is the pin where the serial port data will be received. It works at
    3.3 V. It can also be used as a GPIO digital pin. This will be number 3.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RXD** 是串口数据接收的引脚。它工作在 3.3 V 电压下。它也可以用作 GPIO 数字引脚。这将编号为 3。'
- en: '**TXD** is the pin where the serial port data will be transmitted. It works
    at 3.3 V. It can also be used as a GPIO digital pin. This will be number 1.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TXD** 是串口数据传输的引脚。它工作在 3.3 V 电压下。它也可以用作 GPIO 数字引脚。这将编号为 1。'
- en: '**CH_PD** is the pin to turn the ESP-01 on and off. If we set it to 0 V (LOW),
    it turns off, and it turns on at 3.3 V (HIGH).'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CH_PD** 是用于开启和关闭 ESP-01 的引脚。如果我们将其设置为 0 V（低电平），则关闭，在 3.3 V（高电平）时开启。'
- en: '**RESET** is the pin to reset the ESP-01\. If we set it to 0 V (LOW), it resets.
    VCC is where we feed the ESP-01\. It operates at 3.3 V and supports a maximum
    of 3.6 V. The current supplied must be greater than 200 mA.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RESET** 是用于重置 ESP-01 的引脚。如果我们将其设置为 0 V（低电平），则重置。VCC 是我们为 ESP-01 提供电源的地方。它工作在
    3.3 V 电压下，支持最大 3.6 V。提供的电流必须大于 200 mA。'
- en: 'As you can see, the SP-01 does not have analog pins, but it does have four
    digital pins available to work with: GPIO0, GPIO2, RXD (GPIO3), and TXD (GPIO1).
    To program the SP-01, we require a **USB-Serial adapter** (also called **FTDI**
    or **TTL**) and, at the same time, we can power it.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，SP-01 没有模拟引脚，但它有四个数字引脚可供使用：GPIO0、GPIO2、RXD（GPIO3）和 TXD（GPIO1）。要编程 SP-01，我们需要一个
    **USB-串行适配器**（也称为 **FTDI** 或 **TTL**），同时我们还可以为其供电。
- en: '*Figure 9.13* shows the connections between the SP-01 and the FTDI adapter:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 9.13* 展示了 SP-01 和 FTDI 适配器之间的连接：'
- en: '![Figure 9.13 – An ESP8266 connected to the Blue Pill](img/Figure_9.13_B16413.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.13 – 连接到 Blue Pill 的 ESP8266](img/Figure_9.13_B16413.jpg)'
- en: Figure 9.13 – An ESP8266 connected to the Blue Pill
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.13 – 连接到 Blue Pill 的 ESP8266
- en: 'The following are the steps for connecting the ESP8266 to the FTDI, according
    to the previous diagram:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是将 ESP8266 连接到 FTDI 的步骤，根据之前的图示：
- en: Connect the ESP8266's **RXD** pin to the FTDI's **TXD** pin.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 ESP8266 的 **RXD** 引脚连接到 FTDI 的 **TXD** 引脚。
- en: Connect the ESP8266's **TXD** pin to the FTDI's **RXD** pin.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 ESP8266 的 **TXD** 引脚连接到 FTDI 的 **RXD** 引脚。
- en: Connect the ESP8266's **GND** pin to the FTDI's **GND** pin.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 ESP8266 的 **GND** 引脚连接到 FTDI 的 **GND** 引脚。
- en: Connect the ESP8266's **CH_PD** pin to the FTDI's **3.3 V** pin.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 ESP8266 的 **CH_PD** 引脚连接到 FTDI 的 **3.3 V** 引脚。
- en: Connect the ESP8266's **3.3 V** pin to the FTDI's **3.3 V** pin.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 ESP8266 的 **3.3 V** 引脚连接到 FTDI 的 **3.3 V** 引脚。
- en: 'To complete *steps 4* and *5*, you will need a solderless breadboard. *Figure
    9.14* shows what the connection between the FTDI and ESP-01 module looks like
    after everything was connected:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成 *步骤 4* 和 *步骤 5*，您需要一个无焊点面包板。*图 9.14* 展示了连接完成后 FTDI 和 ESP-01 模块之间的连接情况：
- en: '![Figure 9.14 – Wi-Fi module connections](img/Figure_9.14_B16413.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.14 – Wi-Fi 模块连接](img/Figure_9.14_B16413.jpg)'
- en: Figure 9.14 – Wi-Fi module connections
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.14 – Wi-Fi 模块连接
- en: Important note
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: To load a program in the ESP-01, we must have the GPIO0 pin at a low level (LOW
    = GND) and the GPIO2 pin at a high level (HIGH = VCC). We must remember that the
    ESP8266 works with 3.3 V logic levels, so the GPIO2 pin is HIGH by default since
    it has an internal pull-up. Therefore, it can be left disconnected.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 ESP-01 中加载程序，我们必须将 GPIO0 引脚置于低电平（低电平 = GND）并将 GPIO2 引脚置于高电平（高电平 = VCC）。我们必须记住，ESP8266
    使用 3.3 V 逻辑电平，因此 GPIO2 引脚默认为高电平，因为它具有内部上拉。因此，它可以保持未连接状态。
- en: 'Finally, *Figure 9.15* shows how all the finished hardware connections appear,
    including the temperature sensor:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，*图 9.15* 展示了所有完成的硬件连接，包括温度传感器：
- en: '![Figure 9.15 – IoT temperature-logging system](img/Figure_9.15_B16413.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.15 – 物联网温度记录系统](img/Figure_9.15_B16413.jpg)'
- en: Figure 9.15 – IoT temperature-logging system
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.15 – 物联网温度记录系统
- en: Recapping what we have learned in the chapter, we now know how to obtain the
    ambient temperature using the DS18B20 temperature sensor and the STM32 microcontroller.
    We met the Wi-Fi module SP-01 and interfaced with an FTDI adapter to program and
    power it.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾本章所学内容，我们现在知道如何使用 DS18B20 温度传感器和 STM32 微控制器获取环境温度。我们遇到了 Wi-Fi 模块 SP-01，并通过
    FTDI 适配器进行编程和供电。
- en: It is time to go to the next section, which will present the C code to connect
    the temperature sensor to the internet using the SP-01.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候进入下一节了，该节将展示使用 SP-01 将温度传感器连接到互联网的 C 代码。
- en: Coding a program to send the sensed temperature to the internet
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写程序将感应到的温度发送到互联网
- en: 'Now, we need to develop the software for connecting the temperature sensor
    to the internet using the ESP8266 Wi-Fi module. Let''s begin:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要使用 ESP8266 Wi-Fi 模块开发将温度传感器连接到互联网的软件。让我们开始：
- en: Open the **Arduino** menu and select **Preferences**.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 **Arduino** 菜单并选择 **Preferences**。
- en: Add [https://arduino.esp8266.com/stable/package_esp8266com_index.json](https://arduino.esp8266.com/stable/package_esp8266com_index.json)
    to the **Additional Boards Manager URLs** field. You will need to separate the
    text with a comma from the link of the STM32 module that we installed in the first
    chapters.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 [https://arduino.esp8266.com/stable/package_esp8266com_index.json](https://arduino.esp8266.com/stable/package_esp8266com_index.json)
    添加到 **Additional Boards Manager URLs** 字段。您需要用逗号与我们在第一章中安装的 STM32 模块的链接分开文本。
- en: Install the **esp8266** platform. Go to the **Tools** menu and select **Board**
    followed by **Boards Manager** (see *Figure 9.16*):![Figure 9.16 – Installing
    the esp8266 platform](img/Figure_9.16_B16413.jpg)
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 **esp8266** 平台。转到 **Tools** 菜单并选择 **Board**，然后选择 **Boards Manager**（见 *图
    9.16*）:![图 9.16 – 安装 esp8266 平台](img/Figure_9.16_B16413.jpg)
- en: Figure 9.16 – Installing the esp8266 platform
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 9.16 – 安装 esp8266 平台
- en: 'Including the libraries will be the first step in the code:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码中包含库将是第一步：
- en: '[PRE4]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`setup()` will contain all the programming logic. We need to start the serial
    data transmission and assign the speed of the transfer (this time we will use
    115,200 bps). At the same time, we will initialize the sensor readings:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`setup()` 将包含所有编程逻辑。我们需要启动串行数据传输并分配传输速度（这次我们将使用 115,200 bps）。同时，我们将初始化传感器读取：'
- en: '[PRE5]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next, we are going to add the Wi-Fi credentials and start a web server. When
    the server receives a request to read, this will call a function named `read_sensor`:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将添加 Wi-Fi 凭据并启动一个网络服务器。当服务器接收到读取请求时，这将调用名为 `read_sensor` 的函数：
- en: '[PRE6]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: When the web server starts, an HTML button will be displayed as a command from
    the user to read the temperature from the sensor.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当网络服务器启动时，将显示一个 HTML 按钮，作为用户读取传感器温度的命令。
- en: '[PRE7]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Finally, after the user presses the button, the server will execute the `read_sensor()`
    function. This function will read the sensor value and display it to the user
    over the internet:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在用户按下按钮后，服务器将执行 `read_sensor()` 函数。此函数将读取传感器值并通过互联网将其显示给用户：
- en: '[PRE8]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The `loop()` part in the sketch will keep the internet connection waiting for
    the user commands:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 草图中 `loop()` 部分将保持互联网连接等待用户命令：
- en: '[PRE9]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, you can upload it to the ESP8266\. To test the program, just open any
    web browser and open the IP assigned to our device. *Figure 9.17* shows the temperature
    reading over the internet using the ESP8266 Wi-Fi module:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以将其上传到 ESP8266。为了测试程序，只需打开任何网页浏览器并打开分配给我们的设备的 IP 地址。*图 9.17* 显示了使用 ESP8266
    Wi-Fi 模块通过互联网读取温度读数：
- en: '![Figure 9.17 – Reading a temperature sensor over the internet](img/Figure_9.17_B16413.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.17 – 通过互联网读取温度传感器](img/Figure_9.17_B16413.jpg)'
- en: Figure 9.17 – Reading a temperature sensor over the internet
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.17 – 通过互联网读取温度传感器
- en: This time, we have the complete code for connecting the temperature sensor to
    the internet. We can find the complete sketch in the `Chapter9/wifi` folder in
    the GitHub repository.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，我们有了将温度传感器连接到互联网的完整代码。我们可以在 GitHub 仓库的 `Chapter9/wifi` 文件夹中找到完整的草图。
- en: We will make the first approach for the STM32 Blue Pill microcontroller to obtain
    data from the internet in the next section.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将为 STM32 Blue Pill 微控制器提供从互联网获取数据的第一种方法。
- en: Connecting the STM32 Blue Pill board to the internet
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 STM32 Blue Pill 板连接到互联网
- en: The previous code snippets sense a sensor to measure the temperature and send
    the sensed data to the internet.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码片段感应传感器以测量温度并将感应数据发送到互联网。
- en: When the user requests the temperature from the web browser, the STM32 microcontroller
    will receive a request to blink an LED and consequently link it to our IoT environment
    created with the ESP8266 Wi-Fi module.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户通过网页浏览器请求温度时，STM32 微控制器将接收到一个请求闪烁 LED 的请求，从而将其与使用 ESP8266 Wi-Fi 模块创建的 IoT
    环境相连接。
- en: '*Figure 9.18* shows the connections required to interface the STM32 and the
    SP-01:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 9.18* 展示了连接 STM32 和 SP-01 所需的连接：'
- en: '![Figure 9.18 – Connecting the STM32 to the internet](img/Figure_9.18_B16413.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.18 – 将 STM32 连接到互联网](img/Figure_9.18_B16413.jpg)'
- en: Figure 9.18 – Connecting the STM32 to the internet
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.18 – 将 STM32 连接到互联网
- en: '*Figure 9.19* shows the actual device connections between the STM32 and the
    SP-01:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '*图9.19*显示了STM32和SP-01之间的实际设备连接：'
- en: '![Figure 9.19 – Physical connections between the STM32 and SP-01](img/B16413_Figure_9.19.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![图9.19 – STM32和SP-01之间的物理连接](img/B16413_Figure_9.19.jpg)'
- en: Figure 9.19 – Physical connections between the STM32 and SP-01
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.19 – STM32和SP-01之间的物理连接
- en: 'To complete the connection between the STM32 and the SP-01, we need to add
    a few lines of code to the `Chapter09/wifi` script:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成STM32和SP-01之间的连接，我们需要在`Chapter09/wifi`脚本中添加几行代码：
- en: '[PRE10]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In the preceding line, add a constant to store the input pin used to receive
    the data from the internet. Then, in the `read_sensor()` function, add the following
    line to send the value 1 (`HIGH`) each time the user ask for the temperature:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一行中，添加一个常量来存储用于接收来自互联网的数据的输入引脚。然后，在`read_sensor()`函数中，添加以下行以在用户请求温度时发送值1（`HIGH`）：
- en: '[PRE11]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: To finish, upload the `Chapter09/internetblink` script to the STM32 Blue Pill
    microcontroller in order to read a digital input and send a digital output to
    blink a LED. This script will not be explained here because it uses a set of instructions
    that are well-known to the reader.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将`Chapter09/internetblink`脚本上传到STM32 Blue Pill微控制器，以便读取数字输入并发送数字输出以闪烁LED。这个脚本在这里不会解释，因为它使用的是读者已经熟悉的指令集。
- en: Open a web browser and go to the IP address of our server and press the **Read
    sensor** button. You will see the temperature and the LED blinking.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 打开网页浏览器并访问我们的服务器IP地址，然后按**读取传感器**按钮。你会看到温度和LED闪烁。
- en: Congratulations! You have finished learning how to connect a temperature sensor
    to the internet using the ESP8266 Wi-Fi module ESP-01 and how to open a connection
    between the STM32 Blue Pill and an internet request.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你已经完成了如何使用ESP8266 Wi-Fi模块ESP-01将温度传感器连接到互联网，以及如何打开STM32 Blue Pill和互联网请求之间连接的学习。
- en: Summary
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: What have we learned in this project? Firstly, we learned how to connect a temperature
    sensor to the STM32 Blue Pill microcontroller board. We then wrote the code to
    read the temperature and send it to our microcontroller. Subsequently, we learned
    how to connect a Wi-Fi module to our STM32 and code a sketch to connect the board
    to the internet.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中我们学到了什么？首先，我们学习了如何将温度传感器连接到STM32 Blue Pill微控制器板。然后，我们编写了读取温度并将其发送到我们的微控制器的代码。随后，我们学习了如何将Wi-Fi模块连接到我们的STM32，并编写一个草图将板子连接到互联网。
- en: This project has given us the skills to begin to create an IoT application,
    a great skill in this hyper-connected world. In the forthcoming chapters, you
    will be able to apply what you have learned since they consist of projects that
    require an internet connection. In [*Chapter 10*](B16413_10_Final_NM_ePub.xhtml#_idTextAnchor135),
    *IoT Plant Pot Moisture Sensor*, you will learn about measuring the moisture of
    a pot through a sensor and sending it to the cloud. We will visualize the sensor
    data on a web page.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目让我们获得了开始创建物联网应用的能力，在这个高度互联的世界里这是一个了不起的技能。在接下来的章节中，你将能够应用你所学的知识，因为它们包括需要互联网连接的项目。在[*第10章*](B16413_10_Final_NM_ePub.xhtml#_idTextAnchor135)
    *物联网植物花盆湿度传感器*中，你将学习如何通过传感器测量花盆的湿度并将其发送到云端。我们将在网页上可视化传感器数据。
- en: Further reading
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Morgan, J. *A Simple Explanation of "The Internet of Things".* Forbes. 2014:
    [https://www.forbes.com/sites/jacobmorgan/2014/05/13/simple-explanation-internet-things-that-anyone-can-understand/](https://www.forbes.com/sites/jacobmorgan/2014/05/13/simple-explanation-internet-things-that-anyone-can-understand/)'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '摩根，J. *“物联网”的简单解释。*《福布斯》。2014: [https://www.forbes.com/sites/jacobmorgan/2014/05/13/simple-explanation-internet-things-that-anyone-can-understand/](https://www.forbes.com/sites/jacobmorgan/2014/05/13/simple-explanation-internet-things-that-anyone-can-understand/)'
