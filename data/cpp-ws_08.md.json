["```cpp\ndotnet add package Octokit\n```", "```cpp\nvar github = new GitHubClient(new ProductHeaderValue(\"Packt\"));\n```", "```cpp\nconst string username = \"github-user\";\nvar user = await github.User.Get(username);\n```", "```cpp\nConsole.WriteLine($\"{username} created profile at {user.CreatedAt}\");\n```", "```cpp\ngithub-user created profile at 2018-06-22 07:51:56 +00:00\n```", "```cpp\n\u00a0\u00a0\u00a0\u00a0public static class EnvironmentVariable\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public static string GetOrThrow(string environmentVariable)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var variable = Environment.GetEnvironmentVariable(environmentVariable, EnvironmentVariableTarget.User);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (string.IsNullOrWhiteSpace(variable))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw new ArgumentException($\"Environment variable {environmentVariable} not found.\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return variable;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n```", "```cpp\n    dotnet add package Azure.AI.TextAnalytics\n    ```", "```cpp\n    public class Demo\n    {\n    \u00a0\u00a0\u00a0\u00a0private static string TextAnalysisApiKey { get; } = EnvironmentVariable.GetOrThrow(\"TextAnalysisApiKey\");\n    \u00a0\u00a0\u00a0\u00a0private static string TextAnalysisEndpoint { get; } = EnvironmentVariable.GetOrThrow(\"TextAnalysisEndpoint\");\n    ```", "```cpp\n    static TextAnalyticsClient BuildClient()\n    {\n    \u00a0\u00a0\u00a0\u00a0var credentials = new AzureKeyCredential(TextAnalysisApiKey);\n    \u00a0\u00a0\u00a0\u00a0var endpoint = new Uri(TextAnalysisEndpoint);\n    \u00a0\u00a0\u00a0\u00a0var client = new TextAnalyticsClient(endpoint, credentials);\n    \u00a0\u00a0\u00a0\u00a0return client;\n    }\n    ```", "```cpp\n    private static async Task<DocumentSentiment> PerformSentimentalAnalysis(TextAnalyticsClient client, string text)\n    {\n    \u00a0\u00a0\u00a0\u00a0var options = new AnalyzeSentimentOptions { IncludeOpinionMining = true };\n    \u00a0\u00a0\u00a0\u00a0DocumentSentiment documentSentiment = await client.AnalyzeSentimentAsync(text, options: options);\n    \u00a0\u00a0\u00a0\u00a0return documentSentiment;\n    }\n    ```", "```cpp\n    private static void DisplaySentenceSummary(SentenceSentiment sentence)\n    {\n    \u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"Text: \\\"{sentence.Text}\\\"\");\n    \u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"Sentence sentiment: {sentence.Sentiment}\");\n    \u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"Positive score: {sentence.ConfidenceScores.Positive:0.00}\");\n    \u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"Negative score: {sentence.ConfidenceScores.Negative:0.00}\");\n    \u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"Neutral score: {sentence.ConfidenceScores.Neutral:0.00}{Environment.NewLine}\");\n    }\n    ```", "```cpp\n    private static void DisplaySentenceOpinions(SentenceSentiment sentence)\n    {\n    \u00a0\u00a0\u00a0\u00a0if (sentence.Opinions.Any())\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine(\"Opinions: \");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0foreach (var sentenceOpinion in sentence.Opinions)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.Write($\"{sentenceOpinion.Target.Text}\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var assessments = sentenceOpinion\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.Assessments\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.Select(a => a.Text);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine($\" is {string.Join(',', assessments)}\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```cpp\n    static async Task SentimentAnalysisExample(TextAnalyticsClient client, string text)\n    {\n    \u00a0\u00a0\u00a0\u00a0DocumentSentiment documentSentiment = await PerformSentimentalAnalysis(client, text);\n    \u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"Document sentiment: {documentSentiment.Sentiment}\\n\");\n    \u00a0\u00a0\u00a0\u00a0foreach (var sentence in documentSentiment.Sentences)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0DisplaySentenceSummary(sentence);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0DisplaySentenceOpinions(sentence);\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```cpp\n    public static Task Run()\n    {\n    \u00a0\u00a0\u00a0\u00a0var client = BuildClient();\n    \u00a0\u00a0\u00a0\u00a0string text = \"Today is a great day. \" +\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0   \"I had a wonderful dinner with my family!\";\n    \u00a0\u00a0\u00a0\u00a0return SentimentAnalysisExample(client, text);\n    }\n    ```", "```cpp\nDocument sentiment: Positive\nText: \"Today is a great day.\"\nSentence sentiment: Positive\nPositive score: 1,00\nNegative score: 0,00\nNeutral score: 0,00\nText: \"I had a wonderful dinner with my family!\"\nSentence sentiment: Positive\nPositive score: 1,00\nNegative score: 0,00\nNeutral score: 0,00\nOpinions:\ndinner is wonderful\n```", "```cpp\n    public static async Task GetUser()\n    ```", "```cpp\n    client = new HttpClient { BaseAddress = new Uri(\"https://api.github.com\") };\n    client.DefaultRequestHeaders.Add(\"User-Agent\", \"Packt\");\n    ```", "```cpp\n    const string username = \"github-user\"; //replace with your own\n    var request = new HttpRequestMessage(HttpMethod.Get, new Uri($\"users/{username}\", UriKind.Relative));\n    ```", "```cpp\n    var response = await client.SendAsync(request);\n    ```", "```cpp\n    var content = await response.Content.ReadAsStringAsync();\n    var user = JsonConvert.DeserializeObject<User>(content);\n    ```", "```cpp\npublic class User\n{\n\u00a0\u00a0\u00a0\u00a0public string Name { get; set; }\n\u00a0\u00a0\u00a0\u00a0[JsonProperty(\"created_at\")]\n\u00a0\u00a0\u00a0\u00a0public DateTime CreatedAt { get; set; }\n}\n```", "```cpp\n    {\n       \"login\":\"github-user\",\n       \"id\":40486932,\n       \"node_id\":\"MDQ6VXNlcjQwNDg2OTMy\",\n       \"name\":\"Kaisinel\",\n       \"created_at\":\"2018-06-22T07:51:56Z\",\n       \"updated_at\":\"2021-08-12T14:55:29Z\"\n    }\n    ```", "```cpp\n    public class Root\n    {\n    \u00a0\u00a0\u00a0\u00a0public string login { get; set; }\n    \u00a0\u00a0\u00a0\u00a0public int id { get; set; }\n    \u00a0\u00a0\u00a0\u00a0public string node_id { get; set; }\n    \u00a0\u00a0\u00a0\u00a0public string name { get; set; }\n    \u00a0\u00a0\u00a0\u00a0public DateTime created_at { get; set; }\n    \u00a0\u00a0\u00a0\u00a0public DateTime updated_at { get; set; }\n    }\n    ```", "```cpp\n    public record User\n    ```", "```cpp\n    Console.WriteLine($\"{user.Name} created profile at {user.CreatedAt}\");\n    ```", "```cpp\nKaisinel created profile at 2018-06-22 07:51:56\n```", "```cpp\n    private static string GitHubClientId { get; } = Environment.GetEnvironmentVariable(\"GithubClientId\", EnvironmentVariableTarget.User);\n    private static string GitHubSecret { get; } = Environment.GetEnvironmentVariable(\"GithubSecret\", EnvironmentVariableTarget.User);\n    ```", "```cpp\npublic static async Task GetUser61Times()\n{\n\u00a0\u00a0\u00a0\u00a0const int rateLimit = 60;\n\u00a0\u00a0\u00a0\u00a0for (int i = 0; i < rateLimit + 1; i++)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const string username = \"github-user\";\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var request = new HttpRequestMessage(HttpMethod.Get, new Uri($\"users/{username}\", UriKind.Relative));\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0request.Headers.CacheControl = new CacheControlHeaderValue(){NoCache = true};\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var response = await client.SendAsync(request);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (!response.IsSuccessStatusCode)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw new Exception(response.ReasonPhrase);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n```", "```cpp\n60) Kaisinel created profile at 2018-06-22 07:51:56\nUnhandled exception. System.Exception: rate limit exceeded\n```", "```cpp\nGitHttp.cs\npublic static async Task GetUser61Times(string authHeader)\n{\n\u00a0\u00a0\u00a0\u00a0const int rateLimit = 60;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for (int i = 0; i < rateLimit + 1; i++)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const string username = \"github-user\"; // replace with your own\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var request = new HttpRequestMessage(HttpMethod.Get, new Uri($\"users/{username}\", UriKind.Relative));\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0request.Headers.CacheControl = new CacheControlHeaderValue(){NoCache = true};\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0request.Headers.Add(\"Authorization\", authHeader);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var response = await client.SendAsync(request);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (!response.IsSuccessStatusCode)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw new Exception(response.ReasonPhrase);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\nThe complete code can be found here: https://packt.link/1C5wb.\n```", "```cpp\nBasic username:password\n```", "```cpp\npublic static string GetBasicToken()\n{\n\u00a0\u00a0\u00a0\u00a0var id = GitHubClientId;\n\u00a0\u00a0\u00a0\u00a0var secret = GitHubSecret;\n\u00a0\u00a0\u00a0\u00a0var tokenRaw = $\"{id}:{secret}\";\n\u00a0\u00a0\u00a0\u00a0var tokenBytes = Encoding.UTF8.GetBytes(tokenRaw);\n\u00a0\u00a0\u00a0\u00a0var token = Convert.ToBase64String(tokenBytes);\n\u00a0\u00a0\u00a0\u00a0return \"Basic \" + token;\n}\n```", "```cpp\nvar basicToken = GitExamples.GetBasicToken();\nawait GitExamples.GetUser61Times(basicToken);\n```", "```cpp\n    private static string GitHubPersonAccessToken { get; } = Environment.GetEnvironmentVariable(\"GitHubPersonalAccess\", EnvironmentVariableTarget.User);\n    ```", "```cpp\n    await GetUser61Times(GitHubPersonAccessToken);\n    ```", "```cpp\n    https://github.com/login/oauth/authorize?client_id={{ClientId}}&redirect_uri={{RedirectUrl}}\n    ```", "```cpp\n    {tokenUrl}?client_id={clientId}&redirect_uri={redirectUri}&client_secret={secret}&code={code}:\n    ```", "```cpp\nprivate static HttpRequestMessage CreateGetAccessTokenRequest()\n{\n\u00a0\u00a0\u00a0\u00a0const string tokenUrl = \"https://github.com/login/oauth/access_token\";\n\u00a0\u00a0\u00a0\u00a0const string code = \"2ecab6ecf412f28f7d4d\";\n\u00a0\u00a0\u00a0\u00a0const string redirectUri = \"https://www.google.com/\";\n\u00a0\u00a0\u00a0\u00a0var uri = new Uri($\"{tokenUrl}?client_id={GitHubClientId}&redirect_uri={redirectUri}&client_secret={GitHubSecret}&code={code}\");\n\u00a0\u00a0\u00a0\u00a0var request = new HttpRequestMessage(HttpMethod.Post, uri);\n\u00a0\u00a0\u00a0\u00a0return request;\n}\n```", "```cpp\naccess_token=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&scope=user&token_type=bearer\n```", "```cpp\n    private static Dictionary<string, string> ConvertToDictionary(string content)\n    {\n    \u00a0\u00a0\u00a0\u00a0return content\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.Split('&')\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.Select(kvp => kvp.Split('='))\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.Where(kvp => kvp.Length > 1)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.ToDictionary(kvp => kvp[0], kvp => kvp[1]);\n    }\n    ```", "```cpp\n    private static async Task<string> GetToken()\n    {\n    \u00a0\u00a0\u00a0\u00a0HttpRequestMessage request = CreateGetAccessTokenRequest();\n    \u00a0\u00a0\u00a0\u00a0var response = await client.SendAsync(request);\n    \u00a0\u00a0\u00a0\u00a0var content = await response.Content.ReadAsStringAsync();\n    \u00a0\u00a0\u00a0\u00a0Dictionary<string, string> tokenResponse = ConvertToDictionary(content);\n    \u00a0\u00a0\u00a0\u00a0// ValidateNoError(tokenResponse);\n    \u00a0\u00a0\u00a0\u00a0var token = $\"{tokenResponse[\"token_type\"]} {tokenResponse[\"access_token\"]}\";\n    \u00a0\u00a0\u00a0\u00a0return token;\n    }\n    ```", "```cpp\nbearer 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\n```", "```cpp\n    public static async Task UpdateEmploymentStatus(bool isHireable, string authToken)\n    {\n    \u00a0\u00a0\u00a0\u00a0var user = new UserFromWeb\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0hireable = isHireable\n    \u00a0\u00a0\u00a0\u00a0};\n    \u00a0\u00a0\u00a0\u00a0var request = new HttpRequestMessage(HttpMethod.Patch, new Uri(\"/user\", UriKind.Relative));\n    \u00a0\u00a0\u00a0\u00a0request.Headers.Add(\"Authorization\", authToken);\n    \u00a0\u00a0\u00a0\u00a0var requestContent = JsonConvert.SerializeObject(user, new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore });\n    \u00a0\u00a0\u00a0\u00a0request.Content = new StringContent(requestContent, Encoding.UTF8, \"application/json\");\n    \u00a0\u00a0\u00a0\u00a0var response = await client.SendAsync(request);\n    \u00a0\u00a0\u00a0\u00a0var responseContent = await response.Content.ReadAsStringAsync();\n    \u00a0\u00a0\u00a0\u00a0Console.WriteLine(responseContent);\n    }\n    ```", "```cpp\ntype/subtype\n```", "```cpp\npublic static async Task Run()\n{\n\u00a0\u00a0\u00a0\u00a0var oathAccessToken = await GitExamples.GetToken();\n\u00a0\u00a0\u00a0\u00a0await GitExamples.UpdateEmploymentStatus(true, oathAccessToken);\n}\n```", "```cpp\nerror=bad_verification_code&error_description=The+code+passed+is+incorrect+or+expired.&error_uri=https%3A%2F%2Fdocs.github.com%2Fapps%2Fmanaging-oauth-apps%2Ftroubleshooting-oauth-app-access-token-request-errors%2F%23bad-verification-code\n```", "```cpp\nprivate static void ValidateNoError(Dictionary<string, string> tokenResponse)\n{\n\u00a0\u00a0\u00a0\u00a0if (tokenResponse.ContainsKey(\"error\"))\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw new Exception(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$\"{tokenResponse[\"error\"].Replace(\"_\", \" \")}. \" +\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$\"{tokenResponse[\"error_description\"].Replace(\"+\", \" \")}\");\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cpp\nbad verification code. The code passed is incorrect or expired.\n```", "```cpp\n    public class StarWarsClient\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0private readonly HttpClient _client;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public StarWarsClient()\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_client = new HttpClient {BaseAddress = new Uri(\"https://swapi.dev/api/\")};\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    ```", "```cpp\n    Film.cs\n    public record Film\n    {\n    \u00a0\u00a0\u00a0\u00a0public string Title { get; set; }\n    \u00a0\u00a0\u00a0\u00a0public int EpisodeId { get; set; }\n    \u00a0\u00a0\u00a0\u00a0public string OpeningCrawl { get; set; }\n    \u00a0\u00a0\u00a0\u00a0public string Director { get; set; }\n    \u00a0\u00a0\u00a0\u00a0public string Producer { get; set; }\n    \u00a0\u00a0\u00a0\u00a0[JsonProperty(\"release_date\")]\n    \u00a0\u00a0\u00a0\u00a0public string ReleaseDate { get; set; }\n    \u00a0\u00a0\u00a0\u00a0public string[] Characters { get; set; }\n    \u00a0\u00a0\u00a0\u00a0public string[] Planets { get; set; }\n    \u00a0\u00a0\u00a0\u00a0public string[] Starships { get; set; }\n    \u00a0\u00a0\u00a0\u00a0public string[] Vehicles { get; set; }\n    \u00a0\u00a0\u00a0\u00a0public string[] Species { get; set; }\n    \u00a0\u00a0\u00a0\u00a0public DateTime Created { get; set; }\n    ```", "```cpp\nThe complete code can be found here: https://packt.link/tjHLa.\n```", "```cpp\n    public record ApiResult<T>\n    {\n    \u00a0\u00a0\u00a0\u00a0public int Count { get; set; }\n    \u00a0\u00a0\u00a0\u00a0public string Next { get; set; }\n    \u00a0\u00a0\u00a0\u00a0public string Previous { get; set; }\n    \u00a0\u00a0\u00a0\u00a0[JsonProperty(\"results\")]\n    \u00a0\u00a0\u00a0\u00a0public T Data { get; set; }\n    }\n    ```", "```cpp\n    public async Task<ApiResult<IEnumerable<Film>>> GetFilms()\n    {\n    ```", "```cpp\n    var request = new HttpRequestMessage(HttpMethod.Get, new Uri(\"films\", UriKind.Relative));\n    ```", "```cpp\n    var response = await _client.SendAsync(request);\n    ```", "```cpp\n    if (!response.IsSuccessStatusCode)\n    {\n    \u00a0\u00a0\u00a0\u00a0  throw new HttpRequestException(response.ReasonPhrase);\n    }\n    ```", "```cpp\n    var content = await response.Content.ReadAsStringAsync();\n    var films = JsonConvert.DeserializeObject<ApiResult<Film>>(content);\n    \u00a0\u00a0\u00a0\u00a0return films;\n    }\n    ```", "```cpp\n    public static class Demo\n    {\n    \u00a0\u00a0\u00a0\u00a0public static async Task Run()\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var client = new StarWarsClient();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var filmsResponse = await client.GetFilms();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var films = filmsResponse.Data;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0foreach (var film in films)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"{film.ReleaseDate} {film.Title}\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```cpp\n1977-05-25 A New Hope\n1980-05-17 The Empire Strikes Back\n1983-05-25 Return of the Jedi\n1999-05-19 The Phantom Menace\n2002-05-16 Attack of the Clones\n2005-05-19 Revenge of the Sith\n```", "```cpp\n    1977-05-25 A New Hope\n    1980-05-17 The Empire Strikes Back\n    1983-05-25 Return of the Jedi\n    1999-05-19 The Phantom Menace\n    2002-05-16 Attack of the Clones\n    2005-05-19 Revenge of the Sith\n    ```", "```cpp\ndotnet add package RestSharp\n```", "```cpp\n\u00a0\u00a0\u00a0\u00a0public class StarWarsClient\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0private readonly RestClient _client;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public StarWarsClient()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_client = new RestClient(\"https://swapi.dev/api/\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n```", "```cpp\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public async Task<ApiResult<IEnumerable<Film>>> GetFilms()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var request = new RestRequest(\"films\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var films = await _client.GetAsync<ApiResult<IEnumerable<Film>>>(request);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return films;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n```", "```cpp\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public StarWarsClient()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_client = new RestClient(\"https://swapi.dev/api/\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_client.UseSerializer(() => new JsonNetSerializer());\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n```", "```cpp\n1977-05-25 A New Hope\n1980-05-17 The Empire Strikes Back\n1983-05-25 Return of the Jedi\n1999-05-19 The Phantom Menace\n2002-05-16 Attack of the Clones\n2005-05-19 Revenge of the Sith\n```", "```cpp\nAll:\nAruba Americas Oranjestad\nAfghanistan Asia Kabul\nLithuanian:\nLithuania Europe Vilnius\nVilnius:\nLithuania Europe Vilnius\n```", "```cpp\n    dotnet add package Refit\n    ```", "```cpp\n    public interface IStarWarsClient\n    {\n    \u00a0\u00a0\u00a0\u00a0[Get(\"/films\")]\n    \u00a0\u00a0\u00a0\u00a0public Task<ApiResult<IEnumerable<Film>>> GetFilms();\n    }\n    ```", "```cpp\n    var client = RestService.For<IStarWarsClient>(\"https://swapi.dev/api/\");\n    ```", "```cpp\n1977-05-25 A New Hope\n1980-05-17 The Empire Strikes Back\n1983-05-25 Return of the Jedi\n1999-05-19 The Phantom Menace\n2002-05-16 Attack of the Clones\n2005-05-19 Revenge of the Sith\n```", "```cpp\nAll:\nAruba Americas Oranjestad\nAfghanistan Asia Kabul\nLithuanian:\nLithuania Europe Vilnius\nVilnius:\nLithuania Europe Vilnius\n```", "```cpp\n    public static string PayPalClientId { get; } = EnvironmentVariable.GetOrThrow(\"PayPalClientId\");\n    public static string PayPalSecret { get; } = EnvironmentVariable.GetOrThrow(\"PayPalSecret\");\n    ```", "```cpp\n    public const string BaseAddress = \"https://api.sandbox.paypal.com/\";\n    ```", "```cpp\n    public interface IPayPalClient\n    {\n    \u00a0\u00a0\u00a0\u00a0[Post(\"/v2/checkout/orders\")]\n    \u00a0\u00a0\u00a0\u00a0public Task<CreatedOrderResponse> CreateOrder(Order order);\n    \u00a0\u00a0\u00a0\u00a0[Get(\"/v2/checkout/orders/{id}\")]\n    \u00a0\u00a0\u00a0\u00a0public Task<Order> GetOrder(string id);\n    }\n    ```", "```cpp\n{\n\u00a0\u00a0\u00a0\"intent\":\"CAPTURE\",\n\u00a0\u00a0\u00a0\"purchase_units\":[\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \"amount\":{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"currency_code\":\"USD\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"value\":\"100.00\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 }\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0]\n}\n```", "```cpp\n    IPayPalClient.cs\n    public record Order\n    {\n    \u00a0\u00a0\u00a0\u00a0public string intent { get; set; }\n    \u00a0\u00a0\u00a0\u00a0public Purchase_Units[] purchase_units { get; set; }\n    }\n    public record Name\n    {\n    \u00a0\u00a0\u00a0\u00a0public string name { get; set; }\n    }\n    public record Purchase_Units\n    {\n    \u00a0\u00a0\u00a0\u00a0public Amount amount { get; set; }\n    \u00a0\u00a0\u00a0\u00a0public Payee payee { get; set; }\n    ```", "```cpp\nThe complete code can be found here: https://packt.link/GvEZ8.\n```", "```cpp\n    {\n    \u00a0\u00a0\u00a0\u00a0\"id\": \"7XS70547FW3652617\",\n    \u00a0\u00a0\u00a0\u00a0\"intent\": \"CAPTURE\",\n    \u00a0\u00a0\u00a0\u00a0\"status\": \"CREATED\",\n    \u00a0\u00a0\u00a0\u00a0\"purchase_units\": [\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"reference_id\": \"default\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"amount\": {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"currency_code\": \"USD\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"value\": \"100.00\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"payee\": {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"email_address\": \"sb-emttb7510335@business.example.com\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"merchant_id\": \"7LSF4RYZLRB96\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0],\n    \u00a0\u00a0\u00a0\u00a0\"create_time\": \"2021-09-04T13:01:34Z\",\n    \u00a0\u00a0\u00a0\u00a0\"links\": [\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"href\": \"https://api.sandbox.paypal.com/v2/checkout/orders/7XS70547FW3652617\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"rel\": \"self\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"method\": \"GET\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0 ]\n    }\n    ```", "```cpp\n    public class CreateOrderResponse\n    {\n    \u00a0\u00a0\u00a0\u00a0public string id { get; set; }\n    }\n    ```", "```cpp\n    public class AuthHeaderHandler : DelegatingHandler\n    {\n    ```", "```cpp\n    protected override async Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\n    {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var accessToken = await GetAccessToken(CreateBasicAuthToken());\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0request.Headers.Authorization = new AuthenticationHeaderValue(\"Bearer\", accessToken);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return await base.SendAsync(request, cancellationToken).ConfigureAwait(false);\n    }\n    ```", "```cpp\n     private static string CreateBasicAuthToken()\n    \u00a0\u00a0\u00a0\u00a0  {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var credentials = Encoding.GetEncoding(\"ISO-8859-1\").GetBytes(PayPalClientId + \":\" + PayPalSecret);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var authHeader = Convert.ToBase64String(credentials);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return \"Basic \" + authHeader;\n    \u00a0\u00a0\u00a0\u00a0  }\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0private static async Task<string> GetAccessToken(string authToken)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var request = new RestRequest(\"v1/oauth2/token\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0request.AddHeader(\"Authorization\", authToken);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0request.AddHeader(\"content-type\", \"application/x-www-form-urlencoded\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0request.AddParameter(\"application/x-www-form-urlencoded\", \"grant_type=client_credentials\", ParameterType.RequestBody);\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var response = await RestClient.ExecuteAsync<Response>(request, Method.POST);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return response.Data.access_token;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0private class Response\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public string access_token { get; set; }\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0  }\n    ```", "```cpp\n    private static readonly RestClient RestClient = new RestClient(baseAddress);\n    ```", "```cpp\n    public static async Task Run()\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\t{\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var authHandler = new AuthHeaderHandler {InnerHandler = new HttpClientHandler() };\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var payPalClient = RestService.For<IPayPalClient>(new HttpClient(authHandler)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0BaseAddress = new Uri(baseAddress)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n    ```", "```cpp\n    var order = new Order\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0intent = \"CAPTURE\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0purchase_units = new[]\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new Purchase_Units\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0amount = new Amount\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0currency_code = \"EUR\", value = \"100.00\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};\n    ```", "```cpp\n    var createOrderResponse = await payPalClient.CreateOrder(order);\n    var payment = await payPalClient.GetOrder(createOrderResponse.id);\n    var pay = payment.purchase_units.First();\n    Console.WriteLine($\"{pay.payee.email_address} - \" +\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  $\"{pay.amount.value}\" +\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  $\"{pay.amount.currency_code}\");\n    ```", "```cpp\nsb-emttb7510335@business.example.com - 100.00EUR\n```"]