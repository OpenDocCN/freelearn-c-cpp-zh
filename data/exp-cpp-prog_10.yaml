- en: Revisiting Multithreading
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重新审视多线程
- en: Chances are that if you're reading this book, you have already done some multithreaded
    programming in C++, or, possibly, other languages. This chapter is meant to recap
    the topic purely from a C++ point of view, going through a basic multithreaded
    application, while also covering the tools we'll be using throughout the book.
    At the end of this chapter, you will have all the knowledge and information needed
    to proceed with the further chapters.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在阅读这本书，很可能你已经在C++中进行了一些多线程编程，或者可能是其他语言。本章旨在从C++的角度纯粹回顾这个主题，通过一个基本的多线程应用程序，同时涵盖我们将在整本书中使用的工具。在本章结束时，你将拥有继续阅读后续章节所需的所有知识和信息。
- en: 'Topics covered in this chapter include the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的主题包括以下内容：
- en: Basic multithreading in C++ using the native API
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用本机API进行C++的基本多线程
- en: Writing basic makefiles and usage of GCC/MinGW
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写基本的makefile和使用GCC/MinGW
- en: Compiling a program using `make` and executing it on the command-line
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`make`编译程序并在命令行上执行
- en: Getting started
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门
- en: During the course of this book, we'll be assuming the use of a GCC-based toolchain
    (GCC or MinGW on Windows). If you wish to use alternative toolchains (clang, MSVC,
    ICC, and so on), please consult the documentation provided with these for compatible
    commands.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的过程中，我们将假设使用基于GCC的工具链（Windows上的GCC或MinGW）。如果您希望使用其他工具链（如clang、MSVC、ICC等），请查阅这些工具链提供的文档以获取兼容的命令。
- en: To compile the examples provided in this book, makefiles will be used. For those
    unfamiliar with makefiles, they are a simple but powerful text-based format used
    with the `make` tool for automating build tasks including compiling source code
    and adjusting the build environment. First released in 1977, `make` remains among
    the most popular build automation tools today.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了编译本书提供的示例，将使用makefile。对于不熟悉makefile的人来说，它们是一种简单但功能强大的基于文本的格式，用于与`make`工具一起自动化构建任务，包括编译源代码和调整构建环境。`make`于1977年首次发布，至今仍然是最受欢迎的构建自动化工具之一。
- en: Familiarity with the command line (Bash or equivalent) is assumed, with MSYS2
    (Bash on Windows) recommended for those using Windows.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 假设读者熟悉命令行（Bash或等效工具），推荐使用MSYS2（Windows上的Bash）。
- en: The multithreaded application
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多线程应用程序
- en: In its most basic form, a multithreaded application consists of a singular process
    with two or more threads. These threads can be used in a variety of ways; for
    example, to allow the process to respond to events in an asynchronous manner by
    using one thread per incoming event or type of event, or to speed up the processing
    of data by splitting the work across multiple threads.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在其最基本的形式中，多线程应用程序由一个进程和两个或多个线程组成。这些线程可以以各种方式使用；例如，通过使用一个线程来处理每个传入事件或事件类型，使进程能够以异步方式响应事件，或者通过将工作分配给多个线程来加快数据处理速度。
- en: Examples of asynchronous responses to events include the processing of the graphical
    user interface (GUI) and network events on separate threads so that neither type
    of event has to wait on the other, or can block events from being responded to
    in time. Generally, a single thread performs a single task, such as the processing
    of GUI or network events, or the processing of data.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对事件的异步响应的示例包括在单独的线程上处理图形用户界面（GUI）和网络事件，以便两种类型的事件不必等待对方，或者可以阻止事件及时得到响应。通常，一个线程执行一个任务，比如处理GUI或网络事件，或者处理数据。
- en: For this basic example, the application will start with a singular thread, which
    will then launch a number of threads, and wait for them to finish. Each of these
    new threads will perform its own task before finishing.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个基本示例，应用程序将从一个单一线程开始，然后启动多个线程，并等待它们完成。每个新线程在完成之前都会执行自己的任务。
- en: '![](img/b05b8a71-b79c-4527-9e11-a39c3aa4d5ac.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b05b8a71-b79c-4527-9e11-a39c3aa4d5ac.png)'
- en: 'Let''s start with the includes and global variables for our application:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从我们应用程序的包含和全局变量开始：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Both the I/O stream and vector headers should be familiar to anyone who has
    ever used C++: the former is here used for the standard output (`cout`), and the
    vector for storing a sequence of values.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: I/O流和向量头文件对于任何使用过C++的人来说应该是熟悉的：前者在这里用于标准输出（`cout`），后者用于存储一系列值。
- en: The random header is new in `c++11`, and as the name suggests, it offers classes
    and methods for generating random sequences. We use it here to make our threads
    do something interesting.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`c++11`中的random头文件是新的，正如其名称所示，它提供了用于生成随机序列的类和方法。我们在这里使用它来使我们的线程做一些有趣的事情。'
- en: Finally, the thread and mutex includes are the core of our multithreaded application;
    they provide the basic means for creating threads, and allow for thread-safe interactions
    between them.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，线程和互斥锁的包含是我们多线程应用程序的核心；它们提供了创建线程的基本手段，并允许它们之间进行线程安全的交互。
- en: 'Moving on, we create two mutexes: one for the global vector and one for `cout`,
    since the latter is not thread-safe.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 接着，我们创建两个互斥锁：一个用于全局向量，另一个用于`cout`，因为后者不是线程安全的。
- en: 'Next we create the main function as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们创建主函数如下：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We push a fixed value onto the vector instance; this one will be used by the
    threads we create in a moment:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将一个固定的值推送到向量实例中；这个值将在我们创建的线程中使用：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We create new threads, and provide them with the name of the method to use,
    passing along any parameters--in this case, just a single integer:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建新线程，并为它们提供要使用的方法的名称，同时传递任何参数--在这种情况下，只是一个整数：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next, we wait for each thread to finish before we continue by calling `join()`
    on each thread instance:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们等待每个线程完成，然后继续调用每个线程实例上的`join()`：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: At this point, we expect that each thread has done whatever it's supposed to
    do, and added the result to the vector, which we then read out and show the user.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们期望每个线程都已经完成了它应该做的事情，并将结果添加到向量中，然后我们读取并向用户显示。
- en: 'Of course, this shows almost nothing of what really happens in the application,
    mostly just the essential simplicity of using threads. Next, let''s see what happens
    inside this method that we pass to each thread instance:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这几乎没有显示应用程序中实际发生的事情，主要是使用线程的基本简单性。接下来，让我们看看我们传递给每个线程实例的方法内部发生了什么：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In the preceding code, we can see that the integer parameter being passed to
    the thread method is a thread identifier. To indicate that the thread is starting,
    a message containing the thread identifier is output. Since we''re using a `non-thread-safe`
    method for this, we use the `cout_mtx` mutex instance to do this safely, ensuring
    that just one thread can write to `cout` at any time:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们可以看到传递给线程方法的整数参数是线程标识符。为了表示线程正在启动，输出包含线程标识符的消息。由于我们为此使用了`非线程安全`方法，因此我们使用`cout_mtx`互斥实例来安全地执行此操作，确保只有一个线程可以随时写入`cout`：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'When we obtain the initial value set in the vector, we copy it to a local variable
    so that we can immediately release the mutex for the vector to enable other threads
    to use the vector:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们获取向量中设置的初始值时，我们将其复制到一个局部变量中，以便我们可以立即释放向量的互斥锁，以便其他线程可以使用该向量：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'These last two lines contain the essence of what the threads created do: they
    take the initial value, and add a randomly generated value to it. The `randGen()`
    method takes two parameters, defining the range of the returned value:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 最后两行包含了创建的线程所做的实质性内容：它们获取初始值，并将随机生成的值添加到其中。`randGen()`方法接受两个参数，定义返回值的范围：
- en: '[PRE8]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Finally, we (safely) log a message informing the user of the result of this
    action before adding the new value to the vector. In both cases, we use the respective
    mutex to ensure that there can be no overlap when accessing the resource with
    any of the other threads.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们（安全地）记录一条消息，通知用户此操作的结果，然后将新值添加到向量中。在这两种情况下，我们使用相应的互斥锁来确保在使用任何其他线程访问资源时不会发生重叠。
- en: Once the method reaches this point, the thread containing it will terminate,
    and the main thread will have one less thread to wait for to rejoin. The joining
    of a thread basically means that it stops existing, usually with a return value
    passed to the thread which created the thread. This can happen explicitly, with
    the main thread waiting for the child thread to finish, or in the background.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦方法达到这一点，包含它的线程将终止，主线程将少一个要等待重新加入的线程。线程的加入基本上意味着它停止存在，通常会将返回值传递给创建线程的线程。这可以明确地发生，主线程等待子线程完成，或者在后台进行。
- en: 'Lastly, we''ll take a look at the `randGen()` method. Here we can see some
    multithreaded specific additions as well:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们来看看`randGen()`方法。在这里，我们还可以看到一些多线程特定的添加内容：
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This preceding method takes a minimum and maximum value as explained earlier,
    which limits the range of the random numbers this method can return. At its core,
    it uses a mt19937-based `generator`, which employs a 32-bit **Mersenne Twister**
    algorithm with a state size of 19937 bits. This is a common and appropriate choice
    for most applications.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的方法接受一个最小值和一个最大值，如前所述，这限制了该方法可以返回的随机数的范围。在其核心，它使用基于mt19937的`generator`，它采用了一个具有19937位状态大小的32位**Mersenne
    Twister**算法。这对大多数应用来说是一个常见且合适的选择。
- en: Of note here is the use of the `thread_local` keyword. What this means is that
    even though it is defined as a static variable, its scope will be limited to the
    thread using it. Every thread will thus create its own `generator` instance, which
    is important when using the random number API in the STL.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这里需要注意的是`thread_local`关键字的使用。这意味着即使它被定义为静态变量，其范围也将被限制在使用它的线程中。因此，每个线程都将创建自己的`generator`实例，在使用STL中的随机数API时这一点很重要。
- en: A hash of the internal thread identifier is used as a seed for the `generator`.
    This ensures that each thread gets a fairly unique seed for its `generator` instance,
    allowing for better random number sequences.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 内部线程标识符的哈希被用作`generator`的种子。这确保每个线程都为其`generator`实例获得一个相当独特的种子，从而获得更好的随机数序列。
- en: Finally, we create a new `uniform_int_distribution` instance using the provided
    minimum and maximum limits, and use it together with the `generator` instance
    to generate the random number which we return.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们使用提供的最小和最大限制创建一个新的`uniform_int_distribution`实例，并与`generator`实例一起使用它来生成随机数，然后将其返回。
- en: Makefile
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Makefile
- en: In order to compile the code described earlier, one could use an IDE, or type
    the command on the command line. As mentioned in the beginning of this chapter,
    we'll be using makefiles for the examples in this book. The big advantages of
    this are that one does not have to repeatedly type in the same extensive command,
    and it is portable to any system which supports `make`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 为了编译前面描述的代码，可以使用集成开发环境，也可以在命令行上输入命令。正如本章开头提到的，我们将在本书的示例中使用makefile。这样做的最大优势是不必反复输入相同的复杂命令，并且可以在支持`make`的任何系统上使用。
- en: Further advantages include being able to have previous generated artifacts removed
    automatically and to only compile those source files which have changed, along
    with a detailed control over build steps.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 其他优点包括能够自动删除先前生成的工件，并且只编译那些已更改的源文件，以及对构建步骤有详细的控制。
- en: 'The makefile for this example is rather basic:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例的makefile相当基本：
- en: '[PRE10]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: From the top down, we first define the compiler that we'll use (`g++`), set
    the name of the output binary (the `.exe` extension on Windows will be post-fixed
    automatically), followed by the gathering of the sources and any important compiler
    flags.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 从上到下，我们首先定义我们将使用的编译器（`g++`），设置输出二进制文件的名称（在Windows上的`.exe`扩展名将自动添加后缀），然后收集源文件和任何重要的编译器标志。
- en: The wildcard feature allows one to collect the names of all files matching the
    string following it in one go without having to define the name of each source
    file in the folder individually.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 通配符功能允许一次性收集与其后的字符串匹配的所有文件的名称，而无需单独定义文件夹中每个源文件的名称。
- en: For the compiler flags, we're only really interested in enabling the `c++11`
    features, for which GCC still requires one to supply this compiler flag.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 对于编译器标志，我们只对启用“c++11”功能感兴趣，对于这一点，GCC仍然需要用户提供这个编译器标志。
- en: For the `all` method, we just tell `make` to run `g++` with the supplied information.
    Next we define a simple clean method which just removes the produced binary, and
    finally, we tell `make` to not interpret any folder or file named `all` in the
    folder, but to use the internal method with the `.PHONY` section.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 对于“all”方法，我们只需告诉“make”使用提供的信息运行“g++”。接下来，我们定义一个简单的清理方法，只需删除生成的二进制文件，最后，我们告诉“make”不要解释文件夹或文件夹中名为“all”的文件，而是使用带有`.PHONY`部分的内部方法。
- en: 'When we run this makefile, we see the following command-line output:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行这个makefile时，我们会看到以下命令行输出：
- en: '[PRE11]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Afterwards, we find an executable file called `ch01_mt_example` (with the `.exe`
    extension attached on Windows) in the same folder. Executing this binary will
    result in a command-line output akin to the following:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们会在同一个文件夹中找到一个名为`ch01_mt_example`的可执行文件（在Windows上附加了`.exe`扩展名）。执行这个二进制文件将会产生类似以下的命令行输出：
- en: '[PRE12]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: What one can see here already is the somewhat asynchronous nature of threads
    and their output. While threads `1` and `2` appear to run synchronously, starting
    and quitting seemingly in order, threads `3` and `4` clearly run asynchronously
    as both start simultaneously before logging their action. For this reason, and
    especially in longer-running threads, it's virtually impossible to say in which
    order the log output and results will be returned.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里可以看到线程及其输出的异步特性。虽然线程`1`和`2`似乎是同步运行的，按顺序启动和退出，但线程`3`和`4`显然是异步运行的，因为它们在记录动作之前同时启动。因此，特别是在运行时间较长的线程中，几乎不可能确定日志输出和结果将以何种顺序返回。
- en: While we use a simple vector to collect the results of the threads, there is
    no saying whether `Result 1` truly originates from the thread which we assigned
    ID 1 in the beginning. If we need this information, we need to extend the data
    we return by using an information structure with details on the processing thread
    or similar.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们使用一个简单的向量来收集线程的结果，但我们无法确定“结果1”是否真的来自我们在开始时分配ID为1的线程。如果我们需要这些信息，我们需要通过使用带有处理线程或类似信息的详细信息结构来扩展我们返回的数据。
- en: 'One could, for example, use `struct` like this:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，可以像这样使用`struct`：
- en: '[PRE13]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The vector would then be changed to contain result instances rather than integer
    instances. One could pass the initial integer value directly to the thread as
    part of its parameters, or pass it via some other way.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，向量将被更改为包含结果实例而不是整数实例。可以直接将初始整数值作为其参数之一直接传递给线程，或者通过其他方式传递它。
- en: Other applications
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他应用程序
- en: The example in this chapter is primarily useful for applications where data
    or tasks have to be handled in parallel. For the earlier mentioned use case of
    a GUI-based application with business logic and network-related features, the
    basic setup of a main application, which launches the required threads, would
    remain the same. However, instead of having each thread to be the same, each would
    be a completely different method.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的示例主要适用于需要并行处理数据或任务的应用程序。对于前面提到的基于GUI的应用程序，具有业务逻辑和网络相关功能，启动所需的线程的基本设置将保持不变。但是，每个线程都将是完全不同的方法，而不是每个线程都相同。
- en: 'For this type of application, the thread layout would look like this:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这种类型的应用程序，线程布局将如下所示：
- en: '![](img/683ea29f-bc04-4268-a7a2-e26de6d8ee7d.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/683ea29f-bc04-4268-a7a2-e26de6d8ee7d.png)'
- en: As the graphic shows, the main thread would launch the GUI, network, and business
    logic thread, with the latter communicating with the network thread to send and
    receive data. The business logic thread would also receive user input from the
    GUI thread, and send updates back to be displayed on the GUI.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 正如图表所示，主线程将启动GUI、网络和业务逻辑线程，后者将与网络线程通信以发送和接收数据。业务逻辑线程还将从GUI线程接收用户输入，并发送更新以在GUI上显示。
- en: Summary
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we went over the basics of a multithreaded application in C++
    using the native threading API. We looked at how to have multiple threads perform
    a task in parallel, and also explored how to properly use the random number API
    in the STL within a multithreaded application.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了使用本地线程API在C++中实现多线程应用程序的基础知识。我们看了如何让多个线程并行执行任务，还探讨了如何在多线程应用程序中正确使用STL中的随机数API。
- en: In the next chapter, we'll discuss how multithreading is implemented both in
    hardware and in operating systems. We'll see how this implementation differs per
    processor architecture and operating system, and how this affects our multithreaded
    application.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论多线程是如何在硬件和操作系统中实现的。我们将看到这种实现如何根据处理器架构和操作系统而异，以及这如何影响我们的多线程应用程序。
