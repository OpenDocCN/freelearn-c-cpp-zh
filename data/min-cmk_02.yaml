- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Getting Started
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门
- en: The objective of *Minimal CMake* is to walk you through the development process
    of taking an application from its humble beginnings (starting with a simple console
    application) to a complete windowed application you can demo to friends and use
    as a template for future projects.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*Minimal CMake* 的目标是引导你完成应用程序的开发过程，从一个简单的控制台应用程序开始，直到一个完整的窗口化应用程序，你可以向朋友演示，并将其作为未来项目的模板。'
- en: We’ll see how CMake can help throughout the entire process. Perhaps the greatest
    benefit CMake provides is how easy it is to integrate existing open source software
    to improve the functionality of your app.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到 CMake 如何帮助整个过程。或许 CMake 提供的最大好处是，它能够轻松地将现有的开源软件集成进来，以增强你应用的功能。
- en: Before we can start using CMake to create our application, we need to ensure
    that we have our development environment set up and ready to go. The setup will
    vary depending on which platform you’ve decided to use (Windows, macOS, or Linux).
    We’ll cover each system here. This will provide a good starting point to build
    on as we introduce CMake and begin assembling the core of our application.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始使用 CMake 创建应用之前，我们需要确保我们的开发环境已设置并准备好。根据你选择的平台（Windows、macOS 或 Linux），设置过程会有所不同。我们将在这里讨论每个平台。这将为我们介绍
    CMake 并开始构建应用程序的核心提供一个良好的起点。
- en: 'In this chapter, we’re going to cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: Installing CMake on Windows
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Windows 上安装 CMake
- en: Installing CMake on macOS
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 macOS 上安装 CMake
- en: Installing CMake on Linux (Ubuntu)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Linux（Ubuntu）上安装 CMake
- en: Installing Git
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Git
- en: Visual Studio Code setup (optional)
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio Code 设置（可选）
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To get the most out of this book, we recommend that you run the examples locally.
    To do this you will need the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了充分利用本书，我们建议你在本地运行示例。为此，你需要以下内容：
- en: A Windows, Mac, or Linux machine with an up-to-date **operating** **system**
    (**OS**)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一台运行最新 **操作系统** (**OS**) 的 Windows、Mac 或 Linux 计算机
- en: A working C/C++ compiler (a system default is recommended for each platform
    if you don’t already have this)
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个工作中的 C/C++ 编译器（如果你还没有安装，建议使用每个平台的系统默认编译器）
- en: 'The code examples in this chapter can be found by following this link: [https://github.com/PacktPublishing/Minimal-CMake](https://github.com/PacktPublishing/Minimal-CMake).'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的代码示例可以通过以下链接找到：[https://github.com/PacktPublishing/Minimal-CMake](https://github.com/PacktPublishing/Minimal-CMake)。
- en: CMake version
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: CMake 版本
- en: All examples in this book have been tested with CMake 3.28.1\. Earlier versions
    are not guaranteed to work. Later versions should be safe to upgrade to, though
    it’s possible that there may be differences. If in doubt, use CMake 3.28.1 when
    running the examples from this book.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的所有示例都已经在 CMake 3.28.1 版本下进行过测试。早期版本无法保证兼容。升级到较新的版本应该是安全的，但可能会存在差异。如果有疑问，建议在运行本书中的示例时使用
    CMake 3.28.1。
- en: Installing CMake on Windows
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Windows 上安装 CMake
- en: In this section, we’ll cover how to install everything you’ll need to start
    building applications with CMake on Windows.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍如何安装你在 Windows 上开始使用 CMake 构建应用所需的所有内容。
- en: To begin with, you will need a C/C++ compiler. If you don’t already have a compiler
    installed, a good choice to go with is Visual Studio (Visual Studio 2022 Community
    Edition can be downloaded from [https://visualstudio.microsoft.com/vs/community/](https://visualstudio.microsoft.com/vs/community/)).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你将需要一个 C/C++ 编译器。如果你还没有安装编译器，推荐使用 Visual Studio（可以从 [https://visualstudio.microsoft.com/vs/community/](https://visualstudio.microsoft.com/vs/community/)
    下载 Visual Studio 2022 Community Edition）。
- en: Visual Studio is an integrated development environment that comes with Microsoft’s
    C++ compiler for Windows (`cl.exe`). We won’t be covering Visual Studio directly,
    though you are more than welcome to use it if you prefer (see [*Chapter 11*](B21152_11.xhtml#_idTextAnchor228)*,
    Supporting Tools and Next Steps* for a brief summary). We’ll cover how to generate
    Visual Studio solution files and invoke MSBuild to build our project. To keep
    things as consistent as possible, we’ll use Visual Studio Code for most of the
    examples. This is more for convenience than anything else, and if you’re more
    comfortable with another tool, by all means use it. As CMake has grown in popularity,
    Visual Studio has expanded support for CMake considerably, which is worth investigating
    if you’re predominantly going to be developing on Windows.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio 是一个集成开发环境，附带微软的 C++ 编译器用于 Windows（`cl.exe`）。我们不会直接讨论 Visual Studio，尽管如果你更喜欢，也可以使用它（见
    [*第 11 章*](B21152_11.xhtml#_idTextAnchor228)*，支持工具与后续步骤*，其中有简要总结）。我们将讨论如何生成 Visual
    Studio 解决方案文件，并调用 MSBuild 构建项目。为了保持尽可能的一致性，我们将使用 Visual Studio Code 来展示大多数示例。这更多是出于方便的考虑，如果你更习惯使用其他工具，完全可以选择使用它。随着
    CMake 的流行，Visual Studio 对 CMake 的支持大大增强，如果你主要在 Windows 上开发，值得了解一下。
- en: Visual Studio versus Visual Studio Code
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio 与 Visual Studio Code
- en: Although they sound similar, Visual Studio and Visual Studio Code are two hugely
    different applications. Visual Studio is an integrated development environment
    from Microsoft that runs predominantly on Windows (there is also, confusingly,
    a version of Visual Studio for macOS which is quite different to the Windows application).
    Visual Studio is used for building Windows applications in C++ or .NET (C#, F#,
    and Visual Basic). Visual Studio Code on the other hand is a cross-platform code
    editor that runs on Windows, macOS, and Linux. It has an extensive extension library
    that allows it to be used with many different programming languages. It’s popular
    for web development, having excellent support for TypeScript and JavaScript, though
    it also has robust support for C++ through the C/C++ extension from Microsoft.
    Visual Studio Code is what we’ll use throughout this book.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然它们听起来相似，但 Visual Studio 和 Visual Studio Code 是两个截然不同的应用程序。Visual Studio 是微软的集成开发环境，主要运行在
    Windows 上（令人困惑的是，macOS 上也有一个版本的 Visual Studio，与 Windows 版本大不相同）。Visual Studio
    用于构建 C++ 或 .NET（C#、F# 和 Visual Basic）应用程序。另一方面，Visual Studio Code 是一个跨平台的代码编辑器，支持
    Windows、macOS 和 Linux。它拥有广泛的扩展库，可以与许多不同的编程语言一起使用。它在 Web 开发中非常受欢迎，对 TypeScript
    和 JavaScript 支持良好，尽管通过微软的 C/C++ 扩展，它对 C++ 也有强大的支持。我们将在本书中使用 Visual Studio Code。
- en: Open the Visual Studio installer and select **Visual Studio Community 2022**
    (if there’s a later version available when you’re reading this, feel free to grab
    that instead).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 Visual Studio 安装程序并选择**Visual Studio Community 2022**（如果你在阅读本书时有更新的版本，随时可以选择那个版本）。
- en: '![Figure 1.1: Visual Studio Installer version selector](img/B21152_01_1.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.1：Visual Studio 安装程序版本选择器](img/B21152_01_1.jpg)'
- en: 'Figure 1.1: Visual Studio Installer version selector'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1：Visual Studio 安装程序版本选择器
- en: After selecting **Visual Studio Community 2022**, a new panel will appear. The
    **Workloads** tab lets you select an option to include a set of sensible defaults.
    Scroll down and select **Desktop development** **with C++**.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 选择**Visual Studio Community 2022**后，系统会显示一个新面板。**工作负载**标签页让你选择一个选项来包含一组合理的默认设置。向下滚动并选择**C++
    桌面开发**。
- en: '![Figure 1.2: Visual Studio Installer workload selector](img/B21152_01_2.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.2：Visual Studio 安装程序工作负载选择器](img/B21152_01_2.jpg)'
- en: 'Figure 1.2: Visual Studio Installer workload selector'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2：Visual Studio 安装程序工作负载选择器
- en: There are several optional components selected by default on the right. It won’t
    hurt to leave them selected. You can remove certain features such as **Image and
    3D model editors** and **Test Adapter for Boost/Google.Test** if you prefer.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 右侧有几个可选的组件默认被选中。保持这些选项选中也不会有问题。如果你愿意，可以取消选择某些功能，例如**图像和 3D 模型编辑器**和**Boost/Google.Test
    测试适配器**。
- en: After confirming your selection, click on **Install** in the bottom-right corner
    of the window.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 确认选择后，点击窗口右下角的**安装**按钮。
- en: 'Once the installation is complete, go to the Windows Start menu and follow
    these steps:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，打开 Windows 开始菜单并按照以下步骤操作：
- en: '![Figure 1.3: Windows 11 Taskbar Search Box](img/B21152_01_3.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.3：Windows 11 任务栏搜索框](img/B21152_01_3.jpg)'
- en: 'Figure 1.3: Windows 11 Taskbar Search Box'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.3：Windows 11 任务栏搜索框
- en: Search for **Terminal**.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 搜索**终端**。
- en: '![Figure 1.4: Windows 11 application search results](img/B21152_01_4.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.4: Windows 11 应用搜索结果](img/B21152_01_4.jpg)'
- en: 'Figure 1.4: Windows 11 application search results'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '图 1.4: Windows 11 应用搜索结果'
- en: Open the Terminal app. Then, from the top bar, click the dropdown and select
    **Developer Command Prompt for** **VS 2022**.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Terminal 应用。然后，从顶部栏点击下拉菜单，选择 **VS 2022 的开发者命令提示符**。
- en: '![Figure 1.5: Microsoft Terminal new tab selector](img/B21152_01_5.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.5: Microsoft Terminal 新标签页选择器](img/B21152_01_5.jpg)'
- en: 'Figure 1.5: Microsoft Terminal new tab selector'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '图 1.5: Microsoft Terminal 新标签页选择器'
- en: Customizing Command Prompt
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义命令提示符
- en: 'It is possible to modify the default `VsDevCmd.bat` when it’s launched with
    the host and target architectures specified. To do this, go to `profiles` section,
    find the `Command Prompt` entry under `list` and change the `commandLine` property
    to include the path to `VsDevCmd.bat` and the required architectures (e.g., `"commandline":
    "%SystemRoot%\\System32\\cmd.exe /k \"C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\Common7\\Tools\\VsDevCmd.bat\"
    -arch=x64 -host_arch=x64"`). It’s also possible to call `VsDevCmd.bat` when opening
    Git Bash from Windows Terminal (see the *Installing Git* section if you don’t
    already have it installed). To do this, find `"commandLine": "\"C:\\Program Files\\Microsoft
    Visual Studio\\2022\\Community\\Common7\\Tools\\VsDevCmd.bat\" -arch=x64 -host_arch=x64
    && \"%PROGRAMFILES%/Git/bin/bash.exe\" -``i -l"`'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '在指定主机和目标架构的情况下，修改默认的 `VsDevCmd.bat` 是可能的。为此，进入 `profiles` 部分，找到 `Command Prompt`
    项，在 `list` 下修改 `commandLine` 属性，包含 `VsDevCmd.bat` 的路径和所需的架构（例如，`"commandline":
    "%SystemRoot%\\System32\\cmd.exe /k \"C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\Common7\\Tools\\VsDevCmd.bat\"
    -arch=x64 -host_arch=x64"`）。也可以在 Windows Terminal 打开 Git Bash 时调用 `VsDevCmd.bat`（如果你还没有安装
    Git，请参阅 *安装 Git* 部分）。为此，找到 `"commandLine": "\"C:\\Program Files\\Microsoft Visual
    Studio\\2022\\Community\\Common7\\Tools\\VsDevCmd.bat\" -arch=x64 -host_arch=x64
    && \"%PROGRAMFILES%/Git/bin/bash.exe\" -i -l"`。'
- en: 'To verify that the Microsoft compiler is working as expected, run `cl.exe`.
    You should then see the following printed (the architecture will vary depending
    on the machine you’re using):'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了验证 Microsoft 编译器是否按预期工作，运行 `cl.exe`。你应该能看到以下输出（架构会根据你使用的机器而有所不同）：
- en: '![Figure 1.6: Running cl.exe from Developer Command Prompt](img/B21152_01_6.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.6: 从开发者命令提示符运行 cl.exe](img/B21152_01_6.jpg)'
- en: 'Figure 1.6: Running cl.exe from Developer Command Prompt'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '图 1.6: 从开发者命令提示符运行 cl.exe'
- en: CMake and Visual Studio
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: CMake 和 Visual Studio
- en: Visual Studio comes bundled with its own version of CMake, which you can rely
    on and skip the following two steps. It is located in `C:\Program Files\Microsoft
    Visual Studio\2022\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin`.
    Running `cmake --version` will show `cmake version <version>-msvc1`, which indicates
    that the version is distinct from normal CMake.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio 自带了自己的 CMake 版本，你可以依赖这个版本并跳过接下来的两步。它位于 `C:\Program Files\Microsoft
    Visual Studio\2022\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin`。运行
    `cmake --version` 会显示 `cmake version <version>-msvc1`，这表示该版本与普通的 CMake 版本不同。
- en: If you do not currently have CMake installed on your system (or have a fairly
    old version of CMake installed), head to [https://cmake.org/download/](https://cmake.org/download/)
    to get the latest release (at the time of writing, this is `3.28.1`).
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你的系统上尚未安装 CMake（或者安装的是相当旧的版本），请访问 [https://cmake.org/download/](https://cmake.org/download/)
    获取最新版本（截至本文写作时，版本是 `3.28.1`）。
- en: The simplest option is to grab the Windows x64 installer (cmake-3.28.1-windows-x86_64.msi)
    and follow the standard installation instructions.
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最简单的选项是下载 Windows x64 安装程序 (cmake-3.28.1-windows-x86_64.msi)，然后按照标准安装说明进行操作。
- en: '![Figure 1.7: CMake Windows installer](img/B21152_01_7.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.7: CMake Windows 安装程序](img/B21152_01_7.jpg)'
- en: 'Figure 1.7: CMake Windows installer'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '图 1.7: CMake Windows 安装程序'
- en: Ensure that you select **Add CMake to the system PATH for the** **current user**.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保你选择了 **将 CMake 添加到系统 PATH 环境变量中的当前用户**。
- en: '![Figure 1.8: CMake installer PATH options](img/B21152_01_8.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.8: CMake 安装程序 PATH 选项](img/B21152_01_8.jpg)'
- en: 'Figure 1.8: CMake installer PATH options'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '图 1.8: CMake 安装程序 PATH 选项'
- en: 'Follow the remaining installation instructions and wait for CMake to install.
    Once this is completed, close and open Terminal and return to `cmake` and `cmake
    --version` and you should see the following:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照剩余的安装说明进行操作，等待 CMake 安装完成。一旦完成，关闭并重新打开 Terminal，然后返回到 `cmake` 和 `cmake --version`，你应该能看到以下内容：
- en: '![Figure 1.9: Running cmake.exe from Developer Command Prompt](img/B21152_01_9.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.9: 从开发者命令提示符运行 cmake.exe](img/B21152_01_9.jpg)'
- en: 'Figure 1.9: Running cmake.exe from Developer Command Prompt'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '图 1.9: 从开发者命令提示符运行 cmake.exe'
- en: And with that, we’re ready to start building with CMake.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些，我们就可以开始使用 CMake 构建了。
- en: Installing CMake on macOS
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 macOS 上安装 CMake
- en: In this section, we’ll cover how to install everything you’ll need to start
    building the application on macOS.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍如何安装所有你需要的工具，以便在 macOS 上开始构建应用程序。
- en: 'To begin, you will need a C/C++ compiler. If you don’t already have a compiler
    installed, the safest bet is to go with Xcode, which can be downloaded from the
    App Store:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要一个 C/C++ 编译器。如果你还没有安装编译器，最安全的选择是安装 Xcode，它可以从 App Store 下载：
- en: Go to **Spotlight Search** by clicking the magnifying glass on the macOS menu
    bar.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击 macOS 菜单栏上的放大镜图标，进入**Spotlight 搜索**。
- en: '![Figure 1.10: Spotlight Search option on macOS menu bar](img/B21152_01_10.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.10：macOS 菜单栏上的 Spotlight 搜索选项](img/B21152_01_10.jpg)'
- en: 'Figure 1.10: Spotlight Search option on macOS menu bar'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.10：macOS 菜单栏上的 Spotlight 搜索选项
- en: Search for **App Store**.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 搜索 **App Store**。
- en: '![Figure 1.11: Searching for App Store from Spotlight Search](img/B21152_01_11.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.11：从 Spotlight 搜索中查找 App Store](img/B21152_01_11.jpg)'
- en: 'Figure 1.11: Searching for App Store from Spotlight Search'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.11：从 Spotlight 搜索中查找 App Store
- en: From **App Store**, search for **Xcode**.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **App Store** 中搜索 **Xcode**。
- en: '![Figure 1.12: Xcode search results from the App Store](img/B21152_01_12.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.12：来自 App Store 的 Xcode 搜索结果](img/B21152_01_12.jpg)'
- en: 'Figure 1.12: Xcode search results from the App Store'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.12：来自 App Store 的 Xcode 搜索结果
- en: Click the **Get** and then **Install** buttons.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **获取** 然后点击 **安装** 按钮。
- en: '![Figure 1.13: Xcode application install](img/B21152_01_13.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.13：Xcode 应用程序安装](img/B21152_01_13.jpg)'
- en: 'Figure 1.13: Xcode application install'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.13：Xcode 应用程序安装
- en: 'It is also possible to install **Command Line Tools** for **Xcode** from [https://developer.apple.com](https://developer.apple.com),
    specifically [https://developer.apple.com/download/all/](https://developer.apple.com/download/all/),
    which also includes the core tools we’ll need to work with CMake. To access the
    Apple Developer website, an Apple Developer account is needed (you can learn more
    here: [https://developer.apple.com/account](https://developer.apple.com/account)).'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以从 [https://developer.apple.com](https://developer.apple.com) 安装**Xcode**的**命令行工具**，特别是从
    [https://developer.apple.com/download/all/](https://developer.apple.com/download/all/)，该链接也包含了我们与
    CMake 一起使用所需的核心工具。要访问 Apple Developer 网站，需要一个 Apple Developer 账户（你可以在这里了解更多：[https://developer.apple.com/account](https://developer.apple.com/account)）。
- en: 'Once either `Terminal` again) and enter the following:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦打开 `Terminal`，再次输入以下命令：
- en: '[PRE0]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You should see a message resembling the following:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到类似以下的消息：
- en: '[PRE1]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This confirms that we have a working compiler and can now install CMake to work
    with it.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这确认了我们有一个有效的编译器，并且现在可以安装 CMake 来与其一起使用。
- en: If you do not currently have CMake installed on your system (or have a fairly
    old version of CMake installed), head to [https://cmake.org/download/](https://cmake.org/download/)
    to get the latest release (at the time of writing this is 3.28.1).
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你当前没有在系统上安装 CMake（或者安装的是一个相当旧的版本），请访问 [https://cmake.org/download/](https://cmake.org/download/)
    获取最新版本（截至本文撰写时为 3.28.1）。
- en: The simplest option is to grab the macOS 10.13 or later disk image (`.dmg`)
    (cmake-3.28.1-macos-universal.dmg) and follow the standard installation instructions.
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最简单的选项是获取适用于 macOS 10.13 或更高版本的磁盘镜像（`.dmg` 文件）（cmake-3.28.1-macos-universal.dmg），并按照标准安装说明进行操作。
- en: '![Figure 1.14: CMake macOS installation](img/B21152_01_14.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.14：CMake macOS 安装](img/B21152_01_14.jpg)'
- en: 'Figure 1.14: CMake macOS installation'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.14：CMake macOS 安装
- en: Drag **CMake** to your **Applications** folder.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 **CMake** 拖动到 **应用程序** 文件夹中。
- en: The CMake GUI will now be available on your system but CMake won’t yet be available
    from Terminal.
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，CMake GUI 已经可以在系统中使用，但尚未能从 Terminal 使用 CMake。
- en: To be able to run CMake commands from Terminal, open **CMake** from the **Applications**
    folder, ignore the UI that appears for now, and go to the CMake macOS menu bar
    and click **Tools**| **How to install For Command** **Line Use**.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了能够从 Terminal 运行 CMake 命令，打开 **CMake**（在 **应用程序** 文件夹中），暂时忽略弹出的 UI，接着进入 CMake
    macOS 菜单栏并点击 **工具**| **如何安装用于命令行使用**。
- en: '![Figure 1.15: CMake command-line install options from macOS menu bar](img/B21152_01_15.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.15：macOS 菜单栏上的 CMake 命令行安装选项](img/B21152_01_15.jpg)'
- en: 'Figure 1.15: CMake command-line install options from macOS menu bar'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.15：macOS 菜单栏上的 CMake 命令行安装选项
- en: After clicking this, a popup will appear with several options. The least invasive
    is likely the first option, though the second is also a fine choice.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击此项后，会弹出一个包含多个选项的窗口。最不干扰的选项可能是第一个，第二个选项也是不错的选择。
- en: '![Figure 1.16: CMake command-line install options panel](img/B21152_01_16.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.16：CMake命令行安装选项面板](img/B21152_01_16.jpg)'
- en: 'Figure 1.16: CMake command-line install options panel'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.16：CMake命令行安装选项面板
- en: 'To have the path option persist, we need to update our `.zshrc` file. Copy
    the following line:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使路径选项持久化，我们需要更新我们的`.zshrc`文件。复制以下行：
- en: '[PRE2]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: From Terminal, ensure you are in the home directory (`cd ~`) and then open your
    `.zshrc` file (feel free to do this in your favorite text editor or type `nano
    .zshrc` from Terminal).
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从终端确保你在主目录（`cd ~`）中，然后打开你的`.zshrc`文件（你可以使用你喜欢的文本编辑器，或者在终端中输入`nano .zshrc`）。
- en: '![Figure 1.17: Opening .zshrc with nano from Terminal](img/B21152_01_17.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.17：从终端用nano打开.zshrc](img/B21152_01_17.jpg)'
- en: 'Figure 1.17: Opening .zshrc with nano from Terminal'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.17：从终端用nano打开.zshrc
- en: Paste the earlier command and save the file.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 粘贴之前的命令并保存文件。
- en: '![Figure 1.18: Modifying .zshrc from nano inside Terminal](img/B21152_01_18.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.18：在终端内用nano修改.zshrc](img/B21152_01_18.jpg)'
- en: 'Figure 1.18: Modifying .zshrc from nano inside Terminal'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.18：在终端内用nano修改.zshrc
- en: To reload the Zsh config file and update the `PATH` variable, run `source .zshrc`.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了重新加载Zsh配置文件并更新`PATH`变量，运行`source .zshrc`。
- en: '![Figure 1.19: Refresh the Terminal environment by executing .zshrc again](img/B21152_01_19.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.19：通过再次执行.zshrc来刷新终端环境](img/B21152_01_19.jpg)'
- en: 'Figure 1.19: Refresh the Terminal environment by executing .zshrc again'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.19：通过再次执行.zshrc来刷新终端环境
- en: Finally, run `cmake` from Terminal to verify that it can be found.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，从终端运行`cmake`来验证是否能够找到它。
- en: '![Figure 1.20: Running cmake from Terminal](img/B21152_01_20.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.20：从终端运行cmake](img/B21152_01_20.jpg)'
- en: 'Figure 1.20: Running cmake from Terminal'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.20：从终端运行cmake
- en: You can also use `where cmake` and `cmake --version` to verify that you have
    the correct version installed.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用`where cmake`和`cmake --version`来验证是否安装了正确版本。
- en: With that, we’re ready to start building with CMake.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些，我们就可以开始使用CMake进行构建了。
- en: Installing CMake on Linux (Ubuntu)
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Linux（Ubuntu）上安装CMake
- en: In this section, we’ll cover how to get everything you’ll need to start building
    the application on Linux (Ubuntu).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一节中，我们将介绍如何获取你在Linux（Ubuntu）上构建应用所需的一切。
- en: 'To begin with, you will need a C/C++ compiler. If you don’t already have a
    compiler installed, an excellent choice is to go with GCC. This can be installed
    by using the standard Ubuntu package manager, `apt`:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要一个C/C++编译器。如果你还没有安装编译器，一个很好的选择是使用GCC。可以通过标准的Ubuntu包管理器`apt`来安装：
- en: Open **Terminal** by using **Show Applications** from the desktop.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用桌面上的**显示应用程序**打开**终端**。
- en: '![Figure 1.21: Ubuntu Show Applications menu option](img/B21152_01_21.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.21：Ubuntu显示应用菜单选项](img/B21152_01_21.jpg)'
- en: 'Figure 1.21: Ubuntu Show Applications menu option'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.21：Ubuntu显示应用菜单选项
- en: Run `sudo apt update` and then `sudo apt install build-essential` (it is possible
    that your version of Ubuntu already comes with this installed, but it’s good to
    check).
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`sudo apt update`，然后运行`sudo apt install build-essential`（你的Ubuntu版本可能已经安装了这个，但最好检查一下）。
- en: '![Figure 1.22: Installing build-essential from Terminal](img/B21152_01_22.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.22：从终端安装build-essential](img/B21152_01_22.jpg)'
- en: 'Figure 1.22: Installing build-essential from Terminal'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.22：从终端安装build-essential
- en: 'Run `gcc --version` to verify that the compiler can be found and is working
    as expected. You should see output resembling the following:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`gcc --version`来验证编译器是否能够找到并正常工作。你应该看到类似以下的输出：
- en: '[PRE3]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![Figure 1.23: Running gcc --version from Terminal](img/B21152_01_23.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.23：从终端运行gcc --version](img/B21152_01_23.jpg)'
- en: 'Figure 1.23: Running gcc --version from Terminal'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.23：从终端运行gcc --version
- en: Next, we need to install CMake. This can be done via a package manager (e.g.,
    `apt`), but we’ll do so directly here to specify the precise version. Go to [https://cmake.org/download/](https://cmake.org/download/)
    and scroll down to find the binary distributions section. Grab Linux x86_64 (Intel)
    (`cmake-3.28.1-linux-x86_64.tar.gz`) or Linux aarch64 (ARM) (`cmake-3.28.1-linux-aarch64.tar.gz`)
    depending on your architecture.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要安装CMake。这可以通过包管理器（例如`apt`）完成，但我们在这里直接进行安装，以指定精确的版本。访问[https://cmake.org/download/](https://cmake.org/download/)，并向下滚动找到二进制发行版部分。根据你的架构，选择Linux
    x86_64（Intel）（`cmake-3.28.1-linux-x86_64.tar.gz`）或Linux aarch64（ARM）（`cmake-3.28.1-linux-aarch64.tar.gz`）。
- en: 'Run this command from the folder you downloaded CMake to extract and install
    CMake to your `/``opt` folder:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从你下载CMake的文件夹运行此命令，提取并安装CMake到你的`/opt`文件夹：
- en: '[PRE4]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: (It’s perfectly reasonable to extract the files to a local folder and update
    your `PATH` variable to point to the bin folder. Installing to `/opt` is one common
    approach).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: （将文件提取到本地文件夹并更新 `PATH` 变量以指向 bin 文件夹是完全合理的做法。安装到 `/opt` 是一种常见的方法）。
- en: 'You can alternatively just double-click the `tar.gz` file and use the **Archive
    Manager** **Extract** option:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你也可以直接双击 `tar.gz` 文件并使用 **归档管理器** 的 **提取** 选项：
- en: Click the **Extract** option and then go to **Other Locations** | **Computer**
    and select the **opt** folder.
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **提取** 选项，然后转到 **其他位置** | **计算机**，选择 **opt** 文件夹。
- en: Then click **Extract** again in the top-right corner.
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后再次点击右上角的 **提取**。
- en: '![Figure 1.24: Ubuntu Archive Manager Extract dialog](img/B21152_01_24.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.24：Ubuntu 归档管理器提取对话框](img/B21152_01_24.jpg)'
- en: 'Figure 1.24: Ubuntu Archive Manager Extract dialog'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.24：Ubuntu 归档管理器提取对话框
- en: Go to your home directory (`cd ~`) and enter `nano .bashrc`.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到你的主目录（`cd ~`），然后输入 `nano .bashrc`。
- en: '![Figure 1.25: Opening .bashrc with nano from Terminal](img/B21152_01_25.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.25：从终端使用 nano 打开 .bashrc](img/B21152_01_25.jpg)'
- en: 'Figure 1.25: Opening .bashrc with nano from Terminal'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.25：从终端使用 nano 打开 .bashrc
- en: 'Add the `bin` subfolder in the directory you extracted in your `/opt` folder
    to your `PATH` variable with the following line:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你在 `/opt` 文件夹中提取的目录里的 `bin` 子文件夹添加到 `PATH` 变量中，使用以下命令：
- en: '[PRE5]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![Figure 1.26: Modifying .bashrc from nano inside Terminal](img/B21152_01_26.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.26：在终端内使用 nano 修改 .bashrc](img/B21152_01_26.jpg)'
- en: 'Figure 1.26: Modifying .bashrc from nano inside Terminal'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.26：在终端内使用 nano 修改 .bashrc
- en: With that, save the file and close nano (`Ctrl+O, Ctrl+X`). Then run `source
    .bashrc` to reload the `.bashrc` file and update the `PATH` variable in the current
    Terminal session.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件并关闭 nano（`Ctrl+O, Ctrl+X`）。然后运行 `source .bashrc` 来重新加载 `.bashrc` 文件并更新当前终端会话中的
    `PATH` 变量。
- en: 'Finally, type `cmake` and hit return to confirm that things are working as
    expected. You should see the following printed:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，输入 `cmake` 并按回车键，确认一切按预期工作。你应该会看到以下内容输出：
- en: '![Figure 1.27: Running cmake from Terminal](img/B21152_01_27.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.27：从终端运行 cmake](img/B21152_01_27.jpg)'
- en: 'Figure 1.27: Running cmake from Terminal'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.27：从终端运行 cmake
- en: As a last step, run `sudo apt-get install libgles2-mesa-dev` to ensure you have
    the dependencies needed to run some of the later examples in the book.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一步，运行 `sudo apt-get install libgles2-mesa-dev` 来确保你已经安装了运行书中后续示例所需的依赖项。
- en: With that, we’re ready to start building with CMake.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 至此，我们已经准备好开始使用 CMake 构建项目了。
- en: Installing Git
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Git
- en: To follow the examples provided in each chapter and retrieve the accompanying
    source code for this book (available from the book’s website [https://github.com/PacktPublishing/Minimal-CMake](https://github.com/PacktPublishing/Minimal-CMake)),
    it is recommended to have Git installed on your system.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 为了跟随本书每章提供的示例并获取书中的源代码（可从书籍网站 [https://github.com/PacktPublishing/Minimal-CMake](https://github.com/PacktPublishing/Minimal-CMake)
    获取），建议在你的系统上安装 Git。
- en: The easiest way to do this is to go to [https://git-scm.com/downloads](https://git-scm.com/downloads)
    and download Git for your chosen platform if you do not already have it installed.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的做法是访问 [https://git-scm.com/downloads](https://git-scm.com/downloads)，并根据你选择的平台下载
    Git，如果你还没有安装的话。
- en: On macOS, Git is installed as part of the Xcode installation we walked through
    in *Installing CMake on macOS*. On Windows, download the 64-bit installer and
    run the installation. On Linux (Ubuntu), run `sudo apt-get install git` from the
    terminal.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在 macOS 上，Git 是作为我们在 *macOS 上安装 CMake* 一文中介绍的 Xcode 安装的一部分。 在 Windows 上，下载 64
    位安装程序并运行安装。在 Linux（Ubuntu）上，运行 `sudo apt-get install git` 来安装 Git。
- en: Type `git` from the command line to verify that the tool is available.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令行中输入 `git` 以验证该工具是否可用。
- en: Visual Studio Code setup (optional)
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Visual Studio Code 设置（可选）
- en: To ensure a consistent experience throughout the book, Visual Studio Code will
    be used along with the native terminal to walk through code examples, be that
    on Windows, macOS, or Linux. The following section outlines how to get set up
    with Visual Studio Code and configure your development environment. If you would
    prefer to use a different editor, that’s fine. All that is needed to follow along
    is a C/C++ compiler and CMake. Visual Studio Code is simply used as a cross-platform
    editor (it also comes with some excellent CMake support that is covered in [*Chapter
    11*](B21152_11.xhtml#_idTextAnchor228)*, Supporting Tools and* *Next Steps*).
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保全书体验的一致性，将使用 Visual Studio Code 和本地终端来演示代码示例，无论是在 Windows、macOS 还是 Linux
    上。以下部分概述了如何设置 Visual Studio Code 并配置开发环境。如果你更倾向于使用其他编辑器，也是可以的。跟随本书所需的只需一个 C/C++
    编译器和 CMake。Visual Studio Code 只是作为一个跨平台编辑器使用（它还提供了很棒的 CMake 支持，详细内容可见 [*第 11 章*](B21152_11.xhtml#_idTextAnchor228)*，支持工具与下一步*）。
- en: To install Visual Studio Code, go to [https://code.visualstudio.com/Download](https://code.visualstudio.com/Download).
    There are links for Windows, Linux, and macOS there. Follow the installation instructions
    for your platform of choice. On Windows, choose **User Installer** and follow
    the setup instructions.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 Visual Studio Code，请访问 [https://code.visualstudio.com/Download](https://code.visualstudio.com/Download)。那里有适用于
    Windows、Linux 和 macOS 的下载链接。按照你选择的平台的安装说明进行操作。在 Windows 上，选择 **用户安装程序**，并按照设置说明进行操作。
- en: On Linux, either download the `.deb` package and use the `code-stable-...tar.gz`
    file and extract it to `/opt` similarly to how we extracted CMake (e.g., `sudo
    tar -C /opt -xzf code-stable-arm64-1702460949.tar.gz`). After extracting it, add
    `/opt/VSCode-linux-<arch>/bin` to your path by updating your `.bashrc` file again.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 上，可以下载 `.deb` 包并使用 `code-stable-...tar.gz` 文件，并将其解压到 `/opt`，就像我们解压 CMake
    一样（例如，`sudo tar -C /opt -xzf code-stable-arm64-1702460949.tar.gz`）。解压后，通过再次更新
    `.bashrc` 文件，将 `/opt/VSCode-linux-<arch>/bin` 添加到你的路径中。
- en: On Mac, download the `.zip` file, extract it, and then drag and drop the **Visual
    Studio Code** application into your **Applications** folder (this can be done
    from **Finder**).
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Mac 上，下载 `.zip` 文件，解压后，将 **Visual Studio Code** 应用程序拖放到 **应用程序** 文件夹中（可以通过
    **Finder** 完成）。
- en: One point to mention is that it’s helpful to ensure that Visual Studio Code
    is added to your `PATH` so it can be opened easily from the command line (using
    `code .` from your project or workspace folder). This can be done as part of the
    installation wizard on Windows or by updating `.bashrc` on Linux. On macOS, there
    is a way to do this from within Visual Studio Code. Open Visual Studio Code and
    press either *F1*, *Shift* + *Cmd* +*P* (macOS) or press *Shift* + *Ctrl* + *P*
    for Windows or Linux. Alternatively, from the menu bar, you can click `shell`.
    The action `code`.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 需要提到的一点是，确保将 Visual Studio Code 添加到你的 `PATH` 中，以便可以从命令行轻松打开（使用 `code .` 从你的项目或工作区文件夹）。这可以在
    Windows 的安装向导中完成，或通过在 Linux 上更新 `.bashrc` 来完成。在 macOS 上，可以通过 Visual Studio Code
    内部完成此操作。打开 Visual Studio Code，按下 *F1*，*Shift* + *Cmd* + *P*（macOS），或按下 *Shift*
    + *Ctrl* + *P*（Windows 或 Linux）。另外，你也可以从菜单栏点击 `shell`。然后执行 `code` 动作。
- en: Once Visual Studio Code is installed and up and running, navigate to the `C/C++`
    `extension pack`.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装并启动 Visual Studio Code，导航到 `C/C++` `扩展包`。
- en: '![Figure 1.28: Extensions view in Visual Studio Code](img/B21152_01_28.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.28：Visual Studio Code 的扩展视图](img/B21152_01_28.jpg)'
- en: 'Figure 1.28: Extensions view in Visual Studio Code'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.28：Visual Studio Code 的扩展视图
- en: The **C/C++ Extension Pack** extension comes with the C/C++ extension, which
    supplies IntelliSense and debugging features. The extension pack also includes
    CMake language support and CMake Tools, a CMake integration for Visual Studio
    Code.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '**C/C++ 扩展包**扩展包括 C/C++ 扩展，提供 IntelliSense 和调试功能。该扩展包还包括 CMake 语言支持和 CMake
    Tools，这是 Visual Studio Code 的 CMake 集成工具。'
- en: Now that we have Visual Studio Code installed, we can guarantee a consistent
    experience when developing across all platforms. Using Visual Studio Code is completely
    optional, but it is highly recommended. In [*Chapter 11*](B21152_11.xhtml#_idTextAnchor228)*,
    Supporting Tools and Next Steps*, we’ll show you how CMake and Visual Studio Code
    complement one another.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了 Visual Studio Code，确保在所有平台上开发时都能获得一致的体验。使用 Visual Studio Code 完全是可选的，但强烈推荐使用。在
    [*第 11 章*](B21152_11.xhtml#_idTextAnchor228)*，支持工具与下一步*，我们将展示 CMake 和 Visual Studio
    Code 如何相辅相成。
- en: Summary
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we walked through everything you need to begin development
    with CMake. We installed a C/C++ compiler on Windows, macOS, and Linux and installed
    CMake on each platform. We saw how to install Git and walked through how to install
    Visual Studio Code and enable several useful extensions. Having our environment
    configured correctly is important to ensure that the later examples we’ll work
    through behave as expected. We now have everything we need to start using CMake
    and can start developing our project to understand how CMake can accelerate how
    we build software.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了开始使用 CMake 开发所需的一切。我们在 Windows、macOS 和 Linux 上安装了 C/C++ 编译器，并在每个平台上安装了
    CMake。我们了解了如何安装 Git，并演示了如何安装 Visual Studio Code 以及启用一些有用的扩展。正确配置我们的开发环境非常重要，以确保后续的示例能够按预期运行。现在，我们已经具备了开始使用
    CMake 的所有条件，并可以开始开发项目，了解 CMake 如何加速我们的软件构建过程。
- en: In the next chapter, we will introduce CMake and look at the commands you will
    commonly run from the terminal. We’ll also look at some of the core commands that
    make up a CMake script. We’ll get a basic application up and running and learn
    about generators, build types, and more.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍 CMake，并查看你将在终端中常用的命令。我们还将查看构成 CMake 脚本的一些核心命令。我们将搭建一个基本的应用程序，并学习生成器、构建类型等内容。
