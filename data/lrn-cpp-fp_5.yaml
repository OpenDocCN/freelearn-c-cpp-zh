- en: Procrastinating the Execution Process Using Lazy Evaluation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用懒惰评估拖延执行过程
- en: In the previous chapter, we discussed recursion for repeating the function invocation
    in the functional approach. Now, we will discuss lazy evaluation that can make
    our code become more efficient since it will only run when we need it. We will
    also apply recursion, the topic we talked about in the previous chapter, to produce
    the lazy code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一章中，我们讨论了在函数式方法中重复函数调用的递归。现在，我们将讨论懒惰评估，它可以使我们的代码变得更加高效，因为它只在我们需要时才运行。我们还将应用递归，这是我们在前一章中讨论过的话题，以生成懒惰代码。
- en: 'In this chapter, we discuss **lazy evaluation** to make code run faster. This
    will make the code become efficient since it will make sure that unnecessary code
    won''t be executed. The following are the topics we will discuss to dive into
    lazy evaluation:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论**懒惰评估**，以使代码运行更快。这将使代码变得高效，因为它将确保不必要的代码不会被执行。以下是我们将讨论的主题，以深入了解懒惰评估：
- en: Distinguishing the difference between eager and lazy evaluation
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 区分急切和懒惰评估之间的差异
- en: Optimizing code using the caching technique
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用缓存技术优化代码
- en: Refactoring eager evaluation into lazy evaluation
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将急切评估重构为懒惰评估
- en: Designing the useful classes that can be reused in others' functional code
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计有用的类，可以在其他的函数式代码中重复使用
- en: Evaluating the expression
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估表达式
- en: Every programming language has its own strategy to determine when to evaluate
    the arguments of a function call and what type of value that has to be passed
    to the parameter. There are two kinds of strategy evaluation that are mostly used
    in a programming language--**strict** (eager) evaluation and **non-strict** (lazy)
    evaluation.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 每种编程语言都有其确定何时评估函数调用的参数以及必须传递给参数的值类型的策略。在编程语言中，有两种主要使用的策略评估--**严格**（急切）评估和**非严格**（懒惰）评估。
- en: Running the expression immediately with strict evaluation
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 立即运行表达式进行严格评估
- en: 'Strict evaluation is used in the most imperative programming language. It will
    immediately execute the code we have. Let''s suppose we have the following equation:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 严格评估在大多数命令式编程语言中使用。它将立即执行我们的代码。假设我们有以下方程：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In a strict evaluation, the innermost bracket will be calculated first, then
    work outwards for the preceding equation. This means we will calculate `y * z`,
    then add the result to `x`. To make it clearer, let''s see the following `strict.cpp`
    code:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在严格评估中，最内层的括号将首先计算，然后向外计算前面的方程。这意味着我们将计算`y * z`，然后将结果加到`x`上。为了更清楚，让我们看看以下的`strict.cpp`代码：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'As we discussed earlier, the execution of the preceding code will be `y * z`
    first, then we will add the result to `x`, as we can see in the following output:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前讨论的，前面代码的执行将首先是`y * z`，然后我们将结果加到`x`上，正如我们在以下输出中所看到的：
- en: '![](img/5df7ea63-3801-47d1-9fbd-e50d30c1f8ec.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5df7ea63-3801-47d1-9fbd-e50d30c1f8ec.png)'
- en: The preceding execution order is what we usually expect. However, in non-strict
    evaluation, we will reorder this execution process.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的执行顺序是我们通常期望的。然而，在非严格评估中，我们将重新安排这个执行过程。
- en: Delaying the expression with non-strict evaluation
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用非严格评估延迟表达式
- en: 'In a non-strict evaluation, the `+` operator is reduced first, and then we
    reduce the inner formula, which is `(y * z)`. We will see that the evaluation
    will be started from the outside to the inside. We will refactor our previous
    `strict.cpp` code to make it become a non-strict evaluation. The code should be
    like the following `non_strict.cpp` code:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在非严格评估中，`+`运算符首先被简化，然后我们简化内部公式，即`(y * z)`。我们将看到评估将从外到内开始。我们将重构我们之前的`strict.cpp`代码，使其成为非严格评估。代码应该像以下的`non_strict.cpp`代码：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'As we can see, we modify the `OuterFormula()` function in the `strict.cpp`
    code into an `OuterFormulaNonStrict()` function in the `non_strict.cpp` code.
    In the `OuterFormulaNonStrict()` function, we pass a function as the argument
    in addition to the three variables--`x`, `y`, and `z`. As a result, the order
    of execution of the preceding expression is changed. Here is what we should see
    on the console screen when we run the `non_strict.cpp` code:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，我们将`strict.cpp`代码中的`OuterFormula()`函数修改为`non_strict.cpp`代码中的`OuterFormulaNonStrict()`函数。在`OuterFormulaNonStrict()`函数中，我们除了三个变量`x`、`y`和`z`之外，还将一个函数作为参数传递。因此，前面表达式的执行顺序发生了变化。当我们运行`non_strict.cpp`代码时，我们应该在控制台屏幕上看到以下内容：
- en: '![](img/ce639e69-1325-47bc-b524-6894d77af3b5.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ce639e69-1325-47bc-b524-6894d77af3b5.png)'
- en: From the preceding output, we have proved that our code is performing non-strict
    evaluation since it now calculates the addition operator (`+`) first instead of
    the multiplication (`*`). However, the result is still correct, although the order
    has been changed.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的输出中，我们已经证明我们的代码正在执行非严格评估，因为它现在首先计算加法运算符(`+`)而不是乘法(`*`)。然而，结果仍然是正确的，尽管顺序已经改变。
- en: The basic concept of lazy evaluation
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 懒惰评估的基本概念
- en: Before we create a lazy code, let's discuss the basic concepts of lazy evaluation.
    We will use the delaying process to make our code lazy, the caching technique
    to increase the performance of the code by avoiding needless calculations, and
    the optimizing technique to speed up the code by storing the results of expensive
    function calls and returning the cached result when the same inputs occur again.
    After we have looked at these techniques, we will try to develop the real lazy
    code.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建懒惰代码之前，让我们讨论懒惰评估的基本概念。我们将使用延迟过程使我们的代码变得懒惰，使用缓存技术来增加代码的性能，避免不必要的计算，以及优化技术，通过存储昂贵的函数调用的结果并在再次出现相同的输入时返回缓存的结果来加快代码的速度。在我们看完这些技术之后，我们将尝试开发真正的懒惰代码。
- en: Delaying the process
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 延迟过程
- en: 'The basic concept of laziness is delaying a process. In this section, we will
    discuss how to delay the execution of a particular process. We will create a new
    class named `Delay`. We will pass a function into it when we construct the class.
    The function won''t be run unless we invoke the `Fetch()` method. The implementation
    of the function is as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 懒惰的基本概念是延迟一个过程。在本节中，我们将讨论如何延迟特定过程的执行。我们将创建一个名为`Delay`的新类。当我们构造类时，我们将把一个函数传递给它。除非我们调用`Fetch()`方法，否则函数不会运行。函数的实现如下：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, let''s consume the `Delay` class to procrastinate the execution. We will
    create a file named `delaying.cpp` that will run two functions--`multiply` and
    `division`. However, these two functions will only be run after we call the `Fetch()`
    method. The content of the file is as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用`Delay`类来推迟执行。我们将创建一个名为`delaying.cpp`的文件，其中将运行两个函数--`multiply`和`division`。然而，只有在调用`Fetch()`方法之后，这两个函数才会被运行。文件的内容如下：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'As we discussed in [Chapter 1](58c8c3cc-432a-4664-be4d-a78917b16f15.xhtml),
    *Diving into Modern C++*, we can use a Lambda expression to build the `multiply`
    and `division` functions. We then pass them in each `Delay` constructor. In this
    stage, the function is not run yet. It will be run after the `Fetch()` method
    is invoked--`multiply.Fetch()` and `division.Fetch()`. The output we will see
    on the screen should look like the following screenshot:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[第1章](58c8c3cc-432a-4664-be4d-a78917b16f15.xhtml)中讨论的，*深入现代C++*，我们可以使用Lambda表达式来构建`multiply`和`division`函数，然后将它们传递给每个`Delay`构造函数。在这个阶段，函数还没有运行。它将在调用`Fetch()`方法后运行--`multiply.Fetch()`和`division.Fetch()`。我们将在屏幕上看到以下的输出截图：
- en: '![](img/5ade918f-d163-4d2b-9d84-d41ddc962d86.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5ade918f-d163-4d2b-9d84-d41ddc962d86.png)'
- en: As we can see in the preceding output screenshot, the `multiply` and `division`
    instance is constructed when the `Fetch()` method is invoked (see the two white
    arrows), not when the constructor of the `Delay` class is invoked. Now, we have
    successfully delayed the execution, and we can say that the process is only executed
    when it is needed.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的输出截图中所看到的，当调用`Fetch()`方法时，`multiply`和`division`实例被构造（见两个白色箭头），而不是在调用`Delay`类的构造函数时。现在，我们已经成功地延迟了执行，并且我们可以说只有在需要时才执行这个过程。
- en: Caching the value using the memoization technique
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用记忆化技术缓存值
- en: 'We now have successfully delayed the execution of the function by consuming
    the `Delay` class. However, since the function of the `Delay` class instance will
    be run each time the `Fetch()` method is invoked, an unexpected result might occur
    if the function is not pure or has side effects. Let''s refactor our previous
    `delaying.cpp` code by modifying the `multiply` function. This function now becomes
    a non-pure function since it depends on an outside variable. The code should look
    like this:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经成功地延迟了通过消耗`Delay`类来执行函数。然而，由于每次调用`Fetch()`方法时`Delay`类实例的函数将被运行，如果函数不是纯函数或具有副作用，可能会出现意外结果。让我们通过修改`multiply`函数来重构我们之前的`delaying.cpp`代码。这个函数现在变成了一个非纯函数，因为它依赖于外部变量。代码应该是这样的：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'As we can see in the preceding code, we now have a new Lambda expression named
    `multiply_impure`, which is the refactored version of the `multiply` function
    we created in the `delaying.cpp` code. The `multiply_impure` function depends
    on the `multiplexer` variable, whose value will be increased each time before
    we invoke the `Fetch()` method. The following is the screenshot output we should
    see on the screen:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的代码中所看到的，我们现在有一个名为`multiply_impure`的新Lambda表达式，这是我们在`delaying.cpp`代码中创建的`multiply`函数的重构版本。`multiply_impure`函数依赖于`multiplexer`变量，其值将在我们调用`Fetch()`方法之前每次增加。我们应该在屏幕上看到以下的截图输出：
- en: '![](img/f1e15207-1b93-4d22-b534-54ce6b0bba97.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f1e15207-1b93-4d22-b534-54ce6b0bba97.png)'
- en: As we can see, the `Fetch()` method gives a different result each time it's
    invoked. We now have to refactor the `Delay` class to ensure that it will return
    the exact same result each time the `Fetch()` method runs the function with the
    same passed arguments. To achieve it, we will use the memoization technique that
    stores the results of the function calls and returns the cached result when the
    same inputs occur again.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，`Fetch()`方法每次被调用时都会给出不同的结果。我们现在必须重构`Delay`类，以确保每次`Fetch()`方法运行函数时都返回相同的结果。为了实现这一点，我们将使用记忆化技术，它存储函数调用的结果，并在再次出现相同的输入时返回缓存的结果。
- en: 'We will rename the `Delay` class to `Memoization` class. This will not only
    delay the function call, it will also record the function with specific passed
    arguments. So the next time the function with those arguments occurs, the function
    itself will not be run but it will just return the cached result instead. To ease
    our discussion, let''s take a look at the following `Memoization` class implementation:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将`Delay`类重命名为`Memoization`类。这不仅会延迟函数调用，还会记录具有特定传递参数的函数。因此，下一次具有这些参数的函数发生时，函数本身将不会运行，而只会返回缓存的结果。为了方便我们的讨论，让我们来看一下以下的`Memoization`类实现：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'As we can see in the preceding code snippet, we now have `FetchRecording()`
    and `DoRecording()` to get and set the function we have stored. Moreover, when
    the class is constructed, it will record the passed function and save it to `m_subRoutine`.
    The class will inspect `m_subRoutine` when the `Fetch()` method is called and
    find whether it has the value from the function with current passed arguments.
    If yes, it simply returns the value from `m_subRoutine` instead of running the
    function. Now, let''s see the following `delaying_non_pure_memoization.cpp` code,
    that consumes the `Memoization` class:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的代码片段中所看到的，我们现在有`FetchRecording()`和`DoRecording()`来获取和设置我们存储的函数。此外，当类被构造时，它将记录传递的函数并将其保存到`m_subRoutine`中。当调用`Fetch()`方法时，类将检查`m_subRoutine`，并查找它是否具有当前传递参数的函数值。如果是，它将简单地返回`m_subRoutine`中的值，而不是运行函数。现在，让我们看一下以下的`delaying_non_pure_memoization.cpp`代码，它使用`Memoization`类：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'From the preceding code snippet, we see we don''t have much modification in
    the `main()` function. What we modify is only the class type we use for the `multiply_impure`
    variable, from `Delay` to `Memoization`. However, the result has now changed since
    we will get the exact same return value from the five times invocation of the
    `multiply_impure()` function. Let''s take a look at the following screenshot to
    prove it:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的代码片段中，我们看到在`main()`函数中没有太多修改。我们修改的只是用于`multiply_impure`变量的类类型，从`Delay`改为`Memoization`。然而，结果现在已经改变，因为我们将从`multiply_impure()`函数的五次调用中获得完全相同的返回值。让我们看看以下截图来证明：
- en: '![](img/eb597eec-cfe2-4c06-b0eb-a546e3a26fb5.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eb597eec-cfe2-4c06-b0eb-a546e3a26fb5.png)'
- en: From the preceding screenshot, we can see that even the value of the `Multiplexer`
    is increased and the return of the calculation is always the same. This is because
    the return value of the first function invocation is recorded, so there's no need
    to run the function again for the remaining invocation.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的截图中，我们可以看到即使`Multiplexer`的值增加了，计算的返回值始终相同。这是因为记录了第一次函数调用的返回值，所以不需要为剩余的调用再次运行函数。
- en: As we discussed in [Chapter 2](a1baf007-8f40-4616-8718-9887f95120b0.xhtml),
    *Manipulating Functions in Functional Programming*, having an impure function
    seems wrong in functional programming. Hiding an impure function behind memoization
    might also cause a bug if the code really needs a different result (non-cached
    result). Use the preceding technique for caching the impure function wisely.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[第2章](a1baf007-8f40-4616-8718-9887f95120b0.xhtml)中讨论的，*在函数式编程中操作函数*，在函数式编程中有一个不纯的函数似乎是错误的。将不纯的函数隐藏在记忆化后，如果代码确实需要不同的结果（非缓存结果），也可能会导致错误。明智地使用前述技术来缓存不纯的函数。
- en: Optimizing the code using the memoization technique
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用记忆化技术优化代码
- en: Memoization is quite useful for applying in a non-pure function or a function
    that has been the side effect. However, it can also be used to optimize the code.
    By using memoization, the code we have developed will be run faster. Let's suppose
    we need to run the exact same functions with the exact same passed arguments multiple
    times. It will be faster if the code fetches the value from the place we record
    the value instead of running the function. It would also be better for an expensive
    function call because by using memoization, we don't need to execute the unnecessary
    expensive function call over and over again.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 记忆化对于应用于非纯函数或具有副作用的函数非常有用。然而，它也可以用于优化代码。通过使用记忆化，我们开发的代码将运行得更快。假设我们需要多次使用完全相同的函数和完全相同的传递参数运行。如果代码从我们记录值的地方获取值而不是运行函数，它将更快。对于昂贵的函数调用，使用记忆化也更好，因为我们不需要一遍又一遍地执行不必要的昂贵函数调用。
- en: 'Let''s create a code to discuss the further optimization. We will use the `Delay`
    class to demonstrate it''s not an optimized code compared to the `Memoization`
    class. We will have the `not_optimize_code.cpp` code that will consume the `Delay`
    class. In this unoptimized code, we will call the `fibonacci()` function that
    we created in [Chapter 4](7c3fb034-5951-4003-905f-48dd745a1c6f.xhtml), *Repeating
    Method Invocation Using Recursive Algorithm*. We will pass `40` as the argument
    to the `fibonacci()` function and call the `Fetch()` method from the `fib40` class
    instance five times. We will also calculate the elapsed time in each invocation
    of the method, using the `high_resolution_clock` class resided in the `chrono`
    header, to record the **start** and **end** time to retrieve the elapsed time
    by subtracting the end value with the start value. In addition to the elapsed
    time of each `Fetch()` method invocation, we also calculate the elapsed time of
    the entire code. The implementation of the `not_optimize_code.cpp` code is as
    follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个代码来讨论进一步的优化。我们将使用`Delay`类来演示与`Memoization`类相比，它不是一个优化的代码。我们将有一个`not_optimize_code.cpp`代码，它将使用`Delay`类。在这个未优化的代码中，我们将调用我们在[第4章](7c3fb034-5951-4003-905f-48dd745a1c6f.xhtml)中创建的`fibonacci()`函数，*使用递归算法重复方法调用*。我们将把`40`作为参数传递给`fibonacci()`函数，并从`fib40`类实例中调用`Fetch()`方法五次。我们还将计算每次调用方法的经过时间，使用`chrono`头文件中的`high_resolution_clock`类记录**开始**和**结束**时间，通过用结束值减去开始值来获取经过时间。除了每个`Fetch()`方法调用的经过时间，我们还计算整个代码的经过时间。`not_optimize_code.cpp`代码的实现如下：
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, let''s run the code to obtain the elapsed time of the preceding code process.
    The following screenshot is what we will see on the screen:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们运行代码来获取前面代码处理的经过时间。以下截图是我们将在屏幕上看到的内容：
- en: '![](img/d2ef7cc8-601b-47af-ae9f-19797be02341.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d2ef7cc8-601b-47af-ae9f-19797be02341.png)'
- en: 'From the preceding screenshot, we can see that we need about `2357.79` milliseconds
    to process the code. And each time it invokes the `fib40.Fetch()` method, it needs
    an average of about `470` milliseconds, although we pass the exact same argument
    to the `fibonacci()` function, which is `40`. Now, let''s see what will happen
    if we use the memoization technique on the preceding code. We won''t modify the
    code much, just refactor the instantiation of `fib40`. Instead of instancing from
    the `Delay` class, now it instances from the `Memoization` class. The code should
    be as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的截图中，我们可以看到处理代码大约需要`2357.79`毫秒。每次调用`fib40.Fetch()`方法时，平均需要约`470`毫秒，尽管我们将完全相同的参数传递给`fibonacci()`函数，即`40`。现在，让我们看看如果我们在前面的代码中使用记忆化技术会发生什么。我们不会修改代码太多，只是重构`fib40`的实例化。现在它不再是从`Delay`类实例化，而是从`Memoization`类实例化。代码应该如下所示：
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Here is what we''ll get on the console screen when we run the `optimizing_memoization.cpp`
    code:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行`optimizing_memoization.cpp`代码时，我们将在控制台屏幕上看到以下内容：
- en: '![](img/0c030b41-e024-44bc-b1fc-986e0504eae2.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0c030b41-e024-44bc-b1fc-986e0504eae2.png)'
- en: Surprisingly, we just need `494.681` milliseconds to execute the `optimizing_memoization.cpp`
    code. Compared to the `not_optimize_code.cpp` code, the speed of the code is about
    `4.7` times faster. This happens because the code successfully cached the result
    of the `fibonacci()` function when it passed the `40` to its parameter. Each time
    we call the `fib40.Fetch()` method again, it will invoke the `fibonacci()` function
    again, with the exact same input. The code will just return the cached result
    so it can avoid running the expensive function calls that are unnecessary to run.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 令人惊讶的是，我们只需要`494.681`毫秒来执行`optimizing_memoization.cpp`代码。与`not_optimize_code.cpp`代码相比，代码的速度大约快了`4.7`倍。这是因为代码成功地缓存了将`40`传递给其参数的`fibonacci()`函数的结果。每次我们再次调用`fib40.Fetch()`方法时，它将再次调用`fibonacci()`函数，输入完全相同。代码将只返回缓存的结果，因此可以避免运行不必要的昂贵函数调用。
- en: Lazy evaluation in action
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 惰性评估的实际应用
- en: 'Having discussed the basic concept of lazy evaluation, let''s dig into lazy
    evaluation by designing the code in the lazy approach. In this section, we will
    develop an eager evaluation code first, then refactor that code into the lazy
    evaluation one. The code we develop will generate a sequence of prime numbers.
    First, we will use the `for` loop to iterate the integer number to obtain the
    prime number in the eager evaluation. The following `prime.cpp` code is what we
    are talking about:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在讨论了惰性评估的基本概念之后，让我们通过设计懒惰的方法来深入了解惰性评估。在本节中，我们将首先开发急切评估代码，然后将该代码重构为懒惰评估代码。我们开发的代码将生成一系列质数。首先，我们将使用`for`循环迭代整数以获得急切评估中的质数。以下是我们所说的`prime.cpp`代码：
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'As we can see in the preceding code, we have a simple `PrimeCheck()` function
    to analyze whether the integer number is a prime number or not. Afterward, the
    code iterates the infinity integer numbers using the `for` loop, then checks whether
    it''s a prime number. The loop will be ended if we''ve got one hundred prime numbers.
    The following screenshot is the output on the console we should see:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们有一个简单的`PrimeCheck()`函数来分析整数是否是质数。之后，代码使用`for`循环迭代无限整数，然后检查它是否是质数。如果我们得到了一百个质数，循环将结束。下面的截图是我们应该在控制台上看到的输出：
- en: '![](img/3263a17d-40a8-4065-82ad-48cfa4601359.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3263a17d-40a8-4065-82ad-48cfa4601359.png)'
- en: We now have a code generating prime numbers using eager evaluation. As we can
    see in the preceding screenshot, we have a hundred prime numbers that we generated
    using the `for` loop. Next, we will refactor it into the lazy code.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有一个使用急切评估生成质数的代码。如前面的截图所示，我们使用`for`循环生成了一百个质数。接下来，我们将将其重构为懒惰代码。
- en: Designing Chunk and Row classes
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计Chunk和Row类
- en: 'In the `prime.cpp` code, we generate a row of integer numbers using the `for`
    loop. In this row, there are several numbers that are called **Chunk**. Now, before
    we refactor the code, we will prepare a class named `Row` and `Chunk` for our
    further discussion. From our preceding analogy, the `Row` class will hold the
    sequence of integer number and the `Chunk` class will hold a single number. We
    will start with the smallest part in the data, which is the chunk. And here is
    the implementation of the `Chunk` class:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在`prime.cpp`代码中，我们使用`for`循环生成一行整数。在这一行中，有几个被称为**Chunk**的数字。现在，在重构代码之前，我们将为进一步讨论准备一个名为`Row`和`Chunk`的类。根据我们之前的类比，`Row`类将保存整数序列，而`Chunk`类将保存单个数字。我们将从数据中最小的部分开始，也就是chunk。以下是`Chunk`类的实现：
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Since the `Row` class is constructed from several `Chunk` classes, besides
    the value of `Chunk` itself, the `Chunk` class also has the next value of `Chunk`
    in the current `Row` notated by the `m_lastRow` member variable. We also can get
    the `m_lastRow` value by invoking the `ShiftLastToFirst()` method. Now, let''s
    move to the `Row` class. The implementation of the class is as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`Row`类是由几个`Chunk`类构成的，除了`Chunk`本身的值之外，`Chunk`类还具有当前`Row`中`Chunk`的下一个值，由`m_lastRow`成员变量表示。我们还可以通过调用`ShiftLastToFirst()`方法获取`m_lastRow`的值。现在，让我们转到`Row`类。该类的实现如下：
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: As we can see in the preceding code snippet, the `Row` class has only one private
    member to store a memoization of the `Chunk` data. There are four constructors
    the `Row` class has, and we will use them all in our next code. It also has the
    `Fetch()` method, which we got when we designed the `Memoization` class in the
    previous section, to get the `m_lazyChunk` value. The other methods are also useful
    to our next lazy code. The `IsEmpty()` method will check if the `m_lazyChunk`
    value is empty, the `ShiftLastToFirst()` method will take the last row of `m_lazyChunk`,
    and the `Pick(int n)` method will take out the first `n` row's elements that we
    will use if we need to take out a hundred of the integer prime numbers later.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的代码片段所示，`Row`类只有一个私有成员来存储`Chunk`数据的记忆。`Row`类有四个构造函数，我们将在下一段代码中全部使用。它还有`Fetch()`方法，我们在上一节中设计`Memoization`类时得到，用于获取`m_lazyChunk`的值。其他方法对我们下一个懒惰的代码也很有用。`IsEmpty()`方法将检查`m_lazyChunk`的值是否为空，`ShiftLastToFirst()`方法将获取`m_lazyChunk`的最后一行，`Pick(int
    n)`方法将取出我们稍后需要取出一百个整数质数的前`n`行元素。
- en: 'We can also see that one of the `Row` constructors is invoking the `ChunkPreparation`
    class constructor. The `ChunkPreparation` class will initialize a new `Chunk`
    class constructor using the given value and the last row value. The implementation
    of the class is as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以看到`Row`的一个构造函数调用了`ChunkPreparation`类的构造函数。`ChunkPreparation`类将使用给定的值和上一行的值初始化一个新的`Chunk`类构造函数。该类的实现如下：
- en: '[PRE13]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: As we can see, by invoking `operator ()`, the new `Chunk` will be generated
    with the given `m_value` and `m_row` value.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，通过调用`operator()`，将使用给定的`m_value`和`m_row`值生成新的`Chunk`。
- en: Concatenating several rows
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接几行
- en: 'When we plan to generate a row of prime numbers, we have to be able to concatenate
    the current with the new row generated by code. To address this need, the following
    is the implementation of the `ConcatenateRows()` function that will concatenate
    the two rows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们计划生成一行质数时，我们必须能够将当前行与代码生成的新行连接起来。为了满足这个需求，以下是将连接两行的`ConcatenateRows()`函数的实现：
- en: '[PRE14]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: It's quite clear what the `ConcatenateRows()` function does when we take a look
    at the preceding code snippet. If `leftRow` is still empty, just return the second
    row, which is `rightRow`. If `leftRow` and `rightRow` is available, we can return
    the chunks of the given rows that have been formed as a row.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们看一下前面的代码片段时，就可以清楚地知道`ConcatenateRows()`函数的作用。如果`leftRow`仍为空，只需返回第二行，即`rightRow`。如果`leftRow`和`rightRow`都可用，我们可以返回已形成行的给定行的块。
- en: Iterating each Row class' element
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 迭代每个Row类的元素
- en: 'After we construct the row of prime numbers, we need to iterate each row''s
    element to manipulate it, for instance, to print the value to the console. For
    this purpose, we have to develop the following `ForEach()` method:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建了质数行之后，我们需要迭代每行的元素进行操作，例如将值打印到控制台。为此，我们必须开发以下`ForEach()`方法：
- en: '[PRE15]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We will pass the row itself and a function into the `ForEach()` method. The
    function we passed to it will be run to each element of the row.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把行本身和一个函数传递给`ForEach()`方法。我们传递给它的函数将对行的每个元素运行。
- en: For our convenience in developing the lazy code in this chapter, I will bundle
    our previous discussion `template` class into a single header file named `lazyevaluation.h`;
    we can also reuse it for other projects. The header will contain the `Memoization`,
    `Row`, `Chunk`, `ChunkPreparation`, `ConcatenateRows`, and `ForEach` template
    class. You can create the header file yourself or download it from the code repository
    on the Packt website ([https://github.com/PacktPublishing/LearningCPPFunctionalProgramming](https://github.com/PacktPublishing/LearningCPPFunctionalProgramming)).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便我们在本章中开发惰性代码，我将把我们之前讨论的`template`类捆绑到一个名为`lazyevaluation.h`的单个头文件中；我们也可以在其他项目中重用它。头文件将包含`Memoization`、`Row`、`Chunk`、`ChunkPreparation`、`ConcatenateRows`和`ForEach`模板类。您可以自己创建头文件，也可以从Packt网站的代码库（[https://github.com/PacktPublishing/LearningCPPFunctionalProgramming](https://github.com/PacktPublishing/LearningCPPFunctionalProgramming)）下载。
- en: Generating the infinite integer row
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成无限整数行
- en: 'Now it''s time to generating the infinite integer row as we did using the `for`
    loop in our previous `prime.cpp` code. However, we will now create a new function
    named `GenerateInfiniteIntRow()` to generate an integer row from several integer
    chunks. The following code snippet is an implementation of the function:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候生成无限整数行了，就像我们在之前的`prime.cpp`代码中使用`for`循环一样。但是，我们现在将创建一个名为`GenerateInfiniteIntRow()`的新函数，以从几个整数块生成一个整数行。以下代码片段是该函数的实现：
- en: '[PRE16]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: As we can see, first, we create `Chunk` from `initialNumber` until infinity.
    The chunks will be transformed to the `Row` data type at the end. To stop this
    recursive function, we can call the `Pick()` method inside the `Row` class.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，首先我们从`initialNumber`创建`Chunk`直到无穷大。这些块最终将转换为`Row`数据类型。为了停止这个递归函数，我们可以在`Row`类中调用`Pick()`方法。
- en: Generating an infinite prime numbers row
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成无限质数行
- en: 'After successfully generated infinite numbers, we now have to limit the row
    to only generate the prime number. We will modify the `CheckPrime()` function
    from the `prime.cpp` code. We will change the return value of the function, `Row<void*>(nullptr)`
    if it''s not a prime number or `Row<void*>()` if the opposite. The implementation
    of the function should be as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 成功生成无限数字后，我们现在必须限制行只生成质数。我们将修改`prime.cpp`代码中的`CheckPrime()`函数。如果不是质数，我们将更改函数的返回值为`Row<void*>(nullptr)`，如果相反，则为`Row<void*>()`。函数的实现应该如下：
- en: '[PRE17]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Why do we need to change the return value of the function? Because we want
    to pass the return value to the `JoiningPrimeNumber()` function, which will join
    the generated Chunk with the following implementation:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么我们需要改变函数的返回值？因为我们想将返回值传递给`JoiningPrimeNumber()`函数，它将使用以下实现连接生成的Chunk：
- en: '[PRE18]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Moreover, the `MappingRowByValue()` function will map the given row to the
    given function. The implementation of the function is as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`MappingRowByValue()`函数将给定的行映射到给定的函数。函数的实现如下：
- en: '[PRE19]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'After we have successfully joined all prime numbers using the `JoiningPrimeNumber()`
    function, we have to bind it to the existing row using the `Binding()` function
    with the following implementation:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 成功使用`JoiningPrimeNumber()`函数连接所有质数后，我们必须使用以下实现将其绑定到现有行使用`Binding()`函数：
- en: '[PRE20]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'From the preceding code snippet, the `MappingRow()` function will map the given
    row to the given function, then `JoiningAllRows()` will join all rows from the
    `MappingRow()` return value. The implementation of the `MappingRow()` and `JoiningAllRows()`
    functions are as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的代码片段中，`MappingRow()`函数将给定的行映射到给定的函数，然后`JoiningAllRows()`将连接`MappingRow()`的返回值中的所有行。`MappingRow()`和`JoiningAllRows()`函数的实现如下：
- en: '[PRE21]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now we can create a function to limit the infinite integer number rows with
    the following implementation:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以创建一个函数来限制无限整数行，实现如下：
- en: '[PRE22]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Since the second argument of the `JoiningPrimeNumber()` function needs a row
    as a data type, we need to convert the `Chunk` to `Row` using the `ConvertChunkToRow()`
    function with the following implementations:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`JoiningPrimeNumber()`函数的第二个参数需要一个行作为数据类型，我们需要使用以下实现使用`ConvertChunkToRow()`函数将`Chunk`转换为`Row`：
- en: '[PRE23]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Now we can consume all preceding classes and functions to refactor our `prime.cpp`
    code.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用所有前面的类和函数来重构我们的`prime.cpp`代码。
- en: Refactoring eager evaluation to lazy evaluation
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重构急切评估为惰性评估
- en: 'We have all the functions we need to refactor the `prime.cpp` code into a lazy
    code. We will create a `prime_lazy.cpp` code that will generate infinite integer
    numbers first and pick the first one hundred of its elements. After that, we iterate
    a hundred elements and give them to the function that will print the value on
    the console. The code should look like this:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经拥有了重构`prime.cpp`代码为懒惰代码所需的所有函数。我们将创建一个`prime_lazy.cpp`代码，首先生成无限整数，然后选择其中的前一百个元素。之后，我们迭代一百个元素，并将它们传递给将值打印到控制台的函数。代码应该如下所示：
- en: '[PRE24]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'As we can see from the preceding code, we have `r` that holds the infinite
    numbers, then we pick the first one hundred prime numbers and store them to `firstAHundredPrimeNumbers`.
    To print the value of the element to the console, we use the `ForEach()` function
    and pass the Lambda expression to it. If we run the code, the result is exactly
    the same as the `prime.cpp` code, except the title that is used is a differentiator.
    The following output is what we should see on the console if we run the `prime_lazy.cpp`
    code:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的代码中可以看出，我们有一个`r`来保存无限的数字，然后我们选择了前一百个质数，并将它们存储到`firstAHundredPrimeNumbers`中。为了将元素的值打印到控制台上，我们使用了`ForEach()`函数，并将Lambda表达式传递给它。如果我们运行代码，结果与`prime.cpp`代码完全相同，只是使用了不同的标题。如果我们运行`prime_lazy.cpp`代码，我们应该在控制台上看到以下输出：
- en: '![](img/c60d9bc0-433e-4a8a-ad78-6b0691382add.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c60d9bc0-433e-4a8a-ad78-6b0691382add.png)'
- en: By using the `template` class, we have revealed in this chapter that we can
    develop other lazy code to gain the benefit of being lazy.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`template`类，我们在本章中已经发现可以开发其他懒惰的代码来获得懒惰的好处。
- en: In the preceding `prime_lazy.cpp` code, I omitted several lines of code that
    were written in the previous section to avoid the code redundancy. If you find
    any difficulty following the code because it's not complete, go to [https://github.com/PacktPublishing/LearningCPPFunctionalProgramming](https://github.com/PacktPublishing/LearningCPPFunctionalProgramming).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的`prime_lazy.cpp`代码中，我省略了几行代码，这些代码是在前一节中编写的，以避免代码冗余。如果你发现由于代码不完整而难以跟踪代码，请转到[https://github.com/PacktPublishing/LearningCPPFunctionalProgramming](https://github.com/PacktPublishing/LearningCPPFunctionalProgramming)。
- en: Summary
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Lazy evaluation is not only useful for functional programming, but it actually
    also has benefits for imperative programming. Using the lazy evaluation, we can
    have an efficient and faster code by implementing caching and optimizing techniques.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 惰性评估不仅对函数式编程有用，而且对命令式编程也有好处。使用惰性评估，我们可以通过实现缓存和优化技术来拥有高效和更快的代码。
- en: In the next chapter, we will talk about metaprogramming that we can use in the
    functional approach. We will discuss how to use metaprogramming to gain all its
    benefits, including code optimization.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论在函数式方法中可以使用的元编程。我们将讨论如何使用元编程来获得所有其好处，包括代码优化。
