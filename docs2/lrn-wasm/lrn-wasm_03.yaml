- en: Setting Up a Development Environment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置开发环境
- en: Now that you're familiar with the elements of WebAssembly, it's time to set
    up a suitable development environment. Developing with WebAssembly is tantamount
    to developing in C or C++. The difference lies in the build process and the output.
    In this chapter, we will cover the development tooling, and how to install and
    configure it on your system.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经熟悉了 WebAssembly 的元素，是时候设置一个合适的开发环境了。使用 WebAssembly 进行开发与使用 C 或 C++ 进行开发相似。区别在于构建过程和输出。在本章中，我们将介绍开发工具，以及如何在您的系统上安装和配置它们。
- en: 'Our goal for this chapter is to understand the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们本章的目标是理解以下内容：
- en: How to install the required development tooling (Git, Node.js, and Visual Studio
    Code)
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何安装所需的开发工具（Git、Node.js 和 Visual Studio Code）
- en: How to configure Visual Studio Code for use with C/C++ and WebAssembly using
    extensions
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用扩展配置 Visual Studio Code 以支持 C/C++ 和 WebAssembly
- en: How to set up a local HTTP server to serve up the HTML, JavaScript, and `.wasm`
    files
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何设置本地 HTTP 服务器以提供 HTML、JavaScript 和 `.wasm` 文件
- en: Checking your browser for WebAssembly support
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查您的浏览器是否支持 WebAssembly
- en: What helpful tools are available to simplify and improve the development process
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有哪些有用的工具可以简化并改进开发过程？
- en: Installing the development tooling
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装开发工具
- en: You'll need to install some applications and tooling to start developing WebAssembly.
    We will use Visual Studio Code, a text editor, to write our C/C++, JavaScript,
    HTML, and Wat. We'll also use Node.js for serving up the files and Git to manage
    our code. We will use package managers to install these tools, which makes the
    installation process much simpler than downloading and installing them manually.
    In this section, we will cover the operating systems, as well as the package managers
    for each platform. We'll also review each of the applications, with a brief overview
    of their role in the development process.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要安装一些应用程序和工具才能开始开发 WebAssembly。我们将使用 Visual Studio Code，一个文本编辑器，来编写我们的 C/C++、JavaScript、HTML
    和 Wat。我们还将使用 Node.js 来提供文件服务，并使用 Git 来管理我们的代码。我们将使用包管理器来安装这些工具，这使得安装过程比手动下载和安装要简单得多。在本节中，我们将介绍操作系统以及每个平台的包管理器。我们还将简要回顾每个应用程序，概述它们在开发过程中的作用。
- en: Operating systems and hardware
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作系统和硬件
- en: 'To ensure that the installation and configuration process goes smoothly, it''s
    important to be aware of the operating systems I will use for the examples in
    this book. If you encounter an issue, it may be due to an incompatibility between
    the platform you''re using and the one I''m using. In most cases, you shouldn''t
    have an issue. For the sake of eliminating the OS version as a potential problem
    causer, I''ve provided details for the operating systems I''m using in the following
    list:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保安装和配置过程顺利进行，了解我在本书中使用的示例操作系统非常重要。如果您遇到问题，可能是由于您使用的平台与我使用的平台不兼容。在大多数情况下，您不应该遇到问题。为了消除操作系统版本作为潜在问题原因的可能性，我在以下列表中提供了我使用的操作系统的详细信息：
- en: macOS
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: macOS
- en: High Sierra, version 10.13.x
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: High Sierra，版本 10.13.x
- en: 2.2 GHz Intel i7 processor
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2.2 GHz Intel i7 处理器
- en: 16 GB of RAM
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 16 GB 的 RAM
- en: Ubuntu
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ubuntu
- en: Ubuntu 16.04 LTS running in VMware Fusion
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 VMware Fusion 中运行的 Ubuntu 16.04 LTS
- en: 2.2 GHz Intel i7 Processor
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2.2 GHz Intel i7 处理器
- en: 4 GB of RAM
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 4 GB 的 RAM
- en: Windows
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Windows
- en: Windows 10 Pro running in VMware Fusion
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 VMware Fusion 中运行的 Windows 10 Pro
- en: 2.2 GHz Intel i7 Processor
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2.2 GHz Intel i7 处理器
- en: 8 GB of RAM
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 8 GB 的 RAM
- en: Package managers
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 包管理器
- en: Package managers are tools that simplify the installation process for software.
    They allow us to upgrade, configure, uninstall, and search for available software
    from the command line without having to go to a website to download and run the
    installer. They also simplify the installation process for software that may have
    multiple dependencies or require manual configuration before use. In this section,
    I'll cover the package manager for each platform.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 包管理器是简化软件安装过程的工具。它们允许我们从命令行升级、配置、卸载和搜索可用的软件，而无需访问网站下载和运行安装程序。它们还简化了可能具有多个依赖项或在使用前需要手动配置的软件的安装过程。在本节中，我将介绍每个平台的包管理器。
- en: Homebrew for macOS
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Homebrew for macOS
- en: 'Homebrew is an excellent package manager for macOS that allows us to install
    most of the tools we will use out of the box. Homebrew is as simple as pasting
    the following command in Terminal and running it:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Homebrew 是 macOS 上的一个优秀包管理器，它允许我们直接安装我们将要使用的多数工具。Homebrew 的使用方法很简单，只需在终端粘贴以下命令并运行即可：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You''ll see messages in Terminal that will walk you through the installation
    process. Once that''s complete, you''ll need to install an extension for Homebrew
    called **Homebrew-Cask** that allows you to install macOS applications without
    having to download the installer, mount it, and drag the application into the
    `Applications` folder. You can install this by running the following command:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在终端中看到消息，这些消息将引导您完成安装过程。一旦完成，您需要安装一个名为 **Homebrew-Cask** 的 Homebrew 扩展，它允许您在不下载安装程序、挂载它并将应用程序拖到
    `Applications` 文件夹的情况下安装 macOS 应用程序。您可以通过运行以下命令来安装它：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'That''s it! You''re now able to install applications by running either of these
    commands:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！现在您可以通过运行以下任一命令来安装应用程序：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Apt for Ubuntu
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ubuntu 的 Apt
- en: 'Apt is the package manager provided with Ubuntu; there''s no need to install
    it. It allows you to install both command-line tools and applications out of the
    box. If an application isn''t available from Apt''s repository, you can add a
    repository using the following command:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Apt 是 Ubuntu 提供的包管理器；无需安装它。它允许您直接安装命令行工具和应用程序。如果应用程序不在 Apt 的存储库中，您可以使用以下命令添加存储库：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Chocolatey for Windows
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Windows 的 Chocolatey
- en: 'Chocolatey is a package manager for Windows. It''s similar to Apt in that it
    lets you install both command-line tools and applications. To install Chocolatey,
    you need to run the command prompt (`cmd.exe`) as an administrator. You can do
    this by pressing the Start menu button, typing cmd, and right-clicking on the
    Command Prompt application and selecting Run as administrator:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Chocolatey 是 Windows 的包管理器。它与 Apt 类似，允许您安装命令行工具和应用程序。要安装 Chocolatey，您需要以管理员身份运行命令提示符（`cmd.exe`）。您可以通过按开始菜单按钮，输入
    cmd，然后右键单击命令提示符应用程序并选择“以管理员身份运行”来完成此操作：
- en: '![](img/257d1dc9-7c8b-4e3e-91ff-2697e0749527.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/257d1dc9-7c8b-4e3e-91ff-2697e0749527.png)'
- en: Running the Command Prompt as an administrator
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 以管理员身份运行命令提示符
- en: 'Then just run the following command:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 然后只需运行以下命令：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The easiest way to get the command text is through Chocolatey's installation
    page at [https://chocolatey.org/install](https://chocolatey.org/install). There's
    a button to copy the text to your clipboard under the *Install with* *cmd.exe*
    section. You could also install the application using PowerShell if you follow
    the steps on the Installation page.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 获取命令文本的最简单方法是通过 Chocolatey 的安装页面 [https://chocolatey.org/install](https://chocolatey.org/install)。在“*使用*
    *cmd.exe* 安装”部分下方有一个按钮，可以将文本复制到您的剪贴板。您也可以通过安装页面上的步骤使用 PowerShell 安装应用程序。
- en: Git
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Git
- en: Git is a **version control system** (**VCS**) that allows you to track changes
    to files and manage work between multiple developers contributing to the same
    code base. Git is the VCS powering GitHub and GitLab, and is also available on
    Bitbucket (they also offer Mercurial, which is another VCS). Git will allow us
    to clone repositories from GitHub, and is a prerequisite for the EMSDK, which
    we'll cover in the next chapter. In this section, we will cover the installation
    process for Git.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Git 是一个 **版本控制系统**（**VCS**），允许您跟踪文件更改并管理多个开发者之间对同一代码库的贡献。Git 是 GitHub 和 GitLab
    所使用的 VCS，同样也适用于 Bitbucket（他们还提供 Mercurial，另一种 VCS）。Git 允许我们从 GitHub 克隆仓库，并且是 EMSDK
    的先决条件，我们将在下一章中介绍。在本节中，我们将介绍 Git 的安装过程。
- en: Installing Git on macOS
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 macOS 上安装 Git
- en: 'Git is probably already available if you''re using macOS. macOS comes bundled
    with Apple Git, which will probably be a few versions behind the most recent version.
    For the purposes of this book, the version you already have installed should be
    sufficient. If you wish to upgrade, you can install the most recent version of
    Git using Homebrew by running the following commands in Terminal:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用 macOS，Git 可能已经可用。macOS 随带 Apple Git，这可能会比最新版本落后几个版本。为了本书的目的，您已安装的版本应该足够。如果您希望升级，您可以通过在终端中运行以下命令来安装
    Git 的最新版本：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If you run this command, you should see `/usr/local/bin/git`:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您运行此命令，您应该看到 `/usr/local/bin/git`：
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You can check to ensure that the installation was successful by running this
    command:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过运行以下命令来检查安装是否成功：
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Installing Git on Ubuntu
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Ubuntu 上安装 Git
- en: 'You can use `apt` to install Git; just run the following command in Terminal:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 `apt` 安装 Git；只需在终端中运行以下命令即可：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You can check to ensure that the installation was successful by running this
    command:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过运行以下命令来检查安装是否成功：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Installing Git on Windows
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Windows 上安装 Git
- en: 'You can install Git using Chocolatey. Open up Command Prompt or PowerShell
    and run this command:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 Chocolatey 安装 Git。打开命令提示符或 PowerShell，并运行以下命令：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You can check to ensure that the installation was successful by running this
    command:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过运行以下命令来检查安装是否成功：
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You can bypass the confirmation messages by adding a `-y` to the end of the
    install command (for example, `choco install git -y`). You can also opt to always
    skip the confirmation by entering the
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在安装命令的末尾添加 `-y` 来绕过确认消息（例如，`choco install git -y`）。您还可以选择始终跳过确认，通过输入
- en: '**`choco feature enable -n allowGlobalConfirmation`** command.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**`choco feature enable -n allowGlobalConfirmation`** 命令。'
- en: Node.js
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Node.js
- en: The official website for Node.js describes it as an asynchronous event-driven
    JavaScript runtime. Node is designed to build scalable network applications. We
    will use it in this book to serve up our files and work with them in a browser.
    Node.js comes packaged with `npm`, a package manager for JavaScript, which will
    allow us to install packages globally and access them through the command line.
    In this section, we'll cover the installation process for each platform using
    the **Node Version Manager** (**nvm**).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js 的官方网站将其描述为一个异步事件驱动的 JavaScript 运行时。Node 是设计用来构建可扩展的网络应用程序的。我们将在这本书中使用它来提供文件服务并在浏览器中处理它们。Node.js
    随 `npm` 一起打包，`npm` 是 JavaScript 的包管理器，它将允许我们全局安装包并通过命令行访问它们。在本节中，我们将使用 **Node
    版本管理器**（**nvm**）来介绍每个平台的安装过程。
- en: nvm
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: nvm
- en: We will use the **long-term stable** (**LTS**) release of Node.js (Version 8)
    to ensure that we're using the most stable version of the platform. We will use
    `nvm` to manage Node.js versions. This will prevent conflicts if you already have
    a higher (or lower) version of Node.js installed on your computer. `nvm` allows
    you to have multiple versions of Node.js installed that you can quickly switch
    to and isolate in the context of a single terminal window.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Node.js 的**长期稳定版**（**LTS**）（版本 8）来确保我们使用的是平台的最稳定版本。我们将使用 `nvm` 来管理 Node.js
    版本。如果您已经在计算机上安装了更高（或更低）版本的 Node.js，这将防止冲突。`nvm` 允许您安装多个版本的 Node.js，您可以在单个终端窗口中快速切换并隔离它们。
- en: Installing nvm on macOS
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 macOS 上安装 nvm
- en: 'Run the following command in Terminal:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端中运行以下命令：
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Follow the post-installation steps Homebrew specifies to ensure that you can
    start using it (you may have to restart your Terminal session). If you cleared
    your Terminal contents before performing the steps, you can run this command to
    see the installation steps again:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 按照 Homebrew 指定的安装后步骤进行操作，以确保您可以使用它（您可能需要重新启动终端会话）。如果您在执行步骤之前清除了终端内容，您可以运行以下命令再次查看安装步骤：
- en: '[PRE13]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You can check to ensure that the installation was successful by running this
    command:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过运行以下命令来检查安装是否成功：
- en: '[PRE14]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Install nvm on Ubuntu
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Ubuntu 上安装 nvm
- en: 'Ubuntu comes bundled with `wget`, which can retrieve files using HTTP/S and
    FTP/S protocols. The GitHub page for `nvm` ([https://github.com/creationix/nvm](https://github.com/creationix/nvm))
    contains the following command to install it using `wget`:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Ubuntu 预装了 `wget`，它可以使用 HTTP/S 和 FTP/S 协议检索文件。`nvm` 的 GitHub 页面（[https://github.com/creationix/nvm](https://github.com/creationix/nvm)）包含以下命令，用于使用
    `wget` 安装它：
- en: '[PRE15]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Once installed, restart Terminal to complete the installation. You can check
    to ensure that the installation was successful by running the following command:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，重新启动终端以完成安装。您可以通过运行以下命令来检查安装是否成功：
- en: '[PRE16]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Installing nvm on Windows
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Windows 上安装 nvm
- en: '`nvm` doesn''t currently support Windows, so you''re actually installing a
    different application named `nvm`-windows. The GitHub page for `nvm`-windows can
    be found at [https://github.com/coreybutler/nvm-windows](https://github.com/coreybutler/nvm-windows).
    Some of the commands are slightly different, but the installation command we run
    will be the same. To install `nvm`-windows, open up Command Prompt or PowerShell
    and run this command:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`nvm` 目前不支持 Windows，因此您实际上是在安装一个名为 `nvm`-windows 的不同应用程序。`nvm`-windows 的 GitHub
    页面可在 [https://github.com/coreybutler/nvm-windows](https://github.com/coreybutler/nvm-windows)
    找到。一些命令略有不同，但我们将运行的安装命令将是相同的。要安装 `nvm`-windows，打开命令提示符或 PowerShell，并运行以下命令：'
- en: '[PRE17]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'You can check to ensure that the installation was successful by running the
    following command:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过运行以下命令来检查安装是否成功：
- en: '[PRE18]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Installing Node.js using nvm
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 nvm 安装 Node.js
- en: 'After installing `nvm`, you need to install the version of Node.js we will
    use in this book: version 8.11.1\. To install it, run this command:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 `nvm` 后，您需要安装本书中将要使用的 Node.js 版本：版本 8.11.1。要安装它，请运行此命令：
- en: '[PRE19]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'If you didn''t have Node.js or `nvm` previously installed, it will automatically
    set this to your default Node.js installation, so the output of this command should
    be `v8.11.1`:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您之前没有安装 Node.js 或 `nvm`，它将自动将其设置为您的默认 Node.js 安装，因此此命令的输出应该是 `v8.11.1`：
- en: '[PRE20]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'If you have existing Node.js versions installed, you can either use v8.11.1
    as a default, or ensure that you run this command to use v8.11.1 when working
    through the examples in this book:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经安装了现有的 Node.js 版本，您可以选择将 v8.11.1 设置为默认版本，或者确保在本书的示例中工作时运行以下命令以使用 v8.11.1：
- en: '[PRE21]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: You can create a file named `.nvmrc` in the folder with your code and populate
    it with the contents `v8.11.1`. You can run `nvm use` within this directory and
    it will set the version to `8.11.1` without having to specify it.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在包含您的代码的文件夹中创建一个名为 `.nvmrc` 的文件，并填写内容 `v8.11.1`。您可以在该目录中运行 `nvm use`，它将版本设置为
    `8.11.1`，而无需指定它。
- en: GNU make and rimraf
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GNU make 和 rimraf
- en: In the `learn-webassembly` repository, the code examples use GNU Make and VS
    Code's Tasks feature (which we'll cover in [Chapter 5](51201d69-0a8e-45f3-bb4f-03ded5bbeb6c.xhtml),
    *Creating and Loading a WebAssembly Module*) to perform the build tasks defined
    throughout the book. GNU Make is an excellent cross-platform tool for automating
    build processes. You can read more about GNU Make at [https://www.gnu.org/software/make](https://www.gnu.org/software/make).
    Let's review the installation steps for each platform.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `learn-webassembly` 仓库中，代码示例使用 GNU Make 和 VS Code 的任务功能（我们将在 [第 5 章](51201d69-0a8e-45f3-bb4f-03ded5bbeb6c.xhtml)，*创建和加载
    WebAssembly 模块*）来执行本书中定义的构建任务。GNU Make 是一个出色的跨平台工具，用于自动化构建过程。您可以在 [https://www.gnu.org/software/make](https://www.gnu.org/software/make)
    上了解更多关于 GNU Make 的信息。让我们回顾每个平台的安装步骤。
- en: GNU Make on macOS and Ubuntu
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: macOS 和 Ubuntu 上的 GNU Make
- en: 'If you''re using macOS or Linux, GNU `make` should already be installed. To
    validate this, run the following command in Terminal:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用 macOS 或 Linux，GNU `make` 应该已经安装。为了验证这一点，请在终端中运行以下命令：
- en: '[PRE22]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: If you see version information, you're ready to go. Skip ahead to the *Installing
    rimraf* section. Otherwise, follow the GNU Make installation instructions for
    your platform.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您看到版本信息，您就可以继续了。跳转到 *安装 rimraf* 部分。否则，请按照您平台的 GNU Make 安装说明进行操作。
- en: Installing GNU Make on macOS
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 macOS 上安装 GNU Make
- en: 'To install GNU Make on macOS, run the following command from Terminal:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 macOS 上安装 GNU Make，请在终端中运行以下命令：
- en: '[PRE23]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'You can check to ensure that the installation was successful by running this
    command:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过运行以下命令来检查安装是否成功：
- en: '[PRE24]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: If you see version information, skip to the *Installing* *rimraf* section.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您看到版本信息，请跳转到 *安装 rimraf* 部分。
- en: Installing GNU Make on Ubuntu
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Ubuntu 上安装 GNU Make
- en: 'To install GNU Make on Ubuntu, run the following command from Terminal:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Ubuntu 上安装 GNU Make，请在终端中运行以下命令：
- en: '[PRE25]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'You can check to ensure that the installation was successful by running this
    command:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过运行以下命令来检查安装是否成功：
- en: '[PRE26]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: If you see version information, skip to the *Installing rimraf* section.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您看到版本信息，请跳转到 *安装 rimraf* 部分。
- en: Installing GNU make on Windows
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Windows 上安装 GNU make
- en: 'You can install GNU `make` on Windows using Chocolatey. Open up Command Prompt
    or PowerShell and run the following command:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 Chocolatey 在 Windows 上安装 GNU `make`。打开命令提示符或 PowerShell 并运行以下命令：
- en: '[PRE27]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'You may need to restart the CLI to use the `make` command. Once restarted,
    run the following command to validate the installation:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能需要重新启动 CLI 以使用 `make` 命令。重启后，运行以下命令以验证安装：
- en: '[PRE28]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: If you see version information, continue to the next section. If you encounter
    issues, you may need to download and install the setup package at [http://gnuwin32.sourceforge.net/packages/make.htm](http://gnuwin32.sourceforge.net/packages/make.htm).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您看到版本信息，请继续到下一节。如果您遇到问题，您可能需要下载并安装设置包 [http://gnuwin32.sourceforge.net/packages/make.htm](http://gnuwin32.sourceforge.net/packages/make.htm)。
- en: Installing rimraf
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 rimraf
- en: Some of the build steps defined in the Makefiles or VS Code Tasks delete files
    or directories. The commands required to delete a file or folder differ based
    on your platform and shell. To address this issue we'll use the `rimraf npm` package
    ([https://www.npmjs.com/package/rimraf](https://www.npmjs.com/package/rimraf)).
    Installing the package globally provides a `rimraf` command that performs the
    correct deletion operation for the operating system and shell.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Makefiles 或 VS Code Tasks 中定义的一些构建步骤会删除文件或目录。删除文件或文件夹所需的命令取决于您的平台和 shell。为了解决这个问题，我们将使用
    `rimraf npm` 包（[https://www.npmjs.com/package/rimraf](https://www.npmjs.com/package/rimraf)）。全局安装此包提供了一个
    `rimraf` 命令，该命令执行操作系统和 shell 的正确删除操作。
- en: 'To install `rimraf`, ensure that Node.js is installed and run the following
    command from a CLI:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 `rimraf`，请确保已安装 Node.js，然后从 CLI 运行以下命令：
- en: '[PRE29]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'To ensure that the installation was successful, run the following command:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保安装成功，请运行以下命令：
- en: '[PRE30]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: You should see usage instructions and a list of command line flags. Let's move
    on to the VS Code installation.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到使用说明和命令行标志列表。让我们继续到 VS Code 的安装部分。
- en: VS Code
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: VS Code
- en: 'VS Code is a cross-platform text editor with multiple-language support and
    a rich extensions ecosystem. Integrated debugging and Git support are built in,
    and new features are being added all the time. We''re able to use it for the entire
    WebAssembly development process throughout the course of this book. In this section,
    we will cover the installation steps for each platform:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: VS Code 是一个跨平台文本编辑器，支持多种语言，并拥有丰富的扩展生态系统。内置的调试和 Git 支持是内置的，并且不断添加新功能。我们能够在本书的整个过程中使用它来完成
    WebAssembly 开发过程。在本节中，我们将介绍每个平台的安装步骤：
- en: '![](img/d936d227-0ea4-44a0-8ffa-f43768420eb0.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d936d227-0ea4-44a0-8ffa-f43768420eb0.png)'
- en: Screenshot from Visual Studio Code's website
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio Code 网站的截图
- en: Installing Visual Studio Code on macOS
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 macOS 上安装 Visual Studio Code
- en: 'Use Homebrew-Cask to install VS Code. Run the following command in Terminal
    to install:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Homebrew-Cask 安装 VS Code。在终端中运行以下命令进行安装：
- en: '[PRE31]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Once it's complete, you should be able to launch it from the `Applications`
    folder or the Launchpad.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装完成，您应该可以从“应用程序”文件夹或启动盘启动它。
- en: Installing Visual Studio Code on Ubuntu
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Ubuntu 上安装 Visual Studio Code
- en: 'The process for installing VS Code on Ubuntu has a few extra steps, but is
    still relatively simple. First, download the `.deb` file from VS Code''s download
    page ([https://code.visualstudio.com/Download](https://code.visualstudio.com/Download)).
    Once the download completes, run the following commands to complete the installation:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Ubuntu 上安装 VS Code 的过程有几个额外的步骤，但仍然相对简单。首先，从 VS Code 的下载页面下载 `.deb` 文件（[https://code.visualstudio.com/Download](https://code.visualstudio.com/Download)）。下载完成后，运行以下命令以完成安装：
- en: '[PRE32]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'If you get a missing dependency error, you can fix it by running the following
    command before `sudo dpkg`:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您遇到缺少依赖项的错误，您可以在运行 `sudo dpkg` 之前运行以下命令来修复它：
- en: '[PRE33]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: You should now be able to open VS Code from the Launcher.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您应该可以从启动器打开 VS Code。
- en: Installing VS Code on Windows
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Windows 上安装 Visual Studio Code
- en: 'You can install VS Code using Chocolatey. Run this command from Command Prompt
    or PowerShell:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 Chocolatey 安装 VS Code。从命令提示符或 PowerShell 运行以下命令：
- en: '[PRE34]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Once installed, you can access it from the Start menu.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，您可以从开始菜单访问它。
- en: You can open VS Code with the current working directory as the project by running
    `code .` in the CLI.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在 CLI 中运行 `code .` 来以当前工作目录作为项目打开 VS Code。
- en: Configuring VS Code
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 VS Code
- en: Out of the box, VS Code is a powerful text editor with a lot of great functionality.
    In addition to being highly configurable and customizable, it possesses an incredibly
    rich extensions ecosystem. We'll need to install some of these extensions so we
    won't need to use different editors for different programming languages. In this
    section, we will cover how to configure VS Code and which extensions to install
    to simplify the WebAssembly development process.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，VS Code 是一个功能强大的文本编辑器，拥有许多出色的功能。除了高度可配置和可定制外，它还拥有一个极其丰富的扩展生态系统。我们需要安装其中的一些扩展，这样我们就不需要为不同的编程语言使用不同的编辑器。在本节中，我们将介绍如何配置
    VS Code 以及需要安装哪些扩展以简化 WebAssembly 开发过程。
- en: Managing settings and customization
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理设置和自定义
- en: Customizing and configuring VS Code is simple and intuitive. You can manage
    custom settings such as editor font and tab sizes by selecting Code | Preferences
    | Settings on macOS or File | Preferences | Settings on Windows. User and workspace
    settings are managed separately in JSON files and auto completion is provided
    in case you can't remember the exact name of a setting. You can also change the
    themes or keyboard shortcuts by selecting the appropriate option in the Preferences
    menu. The settings file is also where you can set custom settings for any extensions
    you install. Some settings are added by default when you install an extension,
    so changing them is as simple as updating and saving this file.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 个性化配置 VS Code 简单直观。您可以通过选择 Code | Preferences | Settings 在 macOS 上或 File | Preferences
    | Settings 在 Windows 上来管理自定义设置，如编辑器字体和选项卡大小。用户和工作区设置在 JSON 文件中分别管理，并提供自动完成功能，以防您记不起设置的准确名称。您还可以通过在首选项菜单中选择适当的选项来更改主题或键盘快捷键。设置文件也是您可以为安装的任何扩展设置自定义设置的地方。一些设置在安装扩展时默认添加，因此更改它们就像更新和保存此文件一样简单。
- en: Extensions overview
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展概述
- en: 'We''ll need to install some extensions as part of the configuration process.
    There are multiple ways to find and install extensions in VS Code. I prefer to
    click on the Extensions button (fourth button from the top in the Activity bar
    on the left-hand side of the editor), enter what I''m looking for in the Search
    box, and press the green Install button for the extension I''d like to install.
    You could also visit the VS Code Marketplace at [https://marketplace.visualstudio.com/vscode](https://marketplace.visualstudio.com/vscode),
    search for and select an extension you''d like to install, and press the green
    Install button on the extension''s page. You can manage extensions through the
    command line as well. For more information, visit [https://code.visualstudio.com/docs/editor/extension-gallery](https://code.visualstudio.com/docs/editor/extension-gallery):'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置过程中，我们需要安装一些扩展。在 VS Code 中查找和安装扩展有多种方式。我更喜欢点击左侧编辑器活动栏上从顶部数起的第四个按钮（扩展按钮），在搜索框中输入我想要的内容，然后为我想安装的扩展按下绿色的安装按钮。您也可以访问
    VS Code 市场place [https://marketplace.visualstudio.com/vscode](https://marketplace.visualstudio.com/vscode)，搜索并选择您想要安装的扩展，然后在扩展页面上点击绿色的安装按钮。您还可以通过命令行管理扩展。有关更多信息，请访问
    [https://code.visualstudio.com/docs/editor/extension-gallery](https://code.visualstudio.com/docs/editor/extension-gallery)：
- en: '![](img/a4681032-4748-44a9-a937-d92678e2636f.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a4681032-4748-44a9-a937-d92678e2636f.png)'
- en: Installing extensions in VS Code
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在 VS Code 中安装扩展
- en: Configuration for C/C++ and WebAssembly
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: C/C++ 和 WebAssembly 的配置
- en: VS Code doesn't support C and C++ out of the box, but there is an excellent
    extension that allows you to work with these languages. It also doesn't support
    syntax highlighting for the WebAssembly text format, but there is an extension
    that adds that functionality as well. In this section, we will cover the installation
    and configuration of the *C/C++ for VS Code* and *WebAssembly Toolkit for VSCode*
    extensions.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: VS Code 默认不支持 C 和 C++，但有一个出色的扩展允许您使用这些语言。它也不支持 WebAssembly 文本格式的语法高亮，但有一个扩展可以添加此功能。在本节中，我们将介绍
    *C/C++ for VS Code* 和 *WebAssembly Toolkit for VSCode* 扩展的安装和配置。
- en: Installing C/C++ for VS Code
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 VS Code 的 C/C++
- en: The C/C++ extension for VS Code includes several features for writing and debugging
    C and C++ code, such as auto completion, symbol searching, class/method navigation,
    line-by-line code stepping, and many others. To install the extension, search
    for C/C++ in the Extensions and install the extension titled C/C++ (it's created
    by Microsoft) or navigate to the extension's official page at [https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools)
    and press the green Install button.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: VS Code 的 C/C++ 扩展包括用于编写和调试 C 和 C++ 代码的多个功能，例如自动完成、符号搜索、类/方法导航、逐行代码单步执行，以及其他许多功能。要安装此扩展，请在扩展中搜索
    C/C++，然后安装名为 C/C++（由微软创建）的扩展，或者导航到扩展的官方页面 [https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools)
    并点击绿色的安装按钮。
- en: 'Once installed, you can view configuration details for the extension by selecting
    the extension from the Extensions list in VS Code and selecting the Contributions
    tab. This tab contains the various settings, commands, and debugger details:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，您可以通过在 VS Code 的扩展列表中选择扩展并选择“贡献”选项卡来查看扩展的配置详情。此选项卡包含各种设置、命令和调试器详情：
- en: '![](img/db5aeb52-94d7-4d7b-9af0-e3637e5cb4ce.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](img/db5aeb52-94d7-4d7b-9af0-e3637e5cb4ce.png)'
- en: '*Contributions* tab for the C/C++ extension'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: C/C++ 扩展的 *贡献* 选项卡
- en: Configuring C/C++ for VS Code
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 VS Code 的 C/C++
- en: 'Microsoft has an official page for the extension, which you can view at [https://code.visualstudio.com/docs/languages/cpp](https://code.visualstudio.com/docs/languages/cpp).
    This page describes, among other things, how to configure through the use of JSON
    files. Let''s start by creating a new configuration file to manage our C/C++ environment.
    You can generate a new configuration file by pressing the *F1* key, typing C/C,
    and selecting C/Cpp: Edit Configurations…:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '微软为该扩展提供了一个官方页面，您可以在 [https://code.visualstudio.com/docs/languages/cpp](https://code.visualstudio.com/docs/languages/cpp)
    上查看。该页面描述了如何使用 JSON 文件进行配置等内容。让我们先创建一个新的配置文件来管理我们的 C/C++ 环境。您可以通过按 *F1* 键，输入 C/C，然后选择
    C/Cpp: 编辑配置…来生成一个新的配置文件：'
- en: '![](img/653b245b-f3a0-4fb5-bacd-9624555a6bde.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](img/653b245b-f3a0-4fb5-bacd-9624555a6bde.png)'
- en: Command Palette with C/C++ extension options
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 带有 C/C++ 扩展选项的命令面板
- en: This will generate a new `c_cpp_properties.json` in a `.vscode` folder within
    your current project. The file will contain configuration options for your C/C++
    compiler based on your platform, the C and C++ standards to use, and the include
    paths for header files. You can close this file once it's generated. We will revisit
    it when we configure the EMSDK.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在您当前项目的 `.vscode` 文件夹中生成一个新的 `c_cpp_properties.json` 文件。该文件将包含基于您的平台、要使用的
    C 和 C++ 标准以及头文件包含路径的配置选项。生成后，您可以关闭此文件。我们将在配置 EMSDK 时再次访问它。
- en: WebAssembly Toolkit for VSCode
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: VSCode 的 WebAssembly 工具包
- en: 'There are a few different WebAssembly extensions for VS Code currently available.
    I''m using the WebAssembly Toolkit for VSCode extension because it allows you
    to right-click on a `.wasm` file and select Show WebAssembly, which displays the
    Wat representation of the file. You can install this extension through the Extensions
    panel (search for WebAssembly), or from the official extension page in the VS
    Code Marketplace ([https://marketplace.visualstudio.com/items?itemName=dtsvet.vscode-wasm](https://marketplace.visualstudio.com/items?itemName=dtsvet.vscode-wasm)):'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 目前 VS Code 有几个不同的 WebAssembly 扩展可用。我使用的是 VSCode WebAssembly 工具包扩展，因为它允许您右键单击一个
    `.wasm` 文件并选择显示 WebAssembly，这将显示文件的 Wat 表示形式。您可以通过扩展面板（搜索 WebAssembly）或从 VS Code
    市场中的官方扩展页面（[https://marketplace.visualstudio.com/items?itemName=dtsvet.vscode-wasm](https://marketplace.visualstudio.com/items?itemName=dtsvet.vscode-wasm)）安装此扩展：
- en: '![](img/e5df8895-859b-40c0-a647-5c7d51fd567e.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e5df8895-859b-40c0-a647-5c7d51fd567e.png)'
- en: Viewing the Wat for a `.wasm` file using the WebAssembly Toolkit for the VS
    Code extension
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 VS Code 扩展的 WebAssembly 工具包查看 `.wasm` 文件
- en: Once installed, you're ready to go! Now that you've got all of the required
    extensions, let's evaluate some optional extensions that can simplify common tasks.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，您就可以开始使用了！现在您已经安装了所有必需的扩展，让我们评估一些可选扩展，这些扩展可以简化常见任务。
- en: Other useful extensions
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他有用的扩展
- en: VS Code has some great extensions to improve efficiency and customize the interface.
    In this section, I will cover some of the extensions I have installed that simplify
    common tasks as well as the user interface/icon themes. You don't need to install
    any of these extensions for the examples in this book, but you may find some of
    them useful.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: VS Code 有一些很棒的扩展可以提高效率和自定义界面。在本节中，我将介绍我安装的一些扩展，这些扩展可以简化常见任务以及用户界面/图标主题。您不需要为本书中的示例安装这些扩展，但您可能会发现其中一些很有用。
- en: Auto rename tag
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动重命名标签
- en: 'This extension is incredibly helpful when working with HTML. It automatically
    changes the name of the closing tag if you change the tag type. For example, if
    you have a `<div>` element and you want to make it a `<span>`, changing the text
    of the opening element to `span` will update the closing element text (`</div>`
    to `</span>`):'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 HTML 时，这个扩展非常有帮助。如果你更改了标签类型，它会自动更改关闭标签的名称。例如，如果你有一个 `<div>` 元素，并想将其改为 `<span>`，将打开元素的文本改为
    `span` 将会更新关闭元素的文本（`</div>` 更改为 `</span>`）：
- en: '![](img/94ea0207-f80b-43fd-8907-fca386c945c7.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![](img/94ea0207-f80b-43fd-8907-fca386c945c7.png)'
- en: Auto renaming tag renaming HTML tag
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 自动重命名标签重命名 HTML 标签
- en: Bracket pair colorizer
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 括号对着色器
- en: 'This extension colorizes the brackets, braces, and parentheses in your code
    so you can quickly identify the opening and closing brackets. WebAssembly''s text
    format uses parentheses extensively, so being able to determine which elements
    are enclosed in which list makes debugging and evaluation much simpler:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 此扩展程序会为你的代码中的括号、花括号和括号着色，这样你可以快速识别开闭括号。WebAssembly 的文本格式广泛使用括号，因此能够确定哪些元素被包含在哪些列表中，使得调试和评估变得简单得多：
- en: '![](img/6a7bd70b-1c52-43b9-ba23-3db2d688ca43.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6a7bd70b-1c52-43b9-ba23-3db2d688ca43.png)'
- en: Bracket pair colorizer color matching parentheses in a Wat file
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: Wat 文件中括号对的颜色与括号匹配
- en: Material Icon theme and Atom One Light theme
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 材料图标主题和 Atom One Light 主题
- en: 'There are over 1,000 icon and interface themes available on the VS Code Marketplace.
    I''m including the Material Icon theme and Atom One Light theme in this section
    because they''re being used in the screenshots in this book. The Material Icon
    theme is incredibly popular, with over 2 million downloads, while the Atom One
    Light theme has over 70,000 downloads:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: VS Code 市场上有超过 1,000 个图标和界面主题可供选择。我在本节中包括了材料图标主题和 Atom One Light 主题，因为它们被用于本书的截图。材料图标主题非常受欢迎，下载量超过
    200 万次，而 Atom One Light 主题的下载量超过 70,000 次：
- en: '![](img/c32d88eb-7850-49c3-9ff4-84e0eb89969d.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c32d88eb-7850-49c3-9ff4-84e0eb89969d.png)'
- en: Icons in the Material Icons theme
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 材料图标主题中的图标
- en: Setting up for the web
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为 Web 设置
- en: Interacting with and debugging Wasm modules will be done in the browser, which
    means we'll need a way to serve up a folder containing our example files. As we
    discussed in [Chapter 2](0b30dfc9-4624-48b6-a968-0342540d1ef5.xhtml), *Elements
    of WebAssembly - Wat, Wasm, and the JavaScript API*, WebAssembly is integrated
    into the browser's JavaScript engine, but you'll need to make sure you're using
    a browser that supports it. In this section, we will provide instructions for
    cloning the book examples repository. We will also review how to quickly set up
    a local web server for testing and evaluating browser options to ensure that you're
    able to develop locally.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Wasm 模块交互和调试将在浏览器中完成，这意味着我们需要一种方式来提供包含示例文件文件夹的服务。正如我们在[第 2 章](0b30dfc9-4624-48b6-a968-0342540d1ef5.xhtml)，“WebAssembly
    元素 - Wat、Wasm 和 JavaScript API”中讨论的那样，WebAssembly 已集成到浏览器的 JavaScript 引擎中，但你需要确保你使用的是支持它的浏览器。在本节中，我们将提供克隆书籍示例仓库的说明。我们还将回顾如何快速设置本地
    Web 服务器以进行测试，并评估浏览器选项以确保你能够本地开发。
- en: Cloning the book examples repository
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 克隆书籍示例仓库
- en: 'You may want to clone the GitHub repository now with all of the examples contained
    in this book. You''ll definitely need to have the code available for [Chapter
    7](79019325-2d3e-452c-b680-ac90522aa4bf.xhtml), *Creating an Application from
    Scratch*, because the application''s code base is too large to fit into a single
    chapter. Select a folder on your hard drive and run the following command to clone
    the repository:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可能想要克隆包含本书所有示例的 GitHub 仓库。你肯定需要为[第 7 章](79019325-2d3e-452c-b680-ac90522aa4bf.xhtml)，“从头创建应用程序”准备代码，因为应用程序的代码库太大，无法放入单个章节中。在你的硬盘上选择一个文件夹，并运行以下命令以克隆仓库：
- en: '[PRE35]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Once the clone process is complete, you'll find that the examples are organized
    by chapter. If there are several examples in a chapter, they're broken down by
    subfolders within the chapter folder.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 克隆过程完成后，你会发现示例按章节组织。如果一个章节中有多个示例，它们将按子文件夹在章节文件夹内拆分。
- en: If you're using Windows, do not clone the repository into the `\Windows` folder
    or any other folder with limited permissions. Otherwise, you will run into issues
    when attempting to compile the examples.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用 Windows，请不要将仓库克隆到`\Windows`文件夹或任何权限受限的文件夹中。否则，在尝试编译示例时可能会遇到问题。
- en: Installing a local server
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装本地服务器
- en: 'We will use an `npm` package, `serve`, for serving up the files. To install,
    simply run this command:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一个`npm`包，`serve`，来提供文件服务。要安装，只需运行以下命令：
- en: '[PRE36]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Once installation is completed, you can serve up the files in any folder. To
    ensure that it''s working, let''s try serving up a local folder. The code for
    this section is located in the `/chapter-03-dev-env` folder of the `learn-webassembly`
    repository. Follow these instructions to validate your server installation:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，你可以在任何文件夹中提供文件服务。为了确保它正常工作，让我们尝试提供本地文件夹服务。本节代码位于`learn-webassembly`仓库的`/chapter-03-dev-env`文件夹中。按照以下说明验证你的服务器安装：
- en: First, let's create a folder that will contain the code samples we'll be working
    through for the remainder of the book (the examples use the name `book-examples`).
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们创建一个文件夹，该文件夹将包含我们在本书剩余部分将要处理的代码示例（示例使用名称 `book-examples`）。
- en: Launch VS Code and select File | Open... from the menu bar for macOS/Linux,
    and File | Open Folder... for Windows.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 VS Code 并从菜单栏选择文件 | 打开...（macOS/Linux），或者选择文件 | 打开文件夹...（Windows）。
- en: Next, select the folder, `book-examples`, and press the Open (or Select Folder)
    button.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，选择文件夹 `book-examples` 并按打开（或选择文件夹）按钮。
- en: Once VS Code finishes loading, right-click within the VS Code file explorer
    and select New Folder from the menu and name the folder `chapter-03-dev-env`.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦 VS Code 加载完成，在 VS Code 文件资源管理器中右键单击，从菜单中选择新建文件夹，并将文件夹命名为 `chapter-03-dev-env`。
- en: 'Select the `chapter-03-dev-env` folder and press the New File button (or *Cmd*/*Ctrl*
    + *N*) to create a new file. Name the file `index.html` and populate it with the
    following contents:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 `chapter-03-dev-env` 文件夹，然后按新建文件按钮（或 *Cmd*/*Ctrl* + *N*）来创建一个新文件。将文件命名为 `index.html`
    并填充以下内容：
- en: '[PRE37]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Create another file in the `chapter-03-dev-env` folder named `stuff.html` and
    populate it with the following contents:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `chapter-03-dev-env` 文件夹中创建另一个文件，命名为 `stuff.html` 并填充以下内容：
- en: '[PRE38]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'We will use VS Code''s integrated terminal to serve up the files. You can access
    this by selecting View | Integrated Terminal, or using the keyboard shortcut *Ctrl*
    + *`* (the *`* is the backtick key under the *Esc* key). Once loaded, run this
    command to serve up the working folder:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用 VS Code 的集成终端来提供文件。您可以通过选择视图 | 集成终端，或者使用键盘快捷键 *Ctrl* + *`*（*`* 是 *Esc*
    键下面的背引号键）来访问它。一旦加载，运行以下命令来提供工作文件夹：
- en: '[PRE39]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'You should see the following:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下内容：
- en: '![](img/00cc7407-20b7-42e2-8831-9dcedd076726.png)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00cc7407-20b7-42e2-8831-9dcedd076726.png)'
- en: Results of running the serve command in terminal
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 终端中运行 serve 命令的结果
- en: 'The `-l 8080` flag tells `serve` to serve the folder on port `8080`. The first
    link (`http://127.0.0.1:8080`) is only accessible on your computer. Any links
    below that can be used to access the page from another computer on your local
    network. If you navigate to the first link (`http://127.0.0.1:8080/index.html`)
    in your browser, you should see this:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '`-l 8080` 标志告诉 `serve` 在端口 `8080` 上提供文件夹。第一个链接（`http://127.0.0.1:8080`）只能在您的计算机上访问。以下链接可以用来从本地网络上的另一台计算机访问页面。如果您在浏览器中导航到第一个链接（`http://127.0.0.1:8080/index.html`），您应该看到以下内容：'
- en: '![](img/2c6d3092-1cb0-4e6e-8aa7-436774502b04.png)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c6d3092-1cb0-4e6e-8aa7-436774502b04.png)'
- en: Test page served up in Google Chrome
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Google Chrome 中提供的测试页面
- en: Clicking on the here link should bring you to the Stuff page (the address bar
    will show `127.0.0.1:8080/stuff.html`. If everything is working correctly, it's
    time to validate your browser.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 点击此处链接应将您带到 Stuff 页面（地址栏将显示 `127.0.0.1:8080/stuff.html`。如果一切正常，那么是时候验证您的浏览器了。
- en: Validating your browser
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证您的浏览器
- en: To ensure that you're able to test out the examples in a browser, you need to
    make sure that there's a global `WebAssembly` object available. To prevent any
    issues related to browser compatibility, I recommend that you have either Google
    Chrome or Mozilla Firefox installed for development. If you had either of these
    browsers installed beforehand, there's a very good chance that your browser is
    already valid. For the sake of being thorough, we will still cover the validation
    process. In this section, I will review the steps you can take to ensure that
    your browser supports WebAssembly.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保您能够在浏览器中测试示例，您需要确保有一个全局的 `WebAssembly` 对象可用。为了避免任何与浏览器兼容性相关的问题，我建议您安装 Google
    Chrome 或 Mozilla Firefox 进行开发。如果您之前安装了这些浏览器中的任何一个，那么您的浏览器很可能已经有效。为了彻底起见，我们仍将介绍验证过程。在本节中，我将回顾您可以采取的步骤以确保您的浏览器支持
    WebAssembly。
- en: Validating Google Chrome
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证 Google Chrome
- en: 'The process for validating Chrome pretty straightforward. Select the button
    that looks like three vertical dots (next to the address bar) and select **More
    Tools** | **Developer Tools** or use the keyboard shortcut *Cmd*/*Ctrl* + *Shift*
    + *I*:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 验证 Chrome 的过程非常直接。选择看起来像三个垂直点的按钮（位于地址栏旁边），然后选择 **更多工具** | **开发者工具**，或者使用键盘快捷键
    *Cmd*/*Ctrl* + *Shift* + *I*：
- en: '![](img/a8ed36a6-4d8f-4db0-9a43-316d02af59ee.png)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a8ed36a6-4d8f-4db0-9a43-316d02af59ee.png)'
- en: Accessing Developer Tools in Google Chrome
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Google Chrome 中访问开发者工具
- en: 'Once the Developer Tools window appears, select the Console tab, type `WebAssembly`,
    and press *Enter.* If you see this, your browser is valid:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦开发者工具窗口出现，选择控制台选项卡，输入 `WebAssembly` 并按 *Enter*。如果您看到以下内容，则您的浏览器是有效的：
- en: '![](img/8a26528d-e9a8-4b91-920d-52a4472250e0.png)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8a26528d-e9a8-4b91-920d-52a4472250e0.png)'
- en: Results of WebAssembly validation in Google Chrome's Developer Tools console
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: Google Chrome开发者工具控制台中WebAssembly验证的结果
- en: Validating Mozilla Firefox
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证Mozilla Firefox
- en: 'The process for validating Firefox is almost identical to that for Google Chrome.
    Select **Tools** | **Web Developer** | **Toggle Tools** from the menu bar or use
    the keyboard shortcut *Cmd*/*Ctrl* + *Shift* + *I*:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 验证Firefox的过程几乎与Google Chrome相同。从菜单栏选择**工具** | **Web开发者** | **切换工具**，或使用键盘快捷键*Cmd*/*Ctrl*
    + *Shift* + *I*：
- en: '![](img/ec99f38f-7129-4e8c-a154-e616dc89e593.png)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ec99f38f-7129-4e8c-a154-e616dc89e593.png)'
- en: Accessing Developer Tools in Mozilla Firefox
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 访问Mozilla Firefox的开发者工具
- en: 'Select the Console tab, click inside the command input box, type `WebAssembly`,
    and press *Enter*. You''ll see this if your version of Firefox is valid:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 选择控制台标签，点击命令输入框内，输入`WebAssembly`并按*Enter*。如果您使用的Firefox版本有效，您将看到以下内容：
- en: '![](img/a9aa4970-18d1-42f9-94fa-a572856d2b08.png)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a9aa4970-18d1-42f9-94fa-a572856d2b08.png)'
- en: Results of WebAssembly validation in Mozilla Firefox's Developer Tools console
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: Mozilla Firefox开发者工具控制台中WebAssembly验证的结果
- en: Validating other browsers
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证其他浏览器
- en: The validation process for other browsers is essentially the same; the only
    aspect of validation that differs across browsers is how to access the developer
    tools. If a `WebAssembly` object is available through the console of the browser
    you're using, you can use that browser for WebAssembly development.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 验证其他浏览器的过程基本上是相同的；验证的唯一不同之处在于如何访问开发者工具。如果通过您使用的浏览器控制台可以访问`WebAssembly`对象，您可以使用该浏览器进行WebAssembly开发。
- en: Other tools
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他工具
- en: In addition to the applications and tools we covered in the previous sections,
    there are some great tools that are free to use and rich in functionality that
    can greatly improve your development process. I won't have time to cover them
    all, but I'd like to highlight the ones I use regularly. In this section, I will
    briefly review some of the popular tooling and applications that are available
    for each platform.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 除了上一节中提到的应用程序和工具之外，还有一些免费且功能丰富的工具可以极大地提高您的开发过程。我没有时间涵盖所有这些工具，但我想要强调我经常使用的那些。在本节中，我将简要回顾每个平台可用的流行工具和应用程序。
- en: iTerm2 for macOS
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: macOS的iTerm2
- en: 'The default macOS installation includes Terminal application, Terminal, that
    is sufficient for use in this book. If you want a more full-featured Terminal,
    iTerm2 is an excellent option. It offers features such as splitting windows, extensive
    customization, multiple profiles, and a Toolbelt feature that can display notes,
    running jobs, command history, and so on. You can download the image file from
    the official website ([https://www.iterm2.com/](https://www.iterm2.com/)) and
    install it manually, or install iTerm with Homebrew-Cask using this command:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的macOS安装包括Terminal应用程序，Terminal，这对于本书的使用是足够的。如果您需要一个功能更全面的终端，iTerm2是一个很好的选择。它提供了分割窗口、广泛的自定义、多个配置文件以及一个可以显示笔记、正在运行的任务、命令历史等功能带的Toolbelt。您可以从官方网站([https://www.iterm2.com/](https://www.iterm2.com/))下载图像文件并手动安装，或者使用Homebrew-Cask命令安装iTerm：
- en: '[PRE40]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Here is iTerm2 running with the Toolbelt open and multiple editor windows:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 这是运行Toolbelt打开和多个编辑器窗口的iTerm2：
- en: '![](img/25f36b2a-329f-46ea-b070-2f580add757f.png)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/25f36b2a-329f-46ea-b070-2f580add757f.png)'
- en: ITerm instance with multiple panes and Toolbelt
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 带有多个面板和Toolbelt的ITerm实例
- en: Terminator for Ubuntu
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ubuntu的Terminator
- en: 'Terminator is the iTerm and `cmder` of Ubuntu, Terminal emulator that allows
    for multiple tabs and panes within a single window. Terminator also provides features
    such as drag and drop, find functionality, and a wide array of plugins and themes.
    You can install Terminator through `apt`. To ensure that you''re using the most
    recent version, run the following commands in Terminal:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: Terminator是Ubuntu的iTerm和`cmder`，是一个允许在单个窗口内进行多标签和面板的终端模拟器。Terminator还提供了拖放、查找功能以及一系列插件和主题。您可以通过`apt`安装Terminator。为确保您使用的是最新版本，请在终端中运行以下命令：
- en: '[PRE41]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Refer the screenshot:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 参考截图：
- en: '![](img/e8a7a5ed-adea-42a2-9d92-b9c55bc1a87b.png)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e8a7a5ed-adea-42a2-9d92-b9c55bc1a87b.png)'
- en: Terminator screenshot taken from http://technicalworldforyou.blogspot.com
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 来自http://technicalworldforyou.blogspot.com的Terminator截图
- en: B09984_03_17
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: B09984_03_17
- en: cmder for Windows
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Windows的cmder
- en: '`cmder` is a console emulator for Windows that adds a lot of functionality
    and features to the standard Command Prompt or PowerShell. It offers features
    such as multiple tabs and customizability. It allows you to open up instances
    of different shells within the same program. You can download and install it from
    the official website ([cmder.net](https://cmder.net)) or install it with Chocolatey
    using this command:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '`cmder` 是一个Windows的控制台模拟器，它为标准的命令提示符或PowerShell添加了许多功能和特性。它提供了多标签页和可定制性等功能。它允许你在同一个程序中打开不同shell的实例。你可以从官方网站([cmder.net](https://cmder.net))下载并安装它，或者使用以下命令通过Chocolatey安装：'
- en: '[PRE42]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'This is how it looks:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是它的样子：
- en: '![](img/2ec1d160-3abc-4e51-9614-da686a21035e.png)'
  id: totrans-247
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2ec1d160-3abc-4e51-9614-da686a21035e.png)'
- en: cmder screenshot from the official website
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: cmder官方网站截图
- en: Zsh and Oh-My-Zsh
  id: totrans-249
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Zsh和Oh-My-Zsh
- en: Zsh is an interactive shell that improves upon Bash. Oh-My-Zsh is a configuration
    manager for Zsh that has a wide array of useful plugins. You can see the whole
    list on their website ([https://github.com/robbyrussell/oh-my-zsh](https://github.com/robbyrussell/oh-my-zsh)).
    For example, if you want powerful autocomplete and syntax highlighting functionality
    in your CLI, there are plugins such as zsh-autosuggestion and zsh-syntax-highlighting.
    You can install and configure Zsh and Oh-My-Zsh on macOS, Linux, and Windows.
    The Oh-My-Zsh page has installation instructions as well as a list of themes and
    plugins.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: Zsh是一个改进Bash的交互式shell。Oh-My-Zsh是Zsh的配置管理器，它拥有许多有用的插件。你可以在他们的网站上看到完整的列表([https://github.com/robbyrussell/oh-my-zsh](https://github.com/robbyrussell/oh-my-zsh))。例如，如果你想在你的CLI中获得强大的自动完成和语法高亮功能，有如zsh-autosuggestion和zsh-syntax-highlighting这样的插件。你可以在macOS、Linux和Windows上安装和配置Zsh和Oh-My-Zsh。Oh-My-Zsh页面上有安装说明以及主题和插件的列表。
- en: Summary
  id: totrans-251
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered the installation and configuration process for the
    development tooling we will use to start working with WebAssembly. We discussed
    how to install Git, Node.js, and VS Code quickly and easily using a package manager
    for your operating systems (for example, Homebrew for macOS). The steps to configure
    VS Code were presented as well as the required and optional extensions you can
    add to enhance the development experience. We discussed how to install a local
    web server for testing and how to validate your browser to ensure that WebAssembly
    is supported. Finally, we briefly reviewed some additional tools you can install
    for your platform to aid in development.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了我们将用于开始使用WebAssembly的开发工具的安装和配置过程。我们讨论了如何使用操作系统的包管理器（例如，macOS的Homebrew）快速轻松地安装Git、Node.js和VS
    Code。我们还展示了配置VS Code的步骤，以及你可以添加以增强开发体验的必需和可选扩展。我们讨论了如何安装本地Web服务器进行测试，以及如何验证你的浏览器以确保支持WebAssembly。最后，我们简要回顾了一些你可以为你的平台安装的辅助开发工具。
- en: In [Chapter 4](d03f5dbf-8b6e-49aa-96be-9bb64681be24.xhtml), *Installing the
    Required Dependencies*, we'll install the required dependencies and test out the
    toolchain.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第4章](d03f5dbf-8b6e-49aa-96be-9bb64681be24.xhtml)“安装所需依赖”中，我们将安装所需的依赖项并测试工具链。
- en: Questions
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is the name of the package manager you should use for your operating system?
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该为你的操作系统使用哪个包管理器？
- en: Does BitBucket support Git?
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: BitBucket是否支持Git？
- en: Why are we using version 8 of Node.js instead of the most recent version?
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么我们使用Node.js的版本8而不是最新版本？
- en: How do you change the color theme in Visual Studio Code?
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何在Visual Studio Code中更改颜色主题？
- en: How do you access the Command Palette in Visual Studio Code?
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何在Visual Studio Code中访问命令面板？
- en: How do you check if your browser supports WebAssembly?
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何检查你的浏览器是否支持WebAssembly？
- en: Which of the tools in the *Other tools* section is supported on all three operating
    systems?
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“其他工具”部分中，哪些工具在所有三个操作系统上得到支持？
- en: Further reading
  id: totrans-262
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Homebrew: [https://brew.sh](https://brew.sh)'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Homebrew: [https://brew.sh](https://brew.sh)'
- en: '`apt` documentation: [https://help.ubuntu.com/lts/serverguide/apt.html.en](https://help.ubuntu.com/lts/serverguide/apt.html.en)'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`apt` 文档：[https://help.ubuntu.com/lts/serverguide/apt.html.en](https://help.ubuntu.com/lts/serverguide/apt.html.en)'
- en: 'Chocolatey: [https://chocolatey.org](https://chocolatey.org)'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Chocolatey: [https://chocolatey.org](https://chocolatey.org)'
- en: Git: [https://git-scm.com](https://git-scm.com)
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Git: [https://git-scm.com](https://git-scm.com)'
- en: 'Node.js: [https://nodejs.org/en](https://nodejs.org/en)'
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Node.js: [https://nodejs.org/en](https://nodejs.org/en)'
- en: 'GNU Make: [https://www.gnu.org/software/make](https://www.gnu.org/software/make)'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'GNU Make: [https://www.gnu.org/software/make](https://www.gnu.org/software/make)'
- en: 'VS Code: [https://code.visualstudio.com](https://code.visualstudio.com)'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'VS Code: [https://code.visualstudio.com](https://code.visualstudio.com)'
