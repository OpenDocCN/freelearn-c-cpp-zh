- en: Installing the Required Dependencies
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装所需的依赖项
- en: Now that you have your development environment set up and you're ready to start
    writing C, C++, and JavaScript, it's time to add the final piece of the puzzle.
    In order to generate `.wasm` files from our C/C++ code, we need to install and
    configure the **Emscripten SDK** (**EMSDK**).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经设置了开发环境，并且准备开始编写 C、C++ 和 JavaScript 代码，是时候添加拼图中的最后一部分了。为了从我们的 C/C++ 代码生成
    `.wasm` 文件，我们需要安装和配置 Emscripten SDK（EMSDK）。
- en: In this chapter, we'll discuss the development workflow and talk about how the
    EMSDK fits into the development process. Detailed instructions will be provided
    on how to install and configure the EMSDK on each platform, as well as any prerequisites.
    Once the installation and configuration process is complete, you'll test it out
    by writing and compiling some C code.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论开发工作流程，并讨论 EMSDK 如何融入开发过程。将提供详细的说明，说明如何在每个平台上安装和配置 EMSDK 以及任何先决条件。一旦安装和配置过程完成，你将通过编写和编译一些
    C 代码来测试它。
- en: 'Our goal for this chapter is to understand the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目标是理解以下内容：
- en: The overall development workflow when working with WebAssembly
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与 WebAssembly 一起工作时整体开发工作流程
- en: How the EMSDK relates to Emscripten and WebAssembly and why it's needed
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EMSDK 如何与 Emscripten 和 WebAssembly 相关以及为什么需要它
- en: How to install the prerequisites for the EMSDK
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何安装 EMSDK 的先决条件
- en: How to install and configure the EMSDK
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何安装和配置 EMSDK
- en: How to test the EMSDK to ensure it's working correctly
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何测试 EMSDK 以确保其正确工作
- en: The development workflow
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发工作流程
- en: The development workflow for WebAssembly is comparable to most other languages
    that require compilation and a build process. Before getting into the tooling
    setup, we will cover the development cycle. In this section, we will establish
    some context for the tooling we will install and configure in the rest of this
    chapter.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: WebAssembly 的开发工作流程与其他需要编译和构建过程的编程语言类似。在进入工具设置之前，我们将介绍开发周期。在本节中，我们将为我们将在此章的其余部分安装和配置的工具建立一些背景。
- en: Steps in the workflow
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作流程中的步骤
- en: 'For this book, we will write C and C++ code and compile it down to a Wasm module,
    but the workflow will be applicable to any programming language that compiles
    down to a `.wasm` file. The following diagram gives an overview of the process:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这本书，我们将编写 C 和 C++ 代码并将其编译成 Wasm 模块，但这个工作流程适用于任何可以编译成 `.wasm` 文件的编程语言。以下图表概述了该过程：
- en: '![](img/b43e1500-5c09-4f8d-a81c-665fad256758.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b43e1500-5c09-4f8d-a81c-665fad256758.png)'
- en: Steps in the development workflow
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 开发工作流程中的步骤
- en: This process will be used throughout the book for our examples, so you'll get
    an idea of how the project structure corresponds to the workflow. We'll use some
    of the tooling available to expedite and simplify the process, but the steps will
    still be the same.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程将在本书的示例中贯穿使用，这样你就可以了解项目结构如何与工作流程相对应。我们将使用一些可用的工具来加速和简化过程，但步骤仍然是相同的。
- en: Integrating Tooling into the workflow
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将工具集成到工作流程中
- en: There are many editors and tools available to simplify the development process.
    Fortunately, C/C++ and JavaScript have been around for quite some time, so you
    can take advantage of the options that suit you best. The list of tools for WebAssembly
    is considerably shorter, given the shorter duration of which the technology has
    existed, but they are out there.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多编辑器和工具可供使用，以简化开发过程。幸运的是，C/C++ 和 JavaScript 已经存在了相当长的时间，因此你可以利用最适合你的选项。考虑到这项技术存在的时间较短，WebAssembly
    的工具列表相对较短，但它们确实存在。
- en: The primary tool we'll use, VS Code, offers some excellent and useful features
    for simplifying the build and development process. In addition to using it for
    writing our code, we'll utilize VS Code's built-in Tasks feature to build the
    `.wasm` file from C/C++. By creating a `.vscode/tasks.json` file in the project
    root folder, we're able to specify all of the parameters associated with the build
    step and run it quickly using a keyboard shortcut. In addition to performing a
    build, we can start and stop a running Node.js process (that is, the local server
    in the workflow diagram). We'll cover how to add and configure these features
    in the next chapter.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将主要使用的工具，VS Code，提供了一些优秀且实用的功能，用于简化构建和开发过程。除了用它来编写我们的代码外，我们还将利用VS Code的内置任务功能，从C/C++构建`.wasm`文件。通过在项目根目录中创建一个`.vscode/tasks.json`文件，我们可以指定与构建步骤相关的所有参数，并使用快捷键快速运行它。除了执行构建外，我们还可以启动和停止一个运行的Node.js进程（即在工作流程图中的本地服务器）。我们将在下一章中介绍如何添加和配置这些功能。
- en: Emscripten and the EMSDK
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Emscripten和EMSDK
- en: We'll use Emscripten to compile our C/C++ code down to `.wasm` files. Up to
    this point, Emscripten has only briefly been mentioned in a general context. Since
    we'll use this tool and the corresponding Emscripten SDK (EMSDK) in the build
    process, it's important to understand what each technology is and the part it
    plays in the development workflow. In this section, we'll describe Emscripten's
    purpose and discuss its relationship to the EMSDK.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Emscripten将我们的C/C++代码编译成`.wasm`文件。到目前为止，Emscripten只在一般背景下被简要提及。由于我们将在构建过程中使用这个工具以及相应的Emscripten
    SDK（EMSDK），了解每种技术及其在开发工作流程中所扮演的角色非常重要。在本节中，我们将描述Emscripten的目的，并讨论它与EMSDK的关系。
- en: Emscripten overview
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Emscripten概述
- en: 'So what is Emscripten? Wikipedia provides the following definition:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 那Emscripten究竟是什么呢？维基百科提供了以下定义：
- en: '"Emscripten is a source-to-source compiler that runs as a back end to the LLVM
    compiler and produces a subset of JavaScript known as asm.js. It can also produce
    WebAssembly."'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: “Emscripten是一个源到源编译器，作为LLVM编译器的后端运行，并生成asm.js这一JavaScript子集。它还可以生成WebAssembly。”
- en: We discussed source-to-source compilers (or transpilers) in the first chapter
    and used TypeScript as an example. Transpilers convert source code in one programming
    language to equivalent source code in another programming language. To elaborate
    on Emscripten running as a backend to the LLVM compiler, we need to provide some
    additional details about LLVM.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在第一章中讨论了源到源编译器（或转译器），并以TypeScript为例。转译器将一种编程语言的源代码转换为另一种编程语言的等效源代码。为了详细说明Emscripten作为LLVM编译器的后端运行，我们需要提供一些关于LLVM的额外细节。
- en: 'The official website for LLVM ([https://llvm.org](https://llvm.org)) defines
    the LLVM as *a collection of modular and reusable compiler and toolchain technologies*.
    There are several sub-projects that make up LLVM, but we''ll be focusing on the
    two that Emscripten utilizes: Clang and the LLVM Core libraries. To understand
    how these pieces fit together, let''s review the design of a three-stage compiler:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: LLVM的官方网站([https://llvm.org](https://llvm.org))将LLVM定义为*一套模块化和可重用的编译器和工具链技术集合*。LLVM由几个子项目组成，但我们将重点关注Emscripten使用的两个：Clang和LLVM核心库。为了理解这些组件如何协同工作，让我们回顾一下三阶段编译器的结构：
- en: '![](img/fd686aef-f7e8-4aa4-a782-25c68ec02e2a.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fd686aef-f7e8-4aa4-a782-25c68ec02e2a.png)'
- en: Design of a general three-stage compiler
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 一般三阶段编译器的结构
- en: 'The process is relatively straightforward: three separate stages or *ends*
    handle the compilation process. This design allows for different frontends and
    backends for various programming languages and target architectures and completely
    decouples the machine code from the source code by using an intermediate representation.
    Now let''s associate each compilation stage with a component of the toolchain
    we''ll use to generate WebAssembly:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 该过程相对简单：三个独立阶段或*端*处理编译过程。这种设计允许为各种编程语言和目标架构提供不同的前端和后端，并通过使用中间表示法完全解耦机器代码和源代码。现在让我们将每个编译阶段与我们将用于生成WebAssembly的工具链组件关联起来：
- en: '![](img/3a332b22-6a36-4623-b326-dde857731fd7.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3a332b22-6a36-4623-b326-dde857731fd7.png)'
- en: Three-stage compilation using the LLVM, Clang, and Emscripten
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 使用LLVM、Clang和Emscripten的三阶段编译
- en: Clang is used to compile C/C++ down to LLVM's **Intermediate Representation**
    (**IR**), which Emscripten compiles to a Wasm module (binary format). The two
    diagrams also demonstrate the relationship between Wasm and machine code. You
    can think of WebAssembly as a CPU in the browser, with Wasm being the machine
    code on which it runs.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Clang 用于将 C/C++ 编译成 LLVM 的**中间表示**（**IR**），Emscripten 将其编译成 Wasm 模块（二进制格式）。两个图表还展示了
    Wasm 和机器代码之间的关系。你可以将 WebAssembly 视为浏览器中的 CPU，Wasm 是其运行的机器代码。
- en: Where does the EMSDK fit in?
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: EMSDK 在哪里？
- en: 'Emscripten refers to the toolchain used to compile C and C++ down to `asm.js`
    or WebAssembly. The EMSDK is used to manage the tools in the toolchain and the
    corresponding configuration. This eliminates the need for complex environment
    setup and prevents issues with incompatible versions of tooling. By installing
    the EMSDK, we have all of the tooling we need (with the exception of the prerequisites)
    to use the Emscripten compiler. The following diagram is a visual representation
    of the Emscripten toolchain (with the EMSDK shown in dark gray):'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Emscripten 指的是用于将 C 和 C++ 编译成 `asm.js` 或 WebAssembly 的工具链。EMSDK 用于管理工具链中的工具和相应的配置。这消除了复杂的环境设置需求，并防止了工具版本不兼容的问题。通过安装
    EMSDK，我们就拥有了使用 Emscripten 编译器所需的所有工具（除了先决条件之外）。以下图表是 Emscripten 工具链的视觉表示（EMSDK
    以深灰色显示）：
- en: '![](img/c88f7e5e-eefe-454f-a218-816b9caebac5.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c88f7e5e-eefe-454f-a218-816b9caebac5.png)'
- en: Emscripten Toolchain (modified slightly from emscripten.org)
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Emscripten 工具链（从 emscripten.org 稍作修改）
- en: Now that you have a better understanding of Emscripten and the EMSDK, let's
    move on to the installation process for the prerequisites.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 既然你对 Emscripten 和 EMSDK 有更好的理解，让我们继续进行先决条件的安装过程。
- en: Installing the prerequisites
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装先决条件
- en: Before installing and configuring the EMSDK, we'll need to install some prerequisites.
    You installed two of the prerequisites in [Chapter 3](706c89b2-c820-4fb0-906c-2f2e49602d27.xhtml),
    *Setting Up a Development Environment*: Node.js and Git. Each platform has slightly
    different installation processes and tooling requirements. In this section, we
    cover the installation process for the prerequisite tooling for each platform.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装和配置 EMSDK 之前，我们需要安装一些先决条件。你在[第 3 章](706c89b2-c820-4fb0-906c-2f2e49602d27.xhtml)，*设置开发环境*：Node.js
    和 Git 中安装了两个先决条件。每个平台都有略微不同的安装过程和工具需求。在本节中，我们涵盖了每个平台的先决条件工具的安装过程。
- en: Common prerequisites
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见先决条件
- en: 'It''s possible that you already have all of the prerequisites installed. Here
    are the three that you''ll need regardless of the platform:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 有可能你已经安装了所有先决条件。以下是你无论在哪个平台都需要安装的三个工具：
- en: Git
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git
- en: Node.js
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js
- en: Python 2.7
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 2.7
- en: Note the Python version; this is important because installing the wrong version
    could cause the installation process to fail. If you followed along in [Chapter
    2](0b30dfc9-4624-48b6-a968-0342540d1ef5.xhtml), *Elements of WebAssembly - Wat,
    Wasm, and the JavaScript API*, and installed Node.js and Git, all that's left
    is to install Python 2.7 and any additional prerequisites specified for your platform.
    The Python installation process for each platform will be specified in the following
    subsections.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 Python 版本；这很重要，因为安装错误的版本可能会导致安装过程失败。如果你在[第 2 章](0b30dfc9-4624-48b6-a968-0342540d1ef5.xhtml)，*WebAssembly
    元素 - Wat、Wasm 和 JavaScript API* 中跟随，并安装了 Node.js 和 Git，那么剩下的就是安装 Python 2.7 和为你平台指定的任何其他先决条件。每个平台的
    Python 安装过程将在以下子节中指定。
- en: Python is a high-level programming language used for general-purpose programming.
    If you'd like to learn more, check out the official website at [https://www.python.org/](https://www.python.org/).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Python 是一种用于通用编程的高级编程语言。如果你想了解更多，请访问官方网站 [https://www.python.org/](https://www.python.org/)。
- en: Installing the prerequisites on macOS
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 macOS 上安装先决条件
- en: 'There are three additional tools you''ll need to install prior to installing
    the EMSDK:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装 EMSDK 之前，你需要安装三个额外的工具：
- en: Xcode
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Xcode
- en: Xcode Command Line Tools
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Xcode 命令行工具
- en: CMake
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CMake
- en: 'You can install Xcode from the macOS App Store. If you already had Xcode installed,
    you can check if the Command Line Tools are installed by going to Xcode | Preferences
    | Locations and checking if the Command Line Tools option has a value. The Command
    Line Tools should have already been installed if you installed the Homebrew package
    manager:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从 macOS App Store 安装 Xcode。如果你已经安装了 Xcode，你可以通过转到 Xcode | Preferences | Locations
    并检查命令行工具选项是否有值来检查是否已安装命令行工具。如果你安装了 Homebrew 包管理器，命令行工具应该已经安装了：
- en: '![](img/1fec0953-9278-4312-b286-c5ed34ec45e3.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1fec0953-9278-4312-b286-c5ed34ec45e3.png)'
- en: Checking the current version of the Xcode Command Line Tools
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 检查 Xcode 命令行工具的当前版本
- en: 'If you don''t see that, open up Terminal and run this command:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有看到，请打开终端并运行以下命令：
- en: '[PRE0]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Once complete, you can install CMake by running this command:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，你可以通过运行以下命令来安装 CMake：
- en: '[PRE1]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Prior to installing Python, run this command:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装 Python 之前，请运行以下命令：
- en: '[PRE2]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If you see `Python 2.7.xx` (where `xx` is the patch version and can be any
    number), you''re ready to install the EMSDK. If you get an error saying the Python
    command wasn''t found or you see `Python 3.x.xx`, I recommend you install `pyenv`,
    a Python Version manager. To install `pyenv`, run this command:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到 `Python 2.7.xx`（其中 `xx` 是补丁版本，可以是任何数字），你就可以安装 EMSDK 了。如果你收到错误信息说找不到 python
    命令，或者你看到 `Python 3.x.xx`，我建议你安装 `pyenv`，一个 Python 版本管理器。要安装 `pyenv`，运行以下命令：
- en: '[PRE3]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You''ll need to take some additional configuration steps to finalize the installation.
    Follow the installation instructions for Homebrew at [https://github.com/pyenv/pyenv#homebrew-on-mac-os-x](https://github.com/pyenv/pyenv#homebrew-on-mac-os-x).
    After installing and configuring `pyenv`, run this command to install Python 2.7:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成安装，你需要进行一些额外的配置步骤。按照 Homebrew 的安装说明进行操作，请参阅 [https://github.com/pyenv/pyenv#homebrew-on-mac-os-x](https://github.com/pyenv/pyenv#homebrew-on-mac-os-x)。安装和配置
    `pyenv` 后，运行以下命令来安装 Python 2.7：
- en: '[PRE4]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'After the installation is complete, run this command:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，运行以下命令：
- en: '[PRE5]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To ensure you''re using the correct version of Python, run this command:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保你使用的是正确的 Python 版本，运行以下命令：
- en: '[PRE6]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You should see Python `2.7.xx`, where `xx` is the patch version (I was seeing
    `2.7.10`, which will work fine).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到 Python `2.7.xx`，其中 `xx` 是补丁版本（我看到了 `2.7.10`，这将正常工作）。
- en: Installing the prerequisites on Ubuntu
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Ubuntu 上安装先决条件
- en: 'Ubuntu should already have Python 2.7 installed. You can confirm this by running
    this command:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Ubuntu 应该已经安装了 Python 2.7。你可以通过运行以下命令来确认：
- en: '[PRE7]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If you see Python `2.7.xx` (where `xx` is the patch version and can be any
    number), you''re ready to install the EMSDK. If you get an error saying the python
    command wasn''t found or you see `Python 3.x.xx`, I recommend you install `pyenv`,
    a Python version manager. Before installing `pyenv`, check if you have `curl`
    installed. You can do this by running the following command:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到 Python `2.7.xx`（其中 `xx` 是补丁版本，可以是任何数字），你就可以安装 EMSDK 了。如果你收到错误信息说找不到 python
    命令，或者你看到 `Python 3.x.xx`，我建议你安装 `pyenv`，一个 Python 版本管理器。在安装 `pyenv` 之前，检查你是否已经安装了
    `curl`。你可以通过运行以下命令来做到这一点：
- en: '[PRE8]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If you see a version number and other information, `curl` is installed. If
    not, you can install `curl` by running the following command:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到了版本号和其他信息，`curl` 已经安装了。如果没有，你可以通过运行以下命令来安装 `curl`：
- en: '[PRE9]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Once the `curl` installation is complete, run this command to install `pyenv`:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 `curl` 安装完成，运行以下命令来安装 `pyenv`：
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'After installing and configuring pyenv, run this command to install Python
    2.7:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装和配置 pyenv 后，运行以下命令来安装 Python 2.7：
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If you encounter build issues, navigate to the *Common build problems* page
    at [https://github.com/pyenv/pyenv/wiki/common-build-problems](https://github.com/pyenv/pyenv/wiki/common-build-problems).
    After the installation is complete, run this command:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果遇到构建问题，请导航到 [https://github.com/pyenv/pyenv/wiki/common-build-problems](https://github.com/pyenv/pyenv/wiki/common-build-problems)
    上的“常见构建问题”页面。安装完成后，运行以下命令：
- en: '[PRE12]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To ensure you''re using the correct version of Python, run this command:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保你使用的是正确的 Python 版本，运行以下命令：
- en: '[PRE13]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: You should see `Python 2.7.xx`, where `xx` is the patch version (I was seeing
    `2.7.10`, which will work fine).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到 `Python 2.7.xx`，其中 `xx` 是补丁版本（我看到了 `2.7.10`，这将正常工作）。
- en: Installing the prerequisites on Windows
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Windows 上安装先决条件
- en: 'The only additional prerequisite for Windows is Python 2.7\. Before attempting
    the installation, run this command:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 的唯一附加先决条件是 Python 2.7。在尝试安装之前，运行以下命令：
- en: '[PRE14]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If you see `Python 2.7.xx` (where `xx` is the patch version and can be any
    number), you''re ready to install the EMSDK. If you get an error saying the Python
    command wasn''t found, or you see `Python 3.x.xx` and Python 2.7 isn''t installed
    on your system, run this command to install Python 2.7:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您看到 `Python 2.7.xx`（其中 `xx` 是补丁版本，可以是任何数字），您就可以安装 EMSDK。如果您收到错误消息说找不到 Python
    命令，或者您看到 `Python 3.x.xx` 而且您的系统上没有安装 Python 2.7，请运行此命令安装 Python 2.7：
- en: '[PRE15]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If you saw `Python 3.x.xx` prior to installing Python 2.7, you should be able
    to change the current Python version by updating your path. Before attempting
    the EMSDK installation, run this command to set Python to 2.7:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在安装 Python 2.7 之前您看到了 `Python 3.x.xx`，您应该能够通过更新您的路径来更改当前的 Python 版本。在尝试安装
    EMSDK 之前，运行此命令将 Python 设置为 2.7：
- en: '[PRE16]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Installing and configuring the EMSDK
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和配置 EMSDK
- en: If you have all of the prerequisites installed, you're ready to install the
    EMSDK. The process for getting the EMSDK up and running is relatively straightforward.
    In this section, we cover the installation process for the EMSDK and demonstrate
    how to update your VS Code C/C++ configuration to accommodate for Emscripten.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已安装所有先决条件，您就可以安装 EMSDK。将 EMSDK 设置起来并运行的过程相对简单。在本节中，我们介绍了 EMSDK 的安装过程，并演示了如何更新您的
    VS Code C/C++ 配置以适应 Emscripten。
- en: Installation process across all platforms
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 所有平台上的安装过程
- en: 'First, select a folder to install the EMSDK. I created a folder at `~/Tooling`
    (or `C:\Users\Mike\Tooling` on Windows). In a terminal, `cd` into the folder you
    just created and run this command:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，选择一个文件夹来安装 EMSDK。我在 `~/Tooling`（或在 Windows 上为 `C:\Users\Mike\Tooling`）创建了一个文件夹。在终端中，使用
    `cd` 进入您刚刚创建的文件夹并运行此命令：
- en: '[PRE17]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Once the clone process is complete, follow the instructions to complete the
    installation from the section below that corresponds to your platform.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦克隆过程完成，按照以下部分中对应您平台的说明完成安装。
- en: Installation on macOS and Ubuntu
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 macOS 和 Ubuntu 上的安装
- en: 'Once the clone process is complete, run each of the commands from the following
    code snippet. If you see a message recommending that you run `git pull` instead
    of `./emsdk update`, use the `git pull` command prior to running the `./emsdk
    install latest` command:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦克隆过程完成，运行以下代码片段中的每个命令。如果您看到一条消息建议您运行 `git pull` 而不是 `./emsdk update`，请在运行
    `./emsdk install latest` 命令之前使用 `git pull` 命令：
- en: '[PRE18]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The `source ./emsdk_env.sh` command will activate the environment variables
    in the current Terminal, which means every time you create a new Terminal instance,
    you''d have to re-run it. To prevent having to take this step, you can add the
    following line to your Bash or Zsh configuration file (that is, `~/.bash_profile`
    or `~/.zshrc`):'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`source ./emsdk_env.sh` 命令将激活当前终端中的环境变量，这意味着每次您创建一个新的终端实例时，您都需要重新运行它。为了避免需要执行此步骤，您可以将以下行添加到您的
    Bash 或 Zsh 配置文件中（即 `~/.bash_profile` 或 `~/.zshrc`）：'
- en: '[PRE19]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'If you installed the EMSDK in a different location, make sure that you update
    the path to reflect this. Adding this line to your configuration file will run
    that environment update command automatically so you can start using the EMSDK
    immediately. To ensure you can use the Emscripten compiler, run this command:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在安装 EMSDK 到不同位置，请确保更新路径以反映这一点。将此行添加到您的配置文件中将自动运行该环境更新命令，这样您就可以立即开始使用 EMSDK。为了确保您可以使用
    Emscripten 编译器，运行此命令：
- en: '[PRE20]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: If you see a message with version information, the setup was successful. If
    you see an error message stating that the command was not found, double-check
    your configuration. You may have specified an invalid path for the `emsdk_env.sh`
    in your Bash or Zsh configuration file.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您看到带有版本信息的消息，则设置成功。如果您看到一条错误消息说命令未找到，请检查您的配置。您可能在 Bash 或 Zsh 配置文件中指定了无效的 `emsdk_env.sh`
    路径。
- en: Installation and configuration on Windows
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Windows 上的安装和配置
- en: 'Before completing the installation, I recommend you use **PowerShell** going
    forward. The examples in this book will be using PowerShell inside `cmder`. Once
    the clone process is complete, run each of the commands given in the following
    code snippet. If you see a message recommending that you run `git pull` instead
    of `./emsdk update`, use the `git pull` command prior to running the `./emsdk
    install latest` command:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成安装之前，我建议您今后使用 **PowerShell**。本书中的示例将在 `cmder` 中使用 PowerShell。一旦克隆过程完成，运行以下代码片段中给出的每个命令。如果您看到一条消息建议您运行
    `git pull` 而不是 `./emsdk update`，请在运行 `./emsdk install latest` 命令之前使用 `git pull`
    命令：
- en: '[PRE21]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The `--global` flag in the `.\emsdk activate` command allows you to run `emcc`
    without having to run a script to set the environment variables each session.
    To ensure you can use the Emscripten compiler, restart your CLI and run this command:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`.\emsdk activate` 命令中的 `--global` 标志允许您在不需要为每个会话运行脚本来设置环境变量的情况下运行 `emcc`。为了确保您可以使用
    Emscripten 编译器，重新启动您的 CLI 并运行此命令：'
- en: '[PRE22]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: If you see a message with version information, the setup was successful.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您看到带有版本信息的消息，则设置成功。
- en: Configuration in VS Code
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: VS Code 中的配置
- en: 'If you haven''t already done so, create a folder that will contain the code
    samples we''ll be working through (the examples use the name `book-examples`).
    Open this folder in VS Code, press the *F1* key, and select C/Cpp: Edit Configurations…
    to create a `.vscode/c_cpp_properties.json` file in the root of your project.
    It should open the file automatically. Add the following line to the `browse.path`
    array: `"${env:EMSCRIPTEN}/system/include"`. This will prevent errors being thrown
    if you include the `emscripten.h` header. You may need to manually create the
    `browse` object with a `path` entry if it didn''t generate one automatically.
    The following snippet represents the updated configuration file on Ubuntu:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '如果您还没有这样做，创建一个将包含我们将要处理的代码示例的文件夹（示例使用名称 `book-examples`）。在 VS Code 中打开此文件夹，按
    *F1* 键，然后选择 C/Cpp: Edit Configurations… 以在您的项目根目录中创建一个 `.vscode/c_cpp_properties.json`
    文件。它应该会自动打开文件。将以下行添加到 `browse.path` 数组中：`"${env:EMSCRIPTEN}/system/include"`。这将防止在包含
    `emscripten.h` 头文件时抛出错误。如果您没有自动生成 `browse` 对象，您可能需要手动创建具有 `path` 条目的 `browse`
    对象。以下片段表示在 Ubuntu 上的更新配置文件：'
- en: '[PRE23]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Testing the compiler
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试编译器
- en: After installing and configuring the EMSDK, you'll need to test it to ensure
    you're able to generate Wasm modules from C/C++ code. The easiest way to test
    it is to compile some code using the `emcc` command and try running it in a browser.
    In this section, we'll validate the EMSDK installation by writing and compiling
    some simple C code and evaluating the Wat associated with the `.wasm` output.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装和配置 EMSDK 之后，您需要测试它以确保您能够从 C/C++ 代码生成 Wasm 模块。测试的最简单方法是使用 `emcc` 命令编译一些代码，并在浏览器中尝试运行它。在本节中，我们将通过编写和编译一些简单的
    C 代码以及评估与 `.wasm` 输出相关的 Wat 来验证 EMSDK 的安装。
- en: The C code
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: C 代码
- en: We'll use some very simple C code to test our compiler installation. We won't
    need to import any headers or external libraries. We won't use C++ for this test
    because we need to perform an extra step with C++ to prevent name mangling, which
    we'll describe in greater detail in [Chapter 6](cdf64596-59dd-4805-8509-7315b7760b1e.xhtml), *Interacting
    with JavaScript and Debugging*. The code for this section is located in the `/chapter-04-installing-deps` folder
    of the `learn-webassembly` repository. Follow the instructions listed here to
    test out the EMSDK.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一些非常简单的 C 代码来测试我们的编译器安装。我们不需要导入任何头文件或外部库。我们不会使用 C++ 进行此测试，因为我们需要执行一个额外的步骤来防止名称修饰，我们将在第
    6 章 [交互 JavaScript 和调试](cdf64596-59dd-4805-8509-7315b7760b1e.xhtml)中更详细地描述。本节的代码位于
    `learn-webassembly` 存储库的 `/chapter-04-installing-deps` 文件夹中。按照此处列出的说明来测试 EMSDK。
- en: 'Create a subfolder named `/chapter-04-installing-deps` in your `/book-examples`
    folder. Next, create a new file in this folder named `main.c` and populate it
    with the following contents:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的 `/book-examples` 文件夹中创建一个名为 `/chapter-04-installing-deps` 的子文件夹。接下来，在此文件夹中创建一个名为
    `main.c` 的新文件，并填充以下内容：
- en: '[PRE24]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Compiling the C code
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编译 C 代码
- en: 'In order to compile a C/C++ file with Emscripten, we''ll use the `emcc` command.
    We need to pass some arguments to the compiler to ensure we get a valid output
    that we can utilize in the browser. To generate a Wasm file from a C/C++ file,
    the command follows this format:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用 Emscripten 编译 C/C++ 文件，我们将使用 `emcc` 命令。我们需要向编译器传递一些参数以确保我们得到一个有效的输出，我们可以在浏览器中使用它。要从
    C/C++ 文件生成 Wasm 文件，命令遵循以下格式：
- en: '[PRE25]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Here''s a breakdown of each of the arguments for the `emcc` command:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是 `emcc` 命令的每个参数的分解：
- en: '| **Argument** | **Description** |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| **参数** | **描述** |'
- en: '| `<file.c>` | Path of the C or C++ input file that will be compiled down to
    a Wasm module; we''ll replace this with the actual file path when we run the command.
    |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| `<file.c>` | 将被编译为 Wasm 模块的 C 或 C++ 输入文件的路径；当我们运行命令时，我们将用实际的文件路径替换它。|'
- en: '| `-Os` | Compiler optimization level. This optimization flag allows for module
    instantiation without requiring Emscripten''s glue code. |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| `-Os` | 编译器优化级别。此优化标志允许模块实例化而不需要 Emscripten 的粘合代码。|'
- en: '| `-s WASM=1` | Tells the compiler to compile code to WebAssembly. |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| `-s WASM=1` | 告诉编译器将代码编译为 WebAssembly。|'
- en: '| `-s SIDE_MODULE=1` | Ensures only a `WebAssembly` module is output (no glue
    code). |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| `-s SIDE_MODULE=1` | 确保只输出 `WebAssembly` 模块（没有粘合代码）。|'
- en: '| `-s BINARYEN_ASYNC_COMPILATION=0` | From official docs:Whether to compile
    the wasm asynchronously, which is more efficient and does not block the main thread.
    This is currently required for all but the smallest modules to run in V8*.* |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| `-s BINARYEN_ASYNC_COMPILATION=0` | 来自官方文档：是否异步编译 wasm，这更高效且不会阻塞主线程。目前，除了最小的模块外，所有模块都需要此设置才能在
    V8 中运行。|'
- en: '| `-o <file.wasm>` | Path of output file `.wasm` file. We''ll replace this
    with the desired output path when we run the command. |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| `-o <file.wasm>` | 输出文件的 `.wasm` 路径。当我们运行命令时，我们将用所需的输出路径替换此路径。|'
- en: 'To test if Emscripten is working correctly, open the integrated terminal in
    VS Code and run the following commands:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试 Emscripten 是否正常工作，请打开 VS Code 中的集成终端并运行以下命令：
- en: '[PRE26]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: It may take a minute to compile the file the first time, but subsequent builds
    will be much faster. If the compilation was successful, you should see a `main.wasm`
    file in the `/chapter-04-installing-deps` folder. If you encounter an error, Emscripten's
    error message should be descriptive enough to help you correct the issue.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 首次编译文件可能需要一分钟，但后续构建将快得多。如果编译成功，您应该在 `/chapter-04-installing-deps` 文件夹中看到一个 `main.wasm`
    文件。如果您遇到错误，Emscripten 的错误信息应该足够详细，以帮助您纠正问题。
- en: 'If everything completed successfully, you can view the Wat associated with
    the `main.wasm` file by right-clicking `main.wasm` in VS Code''s file explorer
    and selecting Show WebAssembly from the context menu. The output should look like
    this:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利完成，您可以通过在 VS Code 的文件资源管理器中右键单击 `main.wasm` 并从上下文菜单中选择“显示 WebAssembly”来查看与
    `main.wasm` 文件关联的 Wat。输出应如下所示：
- en: '[PRE27]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: If the compiler ran successfully, you're ready to move on to the next step and
    write JavaScript code to interact with the module, which we'll cover in the next
    chapter.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如果编译器运行成功，您就可以进入下一步，编写 JavaScript 代码与模块交互，这将在下一章中介绍。
- en: Summary
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered the overall development workflow when working with
    WebAssembly. In order to generate our `.wasm` files, we're using Emscripten, which
    requires the installation of the EMSDK. Prior to reviewing any installation details,
    we discussed the technologies under the hood and described how they relate to
    each other and to WebAssembly. We covered each of the steps required to get EMDSK
    working locally on your computer. The installation process for the EMSDK on each
    platform was presented, as well as the installation and configuration instructions
    for the EMSDK. After installing the EMSDK , we tested the compiler (no to). That
    was the `emcc` command we ran in the previous section. Using the `emcc` command
    on a simple C code file to ensure Emscripten was working correctly. In the next
    chapter, we'll walk through the process of creating and loading your first module!
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了与 WebAssembly 一起工作的整体开发工作流程。为了生成我们的 `.wasm` 文件，我们使用 Emscripten，这需要安装
    EMSDK。在审查任何安装细节之前，我们讨论了底层的科技，并描述了它们如何相互关联以及与 WebAssembly 的关系。我们涵盖了在您的计算机上本地运行
    EMDSK 所需的每个步骤。每个平台的 EMSDK 安装过程都得到了展示，以及 EMSDK 的安装和配置说明。在安装 EMSDK 之后，我们测试了编译器（no
    to）。这就是我们在上一节中运行的 `emcc` 命令。使用 `emcc` 命令在简单的 C 代码文件上运行以确保 Emscripten 正常工作。在下一章中，我们将逐步介绍创建和加载您的第一个模块的过程！
- en: Questions
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What are the five steps in the development workflow?
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开发工作流程中的五个步骤是什么？
- en: Which stage or end does Emscripten represent in the compilation process?
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Emscripten 在编译过程中代表哪个阶段或终点？
- en: What does IR stand for (LLVM's output)?
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: IR 代表什么（LLVM 的输出）？
- en: What role does the EMSDK play with regard to Emscripten?
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: EMSDK 在 Emscripten 中扮演什么角色？
- en: Which EMSDK prerequisites are required on all three platforms (macOS, Windows,
    and Linux)?
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在所有三个平台（macOS、Windows 和 Linux）上需要哪些 EMSDK 先决条件？
- en: Why do you need to run the `emsdk_env` script before you can use the Emscripten
    compiler?
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么在使用 Emscripten 编译器之前需要运行 `emsdk_env` 脚本？
- en: Why do you need to add the `"${env:EMSCRIPTEN}/system/include"` path to the
    C/Cpp configuration file?
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么需要将 `"${env:EMSCRIPTEN}/system/include"` 路径添加到 C/Cpp 配置文件中？
- en: What is the command used to compile C/C++ down to Wasm modules?
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译 C/C++ 到 Wasm 模块的命令是什么？
- en: What does the `-Os` compiler flag represent?
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`-Os` 编译器标志代表什么？'
- en: Further reading
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Emscripten: [http://emscripten.org](http://emscripten.org)'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Emscripten：[http://emscripten.org](http://emscripten.org)
- en: The LLVM Compiler Infrastructure Project: [https://llvm.org](https://llvm.org)
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LLVM 编译器基础设施项目：[https://llvm.org](https://llvm.org)
- en: 'C++ programming with Visual Studio Code: [https://code.visualstudio.com/docs/languages/cpp](https://code.visualstudio.com/docs/languages/cpp)'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Visual Studio Code 进行 C++ 编程：[https://code.visualstudio.com/docs/languages/cpp](https://code.visualstudio.com/docs/languages/cpp)
