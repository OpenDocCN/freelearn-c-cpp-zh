["```cpp\nQT += 3dcore 3drender 3dinput 3dlogic 3danimation \\\n      qml quick 3dquick 3dquickextras 3dquickscene2d\n```", "```cpp\nimport Qt3D.Core 2.10\nimport Qt3D.Render 2.10\nimport Qt3D.Extras 2.10\nimport Qt3D.Input 2.0\nimport Qt3D.Logic 2.0\nimport QtQuick.Scene2D 2.9\nimport QtQuick.Scene3D 2.0\n```", "```cpp\nQT += 3dcore 3drender 3dinput quick 3dquickextras\n```", "```cpp\n#include <QGuiApplication>\n#include <Qt3DQuickWindow>\n\nint main(int argc, char* argv[])\n{\n    QGuiApplication app(argc, argv);\n    Qt3DExtras::Quick::Qt3DQuickWindow window;\n    window.setSource(QUrl(\"qrc:/main.qml\"));\n    window.show();\n    return app.exec();\n}\n```", "```cpp\nimport Qt3D.Core 2.10\nimport Qt3D.Render 2.10\nimport Qt3D.Input 2.0\nimport Qt3D.Extras 2.10\n\nEntity {\n    components: [\n        RenderSettings {\n            activeFrameGraph: ForwardRenderer {\n                clearColor: \"black\"\n                camera: Camera {\n                    id: camera\n                    projectionType: CameraLens.PerspectiveProjection\n                    fieldOfView: 45\n                    nearPlane : 0.1\n                    farPlane : 1000.0\n                    position: Qt.vector3d(0.0, 40.0, -40.0)\n                    upVector: Qt.vector3d(0.0, 1.0, 0.0)\n                    viewCenter: Qt.vector3d(0.0, 0.0, 0.0)\n                }\n            }\n        },\n        InputSettings {}\n    ]\n}\n```", "```cpp\nEntity {\n    components: [\n        RenderSettings { /* ... */ },\n        InputSettings {}\n    ]\n    FirstPersonCameraController {\n camera: camera\n }\n Entity {\n components: [\n DirectionalLight {\n color: Qt.rgba(1, 1, 1)\n intensity: 0.5\n worldDirection: Qt.vector3d(0, -1, 0)\n }\n ]\n }\n Entity {\n components: [\n CuboidMesh {},\n DiffuseSpecularMaterial { ambient: \"#aaa\"; shininess: 100; },\n Transform { scale: 10 }\n ]\n }\n}\n```", "```cpp\nEntity {\n    //...\n    Scene { }\n}\n```", "```cpp\nEntity {\n    id: sceneRoot\n    Entity {\n        components: [\n            DiffuseSpecularMaterial {\n                ambient: \"#444\"\n            },\n            CuboidMesh {},\n            Transform {\n                scale3D: Qt.vector3d(40, 1, 40)\n            }\n        ]\n    }\n}\n```", "```cpp\nimport Qt3D.Core 2.10\nimport Qt3D.Render 2.10\nimport Qt3D.Extras 2.10\nEntity {\n    property int index\n    components: [\n        CylinderMesh {\n            id: mesh\n            radius: 0.5\n            length: 9\n            slices: 30\n        },\n        DiffuseSpecularMaterial {\n            ambient: \"#111\"\n        },\n        Transform {\n            id: transform\n            translation: {\n                var radius = 8;\n                var step = 2 * Math.PI / 3;\n                return Qt.vector3d(radius * Math.cos(index * step),\n                                   mesh.length / 2 + 0.5,\n                                   radius * Math.sin(index * step));\n\n            }\n        }\n    ]\n}\n```", "```cpp\nEntity {\n    id: sceneRoot\n    //...\n    Rod { index: 0 }\n    Rod { index: 1 }\n    Rod { index: 2 }\n}\n```", "```cpp\nEntity {\n    id: sceneRoot\n property variant rods: []\n    Entity { /* ... */}\n Component.onCompleted: {\n var rodComponent = Qt.createComponent(\"Rod.qml\");\n if(rodComponent.status !== Component.Ready) {\n console.log(rodComponent.errorString());\n return;\n }\n for(var i = 0; i < 3; i++) {\n var rod = rodComponent.createObject(sceneRoot, { index: i });\n rods.push(rod);\n }\n }\n}\n```", "```cpp\nimport Qt3D.Core 2.10\nimport Qt3D.Render 2.10\nimport Qt3D.Extras 2.10\n\nEntity {\n    property int index\n    property alias pos: transform.translation\n    components: [\n        DiffuseSpecularMaterial {\n            ambient: Qt.hsla(index / 8, 1, 0.5)\n        },\n        TorusMesh {\n            minorRadius: 1.1\n            radius: 2.5 + 1 * index\n            rings: 80\n        },\n        Transform {\n            id: transform\n            rotationX: 90\n            scale: 0.45\n        }\n    ]\n}\n```", "```cpp\nreadonly property alias pos: transform.translation\nproperty var disks: []\n```", "```cpp\nvar startingRod = rods[0];\nfor(i = 0; i < 8; i++) {\n    var disk = diskComponent.createObject(sceneRoot, { index: i });\n    disk.pos = Qt.vector3d(startingRod.pos.x, 8 - i, startingRod.pos.z);\n    startingRod.disks.unshift(disk);\n}\n```", "```cpp\nEntity {\n    //...\n    KeyboardDevice { id: keyboardDevice }\n    MouseDevice { id: mouseDevice }\n    LogicalDevice {\n        actions: [\n            Action {\n                inputs: ActionInput {\n                    sourceDevice: keyboardDevice\n                    buttons: [Qt.Key_A]\n                }\n                onActiveChanged: {\n                    console.log(\"A changed: \", active);\n                }\n            },\n            Action {\n                inputs: ActionInput {\n                    sourceDevice: keyboardDevice\n                    buttons: [Qt.Key_B]\n                }\n                onActiveChanged: {\n                    console.log(\"B changed: \", active);\n                }\n            },\n            Action {\n                inputs: ActionInput {\n                    sourceDevice: mouseDevice\n                    buttons: [MouseEvent.RightButton]\n                }\n                onActiveChanged: {\n                    console.log(\"RMB changed: \", active);\n                }\n            }\n        ]\n    }\n}\n```", "```cpp\nAction {\n    inputs: ActionInput {\n        sourceDevice: keyboardDevice\n        buttons: [Qt.Key_Return, Qt.Key_Enter]\n    }\n    onActiveChanged: {\n        if (active) {\n            console.log(\"enter was pressed\");\n        } else {\n            console.log(\"enter was released\");\n        }\n    }\n}\n```", "```cpp\nAction {\n    inputs: InputChord {\n        timeout: 500\n        chords: [\n            ActionInput {\n                sourceDevice: keyboardDevice\n                buttons: [Qt.Key_Q]\n            },\n            ActionInput {\n                sourceDevice: keyboardDevice\n                buttons: [Qt.Key_W]\n            },\n            ActionInput {\n                sourceDevice: keyboardDevice\n                buttons: [Qt.Key_E]\n            }\n        ]\n    }\n    onActiveChanged: {\n        console.log(\"changed: \", active);\n    }\n}\n```", "```cpp\nLogicalDevice {\n    axes: [\n        Axis {\n            inputs: [\n                AnalogAxisInput {\n                    sourceDevice: mouseDevice\n                    axis: MouseDevice.X\n                }\n            ]\n            onValueChanged: {\n                console.log(\"mouse axis value\", value);\n            }\n        },\n        Axis {\n            inputs: [\n                ButtonAxisInput {\n                    sourceDevice: keyboardDevice\n                    buttons: [Qt.Key_Left]\n                    scale: -1.0\n                },\n                ButtonAxisInput {\n                    sourceDevice: keyboardDevice\n                    buttons: [Qt.Key_Right]\n                    scale: 1\n                }\n            ]\n            onValueChanged: {\n                console.log(\"keyboard axis value\", value);\n            }\n        }\n    ]\n}\n```", "```cpp\nEntity {\n    components: [\n        DiffuseSpecularMaterial { /* ... */ },\n        TorusMesh { /* ... */ },\n        ObjectPicker {\n            hoverEnabled: true\n            onClicked: {\n                console.log(\"clicked\");\n            }\n            onContainsMouseChanged: {\n                console.log(\"contains mouse?\", containsMouse);\n            }\n        }\n    ]\n}\n```", "```cpp\nEntity {\n    components: [\n        RenderSettings {\n            activeFrameGraph: ForwardRenderer { /*...*/ }\n pickingSettings.pickMethod: PickingSettings.TrianglePicking\n        },\n        InputSettings {}\n    ]\n    //...\n}\n```", "```cpp\nLogicalDevice {\n    actions: [\n        Action {\n id: myAction\n            inputs: ActionInput {\n                sourceDevice: keyboardDevice\n                buttons: [Qt.Key_A]\n            }\n        }\n    ]\n}\n```", "```cpp\nEntity {\n    components: [\n        //...\n        FrameAction {\n            onTriggered: {\n                console.log(\"A state: \", myAction.active);\n            }\n        }        \n    ]\n```", "```cpp\nEntity {\n    id: rod\n    property int index\n    readonly property alias pos: transform.translation\n    property var disks: []\n    signal clicked()\n    //...\n}\n```", "```cpp\nEntity {\n    //...\n    components: [\n        //...\n        ObjectPicker {\n            id: picker\n            hoverEnabled: true\n            onClicked: rod.clicked()\n        }\n    ]\n}\n```", "```cpp\nDiffuseSpecularMaterial {\n    ambient: {\n        return picker.containsMouse? \"#484\" : \"#111\";\n    }\n},\n```", "```cpp\nComponent.onCompleted: {\n    //...\n    var setupRod = function(i) {\n        var rod = rodComponent.createObject(sceneRoot, { index: i });\n        rod.clicked.connect(function() {\n            rodClicked(rod);\n        });\n        return rod;\n    }\n\n    for(var i = 0; i < 3; i++) {\n        rods.push(setupRod(i));\n    }\n    //...\n\n}\nfunction rodClicked(rod) {\n    console.log(\"rod clicked: \", rods.indexOf(rod));\n}\n```", "```cpp\nimport QtQuick 2.10\n\nSequentialAnimation {\n    id: rootAnimation\n    property variant target: null\n    property vector3d rod1Pos\n    property vector3d rod2Pos\n    property int startY\n    property int finalY\n\n    property int maxY: 12\n\n    Vector3dAnimation {\n        target: rootAnimation.target\n        property: \"pos\"\n        to: Qt.vector3d(rod1Pos.x, maxY, rod1Pos.z)\n        duration: 30 * (maxY - startY)\n\n    }\n    Vector3dAnimation {\n        target: rootAnimation.target\n        property: \"pos\"\n        to: Qt.vector3d(rod2Pos.x, maxY, rod2Pos.z)\n        duration: 400\n    }\n    Vector3dAnimation {\n        target: rootAnimation.target\n        property: \"pos\"\n        to: Qt.vector3d(rod2Pos.x, finalY, rod2Pos.z)\n        duration: 30 * (maxY - finalY)\n    }\n}\n```", "```cpp\nDiskAnimation { id: diskAnimation }\nComponent.onCompleted: {\n    //...\n    var disk1 = rods[0].disks.pop();\n    diskAnimation.rod1Pos = rods[0].pos;\n    diskAnimation.rod2Pos = rods[1].pos;\n    diskAnimation.startY = disk1.pos.y;\n    diskAnimation.finalY = 1;\n    diskAnimation.target = disk1;\n    diskAnimation.start();\n\n}\n```", "```cpp\nproperty bool isSourceRod: false\n```", "```cpp\nDiffuseSpecularMaterial {\n    ambient: {\n        if (isSourceRod) {\n            return picker.containsMouse? \"#f44\" : \"#f11\";\n        } else {\n            return picker.containsMouse? \"#484\" : \"#111\";\n        }\n    }\n},\n```", "```cpp\nEntity {\n    id: sceneRoot\n    property variant rods: []\n property variant sourceRod\n    //...\n}\n```", "```cpp\nfunction rodClicked(rod) {\n    if (diskAnimation.running) { return; }\n    if (rod.isSourceRod) {\n        rod.isSourceRod = false;\n        sourceRod = null;\n    } else if (!sourceRod) {\n        if (rod.disks.length > 0) {\n            rod.isSourceRod = true;\n            sourceRod = rod;\n        } else {\n            console.log(\"no disks on this rod\");\n        }\n    } else {\n        //...\n    }\n}\n```", "```cpp\nvar targetRod = rod;\nif (targetRod.disks.length > 0 &&\n    targetRod.disks[targetRod.disks.length - 1].index <\n    sourceRod.disks[sourceRod.disks.length - 1].index)\n{\n    console.log(\"invalid move\");\n} else {\n    var disk = sourceRod.disks.pop();\n    targetRod.disks.push(disk);\n    diskAnimation.rod1Pos = sourceRod.pos;\n    diskAnimation.rod2Pos = targetRod.pos;\n    diskAnimation.startY = disk.pos.y;\n    diskAnimation.finalY = targetRod.disks.length;\n    diskAnimation.target = disk;\n    diskAnimation.start();\n}\nsourceRod.isSourceRod = false;\nsourceRod = null;\n```", "```cpp\ncomponents: [\n    DiffuseSpecularMaterial { /*...*/ },\n    Mesh {\n        source: \"qrc:/obj/disk\" + index + \".obj\"\n    },\n    Transform {\n        id: transform\n    }\n]\n```", "```cpp\nEntity {\n    components: [\n        SceneLoader {\n            source: \"path/to/scene/file\"\n        }\n    ]\n}\n```", "```cpp\nQT += 3dextras\nCONFIG += c++11\n```", "```cpp\nint main(int argc, char *argv[]) {\n    QGuiApplication app(argc, argv);\n\n    Qt3DExtras::Qt3DWindow window;\n    window.defaultFrameGraph()->setClearColor(Qt::black);\n\n    Qt3DRender::QCamera *camera = window.camera();\n    camera->lens()->setPerspectiveProjection(45.0f, 16.0f / 9.0f, 0.1f, 1000.0f);\n    camera->setPosition(QVector3D(0, 40.0f, -40.0f));\n    camera->setViewCenter(QVector3D(0, 0, 0));\n    //...\n}\n```", "```cpp\nQt3DCore::QEntity *rootEntity = new Qt3DCore::QEntity();\nQt3DExtras::QFirstPersonCameraController *cameraController =\n    new Qt3DExtras::QFirstPersonCameraController(rootEntity);\ncameraController->setCamera(camera);\n```", "```cpp\nQt3DCore::QEntity *lightEntity = new Qt3DCore::QEntity(rootEntity);\nQt3DRender::QDirectionalLight *lightComponent = new Qt3DRender::QDirectionalLight();\nlightComponent->setColor(Qt::white);\nlightComponent->setIntensity(0.5);\nlightComponent->setWorldDirection(QVector3D(0, -1, 0));\nlightEntity->addComponent(lightComponent);\n```", "```cpp\nQt3DCore::QEntity *cubeEntity = new Qt3DCore::QEntity(rootEntity);\nQt3DExtras::QCuboidMesh *cubeMesh = new Qt3DExtras::QCuboidMesh();\nQt3DExtras::QDiffuseSpecularMaterial *cubeMaterial =\n    new Qt3DExtras::QDiffuseSpecularMaterial();\ncubeMaterial->setAmbient(Qt::white);\nQt3DCore::QTransform *cubeTransform = new Qt3DCore::QTransform();\ncubeTransform->setScale(10);\ncubeEntity->addComponent(cubeMesh);\ncubeEntity->addComponent(cubeMaterial);\ncubeEntity->addComponent(cubeTransform);\n```", "```cpp\nwindow.setRootEntity(rootEntity);\nwindow.show();\nreturn app.exec();\n```", "```cpp\nimport Qt3D.Core 2.0\nimport Qt3D.Render 2.0\nimport Qt3D.Input 2.0\nimport Qt3D.Extras 2.10\nimport QtQuick 2.10\nimport QtQuick.Scene2D 2.9\nimport QtQuick.Controls 2.0\nimport QtQuick.Layouts 1.0\nEntity {\n    components: [\n        RenderSettings {\n            activeFrameGraph: ForwardRenderer { /*...*/ }\n            pickingSettings.pickMethod: PickingSettings.TrianglePicking\n        },\n        InputSettings {}\n    ]\n    Scene2D {\n        output: RenderTargetOutput {\n            attachmentPoint: RenderTargetOutput.Color0\n            texture: Texture2D {\n                id: texture\n                width: 200\n                height: 200\n                format: Texture.RGBA8_UNorm\n            }\n        }\n        entities: [cube, plane]\n        Rectangle {\n            color: checkBox1.checked? \"#ffa0a0\" : \"#a0a0ff\"\n            width: texture.width\n            height: texture.height\n            ColumnLayout {\n                CheckBox {\n                    id: checkBox1\n                    text: \"Toggle color\"\n                }\n                CheckBox {\n                    id: checkBox2\n                    text: \"Toggle cube\"\n                }\n                CheckBox {\n                    id: checkBox3\n                    checked: true\n                    text: \"Toggle plane\"\n                }\n            }\n        }\n    }\n    //...\n}\n```", "```cpp\nEntity {\n    id: cube\n    components: [\n        CuboidMesh {},\n        TextureMaterial {\n            texture: texture\n        },\n        Transform {\n            scale: 10\n            rotationY: checkBox2.checked ? 45 : 0\n        },\n        ObjectPicker {\n            hoverEnabled: true\n            dragEnabled: true\n        }\n    ]\n}\nEntity {\n    id: plane\n    components: [\n        PlaneMesh {\n            mirrored: true\n        },\n        TextureMaterial {\n            texture: texture\n        },\n        Transform {\n            translation: checkBox3.checked ? Qt.vector3d(-20, 0, 0) : Qt.vector3d(20, 0, 0)\n            scale: 10\n            rotationX: 90\n            rotationY: 180\n            rotationZ: 0\n        },\n        ObjectPicker {\n            hoverEnabled: true\n            dragEnabled: true\n        }\n\n    ]\n}\n```", "```cpp\nEntity {\n    components: [\n        RenderSettings {\n            activeFrameGraph: ForwardRenderer { /*...*/ },\n        InputSettings {}\n    ]\n    Entity { /*...*/ }\n    Entity { /*...*/ }\n    //...\n}\n```", "```cpp\nimport QtQuick 2.10\nimport QtQuick.Layouts 1.0\nimport QtQuick.Controls 1.0\nimport QtQuick.Window 2.0\nimport QtQuick.Scene3D 2.0\n\nWindow {\n    visible: true\n    Button {\n        id: button1\n        text: \"button1\"\n        anchors {\n            top: parent.top\n            left: parent.left\n            right: parent.right\n            margins: 10\n        }\n    }\n    Scene3D {\n        focus: true\n        anchors {\n            top: button1.bottom\n            bottom: parent.bottom\n            left: parent.left\n            right: parent.right\n            margins: 10\n        }\n aspects: [\"input\", \"logic\"]\n My3DScene {}\n }\n}\n```"]