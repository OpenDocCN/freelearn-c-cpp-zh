["```cpp\n$ man magic\n```", "```cpp\n$ cat /etc/fstab\n# /etc/fstab: static file system information.\n...\n# <file system> <mount point>   <type>  <options>       <dump>  <pass>\n# / was on /dev/sda5 during installation\nUUID=618800a5-57e8-43c1-9856-0a0a14ebf344 /               ext4    errors=remount-ro 0       1\n# /boot/efi was on /dev/sda1 during installation\nUUID=D388-FA76  /boot/efi       vfat    umask=0077      0       1\n/swapfile                                 none            swap    sw              0       0\n```", "```cpp\n$ df -h\nFilesystem      Size  Used Avail Use% Mounted on\nudev            5,9G     0  5,9G   0% /dev\ntmpfs           1,2G  1,3M  1,2G   1% /run\n/dev/sda5        39G   24G   14G  64% /\ntmpfs           6,0G     0  6,0G   0% /dev/shm\ntmpfs           5,0M  4,0K  5,0M   1% /run/lock\ntmpfs           6,0G     0  6,0G   0% /sys/fs/cgroup\n/dev/sda1       511M  4,0K  511M   1% /boot/efi\ntmpfs           1,2G   16K  1,2G   1% /run/user/29999\n```", "```cpp\n    $ stat test\n      File: test\n      Size: 53248         Blocks: 104        IO Block: 4096   regular file\n    Device: 805h/2053d    Inode: 696116      Links: 1\n    Access: (0775/-rwxrwxr-x)  Uid: (29999/     oem)   Gid: (29999/     oem)\n    ...\n    ```", "```cpp\n    $ ls -li test\n    696116 -rwxrwxr-x 1 oem oem 53248 Jul 30 08:29 test\n    ```", "```cpp\n$ ls -li some_data\n695571 -rw-rw-r-- 1 oem 5 May 28 18:13 some_data\n```", "```cpp\n$ ln some_data some_data_hl\n$ ls -li some_data some_data_hl\n695571 -rw-rw-r-- 2 oem oem 5 May 28 18:13 some_data\n695571 -rw-rw-r-- 2 oem oem 5 May 28 18:13 some_data_hl\n```", "```cpp\n$ ln -s some_data some_data_sl\n$ ls -li some_data some_data_hl some_data_sl\n695571 -rw-rw-r-- 2 oem oem 5 May 28 18:13 some_data\n695571 -rw-rw-r-- 2 oem oem 5 May 28 18:13 some_data_hl\n694653 lrwxrwxrwx 1 oem oem 9 May 28 18:16 some_data_sl -> some_data\n```", "```cpp\n696063 -rw-rw-r--  1 oem oem  4247 Jul  2 13:25 test.dat\n696043 lrwxrwxrwx  1 oem oem     8 Aug  6 10:07 testdat_sl -> test.dat\n696024 lrwxrwxrwx  1 oem oem    10 Aug  6 10:07 testdat_sl2 -> testdat_sl\n```", "```cpp\nbool is_directory(const std::filesystem::path& p)\n```", "```cpp\n#include <iostream>\n#include <filesystem>\nusing namespace std;\nusing namespace std::filesystem;\nint main() {\n    auto result = create_directory(\"test_dir\"); // {1}\n    if (result)\n        cout << \"Directory created successfully!\\n\";\n    else\n        cout << \"Directory creation failed!\\n\";\n    return 0;\n}\n```", "```cpp\n$ ./create_dir\nDirectory created successfully!\n```", "```cpp\n.$ /create_dir\nDirectory creation failed!\n```", "```cpp\n...\nint main() {\n    if (exists(\"some_data\")) {\n       create_hard_link(\"some_data\", \"some_data_hl\");// {1}\n       create_symlink(\"some_data\", \"some_data_sl\"); // {2}\n    }\n...\n```", "```cpp\n79105062 rw-rw-r-- 2 oem oem 9 May 29 16:33 some_data\n79105062 rw-rw-r-- 2 oem oem 9 May 29 16:33 some_data_hl\n79112163 lrwxrwxrwx 1 oem oem 9 May 29 17:04 some_data_sl  -> some_data\n```", "```cpp\n...\nint main() {\n    const path path_to_iterate{\"test_dir\"};\n    for (auto const& dir_entry :\n        directory_iterator{path_to_iterate}) { // {1}\n        cout << dir_entry.path() << endl;\n    }\n    cout << endl;\n    for (auto const& dir_entry :\n        recursive_directory_iterator{path_to_iterate}) {\n        cout << dir_entry.path() << endl; // {2}\n    }\n    return 0;\n}\n```", "```cpp\n\"test_dir/inner_test_dir\"\n\"test_dir/some_data\"\n\"test_dir/some_data_sl\"\n\"test_dir/some_data_hl\"\n\"test_dir/inner_test_dir\"\n\"test_dir/inner_test_dir/inner_some_data\"\n\"test_dir/some_data\"\n\"test_dir/some_data_sl\"\n\"test_dir/some_data_hl\"\n```", "```cpp\n...\nint main() {\n    const path path_to_iterate{\"test_dir\"};\n    for (auto const& dir_entry :\n        recursive_directory_iterator{path_to_iterate}) {\n        auto result = is_symlink(dir_entry.path()); // {1}\n        if (result) cout << read_symlink(dir_entry.path());\n    }\n}\n```", "```cpp\n$ ./sym_link_check\n\"some_data\"\n```", "```cpp\n...\nint main() {\n    if (exists(\"some_data_sl\")) {\n        rename(\"some_data_sl\", \"some_data_sl_rndm\"); // {1}\n    }\n...\n```", "```cpp\n79112163 lrwxrwxrwx 1 oem oem 9 May 29 17:04 some_data_sl_rndm -> some_data\n```", "```cpp\n...\nint main() {\n    if (exists(\"some_data\")) {\n        std::filesystem::space_info space_obj =\n            space(current_path());// {1}\n        cout << \"Capacity: \"\n            << space_obj.capacity << endl;\n        cout << \"Free: \"\n            << space_obj.free << endl;\n        cout << \"Available: \"\n            << space_obj.available << endl;\n        remove(\"some_data\"); // {2}\n        space_obj = space(current_path()); // {3}\n        cout << \"Capacity: \"\n            << space_obj.capacity << endl;\n        cout << \"Free: \"\n            << space_obj.free << endl;\n        cout << \"Available: \"\n            << space_obj.available << endl;\n    }\n...\n```", "```cpp\nCapacity: 41678012416\nFree: 16555171840\nAvailable: 14689452032\nCapacity: 41678012416\nFree: 16555175936\nAvailable: 14689456128\n```", "```cpp\n$ cat some_data | grep data\nsome data\n```", "```cpp\n#include <iostream>\n#include <unistd.h>\n#include <string.h>\nusing namespace std;\nconstexpr auto BUFF_LEN = 64;\nconstexpr auto pipeIn   = 0;\nconstexpr auto pipeOut  = 1;\n```", "```cpp\nint main() {\n   int a_pipe[2]{};\n   char buff[BUFF_LEN + 1]{};\n   if (pipe(a_pipe) == -1) {  // {1}\n       perror(\"Pipe creation failed\");\n       exit(EXIT_FAILURE);\n   }\n   else {\n      if (int pid = fork(); pid == -1) {\n         perror(\"Process creation failed\");\n         exit(EXIT_FAILURE);\n      }\n      else if (pid == 0) {\n         // Child: will be the reader!\n         sleep(1); // Just to give some extra time!\n         close(a_pipe[pipeOut]); // {2}\n         read(a_pipe[pipeIn], buff, BUFF_LEN); // {3}\n         cout << \"Child: \" << buff << endl;\n     }\n```", "```cpp\n      else {\n         // Parent: will be the writer!\n         close(a_pipe[pipeIn]); // {4}\n         const char *msg = {\"Sending message to child!\"};\n         write(a_pipe[pipeOut], msg, strlen(msg) + 1);\n         // {5}\n      }\n   }\n   return 0;\n}\n```", "```cpp\n$ ./test > fifo_example\n$ cat fifo_example\n$ Child: Sending message to child!\n```", "```cpp\n#include <sys/stat.h>\n#include <unistd.h>\n#include <array>\n#include <iostream>\n#include <filesystem>\n#include <string_view>\nusing namespace std;\nusing namespace std::filesystem;\nstatic string_view fifo_name     = \"example_fifo\"; // {1}\nstatic constexpr size_t buf_size = 64;\nvoid write(int out_fd,\n           string_view message) { // {2}\n    write(out_fd,\n          message.data(),\n          message.size());\n}\n```", "```cpp\nstring read(int in_fd) { // {3}\n    array <char, buf_size> buffer;\n    size_t bytes = read(in_fd,\n                        buffer.data(),\n                        buffer.size());\n    if (bytes > 0) {\n        return {buffer.data(), bytes}; // {4}\n    }\n    return {};\n}\nint main() {\n    if (!exists(fifo_name))\n        mkfifo(fifo_name.data(), 0666); // {5}\n    if (pid_t childId = fork(); childId == -1) {\n        perror(\"Process creation failed\");\n        exit(EXIT_FAILURE);\n    }\n```", "```cpp\n    else {\n        if(is_fifo(fifo_name)) { // {6}\n            if (childId == 0) {\n                if (int named_pipe_fd =\n                        open(fifo_name.data(), O_RDWR);\n                    named_pipe_fd >= 0) { // {7}\n                    string message;\n                    message.reserve(buf_size);\n                    sleep(1);\n                    message = read(named_pipe_fd); // {8}\n                    string_view response_msg\n                        = \"Child printed the message!\";\n                    cout << \"Child: \" << message << endl;\n                    write(named_pipe_fd,\n                          response_msg); // {9}\n                    close(named_pipe_fd);\n                }\n```", "```cpp\n                else {\n                    cout << \"Child cannot open the pipe!\"\n                         << endl;\n                }\n            }\n            else if (childId > 0) {\n                if (int named_pipe_fd =\n                        open(fifo_name.data(), O_RDWR);\n                    named_pipe_fd >= 0) { // {10}\n                    string message\n                    = \"Sending some message to the child!\";\n                    write(named_pipe_fd,\n                          message); // {11}\n                    sleep(1);\n                    message = read(named_pipe_fd); // {12}\n                    cout << \"Parent: \" << message << endl;\n                    close(named_pipe_fd);\n                }\n            }\n            else {\n                cout << \"Fork failed!\";\n      }\n```", "```cpp\n$ ls -la example_fifo\nprw-r--r-- 1 oem oem 0 May 30 13:45 example_fifo\n```", "```cpp\n            remove(fifo_name); // {13}\n        }\n    }\n    return 0;\n}\n```", "```cpp\nChild: Sending some message to the child!\nParent: Child printed the message!\n```", "```cpp\n...\nint main() {\n    if (exists(\"example_fifo\") && is_fifo(\"example_fifo\")){\n        remove(\"example_fifo\");\n        cout << \"FIFO is removed\";\n    } ...\n```", "```cpp\n...\nvoid handle_sigpipe(int sig) { // {1}\n   printf(\"SIGPIPE handled!\\n\");\n}\nint main() {\n   int an_pipe[2] = {0};\n   char buff[BUFF_LEN + 1] = {0};\n   if (pipe(an_pipe) == 0) {\n      int pid = fork();\n      if (pid == 0) {\n         close(an_pipe[pipeOut]); // {2}\n         close(an_pipe[pipeIn]);\n      }\n```", "```cpp\n      else {\n         struct sigaction act = {0};\n         sigemptyset(&act.sa_mask);\n         act.sa_handler = handle_sigpipe; // {3}\n         if(sigaction(SIGPIPE, &act, 0) == -1) {// {4}\n            perror(\"sigaction\"); return (1);\n         }\n         close(an_pipe[pipeIn]);\n         sleep(1);\n         const char *msg = {\"Sending message to child!\"};\n         write(an_pipe[pipeOut], msg, strlen(msg) + 1);\n// {5} ...\n```", "```cpp\n$ ./sighandler_test\nSIGPIPE handled!\n```", "```cpp\nact.sa_handler = SIG_IGN; // {3}\n```"]