["```cpp\nint max(int const a, int const b)\n```", "```cpp\n{\n```", "```cpp\n   return a > b ? a : b;\n```", "```cpp\n}\n```", "```cpp\ndouble max(double const a, double const b)\n```", "```cpp\n{\n```", "```cpp\n   return a > b ? a : b;\n```", "```cpp\n}\n```", "```cpp\nusing swap_fn = void(*)(void*, int const, int const);\n```", "```cpp\nusing compare_fn = bool(*)(void*, int const, int const);\n```", "```cpp\nint partition(void* arr, int const low, int const high, \n```", "```cpp\n              compare_fn fcomp, swap_fn fswap)\n```", "```cpp\n{\n```", "```cpp\n   int i = low - 1;\n```", "```cpp\n   for (int j = low; j <= high - 1; j++)\n```", "```cpp\n   {\n```", "```cpp\n      if (fcomp(arr, j, high))\n```", "```cpp\n      {\n```", "```cpp\n         i++;\n```", "```cpp\n         fswap(arr, i, j);\n```", "```cpp\n      }\n```", "```cpp\n   }\n```", "```cpp\n   fswap(arr, i + 1, high);\n```", "```cpp\n   return i + 1;\n```", "```cpp\n}\n```", "```cpp\nvoid quicksort(void* arr, int const low, int const high, \n```", "```cpp\n               compare_fn fcomp, swap_fn fswap)\n```", "```cpp\n{\n```", "```cpp\n   if (low < high)\n```", "```cpp\n   {\n```", "```cpp\n      int const pi = partition(arr, low, high, fcomp, \n```", "```cpp\n         fswap);\n```", "```cpp\n      quicksort(arr, low, pi - 1, fcomp, fswap);\n```", "```cpp\n      quicksort(arr, pi + 1, high, fcomp, fswap);\n```", "```cpp\n   }\n```", "```cpp\n}\n```", "```cpp\nvoid swap_int(void* arr, int const i, int const j)\n```", "```cpp\n{\n```", "```cpp\n   int* iarr = (int*)arr;\n```", "```cpp\n   int t = iarr[i];\n```", "```cpp\n   iarr[i] = iarr[j];\n```", "```cpp\n   iarr[j] = t;\n```", "```cpp\n}\n```", "```cpp\nbool less_int(void* arr, int const i, int const j)\n```", "```cpp\n{\n```", "```cpp\n   int* iarr = (int*)arr;\n```", "```cpp\n   return iarr[i] <= iarr[j];\n```", "```cpp\n}\n```", "```cpp\nint main()\n```", "```cpp\n{\n```", "```cpp\n   int arr[] = { 13, 1, 8, 3, 5, 2, 1 };\n```", "```cpp\n   int n = sizeof(arr) / sizeof(arr[0]);\n```", "```cpp\n   quicksort(arr, 0, n - 1, less_int, swap_int);\n```", "```cpp\n}\n```", "```cpp\nstruct int_vector\n```", "```cpp\n{\n```", "```cpp\n   int_vector();\n```", "```cpp\n   size_t size() const;\n```", "```cpp\n   size_t capacity() const;\n```", "```cpp\n   bool empty() const;\n```", "```cpp\n   void clear();\n```", "```cpp\n   void resize(size_t const size);\n```", "```cpp\n   void push_back(int value);\n```", "```cpp\n   void pop_back();\n```", "```cpp\n   int at(size_t const index) const;\n```", "```cpp\n   int operator[](size_t const index) const;\n```", "```cpp\nprivate:\n```", "```cpp\n   int* data_;\n```", "```cpp\n   size_t size_;\n```", "```cpp\n   size_t capacity_;\n```", "```cpp\n};\n```", "```cpp\nconstexpr char NewLine = '\\n';\n```", "```cpp\nconstexpr wchar_t NewLineW = L'\\n';\n```", "```cpp\nconstexpr char8_t NewLineU8 = u8'\\n';\n```", "```cpp\nconstexpr char16_t NewLineU16 = u'\\n';\n```", "```cpp\nconstexpr char32_t NewLineU32 = U'\\n';\n```", "```cpp\ntemplate <typename T>\n```", "```cpp\nT max(T const a, T const b)\n```", "```cpp\n{\n```", "```cpp\n   return a > b ? a : b;\n```", "```cpp\n}\n```", "```cpp\nstruct foo{};\n```", "```cpp\nint main()\n```", "```cpp\n{   \n```", "```cpp\n   foo f1, f2;\n```", "```cpp\n   max(1, 2);     // OK, compares ints\n```", "```cpp\n   max(1.0, 2.0); // OK, compares doubles\n```", "```cpp\n   max(f1, f2);   // Error, operator> not overloaded for \n```", "```cpp\n                  // foo\n```", "```cpp\n}\n```", "```cpp\nmax<int>(1, 2);\n```", "```cpp\nmax<double>(1.0, 2.0);\n```", "```cpp\nmax<foo>(f1, f2);\n```", "```cpp\ntemplate <typename T>\n```", "```cpp\nvoid swap(T* a, T* b)\n```", "```cpp\n{\n```", "```cpp\n   T t = *a;\n```", "```cpp\n   *a = *b;\n```", "```cpp\n   *b = t;\n```", "```cpp\n}\n```", "```cpp\ntemplate <typename T>\n```", "```cpp\nint partition(T arr[], int const low, int const high)\n```", "```cpp\n{\n```", "```cpp\n   T pivot = arr[high];\n```", "```cpp\n   int i = (low - 1);\n```", "```cpp\n   for (int j = low; j <= high - 1; j++)\n```", "```cpp\n   {\n```", "```cpp\n      if (arr[j] < pivot)\n```", "```cpp\n      {\n```", "```cpp\n         i++;\n```", "```cpp\n         swap(&arr[i], &arr[j]);\n```", "```cpp\n      }\n```", "```cpp\n   }\n```", "```cpp\n   swap(&arr[i + 1], &arr[high]);\n```", "```cpp\n   return i + 1;\n```", "```cpp\n}\n```", "```cpp\ntemplate <typename T>\n```", "```cpp\nvoid quicksort(T arr[], int const low, int const high)\n```", "```cpp\n{\n```", "```cpp\n   if (low < high)\n```", "```cpp\n   {\n```", "```cpp\n      int const pi = partition(arr, low, high);\n```", "```cpp\n      quicksort(arr, low, pi - 1);\n```", "```cpp\n      quicksort(arr, pi + 1, high);\n```", "```cpp\n   }\n```", "```cpp\n}\n```", "```cpp\nint main()\n```", "```cpp\n{\n```", "```cpp\n   int arr[] = { 13, 1, 8, 3, 5, 2, 1 };\n```", "```cpp\n   int n = sizeof(arr) / sizeof(arr[0]);\n```", "```cpp\n   quicksort(arr, 0, n - 1);\n```", "```cpp\n}\n```", "```cpp\ntemplate <typename T>\n```", "```cpp\nstruct vector\n```", "```cpp\n{\n```", "```cpp\n   vector();\n```", "```cpp\n   size_t size() const;\n```", "```cpp\n   size_t capacity() const;\n```", "```cpp\n   bool empty() const;\n```", "```cpp\n   void clear();\n```", "```cpp\n   void resize(size_t const size);\n```", "```cpp\n   void push_back(T value);\n```", "```cpp\n   void pop_back();\n```", "```cpp\n   T at(size_t const index) const;\n```", "```cpp\n   T operator[](size_t const index) const;\n```", "```cpp\nprivate:\n```", "```cpp\n   T* data_;\n```", "```cpp\n   size_t size_;\n```", "```cpp\n   size_t capacity_;\n```", "```cpp\n};\n```", "```cpp\nint main()\n```", "```cpp\n{   \n```", "```cpp\n   vector<int> v;\n```", "```cpp\n   v.push_back(1);\n```", "```cpp\n   v.push_back(2);\n```", "```cpp\n}\n```", "```cpp\ntemplate<typename T>\n```", "```cpp\nconstexpr T NewLine = T('\\n');\n```", "```cpp\nint main()\n```", "```cpp\n{\n```", "```cpp\n   std::wstring test = L\"demo\";\n```", "```cpp\n   test += NewLine<wchar_t>;\n```", "```cpp\n   std::wcout << test;\n```", "```cpp\n}\n```"]