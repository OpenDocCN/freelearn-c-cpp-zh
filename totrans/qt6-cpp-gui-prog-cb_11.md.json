["```cpp\n    #include <QCoreApplication>\n    #include <QDebug>\n    #include <QtMath>\n    #include <QDateTime>\n    #include <QTextCodec>\n    main() function, add the following code to convert a string into a number:\n\n    ```", "```cpp\n\n    ```", "```cpp\n        float numberC = 10.25;\n        float numberD = 2;\n        QString result = QString::number(numberC * numberD);\n        qDebug() << \"2) \" << \"10.25 * 2 =\" << result;\n    ```", "```cpp\n        float numberE = 10.3;\n        float numberF = qFloor(numberE);\n        qDebug() << \"3) \" << \"Floor of 10.3 is\" << numberF;\n    ```", "```cpp\n        float numberG = 10.3;\n        float numberH = qCeil(numberG);\n        qDebug() << \"4) \" << \"Ceil of 10.3 is\" << numberH;\n    ```", "```cpp\n        QString dateTimeAString = \"2016-05-04 12:24:00\";\n        QDateTime dateTimeA = QDateTime::fromString(dateTimeAString, \"yyyy-MM-dd hh:mm:ss\");\n        qDebug() << \"5) \" << dateTimeA;\n    ```", "```cpp\n        QDateTime dateTimeB = QDateTime::currentDateTime();\n        QString dateTimeBString = dateTimeB.toString(\"dd/MM/yy hh:mm\");\n        qDebug() << \"6) \" << dateTimeBString;\n    ```", "```cpp\n        QString hello1 = \"hello world!\";\n        qDebug() << \"7) \" << hello1.toUpper();\n    ```", "```cpp\n        QString hello2 = \"HELLO WORLD!\";\n        qDebug() << \"8) \" << hello2.toLower();\n    ```", "```cpp\n        QVariant aNumber = QVariant(3.14159);\n        double aResult = 12.5 * aNumber.toDouble();\n        qDebug() << \"9) 12.5 * 3.14159 =\" << aResult;\n    ```", "```cpp\n        qDebug() << \"10) \";\n        QVariant myData = QVariant(10);\n        qDebug() << myData;\n        myData = myData.toFloat() / 2.135;\n        qDebug() << myData;\n        myData = true;\n        qDebug() << myData;\n        myData = QDateTime::currentDateTime();\n        qDebug() << myData;\n        myData = \"Good bye!\";\n        qDebug() << myData;\n    ```", "```cpp\n    #include <QCoreApplication>\n    #include <QDebug>\n    #include <QtMath>\n    #include <QDateTime>\n    #include <QStringConverter>\n    #include <iostream>\n    int main(int argc, char *argv[]) {\n        QCoreApplication a(argc, argv);\n    ```", "```cpp\n    // String to number\n        int numberA = 2;\n        QString numberB = \"5\";\n        qDebug() << \"1) \" << \"2 + 5 =\" << numberA +\n    numberB.toInt();\n    // Number to string\n        float numberC = 10.25;\n        float numberD = 2;\n        QString result = QString::number(numberC * numberD);\n        qDebug() << \"2) \" << \"10.25 * 2 =\" << result;\n    ```", "```cpp\n    // Floor\n        float numberE = 10.3;\n        float numberF = qFloor(numberE);\n        qDebug() << \"3) \" << \"Floor of 10.3 is\" << numberF;\n    // Ceil\n        float numberG = 10.3;\n        float numberH = qCeil(numberG);\n        qDebug() << \"4) \" << \"Ceil of 10.3 is\" << numberH;\n    ```", "```cpp\n    // Date time from string\n        QString dateTimeAString = \"2016-05-04 12:24:00\";\n        QDateTime dateTimeA = QDateTime::fromString(dateTimeAString, \"yyyy-MM-dd hh:mm:ss\");\n        qDebug() << \"5) \" << dateTimeA;\n    // Date time to string\n        QDateTime dateTimeB = QDateTime::currentDateTime();\n        QString dateTimeBString = dateTimeB.toString(\"dd/MM/yy hh:mm\");\n        qDebug() << \"6) \" << dateTimeBString;\n    ```", "```cpp\n    // String to all uppercase\n        QString hello1 = \"hello world!\";\n        qDebug() << \"7) \" << hello1.toUpper();\n    // String to all lowercase\n        QString hello2 = \"HELLO WORLD!\";\n        qDebug() << \"8) \" << hello2.toLower();\n    ```", "```cpp\n    // QVariant to double\n        QVariant aNumber = QVariant(3.14159);\n        double aResult = 12.5 * aNumber.toDouble();\n        qDebug() << \"9) 12.5 * 3.14159 =\" << aResult;\n    // QVariant different types\n        qDebug() << \"10) \";\n        QVariant myData = QVariant(10);\n        qDebug() << myData;\n        myData = myData.toFloat() / 2.135;\n        qDebug() << myData;\n        myData = true;\n        qDebug() << myData;\n    ```", "```cpp\n        myData = QDateTime::currentDateTime();\n        qDebug() << myData;\n        myData = \"Good bye!\";\n        qDebug() << myData;\n        return a.exec();\n    }\n    ```", "```cpp\n    #include <QMainWindow>\n    #include <QFileDialog>\n    #include <QMessageBox>\n    mainwindow.cpp and define what will happen when the Browse button is clicked, which in this case is opening the file dialog to select an image file:\n\n    ```", "```cpp\n\n    ```", "```cpp\n    void MainWindow::on_convertButton_clicked() {\n        QString fileName = ui->filePath->text();\n        if (fileName != \"\") {\n            QFileInfo fileInfo = QFileInfo(fileName);\n            QString newFileName = fileInfo.path() + \"/\" + fileInfo.completeBaseName();\n            QImage image = QImage(ui->filePath->text());\n            if (!image.isNull()) {\n    ```", "```cpp\n    // 0 = PNG, 1 = JPG, 2 = BMP\n                int format = ui->fileFormat->currentIndex();\n                if (format == 0) {\n                    newFileName += \".png\";\n                }\n                else if (format == 1) {\n                    newFileName += \".jpg\";\n                }\n                else if (format == 2) {\n                    newFileName += \".bmp\";\n                }\n    ```", "```cpp\n                qDebug() << newFileName << format;\n                if (image.save(newFileName, 0, -1)) {\n                    QMessageBox::information(this, \"Success\", \"Image successfully converted.\");\n                }\n                else {\n                    QMessageBox::warning(this, \"Failed\", \"Failed to convert image.\");\n                }\n            }\n    ```", "```cpp\n            else {\n                QMessageBox::warning(this, \"Failed\", \"Failed to open image file.\");\n                }\n            }\n        else {\n            QMessageBox::warning(this, \"Failed\", \"No file is selected.\");\n        }\n    }\n    ```", "```cpp\n    #include <QMainWindow>\n    #include <QFileDialog>\n    #include <QProcess>\n    #include <QMessageBox>\n    #include <QScrollBar>\n    public keyword:\n\n    ```", "```cpp\n\n    ```", "```cpp\n    private slots:\n        void on_browseButton_clicked();\n        void on_convertButton_clicked();\n        void processStarted();\n        void readyReadStandardOutput();\n        void processFinished();\n    ```", "```cpp\n    MainWindow::MainWindow(QWidget *parent) :\n        QMainWindow(parent), ui(new Ui::MainWindow) {\n        ui->setupUi(this);\n        process = new QProcess(this);\n        connect(process, QProcess::started, this,\n    MainWindow::processStarted);\n        connect(process, QProcess::readyReadStandardOutput, this,\n    MainWindow::readyReadStandardOutput);\n        connect(process, QProcess::finished, this,\n    MainWindow::processFinished);\n    }\n    ```", "```cpp\n    void MainWindow::on_browseButton_clicked() {\n        QString fileName = QFileDialog::getOpenFileName(this, \"Open Video\", \"\", \"Video Files (*.avi *.mp4 *.mov)\");\n        ui->filePath->setText(fileName);\n    }\n    ```", "```cpp\n    void MainWindow::on_convertButton_clicked() {\n        QString ffmpeg = \"C:/FFmpeg/bin/ffmpeg\";\n        QStringList arguments;\n        fileName = ui->filePath->text();\n        if (fileName != \"\") {\n            QFileInfo fileInfo = QFileInfo(fileName);\n            outputFileName = fileInfo.path() + \"/\" +\n    fileInfo.completeBaseName();\n    ```", "```cpp\n            if (QFile::exists(fileName)) {\n                int format = ui->fileFormat->currentIndex();\n                if (format == 0) {\n                    outputFileName += \".avi\"; // AVI\n                }\n                else if (format == 1) {\n                    outputFileName += \".mp4\"; // MP4\n                }\n                else if (format == 2) {\n                    outputFileName += \".mov\"; // MOV\n                }\n    ```", "```cpp\n                qDebug() << outputFileName << format;\n                arguments << \"-i\" << fileName << outputFileName;\n                qDebug() << arguments;\n                process->setProcessChannelMode(QProcess::MergedChannels);\n                process->start(ffmpeg, arguments);\n            }\n    ```", "```cpp\n            else {\n                QMessageBox::warning(this, \"Failed\", \"Failed to open video file.\");\n            }\n        }\n        else {\n            QMessageBox::warning(this, \"Failed\", \"No file is selected.\");\n        }\n    }\n    ```", "```cpp\n    void MainWindow::processStarted() {\n        qDebug() << \"Process started.\";\n        ui->browseButton->setEnabled(false);\n        ui->fileFormat->setEditable(false);\n        ui->convertButton->setEnabled(false);\n    }\n    ```", "```cpp\n    void MainWindow::readyReadStandardOutput() {\n        outputText += process->readAllStandardOutput();\n        ui->outputDisplay->setText(outputText);\n        ui->outputDisplay->verticalScrollBar()->setSliderPosition(ui->outputDisplay->verticalScrollBar()->maximum());\n    }\n    ```", "```cpp\n    void MainWindow::processFinished() {\n        qDebug() << \"Process finished.\";\n        if (QFile::exists(outputFileName)) {\n            QMessageBox::information(this, \"Success\", \"Video successfully converted.\");\n        }\n        else {\n            QMessageBox::information(this, \"Failed\", \"Failed to convert video.\");\n        }\n        ui->browseButton->setEnabled(true);\n        ui->fileFormat->setEditable(true);\n        ui->convertButton->setEnabled(true);\n    }\n    ```", "```cpp\n    QT += core gui mainwindow.ui and remove the menu bar, toolbar, and status bar from the UI.\n    ```", "```cpp\n    #include <QMainWindow>\n    #include <QDoubleValidator>\n    #include <QNetworkAccessManager>\n    #include <QNetworkRequest>\n    #include <QNetworkReply>\n    #include <QJsonDocument>\n    #include <QJsonObject>\n    #include <QDebug>\n    finished():\n\n    ```", "```cpp\n\n    ```", "```cpp\n    private:\n        Ui::MainWindow *ui;\n        QNetworkAccessManager* manager;\n        QString targetCurrency;\n    ```", "```cpp\n    MainWindow::MainWindow(QWidget *parent) :\n        QMainWindow(parent), ui(new Ui::MainWindow) {\n        ui->setupUi(this);\n        QStringList currencies;\n        currencies.push_back(\"EUR\");\n        currencies.push_back(\"USD\");\n        currencies.push_back(\"CAD\");\n        currencies.push_back(\"MYR\");\n        currencies.push_back(\"GBP\");\n    ```", "```cpp\n        ui->currencyFrom->insertItems(0, currencies);\n        ui->currencyTo->insertItems(0, currencies);\n        QValidator *inputRange = new QDoubleValidator(this);\n        ui->amountFrom->setValidator(inputRange);\n        manager = new QNetworkAccessManager(this);\n        connect(manager, &QNetworkAccessManager::finished, this, &MainWindow::finished);\n    }\n    ```", "```cpp\n    void MainWindow::on_convertButton_clicked() {\n        if (ui->amountFrom->text() != \"\") {\n            ui->convertButton->setEnabled(false);\n            QString from = ui->currencyFrom->currentText();\n            QString to = ui->currencyTo->currentText();\n            targetCurrency = to;\n            QString url = \"http://data.fixer.io/api/latest?base=\" +      from + \"&symbols=\" + to + \"&access_key=YOUR_KEY\";\n    ```", "```cpp\n            QNetworkRequest request = QNetworkRequest(QUrl(url));\n            manager->get(request);\n        }\n        else {\n            QMessageBox::warning(this, \"Error\", \"Please insert a value.\");\n        }\n    }\n    ```", "```cpp\n    void MainWindow::finished(QNetworkReply* reply) {\n        QByteArray response = reply->readAll();\n        qDebug() << response;\n        QJsonDocument jsonResponse =\n    QJsonDocument::fromJson(response);\n        QJsonObject jsonObj = jsonResponse.object();\n        QJsonObject jsonObj2 = jsonObj.value(\"rates\").toObject();\n        double rate = jsonObj2.value(targetCurrency).toDouble();\n    ```", "```cpp\n        if (rate == 0)\n            rate = 1;\n        double amount = ui->amountFrom->text().toDouble();\n        double result = amount * rate;\n        ui->amountTo->setText(QString::number(result));\n        ui->convertButton->setEnabled(true);\n    }\n    ```"]