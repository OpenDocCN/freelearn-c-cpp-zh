["```cpp\nclass Window{\npublic:\n    Window();\n    Window(const std::string& l_title,const sf::Vector2u& l_size);\n    ~Window();\n\n    void BeginDraw(); // Clear the window.\n    void EndDraw(); // Display the changes.\n\n    void Update();\n\n    bool IsDone();\n    bool IsFullscreen();\n    sf::Vector2u GetWindowSize();\n\n    void ToggleFullscreen();\n\n    void Draw(sf::Drawable& l_drawable);\nprivate:\n    void Setup(const std::string& l_title, const sf::Vector2u& l_size);\n    void Destroy();\n    void Create();\n\n    sf::RenderWindow m_window;\n    sf::Vector2u m_windowSize;\n    std::string m_windowTitle;\n    bool m_isDone;\n    bool m_isFullscreen;\n};\n```", "```cpp\nWindow::Window(){ Setup(\"Window\", sf::Vector2u(640,480)); }\n\nWindow::Window(const std::string& l_title, const sf::Vector2u& l_size)\n{\n    Setup(l_title,l_size);\n}\n\nWindow::~Window(){ Destroy(); }\n```", "```cpp\nvoid Window::Setup(const std::string l_title, const sf::Vector2u& l_size)\n{\n    m_windowTitle = l_title;\n    m_windowSize = l_size;\n    m_isFullscreen = false;\n    m_isDone = false;\n    Create();\n}\n```", "```cpp\nvoid Window::Create(){\n    auto style = (m_isFullscreen ? sf::Style::Fullscreen \n        : sf::Style::Default);\n    m_window.create({ m_windowSize.x, m_windowSize.y, 32 },\n        m_windowTitle, style);\n}\n\nvoid Window::Destroy(){\n    m_window.close();\n}\n```", "```cpp\nauto style = sf::Style::Resize | sf::Style::Close;\n```", "```cpp\nvoid Window::Update(){\n   sf::Event event;\n   while(m_window.pollEvent(event)){\n      if(event.type == sf::Event::Closed){\n         m_isDone = true;\n      } else if(event.type == sf::Event::KeyPressed &&\n         event.key.code == sf::Keyboard::F5)\n      {\n         ToggleFullscreen();\n      }\n   }\n}\n```", "```cpp\nvoid Window::ToggleFullscreen(){\n    m_isFullscreen = !m_isFullscreen;\n    Destroy();\n    Create();\n}\n```", "```cpp\nvoid Window::BeginDraw(){ m_window.clear(sf::Color::Black); }\nvoid Window::EndDraw(){ m_window.display(); }\n```", "```cpp\nbool Window::IsDone(){ return m_isDone; }\nbool Window::IsFullscreen(){ return m_isFullscreen; }\nsf::Vector2u Window::GetWindowSize(){ return m_windowSize; }\n\nvoid Window::Draw(sf::Drawable&l_drawable){\n    m_window.draw(l_drawable);\n}\n```", "```cpp\n#include \"Game.h\"\n\nvoid main(int argc, void** argv[]){\n    // Program entry point.\n    Game game; // Creating our game object.\n    while(!game.GetWindow()->IsDone()){\n        // Game loop.\n        game.HandleInput();\n        game.Update();\n        game.Render();\n    }\n}\n```", "```cpp\nclass Game{\npublic:\n    Game();\n    ~Game();\n\n    void HandleInput();\n    void Update();\n    void Render();\n    Window* GetWindow();\n    ...\nprivate:\n    void MoveMushroom();\n    Window m_window;\n    ...\n};\n```", "```cpp\nGame::Game(): m_window(\"Chapter 2\", sf::Vector2u(800,600)){\n    // Setting up class members.\n    m_mushroomTexture.loadFromFile(\"Mushroom.png\");\n    m_mushroom.setTexture(m_mushroomTexture);\n    m_increment = sf::Vector2i(4,4);\n}\n```", "```cpp\nGame::~Game(){}\n```", "```cpp\nvoid Game::Update(){\n    m_window.Update(); // Update window events.\n    MoveMushroom();\n}\nvoid Game::MoveMushroom(){\n   sf::Vector2u l_windSize = m_window.GetWindowSize();\n   sf::Vector2u l_textSize = m_mushroomTexture.getSize();\n\n   if((m_mushroom.getPosition().x >\n      l_windSize.x - l_textSize.x&&m_increment.x> 0) ||\n      (m_mushroom.getPosition().x < 0 &&m_increment.x< 0)){\n         m_increment.x = -m_increment.x;\n   }\n\n   if((m_mushroom.getPosition().y >\n      l_windSize.y - l_textSize.y&&m_increment.y> 0) ||\n      (m_mushroom.getPosition().y < 0 &&m_increment.y< 0)){\n         m_increment.y = -m_increment.y;\n   }\n\n   m_mushroom.setPosition(\n      m_mushroom.getPosition().x + m_increment.x, \n      m_mushroom.getPosition().y + m_increment.y);\n}\n```", "```cpp\nvoid Game::Render(){\n    m_window.BeginDraw(); // Clear.\n    m_window.Draw(m_mushroom);\n    m_window.EndDraw(); // Display.\n}\n```", "```cpp\nm_window.setFramerateLimit(60); // 60 FPS cap.\n```", "```cpp\nsf::Clock clock;\n...\nsf::Time time = clock.getElapsedTime();\n\nfloat seconds = time.asSeconds();\nsf::Int32 milliseconds = time.asMilliseconds();\nsf::Int64 microseconds = time.asMicroseconds();\n...\ntime = clock.restart();\n```", "```cpp\nm_mushroom.setPosition(\n    m_mushroom.getPosition().x + m_increment.x, \n    m_mushroom.getPosition().y + m_increment.y);\n```", "```cpp\nclass Game{\npublic:\n...\n    sf::Time GetElapsed();\n    void RestartClock();\nprivate:\n...\n    sf::Clock m_clock;\n    sf::Time m_elapsed;\n...\n};\n```", "```cpp\nsf::Time Game::GetElapsed(){ return m_elapsed; }\nvoid Game::RestartClock(){ m_elapsed = m_clock.restart(); }\n```", "```cpp\nwhile(!game.GetWindow()->IsDone()){\n    // Game loop.\n    game.HandleInput();\n    game.Update();\n    game.Render();\n    game.RestartClock(); // Restarting our clock.\n}\n```", "```cpp\nfloat fElapsed = m_elapsed.asSeconds();\n\nm_mushroom.setPosition(\n    m_mushroom.getPosition().x + (m_increment.x * fElapsed), \n    m_mushroom.getPosition().y + (m_increment.y * fElapsed));\n```", "```cpp\nGame::Game(){\n...\n    m_increment = sf::Vector2i(400,400); // 400px a second.\n}\n```", "```cpp\nwhile(!game.GetWindow()->IsDone()){\n    // Game loop.\n    game.HandleInput();\n    game.Update();\n    game.Render();\n    sf::sleep(sf::seconds(0.2)); // Sleep for 0.2 seconds.\n    game.RestartClock();\n}\n```", "```cpp\nvoid Game::RestartClock(){\n    m_elapsed += m_clock.restart();\n}\n```", "```cpp\nfloat frametime = 1.0f / 60.0f;\n\nif(m_elapsed.asSeconds() >= frametime){\n    // Do something 60 times a second.\n    ...\n    m_elapsed -= sf::seconds(frametime); // Subtracting.\n}\n```", "```cpp\nvoid Game::SomeMethod(){\n    sf::Clock clock;\n    ...\n    sf::Time time = clock.getElapsedTime();\n}\n```", "```cpp\nclass Game{\n...\nprivate:\n...\n    float m_elapsed;\n...\n};\n```"]