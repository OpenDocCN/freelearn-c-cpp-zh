["```cpp\nuint8_t globalVar = 12;\n\nvoid myFunc( void )\n{\n  static uint8_t staticVar = 0;\n  ...\n}\n```", "```cpp\n_Min_Heap_Size = 0x200; /* required amount of heap */\n_Min_Stack_Size = 0x400; /* required amount of stack */\n```", "```cpp\n#define configTOTAL_HEAP_SIZE ((size_t)15360)\n```", "```cpp\nBaseType_t retVal = xTaskCreate( Task1, \"task1\", StackSizeWords, NULL,\n        tskIDLE_PRIORITY + 2, tskHandlePtr);\nassert_param(retVal != pdPASS);\n```", "```cpp\nledCmdQueue = xQueueCreate(LED_CMD_QUEUE_LEN,\n                            sizeof(uint8_t));\n```", "```cpp\nassert_param(ledCmdQueue != NULL);\n```", "```cpp\nStackType_t GreenTaskStack[STACK_SIZE];\nStaticTask_t GreenTaskTCB;\nTaskHandle_t greenHandle = NULL;\ngreenHandle = xTaskCreateStatic(    GreenTask, \"GreenTask\", STACK_SIZE,\n                                    NULL, tskIDLE_PRIORITY + 2,\n GreenTaskStack, &GreenTaskTCB);\nassert_param( greenHandle != NULL );\n```", "```cpp\nstatic StaticQueue_t queueStructure;\n```", "```cpp\n#define LED_CMD_QUEUE_LEN 2\nstatic uint8_t queueStorage[LED_CMD_QUEUE_LEN];\n```", "```cpp\nledCmdQueue = xQueueCreateStatic(LED_CMD_QUEUE_LEN,                                   sizeof(uint8_t), queueStorage, &queueStructure );\n```", "```cpp\nassert_param(ledCmdQueue != NULL);\n```", "```cpp\nstatic QueueHandle_t ledCmdQueue = NULL;\nstatic StaticQueue_t queueStructure;\n#define LED_CMD_QUEUE_LEN 2\nstatic uint8_t queueStorage[LED_CMD_QUEUE_LEN];\nledCmdQueue = xQueueCreateStatic(LED_CMD_QUEUE_LEN,\n            sizeof(uint8_t),\n            queueStorage, &queueStructure );\nassert_param(ledCmdQueue != NULL);\n```", "```cpp\n#define configCHECK_FOR_STACK_OVERFLOW 2\n```", "```cpp\nvoid vApplicationStackOverflowHook( void )\n{\n __disable_irq();\n while(1);\n}\n```", "```cpp\n#define configUSE_MALLOC_FAILED_HOOK 1\n```", "```cpp\nvoid vApplicationMallocFailedHook( void )\n{\n __disable_irq();\n while(1);\n}\n```", "```cpp\ntypedef struct xTASK_PARAMTERS\n{\n pdTASK_CODE pvTaskCode;\n const signed char * const pcName;\n unsigned short usStackDepth;\n void *pvParameters;\n unsigned portBASE_TYPE uxPriority;\n portSTACK_TYPE *puxStackBuffer;\n xMemoryRegion xRegions[ portNUM_CONFIGURABLE_REGIONS ];\n} xTaskParameters; \n```"]