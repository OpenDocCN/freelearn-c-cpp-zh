["```cpp\nstruct MyValues { long a, b, c, d; }\nvoid Reset(MyValues* v) {\n  // Don't care who owns v, as long as we don't\n  v->a = v->b = v->c = v->d = 0;\n}\n```", "```cpp\nclass A {\n  public:\n  // Constructor transfers ownership from whomever\n  A(std::vector<int>&& v) : v(std::move(v)) {}\n  private:\n  std::vector<int> v_;    // We own this now\n};\n```", "```cpp\nclass A {\n  public:\n  // No idea who owns v, don't care\n  A(std::shared_ptr<std::vector<int>> v) : v_(v) {}\n  // Sharing ownership with any number of owners\n  private:\n  std::shared_ptr<std::vector<int>> v_;\n};\n```", "```cpp\nWidget* w = MakeWidget();\n```", "```cpp\nWidgetFactory WF;\nWidget* w = WF.MakeAnother();\n```", "```cpp\nWidget* w = MakeWidget();\nWidget* w1 = Transmogrify(w);\n```", "```cpp\nvoid Double(std::shared_ptr<std::vector<int>> v) {\n  for (auto& x : *v) {\n    x *= 2;\n  }\n};\n...\nstd::shared_ptr<std::vector<int>> v(...);\nDouble(v);\n...\n```", "```cpp\n// Example 01\nvoid Transmogrify(Widget* w) {        // I will not delete w\n  ...\n}\nvoid MustTransmogrify(Widget& w) {   // Neither will I\n  ...\n}\n```", "```cpp\n// Example 02\nclass WidgetProcessor {\n  public:\n  WidgetProcessor(Widget* w) : w_(w) {}\n  WidgetProcessor() {} // DO NOT delete w_!!!\n    ...\n  private:\n  Widget* w_;    // I do not own w_\n};\n```", "```cpp\nvoid Work() {\n  Widget w;\n  Transmogrify(w);\n  Draw(w);\n}\n```", "```cpp\n// Example 03\nclass FancyWidget : public Widget { ... };\nstd::unique_ptr<Widget> w(new FancyWidget);\n```", "```cpp\nstd::unique_ptr<Widget> w(WidgetFactory());\n```", "```cpp\n// Example 04\nstd::unique_ptr<Widget> WidgetFactory() {\n  Widget* new_w = new Widget;\n    ...\n  return std::unique_ptr<Widget>(new_w);\n}\nstd::unique_ptr<Widget> w(WidgetFactory());\n```", "```cpp\nvoid Transmogrify(Widget* w);\nTransmogrify(WidgetFactory());\n```", "```cpp\nstd::unique_ptr<Widget> w(WidgetFactory());\nTransmogrify(w.get());\nTransmogrify(&*w);     // same as above if w is not null\n```", "```cpp\n// Example 05\nvoid Consume(Widget&& w) {\n  auto my_w = std::move(w);\n    ...\n}\nWidget w, w1;\nConsume(std::move(w));    // No more w\n// w is in a moved-from state now\nConsume(w1);    // Does not compile - must consent to move\n```", "```cpp\n// Example 06\nstruct ListNode {\n  T data;\n  std::shared_ptr<ListNode> next, prev;\n};\nclass ListIterator {\n  ...\n  std::shared_ptr<ListNode> node_;\n};\nclass List {\n  ...\n  std::shared_ptr<ListNode> head_;\n};\n```", "```cpp\nclass C {\n  std::string s_;\n};\n …\nstd::vector<int> v = … ;    // v owns the array of int\nC c;                       // c owns the string s\n```", "```cpp\nclass Builder {\n  std::string* str_;\n  public:\n  Builder(…) : str_(new std::string){\n    … construct string str_ …\n  }\n  std::string* get(){\n    std::string* tmp = str_;\n    str_ = nullptr;\n    return tmp;\n  }\n};\n```", "```cpp\n// Example 07\nclass Builder {\n  std::string str_;\n  public:\n  Builder(…){ … construct string str_ … }\n  std::string get(){ return std::move(str_); }\n};\nstd::string my_string = Builder(…).get();\n```", "```cpp\nstd::string MakeString(…) {\n  std::string str;\n  … construct the string …\n  return str;\n}\nstd::string my_string = MakeString(…);\n```", "```cpp\nstd::unique_ptr<std::string*> str;\nif (need_string) str.reset(new std::string(…args…));\n```", "```cpp\nstd::optional<std::string> str;\nif (need_string) str.emplace(…args…);\n```", "```cpp\nvoid work_on_string(const std::string& str);\nstd::string my_string = …;\nwork_on_string(my_string);\n```", "```cpp\nvoid work_on_string(const char* str);\nstd::unique_ptr<char[]> my_string(new char[…length…]);\n… initialize the string …\nwork_on_string(my_string.get());\n```", "```cpp\nvoid work_on_string(const std::unique_ptr<char[]>& str);\n```", "```cpp\n// Example 09\nvoid work_on_string(std::string_view str);\nstd::string my_string = …;\nwork_on_string(my_string);\n```", "```cpp\n// Example 09\nvoid consume_string(std::string&& str);\nstd::string my_string = …;\nconsume_string(std::move(my_string));\n// Do not use my_string anymore!\n```", "```cpp\nvoid work_on_data(std::vector<int>& data);\nstd::vector<int> my_data = …;\nwork_on_data(my_data);\n```", "```cpp\n// Example 10\nvoid ModifyData(std::span<int> data);\nstd::vector<int> my_data = …;\nModifyData(my_data); // Can change my_data\n```", "```cpp\n// Example 10\nvoid UseData(std::span<const int> data);\nstd::vector<int> my_data = …;\nUseData(my_data); // Cannot change my_data\n```", "```cpp\n// Example 11\nvoid ModifyData(std::ranges::view auto data) { … }\nstd::list<int> my_data = …;\nModifyData(std::views::all(my_data));\n```", "```cpp\nvoid ModifyData(std::ranges::range auto data) { … }\nstd::list<int> my_data = …;\nModifyData(my_data);\n```", "```cpp\nvoid ModifyData(std::ranges::range auto&& data) { … }\n```"]