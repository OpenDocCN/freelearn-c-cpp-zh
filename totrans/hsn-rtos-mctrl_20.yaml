- en: Multi-Processor and Multi-Core Systems
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多处理器和多核系统
- en: So far, we've discussed many different ways of programming a single **microcontroller
    unit** (**MCU**). But what if the task at hand requires more processing than a
    single-core MCU can supply? What if the mechanical constraints of the system dictate
    the use of multiple MCUs physically distributed in the system while working together
    to complete a task? What about cases where reliability is paramount and a single
    failed processor results in a catastrophic system failure? All of these cases
    require the use of more than one processing core and, in some cases, more than
    one MCU.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经讨论了许多编程单个**微控制器单元**（**MCU**）的不同方法。但如果手头的任务需要比单个核心MCU能提供的更多处理能力呢？如果系统的机械约束要求使用多个物理分布在系统中的MCU来协同完成任务呢？如果可靠性至关重要，单个处理器的故障会导致系统灾难性故障呢？所有这些情况都需要使用多个处理核心，在某些情况下，甚至需要多个MCU。
- en: This chapter explores multi-core and multi-processor solutions and their different
    applications. First, we'll take a look at the different design requirements that
    might drive a multi-core/processor solution. We'll then dive a bit deeper into
    the different ways FreeRTOS can be used in multi-core/processor systems. Finally,
    some recommendations on choosing an inter-processor communication scheme will
    be presented.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章探讨了多核和多处理器解决方案及其不同的应用。首先，我们将探讨可能推动多核/处理器解决方案的不同设计要求。然后，我们将更深入地探讨FreeRTOS在多核/处理器系统中的不同使用方式。最后，将提出一些关于选择处理器间通信方案的建议。
- en: 'In a nutshell, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，我们将涵盖以下主题：
- en: Introducing multi-core and multi-processor systems
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍多核和多处理器系统
- en: Exploring multi-core systems
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索多核系统
- en: Exploring multi-processor systems
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索多处理器系统
- en: Exploring inter-processor communication
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索处理器间通信
- en: Choosing between multi-core and multi-processor systems
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在多核和多处理器系统之间进行选择
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: There are no technical requirements for this chapter.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章没有技术要求。
- en: Introducing multi-core and multi-processor systems
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍多核和多处理器系统
- en: 'First, let''s get our terminology straight. A **multi-core** design is a single
    chip with multiple CPUs inside it, with at least some memory shared between the
    cores:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们明确一下术语。**多核**设计是指单个芯片内部有多个CPU，其中至少有一些内存是核心间共享的：
- en: '![](img/90863091-a1a4-4e4b-b106-686ff0e5ac41.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/90863091-a1a4-4e4b-b106-686ff0e5ac41.png)'
- en: Multi-core parts span a very broad range, from the larger, 64-bit parts that
    have multiple identical CPU cores to the ARM big.LITTLE architecture, which incorporates
    both high-bandwidth CPUs and power-conscious MCUs in the same package. Recently,
    multi-core MCUs have also become more commonly available. **G****raphics processing
    units** (**GPUs**) can also be grouped into the multi-core category.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 多核部件范围非常广泛，从具有多个相同CPU核心的大型64位部件到ARM big.LITTLE架构，该架构在同一封装中结合了高带宽CPU和节能的MCU。最近，多核MCU也变得更加常见。**图形处理单元**（**GPU**）也可以归类到多核类别。
- en: 'A **multi-processor** **system** is one where there are multiple processor
    chips in the design. For the purposes of our discussions here, these chips can
    reside on the same **printed circuit board assembly** (**PCBA**) or different
    PCBAs distributed throughout a larger system:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**多处理器**系统是指设计中包含多个处理器芯片。在我们的讨论中，这些芯片可以位于同一**印刷电路板组装**（**PCBA**）上，或者分布在一个更大系统中的不同PCBA上：'
- en: '![](img/6471e083-789e-4918-9c19-9bc468a40ed1.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6471e083-789e-4918-9c19-9bc468a40ed1.png)'
- en: Both multi-core and multi-processor topologies can be found in many different
    places, such as smartphones, small networked sensing devices, industrial automation
    equipment, test equipment, medical equipment, appliances, and of course, a range
    of computing devices, such as desktops, laptops, and so on.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 多核和处理器拓扑结构可以在许多不同的地方找到，例如智能手机、小型网络传感设备、工业自动化设备、测试设备、医疗设备、家用电器，当然，还包括一系列计算设备，如台式机、笔记本电脑等。
- en: There are many different driving forces for using these two different topologies,
    beyond a simple need for more or faster processing. Sometimes, a system needs
    to come online *instantly,* without waiting for a full **general-purpose operating
    system** (**GPOS**) to boot. Occasionally, there are regulatory requirements that
    are easier to meet by segregating system functions into multiple cores (and code
    bases) so that only a portion of the total code (or system) is required to go
    through a stringent review. There could be electro-mechanical considerations in
    a system (such as long wire runs to motors/actuators or sensitive analog signals)
    that are best addressed by having a processor in close physical proximity. In
    high-reliability systems, redundancy is very common.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这两种不同的拓扑结构有很多不同的驱动因素，而不仅仅是需要更多或更快的处理能力。有时，系统需要立即上线，而无需等待完整的**通用操作系统**（**GPOS**）启动。偶尔，通过将系统功能分割到多个核心（和代码库）中，可以更容易地满足监管要求，这样只需要部分总代码（或系统）通过严格的审查。在系统中可能存在一些电磁考虑因素（如到电机/执行器的长线或敏感的模拟信号），最好通过在物理上靠近的处理器来解决。在高可靠性系统中，冗余非常常见。
- en: Now we have a general idea of the terminology, let's get into some additional
    details and use cases for these systems, starting with multi-core designs.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对术语有了大致的了解，让我们深入了解这些系统的更多细节和用例，从多核设计开始。
- en: Exploring multi-core systems
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索多核系统
- en: 'First, let''s cover a few different types of multi-core systems. They have
    two primary types of configurations/architectures: heterogeneous and homogeneous.
    A heterogeneous system is one that has multiple cores, but they are different
    in some way. Contrast this with a homogeneous system, where all CPUs can be treated
    identically and interchangeably.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们介绍几种不同的多核系统类型。它们主要有两种配置/架构：异构和同构。异构系统是具有多个核心，但它们在某些方面是不同的。与此相对的是同构系统，其中所有CPU都可以同等对待并互换使用。
- en: Heterogeneous multi-core systems
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异构多核系统
- en: A heterogeneous multi-core system has at least two processing cores in the same
    device and includes differences in either the processor architecture of the core
    or the way the cores access shared resources, such as system memory, peripherals,
    or I/O. For example, at the lower end of the spectrum, we can have multiple MCU
    cores on the same chip. The LPC54100 series from NXP incorporates a Cortex-M0+
    and a Cortex-M4, both running at 150 Mhz, in the same package.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 异构多核系统在同一设备中至少包含两个处理核心，并且包括核心的处理器架构或核心访问共享资源（如系统内存、外围设备或I/O）的方式的不同。例如，在频谱的较低端，我们可以在同一芯片上拥有多个MCU核心。NXP的LPC54100系列集成了Cortex-M0+和Cortex-M4，两者都运行在150
    MHz，封装在同一芯片中。
- en: 'In this device, the MCU cores are different, but their connection to system
    peripherals is identical—except for instruction and data buses, which are only
    available on the Cortex-M4:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个设备中，MCU核心是不同的，但它们连接到系统外围设备的方式是相同的——除了指令和数据总线，这些总线仅在Cortex-M4上可用：
- en: '![](img/af09d5a0-4ec4-48dd-8dc3-63829ce3ad4b.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/af09d5a0-4ec4-48dd-8dc3-63829ce3ad4b.png)'
- en: 'We can use systems like these in different ways:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用这些系统以不同的方式：
- en: '**Segmenting hard real-time operations from more general-purpose computing**:
    The M0+ could handle low-level peripheral or hardware access/control, while the
    M4 handles the higher-level functionality required, such as GUIs and connectivity.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**将硬实时操作与更通用的计算分离**：M0+可以处理低级别的外围或硬件访问/控制，而M4处理所需的更高级功能，例如GUI和连接性。'
- en: '**Power conscious design**: Low-level control and interfacing is performed
    on the lower-power M0+, only activating the M4 when computationally expensive
    operations are required.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**节能设计**：低级别控制和接口在低功耗的M0+上执行，仅在需要计算密集型操作时激活M4。'
- en: Since the LPC54100 has two MCU cores, we'll focus on bare-metal programming
    (no operating system) and operating systems that don't require a full-blown **memory
    management unit** (**MMU**), such as FreeRTOS. Running different (or multiple
    copies of the same) operating systems on the two cores is called **asymmetric
    multi-processing**.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 由于LPC54100有两个MCU核心，我们将关注裸机编程（无操作系统）以及不需要完整**内存管理单元**（**MMU**）的操作系统，如FreeRTOS。在两个核心上运行不同的（或多个相同操作系统的副本）被称为**不对称多处理**。
- en: The name *asymmetric* comes from the fact that the two cores are treated differently
    from one another—there is *asymmetry* between them. This is quite a bit different
    from the *symmetric* multi-core approached used on desktop-based operating systems,
    where the various cores are all treated equally. Symmetric multi-core systems
    will be covered in the *Homogeneous multi-core systems*section.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: “不对称”这个名字来源于两个核心被不同对待的事实——它们之间存在不对称。这与在基于桌面的操作系统上使用的对称多核方法大不相同，在那种方法中，各个核心都被同等对待。对称多核系统将在“同构多核系统”部分中介绍。
- en: 'For example, we could run multiple copies of FreeRTOS on each of the two cores:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以在两个核心的每个核心上运行多个FreeRTOS副本：
- en: '![](img/ba090720-8cbe-4cc1-a479-c5880bdaf153.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ba090720-8cbe-4cc1-a479-c5880bdaf153.png)'
- en: In a configuration like this, the two cores run completely independently from
    one another. Even though FreeRTOS is being run on both cores, there is no flash
    program space shared between the cores—each core has a firmware image that is independent from
    the other. RAM behaves in the same way—the full RAM memory space is available
    to both cores, but by default, each core will receive its own area for stack,
    heap, global variables, and so on.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种配置中，两个核心完全独立地运行。尽管FreeRTOS在两个核心上运行，但核心之间没有共享的闪存程序空间——每个核心都有一个与其他核心独立的固件映像。RAM的行为方式相同——完整的RAM内存空间对两个核心都是可用的，但默认情况下，每个核心将接收自己的栈、堆、全局变量等区域。
- en: So, each core is running its own program—how do the two programs coordinate
    activities between each other? We need some way of passing information back and
    forth—but how?
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，每个核心都在运行自己的程序——这两个程序如何协调彼此的活动？我们需要一种方式来回传递信息——但如何？
- en: Inter-core communication
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 核间通信
- en: 'Information sharing between the cores is possible, but is subject to the same
    concurrent-access considerations that any other multi-threaded environment has,
    which is why mailbox hardware is typically included onchip. This hardware is dedicated
    to facilitating communication between the two cores. Mailboxes will generally
    have the following features:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 核间信息共享是可能的，但受到与其他任何多线程环境相同的并发访问考虑因素的影响，这就是为什么通常在芯片上包含邮箱硬件。这种硬件专门用于促进两个核心之间的通信。邮箱通常具有以下功能：
- en: '**Hardware mutex functionality**: Used to protect RAM shared between the two
    cores. The idea is identical to mutexes in a pure software environment—they are
    used to provide mutually exclusive access to a shared resource.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**硬件互斥功能**：用于保护两个核心之间共享的RAM。这个想法与纯软件环境中的互斥锁相同——它们用于提供对共享资源的互斥访问。'
- en: '**Interrupts to/from each core**: These interrupts can be raised by a core
    after writing data to a shared area of memory, alerting the other core that a
    message/data is available.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**中断到/自每个核心**：这些中断可以在核心向共享内存区域写入数据后触发，通知其他核心有消息/数据可用。'
- en: Legacy application extension
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 旧应用程序扩展
- en: We're not limited to running FreeRTOS on both cores—any mixture of RTOSes or
    bare metal can be mixed or matched between the cores. Let's say a bare-metal legacy
    application already existed but some new additional functionality was required
    to take advantage of a new opportunity. For example, to stay competitive, the
    device might need a *facelift* and have a GUI, web frontend, or IoT stack build
    added to it. The new functionality could potentially be developed separately from
    the underlying legacy code, leaving the legacy code largely intact and undisturbed.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不仅限于在两个核心上运行FreeRTOS——可以在核心之间混合或匹配任何RTOS或裸机。假设已经存在一个裸机旧应用程序，但需要一些新的附加功能来利用新的机会。例如，为了保持竞争力，设备可能需要进行“翻新”并添加GUI、Web前端或物联网堆栈。新功能可以独立于底层旧代码开发，从而让旧代码保持大体完整且不受干扰。
- en: 'For example, the legacy code could be run on the Cortex-M0+, while the new
    functionality is added to the Cortex-M4:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，旧代码可以在Cortex-M0+上运行，而新功能则添加到Cortex-M4中：
- en: '![](img/17c744a6-20cc-4737-8882-a1555c2455fe.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/17c744a6-20cc-4737-8882-a1555c2455fe.png)'
- en: 'In a setup like this, whether shared RAM is used as a data exchange between
    the cores will depend greatly on how comfortable a team is in modifying the legacy
    code base and how the application is structured. For example, rather than modifying
    an existing code base to use proper mailbox-implemented mutexes before accessing
    a shared data structure, it might be preferable to use a pre-existing hardware
    interface as the data transfer mechanism, treating the secondary CPU more like
    an external client. Since many legacy systems use UARTs as the primary interface
    to the system, it is possible to use these data streams as an interface between
    the processors, keeping modifications to the legacy code to a minimum:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这样的设置中，是否使用共享RAM作为核心之间的数据交换，将很大程度上取决于团队修改遗留代码库的舒适度以及应用程序的结构。例如，与其修改现有的代码库以在访问共享数据结构之前使用适当的邮箱实现的互斥锁，不如使用现有的硬件接口作为数据传输机制，将辅助CPU更像是一个外部客户端。由于许多遗留系统使用UART作为系统的主要接口，因此可以使用这些数据流作为处理器之间的接口，将修改遗留代码的影响降到最低：
- en: '![](img/5a5c1620-8b8f-4a82-abea-8644bd06f944.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5a5c1620-8b8f-4a82-abea-8644bd06f944.png)'
- en: 'This approach avoids significant modifications to the legacy code base at the
    expense of using a slower interface (physical peripherals are slower and more
    CPU-intensive than simple memory transfers) and routing signals outside the processor.
    Although far from ideal, this approach can be used to test the viability of a
    new opportunity before investing significant engineering effort in a more elegant
    solution:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法通过使用较慢的接口（物理外设比简单的内存传输慢且CPU密集型）以及将信号路由到处理器外部来避免对现有代码库进行重大修改。尽管这种方法远非理想，但它可以在投入大量工程努力于更优雅的解决方案之前，用来测试新机会的可行性：
- en: '![](img/504b6b0b-95b7-4272-98a4-b8241746eb62.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/504b6b0b-95b7-4272-98a4-b8241746eb62.png)'
- en: This type of approach allows the team to focus on developing new interfaces
    for an existing system—whose core functionality doesn't need to change—with minimal
    impact on the original system.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的方法允许团队专注于为现有系统（其核心功能不需要改变）开发新的接口，对原始系统的影响最小。
- en: Depending on the circumstances, it may also make more sense to leave the legacy
    code on the original MCU, rather than porting it to a core inside a new MCU. Each
    project will likely have its own the constraints required to guide this decision.
    Although all of this this might look like a simple task from a very high level,
    each project usually has some hidden complexities that need to be considered.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 根据具体情况，也可能更有意义将遗留代码留在原始MCU上，而不是将其移植到新MCU的核心内部。每个项目可能都会有其自身的约束条件，以指导这一决策。尽管从非常高的层面来看，所有这些都可能看起来像是一项简单的任务，但每个项目通常都有一些需要考虑的隐藏复杂性。
- en: High-demand hard real-time systems
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高需求硬实时系统
- en: At the other end of the heterogenous multi-core spectrum from an NXP LPC54100
    would be a device such as the NXP i.Mx8, which contains two Cortex-A72s, four
    Cortex-A53s, two Cortex-M4Fs, one DSP, and two GPUs. A system such as this one
    will generally be used where extremely computationally intensive operations are
    required, in addition to low-latency or hard real-time interactions with hardware.
    Computer vision, AI, on-target adaptive machine learning, and advanced closed-loop
    control systems are all reasonable applications for the i.Mx8\. So, instead of
    incorporating an i.Mx8 (or similar CPU) into a product, why not use a more general
    purpose computing solution for a system that requires this much computing power?
    After all, general-purpose computers have had GPUs and multi-core CPUs for a decade
    or more, right?
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在NXP LPC54100这样的异构多核谱的另一端，将是一个如NXP i.Mx8这样的设备，它包含两个Cortex-A72，四个Cortex-A53，两个Cortex-M4F，一个DSP和两个GPU。这种类型的系统通常用于需要极高计算密集型操作的地方，以及需要与硬件进行低延迟或硬实时交互的地方。计算机视觉、AI、目标自适应机器学习和高级闭环控制系统都是i.Mx8的合理应用。因此，与其将i.Mx8（或类似的CPU）集成到产品中，为什么不使用更通用的计算解决方案来满足这种计算能力要求呢？毕竟，通用计算机已经拥有GPU和多核CPU十年或更长时间了，对吧？
- en: 'In some systems, it might be perfectly acceptable to run a more general-purpose
    computing hardware and operating system. However, when there are *hard real-time
    requirements*(the system is considered to have failed if a real-time deadline
    was missed), a GPOS won''t be sufficient. A compelling reason for using a device
    such as the i.Mx8, rather than simply a GPOS on top of a CPU/GPU combination,
    is that hard real-time capable low-latency cores such as the Cortex-M4 are used
    to handle hard real-time tasks, where extremely reliable low latency is paramount.
    The higher-throughput hardware is used for doing the computationally *heavy lifting*
    operations, where throughput is important, but higher latency and less determinism
    can be tolerated:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些系统中，运行更通用的计算硬件和操作系统可能是完全可接受的。然而，当存在**硬实时需求**（如果错过了实时截止日期，系统被认为已经失败）时，一个通用型操作系统（GPOS）将不足以满足需求。使用像i.Mx8这样的设备而不是仅仅在CPU/GPU组合之上使用GPOS的一个令人信服的理由是，它使用了能够处理硬实时任务的低延迟核心，如Cortex-M4，这些核心具有极低的延迟和极高的可靠性。高吞吐量硬件用于执行计算上**繁重**的操作，在这些操作中，吞吐量很重要，但可以容忍更高的延迟和更低的确定性：
- en: '![](img/62e8105e-1277-4da8-8deb-dbc0674427c6.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/62e8105e-1277-4da8-8deb-dbc0674427c6.png)'
- en: The smaller MCU-based cores are extremely good at performing low-level exchanges
    with hardware such as sensors and actuators. Timing-sensitive operations requiring
    the use of specialized timing peripherals are best left to the MCU hardware. For
    example, a motor control system might require directly controlling an H bridge
    and reading data from an encoder that uses an obscure/proprietary timing format.
    This is fairly straightforward to implement using an MCU that has dedicated timing
    hardware. Differential PWM signals with dead-time insertion used for motor control
    and high-resolution timing capture are both fairly common features. All of this
    tightly controlled, low-latency control structure can be implemented using the
    MCU and its specialized peripherals (either on bare metal or on an RTOS), then
    higher-level commands can be exposed to a GPOS. Specifically on the i.Mx8, we
    can now perform very low-level, timing-sensitive operations using MCUs, while
    simultaneously performing the high-level, massively parallel operations required
    for computer vision, machine learning, and AI using the higher-performance Cortex-A
    processors, DSP, and GPUs.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 较小的基于MCU的核心在执行与传感器和执行器等硬件的低级交换方面非常出色。需要使用专用定时外设的时序敏感操作最好留给MCU硬件处理。例如，一个电机控制系统可能需要直接控制H桥并从使用晦涩/专有定时格式的编码器读取数据。使用具有专用定时硬件的MCU来实现这一点相当直接。用于电机控制和高分辨率定时捕获的差分PWM信号和带死区插入的信号都是相当常见的功能。所有这些紧密控制、低延迟的控制结构都可以使用MCU及其专用外设（无论是在裸机还是在实时操作系统上）实现，然后可以将高级命令暴露给GPOS。具体到i.Mx8，我们现在可以使用MCU执行非常低级、时序敏感的操作，同时使用高性能的Cortex-A处理器、DSP和GPU执行计算机视觉、机器学习和人工智能所需的高级、大规模并行操作。
- en: Heterogeneous systems aren't limited to embedded systems! Heterogeneous topologies
    have existed for very large computing clusters for decades, but we're keeping
    our focus on examples most relevant to the embedded space.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 异构系统并不仅限于嵌入式系统！异构拓扑结构在几十年的非常大型计算集群中就已经存在，但我们仍然专注于与嵌入式空间最相关的例子。
- en: So, now that we've covered some examples of heterogenous multi-core systems,
    what about homogeneous multi-core systems?
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，既然我们已经讨论了一些异构多核系统的例子，那么同构多核系统又如何呢？
- en: Homogeneous multi-core systems
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 同构多核系统
- en: As you might expect from the name, a homogeneous multi-core system is one where
    all of the cores are the same. These types of multi-core systems have been traditionally
    found in desktop computing. Rather than having individual cores tailored to perform
    a few types of tasks very well (as with heterogenous systems), there are multiple
    cores that are all identical. Rather than programming individual cores with specific
    tasks that are tied to the cores, all of the cores are treated identically. This
    type of approach is referred to as symmetric multi-processing (there is symmetry
    between all of the cores in the system); they are all treated identically. In
    a symmetric system, cores will be exposed to a single kernel, rather than divided
    up into multiple kernels/schedulers.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如同名字所暗示的那样，同构多核系统是指所有核心都相同的一种系统。这类多核系统传统上在桌面计算中找到。与异构系统不同，异构系统中的每个核心都针对执行几种类型的任务非常出色（正如异构系统那样），这里有多达多个完全相同的核心。而不是用特定的任务编程特定的核心，所有核心都被同等对待。这种类型的做法被称为对称多处理（系统中的所有核心之间都有对称性）；它们都被同等对待。在对称系统中，核心将暴露给单个内核，而不是分成多个内核/调度器。
- en: Even in asymmetric multi-processing setups, there can be components that are
    symmetric. For example, the i.Mx8 mentioned earlier will usually have the Cortex-A53
    cores set up in a symmetric multi-processing arrangement, where all four cores
    are available for scheduling by a single kernel (and all treated identically).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在不对称的多处理器设置中，也可能存在对称的组件。例如，前面提到的i.Mx8通常会将Cortex-A53核心设置为对称多处理配置，其中所有四个核心都可供单个内核（并且以相同的方式处理）进行调度。
- en: But what about when there is a need for processors in different physical locations?
    Or what if a single processor is limited in its functionality by the number of
    pins it has available?
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 但当需要在不同物理位置使用处理器时怎么办？或者如果单个处理器因为可用的引脚数量有限而限制了其功能，又会如何？
- en: Exploring multi-processor systems
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索多处理器系统
- en: Similar to the way multi-core systems are excellent for segmenting firmware
    functionality and providing parallel execution, multi-processor systems are useful
    in many situations for a variety of reasons. Let's take a look at a few examples.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 与多核系统在分割固件功能并提供并行执行方面非常出色的方式类似，多处理器系统在许多情况下由于各种原因都很有用。让我们看看几个例子。
- en: Distributed systems
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分布式系统
- en: 'Embedded systems often have a very large amount of interaction with the physical
    world. Unlike the digital realm, where 1s and 0s can literally be sent around
    the world without a second thought, the physical world is a harsh place for sensitive
    analog signals—minimizing the distanced traversed can be critical. It is a good
    idea to keep analog processing as close to its source as possible. For a mixed
    signal system with analog components, this means keeping the signal paths as short
    as possible and getting the sensitive analog signals processed and converted into
    their digital representations as close to the source as possible:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌入式系统通常与物理世界有大量的交互。与数字领域不同，在数字领域，1和0可以毫无顾忌地发送到世界各地，而物理世界对敏感的模拟信号来说是一个残酷的地方——最小化穿越的距离可能是关键的。将模拟处理尽可能靠近其源头是一个好主意。对于一个具有模拟组件的混合信号系统，这意味着尽可能缩短信号路径，并将敏感的模拟信号处理并转换为尽可能靠近源头的数字表示：
- en: '![](img/66eb9800-a090-4657-91b4-a75808a6832b.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/66eb9800-a090-4657-91b4-a75808a6832b.png)'
- en: In medium-to-high power systems, reducing the distance traversed by wires carrying
    current to control motors, solenoids, and other actuators will reduce the radiated
    electromagnetic emissions of the system (always a good idea). If the I/O in question
    is physically removed from the rest of the system, including an MCU in close proximity
    is an excellent way of localizing the digitization of the sensitive signals, which
    makes the system more immune to **electromagnetic interference** (**EMI**) while
    simultaneously minimizing the amount of wiring. In high vibration and motion environments,
    fewer wires means fewer potential points of mechanical failure, which results
    in higher reliability, less downtime, and fewer service calls.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在中等到高功率系统中，减少携带电流的电线穿越的距离，以控制电机、电磁阀和其他执行器，将减少系统的辐射电磁发射（总是一个好主意）。如果所讨论的I/O在物理上从系统其他部分分离出来，包括在附近放置一个MCU，这是一种将敏感信号的数字化局部化的优秀方法，这使得系统对**电磁干扰**（**EMI**）的抵抗力更强，同时最大限度地减少布线量。在高振动和运动环境中，更少的电线意味着更少的潜在机械故障点，这导致更高的可靠性、更少的停机时间和更少的维修请求。
- en: Parallel development
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 并行开发
- en: 'Using multiple processors also makes it very easy to provide a level of parallelism
    in the actual development of the system. Since teams will often find it easiest
    to focus on a well-defined subsystem, creating multiple subsystems makes running
    true parallel development (and reducing the overall schedule) a possibility. Each
    subsystem can be demarcated by its own processor and communication interface,
    along with a clear list of the responsibilities of the subsystem:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 使用多个处理器也使得在系统的实际开发中提供并行级别变得非常容易。由于团队通常会发现专注于一个定义良好的子系统是最容易的，因此创建多个子系统使得运行真正的并行开发（并减少整体进度）成为可能。每个子系统都可以由其自己的处理器和通信接口以及一个明确的子系统责任列表来界定：
- en: '![](img/9a64a938-2190-42ed-8139-e5234fd9d286.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/9a64a938-2190-42ed-8139-e5234fd9d286.png)'
- en: This approach also has the advantage of encouraging each team to fully test
    their system in isolation, documenting the interfaces and functionality as they
    move through development. Finally, it tends to keep any surprises during integration
    to a minimum, since the team is forced to put more thought into the entire architecture
    before starting development.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法也有鼓励每个团队独立全面测试其系统的优势，在开发过程中记录接口和功能。最后，它倾向于将集成过程中的任何惊喜降到最低，因为团队被迫在开始开发之前对整个架构进行更多思考。
- en: Design reuse
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计重用
- en: As processors begin to have a plethora of I/O connected to them, they may still
    have plenty of processing resources available but run out of available pins. At
    this point, there is a decision to make. ICs meant to provide port expansion are
    available, but should they be used? If you're designing a system with reuse in
    mind, it is important to see whether a subsystem approach can be employed, instead
    of creating a huge monolithic design, where all of the hardware and firmware is
    intertwined and tightly coupled. Sometimes, when the pin capacities of a single
    MCU are reached, it is an indication that the MCU is performing the functionality
    of several different subsystems. Often, if these subsystems are broken down and
    individually developed, they can be *dropped* into future products without modification,
    which can greatly decrease future projects' risks and schedule.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 随着处理器开始连接大量的I/O，它们可能仍然有足够的处理资源可用，但可用引脚却不足。这时，需要做出一个决定。提供端口扩展的IC是可用的，但应该使用它们吗？如果你在设计考虑重用的系统，重要的是要看看是否可以采用子系统方法，而不是创建一个巨大的单体设计，其中所有硬件和固件都交织在一起，紧密耦合。有时，当单个MCU的引脚容量达到极限时，这可能表明MCU正在执行几个不同子系统的功能。通常，如果将这些子系统分解并单独开发，它们可以无需修改地直接应用于未来的产品，这可以大大降低未来项目的风险和进度。
- en: High-reliability systems
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高可靠性系统
- en: High-reliability systems will often include multiple cores or processors for
    their critical functionality. However, rather than using this extra processing
    power to run individual parallel operations, they are set up for some level of
    redundancy. There are different ways of achieving redundancy. One path to creating
    a redundant system is for the cores to run in lockstep with one another. The results
    of each processor are meticulously checked against one another to detect any discrepancies.
    If a problem is found, the core (or processor) is taken offline and reset, with
    a set of tests run to ensure it comes back up correctly—then, it is put back into
    service.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 高可靠性系统通常会包括多个核心或处理器来执行其关键功能。然而，他们并不是使用额外的处理能力来运行单个并行操作，而是设置了某种程度的冗余。实现冗余的方式有很多种。创建冗余系统的一条途径是让核心同步运行。每个处理器的结果都会被仔细检查，以检测任何差异。如果发现问题，该核心（或处理器）将被离线并重置，运行一系列测试以确保它能够正确恢复——然后，它将被重新投入使用。
- en: In systems like these, there can be environmental considerations, such as EMI from
    running motors, solenoid valves, or other actuators. Sometimes the source of the
    environmental noise is more extraordinary, such as solar radiation, which is often
    a concern for high-altitude and space-bound systems.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在这样的系统中，可能需要考虑环境因素，例如运行电机、电磁阀或其他执行器产生的EMI。有时环境噪声的来源更为特殊，例如太阳辐射，这对于高空和太空系统通常是一个关注点。
- en: Now that we've explored the reasons why having multiple processors in a system
    can be useful, let's take a look at how to get all of these processors talking
    to one another.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经探讨了在系统中拥有多个处理器可能有益的原因，那么让我们来看看如何让所有这些处理器相互通信。
- en: Exploring inter-processor communication
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索处理器间通信
- en: Inter-processor communication was mentioned briefly in the context of distributed
    systems. Let's take a look at some of the considerations that go into choosing
    a suitable inter-processor bus.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在分布式系统的背景下简要提到了处理器间通信。让我们看看在选择合适的处理器间总线时需要考虑的一些因素。
- en: Choosing the right communication medium
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择合适的通信介质
- en: There are many considerations when choosing the communication medium used between
    processors, which we can break into a few different major categories.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择处理器之间使用的通信介质时，有许多考虑因素，我们可以将其分为几个不同的主要类别。
- en: 'The first is **timing**. In a real-time system, timing considerations are often
    some of the most important. If a message sent between nodes doesn''t make it to
    its destination on time and intact, it can have serious consequences:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 第一点是**时间**。在实时系统中，时间考虑因素通常是至关重要的。如果一个节点之间发送的消息没有按时且完整地到达目的地，可能会产生严重的后果：
- en: '**Latency**: How long will it take for a message to be sent and a response
    to be received? Having the ability to react quickly to communication between subsystems
    is often quite important.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**延迟**：发送消息并接收响应需要多长时间？能够快速响应子系统之间的通信通常非常重要。'
- en: '**Maximum jitter**: How much variability is there in the latency? Each system
    has its own requirements for how much variability is acceptable.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最大抖动**：延迟有多少可变性？每个系统都有自己的要求，即可以接受的变异性。'
- en: '**Error detection/reliability**: Does the communication medium provide a way
    of determining whether a message was received correctly and on time?'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**错误检测/可靠性**：通信介质是否提供了一种确定消息是否正确且及时接收的方法？'
- en: '**Throughput**: How much data can be pushed over the communication medium?
    For communication mediums that contain control data, throughput will often be
    measured in messages, rather than raw data (such as KB/sec or MB/sec). Often,
    maximum reliability and minimal latency will come at the cost of raw data transfer
    throughput—each message will contain additional overhead and handshaking.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**吞吐量**：可以通过通信介质传输多少数据？对于包含控制数据的通信介质，吞吐量通常以消息来衡量，而不是原始数据（如KB/秒或MB/秒）。通常，最大可靠性和最小延迟会以原始数据传输吞吐量为代价——每个消息都会包含额外的开销和握手。'
- en: 'The next category of considerations is **physical requirements**. Sometimes,
    physical requirements are quite important, other times they may hardly be a constraint.
    Here are some simple points to consider:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个考虑类别的重点是**物理要求**。有时，物理要求非常重要，而有时它们可能几乎不是限制。以下是一些简单的考虑点：
- en: '**Noise immunity**: Does the communication channel need to run through an electrically
    noisy environment? What types of cabling are required for proper EMI shielding?'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**抗噪声干扰性**：通信通道是否需要通过一个电气噪声环境？需要什么类型的电缆来进行适当的EMI屏蔽？'
- en: '**Number of nodes in the system**: How many nodes are required in the complete
    system? Most standards will have an upper bound on the number of connections due
    to electrical constraints.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**系统中的节点数量**：完整的系统中需要多少个节点？由于电气限制，大多数标准都会对连接数量有一个上限。'
- en: '**Distance**: How long will the run need to be? Will it be a short, chip-to-chip
    run within the PCB or a long run between buildings? Distributed systems can have
    widely different meanings to different developers and industries.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**距离**：运行需要多长？它将是PCB内部的芯片到芯片的短距离运行，还是建筑物之间的长距离运行？分布式系统对不同开发者和行业可能有不同的含义。'
- en: '**Required peripherals**: How much extra circuitry is acceptable? What kinds/sizes
    of connectors can be tolerated?'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**所需的周边设备**：可以接受多少额外的电路？可以容忍哪些类型/尺寸的连接器？'
- en: 'Then, we have **development team/project constraints**. Each team and project
    is fairly unique, but there are some common topics that should be covered:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们面临的是**开发团队/项目限制**。每个团队和项目都是相当独特的，但有一些共同的主题应该被涵盖：
- en: '**Complexity**: How much code is required to get the protocol up and running?
    Has the required external circuitry been proven to be functional? Does our team
    feel like the features provided by the solution are worth the development time
    required to implement it?'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**复杂性**：需要多少代码才能使协议运行起来？所需的外部电路是否经过验证是功能性的？我们的团队是否认为解决方案提供的功能值得所需实现它所需的开发时间？'
- en: '**Existing familiarity**: Has anyone on the team used this communication scheme
    before and is that experience directly relevant to the current project/product?
    Do we need to learn something new that is a better fit, rather than using something
    we''re already comfortable with but isn''t actually the best solution?'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**现有熟悉度**：团队中是否有人之前使用过这种通信方案，并且这种经验是否与当前项目/产品直接相关？我们需要学习一些更适合的新东西，而不是使用我们已经熟悉但并非最佳解决方案的东西吗？'
- en: '**Budget**: Does the communication scheme require any expensive components,
    such as exotic ICs, connectors, or proprietary stacks? Is it worth buying in aspects
    of the solution or contracting out some of the implementation?'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**预算**：这种通信方案是否需要任何昂贵的组件，例如特殊的集成电路、连接器或专有堆栈？在解决方案的某些方面购买或外包部分实现是否值得？'
- en: As you can imagine from the long list of considerations, there is no *one-size-fits-all*
    communication mechanism that is an excellent fit for all applications. That's
    why we have so many to choose from.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从长长的考虑因素列表中可以想象到的，没有一种通用的通信机制能够完美适用于所有应用。这就是为什么我们有这么多可供选择的原因。
- en: For example, while an industrial Ethernet communication solution may provide
    excellent latency and noise performance, the fact that it requires specialized
    hardware will make it unsuitable for many applications where it is not an explicit
    requirement. On the flip side, a low-performance serial protocol such as RS-232
    may be extremely easy to implement but have an unacceptably high amount of EMI
    and be susceptible to noise when used at high speeds. On the other hand, the complexity
    of a full TCP/IP stack might put off many would-be adopters, unless someone on
    the team already has familiarity with it and a driver stack is readily available
    for the target platform.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，虽然工业以太网通信解决方案可能提供出色的延迟和噪声性能，但需要专用硬件的事实将使其不适合许多不需要明确要求这种硬件的应用。另一方面，低性能的串行协议，如
    RS-232，可能非常容易实现，但可能会产生不可接受的电磁干扰，并且在高速使用时容易受到噪声的影响。另一方面，完整 TCP/IP 堆栈的复杂性可能会让许多潜在的采用者望而却步，除非团队中有人已经熟悉它，并且目标平台上有现成的驱动程序堆栈。
- en: Communication standards
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通信标准
- en: From the previous list of considerations, we can see that choosing a method
    for inter-processor communication isn't one size fits all. To help provide an
    idea of what's available, here are some examples of commonly used buses for MCU-based
    systems and some brief commentary on how they might be useful in a multi-processor
    system. This list is by no means exhaustive. Also, each standard has its own merits
    under different circumstances.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 从之前的考虑因素列表中，我们可以看出，选择处理器间通信的方法并不是一刀切。为了提供一个关于可用选项的概念，以下是一些常用总线示例，以及一些关于它们如何在多处理器系统中可能有用的简要评论。这个列表远非详尽无遗。此外，每种标准在不同的环境下都有其自身的优点。
- en: Controller area network
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制器局域网
- en: A **controller area network** (**CAN**) is the communication backbone for many
    subsystems in the automotive industry. The advantages of CAN are its robust physical
    layer, a prioritized messaging scheme, and multi-master bus arbitration. Many
    MCUs include dedicated CAN peripherals, which helps to ease the implementation.
    CAN is most naturally suited for shorter messages, since the data field of extended
    frames may only contain up to 8 bytes.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**控制器局域网**（**CAN**）是汽车行业许多子系统的通信骨干。CAN 的优点包括其健壮的物理层、优先级消息方案和多主总线仲裁。许多微控制器都包含专门的
    CAN 外设，这有助于简化实现。由于扩展帧的数据字段可能仅包含多达 8 字节，因此 CAN 最适合短消息。'
- en: Ethernet
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以太网
- en: Nearly all medium- to high-performance MCUs have provisions for Ethernet, requiring
    an external PHY, magnetics, and a connector for the hardware implementation. The
    sticking point here is ensuring suitable networking protocol stacks are available.
    The advantage of this approach is a wide range of options for popular protocols
    that run on top of TCP and UDP, as well as readily available, inexpensive hardware
    that can be used to build out a full network if required.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎所有中等到高性能的微控制器都提供了以太网支持，需要外部物理层、磁性和连接器进行硬件实现。这里的难点在于确保有合适的网络协议堆栈可用。这种方法的优点是，它为在
    TCP 和 UDP 之上运行的流行协议提供了广泛的选择，以及易于获取且价格低廉的硬件，如果需要，可以用来构建完整的网络。
- en: Similar to Modbus, Ethernet will often be chosen as the externally facing interface,
    rather than an inter-processor bus. Depending on the system architecture and hardware
    availability, there might not be a reason that it couldn't be used for both.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 与Modbus类似，以太网通常会被选为外部接口，而不是处理器间总线。根据系统架构和硬件可用性，可能没有理由不能将其用于两者。
- en: Inter-integrated communication bus
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内部互连通信总线
- en: '**Inter-integrated communication bus** (**I2C**) is most often used for communicating
    with low-bandwidth peripherals, such as sensors and EEPROMs. Most often, an MCU
    will be configured as the I2C bus master with one or more slave I2Cs. However,
    many MCUs contain I2C controllers that can be used to implement either the master
    or slave side of I2C. There are many aspects of the I2C protocol that make it
    non-deterministic, such as the ability for slaves to hold the clock line until
    they are ready to receive more data (clock stretching) and multi-master arbitration.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**内部互连通信总线**（**I2C**）最常用于与低带宽外设通信，如传感器和EEPROM。通常，MCU将被配置为I2C总线主设备，带有一个或多个从I2C。然而，许多MCU包含可以用于实现I2C主从任一侧的I2C控制器。I2C协议的许多方面使其非确定性，例如，从机可以保持时钟线直到它们准备好接收更多数据（时钟拉伸）和多主仲裁。'
- en: Local interconnect network
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 局部互连网络
- en: '**Local interconnect network** (**LIN**) is a commonly used automotive network
    subsystem for a maximum of 16 nodes when a full CAN is too complex or expensive
    to implement. The LIN physical layer is less fault-tolerant than CAN, but it is
    also more deterministic, since there can only be one bus master. STM32 USARTS
    will often have some helpful LIN-mode functionality built into the peripheral,
    but an external PHY IC is still required.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '**局部互连网络**（**LIN**）是一个常用的汽车网络子系统，当完整的CAN过于复杂或昂贵而难以实现时，最多支持16个节点。LIN物理层比CAN的容错性差，但它也更确定，因为只能有一个总线主设备。STM32
    USARTS通常会在外设中内置一些有用的LIN模式功能，但仍然需要外部PHY IC。'
- en: Modbus
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Modbus
- en: '**Modbus** is a protocol that historically ran on top of an RS-485 physical
    layer and is very popular in the industrial space as an externally facing protocol
    (although these days, the protocol is commonly found on top of TCP). Modbus is
    a fairly simple register-oriented protocol.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '**Modbus**是一个历史上运行在RS-485物理层之上的协议，在工业领域作为外部协议非常流行（尽管现在，该协议通常运行在TCP之上）。Modbus是一个相当简单的以寄存器为导向的协议。'
- en: Serial peripheral interface
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 串行外设接口
- en: A **serial peripheral interface** (**SPI**) can also be very useful as an easy-to-implement,
    highly deterministic inter-processor communication medium, especially when the
    accuracy of a slave isn't high enough to achieve the tight tolerances required
    for high baud rates on an asynchronous serial port. All the same drawbacks for
    custom asynchronous protocols also exist for SPI-based custom protocols, with
    the additional constraint that slave devices will have hard real-time constraints
    imposed based on how quickly the master needs responses back from the slave(s).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**串行外设接口**（**SPI**）也可以作为一个易于实现、高度确定性的处理器间通信介质，特别适用于从机的精度不足以实现异步串行端口上高波特率所需的紧密公差时。所有针对自定义异步协议的缺点在基于SPI的自定义协议中也同样存在，额外的约束是，从设备将根据主设备需要从从机（们）快速获得响应的速度来施加硬实时约束。'
- en: Since the SPI clock is driven by the master, it is the only device that can
    initiate a transfer. For example, if a slave is required to have a response ready
    within 30 µS of receiving a command from the master and it takes the slave 31
    S, the transfer is likely to be worthless. This can make SPI very attractive when
    tight determinism is required, but unnecessarily difficult to implement otherwise.
    Depending on the environment, the MCU's onboard SPI peripheral might need to be
    used with external differential transceivers to increase signal integrity.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 由于SPI时钟由主设备驱动，因此它是唯一可以启动传输的设备。例如，如果从机需要在接收到主设备命令后的30 µS内准备好响应，而从机需要31 S，那么传输很可能是无用的。这使得SPI在需要紧密确定性时非常吸引人，但在其他情况下不必要地难以实现。根据环境，MCU的板载SPI外设可能需要与外部差分收发器一起使用，以提高信号完整性。
- en: USB as an inter-processor communication bus
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: USB作为处理器间通信总线
- en: Now that more medium- to high-performance MCUs include a USB host, it is becoming
    more viable as an inter-processor communication bus. Whether or not USB is viable
    in a given application hinges on the number of nodes and the availability of a
    full USB stack and developers that can harness it. While the USB virtual comm
    class used in this book wasn't deterministic since it used bulk endpoints, interrupt
    transfers can be used to achieve deterministic scheduling of transfers over USB,
    since they are polled by the host at a rate defined during enumeration. For example,
    on a high-speed USB link (which will often require an external PHY), this equates
    to messages up to 1 KB polled every 125 µS.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在更多中等到高性能的MCU包括USB主机，它作为处理器间通信总线变得越来越可行。USB在特定应用中是否可行取决于节点数量以及完整的USB堆栈和能够利用它的开发者的可用性。虽然本书中使用的USB虚拟通信类不是确定性的，因为它使用了批量端点，但可以使用中断传输在USB上实现确定性的传输调度，因为它们在枚举期间以定义的速率被主机轮询。例如，在高速USB链路上（这通常需要外部PHY），这相当于每125
    µS轮询一次高达1 KB的消息。
- en: We've only scratched the surface of the possibilities for inter-processor communication
    in this section—there are many other options available, each with their own features,
    advantages, and disadvantages, depending on your project's requirements.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们只是触及了处理器间通信的可能性——还有许多其他选项可供选择，每个选项都有其自己的特性、优势和劣势，具体取决于你项目的需求。
- en: Now that we have a good understanding of what multi-core and multi-processor
    systems are, some common topologies, and some ways of communicating between the
    processors, let's take a step back and evaluate whether a multi-core or multi-processor
    design is necessary.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经对多核和多处理器系统有了良好的理解，包括一些常见的拓扑结构以及处理器之间的一些通信方式，让我们退一步来评估是否需要多核或多处理器设计。
- en: Choosing between multi-core and multi-processor systems
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在多核和处理器系统之间进行选择
- en: With more powerful MCUs and CPUs being announced every month, there is a virtually
    endless number of options to pick from. Multi-core MCUs are becoming more common.
    But the real question is—do you really need multiple cores or multiple processors
    in your design? Yes, they are readily available, but will it ultimately help or
    hurt the design in the long run?
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 随着每月都有更强大的MCU和CPU被宣布，可供选择的选择几乎无穷无尽。多核MCU变得越来越普遍。但真正的问题是——你的设计中是否真的需要多个核心或多个处理器？是的，它们很容易获得，但最终这会帮助还是伤害设计呢？
- en: When to use multi-core MCUs
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 何时使用多核MCU
- en: 'There are several cases where multi-core MCUs are an excellent fit:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种情况下，多核MCU是绝佳的选择：
- en: When true parallel-processing is required and space is constrained
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当需要真正的并行处理且空间受限时
- en: When tightly coupled parallel threads of execution are required
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当需要紧密耦合的并行执行线程时
- en: If your design is space-constrained, requires true parallel processing, or communication
    speed between two parallel processes is extremely critical, a multi-core MCU may
    be the best option. If the application requires parallel processing from multiple
    cores and can't be implemented using other hardware already present on the MCU—for
    example, running multiple CPU-intensive algorithms in parallel—a multi-core MCU
    might be the best fit for the application.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的设计空间受限，需要真正的并行处理，或者两个并行进程之间的通信速度极为关键，多核MCU可能是最佳选择。如果应用需要从多个核心进行并行处理，而无法使用MCU上已经存在的其他硬件实现——例如，并行运行多个CPU密集型算法——多核MCU可能最适合该应用。
- en: However, it is important to be aware of some downsides and alternatives. A multi-core
    MCU will likely be more challenging to replace (both in finding a replacement
    and porting the code) than discrete MCUs. Does the application truly need parallel
    execution at the CPU level or is there simply a need to perform some operations
    (such as communication) in parallel? If there is parallel functionality required
    that can be implemented using dedicated peripheral hardware (for example, filling
    communication buffers using DMA connected to a hardware peripheral), implementing
    the *parallel* functionality could be achieved without a second core.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，重要的是要意识到一些缺点和替代方案。多核MCU可能比离散MCU更难以替换（无论是寻找替代品还是移植代码）。应用是否真的需要在CPU级别进行并行执行，或者只是需要在并行执行某些操作（例如通信）？如果需要实现并行功能，而这些功能可以使用专用外设硬件（例如，使用连接到硬件外设的DMA填充通信缓冲区）实现，那么实现*并行*功能可以在不使用第二个核心的情况下完成。
- en: 'Some potential alternatives to multi-core MCUs are as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 多核MCU的一些潜在替代方案如下：
- en: Offloading some processing to hardware peripherals
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将一些处理任务卸载到硬件外设
- en: Ensuring DMA is utilized as much as possible
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保尽可能多地使用DMA。
- en: Multiple MCUs
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多个MCU
- en: When to use multi-processor systems
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 何时使用多处理器系统
- en: 'Multi-processor systems are useful in a wide variety of circumstances, such
    as the following:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在各种情况下，多处理器系统都很有用，例如以下情况：
- en: When subsystem reuse is possible
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当可能重用子系统时
- en: When multiple teams are available to work on a large project in parallel
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当有多个团队可以并行处理一个大型项目时
- en: When the device is large and physically dispersed
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当设备较大且物理上分散时
- en: When EMI considerations are paramount
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当EMI（电磁干扰）考虑至关重要时
- en: 'However, while multi-processor systems are useful, they do have some potential
    drawbacks:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，尽管多处理器系统很有用，但它们确实有一些潜在的缺点：
- en: Additional latency compared to having a single MCU.
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与单个MCU相比，额外的延迟。
- en: Real-time multi-processor communication can become complex and time-consuming
    to implement.
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实时多处理器通信可能会变得复杂且耗时。
- en: Additional up-front planning is required to ensure proper subsystems are developed.
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要额外的前期规划以确保正确开发子系统。
- en: Summary
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you were introduced to both multi-core and multi-processor
    systems and we covered some examples of each. You should now have an understanding
    of what the differences between them are and when designing a system using either
    approach is appropriate. Several examples of inter-processor communication schemes
    were also introduced, along with some highlights and advantages of each, as they
    relate to embedded real-time systems.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你被介绍了多核和多处理器系统，我们讨论了每种系统的几个例子。你现在应该了解它们之间的区别，以及在设计系统时使用这两种方法的适当性。还介绍了几个处理器间通信方案的例子，以及它们与嵌入式实时系统相关的亮点和优势。
- en: The great thing about multi-core and multi-processor topologies is that once
    you have a solid understanding of the building blocks for the concurrent system
    design (which we've covered), creating systems with more cores is just a matter
    of judiciously placing hardware where concurrent processing and abstraction will
    have the most impact.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 多核和多处理器拓扑结构的好处在于，一旦你对并发系统设计的构建块有了扎实的理解（我们已经讨论过），创建具有更多核心的系统就只是将硬件放置在并发处理和抽象化影响最大的位置的问题。
- en: In the next chapter, we'll be covering some of the problems you'll likely encounter
    during development and some potential solutions.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论你在开发过程中可能会遇到的一些问题以及一些潜在的解决方案。
- en: Questions
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'As we conclude, here is a list of questions for you to test your knowledge
    on this chapter''s material. You will find the answers in the *Assessments* section
    of the appendix:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们总结的时候，这里有一份问题列表，供你测试对本章材料的理解。你将在附录的*评估*部分找到答案：
- en: What is the difference between a multi-core architecture and a multi-processor
    architecture?
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 多核架构和多处理器架构之间的区别是什么？
- en: A mixture of operating systems and bare-metal programming can be used in an
    asymmetric multi-processing architecture.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在非对称多处理架构中，可以使用操作系统混合和裸机编程。
- en: 'True'
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正确
- en: 'False'
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误
- en: When selecting an inter-processor communication bus, the bus with the highest
    available transfer rate should always be used.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择处理器间通信总线时，应始终使用具有最高可用传输速率的总线。
- en: 'True'
  id: totrans-149
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正确
- en: 'False'
  id: totrans-150
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误
- en: Should multi-processor solutions be avoided because they add complexity to the
    architecture?
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是否应该避免使用多处理器解决方案，因为它们会增加架构的复杂性？
- en: Further reading
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: NXP AN11609—LPC5410x dual core usage: [https://www.nxp.com/docs/en/data-sheet/LPC5410X.pdf](https://www.nxp.com/docs/en/data-sheet/LPC5410X.pdf)
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NXP AN11609—LPC5410x双核使用：[https://www.nxp.com/docs/en/data-sheet/LPC5410X.pdf](https://www.nxp.com/docs/en/data-sheet/LPC5410X.pdf)
- en: Keil—USB concepts: [https://www.keil.com/pack/doc/mw/USB/html/_u_s_b__concepts.html](https://www.keil.com/pack/doc/mw/USB/html/_u_s_b__concepts.html)
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Keil—USB概念：[https://www.keil.com/pack/doc/mw/USB/html/_u_s_b__concepts.html](https://www.keil.com/pack/doc/mw/USB/html/_u_s_b__concepts.html)
