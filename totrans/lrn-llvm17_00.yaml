- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Constructing a compiler is a complex and fascinating task. The LLVM project
    provides reusable components for your compiler and the LLVM core libraries implement
    a world-class optimizing code generator, which translates a source language-independent
    intermediate representation of machine code for all popular CPU architectures.
    The compilers for many programming languages already take advantage of LLVM technology.
  prefs: []
  type: TYPE_NORMAL
- en: This book teaches you how to implement your own compiler and how to use LLVM
    to achieve it. You will learn how the frontend of a compiler turns source code
    into an abstract syntax tree, and how to generate **Intermediate Representation**
    (**IR**) from it. Furthermore, you will also explore adding an optimization pipeline
    to your compiler, which allows you to compile the IR to performant machine code.
  prefs: []
  type: TYPE_NORMAL
- en: The LLVM framework can be extended in several ways, and you will learn how to
    add new passes, and even a completely new backend to LLVM. Advanced topics such
    as compiling for a different CPU architecture and extending clang and the clang
    static analyzer with your own plugins and checkers are also covered. This book
    follows a practical approach and is packed with example source code, which makes
    it easy to apply the gained knowledge within your own projects.
  prefs: []
  type: TYPE_NORMAL
- en: What’s new in this edition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Learn LLVM 17* now features a new chapter dedicated to introducing the concept
    and syntax of the TableGen language used within LLVM, in which readers can leverage
    to define classes, records, and an entire LLVM backend. Furthermore, this book
    also presents an emphasis on backend development, which discusses various new
    backend concepts that can be implemented for an LLVM backend, such as implementing
    the GlobalISel instruction framework and developing machine function passes.'
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is for compiler developers, enthusiasts, and engineers who are interested
    in learning about the LLVM framework. It is also useful for C++ software engineers
    looking to use compiler-based tools for code analysis and improvement, as well
    as casual users of LLVM libraries who want to gain more knowledge of LLVM essentials.
    Intermediate-level experience with C++ programming is mandatory to understand
    the concepts covered in this book more effectively.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*Chapter 1*](B19561_01.xhtml#_idTextAnchor017), *Installing LLVM*, explains
    how to set up and use your development environment. At the end of the chapter,
    you will have compiled the LLVM libraries and learned how to customize the build
    process.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 2*](B19561_02.xhtml#_idTextAnchor037), *The Structure of a Compiler*,
    gives you an overview of the components of a compiler. At the end of the chapter,
    you will have implemented your first compiler producing LLVM IR.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 3*](B19561_03.xhtml#_idTextAnchor055), *Turning the Source File into
    an Abstract Syntax Tree*, teaches you in detail how to implement the frontend
    of a compiler. You will create your own frontend for a small programming language,
    ending with the construction of an abstract syntax tree.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B19561_04.xhtml#_idTextAnchor068), *Basics of IR Code Generation*,
    shows you how to generate LLVM IR from an abstract syntax tree. At the end of
    the chapter, you will have implemented a compiler for the example language, emitting
    assembly text or object code files as a result.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B19561_05.xhtml#_idTextAnchor091), *IR Generation for High-Level
    Language Constructs*, illustrates how you translate source language features commonly
    found in high-level programming languages to LLVM IR. You will learn about the
    translation of aggregate data types, the various options to implement class inheritance
    and virtual functions, and how to comply with the application binary interface
    of your system.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B19561_06.xhtml#_idTextAnchor101), *Advanced IR Generation*,
    shows you how to generate LLVM IR for exception-handling statements in the source
    language. You will also learn how to add metadata for type-based alias analysis,
    and how to add debug information to the generated LLVM IR, and you will extend
    your compiler-generated metadata.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B19561_07.xhtml#_idTextAnchor117), *Optimizing IR*, explains
    the LLVM pass manager. You will implement your own pass, both as part of LLVM
    and as a plugin, and you will learn how to add your new pass to the optimizing
    pass pipeline.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B19561_08.xhtml#_idTextAnchor132), *The TableGen Language*, introduces
    LLVM’s own domain-specific language called TableGen. This language is used to
    reduce the coding effort of the developer, and you will learn about the different
    ways you can define data in the TableGen language, and how it can be leveraged
    in the backend.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B19561_09.xhtml#_idTextAnchor145), *JIT Compilation*, discusses
    how you can use LLVM to implement a **just-in-time** (**JIT**) compiler. By the
    end of the chapter, you will have implemented your own JIT compiler for LLVM IR
    in two different ways.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 10*](B19561_10.xhtml#_idTextAnchor159), *Debugging Using LLVM Tools*,
    explores the details of various libraries and components of LLVM, which helps
    you to identify bugs in your application. You will use the sanitizers to identify
    buffer overflows and other bugs. With the libFuzzer library, you will test functions
    with random data as input, and XRay will help you find performance bottlenecks.
    You will use the clang static analyzer to identify bugs at the source level, and
    you will learn that you can add your own checker to the analyzer. You will also
    learn how to extend clang with your own plugin.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 11*](B19561_11.xhtml#_idTextAnchor177)*,* *The Target Description*,
    explains how you can add support for a new CPU architecture. This chapter discusses
    the necessary and optional steps like defining registers and instructions, developing
    instruction selection, and supporting the assembler and disassembler.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 12*](B19561_12.xhtml#_idTextAnchor193), *Instruction Selection*,
    demonstrates two different approaches to instruction selection, specifically explaining
    how SelectionDAG and GlobalISel work and showing how to implement these functionalities
    in a target, based on the example from the previous chapter. In addition, you
    will learn how to debug and test instruction selection.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 13*](B19561_13.xhtml#_idTextAnchor222), *Beyond Instruction Selection*,
    explains how you complete the backend implementation by exploring concepts beyond
    instruction selection. This includes adding new machine passes to implement target-specific
    tasks and points you to advanced topics that are not necessary for a simple backend
    but may be interesting for highly optimizing backends, such as cross-compilation
    to another CPU architecture.'
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You need a computer running Linux, Windows, Mac OS X, or FreeBSD, with the development
    toolchain installed for the operating system. Please see the table for the required
    tools. All tools should be in the search path of your shell.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Software/Hardware covered in** **the book** | **OS Requirements** |'
  prefs: []
  type: TYPE_TB
- en: '| A C/C++ compiler: gcc 7.1.0 or later, clang 5.0 or later, Apple clang 10.0
    or later, Visual Studio 2019 16.7 or later | Linux (any), Windows, Mac OS X, or
    FreeBSD |'
  prefs: []
  type: TYPE_TB
- en: '| CMake 3.20.0 or later |  |'
  prefs: []
  type: TYPE_TB
- en: '| Ninja 1.11.1 |  |'
  prefs: []
  type: TYPE_TB
- en: '| Python 3.6 or later |  |'
  prefs: []
  type: TYPE_TB
- en: '| Git 2.39.1 or later |  |'
  prefs: []
  type: TYPE_TB
- en: To create the flame graph in [*Chapter 10*](B19561_10.xhtml#_idTextAnchor159),
    *Debugging Using LLVM Tools*, you need to install the scripts from [https://github.com/brendangregg/FlameGraph](https://github.com/brendangregg/FlameGraph).
    To run the script, you also need a recent version of Perl installed, and to view
    the graph you need a web browser capable of displaying SVG files, which all modern
    browsers do. To see the Chrome Trace Viewer visualization in the same chapter,
    you need to have the Chrome browser installed.
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are using the digital version of this book, we advise you to type
    the code yourself or access the code via the GitHub repository (link available
    in the next section). Doing so will help you avoid any potential errors related
    to the copying and pasting** **of code.**'
  prefs: []
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download the example code files for this book from GitHub at [https://github.com/PacktPublishing/Learn-LLVM-17](https://github.com/PacktPublishing/Learn-LLVM-17).
    In case there’s an update to the code, it will be updated on the existing GitHub
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: We also have other code bundles from our rich catalog of books and videos available
    at [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/).
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`Code in text`: Indicates code words in text, database table names, folder
    names, filenames, file extensions, pathnames, dummy URLs, user input, and Twitter
    handles. Here is an example: “You can observe in the code that a quantum circuit
    operation is being defined and a variable called `numOnes`.”'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Bold**: Indicates a new term, an important word, or words that you see onscreen.
    For example, words in menus or dialog boxes appear in the text like this. Here
    is an example: “For development on OS X, it is best to install **Xcode** from
    the Apple store.”'
  prefs: []
  type: TYPE_NORMAL
- en: Tips or important notes
  prefs: []
  type: TYPE_NORMAL
- en: Appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Get in touch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome.
  prefs: []
  type: TYPE_NORMAL
- en: '**General feedback**: If you have questions about any aspect of this book,
    mention the book title in the subject of your message and email us at [customercare@packtpub.com](mailto:customercare@packtpub.com).'
  prefs: []
  type: TYPE_NORMAL
- en: '**Errata**: Although we have taken every care to ensure the accuracy of our
    content, mistakes do happen. If you have found a mistake in this book, we would
    be grateful if you would report this to us. Please visit [www.packtpub.com/support/errata](http://www.packtpub.com/support/errata),
    selecting your book, clicking on the Errata Submission Form link, and entering
    the details.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Piracy**: If you come across any illegal copies of our works in any form
    on the Internet, we would be grateful if you would provide us with the location
    address or website name. Please contact us at [copyright@packt.com](mailto:copyright@packt.com)
    with a link to the material.'
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are interested in becoming an author**: If there is a topic that you
    have expertise in and you are interested in either writing or contributing to
    a book, please visit [authors.packtpub.com](http://authors.packtpub.com).'
  prefs: []
  type: TYPE_NORMAL
- en: Share Your Thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you’ve read *Learn LLVM 17*, we’d love to hear your thoughts! Please [click
    here to go straight to the Amazon review page](https://packt.link/r/1837631344)
    for this book and share your feedback.
  prefs: []
  type: TYPE_NORMAL
- en: Your review is important to us and the tech community and will help us make
    sure we’re delivering excellent quality content.
  prefs: []
  type: TYPE_NORMAL
- en: Download a free PDF copy of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thanks for purchasing this book!
  prefs: []
  type: TYPE_NORMAL
- en: Do you like to read on the go but are unable to carry your print books everywhere?
  prefs: []
  type: TYPE_NORMAL
- en: Is your eBook purchase not compatible with the device of your choice?
  prefs: []
  type: TYPE_NORMAL
- en: Don’t worry, now with every Packt book you get a DRM-free PDF version of that
    book at no cost.
  prefs: []
  type: TYPE_NORMAL
- en: Read anywhere, any place, on any device. Search, copy, and paste code from your
    favorite technical books directly into your application.
  prefs: []
  type: TYPE_NORMAL
- en: The perks don’t stop there, you can get exclusive access to discounts, newsletters,
    and great free content in your inbox daily
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these simple steps to get the benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: Scan the QR code or visit the link below
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19561_QR_Free_PDF.jpg)'
  prefs: []
  type: TYPE_IMG
- en: https://packt.link/free-ebook/9781837631346
  prefs: []
  type: TYPE_NORMAL
- en: Submit your proof of purchase
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That’s it! We’ll send your free PDF and other benefits to your email directly
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
