["```cpp\ngit clone https://github.com/codeplea/Hands-On-Network-Programming-with-C\ncd Hands-On-Network-Programming-with-C/chap13\n```", "```cpp\n/*chap13.h*/\n\n#if defined(_WIN32)\n#ifndef _WIN32_WINNT\n#define _WIN32_WINNT 0x0600\n#endif\n#include <winsock2.h>\n#include <ws2tcpip.h>\n#pragma comment(lib, \"ws2_32.lib\")\n\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <netdb.h>\n#include <unistd.h>\n#include <errno.h>\n#include <fcntl.h>\n\n#endif\n```", "```cpp\n/*chap13.h continued*/\n\n#if defined(_WIN32)\n#define ISVALIDSOCKET(s) ((s) != INVALID_SOCKET)\n#define CLOSESOCKET(s) closesocket(s)\n#define GETSOCKETERRNO() (WSAGetLastError())\n\n#else\n#define ISVALIDSOCKET(s) ((s) >= 0)\n#define CLOSESOCKET(s) close(s)\n#define SOCKET int\n#define GETSOCKETERRNO() (errno)\n#endif\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n```", "```cpp\n#if defined(_WIN32)\n#define GETSOCKETERRNO() (WSAGetLastError())\n#else\n#define GETSOCKETERRNO() (errno)\n#endif\n```", "```cpp\n/*error_text.c excerpt*/\n\nconst char *get_error_text() {\n\n#if defined(_WIN32)\n\n    static char message[256] = {0};\n    FormatMessage(\n        FORMAT_MESSAGE_FROM_SYSTEM|FORMAT_MESSAGE_IGNORE_INSERTS,\n        0, WSAGetLastError(), 0, message, 256, 0);\n    char *nl = strrchr(message, '\\n');\n    if (nl) *nl = 0;\n    return message;\n\n#else\n    return strerror(errno);\n#endif\n\n}\n```", "```cpp\n/*error_text.c excerpt*/\n\n    printf(\"Calling socket() with invalid parameters.\\n\");\n    socket(0, 0, 0);\n    printf(\"Last error was: %s\\n\", get_error_text());\n```", "```cpp\n#if defined(_WIN32)\n    unsigned long nonblock = 1;\n    ioctlsocket(socket_peer, FIONBIO, &nonblock);\n#else\n    int flags;\n    flags = fcntl(socket_peer, F_GETFL, 0);\n    fcntl(socket_peer, F_SETFL, flags | O_NONBLOCK);\n#endif\n```", "```cpp\nfd_set set;\nFD_ZERO(&set);\nFD_SET(socket_peer, &set);\n\nstruct timeval timeout;\ntimeout.tv_sec = 5; timeout.tv_usec = 0;\nselect(socket_peer+1, 0, &set, 0, &timeout);\n```", "```cpp\n#if defined(_WIN32)\n    nonblock = 0;\n    ioctlsocket(socket_peer, FIONBIO, &nonblock);\n#else\n    fcntl(socket_peer, F_SETFL, flags);\n#endif\n```", "```cpp\nsend(my_socket, \"a\", 1, 0);\nsend(my_socket, \"b\", 1, 0);\n```", "```cpp\nsend(my_socket, \"ab\", 2, 0);\n```", "```cpp\nint yes = 1;\nif (setsockopt(my_socket, IPPROTO_TCP, TCP_NODELAY,\n        (void*)&yes, sizeof(yes)) < 0) {\n    fprintf(stderr, \"setsockopt() failed. (%d)\\n\", GETSOCKETERRNO());\n}\n```", "```cpp\nif (shutdown(my_socket, 1) /* 1 = SHUT_WR, SD_SEND */) {\n    fprintf(stderr, \"shutdown() failed. (%d)\\n\", GETSOCKETERRNO());\n}\n```", "```cpp\nnetstat -na | grep TIME\n```", "```cpp\nint yes = 1;\nif (setsockopt(my_socket, SOL_SOCKET, SO_REUSEADDR,\n        (void*)&yes, sizeof(yes)) < 0) {\n    fprintf(stderr, \"setsockopt() failed. (%d)\\n\", GETSOCKETERRNO());\n}\n```", "```cpp\n#if !defined(_WIN32)\n#include <signal.h>\n#endif\n\n#if !defined(_WIN32)\nsignal(SIGPIPE, SIG_IGN);\n#endif\n```", "```cpp\nsend(my_socket, buffer, sizeof(buffer), MSG_NOSIGNAL);\n```", "```cpp\n#ifndef FD_SETSIZE\n#define FD_SETSIZE 1024\n#endif\n#include <winsock2.h>\n```", "```cpp\nFD_SET(s % FD_SETSIZE, &set_array[s / FD_SETSIZE])\n```"]