["```cpp\nclass Destinations\n{\npublic:\n    Destinations();\n    ~Destinations();\n    void wish(const std::vector<std::string> &places);\n    void went(const std::vector<std::string> &places);\n    std::vector<std::string> listVisited() const;\n    std::vector<std::string> listUnvisited() const;\nprivate:\n    std::map<std::string, bool> wishlist;\n};\nclass DestinationsFactory : public LuaModule\n{\npublic:\n    const std::string &luaName() const override;\n    const std::vector<luaL_Reg> &\n    luaRegs() const override;\n};\n```", "```cpp\nconst std::string &\nDestinationsFactory::luaName() const\n{\n    return NAME;\n}\nconst std::vector<luaL_Reg> &\nDestinationsFactory::luaRegs() const\n{\n    return FACTORY_REGS;\n}\n```", "```cpp\nconst std::vector<luaL_Reg> FACTORY_REGS = {\n    {\"new\", luaNew},\n    {NULL, NULL}};\n```", "```cpp\nconst std::vector<luaL_Reg> REGS = {\n    {\"wish\", luaWish},\n    {\"went\", luaWent},\n    {\"list_visited\", luaListVisited},\n    {\"list_unvisited\", luaListUnvisited},\n    {NULL, NULL}};\n```", "```cpp\nclass LuaModuleBuilder\n{\n    LuaModuleBuilder withOptionA(...);\n    LuaModuleBuilder withOptionB(...);\n    ...\n    LuaModule build();\n};\nLuaModuleBuilder builder;\nauto module = builder.withOptionX(...).build();\n```", "```cpp\ntemplate <typename T>\nclass LuaModuleExporter : public LuaModule;\n```", "```cpp\ntemplate <typename T>\nclass LuaModuleExporter final : public LuaModule\n{\npublic:\n    LuaModuleExporter(\n        const LuaModuleExporter &) = delete;\n    ~LuaModuleExporter() = default;\n    static LuaModuleExporter<T> make()\n    {\n        return LuaModuleExporter<T>();\n    }\nprivate:\n    LuaModuleExporter() {}\n};\n```", "```cpp\nclass LuaModuleExporter final : public LuaModule\n{\npublic:\n    const std::string &luaName() const override\n    {\n        return name;\n    }\n    const std::vector<luaL_Reg> &luaRegs() const override\n    {\n        return factoryRegs;\n    }\nprivate:\n    const std::string name = \"TODO\";\n    const std::vector<luaL_Reg> factoryRegs = {\n        {\"new\", luaNew},\n        {NULL, NULL}};\n    static int luaNew(lua_State *L)\n    {\n        return 0;\n    }\n};\n```", "```cpp\nint main()\n{\n    auto listener = std::make_unique<\n        LoggingLuaExecutorListener>();\n    auto lua = std::make_unique<LuaExecutor>(*listener);\n    auto module = LuaModuleExporter<\n        Destinations>::make();\n    lua->registerModule(module);\n    lua->executeFile(\"script.lua\");\n    return 0;\n}\n```", "```cpp\ndst = Destinations.new()\ndst:wish(\"London\", \"Paris\", \"Amsterdam\")\ndst:went(\"Paris\")\nprint(\"Visited:\", dst:list_visited())\nprint(\"Unvisited:\", dst:list_unvisited())\n```", "```cpp\nconst std::string METATABLE_NAME(\n    \"Destinations.Metatable\");\n```", "```cpp\ntemplate <typename T>\nstruct LuaModuleDef\n{\n    const std::string moduleName;\n    const std::vector<luaL_Reg> moduleRegs;\n    const std::string metatableName() const\n    {\n        return std::string(moduleName)\n            .append(\".Metatable\");\n    }\n};\n```", "```cpp\nclass LuaModuleExporter final : public LuaModule\n{\npublic:\n    static LuaModuleExporter<T> make(\n        const LuaModuleDef<T> &luaModuleDef)\n    {\n        return LuaModuleExporter<T>(luaModuleDef);\n    }\n    const std::string &luaName() const override\n    {\n        return luaModuleDef.moduleName;\n    }\nprivate:\n    LuaModuleExporter(\n        const LuaModuleDef<T> &luaModuleDef)\n        : luaModuleDef(luaModuleDef) {}\n    const LuaModuleDef<T> luaModuleDef;\n};\n```", "```cpp\nstruct DestinationsLuaModuleDef\n{\n    static LuaModuleDef<Destinations> def;\n};\n```", "```cpp\nLuaModuleDef DestinationsLuaModuleDef::def =\n    LuaModuleDef<Destinations>{\n        \"Destinations\",\n        {{\"wish\", luaWish},\n         {\"went\", luaWent},\n         {\"list_visited\", luaListVisited},\n         {\"list_unvisited\", luaListUnvisited},\n         {NULL, NULL}},\n    };\n```", "```cpp\nauto module = LuaModuleExporter<Destinations>::make(\n    DestinationsLuaModuleDef::def);\n```", "```cpp\nclass LuaModuleExporter final : public LuaModule\n{\nprivate:\n    static LuaModuleExporter<T> *getExporter(\n        lua_State *L)\n    {\n        return reinterpret_cast<LuaModuleExporter<T> *>(\n            lua_touserdata(L, lua_upvalueindex(1)));\n    }\n};\n```", "```cpp\nstatic int luaNew(lua_State *L)\n{\n    auto luaModuleDef = getExporter(L)->luaModuleDef;\n    T *obj = new T();\n    T **userdata = reinterpret_cast<T **>(\n        lua_newuserdatauv(L, sizeof(obj), 0));\n    *userdata = obj;\n    auto metatableName = luaModuleDef.metatableName();\n    int type = luaL_getmetatable(\n        L, metatableName.c_str());\n    if (type == LUA_TNIL)\n    {\n        lua_pop(L, 1);\n        luaL_newmetatable(L, metatableName.c_str());\n        lua_pushvalue(L, -1);\n        lua_setfield(L, -2, \"__index\");\n        luaL_setfuncs(\n            L, luaModuleDef.moduleRegs.data(), 0);\n        lua_pushcfunction(L, luaDelete);\n        lua_setfield(L, -2, \"__gc\");\n    }\n    lua_setmetatable(L, 1);\n    return 1;\n}\n```", "```cpp\nstatic int luaDelete(lua_State *L)\n{\n    T *obj = *reinterpret_cast<T **>(\n        lua_touserdata(L, 1));\n    delete obj;\n    return 0;\n}\n```", "```cpp\nDestinations instance created: 0x12a704170\n[Lua] Visited: Paris\n[Lua] Unvisited: Amsterdam London\nDestinations instance destroyed: 0x12a704170\n```", "```cpp\ndst = Destinations.new(\"Shanghai\", \"Tokyo\")\ndst:wish(\"London\", \"Paris\", \"Amsterdam\")\ndst:went(\"Paris\")\nprint(\"Visited:\", dst:list_visited())\nprint(\"Unvisited:\", dst:list_unvisited())\n```", "```cpp\nstatic int luaNew(lua_State *L)\n{\n   ...\n   T *obj = new T();\n   ...\n}\n```", "```cpp\nstruct LuaModuleDef\n{\n    const std::function<T *(lua_State *)>\n    createInstance =\n    [](lua_State *) -> T* { return new T(); };\n};\n```", "```cpp\nstatic int luaNew(lua_State *L)\n{\n    ...\n    T *obj = luaModuleDef.createInstance(L);\n    ...\n}\n```", "```cpp\nLuaModuleDef DestinationsLuaModuleDef::def =\nLuaModuleDef<Destinations>{\n    \"Destinations\",\n    {{\"wish\", luaWish},\n     ...\n     {NULL, NULL}},\n    [](lua_State *L) -> Destinations *\n    {\n        Destinations *obj = new Destinations();\n        std::vector<std::string> places;\n        int nArgs = lua_gettop(L);\n        for (int i = 1; i <= nArgs; i++)\n        {\n            places.push_back(lua_tostring(L, i));\n        }\n        obj->wish(places);\n        return obj;\n    },\n};\n```", "```cpp\nDestinations instance created: 0x142004170\n[Lua] Visited: Paris\n[Lua] Unvisited: Amsterdam London Shanghai Tokyo\nDestinations instance destroyed: 0x142004170\n```"]