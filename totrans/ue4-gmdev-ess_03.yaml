- en: Chapter 3. Materials
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章 材料内容
- en: Material is an asset that defines the look of a mesh with various graph nodes
    that include images (textures) and math expressions. Since Unreal Engine 4 utilizes
    **Physically Based Rendering** (**PBR**), creating realistic materials such as
    metal, concrete, bricks, and so on, can be quite easy. Materials in Unreal Engine
    define everything about the surface of the mesh, such as its color, shininess,
    bumpiness, and tessellation, and can even animate objects by manipulating the
    vertices! At this point you might think *Ok, Materials are only used for meshes*
    but, no, they are not actually limited to meshes. You use Materials for decals,
    post process, and light functions too.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 材料是一种资产，它使用包括图像（纹理）和数学表达式在内的各种图节点来定义网格的外观。由于虚幻引擎4利用**基于物理的渲染**（**PBR**），创建金属、混凝土、砖块等逼真材料可以相当容易。虚幻引擎中的材料定义了网格表面的所有内容，例如其颜色、光泽、凹凸度和细分，甚至可以通过操纵顶点来动画化对象！在这个时候，您可能会想“好吧，材料仅用于网格”，但实际上，它们并不局限于网格。您还使用材料进行贴图、后期处理和光照功能。
- en: Creating a Material is a pretty straightforward process. All you have to do
    is right-click in **Content Browser**, select **Material**, and give it a name.
    Done!
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 创建材料是一个相当直接的过程。您只需在**内容浏览器**中右键单击，选择**材料**，并给它一个名称。完成！
- en: '![Materials](img/B03950_03_01.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![材料](img/B03950_03_01.jpg)'
- en: Material user interface
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 材料用户界面
- en: Now that we know what a Material is and what it does, let's take a look at the
    user interface of Material graph.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了材料是什么以及它做什么，让我们看看材料图的用户界面。
- en: '![Material user interface](img/B03950_03_02.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![材料用户界面](img/B03950_03_02.jpg)'
- en: Toolbar
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工具栏
- en: 'The **Toolbar** panel contains various buttons that help to preview graph nodes,
    remove isolated nodes, Material stats, and so on. Let''s take a look at what these
    buttons do:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**工具栏**面板包含各种按钮，有助于预览图形节点、删除孤立节点、材料统计信息等。让我们看看这些按钮的功能：'
- en: '**Save**: Applies the changes you made to the Material and saves the asset![Toolbar](img/B03950_03_03.jpg)'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**保存**: 应用您对材料所做的更改并保存资产![工具栏](img/B03950_03_03.jpg)'
- en: '**Find in CB**: Navigates and selects this Material in **Content Browser**![Toolbar](img/B03950_03_04.jpg)'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在CB中查找**: 在**内容浏览器**中导航并选择此材料![工具栏](img/B03950_03_04.jpg)'
- en: '**Apply**: Applies the changes to the Material. Note that this will not save
    the Material![Toolbar](img/B03950_03_05.jpg)'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用**: 将更改应用到材料。请注意，这不会保存材料![工具栏](img/B03950_03_05.jpg)'
- en: '**Search**: Searches for Material expressions or comments![Toolbar](img/B03950_03_06.jpg)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**搜索**: 搜索材料表达式或注释![工具栏](img/B03950_03_06.jpg)'
- en: '**Home**: Navigates to and selects the main canvas node![Toolbar](img/B03950_03_07.jpg)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主页**: 导航到并选择主画布节点![工具栏](img/B03950_03_07.jpg)'
- en: '**Clean Up**: Removes unconnected nodes![Toolbar](img/B03950_03_08.jpg)'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**清理**: 删除未连接的节点![工具栏](img/B03950_03_08.jpg)'
- en: '**Connectors**: Shows or hides unconnected pins![Toolbar](img/B03950_03_09.jpg)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**连接器**: 显示或隐藏未连接的引脚![工具栏](img/B03950_03_09.jpg)'
- en: '**Live Preview**: Toggles a real-time update of preview material![Toolbar](img/B03950_03_10.jpg)'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实时预览**: 切换预览材料的实时更新![工具栏](img/B03950_03_10.jpg)'
- en: '**Live Nodes**: Toggles a real-time update of graph nodes![Toolbar](img/B03950_03_11.jpg)'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实时节点**: 切换图形节点的实时更新![工具栏](img/B03950_03_11.jpg)'
- en: '**Live Update**: Recompiles a shader for every node in the graph![Toolbar](img/B03950_03_12.jpg)'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实时更新**: 为图中的每个节点重新编译着色器![工具栏](img/B03950_03_12.jpg)'
- en: '**Stats**: Toggles Material stats and compilation errors'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**统计信息**: 切换材料统计信息和编译错误'
- en: '**Mobile Stats**: Same as stats but for mobile![Toolbar](img/B03950_03_13.jpg)'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**移动统计信息**: 与统计信息相同，但针对移动设备![工具栏](img/B03950_03_13.jpg)'
- en: Live nodes might be confusing for new users so I'll explain about them further.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 实时节点对于新用户可能有些令人困惑，所以我将进一步解释它们。
- en: Live preview
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实时预览
- en: Sometimes we need to preview the result of a specific node before connecting
    it to the main node or for debugging purposes.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候在将特定节点连接到主节点之前或进行调试目的时，我们需要预览该节点的结果。
- en: To preview a node you need to right-click on the node and select **Start Previewing
    Node**.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要预览节点，您需要在节点上右键单击并选择**开始预览节点**。
- en: '![Live preview](img/B03950_03_14.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![实时预览](img/B03950_03_14.jpg)'
- en: Unless you enable **Live Preview**, you will not see any changes in the preview
    material.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 除非您启用**实时预览**，否则您将看不到预览材料中的任何更改。
- en: Tip
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: You can press the spacebar to force a preview.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以按空格键强制预览。
- en: Live nodes
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实时节点
- en: 'This will show a real-time update of nodes due to changes made by expressions
    to that node. See the following example:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示由于对节点所做的表达式更改而导致的节点实时更新。请参见以下示例：
- en: '![Live nodes](img/B03950_03_15.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![实时节点](img/B03950_03_15.jpg)'
- en: In the preceding screenshot, the **Sine** node is getting a constant update
    from **Time**, multiplied by one. If you enable **Live Nodes**, you will see the
    **Sine** node pulsing between black and white. If you change the **Multiply**
    value from **1** to anything else (for example, **5**) you will not see the changes
    unless you enable **Live Update** too.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中，**正弦**节点正在从**时间**接收恒定更新，乘以一。如果你启用**实时节点**，你会看到**正弦**节点在黑白之间脉冲。如果你将**乘法**值从**1**更改为任何其他值（例如，**5**），除非你同时启用**实时更新**，否则你将看不到变化。
- en: Live update
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实时更新
- en: When enabled, all expressions are compiled whenever you make a change, such
    as adding a new node, deleting a node, changing a property, and so on. If you
    have a complex graph, it is recommended to disable this option as it has to compile
    all nodes every time you make a change.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当启用时，每次你进行更改（如添加新节点、删除节点、更改属性等）时，所有表达式都会重新编译。如果你有一个复杂的图，建议禁用此选项，因为它必须每次你进行更改时编译所有节点。
- en: Preview panel
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 预览面板
- en: 'The **Preview** panel shows the result of the Material that you are currently
    editing. You can navigate in preview Material using these options:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**预览**面板显示了当前正在编辑的材质的结果。你可以使用以下选项在预览材质中导航：'
- en: '**Rotate the mesh**: Drag with the left mouse button'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**旋转网格**：使用左鼠标按钮拖动'
- en: '**Pan**: Drag with the middle mouse button'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**平移**：使用中间鼠标按钮拖动'
- en: '**Zoom**: Drag with the right mouse button'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缩放**：使用右鼠标按钮拖动'
- en: '**Update light**: Hold *L* and drag with the left mouse button'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更新光照**：按住*L*键并使用左鼠标按钮拖动'
- en: 'In the top-right corner of the preview viewport you can change some settings.
    This changes the preview mesh to the selected primitive shape:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在预览视口的右上角，你可以更改一些设置。这会将预览网格更改为所选的原始形状：
- en: '![Preview panel](img/B03950_03_16.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![预览面板](img/B03950_03_16.jpg)'
- en: 'This changes the preview mesh to a custom mesh. You need to select a **Static
    Mesh** in **Content Browser**:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这将预览网格更改为自定义网格。你需要在**内容浏览器**中**静态网格**：
- en: '![Preview panel](img/B03950_03_17.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![预览面板](img/B03950_03_17.jpg)'
- en: 'This toggles the rendering of the grid in the preview viewport:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这切换了预览视图中网格的渲染：
- en: '![Preview panel](img/B03950_03_18.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![预览面板](img/B03950_03_18.jpg)'
- en: 'This toggles real-time rendering in the preview viewport:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这切换了预览视口中的实时渲染：
- en: '![Preview panel](img/B03950_03_19.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![预览面板](img/B03950_03_19.jpg)'
- en: Details panel
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 细节面板
- en: The **Details** panel shows all the properties you can edit when you select
    a node in the graph. If no nodes are selected, it will show the properties of
    the Material itself.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**细节**面板显示当你选择图中的节点时可以编辑的所有属性。如果没有选择节点，它将显示材质本身的属性。'
- en: For more information on these settings, please visit the Material properties
    documentation at [https://docs.unrealengine.com/latest/INT/Engine/Rendering/Materials/MaterialProperties/index.html](https://docs.unrealengine.com/latest/INT/Engine/Rendering/Materials/MaterialProperties/index.html).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 有关这些设置的更多信息，请访问[https://docs.unrealengine.com/latest/INT/Engine/Rendering/Materials/MaterialProperties/index.html](https://docs.unrealengine.com/latest/INT/Engine/Rendering/Materials/MaterialProperties/index.html)的材质属性文档。
- en: Graph panel
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图面板
- en: This is the main area where you create all the nodes that decide how the Material
    should look and behave. By default, a Material graph contains one master node
    that has a series of inputs, and this master node cannot be deleted. Some of the
    inputs are grayed out and can be enabled by changing the **Blend** mode in the
    **Details** panel.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这是创建所有决定材质外观和行为节点的主体区域。默认情况下，材质图包含一个具有一系列输入的主节点，并且此主节点不能被删除。一些输入被灰色显示，可以通过在**细节**面板中更改**混合**模式来启用。
- en: '![Graph panel](img/B03950_03_20.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![图面板](img/B03950_03_20.jpg)'
- en: Palette panel
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调色板面板
- en: The **Palette** panel lists all the graph nodes and Material functions that
    can be placed in the graph using drag and drop.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**调色板**面板列出了可以拖放到图中的所有图节点和材质函数。'
- en: Tip
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Using the **Category** option, you can filter **Palette** contents between expressions
    or Material functions.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 使用**类别**选项，你可以过滤**调色板**内容在表达式或材质函数之间。
- en: Common material expressions
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见材质表达式
- en: There are some common Material nodes that we use most of the time when we create
    a material. To create a node you need to right-click on the graph canvas and search
    for it, or you can use the **Palette** window to drag and drop. Some nodes also
    have shortcut keys assigned to them.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们创建材质时，我们经常使用一些常见的材质节点。要创建节点，您需要在图形画布上右键单击并搜索它，或者您可以使用 **调色板** 窗口进行拖放。一些节点也分配了快捷键。
- en: Let's take a look at these common nodes.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看这些常用节点。
- en: Constant
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常量
- en: Constant expression outputs a single float value and can be connected to almost
    any input. You can convert a constant expression to a parameter and make real-time
    changes to the Material instance. You can also access a parameter through Blueprint
    or C++ and see the changes in the game.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 常量表达式输出一个单一的浮点值，可以连接到几乎任何输入。您可以将常量表达式转换为参数，并实时更改材质实例。您还可以通过蓝图或 C++ 访问参数，并在游戏中查看更改。
- en: '**Shortcut key**: Hold *1* and click on the graph area'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**快捷键**：按住 *1* 并单击图形区域'
- en: '**Parameter shortcut key**: Hold *S* and click on the graph area'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**参数快捷键**：按住 *S* 并单击图形区域'
- en: '**Example usage**: Brighten or darken a texture'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**示例用法**：使纹理变亮或变暗'
- en: Tip
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Constant parameter is called a scalar parameter
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 常量参数被称为标量参数
- en: '![Constant](img/B03950_03_21.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![Constant](img/B03950_03_21.jpg)'
- en: You can see a constant expression (0.2) being used to darken a texture.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到一个常量表达式（0.2）被用来使纹理变暗。
- en: Constant2Vector
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Constant2Vector
- en: The Constant2Vector expression outputs two float values, which is a two-channel
    vector value (for example, red channel and green channel). You can convert Constant2Vector
    to a parameter and make real-time changes to the Material instance or access it
    in Blueprint or C++ to make dynamic changes to the material while playing the
    game.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Constant2Vector 表达式输出两个浮点值，这是一个二维向量值（例如，红色通道和绿色通道）。您可以将 Constant2Vector 转换为参数，并实时更改材质实例，或者在蓝图或
    C++ 中访问它，以在游戏运行时对材质进行动态更改。
- en: '**Shortcut key**: Hold *2* and click on the graph area'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**快捷键**：按住 *2* 并单击图形区域'
- en: '**Parameter shortcut key**: Hold *V* and click on the graph area'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**参数快捷键**：按住 *V* 并单击图形区域'
- en: '**Example usage**: Adjust the UVs of a texture separately'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**示例用法**：分别调整纹理的 UV 坐标'
- en: '![Constant2Vector](img/B03950_03_22.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![Constant2Vector](img/B03950_03_22.jpg)'
- en: You can see a Constant2Vector being used to tile a texture in the preceding
    screenshot.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在前面的屏幕截图中看到 Constant2Vector 被用来平铺纹理。
- en: Constant3Vector
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Constant3Vector
- en: The Constant3Vector expression outputs three float values, which is a three-channel
    vector value (for example, red channel, green channel, and blue channel). You
    can convert Constant3Vector to a parameter and make real-time changes to a Material
    instance or access it in Blueprint or C++ to make dynamic changes to a material
    while playing the game.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Constant3Vector 表达式输出三个浮点值，这是一个三通道向量值（例如，红色通道、绿色通道和蓝色通道）。您可以将 Constant3Vector
    转换为参数，并实时更改材质实例，或者在蓝图或 C++ 中访问它，以在游戏运行时对材质进行动态更改。
- en: '**Shortcut key**: Hold *3* and click on the graph area'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**快捷键**：按住 *3* 并单击图形区域'
- en: '**Parameter shortcut key**: Hold *V* and click on the graph area'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**参数快捷键**：按住 *V* 并单击图形区域'
- en: '**Example usage**: Change the color of a given texture'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**示例用法**：更改给定纹理的颜色'
- en: '![Constant3Vector](img/B03950_03_23.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![Constant3Vector](img/B03950_03_23.jpg)'
- en: You can see Constant3Vector being used to color a grayscale texture in the preceding
    screenshot.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在前面的屏幕截图中看到 Constant3Vector 被用来着色灰度纹理。
- en: Texture coordinate (TexCoord)
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 纹理坐标 (TexCoord)
- en: The texture coordinate expression outputs texture UV coordinates as a two-channel
    vector (for example, U and V), which helps with tiling and also allows you to
    use different UV coordinates.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 纹理坐标表达式输出纹理 UV 坐标作为二维向量（例如，U 和 V），这有助于平铺，并允许您使用不同的 UV 坐标。
- en: '**Shortcut key**: Hold *U* and click on the graph area'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**快捷键**：按住 *U* 并单击图形区域'
- en: '![Texture coordinate (TexCoord)](img/B03950_03_24.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![Texture coordinate (TexCoord)](img/B03950_03_24.jpg)'
- en: The preceding screenshot shows a texture coordinate being used to tile a texture.
    You can see the values used by looking at the **Details** panel in the bottom
    left corner.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的屏幕截图显示了使用纹理坐标来平铺纹理。您可以通过查看左下角的 **详细信息** 面板来查看使用的值。
- en: Multiply
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 乘法
- en: 'This expression multiplies the given inputs and outputs the result:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 此表达式将给定输入相乘并输出结果：
- en: 'Multiplication happens per channel. For example, if you multiply two vectors
    (0.2, 0.3, 0.4) and (0.5, 0.6, 0.7), the actual process is the following:'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 乘法是按通道进行的。例如，如果你要乘以两个向量（0.2, 0.3, 0.4）和（0.5, 0.6, 0.7），实际过程如下：
- en: '[PRE0]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'So the output is as follows:'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 因此，输出结果如下：
- en: '[PRE1]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The **Multiply** node expects inputs to be the same type unless one of them
    is constant. In short, you cannot multiply Constant2Vector and Constant3Vector,
    but you can multiply Constant2Vector or Constant3Vector by a constant expression.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**乘法** 节点期望输入类型相同，除非其中一个为常量。简而言之，你不能将 Constant2Vector 和 Constant3Vector 相乘，但你可以将
    Constant2Vector 或 Constant3Vector 与一个常量表达式相乘。'
- en: '**Shortcut key**: Hold *M* and click on the graph area'
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**快捷键**：按住 *M* 并点击图形区域'
- en: '![Multiply](img/B03950_03_25.jpg)'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![乘法](img/B03950_03_25.jpg)'
- en: The preceding screenshot shows a multiply node being used to boost an emissive
    effect.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的截图显示了一个乘法节点被用来增强发射效果。
- en: Add
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加法
- en: 'This expression adds the given inputs and outputs the result:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 此表达式将给定的输入相加并输出结果：
- en: 'Addition happens per channel. For example, if you add two vectors (1, 0, 0)
    and (0, 1, 0), the actual process is the following:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 加法是按通道进行的。例如，如果你要加两个向量（1, 0, 0）和（0, 1, 0），实际过程如下：
- en: '[PRE2]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'So the output is as follows:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，输出结果如下：
- en: '[PRE3]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The **Add** node expects inputs to be the same type unless one of them is constant.
    In short, you cannot add Constant2Vector and Constant3Vector, but you can add
    Constant2Vector or Constant3Vector to a constant expression. Let''s take a look
    at why it is like this. See the following screenshot:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '**加法** 节点期望输入类型相同，除非其中一个为常量。简而言之，你不能将 Constant2Vector 和 Constant3Vector 相加，但你可以将
    Constant2Vector 或 Constant3Vector 与一个常量表达式相加。让我们看看为什么是这样的。请看以下截图：'
- en: '![Add](img/B03950_03_26.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![加法](img/B03950_03_26.jpg)'
- en: 'Here we are trying to add Constant3Vector and Constant2Vector but it will not
    work. This is because, when the Material editor tries to compile the **Add** node,
    it fails since the last element of Constant3Vector has nothing to add to. It will
    be like the following calculation:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们试图将 Constant3Vector 和 Constant2Vector 相加，但它不会工作。这是因为，当材质编辑器尝试编译 **加法**
    节点时，由于 Constant3Vector 的最后一个元素没有可以相加的内容，它将失败。它将像以下计算一样：
- en: '[PRE4]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'But you can add Constant3Vector to a constant expression, as in the following
    figure:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 但你可以将 Constant3Vector 加到一个常量表达式中，如下图所示：
- en: '![Add](img/B03950_03_27.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![加法](img/B03950_03_27.jpg)'
- en: 'The result will be as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 结果将如下所示：
- en: '[PRE5]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: And that will compile fine.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这将编译无误。
- en: '**Shortcut key**: Hold *A* and click on the graph area![Add](img/B03950_03_28.jpg)'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**快捷键**：按住 *A* 并点击图形区域![加法](img/B03950_03_28.jpg)'
- en: Divide
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 除法
- en: 'The divide expression divides the given inputs and outputs the result:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 此除法表达式将给定的输入除并以输出结果：
- en: 'Division happens by channel. For example, if you divide two vectors (0.2, 0.3,
    0.4) and (0.5, 0.6, 0.7), the actual process is like this:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 除法是按通道进行的。例如，如果你要除以两个向量（0.2, 0.3, 0.4）和（0.5, 0.6, 0.7），实际过程如下：
- en: '[PRE6]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'So the output is as follows:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，输出结果如下：
- en: '[PRE7]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The **Divide** node expects inputs to be the same type unless one of them is
    constant. In short, you cannot divide Constant2Vector by Constant3Vector, but
    you can divide Constant2Vector or Constant3Vector by a constant expression.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '**除法** 节点期望输入类型相同，除非其中一个为常量。简而言之，你不能将 Constant2Vector 除以 Constant3Vector，但你可以将
    Constant2Vector 或 Constant3Vector 除以一个常量表达式。'
- en: '**Shortcut key**: Hold *D* and click in the graph area![Divide](img/B03950_03_29.jpg)'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**快捷键**：按住 *D* 并在图形区域中点击![除法](img/B03950_03_29.jpg)'
- en: Subtract
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 减法
- en: 'This expression subtracts the given inputs and outputs the result:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 此表达式从给定的输入中减去并输出结果：
- en: 'Subtraction happens by channel. For example, if you subtract two vectors (0.2,
    0.3, 0.4) and (0.5, 0.6, 0.7), the actual process is the following:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 减法是按通道进行的。例如，如果你要从两个向量（0.2, 0.3, 0.4）和（0.5, 0.6, 0.7）中减去，实际过程如下：
- en: '[PRE8]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'So the output is as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，输出结果如下：
- en: '[PRE9]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The **Subtract** node expects inputs to be the same type unless one of them
    is constant. In short, you cannot subtract Constant2Vector from Constant3Vector,
    but you can subtract Constant2Vector or Constant3Vector from a constant expression.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '**减法** 节点期望输入类型相同，除非其中一个为常量。简而言之，你不能从 Constant3Vector 中减去 Constant2Vector，但你可以从
    Constant2Vector 或 Constant3Vector 中减去一个常量表达式。'
- en: '**Shortcut key**: No shortcut key![Subtract](img/B03950_03_30.jpg)'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**快捷键**：没有快捷键![减法](img/B03950_03_30.jpg)'
- en: Texture sample (Texture2D)
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 纹理采样（Texture2D）
- en: Texture sample outputs the given texture. It also outputs all four channels
    (namely, red, green, blue, and alpha) from the texture separately so you can use
    them for various things. This is especially useful if you work on multiple grayscale
    textures (such as mask textures, roughness textures, and so on). Instead of importing
    multiple textures, you can just create one texture in Photoshop and assign other
    textures to different channels and, in Material editor, you can get each channel
    and do all the fancy things. Oh, and did I mention Texture2D can use movie textures
    too?
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 纹理采样输出给定的纹理。它还分别输出纹理的所有四个通道（即红色、绿色、蓝色和alpha），以便您可以使用它们进行各种操作。这对于处理多个灰度纹理（如遮罩纹理、粗糙度纹理等）特别有用。您不必导入多个纹理，只需在Photoshop中创建一个纹理，并将其他纹理分配给不同的通道，在材质编辑器中，您可以获取每个通道并执行所有这些复杂操作。哦，我提到过Texture2D还可以使用电影纹理吗？
- en: You can convert **Texture Sample** to **TextureSampleParameter2D** and change
    textures in real-time via Material instance. You can also change textures dynamically
    in the game through Blueprints or C++.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将**纹理采样**转换为**TextureSampleParameter2D**，并通过材质实例实时更改纹理。您还可以通过蓝图或C++在游戏中动态更改纹理。
- en: '**Shortcut key**: Hold *T* and click in the graph area'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**快捷键**：按住 *T* 并在图形区域单击'
- en: '**Parameter shortcut key**: No shortcut key'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**参数快捷键**：无快捷键'
- en: '![Texture sample (Texture2D)](img/B03950_03_31.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![纹理采样（Texture2D）](img/B03950_03_31.jpg)'
- en: Component mask
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组件遮罩
- en: The component mask expression can extract different channels from the input,
    which should be a vector channel such as **Constant2Vector**, **Constant3Vector**,
    **Constant4Vector**, **TextureSample**, and so on. For example, you know Constant4Vector
    has only one output, which is RGBA. So, if you want the green channel from RGBA,
    you use a component mask. You can right-click on a component **Mask** and convert
    it into a **Parameter** and make real-time changes in Material instance.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 组件遮罩表达式可以从输入中提取不同的通道，输入应该是向量通道，例如**Constant2Vector**、**Constant3Vector**、**Constant4Vector**、**TextureSample**等。例如，Constant4Vector只有一个输出，即RGBA。因此，如果您想从RGBA中获取绿色通道，您将使用组件遮罩。您可以在组件**遮罩**上右键单击，将其转换为**参数**，并在材质实例中进行实时更改。
- en: '**Shortcut key**: No shortcut key'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**快捷键**：无快捷键'
- en: '**Parameter shortcut key**: No shortcut key![Component mask](img/B03950_03_32.jpg)'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**参数快捷键**：无快捷键![组件遮罩](img/B03950_03_32.jpg)'
- en: In this screenshot, we extract the alpha channel and plug it into **Opacity**
    and plug the RGB channel into **Base Color**.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在此屏幕截图中，我们提取alpha通道并将其连接到**不透明度**，并将RGB通道连接到**基础颜色**。
- en: Linear interpolate (lerp)
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 线性插值（lerp）
- en: This blends two textures or values based on alpha. When the alpha value is **0**
    (black color), **A** input is used. If the alpha value is **1** (white color),
    **B** input is used. Most of the time, this is used to blend two textures based
    on a mask texture.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这根据alpha值混合两种纹理或值。当alpha值为**0**（黑色）时，使用**A**输入。如果alpha值为**1**（白色），则使用**B**输入。大多数情况下，这是根据遮罩纹理混合两种纹理。
- en: '**Shortcut key**: Hold *L* and click in the graph area'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**快捷键**：按住 *L* 并在图形区域单击'
- en: '**Example usage**: Blend two textures based on the alpha value, which can be
    a constant or a mask texture![Linear interpolate (lerp)](img/B03950_03_33.jpg)'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**示例用法**：根据alpha值混合两种纹理，该值可以是常数或遮罩纹理![线性插值（lerp）](img/B03950_03_33.jpg)'
- en: Here, the lerp node is outputting 100% of input **A** because the alpha value
    is **0**. If we set the alpha value to **1** then we'll see 100% of **B**. If
    alpha is **0.5** then we'll see a blend of both **A** and **B**.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，lerp节点输出100%的输入**A**，因为alpha值为**0**。如果我们设置alpha值为**1**，那么我们将看到100%的**B**。如果alpha值为**0.5**，那么我们将看到**A**和**B**的混合。
- en: Power
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 功率
- en: 'The **Power** node multiplies the base input by itself with Exp times. For
    example, if you have **4** in **Base** and **6** in **Exp** then the actual process
    is like this:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '**功率**节点将基础输入乘以自身Exp次。例如，如果您在**基础**中有**4**，在**指数**中有**6**，那么实际过程是这样的：'
- en: '[PRE10]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: So the result of **Power** is `4096`.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，**功率**的结果是`4096`。
- en: If you apply a **Texture** to **Base** input and have a constant value (for
    example, **4**) then the **Texture** is multiplied four times.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您将**纹理**应用到**基础**输入，并且有一个常数值（例如，**4**），那么**纹理**将被乘以四次。
- en: '**Shortcut key**: Hold *E* and click in the graph area'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**快捷键**：按住 *E* 并在图形区域单击'
- en: '**Example usage**: Adjust the contrast of the height map or ambient occlusion
    map![Power](img/B03950_03_34.jpg)'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**示例用法**：调整高度图或环境遮挡图的对比度![功率](img/B03950_03_34.jpg)'
- en: The preceding image shows a Power node being used to boost the contrast of a
    **Texture Sample**.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图像显示了使用Power节点来增强**纹理采样**对比度的用法。
- en: PixelDepth
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PixelDepth
- en: '**PixelDepth** outputs the distance to the camera of the pixel currently being
    rendered. This can be useful to alter the appearance of the material based on
    the distance from the player.'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '**PixelDepth**输出当前正在渲染的像素到摄像机的距离。这可以用来根据玩家距离改变材料的视觉效果。'
- en: '**Shortcut key**: No shortcut key'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**快捷键**：无快捷键'
- en: '**Example usage**: Change the color of an object based on the distance from
    the player![PixelDepth](img/B03950_03_35.jpg)'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**示例用法**：根据玩家距离改变物体的颜色![PixelDepth](img/B03950_03_35.jpg)'
- en: If you apply the previous material to a mesh, then the color of the mesh will
    be changed based on the distance to the player camera.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将之前的材料应用到网格上，那么网格的颜色将根据玩家摄像机距离而改变。
- en: '![PixelDepth](img/B03950_03_36.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![PixelDepth](img/B03950_03_36.jpg)'
- en: The preceding screenshot shows how the mesh will look closer to the player camera.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的截图显示了网格在玩家摄像机附近的视觉效果。
- en: '![PixelDepth](img/B03950_03_37.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![PixelDepth](img/B03950_03_37.jpg)'
- en: The preceding screenshot shows how the mesh will look when it's farther away
    from the player camera.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的截图显示了网格在远离玩家摄像机时的外观。
- en: Desaturation
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 去饱和度
- en: As the title says, the **Desaturation** expression desaturates its input. Simply
    put, it can convert a color image to grayscale based on a certain percentage.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 正如标题所说，**去饱和度**表达式会去饱和其输入。简单来说，它可以根据一定百分比将彩色图像转换为灰度图像。
- en: '**Shortcut key**: No shortcut key'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**快捷键**：无快捷键'
- en: '![Desaturation](img/B03950_03_38.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![Desaturation](img/B03950_03_38.jpg)'
- en: Time
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 时间
- en: This expression outputs the **Time** passage of the game (in seconds). This
    is used if you want your Material to change over time.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 此表达式输出游戏的**时间流逝**（以秒为单位）。如果你想让你的材料随时间变化，可以使用此功能。
- en: '**Shortcut key**: No shortcut key'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**快捷键**：无快捷键'
- en: '**Example usage**: Create a pulsing Material![Time](img/B03950_03_39.jpg)'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**示例用法**：创建一个脉冲材料![Time](img/B03950_03_39.jpg)'
- en: In the previous material, we multiply **Time** by a constant expression. The
    result of the **Multiply** node is plugged into the **Sine** node, which outputs
    a continuous oscillating waveform that outputs the value in a range of **-1**
    to **1**. We then use a **ConstantBiasScale** node to prevent the value from going
    below **0**. A **ConstantBiasScale** node is basically a node that adds a bias
    value to the input and multiplies it by a scale value. By default, bias is set
    to **0.5** and scale to **1**. So if the **Sine** value is **-1**, then the result
    is `(-1 + 1) * 0.5`, which equals **0**.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的材料中，我们将**时间**乘以一个常量表达式。**乘法**节点的结果连接到**正弦**节点，该节点输出一个连续的振荡波形，其值在**-1**到**1**的范围内。然后我们使用**常量偏移缩放**节点来防止值低于**0**。**常量偏移缩放**节点基本上是一个向输入添加偏移值并将其乘以缩放值的节点。默认情况下，偏移设置为**0.5**，缩放为**1**。所以如果**正弦**值为**-1**，那么结果是`(-1
    + 1) * 0.5`，等于**0**。
- en: Fresnel
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Fresnel
- en: '**Fresnel** creates rim lighting, which means it will highlight the edges of
    the mesh.'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '**Fresnel**创建边缘照明，这意味着它将突出网格的边缘。'
- en: '**Shortcut key**: No shortcut key![Fresnel](img/B03950_03_40.jpg)'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**快捷键**：无快捷键![Fresnel](img/B03950_03_40.jpg)'
- en: 'The result of the previous network is as follows:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 之前网络的输出结果如下：
- en: '![Fresnel](img/B03950_03_41.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![Fresnel](img/B03950_03_41.jpg)'
- en: Material types
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 材料类型
- en: Now that you know some of the basic expressions, let's take a look at different
    Material types. First of all, obviously, is the main Material editor, but then
    you also have Material instances, Material functions, and layered Materials.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了一些基本表达式，让我们来看看不同的材料类型。首先，显然是主要的材料编辑器，但随后你还有材料实例、材料函数和分层材料。
- en: Material instances
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 材料实例
- en: Material instance is used to change the appearance of a Material without recompiling
    it. When you change any value in Material editor and apply it, it will recompile
    the whole shader and create a set of shaders. When you create a Material instance
    from that Material, it will use the same set of shaders so you can change the
    values in real time without recompiling anything. But when you use **Static Switch
    Parameter** or **Component Mask Parameter** in your **Parent Material**, then
    it's different because each of those parameters has unique combinations. For example,
    let's say you have **Material_1** with no **Static Switch Parameter**, and **Material_2**
    with **Static Switch Parameter** called **bEnableSwitch**. **Material_1** will
    create only one set of shaders, while **Material_2** will create two sets of shaders
    with **bEnableSwitch = False** and **bEnableSwitch = True**.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 材料实例用于在不重新编译的情况下更改材料的外观。当您在材料编辑器中更改任何值并应用它时，它将重新编译整个着色器并创建一组着色器。当您从该材料创建材料实例时，它将使用同一组着色器，因此您可以在不重新编译任何内容的情况下实时更改值。但是，当您在**父材料**中使用**静态切换参数**或**组件遮罩参数**时，情况就不同了，因为每个参数都有独特的组合。例如，假设您有一个没有**静态切换参数**的**Material_1**，以及一个具有名为**bEnableSwitch**的**静态切换参数**的**Material_2**。**Material_1**将只创建一组着色器，而**Material_2**将创建两组着色器，分别对应**bEnableSwitch
    = False**和**bEnableSwitch = True**。
- en: An example workflow is to create a master Material that contains all the necessary
    parameters and let the designers make different versions.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 一个示例工作流程是创建一个包含所有必要参数的主材料，并让设计师制作不同的版本。
- en: 'There are two types of Material instances. They are:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 材料实例有两种类型。它们是：
- en: Material Instance Constant
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 材料实例常量
- en: Material Instance Dynamic
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 材料实例动态
- en: Only Material Instance Constant has a user interface. Material Instance Dynamic
    has no user interface and cannot be created in content browser.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 只有材料实例常量具有用户界面。材料实例动态没有用户界面，并且不能在内容浏览器中创建。
- en: Material Instance Constant
  id: totrans-188
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 材料实例常量
- en: As the title says, **Material Instant Constant** (**MIC**) is only editable
    in the editor. That means you cannot change the values at runtime. MIC exposes
    all parameters you created in the parent Material. You can create your own groups
    and organize all your parameters nicely.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 正如标题所说，**材料实例常量**（**MIC**）只能在编辑器中编辑。这意味着您不能在运行时更改值。MIC公开了您在父材料中创建的所有参数。您可以创建自己的组并很好地组织所有参数。
- en: '![Material Instance Constant](img/B03950_03_42.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![材料实例常量](img/B03950_03_42.jpg)'
- en: Material Instance User Interface
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 材料实例用户界面
- en: '**Toolbar (1)**: The following are toolbar options:'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工具栏（1）**: 以下为工具栏选项：'
- en: '**Save**: Saves the asset'
  id: totrans-193
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**保存**: 保存资产'
- en: '**Find in CB**: Navigates to this asset in Content Browser and selects it'
  id: totrans-194
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在CB中查找**: 在内容浏览器中导航到该资产并选择它'
- en: '**Params**: Exposes all parameters from Parent Material'
  id: totrans-195
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**参数**: 公开父材料的所有参数'
- en: '**Mobile Stats**: Toggles Material stats for Mobile'
  id: totrans-196
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**移动统计**: 切换移动材料的统计信息'
- en: '**Details (2)**: Displays all the parameters from parent Material and other
    properties of Material instance. Here you can also assign a physics Material and
    override the base properties of the parent Material, such as blend mode, two-sided,
    and so on.'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**详细信息（2）**: 显示父材料及其材料实例的所有参数。在这里，您还可以分配一个物理材料并覆盖父材料的基属性，例如混合模式、双面等。'
- en: '**Instance parents (3)**: Here you will see a chain of parents all the way
    up to the main master Material. The instance currently being edited is shown in
    bold.'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实例父级（3）**: 这里您将看到一系列父级，直到主主材料。当前正在编辑的实例以粗体显示。'
- en: '**Viewport (4)**: The viewport displays the material on a mesh so you can see
    your changes in real time. You can change the preview shape in the top-right corner.
    This is the same as it was in Material editor.'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视口（4）**: 视口在网格上显示材料，以便您可以在实时中看到您的更改。您可以在右上角更改预览形状。这与材料编辑器中的相同。'
- en: Material Instance Constant example
  id: totrans-200
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 材料实例常量示例
- en: In order for Material instance to work, we need a master Material with parameters.
    Let's create a simple Material that will change its color based on the distance
    to the player, that is, when the player is near the mesh it will have a red color,
    and as they move further away it will change its color. Note that there are 21
    parameter expressions in UE4\.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使材料实例工作，我们需要一个具有参数的主材料。让我们创建一个简单的材料，它将根据与玩家的距离改变其颜色，也就是说，当玩家靠近网格时，它将呈现红色，当玩家远离时，它的颜色将改变。请注意，UE4中有21个参数表达式。
- en: 'Right now we will stick with two common parameters, and they are as follows:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 目前我们将坚持使用两个常见的参数，如下所示：
- en: Scalar parameter
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标量参数
- en: Vector parameter![Material Instance Constant example](img/B03950_03_43.jpg)
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 矢量参数![材质实例常量示例](img/B03950_03_43.jpg)
- en: As you can see in the previous screenshot, we created two vector parameters
    (**Color1**, **Color2**) and two scalar parameters (**TransitionDistance**, **Speed**).
    We will use these parameters to modify in real time. To create an instance of
    this Material you need to right-click on this Material in **Content Browser**
    and select **Create Material Instance**. This will create a new instance Material
    right next to this Material.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在前面的截图中所见，我们创建了两个矢量参数（**Color1**、**Color2**）和两个标量参数（**TransitionDistance**、**Speed**）。我们将使用这些参数进行实时修改。要创建此材质的实例，您需要在**内容浏览器**中右键单击此材质，并选择**创建材质实例**。这将在此材质旁边创建一个新的实例材质。
- en: 'If you open that instance you will see all these parameters there, and you
    can edit them in real time without having to wait for the Material to recompile:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您打开该实例，您将看到所有这些参数都在那里，并且您可以在不等待材质重新编译的情况下实时编辑它们：
- en: '![Material Instance Constant example](img/B03950_03_44.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![材质实例常量示例](img/B03950_03_44.jpg)'
- en: 'To change values in Material instance, you need to override them first. You
    need to click the checkbox near the parameter to override the values. As shown
    in the following screenshot:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改材质实例中的值，您需要首先覆盖它们。您需要点击参数附近的复选框来覆盖值。如下面的截图所示：
- en: '![Material Instance Constant example](img/B03950_03_44A.jpg)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![材质实例常量示例](img/B03950_03_44A.jpg)'
- en: Material functions
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 材质函数
- en: Material functions are graphs that contain a set of nodes that can be used across
    any number of Materials. If you often find yourself creating complex networks
    then it's better to make a Material function so you can contain all these complex
    networks in one single node. One thing to keep in mind is that Material function
    cannot contain any parameter nodes (for example, **Scalar Parameter**, **Vector
    Parameter**, **Texture Parameter**, and so on). To pass data into a Material function,
    you need to use a special **FunctionInput** node. Similarly, if you want data
    out of a Material function, you need to use the **FunctionOutput** node. By default,
    Material function creates one output for you but you can create more outputs if
    you want.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 材质函数是包含一组节点且可用于任何数量材质的图表。如果您经常发现自己创建复杂的网络，那么创建一个材质函数会更好，这样您就可以将这些复杂的网络包含在一个单独的节点中。需要注意的是，材质函数不能包含任何参数节点（例如，**标量参数**、**矢量参数**、**纹理参数**等）。要将数据传递到材质函数中，您需要使用特殊的**函数输入**节点。同样，如果您想从材质函数中获取数据，您需要使用**函数输出**节点。默认情况下，材质函数为您创建一个输出，但您可以根据需要创建更多输出。
- en: 'The UI of Material function is almost the same as of Material editor. If you
    check the **Details** panel you will see some options to help you get the most
    out of your Material function. Let''s take a look at these options:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 材质函数的UI几乎与材质编辑器相同。如果您检查**详细信息**面板，您将看到一些选项，可以帮助您充分利用材质函数。让我们看看这些选项：
- en: '**Description**: This appears as a tooltip when you hover the mouse on this
    function node in Material graph.'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**描述**：当您在材质图中将鼠标悬停在此函数节点上时，它将显示为工具提示。'
- en: '**Expose to Library**: Enable this to show your Material function when you
    right-click inside your Material graph.'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**暴露到库中**：启用此选项，当您在材质图中右键单击时，将显示您的材质函数。'
- en: '**Library Categories**: This list the categories this function belongs to.
    By default, it belongs to the **Misc** category but you can change it and add
    as many categories as you want.'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**库分类**：此列表显示此函数所属的分类。默认情况下，它属于**杂项**分类，但您可以更改它并添加尽可能多的分类。'
- en: Tip
  id: totrans-216
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Material functions cannot be applied surface, so if you want to use a Material
    function you must use it in a Material.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 材质函数不能应用于表面，因此如果您想使用材质函数，必须在材质中使用它。
- en: Material function example
  id: totrans-218
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 材质函数示例
- en: 'To create a Material function, first right-click in **Content Browser** and
    go to **Materials & Textures** and select **Material Function**. In this example,
    we will create a Material function called **Normal Map Adjuster** that can boost
    the intensity of a normal map. Let''s see what we need to create such a function:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建材质函数，首先在**内容浏览器**中右键单击，转到**材质与纹理**并选择**材质函数**。在这个例子中，我们将创建一个名为**法线图调整器**的材质函数，它可以增强法线图的强度。让我们看看创建此类函数需要什么：
- en: '**Texture [INPUT]**: Obviously we need to pass a texture that needs to be modified.'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**纹理 [输入]**：显然我们需要传递一个需要修改的纹理。'
- en: '**Intensity [INPUT]**: We also need to pass how intense the normal should be.
    A value of **0** means no changes to the normal map and a value of **1** means
    a boosted normal effect.'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**强度 [输入]**：我们还需要传递正常应该有多强的信息。**0**的值表示不更改正常贴图，而**1**的值表示增强正常效果。'
- en: '**Result [OUTPUT]**: Finally we will output the result, which we can connect
    to the normal channel in our Material.'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**结果 [输出]**：最后我们将输出结果，我们可以将其连接到我们的材质中的正常通道。'
- en: Tip
  id: totrans-223
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The final output node (result) can be renamed with any custom name you want.
    Select the node and, in the **Details** panel, change **Output Name**.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 最终输出节点（结果）可以重命名为任何你想要的自定义名称。选择节点，在**细节**面板中，更改**输出名称**。
- en: Open your Material function and right-click on the graph and search for **Input**.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 打开你的材质函数，在图表上右键单击并搜索**输入**。
- en: '![Material function example](img/B03950_03_45.jpg)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![材质函数示例](img/B03950_03_45.jpg)'
- en: Select the **FunctionInput** node. You will see some properties in the **Details**
    panel for the **Input** node you just selected.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 选择**函数输入**节点。你将在**细节**面板中看到你刚刚选择的**输入**节点的某些属性。
- en: '![Material function example](img/B03950_03_46.jpg)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![材质函数示例](img/B03950_03_46.jpg)'
- en: 'Let''s take a look at these settings:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看这些设置：
- en: '**Input Name**: A custom name for the input. You can name it whatever you want.
    Here, I called it **Normal Texture**.'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**输入名称**：输入的自定义名称。你可以取任何你想要的名称。在这里，我将其命名为**法线纹理**。'
- en: '**Description**: Will be used as a tooltip when you hover over this input in
    Material graph.'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**描述**：当你在材质图表中悬停在此输入上时，将用作工具提示。'
- en: '**Input Type**: Defines the type of input for this node.'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**输入类型**：定义了此节点的输入类型。'
- en: '**Preview Value**: Value to use if this input is not connected in Material
    graph. Only used if **Use Preview Value as Default** is checked.'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**预览值**：如果此输入在材质图表中没有连接，则使用的值。仅在**使用预览值作为默认值**被选中时使用。'
- en: '**Use Preview Value as Default**: If checked, it will use the **Preview Value**
    and will mark this input as optional. So when you use this function, you can leave
    this input unconnected. But if you disable this option, then you must connect
    the required node to this when in Material graph.'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用预览值作为默认值**：如果选中，它将使用**预览值**并将此输入标记为可选。因此，当你使用此函数时，你可以不连接此输入。但是，如果你禁用此选项，那么在材质图表中，你必须连接所需的节点到此处。'
- en: '**Sort Priority**: Arranges this input in relation to other input nodes.'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**排序优先级**：安排此输入与其他输入节点的关系。'
- en: 'Let''s create a simple network to boost the normal effect. Take a look at the
    following screenshot:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个简单的网络来增强正常效果。看看下面的截图：
- en: '![Material function example](img/B03950_03_47.jpg)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![材质函数示例](img/B03950_03_47.jpg)'
- en: Here we are extracting the red, green, and blue channels separately. The reason
    behind this is simply that we need to multiply **Intensity** (scalar input value)
    by only the blue channel to increase the normal effect. The **Intensity** needs
    to be clamped between **0** and **1** and then inverted using the **1-x** (OneMinus)
    node because, when we use this Material function in a Material, we need **0**
    to have the default normal intensity and **1** to really boost the effect. Without
    the OneMinus node it will be the opposite, that is, **0** will boost the normal
    map effect and **1** will have a regular effect.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们正在分别提取红色、绿色和蓝色通道。这样做的原因很简单，我们只需要将**强度**（标量输入值）与蓝色通道相乘以增强正常效果。**强度**需要在**0**和**1**之间夹紧，然后使用**1-x**（OneMinus）节点进行反转，因为我们使用这个材质函数在材质中时，需要**0**作为默认的正常强度，**1**则真正增强效果。如果没有OneMinus节点，则相反，即**0**将增强正常贴图效果，**1**将产生常规效果。
- en: Now that the function is done, click the **Save** button on the toolbar.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 函数完成后，点击工具栏上的**保存**按钮。
- en: Tip
  id: totrans-240
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Saving automatically compiles the Material.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 自动保存会编译材质。
- en: Now to get this into Material, right-click inside the Material graph and search
    for **NormalMapAdjuster**. Then all you have to do is plug a **Normal** map and
    a **Scalar Parameter** to **NormalMapAdjuster** and connect it to the **Normal**
    channel.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 现在要将此放入材质中，在材质图表内右键单击并搜索**NormalMapAdjuster**。然后你只需要将一个**Normal**贴图和一个**标量参数**连接到**NormalMapAdjuster**，并将其连接到**Normal**通道。
- en: Tip
  id: totrans-243
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: If it doesn't show up in the context menu, make sure you enabled **Expose to
    Library** in Material Function.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 如果它没有出现在上下文菜单中，请确保你在材质功能中启用了**暴露到库**。
- en: '![Material function example](img/B03950_03_48.jpg)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
  zh: '![材质函数示例](img/B03950_03_48.jpg)'
- en: In your Material instance you can adjust **NormalIntensity** in real time.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的材质实例中，你可以实时调整**NormalIntensity**。
- en: Layered Material
  id: totrans-247
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 分层材质
- en: 'Layered Materials are basically *Materials within Materials* and exist as an
    extension of Material function. The basic workflow is as follows: you create a
    **Make Material Attribute** (which features all the material attributes, such
    as **Base Color**, **Metallic**, **Specular**, **Roughness**, and so on) and you
    connect your nodes to it. Then you connect the output of **Make Material Attributes**
    to the input of the **Output Result** node.'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 分层材质基本上是**材质中的材质**，并且作为材质函数的扩展存在。基本工作流程如下：你创建一个**Make Material Attribute**（它具有所有材质属性，如**Base
    Color**、**Metallic**、**Specular**、**Roughness**等），并将你的节点连接到它。然后，将**Make Material
    Attributes**的输出连接到**Output Result**节点的输入。
- en: Layered Materials are most beneficial when your assets have different layers
    of materials. For example, think about a character with different elements such
    as metallic armor, leather gloves, skin, and so on. Defining each of these materials
    and blending them in a conventional way will make the material complexity increase
    significantly. If you use layered Material in such cases, you can define each
    of those materials as a single node and blend them very easily.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的资产具有不同的材质层时，分层材质最有益。例如，考虑一个具有不同元素的角色，如金属装甲、皮革手套、皮肤等。以传统方式定义这些材质并将它们混合在一起将显著增加材质的复杂性。如果你在这种情况下使用分层材质，你可以将每个材质定义为单个节点，并非常容易地混合它们。
- en: Creating layered Material using make material attributes
  id: totrans-250
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 使用make material attributes创建分层材质
- en: 'For this example we will create two simple layered Materials and blend them
    together in our final material. First, create a Material function and open it.
    In Material function, follow these steps:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本例，我们将创建两个简单的分层材质并将它们在我们的最终材质中混合在一起。首先，创建一个材质函数并打开它。在材质函数中，按照以下步骤操作：
- en: Right-click on the graph editor and search for **Make Material Attributes**
    and select the node from that menu.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击图编辑器，搜索**Make Material Attributes**并从菜单中选择该节点。
- en: Create a **Constant3Vector** node and connect it to **BaseColor** of **Make
    Material Attributes**.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个**Constant3Vector**节点并将其连接到**Make Material Attributes**的**BaseColor**。
- en: Create a constant value and connect it to **Metallic** of **Make Material Attributes**.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个常量值并将其连接到**Make Material Attributes**的**Metallic**。
- en: Create one more constant value and connect that to **Roughness** of **Make Material
    Attributes**.
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个常量值并将其连接到**Make Material Attributes**的**Roughness**。
- en: Finally, connect **Make Material Attributes** to the output of Material function.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将**Make Material Attributes**连接到材质函数的输出。
- en: The final Material function should look like this. Note the values I'm using
    for constant nodes.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的材质函数应如下所示。注意我使用的常量节点值。
- en: '![Creating layered Material using make material attributes](img/B03950_03_49.jpg)'
  id: totrans-258
  prefs: []
  type: TYPE_IMG
  zh: '![使用make material attributes创建分层材质](img/B03950_03_49.jpg)'
- en: Since we want this to be **Metallic**, we set **Metallic** to **1**.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们希望这是**Metallic**，我们将**Metallic**设置为**1**。
- en: 'We will create a duplicate of this same Material function and make it a non-metallic
    Material with a different color. See the following image:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建这个相同的材质函数的副本，并将其制作为一个具有不同颜色的非金属材质。请参见以下图片：
- en: '![Creating layered Material using make material attributes](img/B03950_03_50.jpg)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
  zh: '![使用make material attributes创建分层材质](img/B03950_03_50.jpg)'
- en: This is a non-metallic Material and we are going to blend these two Materials
    in our Material editor using a default **Material Layer Blend** function.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非金属材质，我们将在材质编辑器中使用默认的**Material Layer Blend**函数将这两个材质混合在一起。
- en: Make sure you expose both of these Material functions so we can use them in
    Material editor.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 确保公开这两个材质函数，这样我们就可以在材质编辑器中使用它们。
- en: 'Open an existing Material or create a new one in **Content Browser** and open
    it:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在内容浏览器中打开一个现有的材质或创建一个新的材质，并打开它：
- en: Right-click on the graph and search for your Material functions (select both
    of them).
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击图并搜索你的材质函数（选择两个）。
- en: Right-click again on the graph and search and select **MatLayerBlend_Simple**.
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次右键点击图并搜索并选择**MatLayerBlend_Simple**。
- en: Connect your Material functions to **MatLayerBlend_Simple**. Connect one function
    to **Base Material** and the other one to **Top Material**.
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的材质函数连接到**MatLayerBlend_Simple**。将一个函数连接到**Base Material**，另一个连接到**Top Material**。
- en: Now, to blend these two materials we need an **Alpha (Scalar)** value. A value
    of **1** (white) will output **Base Material** and a value of **0** will output
    **Top Material**. A value of **0.5** will output a mix of both **Base** and **Top**
    materials.
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，为了混合这两种材质，我们需要一个**Alpha (标量)**值。值为**1**（白色）将输出**基础材质**，值为**0**将输出**顶层材质**。值为**0.5**将输出**基础**和**顶层**材质的混合。
- en: Since we are using layered Material we cannot directly connect this to the Material
    editor like other nodes. To make this work, there are two ways we can connect.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们使用的是分层材质，我们不能像其他节点那样直接将其连接到材质编辑器。为了使此功能正常工作，有两种连接方式。
- en: 'Method 1:'
  id: totrans-270
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 方法 1：
- en: 'We can make the material use Material attributes instead of regular nodes.
    To use this feature, click anywhere on the graph and in the **Details** panel
    select **Use Material Attributes**:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使材质使用材质属性而不是常规节点。要使用此功能，请点击图上的任何位置，然后在**详细信息**面板中选择**使用材质属性**：
- en: '![Method 1:](img/B03950_03_51.jpg)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
  zh: '![方法 1:](img/B03950_03_51.jpg)'
- en: When you enable this, the main material node will show only one node called
    Material attributes so you can connect the output of **MatLayerBlend_Simple**
    to this node.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 当您启用此功能时，主材质节点将只显示一个名为材质属性的节点，这样您就可以将**MatLayerBlend_Simple**的输出连接到该节点。
- en: 'The following is a screenshot of the final material using this method:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是用此方法创建的最终材质的截图：
- en: '![Method 1:](img/B03950_03_52.jpg)'
  id: totrans-275
  prefs: []
  type: TYPE_IMG
  zh: '![方法 1:](img/B03950_03_52.jpg)'
- en: 'Method 2:'
  id: totrans-276
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 方法 2：
- en: 'In this method, instead of using Material attributes for the main node we use
    **BreakMaterialAttributes** and connect them as regular nodes:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 在此方法中，我们不是使用材质属性作为主节点，而是使用**BreakMaterialAttributes**并将它们作为常规节点连接：
- en: Right-click on the graph area and search and select **BreakMaterialAttributes**.
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击图区域，搜索并选择**BreakMaterialAttributes**。
- en: Connect the output of **MatLayerBlend_Simple** to **BreakMaterialAttributes**.
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**MatLayerBlend_Simple**的输出连接到**BreakMaterialAttributes**。
- en: And finally, connect all the output nodes of **BreakMaterialAttributes** to
    the main node of Material editor.
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将**BreakMaterialAttributes**的所有输出节点连接到材质编辑器的主节点。
- en: 'The following is a screenshot of the final material using this method:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是用此方法创建的最终材质的截图：
- en: '![Method 2:](img/B03950_03_53.jpg)'
  id: totrans-282
  prefs: []
  type: TYPE_IMG
  zh: '![方法 2:](img/B03950_03_53.jpg)'
- en: Summary
  id: totrans-283
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In the next chapter we will use post processing techniques to enhance the look
    of your scene. We will also create a simple Material and use it in post process
    Material.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用后处理技术来增强场景的外观。我们还将创建一个简单的材质并在后处理材质中使用它。
