["```cpp\n// Prepare the player\nTexture texturePlayer;\ntexturePlayer.loadFromFile(\"graphics/player.png\");\nSprite spritePlayer;\nspritePlayer.setTexture(texturePlayer);\nspritePlayer.setPosition(580, 720);\n// The player starts on the left\nside playerSide = side::LEFT;\n// Prepare the gravestone\nTexture textureRIP;\ntextureRIP.loadFromFile(\"graphics/rip.png\");\nSprite spriteRIP;\nspriteRIP.setTexture(textureRIP);\nspriteRIP.setPosition(600, 860);\n// Prepare the axe\nTexture textureAxe;\ntextureAxe.loadFromFile(\"graphics/axe.png\");\nSprite spriteAxe;\nspriteAxe.setTexture(textureAxe);\nspriteAxe.setPosition(700, 830);\n// Line the axe up with the tree\nconst float AXE_POSITION_LEFT = 700;\nconst float AXE_POSITION_RIGHT = 1075;\n// Prepare the flying log\nTexture textureLog;\ntextureLog.loadFromFile(\"graphics/log.png\");\nSprite spriteLog;\nspriteLog.setTexture(textureLog);\nspriteLog.setPosition(810, 720);\n// Some other useful log related variables\nbool logActive = false;\nfloat logSpeedX = 1000;\nfloat logSpeedY = -1500;\n```", "```cpp\n// Draw the tree\nwindow.draw(spriteTree);\n// Draw the player\nwindow.draw(spritePlayer);\n// Draw the axe\nwindow.draw(spriteAxe);\n// Draw the flying log\nwindow.draw(spriteLog);\n// Draw the gravestone\nwindow.draw(spriteRIP);\n// Draw the bee\nwindow.draw(spriteBee);\n```", "```cpp\nfloat logSpeedX = 1000;\nfloat logSpeedY = -1500;\n// Control the player input\nbool acceptInput = false;\nwhile (window.isOpen())\n{\n```", "```cpp\n/*\n****************************************\nHandle the players input\n****************************************\n*/\nif (Keyboard::isKeyPressed(Keyboard::Escape))\n{\n    window.close();\n}\n// Start the game\nif (Keyboard::isKeyPressed(Keyboard::Return))\n{\n    paused = false;\n    // Reset the time and the score\n    score = 0;\n    timeRemaining = 6;\n    // Make all the branches disappear -\n    // starting in the second position\n    for (int i = 1; i < NUM_BRANCHES; i++)\n    {\n        branchPositions[i] = side::NONE;\n    }\n    // Make sure the gravestone is hidden\n    spriteRIP.setPosition(675, 2000);\n    // Move the player into position\n    spritePlayer.setPosition(580, 720);\n    acceptInput = true;\n}\n/*\n****************************************\nUpdate the scene\n****************************************\n*/\n```", "```cpp\n// Start the game\nif (Keyboard::isKeyPressed(Keyboard::Return))\n{\n    paused = false;\n    // Reset the time and the score\n    score = 0;\n    timeRemaining = 5;\n    // Make all the branches disappear\n    for (int i = 1; i < NUM_BRANCHES; i++)\n    {\n        branchPositions[i] = side::NONE;\n    }\n    // Make sure the gravestone is hidden\n    spriteRIP.setPosition(675, 2000);\n    // Move the player into position\n    spritePlayer.setPosition(675, 660);\n    acceptInput = true;\n}\n// Wrap the player controls to\n// Make sure we are accepting input\nif (acceptInput)\n{\n    // More code here next...\n}\n/*\n****************************************\nUpdate the scene\n****************************************\n*/\n```", "```cpp\n// Wrap the player controls to\n// Make sure we are accepting input\nif (acceptInput)\n{\n    // More code here next...\n\n    // First handle pressing the right cursor key\n    if (Keyboard::isKeyPressed(Keyboard::Right))\n    {\n        // Make sure the player is on the right\n        playerSide = side::RIGHT;\n\n        score ++;\n        // Add to the amount of time remaining\n        timeRemaining += (2 / score) + .15;\n        spriteAxe.setPosition(AXE_POSITION_RIGHT,\n            spriteAxe.getPosition().y);\n        spritePlayer.setPosition(1200, 720);\n        // Update the branches\n        updateBranches(score);\n\n        // Set the log flying to the left\n        spriteLog.setPosition(810, 720);\n        logSpeedX = -5000;\n        logActive = true;\n        acceptInput = false;\n    }\n    // Handle the left cursor key\n}\n```", "```cpp\n    // Handle the left cursor key\n    if (Keyboard::isKeyPressed(Keyboard::Left))\n    {\n        // Make sure the player is on the left\n        playerSide = side::LEFT;\n        score++;\n        // Add to the amount of time remaining\n        timeRemaining += (2 / score) + .15;\n        spriteAxe.setPosition(AXE_POSITION_LEFT,\n            spriteAxe.getPosition().y);\n        spritePlayer.setPosition(580, 720);\n        // update the branches\n        updateBranches(score);\n        // set the log flying\n        spriteLog.setPosition(810, 720);\n        logSpeedX = 5000;\n        logActive = true;\n        acceptInput = false;\n    }\n}\n```", "```cpp\n/*\n****************************************\nHandle the players input\n****************************************\n*/\nEvent event;\nwhile (window.pollEvent(event))\n{\n    if (event.type == Event::KeyReleased && !paused)\n    {\n        // Listen for key presses again\n        acceptInput = true;\n        // hide the axe\n        spriteAxe.setPosition(2000,\n            spriteAxe.getPosition().y);\n    }\n}\nif (Keyboard::isKeyPressed(Keyboard::Escape))\n{\n    window.close();\n}\n```", "```cpp\n    // update the branch sprites\n    for (int i = 0; i < NUM_BRANCHES; i++)\n    {\n        float height = i * 150;\n        if (branchPositions[i] == side::LEFT)\n        {\n            // Move the sprite to the left side\n            branches[i].setPosition(610, height);\n            // Flip the sprite round the other way\n            branches[i].setRotation(180);\n        }\n        else if (branchPositions[i] == side::RIGHT)\n        {\n            // Move the sprite to the right side\n            branches[i].setPosition(1330, height);\n            // Flip the sprite round the other way\n            branches[i].setRotation(0);\n        }\n        else\n        {\n            // Hide the branch\n            branches[i].setPosition(3000, height);\n        }\n    }\n    // Handle a flying log\n    if (logActive)\n    {\n        spriteLog.setPosition(\nspriteLog.getPosition().x + \n            (logSpeedX * dt.asSeconds()),\n\nspriteLog.getPosition().y + \n            (logSpeedY * dt.asSeconds()));\n        // Has the log reached the right hand edge?\n        if (spriteLog.getPosition().x < -100 ||\n            spriteLog.getPosition().x > 2000)\n        {\n            // Set it up ready to be a whole new log next frame\n            logActive = false;\n            spriteLog.setPosition(810, 720);\n        }\n    }\n} // End if(!paused)\n/*\n****************************************\nDraw the scene\n****************************************\n*/\n```", "```cpp\n    // Handle a flying log\n    if (logActive)\n    {\n        spriteLog.setPosition(\n            spriteLog.getPosition().x + \n                (logSpeedX * dt.asSeconds()),\n\n        spriteLog.getPosition().y + \n            (logSpeedY * dt.asSeconds()));\n        // Has the log reached the right-hand edge?\n        if (spriteLog.getPosition().x < -100 ||\n            spriteLog.getPosition().x > 2000)\n        {\n            // Set it up ready to be a whole new cloud next frame\n            logActive = false;\n            spriteLog.setPosition(800, 600);\n        }\n    }\n    // has the player been squished by a branch?\n    if (branchPositions[5] == playerSide)\n    {\n        // death\n        paused = true;\n        acceptInput = false;\n\n        // Draw the gravestone\n        spriteRIP.setPosition(525, 760);\n        // hide the player\n        spritePlayer.setPosition(2000, 660);\n        // Change the text of the message\n        messageText.setString(\"SQUISHED!!\");\n        // Center it on the screen\n        FloatRect textRect = messageText.getLocalBounds();\n        messageText.setOrigin(textRect.left +\n            textRect.width / 2.0f,\n            textRect.top + textRect.height / 2.0f);\n        messageText.setPosition(1920 / 2.0f,\n            1080 / 2.0f);\n    }\n} // End if(!paused)\n/*\n****************************************\nDraw the scene\n****************************************\n*/\n```", "```cpp\n#include <sstream>\n#include <SFML/Graphics.hpp>\n#include <SFML/Audio.hpp>\nusing namespace sf;\n```", "```cpp\n// Control the player input\nbool acceptInput = false;\n// Prepare the sounds\n// The player chopping sound\nSoundBuffer chopBuffer;\nchopBuffer.loadFromFile(\"sound/chop.wav\");\nSound chop;\nchop.setBuffer(chopBuffer);\n// The player has met his end under a branch\nSoundBuffer deathBuffer;\ndeathBuffer.loadFromFile(\"sound/death.wav\");\nSound death;\ndeath.setBuffer(deathBuffer);\n// Out of time\nSoundBuffer ootBuffer;\nootBuffer.loadFromFile(\"sound/out_of_time.wav\");\nSound outOfTime;\noutOfTime.setBuffer(ootBuffer);\nwhile (window.isOpen())\n{\n```", "```cpp\n// Wrap the player controls to\n// Make sure we are accepting input\nif (acceptInput)\n{\n    // More code here next...\n\n    // First handle pressing the right cursor key\n    if (Keyboard::isKeyPressed(Keyboard::Right))\n    {\n        // Make sure the player is on the right\n        playerSide = side::RIGHT;\n\n        score++;\n        timeRemaining += (2 / score) + .15;\n        spriteAxe.setPosition(AXE_POSITION_RIGHT,\n            spriteAxe.getPosition().y);\n        spritePlayer.setPosition(1120, 660);\n        // update the branches\n        updateBranches(score);\n\n        // set the log flying to the left\n        spriteLog.setPosition(800, 600);\n        logSpeedX = -5000;\n        logActive = true;\n        acceptInput = false;\n        // Play a chop sound\n        chop.play();\n    }\n```", "```cpp\nif (timeRemaining <= 0.f) {\n    // Pause the game\n    paused = true;\n    // Change the message shown to the player\n    messageText.setString(\"Out of time!!\");\n    //Reposition the text based on its new size\n    FloatRect textRect = messageText.getLocalBounds();\n    messageText.setOrigin(textRect.left +\n        textRect.width / 2.0f,\n        textRect.top +\n        textRect.height / 2.0f);\n    messageText.setPosition(1920 / 2.0f, 1080 / 2.0f);\n    // Play the out of time sound\n    outOfTime.play();\n}\n```", "```cpp\n// has the player been squished by a branch?\nif (branchPositions[5] == playerSide)\n{\n    // death\n    paused = true;\n    acceptInput = false;\n\n    // Draw the gravestone\n    spriteRIP.setPosition(675, 660);\n    // hide the player\n    spritePlayer.setPosition(2000, 660);\n    messageText.setString(\"SQUISHED!!\");\n    FloatRect textRect = messageText.getLocalBounds();\n    messageText.setOrigin(textRect.left +\n        textRect.width / 2.0f,\n        textRect.top + textRect.height / 2.0f);\n    messageText.setPosition(1920 / 2.0f, 1080 / 2.0f);\n    // Play the death sound\n    death.play();\n}\n```"]