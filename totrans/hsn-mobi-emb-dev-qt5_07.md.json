["```cpp\nQT += network\n```", "```cpp\nQNetworkRequest request;\nrequest.setUrl(QUrl(\"http://www.example.com\"));\n```", "```cpp\nrequest.setHeader(QNetworkRequest::ContentTypeHeader, \"application/x-www-form-urlencoded\");\nrequest.setRawHeader(QByteArray(\"X-UUID\"), QUuid::createUuid().toByteArray());\n```", "```cpp\nQNetworkAccessManager *manager = new QNetworkAccessManager(this);\n```", "```cpp\n connect(manager, &QNetworkAccessManager::finished, \n        this, &MainWindow::replyFinished);\n```", "```cpp\nvoid MainWindow::replyFinished(QNetworkReply *reply) \n{ \n    if (reply->error()) \n        ui->textEdit->insertPlainText( reply->errorString()); \n    else { \n        QList<QByteArray> headerList = reply->rawHeaderList(); \n        ui->textEdit->insertPlainText(headerList.join(\"\\n\") +\"\\n\"); \n        QByteArray responsData = reply->readAll(); \n        ui->textEdit->insertHtml(responsData); \n    } \n}\n```", "```cpp\nmanager->get(request);\n```", "```cpp\n    QFileDialog dialog(this); \n    dialog.setFileMode(QFileDialog::AnyFile); \n    QString filename = QFileDialog::getOpenFileName(this, tr(\"Open File\"), QDir::homePath()); \n\n    if (!filename.isEmpty()) { \n        QFile file(filename); \n        if (file.open(QIODevice::ReadOnly | QIODevice::Text)) { \n            QByteArray fileBytes = file.readAll(); \n            manager->put(request, fileBytes); \n        } \n    }\n```", "```cpp\nQNetworkRequest request;\nQUrl url(\"http://www.example.com\");\n\nQUrlQuery formData;\nformData.addQueryItem(\"login\", \"me\");\nformData.addQueryItem(\"password\", \"123\");\nformData.addQueryItem(\"submit\", \"Send\");\nurl.setQuery(formData);\nrequest.setUrl(url);\nmanager->get(request);\n```", "```cpp\nQByteArray postData;\npostData.append(\"?login=me&password=123&submit=Send\");\nmanager->post(request, postData);\n```", "```cpp\nQFile *file = new QFile(filename); \n    if (file->open(QIODevice::ReadOnly)) { \n        QByteArray fileBytes = file->readAll(); \n         QHttpMultiPart *multiPart = \n             new QHttpMultiPart(QHttpMultiPart::FormDataType); \n\n        QHttpPart textPart; \n        textPart.setHeader(QNetworkRequest::ContentDispositionHeader, QVariant(\"form-data; name=\\\"filename\\\"\")); \n        textPart.setBody(filename.toLocal8Bit()); \n\n        QHttpPart filePart; \n        filePart.setHeader(QNetworkRequest::ContentDispositionHeader, QVariant(\"form-data; name=\\\"file\\\"\")); \n\n        filePart.setHeader(QNetworkRequest::ContentTypeHeader, QVariant(\"application/zip\")); \n\n        filePart.setBodyDevice(file); \n\n        file->setParent(multiPart); \n\n        multiPart->append(textPart); \n        multiPart->append(filePart); \n\n        manager->put(request, multiPart); \n    }\n```", "```cpp\nQNetworkReply *networkReply = manager->get(request);\nconnect(networkReply, SIGNAL(finished()), this, SLOT(requestFinished()));\nconnect(networkReply, SIGNAL(error(QNetworkReply::NetworkError)),\n    this,SLOT(networkReplyError(QNetworkReply::NetworkError)));\n connect(networkReply, SIGNAL(readyRead()), this, SLOT(readyRead()));\n\n```", "```cpp\nconnect(networkReply, &QNetworkReply::error, this, &MyClass::networkReplyError);\n connect(networkReply, QOverload<QNetworkReply::NetworkError>::of(&QNetworkReply::error),this, &MyClass::networkReplyError);\nconnect(networkReply, &QNetworkReply::finished, this, &MyClass::requestFinished);\nconnect(networkReply, &QNetworkReply::readyRead, this, &MyClass::readyRead);\n```", "```cpp\nconnect(networkReply, &QNetworkReply::downloadProgress, this, &MyClass::onDownloadProgress);\n```", "```cpp\n QUrl url(\"ftp://llornkcor.com/\");\n url.setUserName(\"guest@llornkcor.com\");\n url.setPassword(\"handsonmobileandembedded\");\n```", "```cpp\n        url.setPath(QFileInfo(file).fileName());\n```", "```cpp\n request.setUrl(url);\n```", "```cpp\nQNetworkReply *networkReply = manager->put(request, fileBytes);\n\nconnect(networkReply, &QNetworkReply::downloadProgress, \n    this, &MainWindow::onDownloadProgress);\nconnect(networkReply, &QNetworkReply::downloadProgress, \n    this, &MainWindow::onUploadProgress);\n```", "```cpp\nconnect(networkReply, QOverload<QNetworkReply::NetworkError>::of(&QNetworkReply::error),               [=](QNetworkReply::NetworkError code){\n    qDebug() << Q_FUNC_INFO << code << networkReply->errorString(); });\n\nconnect(networkReply, &QNetworkReply::finished, \n    this, &MainWindow::requestFinished);\n```", "```cpp\ngit clone -b 5.12 git://code.qt.io/qt/qtftp.git\n\n```", "```cpp\ncd qtftp\nqmake\nmake\nmake install\n```", "```cpp\n    connect(ftp, SIGNAL(commandFinished(int,bool)), \n            this, SLOT(qftpCommandFinished(int,bool))); \n\n    connect(ftp, SIGNAL(stateChanged(int)), \n            this, SLOT(stateChanged(int))); \n\n    connect(ftp, SIGNAL(dataTransferProgress(qint64,qint64)), \n            this, SLOT(qftpDataTransferProgress(qint64,qint64))); \n\n    QUrl url(URL); \n    ftp->connectToHost(url.host(), 21); \n    ftp->login(USER, PASS);\n\n```", "```cpp\nQNetworkConfiguration config;\nif (config.bearerType() == QNetworkConfiguration::Bearer4G)\n    qWarning() << \"Config is using 4G\";\n```", "```cpp\nQNetworkConfiguration config;\nif (config.testFlag(QNetworkConfiguration::Active))\n    qWarning() << \"Config is active\";\n```", "```cpp\nQNetworkConfigurationManager manager;\nQNetworkConfiguration default = manager.defaultConfiguration();\n```", "```cpp\nQNetworkAccessManager manager;\nQNetworkConfiguration config = manager.configuration();\nQNetworkSession *networkSession = new QNetworkSession(config, this);\nconnect(networkSession, &QNetworkSession::opened, this, &SomeClass::sessionOpened);\nnetworkSession->open();\n```", "```cpp\nconnect(networkSession, &QNetworkSession::bytesReceived, this, &SomeClass::bytesReceived); \nconnect(networkSession, &QNetworkSession::bytesWritten, this, &SomeClass::bytesWritten); \n\nQNetworkRequest request(QUrl(\"http://example.com\"));\nmanager->get(request);\n```", "```cpp\nQLocalServer *localServer = new QLocalServer(this);\nlocalServer->listen(\"localSocketName\");\n\nconnect(localServer, &QLocalServer::newConnection, this,      \n    &SomeClass::newLocalConnection);\n\nvoid SomeClass::newLocalConnection()\n{\n    QLocalSocket *local = localServer->nextPendingConnection();\n    local->write(\"Client OK\\r\\n\");\n    local->flush();\n}\n```", "```cpp\nQLocalSocket *lSocket = new QLocalSocket(this);\nconnect(lSocket, &QLocalSocket::connected, this, &SomeClass::connected);\n\nconnect(lSocket, &QLocalSocket::disconnected, this,\n    &SomeClass::disconnected);\n\nconnect(lSocket, &QLocalSocket::error, this, &SomeClass::error);\nconnect(lSocket, &QLocalSocket::readyRead, this, &SomeClass::readMessage);\n\nvoid SomeClass::readMessage()\n{\n    if (lSocket->bytesAvailable())\n        QByteArray msg = lSocket->readAll();\n}\n```", "```cpp\nlSocket->connectToHost(\"localSocketName\");\n```", "```cpp\nlSocket->write(\"local socket OK\\r\\n\");\n```", "```cpp\nQTcpServer *tcpServer = new QTcpServer(this);\ntcpServer->listen(QHostAddress::Any, 8888);\n\nconnect(tcpServer, &QTcpServer::newConnection, this,      \n    &SomeClass::newLocalConnection);\n\nvoid SomeClass::newLocalConnection()\n{\n    QTcpSocket *tSocket = tcpServer->nextPendingConnection();\n    tSocket->write(\"Client OK\\r\\n\");\n    tSocket->flush();\n}\n```", "```cpp\nQTcpSocket *tSocket = new QTcpSocket(this);\nconnect(tSocket, &QTcpSocket::connected, this, &SomeClass::connected);\n\nconnect(tSocket, &QTcpSocket::disconnected, this,\n    &SomeClass::disconnected);\n\nconnect(tSocket, &QTcpSocket::error, this, &SomeClass::error);\nconnect(tSocket, &QTcpSocket::readyRead, this, &SomeClass::readData);\n\n```", "```cpp\nvoid SomeClass:connected()\n{\n    QString requestLine = QStringLiteral(\"GET \\index.html HTTP/1.1\\r\\nhost: www.example.com\\r\\n\\r\\n\");\n    QByteArray ba;\n    ba.append(requestLine);\n    tSocket->write(ba);\n    tSocket->flush();\n}\n```", "```cpp\nvoid SomeClass::readData()\n{\n    if (tSocket->bytesAvailable())\n        QByteArray msg = tSocket->readAll();\n}\n```", "```cpp\nQTcpSocket *tSocket = new QTcpSocket(this);\nif (!tSocket->waitForConnected(3000)) {\n    qWarning() << \"Not connected\";\n    return;\n}\n\ntSocket->write(\"GET \\index.html HTTP/1.1\\r\\nhost: www.example.com\\r\\n\\r\\n\");\ntSocket->waitForBytesWritten(1000);\ntSocket->waitForReadyRead(3000);\nif (tSocket->bytesAvailable())\n    QByteArray msg = tSocket->readAll();\n```", "```cpp\ntSocket->close();\n```", "```cpp\nQSctpServer *sctpServer = new QSctpServer(this);\nsctpServer->setMaximumChannelCount(8);\n```", "```cpp\nQSctpSocket *sSocket = sctpServer->nextPendingDatagramConnection();\n```", "```cpp\nQNetworkDatagram datagram(\"Hello Mobile!\", QHostAddress(\"10.0.0.50\"), 8888);\nsSocket->writeDatagram(datagram);\n```", "```cpp\nQUdpSocket *uSocket = new QUdpSocket(this);\nuSocket->bind(QHostAddress::LocalHost, 8888);\nconnect(uSocket, &QUdpSocket::readyRead, this, &SomeClass::readMessage);\n\nvoid SomeClass::readMessage()\n{\n  while (udpSocket->hasPendingDatagrams()) {\n        QNetworkDatagram datagram = uSocket->receiveDatagram();\n        qWarning() << datagram.data();\n    }\n}\n```", "```cpp\nQSslSocket *sslSocket = new QSslSocket(this);\nconnect(sslSocket, &QSslSocket::encrypted, this, SomeClass::socketEncrypted);\nsslSocket->connectToHostEncrypted(\"example.com\", 943);\n```", "```cpp\nsslSocket->ignoreSslErrors();\n```", "```cpp\nvoid MainWindow::initCerts() \n{ \n    QByteArray key; \n    QByteArray cert; \n\n    QString keyPath = \nQFileDialog::getOpenFileName(0, tr(\"Open Key File\"), \n                            QDir::homePath(), \n                            \"Key file (*.key)\"); \n\n    if (!keyPath.isEmpty()) { \n        QFile keyFile(keyPath); \n        if (keyFile.open(QIODevice::ReadOnly)) { \n            key = keyFile.readAll(); \n            keyFile.close(); \n        }    \n    }    \n\n    QString certPath = \nQFileDialog::getOpenFileName(0, tr(\"Open cert File\"), \n                             QDir::homePath(), \n                            \"Cert file (*.cert)\"); \n\n    if (!certPath.isEmpty()) { \n        QFile certFile(certPath); \n        if (certFile.open(QIODevice::ReadOnly)) { \n            cert = certFile.readAll(); \n            certFile.close(); \n        }    \n    }    \n\n    QSslKey sslKey(key, QSsl::Rsa,    QSsl::Pem,QSsl::PrivateKey,\"localhost\"); \n    sslSocket->setPrivateKey(sslKey); \n\n    QSslCertificate sslCert(cert); \n    sslSocket->addCaCertificate(sslCert); \n    sslSocket->setLocalCertificate(sslCert); \n}\n\n```", "```cpp\n sslSocket->write(ui->lineEdit->text().toUtf8() +\"\\r\\n\");\n```", "```cpp\nserver->ignoreSslErrors()\n```", "```cpp\nclass MySslServer : public QTcpServer\n{\npublic:\n    MySslServer();\nprotected:\n    void incomingConnection(qintptr handle) override;\nprivate slots:\n    void socketEncrypted();\n};\n```", "```cpp\nMySslServer::MySslServer()\n{\n    server = new QSslSocket(this);\n    initCerts();\n}\n```", "```cpp\n\nvoid MySslServer::incomingConnection(qintptr sd)\n{\n if (server->setSocketDescriptor(sd)) {\n addPendingConnection(server);\n connect(server, &QSslSocket::encrypted, this, &MySslServer::socketEncrypted);\n server->startServerEncryption();\n } else {\n delete server;\n }\n}\n\nvoid MySslServer::socketEncrypted()\n{\n // entered encrypted mode, time to write secure transmissions\n}\n```", "```cpp\nconnect(server, QOverload<const QList<QSslError> &>::of(&QSslSocket::sslErrors), \n                [=](const QList<QSslError> &errors){ \n            for (QSslError error : errors) { \n                emit messageOutput(error.errorString()); \n            } \n        });\n\n```", "```cpp\nconnect(server, SIGNAL(error(QAbstractSocket::SocketError)), SLOT(error(QAbstractSocket::SocketError)));\n\n```", "```cpp\nQHostInfo hInfo = QHostInfo::fromName(\"www.packtpub.com\");\n```", "```cpp\nQHostInfo::lookupHost(\"www.packtpub.com\", this, SLOT(lookupResult(QHostInfo)));\n```", "```cpp\n\nvoid SomeClass::lookupResult(QHostInfo info) \n{\n    if (!hInfo.addresses().isEmpty()) {\n        QHostAddress address = info.addresses().first();\n        qWarning() << address.toString();\n    }\n}\n```", "```cpp\nif (!hInfo.addresses().isEmpty()) {\n    QHostAddress address = info.addresses().first();\n    qWarning() << address.toString();\n}\n```", "```cpp\nQDnsLookup *lookup = new QDnsLookup(this);\nconnect(lookup, &QDnsLookup::finished, this, &SomeClass::lookupFinished);\nlookup->setType(QDnsLookup::TXT);\nlookup->setName(\"example.com\");\nlookup->lookup();\n```", "```cpp\nvoid SomeClass:: lookupFinished()\n{\n    QDnsLookup *lookup = qobject_cast<QDnsLookup *>(sender());\n    if (!lookup)\n        return;\n    if (lookup->error() != QDnsLookup::NoError) {\n        lookup->deleteLater();\n        return;\n    }\n    const QList<QDnsTextRecord> txtRecords = lookup->textRecords();\n    for (const QDnsTextRecord &record: txtRecords) {\n        const QString recordName = record->name();\n        const QList <QByteArray> recordValues = record->values();\n        ...\n    }\n}\n```"]