["```cpp\nposition += -transform.basis.z * speed * delta\n```", "```cpp\nextends CanvasLayer\n@onready var power_bar = $MarginContainer/VBoxContainer/PowerBar\n@onready var shots = $MarginContainer/VBoxContainer/Shots\nvar bar_textures = {\n    \"green\": preload(\"res://assets/bar_green.png\"),\n    \"yellow\": preload(\"res://assets/bar_yellow.png\"),\n    \"red\": preload(\"res://assets/bar_red.png\")\n}\nfunc update_shots(value):\n    shots.text = \"Shots: %s\" % value\nfunc update_power_bar(value):\n    power_bar.texture_progress = bar_textures[\"green\"]\n    if value > 70:\n        power_bar.texture_progress = bar_textures[\"red\"]\n    elif value > 40:\n        power_bar.texture_progress = bar_textures[\"yellow\"]\n    power_bar.value = value\nfunc show_message(text):\n    $Message.text = text\n    $Message.show()\n    await get_tree().create_timer(2).timeout\n    $Message.hide()\n```", "```cpp\nextends Node3D\nenum {AIM, SET_POWER, SHOOT, WIN}\n@export var power_speed = 100\n@export var angle_speed = 1.1\nvar angle_change = 1\nvar power = 0\nvar power_change = 1\nvar shots = 0\nvar state = AIM\n```", "```cpp\nfunc _ready():\n    $Arrow.hide()\n    $Ball.position = $Tee.position\n    change_state(AIM)\n    $UI.show_message(\"Get Ready!\")\n```", "```cpp\nfunc change_state(new_state):\n    state = new_state\n    match state:\n        AIM:\n            $Arrow.position = $Ball.position\n            $Arrow.show()\n        SET_POWER:\n            power = 0\n        SHOOT:\n            $Arrow.hide()\n            $Ball.shoot($Arrow.rotation.y, power / 15)\n            shots += 1\n            $UI.update_shots(shots)\n        WIN:\n            $Ball.hide()\n            $Arrow.hide()\n            $UI.show_message(\"Win!\")\n```", "```cpp\nfunc _input(event):\n    if event.is_action_pressed(\"click\"):\n        match state:\n            AIM:\n                change_state(SET_POWER)\n            SET_POWER:\n                change_state(SHOOT)\n```", "```cpp\nfunc _process(delta):\n    match state:\n        AIM:\n            animate_arrow(delta)\n        SET_POWER:\n            animate_power(delta)\n        SHOOT:\n            pass\n```", "```cpp\nfunc animate_arrow(delta):\n    $Arrow.rotation.y += angle_speed * angle_change * delta\n    if $Arrow.rotation.y > PI / 2:\n        angle_change = -1\n    if $Arrow.rotation.y < -PI / 2:\n        angle_change = 1\nfunc animate_power(delta):\n    power += power_speed * power_change * delta\n    if power >= 100:\n        power_change = -1\n    if power <= 0:\n        power_change = 1\n    $UI.update_power_bar(power)\n```", "```cpp\nfunc _on_hole_body_entered(body):\n    if body.name == \"Ball\":\n        print(\"win!\")\n        change_state(WIN)\n```", "```cpp\nextends RigidBody3D\nsignal stopped\nfunc shoot(angle, power):\n    var force = Vector3.FORWARD.rotated(Vector3.UP, angle)\n    apply_central_impulse(force * power)\nfunc _integrate_forces(state):\n    if state.linear_velocity.length() < 0.1:\n        stopped.emit()\n        state.linear_velocity = Vector3.ZERO\n    if position.y < -20:\n        get_tree().reload_current_scene()\n```", "```cpp\nfunc _on_ball_stopped():\n    if state == SHOOT:\n        change_state(AIM)\n```", "```cpp\nfunc set_start_angle():\n    var hole_position = Vector2($Hole.position.z,\n        $Hole.position.x)\n    var ball_position = Vector2($Ball.position.z,\n        $Ball.position.x)\n    hole_dir = (ball_position - hole_position).angle()\n    $Arrow.rotation.y = hole_dir\n```", "```cpp\nfunc change_state(new_state):\n    state = new_state\n    match state:\n        AIM:\n            $Arrow.position = $Ball.position\n            $Arrow.show()\n            set_start_angle()\n```", "```cpp\nfunc animate_arrow(delta):\n    $Arrow.rotation.y += angle_speed * angle_change * delta\n    if $Arrow.rotation.y > hole_dir + PI / 2:\n        angle_change = -1\n    if $Arrow.rotation.y < hole_dir - PI / 2:\n        angle_change = 1\n```", "```cpp\n@export var mouse_sensitivity = 150\n```", "```cpp\nfunc _input(event):\n    if event is InputEventMouseMotion:\n        if state == AIM:\n            $Arrow.rotation.y -= event.relative.x / mouse_sensitivity\n```", "```cpp\nInput.mouse_mode = Input.MOUSE_MODE_CAPTURED\n```", "```cpp\nfunc _process(delta):\n    if Input.mouse_mode == Input.MOUSE_MODE_VISIBLE:\n        return\n```", "```cpp\nif event.is_action_pressed(\"ui_cancel\") and Input.mouse_mode == Input.MOUSE_MODE_CAPTURED:\n    Input.mouse_mode = Input.MOUSE_MODE_VISIBLE\n```", "```cpp\nif event.is_action_pressed(\"click\"):\n    if Input.mouse_mode == Input.MOUSE_MODE_VISIBLE:\n        Input.mouse_mode = Input.MOUSE_MODE_CAPTURED\n        return\n```", "```cpp\nextends Node3D\n@export var cam_speed = PI / 2\n@export var zoom_speed = 0.1\nvar zoom = 0.2\nfunc _input(event):\n    if event.is_action_pressed(\"cam_zoom_in\"):\n        zoom -= zoom_speed\n    if event.is_action_pressed(\"cam_zoom_out\"):\n        zoom += zoom_speed\nfunc _process(delta):\n    zoom = clamp(zoom, 0.1, 2.0)\n    scale = Vector3.ONE * zoom\n    var y = Input.get_axis(\"cam_left\", \"cam_right\")\n    rotate_y(y * cam_speed * delta)\n    var x = Input.get_axis(\"cam_up\", \"cam_down\")\n    $GimbalInner.rotate_x(x * cam_speed * delta)\n    $GimbalInner.rotation.x = clamp($GimbalInner.rotation.x,         -PI / 2, -0.2)\n```", "```cpp\nif state != WIN:\n    $CameraGimbal.position = $Ball.position\n```", "```cpp\n@export var next_hole : PackedScene\n```", "```cpp\nWIN:\n$Ball.hide()\n$Arrow.hide()\n    await get_tree().create_timer(1).timeout\n    if next_hole:\n        get_tree().change_scene_to_packed(next_hole)\n```"]