["```cpp\ngit clone https://github.com/codeplea/Hands-On-Network-Programming-with-C\ncd Hands-On-Network-Programming-with-C/chap07\n```", "```cpp\n/*chap07.h*/\n\n#if defined(_WIN32)\n#ifndef _WIN32_WINNT\n#define _WIN32_WINNT 0x0600\n#endif\n#include <winsock2.h>\n#include <ws2tcpip.h>\n#pragma comment(lib, \"ws2_32.lib\")\n\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <netdb.h>\n#include <unistd.h>\n#include <errno.h>\n\n#endif\n\n#if defined(_WIN32)\n#define ISVALIDSOCKET(s) ((s) != INVALID_SOCKET)\n#define CLOSESOCKET(s) closesocket(s)\n#define GETSOCKETERRNO() (WSAGetLastError())\n\n#else\n#define ISVALIDSOCKET(s) ((s) >= 0)\n#define CLOSESOCKET(s) close(s)\n#define SOCKET int\n#define GETSOCKETERRNO() (errno)\n#endif\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n```", "```cpp\nfile --mime-type example.txt\n```", "```cpp\n/*web_server.c except*/\n\nconst char *get_content_type(const char* path) {\n    const char *last_dot = strrchr(path, '.');\n    if (last_dot) {\n        if (strcmp(last_dot, \".css\") == 0) return \"text/css\";\n        if (strcmp(last_dot, \".csv\") == 0) return \"text/csv\";\n        if (strcmp(last_dot, \".gif\") == 0) return \"image/gif\";\n        if (strcmp(last_dot, \".htm\") == 0) return \"text/html\";\n        if (strcmp(last_dot, \".html\") == 0) return \"text/html\";\n        if (strcmp(last_dot, \".ico\") == 0) return \"image/x-icon\";\n        if (strcmp(last_dot, \".jpeg\") == 0) return \"image/jpeg\";\n        if (strcmp(last_dot, \".jpg\") == 0) return \"image/jpeg\";\n        if (strcmp(last_dot, \".js\") == 0) return \"application/javascript\";\n        if (strcmp(last_dot, \".json\") == 0) return \"application/json\";\n        if (strcmp(last_dot, \".png\") == 0) return \"image/png\";\n        if (strcmp(last_dot, \".pdf\") == 0) return \"application/pdf\";\n        if (strcmp(last_dot, \".svg\") == 0) return \"image/svg+xml\";\n        if (strcmp(last_dot, \".txt\") == 0) return \"text/plain\";\n    }\n\n    return \"application/octet-stream\";\n}\n```", "```cpp\n/*web_server.c except*/\n\nSOCKET create_socket(const char* host, const char *port) {\n    printf(\"Configuring local address...\\n\");\n    struct addrinfo hints;\n    memset(&hints, 0, sizeof(hints));\n    hints.ai_family = AF_INET;\n    hints.ai_socktype = SOCK_STREAM;\n    hints.ai_flags = AI_PASSIVE;\n\n    struct addrinfo *bind_address;\n    getaddrinfo(host, port, &hints, &bind_address);\n```", "```cpp\n/*web_server.c except*/\n\n    printf(\"Creating socket...\\n\");\n    SOCKET socket_listen;\n    socket_listen = socket(bind_address->ai_family,\n            bind_address->ai_socktype, bind_address->ai_protocol);\n    if (!ISVALIDSOCKET(socket_listen)) {\n        fprintf(stderr, \"socket() failed. (%d)\\n\", GETSOCKETERRNO());\n        exit(1);\n    }\n\n    printf(\"Binding socket to local address...\\n\");\n    if (bind(socket_listen,\n                bind_address->ai_addr, bind_address->ai_addrlen)) {\n        fprintf(stderr, \"bind() failed. (%d)\\n\", GETSOCKETERRNO());\n        exit(1);\n    }\n    freeaddrinfo(bind_address);\n\n    printf(\"Listening...\\n\");\n    if (listen(socket_listen, 10) < 0) {\n        fprintf(stderr, \"listen() failed. (%d)\\n\", GETSOCKETERRNO());\n        exit(1);\n    }\n\n    return socket_listen;\n}\n```", "```cpp\n/*web_server.c except*/\n\n#define MAX_REQUEST_SIZE 2047\n\nstruct client_info {\n    socklen_t address_length;\n    struct sockaddr_storage address;\n    SOCKET socket;\n    char request[MAX_REQUEST_SIZE + 1];\n    int received;\n    struct client_info *next;\n};\n```", "```cpp\n/*web_server.c except*/\n\nstatic struct client_info *clients = 0;\n```", "```cpp\n/*web_server.c except*/\n\nstruct client_info *get_client(SOCKET s) {\n    struct client_info *ci = clients;\n\n    while(ci) {\n        if (ci->socket == s)\n            break;\n        ci = ci->next;\n    }\n\n    if (ci) return ci;\n```", "```cpp\n/*web_server.c except*/\n\n    struct client_info *n =\n        (struct client_info*) calloc(1, sizeof(struct client_info));\n\n    if (!n) {\n        fprintf(stderr, \"Out of memory.\\n\");\n        exit(1);\n    }\n\n    n->address_length = sizeof(n->address);\n    n->next = clients;\n    clients = n;\n    return n;\n}\n```", "```cpp\n/*web_server.c except*/\n\nvoid drop_client(struct client_info *client) {\n    CLOSESOCKET(client->socket);\n\n    struct client_info **p = &clients;\n\n    while(*p) {\n        if (*p == client) {\n            *p = client->next;\n            free(client);\n            return;\n        }\n        p = &(*p)->next;\n    }\n\n    fprintf(stderr, \"drop_client not found.\\n\");\n    exit(1);\n}\n```", "```cpp\n/*web_server.c except*/\n\nconst char *get_client_address(struct client_info *ci) {\n    static char address_buffer[100];\n    getnameinfo((struct sockaddr*)&ci->address,\n            ci->address_length,\n            address_buffer, sizeof(address_buffer), 0, 0,\n            NI_NUMERICHOST);\n    return address_buffer;\n}\n```", "```cpp\n/*web_server.c except*/\n\nfd_set wait_on_clients(SOCKET server) {\n    fd_set reads;\n    FD_ZERO(&reads);\n    FD_SET(server, &reads);\n    SOCKET max_socket = server;\n\n    struct client_info *ci = clients;\n\n    while(ci) {\n        FD_SET(ci->socket, &reads);\n        if (ci->socket > max_socket)\n            max_socket = ci->socket;\n        ci = ci->next;\n    }\n\n    if (select(max_socket+1, &reads, 0, 0, 0) < 0) {\n        fprintf(stderr, \"select() failed. (%d)\\n\", GETSOCKETERRNO());\n        exit(1);\n    }\n\n    return reads;\n}\n```", "```cpp\n/*web_server.c except*/\n\nvoid send_400(struct client_info *client) {\n    const char *c400 = \"HTTP/1.1 400 Bad Request\\r\\n\"\n        \"Connection: close\\r\\n\"\n        \"Content-Length: 11\\r\\n\\r\\nBad Request\";\n    send(client->socket, c400, strlen(c400), 0);\n    drop_client(client);\n}\n```", "```cpp\n/*web_server.c except*/\n\nvoid send_404(struct client_info *client) {\n    const char *c404 = \"HTTP/1.1 404 Not Found\\r\\n\"\n        \"Connection: close\\r\\n\"\n        \"Content-Length: 9\\r\\n\\r\\nNot Found\";\n    send(client->socket, c404, strlen(c404), 0);\n    drop_client(client);\n}\n```", "```cpp\n/*web_server.c except*/\n\nvoid serve_resource(struct client_info *client, const char *path) {\n\n    printf(\"serve_resource %s %s\\n\", get_client_address(client), path);\n```", "```cpp\n/*web_server.c except*/\n\n    if (strcmp(path, \"/\") == 0) path = \"/index.html\";\n\n    if (strlen(path) > 100) {\n        send_400(client);\n        return;\n    }\n\n    if (strstr(path, \"..\")) {\n        send_404(client);\n        return;\n    }\n```", "```cpp\n/*web_server.c except*/\n\n    char full_path[128];\n    sprintf(full_path, \"public%s\", path);\n```", "```cpp\n/*web_server.c except*/\n\n#if defined(_WIN32)\n    char *p = full_path;\n    while (*p) {\n        if (*p == '/') *p = '\\\\';\n        ++p;\n    }\n#endif\n```", "```cpp\n/*web_server.c except*/\n\n    FILE *fp = fopen(full_path, \"rb\");\n\n    if (!fp) {\n        send_404(client);\n        return;\n    }\n```", "```cpp\n/*web_server.c except*/\n\n    fseek(fp, 0L, SEEK_END);\n    size_t cl = ftell(fp);\n    rewind(fp);\n```", "```cpp\n/*web_server.c except*/\n\n    const char *ct = get_content_type(full_path);\n```", "```cpp\n/*web_server.c except*/\n\n#define BSIZE 1024\n    char buffer[BSIZE];\n```", "```cpp\n/*web_server.c except*/\n\n    sprintf(buffer, \"HTTP/1.1 200 OK\\r\\n\");\n    send(client->socket, buffer, strlen(buffer), 0);\n\n    sprintf(buffer, \"Connection: close\\r\\n\");\n    send(client->socket, buffer, strlen(buffer), 0);\n\n    sprintf(buffer, \"Content-Length: %u\\r\\n\", cl);\n    send(client->socket, buffer, strlen(buffer), 0);\n\n    sprintf(buffer, \"Content-Type: %s\\r\\n\", ct);\n    send(client->socket, buffer, strlen(buffer), 0);\n\n    sprintf(buffer, \"\\r\\n\");\n    send(client->socket, buffer, strlen(buffer), 0);\n```", "```cpp\n/*web_server.c except*/\n\n    int r = fread(buffer, 1, BSIZE, fp);\n    while (r) {\n        send(client->socket, buffer, r, 0);\n        r = fread(buffer, 1, BSIZE, fp);\n    }\n```", "```cpp\n/*web_server.c except*/\n\n    fclose(fp);\n    drop_client(client);\n}\n```", "```cpp\n/*web_server.c except*/\n\nint main() {\n\n#if defined(_WIN32)\n    WSADATA d;\n    if (WSAStartup(MAKEWORD(2, 2), &d)) {\n        fprintf(stderr, \"Failed to initialize.\\n\");\n        return 1;\n    }\n#endif\n```", "```cpp\n/*web_server.c except*/\n\n    SOCKET server = create_socket(0, \"8080\");\n```", "```cpp\n/*web_server.c except*/\n\n    SOCKET server = create_socket(\"127.0.0.1\", \"8080\");\n```", "```cpp\n/*web_server.c except*/\n\n    while(1) {\n\n        fd_set reads;\n        reads = wait_on_clients(server);\n```", "```cpp\n/*web_server.c except*/\n\n        if (FD_ISSET(server, &reads)) {\n            struct client_info *client = get_client(-1);\n\n            client->socket = accept(server,\n                    (struct sockaddr*) &(client->address),\n                    &(client->address_length));\n\n            if (!ISVALIDSOCKET(client->socket)) {\n                fprintf(stderr, \"accept() failed. (%d)\\n\",\n                        GETSOCKETERRNO());\n                return 1;\n            }\n\n            printf(\"New connection from %s.\\n\",\n                    get_client_address(client));\n        }\n```", "```cpp\n/*web_server.c except*/\n\n        struct client_info *client = clients;\n        while(client) {\n            struct client_info *next = client->next;\n\n            if (FD_ISSET(client->socket, &reads)) {\n```", "```cpp\n/*web_server.c except*/\n\n                if (MAX_REQUEST_SIZE == client->received) {\n                    send_400(client);\n                    continue;\n                }\n```", "```cpp\n/*web_server.c except*/\n\n                int r = recv(client->socket,\n                        client->request + client->received,\n                        MAX_REQUEST_SIZE - client->received, 0);\n```", "```cpp\n/*web_server.c except*/\n\n                if (r < 1) {\n                    printf(\"Unexpected disconnect from %s.\\n\",\n                            get_client_address(client));\n                    drop_client(client);\n```", "```cpp\n/*web_server.c except*/\n\n                } else {\n                    client->received += r;\n                    client->request[client->received] = 0;\n\n                    char *q = strstr(client->request, \"\\r\\n\\r\\n\");\n                    if (q) {\n```", "```cpp\n/*web_server.c except*/\n\n                        if (strncmp(\"GET /\", client->request, 5)) {\n                            send_400(client);\n                        } else {\n                            char *path = client->request + 4;\n                            char *end_path = strstr(path, \" \");\n                            if (!end_path) {\n                                send_400(client);\n                            } else {\n                                *end_path = 0;\n                                serve_resource(client, path);\n                            }\n                        }\n                    } //if (q)\n```", "```cpp\n/*web_server.c except*/\n\n                }\n            }\n\n            client = next;\n        }\n\n    } //while(1)\n\n    printf(\"\\nClosing socket...\\n\");\n    CLOSESOCKET(server);\n\n#if defined(_WIN32)\n    WSACleanup();\n#endif\n\n    printf(\"Finished.\\n\");\n    return 0;\n}\n```", "```cpp\ngcc web_server.c -o web_server\n./web_server\n```", "```cpp\ngcc web_server.c -o web_server.exe -lws2_32\nweb_server.exe\n```", "```cpp\nchar buffer[1028] = {0};\nchar *p = buffer;\n\nwhile (!strstr(p, \" \"))\n    p += recv(client, p, 1028, 0);\n```", "```cpp\nchar buffer[1028] = {0};\nchar *p = buffer;\n\nwhile (!strstr(p, \" \"))\n    p += recv(client, p, 1028 - (p - buffer), 0);\n```", "```cpp\nchar buffer[1028] = {0};\nchar *p = buffer;\n\nwhile (!strstr(p, \" \"))\n    p += recv(client, p, 1027 - (p - buffer), 0);\n```"]