- en: Building a Library Management System
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建图书馆管理系统
- en: In this chapter, we study a system for the management of a library. We continue
    to develop C++ classes, as in the previous chapters. However, in this chapter,
    we develop a more real-world system. The library system of this chapter can be
    used by a real library.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们研究了一个图书馆管理系统。我们继续开发C++类，就像前几章一样。然而，在本章中，我们开发了一个更贴近现实世界的系统。本章的图书馆系统可以被真实的图书馆使用。
- en: The library is made up of sets of books and customers. The books keep track
    of which customers have borrowed or reserved them. The customers keep track of
    which books they have borrowed and reserved.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 图书馆由书籍和客户的集合组成。书籍跟踪哪些客户借阅或预订了它们。客户跟踪他们借阅和预订了哪些书籍。
- en: The main idea is that the library holds a set of books and a set of customers.
    Each book is marked as borrowed or unborrowed. If it is borrowed, the identity
    number of the customer that borrowed the book is stored. Moreover, a book can
    also be reserved by one or several customers. Therefore, each book also holds
    a list of identity numbers for the customers that have reserved the book. It must
    be a list rather than a set, since the book shall be loaned to the customers in
    the order that they reserved the book.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 主要思想是图书馆包含一组书籍和一组客户。每本书都标记为已借出或未借出。如果已借出，则存储借阅该书的客户的身份号码。此外，一本书也可以被一个或多个客户预订。因此，每本书还包含一个已预订该书的客户身份号码列表。它必须是一个列表而不是集合，因为书籍应按照客户预订的顺序借出。
- en: Each customer holds two sets with the identity numbers of the book they have
    borrowed and reserved. In both cases, we use sets rather than lists since the
    order they have borrowed or reserved the books does not matter.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 每个客户持有两个集合，包含他们借阅和预订的书籍的身份号码。在这两种情况下，我们使用集合而不是列表，因为它们借阅或预订书籍的顺序并不重要。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Working with classes for books and customers that constitute a small database
    with integer numbers as keys.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理书籍和客户类，这些类构成了一个小型数据库，以整数作为键。
- en: Working with standard input and output streams, where we write information about
    the books and customers, and prompt the user for input.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用标准输入和输出流处理，其中我们写入有关书籍和客户的信息，并提示用户输入。
- en: Working with file handling and streams. The books and customers are written
    and read with standard C++ file streams.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用文件处理和流。书籍和客户使用标准C++文件流写入和读取。
- en: Finally, we work with the generic classes `set` and `list` from the C++ standard
    library.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我们使用C++标准库中的泛型类`set`和`list`。
- en: The Book class
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`Book`类'
- en: 'We have three classes: `Book`, `Customer`, and `Library`:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有三个类：`Book`、`Customer`和`Library`：
- en: The `Book` class keeps track of a book. Each book has an author and a title,
    and a unique identity number.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Book`类跟踪一本书。每本书都有一个作者、一个标题和一个唯一的身份号码。'
- en: The `Customer` class keeps track of a customer. Each customer has a name and
    an address, and a unique identity number.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Customer`类跟踪一个客户。每个客户都有一个姓名、一个地址和一个唯一的身份号码。'
- en: The `Library` class keeps track of the library operations, such as adding and
    removing books and customers, borrowing, returning, and reserving books, as well
    as listing books and customers.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Library`类跟踪图书馆操作，例如添加和删除书籍和客户、借阅、归还和预订书籍，以及列出书籍和客户。'
- en: The `main` function simply creates an object of the `Library` class.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`main`函数简单地创建一个`Library`类的对象。'
- en: Moreover, each book holds information on whether it is borrowed at the moment.
    If it is borrowed, the identity number of the customer who has borrowed the book
    is also stored. Each book also holds a list of reservations. In the same way,
    each customer holds sets of books currently borrowed and reserved.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，每本书还记录了它是否被借阅的信息。如果被借阅，则存储借阅该书的客户的身份号码。每本书还包含一个预订列表。同样，每个客户还包含他们当前借阅和预订的书籍集合。
- en: The `Book` class holds two constructors. The first constructor is a default
    constructor and is used when reading books from a file. The second constructor
    is used when adding a new book to the library. It takes the name of the author
    and the title of the book as parameters.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`Book`类有两个构造函数。第一个构造函数是一个默认构造函数，用于从文件中读取书籍。第二个构造函数用于向图书馆添加新书。它接受书籍的作者名和标题作为参数。'
- en: '**Book.h**'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**Book.h**'
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The `author` and `title` methods simply return the author and title of the
    book:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`author`和`title`方法简单地返回书籍的作者和标题：'
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The books of the library can be read from and written to a file:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图书馆的书籍可以读取和写入文件：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'A book can be borrowed, reserved, or returned. A reservation can also be removed.
    Note that when a book is borrowed or reserved, we need to provide the identity
    number of the customer. However, that is not necessary when returning a book,
    since the `Book` class keeps track of the customer that has currently borrowed
    the book:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一本书可以被借出、预订或归还。预订也可以被删除。请注意，当书籍被借出或预订时，我们需要提供顾客的身份证号。然而，在归还书籍时，这不必要，因为 `Book`
    类跟踪当前借出书籍的顾客：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'When the book is borrowed, the customer''s identity number is stored, which
    is returned by `bookId`:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当书籍被借出时，顾客的身份证号被存储，并由 `bookId` 返回：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The `borrowed` method returns true if the book is borrowed at the moment. In
    that case, `customerId` returns the identity number of the customer who has borrowed
    the book:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`borrowed` 方法返回 true，如果此时书籍已被借出。在这种情况下，`customerId` 返回借出书籍的顾客的身份证号：'
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'A book can be reserved by a list of customers, and `reservationList` returns
    that list:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一本书可以被一组顾客预订，并且 `reservationList` 返回该列表：
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The `MaxBookId` field is static, which means that it is common to all objects
    of the class:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`MaxBookId` 字段是静态的，这意味着它是类中所有对象的公共属性：'
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The output stream operator writes the information of the book:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 输出流操作符写入书籍的信息：
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The `m_borrowed` field is true when the book is borrowed. The identity of the
    book and potential borrower are stored in `m_bookId` and `m_customerId`:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当书籍被借出时，`m_borrowed` 字段为 true。书籍和潜在借阅者的身份信息存储在 `m_bookId` 和 `m_customerId` 中：
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The name of the author and the title of the book are stored in `m_author` and
    `m_title`:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 作者的名字和书的标题存储在 `m_author` 和 `m_title` 中：
- en: '[PRE10]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'More than one customer can reserve a book. When they do, their identities are
    stored in `m_reservationList`. It is a list rather than a set because the reservations
    are stored in order. When a book is returned, the next customer, in reservation
    order, borrows the book:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 多个顾客可以预订一本书。当他们这样做时，他们的身份信息被存储在 `m_reservationList` 中。它是一个列表而不是集合，因为预订是按顺序存储的。当一本书被归还时，下一个按预订顺序的顾客借阅这本书：
- en: '[PRE11]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In this chapter, we use the generic `set`, `map`, and `list` classes from the
    C++ standard library. Their specifications are stored in the `Set`, `Map`, and
    `List` header files. The `set` and `list` classes hold a set and a list similar
    to our set and list classes in the previous chapter. A map is a structure where
    each value is identified by a unique key in order to provide fast access.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用 C++ 标准库中的泛型 `set`、`map` 和 `list` 类。它们的规范存储在 `Set`、`Map` 和 `List` 头文件中。`set`
    和 `list` 类包含与上一章中我们的集合和列表类类似的集合和列表。一个映射是一个结构，其中每个值都通过一个唯一的键来标识，以便提供快速访问。
- en: '**Book.cpp**'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**Book.cpp**'
- en: '[PRE12]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Since `MaxBookId` is static, we initialize it with the double colon (`::`)
    notation. Every static field needs to be initialized outside the class definition:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `MaxBookId` 是静态的，我们使用双冒号 (`::`) 符号初始化它。每个静态字段都需要在类定义之外初始化：
- en: '[PRE13]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The default constructor does nothing. It is used when reading from a file.
    Nevertheless, we still must have a default constructor to create objects of the
    `Book` class:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 默认构造函数不执行任何操作。它在从文件读取时使用。尽管如此，我们仍然必须有一个默认构造函数来创建 `Book` 类的对象：
- en: '[PRE14]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'When a new book is created, it is assigned a unique identity number. The identity
    number is stored in `MaxBookId`, which is increased for each new `Book` object:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当创建新书时，它被分配一个唯一的身份号码。这个身份号码存储在 `MaxBookId` 中，每次创建新的 `Book` 对象时都会增加：
- en: '[PRE15]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Writing the book
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 写入书籍
- en: 'A book is written to a stream in a similar manner. However, instead of `read`
    we use `write`. They work in a similar manner:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 以类似的方式将书籍写入流。但是，我们使用 `write` 而不是 `read`。它们的工作方式类似：
- en: '[PRE16]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'When reading a string we use `getline` instead of the stream operator, since
    the stream operator reads one word only, while `getline` reads several words.
    When writing to a stream, however, we can use the stream operator. It does not
    matter whether the name and title are made up of one or several words:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当读取字符串时，我们使用 `getline` 而不是流操作符，因为流操作符只读取一个单词，而 `getline` 读取多个单词。然而，在写入流时，我们可以使用流操作符。名字和标题是由一个或多个单词组成无关紧要：
- en: '[PRE17]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Similar to the reading case here, we first write the number of reservations
    in the list. Then we write the reservation identities themselves:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 与这里的读取情况类似，我们首先在列表中写入预订的数量。然后写入预订身份本身：
- en: '[PRE18]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Reading the book
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取书籍
- en: 'When reading any kind of value (except strings) from a file, we use the `read`
    method, which reads a fixed number of bytes. The `sizeof` operator gives us the
    size, in bytes, of the `m_bookId` field. The `sizeof` operator can also be used
    to find the size of a type. For instance, `sizeof (int)` gives us the size in
    bytes of a value of the type `int`. The type must be enclosed in parentheses:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当从文件中读取任何类型的值（除了字符串）时，我们使用 `read` 方法，该方法读取固定数量的字节。`sizeof` 操作符给我们 `m_bookId`
    字段的大小（以字节为单位）。`sizeof` 操作符也可以用来查找类型的大小。例如，`sizeof (int)` 给出 `int` 类型值的字节大小。类型必须用括号括起来：
- en: '[PRE19]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'When reading string values from a file, we use the C++ standard function `getline`
    to read the name of the author and the title of the book. It would not work to
    use the input stream operator if the name is made up of more than one word. If
    the author or title is made up of more than one word, only the first word would
    be read. The remaining words would not be read:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当从文件中读取字符串值时，我们使用 C++ 标准函数 `getline` 来读取作者的名字和书籍的标题。如果名字由多个单词组成，使用输入流操作符将不起作用。如果作者或标题由多个单词组成，则只会读取第一个单词。其余的单词将不会被读取：
- en: '[PRE20]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Note that we use the `read` method to read the value of the `m_borrowed` field,
    too, even though it holds the `bool` type rather than `int`:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们甚至使用 `read` 方法来读取 `m_borrowed` 字段的值，尽管它持有的是 `bool` 类型而不是 `int` 类型：
- en: '[PRE21]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'When reading the reservation list, we first read the number of reservations
    in the list. Then we read the reservation identity numbers themselves:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在读取预订列表时，我们首先读取列表中的预订数量。然后读取预订的身份证号码：
- en: '[PRE22]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Borrowing and reserving the book
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 借阅和预订书籍
- en: 'When the book is borrowed, `m_borrowed` becomes `true` and `m_customerId` is
    set to the identity number of the customer that borrowed the book:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当书籍被借出时，`m_borrowed` 变为 `true`，并且 `m_customerId` 被设置为借出书籍的顾客的身份证号：
- en: '[PRE23]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'It is a little bit different when the book is reserved. While a book can be
    borrowed by one customer only, it can be reserved by more than one customer. The
    identity number of the customer is added to `m_reservationList`. The size of the
    list is returned for the caller to know their position in the reservation list:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当书籍被预订时，情况略有不同。虽然一本书只能被一位顾客借阅，但它可以被多位顾客预订。顾客的身份证号被添加到 `m_reservationList` 中。列表的大小被返回给调用者，以便他们知道自己在预订列表中的位置：
- en: '[PRE24]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'When the book is returned, we just set `m_borrowed` to false. We do not need
    to set `m_customerId` to anything specific. It is not relevant as long as the
    book is not borrowed:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 当书籍归还时，我们只需将 `m_borrowed` 设置为 `false`。我们不需要将 `m_customerId` 设置为任何特定的值。只要书籍没有被借出，这与它无关：
- en: '[PRE25]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'A customer can remove themselves from the reservation list. In that case, we
    call `remove` on `m_reservationList`:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 顾客可以自己从预订列表中移除。在这种情况下，我们在 `m_reservationList` 上调用 `remove`：
- en: '[PRE26]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Displaying the book
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示书籍
- en: 'The output stream operator writes the title and author of the book. If the
    book is borrowed, the customer''s name is written, and if the reservation list
    is full, the reservation customers'' names are written:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 输出流操作符写入书籍的标题和作者。如果书籍被借出，则写入顾客的姓名，如果预订列表已满，则写入预订顾客的姓名：
- en: '[PRE27]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'We use the double-colon notation (`::`) when accessing a static field, such
    as `s_customerMap` in `Library`:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当访问静态字段时，我们使用双冒号表示法（`::`），例如 `Library` 中的 `s_customerMap`：
- en: '[PRE28]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The Customer class
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`Customer` 类'
- en: The `Customer` class keeps track of a customer. It holds sets of the books the
    customer currently has borrowed and reserved.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`Customer` 类跟踪顾客信息。它持有顾客当前借阅和预订的书籍集合。'
- en: '**Customer.h**'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**Customer.h**'
- en: '[PRE29]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The `hasBorrowed` method returns true if the customer has at least one book
    borrowed at the moment. In the `Library` class in the next section, it is not
    possible to remove a customer who currently has borrowed books:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`hasBorrowed` 方法返回 `true`，如果顾客此时至少借阅了一本书。在下一节的 `Library` 类中，无法移除当前借阅书籍的顾客：'
- en: '[PRE30]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'In the same way, as in the `Book` class, which was used previously, we use
    the static field `MaxCustomerId` to count the identity number of the customers.
    We also use the output stream operator to write information about the customer:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前使用的 `Book` 类类似，我们使用静态字段 `MaxCustomerId` 来计数顾客的身份证号。我们还使用输出流操作符来写入有关顾客的信息：
- en: '[PRE31]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Each customer has a name, address, and unique identity number. The sets `m_loanSet`
    and `m_reservationSet` hold the identity numbers of the books currently borrowed
    and reserved by the customer. Note that we use sets instead of lists, since the
    order of the books borrowed and reserved does not matter:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 每个客户都有一个姓名、地址和唯一的身份号码。集合`m_loanSet`和`m_reservationSet`保存了客户当前借阅和预订的书籍的身份号码。请注意，我们使用集合而不是列表，因为借阅和预订的书籍的顺序并不重要：
- en: '[PRE32]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '**Customer.cpp**'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**Customer.cpp**'
- en: '[PRE33]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Since `MaxCustomerId` is a static field, it needs to be defined outside the
    class:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`MaxCustomerId`是一个静态字段，它需要在类外部定义：
- en: '[PRE34]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The default constructor is used when loading objects from a file only. Therefore,
    there is no need to initialize the fields:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 默认构造函数用于仅从文件中加载对象。因此，不需要初始化字段：
- en: '[PRE35]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The second constructor is used when creating new book objects. We use the `MaxCustomerId`
    field to initialize the identity number of the customer; we also initialize their
    `name` and `address`:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个构造函数用于创建新的书籍对象。我们使用`MaxCustomerId`字段来初始化客户身份号码；我们还初始化他们的`name`和`address`：
- en: '[PRE36]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Reading the customer from a file
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从文件中读取客户信息
- en: 'The `read` method reads the information on a customer from the file stream:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`read`方法从文件流中读取客户信息：'
- en: '[PRE37]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'In the same way, as in the `read` method of the `Book` class, we have to use
    the `getline` function instead of the input stream operator, since the input stream
    operator would read one word only:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 与`Book`类的`read`方法相同，我们必须使用`getline`函数而不是输入流运算符，因为输入流运算符只会读取一个单词：
- en: '[PRE38]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Writing the customer to a file
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将客户信息写入文件
- en: 'The `write` method writes information on the customer to the stream in the
    same way as in the `Book` class previously:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`write`方法以与之前`Book`类中相同的方式将客户信息写入流中：'
- en: '[PRE39]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'When writing a set, we first write the size of the set, and then the individual
    values of the set:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 当写入集合时，我们首先写入集合的大小，然后是集合的各个值：
- en: '[PRE40]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Borrowing and reserving a book
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 借阅和预订书籍
- en: 'When a customer borrows a book, it is inserted into the loan set of the customer:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 当客户借阅书籍时，它被插入到客户的借阅集中：
- en: '[PRE41]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'In the same way, when a customer reserves a book, it is inserted into the reservation
    set of the customer:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，当客户预订书籍时，它被插入到客户的预订集中：
- en: '[PRE42]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'When a customer returns or unreserves a book, it is removed from the loan set
    or reservation set:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 当客户归还或取消预订书籍时，它将从借阅集或预订集中删除：
- en: '[PRE43]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Displaying the customer
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示客户
- en: 'The output stream operator writes the name and address of the customer. If
    the customer has borrowed or reserved books, they are written too:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 输出流运算符写入客户的姓名和地址。如果客户借阅或预订了书籍，它们也会被写入：
- en: '[PRE44]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: The Library class
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`Library`类'
- en: Finally, the `Library` class handles the library itself. It performs a set of
    tasks regarding borrowing and returning books.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`Library`类处理图书馆本身。它执行一系列关于借阅和归还书籍的任务。
- en: '**Library.h**'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '**Library.h**'
- en: '[PRE45]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The `lookupBook` method looks up a book by the author and title. It returns
    true if the book is found. If it is found, its information (an object of the `Book`
    class) is copied into the object pointed at by `bookPtr`:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`lookupBook`方法通过作者和标题查找书籍。如果找到书籍，则返回true。如果找到，其信息（`Book`类的对象）将被复制到由`bookPtr`指向的对象中：'
- en: '[PRE46]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'In the same way, `lookupCustomer` looks up a customer by the name and address.
    If the customer is found, true is returned, and the information is copied into
    the object pointed at by `customerPtr`:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，`lookupCustomer`通过姓名和地址查找客户。如果找到客户，则返回true，并将信息复制到由`customerPtr`指向的对象中：
- en: '[PRE47]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: The application of this chapter revolves around the following methods. They
    perform the tasks of the library system. Each of the methods will prompt the user
    for input and then perform a task, such as borrowing or returning a book.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的应用围绕以下方法展开。它们执行图书馆系统的任务。每个方法都会提示用户输入，然后执行一项任务，例如借阅或归还书籍。
- en: 'The following methods perform one task each, which are looking up the information
    about a book or a customer, adding or deleting a book, listing the books, adding
    and deleting books from the library, and borrowing, reserving, and returning books:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 以下方法各自执行一项任务，包括查找书籍或客户的信息、添加或删除书籍、列出书籍、从图书馆添加和删除书籍以及借阅、预订和归还书籍：
- en: '[PRE48]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'The `load` and `save` methods are called at the beginning and the end of the
    execution:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`load`和`save`方法在执行开始和结束时被调用：'
- en: '[PRE49]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'There are two maps holding the books and the customers of the library. As mentioned
    previously, a map is a structure where each value is identified by a unique key
    in order to provide fast access. The unique identity numbers of the books and
    customers are the keys:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个映射分别存储图书馆的书籍和客户。如前所述，映射是一种结构，其中每个值都通过一个唯一键来标识，以便提供快速访问。书籍和客户的唯一身份号码是键：
- en: '[PRE50]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '**Library.cpp**'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '**Library.cpp**'
- en: '[PRE51]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Between executions, the library information is stored in the `Library.bin` file
    on the hard drive. Note that we use two backslashes to represent one backslash
    in the `string`. The first backslash indicates that the character is a special
    character, and the second backslash states that it is a backslash:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在两次执行之间，图书馆信息存储在硬盘上的`Library.bin`文件中。注意，我们在`string`中使用两个反斜杠来表示一个反斜杠。第一个反斜杠表示该字符是一个特殊字符，第二个反斜杠表示它是一个反斜杠：
- en: '[PRE52]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'The constructor ­loads the library, presents a menu, and iterates until the
    user quits. Before the execution is finished, the library is saved:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数加载图书馆，显示菜单，并迭代直到用户退出。在执行完成之前，保存图书馆：
- en: '[PRE53]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Before the menu is presented, the library information (books, customers, loans,
    and reservations) is loaded from the file:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在显示菜单之前，从文件中加载图书馆信息（书籍、客户、贷款和预订）：
- en: '[PRE54]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The while statement continues as long as `quit` is true. It remains false until
    the user chooses the Quit option from the menu:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 当`quit`为真时，while语句会继续执行。它保持为假，直到用户从菜单中选择退出选项：
- en: '[PRE55]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The user inputs an integer value from the console input stream (`cin`), which
    is stored in `choice`:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 用户从控制台输入流（`cin`）中输入一个整数值，该值存储在`choice`变量中：
- en: '[PRE56]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'We use a `switch` statement to perform the requested task:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`switch`语句来执行请求的任务：
- en: '[PRE57]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Before the program is finished, the library information is saved:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在程序完成之前，保存图书馆信息：
- en: '[PRE58]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Looking up books and customers
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找书籍和客户
- en: 'The `lookupBook` method iterates through the book map. It returns true if a
    book with the author and title exists. If the book exists, its information is
    copied to the object pointed at by the `bookPtr` parameter and true is returned,
    as long as the pointer is not null. If the book does not exist, false is returned,
    and no information is copied into the object:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '`lookupBook`方法遍历书籍映射。如果存在具有作者和标题的书籍，则返回true。如果书籍存在，其信息被复制到由`bookPtr`参数指向的对象中，并且只要指针不为空，就返回true。如果书籍不存在，则返回false，并且不会将信息复制到对象中：'
- en: '[PRE59]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Note that `bookPtr` may be `nullptr`. In that case, only true is returned,
    and no information is written to the object pointed at by `bookPtr`:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`bookPtr`可能为`nullptr`。在这种情况下，只返回true，并且不会将信息写入`bookPtr`所指向的对象：
- en: '[PRE60]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'In the same way, `lookupCustomer` iterates through the customer map and returns
    true, as well as copies the customer information to a `Customer` object if a customer
    with the name exists:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，`lookupCustomer`遍历客户映射，如果存在具有相同名称的客户，则返回true，并将客户信息复制到`Customer`对象中：
- en: '[PRE61]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Also, in this case, `customerPtr` may be `nullptr`. In that case, only true
    is returned. When adding a new customer, we would like to know if there already
    is a customer with the same name and address:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在这种情况下，`customerPtr`可能为`nullptr`。在这种情况下，只返回true。当添加新客户时，我们希望知道是否已经存在具有相同名称和地址的客户：
- en: '[PRE62]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Adding a book
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加书籍
- en: 'The `addBook` method prompts the user for the name and title of the new book:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`addBook`方法提示用户输入新书的名称和标题：'
- en: '[PRE63]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'If a book with the `author` and `title` already exists, an error message is
    displayed:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 如果存在具有相同`author`和`title`的书籍，将显示错误消息：
- en: '[PRE64]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'If the book does not already exist, we create a new `Book` object that we add
    to the book map:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 如果书籍尚未存在，我们创建一个新的`Book`对象并将其添加到书籍映射中：
- en: '[PRE65]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Deleting a book
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除书籍
- en: 'The `deleteBook` method prompts the user for the author and title of the book,
    and deletes it if it exists:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '`deleteBook`方法提示用户输入书籍的作者和标题，如果存在则删除：'
- en: '[PRE66]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'If the book does not exist, an error message is displayed:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 如果书籍不存在，将显示错误消息：
- en: '[PRE67]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: When a book is being deleted, we iterate through all customers and, for each
    customer, return, and unreserve the book. We do that for every book just in case
    the book has been borrowed or reserved by customers. In the next chapter, we will
    work with pointers, which allow us to return and unreserve books in a more effective
    manner.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 当删除书籍时，我们遍历所有客户，并对每个客户返回并取消预订书籍。我们为每本书都这样做，以防书籍已被客户借阅或预订。在下一章中，我们将使用指针，这允许我们更有效地返回和取消预订书籍。
- en: 'Note that when we iterate through a map and obtain each `Customer` object,
    we need to put it back in the map after we have modified the values of its fields:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，当我们遍历映射并获取每个 `Customer` 对象时，在修改了其字段值之后，我们需要将其放回映射中：
- en: '[PRE68]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Finally, when we have made sure the book exists, and when we have returned
    and unreserved it, we remove it from the book map:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，当我们确认书籍存在，并且已经归还和取消预订后，我们将它从书籍映射中删除：
- en: '[PRE69]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Listing the books
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列出书籍
- en: 'The `listBook` method is quite simple. First, we check if the book map is empty.
    If it is empty, we write `"No books."` If the book map is not empty, we iterate
    through it, and for each book, we write its information to the console output
    stream (`cout`):'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '`listBook` 方法相当简单。首先，我们检查书籍映射是否为空。如果为空，我们写入 `"No books."`。如果书籍映射不为空，我们遍历它，并且对于每本书，我们将其信息写入控制台输出流
    (`cout`)：'
- en: '[PRE70]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Adding a customer
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加客户
- en: 'The `addCustomer` method prompts the user for the `name` and `address` of the
    new customer:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '`addCustomer` 方法提示用户输入新客户的 `name` 和 `address`：'
- en: '[PRE71]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'If a customer with the same `name` and `address` already exists, an error message
    is displayed:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 如果存在具有相同 `name` 和 `address` 的客户，将显示错误信息：
- en: '[PRE72]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Finally, we create a new `Customer` object that we add to the customer map:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们创建一个新的 `Customer` 对象并将其添加到客户映射中：
- en: '[PRE73]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Deleting a customer
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除客户
- en: 'The `deleteCustomer` method deletes the customer if they exist:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '`deleteCustomer` 方法如果客户存在，则删除客户：'
- en: '[PRE74]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'If the customer has borrowed at least one book, it must be returned before
    the customer can be removed:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 如果客户至少借阅了一本书，在客户被删除之前必须归还：
- en: '[PRE75]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'However, if the customer has reserved books, we just unreserve them before
    removing the customer:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果客户已经预订了书籍，我们在删除客户之前先取消预订：
- en: '[PRE76]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: Listing the customers
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列出客户
- en: 'The `listCustomer` method works in a way similar to `listBooks`. If there are
    no customers, we write `"No Customers."` If there are customers, we write them
    to the console output stream (`cout`):'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '`listCustomer` 方法的工作方式与 `listBooks` 类似。如果没有客户，我们写入 `"No Customers."`。如果有客户，我们将它们写入控制台输出流
    (`cout`)：'
- en: '[PRE77]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: Borrowing a book
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 借阅书籍
- en: 'The `borrowBook` method prompts the user for the `author` and `title` of the
    book:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '`borrowBook` 方法提示用户输入书籍的 `author` 和 `title`：'
- en: '[PRE78]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'If a book with the `author` and `title` does not exist, an error message is
    displayed:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不存在具有 `author` 和 `title` 的书籍，将显示错误信息：
- en: '[PRE79]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Also, if the `book` is already borrowed, an error message is displayed:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果 `book` 已经被借出，将显示错误信息：
- en: '[PRE80]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'Then we prompt the user for the customer''s `name` and `address`:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们提示用户输入客户的 `name` 和 `address`：
- en: '[PRE81]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'If there is no `customer` with the `name` and `address`, an error message is
    displayed:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有具有 `name` 和 `address` 的 `customer`，将显示错误信息：
- en: '[PRE82]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'However, if the book exists and is not already borrowed, and the customer exists,
    we add the book to the loan set of the customer and mark the book as to be borrowed
    by the customer:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果书籍存在且尚未被借出，并且客户存在，我们将书籍添加到客户的借阅集合中，并标记书籍为客户借阅：
- en: '[PRE83]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'Note that we have to put the `Book` and `Customer` objects back into their
    maps after we have altered them. In the next chapter, we will work with a more
    direct approach to pointers:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在修改了 `Book` 和 `Customer` 对象之后，我们必须将它们放回它们的映射中。在下一章中，我们将使用更直接的方式来处理指针：
- en: '[PRE84]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: Reserving a book
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 预订书籍
- en: 'The `reserveBook` method works in the same way as `borrowBook`. It prompts
    the user for the `author` and `title` of the book:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '`reserveBook` 方法的工作方式与 `borrowBook` 相同。它提示用户输入书籍的 `author` 和 `title`：'
- en: '[PRE85]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'Similar to the `borrowBook` case, we check that the book with the `author`
    and `title` exists:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `borrowBook` 的情况类似，我们检查具有 `author` 和 `title` 的书籍是否存在：
- en: '[PRE86]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'However, one difference compared to `borrowBook` is that the book must have
    been borrowed in order to be reserved. If it has not been borrowed, there is no
    point reserving it. In that case, the user should borrow the book instead:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，与 `borrowBook` 相比的一个区别是，书籍必须已被借出才能被预订。如果没有被借出，就没有预订的必要。在这种情况下，用户应该借阅该书籍：
- en: '[PRE87]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'If the book exists and has not been borrowed, we prompt the user for the `name`
    and `address` of the customer:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 如果书籍存在且未被借出，我们提示用户输入客户的 `name` 和 `address`：
- en: '[PRE88]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'If the customer does not exist, an error message is displayed:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 如果客户不存在，将显示错误信息：
- en: '[PRE89]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'Moreover, if a book has already been borrowed by the customer, we display an
    error message:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果客户已经借阅了书籍，我们将显示错误信息：
- en: '[PRE90]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'If the book exists and has been borrowed, but not by the customer, we add the
    customer to the reservation list for the book and the book to the reservation
    set of the customer:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 如果书籍存在且已被借出，但不是由该客户借出，我们将客户添加到书籍的预订列表中，并将书籍添加到客户的预订集中：
- en: '[PRE91]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'Also, in this case, we have to put the `Book` and `Customer` objects back into
    their maps:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在这种情况下，我们必须将 `Book` 和 `Customer` 对象放回它们的映射中：
- en: '[PRE92]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'Finally, we write the position of the customer in the reservation list:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们写入客户在预订列表中的位置：
- en: '[PRE93]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: Returning a Book
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 返回书籍
- en: 'The `returnBook` method prompts the user for the author and title of the book:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '`returnBook` 方法提示用户输入书籍的作者和标题：'
- en: '[PRE94]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'If the book does not exist, an error message is displayed:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 如果书籍不存在，将显示错误信息：
- en: '[PRE95]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'If the book has not been borrowed, an error message is displayed:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 如果书籍未被借出，将显示错误信息：
- en: '[PRE96]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'Unlike the methods described previously, in this case, we do not ask for the
    customer. Instead, we return the book and look up the book in the reservation
    list of each customer:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前描述的方法不同，在这种情况下，我们不询问客户。相反，我们返回书籍，并在每位客户的预订列表中查找该书籍：
- en: '[PRE97]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'If the book has been reserved, we look up the first customer in the reservation
    list, remove them from the reservation list, and let them borrow the book:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 如果书籍已被预订，我们查找预订列表中的第一位客户，将其从预订列表中删除，并允许他们借阅书籍：
- en: '[PRE98]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: Saving the library information to a file
  id: totrans-241
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将图书馆信息保存到文件中
- en: 'When saving the library information, we first open the file:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 当保存图书馆信息时，我们首先打开文件：
- en: '[PRE99]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'If the file was correctly opened, first we write the number of books, and then
    we write the information for each book by calling `write` on the `Book` objects:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 如果文件正确打开，首先我们写入书籍的数量，然后通过在 `Book` 对象上调用 `write` 方法来写入每本书的信息：
- en: '[PRE100]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 'In the same way, we write the number of customers, and then the information
    of each customer, by calling `write`:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们通过调用 `write` 方法写入客户数量，然后写入每位客户的信息：
- en: '[PRE101]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: Loading the library information from a file
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从文件中加载图书馆信息
- en: 'When loading the library information from a file, we use the same method we
    would for `read`. We start by opening the file:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 当从文件中加载图书馆信息时，我们使用与 `read` 相同的方法。我们首先打开文件：
- en: '[PRE102]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 'We read the number of books and then the information of each book:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 我们读取书籍数量，然后通过调用 `read` 方法读取每本书的信息：
- en: '[PRE103]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: 'For each book, we create a new `Book` object, read its information by calling
    `read`, and add it to the book map. We also calculate the new value of the `MaxBookId` static
    field by assigning it the maximum value of itself and the identity number of the
    book:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每一本书，我们创建一个新的 `Book` 对象，通过调用 `read` 方法读取其信息，并将其添加到书籍映射中。我们还通过将自身和书籍的身份证号的最大值赋给静态字段
    `MaxBookId` 来计算新的 `MaxBookId` 值：
- en: '[PRE104]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'In the same way, we read the number of customers and then the information of
    each customer by calling `read`:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们读取客户数量，然后通过调用 `read` 方法读取每位客户的信息：
- en: '[PRE105]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'For each customer, we create a `Customer` object, read its information from
    the file, add it to the customer map, and calculate a new value for the `MaxCustomerId` static
    field:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每一位客户，我们创建一个 `Customer` 对象，从文件中读取其信息，将其添加到客户映射中，并为静态字段 `MaxCustomerId` 计算一个新的值：
- en: '[PRE106]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: The main function
  id: totrans-259
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主函数
- en: 'Finally, we write the `main` function, which executes the library. It is quite
    easy; the only thing to do is to instantiate an object of the `Library` class.
    Then the constructor displays the main menu:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们写入 `main` 函数，该函数执行图书馆。这相当简单；唯一要做的就是实例化 `Library` 类的对象。然后构造函数显示主菜单：
- en: '**Main.cpp**'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '**Main.cpp**'
- en: '[PRE107]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: Summary
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, we built a library management system made up of the classes
    `Book`, `Customer`, and `Library`.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们构建了一个由类 `Book`、`Customer` 和 `Library` 组成的图书馆管理系统。
- en: The `Book` class holds information about a book. Each `Book` object holds a
    unique identity number. It also keeps track of the borrower (if the book is borrowed)
    and a list of reservations. In the same way, the `Customer` class holds information
    about a customer. Similar to the book, each customer holds a unique identity number.
    Each `Customer` object also holds a set of borrowed and reserved books. Finally,
    the `Library` class provides a set of services, such as adding and removing books
    and customers, borrowing, returning, and reserving books, as well as displaying
    lists of books and customers.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '`Book` 类包含关于一本书的信息。每个 `Book` 对象都有一个唯一的身份号码。它还跟踪借阅者（如果这本书被借出）和预订列表。同样，`Customer`
    类包含关于客户的信息。与书类似，每个客户也持有唯一的身份号码。每个 `Customer` 对象还持有借阅和预订的书籍集合。最后，`Library` 类提供了一系列服务，例如添加和删除书籍和客户，借阅、归还和预订书籍，以及显示书籍和客户列表。'
- en: In this chapter, each book and customer have a unique identity number. In the
    next chapter, we will look into to the library system again. However, we will
    omit the identity numbers and work with pointers instead.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，每本书和每个客户都有一个唯一的身份号码。在下一章中，我们将再次探讨图书馆系统。然而，我们将省略身份号码，而是使用指针来工作。
