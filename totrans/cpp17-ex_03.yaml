- en: Building a Library Management System
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we study a system for the management of a library. We continue
    to develop C++ classes, as in the previous chapters. However, in this chapter,
    we develop a more real-world system. The library system of this chapter can be
    used by a real library.
  prefs: []
  type: TYPE_NORMAL
- en: The library is made up of sets of books and customers. The books keep track
    of which customers have borrowed or reserved them. The customers keep track of
    which books they have borrowed and reserved.
  prefs: []
  type: TYPE_NORMAL
- en: The main idea is that the library holds a set of books and a set of customers.
    Each book is marked as borrowed or unborrowed. If it is borrowed, the identity
    number of the customer that borrowed the book is stored. Moreover, a book can
    also be reserved by one or several customers. Therefore, each book also holds
    a list of identity numbers for the customers that have reserved the book. It must
    be a list rather than a set, since the book shall be loaned to the customers in
    the order that they reserved the book.
  prefs: []
  type: TYPE_NORMAL
- en: Each customer holds two sets with the identity numbers of the book they have
    borrowed and reserved. In both cases, we use sets rather than lists since the
    order they have borrowed or reserved the books does not matter.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Working with classes for books and customers that constitute a small database
    with integer numbers as keys.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with standard input and output streams, where we write information about
    the books and customers, and prompt the user for input.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with file handling and streams. The books and customers are written
    and read with standard C++ file streams.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, we work with the generic classes `set` and `list` from the C++ standard
    library.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Book class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have three classes: `Book`, `Customer`, and `Library`:'
  prefs: []
  type: TYPE_NORMAL
- en: The `Book` class keeps track of a book. Each book has an author and a title,
    and a unique identity number.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Customer` class keeps track of a customer. Each customer has a name and
    an address, and a unique identity number.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Library` class keeps track of the library operations, such as adding and
    removing books and customers, borrowing, returning, and reserving books, as well
    as listing books and customers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `main` function simply creates an object of the `Library` class.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Moreover, each book holds information on whether it is borrowed at the moment.
    If it is borrowed, the identity number of the customer who has borrowed the book
    is also stored. Each book also holds a list of reservations. In the same way,
    each customer holds sets of books currently borrowed and reserved.
  prefs: []
  type: TYPE_NORMAL
- en: The `Book` class holds two constructors. The first constructor is a default
    constructor and is used when reading books from a file. The second constructor
    is used when adding a new book to the library. It takes the name of the author
    and the title of the book as parameters.
  prefs: []
  type: TYPE_NORMAL
- en: '**Book.h**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The `author` and `title` methods simply return the author and title of the
    book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The books of the library can be read from and written to a file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'A book can be borrowed, reserved, or returned. A reservation can also be removed.
    Note that when a book is borrowed or reserved, we need to provide the identity
    number of the customer. However, that is not necessary when returning a book,
    since the `Book` class keeps track of the customer that has currently borrowed
    the book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'When the book is borrowed, the customer''s identity number is stored, which
    is returned by `bookId`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The `borrowed` method returns true if the book is borrowed at the moment. In
    that case, `customerId` returns the identity number of the customer who has borrowed
    the book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'A book can be reserved by a list of customers, and `reservationList` returns
    that list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The `MaxBookId` field is static, which means that it is common to all objects
    of the class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The output stream operator writes the information of the book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The `m_borrowed` field is true when the book is borrowed. The identity of the
    book and potential borrower are stored in `m_bookId` and `m_customerId`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The name of the author and the title of the book are stored in `m_author` and
    `m_title`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'More than one customer can reserve a book. When they do, their identities are
    stored in `m_reservationList`. It is a list rather than a set because the reservations
    are stored in order. When a book is returned, the next customer, in reservation
    order, borrows the book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In this chapter, we use the generic `set`, `map`, and `list` classes from the
    C++ standard library. Their specifications are stored in the `Set`, `Map`, and
    `List` header files. The `set` and `list` classes hold a set and a list similar
    to our set and list classes in the previous chapter. A map is a structure where
    each value is identified by a unique key in order to provide fast access.
  prefs: []
  type: TYPE_NORMAL
- en: '**Book.cpp**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Since `MaxBookId` is static, we initialize it with the double colon (`::`)
    notation. Every static field needs to be initialized outside the class definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The default constructor does nothing. It is used when reading from a file.
    Nevertheless, we still must have a default constructor to create objects of the
    `Book` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'When a new book is created, it is assigned a unique identity number. The identity
    number is stored in `MaxBookId`, which is increased for each new `Book` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Writing the book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A book is written to a stream in a similar manner. However, instead of `read`
    we use `write`. They work in a similar manner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'When reading a string we use `getline` instead of the stream operator, since
    the stream operator reads one word only, while `getline` reads several words.
    When writing to a stream, however, we can use the stream operator. It does not
    matter whether the name and title are made up of one or several words:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Similar to the reading case here, we first write the number of reservations
    in the list. Then we write the reservation identities themselves:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Reading the book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When reading any kind of value (except strings) from a file, we use the `read`
    method, which reads a fixed number of bytes. The `sizeof` operator gives us the
    size, in bytes, of the `m_bookId` field. The `sizeof` operator can also be used
    to find the size of a type. For instance, `sizeof (int)` gives us the size in
    bytes of a value of the type `int`. The type must be enclosed in parentheses:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'When reading string values from a file, we use the C++ standard function `getline`
    to read the name of the author and the title of the book. It would not work to
    use the input stream operator if the name is made up of more than one word. If
    the author or title is made up of more than one word, only the first word would
    be read. The remaining words would not be read:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that we use the `read` method to read the value of the `m_borrowed` field,
    too, even though it holds the `bool` type rather than `int`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'When reading the reservation list, we first read the number of reservations
    in the list. Then we read the reservation identity numbers themselves:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Borrowing and reserving the book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When the book is borrowed, `m_borrowed` becomes `true` and `m_customerId` is
    set to the identity number of the customer that borrowed the book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'It is a little bit different when the book is reserved. While a book can be
    borrowed by one customer only, it can be reserved by more than one customer. The
    identity number of the customer is added to `m_reservationList`. The size of the
    list is returned for the caller to know their position in the reservation list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'When the book is returned, we just set `m_borrowed` to false. We do not need
    to set `m_customerId` to anything specific. It is not relevant as long as the
    book is not borrowed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'A customer can remove themselves from the reservation list. In that case, we
    call `remove` on `m_reservationList`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Displaying the book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The output stream operator writes the title and author of the book. If the
    book is borrowed, the customer''s name is written, and if the reservation list
    is full, the reservation customers'' names are written:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'We use the double-colon notation (`::`) when accessing a static field, such
    as `s_customerMap` in `Library`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: The Customer class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Customer` class keeps track of a customer. It holds sets of the books the
    customer currently has borrowed and reserved.
  prefs: []
  type: TYPE_NORMAL
- en: '**Customer.h**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The `hasBorrowed` method returns true if the customer has at least one book
    borrowed at the moment. In the `Library` class in the next section, it is not
    possible to remove a customer who currently has borrowed books:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'In the same way, as in the `Book` class, which was used previously, we use
    the static field `MaxCustomerId` to count the identity number of the customers.
    We also use the output stream operator to write information about the customer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Each customer has a name, address, and unique identity number. The sets `m_loanSet`
    and `m_reservationSet` hold the identity numbers of the books currently borrowed
    and reserved by the customer. Note that we use sets instead of lists, since the
    order of the books borrowed and reserved does not matter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '**Customer.cpp**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Since `MaxCustomerId` is a static field, it needs to be defined outside the
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'The default constructor is used when loading objects from a file only. Therefore,
    there is no need to initialize the fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The second constructor is used when creating new book objects. We use the `MaxCustomerId`
    field to initialize the identity number of the customer; we also initialize their
    `name` and `address`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Reading the customer from a file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `read` method reads the information on a customer from the file stream:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'In the same way, as in the `read` method of the `Book` class, we have to use
    the `getline` function instead of the input stream operator, since the input stream
    operator would read one word only:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Writing the customer to a file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `write` method writes information on the customer to the stream in the
    same way as in the `Book` class previously:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'When writing a set, we first write the size of the set, and then the individual
    values of the set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Borrowing and reserving a book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When a customer borrows a book, it is inserted into the loan set of the customer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'In the same way, when a customer reserves a book, it is inserted into the reservation
    set of the customer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'When a customer returns or unreserves a book, it is removed from the loan set
    or reservation set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Displaying the customer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The output stream operator writes the name and address of the customer. If
    the customer has borrowed or reserved books, they are written too:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: The Library class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Finally, the `Library` class handles the library itself. It performs a set of
    tasks regarding borrowing and returning books.
  prefs: []
  type: TYPE_NORMAL
- en: '**Library.h**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'The `lookupBook` method looks up a book by the author and title. It returns
    true if the book is found. If it is found, its information (an object of the `Book`
    class) is copied into the object pointed at by `bookPtr`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'In the same way, `lookupCustomer` looks up a customer by the name and address.
    If the customer is found, true is returned, and the information is copied into
    the object pointed at by `customerPtr`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: The application of this chapter revolves around the following methods. They
    perform the tasks of the library system. Each of the methods will prompt the user
    for input and then perform a task, such as borrowing or returning a book.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following methods perform one task each, which are looking up the information
    about a book or a customer, adding or deleting a book, listing the books, adding
    and deleting books from the library, and borrowing, reserving, and returning books:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'The `load` and `save` methods are called at the beginning and the end of the
    execution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'There are two maps holding the books and the customers of the library. As mentioned
    previously, a map is a structure where each value is identified by a unique key
    in order to provide fast access. The unique identity numbers of the books and
    customers are the keys:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '**Library.cpp**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Between executions, the library information is stored in the `Library.bin` file
    on the hard drive. Note that we use two backslashes to represent one backslash
    in the `string`. The first backslash indicates that the character is a special
    character, and the second backslash states that it is a backslash:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'The constructor ­loads the library, presents a menu, and iterates until the
    user quits. Before the execution is finished, the library is saved:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Before the menu is presented, the library information (books, customers, loans,
    and reservations) is loaded from the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'The while statement continues as long as `quit` is true. It remains false until
    the user chooses the Quit option from the menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'The user inputs an integer value from the console input stream (`cin`), which
    is stored in `choice`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'We use a `switch` statement to perform the requested task:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Before the program is finished, the library information is saved:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Looking up books and customers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `lookupBook` method iterates through the book map. It returns true if a
    book with the author and title exists. If the book exists, its information is
    copied to the object pointed at by the `bookPtr` parameter and true is returned,
    as long as the pointer is not null. If the book does not exist, false is returned,
    and no information is copied into the object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that `bookPtr` may be `nullptr`. In that case, only true is returned,
    and no information is written to the object pointed at by `bookPtr`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'In the same way, `lookupCustomer` iterates through the customer map and returns
    true, as well as copies the customer information to a `Customer` object if a customer
    with the name exists:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, in this case, `customerPtr` may be `nullptr`. In that case, only true
    is returned. When adding a new customer, we would like to know if there already
    is a customer with the same name and address:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Adding a book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `addBook` method prompts the user for the name and title of the new book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'If a book with the `author` and `title` already exists, an error message is
    displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'If the book does not already exist, we create a new `Book` object that we add
    to the book map:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Deleting a book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `deleteBook` method prompts the user for the author and title of the book,
    and deletes it if it exists:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'If the book does not exist, an error message is displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: When a book is being deleted, we iterate through all customers and, for each
    customer, return, and unreserve the book. We do that for every book just in case
    the book has been borrowed or reserved by customers. In the next chapter, we will
    work with pointers, which allow us to return and unreserve books in a more effective
    manner.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that when we iterate through a map and obtain each `Customer` object,
    we need to put it back in the map after we have modified the values of its fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, when we have made sure the book exists, and when we have returned
    and unreserved it, we remove it from the book map:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Listing the books
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `listBook` method is quite simple. First, we check if the book map is empty.
    If it is empty, we write `"No books."` If the book map is not empty, we iterate
    through it, and for each book, we write its information to the console output
    stream (`cout`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Adding a customer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `addCustomer` method prompts the user for the `name` and `address` of the
    new customer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'If a customer with the same `name` and `address` already exists, an error message
    is displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we create a new `Customer` object that we add to the customer map:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: Deleting a customer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `deleteCustomer` method deletes the customer if they exist:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'If the customer has borrowed at least one book, it must be returned before
    the customer can be removed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'However, if the customer has reserved books, we just unreserve them before
    removing the customer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: Listing the customers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `listCustomer` method works in a way similar to `listBooks`. If there are
    no customers, we write `"No Customers."` If there are customers, we write them
    to the console output stream (`cout`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: Borrowing a book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `borrowBook` method prompts the user for the `author` and `title` of the
    book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'If a book with the `author` and `title` does not exist, an error message is
    displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, if the `book` is already borrowed, an error message is displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we prompt the user for the customer''s `name` and `address`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'If there is no `customer` with the `name` and `address`, an error message is
    displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'However, if the book exists and is not already borrowed, and the customer exists,
    we add the book to the loan set of the customer and mark the book as to be borrowed
    by the customer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that we have to put the `Book` and `Customer` objects back into their
    maps after we have altered them. In the next chapter, we will work with a more
    direct approach to pointers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: Reserving a book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `reserveBook` method works in the same way as `borrowBook`. It prompts
    the user for the `author` and `title` of the book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'Similar to the `borrowBook` case, we check that the book with the `author`
    and `title` exists:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'However, one difference compared to `borrowBook` is that the book must have
    been borrowed in order to be reserved. If it has not been borrowed, there is no
    point reserving it. In that case, the user should borrow the book instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'If the book exists and has not been borrowed, we prompt the user for the `name`
    and `address` of the customer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'If the customer does not exist, an error message is displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'Moreover, if a book has already been borrowed by the customer, we display an
    error message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: 'If the book exists and has been borrowed, but not by the customer, we add the
    customer to the reservation list for the book and the book to the reservation
    set of the customer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, in this case, we have to put the `Book` and `Customer` objects back into
    their maps:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we write the position of the customer in the reservation list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: Returning a Book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `returnBook` method prompts the user for the author and title of the book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: 'If the book does not exist, an error message is displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: 'If the book has not been borrowed, an error message is displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: 'Unlike the methods described previously, in this case, we do not ask for the
    customer. Instead, we return the book and look up the book in the reservation
    list of each customer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: 'If the book has been reserved, we look up the first customer in the reservation
    list, remove them from the reservation list, and let them borrow the book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: Saving the library information to a file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When saving the library information, we first open the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: 'If the file was correctly opened, first we write the number of books, and then
    we write the information for each book by calling `write` on the `Book` objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: 'In the same way, we write the number of customers, and then the information
    of each customer, by calling `write`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: Loading the library information from a file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When loading the library information from a file, we use the same method we
    would for `read`. We start by opening the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: 'We read the number of books and then the information of each book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: 'For each book, we create a new `Book` object, read its information by calling
    `read`, and add it to the book map. We also calculate the new value of the `MaxBookId` static
    field by assigning it the maximum value of itself and the identity number of the
    book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: 'In the same way, we read the number of customers and then the information of
    each customer by calling `read`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: 'For each customer, we create a `Customer` object, read its information from
    the file, add it to the customer map, and calculate a new value for the `MaxCustomerId` static
    field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: The main function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Finally, we write the `main` function, which executes the library. It is quite
    easy; the only thing to do is to instantiate an object of the `Library` class.
    Then the constructor displays the main menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Main.cpp**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we built a library management system made up of the classes
    `Book`, `Customer`, and `Library`.
  prefs: []
  type: TYPE_NORMAL
- en: The `Book` class holds information about a book. Each `Book` object holds a
    unique identity number. It also keeps track of the borrower (if the book is borrowed)
    and a list of reservations. In the same way, the `Customer` class holds information
    about a customer. Similar to the book, each customer holds a unique identity number.
    Each `Customer` object also holds a set of borrowed and reserved books. Finally,
    the `Library` class provides a set of services, such as adding and removing books
    and customers, borrowing, returning, and reserving books, as well as displaying
    lists of books and customers.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, each book and customer have a unique identity number. In the
    next chapter, we will look into to the library system again. However, we will
    omit the identity numbers and work with pointers instead.
  prefs: []
  type: TYPE_NORMAL
