["```cpp\n#include <QMainWindow>\n#include <QMoveEvent>\n#include <QMainWindow>\nclass MainWindow: public QMainWindow {\n   Q_OBJECT\n   public:\n       MainWindow(QWidget *parent = 0);\n   protected:\n       void moveEvent(QMoveEvent *event);\n};\n```", "```cpp\n#include \"mainwindow.h\"\nMainWindow::MainWindow(QWidget *parent) : QMainWindow (parent){\n   setWindowTitle(\"Locate Window with timer\");\n}\nvoid MainWindow::moveEvent(QMoveEvent *event) {\n   int xCord = event->pos().x();\n   int yCord = event->pos().y();\n   QString text = QString::number(xCord) + \", \" + QString::number(yCord);\n   statusBar()->showMessage(text);\n}\n```", "```cpp\n#include <QApplication>\n#include \"mainwindow.h\"\nint main(int argc, char *argv[]){\n   QApplication app(argc, argv);\n   MainWindow window;\n   window.resize(300, 300);\n   window.show();\n   return app.exec();\n}\n```", "```cpp\n#ifndef MAINWINDOW_H\n#define MAINWINDOW_H\n#include <QMainWindow>\n#include <QMoveEvent>\n#include <QMainWindow>\n#include <QStatusBar>\n#include <QLabel>\nclass MainWindow: public QMainWindow {\n   Q_OBJECT\n   public:\n       MainWindow(QWidget *parent = 0);\n   protected:\n       void moveEvent(QMoveEvent *event);\n       void timerEvent(QTimerEvent *event);\n   private:\n       QLabel *currentDateTimeLabel;\n};\n#endif\n```", "```cpp\n#include <QDateTime>\n#include \"mainwindow.h\"\nMainWindow::MainWindow(QWidget *parent) : QMainWindow (parent){\n setWindowTitle(\"Locate Window\");\n currentDateTimeLabel = new QLabel(\"Current Date and Time\");\n currentDateTimeLabel->setAlignment(Qt::AlignCenter);\n setCentralWidget(currentDateTimeLabel);\n startTimer(1000);\n}\n```", "```cpp\nvoid MainWindow::timerEvent(QTimerEvent *event){\n   Q_UNUSED(event);\n   QString dateTime = QDateTime::currentDateTime().toString();\n   currentDateTimeLabel->setText(dateTime);\n}\n```", "```cpp\n#include <QApplication>\n#include \"mainwindow.h\"\nint main(int argc, char *argv[]){\n   QApplication app(argc, argv);\n   MainWindow window;\n   window.resize(300, 300);\n   window.show();\n   return app.exec();\n}\n```", "```cpp\n#ifndef TEXTEDIT_H\n#define TEXTEDIT_H\n#include <QMoveEvent>\n#include <QMouseEvent>\n#include <QDebug>\n#include <QDateTime>\n#include <QTextEdit>\n#include <QMimeData>\n#include <QMimeDatabase>\n#include <QMimeType>\nclass DragTextEdit: public QTextEdit\n{\n   Q_OBJECT\n   public:\n       explicit DragTextEdit(QWidget *parent = nullptr);\n   protected:\n       void dragEnterEvent(QDragEnterEvent *event) override;\n       void dragMoveEvent(QDragMoveEvent *event) override;\n       void dragLeaveEvent(QDragLeaveEvent *event) override;\n       void dropEvent(QDropEvent *event) override;\n};\n#endif\n```", "```cpp\nprotected:\n   void dragEnterEvent(QDragEnterEvent *event) override;\n   void dragMoveEvent(QDragMoveEvent *event) override;\n   void dragLeaveEvent(QDragLeaveEvent *event) override;\n   void dropEvent(QDropEvent *event) override\n```", "```cpp\n#include \"dragTextEdit.h\"\nDragTextEdit::DragTextEdit(QWidget *parent) : QTextEdit(parent)\n{\n   setAcceptDrops(true);\n}\n```", "```cpp\nvoid DragTextEdit::dragMoveEvent(QDragMoveEvent *event)\n{\n   event->acceptProposedAction();\n}\nvoid DragTextEdit::dragLeaveEvent(QDragLeaveEvent *event)\n{\n   event->accept();\n}\nvoid DragTextEdit::dragEnterEvent(QDragEnterEvent *event)\n{   event->acceptProposedAction();\n}\n```", "```cpp\nvoid DragTextEdit::dropEvent(QDropEvent *event)\n{\n   const QMimeData *mimeData = event->mimeData();\n   if (mimeData->hasText()) {\n       QTextStream out(stdout);\n       QFile file(mimeData->urls().at(0).path());\n       file.open(QFile::ReadOnly | QFile::Text);\n       QString contents = file.readAll();\n       setText(contents);\n       event->acceptProposedAction();\n   }\n   else{\n       event->ignore();\n   }\n}\n```", "```cpp\n#ifndef MAINWINDOW_H\n#define MAINWINDOW_H\n#include <QMainWindow>\n#include <QLabel>\n#include <QMoveEvent>\n#include <QMouseEvent>\n#include <QVBoxLayout>\n#include <QDebug>\n#include <QDateTime>\n#include <QMainWindow>\n#include <QStatusBar>\n#include \"dragTextEdit.h\"\nclass MainWindow: public QMainWindow\n{\n   Q_OBJECT\n   public:\n       MainWindow(QWidget *parent = 0);\n   private slots:\n       void updateStatusBar();\nprivate:\n       DragTextEdit *slateDragTextEdit;\n};\n#endif\n```", "```cpp\n#include \"mainwindow.h\"\nMainWindow::MainWindow(QWidget *parent) : QMainWindow (parent)\n{\n   QWidget *mainWidget = new QWidget;\n   QVBoxLayout *layout = new QVBoxLayout;\n   slateDragTextEdit = new DragTextEdit();\n   layout->addWidget(slateDragTextEdit);\n   mainWidget->setLayout(layout);\n   setCentralWidget(mainWidget);\n   statusBar()->showMessage(QString::number(0));\n   connect(slateDragTextEdit, SIGNAL(textChanged()), this, SLOT(updateStatusBar()));\n}\nvoid MainWindow::updateStatusBar()\n{   int charCount = slateDragTextEdit->toPlainText().count();\n  statusBar()->showMessage(QString::number(charCount));\n}\n```", "```cpp\nslateDragTextEdit = new DragTextEdit();\nlayout->addWidget(slateDragTextEdit);\n```", "```cpp\nstatusBar()->showMessage(QString::number(0));\n```", "```cpp\n#include <QApplication>\n#include <Qt>\n#include \"mainwindow.h\"\nint main(int argc, char *argv[]){\n   QApplication app(argc, argv);\n   MainWindow window;\n   window.setWindowTitle(\"Drag Text Edit\");\n   window.show();\n   return app.exec();\n}\n```", "```cpp\n% qmake -project\n```", "```cpp\n# Input\nHEADERS += dragTextEdit.h mainwindow.h\nSOURCES += dragTextEdit.cpp main.cpp mainwindow.cpp\n```", "```cpp\n% qmake\n% make\n% ./program_executable\n```", "```cpp\n#ifndef MAINWINDOW_H\n#define MAINWINDOW_H\n#include <QMainWindow>\n#include <QMoveEvent>\n#include <QMouseEvent>\n#include <QVBoxLayout>\n#include <QDebug>\n#include <QDateTime>\n#include <QStatusBar>\n#include <QLabel>\nclass MainWindow: public QMainWindow\n{\n   Q_OBJECT\n   public slots:\n       void updateMousePosition(QPoint pos);\n   signals:\n       void mouseMoved(QPoint pos);\n   public:\n       MainWindow(QWidget *parent = 0);\n   protected:\n       void mousePressEvent(QMouseEvent *event);\n   private:\n       QLabel *mousePosition;\n       QWidget *windowCentralWidget;\n};\n#endif\n```", "```cpp\nsignals:\n   void mouseMoved(QPoint pos);\n```", "```cpp\n#include \"mainwindow.h\"\nvoid MainWindow::mousePressEvent(QMouseEvent *event){\n   emit mouseMoved(event->pos());\n}\n```", "```cpp\nvoid MainWindow::updateMousePosition(QPoint point){\n   int xCord = point.x();\n   int yCord = point.y();\n   QString text = QString::number(xCord) + \", \" + QString::number(yCord);\n   mousePosition->setText(text);\n   statusBar()->showMessage(text);\n}\n```", "```cpp\nMainWindow::MainWindow(QWidget *parent) : QMainWindow (parent){\n   windowCentralWidget = new QWidget();\n   mousePosition = new QLabel(\"Mouse Position\");\n   QVBoxLayout *innerLayout = new QVBoxLayout();\n   innerLayout->addWidget(mousePosition);\n   windowCentralWidget->setLayout(innerLayout);\n   setCentralWidget(windowCentralWidget);\n   statusBar()->showMessage(\"Ready\");\n   connect(this, SIGNAL(mouseMoved(QPoint)), this, SLOT(updateMousePosition(QPoint)));\n}\n```", "```cpp\n#include <QApplication>\n#include <Qt>\n#include \"mainwindow.h\"\nint main(int argc, char *argv[]){\n   QApplication app(argc, argv);\n   MainWindow window;\n   window.resize(300, 300);\n   window.setWindowTitle(\"Hover Events\");\n   window.show();\n   return app.exec();\n}\n```"]