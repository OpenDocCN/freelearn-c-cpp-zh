["```cpp\nm_network_manager = new QNetworkAccessManager(this); \n```", "```cpp\nconnect(m_network_manager, &QNetworkAccessManager::finished,\n        this, &FileDownload::downloadFinished);\n```", "```cpp\nQUrl url(\"http://localhost/version.txt\");\nm_network_manager->get(QNetworkRequest(url));\n```", "```cpp\nQNetworkRequest request;\nrequest.setUrl(QUrl(\"http://localhost/version.txt\"));\nrequest.setHeader(QNetworkRequest::UserAgentHeader, \"MyGame\");\nm_network_manager->get(request); \n```", "```cpp\nrequest.setRawHeader(\"User-Agent\", \"MyGame\"); \n```", "```cpp\nvoid FileDownload::downloadFinished(QNetworkReply *reply) {\n    const QByteArray content = reply->readAll();\n    m_edit->setPlainText(QString::fromUtf8(content));\n    reply->deleteLater();\n} \n```", "```cpp\ntemplate <class T>\nclass Singleton\n{\npublic:\n    static T& instance()\n    {\n        static T static_instance;\n        return static_instance;\n    }\nprivate:\n    Singleton();\n    ~Singleton();\n    Singleton(const Singleton &);\n    Singleton& operator=(const Singleton &);\n};\n```", "```cpp\nMyClass &singleton = Singleton<MyClass>::instance();   \n```", "```cpp\nQQmlApplicationEngine engine;\nQNetworkAccessManager *network_manager = engine.networkAccessManager();   \n```", "```cpp\nif (reply->error() != QNetworkReply::NoError) {\n    // error occurred\n} \n```", "```cpp\nif (reply->error()) {\n    const QString error = reply->errorString();\n    m_edit->setPlainText(error);\n    return;\n} \n```", "```cpp\nint statusCode =\n     reply->attribute(QNetworkRequest::HttpStatusCodeAttribute).toInt();\n```", "```cpp\nQNetworkRequest request(url);\nrequest.setRawHeader(\"Range\", \"bytes=300-500\");\nQNetworkReply *reply = m_network_manager->get(request);   \n```", "```cpp\nm_network_manager->get(QNetworkRequest(\n    QUrl(\"ftp://localhost/version.txt\"))); \n```", "```cpp\nQNetworkReply *reply = qobject_cast<QNetworkReply*>(sender());\nif (!reply) {\n    return;\n}\n```", "```cpp\nfor(const QString& url: urls) {\n    QNetworkRequest request(url);\n    QNetworkReply *reply = m_network_manager->get(request);\n    connect(reply, SIGNAL(finished()),\n            m_imageFinishedMapper, SLOT(map()));\n    m_imageFinishedMapper->setMapping(reply, reply);\n}\n```", "```cpp\nconnect(m_imageFinishedMapper, SIGNAL(mapped(QObject*)),\n        this, SLOT(imageFinished(QObject*)));\n```", "```cpp\nvoid Object::imageFinished(QObject *replyObject)\n{\n    QNetworkReply *reply = qobject_cast<QNetworkReply *>(replyObject);\n    //...\n}\n```", "```cpp\nQNetworkReply *reply = m_network_manager->get(request);\nconnect(reply, &QIODevice::readyRead,\n        this, &SomeClass::readContent);\nm_file.open(QIODevice::WriteOnly); \n```", "```cpp\nQNetworkReply *reply = /* ... */;\nconst QByteArray byteArray = reply->readAll();\nm_file.write(byteArray);\nm_file.flush(); \n```", "```cpp\nint length = reply->header(QNetworkRequest::ContentLengthHeader).toInt(); \n```", "```cpp\nvoid SomeClass::downloadProgress(qint64 bytesReceived, qint64 bytesTotal) {\n    qreal progress = (bytesTotal < 1) ? 1.0\n                   : static_cast<qreal>(bytesReceived) / bytesTotal;\n    progressBar->setValue(qRound(progress * progressBar->maximum()));\n} \n```", "```cpp\nprogressBar->setRange(0, 2048); \n```", "```cpp\nqreal remaining = m_timer.elapsed() *\n                  (1.0 - progress) / progress;\nint remainingSeconds = qRound(remaining / 1000);\n```", "```cpp\nvoid MainWindow::sendRequest()\n{\n    if (m_reply != nullptr && m_reply->isRunning()) {\n        m_reply->abort();\n    }\n    ui->result->clear();\n    //...\n}\n```", "```cpp\n// don't do this!\nQString url = baseUrl + \"?origin=\" + ui->from->text() + \"&...\"; \n```", "```cpp\nQUrlQuery query;\nquery.addQueryItem(QStringLiteral(\"sensor\"),   QStringLiteral(\"false\"));\nquery.addQueryItem(QStringLiteral(\"language\"), QStringLiteral(\"en\"));\nquery.addQueryItem(QStringLiteral(\"units\"),    QStringLiteral(\"metric\"));\nquery.addQueryItem(QStringLiteral(\"mode\"),     ui->vehicle->currentText());\nquery.addQueryItem(QStringLiteral(\"origins\"),  ui->from->text());\nquery.addQueryItem(QStringLiteral(\"destinations\"), ui->to->text());\n```", "```cpp\nQUrl url(QStringLiteral(\n     \"https://maps.googleapis.com/maps/api/distancematrix/json\"));\nurl.setQuery(query);\nm_reply = m_network_manager->get(QNetworkRequest(url));\n```", "```cpp\nvoid MainWindow::finished(QNetworkReply *reply)\n{\n    if (m_reply != reply) {\n        reply->deleteLater();\n        return;\n    }\n    //...\n}\n```", "```cpp\nm_reply = nullptr;\nif (reply->error() != QNetworkReply::NoError) {\n    ui->result->setPlainText(reply->errorString());\n    reply->deleteLater();\n    return;\n}\n```", "```cpp\nconst QByteArray content = reply->readAll();\nconst QJsonDocument doc = QJsonDocument::fromJson(content);\nif (!doc.isObject()) {\n    ui->result->setPlainText(tr(\"Error while reading the JSON file.\"));\n    reply->deleteLater();\n    return;\n}\n```", "```cpp\nconst QJsonObject obj = doc.object();\nconst QJsonArray origins = obj.value(\"origin_addresses\").toArray();\nconst QJsonArray destinations = obj.value(\"destination_addresses\").toArray();\n```", "```cpp\n{\n    \"destination_addresses\" : [ \"Birmingham, West Midlands, UK\" ],\n    \"origin_addresses\" : [ \"Warsaw, Poland\", \"Erlangen, Germany\" ],\n    \"rows\" : [ ... ],\n    \"status\" : \"OK\"\n} \n```", "```cpp\n\"rows\" : [\n    {\n        \"elements\" : [{...}, {...}]\n    },\n    {\n        \"elements\" : [{...}, {...}]\n    }\n  ], \n```", "```cpp\n{\n    \"distance\" : {\n        \"text\" : \"1,835 km\",\n        \"value\" : 1834751\n    },\n    \"duration\" : {\n        \"text\" : \"16 hours 37 mins\",\n        \"value\" : 59848\n    },\n    \"status\" : \"OK\"\n} \n```", "```cpp\nQString output;\nfor (int i = 0; i < origins.count(); ++i) {\n    const QString origin = origins.at(i).toString();\n    const QJsonArray row = obj.value(\"rows\").toArray().at(i).toObject()\n            .value(\"elements\").toArray();\n    for (int j = 0; j < destinations.count(); ++j) {\n```", "```cpp\noutput += tr(\"From: %1\\n\").arg(origin);\noutput += tr(\"To: %1\\n\").arg(destinations.at(j).toString());\n```", "```cpp\nFrom: Warsaw, Poland\nTo: Birmingham, West Midlands, UK\n```", "```cpp\nconst QJsonObject data = row.at(j).toObject();\nconst QString status = data.value(\"status\").toString();\n```", "```cpp\nif (status == \"OK\") {\n    output += tr(\"Distance: %1\\n\").arg(\n        data.value(\"distance\").toObject().value(\"text\").toString());\n    output += tr(\"Duration: %1\\n\").arg(\n        data.value(\"duration\").toObject().value(\"text\").toString());\n} else { /*...*/ }\n```", "```cpp\n} else if (status == \"NOT_FOUND\") {\n    output += tr(\"Origin and/or destination of this \"\n                 \"pairing could not be geocoded.\\n\");\n} else if (status == \"ZERO_RESULTS\") {\n    output += tr(\"No route could be found.\\n\");\n} else {\n    output += tr(\"Unknown error.\\n\");\n}\noutput += QStringLiteral(\"=\").repeated(35) + QStringLiteral(\"\\n\");\n```", "```cpp\nui->result->setPlainText(output);\nreply->deleteLater();\n```", "```cpp\nQNetworkConfigurationManager manager;\nQList<QNetworkConfiguration> cfgs = manager.allConfigurations(); \n```", "```cpp\nQNetworkConfigurationManager manager;\nQNetworkConfiguration cfg = manager.defaultConfiguration();\nQNetworkSession *session = new QNetworkSession(cfg, this);\nsession->open(); \n```", "```cpp\nif (!m_server->listen(QHostAddress::LocalHost, 52693)) {\n    ui->log->setPlainText(tr(\"Failure while starting server: %1\")\n                          .arg(m_server->errorString()));\n    return;\n}\nconnect(m_server, &QTcpServer::newConnection,\n        this, &TcpServer::newConnection);\n```", "```cpp\nm_server->listen(QHostAddress(\"127.0.0.1\"), 0); \n```", "```cpp\nui->address->setText(m_server->serverAddress().toString());\nui->port->setText(QString::number(m_server->serverPort())); \n```", "```cpp\nvoid TcpServer::newConnection()\n{\n    while (m_server->hasPendingConnections()) {\n        QTcpSocket *socket = m_server->nextPendingConnection();\n        m_clients << socket;\n        ui->disconnectClients->setEnabled(true);\n        connect(socket, &QTcpSocket::disconnected,\n                this, &TcpServer::removeConnection);\n        connect(socket, &QTcpSocket::readyRead,\n                this, &TcpServer::readyRead);\n        ui->log->appendPlainText(tr(\"* New connection: %1, port %2\\n\")\n                                 .arg(socket->peerAddress().toString())\n                                 .arg(socket->peerPort()));\n    }\n}\n```", "```cpp\nvoid TcpServer::readyRead()\n{\n    QTcpSocket *socket = qobject_cast<QTcpSocket*>(sender());\n    if (!socket) {\n        return;\n    }\n    //...\n}\n```", "```cpp\nQByteArray &buffer = m_receivedData[socket];\nbuffer.append(socket->readAll());\n```", "```cpp\nwhile(true) {\n    int endIndex = buffer.indexOf(23);\n    if (endIndex < 0) {\n        break;\n    }\n    QString message = QString::fromUtf8(buffer.left(endIndex));\n    buffer.remove(0, endIndex + 1);\n    newMessage(socket, message);\n}\n```", "```cpp\nvoid TcpServer::newMessage(QTcpSocket *sender, const QString &message)\n{\n    ui->log->appendPlainText(tr(\"Sending message: %1\\n\").arg(message));\n    QByteArray messageArray = message.toUtf8();\n    messageArray.append(23);\n    for(QTcpSocket *socket: m_clients) {\n        if (socket->state() == QAbstractSocket::ConnectedState) {\n            socket->write(messageArray);\n        }\n    }\n    Q_UNUSED(sender)\n}\n```", "```cpp\nvoid TcpServer::removeConnection()\n{\n    QTcpSocket *socket = qobject_cast<QTcpSocket*>(sender());\n    if (!socket) {\n        return;\n    }\n    ui->log->appendPlainText(tr(\"* Connection removed: %1, port %2\\n\")\n                             .arg(socket->peerAddress().toString())\n                             .arg(socket->peerPort()));\n    m_clients.removeOne(socket);\n    m_receivedData.remove(socket);\n    socket->deleteLater();\n    ui->disconnectClients->setEnabled(!m_clients.isEmpty());\n}\n```", "```cpp\nvoid TcpClient::on_connect_clicked()\n{\n    //...\n    if (m_socket->state() != QAbstractSocket::ConnectedState) {\n        ui->chat->appendPlainText(tr(\"== Connecting...\"));\n        m_socket->connectToHost(ui->address->text(), ui->port->value());\n        //...\n    }\n}\n```", "```cpp\nm_receivedData.append(m_socket->readAll());\nwhile(true) {\n    int endIndex = m_receivedData.indexOf(23);\n    if (endIndex < 0) {\n        break;\n    }\n    QString message = QString::fromUtf8(m_receivedData.left(endIndex));\n    m_receivedData.remove(0, endIndex + 1);\n    newMessage(message);\n}\n```", "```cpp\nvoid TcpClient::newMessage(const QString &message)\n{\n    ui->chat->appendPlainText(message);\n}\n```", "```cpp\nQString message = QStringLiteral(\"%1: %2\")\n                  .arg(m_user).arg(ui->text->text());\n```", "```cpp\nQByteArray messageArray = message.toUtf8();\nmessageArray.append(23);\nm_socket->write(messageArray);\n```", "```cpp\nsocketA->writeDatagram(QByteArray(\"Hello!\"),\n                       QHostAddress(\"127.0.0.1\"), 52001);\n```", "```cpp\nwhile (socketB->hasPendingDatagrams()) {\n    QNetworkDatagram datagram = socketB->receiveDatagram();\n    qDebug() << \"received data:\" << datagram.data();\n    qDebug() << \"from:\" << datagram.senderAddress()\n             << datagram.senderPort();\n}\n```"]