- en: Selecting the Right MCU
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择正确的MCU
- en: This chapter is a crash course on **microcontroller unit** (**MCU**) selection,
    targeted at engineers who don't have a deep hardware background. It doesn't try
    to be an exhaustive list of absolutely everything you need to know and consider
    when selecting hardware for your new project. It does provide an introduction
    to many of the contributing factors for differentiating between and selecting
    MCU devices. By the end, you'll be aware of enough key considerations to efficiently
    research MCUs and discuss potential candidates with the hardware engineers on
    the team. By increasing hardware/firmware collaboration and selecting the right
    MCU for the project the first time around, you'll avoid both hardware redesigns
    and schedule delays.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是关于**微控制器单元**（**MCU**）选择的快速课程，针对没有深厚硬件背景的工程师。它并不试图成为你选择硬件时需要了解和考虑的绝对一切内容的详尽列表。它确实提供了许多区分和选择MCU设备的影响因素的介绍。到结束时，你将了解足够的关键考虑因素，以便有效地研究MCU并与团队中的硬件工程师讨论潜在候选人。通过增加硬件/固件协作并选择适合项目的正确MCU，你将避免硬件重设计和进度延误。
- en: We'll start by introducing a wide range of considerations that go into selecting
    a suitable MCU for your project. After that, trade-offs between different development
    hardware will be discussed. A short introduction to the STM32 line is provided
    to show how vendors tend to group their product families. At the end of this chapter,
    we'll compare a few different **development boards** (**dev boards**) with STM32
    MCUs at their heart to show why we're using the dev board we are!
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先介绍在选择适合你项目的合适MCU时需要考虑的广泛因素。之后，将讨论不同开发硬件之间的权衡。提供STM32系列线的简要介绍，以展示供应商如何分组他们的产品系列。在本章结束时，我们将比较几个以STM32
    MCU为核心的不同**开发板**（**dev boards**），以展示我们为什么使用我们选择的开发板！
- en: 'This chapter will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: The importance of MCU selection
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MCU选择的重要性
- en: MCU considerations
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MCU考虑因素
- en: Dev board considerations
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发板考虑因素
- en: Introducing the STM32 MCU product line
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍STM32 MCU产品线
- en: How our dev board was selected
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们如何选择我们的开发板
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: All you need for this chapter is access to the internet in order to browse a
    few websites.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了浏览几个网站，你需要本章的互联网访问权限。
- en: The importance of MCU selection
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MCU选择的重要性
- en: 'After reading the title of this section, you might be asking yourself:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在阅读本节标题后，你可能会有这样的疑问：
- en: '"Hey! I thought this was a book about how to program a microcontroller using
    an RTOS—what''s all this about MCU selection? I''m a software developer!"'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: “嘿！我以为这是一本关于如何使用RTOS编程微控制器的书——这些关于MCU选择的内容是什么？我是一个软件开发者！”
- en: FreeRTOS is almost exclusively targeted at MCUs. It is primarily a scheduling
    kernel with a stable API, which makes it very well-suited to extremely low-level
    design. Unlike a full-blown CPU system with practically unlimited virtual addressing
    space and more clock cycles than you know what to do with, you're going to be
    working with a resource-constrained system. If you're developing firmware on this
    type of system, it means you're going to be much closer to the hardware than if
    you were writing software—which, in turn, means you're very likely going to be
    getting your hands very dirty, compared to your software counterparts. By dirty,
    we're talking *logic analyzer probing pins* dirty. . . *DMM permanently sitting
    on your desk* dirty. . . *learn how to solder so you can tack a lead onto the
    MCU in the quad flat pack* dirty. . . you get the idea! If you're from an exclusively
    software background, you've got some learning to do because we're about to dive
    into the gray area that resides between software and hardware—firmware—and it
    should be a lot of fun!
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: FreeRTOS几乎完全针对MCU。它主要是一个具有稳定API的调度内核，这使得它非常适合极低级别的设计。与具有几乎无限的虚拟寻址空间和比你知道的还要多的时钟周期的完整CPU系统不同，你将使用一个资源受限的系统。如果你在这种系统上开发固件，这意味着你将比编写软件时更接近硬件——反过来，这意味着你很可能比你的软件同行更可能“动手”，也就是说，你将需要做更多与*逻辑分析仪探针引脚*相关的工作。…*DMM永久地放在你的桌子上*…*学习如何焊接，以便在四脚扁平封装的MCU上焊接引脚*…你明白这个意思！如果你来自纯软件背景，你需要学习一些东西，因为我们将要深入探讨软件和硬件之间的灰色区域——固件——这应该会很有趣！
- en: Firmware and hardware are very closely linked, which is why it is so important
    that firmware engineers are brought into the fray early on in the development
    process. In some organizations, there is still only one person performing the
    electrical design work and writing the firmware. However, there is a growing trend
    that drives disciplines to be more and more specialized in their domains of expertise.
    Even in this case, it is important that multiple team members are brought in to
    make important design decisions up front, so everyone is aware of the trade-offs
    being made.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 固件和硬件联系非常紧密，这就是为什么在开发过程的早期就引入固件工程师如此重要的原因。在一些组织中，仍然只有一个人负责电气设计工作和编写固件。然而，有一种趋势正在推动各个学科在其专业领域内越来越专业化。即使在这样的情况下，也很重要，要尽早让多个团队成员参与进来，做出重要的设计决策，这样每个人都能意识到正在做出的权衡。
- en: If you're not the person immediately responsible for selecting an MCU, then
    there's a chance a design might be *thrown over the wall* to you. This is almost
    always a bad thing because it encourages sub-optimal system designs to avoid schedule
    delays caused by hardware being significantly redesigned after some core piece
    of functionality of the system is discovered. Instead of committing to a significant
    board revision to address a major design shortcoming, many teams are pressured
    to *just fix it with some code*.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不是直接负责选择MCU的人，那么有可能设计会被*推给你*。这几乎总是件坏事，因为它鼓励设计出次优的系统设计，以避免在系统的一些核心功能被发现后，由于硬件的重大重新设计而导致的进度延误。与其承诺进行重大的板级修订来解决主要的设计缺陷，许多团队都承受着压力，*只是用一些代码来修复它*。
- en: So, assuming you have some input in selecting an MCU—even if your involvement
    is just a case of "*Hey, Ted, what do you think of this micro for that new project?", *it's
    on you to arm yourself with enough background knowledge to form an intelligent
    opinion (or at least ask intelligent questions). This chapter isn't meant to be
    an exhaustive list with absolutely everything you need to know and consider when
    selecting hardware for your new project, but it does aim to provide an introduction
    to many of the contributing factors for differentiating and selecting between
    MCU devices. The other thing to keep in mind when reading this chapter is that
    it only applies to deciding between MCUs. As we saw from *[Chapter 1](39404421-bf7a-4283-bf78-c396818be4b4.xhtml), Introducing
    Real-Time Systems*, there's more than one way to skin a real-time system cat—MCUs
    aren't *always* the best choice.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，假设你在选择微控制器（MCU）方面有一些输入——即使你的参与只是“嘿，泰德，你对这个新项目的微控制器有什么看法？”这样的情况，*那么责任就在你身上，你需要武装自己，具备足够的背景知识，以便形成明智的观点（或者至少提出明智的问题）。本章的目的并不是提供一个详尽的列表，列出你选择新项目硬件时需要知道和考虑的每一件事，但它确实旨在介绍许多区分和选择MCU设备的不同影响因素。在阅读本章时，还要记住的是，它仅适用于在MCU之间做出选择。正如我们在*[第一章](39404421-bf7a-4283-bf78-c396818be4b4.xhtml)，介绍实时系统*中看到的，设计实时系统的方式不止一种——MCU并不*总是*是最好的选择。
- en: In order to limit the scope of this chapter to what is immediately relevant,
    for the examples presented in the remainder of the book, we'll be limiting our
    discussion to features found in ARM Cortex-M-based devices. We're focusing on
    ARM Cortex-M MCUs because the devices based on the Cortex-M core bring a really
    useful blend of features that enable engineers to create medium to highly complex
    real-time embedded systems using a **real-time operating system** (**RTOS**),
    while still being able to architect the solution in such a way that modules are
    reusable for other projects. STM32 MCUs have been selected because of their popularity,
    the wide range of MCUs available, their approachable **integrated circuit** (**IC**)
    packaging, and the included hardware peripherals. While we're focusing on STM32
    parts in this chapter, keep in mind that there are plenty of other manufacturers
    out there with tons of great products and the vast majority of what's covered
    will apply to non-STM32 (and non-ARM) parts as well.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为了限制本章的范围仅限于直接相关的内容，对于书中剩余部分提供的示例，我们将限制我们的讨论范围到基于 ARM Cortex-M 的设备中找到的功能。我们专注于
    ARM Cortex-M 微控制器，因为这些基于 Cortex-M 内核的设备带来了一组非常实用的功能，使工程师能够使用**实时操作系统**（**RTOS**）创建中等到高度复杂的实时嵌入式系统，同时仍然能够以模块化的方式设计解决方案，以便模块可以在其他项目中重用。选择
    STM32 微控制器是因为其受欢迎程度、广泛的微控制器系列、易于接近的**集成电路**（**IC**）封装以及包含的硬件外设。虽然本章我们专注于 STM32
    产品，但请记住，市场上还有许多其他制造商提供了大量优秀的产品，而且大部分内容也适用于非 STM32（和非 ARM）产品。
- en: MCU considerations
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MCU 考虑因素
- en: There are a few considerations that need to be made into selecting a microcontroller
    itself, rather than the dev board. Assuming the project contains fully custom
    electronics, there is no limitation on the exact MCU chosen as there would be
    if you were only selecting between dev boards. Students and hobbyists sometimes
    artificially limit themselves even further, sometimes staying loyal to certain
    ecosystems and only selecting from dev boards within those ecosystems (such as
    Arduino or mBed). While there is certainly nothing inherently *wrong* with any
    of the ecosystems, you'll fail to grow as a professional engineer if you're incapable
    of considering other solutions or appreciating the unique strengths each piece
    of hardware brings to a particular project.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择微控制器本身时，需要考虑一些因素，而不是开发板。假设项目包含完全定制的电子设备，所选择的微控制器没有限制，就像你只选择开发板时会有限制一样。学生和爱好者有时会人为地进一步限制自己，有时会忠诚于某些生态系统，并且只从那些生态系统中的开发板中选择（例如
    Arduino 或 mBed）。虽然这些生态系统本身确实没有固有的**错误**，但如果你无法考虑其他解决方案或欣赏每件硬件为特定项目带来的独特优势，你将无法作为一个专业工程师成长。
- en: Core considerations
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 核心考虑因素
- en: 'First, we''ll discuss how to address some key questions that will immediately
    narrow down the field of potential MCU candidates for a project:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将讨论如何解决一些关键问题，这些问题将立即缩小潜在 MCU 候选人的范围：
- en: Will it fit?
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它是否合适？
- en: Can it run all of my code?
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它能否运行我的所有代码？
- en: How much does it cost?
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它的成本是多少？
- en: Is it readily available?
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它是否容易获得？
- en: Let's answer these questions one by one.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐一回答这些问题。
- en: Physical size
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 物理尺寸
- en: Depending on the design, the MCU's size can be an important factor. If you're
    developing a wearable or portable device, size is likely to be at the top of your
    list. Sometimes, pre-packaged MCUs are too large and the designers are required
    to resort to *chip on board* (where the MCU silicon die is directly bonded to
    the **printed circuit board** (**PCB**), instead of being placed in a separate
    plastic package). On the other hand, large pieces of rack-mounted equipment tend
    to have more than enough space for any size MCU that is suitable to do the job.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 根据设计不同，微控制器的尺寸可能是一个重要因素。如果你正在开发可穿戴或便携式设备，尺寸可能排在你的首要位置。有时，预包装的微控制器可能太大，设计师不得不求助于*板上芯片*（即微控制器硅晶圆直接焊接在**印刷电路板**（**PCB**）上，而不是放置在单独的塑料封装中）。另一方面，大型机架式设备通常有足够的空间容纳任何适合完成工作的微控制器尺寸。
- en: A note to those of you who are interested in designing your own hardware—the
    packaging type will play a role in the PCB complexity as well as the ease of assembly
    (especially at the prototyping stage). If your prototypes will be hand-assembled,
    any of the gull-wing packages, such as **quad flat pack** (**QFP**), are the most
    approachable. After QFPs, **quad flat pack no-lead** (**QFN**) packages are still
    easily hand soldered. **Ball grid arrays** (**BGAs**) are generally best avoided
    for hand assembly, unless you're a soldering wizard!
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些对设计自己的硬件感兴趣的人来说——封装类型将在PCB复杂性以及组装的便利性（尤其是在原型阶段）中发挥作用。如果你的原型将手工组装，任何鱼鳍式封装，如**四边扁平封装**（**QFP**），都是最易接近的。在QFP之后，**无铅四边扁平封装**（**QFN**）封装仍然容易手工焊接。**球栅阵列**（**BGA**）通常最好避免手工组装，除非你是焊接大师！
- en: ROM
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ROM
- en: '**Read-only memory** (**ROM**) is a fairly large differentiating factor for
    MCUs in the same family, with ROM size being strongly correlated to price. Depending
    on the number of different models available in a product family, there could be
    multiple MCUs with very similar peripheral sets. These MCUs will likely share
    the same physical footprint but have significantly different amounts of memory.
    If your application is cost-sensitive but the required ROM is unknown, consider
    the following approach:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**只读存储器**（**ROM**）是同一家族中微控制器（MCU）的一个相当大的差异化因素，ROM大小与价格密切相关。根据产品家族中可用的不同型号数量，可能会有多个具有非常相似外设集的MCU。这些MCU可能具有相同的物理尺寸，但内存量却有很大差异。如果你的应用对成本敏感，但所需的ROM未知，请考虑以下方法：'
- en: Select an MCU family that provides multiple flash sizes in a compatible footprint.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个提供兼容尺寸中多个闪存大小的MCU家族。
- en: Start development with the MCU that has the most ROM in the family. This provides
    the most flexibility for adding features.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从具有家族中最大ROM的MCU开始开发。这为添加功能提供了最大的灵活性。
- en: After the final image size is known, the exact MCU (with a smaller flash size)
    can be selected before beginning mass production.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在确定最终映像大小后，可以在开始大规模生产之前选择具有较小闪存大小的确切MCU。
- en: When taking this approach, you'll need to be sure to leave enough room for future
    features, assuming your product will be capable of receiving field-updates to
    its firmware. Also, be sure to double-check peripheral assignments between models—*pin
    compatible* doesn't always mean *firmware compatible*!
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当采取这种方法时，你需要确保为未来的功能留出足够的空间，假设你的产品将能够接收固件现场更新。此外，务必在型号之间检查外设分配——*引脚兼容*并不总是意味着*固件兼容*！
- en: The amount of ROM required varies greatly and is dependent on how much code
    needs to be loaded onto the device. If you've been working with 8-bit MCUs, then
    you might be in for a nasty surprise when moving to a 32-bit architecture such
    as ARM. A similar program will require more flash space to implement on a 32-bit
    architecture versus an 8-bit architecture. The good news here is that flash sizes
    have kept up, so it's nearly always possible to find an MCU with enough onboard
    flash to accommodate your application. Pulling third-party libraries into your
    code base is generally fairly costly in terms of flash, so be mindful if you choose
    to go down this route.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 需要的只读存储器（ROM）量差异很大，这取决于需要加载到设备上的代码量。如果你一直在使用8位微控制器（MCU），那么当你转向ARM这样的32位架构时，可能会遇到一个令人不快的惊喜。在32位架构上实现与8位架构上实现类似的程序需要更多的闪存空间。好消息是，闪存大小一直在增长，所以几乎总是可以找到具有足够板载闪存的MCU来满足你的应用需求。将第三方库拉入你的代码库在闪存方面通常成本较高，所以如果你选择走这条路，请务必谨慎。
- en: RAM
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: RAM
- en: The amount of on-chip **random access memory** (**RAM**) is another factor to
    consider—it will generally follow the amount of flash a given device has. Parts
    with larger ROM will usually have more RAM. A few examples where large amounts
    of RAM will be required are data processing that requires large buffers for data,
    complex network stacks, deep buffers for communication, GUIs (especially those
    that require frame buffers), and any interpreted languages that run a virtual
    machine (that is, MicroPython and Lua).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 芯片上**随机存取存储器**（**RAM**）的量是另一个需要考虑的因素——它通常遵循特定设备上的闪存量。具有较大ROM的部件通常会有更多的RAM。需要大量RAM的几个例子包括需要大缓冲区进行数据处理、复杂的网络堆栈、用于通信的深度缓冲区、GUI（特别是那些需要帧缓冲区的GUI）以及运行虚拟机的任何解释型语言（即MicroPython和Lua）。
- en: For example, let's say your application calls for a high-resolution display.
    If the display doesn't have an on-board controller with its own frame buffer,
    you're likely already in external RAM territory. The size buffer required to drive
    that type of display will likely exceed the RAM available on board the MCU. On
    the other hand, if you're building a simple control system with limited connectivity
    and UI capability, then a small amount of RAM may be all that is required.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设您的应用程序需要高分辨率显示屏。如果显示屏没有内置控制器和自己的帧缓冲区，那么您可能已经进入了外部RAM的领域。驱动这种类型显示屏所需的缓冲区大小可能会超过MCU上可用的RAM。另一方面，如果您正在构建一个具有有限连接性和UI能力的简单控制系统，那么可能只需要少量RAM。
- en: Also, note that each task in FreeRTOS requires its own stack (generally with
    a bare minimum of 512 bytes on the Cortex-M port), so if a large number of tasks
    is required, it will be easy to quickly utilize several KB of RAM.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，请注意，FreeRTOS中的每个任务都需要自己的堆栈（通常在Cortex-M端口上至少需要512字节），因此如果需要大量任务，很快就会利用到几个KB的RAM。
- en: From a firmware engineer's perspective, external RAM seems like a get-out-of-jail-free
    card (who wouldn't want to increase the available RAM by nearly an order of magnitude)—but
    all of that functionality does come at a cost. Unless your system absolutely requires
    it, external RAM on the MCU's address/data bus is best avoided. It will require
    additional PCB real estate, consume more power, and ultimately, drive up PCB and
    bill of materials (**BOM**) costs. The PCB layout can be considerably more complicated
    when adding an external high-speed parallel bus used for accessing an external
    RAM because of length-tuning requirements and the number of signals involved.
    The design will also be more likely to emit EMI because of all the high-speed
    signals. Although it offers plenty of space, external RAM is often marginally
    slower than on-board RAM, which can lead to a more complex linker file (if certain
    functions have very tight timing constraints). Other factors worthy of consideration include properly
    setting up RAM timing parameters and caching coherency issues if you attempt to
    speed up access to external RAM by using data caching (refer to *Further reading*
    section for details).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 从固件工程师的角度来看，外部RAM似乎是一张免罪卡（谁不想将可用RAM增加近一个数量级）——但所有这些功能都需要付出代价。除非您的系统绝对需要它，否则最好避免在MCU的地址/数据总线上使用外部RAM。它将需要额外的PCB空间，消耗更多电力，并最终推高PCB和物料清单（**BOM**）成本。由于长度调整要求和涉及的信号数量，添加用于访问外部RAM的外部高速并行总线会使PCB布局变得相当复杂。由于所有高速信号，设计也更有可能产生EMI。尽管外部RAM提供了充足的空间，但通常比板载RAM慢一些，这可能导致链接器文件更加复杂（如果某些函数有非常严格的时序约束）。其他值得考虑的因素包括，如果您尝试通过使用数据缓存来加速外部RAM的访问，则需要正确设置RAM时序参数和缓存一致性问题（有关详细信息，请参阅*进一步阅读*部分）。
- en: With all of its downsides, having external RAM enables a lot of functionality,
    such as the ability to cache entire firmware images in RAM for upgrades, feature-rich
    GUI frameworks, complex networking stacks, and sophisticated signal processing
    techniques. As with any other requirement, there are trade-offs to be made.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管有诸多缺点，但外部RAM能够实现许多功能，例如在RAM中缓存整个固件映像以进行升级、功能丰富的GUI框架、复杂的网络堆栈和复杂的信号处理技术。与其他任何要求一样，需要做出权衡。
- en: The CPU clock rate
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CPU时钟频率
- en: Since we're limiting our discussion to MCUs with the same underlying architecture,
    an MCU with a faster core clock rate will execute the same set of pure software
    functions faster than one with a slower clock rate. Notice the keyword *pure*
    in the previous statement—sometimes, there are on-board hardware peripherals that
    can make a huge difference to execution speed that have nothing to do with the
    CPU clock rate (such as the hardware floating point and DSP functionality available
    on the Cortex-M4 core).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将讨论限制在具有相同底层架构的MCU上，具有更快核心时钟频率的MCU将比具有较慢时钟频率的MCU更快地执行同一组纯软件函数。注意前述语句中的关键词*纯*——有时，某些板载硬件外设可以极大地影响执行速度，而这些外设与CPU时钟频率无关（例如，Cortex-M4核心上可用的硬件浮点数和DSP功能）。
- en: Another thing to be mindful of is the absolute maximum clock rate of the device
    versus the practical clock rate for an application. For example, some MCUs' maximum
    clock frequency is incompatible with generating an internal 48 MHz clock required
    for a USB peripheral, so it can't be used at maximum speed if the USB peripheral
    is also used.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个需要注意的问题是设备的绝对最大时钟频率与应用于应用的实用时钟频率之间的对比。例如，一些MCU的最大时钟频率与生成USB外设所需的内部48 MHz时钟不兼容，因此如果USB外设也使用，则无法以最大速度运行。
- en: Interrupt processing
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 中断处理
- en: Within the ARM Cortex-M family, interrupt processing is all very similar. All
    of the devices include a **nested vector interrupt controller** (**NVIC**) with
    a relocatable vector table and an **external interrupt controller** (**EXTI**).
    Device-specific considerations include the exact peripheral interrupts that are
    available and how they are mapped to the NVIC, as well as how external interrupts
    are multiplexed into the EXTI.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在ARM Cortex-M系列中，中断处理都非常相似。所有设备都包括一个**嵌套向量中断控制器**（NVIC），具有可重定位的向量表和一个**外部中断控制器**（EXTI）。特定于设备的考虑因素包括确切的外设中断及其如何映射到NVIC，以及外部中断如何多路复用到EXTI。
- en: Price
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 价格
- en: Depending on the application, the BOM's cost may be a significant driver or
    hardly a consideration. Generally, BOM costs come under increasing scrutiny in
    high-volume applications. However, with lower volume products, it is often wise
    to focus more on minimizing the development time and effort of a product, rather
    than achieving the lowest BOM cost possible. By focusing on minimizing the amount
    of engineering effort and development time for a low-volume product, the product
    will get to market sooner. Not only does the product start generating revenue
    faster, but it also accrues less **non-recurring engineering** (**NRE**) costs.
    Less NRE leads to a faster **return on investment** (**ROI**) for the product
    being developed. Faster ROI ultimately makes managers and CEOs really happy! In
    these situations, worrying about spending a few dollars on a BOM for a product
    selling dozens per year—at the expense of weeks or months of development effort—is
    rarely a wise trade-off.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 根据应用的不同，BOM（物料清单）的成本可能是一个重要的驱动因素，也可能几乎不被考虑。通常，在高产量应用中，BOM成本会受到越来越多的审查。然而，对于低产量产品，通常更明智的做法是更多地关注最小化产品的开发时间和努力，而不是追求尽可能低的BOM成本。通过专注于最小化低产量产品的工程努力和开发时间，产品可以更快地进入市场。这不仅使产品更快地产生收入，而且也减少了**非重复工程**（NRE）成本。较少的NRE使得正在开发的产品能够更快地实现投资回报率（ROI）。更快的ROI最终会让经理和CEO们非常高兴！在这些情况下，担心为每年只销售几十个的产品花费几美元的BOM——以牺牲数周或数月的发展努力为代价——通常不是一个明智的权衡。
- en: Availability
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可用性
- en: An often-overlooked aspect of an MCU by junior engineers is its expected and
    guaranteed availability. Just because a part is available for purchase at the
    beginning of the project does not mean it will be available for the entire time
    that the end product will be sold. In the case of consumer devices, this probably
    isn't a huge issue. This is because these devices can have extremely high volumes,
    but any single revision is only in production for a limited amount of time (from
    months to a year or two).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 初级工程师经常忽视的一个方面是MCU的预期和保证的可用性。仅仅因为一个部件在项目开始时可以购买，并不意味着在整个最终产品销售期间都可以购买。在消费设备的情况下，这可能不是一个大问题。这是因为这些设备可以具有极高的产量，但任何单一版本的生产时间都是有限的（从几个月到一两年）。
- en: Contrast the consumer electronics mindset of planned obsolescence with something
    on the industrial, telecom, or aerospace side. In these industries, development
    timelines can be measured in years and required support periods are often a decade
    or more. This is why part availability is a very real consideration. Be sure to
    investigate the manufacture guarantees on availability and weigh these against
    their history, reputation, and the risk to the project—it's not a pleasant experience
    to get 80% of a design complete only to find out that the MCU can't be sourced
    during a pre-production run!
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 将消费电子产品的计划性淘汰心态与工业、电信或航空航天领域的某些产品进行对比。在这些行业中，开发时间表可以以年为单位衡量，所需的支持期通常为十年或更长。这就是为什么零部件的可用性是一个非常现实的考虑因素。务必调查制造保证的可用性，并将这些与他们的历史、声誉和项目风险进行权衡——在完成设计80%的时候发现MCU在预生产阶段无法采购，这可不是什么愉快的体验！
- en: Now that we've covered some of the initial considerations to be aware of, we'll
    move on to some of the more unique considerations for embedded processors—hardware
    peripherals.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经讨论了一些需要了解的初步考虑因素，我们将继续讨论嵌入式处理器的一些更独特的考虑因素——硬件外围设备。
- en: Hardware peripherals
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 硬件外围设备
- en: Compared to the desktop world of CPUs, where the processor itself is generally
    the center of attention, selecting the *right* MCU is more complex due to the
    increase in scope. Many different pieces of hardware are included on the same
    chip, which enables us to optimize the solution for speed, power, CPU utilization,
    or BOM cost. In a highly constrained design, all of these factors can come into
    play and trade-offs will need to be made.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 与桌面世界的CPU相比，处理器本身通常是关注的中心，由于范围的增加，选择**正确**的MCU更为复杂。同一芯片上包含了许多不同的硬件组件，这使得我们能够针对速度、功耗、CPU利用率或BOM成本进行优化。在高度受限的设计中，所有这些因素都可能发挥作用，并且需要做出权衡。
- en: This section will cover some of the hardware peripherals commonly available
    on Cortex-M- based MCUs and aims to provide an extremely brief introduction to
    them, with the goal of informing you why each type of peripheral may be helpful
    to have in a design.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将介绍一些在基于Cortex-M的MCU上常见的硬件外围设备，并旨在提供对这些设备的非常简短的介绍，目的是让您了解为什么在设计中有每种类型的外围设备可能会有所帮助。
- en: Connectivity
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接性
- en: In today's ever-increasingly connected ecosystem of the **Internet of Things**
    (**IoT**), having on-board networking capability on the MCU can be a boon to a
    project. . . as long as the right firmware exists to drive it. It is important
    to realize that having a peripheral is not the same as having full functionality.
    For example, just because an MCU supports a **reduced media independent interface**
    (**RMII**) and a **physical layer in networking** (**PHY**) does not mean you
    can immediately get a full TCP/IP stack—all of that firmware functionality needs
    to come from somewhere. Potential connectivity baked into devices can include
    Ethernet, RMII, 802.11 (WiFi), 802.15.1 (Bluetooth), and 802.15.4 (Zigbee, HART,
    and so on).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在今天不断增长的物联网（**IoT**）生态系统中，MCU上具有板载网络功能对于项目来说可能是一个福音……只要存在正确的固件来驱动它。重要的是要认识到，拥有外围设备并不意味着拥有完整的功能。例如，仅仅因为MCU支持**简化媒体独立接口**（**RMII**）和网络**物理层**（**PHY**），并不意味着您可以立即获得完整的TCP/IP堆栈——所有这些固件功能都需要从其他地方获得。设备中可能内置的潜在连接性包括以太网、RMII、802.11（WiFi）、802.15.1（蓝牙）和802.15.4（Zigbee、HART等）。
- en: When it comes to wireless communications, things get a bit more complex, since
    the product will need to be pushed through an approval process from the appropriate
    agency, depending on geographic location. Pre-certified **radio frequency** (**RF**)
    modules can be used to minimize the amount of effort and cost to develop a properly
    certified end product.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到无线通信时，事情会变得稍微复杂一些，因为产品需要根据地理位置通过适当的机构的审批流程。预认证的**射频**（**RF**）模块可以用来最小化开发一个正确认证的最终产品所需的工作量和成本。
- en: Due to a specialized PCB layout, regulatory requirements, and complex network
    stacks, on-board MCU peripherals that facilitate wireless communications aren't
    quite as useful as they first appear for a low-volume product. Again, don't be
    lulled into a false sense of accomplishment by simply specifying a part that has
    hardware available, since wireless communication stacks can be extremely complex
    and wireless certification testing is expensive.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 由于专门的PCB布局、法规要求和复杂的网络堆栈，便于无线通信的板载MCU外围设备对于低量产品来说并不像最初看起来那么有用。再次提醒，不要因为仅仅指定了一个具有硬件的部分而陷入虚假的成就感，因为无线通信堆栈可能非常复杂，无线认证测试成本高昂。
- en: Memory protection units
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内存保护单元
- en: '**Memory protection units** (**MPUs**) are used to ensure that code only accesses
    the range of RAM it is permitted to. When used correctly, MPUs ensure greater
    system stability and increased security, since the application is less likely
    to cause unintended consequences by accessing memory it shouldn''t.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**内存保护单元**（**MPUs**）用于确保代码只访问它被允许访问的RAM范围。当正确使用时，MPUs可以确保更高的系统稳定性和增强的安全性，因为应用程序由于不太可能通过访问它不应访问的内存而产生意外后果。'
- en: FreeRTOS includes support for MPU-protected tasks, which we'll cover in *[Chapter
    15](0f98e454-9804-4589-9854-5c38c9d8d416.xhtml), FreeRTOS Memory Management*.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: FreeRTOS包括对MPU保护任务的支持，我们将在*[第15章](0f98e454-9804-4589-9854-5c38c9d8d416.xhtml)，FreeRTOS内存管理*中介绍。
- en: Hardware floating-point units
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 硬件浮点单元
- en: If your application is going to be crunching lots of floating point numbers,
    a **hardware** **floating-point unit** (**FPU**) can be extremely helpful. Until
    the past decade or so, floating point numbers were generally best avoided in most
    MCU-based embedded systems. The availability of faster processors started to change
    this. Now, FPUs are often implemented in hardware. Thanks to FPUs, many different
    applications can benefit from using floating point math, without incurring the
    CPU performance penalty commonly associated with software-based library implementations.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的应用程序将要处理大量的浮点数，一个**硬件****浮点运算单元**（**FPU**）可以非常有帮助。直到过去十年左右，浮点数在大多数基于MCU的嵌入式系统中通常最好避免使用。更快处理器的可用性开始改变这一点。现在，FPUs通常在硬件中实现。多亏了FPUs，许多不同的应用程序可以受益于使用浮点数学，而不会遭受与基于软件库实现通常相关的CPU性能惩罚。
- en: Single-precision (32-bit) FPUs are optional on Cortex-M4 processors, while Cortex-M7-based
    processors add optional hardware support for double-precision (64-bit) floating
    point arithmetic.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 单精度（32位）FPUs在Cortex-M4处理器上是可选的，而基于Cortex-M7的处理器增加了对双精度（64位）浮点运算的可选硬件支持。
- en: Digital signal processing functions
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数字信号处理功能
- en: Along with increased performance from hardware-based, floating point support,
    the Cortex-M4- and Cortex-M7-based MCUs also have optional **digital signal processing** (**DSP**)
    functionality baked into the hardware, which can greatly accelerate some complex
    algorithms and potentially help reduce the coding burden for firmware engineers.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 除了基于硬件的浮点支持的性能提升外，基于Cortex-M4和Cortex-M7的MCU还包含可选的**数字信号处理**（**DSP**）功能，这些功能集成在硬件中，可以极大地加速一些复杂算法，并可能有助于减轻固件工程师的编码负担。
- en: Direct memory access channels
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 直接内存访问通道
- en: '**Direct memory access** (**DMA**) can be extremely useful in a variety of
    situations where high bandwidth or highly event-driven code is desired. DMA controllers
    are typically able to interact with MCU peripherals, as well as different parts
    of RAM. They take care of populating peripheral registers and RAM without involving
    the CPU at all. These autonomous transfers can free up significant CPU time by
    greatly reducing the interrupt load and context switching.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**直接内存访问**（**DMA**）在需要高带宽或高度事件驱动的代码的各种情况下可以非常有用。DMA控制器通常能够与MCU外设以及RAM的不同部分交互。它们负责填充外设寄存器和RAM，而无需涉及CPU。这些自主传输通过大大减少中断负载和上下文切换，可以显著节省CPU时间。'
- en: One thing to keep in mind regarding DMA peripherals is that all channels aren't
    always mapped to all peripherals. Certain channels can be of a higher bandwidth
    than others. This is most significant in systems that require multiple high-bandwidth
    devices. For challenging systems such as these, it is important for firmware and
    hardware engineers to work together to ensure that a hardware design doesn't cause
    a handicap for firmware down the road.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 关于DMA外设需要注意的一点是，并非所有通道都始终映射到所有外设。某些通道的带宽可能比其他通道高。这在需要多个高带宽设备的系统中尤为重要。对于这些具有挑战性的系统，固件和硬件工程师共同工作以确保硬件设计不会在将来给固件带来障碍是非常重要的。
- en: Communication interfaces
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通信接口
- en: 'We''ve already introduced external network connectivity relative to Ethernet
    and wireless technologies. There are many different communication interfaces that
    are more traditionally associated with embedded devices and are commonly available
    as hardware peripherals on an MCU. The interfaces that are used for communicating
    with on- and off-board sensors and actuators are as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经介绍了相对于以太网和无线技术的外部网络连接。有许多不同的通信接口更传统地与嵌入式设备相关联，并且通常作为MCU上的硬件外设可用。用于与板载和非板载传感器和执行器通信的接口如下：
- en: '**Inter-IC Communication** (**I2C**)'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**片上互连通信**（**I2C**）'
- en: '**Serial peripheral interface** (**SPI**)'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**串行外设接口**（**SPI**）'
- en: '**Universal Synchronous/Asynchronous Receiver Transmitter** (**USART**)'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通用同步/异步收发器**（**USART**）'
- en: 'The following peripherals are regularly used in automotive and industrial environments
    for inter-module communication:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在汽车和工业环境中，以下外设通常用于模块间通信：
- en: '**USARTs**'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**USARTs**'
- en: '**Controller area network** (**CAN**)'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制器局域网**（**CAN**）'
- en: '**Local interconnect network** (**LIN**)'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**局部互连网络**（**LIN**）'
- en: Hardware crypto engines
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 硬件加密引擎
- en: If your application calls for external connectivity, then your mind should also
    be focused on security. In the same way that FPUs make floating point operations
    more CPU efficient, hardware-based cryptography engines are available on some
    MCUs, which will greatly reduce the CPU burden required to securely transfer data
    over public networks.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的应用程序需要外部连接，那么您的心思也应该专注于安全性。与FPUs使浮点运算更高效一样，一些MCU上提供了基于硬件的加密引擎，这将在公共网络上安全传输数据时大大减轻CPU的负担。
- en: Timing hardware
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定时硬件
- en: There are often several different timing peripherals included on an MCU. The
    peripherals themselves will often include input capture, output compare, and **pulse
    width modulation** (**PWM**) functionality as a minimum. Some devices will also
    include timing hardware for interfacing with quadrature encoders.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在MCU上通常包含多个不同的定时外设。这些外设本身通常包括输入捕获、输出比较和**脉冲宽度调制**（**PWM**）功能作为最低要求。一些设备还会包括用于与正交编码器接口的定时硬件。
- en: Input capture deals with *capturing* the time a digital input to the MCU changes
    state. MCU peripherals do this with a much higher resolution than firmware because
    they use high-frequency counters and hardware gates to capture the signal transition
    (rather than relying on multiple CPU instructions). There are often several channels
    of input capture available, which can be used in parallel. Output compare is effectively
    the reverse of input capture (a signal is output with precise timing characteristics)—*compare*
    refers to the hardware comparator used to determine when to perform the transition.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 输入捕获处理的是MCU数字输入状态变化的**捕获**时间。MCU外设使用高频率计数器和硬件门来捕获信号转换（而不是依赖于多个CPU指令），因此它们能够以比固件更高的分辨率完成这项工作。通常会有多个输入捕获通道可用，这些通道可以并行使用。输出比较实际上是输入捕获的相反操作（输出一个具有精确时序特性的信号）——**比较**指的是用于确定何时执行转换的硬件比较器。
- en: PWM and input capture are both very commonly used in control systems to interact
    with sensors and actuators. Some actuators will take PWM as inputs. PWM can also
    be used to provide proportional control of a binary driver (such as a transistor),
    which can be used to precisely change the amount of power delivered to a load.
    Many different encoders will often supply information in PWM format as well, which
    can be read by the MCU using a timer peripheral's input capture mode.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: PWM和输入捕获在控制系统中都非常常用，用于与传感器和执行器交互。一些执行器将以PWM作为输入。PWM还可以用于提供二进制驱动器（如晶体管）的比例控制，这可以用来精确地改变加到负载上的功率。许多不同的编码器通常也会以PWM格式提供信息，这些信息可以通过MCU使用定时器外设的输入捕获模式读取。
- en: '**Quadrature encoder inputs** (**QEIs**) are extremely useful in motion feedback
    systems. Although similar functionality can be achieved using multiple channels
    of input capture (or slowly, without any dedicated hardware), having dedicated
    QEI hardware allows for very minimal CPU intervention, even at high input rates.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**正交编码器输入**（**QEIs**）在运动反馈系统中非常有用。尽管可以使用多个输入捕获通道（或缓慢地，不使用任何专用硬件）实现类似的功能，但拥有专门的QEI硬件允许在高速输入率下进行极少的CPU干预。'
- en: Integrated analog
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成模拟
- en: '**Digital to Analog Converters** (**DACs**) and **Analog to Digital Converters**
    (**ADCs**) are used when converting between continuously varying analog values
    and associated digital representations of that value. Most often, these types
    of on-board peripherals will be lower resolution and lower frequency than what
    you''ll find with external chips. However, depending on the requirements of your
    system, they can be extremely useful. Another useful peripheral is on-board comparators,
    which will signal the processor when an analog value is above or below a given
    threshold.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**数字到模拟转换器**（**DACs**）和**模拟到数字转换器**（**ADCs**）用于在连续变化的模拟值及其相关数字表示之间进行转换。这些类型的板载外设通常比外部芯片的分辨率和频率低。然而，根据您系统的需求，它们可以非常有用。另一个有用的外设是板载比较器，它会在模拟值高于或低于给定阈值时向处理器发出信号。'
- en: Some more specialized devices (for example, Cypress PSoC) include fully reconfigurable
    analog peripherals (including op-amps, DACs, and ADCs) as well as flexible digital
    peripherals, flexibly integrating a very large feature set into a signal chip.
    Analog Devices and Maxim offer some of the more exotic mixed-signal MCUs, which
    tend to integrate application-specific components onto the same chip as the MCU,
    making development for a specific end product easier. You can find a very wide
    range of application-specific MCUs aimed at everything from industrial process
    control, automotive distance sensing, and IoT sensors to TV remote control applications.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 一些更专业的设备（例如，Cypress PSoC）包括完全可重新配置的模拟外设（包括运算放大器、数模转换器（DAC）和模数转换器（ADC））以及灵活的数字外设，灵活地将非常广泛的功能集集成到信号芯片中。模拟器件和Maxim提供了一些更奇特的混合信号微控制器（MCU），它们倾向于将特定应用组件集成到与MCU相同的芯片上，使得针对特定最终产品的开发更加容易。你可以找到针对从工业过程控制、汽车距离感应、物联网传感器到电视遥控器应用等各个领域的非常广泛的应用特定MCU。
- en: If there is a popular use case for a mixed-signal problem, chances are, there
    is also a fully integrated piece of silicone that integrates an MCU with most
    of the required analog frontend available to solve most of the problem. The question
    then becomes one of balancing the BOM cost, detailed specifications, the size,
    development time, and long-term sourcing risk mitigation.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个混合信号问题有一个流行的用例，那么很可能有一个完全集成的硅片，它集成了大多数所需的模拟前端MCU，以解决大部分问题。那么问题就变成了平衡BOM成本、详细规格、尺寸、开发时间和长期采购风险缓解。
- en: Dedicated touch interfaces
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 专用触摸接口
- en: Thanks to the increased prevalence of touch interfaces, full implementations
    of touch controllers are now included on some MCUs. This can greatly reduce the
    amount of expertise and effort required to have a fully functional and robust
    touch interface implementation.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 由于触摸界面的普及率提高，一些MCU现在包含了完整的触摸控制器实现。这可以大大减少实现一个完全功能性和健壮的触摸界面所需的专业知识和努力。
- en: Display interfaces
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示接口
- en: Generally found in higher performance devices with larger pin counts, sophisticated
    display interfaces and even graphics acceleration are becoming fairly common.
    Expect to find parallel LCD/TFT interfaces (for example, 6800 and 8080) on a large
    number of parts, with interfaces such as MIPI DSI capable of driving inexpensive,
    high-resolution displays to displays with only a few lines. Hardware protocol
    conversion ICs can be used to adapt to a number of different display standards,
    such as LVDS and HDMI. MCUs are now capable of delivering a rich user experience,
    with added hardware acceleration and efficiently written middleware and drivers.
    The CPU load is perfectly tolerable as well.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 通常存在于具有较高性能、较大引脚数、复杂的显示接口甚至图形加速的设备中。在大量部件上可以找到并行LCD/TFT接口（例如，6800和8080），这些接口能够驱动价格低廉、高分辨率的显示器，甚至只有几行的显示器。硬件协议转换IC可以用来适应多种不同的显示标准，如LVDS和HDMI。现在微控制器（MCU）能够提供丰富的用户体验，包括硬件加速和高效编写的中间件和驱动程序。CPU负载也是完全可以接受的。
- en: External memory support
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 外部存储器支持
- en: In higher pin count packages, expect to find support for **static random access
    memory** (**SRAM**). **Synchronous dynamic random access memory** (**SDRAM**)
    support, with an on-board controller taking care of the tight timing requirements
    and refresh cycles, can be found in higher performance devices. Devices aimed
    at performance will generally bring in support for quad-SPI. Often, external RAM—and
    even quad-SPI devices—can be memory-mapped and used similar to internal storage,
    albeit with a performance hit. Many devices have **MultiMediaCard** (**MMC**)
    and **secure digital card** (**SD card**) controllers as well, so commodity consumer-grade
    removable storage is easily added.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在引脚数较多的封装中，可以期待找到对**静态随机存取存储器**（**SRAM**）的支持。**同步动态随机存取存储器**（**SDRAM**）的支持，由板载控制器负责处理严格的时序要求和刷新周期，可以在高性能设备中找到。针对性能的设备通常会引入对四线SPI的支持。通常，外部RAM——甚至四线SPI设备——可以被内存映射并类似于内部存储器使用，尽管会有性能损失。许多设备还配备了**多媒体卡**（**MMC**）和**安全数字卡**（**SD卡**）控制器，因此可以轻松添加商品级消费级可移动存储。
- en: Real-time clock
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实时时钟
- en: Hardware calendars are available on some devices as well; all that is needed
    is a 32 kHz crystal and a back-up power source, such as a CR2032 primary lithium
    battery. Something that is also generally offered with this capability is a limited
    amount of battery backed-up RAM.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 硬件日历在一些设备上也是可用的；所需的所有东西只是一个32 kHz的晶振和一个备用电源，例如CR2032的碱性锂电池。通常，这种功能还会附带一定量的由电池供电的RAM。
- en: Audio support
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 音频支持
- en: High-fidelity audio support through **Inter-IC Sound** (**I²S**) is commonly
    available. Expect to find DMA channels attached to the I²S peripheral to minimize
    the amount of CPU intervention required for feeding data-hungry DACs and collecting
    data from ADCs on these buses.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 通过**Inter-IC Sound**（**I²S**）提供高保真音频支持是常见的。你可以期待在这些总线上找到连接到I²S外设的DMA通道，以最小化CPU干预的数据密集型DAC的喂食和从ADC收集数据所需的量。
- en: 'This concludes our long list of hardware peripherals to look out for when evaluating
    MCUs. Next up is a topic that will be of specific interest to anyone interested
    in designing battery-or energy-harvesting devices: power consumption.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这就结束了我们在评估MCU时需要关注的硬件外设的长列表。接下来是一个对任何对设计电池或能量收集设备感兴趣的人都有特定兴趣的话题：功耗。
- en: Power consumption
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功耗
- en: Lower-power MCUs have been the trend for well over a decade. However, what was
    historically a specialized use case with limited options (such as the 16-bit MSP430)
    has now become mainstream, thanks to the plethora of battery-powered, IoT-based
    devices coming onto the market. Now, full 32-bit MCUs are available, which can
    quickly cycle between low deep sleep and high-clockrate, data-crunching run modes.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 低功耗MCU已经是一个超过十年的趋势。然而，由于市场上出现了大量电池供电的基于物联网的设备，历史上是一种具有有限选项的专用用例（如16位的MSP430）现在已经成为主流。现在，完整的32位MCU已经可用，它们可以在低功耗深度睡眠和高时钟速率、数据处理运行模式之间快速切换。
- en: Power efficiency
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功耗效率
- en: It may sound simple, but a fairly good way of making sure something draws less
    power is to turn it off (don't laugh—this can be surprisingly complicated depending
    on the parts involved, thanks to various leakage currents!). If complex MCUs with
    dozens of peripherals have any hope of being power efficient, there needs to be
    a way to turn off whatever functionality isn't required to minimize wasted power.
    This is typically accomplished by shutting off clocks to peripherals that aren't
    in use and ensuring that CMOS-based I/O pins are not floating (remember, it's
    the transitions in CMOS devices that draw the most power).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然听起来很简单，但确保某物消耗更少电力的一个相当好的方法就是将其关闭（别笑——这可能会因涉及的部件而变得非常复杂，多亏了各种漏电流！）。如果具有数十个外设的复杂MCU有任何希望实现高效能，就需要有一种方法来关闭不需要的功能，以最小化浪费的电力。这通常是通过关闭未使用的外设的时钟，并确保基于CMOS的I/O引脚不悬浮（记住，CMOS设备中的转换消耗了最多的电力）来实现的。
- en: Another spec that is commonly found in datasheets is how much power is consumed
    per MHz of CPU clock—generally specified in µA/MHz. If the amount of processing
    per wake-up period is fairly constant, this provides another metric to compare
    different MCU models.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 数据表中通常还会找到另一个规格，即CPU时钟频率每MHz消耗多少功率——通常以µA/MHz表示。如果每次唤醒期间的处理器处理量相当恒定，这为比较不同的MCU型号提供了另一个指标。
- en: Low-power modes
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 低功耗模式
- en: Devices that are aimed at lower-power applications will typically have a few
    different levels of shutdown states to choose from. These states will allow the
    programmer to trade off between current consumption, available features (such
    as keeping RAM content intact and some peripherals on), the number of interrupts
    available to trigger a wake-up event, and the wake-up time. Thankfully, many lower-power
    IoT applications are fairly limited in their scope of operations, so sometimes
    a combination of novel features in a particular MCU will prove to be a very good
    fit for a specific application.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 针对低功耗应用的设备通常会有几个不同的关闭状态可供选择。这些状态将允许程序员在电流消耗、可用功能（如保持RAM内容完整和某些外设开启）、可触发的唤醒事件的中断数量以及唤醒时间之间进行权衡。幸运的是，许多低功耗物联网应用的操作范围相当有限，因此有时某个特定MCU中的新颖特性组合将非常适合特定的应用。
- en: Wake-up time
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 唤醒时间
- en: If a device has an amazingly low shutdown current, but takes an abnormally long
    time to *wakeup* and get itself into a usable running state, it might not be the
    best choice for an application that requires fairly frequent wake-ups, since significant
    time will be spent getting the system up and running instead of getting it to
    perform the necessary processing and then going back to sleep.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个设备具有惊人的低关断电流，但需要异常长的时间来*唤醒*并进入可用的运行状态，那么它可能不是适用于需要频繁唤醒的应用的最佳选择，因为会有大量时间被花费在使系统启动和运行上，而不是进行必要的处理然后进入休眠状态。
- en: Power supply voltage
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 电源电压
- en: Lower power supply voltages will typically lead to lower current consumption.
    Depending on the design, trade-offs can be made between eliminating power conditioning
    circuitry (which consumes current due to less than 100% efficiency) and extending
    the usable operating voltage range of a given battery cell. The MCU's voltage
    requirement (as well as any ancillary circuitry) will be a driving factor for
    how much flexibility there is on the regulation side. Also, be aware that the
    maximum clock typically scales with supply voltage as well, so don't expect to
    be able to drive the CPU at the maximum specified frequency and lowest possible
    supply voltage.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 较低的电源电压通常会导致较低的电流消耗。根据设计，可以在消除功率调节电路（由于效率低于100%而消耗电流）和扩展特定电池单元的可用工作电压范围之间进行权衡。MCU的电压要求（以及任何辅助电路）将是影响调节方面灵活性的一个驱动因素。此外，请注意，最大时钟频率通常与供电电压成比例，因此不要期望能够在最大指定频率和最低可能的供电电压下驱动CPU。
- en: Migrating MCUs mid-project
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目中期迁移MCU
- en: Occasionally, 100% of the project requirements won't be known up front, or everyone
    might not be 100% confident about how exactly to solve every detailed problem
    on day 1\. If you happen to be fortunate enough to know that there is a high level
    of uncertainty, then it is always better to plan for it, rather than be caught
    by surprise. Here are a few areas where selecting an MCU that's part of a larger
    family or ecosystem can help to mitigate some of the risks associated with project
    uncertainty.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，项目需求在初期可能无法完全知晓，或者第一天可能没有人对如何确切解决每一个详细问题有100%的信心。如果你幸运地意识到存在高度的不确定性，那么提前规划总是比被意外所困要好。以下是一些选择属于更大家族或生态系统的MCU可以帮助减轻与项目不确定性相关的一些风险的领域。
- en: Importance of pin compatibility
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引脚兼容性的重要性
- en: When planning for a potential MCU shift, if possible, identify alternative MCUs that
    are pin-compatible ahead of time. For example, the NXP LPC1850's parts are pin-compatible
    with LPC 4350 MCUs. STM32 devices are all pin-compatible within a family (and
    package) but will occasionally be *almost* pin-compatible with other families
    as well (STM32M4 and STM32M7, for example). ST regularly publishes migration guides
    for engineers that have *outgrown* one MCU family and need something a bit more
    capable. If a few likely candidates and alternatives are selected up front, some
    simple jumper populations on the PCB may facilitate migration between different
    MCUs with significantly different performance (and cost), helping to eliminate
    the time required for PCB reworking mid-project.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在规划潜在的MCU转换时，如果可能的话，提前确定具有引脚兼容性的替代MCU。例如，NXP LPC1850的部件与LPC 4350 MCU引脚兼容。STM32设备在家族（和封装）内部都是引脚兼容的，但偶尔也会与其他家族*几乎*引脚兼容（例如STM32M4和STM32M7）。ST定期发布针对那些已经“成长”超过一个MCU家族并需要更强大功能的工程师的迁移指南。如果提前选择了几个可能的候选者和替代品，PCB上的简单跳线配置可能有助于在不同性能（和成本）显著不同的MCU之间进行迁移，从而有助于减少项目中期PCB返工所需的时间。
- en: Peripheral similarity
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 外设相似性
- en: Most MCUs, within a given family, will inherit the same peripheral IP. Silicon
    vendors don't necessarily redesign peripherals from scratch every time they create
    a new MCU family, so there is often a significant amount of overlap in the register
    maps and behavior for peripherals belonging to a given vendor. Often, if your
    applications only use a subset of the most basic peripheral functions, to begin
    with, you might be lucky enough to use largely the same driver, even if the vendor
    decides to drastically change their API between MCU families. Ironically, sometimes,
    the raw hardware proves to be more consistent over time than the abstraction layers
    above it.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数MCU，在给定系列中，将继承相同的外围IP。硅供应商并不一定每次创建一个新的MCU系列时都会从头开始重新设计外围设备，因此对于属于特定供应商的外围设备，在寄存器映射和行为上通常存在大量的重叠。通常，如果你的应用程序最初只使用最基本的外围功能的一部分，那么你可能很幸运地能够使用大量相同的驱动程序，即使供应商决定在MCU系列之间大幅改变他们的API。讽刺的是，有时，原始硬件在时间上的稳定性比其上层的抽象层更高。
- en: The concept of an MCU family
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MCU系列的概念
- en: Many silicon vendors have concepts of device families, and **STMicroelectronics**
    (**STM**) is no exception—datasheets are typically written for entire families
    of devices. The most notable differences between devices in an STM family are
    typically RAM/ROM and the package size. However, additional peripherals are added
    to more capable devices as well—for example, larger packages will start to include
    parallel RAM controllers. Devices with more RAM/ROM will include more capable
    timer peripherals, more comm peripherals, or domain-specific peripherals, such
    as cryptographic modules.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 许多硅供应商都有设备系列的概念，**意法半导体**（**STM**）也不例外——数据手册通常是针对整个设备系列编写的。STM系列中设备之间最显著的区别通常是RAM/ROM和封装大小。然而，在更强大的设备中也会添加额外的外围设备——例如，更大的封装将开始包括并行RAM控制器。具有更多RAM/ROM的设备将包括更强大的定时器外围设备、更多的通信外围设备或特定领域的外围设备，例如加密模块。
- en: Moving between devices in a given device family should be easy to do, so it
    is advisable to start on one end of the family (high is usually advisable) and
    see where the project goes. If scope creep was kept to a minimum, it may be possible
    to painlessly downgrade the MCU after all of the major features have been developed,
    saving some BOM cost.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在给定设备系列中的设备之间迁移应该很容易，因此建议从系列的某一端开始（通常建议从高端开始）并看看项目会走向何方。如果范围蔓延被控制在最小范围内，那么在所有主要功能开发完成后，可能可以轻松地将MCU降级，从而节省一些BOM成本。
- en: That wraps up our list of considerations for the raw MCU. However, going out
    and buying a single chip and letting it sit on a desk won't do us much good for
    writing firmware. We need a way of powering the device, and communicating with
    it—we need a dev board!
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这就结束了我们对原始MCU的考虑清单。然而，仅仅购买一个芯片并将其放在桌子上对我们编写固件并没有多大帮助。我们需要一种方法来供电设备，并与它通信——我们需要一个开发板！
- en: Development board considerations
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发板考虑事项
- en: A dev board is any piece of hardware that engineers use during the early development
    phase of a project. Dev boards aren't just for MCUs; they are useful for many
    different types of hardware—anything from op-amps to **field-programmable gat
    arrays** (**FPGAs**).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 开发板是工程师在项目早期开发阶段使用的任何硬件。开发板不仅适用于MCU；它们对许多不同类型的硬件都很有用——从运算放大器到**现场可编程门阵列**（FPGA）。
- en: 'MCU dev boards should provide a few key functions:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: MCU开发板应提供一些关键功能：
- en: Ancillary circuitry, required to power and run the MCU
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 辅助电路，用于供电和运行MCU
- en: A way to program and communicate with the MCU
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一种编程和与MCU通信的方法
- en: Connectors for easy connection to external circuitry
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于轻松连接外部电路的连接器
- en: Possibly, some useful on-board ICs to exercise some of the peripherals
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能包含一些有用的板载IC，以测试一些外围设备
- en: There are many different routes that can be taken when it comes to evaluating
    MCUs. We're currently enjoying a period of time where hardware is inexpensive
    and commonly available. Because of this, there are a plethora of options to choose
    from for evaluating hardware. There are three major groupings that a piece of
    prototyping hardware tends to fall into, each of which has strengths and weaknesses.
    Of course, you can also roll your own dev board or prototype, if you have specific
    requirements.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在评估MCU时，有许多不同的途径可以选择。我们目前正处于一个硬件便宜且普遍可用的时期。正因为如此，有大量的选项可供选择来评估硬件。一块原型硬件通常倾向于分为三个主要类别，每个类别都有其优势和劣势。当然，如果你有特定的要求，你也可以自己制作开发板或原型。
- en: What a development platform is and why it matters
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发平台是什么以及为什么它很重要
- en: For our purposes, a development platform is an ecosystem of products that allows
    for a high degree of abstraction across multiple vendors. The primary focus of
    a platform is delivering large amounts of functionality with the smallest amount
    of effort possible, which is excellent when the main purpose is to create a prototype
    as quickly as possible.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 就我们的目的而言，开发平台是一个产品生态系统，它允许在多个供应商之间实现高度抽象。平台的主要焦点是以尽可能少的努力提供大量功能，当主要目的是尽可能快地创建原型时，这是极好的。
- en: In order to deliver large amounts of functionality across multiple vendors,
    standardized interfaces, ease of use, and flexibility tends to be emphasized.
    With these values, the platform itself is what the focal point is (as it should
    be) and individual differentiating features of particular devices tend to go largely
    unnoticed, that is, unless you're interested in coding them specifically, which
    takes additional time and ends up requiring you to put more focus into developing *for*
    the platform instead of *with* the platform.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在多个供应商之间提供大量功能，标准化接口、易用性和灵活性往往被强调。有了这些价值观，平台本身（正如它应该的那样）成为焦点，而特定设备的个别差异化特征往往被忽视，也就是说，除非你对它们进行特定编码，这需要额外的时间，并最终要求你更多地关注开发 *针对* 平台，而不是 *与* 平台一起开发。
- en: 'Ecosystems develop around platforms, gently guiding platform users into tooling,
    workflows, least-common denominator feature sets, and available hardware. This
    is all well and good if the goal is to produce a proof-of-concept in the least
    amount of time possible. However, if a long-term development and production-worthy
    solution is to be found using the platform approach, the platform will likely
    need to be high quality, extremely well established, and stable. This generally
    means using platforms based on industrial standards available from multiple vendors
    (such as SMARC, QSeven, and COM Express), rather than the current "flavor of the
    year" in the maker space:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 生态系统围绕着平台发展，温和地引导平台用户进入工具、工作流程、最小公分母功能集和可用硬件。如果目标是尽可能快地制作出概念验证，这都很好。然而，如果使用平台方法要找到长期开发和生产级的解决方案，平台很可能会需要高质量、非常成熟和稳定。这通常意味着使用基于多个供应商提供的工业标准平台（如SMARC、QSeven和COM
    Express），而不是当前创客空间中的“年度流行款”：
- en: '![](img/e8665d67-e955-4b25-971f-f2dd3d5542c3.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e8665d67-e955-4b25-971f-f2dd3d5542c3.png)'
- en: The bottom line is that a platform's interest is generally making the platform
    easy to use so that it gains further adoption. This accessibility can lead to
    common interfaces (as seen in the preceding diagram), which can be a boon to productivity
    during fast prototyping efforts but abstract away considerable differences in
    the underlying hardware. Often, platform-specific functionality is so important
    that the platform code will simply virtualize interfaces to make them more accessible,
    often at very significant costs (that is, bit-banging PWM or SPI so they can be
    assigned to specific predetermined pins). So, if you choose to use a platform
    to evaluate hardware (or specifically, an MCU), you should realize that you're
    likely evaluating the platform and its implementation on a given piece of hardware,
    rather than the hardware itself.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 核心问题是，一个平台的主要兴趣通常在于使平台易于使用，以便获得更广泛的采用。这种易用性可能导致常见的接口（如前图所示），这在快速原型设计期间可以提高生产力，但会抽象掉底层硬件的相当大的差异。通常，平台特定的功能非常重要，以至于平台代码会简单地虚拟化接口以使其更易于访问，这通常伴随着非常显著的成本（即位打孔PWM或SPI，以便它们可以被分配到特定的预定引脚）。因此，如果你选择使用平台来评估硬件（或具体来说，是微控制器），你应该意识到你很可能会评估的是该硬件上的平台及其实现，而不是硬件本身。
- en: Evaluation kits
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估套件
- en: 'An **evaluation kit** (**eval kit**) is at the other end of the spectrum when
    it comes to standardized footprints versus focus on the hardware itself. Eval
    kits are generally outfitted with the biggest, most feature-filled model of MCU
    available and are made with the sole intent of *showing off* that piece of hardware.
    This means they will generally not share a common footprint or connectors between
    different target MCUs (refer to the following diagram) because each MCU has different
    primary features and is targeted at a different market. Eval boards will have
    as many peripherals broken out to actual connectors as possible (such as serial,
    Ethernet, SD cards, a CAN bus, and multiple USBs). They also typically include
    a slew of peripheral hardware, such as RAM, eMMC, buttons, sliders, potentiometers,
    displays, and audio codecs to drive speakers. They will almost always break out
    all the interesting MCU pins to easily accessible headers, so developers are able
    to quickly try out any specific hardware configuration they can dream up. Manufacturers
    typically showcase their other non-MCU silicons on eval kit boards as well, in
    an effort to drive more sales in relation to their own products:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到标准化尺寸与关注硬件本身之间的差异时，**评估套件**（**评估套件**）位于光谱的另一端。评估套件通常配备有最大的、功能最丰富的MCU型号，并且仅出于*展示*该硬件的目的而制造。这意味着它们通常不会在不同目标MCU之间共享相同的尺寸或连接器（参见图表）。因为每个MCU都有不同的主要功能和针对不同的市场。评估板将尽可能将外围设备连接到实际的连接器上（例如串行、以太网、SD卡、CAN总线以及多个USB）。它们通常还包括一系列外围硬件，如RAM、eMMC、按钮、滑块、电位计、显示屏和音频编解码器以驱动扬声器。它们几乎总是将所有有趣的MCU引脚连接到易于访问的引脚头上，这样开发者就可以快速尝试任何他们能想到的特定硬件配置。制造商通常还会在评估套件板上展示他们自己的其他非MCU硅芯片，以推动与自身产品相关的更多销售：
- en: '![](img/3bdbf332-8153-40e1-a3fc-8123197b4fbf.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3bdbf332-8153-40e1-a3fc-8123197b4fbf.png)'
- en: To best demonstrate a device's capabilities, eval kits will also ship with a
    plethora of working example code that allows an engineer to interact with all
    of the peripherals included. Unlike the generalized implementations you'd generally
    find with a platform-based implementation, these examples are tailored to demonstrate
    the unique differentiating features of the target device to be evaluated. In the
    first part of this chapter, we discussed choosing hardware based on specific use
    cases. If you're seeking a specific solution to a challenging aspect of a design,
    the importance of having a guided example to working code that exemplifies the
    key differentiating aspects of an MCU can be a serious timesaver (and eye opener)
    compared to having to implement all of those features from scratch yourself.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 为了最好地展示设备的性能，评估套件还会附带大量的工作示例代码，允许工程师与包含的所有外围设备进行交互。与通常在基于平台的实现中找到的通用实现不同，这些示例针对的是要评估的目标设备的独特区分特性。在本章的第一部分，我们讨论了根据特定用例选择硬件。如果你在寻找针对设计挑战方面的特定解决方案，拥有一个指导性的示例代码，它展示了MCU的关键区分特性，可以节省大量时间（并且是启发性的），相比于从头开始实现所有这些功能来说。
- en: All of this functionality comes at a cost—full-blown eval kits typically cost
    a few hundred dollars. However, if your goal is to quickly evaluate a potential
    MCU with a specific purpose in mind, they can quickly pay for themselves by saving
    engineering time and mitigating risk.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些功能都需要付出代价——完整的评估套件通常需要几百美元。然而，如果你的目标是快速评估具有特定目的的潜在MCU，它们可以通过节省工程时间和降低风险来迅速收回成本。
- en: Low-cost demonstration boards
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 低成本演示板
- en: Low-cost demonstration boards have really come into their own in recent years.
    Prices have come down significantly; manufacturers will occasionally sell demonstration
    boards for the same cost as the bare IC that sits on them (occasionally, they
    were actually *less* expensive than buying individual ICs!). Unlike hardware platforms,
    these boards will often have *similar *footprints, but not necessarily the same
    connectors or pinouts.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 近年来，低成本演示板真正地发挥了它们的作用。价格已经大幅下降；制造商有时会将演示板以与它们上面放置的裸IC相同的成本出售（有时甚至比购买单个IC还要便宜！）。与硬件平台不同，这些板通常会有*相似*的尺寸，但并不一定有相同的连接器或引脚排列。
- en: Recently, more low-cost demonstration boards that blur the line between platforms
    and demonstration boards (also called demo boards) have come to the market. Thanks
    to the ubiquity of Arduino®, most low-cost boards will have at least a set of
    Arduino headers that are pin-compatible. However, the availability of compatible
    headers and having a development board that fully embraces an ecosystem are very
    different things. The demo board may not have any software to accompany those
    headers; just because hardware exists and can be plugged into the board does not
    automatically mean you'll get compatible libraries for the target MCU to drive
    the hardware. This doesn't make them incompatible, but the amount of effort to
    get something up and running will be much greater than simply plugging a board
    in and following along with a "hello world" demo.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，市场上出现了更多低成本演示板，这些板模糊了平台和演示板（也称为演示板）之间的界限。得益于Arduino®的普及，大多数低成本板至少会有一组与Arduino引脚兼容的引脚。然而，兼容引脚的可用性和拥有一个完全拥抱生态系统的开发板是两回事。演示板可能没有与这些引脚配套的软件；仅仅因为硬件存在并且可以插入板中，并不意味着你将自动获得用于驱动硬件的目标MCU的兼容库。这并不意味着它们不兼容，但要将它们启动并运行所需的努力将远大于简单地插入板子并跟随“hello
    world”演示。
- en: Some manufacturers are also creating their own standardized headers that are
    common between demo boards, which is at least helpful when migrating between different
    product families (but is obviously limited to that manufacturer). The ST Nucleo
    and NXP Freedom standardized headers are some examples. In an attempt to become
    more user-friendly, these boards will also typically feature mBed compatibility.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 一些制造商还在创建自己的标准化引脚，这些引脚在演示板之间是通用的，这至少在迁移到不同产品系列时是有帮助的（但显然仅限于该制造商）。ST Nucleo和NXP
    Freedom标准化引脚是一些例子。为了使这些板更加用户友好，它们通常还会具备mBed兼容性。
- en: Now that you've been introduced to the different types of development boards,
    we'll take a more detailed look at a single manufacturer's microcontroller line—the
    STM32 line.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了不同类型的开发板，我们将更详细地研究单个制造商的微控制器系列——STM32系列。
- en: Introducing the STM32 product line
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍STM32产品线
- en: Over the past several years, STM has developed a fairly wide range of MCUs.
    Here, we'll discuss how a few of the major swaths of that portfolio fall into
    place relative to the considerations discussed in the *MCU considerations* section
    of this chapter . Most other vendors also arrange their products into major segments
    as well, which tends to make the selection process a bit easier.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的几年里，STM已经开发了一系列相当广泛的MCU。在这里，我们将讨论该产品组合中的一些主要部分是如何与本章“MCU考虑因素”部分中讨论的考虑因素相对应的。大多数其他供应商也将他们的产品组织成主要部分，这通常使选择过程变得更容易一些。
- en: Mainstream
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主流
- en: The STM32 line started with the STM32F1, a Cortex-M3-based MCU, back in 2007\.
    This portion of the product line is meant to serve the majority of high volume
    applications, where cost and performance must be balanced, with minimally complex
    applications. The STM32F0 and the STM32G0 portions of the line are Cortex-M0-
    and Cortex-M0+-based devices that are aimed at low-cost applications. The original
    STM32F1 is Cortex-M3-based and has a very wide range of feature sets, but is starting
    to show its age when its performance is compared to other devices.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: STM32系列始于2007年的STM32F1，这是一款基于Cortex-M3的MCU。该产品线旨在服务于大多数高容量应用，在这些应用中，成本和性能必须平衡，且应用相对简单。STM32F0和STM32G0部分是基于Cortex-M0和Cortex-M0+的设备，旨在低成本应用。原始的STM32F1是基于Cortex-M3的，具有非常广泛的功能集，但与其他设备相比，其性能已经开始显得有些过时。
- en: The STM32F3 was STM's first attempt at providing integrated, higher precision
    analog peripherals (other vendors offer higher precision analog components than
    STM); however, the line falls short of offering truly high-performance analog.
    It includes a 16-bit sigma delta ADC, but the **effective number of bits** (**ENOB**)
    is only stated to be 14 bits, which is slightly better than STM's 12-bit **successive
    approximation** (**SAR**) ADC peripherals, which are included most often. The
    newer Cortex-M4+-based STM32G4 family has the most analog peripherals available,
    including many instances of **programmable gain op-amps** (**PGA**), DACs, ADCs,
    and several comparators, but there are no integrated high-precision ADCs available
    at the time of writing.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: STM32F3是STM首次尝试提供集成、更高精度的模拟外设（其他供应商提供的模拟组件精度高于STM）；然而，该系列在提供真正高性能模拟方面有所不足。它包括一个16位sigma
    delta ADC，但**有效位数**（**ENOB**）仅声明为14位，略好于STM的12位**逐次逼近**（**SAR**）ADC外设，这些外设通常包括在内。基于Cortex-M4+的较新STM32G4家族具有最多的模拟外设，包括许多**可编程增益运算放大器**（**PGA**）、DAC、ADC和几个比较器，但在撰写本文时没有提供集成的高精度ADC。
- en: Look out for the STM32G0 and STM32G4 families increasing the breadth of their
    offerings through 2020—they are both newer lines and STM will likely start filling
    these out with many more devices.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 注意STM32G0和STM32G4系列，它们通过2020年增加了产品线的广度——它们都是较新的系列，STM可能会开始用许多更多设备来填充这些系列。
- en: High performance
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高性能
- en: High-performance MCUs from STM started with the Cortex-M4-based STM32F4\. The
    Cortex-M4 is very similar to the Cortex-M3, but it includes (optional) hardware
    32-bit FPU and DSP instructions, which are both present on all STM3F4 devices.
    All of the devices in the high-performance line are capable of comfortably driving
    very attractive GUIs on controllerless displays, as long as the required RAM is
    available (usually external to the MCU). Acceleration provided by various hardware
    peripherals (such as MIPI **Display Serial Interface** (**DSI**), memory transfers
    via FMC and DMA, and some basic graphics acceleration using the **Chrom-Adaptive
    Real-Time** (**Chrom-ART**) accelerator) make it possible to off-load a fair amount
    of the effort involved with communicating with the display to various peripherals
    so that the CPU can spend time performing other tasks.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: STM的高性能MCU始于基于Cortex-M4的STM32F4。Cortex-M4与Cortex-M3非常相似，但它包括（可选的）硬件32位FPU和DSP指令，这两者都存在于所有STM32F4设备上。高性能系列中的所有设备都能够舒适地驱动无控制器显示器的非常吸引人的GUI，只要所需的RAM可用（通常位于MCU外部）。由各种硬件外设（如MIPI
    **显示串行接口**（**DSI**）、通过FMC和DMA的内存传输以及使用**Chrom-Adaptive Real-Time**（**Chrom-ART**）加速器的某些基本图形加速）提供的加速，使得将大量与显示通信的工作卸载到各种外设成为可能，这样CPU就可以花时间执行其他任务。
- en: 'Here''s a quick breakdown of the two major members of the family and some notable
    features:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这里快速概述了该家族的两个主要成员和一些显著特性：
- en: '| **MCU line** | **CPU** | **Features** |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| **MCU系列** | **CPU** | **特性** |'
- en: '| STM32H7 | Cortex-M7 (480 MHz)Cortex-M4 (240 MHz) (opt) | Highest performance
    MCU from STM64-bit FPU and extended DSP instructions |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| STM32H7 | Cortex-M7 (480 MHz)Cortex-M4 (240 MHz) (opt) | STM最高性能的MCU64位FPU和扩展DSP指令
    |'
- en: '| STM32F7 | Cortex-M7 (216 MHz) | 64-bit FPU and extended DSP instructions
    |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| STM32F7 | Cortex-M7 (216 MHz) | 64位FPU和扩展DSP指令 |'
- en: '| STM32F2 | Cortex-M3 | Offers trade-off for performance versus costHigh level
    of integration (camera interface and USB OTG) |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| STM32F2 | Cortex-M3 | 在性能与成本之间提供权衡高集成度（摄像头接口和USB OTG） |'
- en: This class of MCU can be thought of as *crossover* MCUs. They are powerful enough
    that they can be used for some application tasks that were traditionally reserved
    for full-blown CPUs, but they still have the ease of use of an MCU.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 这类MCU可以被认为是*跨界* MCU。它们足够强大，可以用于一些传统上为全功能CPU保留的应用任务，但它们仍然具有MCU的易用性。
- en: The heterogeneous multi-core approach
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异构多核方法
- en: In 2019, STM launched the STM32MP line, which was the company's first entry
    into the application processor space. This family offers a single or dual-core
    Cortex-A7 at 650 MHz, along with a single Cortex-M4 running at 209 MHz. STM appears
    to be targeting the high-volume, low-cost portion of the market with these solutions
    by focusing on a lower core count and packages that require fewer PCB layers using
    less expensive fabrication techniques.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 2019年，STM推出了STM32MP系列，这是公司首次进入应用处理器领域。该系列提供单核或双核Cortex-A7，频率为650 MHz，以及一个运行在209
    MHz的单核Cortex-M4。STM似乎通过关注较低的核心数量和需要较少PCB层以及使用成本较低的制造技术的封装，将这些解决方案定位在市场的高容量、低成本部分。
- en: From a software perspective, the main difference between STM's MCU offerings
    and the new **micro-processor unit** (**MPU**) is that since the MPUs have **memory
    management units** (**MMUs**), they are capable of running a *full OS* via mainline
    Linux kernels, which opens up an entirely different ecosystem of open source software
    (that you don't personally need to write).
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 从软件角度来看，STM的MCU产品与新的**微处理器单元**（**MPU**）之间的主要区别在于，由于MPU具有**内存管理单元**（**MMUs**），它们能够通过主线Linux内核运行**完整的操作系统**，这开辟了一个完全不同的开源软件生态系统（您不必亲自编写）。
- en: The heterogeneous multi-core approach allows designers to split up portions
    of a design and solve them in the domain that they are best suited to. For example,
    a dedicated process controller with a GUI and networking capability could use
    the Cortex-A7 to leverage Linux and gain access to the Qt framework and complex
    networking stacks, while using the Cortex-M4 for all of the real-time control
    aspects.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 异构多核方法允许设计人员将设计的一部分分割开来，并在最适合的领域解决它们。例如，一个具有GUI和网络功能的专业过程控制器可以使用Cortex-A7利用Linux并访问Qt框架和复杂的网络堆栈，同时使用Cortex-M4处理所有实时控制方面。
- en: Implementations of μClinux have been available for the STM32F4 and STM32F7 MCUs
    for years, but because of the lack of MMU on these devices, there is typically
    a pretty hefty performance penalty.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: μClinux的实现已经可用于STM32F4和STM32F7 MCU多年，但由于这些设备上缺乏MMU，通常会有相当大的性能损失。
- en: Of course, with additional capability comes additional complexity. Unlike MCUs,
    there's no way to get around integrating external RAM with the STM32MP line, so
    be prepared for some fairly involved PCB layout (compared to a stand-alone MCU
    solution).
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，随着功能的增加，复杂性也会增加。与MCU不同，STM32MP系列没有绕过集成外部RAM的方法，因此请准备好进行一些相当复杂的PCB布局（与独立MCU解决方案相比）。
- en: Low power
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 低功耗
- en: 'STM''s low power line is squarely aimed at battery-powered devices. Here''s
    a quick comparison between all of the different family members:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: STM的低功耗系列直接针对电池供电的设备。以下是所有不同系列成员的快速比较：
- en: '| **MCU version** | **CPU** | **Description** |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| **MCU版本** | **CPU** | **描述** |'
- en: '| STM32L | Cortex-M0 | Lowest performance and RAM and ROM space of the family,
    but offers fairly good efficiency. |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| STM32L | Cortex-M0 | 该系列性能和RAM以及ROM空间最低，但提供相当好的效率。|'
- en: '| STM32L1 | Cortex-M3 | Higher ROM capacity and offers faster performance with
    the trade-off of increased power consumption. |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| STM32L1 | Cortex-M3 | 具有更高的ROM容量，以增加功耗为代价提供更快的性能。|'
- en: '| STM32L4 and STM32L4+ | Cortex-M4 | Have increased number-crunching capability
    (the STM32L4+ also offers faster clock speeds and larger internal flash storage).
    |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| STM32L4和STM32L4+ | Cortex-M4 | 具有增强的计算能力（STM32L4+还提供更快的时钟速度和更大的内部闪存存储）。|'
- en: '| STM32L5 | Cortex-M33 | Blends performance and power and incorporates the
    latest ARM v8 architecture. Cortex-M33 offers additional security features, such
    as Trust.Zone, and executes instructions more efficiently than Cortex-M4, which
    allows for some additional performance while still keeping power consumption in
    check. |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| STM32L5 | Cortex-M33 | 将性能和功耗相结合，并集成了最新的ARM v8架构。Cortex-M33提供了额外的安全功能，如Trust.Zone，并且比Cortex-M4执行指令更高效，这允许在保持功耗可控的同时提供额外的性能。'
- en: Depending on the exact workload of a given IoT application, it may make sense
    to use a low-power 32-bit MCU, such as the ones in the preceding table. However,
    for very simple applications, low-power 8- and 16-bit MCUs should also be considered.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 根据特定物联网应用的精确工作负载，使用低功耗32位MCU，如上表中的那些，可能是合理的。然而，对于非常简单的应用，也应考虑低功耗的8位和16位MCU。
- en: Wireless
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无线
- en: The STM32WB implements a Cortex-M4 with a dedicated Cortex-M0+ to run a Bluetooth
    BLE stack. This line provides a lot of integration, from large flash memory and
    RAM to mixed-signal analog peripherals, including touch sensors and small segment
    LCDs. Various security features, such as crypto algorithms and a random number
    generator, are also present. Since FCC certification is required for products
    using this family of devices, they will make the most sense for high volume applications.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: STM32WB实现了Cortex-M4，并配备了一个专用的Cortex-M0+来运行蓝牙BLE堆栈。这一系列提供了大量的集成，从大容量闪存和RAM到混合信号模拟外设，包括触摸传感器和小段LCD。还提供了各种安全特性，如加密算法和随机数生成器。由于使用这一系列设备的产品需要FCC认证，因此它们对于大量应用来说最有意义。
- en: With a wide range of MCUs to choose from, STM *probably* has something we can
    use to experiment with an RTOS! It's time to move on to selecting a development
    board to use.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 由于有广泛的MCU可供选择，STM*可能*有我们可以用来实验实时操作系统的东西！现在是时候继续选择要使用的开发板了。
- en: How our development board was selected
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们是如何选择开发板的
- en: Now that we've covered the important considerations for MCU selection and the
    general types of development hardware, let's see how the development board that
    will be used in this book was selected. STM is the only manufacturer that we are
    evaluating in order to limit the examples to something easily digestible. In an
    actual product engineering effort, it behooves the designer to take a fresh look
    at all possible vendors. While everybody has their own preferred way of accomplishing
    cross-vendor searches, an easy way is to use distributor websites.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经讨论了选择MCU的重要考虑因素和一般类型的发展硬件，让我们看看本书中将要使用的开发板是如何选择的。STM是我们唯一评估的制造商，以便将示例限制在易于消化的事物上。在实际的产品工程工作中，设计师应该重新审视所有可能的供应商。虽然每个人都有自己的跨供应商搜索偏好方式，但使用分销商网站是一种简单的方法。
- en: Thanks to well-curated prototyping-oriented distributor websites (such as Digikey
    and Mouser), an engineer is able to perform parametric searches and comparisons
    across many different vendors. One downside to this approach is the searches are
    limited to whatever product lines that specific distributor carries. Another potential
    downside is that the parametric search results are at the mercy of the distributor's
    data entry accuracy and categorization. The upsides to using a distributor website
    directly are that many different vendors are all in one spot, product availability
    can be checked immediately, and semi-real-world pricing is easily seen and filtered.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢精心制作的以原型设计为导向的分销商网站（如Digikey和Mouser），工程师能够跨多个不同供应商执行参数搜索和比较。这种方法的缺点是搜索仅限于特定分销商所携带的产品线。另一个潜在的缺点是参数搜索结果取决于分销商的数据录入准确性和分类。直接使用分销商网站的好处是，许多不同的供应商都集中在一个地方，可以立即检查产品可用性，并且可以轻松查看和筛选半真实世界的定价。
- en: Pricing from prototyping-oriented distributors is considered *semi-real-world*
    because oftentimes, after a product goes into full production it is generally
    more economical to use a quantity-oriented distributor or go directly to the vendor
    for high volumes.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 原型设计导向的分销商的定价被认为是*半真实世界*的，因为通常在产品进入全面生产后，使用以数量为导向的分销商或直接向供应商购买大量产品通常更经济。
- en: Requirements
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 需求
- en: 'Up to this point, we''ve covered all of the considerations that go into selecting
    an MCU for a project at a theoretical level. Now, it''s time to put all of that
    into action and select the MCU that will be used for all of the actual *hands-on*
    exercises. A few things to keep in mind are as follows:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经从理论层面涵盖了选择项目MCU的所有考虑因素。现在，是时候将所有这些付诸实践，并选择用于所有实际*动手*练习的MCU。以下是一些需要注意的事项：
- en: We'll be selecting a dev board *and* MCU—therefore, some of the requirements
    will be aimed at the dev board, which generally isn't a good idea if you're making
    a product that needs to go into long-term production.
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将选择开发板和MCU——因此，一些需求将针对开发板，这对于需要长期生产的产品来说通常不是一个好主意。
- en: Requirements are going to be specific to this book—the requirements that make
    something a good choice for a book probably don't translate to the project you're
    working on. Obviously, your selection criteria will be tailored to your project.
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需求将专门针对这本书——使某物成为好书的选择标准可能不适用于你正在工作的项目。显然，你的选择标准将根据你的项目进行调整。
- en: 'The must-haves—that is, the *requirements—* are as follows:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 必需品——即*需求*——如下：
- en: The target MCU on your dev board will be an STM32 Cortex-M-based CPU.
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您开发板上的目标微控制器将是一个基于STM32 Cortex-M的CPU。
- en: The target MCU must have a **memory protection unit** (**MPU**).
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标微控制器必须有一个**内存保护单元**（**MPU**）。
- en: The dev board must have a visible means of displaying status.
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发板必须有可见的方式来显示状态。
- en: A relatively low cost (such as < USD 50).
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 相对较低的成本（例如< 50美元）。
- en: 'The nice-to-haves—that is, the *desirements* needed—are as follows:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 那些理想中的特性——即所需的*愿望*——如下：
- en: 'Versatility: It would be nice if the dev board could be used with other hardware.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通用性：如果开发板可以与其他硬件一起使用，那将是非常好的。
- en: Virtual communication over USB available as a debug port.
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过USB进行虚拟通信可作为调试端口。
- en: Multiple cores.
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多核。
- en: Requirements justification
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 需求合理性
- en: 'We''re going to be limiting our search to STM32 parts since that''s the example
    family we''re using throughout this book. In [Chapter 15](0f98e454-9804-4589-9854-5c38c9d8d416.xhtml),
    *FreeRTOS Memory Management* we''ll be covering how to prevent tasks from accessing
    memory they shouldn''t, which will require us to make use of a part with a memory
    protection unit. One of the goals of this book is to keep hardware interaction
    as accessible as possible, which leads to the next two requirements: status display
    and cost.'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把搜索范围限制在STM32系列，因为这是我们在这本书中使用的示例系列。在[第15章](0f98e454-9804-4589-9854-5c38c9d8d416.xhtml)，“FreeRTOS内存管理”中，我们将介绍如何防止任务访问它们不应访问的内存，这需要我们使用具有内存保护单元的部件。本书的一个目标是将硬件交互尽可能易于访问，这导致了下一个两个需求：状态显示和成本。
- en: Some means of displaying *status* will likely translate into a simple LED (ideally
    multiple). There should be some form of feedback for the programmer to be able
    to see what's going on at a glance in order to ensure the code is actually doing
    something. In a real embedded environment, this would likely take the form of
    additional instrumentation, such as oscilloscopes, logic analyzers, and DMMs.
    In the spirit of keeping this accessible for as many people as possible, we'll
    be explicitly avoiding those tools. So, rather than relying on external tools
    and the debugger alone, we're going to be on the lookout for on-board indicators.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 一种显示*状态*的方式可能转化为简单的LED（理想情况下是多个）。应该有一些形式的反馈，以便程序员能够一目了然地看到正在发生的事情，以确保代码实际上正在做些什么。在真实的嵌入式环境中，这可能会采取额外的仪器形式，例如示波器、逻辑分析仪和万用表。为了使尽可能多的人能够访问，我们将明确避免使用这些工具。因此，而不是仅仅依赖外部工具和调试器，我们将寻找板载指示器。
- en: The nice-to-haves aren't hard requirements, but they are desirable qualities
    the system would possess in a perfect world. Ideally, the target dev board would
    also be part of a larger hardware ecosystem, which would enable people to use
    existing hardware they might already have to further explore the concepts in this
    book. A USB port attached to the target MCU would also be great to have—that way,
    we would be able to use a virtual comm port to output debug instead of using only
    the debugger. Finally, in [Chapter 16](19872ca7-d0fe-44e7-a4fc-1bdbfda87e59.xhtml),* Multi-Processor
    and Multi-Core Systems*, we will look at a brief introduction and a few tips on
    developing our board with multiple CPUs. Although this topic is deserving of its
    own book (many have already been written from an architectural perspective), it
    would be nice to have some code that we could put into action on actual hardware.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 那些理想中的特性不是硬性要求，但它们是系统在理想世界中应具备的期望品质。理想情况下，目标开发板也应是更大硬件生态系统的一部分，这样人们就可以使用他们可能已经拥有的现有硬件来进一步探索本书中的概念。如果目标微控制器上有一个USB端口，那将是非常棒的——这样我们就可以使用虚拟通信端口来输出调试信息，而不仅仅依赖于调试器。最后，在[第16章](19872ca7-d0fe-44e7-a4fc-1bdbfda87e59.xhtml)，“多处理器和多核系统”，我们将简要介绍一些关于使用多个CPU开发我们的板子的技巧。尽管这个主题值得单独成书（已经有很多从架构角度写的书），但有一些我们可以实际在硬件上运行的代码将会很棒。
- en: Choosing the dev board
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择开发板
- en: 'Alright—we now know what we''re looking for, so let''s get started! As mentioned
    before, distributor websites can be a great place to start because they offer
    excellent parametric search capabilities. If you''re a hardware person, using
    the same search engine will reduce the amount of time spent hunting for parts.
    Of course, this approach isn''t perfect, so if there''s a really specific part
    you''re looking for, you might be better off going directly to your favourite
    manufacturer''s site and searching there instead:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 好的——我们现在知道我们要找什么了，所以让我们开始吧！如前所述，分销商网站是一个很好的起点，因为它们提供了出色的参数搜索功能。如果你是硬件人员，使用相同的搜索引擎将减少寻找零件所需的时间。当然，这种方法并不完美，所以如果你正在寻找一个非常具体的零件，你可能最好直接访问你最喜欢的制造商的网站并在那里搜索：
- en: '![](img/8fe693bd-e9ad-4345-93f0-a825f36f5bf7.png)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8fe693bd-e9ad-4345-93f0-a825f36f5bf7.png)'
- en: 'Here''s an example of the steps we''ve used to narrow down our search using
    a popular distributor in the United States, DigiKey:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我们使用美国一家流行的分销商DigiKey缩小搜索范围的步骤示例：
- en: From DigiKey's home page, [https://www.digikey.com/](https://www.digikey.com/),
    we've started with a search for STM32 and selected eval boards for the MCUs and
    DSPs from the selections.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从DigiKey的主页[https://www.digikey.com/](https://www.digikey.com/)，我们开始搜索STM32，并从选择中选择了MCU和DSP的评估板。
- en: We're only interested in parts that are currently available (not obsolete).
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们只对目前可用的零件感兴趣（不是过时的）。
- en: The dev kit must also be in stock.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开发套件也必须备有库存。
- en: 'Here are the results:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是结果：
- en: '![](img/fb4cf50a-5fca-4f68-8721-dd1c90cdc286.png)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/fb4cf50a-5fca-4f68-8721-dd1c90cdc286.png)'
- en: From our knowledge of the STM32 product line, the MCUs with memory protection
    units have been selected. Currently, this criteria provides 73 available dev platforms,
    ranging from USD 9-550—quite a range. We have most of the hard requirements covered
    already—with the exception of the on-board indicator, which isn't likely to show
    up in a search. Let's see if we can't narrow the field a bit more by including
    some of the *desirements* as well.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们对STM32产品线的了解，已经选择了带有内存保护单元的MCU。目前，这个标准提供了73个可用的开发平台，价格范围从9-550美元——相当广泛。我们已经覆盖了大多数硬性要求——除了板载指示器，这不太可能在搜索中出现。让我们看看是否可以通过包括一些*期望*来进一步缩小范围。
- en: STM refers to their micro-processors as micro-processor units (MPU), which has
    created an overloaded term and some ambiguity when also talking about memory protection
    units (MPU). You'll likely run into both uses of this acronym when browsing websites
    and documentation.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: STM将他们的微处理器称为微处理器单元（MPU），这创造了一个术语的过度使用，并在谈论内存保护单元（MPU）时也带来了一些歧义。当你浏览网站和文档时，你可能会遇到这个缩写的两种用法。
- en: If we're looking for multiple cores, then the STM32H7 and STM32MP1 lines are
    valid options. It turns out there are discovery boards with these parts available
    at a relatively reasonable cost (for what they include) of USD 80, but we're ideally
    looking for hardware closer to the USD 20 range—let's not let the desirements
    interfere with the hard requirements!
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在寻找多核处理器，那么STM32H7和STM32MP1系列是有效的选择。结果证明，这些零件的发现板以相对合理的成本（考虑到它们包含的内容）80美元出售，但我们理想中寻找的是接近20美元范围的硬件——不要让期望干扰了硬性要求！
- en: 'Narrowing the focus to only the processors that don''t violate the pricing
    requirement of < USD 50 leads us to the STM Nucleo line of dev boards. All of
    the Nucleo line is mBed- compatible, which will allow the use of that entire ecosystem,
    should we choose to use it. The other realization that STM had with Nucleo was
    it was a good idea to support existing popular platforms—so, in addition to breaking
    out nearly all of the more relevant MCU pins on a proprietary header, Nucleo boards
    also provide various Arduino-style headers. All Nucleo boards also include an
    ST-Link on-board programmer, some of which can be re-flashed to appear identical
    to a SEGGER J-Link , which is a *huge* plus and will eliminate the need to purchase
    an additional piece of hardware:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 将焦点缩小到不违反低于50美元定价要求的处理器，我们来到了STM Nucleo系列开发板。Nucleo系列的所有产品都与mBed兼容，这将允许我们使用整个生态系统，如果我们选择使用的话。STM对Nucleo的另一个认识是支持现有的流行平台是个好主意——因此，除了在专有引脚上几乎全部提供更相关的MCU引脚外，Nucleo板还提供了各种Arduino风格的引脚。所有的Nucleo板还包括一个ST-Link板载编程器，其中一些可以重新编程以看起来与SEGGER
    J-Link相同，这是一个*巨大的*优点，并将消除购买额外硬件的需求：
- en: '| **Manufacturer ****part number** | **Description** | **Relevant features**
    |'
  id: totrans-214
  prefs: []
  type: TYPE_TB
  zh: '| **制造商** | **零件编号** | **描述** | **相关特性** |'
- en: '| NUCLEO-L432KC | Nucl32 platform | Cortex-M4, one user LED, user USB, Arduino
    Nano v3 compatible, NOT listed as SEGGER J-Link on-board compatible |'
  id: totrans-215
  prefs: []
  type: TYPE_TB
  zh: '| NUCLEO-L432KC | Nucl32平台 | Cortex-M4，一个用户LED，用户USB，Arduino Nano v3兼容，未列为板载SEGGER
    J-Link兼容 |'
- en: '| NUCLEO-F401RE | Nucleo64 platform  | Cortex-M4, one user LED, user USB via
    re-enumeration, Arduino Uno v3 headers, SEGGER J-Link on-board compatible |'
  id: totrans-216
  prefs: []
  type: TYPE_TB
  zh: '| NUCLEO-F401RE | Nucleo64平台 | Cortex-M4，一个用户LED，用户USB通过重新枚举，Arduino Uno v3引脚，板载SEGGER
    J-Link兼容 |'
- en: '| NUCLEO-L4R5ZI | Nucleo144 platform | Cortex-M4, three user LEDs, a dedicated
    user USB OTB, ST Morpho, Arduino Uno v3 headers, SEGGER J-Link on-board compatible
    |'
  id: totrans-217
  prefs: []
  type: TYPE_TB
  zh: '| NUCLEO-L4R5ZI | Nucleo144平台 | Cortex-M4，三个用户LED，专用用户USB OTB，ST Morpho，Arduino
    Uno v3引脚，板载SEGGER J-Link兼容 |'
- en: '| **NUCLEO-F767ZI** | **Nucleo144 platform** | **Cortex-M7, three user LEDs,
    a dedicated user USB, Ethernet, Arduino Uno v3 headers, SEGGER J-Link on-board
    compatible** |'
  id: totrans-218
  prefs: []
  type: TYPE_TB
  zh: '| **NUCLEO-F767ZI** | **Nucleo144平台** | **Cortex-M7，三个用户LED，专用用户USB，以太网，Arduino
    Uno v3引脚，板载SEGGER J-Link兼容** |'
- en: 'Our target platform will be the Nucleo-F767ZI, which incorporates the widest
    range of connectivity and includes the most flexibility for debugging. We''ll
    cover re-flashing the on-board ST-Link to use SEGGER J-Link firmware in [Chapter
    6](699daa80-06ae-4acc-8b93-a81af2eb774b.xhtml), *Debugging Tools for Real-Time
    Systems*. The three user LEDs will make communicating firmware status feedback
    very simple since no additional interfaces will need to be configured. Built-in
    Ethernet allows the development of networked applications. It would have been
    convenient to have a multi-core MCU for our target platform, but none were available
    that met our cost requirement:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标平台将是Nucleo-F767ZI，它集成了最广泛的连接性，并提供了最大的调试灵活性。我们将在第6章[Debugging Tools for
    Real-Time Systems](699daa80-06ae-4acc-8b93-a81af2eb774b.xhtml)中介绍如何重新闪存板载ST-Link以使用SEGGER
    J-Link固件。三个用户LED将使反馈固件状态变得非常简单，因为不需要配置任何额外的接口。内置以太网允许开发网络应用程序。对于我们的目标平台，一个多核MCU将非常方便，但没有一个符合我们的成本要求：
- en: '![](img/dd45871d-0ac9-4599-afcd-f8e59b5e855b.png)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dd45871d-0ac9-4599-afcd-f8e59b5e855b.png)'
- en: Although there are many options when selecting an MCU or development board,
    it doesn't need to be a daunting process, especially when you know your requirements
    and the trade-offs to be made.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在选择MCU或开发板时有很多选择，但这个过程并不需要令人畏惧，尤其是当你知道你的需求和需要做出的权衡时。
- en: Summary
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter has touched on many considerations for selecting an appropriate
    MCU and we've explained the selection process by going through the trade-offs
    made when selecting the dev board used in this book. You should now understand
    the importance of MCU selection and have enough background to begin researching
    and selecting MCUs for your projects. If you're part of a multi-disciplinary team,
    you'll be better positioned to converse with your peers on the trade-offs of using
    various MCUs for a given application.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论了选择合适微控制器（MCU）的许多考虑因素，我们通过分析本书中使用的开发板选择过程中所做出的权衡来解释了选择过程。你现在应该理解了选择MCU的重要性，并且有足够的背景知识开始研究和选择适合你项目的MCU。如果你是跨学科团队的一员，你将更有能力与你的同事就使用各种MCU的权衡进行交流。
- en: In the next chapter, we'll go through a similar exercise, comparing various
    classes of **Integrated Development Environments** (**IDEs**) and choose a suitable
    IDE to code the exercises you'll find in this book, starting with [Chapter 7](2fa909fe-91a6-48c1-8802-8aa767100b8f.xhtml),
    *The FreeRTOS Scheduler*.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将进行类似的练习，比较各种类别的**集成开发环境（IDE**），并选择一个合适的IDE来编写本书中找到的练习，从第7章[The FreeRTOS
    Scheduler](2fa909fe-91a6-48c1-8802-8aa767100b8f.xhtml)开始。
- en: Questions
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'As we conclude, here is a list of questions for you to test your knowledge
    regarding this chapter''s material. You will find the answers in the *Assessments*
    section of the Appendix:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们总结时，这里有一份问题列表，供你测试你对本章材料的了解。你将在附录的*评估*部分找到答案：
- en: Why is it important for firmware engineers to be knowledgeable about the MCU
    they are programming on?
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么固件工程师需要了解他们正在编程的MCU很重要？
- en: 'When selecting an MCU for performance, clock speed is the only factor at play:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择性能型MCU时，时钟速度是唯一起作用的因素：
- en: 'True'
  id: totrans-229
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正确
- en: 'False'
  id: totrans-230
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误
- en: Today's MCUs contain many different pieces of hardware in addition to the CPU.
    What is the general name given to these pieces of hardware?
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 今天的MCU除了CPU外还包含许多不同的硬件组件。这些硬件组件通常被称为什么？
- en: Batteries
  id: totrans-232
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电池
- en: Hardware peripherals
  id: totrans-233
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 硬件外设
- en: Bugs
  id: totrans-234
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缺陷
- en: Name one advantage of using a *platform* approach for development.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出使用*平台*方法进行开发的一个优点。
- en: Name one advantage of using a fully featured evaluation board for development.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出使用功能齐全的评估板进行开发的一个优点。
- en: Name two significant device characteristics when designing low-power applications.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设计低功耗应用时，列出两个重要的设备特性。
- en: Why was an inexpensive development board chosen for this book?
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么选择了一款价格低廉的开发板用于这本书？
- en: Further reading
  id: totrans-239
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'AN4839: An STM application note regarding the level 1 cache system on STM32F7
    devices: [https://www.st.com/content/ccc/resource/technical/document/application_note/group0/08/dd/25/9c/4d/83/43/12/DM00272913/files/DM00272913.pdf/jcr:content/translations/en.DM00272913.pdf](https://www.st.com/content/ccc/resource/technical/document/application_note/group0/08/dd/25/9c/4d/83/43/12/DM00272913/files/DM00272913.pdf/jcr:content/translations/en.DM00272913.pdf)'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AN4839：关于STM32F7设备上1级缓存系统的STM应用笔记：[https://www.st.com/content/ccc/resource/technical/document/application_note/group0/08/dd/25/9c/4d/83/43/12/DM00272913/files/DM00272913.pdf/jcr:content/translations/en.DM00272913.pdf](https://www.st.com/content/ccc/resource/technical/document/application_note/group0/08/dd/25/9c/4d/83/43/12/DM00272913/files/DM00272913.pdf/jcr:content/translations/en.DM00272913.pdf)
- en: 'More information regarding SEGGER ST-Link on-board: [https://www.segger.com/products/debug-probes/j-link/models/other-j-links/st-link-on-board/](https://www.segger.com/products/debug-probes/j-link/models/other-j-links/st-link-on-board/)'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于SEGGER ST-Link板载调试器的更多信息：[https://www.segger.com/products/debug-probes/j-link/models/other-j-links/st-link-on-board/](https://www.segger.com/products/debug-probes/j-link/models/other-j-links/st-link-on-board/)
