- en: Installation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to install Qt on your development machine,
    including Qt Creator, an IDE tailored to use with Qt. You will see how to configure
    the IDE for your needs and learn the basic skills to use that environment. By
    the end of this chapter, you will be able to prepare your working environment
    for both desktop and embedded platforms using the tools included in the Qt release.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'The main topics covered in this chapter are as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Installing Qt and its developer tools
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Main controls of Qt Creator
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Qt documentation
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing the Qt SDK
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before you can start using Qt on your machine, it needs to be downloaded and
    installed. Qt can be installed using dedicated installers that come in two flavors:
    the online installer, which downloads all the needed components on the fly, and
    a much larger offline installer, which already contains all the required components.
    Using an online installer is easier for regular desktop installs, so we prefer
    this approach.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – Installing Qt using an online installer
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'All Qt resources, including the installers, are available at [https://qt.io](https://www.qt.io/).
    To obtain the open source version of Qt, go to [https://www.qt.io/download-open-source/](https://www.qt.io/download-open-source/).
    The page suggests the online installer for your current operating system by default,
    as shown in the following screenshot. Click on the Download Now button to download
    the online installer, or click on View All Downloads to select a different download
    option:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/06afdb67-182a-4ce2-9ce0-5d0925043af6.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
- en: 'When the download is complete run the installer, as shown:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dec2a75e-1445-4cf6-ae41-a5ea38ee752d.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
- en: Click on Next to begin the installation process. If you are using a proxy server,
    click on Settings and adjust your proxy configuration. Then, either log into your
    Qt Account or click on Skip, if you don't have one.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on Next again, and after a while of waiting as the downloader checks
    remote repositories, you''ll be asked for the installation path. Ensure that you
    choose a path where you have write access and enough free space. It''s best to
    put Qt into your personal directory, unless you ran the installer as the system
    administrator user. Clicking on Next again will present you with the choice of
    components that you wish to install, as shown in the following screenshot. You
    will be given different choices depending on your platform:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cecd3474-6c67-4c23-8c63-6b4e163dc805.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
- en: Before we continue, you need to choose which Qt version you want to install.
    We recommend that you use the most recent stable version, that is, the first item
    under the Qt section. Ignore the Preview section, as it contains prerelease packages
    that may be unstable. If you want to be fully consistent with the book, you can
    choose Qt 5.9.0, but it's not required. The installer also allows you to install
    multiple Qt versions at once.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Expand the section corresponding to the Qt version you want to install, and
    choose whichever platforms you need. Select at least one desktop platform to be
    able to build and run desktop applications. When in Windows, you have to make
    additional choices for the desktop builds. Select the 32-bit or 64-bit version
    and choose the compiler you want to be working with. If you have a Microsoft C++
    compiler (provided with Visual Studio or Visual C++ Build Tools), you can select
    the build corresponding to the installed MSVC version. If you don't have a Microsoft
    compiler or you simply don't want to use it, choose the MinGW build and select
    the corresponding MinGW version in the Tools section of the package tree.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: If you want to build Android applications, choose the option corresponding to
    the desired Android platform. In Windows, you can select a UWP build to create
    Universal Windows Platform applications.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: The installer will always install Qt Creator—the IDE (integrated development
    environment) optimized for creating Qt applications. You may also select Qt add-ons
    that you want to use.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: 'After choosing the required components and clicking on Next again, you will
    have to accept the licensing terms for Qt by marking an appropriate choice, as
    shown in the following screenshot:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2a56f29e-39c4-4570-8e5b-0942deb8fb11.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
- en: 'After you click on Install, the installer will begin downloading and installing
    the required packages. Once this is done, your Qt installation will be ready.
    At the end of the process, you will be given an option to launch Qt Creator:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/870b2c6b-2fe3-4834-9f8b-3a885bda9983.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
- en: What just happened?
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The process we went through results in the whole Qt infrastructure appearing
    on your disk. You can examine the directory you pointed to the installer to see
    that it created a number of subdirectories in this directory, one for each version
    of Qt chosen with the installer, and another one called `Tools` that contains
    Qt Creator. The Qt directory also contains a `MaintenanceTool` executable, which
    allows you to add, remove, and update the installed components. The directory
    structure ensures that if you ever decide to install another version of Qt, it
    will not conflict with your existing installation. Furthermore, for each version,
    you can have a number of platform subdirectories that contain the actual Qt installations
    for particular platforms.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: Qt Creator
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that Qt is installed, we will get familiar with Qt Creator and use it to
    verify the installation.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Qt Creator's modes
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After Qt Creator starts, you should be presented with the following screen:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d4f13116-0455-4178-b552-0f8f7dab9877.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
- en: 'The panel on the left allows you to switch between different **modes** of the
    IDE:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: 'Welcome mode: Allows you to quickly open last sessions, projects, load examples,
    and tutorials.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Edit mode: The main mode used to edit the source code of your applications.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Design mode: Contains a visual form editor. Design mode is automatically activated when
    you create or open a Qt Widgets form file (`.ui`) or a QML form file (`.ui.qml`).'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计模式：包含一个可视化表单编辑器。当您创建或打开 Qt Widgets 表单文件（`.ui`）或 QML 表单文件（`.ui.qml`）时，设计模式会自动激活。
- en: 'Debug mode: Automatically activated when you launch the application under debugger.
    It contains additional views for displaying the call stack, the break point list,
    and values of local variables. More views (such as thread lists or values of registers)
    can be enabled when needed.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试模式：在您在调试器下启动应用程序时自动激活。它包含用于显示调用堆栈、断点列表和局部变量值的额外视图。在需要时可以启用更多视图（如线程列表或寄存器值）。
- en: 'Projects mode: Allows you to configure how Qt Creator will build and run your
    application. For example, you can choose which Qt version it will use or add command-line
    arguments here.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目模式：允许您配置 Qt Creator 如何构建和运行您的应用程序。例如，您可以选择它将使用哪个 Qt 版本，或者在此处添加命令行参数。
- en: 'Help mode: Provides access to the Qt documentation. We will focus on this topic
    later in the chapter.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 帮助模式：提供对 Qt 文档的访问。我们将在本章的后面部分关注这个主题。
- en: Setting up compilers, Qt versions, and kits
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置编译器、Qt 版本和工具包
- en: Before Qt Creator can build and run projects, it needs to know which Qt builds,
    compilers, debuggers, and other tools are available. Fortunately, Qt installer
    will usually do it automatically, and Qt Creator is able to automatically detect
    tools that are available system-wide. However, let's verify that our environment
    is properly configured. From the Tools menu, choose Options. Once a dialog box
    pops up, choose Build & Run from the side list. This is the place where we can
    configure the way Qt Creator can build our projects. A complete build configuration
    is called a **kit**. It consists of a Qt installation and a compiler that will
    be executed to perform the build. You can see tabs for all the three entities
    in the Build & Run section of the Options dialog box.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Qt Creator 能够构建和运行项目之前，它需要知道哪些 Qt 构建、编译器、调试器和其他工具可用。幸运的是，Qt 安装程序通常会自动完成这项工作，Qt
    Creator 能够自动检测系统范围内可用的工具。但是，让我们验证我们的环境是否已正确配置。从“工具”菜单中选择“选项”。一旦弹出对话框，从侧边列表中选择“构建和运行”。这是我们可以配置
    Qt Creator 构建项目方式的地方。一个完整的构建配置称为 **工具包**。它由一个 Qt 安装和一个用于执行构建的编译器组成。您可以在“选项”对话框的“构建和运行”部分看到这三个实体的选项卡。
- en: Let's start with the Compilers tab. If your compiler was not autodetected properly
    and is not in the list, click on the Add button, choose your compiler type from
    the list, and fill the name and path to the compiler. If the settings were entered
    correctly, Creator will autofill all the other details. Then, you can click on
    Apply to save the changes.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从“编译器”选项卡开始。如果您的编译器没有正确自动检测并且不在列表中，请点击“添加”按钮，从列表中选择您的编译器类型，并填写编译器的名称和路径。如果设置正确输入，Creator
    将自动填写所有其他详细信息。然后，您可以点击“应用”以保存更改。
- en: Next, you can switch to the Qt Versions tab. Again, if your Qt installation
    was not detected automatically, you can click on Add. This will open a file dialog
    box where you will need to find your Qt installation's directory, where all the
    binary executables are stored (usually in the `bin` directory), and select a binary
    called `qmake`. Qt Creator will warn you if you choose a wrong file. Otherwise,
    your Qt installation and version should be detected properly. If you want, you
    can adjust the version name in the appropriate box.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您可以切换到 Qt 版本选项卡。同样，如果您的 Qt 安装没有自动检测到，您可以点击“添加”。这将打开一个文件对话框，您需要找到您的 Qt 安装目录，其中存储了所有二进制可执行文件（通常在
    `bin` 目录中），并选择一个名为 `qmake` 的二进制文件。如果选择错误文件，Qt Creator 将会警告您。否则，您的 Qt 安装和版本应该能够正确检测。如果您愿意，可以在相应的框中调整版本名称。
- en: The last tab to look at is the Kits tab. It allows you to pair a compiler with
    the Qt version to be used for compilation. In addition to this, for embedded and
    mobile platforms, you can specify a device to deploy to and a `sysroot` directory
    containing all the files needed to build the software for the specified embedded
    platform. Check that the name of each kit is descriptive enough so that you will
    be able to select the correct kit (or kits) for each of your applications. If
    needed, adjust the names of the kits.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 最后要查看的选项卡是“工具包”选项卡。它允许您将编译器与用于编译的 Qt 版本配对。此外，对于嵌入式和移动平台，您可以指定要部署到的设备以及包含构建指定嵌入式平台所需所有文件的
    `sysroot` 目录。请确保每个工具包的名称足够描述性，以便您可以为每个应用程序选择正确的工具包（或工具包）。如果需要，可以调整工具包的名称。
- en: Time for action – Loading an example project
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动手时间 - 加载示例项目
- en: Examples are a great way to explore the capabilities of Qt and find the code
    required for some typical tasks. Each Qt version contains a large set of examples
    that are always up to date. Qt Creator provides an easy way to load and compile
    any example project.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 示例是探索 Qt 功能和查找典型任务所需代码的绝佳方式。每个 Qt 版本都包含一组始终更新的示例。Qt Creator 提供了一种简单的方法来加载和编译任何示例项目。
- en: Let's try loading one to get familiar with Qt Creator's project editing interface.
    Then, we will build the project to check whether the installation and configuration
    were done correctly.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试加载一个示例，以便熟悉 Qt Creator 的项目编辑界面。然后，我们将构建项目以检查安装和配置是否正确完成。
- en: In Qt Creator, click on the Welcome button in the top-left corner of the window
    to switch to the Welcome mode. Click on the Examples button (refer to the previous
    screenshot) to open the list of examples with a search box. Ensure that the kit
    that you want to use is chosen in the drop-down list next to the search box. In
    the box, enter `aff` to filter the list of examples and click on Affine Transformations
    to open the project. If you are asked whether you want to copy the project to
    a new folder, agree.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Qt Creator 中，点击窗口左上角的欢迎按钮以切换到欢迎模式。点击示例按钮（参考上一张截图）以打开带有搜索框的示例列表。确保在搜索框旁边的下拉列表中选择你想要使用的工具包。在框中输入
    `aff` 以过滤示例列表，然后点击仿射变换以打开项目。如果你被问及是否要将项目复制到新文件夹，请同意。
- en: After selecting an example, an additional window appears that contains the documentation
    page of the loaded example. You can close that window when you don't need it.
    Switch back to the main Qt Creator window.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 选择一个示例后，将出现一个包含加载示例文档页面的附加窗口。当你不需要它时，可以关闭该窗口。切换回主 Qt Creator 窗口。
- en: 'Qt Creator will display the Configure Project dialog with the list of available
    kits:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Qt Creator 将显示带有可用工具包列表的“配置项目”对话框：
- en: '![](img/b713f18a-47aa-4bd8-b4d2-6b5904937a68.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b713f18a-47aa-4bd8-b4d2-6b5904937a68.png)'
- en: 'Verify that the kits you want to use are marked with check boxes, and click
    on the Configure Project button. Qt Creator will then present you with the following
    window:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你想要使用的工具包被勾选，然后点击“配置项目”按钮。Qt Creator 将随后显示以下窗口：
- en: '![](img/426493c7-c4f5-4e0c-9d93-bef5f2961b55.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/426493c7-c4f5-4e0c-9d93-bef5f2961b55.png)'
- en: 'This is the Edit mode of Qt Creator. Let''s go through the most important parts
    of this interface:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 Qt Creator 的编辑模式。让我们浏览一下这个界面的最重要的部分：
- en: '**Project tree** is located at the top-left of the window. It displays all
    open projects and the hierarchy of files within them. You can double-click on
    a file to open it for editing. The context menu of projects, directories, and
    files in the project tree contains a lot of useful functions.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**项目树**位于窗口的左上角。它显示所有打开的项目以及它们内部文件的层次结构。你可以双击一个文件来打开它进行编辑。项目树中项目、目录和文件的下拉菜单包含许多有用的功能。'
- en: At the bottom-left of the window, there's a list of **open documents**. The
    file selected in this list will appear in the code editor in the center of the
    window. If the selected file is a Qt Designer form, Qt Creator will automatically
    switch to the Design mode. Each file in the list has a close button.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在窗口的左下角，有一个打开文档的列表。在此列表中选中的文件将出现在窗口中央的代码编辑器中。如果选中的文件是 Qt Designer 表单，Qt Creator
    将自动切换到设计模式。列表中的每个文件都有一个关闭按钮。
- en: The Type to locate field is present at the left of the bottom panel. If you
    want to quickly navigate to another file in the project, type the beginning of
    its name in the field and select it in the pop-up list. Special prefixes can be
    used to enable other search modes. For example, the `c` prefix allows you to search
    for C++ classes. You can press *Ctrl* + *K* to activate this field.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “定位到类型”字段位于底部面板的左侧。如果你想快速导航到项目中的另一个文件，在该字段中输入其名称的开头，并在弹出列表中选择它。可以使用特殊前缀来启用其他搜索模式。例如，`c`
    前缀允许你搜索 C++ 类。你可以按 *Ctrl* + *K* 来激活此字段。
- en: The buttons at the bottom of the left panel allow you to build and run your
    current project under debugger, or normally. The button above them displays names
    of the current project and the current build configuration (for example, Debug
    or Release) and allows you to change them.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 左侧面板底部的按钮允许你在调试器下构建和运行当前项目，或者正常运行。上面的按钮显示当前项目和当前构建配置（例如，调试或发布）的名称，并允许你更改它们。
- en: The output panes appear below the code editor when you select them in the bottom
    panel. The Issues pane contains compiler errors and other related messages. The
    Search Results pane allows you to run a text search in the entire project and
    view its results. The Application Output pane displays the text your application
    has printed to its standard output (`stderr` or `stdout`).
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当您在底部面板中选择它们时，输出面板会出现在代码编辑器下方。问题面板包含编译错误和其他相关消息。搜索结果面板允许您在整个项目中运行文本搜索并查看其结果。应用程序输出面板显示您的应用程序打印到其标准输出（`stderr`
    或 `stdout`）的文本。
- en: Qt Creator is highly configurable, so you can adjust the layout to your liking.
    For example, it's possible to change the locations of panes, add more panes, and
    change keyboard shortcuts for every action.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Qt Creator 非常可配置，因此您可以调整布局以符合您的喜好。例如，您可以更改面板的位置、添加更多面板，以及更改每个操作的快捷键。
- en: Qt documentation
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Qt 文档
- en: Qt project has very thorough documentation. For each API item (class, method,
    and so on), there is a section in the documentation that describes that item and
    mentions things that you need to know. There are also a lot of overview pages
    describing modules and their parts. When you are wondering what some Qt class
    or module is made for or how to use it, the Qt documentation is always a good
    source of information.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Qt 项目具有非常详尽的文档。对于每个 API 项目（类、方法等），文档中都有一个部分描述该项目并提及您需要知道的事情。还有许多概述页面描述模块及其部分。当您想知道某个
    Qt 类或模块是做什么的或如何使用它时，Qt 文档始终是获取信息的好来源。
- en: Qt Creator has an integrated documentation viewer. The most commonly used documentation
    feature is context help. To try it out, open the `main.cpp` file, set the text
    cursor inside the `QApplication` text, and press *F1*. The help section should
    appear to the right of the code editor. It displays the documentation page for
    the `QApplication` class. The same should work for any other Qt class, method,
    macro, and so on. You can click on the Open in Help Mode button on top of the
    help page to switch to the Help mode, where you have more space to view the page.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Qt Creator 集成了文档查看器。最常用的文档功能是上下文帮助。要尝试它，请打开 `main.cpp` 文件，将文本光标置于 `QApplication`
    文本内部，然后按 *F1* 键。帮助部分应该出现在代码编辑器的右侧。它显示 `QApplication` 类的文档页面。对于任何其他 Qt 类、方法、宏等，效果都应相同。您可以在帮助页面顶部的“在帮助模式下打开”按钮上点击，切换到帮助模式，在那里您有更多空间查看页面。
- en: 'Another important feature is the search in documentation index. To do that,
    go to the Help mode by clicking on the Help button on the left panel. In Help
    mode, in the top-left corner of the window, there is a drop-down list that allows
    you to select the mode of the left section: Bookmarks, Contents, Index, or Search.
    Select Index mode, input your request in the Look for: text field and see whether
    there are any search results in the list below the text field. For example, try
    typing `qt core` to search for the Qt Core module overview. If there are results,
    you can press *Enter* to quickly open the first result or double-click on any
    result in the list to open it. If multiple Qt versions are installed, a dialog
    may appear where you need to select the Qt version you are interested in.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要功能是文档索引中的搜索。为此，请通过点击左侧面板上的“帮助”按钮进入帮助模式。在帮助模式下，在窗口的左上角，有一个下拉列表，允许您选择左侧部分的模式：书签、目录、索引或搜索。选择索引模式，在“查找：”文本字段中输入您的请求，并查看文本字段下方是否有任何搜索结果。例如，尝试键入
    `qt core` 以搜索 Qt 核心模块概述。如果有结果，您可以按 *Enter* 键快速打开第一个结果，或者双击列表中的任何结果以打开它。如果安装了多个
    Qt 版本，可能会出现一个对话框，您需要从中选择您感兴趣的 Qt 版本。
- en: Later in this book, we will sometimes refer to Qt documentation pages by their
    names. You can use the method described previously to open these pages in Qt Creator.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的后面部分，我们有时会通过它们的名称来引用 Qt 文档页面。您可以使用之前描述的方法在 Qt Creator 中打开这些页面。
- en: Time for action – Running the Affine Transformations project
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 运行仿射变换项目
- en: Let's try building and running the project to check whether the building environment
    is configured properly. To build the project, click on the hammer icon (Build)
    at the bottom of the left panel. At the right of the bottom panel, a grey progress
    bar will appear to indicate the build progress. When the build finishes, the progress
    bar turns green if the build was successful or red otherwise. After the application
    was built, click on the green triangle icon to run the project.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试构建和运行项目以检查构建环境是否配置正确。要构建项目，请点击左侧面板底部的锤子图标（构建）。在底部面板的右侧，将出现一个灰色进度条以指示构建进度。构建完成后，如果构建成功，进度条将变为绿色，否则为红色。应用程序构建完成后，请点击绿色三角形图标以运行项目。
- en: Qt Creator can automatically save all files and build the project before running
    it, so you can just hit the Run (*Ctrl* + *R*) or Start Debugging (*F5*) button
    after making changes to the project. To verify that this feature is enabled, click
    on Tools and Options in the main menu, go to the Build & Run section, go to the General
    tab, and check that the Save all files before build, Always build project before
    deploying it, and Always deploy project before running it options are checked.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Qt Creator可以在运行项目之前自动保存所有文件并构建项目，因此你只需在更改项目后点击运行（*Ctrl* + *R*）或开始调试（*F5*）按钮。要验证此功能是否启用，请点击主菜单中的“工具”和“选项”，进入“构建和运行”部分，进入“常规”选项卡，并检查“构建前保存所有文件”、“部署前始终构建项目”和“运行前始终部署项目”选项是否被选中。
- en: 'If everything works, after some time, the application should be launched, as
    shown in the next screenshot:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切正常，经过一段时间后，应用程序应该会启动，如图以下截图所示：
- en: '![](img/bb4f2200-6e99-43b3-a5f0-4a3e8f792c94.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/bb4f2200-6e99-43b3-a5f0-4a3e8f792c94.png)'
- en: What just happened?
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: 'How exactly was the project built? To see which kit and which build configuration
    was used, click on the icon in the action bar directly over the green triangle
    icon to open the build configuration popup, as shown in the following screenshot:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 项目究竟是如何构建的？要查看使用了哪个套件以及哪个构建配置，请直接点击位于绿色三角形图标正上方的操作栏中的图标以打开构建配置弹出窗口，如图以下截图所示：
- en: '![](img/a8ae3632-b9a3-41b1-9671-cbc97ec4795a.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/a8ae3632-b9a3-41b1-9671-cbc97ec4795a.png)'
- en: The exact content that you get varies depending on your installation, but in
    general, on the left, you will see the list of kits configured for the project
    and on the right, you will see the list of build configurations defined for that
    kit. You can click on these lists to quickly switch to a different kit or a different
    build configuration. If your project is configured only for one kit, the list
    of kits will not appear here.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你获得的确切内容取决于你的安装，但通常，在左侧，你会看到为项目配置的套件列表，在右侧，你会看到为该套件定义的构建配置列表。你可以点击这些列表以快速切换到不同的套件或不同的构建配置。如果你的项目仅配置了一个套件，套件列表将不会出现在这里。
- en: 'What if you want to use another kit or change how exactly the project is built?
    As mentioned earlier, this is done in the Projects mode. If you go to this mode
    by pressing the Projects button on the left panel, Qt Creator will display the
    current build configuration, as shown in the following screenshot:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想使用另一个套件或更改项目的构建方式？如前所述，这可以在项目模式下完成。如果你通过点击左侧面板上的“项目”按钮进入此模式，Qt Creator将显示当前的构建配置，如图以下截图所示：
- en: '![](img/1b0c6145-1af7-49d8-9cd7-29bc2097dbfe.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/1b0c6145-1af7-49d8-9cd7-29bc2097dbfe.png)'
- en: The left part of this window contains a list of all kits. Kits that are not
    configured to be used with this project are displayed in gray color. You can click
    on them to enable the kit for the current project. To disable a kit, choose the Disable
    Kit option in its context menu.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 此窗口的左侧包含所有套件的列表。未配置为与该项目一起使用的套件以灰色显示。你可以点击它们以启用当前项目的套件。要禁用套件，请在其上下文菜单中选择“禁用套件”选项。
- en: 'Under each enabled kit, there are two sections of the configuration. The Build
    section contains settings related to building the project:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个启用的套件下，有两个配置部分。构建部分包含与构建项目相关的设置：
- en: Shadow build is a build mode that places all temporary build files in a separate
    build directory. This allows you to keep the source directory clean and makes
    your source files easier to track (especially if you use a version control system).
    This mode is enabled by default.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阴影构建是一种将所有临时构建文件放置在单独的构建目录中的构建模式。这可以使你的源目录保持清洁，并使你的源文件更容易跟踪（特别是如果你使用版本控制系统）。此模式默认启用。
- en: Build directory is the location of temporary build files (only if shadow build
    is enabled). Each build configuration of the project needs a separate build directory.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建目录是临时构建文件的位置（仅当启用阴影构建时）。项目的每个构建配置都需要一个单独的构建目录。
- en: 'The Build steps section displays commands that will be run to perform the actual
    building of the project. You can edit command-line arguments of the existing steps
    and add custom build steps. By default, the build process consists of two steps:
    `qmake` (Qt''s project management tool described in the previous chapter) reads
    the project''s `.pro` file and produces a makefile, and then some variation of
    `make` tool (depending on the platform) reads the makefile and executes Qt''s
    special compilers, the C++ compiler, and the linker. For more information about
    `qmake`, look up the `qmake Manual` in the documentation index.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建步骤部分显示了执行实际项目构建的命令。你可以编辑现有步骤的命令行参数，并添加自定义构建步骤。默认情况下，构建过程包括两个步骤：`qmake`（在上一章中描述的Qt项目管理工具）读取项目的`.pro`文件并生成makefile，然后某些`make`工具的变体（取决于平台）读取makefile并执行Qt的特殊编译器、C++编译器和链接器。有关`qmake`的更多信息，请在文档索引中查找`qmake手册`。
- en: The Build environment section allows you to view and change environment variables
    that will be available to the build tools.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建环境部分允许你查看和更改构建工具可用的环境变量。
- en: Most variations of the `make` tool (including `mingw32-make`) accept the `-j
    num_cores` command-line argument that allows `make` to spawn multiple compiler
    processes at the same time. It is highly recommended that you set this argument,
    as it can drastically reduce compilation time for big projects. To do this, click
    on Details at the right part of the Make build step and input `-j num_cores` to
    the Make arguments field (replace `num_cores` with the actual number of processor
    cores on your system). However, MSVC `nmake` does not support this feature. To
    fix this issue, Qt provides a replacement tool called `jom` that supports it.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数`make`工具的变体（包括`mingw32-make`）接受`-j num_cores`命令行参数，这允许`make`同时生成多个编译器进程。强烈建议你设置此参数，因为它可以显著减少大型项目的编译时间。为此，请点击构建步骤右侧的详细信息，并将`-j
    num_cores`输入到Make参数字段中（将`num_cores`替换为系统上的实际处理器核心数）。然而，MSVC `nmake`不支持此功能。为了解决这个问题，Qt提供了一个名为`jom`的替代工具，它支持此功能。
- en: 'There can be multiple build configurations for each kit. By default, three
    configurations are generated: Debug (required for the debugger to work properly),
    Profile (used for profiling), and Release (the build with more optimizations and
    no debug information).'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个工具包，可以有多个构建配置。默认情况下，生成三个配置：调试（调试器正常工作所必需的）、性能（用于性能分析）和发布（具有更多优化且无调试信息的构建）。
- en: The Run section determines how the executable produced by your project will
    be started. Here, you can change your program's command-line arguments, working
    directory, and environment variables. You can add multiple run configurations
    and switch between them using the same button that allows you to choose the current
    kit and build configuration.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 运行部分决定了你的项目生成的可执行文件如何启动。在这里，你可以更改程序的命令行参数、工作目录和环境变量。你可以添加多个运行配置，并使用与选择当前工具包和构建配置相同的按钮在它们之间切换。
- en: In most cases for desktop and mobile platforms, the binary release of Qt you
    download from the web page is sufficient for all your needs. However, for embedded
    systems, especially for ARM-based systems, there is no binary release available,
    or it is too heavy resource wise for such a lightweight system. Fortunately, Qt
    is an open source project, so you can always build it from sources. Qt allows
    you to choose the modules you want to use and has many more configuration options.
    For more information, look up Building Qt Sources in the documentation index.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 对于桌面和移动平台，大多数情况下，从网页上下载的Qt二进制发布版就足够满足所有需求。然而，对于嵌入式系统，特别是基于ARM的系统，没有可用的二进制发布版，或者对于这样一个轻量级系统来说，它太重了。幸运的是，Qt是一个开源项目，因此你可以始终从源代码构建它。Qt允许你选择想要使用的模块，并且有更多的配置选项。有关更多信息，请在文档索引中查找“构建Qt源代码”。
- en: Summary
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: By now, you should be able to install Qt on your development machine. You can
    now use Qt Creator to browse the existing examples and learn from them or to read
    the Qt reference manual to gain additional knowledge. You should have a basic
    understanding of Qt Creator's main controls. In the next chapter, we will finally
    start using the framework, and you will learn how to create graphical user interfaces
    by implementing our very first simple game.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 到现在为止，你应该能够在你的开发机器上安装 Qt。现在你可以使用 Qt Creator 浏览现有的示例并从中学习，或者阅读 Qt 参考手册以获取更多知识。你应该对
    Qt Creator 的主要控件有一个基本的了解。在下一章中，我们终于将开始使用这个框架，你将学习如何通过实现我们非常第一个简单的游戏来创建图形用户界面。
