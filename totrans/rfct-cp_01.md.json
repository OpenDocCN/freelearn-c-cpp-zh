["```cpp\nclass Database {\npublic:\n  template<typename T>\n  std::optional<T> get(const Id& id) const;\n  template<typename T>\n  std::optional<T> get(const std::string& name) const;\n};\n```", "```cpp\n$ grep -rn \"request_id = \" .\n./RequestHandler.cpp:25: request_id = new_request_id;\n./RequestHandler.cpp:122: request_id = request.getId();\n```", "```cpp\nclass Employee {\npublic:\n  std::string get_name();\n  std::string surname();\n  uint64_t getId() const;\n};\n```", "```cpp\nmy_string.find('A');\nmy_string.find(\"A\");\n```", "```cpp\nclass BaseDataProvider {\npublic:\n  BaseDataProvider() = default;\n  BaseDataProvider(const BaseDataProvider&) = delete;\n  BaseDataProvider(BaseDataProvider&&) = default;\n  BaseDataProvider& operator = (const BaseDataProvider&) =\n    delete;\n  BaseDataProvider& operator = (BaseDataProvider&&) =\n    default;\n  virtual ~BaseDataProvider() = default;\n  virtual Data getData() const = 0;\n};\nclass NetworkDataProvider : public BaseDataProvider {\npublic:\n  NetworkDataProvider(const Endpoint& endpoint);\n  Data getData() const override;\n};\nclass FileDataProvider : public BaseDataProvider {\npublic:\n  FileDataProvider(const std::string& filename);\n  Data getData() const override;\n};\n```", "```cpp\nclass DataParser {\npublic:\n  DataParser(const BaseDataProvider& provider);\n  void parse();\n};\n```", "```cpp\n#define BASE_CLASS(TYPE)                 \\\n  template <typename T>                  \\\n  class TYPE {                           \\\n  public:                                \\\n    T value;                             \\\n    TYPE(T val) : value(val) {}          \\\n  };\n#define DERIVED_CLASS(TYPE, BASE)        \\\n  template <typename T>                  \\\n  class TYPE : public BASE<T> {          \\\n  public:                                \\\n    TYPE(T val) : BASE<T>(val) {}        \\\n    T getValue() { return value; } \\\n  };\nBASE_CLASS(Base);\nDERIVED_CLASS(Derived, Base);\nint main() {\n  Derived<int> obj(5);\n  std::cout << obj.getValue() << std::endl;\n  return 0;\n}\n```"]