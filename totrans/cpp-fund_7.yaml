- en: '*Appendix*'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: About
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section is included to assist the students to perform the activities in
    the book. It includes detailed steps that are to be performed by the students
    to achieve the objectives of the activities.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lesson 1: Getting Started'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 1: Find the Factors of 7 between 1 and 100 Using a while Loop'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Import all the required header files before the `main` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the `main` function, create a variable `i` of type `unsigned`, and initialize
    its value as `1`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, use the `while` loop adding the logic where the value of `i` should be
    less than `100`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the scope of the `while` loop, use the if statement with the following logic:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Increase the value of the `i` variable to iterate through the `while` loop
    to validate the condition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output of the program is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Activity 2: Define a Bi-Dimensional Array and Initialize Its Elements'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'After creating a C++ file, include the following header file at the start of
    the program:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, in the `main` function, create a bi-directional array named `foo` of type
    integer, with three rows and three columns, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we will use the concept of a nested `for` loop to iterate through each
    index entry of the `foo` array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the second `for` loop, add the following statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, iterate over the array again to print its values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Lesson 2: Functions'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 3: Calculating if a Person is Eligible to Vote or Not'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Include the header file in the program to print the output as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, create a function named `byreference_age_in_5_years` and the `if` loop
    with the following condition to print the message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `else` block to provide another condition if the age of the user is
    less than 18 years:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `main` function, create a variable of type integer and pass it as a
    reference in the `byreference_age_in_5_years` function as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Activity 4: Apply the Understanding of Passing by Reference or Value in Functions'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'After adding all the required header files, create the first function of type
    integer as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Take by value, return by value, since the types are small in memory and there
    is no reason to use references.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The second function should be written as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Activity 5: Organizing Functions in Namespaces'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Include the required header file and namespace to print the required output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, create a namespace named `LamborghiniCar` with the following `output`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create another namespace named `PorscheCar` and add an `output` function as
    shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the main function, create a variable named `magicNumber` of type integer
    to accept the input from the user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following conditional `if`…`else`-`if`…`else` statement to complete
    the program:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Activity 6: Writing a Math Library for use in a 3D Game'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Add the required header files at the start of the program (`mathlib.h` file
    is provided):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a global `const` variable of type `float` as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `main` function, create two arrays of type `float` and assign the following
    values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, create a variable named `enemy_distance` of type `float` and use the distance
    function to assign the value after calculating it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Using the `circumference` function of `mathlib.h`, calculate and assign the
    enemy visual radius to `view_circumference_for_enemy` of type `float`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a variable named `total_distance` of type `float` and assign the distance
    difference between the two enemies as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print the output using the following print statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Lesson 3: Classes'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 7: Information Hiding Through Getters and Setters'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Define a class named `Coordinates` with its members under a `private` access
    specifier:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the four operations as specified above and make them publicly accessible
    by preceding their declaration with the `public` access specifier. The setters
    (`set_latitude` and `set_longitude`) should take an `int` as a parameter and return
    `void`, while the getters do not take any parameter and return a `float`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The four methods should now be implemented. The setters assign the given value
    to the corresponding members they are supposed to set; the getters return the
    values that are stored.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'An example is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Activity 8: Representing Positions in a 2D Map'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The first step is to create a class named `Coordinates` containing the coordinates
    as data members. These are two floating-point values, `_latitude` and `_longitude`,
    which identify the coordinates on a geographic coordinate system. Additionally,
    these data members are initialized with a `private` access specifier:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, the class is extended with a `public` constructor which takes two arguments
    used to initialize the data members of the class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can also add getters as seen previously to access the class members. An
    example is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Activity 9: Storing Multiple Coordinates of Different Positions in the Map'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Using the RAII programming idiom, write a class that manages memory allocation
    and deletion of an array of `int`. The class has an array of integers as member
    data, which will be used to store the values.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The constructor takes the size of the array as a parameter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The constructor also takes care of allocating memory, which is used to store
    the coordinates.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Finally, define a destructor and make sure to free the previously allocated
    array in its implementation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can add print statements to visualize what is happening:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can use our `managed_array` class as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Activity 10: The AppleTree Class, which Creates an Apple Instance'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First, we need to create a class with a `private` constructor. In this way,
    the object cannot be constructed, because the constructor is not publicly accessible:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `AppleTree` class is defined and contains a method called `createFruit`
    that is in charge of creating an `Apple` and returning it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If we compile this code, we will get an error. At this point, the `Apple` constructor
    is `private`, so the `AppleTree` class cannot access it. We need to declare the
    `AppleTree` class as a `friend` of `Apple` to allow `AppleTree` to access the
    `private` methods of `Apple`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `Apple` object can now be constructed using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This prints the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Activity 11: Ordering Point Objects'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We need to add an overload for the `<` operator to the `Point` class that we
    have previously defined. This takes another object of type `Point` as an argument
    and returns a Boolean indicating whether the object is less than the one provided
    as the parameter, using the previous definition for how to compare the two points:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'At this point, we are able to compare the two `Point` objects:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Since in our example `p_1.x` is initialized to `1` and `p_2.x` to `2`, the result
    of the comparison will be `true`, which indicates that `p_1` comes earlier than
    `p_2` in the order.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Activity 12: Implementing Functors'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Define a class constituted by a `private` data member of type `int` and add
    a constructor to initialize it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Extend it with the call operator `operator()` which takes an `int` as a parameter
    and returns an `int`. The implementation in the function body should return the
    addition of the previously defined `x` value and the parameter of the function
    named `y`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Instantiate an object of the class just defined and invoke the call operator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Lesson 04: Generic Programming and Templates'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 13: Read Objects from a Connection'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We start by including the headers of the files that provided the connection
    and the user account object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can then start to write the `writeObjectToConnection` function. Declare
    a template which takes two `typename` parameters: an `Object` and a `Connection`.
    Call the `static` method `serialize()` on the object to get the `std::array` representing
    the object, then call `writeNext()` on the connection to write the data to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can then write `readObjectFromConnection`. Declare a template taking the
    same two parameters as before: an `Object` and a `Connection`. Inside, we call
    the connection `readNext()` to get the data stored inside the connection, then
    we call the `static` method on the object type `deserialize()` to get an instance
    of the object and return it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, in the `main` function, we can call the functions we created to serialize
    objects. Both with `TcpConnection`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And with `UdpConnection`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output of the program is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Activity 14: UserAccount to Support Multiple Currencies'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We start by including the file defining the currencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We then declare the template class `Account`. It should take a template parameter:
    `Currency`. We store the current balance of the account inside a data member of
    type `Currency`. We also provide a method in order to extract the current value
    of the balance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we create the method `addToBalance`. It should be a template with one
    type parameter, the other currency. The method takes a value of `OtherCurrency`
    and converts it to the value of the currency of the current account with the `to()`
    function, specifying to which currency the value should be converted to. It then
    adds it to the balance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we can try to call our class in the `main` function with some data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output of the program is:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Activity 15: Write a Matrix Class for Mathematical Operations in a Game'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We start by defining a `Matrix` class which takes three template parameters:
    one type and the two dimensions of the `Matrix` class. The dimensions are of type
    `int`. Internally, we create a `std::array` with the size of the number of rows
    times the number of columns, in order to have enough space for all elements of
    the matrix. We add a constructor to initialize the array to *empty*, and a constructor
    to provide a list of values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We add a method `get()` to the class to return a reference to the element `T`.
    The method needs to take the row and column we want to access.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We make sure that the requested indexes are inside the bounds of the matrix,
    otherwise we call `std::abort()`. In the array, we first store all the elements
    of the first row, then all the elements of the second row, and so on. When we
    want to access the elements of the *nth* row, we need to skip all the elements
    of the previous rows, which are going to be the number of elements per row (so
    the number of columns) times the previous rows, resulting in the following method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For convenience, we define a function to print the class as well. We print
    all the elements in the columns separated by spaces, with one column per line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `main` function, we can now use the functions we have defined:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Solution bonus step**:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can add a new method, `multiply`, which takes a `std::array` of type `T`
    with the length of `C` by `const` reference, since we are not modifying it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The function returns an array of the same type, but length `R`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We follow the definition of matrix-vector multiplication to compute the result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can now extend our `main` function to call the `multiply` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Activity 16: Make the Matrix Class Easier to Use'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We start by importing `<functional>` in order to have access to `std::multiplies`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We then change the order of the template parameters in the class `template`,
    so that the size parameters come first. We also add a new template parameter,
    `Multiply`, which is the type we will use for computing the multiplication between
    the elements in the `vector` by default, and we store an instance of it in the
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `get()` function remains the same as the previous activity.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We now need to make sure that the `Multiply` method uses the `Multiply` type
    provided by the user to perform the multiplication.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To do so, we need to make sure to call `multiplier(operand1, operand2)` instead
    of `operand1 * operand2`, so that we use the instance we stored inside the class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can now add an example of how we can use the class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Activity 17: Ensure Users are Logged in When Performing Actions on the Account'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We first declare a template function which takes two type parameters: an `Action`
    and a `Parameter` type.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The function should take the user identification, the action and the parameter.
    The parameter should be accepted as a forwarding reference. As a first step, it
    should check if the user is logged in, by calling the `isLoggenIn()` function.
    If the user is logged in, it should call the `getUserCart()` function, then call
    the action passing the cart and forwarding the parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can test how `execute_on_user_cart` works by calling it in the `main` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Activity 18: Safely Perform Operations on User Cart with an Arbitrary Number
    of Parameters'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We need to expand the previous activity to accept any number of parameters with
    any kind of ref-ness and pass it to the action provided. To do so, we need to
    create a `variadic` template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Declare a `template` function that takes an action and a `variadic` number of
    parameters as template parameters. The function parameters should be the user
    action, the action to perform, and the expanded template parameter `pack`, making
    sure that the parameters are accepted as forwarding references.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside the function, we perform the same checks as before, but now we expand
    the parameters when we forward them to the action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let’s test the new function in our `main` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Lesson 5: Standard Library Containers and Algorithms'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 19: Storing User Accounts'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First, we include the header files for the `array` class and input/output operations
    with the required namespace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'An array of ten elements of type `int` is declared:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Initially, the values of the elements are undefined since it is an array of
    the fundamental data type `int`. The array is initialized using a `for` loop,
    where each element is initialized with its index. The operator `size()` is used
    to evaluate the size of the array and the subscript operator `[ ]` is used to
    access every position of the array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We now want to update the value for the first and last user. We can use `front()`
    and `back()` to access the accounts of these users:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We would like to store the account balance of an arbitrary number of users.
    We then want to add 100 users to the account list, with a balance of 500.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can use `vector` to store an arbitrary number of users. It is defined in
    the `<vector>` header:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we declare a vector of type `int`. Optionally, we reserve enough memory
    to store the 100 users’ account by calling `reserve(100)` to avoid memory reallocation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we modify the `for` loop to add the balance for the users at the end
    of the accounts vector:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Activity 20: Retrieving a User’s Balance from their Given Username'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Include the header file for the `map` class and the header for `string`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a map with the key being `std::string` and the value `int`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Insert the balances of the users inside `map` by using `insert` and `std::make_pair`.
    The first argument is the key, the second one is the value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the `find` function providing the name of the user to find the position
    of the account in the map. Compare it with `end()` to check whether a position
    was found:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, look for the account of `Alice`. We know `Alice` has an account, so there
    is no need to check whether we found a valid position. We can print the value
    of the account using `->second`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Activity 21: Processing User Registration in Order'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First, we include the header file for the `stack` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `stack` providing the type to `store`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We start by storing the form inside the `stack` when the user registers. In
    the body of the `storeRegistrationForm` function, push the element into the queue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, inside `endOfDayRegistrationProcessing`, we get all the elements inside
    the `stack` and then process them. Use the `top()` method to access the top element
    in the `stack` and `pop()` to remove the top element. We stop getting and removing
    the first element when no element is left:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we call our functions with some test data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Activity 22: Airport System Management'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We start by creating the class for `Airplane`. Make sure to first include the
    header for `variant`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, create the class with a constructor that sets the current state of the
    airplane to `AtGate`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, implement the `startTaxi()` method. First, check the current state of the
    airplane with `std::holds_alternative<>()`, and if the airplane is not in the
    correct state, write an error message and return.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If the airplane is in the correct state, change the state to taxi by assigning
    it to the `variant`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We repeat the same process for the `takeOff()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We can now start looking at the `currentStatus()` method. Since we want to perform
    an operation for each of the states in the `variant`, we can use a visitor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Outside the `Airplane` class, create a class that has a method `operator()`
    for each of the types in the airplane state. Inside the method, print the information
    of the state. Remember to make the methods public:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, create the `currentStatus()` method and call the visitor on the state
    using `std::visit`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can now try to call the functions of `Airplane` from the `main` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Lesson 6: Object-Oriented Programming'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 23: Creating Game Characters'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Create a `Character` class that has a `public` method `moveTo` that prints
    `Moved to position`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `struct` named `Position`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create two classes `Hero` and `Enemy` that are derived from the class `Character`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a class `Spell` with the constructor that prints the name of the person
    casting the spell:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The class `Hero` should have a public method to cast a spell. Use the value
    from the `Spell` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The class `Enemy` should have a public method to swing a sword which prints
    `Swinging sword`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Implement the `main` method that calls these methods in various classes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Activity 24: Calculating Employee Salaries'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can create a class `Employee` with two virtual methods, `getBaseSalary`
    and `getBonus`, since we want to change those methods based on the type of employee:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We also define a method, `getTotalComp`, which does not need to be virtual,
    but will call the two virtual methods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We then derive a `Manager` class from it, overriding the method for computing
    the bonus. We might also want to override `getBaseSalary` if we want to give a
    different base salary to managers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a class `Department` as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, in the `main` function, call the `Department`, `Employee`, and `Manager`
    classes as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Activity 25: Retrieving User Information'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We have to write the code that can be independent of where the data is coming
    from. So, we create an interface `UserProfileStorage` for retrieving the `CustomerProfile`
    from a `UserId`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, write the `UserProfileCache` class that inherits from `UserProfileStorage`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `main` function, call the `UserProfileCache` class and `exampleOfUsage`
    function as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Activity 26: Creating a Factory for UserProfileStorage'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Write the following code that needs the `UserProfileStorage` class, as shown.
    To allow that, we provide a factory class, which has a method `create` that provides
    an instance of `UserProfileStorage`. Write this class making sure that the user
    does not have to manage the memory for the interface manually:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We want the `UserProfileStorageFactory` class to return a `unique_ptr` so that
    it manages the lifetime of the interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, in the `main` function, call the `UserProfileStorageFactory` class as
    shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Activity 27: Using a Database Connection for Multiple Operations'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First, create a `DatabaseConnection` class that can be used in parallel. We
    want to reuse it as much as possible, and we know we can use `std::async` to start
    a new parallel task:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Assuming there are two functions `updateOrderList(DatabaseConnection&)` and
    `scheduleOrderProcessing(DatabaseConnection&)`, write a function that creates
    a `DatabaseConnection` and gives it to the two parallel tasks. (Note that we don’t
    know which task finishes first):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You must understand when and how to create a `shared_ptr`. You can also use
    the following code to write the `shared_ptr` correctly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There are several users of the connection, and we do not know which one is the
    owner, since the connection needs to stay alive as long as anyone is using it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To model this, we use a `shared_ptr`. Remember that we need a copy of the `shared_ptr`
    to exist in order for the connection to remain valid:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `main` function as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
