["```cpp\n__attribute__ ((section(\".isr_vector\")))\nvoid (* const IV[])(void) =\n{\n  (void (*)(void))(END_STACK),\n  isr_reset,\n  isr_nmi,\n  isr_hard_fault,\n  isr_mem_fault,\n  isr_bus_fault,\n  isr_usage_fault,\n  0, 0, 0, 0,\n  isr_svc,\n  isr_dbgmon,\n  0,\n  isr_pendsv,\n  isr_systick,\n```", "```cpp\n  isr_uart0,\n  isr_ethernet,\n  /* … many more external interrupts follow */\n};\n```", "```cpp\nvoid isr_bus_fault(void) {\n  /* Bus error. Panic! */\n  while(1);\n}\n```", "```cpp\nvoid isr_reset(void)\n{\n  unsigned int *src, *dst;\n  src = (unsigned int *) &_stored_data;\n  dst = (unsigned int *) &_start_data;\n  while (dst != (unsigned int *)&_end_data) {\n    *dst = *src;\n    dst++;\n    src++;\n  }\n  dst = &_start_bss;\n  while (dst != (unsigned int *)&_end_bss) {\n    *dst = 0;\n    dst++;\n  }\n  main();\n}\n```", "```cpp\n.text :\n{\n  *(.isr_vector)\n  *(.text*)\n  *(.rodata*)\n} > FLASH\n```", "```cpp\n_stored_data = .;\n```", "```cpp\n.data : AT (_stored_data)\n{\n  _start_data = .;\n  *(.data*)\n  . = ALIGN(4);\n  _end_data = .;\n} > RAM\n```", "```cpp\n.bss :\n{\n  _start_bss = .;\n  *(.bss*)\n  . = ALIGN(4);\n  _end_bss = .;\n  _end = .;\n} > RAM\n```", "```cpp\nEND_STACK = ORIGIN(RAM) + LENGTH(RAM);\n```", "```cpp\n.text 0x0000000000000000 0x168\n0x0000000000000000 _start_text = .\n*(.isr_vector)\n.isr_vector 0x0000000000000000 0xf0 startup.o\n0x0000000000000000 IV\n*(.text*)\n.text 0x00000000000000f0 0x78 startup.o\n0x00000000000000f0 isr_reset\n0x0000000000000134 isr_fault\n0x000000000000013a isr_empty\n0x0000000000000146 main\n```", "```cpp\n0x0000000000000000 _start_text = .\n0x0000000000000168 _end_text = .\n0x0000000020000000 _start_data = .\n0x0000000020000004 _end_data = .\n0x0000000020000004 _start_bss = .\n0x0000000020000328 _end_bss = .\n0x0000000020000328 _end = .\n```", "```cpp\nCROSS_COMPILE=arm-none-eabi-\nCC=$(CROSS_COMPILE)gcc\nLD=$(CROSS_COMPILE)ld\nOBJCOPY=$(CROSS_COMPILE)objcopy\n```", "```cpp\nCFLAGS=-mcpu=cortex-m3 -mthumb -g -ggdb -Wall -Wno-main\nLDFLAGS=-T target.ld -gc-sections -nostdlib -Map=image.map\n```", "```cpp\nimage.bin: image.elf\n $(OBJCOPY) -O binary $^ $@\n```", "```cpp\narm-none-eabi-objcopy -O binary image.elf image.bin\n```", "```cpp\nimage.elf: startup.o target.ld\n $(LD) $(LDFLAGS) startup.o -o $@\n```", "```cpp\narm-none-eabi-ld -T target.ld -gc-sections -nostdlib -Map=image.map startup.o -o image.elf\n```", "```cpp\narm-none-eabi-gcc -c -o startup.o startup.c -mcpu=cortex-m3 -mthumb -g -ggdb -Wall -Wno-main\n```", "```cpp\nclean:\n rm -f image.bin image.elf *.o image.map\n```", "```cpp\nFLASH (rx) : ORIGIN = 0x00000000, LENGTH = 0x00001000\n```", "```cpp\nFLASH (rx) : ORIGIN = 0x00001000, LENGTH = 0x0003F000\n```", "```cpp\nuint32_t app_end_stack = (*((uint32_t *)(APP_OFFSET)));\nvoid (* app_entry)(void);\napp_entry = (void *)(*((uint32_t *)(APP_OFFSET + 4)));\n```", "```cpp\nasm volatile(\"msr msp, %0\" ::\"r\"(app_end_stack));\n```", "```cpp\nuint32_t * VTOR = (uint32_t *)0xE000ED08;\n*VTOR = (uint32_t *)(APP_OFFSET);\n```", "```cpp\nasm volatile (\"cpsid i\");\n```", "```cpp\nasm volatile (\"cpsie i\");\n```", "```cpp\nasm volatile(\"mov pc, %0\" :: \"r\"(app_entry));\n```", "```cpp\n$ arm-none-eabi-objcopy -O binary --pad-to=4096 --gap-fill=0xFF bootloader.elf bootloader.bin\n$ arm-none-eabi-objcopy -O binary app.elf app.bin\n$ cat bootloader.bin app.bin > image.bin\n```", "```cpp\n> add-symbol-file app.elf\nadd symbol table from file \"app.elf\"(y or n) y\nReading symbols from app.elf...done.\n```", "```cpp\n> b main\nBreakpoint 1 at 0x14e: main. (2 locations)\n> info b\nNum Type Disp Enb Address What\n1 breakpoint keep y <MULTIPLE>\n1.1 y 0x0000014e in main at startup_bl.c:53\n1.2 y 0x00001158 in main at startup.c:53\n```", "```cpp\n.text :\n{\n  _start_text = .;\n  KEEP(*(.isr_vector))\n  . = 0x400;\n  KEEP(*(.utils))\n  *(.text*)\n  *(.rodata*)\n  . = ALIGN(4);\n  _end_text = .;\n} > FLASH\n```", "```cpp\n__attribute__((section(\".utils\"),used))\n static void *utils_interface[4] = {\n   (void *)(utils_open),\n   (void *)(utils_write),\n   (void *)(utils_read),\n   (void *)(utils_close)\n};\n```", "```cpp\nstatic void **utils_interface = (void**)(0x00000400);\n```", "```cpp\nstatic inline int utils_read(void *buf, int size) {\n  int (*do_read)(void*, int) = (int (*)(void*,int))\n    (utils_interface[2]);\n  return do_read(buf, size);\n}\n```"]