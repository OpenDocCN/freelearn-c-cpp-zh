["```cpp\nsudo apt-get install freeglut3-dev\n```", "```cpp\n//opengldrawshapes.c\n\n#include <GL/glut.h>\n\nvoid drawshapes() {\n  glClearColor(0.0 f, 0.0 f, 0.0 f, 1.0 f);\n  /* Making background color black as first \n   All the 3 arguments R, G, B are 0.0 */\n  glClear(GL_COLOR_BUFFER_BIT);\n  glBegin(GL_QUADS);\n  glColor3f(0.0 f, 0.0 f, 1.0 f);\n  /* Making picture color blue (in RGB mode), as third argument is 1\\. */\n  glVertex2f(0.0 f, 0.0 f);\n  glVertex2f(0.0 f, .75 f);\n  glVertex2f(-.75 f, .75 f);\n  glVertex2f(-.75 f, 0.0 f);\n  glEnd();\n  glLineWidth(2.0);\n  glColor3f(1.0, 0.0, 0.0);\n  glBegin(GL_LINES);\n  glVertex2f(-0.5, -0.5);\n  glVertex2f(0.5, -0.5);\n  glEnd();\n  glColor3f(1.0, 0.0, 0.0);\n  glPointSize(3.0);\n  /* Width of point size is set to 3 pixel */\n  glBegin(GL_POINTS);\n  glVertex2f(-.25 f, -0.25 f);\n  glVertex2f(0.25 f, -0.25 f);\n  glEnd();\n  glBegin(GL_TRIANGLES);\n  glColor3f(0, 1, 0);\n  glVertex2f(0, 0);\n  glVertex2f(.5, .5);\n  glVertex2f(1, 0);\n  glEnd();\n  glFlush();\n}\n\nint main(int argc, char ** argv) {\n  glutInit( & argc, argv);\n  glutCreateWindow(\"Drawing some shapes\");\n  /* Giving title to the window */\n  glutInitWindowSize(1500, 1500);\n  /* Defining the window size that is width and height of window */\n  glutInitWindowPosition(0, 0);\n  glutDisplayFunc(drawshapes);\n  glutMainLoop();\n  return 0;\n}\n```", "```cpp\ngcc filename.c -lGL -lGLU -lglut \n```", "```cpp\ngcc opengldrawshapes.c -lGL -lGLU -lglut -lm -o opengldrawshapes\n```", "```cpp\n$./opengldrawshapes\n```", "```cpp\n//opengldrawshapes2.c\n\n#include <GL/glut.h> \n#include<math.h> \n#define pi 3.142857 \n\nvoid drawshapes() { \n    glClearColor(0.0f, 0.0f, 0.0f, 1.0f); \n    glClear(GL_COLOR_BUFFER_BIT);  \n    glColor3f(0.0f, 1.0f, 0.0f); \n    glBegin(GL_LINE_LOOP); \n        for (int i=0; i <360; i++) \n        { \n            float angle = i*pi/180; \n            glVertex2f(cos(angle)*0.5,sin(angle)*0.5);                                              }\n    glEnd();\n    glFlush(); \n} \n\nint main(int argc, char** argv) {\n    glutInit(&argc, argv);    \n    glutCreateWindow(\"Drawing some shapes\"); \n    glutInitWindowSize(1500, 1500);  \n    glutInitWindowPosition(0, 0);\n    glutDisplayFunc(drawshapes); \n    glutMainLoop();     \n    return 0; \n}\n```", "```cpp\ngcc opengldrawshapes2.c -lGL -lGLU -lglut -lm -o opengldrawshapes2\n```", "```cpp\n$./opengldrawshapes2\n```", "```cpp\n//openglmouseclick.c\n\n#include <GL/glut.h> \n\nint noOfClicks = 0; \nint coord[2][2]; \nint leftPressed = 0; \n\nvoid drawLine(void) \n{ \n    glClearColor(0.0, 0.0, 0.0, 1.0);  \n    glClear(GL_COLOR_BUFFER_BIT); \n    glBegin(GL_LINES); \n        for(int i=0; i<noOfClicks; i++) {\n            glVertex2f(coord[i][0],coord[i][1]); \n        } \n    glEnd(); \n    glutSwapBuffers(); \n}  \n\nvoid projection(int width, int height) \n{ \n    glViewport(0, 0, width, height); \n    glMatrixMode(GL_PROJECTION); \n    glLoadIdentity(); \n    gluOrtho2D(0, width, height, 0); \n    glMatrixMode(GL_MODELVIEW); \n} \n\nvoid mouseEvents(int button, int state, int x, int y) \n{ \n    switch (button) {\n        case GLUT_LEFT_BUTTON:\n            if (state == GLUT_DOWN) {\n                leftPressed = 1;\n            }\n            if (state == GLUT_UP) { \n                if(leftPressed) {                                                                                                                        coord[noOfClicks][0]=x;                                                                                                     coord[noOfClicks][1]=y;                                                                                                     noOfClicks++;                                                                                                     leftPressed = 0;                                                                                 }                                                                                 glutIdleFunc(NULL);                                                \n            }  \n            break;                                 \n        default:                                                 \n            break;                 \n    } \n    drawLine(); \n} \n\nint main(int argc, char **argv) \n{ \n    glutInit(&argc, argv); \n    glutInitWindowSize(1000, 1000); \n    glutCreateWindow(\"Displaying lines between two mouse clicks\"); \n    glutDisplayFunc(drawLine); \n    glutReshapeFunc(projection); \n    glutMouseFunc(mouseEvents); \n    glutMainLoop(); \n    return 0;            \n}\n```", "```cpp\ngcc openglmouseclick.c -lGL -lGLU -lglut -lm -o openglmouseclick\n```", "```cpp\n$./openglmouseclick\n```", "```cpp\n//opengldrawbar.c\n\n#include <GL/glut.h> \n\nvoid display(){ \n    float x,y,width, result[] = {10.0, 15.0, 5.0};\n    int i, barCount = 3;\n    x=1.0; \n    y = 0.0; \n    width = 2.0; \n    glColor3f(1.0, 0.0, 0.0); \n    glClearColor(1.0, 1.0, 1.0, 1.0); \n    gluOrtho2D(-5, 20, -5, 20); \n    glBegin(GL_LINES);\n        glVertex2f(-30, 0.0);       \n        glVertex2f(30, 0.0); \n        glVertex2f(0.0, -30);\n        glVertex2f(0.0, 30); \n    glEnd(); \n    for(i=0; i<barCount; i++){ \n        x = (i * width) + i + 1; \n        glBegin(GL_POLYGON); \n            glVertex2f(x, y); \n            glVertex2f(x, y+result[i]); \n            glVertex2f(x+width, y+result[i]); \n            glVertex2f(x+width, y); \n        glEnd(); \n    } \n    glFlush(); \n} \n\nint main(int argc, char *argv[]){ \n    glutInit(&argc, argv); \n    glutInitWindowPosition(0, 0); \n    glutInitWindowSize(500, 500); \n    glutCreateWindow(\"Drawing Bar Chart\"); \n    glutDisplayFunc(display); \n    glutMainLoop(); \n    return 0; \n}\n```", "```cpp\ngcc opengldrawbar.c -lGL -lGLU -lglut -lm -o opengldrawbar\n```", "```cpp\n$./opengldrawbar\n```", "```cpp\n//ballanim.c\n\n#include<stdio.h> \n#include<GL/glut.h> \n#include<math.h> \n#define pi 3.142857 \n\nvoid animball (void) \n{ \n    int x,y; \n    glClearColor(0.0, 0.0, 0.0, 1.0); \n    glColor3f(0.0, 1.0, 0.0); \n    glPointSize(1.0); \n    glMatrixMode(GL_PROJECTION); \n    glLoadIdentity(); \n    gluOrtho2D(-350, 350, -350, 350); \n    for (float j = 0; j < 1000; j += 0.01) \n    { \n        glClear(GL_COLOR_BUFFER_BIT); \n        glBegin(GL_POINTS);      \n            for (int i=0; i <360; i++) \n            { \n                x = 100 * cos(i); \n                y = 100 * sin(i); \n                /* If 100 is radius of circle, then circle is defined as \n                x=100*cos(i) and y=100*sin(i) */\n                glVertex2i(x / 2 - 1 * cos(j), y / 2 - 150* sin(j));\n            }\n        glEnd(); \n        glFlush(); \n    } \n} \n\nint main (int argc, char** argv) \n{ \n    glutInit(&argc, argv); \n    glutCreateWindow(\"Animating a ball\"); \n    glutInitWindowSize(1000, 1000); \n    glutInitWindowPosition(0, 0); \n    glutDisplayFunc(animball); \n    glutMainLoop(); \n}\n```", "```cpp\ngcc ballanim.c -lGL -lGLU -lglut -lm -o ballanim\n```", "```cpp\n$./ballanim\n```"]