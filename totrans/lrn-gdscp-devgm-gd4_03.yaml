- en: '3'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Grouping Information in Arrays, Loops, and Dictionaries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In [*Chapter 2*](B19358_02.xhtml#_idTextAnchor044), we learned about the all-important
    basics of programming: variables and control flow. Although these building blocks
    may seem rudimentary and limiting, they are already Turing-complete, meaning you
    can create any program you’ve ever used with them. I’m not saying that you should
    or that it would be easy, but you could.'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we’ll learn about new data structures and more advanced control
    flows to make our lives easier when dealing with large quantities of data. First,
    we’ll see how arrays can help us create lists of data. Then, we’ll learn all about
    loops, a very powerful control flow structure to execute code blocks multiple
    times instead of just once. Lastly, we’ll learn about dictionaries, a data structure
    that helps us group other pieces of data in little packages.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Arrays
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loops
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dictionaries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Null'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you get stuck anywhere, don’t forget that you can find an example of everything
    we do in this chapter in the `chapter03` folder of the repository. You can find
    the repository here: [https://github.com/PacktPublishing/Learning-GDScript-by-Developing-a-Game-with-Godot-4/tree/main/chapter03](https://github.com/PacktPublishing/Learning-GDScript-by-Developing-a-Game-with-Godot-4/tree/main/chapter03).'
  prefs: []
  type: TYPE_NORMAL
- en: Arrays
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Often, we want to work with a list of data, such as a list of items the player
    possesses. An **array** is precisely the data structure we want to use for such
    occasions: it is a list that can contain elements from other data types; it is
    a container type.'
  prefs: []
  type: TYPE_NORMAL
- en: Containers
  prefs: []
  type: TYPE_NORMAL
- en: We call an array a **container** because we can store and retrieve pieces of
    data of other data types within them, such as integers, strings, Booleans, and
    such. An array contains other data.
  prefs: []
  type: TYPE_NORMAL
- en: Containers structure other data so that it is easier to work with.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s have a look at what an array is in code and how we can create one and
    access its elements.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an array
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Creating an array looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Here, we created an array – a list of four strings – and put it in the `inventory`
    variable. Notice that all the elements of the array are contained within square
    brackets, `[]`, and that each element is separated by a *comma*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Creating an array in one line like we did just now is often fine. But sometimes,
    it can make the line of code too long. Luckily, we can also put every element
    on a separate line; this promotes readability and makes it easier to edit the
    array later if we want to add or remove an element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This snippet of code will create the same array as the one at the start of this
    section, but with the added benefit that each element is nicely formatted on a
    new line and thus easier to read.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Note that we don’t have to indent the elements of the array with a tab, but
    the general convention is to do so and I urge you to do the same. This is part
    of the clean code philosophy makes it extra clear that these elements are part
    of the array. We’ll talk more about writing clean code in [*Chapter 5*](B19358_05.xhtml#_idTextAnchor365).
  prefs: []
  type: TYPE_NORMAL
- en: As an experiment, try printing out a variable that contains an array.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing values
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have our list – the array – we want to be able to access its elements.
    To do this, we must specify the number of the element we want to retrieve within
    the square brackets, right behind the name of the variable. To get the first element
    of our array, for example, we must write the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'But what is this? I told you we were retrieving the first element in the array,
    but I used the number 0 to do so. That is because, unlike human counting, arrays
    are 0-based, meaning that they start counting from 0\. By extension, the second
    element can be accessed by using `1` and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Contents** **of inventory** |'
  prefs: []
  type: TYPE_TB
- en: '| --- |'
  prefs: []
  type: TYPE_TB
- en: '| **Index** | **Value** |'
  prefs: []
  type: TYPE_TB
- en: '| `0` | Key |'
  prefs: []
  type: TYPE_TB
- en: '| `1` | Potion |'
  prefs: []
  type: TYPE_TB
- en: '| `2` | Red Flower |'
  prefs: []
  type: TYPE_TB
- en: '| `3` | Boots |'
  prefs: []
  type: TYPE_TB
- en: Table 3.1 – The contents of the inventory array
  prefs: []
  type: TYPE_NORMAL
- en: Zero-based counting makes a lot of sense within the context of mathematic concepts
    and computer algorithms, so we better get used to it.
  prefs: []
  type: TYPE_NORMAL
- en: We call the position an element is at in an array its **index**.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an experiment, instead of directly using a number to retrieve an element,
    try putting a variable that contains a number between the square brackets like
    so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: You can also try accessing an element that is not in the array, such as element
    `1000`, and see what errors pop up. Try negative numbers too.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing elements backward
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You might have noticed something strange if you tried out one of the earlier
    experiments where I asked you to access an array’s element using negative numbers.
    Although negative numbers don’t always give an error, some return elements from
    the array.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is because if you use negative numbers, you access elements within the
    array from the back! So, the element with index -1 is the last, -2 is the second
    last, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This indexing trick will prove to be very useful.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the elements of an array
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An interesting property of arrays is that we can treat each element as a regular
    variable. To assign a new value to an element, for example, we can just assign
    it a new value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also use one of the special assignment operators, such as `+=` or `-=`,
    that we learned about in [*Chapter 2*](B19358_02.xhtml#_idTextAnchor044) to directly
    change one of the values in the array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: var an_array = [
  prefs: []
  type: TYPE_NORMAL
- en: 5,          # An Integer
  prefs: []
  type: TYPE_NORMAL
- en: '"seven",    # A string'
  prefs: []
  type: TYPE_NORMAL
- en: 8.9,        # A float
  prefs: []
  type: TYPE_NORMAL
- en: True        # A boolean
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: var player_name = "Eric"
  prefs: []
  type: TYPE_NORMAL
- en: print(player_name[0])
  prefs: []
  type: TYPE_NORMAL
- en: 'Prints out: E'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: var inventory = ["Key", "Potion"]
  prefs: []
  type: TYPE_NORMAL
- en: inventory.append("Sword")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: var loot = ["Gold Coin", "Dagger"]
  prefs: []
  type: TYPE_NORMAL
- en: inventory.append_array(loot)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: inventory.remove_at(1)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: var index_of_sword = inventory.find("Sword")
  prefs: []
  type: TYPE_NORMAL
- en: inventory.remove_at(index_of_sword)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: inventory.erase("Sword")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'func _ready():'
  prefs: []
  type: TYPE_NORMAL
- en: var inventory = [
  prefs: []
  type: TYPE_NORMAL
- en: '"Boots",'
  prefs: []
  type: TYPE_NORMAL
- en: '"Bananas",'
  prefs: []
  type: TYPE_NORMAL
- en: '"Bees"'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: print(inventory[100])
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: var my_vairable = 5
  prefs: []
  type: TYPE_NORMAL
- en: my_variable = "Hello, World"
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: var inventory = ["Boots", "Bananas", "Bandages"]
  prefs: []
  type: TYPE_NORMAL
- en: 'for item in inventory:'
  prefs: []
  type: TYPE_NORMAL
- en: print("You possess ", item)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'for <temporary_variable_name> in <array>:'
  prefs: []
  type: TYPE_NORMAL
- en: <code_block>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: var numbers_from_0_to_5 = range(6)
  prefs: []
  type: TYPE_NORMAL
- en: print(numbers_from_0_to_5 )
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: var inventory = ["Boots", "Bananas", "Bandages"]
  prefs: []
  type: TYPE_NORMAL
- en: 'for index in range(inventory.size()):'
  prefs: []
  type: TYPE_NORMAL
- en: print("The item at index ", index, " is ", inventory[index])
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'for number in range(10, 20):'
  prefs: []
  type: TYPE_NORMAL
- en: print(number)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: var inventory = ["Boots", "Bananas", "Bandages", "Warm Gloves", "Goggles"]
  prefs: []
  type: TYPE_NORMAL
- en: 'while inventory.size() > 3:'
  prefs: []
  type: TYPE_NORMAL
- en: inventory.remove_at(0)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'while <condition>:'
  prefs: []
  type: TYPE_NORMAL
- en: <code_block>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: var inventory = ["Boots", "Banana", "Bandages"]
  prefs: []
  type: TYPE_NORMAL
- en: 'for item in inventory.size():'
  prefs: []
  type: TYPE_NORMAL
- en: 'if item == "Banana":'
  prefs: []
  type: TYPE_NORMAL
- en: continue
  prefs: []
  type: TYPE_NORMAL
- en: print(item)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Boots
  prefs: []
  type: TYPE_NORMAL
- en: Bandages
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: var inventory = ["Boots", "Bandages", "Bananas", "Warm Gloves", "Goggles"]
  prefs: []
  type: TYPE_NORMAL
- en: 'while inventory.size() > 3:'
  prefs: []
  type: TYPE_NORMAL
- en: 'if inventory[0] == "Bananas":'
  prefs: []
  type: TYPE_NORMAL
- en: break
  prefs: []
  type: TYPE_NORMAL
- en: prints("Removing :", inventory[0])
  prefs: []
  type: TYPE_NORMAL
- en: inventory.remove_at(0)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Removing Boots
  prefs: []
  type: TYPE_NORMAL
- en: Removing Bandages
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: var item = {
  prefs: []
  type: TYPE_NORMAL
- en: '"name": "Boots",'
  prefs: []
  type: TYPE_NORMAL
- en: '"price": 5,'
  prefs: []
  type: TYPE_NORMAL
- en: '"weight": 3.9'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: print({
  prefs: []
  type: TYPE_NORMAL
- en: '"name": "Boots",'
  prefs: []
  type: TYPE_NORMAL
- en: '"price": 5,'
  prefs: []
  type: TYPE_NORMAL
- en: '"weight": 3.9'
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: var a_mess_dictionary = {
  prefs: []
  type: TYPE_NORMAL
- en: '"string_key": [4, 6, 9],'
  prefs: []
  type: TYPE_NORMAL
- en: '3.14: "Pi",'
  prefs: []
  type: TYPE_NORMAL
- en: '123: {'
  prefs: []
  type: TYPE_NORMAL
- en: '"sub_key": "This is a sub-dictionary"'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: var item = {
  prefs: []
  type: TYPE_NORMAL
- en: '"name": "Boots",'
  prefs: []
  type: TYPE_NORMAL
- en: '"price": 5,'
  prefs: []
  type: TYPE_NORMAL
- en: '"weight": 3.9'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: print(item["name"])
  prefs: []
  type: TYPE_NORMAL
- en: item["price"] += 10
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: var key_variable = "name"
  prefs: []
  type: TYPE_NORMAL
- en: print(item[key_variable])
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: print(item.name)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: item["color"] = "blue"
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'var item = { "name": "Banana" }'
  prefs: []
  type: TYPE_NORMAL
- en: 'if item.has("name"):'
  prefs: []
  type: TYPE_NORMAL
- en: print(item.name)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'var item = { "name": "Banana" }'
  prefs: []
  type: TYPE_NORMAL
- en: item.erase("name")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: var item = {
  prefs: []
  type: TYPE_NORMAL
- en: '"name": "Boots",'
  prefs: []
  type: TYPE_NORMAL
- en: '"price": 5,'
  prefs: []
  type: TYPE_NORMAL
- en: '"weight": 3.9'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 'for key in item:'
  prefs: []
  type: TYPE_NORMAL
- en: prints(key, "is", item[key])
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'for value in item.values():'
  prefs: []
  type: TYPE_NORMAL
- en: print(value)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: var inventory = [
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"name": "Boots",'
  prefs: []
  type: TYPE_NORMAL
- en: '"price": 5,'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"name": "Magical Gloves",'
  prefs: []
  type: TYPE_NORMAL
- en: '"price": 10'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"name": "Cool Glasses",'
  prefs: []
  type: TYPE_NORMAL
- en: '"price": 58'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: 'for item_index in inventory.size():'
  prefs: []
  type: TYPE_NORMAL
- en: print("Stats of item ", item_index, ":")
  prefs: []
  type: TYPE_NORMAL
- en: var item = inventory[item_index]
  prefs: []
  type: TYPE_NORMAL
- en: 'for key in item:'
  prefs: []
  type: TYPE_NORMAL
- en: printt(key, item[key])
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: var inventory
  prefs: []
  type: TYPE_NORMAL
- en: print(inventory)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: var inventory
  prefs: []
  type: TYPE_NORMAL
- en: inventory.append("Boots")
  prefs: []
  type: TYPE_NORMAL
- en: var number_of_lives
  prefs: []
  type: TYPE_NORMAL
- en: number_of_lives -= 2
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: var number_of_lives
  prefs: []
  type: TYPE_NORMAL
- en: 'if number_of_lives != null:'
  prefs: []
  type: TYPE_NORMAL
- en: number_of_lives -= 2
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: var item = {
  prefs: []
  type: TYPE_NORMAL
- en: '"name": "Boots",'
  prefs: []
  type: TYPE_NORMAL
- en: '"price": 5,'
  prefs: []
  type: TYPE_NORMAL
- en: '"weight": 3.9'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: print(item["height"])
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: var inventory = [
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{ "name": "Banana", "price": 5 },'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{ "name": "Ring of Might", "price": 100 },'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{ "name": "Potion of Healing", "price": 58 },'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{ "name": "Helmet", "price": 44 },'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ']'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: var grocery list = ["Appels", "Flour", "Lettuce", "Jelly", "Soap"]
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: var person = {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"name": "Mike",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"eye_color": "brown",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"hair_color": "blonde",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"height": 184,'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: var number_of_lives
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
