["```cpp\nglm::vec2 p1 = glm::vec2(2.0f, 10.0f); \n\nWhere the 2 arguments passed in are the x and y position. \n```", "```cpp\nglm::vec3 p2 = glm::vec3(10.0f, 5.0f, 2.0f);   \n```", "```cpp\nglm::mat4 matrix = glm::mat4(1.0f); \n\nHere the 1.0f parameter passed in shows that the matrix is initialized as a identity matrix. \n\n```", "```cpp\n#include <glm/ext.hpp> \nglm::mat4 translation = glm::translate(glm::mat4(1.0f),  \nglm::vec3(3.0f,4.0f, 8.0f)); \n```", "```cpp\nglm:: mat4 scale = glm::scale(glm::mat4(1.0f),  \nglm::vec3( 2.0f, 2.0f, 2.0f));\n```", "```cpp\nglm::mat4 rxMatrix = glm::rotate(glm::mat4(), glm::radians(45.0f), glm::vec3(1.0, 0.0, 0.0)); \nglm::mat4 ryMatrix = glm::rotate(glm::mat4(), glm::radians(25.0f), glm::vec3(0.0, 1.0, 0.0)); \nglm::mat4 rzMatrix = glm::rotate(glm::mat4(), glm::radians(10.0f), glm::vec3(0.0, 0.0, 1.0)); \n```", "```cpp\n   glm::vec3cameraPos = glm::vec3(0.0f, 0.0f, 200.0f); \n   glm::vec3cameraFront = glm::vec3(0.0f, 0.0f, 0.0f); \n   glm::vec3cameraUp = glm::vec3(0.0f, 1.0f, 0.0f); \n```", "```cpp\n   glm::mat4 viewMatrix = glm::lookAt(cameraPos, cameraPos + \n   cameraFront, cameraUp); \n```", "```cpp\nGLfloat FOV = 45.0f; \nGLfloat width = 1280.0f; \nGLfloat height = 720.0f; \nGLfloat nearPlane = 0.1f; \nGlfloat farPlane = 1000.0f; \n\nglm::mat4 projectionMatrix = glm::perspective(FOV, width /height, nearPlane, farPlane); \n```", "```cpp\n float vertices[] = { \n    -0.5f, -0.5f, 0.0f, \n     0.5f, -0.5f, 0.0f, \n     0.0f,  0.5f, 0.0f \n};   \n```", "```cpp\nunsigned int VAO; \nglGenVertexArrays(1, &VAO);\n```", "```cpp\nunsigned int VBO; \nglGenBuffers(1, &VBO);   \n```", "```cpp\nglBindBuffer(GL_ARRAY_BUFFER, VBO);   \n```", "```cpp\nglBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);  \n```", "```cpp\n glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 *  \n sizeof(float), (void*)0);  \n```", "```cpp\nglEnableVertexAttribArray(0);\n```", "```cpp\n#version 430 core \nlayout (location = 0) in vec3 position; \n\nvoid main() \n{ \n    gl_Position = vec4(position.x, position.y, position.z, 1.0); \n} \n```", "```cpp\n#version 430 core \nout vec4 Color; \n\nvoid main() \n{ \n    Color = vec4(0.0f, 0.0f, 1.0f, 1.0f); \n} \n\n```"]