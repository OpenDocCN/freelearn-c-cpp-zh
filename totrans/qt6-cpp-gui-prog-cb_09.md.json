["```cpp\n    import QtQuick\n    import QtQuick.Window\n    Window {\n        visible: true\n        width: 640\n        height: 480\n        title: qsTr(\"Hello World\")\n    }\n    ```", "```cpp\n    import QtQuick\n    import QtQuick.Dialogs\n    import yourprojectname\n    ```", "```cpp\n    Window {\n        visible: true\n        title: \"Hello World\"\n        width: 360\n        height: 360\n        Screen01 {\n            anchors.fill: parent\n            loginButton.onClicked: {\n            messageDialog.text = \"Username is \" +\n            userInput.text + \" and password is \" + passInput.text\n            messageDialog.visible = true\n            }\n        }\n    ```", "```cpp\n        MessageDialog {\n            id: messageDialog\n            title: \"Fake login\"\n            text: \"\"\n            onAccepted: {\n            console.log(\"You have clicked the login button\")\n            Qt.quit()\n            }\n        }\n    }\n    ```", "```cpp\n    MultiPointTouchArea {\n        id: touchArea\n        anchors.fill: parent\n        touchPoints: [\n            TouchPoint { id: point1 },\n            TouchPoint { id: point2 }\n        ]\n    }\n    ```", "```cpp\n    Image {\n        id: tux\n        x: (window.width / 2) - (tux.width / 2)\n        y: (window.height / 2) - (tux.height / 2)\n        width: 200\n        height: 220\n        fillMode: Image.PreserveAspectFit\n        source: \"tux.png\"\n    }\n    ```", "```cpp\n    import QtQuick\n    import QtQuick.Window\n    Window {\n        visible: true\n        Screen01 {\n            anchors.fill: parent\n        }\n    }\n    ```", "```cpp\n    property int prevPointX: 0\n    property int prevPointY: 0\n    property int curPointX: 0\n    property int curPointY: 0\n    property int prevDistX: 0\n    property int prevDistY: 0\n    property int curDistX: 0\n    property int curDistY: 0\n    property int tuxWidth: tux.width\n    property int tuxHeight: tux.height\n    ```", "```cpp\n    touchArea.onPressed: {\n        if (touchArea.touchPoints[1].pressed) {\n            if (touchArea.touchPoints[1].x < touchArea.touchPoints[0].x)\n                prevDistX = touchArea.touchPoints[1].x -    touchArea.touchPoints[0].x\n            else\n                prevDistX = touchArea.touchPoints[0].x -\n                touchArea.touchPoints[1].x\n            if (touchArea.touchPoints[1].y < touchArea.touchPoints[0].y)\n                prevDistY = touchArea.touchPoints[1].y -\n                touchArea.touchPoints[0].y\n            else\n                prevDistY = touchArea.touchPoints[0].y -\n                touchArea.touchPoints[1].y\n                tuxWidth = tux.width\n                tuxHeight = tux.height\n            }\n        }\n    ```", "```cpp\n            touchArea.onUpdated: {\n                if (!touchArea.touchPoints[1].pressed) {\n                    tux.x += touchArea.touchPoints[0].x -\n            touchArea.touchPoints[0].previousX\n                    tux.y += touchArea.touchPoints[0].y -\n            touchArea.touchPoints[0].previousY\n                }\n                else {\n                    if (touchArea.touchPoints[1].x <\n                    touchArea.touchPoints[0].x)\n                        curDistX = touchArea.touchPoints[1].x - touchArea.touchPoints[0].x\n                    else\n                        curDistX = touchArea.touchPoints[0].x - touchArea.touchPoints[1].x\n                    if (touchArea.touchPoints[1].y <\n                    touchArea.touchPoints[0].y)\n                        curDistY = touchArea.touchPoints[1].y - touchArea.touchPoints[0].y\n                    else\n                        curDistY = touchArea.touchPoints[0].y - touchArea.touchPoints[1].y\n                    tux.width = tuxWidth + prevDistX - curDistX\n                    tux.height = tuxHeight + prevDistY - curDistY\n                }\n            }\n    ```", "```cpp\nproperty int myValue;\n```", "```cpp\nproperty int myValue: 100;\n```", "```cpp\n    import QtQuick\n    import QtQuick.Window\n    Window {\n        visible: true\n        width: 480\n        height: 550\n        Screen01 {\n            anchors.fill: parent\n        }\n    }\n    ```", "```cpp\n            button1 {\n                Behavior on y { SpringAnimation { spring: 2; damping: 0.2 } }\n                onClicked: {\n                    button1.y = button1.y + (45 * 3)\n                }\n            }\n            button2 {\n                    Behavior on y { SpringAnimation { spring: 2; damping: 0.2 } }\n                onClicked: {\n                    button2.y = button2.y + (45 * 3)\n                }\n            }\n    ```", "```cpp\n            button3 {\n                Behavior on y { SpringAnimation { spring: 2; damping: 0.2 } }\n                onClicked: {\n                    button3.y = button3.y + (45 * 3)\n                }\n            }\n    ```", "```cpp\n            fan {\n                RotationAnimation on rotation {\n                    id: anim01\n                    loops: Animation.Infinite\n                    from: 0\n                    to: -360\n                    duration: 1000\n                }\n            }\n    ```", "```cpp\n            mouseArea1 {\n                onPressed: {\n                    if (anim01.paused)\n                        anim01.resume()\n                    else\n                        anim01.pause()\n                }\n            }\n    ```", "```cpp\n            rectangle2 {\n                id: rect2\n                state: \"BLUE\"\n                states: [\n                    State {\n                        name: \"BLUE\"\n                        PropertyChanges {\n                            target: rect2\n                            color: \"blue\"\n                }\n            },\n    ```", "```cpp\n                    State {\n                        name: \"RED\"\n                        PropertyChanges {\n                            target: rect2\n                            color: \"red\"\n                        }\n                    }\n                ]\n            }\n    ```", "```cpp\n            mouseArea2 {\n                SequentialAnimation on x {\n                    loops: Animation.Infinite\n                    PropertyAnimation { to: 150; duration: 1500 }\n                    PropertyAnimation { to: 50; duration: 500 }\n                }\n                onClicked: {\n                    if (rect2.state == \"BLUE\")\n                        rect2.state = \"RED\"\n                    else\n                        rect2.state = \"BLUE\"\n                }\n            }\n    ```", "```cpp\n    import QtQuick\n    Rectangle {\n        id: rectangle1\n        property alias listView1: listView1\n        property double sizeMultiplier: width / 480\n    ```", "```cpp\n        ListView {\n            id: listView1\n            y: 0\n            height: 160\n            orientation: ListView.Vertical\n            boundsBehavior: Flickable.StopAtBounds\n            anchors.fill: parent\n            delegate: Item {\n                width: 80 * sizeMultiplier\n                height: 55 * sizeMultiplier\n    ```", "```cpp\n                Row {\n                    id: row1\n                    Rectangle {\n                        width: listView1.width\n                        height: 55 * sizeMultiplier\n                        gradient: Gradient {\n                            GradientStop { position: 0.0; color: \"#ffffff\" }\n                            GradientStop { position: 1.0; color: \"#f0f0f0\" }\n                        }\n                        opacity: 1.0\n    ```", "```cpp\n                        MouseArea {\n                            id: mouseArea\n                            anchors.fill: parent\n                        }\n                        Image {\n                            anchors.verticalCenter: parent.verticalCenter\n                            x: 15 * sizeMultiplier\n                            width: 30 * sizeMultiplier\n                            height: 30 * sizeMultiplier\n                            source: icon\n                        }\n    ```", "```cpp\n                        Text {\n                            text: title\n                            font.family: \"Courier\"\n                            font.pixelSize: 17 * sizeMultiplier\n                            x: 55 * sizeMultiplier\n                            y: 10 * sizeMultiplier\n                        }\n                        Text {\n                            text: subtitle\n                            font.family: \"Verdana\"\n                            font.pixelSize: 9 * sizeMultiplier\n                            x: 55 * sizeMultiplier\n                            y: 30 * sizeMultiplier\n                        }\n    ```", "```cpp\n                        Image {\n                            anchors.verticalCenter: parent.verticalCenter\n                            x: parent.width - 35 * sizeMultiplier\n                            width: 30 * sizeMultiplier\n                            height: 30 * sizeMultiplier\n                            source: \"images/arrow.png\"\n                        }\n                    }\n                }\n            }\n    ```", "```cpp\n            model: ListModel {\n                ListElement {\n                    title: \"Home\"\n                    subtitle: \"Go back to dashboard\"\n                    icon: \"images/home.png\"\n                }\n                ListElement {\n                    title: \"Map\"\n                    subtitle: \"Help navigate to your destination\"\n                    icon: \"images/map.png\"\n                }\n    ```", "```cpp\n                ListElement {\n                    title: \"Profile\"\n                    subtitle: \"Customize your profile picture\"\n                    icon: \"images/profile.png\"\n                }\n                ListElement {\n                    title: \"Search\"\n                    subtitle: \"Search for nearby places\"\n                    icon: \"images/search.png\"\n                }\n    ```", "```cpp\n                ListElement {\n                    title: \"Settings\"\n                    subtitle: \"Customize your app settings\"\n                    icon: \"images/settings.png\"\n                }\n            }\n        }\n    }\n    ```", "```cpp\n    import QtQuick\n    import QtQuick.Window\n    Window {\n        visible: true\n        width: 480\n        height: 480\n        Screen01 {\n            anchors.fill: parent\n                MouseArea {\n                    onPressed: row1.opacity = 0.5\n                    onReleased: row1.opacity = 1.0\n                }\n            }\n    }\n    ```", "```cpp\n    #ifndef MYCLASS_H\n    #define MYCLASS_H\n    #include <QObject>\n    class MyClass : public QObject\n    {\n        Q_OBJECT\n    public:\n        explicit MyClass(QObject *parent = 0);\n        // Object pointer\n        QObject* my Object;\n        // Must call Q_INVOKABLE so that this function can be used in QML\n        Q_INVOKABLE void setMyObject(QObject* obj);\n    };\n    #endif // MYCLASS_H\n    ```", "```cpp\n    #include \"myclass.h\"\n    MyClass::MyClass(QObject *parent) : Qobject(parent)\n    {\n    }\n    void MyClass::setMyObject(Qobject* obj)\n    {\n        // Set the object pointer\n        my Object = obj;\n    }\n    ```", "```cpp\n    import QtQuick\n    import QtQuick.Window\n    MyClass in the Window object and call its setMyObject() function within the MainForm object, as shown in the following code:\n\n    ```", "```cpp\n\n    ```", "```cpp\n    #include <QGuiApplication>\n    #include <QQmlApplicationEngine>\n    #include <QtQml>\n    #include <QQuickView>\n    #include <QQuickItem>\n    #include <QQuickView>\n    #include \"myclass.h\"\n    int main(int argc, char *argv[])\n    {\n        // Register your class to QML\n        qmlRegisterType<MyClass>(\"MyClassLib\", 1, 0, \"MyClass\");\n    ```", "```cpp\n        QGuiApplication app(argc, argv);\n        QQmlApplicationEngine engine;\n        engine.load(QUrl(QStringLiteral(\"qrc:/content/App.qml\")));\n        QObject* root = engine.rootObjects().value(0);\n        QObject* messageText =\n    root->findChild<QObject*>(\"messageText\");\n        messageText->setProperty(\"text\", QVariant(\"C++ is now in control!\"));\n        messageText->setProperty(\"color\", QVariant(\"green\"));\n        QObject* square = root->findChild<QObject*>(\"square\");\n        square->setProperty(\"color\", QVariant(\"blue\"));\n        return app.exec();\n    }\n    ```", "```cpp\nQ_PROPERTY(QString text MEMBER m_text NOTIFY textChanged)\n```"]