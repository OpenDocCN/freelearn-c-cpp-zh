["```cpp\nint i;\n```", "```cpp\nint *j;\n```", "```cpp\nj=&i;\n```", "```cpp\nprintf(\"Address of i is %d\\n\", &i); \nprintf(\"Address of i is %d\\n\", j);\n```", "```cpp\nprintf(\"Value of i is %d\\n\", i);\nprintf(\"Value of i is %d\\n\", *j);\n```", "```cpp\nint **k;\n```", "```cpp\nk=&j;\n```", "```cpp\nprintf(\"Address of j =%d %d \\n\",&j,k);\n```", "```cpp\nprintf(\"Address of i = %d %d %d\\n\",&i,j,*k);\n```", "```cpp\nprintf(\"Value of i is %d %d %d %d \\n\",i,*(&i),*j,**k);\n```", "```cpp\nprintf(\"Enter a string: \");\nscanf(\"%s\", str);\n```", "```cpp\nptr1=str;\n```", "```cpp\nn=1;\nwhile(*ptr1 !='\\0')\n{\n```", "```cpp\nptr1++;\nn++;\n```", "```cpp\nptr1--;\n```", "```cpp\nptr2=str;\n```", "```cpp\nm=1;\nwhile(m<=n/2)\n```", "```cpp\ntemp=*ptr1;\n*ptr1=*ptr2;\n*ptr2=temp;\n```", "```cpp\nptr1--;\nptr2++;\n```", "```cpp\nprintf(\"Reverse string is %s\", str);\n```", "```cpp\n#include <stdio.h>\nvoid main()\n{\n    char str[255], *ptr1, *ptr2, temp ;\n    int n,m;\n    printf(\"Enter a string: \");\n    scanf(\"%s\", str);\n    ptr1=str;\n    n=1;\n    while(*ptr1 !='\\0')\n    {\n        ptr1++;\n        n++;\n    }\n    ptr1--;\n    ptr2=str;\n    m=1;\n    while(m<=n/2)\n    {\n        temp=*ptr1;\n        *ptr1=*ptr2;\n        *ptr2=temp;\n        ptr1--;\n        ptr2++;;\n        m++;\n    }\n    printf(\"Reverse string is %s\", str);\n}\n```", "```cpp\nD:\\CBook>gcc reversestring.c -o reversestring\n```", "```cpp\nD:\\CBook>./reversestring\nEnter a string: manish\nReverse string is hsinam\n```", "```cpp\n#define max 100\n```", "```cpp\nint p[max]\n```", "```cpp\nprintf(\"How many elements are there? \");\nscanf(\"%d\", &n);\n```", "```cpp\nfor(i=0;i<n;i++)\n    scanf(\"%d\",&p[i]);\n```", "```cpp\nmx=p;\nptr=p;\n```", "```cpp\nif (*mx < *ptr)\n    mx=ptr;\n```", "```cpp\nptr++;\n```", "```cpp\nprintf(\"Largest value is %d\\n\", *mx);\n```", "```cpp\n#include <stdio.h>\n#define max 100\nvoid main()\n{\n    int p[max], i, n, *ptr, *mx;\n    printf(\"How many elements are there? \");\n    scanf(\"%d\", &n);\n    printf(\"Enter %d elements \\n\", n);\n    for(i=0;i<n;i++)\n        scanf(\"%d\",&p[i]);\n    mx=p;\n    ptr=p;\n    for(i=1;i<n;i++)\n    {\n        if (*mx < *ptr)\n            mx=ptr;\n        ptr++;\n    }\n    printf(\"Largest value is %d\\n\", *mx);\n}\n```", "```cpp\nD:\\CBook>gcc largestinarray.c -o largestinarray\n```", "```cpp\nD:\\CBook>./largestinarray\nHow many elements are there? 5\nEnter 5 elements\n15\n3\n70\n35\n20\nLargest value is 70\nYou can see that the program displays the maximum value in the array\n```", "```cpp\nstruct node\n{\n  int data;\n  struct node *next;\n};\n```", "```cpp\nprintf(\"How many elements are there in the linked list ?\");\nscanf(\"%d\",&n);\n```", "```cpp\nnewNode=(struct node *)malloc(sizeof(struct node));\nscanf(\"%d\",&newNode->data);\n```", "```cpp\nstartList = newNode;\ntemp1=startList;\n```", "```cpp\ntemp1->next = newNode;\ntemp1=newNode;\n```", "```cpp\nfor(i=n-2;i>=0;i--)\n```", "```cpp\ntemp1=startList;\ntemp2=temp1->next;\n```", "```cpp\nif(temp1->data > temp2->data)\n```", "```cpp\ntemp1=temp2;\ntemp2=temp2->next;\n```", "```cpp\nk=temp1->data;\ntemp1->data=temp2->data;\ntemp2->data=k;\n```", "```cpp\nt=startList;\n```", "```cpp\nwhile(t!=NULL)\n```", "```cpp\nprintf(\"%d\\t\",t->data);\nt=t->next;\n```", "```cpp\n/* Sort the linked list by bubble sort */\n#include<stdio.h>\n#include <stdlib.h>\nstruct node\n{\n  int data;\n  struct node *next;\n};\nvoid main()\n{\n    struct node *temp1,*temp2, *t,*newNode, *startList;\n    int n,k,i,j;\n    startList=NULL;\n    printf(\"How many elements are there in the linked list ?\");\n    scanf(\"%d\",&n);\n    printf(\"Enter elements in the linked list\\n\");\n    for(i=1;i<=n;i++)\n    {\n        if(startList==NULL)\n        {\n            newNode=(struct node *)malloc(sizeof(struct node));\n            scanf(\"%d\",&newNode->data);\n            newNode->next=NULL;\n            startList = newNode;\n            temp1=startList;\n        }\n        else\n        {\n            newNode=(struct node *)malloc(sizeof(struct node));\n            scanf(\"%d\",&newNode->data);\n            newNode->next=NULL;\n            temp1->next = newNode;\n            temp1=newNode;\n        }\n    }\n    for(i=n-2;i>=0;i--)\n    {\n        temp1=startList;\n        temp2=temp1->next;\n        for(j=0;j<=i;j++)\n        {\n            if(temp1->data > temp2->data)\n            {\n                k=temp1->data;\n                temp1->data=temp2->data;\n                temp2->data=k;\n            }\n            temp1=temp2;\n            temp2=temp2->next;\n        }\n    }\n    printf(\"Sorted order is: \\n\");\n    t=startList;\n    while(t!=NULL)\n    {\n        printf(\"%d\\t\",t->data);\n        t=t->next;\n    }\n}\n```", "```cpp\nD:\\CBook>gcc sortlinkedlist.c -o sortlinkedlist\n```", "```cpp\nD:\\CBook>./sortlinkedlist\nHow many elements are there in the linked list ?5\nEnter elements in the linked list\n3\n1\n7\n4\n2\nSorted order is:\n1       2       3       4       7\n```", "```cpp\nint a[10][10]\n```", "```cpp\n    printf(\"Enter rows and columns of matrix: \");\n    scanf(\"%d %d\", &r, &c);\n```", "```cpp\n    ptr = (int *)malloc(r * c * sizeof(int));\n```", "```cpp\n    for(i=0; i<r; ++i)\n    {\n        for(j=0; j<c; ++j)\n        {\n            scanf(\"%d\", &m);\n             *(ptr+ i*c + j)=m;\n        }\n    }\n```", "```cpp\nfor(i=0; i<r; ++i)\n{\n    for(j=0; j<c; ++j)\n    {\n        printf(\"%d\\t\",*(ptr +i*c + j));\n    }\n    printf(\"\\n\");\n}\n```", "```cpp\n*(ptr +i*c + j);\n*(1000+0*3+0)\n*1000\n```", "```cpp\n*(ptr +i*c + j);\n*(1000+0*3+1)\n*(1000+1)\n*(1002)\n```", "```cpp\n*(ptr +j*c + i))\n```", "```cpp\n#include <stdio.h>\n#include <stdlib.h>\nvoid main()\n{\n    int a[10][10],  r, c, i, j, *ptr,m;\n    printf(\"Enter rows and columns of matrix: \");\n    scanf(\"%d %d\", &r, &c);\n    ptr = (int *)malloc(r * c * sizeof(int));\n    printf(\"\\nEnter elements of matrix:\\n\");\n    for(i=0; i<r; ++i)\n    {\n        for(j=0; j<c; ++j)\n        {\n            scanf(\"%d\", &m);\n             *(ptr+ i*c + j)=m;\n        }\n    }\n    printf(\"\\nMatrix using pointer is: \\n\");\n    for(i=0; i<r; ++i)\n    {\n        for(j=0; j<c; ++j)\n        {\n           printf(\"%d\\t\",*(ptr +i*c + j));\n        }\n        printf(\"\\n\");\n    }\n    printf(\"\\nTranspose of Matrix:\\n\");\n    for(i=0; i<c; ++i)\n    {\n        for(j=0; j<r; ++j)\n        {\n             printf(\"%d\\t\",*(ptr +j*c + i));\n        }\n        printf(\"\\n\");\n   }\n}\n```", "```cpp\nD:\\CBook>gcc transposemat.c -o transposemat\n```", "```cpp\nD:\\CBook>./transposemat\nEnter rows and columns of matrix: 2 3\n\nEnter elements of matrix:\n1\n2\n3\n4\n5\n6\n\nMatrix using pointer is:\n1       2       3\n4       5       6\n\nTranspose of Matrix:\n1       4\n2       5\n3       6\n```", "```cpp\nstruct cart\n{  \n    int orderno;\n    char emailaddress[30];\n    char password[30];\n};\n```", "```cpp\nstruct cart mycart;\nstruct cart *ptrcart, *ptrcust;\n```", "```cpp\nprintf(\"Enter order number: \");\nscanf(\"%d\",&mycart.orderno);\nprintf(\"Enter email address: \");\nscanf(\"%s\",mycart.emailaddress);\nprintf(\"Enter password: \");\nscanf(\"%s\",mycart.password);\n```", "```cpp\nprintf(\"\\nDetails of the customer are as follows:\\n\");\nprintf(\"Order number : %d\\n\", ptrcart->orderno);\nprintf(\"Email address : %s\\n\", ptrcart->emailaddress);\nprintf(\"Password : %s\\n\", ptrcart->password);\n```", "```cpp\nprintf(\"\\nEnter new email address: \");\nscanf(\"%s\",ptrcart->emailaddress);\nprintf(\"Enter new password: \");\nscanf(\"%s\",ptrcart->password);\n/*The new modified values of orderno, emailaddress and password members are displayed using structure variable, mycart using dot operator (.).*/\nprintf(\"\\nModified customer's information is:\\n\");\nprintf(\"Order number: %d\\n\", mycart.orderno);\nprintf(\"Email address: %s\\n\", mycart.emailaddress);\nprintf(\"Password: %s\\n\", mycart.password);\n```", "```cpp\nptrcust=(struct cart *)malloc(sizeof(struct cart));\n```", "```cpp\nprintf(\"Enter order number: \");\nscanf(\"%d\",&ptrcust->orderno);\nprintf(\"Enter email address: \");\nscanf(\"%s\",ptrcust->emailaddress);\nprintf(\"Enter password: \");\nscanf(\"%s\",ptrcust->password);\n```", "```cpp\nprintf(\"\\nDetails of the second customer are as follows:\\n\");\nprintf(\"Order number : %d\\n\", ptrcust->orderno);\nprintf(\"Email address : %s\\n\", ptrcust->emailaddress);\nprintf(\"Password : %s\\n\", ptrcust->password);\n```", "```cpp\n#include <stdio.h>\n#include <stdlib.h>\n\nstruct cart\n{\n    int orderno;\n    char emailaddress[30];\n    char password[30];\n};\n\nvoid main()\n{\n    struct cart mycart;\n    struct cart *ptrcart, *ptrcust;\n    ptrcart = &mycart;\n    printf(\"Enter order number: \");\n    scanf(\"%d\",&mycart.orderno);\n    printf(\"Enter email address: \");\n    scanf(\"%s\",mycart.emailaddress);\n    printf(\"Enter password: \");\n    scanf(\"%s\",mycart.password);\n    printf(\"\\nDetails of the customer are as follows:\\n\");\n    printf(\"Order number : %d\\n\", ptrcart->orderno);\n    printf(\"Email address : %s\\n\", ptrcart->emailaddress);\n    printf(\"Password : %s\\n\", ptrcart->password);\n\n    printf(\"\\nEnter new email address: \");\n    scanf(\"%s\",ptrcart->emailaddress);\n    printf(\"Enter new password: \");\n    scanf(\"%s\",ptrcart->password);\n    printf(\"\\nModified customer's information is:\\n\");\n    printf(\"Order number: %d\\n\", mycart.orderno);\n    printf(\"Email address: %s\\n\", mycart.emailaddress);\n    printf(\"Password: %s\\n\", mycart.password);\n\n    ptrcust=(struct cart *)malloc(sizeof(struct cart));\n    printf(\"\\nEnter information of another customer:\\n\");\n    printf(\"Enter order number: \");\n    scanf(\"%d\",&ptrcust->orderno);\n    printf(\"Enter email address: \");\n    scanf(\"%s\",ptrcust->emailaddress);\n    printf(\"Enter password: \");\n    scanf(\"%s\",ptrcust->password);\n    printf(\"\\nDetails of the second customer are as follows:\\n\");\n    printf(\"Order number : %d\\n\", ptrcust->orderno);\n    printf(\"Email address : %s\\n\", ptrcust->emailaddress);\n    printf(\"Password : %s\\n\", ptrcust->password);\n}\n```", "```cpp\nstructurevariable.structuremember\n```", "```cpp\nstruct cart mycart;\nmycart.orderno\n```", "```cpp\nstruct cart *ptrcart;\n```", "```cpp\nptrcart = &mycart;\n```", "```cpp\nptrcart->orderno\n```", "```cpp\nptrcust=(struct cart *)malloc(sizeof(struct cart));\n```", "```cpp\nD:\\CBook>gcc pointertostruct.c -o pointertostruct\n```", "```cpp\nD:\\CBook>./pointertostruct\nEnter order number: 1001\nEnter email address: bmharwani@yahoo.com\nEnter password: gold\n\nDetails of the customer are as follows:\nOrder number : 1001\nEmail address : bmharwani@yahoo.com\nPassword : gold\n\nEnter new email address: harwanibm@gmail.com\nEnter new password: diamond\n\nModified customer's information is:\nOrder number: 1001\nEmail address: harwanibm@gmail.com\nPassword: diamond\n\nEnter information of another customer:\nEnter order number: 1002\nEnter email address: bintu@yahoo.com\nEnter password: platinum\n\nDetails of the second customer are as follows:\nOrder number : 1002\nEmail address : bintu@yahoo.com\nPassword : platinum\n```"]