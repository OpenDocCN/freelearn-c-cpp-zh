["```cpp\npointer = (data_type*) malloc(size_in_bytes)\n```", "```cpp\npointer=(data_type*) calloc( size_t num_of_blocks, size_t size_of_block )\n```", "```cpp\npointer= realloc(void *pointer, size_t new_blocksize);\n```", "```cpp\nfree(pointer);\n```", "```cpp\n#include <stdio.h> \n#include <stdlib.h> \n\nchar *str; \nvoid freeup() \n{ \n    free(str); \n    printf( \"Allocated memory is freed  \\n\"); \n} \n\nint main() \n{ \n    int retvalue; \n    retvalue = atexit(freeup); \n    if (retvalue != 0) { \n        printf(\"Registration of function for atexit () function \n          failed\\n\"); \n        exit(1); \n    } \n    str = malloc( 20 * sizeof(char) ); \n    if( str== NULL ) \n    { \n        printf(\"Some error occurred in allocating memory\\n\"); \n        exit(1); \n    } \n    printf(\"Enter a string \"); \n    scanf(\"%s\", str); \n    printf(\"The string entered is %s\\n\", str); \n}\n```", "```cpp\n#include <stdio.h> \n#include <stdlib.h> \n\nchar *str; \nvoid freeup1() \n{\n    free(str); \n    printf( \"Allocated memory is freed  \\n\"); \n} \n\nvoid freeup2()\n{ \n    printf( \"The size of dynamic memory can be increased and decreased  \\n\"); \n} \n\nint main() \n{\n    int retvalue; \n    retvalue = atexit(freeup1); \n    if (retvalue != 0) { \n        printf(\"Registration of function freeup1() for atexit () \n          function failed\\n\"); \n        exit(1); \n    }\n    retvalue = atexit(freeup2); \n    if (retvalue != 0) { \n        printf(\"Registration of function freeup2() for atexit () \n          function failed\\n\");\n        exit(1); \n    }\n    str = malloc( 20 * sizeof(char));\n    if( str== NULL ) \n    { \n        printf(\"Some error occurred in allocating memory\\n\"); \n        exit(1); \n    } \n    printf(\"Enter a string \"); \n    scanf(\"%s\", str); \n    printf(\"The string entered is %s\\n\", str); \n}\n```", "```cpp\n#include <time.h> \n#include <stdio.h> \n\nvoid somefunction() \n{ \n    for (int i=0; i<32000; i++) \n    { \n        for (int j=0; j<32000; j++) ; \n    } \n} \n\nint main() \n{ \n    clock_t clocktickstart, clocktickend; \n    double timeconsumed; \n    clocktickstart = clock();  \n    somefunction(); \n    clocktickend = clock(); \n    timeconsumed = (double)(clocktickend - clocktickstart) / \n      CLOCKS_PER_SEC; \n    printf(\"Number of clocks ticks required in running the function is \n      : %.3f\\n\",  (double)(clocktickend - clocktickstart)); \n    printf(\"Time taken by program is : %.2f sec\\n\", timeconsumed); \n    return 0; \n}\n```", "```cpp\n#include <stdio.h> \n#include <stdlib.h> \n\nint main() \n{ \n    int* ptr; \n    int m,n, i; \n\n    printf(\"How many elements are there? \"); \n    scanf(\"%d\", &n); \n    ptr = (int*)calloc(n, sizeof(int));\n    if (ptr == NULL) { \n        printf(\"Memory could not be allocated.\\n\"); \n        exit(0); \n    } \n    printf(\"Enter %d elements \\n\", n); \n    for (i = 0; i < n; ++i) \n        scanf(\"%d\",&ptr[i]); \n    printf(\"\\nThe elements entered are: \\n\"); \n    for (i = 0; i < n; ++i) \n        printf(\"%d\\n\", ptr[i]); \n    printf(\"\\nHow many elements you want to add more? \"); \n    scanf(\"%d\",&m); \n    ptr = realloc(ptr, (m+n) * sizeof(int)); \n    printf(\"Enter values for %d elements\\n\",m); \n    for (i = n; i < (m+n); ++i) \n        scanf(\"%d\",&ptr[i]); \n    printf(\"\\nThe complete set of elements now are: \\n\"); \n    for (i = 0; i < (m+n); ++i) \n        printf(\"%d\\n\", ptr[i]); \n    printf(\"\\nHow many elements you want to keep ? \"); \n    scanf(\"%d\", &m); \n    ptr = realloc(ptr, (m) * sizeof(int)); \n    printf(\"\\nThe new set of elements now are: \\n\"); \n    for (i = 0; i < m; ++i) \n        printf(\"%d\\n\", ptr[i]); \n    free(ptr);   \n    return 0; \n}\n```", "```cpp\n#include <stdio.h>\n#include <unistd.h>\n#include <stdlib.h>\n#include <signal.h>\n\nvoid sighandler1(int signum) {\n    printf(\"Ctrl + C is auto pressed \\n\"); \n} \n\nvoid sighandler2(int signum) { \n    printf(\"You have pressed Ctrl+c\\n\"); \n    printf(\"Press Ctrl+c again to exit\\n\"); \n    (void) signal(SIGINT, SIG_DFL); \n} \n\nint main () { \n    int x=1; \n    signal(SIGINT, sighandler1); \n    while(x<=5) { \n        printf(\"Signal will be raised automatically after 5 \n          seconds\\n\");\n        x++; \n        sleep(1); \n    }\n    raise(SIGINT); \n    signal(SIGINT, sighandler2);\n    while(1) {\n        printf(\"Infinite loop, press Ctrl+C to raise signal\\n\"); \n        sleep(1); \n    } \n    return(0); \n}\n```"]