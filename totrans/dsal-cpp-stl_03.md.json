["```cpp\n#include <iostream>\n#include <vector>\nint main() {\n  std::vector<int> myVec;\n  std::cout << \"Initial size: \" << myVec.size()\n            << \", capacity: \" << myVec.capacity() << \"\\n\";\n  for (auto i = 0; i < 10; ++i) {\n    myVec.push_back(i);\n    std::cout << \"After adding \" << i + 1\n              << \" integers, size: \" << myVec.size()\n              << \", capacity: \" << myVec.capacity()\n              << \"\\n\";\n  }\n  myVec.resize(5);\n  std::cout << \"After resizing to 5 elements, size: \"\n            << myVec.size()\n            << \", capacity: \" << myVec.capacity() << \"\\n\";\n  myVec.shrink_to_fit();\n  std::cout << \"After shrinking to fit, size: \"\n            << myVec.size()\n            << \", capacity: \" << myVec.capacity() << \"\\n\";\n  myVec.push_back(5);\n  std::cout << \"After adding one more integer, size: \"\n            << myVec.size()\n            << \", capacity: \" << myVec.capacity() << \"\\n\";\n  return 0;\n}\n```", "```cpp\nInitial size: 0, capacity: 0\nAfter adding 1 integers, size: 1, capacity: 1\nAfter adding 2 integers, size: 2, capacity: 2\nAfter adding 3 integers, size: 3, capacity: 3\nAfter adding 4 integers, size: 4, capacity: 4\nAfter adding 5 integers, size: 5, capacity: 6\nAfter adding 6 integers, size: 6, capacity: 6\nAfter adding 7 integers, size: 7, capacity: 9\nAfter adding 8 integers, size: 8, capacity: 9\nAfter adding 9 integers, size: 9, capacity: 9\nAfter adding 10 integers, size: 10, capacity: 13\nAfter resizing to 5 elements, size: 5, capacity: 13\nAfter shrinking to fit, size: 5, capacity: 5\nAfter adding one more integer, size: 6, capacity: 7\n```", "```cpp\n#include <iostream>\n#include <vector>\nint main() {\n  std::vector<int> numbers = {1, 2, 3, 4, 5};\n  auto printVectorDetails = [&]() {\n    std::cout << \"Vector elements: \";\n    for (auto num : numbers) { std::cout << num << \" \"; }\n    std::cout << \"\\nSize: \" << numbers.size() << \"\\n\";\n    std::cout << \"Capacity: \" << numbers.capacity()\n              << \"\\n\";\n  };\n  std::cout << \"Initial vector:\\n\";\n  printVectorDetails();\n  numbers.resize(8);\n  std::cout << \"After resizing to 8 elements:\\n\";\n  printVectorDetails();\n  numbers.resize(3);\n  std::cout << \"After resizing to 3 elements:\\n\";\n  printVectorDetails();\n  std::cout << \"Reducing size doesn't affect capacity:\\n\";\n  std::cout << \"Capacity after resize: \"\n            << numbers.capacity() << \"\\n\";\n  return 0;\n}\n```", "```cpp\nInitial vector:\nVector elements: 1 2 3 4 5\nSize: 5\nCapacity: 5\nAfter resizing to 8 elements:\nVector elements: 1 2 3 4 5 0 0 0\nSize: 8\nCapacity: 10\nAfter resizing to 3 elements:\nVector elements: 1 2 3\nSize: 3\nCapacity: 10\nReducing size doesn't affect capacity:\nCapacity after resize: 10\n```", "```cpp\n#include <chrono>\n#include <iostream>\n#include <vector>\nint main() {\n  constexpr size_t numberOfElements = 100'000;\n  std::vector<int> numbers1;\n  auto start1 = std::chrono::high_resolution_clock::now();\n  for (auto i = 0; i < numberOfElements; ++i) {\n    numbers1.push_back(i);\n  }\n  auto end1 = std::chrono::high_resolution_clock::now();\n  std::chrono::duration<double> elapsed1 = end1 - start1;\n  std::cout << \"Time without reserve: \" << elapsed1.count()\n            << \" seconds\\n\";\n  std::vector<int> numbers2;\n  numbers2.reserve(\n      numberOfElements); // Reserve memory upfront.\n  auto start2 = std::chrono::high_resolution_clock::now();\n  for (auto i = 0; i < numberOfElements; ++i) {\n    numbers2.push_back(i);\n  }\n  auto end2 = std::chrono::high_resolution_clock::now();\n  std::chrono::duration<double> elapsed2 = end2 - start2;\n  std::cout << \"Time with reserve:    \" << elapsed2.count()\n            << \" seconds\\n\";\n  return 0;\n}\n```", "```cpp\nTime without reserve: 0.01195 seconds\nTime with reserve:    0.003685 seconds\n```", "```cpp\n#include <iostream>\n#include <vector>\nint main() {\n  std::vector<int> numbers;\n  numbers.reserve(1000);\n  std::cout << \"Initial capacity: \" << numbers.capacity()\n            << \"\\n\";\n  for (auto i = 0; i < 10; ++i) { numbers.push_back(i); }\n  std::cout << \"Size after adding 10 elements: \"\n            << numbers.size() << \"\\n\";\n  std::cout << \"Capacity after adding 10 elements: \"\n            << numbers.capacity() << \"\\n\";\n  numbers.shrink_to_fit();\n  std::cout << \"Size after shrink_to_fit: \"\n            << numbers.size() << \"\\n\";\n  std::cout << \"Capacity after shrink_to_fit: \"\n            << numbers.capacity() << \"\\n\";\n  return 0;\n}\n```", "```cpp\nInitial capacity: 1000\nSize after adding 10 elements: 10\nCapacity after adding 10 elements: 1000\nSize after shrink_to_fit: 10\nCapacity after shrink_to_fit: 10\n```", "```cpp\n#include <iostream>\n#include <memory>\n#include <vector>\ntemplate <typename T> class CustomAllocator {\npublic:\n  using value_type = T;\n  CustomAllocator() noexcept {}\n  template <typename U>\n  CustomAllocator(const CustomAllocator<U> &) noexcept {}\n  T *allocate(std::size_t n) {\n    std::cout << \"Allocating \" << n << \" objects of size \"\n              << sizeof(T) << \" bytes.\\n\";\n    return static_cast<T *>(::operator new(n * sizeof(T)));\n  }\n  void deallocate(T *p, std::size_t) noexcept {\n    std::cout << \"Deallocating memory.\\n\";\n    ::operator delete(p);\n  }\n  template <typename U, typename... Args>\n  void construct(U *p, Args &&...args) {\n    std::cout << \"Constructing object.\\n\";\n    new (p) U(std::forward<Args>(args)...);\n  }\n  template <typename U> void destroy(U *p) {\n    std::cout << \"Destroying object.\\n\";\n    p->~U();\n  }\n};\nint main() {\n  std::vector<int, CustomAllocator<int>> numbers;\n  std::cout << \"Pushing back numbers 1 to 5:\\n\";\n  for (int i = 1; i <= 5; ++i) { numbers.push_back(i); }\n  std::cout << \"\\nClearing the vector:\\n\";\n  numbers.clear();\n  return 0;\n}\n```", "```cpp\nPushing back numbers 1 to 5:\nAllocating 1 objects of size 4 bytes.\nConstructing object.\nAllocating 2 objects of size 4 bytes.\nConstructing object.\nConstructing object.\nDestroying object.\nDeallocating memory.\nAllocating 4 objects of size 4 bytes.\nConstructing object.\nConstructing object.\nConstructing object.\nDestroying object.\nDestroying object.\nDeallocating memory.\nConstructing object.\nAllocating 8 objects of size 4 bytes.\nConstructing object.\nConstructing object.\nConstructing object.\nConstructing object.\nConstructing object.\nDestroying object.\nDestroying object.\nDestroying object.\nDestroying object.\nDeallocating memory.\nClearing the vector:\nDestroying object.\nDestroying object.\nDestroying object.\nDestroying object.\nDestroying object.\nDeallocating memory.\n```"]