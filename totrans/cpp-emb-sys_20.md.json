["```cpp\n`enum` class ble_state {\n    idle,\n    advertising,\n    connected\n};\n`enum` class ble_event {\n    ble_button_pressed,\n    connection_request,\n    timer_expired\n}; \n```", "```cpp\nclass ble_fsm {\npublic:\n    void handle_event(ble_event event);\n    ble_state get_state() const {\n        return current_state_;\n    }\nprivate:\n    ble_state current_state_ = ble_state::idle;\n    void start_advertising() {\n        printf(\"Action: start_advertising()\\n\");\n    }\n    void stop_advertising() {\n        printf(\"Action: stop_advertising()\\n\");\n    }\n    void disconnect() {\n        printf(\"Action: disconnect()\\n\");\n    }\n}; \n```", "```cpp\nvoid ble_fsm::handle_event(ble_event event) {\nswitch (current_state_) {\n    case ble_state::idle:\n    if (event == ble_event::ble_button_pressed)\n    {\n        start_advertising();\n        current_state_ = ble_state::advertising;\n    }\n    break;\n    case ble_state::advertising:\n    if (event == ble_event::connection_request)\n    {\n        current_state_ = ble_state::connected;\n    }\n    else if (event == ble_event::timer_expired)\n    {\n        stop_advertising();\n        current_state_ = ble_state::idle;\n    }\n    break;\n\n    case ble_state::connected:\n    if (event ==ble_event::ble_button_pressed)\n    {\n        disconnect();\n        current_state_ = ble_state::idle;\n    }\n    break;\n\n    default:\n    break;\n}\n} \n```", "```cpp\nstatic const char* state_to_string(ble_state state) {\n    switch (state) {\n        case ble_state::idle:        return \"`idle`\";\n        case ble_state::advertising: return \"advertising\";\n        case ble_state::connected:   return \"connected\";\n        default:                     return \"unknown\";\n    }\n} \n```", "```cpp\nint main() {\n    ble_fsm my_ble_fsm;\n    const auto print_current_state = [&]() {\n        printf(\"Current State: %s\\n\",\n            state_to_string(my_ble_fsm.get_state()));\n    };\n    print_current_state();\n    my_ble_fsm.handle_event(ble_event::ble_button_pressed);\n    print_current_state();\n    my_ble_fsm.handle_event(ble_event::connection_request);\n    print_current_state();\n    my_ble_fsm.handle_event(ble_event::ble_button_pressed);\n    print_current_state();\n\n    return 0;\n} \n```", "```cpp\nCurrent State: idle\nAction: start_advertising()\nCurrent State: advertising\nCurrent State: connected\nAction: disconnect()\nCurrent State: idle \n```", "```cpp\n$ cmake –B build\n$ cmake --build build --target run_in_renode \n```", "```cpp\nclass state {\npublic:\n    virtual ble_state handle_event(ble_event event) = 0;\n    virtual ble_state get_state_`enum`() = 0;\n}; \n```", "```cpp\nclass idle : public state{\npublic:\n    ble_state handle_event(ble_event event) {\n        if (event == ble_event::ble_button_pressed) {\n            start_advertising();\n            return ble_state::advertising;\n        }\n        return get_state_enum();\n    }\n    ble_state get_state_enum() {\n       return ble_state::idle;\n    }\nprivate:\n    void start_advertising() {\n        printf(\"Action: start_advertising()\\n\");\n    }\n}; \n```", "```cpp\nclass advertising : public state{\npublic:\n    ble_state handle_event(ble_event event) {\n        if (event == ble_event::connection_request) {\n            return ble_state::connected;\n        }\n        if (event == ble_event::timer_expired) {\n            stop_advertising();\n            return ble_state::idle;\n        }\n        return get_state_enum();\n    }\n    ble_state get_state_enum() {\n       return ble_state::advertising;\n    }\nprivate:\n    void stop_advertising() {\n        printf(\"Action: stop_advertising()\\n\");\n    }\n}; \n```", "```cpp\nclass connected : public state{\npublic:\n    ble_state handle_event(ble_event event) {\n        if (event == ble_event::ble_button_pressed) {\n            disconnect();\n            return ble_state::idle;\n        }\n        return get_state_enum();\n    }\n    ble_state get_state_enum() {\n       return ble_state::connected;\n    }\nprivate:\n    void disconnect() {\n        printf(\"Action: disconnect()\\n\");\n    }\n}; \n```", "```cpp\nclass ble_fsm {\npublic:\n    void handle_event(ble_event event) {\n        if(auto the_state = get_the_state(current_state_)) { \n            current_state_ = the_state->handle_event(event);\n        }\n    }\n    ble_state get_state() const {\n        return current_state_;\n    }\n    void add_state(state *the_state) {\n        states_.push_back(the_state);\n    }\nprivate:\n    ble_state current_state_ = ble_state::idle;\n    etl::vector<state*, 3> states_;\n    state* get_the_state(ble_state state_enum); }; \n```", "```cpp\nstate* ble_fsm::get_the_state(ble_state state_enum) {\nconst auto is_state_enum = [&](state* the_state) {\n        return the_state->get_state_enum() == state_enum;\n};\nauto it = std::find_if(states_.begin(), states_.end(), is_state_enum);\nif (it != states_.end()) {\n    return *it;\n}\nreturn nullptr;\n} \n```", "```cpp\nint main() {\n    ble_fsm my_ble_fsm;\n    idle idle_s;\n    advertising advertising_s;\n    connected connected_s;\n    my_ble_fsm.add_state(&idle_s);\n    my_ble_fsm.add_state(&advertising_s);\n    my_ble_fsm.add_state(&connected_s);\n    const auto print_current_state = [&]() {\n        printf(\"Current State: %s\\n\",\n            state_to_string(my_ble_fsm.get_state()));\n    };\n    print_current_state();\n    my_ble_fsm.handle_event(ble_event::ble_button_pressed);\n    print_current_state();\n    my_ble_fsm.handle_event(ble_event::connection_request);\n    print_current_state();\n    my_ble_fsm.handle_event(ble_event::ble_button_pressed);\n    print_current_state();\n\n    return 0;\n} \n```", "```cpp\n$ cmake –B build -DMAIN_CPP_FILE_NAME=main_fsm_state_pattern.cpp\n$ cmake --build build --target run_in_renode \n```", "```cpp\nstruct ble_button_pressed{};\nstruct connection_request{};\nstruct timer_expired{}; \n```", "```cpp\nclass state {\npublic:\n    virtual ble_state handle_event(ble_button_pressed) {\n        return get_state_enum();\n    }\n    virtual ble_state handle_event(connection_request) {\n        return get_state_enum();\n    }\n    virtual ble_state handle_event(timer_expired) {\n        return get_state_enum();\n    }\n    virtual ble_state get_state_enum() = 0;\n}; \n```", "```cpp\nclass advertising : public state{\npublic:\n    ble_state handle_event(connection_request cr){\n        return ble_state::connected;\n    }\n    ble_state handle_event(timer_expired te){\n        stop_advertising();\n        return ble_state::idle;\n    }\n    ble_state get_state_enum() {\n       return ble_state::advertising;\n    }\nprivate:\n    void stop_advertising() {\n        printf(\"Action: stop_advertising()\\n\");\n    }\n}; \n```", "```cpp\nclass ble_fsm {\npublic:\n    template<typename E>\n void handle_event(E event) {\n        if(auto the_state = get_the_state(current_state_))\n        {\n            current_state_= the_state->handle_event(event);\n        }\n    }\n//...\n}; \n```", "```cpp\n$ cmake –B build\n-DMAIN_CPP_FILE_NAME=main_fsm_state_pattern_tag_dispatch.cpp\n$ cmake --build build --target run_in_renode \n```", "```cpp\n#include \"sml.hpp\"\nnamespace sml = boost::sml;\nstruct ble_button_pressed{};\nstruct connection_request{};\nstruct timer_expired{};\nconstexpr auto start_advertising = [](){\n    printf(\"Action: start_advertising()\\n\");\n};\nconstexpr auto stop_advertising = [](){\n    printf(\"Action: stop_advertising()\\n\");\n};\nconstexpr auto disconnect = [](){\n    printf(\"Action: disconnect()\\n\");\n};\nstruct ble_fsm {\n  auto operator()() const {\n    using namespace sml;\n        return make_transition_table(\n        *\"idle\"_s + event<ble_button_pressed>\n        / start_advertising                          = \"advertising\"_s,\n        \"advertising\"_s  + event<connection_request> = \"connected\"_s,\n        \"advertising\"_s  + event<timer_expired>     \n        / stop_advertising                           = \"idle\"_s,\n        \"connected\"_s + event<ble_button_pressed>\n        / disconnect                                 = \"idle\"_s\n    );\n  }\n}; \n```", "```cpp\n sm<ble_fsm> my_ble_fsm{};\n    const auto print_current_state = [&]() {\n        printf(\"Current State: \");\n        if(my_ble_fsm.is(\"idle\"_s)) {\n            printf(\"idle\\n\");\n        }\n        if(my_ble_fsm.is(\"advertising\"_s)) {\n            printf(\"advertising\\n\");\n        }\n        if(my_ble_fsm.is(\"connected\"_s)) {\n            printf(\"connected\\n\");\n        }\n    };\n    print_current_state();\n    my_ble_fsm.process_event(ble_button_pressed{});\n    print_current_state();\n    my_ble_fsm.process_event(connection_request{});\n    print_current_state();\n    my_ble_fsm.process_event(ble_button_pressed{});\n    print_current_state(); \n```", "```cpp\n$ cmake –B build -DMAIN_CPP_FILE_NAME=main_fsm_boost_sml.cpp\n$ cmake --build build --target run_in_renode \n```"]