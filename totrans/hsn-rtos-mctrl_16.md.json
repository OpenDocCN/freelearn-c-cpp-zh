["```cpp\nbufferX[i] = adcX->ReadAdcValue();\nbufferY[i] = adcY->ReadAdcValue();\nbufferZ[i] = adcZ->ReadAdcValue();\n```", "```cpp\nbufferX[i] = adc_avg(0, 1);\nbufferY[i] = adc_avg(1, 1);\nbufferZ[i] = HAL_ADC_GetValue(adc2_ch0_h);\n```", "```cpp\n/**\n  * return an average of numSamp samples collected\n  * by the ADC who's channel is defined by chNum\n  * @param chNum channel number of the ADC \n  * @param numSamp number of samples to average\n  * @retval avera \n**/\nuint32_t adc_avg(uint8_t chNum, uint16_t numSamp);\n```", "```cpp\n/**\n  * @brief Gets the converted value from \n  * data register of regular channel.\n  * @param hadc pointer to a ADC_HandleTypeDef \n  * structure that contains\n  * the configuration information for the \n  * specified ADC.\n  * @retval Converted value\n  */\nuint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)\n```", "```cpp\ntypedef void (*iLedFunc)(void);\n\ntypedef struct\n{\n    //On turns on the LED - regardless of the driver logic\n const iLedFunc On;\n\n    //Off turns off the LED, regardless of the driver logic\n const iLedFunc Off;\n}iLed;\n```", "```cpp\n#include <iLed.h>\nextern iLed BlueLed;\nextern iLed GreenLed;\nextern iLed RedLed;\n```", "```cpp\nvoid GreenOn ( void ) {HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);}\nvoid GreenOff ( void ) {HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,\n                                          GPIO_PIN_RESET);}\niLed GreenLed = { GreenOn, GreenOff };\n```", "```cpp\n#include <iLed.h>\nvoid doLedStuff( iLed* LedPtr );\n```", "```cpp\nvoid doLedStuff( iLed* LedPtr )\n{\n    if( LedPtr != NULL )\n    {\n        if(LedPtr->On != NULL)\n        {\n              LedPtr->On();\n        }\n\n        if( LedPtr->Off != NULL )\n        {\n              LedPtr->Off();\n        }\n    }\n}\n```", "```cpp\n#include <ledImplementation.h>\n#include <hardwareAgnosticLedDriver.h>\n\nHWInit();\n\nwhile(1)\n{\n    doLedStuff(&GreenLed);\n    doLedStuff(&RedLed);\n    doLedStuff(&BlueLed);\n}\n```", "```cpp\n#include <iLed.h>\n#include <FreeRTOS.h>\n#include <task.h>\n\nTaskHandle_t LedTaskInit( iLed* LedPtr, uint8_t Priority, uint16_t\n                                                       StackSize);\n```", "```cpp\nTaskHandle_t LedTaskInit(iLed* LedPtr, uint8_t Priority, uint16_t StackSize)\n{\n  TaskHandle_t ledTaskHandle = NULL;\n  if(LedPtr == NULL){while(1);}\n  if(xTaskCreate(ledTask, \"ledTask\", StackSize, LedPtr, Priority, \n                 &ledTaskHandle) != pdPASS){while(1);}\n\n  return ledTaskHandle;\n}\n```", "```cpp\nvoid ledTask( void* LedPtr)\n{\n iLed* led = (iLed*) LedPtr;\n  while(1)\n  {\n led->On();\n    vTaskDelay(100);\n led->Off();\n    vTaskDelay(100);\n  }\n}\n\n```", "```cpp\nint main(void)\n{\n  HWInit();\n  SEGGER_SYSVIEW_Conf();\n  //ensure proper priority grouping for freeRTOS\n  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);\n  LedTaskInit(&GreenLed, tskIDLE_PRIORITY+1, 128);\n LedTaskInit(&BlueLed, tskIDLE_PRIORITY+2, 128);\n LedTaskInit(&RedLed, tskIDLE_PRIORITY+3, 128);\n  vTaskStartScheduler();\n```"]