["```cpp\nMereTDD project root folder\n    Test.h\n    tests folder\n        main.cpp\n        Confirm.cpp\n        Creation.cpp\n        Hamcrest.cpp\n        Setup.cpp\n        Thread.cpp\n```", "```cpp\n#include \"../Test.h\"\n#include <atomic>\n#include <thread>\nusing namespace MereTDD;\nTEST(\"Test can use additional threads\")\n{\n    std::atomic<int> count {0};\n    std::thread t1([&count]()\n    {\n        for (int i = 0; i < 100'000; ++i)\n        {\n            ++count;\n        }\n        CONFIRM_THAT(count, NotEquals(100'001));\n    });\n    std::thread t2([&count]()\n    {\n        for (int i = 0; i < 100'000; ++i)\n        {\n            --count;\n        }\n        CONFIRM_THAT(count, NotEquals(-100'001));\n    });\n    t1.join();\n    t2.join();\n    CONFIRM_THAT(count, Equals(0));\n}\n```", "```cpp\n    t1.join();\n    t2.join();\n    CONFIRM_THAT(count, NotEquals(0));\n```", "```cpp\n------- Test: Test can use additional threads\nFailed confirm on line 30\n    Expected: not 0\n    Actual  : 0\n```", "```cpp\n        for (int i = 0; i < 100'000; ++i)\n        {\n            ++count;\n        }\n        CONFIRM_THAT(count, Equals(100'001));\n```", "```cpp\n------- Test: Test can use additional threads\nterminate called after throwing an instance of 'MereTDD::ActualConfirmException'\nAbort trap: 6\n```", "```cpp\n    CONFIRM_TRUE(false);\n    t1.join();\n    t2.join();\n    CONFIRM_THAT(count, Equals(0));\n```", "```cpp\n------- Test: Test can use additional threads\nterminate called without an active exception\nAbort trap: 6\n```", "```cpp\nTEST(\"Test can use additional threads\")\n{\n    std::atomic<int> count {0};\n    std::thread t([&count]()\n    {\n        try\n        {\n            for (int i = 0; i < 100'000; ++i)\n            {\n                ++count;\n            }\n            CONFIRM_THAT(count, NotEquals(100'001));\n        }\n        catch (...)\n        { }\n    });\n    t.join();\n    CONFIRM_THAT(count, Equals(100'000));\n}\n```", "```cpp\n            CONFIRM_THAT(count, Equals(100'001));\n```", "```cpp\nTEST(\"Test can use additional threads\")\n{\n    ThreadConfirmException threadEx;\n    std::atomic<int> count {0};\n    std::thread t([&threadEx, &count]()\n    {\n        try\n        {\n            for (int i = 0; i < 100'000; ++i)\n            {\n                ++count;\n            }\n            CONFIRM_THAT(count, Equals(100'001));\n        }\n        catch (ConfirmException const & ex)\n        {\n            threadEx.setFailure(ex.line(), ex.reason());\n        }\n    });\n    t.join();\n    threadEx.checkFailure();\n    CONFIRM_THAT(count, Equals(100'000));\n}\n```", "```cpp\nclass ThreadConfirmException : public ConfirmException\n{\npublic:\n    ThreadConfirmException ()\n    : ConfirmException(0)\n    { }\n    void setFailure (int line, std::string_view reason)\n    {\n        mLine = line;\n        mReason = reason;\n    }\n    void checkFailure () const\n    {\n        if (mLine != 0)\n        {\n            throw *this;\n        }\n    }\n};\n```", "```cpp\n------- Test: Test can use additional threads\nFailed confirm on line 20\n    Expected: 100001\n    Actual  : 100000\n```", "```cpp\nTEST(\"Test can use additional threads\")\n{\n    ThreadConfirmException threadEx;\n    std::atomic<int> count {0};\n    std::thread t([&threadEx, &count]()\n    {\n        try\n        {\n            for (int i = 0; i < 100'000; ++i)\n            {\n                ++count;\n            }\n            CONFIRM_THAT(count, Equals(100'001));\n        }\n        catch (ConfirmException const & ex)\n        {\n            threadEx.setFailure(ex.line(), ex.reason());\n        }\n    });\n    t.join();\n    threadEx.checkFailure();\n    CONFIRM_THAT(count, Equals(100'000));\n}\n```", "```cpp\nTEST(\"Test can use additional threads\")\n{\n    std::vector<ThreadConfirmException> threadExs(2);\n    std::atomic<int> count {0};\n    std::vector<std::thread> threads;\n    for (int c = 0; c < 2; ++c)\n    {\n        threads.emplace_back(\n            [&threadEx = threadExs[c], &count]()\n        {\n            try\n            {\n                for (int i = 0; i < 100'000; ++i)\n                {\n                    ++count;\n                }\n                CONFIRM_THAT(count, Equals(200'001));\n            }\n            catch (ConfirmException const & ex)\n            {\n                threadEx.setFailure(ex.line(), ex.reason());\n            }\n        });\n    }\n    for (auto & t : threads)\n    {\n        t.join();\n    }\n    for (auto const & ex: threadExs)\n    {\n        ex.checkFailure();\n    }\n    CONFIRM_THAT(count, Equals(200'000));\n}\n```", "```cpp\n                CONFIRM_THAT(count, NotEquals(200'001));\n```", "```cpp\nMereMemo project root folder\n    MereTDD folder\n        Test.h\n    MereMemo folder\n        Log.h\n        tests folder\n            main.cpp\n            Construction.cpp\n            LogTags.h\n            Tags.cpp\n            Thread.cpp\n            Util.cpp\n            Util.h\n```", "```cpp\n#include \"../Log.h\"\n#include \"Util.h\"\n#include <MereTDD/Test.h>\n#include <thread>\nTEST(\"log can be called from multiple threads\")\n{\n    // We'll have 3 threads with 50 messages each.\n    std::vector<std::string> messages;\n    for (int i = 0; i < 150; ++i)\n    {\n        std::string message = std::to_string(i);\n        message += \" thread-safe message \";\n        message += Util::randomString();\n        messages.push_back(message);\n    }\n    std::vector<std::thread> threads;\n    for (int c = 0; c < 3; ++c)\n    {\n        threads.emplace_back(\n            [c, &messages]()\n        {\n            int indexStart = c * 50;\n            for (int i = 0; i < 50; ++i)\n            {\n                MereMemo::log() << messages[indexStart + i];\n            }\n        });\n    }\n    for (auto & t : threads)\n    {\n        t.join();\n    }\n    for (auto const & message: messages)\n    {\n        bool result = Util::isTextInFile(message,              \"application.log\");\n        CONFIRM_TRUE(result);\n    }\n}\n```", "```cpp\n2022-08-16T04:54:54.635 100 thread-safe message 4049\n2022-08-16T04:54:54.635 100 thread-safe message 4049\n2022-08-16T04:54:54.635 0 thread-safe message 8866\n2022-08-16T04:54:54.637 101 thread-safe message 8271\n2022-08-16T04:54:54.637 1 thread-safe message 3205\n2022-08-16T04:54:54.637 102 thread-safe message 7514\n2022-08-16T04:54:54.637 51 thread-safe message 7405\n2022-08-16T04:54:54.637 2 thread-safe message 5723\n2022-08-16T04:54:54.637 52 thread-safe message 4468\n2022-08-16T04:54:54.637 52 thread-safe message 4468\n```", "```cpp\n#include <algorithm>\n#include <chrono>\n#include <ctime>\n#include <filesystem>\n#include <fstream>\n#include <iomanip>\n#include <map>\n#include <memory>\n#include <mutex>\n#include <ostream>\n#include <sstream>\n#include <string>\n#include <string_view>\n#include <vector>\n```", "```cpp\ninline std::mutex & getLoggingMutex ()\n{\n    static std::mutex m;\n    return m;\n}\n```", "```cpp\n    ~LogStream ()\n    {\n        if (not mProceed)\n        {\n            return;\n        }\n        const std::lock_guard<std::mutex>               lock(getLoggingMutex());\n        auto & outputs = getOutputs();\n        for (auto const & output: outputs)\n        {\n            output->sendLine(this->str());\n        }\n    }\n```", "```cpp\nTEST(\"Overridden default tag not used to filter messages\")\n{\n    MereTDD::SetupAndTeardown<TempFilterClause> filter;\n    MereMemo::addFilterLiteral(filter.id(), info);\n    std::string message = \"message \";\n    message += Util::randomString();\n    MereMemo::log(debug) << message;\n    bool result = Util::isTextInFile(message,          \"application.log\");\n    CONFIRM_FALSE(result);\n}\n```", "```cpp\n2022-08-16T06:20:36.807 0 thread-safe message 6269\n2022-08-16T06:20:36.807 50 thread-safe message 1809\n2022-08-16T06:20:36.807 100 thread-safe message 6297\n2022-08-16T06:20:36.808 1 thread-safe message 848\n2022-08-16T06:20:36.808 51 thread-safe message 4103\n2022-08-16T06:20:36.808 101 thread-safe message 5570\n2022-08-16T06:20:36.808 2 thread-safe message 6156\n2022-08-16T06:20:36.809 102 thread-safe message 4213\n2022-08-16T06:20:36.809 3 thread-safe message 6646\n```", "```cpp\nstd::string SimpleService::Service::handleRequest (\n    std::string const & user,\n    std::string const & path,\n    std::string const & request)\n{\n    MereMemo::log(debug, User(user), LogPath(path))\n        << \"Received: \" << Request(request);\n    std::string response;\n    if (request == \"Calculate\")\n    {\n        response = \"token\";\n    }\n    if (request == \"Status\")\n    {\n        response = \"result\";\n    }\n    else\n    {\n        response = \"Unrecognized request.\";\n    }\n    MereMemo::log(debug, User(user), LogPath(path))\n        << \"Sending: \" << Response(response);\n    return response;\n}\n```", "```cpp\nTEST_SUITE(\"Unrecognized request is handled properly\", \"Service 1\")\n{\n    std::string user = \"123\";\n    std::string path = \"\";\n    std::string request = \"Hello\";\n    std::string expectedResponse = \"Unrecognized request.\";\n    std::string response = gService1.service().handleRequest(\n        user, path, request);\n    CONFIRM_THAT(response, Equals(expectedResponse));\n}\n```", "```cpp\nMereTDD::TestSuiteSetupAndTeardown<ServiceSetup>\ngService1(\"Calculation Service\", \"Service 1\");\n```", "```cpp\nTEST_SUITE(\"Calculate request can be sent and recognized\", \"Service 1\")\n{\n    std::string user = \"123\";\n    std::string path = \"\";\n    std::string request = \"Calculate\";\n    std::string unexpectedResponse = \"Unrecognized request.\";\n    std::string response = gService1.service().handleRequest(\n        user, path, request);\n    CONFIRM_THAT(response, NotEquals(unexpectedResponse));\n}\n```", "```cpp\nRunning 1 test suites\n--------------- Suite: Service 1\n------- Setup: Calculation Service\nPassed\n------- Test: Unrecognized request is handled properly\nPassed\n------- Test: Calculate request can be sent and recognized\nFailed confirm on line 30\n    Expected: not Unrecognized request.\n    Actual  : Unrecognized request.\n------- Teardown: Calculation Service\nPassed\n-----------------------------------\nTests passed: 3\nTests failed: 1\n```", "```cpp\n    if (request == \"Calculate\")\n    {\n        response = \"token\";\n    }\n    else if (request == \"Status\")\n    {\n        response = \"result\";\n    }\n    else\n    {\n        response = \"Unrecognized request.\";\n    }\n```", "```cpp\nstruct CalculateRequest\n{\n    int mSeed;\n};\nstruct CalculateResponse\n{\n    std::string mToken;\n};\n```", "```cpp\nTEST_SUITE(\"Calculate request can be sent\", \"Service 1\")\n{\n    std::string user = \"123\";\n    std::string path = \"\";\n    SimpleService::RequestVar request =\n        SimpleService::CalculateRequest {\n            .mSeed = 5\n        };\n    std::string emptyResponse = \"\";\n    std::string response = gService1.service().handleRequest(\n        user, path, request);\n    CONFIRM_THAT(response, NotEquals(emptyResponse));\n}\n```", "```cpp\n#ifndef SIMPLESERVICE_SERVICE_H\n#define SIMPLESERVICE_SERVICE_H\n#include <string>\n#include <variant>\nnamespace SimpleService\n{\nstruct CalculateRequest\n{\n    int mSeed;\n};\nstruct StatusRequest\n{\n    std::string mToken;\n};\nusing RequestVar = std::variant<\n    CalculateRequest,\n    StatusRequest\n    >;\n```", "```cpp\nclass Service\n{\npublic:\n    void start ();\n    std::string handleRequest (std::string const & user,\n        std::string const & path,\n        RequestVar const & request);\n};\n```", "```cpp\nstd::string SimpleService::Service::handleRequest (\n    std::string const & user,\n    std::string const & path,\n    RequestVar const & request)\n{\n    std::string response;\n    if (auto const * req = std::get_       if<CalculateRequest>(&request))\n    {\n        MereMemo::log(debug, User(user), LogPath(path))\n            << \"Received Calculate request for: \"\n            << std::to_string(req->mSeed);\n        response = \"token\";\n    }\n    else if (auto const * req = std::get_            if<StatusRequest>(&request))\n    {\n        MereMemo::log(debug, User(user), LogPath(path))\n            << \"Received Status request for: \"\n            << req->mToken;\n        response = \"result\";\n    }\n    else\n    {\n        response = \"Unrecognized request.\";\n    }\n    MereMemo::log(debug, User(user), LogPath(path))\n        << \"Sending: \" << Response(response);\n    return response;\n}\n```", "```cpp\nstruct ErrorResponse\n{\n    std::string mReason;\n};\nstruct CalculateResponse\n{\n    std::string mToken;\n};\nstruct StatusResponse\n{\n    bool mComplete;\n    int mProgress;\n    int mResult;\n};\nusing ResponseVar = std::variant<\n    ErrorResponse,\n    CalculateResponse,\n    StatusResponse\n    >;\n```", "```cpp\nTEST_SUITE(\"Calculate request can be sent\", \"Service 1\")\n{\n    std::string user = \"123\";\n    std::string path = \"\";\n    SimpleService::RequestVar request =\n        SimpleService::CalculateRequest {\n            .mSeed = 5\n        };\n    auto const responseVar = gService1.service().handleRequest(\n        user, path, request);\n    auto const response =\n        std::get_if<SimpleService::CalculateResponse>(&responseVar);\n    CONFIRM_TRUE(response != nullptr);\n}\n```", "```cpp\nclass Service\n{\npublic:\n    void start ();\n\n    ResponseVar handleRequest (std::string const & user,\n        std::string const & path,\n        RequestVar const & request);\n};\n```", "```cpp\nSimpleService::ResponseVar SimpleService::Service::handleRequest (\n    std::string const & user,\n    std::string const & path,\n    RequestVar const & request)\n{\n    ResponseVar response;\n    if (auto const * req = std::get_       if<CalculateRequest>(&request))\n    {\n        MereMemo::log(debug, User(user), LogPath(path))\n            << \"Received Calculate request for: \"\n            << std::to_string(req->mSeed);\n        response = SimpleService::CalculateResponse {\n            .mToken = \"token\"\n        };\n    }\n    else if (auto const * req = std::get_            if<StatusRequest>(&request))\n    {\n        MereMemo::log(debug, User(user), LogPath(path))\n            << \"Received Status request for: \"\n            << req->mToken;\n        response = SimpleService::StatusResponse {\n            .mComplete = false,\n            .mProgress = 25,\n            .mResult = 0\n        };\n    }\n    else\n    {\n        response = SimpleService::ErrorResponse {\n            .mReason = \"Unrecognized request.\"\n        };\n    }\n    return response;\n}\n```", "```cpp\nTEST_SUITE(\"Status request generates result\", \"Service 1\")\n{\n    std::string user = \"123\";\n    std::string path = \"\";\n    SimpleService::RequestVar calcRequest =\n        SimpleService::CalculateRequest {\n            .mSeed = 5\n        };\n    auto responseVar = gService1.service().handleRequest(\n        user, path, calcRequest);\n    auto const calcResponse =\n        std::get_if<SimpleService::CalculateResponse>        (&responseVar);\n    CONFIRM_TRUE(calcResponse != nullptr);\n    SimpleService::RequestVar statusRequest =\n        SimpleService::StatusRequest {\n            .mToken = calcResponse->mToken\n        };\n    int result {0};\n    for (int i = 0; i < 5; ++i)\n    {\n        responseVar = gService1.service().handleRequest(\n            user, path, statusRequest);\n        auto const statusResponse =\n            std::get_if<SimpleService::StatusResponse>            (&responseVar);\n        CONFIRM_TRUE(statusResponse != nullptr);\n        if (statusResponse->mComplete)\n        {\n            result = statusResponse->mResult;\n            break;\n        }\n    }\n    CONFIRM_THAT(result, Equals(50));\n}\n```", "```cpp\nRunning 1 test suites\n--------------- Suite: Service 1\n------- Setup: Calculation Service\nPassed\n------- Test: Calculate request can be sent\nPassed\n------- Test: Status request generates result\nFailed confirm on line 62\n    Expected: 50\n    Actual  : 0\n------- Teardown: Calculation Service\nPassed\n-----------------------------------\nTests passed: 3\nTests failed: 1\n```", "```cpp\n#include \"Service.h\"\n#include \"LogTags.h\"\n#include <MereMemo/Log.h>\n#include <mutex>\n#include <thread>\n#include <vector>\nnamespace\n{\n}\n```", "```cpp\n    std::mutex & getCalcMutex ()\n    {\n        static std::mutex m;\n        return m;\n    }\n```", "```cpp\n    class CalcRecord\n    {\n    public:\n        CalcRecord ()\n        { }\n        CalcRecord (CalcRecord const & src)\n        {\n            const std::lock_guard<std::mutex>                   lock(getCalcMutex());\n            mComplete = src.mComplete;\n            mProgress = src.mProgress;\n            mResult = src.mResult;\n        }\n        void getData (bool & complete, int & progress, int &                      result)\n        {\n            const std::lock_guard<std::mutex>                   lock(getCalcMutex());\n            complete = mComplete;\n            progress = mProgress;\n            result = mResult;\n        }\n        void setData (bool complete, int progress, int result)\n        {\n            const std::lock_guard<std::mutex>                   lock(getCalcMutex());\n            mComplete = complete;\n            mProgress = progress;\n            mResult = result;\n        }\n        CalcRecord &\n        operator = (CalcRecord const & rhs) = delete;\n    private:\n        bool mComplete {false};\n        int mProgress {0};\n        int mResult {0};\n    };\n```", "```cpp\n    std::vector<CalcRecord> calculations;\n```", "```cpp\n    if (auto const * req = std::get_       if<CalculateRequest>(&request))\n    {\n        MereMemo::log(debug, User(user), LogPath(path))\n            << \"Received Calculate request for: \"\n            << std::to_string(req->mSeed);\n        calculations.emplace_back();\n        int calcIndex = calculations.size() - 1;\n        std::thread calcThread([calcIndex] ()\n        {\n            calculations[calcIndex].setData(true, 100, 50);\n        });\n        calcThread.detach();\n        response = SimpleService::CalculateResponse {\n            .mToken = std::to_string(calcIndex)\n        };\n    }\n```", "```cpp\n    else if (auto const * req = std::get_            if<StatusRequest>(&request))\n    {\n        MereMemo::log(debug, User(user), LogPath(path))\n            << \"Received Status request for: \"\n            << req->mToken;\n        int calcIndex = std::stoi(req->mToken);\n        bool complete;\n        int progress;\n        int result;\n        calculations[calcIndex].getData(complete, progress,                                 result);\n        response = SimpleService::StatusResponse {\n            .mComplete = complete,\n            .mProgress = progress,\n            .mResult = result\n        };\n    }\n```", "```cpp\n        std::thread calcThread([calcIndex] ()\n        {\n            calculations[calcIndex].setData(true, 100, 50);\n        });\n```", "```cpp\nvoid normalCalc (int seed, int & progress, int & result);\nvoid testCalc (int seed, int & progress, int & result);\n```", "```cpp\nclass Service\n{\npublic:\n    using CalcFunc = void (*) (int, int &, int &);\n    Service (CalcFunc f = normalCalc)\n    : mCalc(f)\n    { }\n    void start ();\n    ResponseVar handleRequest (std::string const & user,\n        std::string const & path,\n        RequestVar const & request);\nprivate:\n    CalcFunc mCalc;\n};\n```", "```cpp\nvoid SimpleService::normalCalc (\n    int seed, int & progress, int & result)\n{\n    progress = 100;\n    result = seed * 10;\n}\nvoid SimpleService::testCalc (\n    int seed, int & progress, int & result)\n{\n    progress = 100;\n    result = seed * 10;\n}\n```", "```cpp\n    if (auto const * req = std::get_       if<CalculateRequest>(&request))\n    {\n        MereMemo::log(debug, User(user), LogPath(path))\n            << \"Received Calculate request for: \"\n            << std::to_string(req->mSeed);\n        calculations.emplace_back();\n        int calcIndex = calculations.size() - 1;\n        int seed = req->mSeed;\n        std::thread calcThread([this, calcIndex, seed] ()\n        {\n            int progress;\n            int result;\n            mCalc(seed, progress, result);\n            calculations[calcIndex].setData(true, progress,                                     result);\n        });\n        calcThread.detach();\n        response = SimpleService::CalculateResponse {\n            .mToken = std::to_string(calcIndex)\n        };\n    }\n```", "```cpp\n        std::thread calcThread([this, calcIndex, seed] ()\n        {\n            int progress {0};\n            int result {0};\n            while (true)\n            {\n                mCalc(seed, progress, result);\n                if (progress == 100)\n                {\n                    calculations[calcIndex].setData(true,                     progress, result);\n                    break;\n                }\n                else\n                {\n                    calculations[calcIndex].setData(false,                     progress, result);\n                }\n            }\n        });\n```", "```cpp\nTEST_SUITE(\"Status request to test service generates result\", \"Service 2\")\n{\n    std::string user = \"123\";\n    std::string path = \"\";\n    SimpleService::RequestVar calcRequest =\n        SimpleService::CalculateRequest {\n            .mSeed = 5\n        };\n    auto responseVar = gService2.service().handleRequest(\n        user, path, calcRequest);\n    auto const calcResponse =\n        std::get_if<SimpleService::CalculateResponse>        (&responseVar);\n    CONFIRM_TRUE(calcResponse != nullptr);\n    SimpleService::RequestVar statusRequest =\n        SimpleService::StatusRequest {\n            .mToken = calcResponse->mToken\n        };\n    int result {0};\n    for (int i = 0; i < 5; ++i)\n    {\n        responseVar = gService2.service().handleRequest(\n            user, path, statusRequest);\n        auto const statusResponse =\n            std::get_if<SimpleService::StatusResponse>            (&responseVar);\n        CONFIRM_TRUE(statusResponse != nullptr);\n        if (statusResponse->mComplete)\n        {\n            result = statusResponse->mResult;\n            break;\n        }\n    }\n    CONFIRM_THAT(result, Equals(40));\n}\n```", "```cpp\nclass TestServiceSetup\n{\npublic:\n    TestServiceSetup ()\n    : mService(SimpleService::testCalc)\n    { }\n    void setup ()\n    {\n        mService.start();\n    }\n    void teardown ()\n    {\n    }\n    SimpleService::Service & service ()\n    {\n        return mService;\n    }\nprivate:\n    SimpleService::Service mService;\n};\nextern MereTDD::TestSuiteSetupAndTeardown<TestServiceSetup>\ngService2;\n```", "```cpp\n#include \"SetupTeardown.h\"\nMereTDD::TestSuiteSetupAndTeardown<ServiceSetup>\ngService1(\"Calculation Service\", \"Service 1\");\nMereTDD::TestSuiteSetupAndTeardown<TestServiceSetup>\ngService2(\"Calculation Test Service\", \"Service 2\");\n```", "```cpp\nvoid SimpleService::normalCalc (\n    int seed, int & progress, int & result)\n{\n    progress = 100;\n    result = seed * 10;\n}\nvoid SimpleService::testCalc (\n    int seed, int & progress, int & result)\n{\n    progress = 100;\n    result = seed * 8;\n}\n```", "```cpp\nRunning 2 test suites\n--------------- Suite: Service 1\n------- Setup: Calculation Service\nPassed\n------- Test: Calculate request can be sent\nPassed\n------- Test: Status request generates result\nPassed\n------- Teardown: Calculation Service\nPassed\n--------------- Suite: Service 2\n------- Setup: Calculation Test Service\nPassed\n------- Test: Status request to test service generates result\nPassed\n------- Teardown: Calculation Test Service\nPassed\n-----------------------------------\nTests passed: 7\nTests failed: 0\n```", "```cpp\n#ifndef SIMPLESERVICE_SERVICE_H\n#define SIMPLESERVICE_SERVICE_H\n#include <condition_variable>\n#include <string>\n#include <variant>\n```", "```cpp\nvoid normalCalc (int seed, int & progress, int & result);\nextern std::mutex service2Mutex;\nextern std::condition_variable testCalcCV;\nextern std::condition_variable testCV;\nextern bool testCalcReady;\nextern bool testReady;\nvoid testCalc (int seed, int & progress, int & result);\n```", "```cpp\nTEST_SUITE(\"Status request to test service generates result\", \"Service 2\")\n{\n    std::string user = \"123\";\n    std::string path = \"\";\n    SimpleService::RequestVar calcRequest =\n        SimpleService::CalculateRequest {\n            .mSeed = 5\n        };\n    auto responseVar = gService2.service().handleRequest(\n        user, path, calcRequest);\n    auto const calcResponse =\n        std::get_if<SimpleService::CalculateResponse>        (&responseVar);\n    CONFIRM_TRUE(calcResponse != nullptr);\n    // Make a status request right away before the service\n    // is allowed to do any calculations.\n    SimpleService::RequestVar statusRequest =\n        SimpleService::StatusRequest {\n            .mToken = calcResponse->mToken\n        };\n    responseVar = gService2.service().handleRequest(\n        user, path, statusRequest);\n    auto statusResponse =\n        std::get_if<SimpleService::StatusResponse>        (&responseVar);\n    CONFIRM_TRUE(statusResponse != nullptr);\n    CONFIRM_FALSE(statusResponse->mComplete);\n    CONFIRM_THAT(statusResponse->mProgress, Equals(0));\n    CONFIRM_THAT(statusResponse->mResult, Equals(0));\n    // Notify the service that the test has completed the first\n    // confirmation so that the service can proceed with the\n    // calculation.\n    {\n        std::lock_guard<std::mutex>              lock(SimpleService::service2Mutex);\n        SimpleService::testReady = true;\n    }\n    SimpleService::testCV.notify_one();\n    // Now wait until the service has completed the calculation.\n    {\n        std::unique_lock<std::mutex>              lock(SimpleService::service2Mutex);\n        SimpleService::testCalcCV.wait(lock, []\n        {\n            return SimpleService::testCalcReady;\n        });\n    }\n    // Make another status request to get the completed result.\n    responseVar = gService2.service().handleRequest(\n        user, path, statusRequest);\n    statusResponse =\n        std::get_if<SimpleService::StatusResponse>        (&responseVar);\n    CONFIRM_TRUE(statusResponse != nullptr);\n    CONFIRM_TRUE(statusResponse->mComplete);\n    CONFIRM_THAT(statusResponse->mProgress, Equals(100));\n    CONFIRM_THAT(statusResponse->mResult, Equals(40));\n}\n```", "```cpp\nstd::mutex SimpleService::service2Mutex;\nstd::condition_variable SimpleService::testCalcCV;\nstd::condition_variable SimpleService::testCV;\nbool SimpleService::testCalcReady {false};\nbool SimpleService::testReady {false};\nvoid SimpleService::testCalc (\n    int seed, int & progress, int & result)\n{\n    // Wait until the test has completed the first status request.\n    {\n        std::unique_lock<std::mutex> lock(service2Mutex);\n        testCV.wait(lock, []\n        {\n            return testReady;\n        });\n    }\n    progress = 100;\n    result = seed * 8;\n    // Notify the test that the calculation is ready.\n    {\n        std::lock_guard<std::mutex> lock(service2Mutex);\n        testCalcReady = true;\n    }\n    testCalcCV.notify_one();\n}\n```", "```cpp\n2022-08-27T05:00:50.409 Service is starting.\n2022-08-27T05:00:50.410 user=\"123\" Received Calculate request for: 5\n2022-08-27T05:00:50.411 user=\"123\" Received Calculate request for: 5\n2022-08-27T05:00:50.411 user=\"123\" Received Status request for: 1\n2022-08-27T05:00:50.411 Service is starting.\n2022-08-27T05:00:50.411 Service is starting.\n2022-08-27T05:00:50.411 user=\"123\" Received Calculate request for: 5\n2022-08-27T05:00:50.411 user=\"123\" Received Calculate request for: 5\n2022-08-27T05:00:50.411 user=\"123\" Received Status request for: 2\n2022-08-27T05:00:50.411 user=\"123\" Received Status request for: 2\n2022-08-27T05:00:50.411 user=\"123\" Received Status request for: 2\n2022-08-27T05:00:50.411 user=\"123\" Received Status request for: 2\n```", "```cpp\n#include <MereMemo/Log.h>\n#include <MereTDD/Test.h>\n#include <iostream>\nint main ()\n{\n    MereMemo::FileOutput appFile(\"logs\");\n    MereMemo::addLogOutput(appFile);\n    return MereTDD::runTests(std::cout);\n}\n```", "```cpp\nvoid SimpleService::Service::start ()\n{\n    MereMemo::log(info) << \"Service is starting.\";\n}\n```", "```cpp\n2022-08-27T05:35:30.573 Service is starting.\n2022-08-27T05:35:30.574 user=\"123\" Received Calculate request for: 5\n2022-08-27T05:35:30.574 user=\"123\" Received Calculate request for: 5\n2022-08-27T05:35:30.574 user=\"123\" Received Status request for: 1\n2022-08-27T05:35:30.574 Service is starting.\n2022-08-27T05:35:30.574 user=\"123\" Received Calculate request for: 5\n2022-08-27T05:35:30.574 user=\"123\" Received Status request for: 2\n2022-08-27T05:35:30.575 user=\"123\" Received Status request for: 2\n```"]