["```cpp\n    void PickableActor_Base::Tick(float DeltaTime)\n    {\n      Super::Tick(DeltaTime);\n    }\n    ```", "```cpp\n    UPROPERTY(VisibleDefaultsOnly, Category = PickableItem)\n    class USphereComponent* CollisionComp;\n    ```", "```cpp\n    UPROPERTY(VisibleDefaultsOnly, Category = PickableItem)\n    class UStaticMeshComponent* MeshComp;\n    ```", "```cpp\n    UPROPERTY(VisibleDefaultsOnly, Category = PickableItem)\n    class URotatingMovementComponent* RotationComp;\n    ```", "```cpp\n    #include \"Components/SphereComponent.h\"\n    #include \"Components/StaticMeshComponent.h\"\n    #include \"GameFramework/RotatingMovementComponent.h\"\n    ```", "```cpp\n    APickableActor_Base::APickableActor_Base()\n    {\n    }\n    ```", "```cpp\n    CollisionComp = CreateDefaultSubobject\n      <USphereComponent>(TEXT(\"SphereComp\"));\n    ```", "```cpp\n    CollisionComp->InitSphereRadius(30.0f);\n    ```", "```cpp\n    CollisionComp->BodyInstance.SetCollisionProfileName(\"OverlapAllDynamic\");\n    ```", "```cpp\n    RootComponent = CollisionComp;\n    ```", "```cpp\n    MeshComp = CreateDefaultSubobject<UStaticMeshComponent>(TEXT(\"MeshComp\"));\n    MeshComp->AttachToComponent(RootComponent, \n      FAttachmentTransformRules::KeepWorldTransform);\n    MeshComp->SetCollisionEnabled(ECollisionEnabled::NoCollision);\n    ```", "```cpp\n    RotationComp = \n      CreateDefaultSubobject<URotatingMovementComponent>(\n      TEXT(\"RotationComp\"));\n    ```", "```cpp\n    (X=100.000000,Y=100.000000,Z=100.000000)\n    ```", "```cpp\n    protected:\n      virtual void BeginPlay() override;\n    ```", "```cpp\n    virtual void PlayerPickedUp(class ASuperSideScroller_Player* Player)override; \n\n    ```", "```cpp\n    public:\n      UPROPERTY(EditAnywhere, Category = Collectable)\n      int32 CollectableValue = 1;\n    ```", "```cpp\n    void APickableActor_Collectable::PlayerPickedUp(class \n      ASuperSideScroller_Player* Player)\n    {\n    }\n    ```", "```cpp\n    Super::PlayerPickedUp(Player);\n    ```", "```cpp\n    void APickableActor_Collectable::BeginPlay()\n    {\n    }\n    ```", "```cpp\n    Super::BeginPlay();\n    ```", "```cpp\nUE_LOG(LogTemp, Warning, TEXT(\"Example Text\"));\n```", "```cpp\nUE_LOG(LogTemp, Warning, TEXT(\"My integer variable %d), MyInteger);\n```", "```cpp\n    int32 NumberofCollectables;\n    ```", "```cpp\n    UFUNCTION(BlueprintPure)\n    int32 GetCurrentNumberofCollectables() { return NumberofCollectables; };\n    ```", "```cpp\n    void IncrementNumberofCollectables(int32  Value);\n    ```", "```cpp\n    void ASuperSideScroller_Player::IncrementNumberofCollectables(int32 Value)\n    {\n    }\n    ```", "```cpp\n    if(Value == 0)\n    {\n      return;\n    }\n    ```", "```cpp\n    else\n    {\n      NumberofCollectables += Value;\n    }\n    ```", "```cpp\n    UE_LOG(LogTemp, Warning, TEXT(\"Number of Coins: %d\"), NumberofCollectables);\n    ```", "```cpp\n    #include \"SuperSideScroller_Player.h\"\n    ```", "```cpp\n    Player->IncrementNumberofCollectables(CollectableValue);\n    ```", "```cpp\n    Coins: {coins}\n    ```", "```cpp\ntemplate<typename WidgetT, typename OwnerT>\nWidgetT * CreateWidget\n(\n  OwnerT * OwningObject,\n  TSubclassOf < UUserWidget > UserWidgetClass,\n  FName WidgetName\n)\n```", "```cpp\nHUDWidget = CreateWidget<UHUDWidget>(this, BP_HUDWidget);\n```", "```cpp\nvoid SetTimer\n(\n    FTimerHandle & InOutHandle,\n    TFunction < void )> && Callback,\n    float InRate,\n    bool InbLoop,\n    float InFirstDelay\n)\nvoid ClearTimer(FTimerHandle& InHandle)\n```", "```cpp\n    FTimerHandle PowerupHandle;\n    ```", "```cpp\n    bool bHasPowerupActive;\n    ```", "```cpp\n    void IncreaseMovementPowerup();\n    ```", "```cpp\n    void EndPowerup();\n    ```", "```cpp\n    void ASuperSideScroller_Player::IncreaseMovementPowerup()\n    {\n    }\n    ```", "```cpp\n    bHasPowerupActive = true;\n    ```", "```cpp\n    GetCharacterMovement()->MaxWalkSpeed = 500.0f;\n    GetCharacterMovement()->JumpZVelocity = 1500.0f;\n    ```", "```cpp\n    UWorld* World = GetWorld();\n    if (World)\n    {\n    }\n    ```", "```cpp\n    World->GetTimerManager().SetTimer(PowerupHandle, this, \n      &ASuperSideScroller_Player::EndPowerup, 8.0f, false);\n    ```", "```cpp\n    void ASuperSideScroller_Player::EndPowerup()\n    {\n    }\n    ```", "```cpp\n    bHasPowerupActive = false;\n    ```", "```cpp\n    GetCharacterMovement()->MaxWalkSpeed = 300.0f;\n    GetCharacterMovement()->JumpZVelocity = 1000.0f;\n    ```", "```cpp\n    UWorld* World = GetWorld();\n    if (World)\n    {\n    }\n    ```", "```cpp\n    World->GetTimerManager().ClearTimer(PowerupHandle);\n    ```", "```cpp\n    void ASuperSideScroller_Player::Sprint()\n    {\n      if (!bIsSprinting)\n      {\n        bIsSprinting = true;\n        if (bHasPowerupActive)\n        {\n          GetCharacterMovement()->MaxWalkSpeed = 900.0f;\n        }\n        else\n        {\n          GetCharacterMovement()->MaxWalkSpeed = 500.0f;\n        }\n      }\n    }\n    ```", "```cpp\nif (bHasPowerupActive)\n{\n  GetCharacterMovement()->MaxWalkSpeed = 900.0f;\n}\n```", "```cpp\n    void ASuperSideScroller_Player::StopSprinting()\n    {\n      if (bIsSprinting)\n      {\n        bIsSprinting = false;\n        if (bHasPowerupActive)\n        {\n          GetCharacterMovement()->MaxWalkSpeed = 500.0f;\n        }\n        else\n        {\n          GetCharacterMovement()->MaxWalkSpeed = 300.0f;\n        }\n      }\n    }\n    ```", "```cpp\nif (bHasPowerupActive)\n{\n  GetCharacterMovement()->MaxWalkSpeed = 500.0f;\n}\n```", "```cpp\n    UPROPERTY(VisibleDefaultsOnly, Category = Brick)\n    class UStaticMeshComponent* BrickMesh;\n    ```", "```cpp\n    UPROPERTY(VisibleDefaultsOnly, Category = Brick)\n    class UBoxComponent* BrickCollision;\n    ```", "```cpp\n    UFUNCTION()\n    void OnHit(UPrimitiveComponent* HitComp, AActor* OtherActor, \n      UPrimitiveComponent* OtherComp, FVector \n      NormalImpulse, \n      const FHitResult& Hit);\n    ```", "```cpp\n    UPROPERTY(EditAnywhere)\n    bool bHasCollectable;\n    ```", "```cpp\n    UPROPERTY(EditAnywhere)\n    int32 CollectableValue = 1;\n    ```", "```cpp\n    UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Brick)\n    class USoundBase* HitSound;\n    ```", "```cpp\n    UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Brick)\n    class UParticleSystem* Explosion;\n    ```", "```cpp\n    #include \"Components/StaticMeshComponent.h\"\n    #include \"Components/BoxComponent.h\"\n    ```", "```cpp\n    BrickMesh = CreateDefaultSubobject<UStaticMeshComponent>(TEXT(\"BrickMesh\"));\n    ```", "```cpp\n    BrickMesh->SetCollisionProfileName(\"BlockAll\");\n    ```", "```cpp\n    RootComponent = BrickMesh;\n    ```", "```cpp\n    BrickCollision = CreateDefaultSubobject<UBoxComponent>\n      (TEXT(\"BrickCollision\"));\n    ```", "```cpp\n    BrickCollision->SetCollisionProfileName(\"BlockAll\");\n    ```", "```cpp\n    BrickCollision->AttachToComponent(RootComponent, \n      FAttachmentTransformRules::KeepWorldTransform);\n    ```", "```cpp\n    void ASuperSideScroller_Brick::OnHit(UPrimitiveComponent* HitComp, AActor* \n      OtherActor, UPrimitiveComponent* OtherComp, FVector \n      NormalImpulse, const \n      FHitResult& Hit)\n    {\n    }\n    ```", "```cpp\n    BrickCollision->OnComponentHit.AddDynamic(this, \n      &ASuperSideScroller_Brick::OnHit);\n    ```", "```cpp\n    (X=0.750000,Y=0.750000,Z=0.750000)\n    ```", "```cpp\n    (X=0.000000,Y=0.000000,Z=30.000000)\n    ```", "```cpp\n    void AddCollectable(class ASuperSideScroller_Player* Player);\n    ```", "```cpp\n    void PlayHitSound();\n    ```", "```cpp\n    void PlayHitExplosion();\n    ```", "```cpp\n    #include \"Engine/World.h\"\n    #include \"Kismet/GameplayStatics.h\"\n    #include \"SuperSideScroller_Player.h\"\n    ```", "```cpp\n    void ASuperSideScroller_Brick::AddCollectable(class \n      ASuperSideScroller_Player* Player)\n    {\n    }\n    ```", "```cpp\n    Player->IncrementNumberofCollectables(CollectableValue);\n    ```", "```cpp\n    void ASuperSideScroller_Brick::PlayHitSound()\n    {\n      UWorld* World = GetWorld();\n      if (World && HitSound)\n      {\n          UGameplayStatics::SpawnSoundAtLocation(World, \n          HitSound, \n            GetActorLocation());\n      }\n    }\n    ```", "```cpp\n    void ASuperSideScroller_Brick::PlayHitExplosion()\n    {\n      UWorld* World = GetWorld();\n      if (World && Explosion)\n      {\n          UGameplayStatics::SpawnEmitterAtLocation(World, \n          Explosion, \n            GetActorTransform());\n      }\n    }\n    ```", "```cpp\n    ASuperSideScroller_Player* Player = \n      Cast<ASuperSideScroller_Player>(OtherActor);\n    ```", "```cpp\n    if (Player && bHasCollectable)\n    {\n    }\n    ```", "```cpp\n    AddCollectable(Player);\n    PlayHitSound();\n    PlayHitExplosion();\n    ```", "```cpp\n    Destroy();\n    ```"]