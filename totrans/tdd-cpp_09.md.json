["```cpp\n#include <iostream>\nint main ()\n{\n    int result = 1;\n    for (int i = 0; i <= 3; ++i)\n    {\n        result *= 2;\n    }\n    std::cout << \"result=\" << result << std::endl;\n    return 0;\n}\n```", "```cpp\n    for (int i = 0; i <= 3; ++i)\n    {\n        std::cout << \"entering loop\" << std::endl;\n        result *= 2;\n    }\n```", "```cpp\nentering loop\nentering loop\nentering loop\nentering loop\nresult=16\n```", "```cpp\n#include <fstream>\n#include <iostream>\nvoid log (std::string_view message)\n{\n    std::fstream logFile(\"application.log\", std::ios::app);\n    logFile << message << std::endl;\n}\nint main ()\n{\n    int result = 1;\n    for (int i = 0; i <= 3; ++i)\n    {\n        log(\"entering loop\");\n        result *= 2;\n    }\n    std::cout << \"result=\" << result << std::endl;\n    return 0;\n}\n```", "```cpp\nvoid log (std::string_view message)\n{\n    std::fstream logFile(\"application.log\", std::ios::app);\n    logFile << message << std::endl;\n}\n```", "```cpp\nMereMemo project root folder\n    MereTDD folder\n        Test.h\n    MereMemo folder\n        Log.h\n        tests folder\n            main.cpp\n            Construction.cpp\n```", "```cpp\n#ifndef MEREMEMO_LOG_H\n#define MEREMEMO_LOG_H\n#include <fstream>\n#include <iostream>\n#include <string_view>\nnamespace MereMemo\n{\ninline void log (std::string_view message)\n{\n    std::fstream logFile(\"application.log\", std::ios::app);\n    logFile << message << std::endl;\n}\n} // namespace MereMemo\n#endif // MEREMEMO_LOG_H\n```", "```cpp\n#include <MereTDD/Test.h>\n#include <iostream>\nint main ()\n{\n    return MereTDD::runTests(std::cout);\n}\n```", "```cpp\n.;$(ProjectPath)\n```", "```cpp\n#include \"../Log.h\"\n#include <MereTDD/Test.h>\nTEST(\"Simple message can be logged\")\n{\n    MereMemo::log(\"simple\");\n}\n```", "```cpp\nRunning 1 test suites\n--------------- Suite: Single Tests\n------- Test: Simple message can be logged\nPassed\n-----------------------------------\nTests passed: 1\nTests failed: 0\n```", "```cpp\n$ cat application.log \nsimple\n```", "```cpp\n$ cat application.log \nsimple\nsimple\n```", "```cpp\n#include \"../Log.h\"\n#include \"Util.h\"\n#include <MereTDD/Test.h>\nTEST(\"Simple message can be logged\")\n{\n    std::string message = \"simple \";\n    message += Util::randomString();\n    MereMemo::log(message);\n    bool result = Util::isTextInFile(message,          \"application.log\");\n    CONFIRM_TRUE(result);\n}\n```", "```cpp\n#ifndef MEREMEMO_TESTS_UTIL_H\n#define MEREMEMO_TESTS_UTIL_H\n#include <string>\n#include <string_view>\nstruct Util\n{\n    static std::string randomString ();\n    static bool isTextInFile (\n        std::string_view text,\n        std::string_view fileName);\n};\n#endif // MEREMEMO_TESTS_UTIL_H\n```", "```cpp\n#include \"Util.h\"\n#include <fstream>\n#include <random>\nstd::string Util::randomString ()\n{\n    return \"1\";\n}\nbool Util::isTextInFile (\n    std::string_view text,\n    std::string_view fileName)\n{\n    return false;\n}\n```", "```cpp\nRunning 1 test suites\n--------------- Suite: Single Tests\n------- Test: Simple message can be logged\nFailed confirm on line 15\n    Expected: true\n-----------------------------------\nTests passed: 0\nTests failed: 1\n```", "```cpp\n$ cat application.log \nsimple\nsimple\nsimple 1\n```", "```cpp\n#include <chrono>\n#include <fstream>\n#include <random>\nstd::string Util::randomString ()\n{\n    static bool firstCall = true;\n    static std::mt19937 rng;\n    if (firstCall)\n    {\n        // We only need to set the seed once.\n        firstCall = false;\n        unsigned int seed = static_cast<int>(\n            std::chrono::system_clock::now().\n            time_since_epoch().count());\n        rng.seed(seed);\n    }\n    std::uniform_int_distribution<std::mt19937::result_type> dist(1, 10000);\n    return std::to_string(dist(rng));\n}\n```", "```cpp\n$ cat application.log \nsimple\nsimple\nsimple 1\nsimple 2030\nsimple 8731\n```", "```cpp\nbool Util::isTextInFile (\n    std::string_view text,\n    std::string_view fileName)\n{\n    std::ifstream logfile(fileName.data());\n    std::string line;\n    while (getline(logfile, line))\n    {\n        if (line.find(text) != std::string::npos)\n        {\n            return true;\n        }\n    }\n    return false;\n}\n```", "```cpp\nRunning 1 test suites\n--------------- Suite: Single Tests\n------- Test: Simple message can be logged\nPassed\n-----------------------------------\nTests passed: 1\nTests failed: 0\n```", "```cpp\n#include <chrono>\n#include <ctime>\n#include <fstream>\n#include <iomanip>\n#include <iostream>\n#include <string>\n#include <string_view>\nnamespace MereMemo\n{\ninline void log (std::string_view message)\n{\n    auto const now = std::chrono::system_clock::now();\n    std::time_t const tmNow =          std::chrono::system_clock::to_time_t(now);\n    auto const ms = duration_cast<std::chrono::milliseconds>(\n        now.time_since_epoch()) % 1000;\n    std::fstream logFile(\"application.log\", std::ios::app);\n    logFile << std::put_time(std::gmtime(&tmNow),                \"%Y-%m-%dT%H:%M:%S.\")\n               << std::setw(3) << std::setfill('0')                << std::to_string(ms.count())\n               << \" \" << message << std::endl;\n}\n```", "```cpp\n$ cat application.log \n2022-06-13T03:37:15.056 simple 8520\n2022-06-13T03:37:17.288 simple 1187\n2022-06-13T03:37:18.479 simple 2801\n```", "```cpp\nTEST(\"Simple message can be logged\")\n{\n    std::string message = \"simple \";\n    message += Util::randomString();\n    MereMemo::log() << message << \" with more text.\";\n    bool result = Util::isTextInFile(message,          \"application.log\");\n    CONFIRM_TRUE(result);\n}\n```", "```cpp\ninline std::fstream log ()\n{\n    auto const now = std::chrono::system_clock::now();\n    std::time_t const tmNow =          std::chrono::system_clock::to_time_t(now);\n    auto const ms = duration_cast<std::chrono::milliseconds>(\n        now.time_since_epoch()) % 1000;\n    std::fstream logFile(\"application.log\", std::ios::app);\n    logFile << std::endl\n        << std::put_time(std::gmtime(&tmNow),         \"%Y-%m-%dT%H:%M:%S.\")\n        << std::setw(3) << std::setfill('0')         << std::to_string(ms.count())\n        << \" \";\n    return logFile;\n}\n```", "```cpp\n    MereMemo::log() << message << \" with more text.\";\n```", "```cpp\n$ cat application.log \n2022-06-13T05:01:56.308 simple 5586 with more text.\n2022-06-13T05:02:02.281 simple 2381 with more text.\n2022-06-13T05:02:05.621 simple 8099 with more text.\n```", "```cpp\nTEST(\"Complicated message can be logged\")\n{\n    std::string message = \"complicated \";\n    message += Util::randomString();\n    MereMemo::log() << message\n        << \" double=\" << 3.14\n        << \" quoted=\" << std::quoted(\"in quotes\");\n    bool result = Util::isTextInFile(message,     \"application.log\");\n    CONFIRM_TRUE(result);\n}\n```", "```cpp\n$ cat application.log \n2022-06-13T05:47:36.973 simple 6706 with more text.\n2022-06-13T05:47:36.975 complicated 1025 double=3.14 quoted=\"in quotes\"\n2022-06-13T05:47:39.489 simple 4411 with more text.\n2022-06-13T05:47:39.495 complicated 9375 double=3.14 quoted=\"in quotes\"\n```"]