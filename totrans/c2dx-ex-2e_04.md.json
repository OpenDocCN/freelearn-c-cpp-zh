["```cpp\ncocos new SkyDefense -p com.rengelbert.SkyDefense -l cpp -d /Users/rengelbert/Desktop/SkyDefense\n\n```", "```cpp\nauto screenSize = glview->getFrameSize();\nauto designSize = Size(2048, 1536);\nglview->setDesignResolutionSize(designSize.width, designSize.height,  ResolutionPolicy::EXACT_FIT);\nstd::vector<std::string> searchPaths;\nif (screenSize.height > 768) {\n   searchPaths.push_back(\"ipadhd\");\n   director->setContentScaleFactor(1536/designSize.height);\n} else if (screenSize.height > 320) {\n   searchPaths.push_back(\"ipad\");\n   director->setContentScaleFactor(768/designSize.height);\n} else {\n   searchPaths.push_back(\"iphone\");\n   director->setContentScaleFactor(380/designSize.height);\n}\nauto fileUtils = FileUtils::getInstance();\nfileUtils->setSearchPaths(searchPaths);\n```", "```cpp\nauto audioEngine = SimpleAudioEngine::getInstance();\naudioEngine->preloadBackgroundMusic(fileUtils->fullPathForFilename(\"background.mp3\").c_str());\n\n```", "```cpp\n//lower playback volume for effects\naudioEngine->setEffectsVolume(0.4f);\n```", "```cpp\nSimpleAudioEngine::getInstance()-  >playBackgroundMusic(\"background.mp3\", true);\n```", "```cpp\nvoid GameLayer::createGameScreen() {\n\n  //add bg\n  auto bg = Sprite::create(\"bg.png\");\n  ...\n\n  SpriteFrameCache::getInstance()->\n  addSpriteFramesWithFile(\"sprite_sheet.plist\");\n\n  _gameBatchNode = SpriteBatchNode::create(\"sprite_sheet.png\");\n  this->addChild(_gameBatchNode);\n```", "```cpp\n    for (int i = 0; i < 2; i++) {\n      auto sprite = Sprite::createWithSpriteFrameName (\"city_dark.png\");\n        sprite->setAnchorPoint(Vec2(0.5,0));\n      sprite->setPosition(_screenSize.width * (0.25f + i *  0.5f),0));\n      _gameBatchNode->addChild(sprite, kMiddleground);\n\n      sprite = Sprite::createWithSpriteFrameName(\"city_light.png\");\n      sprite->setAnchorPoint(Vec2(0.5,0));\n      sprite->setPosition(Vec2(_screenSize.width * (0.25f + i *  0.5f),\n      _screenSize.height * 0.1f));\n      _gameBatchNode->addChild(sprite, kBackground);\n    }\n    ```", "```cpp\n    //add trees\n    for (int i = 0; i < 3; i++) {\n      auto sprite = Sprite::createWithSpriteFrameName(\"trees.png\");\n      sprite->setAnchorPoint(Vec2(0.5f, 0.0f));\n      sprite->setPosition(Vec2(_screenSize.width * (0.2f + i * 0.3f),0));\n      _gameBatchNode->addChild(sprite, kForeground);\n\n    }\n    ```", "```cpp\n    enum {\n      kBackground,\n      kMiddleground,\n      kForeground\n    };\n    ```", "```cpp\n_scoreDisplay = Label::createWithBMFont(\"font.fnt\", \"0\");\n```", "```cpp\n_scoreDisplay->setString(\"1000\");\n```", "```cpp\n    _scoreDisplay = Label::createWithBMFont(\"font.fnt\", \"0\");\n    _scoreDisplay->setAnchorPoint(Vec2(1,0.5));\n    _scoreDisplay->setPosition(Vec2 (_screenSize.width * 0.8f, _screenSize.height * 0.94f));\n    this->addChild(_scoreDisplay);\n    ```", "```cpp\n    _energyDisplay = Label::createWithBMFont(\"font.fnt\", \"100%\", TextHAlignment::RIGHT);\n    _energyDisplay->setPosition(Vec2 (_screenSize.width * 0.3f, _screenSize.height * 0.94f));\n    this->addChild(_energyDisplay);\n    ```", "```cpp\n    auto icon = Sprite::createWithSpriteFrameName(\"health_icon.png\");\n    icon->setPosition( Vec2(_screenSize. width * 0.15f,  _screenSize.height * 0.94f) );\n    _gameBatchNode->addChild(icon, kBackground);\n    ```", "```cpp\n    for (int i = 0; i < 4; i++) {\n      float cloud_y = i % 2 == 0 ? _screenSize.height * 0.4f : _screenSize.height * 0.5f;\n      auto cloud = Sprite::createWithSpriteFrameName(\"cloud.png\");\n      cloud->setPosition(Vec2 (_screenSize.width * 0.1f + i * _screenSize.width * 0.3f,  cloud_y));\n      _gameBatchNode->addChild(cloud, kBackground);\n      _clouds.pushBack(cloud);\n    }\n    ```", "```cpp\n    _bomb = Sprite::createWithSpriteFrameName(\"bomb.png\");\n    _bomb->getTexture()->generateMipmap();\n    _bomb->setVisible(false);\n\n    auto size = _bomb->getContentSize();\n\n    //add sparkle inside bomb sprite\n    auto sparkle = Sprite::createWithSpriteFrameName(\"sparkle.png\");\n    sparkle->setPosition(Vec2(size.width * 0.72f, size.height *  0.72f));\n    _bomb->addChild(sparkle, kMiddleground, kSpriteSparkle);\n\n    //add halo inside bomb sprite\n    auto halo = Sprite::createWithSpriteFrameName (\"halo.png\");\n    halo->setPosition(Vec2(size.width * 0.4f, size.height *  0.4f));\n    _bomb->addChild(halo, kMiddleground, kSpriteHalo);\n    _gameBatchNode->addChild(_bomb, kForeground);\n    ```", "```cpp\n    _shockWave = Sprite::createWithSpriteFrameName(\"shockwave.png\");\n    _shockWave->getTexture()->generateMipmap();\n    _shockWave->setVisible(false);\n    _gameBatchNode->addChild(_shockWave);\n    ```", "```cpp\n    _introMessage = Sprite::createWithSpriteFrameName(\"logo.png\");\n    _introMessage->setPosition(Vec2 (_screenSize.width * 0.5f, _screenSize.height * 0.6f));\n    _introMessage->setVisible(true);\n    this->addChild(_introMessage, kForeground);\n\n    _gameOverMessage = Sprite::createWithSpriteFrameName (\"gameover.png\");\n    _gameOverMessage->setPosition(Vec2 (_screenSize.width * 0.5f, _screenSize.height * 0.65f));\n    _gameOverMessage->setVisible(false);\n    this->addChild(_gameOverMessage, kForeground);\n    ```", "```cpp\n    _bomb->getTexture()->generateMipmap();\n    ```", "```cpp\n    bomb->addChild(halo, kMiddleground, kSpriteHalo);\n    ```", "```cpp\n    auto halo = (Sprite *)  bomb->getChildByTag(kSpriteHalo);\n    ```", "```cpp\n    void GameLayer::createPools() {\n      int i;\n      _meteorPoolIndex = 0;\n      for (i = 0; i < 50; i++) {\n      auto sprite = Sprite::createWithSpriteFrameName(\"meteor.png\");\n      sprite->setVisible(false);\n      _gameBatchNode->addChild(sprite, kMiddleground, kSpriteMeteor);\n      _meteorPool.pushBack(sprite);\n    }\n    ```", "```cpp\n    _healthPoolIndex = 0;\n    for (i = 0; i < 20; i++) {\n      auto sprite = Sprite::createWithSpriteFrameName(\"health.png\");\n      sprite->setVisible(false);\n      sprite->setAnchorPoint(Vec2(0.5f, 0.8f));\n      _gameBatchNode->addChild(sprite, kMiddleground, kSpriteHealth);\n      _healthPool.pushBack(sprite);\n    }\n    ```", "```cpp\nauto fadeout = FadeOut::create(1.0f);\n```", "```cpp\nmySprite->runAction(fadeout);\n```", "```cpp\n    void GameLayer::createActions() {\n     //swing action for health drops\n     auto easeSwing = Sequence::create(\n     EaseInOut::create(RotateTo::create(1.2f, -10), 2),\n     EaseInOut::create(RotateTo::create(1.2f, 10), 2),\n     nullptr);//mark the end of a sequence with a nullptr\n     _swingHealth = RepeatForever::create( (ActionInterval *) easeSwing );\n     _swingHealth->retain();\n    ```", "```cpp\n    //action sequence for shockwave: fade out, callback when  //done\n    _shockwaveSequence = Sequence::create(\n      FadeOut::create(1.0f),\n      CallFunc::create(std::bind(&GameLayer::shockwaveDone, this)), nullptr);\n    _shockwaveSequence->retain();\n\n    //action to grow bomb\n    _growBomb = ScaleTo::create(6.0f, 1.0);\n    _growBomb->retain();\n\n    //action to rotate sprites\n    auto rotate = RotateBy::create(0.5f ,  -90);\n    _rotateSprite = RepeatForever::create( rotate );\n    _rotateSprite->retain();\n    ```", "```cpp\n    auto animation = Animation::create();\n    int i;\n    for(i = 1; i <= 10; i++) {\n      auto name = String::createWithFormat(\"boom%i.png\", i);\n      auto frame = SpriteFrameCache::getInstance()->getSpriteFrameByName(name->getCString());\n      animation->addSpriteFrame(frame);\n    }\n    ```", "```cpp\n    animation->setDelayPerUnit(1 / 10.0f);\n    animation->setRestoreOriginalFrame(true);\n    _groundHit = \n      Sequence::create(\n        MoveBy::create(0, Vec2(0,_screenSize.height * 0.12f)),\n        Animate::create(animation),\n       CallFuncN::create(CC_CALLBACK_1(GameLayer::animationDone, this)), nullptr);\n    _groundHit->retain();\n    ```", "```cpp\n    animation = Animation::create();\n    for(int i = 1; i <= 7; i++) {\n     auto name = String::createWithFormat(\"explosion_small%i.png\", i);\n     auto frame = SpriteFrameCache::getInstance()->getSpriteFrameByName(name->getCString());\n     animation->addSpriteFrame(frame);\n    }\n\n    animation->setDelayPerUnit(0.5 / 7.0f);\n    animation->setRestoreOriginalFrame(true);\n    _explosion = Sequence::create(\n         Animate::create(animation),\n       CallFuncN::create(CC_CALLBACK_1(GameLayer::animationDone, this)), nullptr);\n    _explosion->retain();\n    ```", "```cpp\n    void GameLayer::animationDone (Node* pSender) {\n      pSender->setVisible(false);\n    }\n    ```", "```cpp\n    bool GameLayer::onTouchBegan (Touch * touch, Event * event){\n\n      //if game not running, we are seeing either intro or  //gameover\n      if (!_running) {\n        //if intro, hide intro message\n        if (_introMessage->isVisible()) {\n          _introMessage->setVisible(false);\n\n          //if game over, hide game over message \n        } else if (_gameOverMessage->isVisible()) {\n          SimpleAudioEngine::getInstance()->stopAllEffects();\n          _gameOverMessage->setVisible(false);\n\n        }\n\n        this->resetGame();\n        return true;\n      }\n    ```", "```cpp\n    auto touch = (Touch *)pTouches->anyObject();\n\n    if (touch) {\n\n      //if bomb already growing...\n      if (_bomb->isVisible()) {\n        //stop all actions on bomb, halo and sparkle\n        _bomb->stopAllActions();\n        auto child = (Sprite *) _bomb->getChildByTag(kSpriteHalo);\n        child->stopAllActions();\n        child = (Sprite *) _bomb->getChildByTag(kSpriteSparkle);\n        child->stopAllActions();\n\n        //if bomb is the right size, then create shockwave\n        if (_bomb->getScale() > 0.3f) {\n          _shockWave->setScale(0.1f);\n          _shockWave->setPosition(_bomb->getPosition());\n          _shockWave->setVisible(true);\n          _shockWave->runAction(ScaleTo::create(0.5f, _bomb->getScale() * 2.0f));\n          _shockWave->runAction(_shockwaveSequence->clone());\n          SimpleAudioEngine::getInstance()->playEffect(\"bombRelease.wav\");\n\n        } else {\n          SimpleAudioEngine::getInstance()->playEffect(\"bombFail.wav\");\n        }\n        _bomb->setVisible(false);\n        //reset hits with shockwave, so we can count combo hits\n        _shockwaveHits = 0;\n\n     //if no bomb currently on screen, create one\n     } else {\n        Point tap = touch->getLocation();\n        _bomb->stopAllActions();\n        _bomb->setScale(0.1f);\n        _bomb->setPosition(tap);\n        _bomb->setVisible(true);\n        _bomb->setOpacity(50);\n        _bomb->runAction(_growBomb->clone());\n\n         auto child = (Sprite *) _bomb->getChildByTag(kSpriteHalo);\n         child->runAction(_rotateSprite->clone());\n         child = (Sprite *) _bomb->getChildByTag(kSpriteSparkle);\n         child->runAction(_rotateSprite->clone());\n      }\n    }\n    ```", "```cpp\n    child = (Sprite *) _bomb->getChildByTag(kSpriteHalo);\n    child->stopAllActions();\n    child = (Sprite *) _bomb->getChildByTag(kSpriteSparkle);\n    child->stopAllActions();\n    ```", "```cpp\n    void GameLayer::resetGame(void) {\n        _score = 0;\n        _energy = 100;\n\n        //reset timers and \"speeds\"\n        _meteorInterval = 2.5;\n        _meteorTimer = _meteorInterval * 0.99f;\n        _meteorSpeed = 10;//in seconds to reach ground\n        _healthInterval = 20;\n        _healthTimer = 0;\n        _healthSpeed = 15;//in seconds to reach ground\n\n        _difficultyInterval = 60;\n        _difficultyTimer = 0;\n\n        _running = true;\n\n        //reset labels\n        _energyDisplay->setString(std::to_string((int) _energy) + \"%\");\n        _scoreDisplay->setString(std::to_string((int) _score));\n    }\n    ```", "```cpp\n    void GameLayer::stopGame() {\n\n        _running = false;\n\n        //stop all actions currently running\n        int i;\n        int count = (int) _fallingObjects.size();\n\n        for (i = count-1; i >= 0; i--) {\n            auto sprite = _fallingObjects.at(i);\n            sprite->stopAllActions();\n            sprite->setVisible(false);\n            _fallingObjects.erase(i);\n        }\n        if (_bomb->isVisible()) {\n            _bomb->stopAllActions();\n            _bomb->setVisible(false);\n            auto child = _bomb->getChildByTag(kSpriteHalo);\n            child->stopAllActions();\n            child = _bomb->getChildByTag(kSpriteSparkle);\n            child->stopAllActions();\n        }\n        if (_shockWave->isVisible()) {\n            _shockWave->stopAllActions();\n            _shockWave->setVisible(false);\n        }\n        if (_ufo->isVisible()) {\n            _ufo->stopAllActions();\n            _ufo->setVisible(false);\n            auto ray = _ufo->getChildByTag(kSpriteRay);\n            ray->stopAllActions();\n            ray->setVisible(false);\n        }\n    }\n    ```", "```cpp\n    if (_shockWave->isVisible()) {\n     count = (int) _fallingObjects.size();\n     for (i = count-1; i >= 0; i--) {\n       auto sprite =  _fallingObjects.at(i);\n       diffx = _shockWave->getPositionX() - sprite->getPositionX();\n       diffy = _shockWave->getPositionY() - sprite->getPositionY();\n       if (pow(diffx, 2) + pow(diffy, 2) <= pow(_shockWave->getBoundingBox().size.width * 0.5f, 2)) {\n        sprite->stopAllActions();\n        sprite->runAction( _explosion->clone());\n        SimpleAudioEngine::getInstance()->playEffect(\"boom.wav\");\n        if (sprite->getTag() == kSpriteMeteor) {\n          _shockwaveHits++;\n          _score += _shockwaveHits * 13 + _shockwaveHits * 2;\n        }\n        //play sound\n        _fallingObjects.erase(i);\n      }\n     }\n     _scoreDisplay->setString(std::to_string(_score));\n    }\n    ```", "```cpp\n    //move clouds\n    for (auto sprite : _clouds) {\n      sprite->setPositionX(sprite->getPositionX() + dt * 20);\n      if (sprite->getPositionX() > _screenSize.width + sprite->getBoundingBox().size.width * 0.5f)\n        sprite->setPositionX(-sprite->getBoundingBox().size.width * 0.5f);\n    }\n    ```", "```cpp\n    if (_bomb->isVisible()) {\n       if (_bomb->getScale() > 0.3f) {\n          if (_bomb->getOpacity() != 255)\n             _bomb->setOpacity(255);\n       }\n    }\n    ```", "```cpp\n    void GameLayer::resetMeteor(void) {\n       //if too many objects on screen, return\n        if (_fallingObjects.size() > 30) return;\n\n        auto meteor = _meteorPool.at(_meteorPoolIndex);\n          _meteorPoolIndex++;\n        if (_meteorPoolIndex == _meteorPool.size()) \n          _meteorPoolIndex = 0;\n          int meteor_x = rand() % (int) (_screenSize.width * 0.8f) + _screenSize.width * 0.1f;\n       int meteor_target_x = rand() % (int) (_screenSize.width * 0.8f) + _screenSize.width * 0.1f;\n\n        meteor->stopAllActions();\n        meteor->setPosition(Vec2(meteor_x, _screenSize.height + meteor->getBoundingBox().size.height * 0.5));\n\n        //create action\n        auto  rotate = RotateBy::create(0.5f ,  -90);\n        auto  repeatRotate = RepeatForever::create( rotate );\n        auto  sequence = Sequence::create (\n                   MoveTo::create(_meteorSpeed, Vec2(meteor_target_x, _screenSize.height * 0.15f)),\n                   CallFunc::create(std::bind(&GameLayer::fallingObjectDone, this, meteor) ), nullptr);    \n      meteor->setVisible ( true );\n      meteor->runAction(repeatRotate);\n      meteor->runAction(sequence);\n     _fallingObjects.pushBack(meteor);\n    }\n    ```", "```cpp\nif (_fallingObjects->size() > 30) return;\n```", "```cpp\nif (pSender->getTag() == kSpriteMeteor) {\n```", "```cpp\nGameLayer::~GameLayer () {\n\n    //release all retained actions\n    CC_SAFE_RELEASE(_growBomb);\n    CC_SAFE_RELEASE(_rotateSprite);\n    CC_SAFE_RELEASE(_shockwaveSequence);\n    CC_SAFE_RELEASE(_swingHealth);\n    CC_SAFE_RELEASE(_groundHit);\n    CC_SAFE_RELEASE(_explosion);\n    CC_SAFE_RELEASE(_ufoAnimation);\n    CC_SAFE_RELEASE(_blinkRay);\n\n    _clouds.clear();\n    _meteorPool.clear();\n    _healthPool.clear();\n    _fallingObjects.clear();\n}\n```", "```cpp\n    LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                       ../../Classes/AppDelegate.cpp \\\n                       ../../Classes/GameLayer.cpp \n    ```"]