["```cpp\nMereTDD project root folder\n    Test.h\n    tests folder\n        main.cpp\n        Confirm.cpp\n        Creation.cpp\n        Setup.cpp\n```", "```cpp\nTEST_EX(\"Test will run setup and teardown code\", int)\n{\n    int id = createTestEntry();\n    // If this was a project test, it might be called\n    // \"Updating empty name throws\". And the type thrown\n    // would not be an int.\n    updateTestEntryName(id, \"\");\n    deleteTestEntry(id);\n}\n```", "```cpp\n#include \"../Test.h\"\n#include <string_view>\nint createTestEntry ()\n{\n    // If this was real code, it might open a\n    // connection to a database, insert a row\n    // of data, and return the row identifier.\n    return 100;\n}\nvoid updateTestEntryName (int /*id*/, std::string_view name)\n{\n    if (name.empty())\n    {\n        throw 1;\n    }\n    // Real code would proceed to update the\n    // data with the new name.\n}\nvoid deleteTestEntry (int /*id*/)\n{\n    // Real code would use the id to delete\n    // the temporary row of data.\n}\n```", "```cpp\nTEST_EX(\"Test will run setup and teardown code\", int)\n{\n    TempEntry entry;\n    // If this was a project test, it might be called\n    // \"Updating empty name throws\". And the type thrown\n    // would not be an int.\n    updateTestEntryName(entry.id(), \"\");\n}\n```", "```cpp\nclass TempEntry\n{\npublic:\n    TempEntry ()\n    {\n        mId = createTestEntry();\n    }\n    ~TempEntry ()\n    {\n        deleteTestEntry(mId);\n    }\n    int id ()\n    {\n        return mId;\n    }\nprivate:\n    int mId;\n};\n```", "```cpp\nclass TempEntry\n{\npublic:\n    void setup ()\n    {\n        mId = createTestEntry();\n    }\n    void teardown ()\n    {\n        deleteTestEntry(mId);\n    }\n    int id ()\n    {\n        return mId;\n    }\nprivate:\n    int mId;\n};\n```", "```cpp\ntemplate <typename T>\nclass SetupAndTeardown : public T\n{\npublic:\n    SetupAndTeardown ()\n    {\n        T::setup();\n    }\n    ~SetupAndTeardown ()\n    {\n        T::teardown();\n    }\n};\n```", "```cpp\nTEST_EX(\"Test will run setup and teardown code\", int)\n{\n    MereTDD::SetupAndTeardown<TempEntry> entry;\n    // If this was a project test, it might be called\n    // \"Updating empty name throws\". And the type thrown\n    // would not be an int.\n    updateTestEntryName(entry.id(), \"\");\n}\n```", "```cpp\nTEST(\"Test will run multiple setup and teardown code\")\n{\n    MereTDD::SetupAndTeardown<TempEntry> entry1;\n    MereTDD::SetupAndTeardown<TempEntry> entry2;\n    // If this was a project test, it might need\n    // more than one temporary entry. The TempEntry\n    // policy could either create multiple data records\n    // or it is easier to just have multiple instances\n    // that each create a single data entry.\n    updateTestEntryName(entry1.id(), \"abc\");\n    updateTestEntryName(entry2.id(), \"def\");\n}\n```", "```cpp\n#include <string>\n#include <string_view>\nstd::string createTestTable ()\n{\n    // If this was real code, it might open a\n    // connection to a database, create a temp\n    // table with a random name, and return the\n    // table name.\n    return \"test_data_01\";\n}\nvoid dropTestTable (std::string_view /*name*/)\n{\n    // Real code would use the name to drop\n    // the table.\n}\n```", "```cpp\nclass TempTable\n{\npublic:\n    void setup ()\n    {\n        mName = createTestTable();\n    }\n    void teardown ()\n    {\n        dropTestTable(mName);\n    }\n    std::string tableName ()\n    {\n        return mName;\n    }\nprivate:\n    std::string mName;\n};\n```", "```cpp\nMereTDD::TestSuiteSetupAndTeardown<TempTable>\ngTable1(\"Test suite setup/teardown 1\", \"Suite 1\");\nMereTDD::TestSuiteSetupAndTeardown<TempTable>\ngTable2(\"Test suite setup/teardown 2\", \"Suite 1\");\nTEST_SUITE(\"Test part 1 of suite\", \"Suite 1\")\n{\n    // If this was a project test, it could use\n    // the table names from gTable1 and gTable2.\n    CONFIRM(\"test_data_01\", gTable1.tableName());\n    CONFIRM(\"test_data_01\", gTable2.tableName());\n}\nTEST_SUITE_EX(\"Test part 2 of suite\", \"Suite 1\", int)\n{\n    // If this was a project test, it could use\n    // the table names from gTable1 and gTable2.\n    throw 1;\n}\n```", "```cpp\n#include <map>\n#include <ostream>\n#include <string_view>\n#include <vector>\n```", "```cpp\nclass Test;\nclass TestSuite;\ninline std::map<std::string, std::vector<Test *>> & getTests ()\n{\n    static std::map<std::string, std::vector<Test *>> tests;\n    return tests;\n}\ninline std::map<std::string, std::vector<TestSuite *>> & getTestSuites ()\n{\n    static std::map<std::string,            std::vector<TestSuite *>> suites;\n    return suites;\n}\n```", "```cpp\ninline void addTest (std::string_view suiteName, Test * test)\n{\n    std::string name(suiteName);\n    if (not getTests().contains(name))\n    {\n        getTests().try_emplace(name, std::vector<Test *>());\n    }\n    getTests()[name].push_back(test);\n}\ninline void addTestSuite (std::string_view suiteName, TestSuite * suite)\n{\n    std::string name(suiteName);\n    if (not getTestSuites().contains(name))\n    {\n        getTestSuites().try_emplace(name,            std::vector<TestSuite *>());\n    }\n    getTestSuites()[name].push_back(suite);\n}\n```", "```cpp\nclass TestBase\n{\npublic:\n    TestBase (std::string_view name, std::string_view suiteName)\n    : mName(name),\n      mSuiteName(suiteName),\n      mPassed(true),\n      mConfirmLocation(-1)\n    { }\n    virtual ~TestBase () = default;\n    std::string_view name () const\n    {\n        return mName;\n    }\n    std::string_view suiteName () const\n    {\n        return mSuiteName;\n    }\n    bool passed () const\n    {\n        return mPassed;\n    }\n    std::string_view reason () const\n    {\n        return mReason;\n    }\n    int confirmLocation () const\n    {\n        return mConfirmLocation;\n    }\n    void setFailed (std::string_view reason,          int confirmLocation = -1)\n    {\n        mPassed = false;\n        mReason = reason;\n        mConfirmLocation = confirmLocation;\n    }\nprivate:\n    std::string mName;\n    std::string mSuiteName;\n    bool mPassed;\n    std::string mReason;\n    int mConfirmLocation;\n};\n```", "```cpp\nclass Test : public TestBase\n{\npublic:\n    Test (std::string_view name, std::string_view suiteName)\n    : TestBase(name, suiteName)\n    {\n        addTest(suiteName, this);\n    }\n    virtual void runEx ()\n    {\n        run();\n    }\n    virtual void run () = 0;\n    std::string_view expectedReason () const\n    {\n        return mExpectedReason;\n    }\n    void setExpectedFailureReason (std::string_view reason)\n    {\n        mExpectedReason = reason;\n    }\nprivate:\n    std::string mExpectedReason;\n};\n```", "```cpp\ntemplate <typename ExceptionT>\nclass TestEx : public Test\n{\npublic:\n    TestEx (std::string_view name,\n        std::string_view suiteName,\n        std::string_view exceptionName)\n    : Test(name, suiteName), mExceptionName(exceptionName)\n    { }\n    void runEx () override\n    {\n        try\n        {\n            run();\n        }\n        catch (ExceptionT const &)\n        {\n            return;\n        }\n        throw MissingException(mExceptionName);\n    }\nprivate:\n    std::string mExceptionName;\n};\n```", "```cpp\nclass TestSuite : public TestBase\n{\npublic:\n    TestSuite (\n        std::string_view name,\n        std::string_view suiteName)\n    : TestBase(name, suiteName)\n    {\n        addTestSuite(suiteName, this);\n    }\n    virtual void suiteSetup () = 0;\n    virtual void suiteTeardown () = 0;\n};\n```", "```cpp\ninline void runTest (std::ostream & output, Test * test,\n    int & numPassed, int & numFailed, int & numMissedFailed)\n{\n    output << \"------- Test: \"\n        << test->name()\n        << std::endl;\n    try\n    {\n        test->runEx();\n    }\n    catch (ConfirmException const & ex)\n    {\n        test->setFailed(ex.reason(), ex.line());\n    }\n    catch (MissingException const & ex)\n    {\n        std::string message = \"Expected exception type \";\n        message += ex.exType();\n        message += \" was not thrown.\";\n        test->setFailed(message);\n    }\n    catch (...)\n    {\n        test->setFailed(\"Unexpected exception thrown.\");\n    }\n    if (test->passed())\n    {\n        if (not test->expectedReason().empty())\n        {\n            // This test passed but it was supposed\n            // to have failed.\n            ++numMissedFailed;\n            output << \"Missed expected failure\\n\"\n                << \"Test passed but was expected to fail.\"\n                << std::endl;\n        }\n        else\n        {\n            ++numPassed;\n            output << \"Passed\"\n                << std::endl;\n        }\n    }\n    else if (not test->expectedReason().empty() &&\n        test->expectedReason() == test->reason())\n    {\n        ++numPassed;\n        output << \"Expected failure\\n\"\n            << test->reason()\n            << std::endl;\n    }\n    else\n    {\n        ++numFailed;\n        if (test->confirmLocation() != -1)\n        {\n            output << \"Failed confirm on line \"\n                << test->confirmLocation() << \"\\n\";\n        }\n        else\n        {\n            output << \"Failed\\n\";\n        }\n        output << test->reason()\n            << std::endl;\n    }\n}\n```", "```cpp\ninline bool runSuite (std::ostream & output,\n    bool setup, std::string const & name,\n    int & numPassed, int & numFailed)\n{\n    for (auto & suite: getTestSuites()[name])\n    {\n        if (setup)\n        {\n            output << \"------- Setup: \";\n        }\n        else\n        {\n            output << \"------- Teardown: \";\n        }\n        output << suite->name()\n            << std::endl;\n        try\n        {\n            if (setup)\n            {\n                suite->suiteSetup();\n            }\n            else\n            {\n                suite->suiteTeardown();\n            }\n        }\n        catch (ConfirmException const & ex)\n        {\n            suite->setFailed(ex.reason(), ex.line());\n        }\n        catch (...)\n        {\n            suite->setFailed(\"Unexpected exception thrown.\");\n        }\n        if (suite->passed())\n        {\n            ++numPassed;\n            output << \"Passed\"\n                << std::endl;\n        }\n        else\n        {\n            ++numFailed;\n            if (suite->confirmLocation() != -1)\n            {\n                output << \"Failed confirm on line \"\n                    << suite->confirmLocation() << \"\\n\";\n            }\n            else\n            {\n                output << \"Failed\\n\";\n            }\n            output << suite->reason()\n                << std::endl;\n            return false;\n        }\n    }\n    return true;\n}\n```", "```cpp\ninline int runTests (std::ostream & output)\n{\n    output << \"Running \"\n        << getTests().size()\n        << \" test suites\\n\";\n    int numPassed = 0;\n    int numMissedFailed = 0;\n    int numFailed = 0;\n    for (auto const & [key, value]: getTests())\n    {\n        std::string suiteDisplayName = \"Suite: \";\n        if (key.empty())\n        {\n            suiteDisplayName += \"Single Tests\";\n        }\n        else\n        {\n            suiteDisplayName += key;\n        }\n        output << \"--------------- \"\n            << suiteDisplayName\n            << std::endl;\n        if (not key.empty())\n        {\n            if (not getTestSuites().contains(key))\n            {\n                output << \"Test suite is not found.\"\n                    << \" Exiting test application.\"\n                    << std::endl;\n                return ++numFailed;\n            }\n            if (not runSuite(output, true, key,\n                numPassed, numFailed))\n            {\n                output << \"Test suite setup failed.\"\n                    << \" Skipping tests in suite.\"\n                    << std::endl;\n                continue;\n            }\n        }\n        for (auto * test: value)\n        {\n            runTest(output, test,\n                numPassed, numFailed, numMissedFailed);\n        }\n        if (not key.empty())\n        {\n            if (not runSuite(output, false, key,\n                numPassed, numFailed))\n            {\n                output << \"Test suite teardown failed.\"\n                    << std::endl;\n            }\n        }\n    }\n    output << \"-----------------------------------\\n\";\n    output << \"Tests passed: \" << numPassed\n        << \"\\nTests failed: \" << numFailed;\n    if (numMissedFailed != 0)\n    {\n        output << \"\\nTests failures missed: \"                << numMissedFailed;\n    }\n    output << std::endl;\n    return numFailed;\n}\n```", "```cpp\ntemplate <typename T>\nclass TestSuiteSetupAndTeardown :\n    public T,\n    public TestSuite\n{\npublic:\n    TestSuiteSetupAndTeardown (\n        std::string_view name,\n        std::string_view suite)\n    : TestSuite(name, suite)\n    { }\n    void suiteSetup () override\n    {\n        T::setup();\n    }\n    void suiteTeardown () override\n    {\n        T::teardown();\n    }\n};\n```", "```cpp\n#define TEST_SUITE( testName, suiteName ) \\\nnamespace { \\\nclass MERETDD_CLASS : public MereTDD::Test \\\n{ \\\npublic: \\\n    MERETDD_CLASS (std::string_view name, \\\n      std::string_view suite) \\\n    : Test(name, suite) \\\n    { } \\\n    void run () override; \\\n}; \\\n} /* end of unnamed namespace */ \\\nMERETDD_CLASS MERETDD_INSTANCE(testName, suiteName); \\\nvoid MERETDD_CLASS::run ()\n```", "```cpp\n#define TEST_SUITE_EX( testName, suiteName, exceptionType ) \\\nnamespace { \\\nclass MERETDD_CLASS : public MereTDD::TestEx<exceptionType> \\\n{ \\\npublic: \\\n    MERETDD_CLASS (std::string_view name, \\\n        std::string_view suite, \\\n        std::string_view exceptionName) \\\n    : TestEx(name, suite, exceptionName) \\\n    { } \\\n    void run () override; \\\n}; \\\n} /* end of unnamed namespace */ \\\nMERETDD_CLASS MERETDD_INSTANCE(testName, suiteName, #exceptionType); \\\nvoid MERETDD_CLASS::run ()\n```", "```cpp\nRunning 2 test suites\n--------------- Suite: Single Tests\n------- Test: Test will run setup and teardown code\nPassed\n------- Test: Test will run multiple setup and teardown code\nPassed\n------- Test: Test can be created\nPassed\n------- Test: Test that throws unexpectedly can be created\nExpected failure\nUnexpected exception thrown.\n```", "```cpp\n--------------- Suite: Suite 1\n------- Setup: Test suite setup/teardown 1\nPassed\n------- Setup: Test suite setup/teardown 2\nPassed\n------- Test: Test part 1 of suite\nPassed\n------- Test: Test part 2 of suite\nPassed\n------- Teardown: Test suite setup/teardown 1\nPassed\n------- Teardown: Test suite setup/teardown 2\nPassed\n-----------------------------------\nTests passed: 30\nTests failed: 0\nTests failures missed: 1\n```", "```cpp\nint createTestEntry ()\n{\n    // If this was real code, it might open a\n    // connection to a database, insert a row\n    // of data, and return the row identifier.\n    return 100;\n}\n```", "```cpp\nstd::string createTestTable ()\n{\n    // If this was real code, it might open a\n    // connection to a database, create a temp\n    // table with a random name, and return the\n    // table name.\n    return \"test_data_01\";\n}\n```", "```cpp\nclass TempEntry\n{\npublic:\n    void setup ()\n    {\n        mId = createTestEntry();\n        CONFIRM(10, mId);\n    }\n```", "```cpp\n------- Test: Test will run multiple setup and teardown code\nFailed confirm on line 51\n    Expected: 10\n    Actual  : 100\n```", "```cpp\nclass TempEntry\n{\npublic:\n    void setup ()\n    {\n        mId = createTestEntry();\n    }\n    void teardown ()\n    {\n        deleteTestEntry(mId);\n        CONFIRM(10, mId);\n    }\n```", "```cpp\nRunning 2 test suites\n--------------- Suite: Single Tests\n------- Test: Test will run setup and teardown code\nterminate called after throwing an instance of 'MereTDD::ActualConfirmException'\n/tmp/codelite-exec.sh: line 3: 38155 Abort trap: 6           ${command}\n```", "```cpp\nclass TempTable\n{\npublic:\n    void setup ()\n    {\n        mName = createTestTable();\n        CONFIRM(\"test_data_02\", mName);\n    }\n```", "```cpp\n--------------- Suite: Suite 1\n------- Setup: Test suite setup/teardown 1\nFailed confirm on line 73\n    Expected: test_data_02\n    Actual  : test_data_01\nTest suite setup failed. Skipping tests in suite.\n```"]