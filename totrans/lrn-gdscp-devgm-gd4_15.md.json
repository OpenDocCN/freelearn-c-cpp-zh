["```cpp\nC:\\Users\\user_name\\Documents\\my_text_file.txt\n```", "```cpp\n~/Documents/my_text_file.txt\n```", "```cpp\nres://parts/player/player.tscn\n```", "```cpp\nextends Node\nconst SAVE_FILE_PATH: String = \"user://save_data.json\"\nvar save_data: Dictionary = {\n   \"highscore\": 0\n}\nfunc write_save_data():\n   var json_string: String = JSON.stringify(save_data)\n   var save_file: FileAccess = FileAccess.open(SAVE_FILE_PATH, FileAccess.WRITE)\n   if save_file == null:\n      print(\"Could not open save file.\")\n      return\n   save_file.save_data, that we’ll use to store all the data in. For now, it only contains highscore. If we want to access the saved data later on during the game, we can just use this variable.\n\t\t\tThen we have the `write_save_data()` function, which actually writes our data to a file. This function starts by converting our `save_data` dictionary to a JSON string using the `JSON.stringify()` function.\n\t\t\tThe JSON standard\n\t\t\tJSON is a data format that is widely used on the web and other platforms. The name **JSON** stands for **JavaScript Object Notation**. It is a very lightweight way of storing data and has the added benefit of being easy to read and adjust once our data is stored in the file.\n\t\t\tNext, we use the `FileAccess` class to open the file in which we would like to write our data. We stored the path to the file as a constant, `SAVE_FILE_PATH`, at the top of the script. Because we want to write to the file, we need to open it with write access by providing `File.Access.WRITE` to the `open()` function. This mode of accessing the file will also create the file for us if it doesn’t exist yet. The opened file gets stored in the `save_file` variable.\n\t\t\tNext, we check whether `save_file` opened properly. If, for any reason, the file could not be opened, this variable’s value will be `null` and we should stop executing the function.\n\t\t\tMore information\n\t\t\tFor more on the `FileAccess` class, check out the official documentation: [https://docs.godotengine.org/en/stable/classes/class_fileaccess.html](https://docs.godotengine.org/en/stable/classes/class_fileaccess.html).\n\t\t\tThe last thing we need to do, when the file is properly opened, is actually write the JSON data to it. We do this using `store_string()` on `save_file`, passing along `json_string`.\n\t\t\tThat is all we need to write data to a file in the `user://` folder. Now we can write a function that reads this data back in.\n\t\t\tReading data from disk\n\t\t\tTo read data from the `user://` folder, we follow the same steps as writing it, but in reverse. Add this function to the `save_manager.gd` script:\n\n```", "```cpp\nfunc _ready():\n   read_save_data()\nfunc save_highscore(new_highscore: float):\n   save_data.highscore = new_highscore\n   write_save_data()\n```", "```cpp\nfunc _ready():\n   highscore = SaveManager.save_data.highscore\nfunc set_new_highscore(value: int):\n   if value > highscore:\n      highscore = value\n      SaveManager.save_highscore(highscore)\n```", "```cpp\n{\"highscore\":56}\n```", "```cpp\n\n```"]