["```cpp\nclass AGameMode_CH7 : public AGameModeBase\n{\npublic:\n    virtual void PostLogin(APlayerController* NewPlayer) override;\n    virtual void Logout(AController* Exiting) override;\nprotected:\n    UPROPERTY(VisibleAnywhere, BlueprintReadOnly)\n    TObjectPtr<APlayerController_CH7> _PlayerController;\n    UPROPERTY(VisibleAnywhere, BlueprintReadOnly)\n    TArray<TObjectPtr<AAIController_CH7>> _AIControllers;\n    virtual void BeginPlay() override;\n};\n```", "```cpp\nvoid AGameMode_CH7::PostLogin(APlayerController* NewPlayer)\n{\n    if (APlayerController_CH7* castedPC = Cast<APlayerController_CH7>        (NewPlayer))\n    {\n        _PlayerController = castedPC;\n        _PlayerController->Init();\n    }\n    Super::PostLogin(NewPlayer);\n}\nvoid AGameMode_CH7::Logout(AController* Exiting)\n{\n    if (Exiting == _PlayerController)\n    {\n        _PlayerController = nullptr;\n    }\n    Super::Logout(Exiting);\n}\nvoid AGameMode_CH7::BeginPlay()\n{\n    Super::BeginPlay();\n    TArray<AActor*> outActors;\n    UGameplayStatics::GetAllActorsOfClass         (GetWorld(), AAIController::StaticClass(), outActors);\n\n    for (AActor* actor : outActors)\n    {\n        _AIControllers.Add(Cast<AAIController_CH7>(actor));\n    }\n\n    for (AAIController_CH7* ai : _AIControllers)\n    {\n        ai->Init();\n    }\n}\n```", "```cpp\nclass APlayerController_CH7 : public APlayerController\n{\npublic:\n    void Init();\nprotected:\n    UPROPERTY(EditAnywhere)\n    TSubclassOf<APawn> _PlayerPawn;\n    UPROPERTY(VisibleAnywhere, BlueprintReadOnly)\n    TObjectPtr<ACharacter_CH7> _Character;\n};\n```", "```cpp\nvoid APlayerController_CH7::Init()\n{\n    if (GetPawn() != nullptr)\n    {\n        GetPawn()->Destroy();\n    }\n    UWorld* const world = GetWorld();\n    AActor* tempStart = UGameplayStatics::GetGameMode         (world)->FindPlayerStart(this);\n    FVector spawnLoc = tempStart != nullptr ?         tempStart->GetActorLocation() : FVector::ZeroVector;\n    FRotator spawnRot = tempStart != nullptr ?         tempStart->GetActorRotation() : FRotator::ZeroRotator;\n    FActorSpawnParameters spawnParams;\n    spawnParams.SpawnCollisionHandlingOverride =         ESpawnCollisionHandlingMethod::AdjustIfPossibleButAlwaysSpawn;\n    APawn* tempPawn = world->SpawnActor<APawn>        (_PlayerPawn, spawnLoc, spawnRot, spawnParams);\n    Possess(tempPawn);\n    if (ACharacter_CH7* _Character = Cast<ACharacter_CH7>(tempPawn))\n    {\n        _Character->Init();\n    }\n}\n```", "```cpp\nclass AAIController_CH7 : public AController\n{\npublic:\n    void Init();\nprotected:\n    UPROPERTY(VisibleAnywhere, BlueprintReadOnly)\n    TObjectPtr<AAIUnit_CH7> _Unit;\n};\n```", "```cpp\nvoid AAIController_CH7::Init()\n{\n    if (APawn* pawn = GetPawn())\n    {\n        if (_Unit = Cast<AAIUnit_CH7>(pawn))\n        {\n            _Unit->Init();\n        }\n    }\n}\n```", "```cpp\nclass AAIUnit_CH7 : public APawn\n{\npublic:\n    AAIUnit_CH7();\n    void Init();\nprotected:\n    UPROPERTY(VisibleAnywhere, BlueprintReadOnly)\n    TObjectPtr<UHealthComponent> _HealthComp;\n    UFUNCTION()\n    void Handle_HealthDeath(AController* causer);\n};\n```", "```cpp\nAAIUnit_CH7::AAIUnit_CH7()\n{\n    _HealthComp = CreateDefaultSubobject<UHealthComponent>\n    (TEXT(\"Health\"));\n}\nvoid AAIUnit_CH7::Init()\n{\n    _HealthComp->OnDead.AddDynamic         (this, &AAIUnit_CH7::Handle_HealthDeath);\n}\n```", "```cpp\nDECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams     (FAIUnitDeathSignature, AController*, causer, int, points);\nclass AAIUnit_CH7 : public APawn\n{\npublic:\n    UPROPERTY(BlueprintAssignable)\n    FAIUnitDeathSignature OnUnitDeath;\nprotected:\n    UPROPERTY(EditAnywhere, BlueprintReadWrite)\n    int _PointValue;\n};\n```", "```cpp\nvoid AAIUnit_CH7::Handle_HealthDeath(AController* causer)\n{\n    OnUnitDeath.Broadcast(causer, _PointValue);\n    Destroy();\n}\n```", "```cpp\nDECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams     (FControllerDeathSignature, AController*, causer, int, points);\nclass AAIController_CH7 : public AController\n{\npublic:\n    UPROPERTY(BlueprintAssignable)\n    FControllerDeathSignature OnControllerDeath;\nprotected:\n    UFUNCTION()\n    void Handle_UnitDeath(AController* causer, int points);\n};\n```", "```cpp\nvoid AAIController_CH7::Init()\n{\n    if(APawn* pawn = GetPawn())\n{\nif(_Unit = Cast<AAIUnit_CH7>(pawn))\n        {\n            _Unit->Init();\n            _Unit->OnUnitDeath.AddDynamic(this,\n                &AAIController::Handle_UnitDeath);\n        }\n    }\n}\nvoid AAIController_CH7::Handle_UnitDeath(\n    AController* casuer, int points)\n{\n    OnControllerDeath.Broadcast(causer, points);\n}\n```", "```cpp\nclass AgameMode_CH7 : public AgameModeBase\n{\nprotected:\n    void Handle_ControllerDeath(AController* causer, int points);\n}\n```", "```cpp\nvoid AGameMode_CH7::BeginPlay()\n{\n    … other code from before …\nfor(AAIController_CH7* ai : _AIControllers)\n{\n    ai->Init();\n    ai->OnControllerDeath.AddDynamic(this,\n        &AgameMode_CH7::Handle_ControllerDeath);\n}\n}\nvoid AGameMode_CH7::Handle_ControllerDeath(\n    AController* causer, int points)\n{\n    _PlayerController->AddPoints(points);\n}\n```", "```cpp\nclass APlayerController_CH7 : public APlayerController\n{\npublic:\n    void AddPoints(int points);\nprotected:\n    int _Points;\n}\n```", "```cpp\nvoid APlayerController_CH7::AddPoints(int points)\n{\n    _Points += points;\n    _PointsWidget.UpdatePoints(_Points);\n}\n```"]