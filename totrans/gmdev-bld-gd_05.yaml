- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '5'
- en: Setting Up Animation and Rigging
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置动画和绑定
- en: In [*Chapter 4*](B17473_04.xhtml#_idTextAnchor060), *Adjusting Cameras and Lights*,
    you saw why you should ignore certain concepts in Blender, specifically cameras
    and lights, because they don’t transfer easily to Godot. This chapter is sort
    of an opposite case. You might be wondering whether a game engine can’t move objects
    around for us, right? After all, we use a game engine to facilitate things such
    as displaying models, creating environments with visually rich effects, and so
    on. It’s normal to expect a game engine to take care of animating our models as
    well.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第4章*](B17473_04.xhtml#_idTextAnchor060)，*调整摄像机和灯光*中，你看到了为什么你应该忽略Blender中的一些概念，特别是摄像机和灯光，因为它们不容易转移到Godot上。本章是一种相反的情况。你可能想知道游戏引擎不能为我们移动对象，对吧？毕竟，我们使用游戏引擎来促进诸如显示模型、创建具有视觉丰富效果的环境等事情。期望游戏引擎为我们动画模型是正常的。
- en: Although animating simple objects is perfectly possible in Godot, doing it for
    complex models such as a human character (or any bipeds, such as a robot) or a
    lion (or any quadrupeds, such as a cow) will take a lot of effort. Therefore,
    it makes much more sense to do most animations in Blender because it offers a
    much more streamlined workflow. We’ll explain in detail why that is so you can
    apply a similar reasoning process in your own projects.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在Godot中动画简单对象是完全可能的，但对于复杂模型，如人类角色（或任何双足动物，如机器人）或狮子（或任何四足动物，如牛）来说，需要付出很多努力。因此，在Blender中做大多数动画更有意义，因为它提供了一个更加流畅的工作流程。我们将详细解释为什么是这样，以便你可以在自己的项目中应用类似的推理过程。
- en: Sometimes, you will have a model that looks nice and complete, but it won’t
    be suitable or ready to be animated. In [*Chapter 1*](B17473_01.xhtml#_idTextAnchor013),
    *Creating Low-Poly Models*, we discussed vertices, faces, and edges. We will revisit
    some of those concepts in the context of getting our models ready for animation.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，你可能会遇到一个看起来很完整、很漂亮的模型，但它可能不适合或尚未准备好进行动画。在[*第1章*](B17473_01.xhtml#_idTextAnchor013)，*创建低多边形模型*中，我们讨论了顶点、面和边。我们将回顾一些这些概念，以便为我们的模型准备动画。
- en: Then, when we believe the model is ready, we’ll look at Blender’s animation
    capabilities. We’ll do this by discovering two new things. First, we’ll utilize
    a new method called **rigging** and construct a rig that’s ubiquitous in animating
    models. Second, we’ll switch to a new workspace dedicated to animations. During
    this effort, you’ll get to know a whole different side of Blender.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，当我们认为模型准备就绪时，我们将探讨Blender的动画功能。我们将通过发现两件新事物来完成这项工作。首先，我们将利用一种称为**绑定**的新方法，构建一个在动画模型中普遍使用的绑定。其次，我们将切换到一个专门用于动画的新工作区。在这个过程中，你将了解Blender的另一个不同方面。
- en: After you see how rigging is done and how models can be animated, we’ll look
    into ways to prepare and store more animations in Blender so that they can easily
    be used later in Godot. So, once you know beforehand what will be required down
    the line, this knowledge might help you in setting things up accordingly in Blender
    before it’s too cumbersome to change later.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在你看到绑定是如何进行以及模型如何被动画化之后，我们将探讨在Blender中准备和存储更多动画的方法，以便它们可以轻松地在Godot中使用。因此，一旦你事先知道后续需要什么，这些知识可能会帮助你根据需要在Blender中设置好一切，以免稍后更改变得过于繁琐。
- en: 'Despite the following section titles looking deceptively short, we have a lot
    to cover in this chapter:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管以下章节标题看起来欺骗性地简短，但我们将在本章中有很多内容要介绍：
- en: Where to build animations
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建立动画的位置
- en: Understanding the readiness of models
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解模型的准备就绪状态
- en: Creating animations
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建动画
- en: Getting animations ready for Godot
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为Godot准备动画
- en: In the end, you’ll know whether Blender or Godot is the right environment to
    tackle animations and how to get models ready for animations so that you can rig
    them.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你将知道Blender或Godot是处理动画的正确环境，以及如何为动画准备模型，以便你可以进行绑定。
- en: Technical requirements
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: There will be a lot of moving parts, figuratively and literally, in this chapter.
    Animation and rigging are challenging topics for most people who start practicing
    3D. Although we’ll take things step by step, to give you extra help along the
    way, you might want to use some of the files that are in the interim stages instead
    of doing it all at once.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将包含许多移动部件，从字面意义上和比喻意义上来说。对于大多数刚开始练习3D的人来说，动画和绑定都是具有挑战性的话题。虽然我们将一步步进行，以在过程中提供额外的帮助，但你可能希望使用一些中间阶段的文件，而不是一次性完成所有工作。
- en: 'As usual, the book’s repository will have the necessary files for this chapter
    at the following link: [https://github.com/PacktPublishing/Game-Development-with-Blender-and-Godot](https://github.com/PacktPublishing/Game-Development-with-Blender-and-Godot).'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如往常一样，本书的仓库将在以下链接中提供本章所需的文件：[https://github.com/PacktPublishing/Game-Development-with-Blender-and-Godot](https://github.com/PacktPublishing/Game-Development-with-Blender-and-Godot)。
- en: Where to build animations
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 建立动画的位置
- en: 'Both Blender and Godot Engine have animating capabilities. Therefore, you might
    be wondering which software is better for creating animations. To answer this
    crucial question, we should be discussing what we are animating. When it comes
    to animations, especially in game development, we will be tackling the following
    two main concepts:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Blender 和 Godot 引擎都具备动画制作功能。因此，你可能想知道哪种软件更适合创建动画。为了回答这个关键问题，我们应该讨论我们要动画化什么。当涉及到动画制作时，尤其是在游戏开发中，我们将探讨以下两个主要概念：
- en: '**Whole-body objects**: Objects such as a bouncing ball, a boat, or a projectile
    thrown from a source are all examples of objects that act like a solid system
    with no individually moving parts. The system can move as a whole without depending
    on its individual parts.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**全身对象**：例如弹跳球、船只或从源头抛出的投射物，这些都是像没有单独移动部件的固体系统一样行动的对象。系统可以作为一个整体移动，而不依赖于其各个部件。'
- en: '**Connected systems**: Some systems depend on individual parts to be in motion.
    These systems have parts that are connected to each other and the individual parts
    work together to move the system they are part of. For example, cats use their
    feet, birds use their wings, and a human body moves in a certain direction using
    two appendages that are either in contact with a surface or interact with the
    medium they are in.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**连接系统**：一些系统依赖于各个部件的运动。这些系统有相互连接的部件，各个部件协同工作以移动它们所属的系统。例如，猫用它们的脚，鸟用它们的翅膀，而人体通过两个与表面接触或与它们所在介质交互的肢体以某个方向移动。'
- en: Sometimes, some tools and gadgets in real life can do a similar job, and it’s
    possible to use one over another for a quick solution. However, every so often,
    we would like to pick the best tool for the job. We’ll discuss both Blender and
    Godot in the context of the concepts we have just pointed out to see which option
    might be a better choice.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，现实生活中的某些工具和设备可以完成类似的工作，并且可以使用其中一个代替另一个以快速解决问题。然而，我们有时会希望为特定的工作选择最佳工具。我们将根据我们刚才提到的概念来讨论
    Blender 和 Godot，看看哪个选项可能是一个更好的选择。
- en: Animating in Godot Engine
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Godot 引擎中动画制作
- en: Godot has a component, **AnimationPlayer**, that helps you build animations.
    We’ll look at it more closely in later chapters when we import our models to create
    a point-and-click adventure game. Similar to other applications’ animation components,
    it depends on setting **keyframes** to mark the changing points of an animated
    object. For example, to create a bouncing ball animation, you’d mark the ball
    sitting still on a plane in the earlier frames of the animation and mark a higher
    position in the world in the later frames.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Godot 有一个组件，**AnimationPlayer**，它可以帮助你构建动画。我们将在后续章节中更详细地探讨它，当我们导入模型以创建点对点冒险游戏时。与其他应用程序的动画组件类似，它依赖于设置**关键帧**来标记动画对象的改变点。例如，要创建弹跳球动画，你会在动画的早期帧中标记球静止在平面上，并在动画的后期帧中标记世界中的更高位置。
- en: This is quite easy to do with Godot. You just have to mark the important events
    as keyframes, and this operation is called **keying** or **inserting a key**.
    Thus, the engine figures out how the object should move in between the two keyframes.
    However, when the system is much more complicated than a simple ball, and it has
    moving parts, you’d be expected to select these separate parts to **key** them.
    This is not easy to do in Godot since the workflow is not constructed in a way
    to facilitate such complex operations in an easy manner. Consequently, it’s best
    to use Godot Engine when the system is relatively simple.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Godot 做这件事相当简单。你只需将重要事件标记为关键帧，这个操作被称为**键控**或**插入关键帧**。因此，引擎会计算出物体在两个关键帧之间的运动方式。然而，当系统比一个简单的球更复杂，并且有移动部件时，你可能会期望选择这些单独的部件来**键控**它们。在
    Godot 中这样做并不容易，因为工作流程并不是以易于执行此类复杂操作的方式构建的。因此，当系统相对简单时，最好使用 Godot 引擎。
- en: Animating in Blender
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Blender 中动画制作
- en: As was just mentioned, when you are animating an object with parts that are
    responsible for creating the overall motion, such as animating a human body by
    moving individual parts such as feet and hands, then doing this kind of work in
    Blender will be the right choice thanks to a method called **rigging**. Later,
    in the *Creating animations* section, we’ll explain what rigging is and discover
    how to construct a rig for our models.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 正如刚才提到的，当你正在动画一个由负责创建整体运动的部件组成的对象时，例如通过移动脚和手等个别部分来动画人体，那么在Blender中做这种工作将是正确的选择，多亏了称为**绑定**的方法。稍后，在*创建动画*部分，我们将解释什么是绑定，并了解如何为我们的模型构建一个绑定。
- en: For now, it should be enough to know that individually moving parts for an animated
    body will require rigging to expedite the animation process. This is where Blender
    shines because it offers tools and custom interfaces to help you along the way.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，你应该知道，为动画身体中的各个独立部件移动将需要绑定来加速动画过程。这正是Blender发光的地方，因为它提供了工具和自定义界面来帮助你完成这个过程。
- en: Besides the ease of creating an animation, let’s point out another reason why
    Blender is a better choice for animating complex systems. If you construct your
    animations in Godot, you can only use them in Godot. On the contrary, a Blender
    animation will act as a source of truth so you can share it with other applications.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 除了创建动画的便利性之外，让我们指出另一个为什么Blender是动画复杂系统的更好选择的原因。如果你在Godot中构建动画，你只能在Godot中使用它们。相反，一个Blender动画将作为真理的来源，你可以与其他应用程序共享它。
- en: Wrapping up
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: We’ll say one more thing about why Blender might be a better choice regardless
    of the complexity of creating animations. If you ever want to create a trailer
    for your game and you’ve gone through the trouble of creating accurate enough
    camera and light conditions similar to the ones you are going to employ in your
    game, then you can take a render of your scene, composed of many frames, which
    will utilize Blender’s animation system.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们再谈一点为什么Blender可能是一个更好的选择，无论创建动画的复杂程度如何。如果你想要为你的游戏制作预告片，并且已经费尽心思创建了足够准确的相机和光照条件，类似于你将在游戏中使用的那些，那么你可以渲染你的场景，由许多帧组成，这将利用Blender的动画系统。
- en: So, for simple objects that can be moved, utilize Godot Engine’s animation system.
    For systems that have individually moving parts, it’s better to do it in Blender.
    After all, Blender has dedicated tools to facilitate the creation of advanced
    animations. Now, let’s discuss when your models are ready to be animated.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，对于可以移动的简单对象，利用Godot引擎的动画系统。对于具有独立移动部件的系统，最好在Blender中完成。毕竟，Blender有专门的工具来促进高级动画的创建。现在，让我们讨论何时你的模型可以动画。
- en: Understanding the readiness of models
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解模型的准备程度
- en: In [*Chapter 1*](B17473_01.xhtml#_idTextAnchor013), *Creating Low-Poly Models*,
    we started with primitive objects and altered their vertices, faces, and edges.
    During that process, we were concerned with how the model would look. As corny
    as it may sound, looks might be misleading sometimes. To be animated correctly,
    a model has to respect certain conventions other than how it looks. In other words,
    you’ve got to be sure whether your model is ready.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第1章*](B17473_01.xhtml#_idTextAnchor013)，*创建低多边形模型*中，我们从一个原始对象开始，并改变了它的顶点、面和边。在这个过程中，我们关心模型的外观。虽然听起来可能有些俗气，但外观有时可能会误导。为了正确动画，模型必须遵守某些除了外观之外的传统。换句话说，你必须确保你的模型是否已经准备好。
- en: Topology and rigging
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 拓扑和绑定
- en: The readiness level of a model could be defined by the term **topology**, which
    sounds a bit technical. In layman’s terms, it’s the distribution and arrangement
    of the vertices, edges, and faces of a model that altogether mark how optimized
    the model is for animation.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 模型的准备程度可以通过术语**拓扑**来定义，这听起来有点技术性。用通俗易懂的话来说，它是指模型顶点、边和面的分布和排列，总体上标志着模型对动画的优化程度。
- en: Not all topologies are created equal. There are bad and good topologies. Let’s
    look at *Figure 5.1* to get a better idea about what we mean by topology or distribution,
    particularly as being bad or good.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有拓扑都是相同的。有好的和坏的拓扑。让我们看看*图5.1*，以更好地理解我们所说的拓扑或分布，特别是作为好坏的例子。
- en: '![Figure 5.1 – The same model with two different distributions of vertices
    ](img/Figure_5.1.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图5.1 – 具有两种不同顶点分布的相同模型](img/Figure_5.1.jpg)'
- en: Figure 5.1 – The same model with two different distributions of vertices
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.1 – 具有两种不同顶点分布的相同模型
- en: The preceding figure shows a model with the same shape, but the topologies are
    different. Simply put, the left case is ready for animation, and the right one
    could use some work to straighten up those vertices to form a good flow. Then,
    you’d have to fix some of the irregularities by evenly distributing many of the
    faces that congregate. So, not only is the right case an eyesore, but it’s also
    detrimental during the animation process.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图显示了具有相同形状的模型，但拓扑结构不同。简单来说，左边的案例适合动画，而右边的案例需要一些工作来整理这些顶点，以形成一个良好的流动。然后，你必须通过均匀分布许多聚集的面来修复一些不规则性。所以，不仅右边的案例令人不快，而且在动画过程中也有害。
- en: Let’s briefly touch on the role of rigging to understand the importance of good
    topology. If you were to model a human hand, you’d be designing fingers, knuckles,
    and the wrist. The model, or more correctly, its volume, would be hollow. In other
    words, you’d only be creating the vertices that would give the shape of a hand.
    However, in our minds, we know that this hand should have bones inside. When you
    wiggle your fingers around or bend your fingers at the knuckles and joints, different
    parts of the skeleton start moving so that the outer structure that’s connected
    to the bone system can move accordingly.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们简要地谈谈绑定的作用，以了解良好拓扑的重要性。如果你要建模一只人手，你将设计手指、指关节和手腕。模型，或者更准确地说，它的体积将是中空的。换句话说，你只会在给手形状的顶点。然而，在我们的心中，我们知道这只手应该内部有骨头。当你摆弄手指或弯曲手指的指关节和关节时，骨骼的不同部分开始移动，以便与骨骼系统相连的外部结构可以相应地移动。
- en: To simulate this, you take advantage of a practice called rigging, which involves
    introducing a skeleton system and a series of constraints that manage how the
    skeleton system behaves. We’ll work on a rigging example later in the chapter.
    For now, we are still concerned about our models being ready for the rigging to
    take place. To emphasize the relationship between topology and rigging better,
    let’s turn our attention to *Figure 5.2*.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 为了模拟这一点，你利用一种称为绑定的实践，它涉及引入一个骨骼系统和一系列约束，这些约束管理骨骼系统的行为。我们将在本章后面讨论一个绑定示例。现在，我们仍然关注我们的模型是否为绑定做好准备。为了更好地强调拓扑和绑定之间的关系，让我们将注意力转向*图5.2*。
- en: '![Figure 5.2 – Different topologies for a hand model ](img/Figure_5.2.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图5.2 – 手模型的不同拓扑](img/Figure_5.2.jpg)'
- en: Figure 5.2 – Different topologies for a hand model
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.2 – 手模型的不同拓扑
- en: Observe how the faces are aligned more naturally in the middle case, which certainly
    looks like an improvement over the left one. Then, still for the middle case,
    look where the big thumb meets the main part of the hand; that area could use
    a bit more detail so that when the thumb stretches out like in the right case,
    there would be enough geometry to accommodate the skeleton’s behavior. Compare
    the first and the third hands to see which one looks more natural to your eye
    when it comes to flesh and skin in between fingers.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 观察中间案例中面的排列更加自然，这显然比左边的案例有所改进。然后，对于中间案例，看看大拇指与手的主要部分相接的地方；该区域需要更多细节，以便当拇指像右边的案例那样伸展时，会有足够的几何形状来适应骨骼的行为。比较第一只手和第三只手，看看哪一只在你看来在手指之间的肉和皮肤上看起来更自然。
- en: When a model is bending or stretching at certain points, it will be creating
    some creased and protruded areas, similar to where the fingers meet the hand in
    the preceding figure. If vertices, hence faces, don’t have a smooth flow, the
    model will look ripped or crushed in these weak spots. Having the correct topology
    is a topic that’s hard to master and it throws off a lot of beginners when they
    want to get into animation and rigging. You can find a few links that can help
    you understand the difference between a good and bad topology in the *Further
    reading* section.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当模型在特定点弯曲或拉伸时，它将创建一些皱褶和凸起区域，类似于前图中手指与手相接的地方。如果顶点，因此面，没有平滑的流动，模型在这些薄弱部位将看起来撕裂或压碎。拥有正确的拓扑结构是一个难以掌握的主题，当初学者想要进入动画和绑定时，这会让很多人感到困惑。你可以在*进一步阅读*部分找到一些链接，帮助你理解良好和不良拓扑之间的区别。
- en: To satisfy a good topology, since it’s necessary to line up edges and faces
    correctly where the action will occur, we need a mechanism to move problematic
    edges and faces around so that they will be in the right place. For this, we are
    going to discover a new method, or rather, a shortcut.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为了满足良好的拓扑结构，由于在动作发生的地方需要正确对齐边和面，我们需要一种机制来移动有问题的边和面，使它们处于正确的位置。为此，我们将发现一种新的方法，或者更确切地说，是一个快捷方式。
- en: Grabbing
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 抓取
- en: In [*Chapter 1*](B17473_01.xhtml#_idTextAnchor013), *Creating Low-Poly Models*,
    you got to know two methods that are very commonly used among Blender fans. They
    were **Rotate** (*R* as a shortcut) and **Scale** (*S* as a shortcut). There is
    a third common method that we intentionally omitted during that exercise. We depended
    on modifiers that helped us move vertices around, so we got away without it; however,
    it’s now time to employ it.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [*第 1 章*](B17473_01.xhtml#_idTextAnchor013) *创建低多边形模型* 中，你了解到两个在 Blender 粉丝中非常常用的方法。它们是
    **旋转** (*R* 作为快捷键) 和 **缩放** (*S* 作为快捷键)。还有一个我们故意在那个练习中省略的常见方法。我们依赖于修改器来移动顶点，所以我们没有使用它；然而，现在是时候使用它了。
- en: If you are able to rotate and scale things, then why can’t you move things around?
    In fact, you can, and this new method will help you move vertices, edges, and
    faces anywhere you want. There is only one caveat. Although most people refer
    to this operation as **Move**, its shortcut is a bit bizarre; it’s *G*. So, an
    easier way to think of this shortcut in the context of moving might perhaps be
    grabbing. You grab a vertex and leave it somewhere, in a sense.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你能够旋转和缩放物体，那么为什么不能移动物体呢？实际上，你可以，这个新方法将帮助你将顶点、边和面移动到任何你想要的位置。只有一个注意事项。尽管大多数人将这个操作称为
    **移动**，但它的快捷键有点奇怪；它是 *G*。所以，在移动的上下文中，这个快捷键的一个更简单的思考方式可能是抓取。你抓取一个顶点并把它放在某个地方，从某种意义上说。
- en: In most Blender tutorials, you may find people use grab and move interchangeably.
    They're one and the same. So, throughout this book, when you see the word move,
    we mean the grab operation and the *G* shortcut.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数 Blender 教程中，你可能会发现人们将抓取和移动互换使用。它们是同一个意思。所以，在这本书中，当你看到“移动”这个词时，我们指的是抓取操作和
    *G* 快捷键。
- en: 'Let’s practice this new piece of knowledge with a series of simple steps. After
    you start a new file, perform the following steps:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一系列简单的步骤来练习这个新知识。在你开始一个新的文件后，执行以下步骤：
- en: Press *Tab* to enter **Edit Mode**.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下 *Tab* 键进入**编辑模式**。
- en: Select only one vertex of the default cube.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仅选择默认立方体的一个顶点。
- en: Press *G* and move your mouse around.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下 *G* 键并移动鼠标。
- en: The vertex you selected is now being pulled around while you are moving your
    mouse. To terminate the grabbing, you can click anywhere and this should rest
    the selected vertex at its last position. *Figure 5.3* is an example of what we
    want to achieve.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当你移动鼠标时，所选的顶点现在正在被拉动。要终止抓取，你可以点击任何地方，这将使所选顶点回到其最后的位置。*图 5.3* 是我们想要达到的示例。
- en: '![Figure 5.3 – A vertex grabbed out of its original place and moved somewhere
    else ](img/Figure_5.3.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.3 – 将顶点从原始位置抓取出来并移动到其他地方](img/Figure_5.3.jpg)'
- en: Figure 5.3 – A vertex grabbed out of its original place and moved somewhere
    else
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.3 – 将顶点从原始位置抓取出来并移动到其他地方
- en: 'You might have surmised that the vertex was moving freely in all three axes,
    and that would be correct. If you want to limit the movement to a certain axis,
    and if you wish to move the vertex a precise amount, you can do that too. While
    still in **Edit Mode**, perform the following steps:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经推测出顶点可以在三个轴上自由移动，这是正确的。如果你想限制移动到某个轴，并且希望精确移动顶点，你也可以做到。在**编辑模式**下，执行以下步骤：
- en: Select another vertex.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择另一个顶点。
- en: Press *G*, then *X*.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下 *G*，然后 *X*。
- en: Type `0.5`.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入 `0.5`。
- en: You can pick any one of the other two axes if you want. Regardless, the value
    you type for any given axis defines the movement amount. So, a negative value
    will still move the selected part in the axis you choose, just in the opposite
    direction.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要选择其他两个轴中的任意一个，也可以。无论如何，你为任何给定轴输入的值定义了移动量。因此，负值仍然会将所选部分移动到你所选择的轴上，只是方向相反。
- en: Additionally, sometimes you might want to move the selection in any but a certain
    direction. When you initiate a grab shortcut, if you press *Shift* before you
    pick the axis, it’ll move the selection to the other two remaining axes. So, *Shift+X*
    would move things anywhere but on the X axis.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，有时你可能只想将选择移动到除某个方向以外的任何方向。当你开始一个抓取快捷键时，如果你在选取轴之前按下 *Shift* 键，它将选择移动到剩下的两个轴。所以，*Shift+X*
    将将物体移动到除了 X 轴以外的任何地方。
- en: Practice the grabbing operation a bit more by selecting edges or faces if you
    would like. Soon, we’ll explore the building blocks of animation. During that
    effort, you’ll most likely utilize the grab operation. So, when you are ready,
    let’s see how we can animate things.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你愿意，可以通过选择边缘或面来进一步练习抓取操作。很快，我们将探索动画的构建块。在这个过程中，你很可能会使用抓取操作。所以，当你准备好了，让我们看看我们如何使事物动起来。
- en: Creating animations
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建动画
- en: As we mentioned in the *Where to build animations* section, the type of animation
    we’ll do in Blender involves having individual parts of a system that move independently
    from each other or collaboratively move together sometimes. We also said that
    we would need a method called rigging, so let’s give an example to understand
    why rigging is useful.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在“在哪里构建动画”部分中提到的，我们在Blender中将要做的动画类型涉及系统各个部分独立移动或有时协同移动。我们也说过，我们需要一种称为绑定的方法，所以让我们举一个例子来理解为什么绑定是有用的。
- en: When you talk, whether you are sitting or walking, the muscles and bones that
    are responsible for the talking are generally not affected by or affecting the
    other parts of your body. However, when you are walking, your legs rotate around
    the hip bones, and the rest of the system triggers other natural actions, such
    as swinging your arms, moving your shoulders slightly forward and backward, and
    so on.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 当你说话时，无论你是坐着还是走路，负责说话的肌肉和骨骼通常不会受到或影响你身体的其他部分。然而，当你走路时，你的腿围绕着髋骨旋转，整个系统触发其他自然动作，例如摆动手臂，轻微前后移动肩膀，等等。
- en: In both cases where you have a local or system-wide dependency, we eventually
    move some of the vertices that make up a model. Since moving so many vertices
    is a lot of work, we use a structure we place inside the model to tell the necessary
    vertices where to move. The process to create such a structure is called rigging.
    In a way, rigging mimics what bones and muscles do in real life.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两种情况下，无论是局部还是系统级的依赖，我们最终都会移动构成模型的一些顶点。由于移动这么多顶点是一项大量工作，我们使用放置在模型内部的结构来告诉必要的顶点移动到何处。创建这种结构的流程称为绑定。从某种意义上说，绑定模仿了现实生活中骨骼和肌肉的作用。
- en: 'In this section, we’ll work on a simple rigging process and rig a low-poly
    snake. Through this process, you’ll prepare the model for animation, but first,
    we''ll get to know some of the essential components, as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将进行一个简单的绑定过程，并绑定一个低多边形蛇。通过这个过程，你将为动画准备模型，但首先，我们将了解一些基本组件，如下所示：
- en: '**Armature**: An armature, in simple terms, is a set of bones, but a better
    definition might be a framework serving as a control structure – what materials
    are to textures, armatures are to bones. So, the same armature could have multiple
    bones. Furthermore, the rigging process could involve many armatures if the system
    that’s animated requires so.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**骨架**（Armature）：简单来说，骨架是一组骨骼，但更好的定义可能是一个作为控制结构的框架——材料对应纹理，骨架对应骨骼。因此，同一个骨架可以有多个骨骼。此外，如果动画的系统需要的话，绑定过程可能涉及多个骨架。'
- en: '**Bone**: This is the most essential part of a rigging system. Without bones,
    there would not be armatures, therefore nothing to animate. In real life, when
    your bones move outside of their zone of freedom, you feel pain, so your body
    keeps things intact. There are similar ways to restrict a bone’s freedom digitally,
    so to speak, so it works in tandem with other bones.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**骨骼**（Bone）：这是绑定系统中最基本的部分。没有骨骼，就没有骨架，因此就没有可以动画化的东西。在现实生活中，当你的骨骼超出其自由区域时，你会感到疼痛，所以你的身体保持完整。可以说，有类似的方法来限制骨骼的自由，以便与其他骨骼协同工作。'
- en: We’ll first look at how to rig a model. For this effort, we’ll utilize one armature
    and many bones. After adding constraints to some of the bones, the rigging process
    will be complete. So, in the end, we will use our rig to animate the snake.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先将看看如何绑定一个模型。为此，我们将使用一个骨架和许多骨骼。在将约束添加到一些骨骼之后，绑定过程将完成。因此，最终，我们将使用我们的绑定来动画化蛇。
- en: Rigging
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**绑定点**（Rigging）'
- en: Now that the theoretical stuff is out of the way, we can focus on the practical
    aspects, mainly how to set up armatures and bones. To focus on the rigging process,
    we’ll use a low-poly snake model. The `Snake.blend` file in `Chapter 5`’s `Start`
    folder is a good starting point, and by the end of this *Rigging* section, you’ll
    have reached what you see in the `Snake.Rigged.blend` file.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在理论部分已经讲完，我们可以专注于实际方面，主要是如何设置骨架和骨骼。为了专注于绑定过程，我们将使用一个低多边形蛇模型。`Chapter 5`的`Start`文件夹中的`Snake.blend`文件是一个很好的起点，到本节*绑定*的结尾，你将看到`Snake.Rigged.blend`文件中的内容。
- en: Besides these two files, we’ll mention other complementary files that show the
    interim phase. As always, you can find all of these files at the URL mentioned
    in the *Technical requirements* section.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这两个文件，我们还会提到其他一些补充文件，这些文件展示了中间阶段。和以往一样，你可以在*技术要求*部分提到的网址找到所有这些文件。
- en: 'After you open the `Snake.blend` file, let’s add an armature by performing
    the following steps:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`Snake.blend`文件后，让我们按照以下步骤添加一个骨架：
- en: Press *3* on your numpad to switch to the **Right Orthographic** view.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的数字键盘上按*3*以切换到**右正交**视图。
- en: Press *Shift+A*.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*Shift+A*。
- en: Select **Armature**.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**骨架**。
- en: 'You can also find the result of the preceding operations in the `Snake.First
    Bone.blend` file. If your keyboard doesn’t have a numpad, then you can click on
    the **X** axis in the gizmo in the top-right corner of **3D Viewport** until you
    read **Right Orthographic** in the top-left corner. The following figure should
    help you see what we have done so far:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在`Snake.First Bone.blend`文件中找到前面操作的结果。如果你的键盘没有数字键盘，那么你可以点击**3D视图**右上角的工具栏中的**X**轴，直到你在左上角看到**右正交**。以下图应该能帮助你看到我们到目前为止所做的工作：
- en: '![](img/Figure_5.4.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图5.4 – 警惕蛇！再想想，它似乎身体里没有恶意的骨骼](img/Figure_5.4.jpg)'
- en: Figure 5.4 – Beware the snake! On second thought, it doesn’t seem to have a
    mean bone in its body
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.4 – 警惕蛇！再想想，它似乎身体里没有恶意的骨骼
- en: 'We now have a new object type in our scene: an armature. You can see it in
    **Outliner** too with two green stick figures next to its title. Right now, we
    have one bone in the armature. So, bone and armature kind of mean the same thing
    at this point. Our goal, in rigging, will be to create and distribute a bunch
    of bones inside the snake’s mesh. So, let’s add more.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在场景中有一个新的对象类型：一个骨架。你也可以在**大纲**中看到它，其标题旁边有两个绿色的棍状人物。目前，我们的骨架中有一个骨骼。所以，在这个阶段，骨骼和骨架几乎意味着同一件事。我们的目标，在绑定中，将是创建和分配蛇网格内部的一组骨骼。所以，让我们添加更多。
- en: We seem to have a problem, though. That bone we added earlier looks like it’s
    occluded by the snake’s tail. So, if we keep adding more bones and laying them
    out so that they align with the snake’s body, we won’t be able to see what we
    are doing. Luckily, the solution is a couple of clicks away. While the armature
    is still selected, you can expand **Viewport Display** in the **Armature** settings
    in the **Properties** panel and turn on the **In Front** option. This will make
    sure the armature is always visible.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们似乎遇到了问题。我们之前添加的那个骨骼看起来被蛇的尾巴遮挡了。所以，如果我们继续添加更多的骨骼并将它们排列得与蛇的身体对齐，我们就无法看到我们在做什么。幸运的是，解决方案只需几步即可。当骨架仍然被选中时，你可以在**属性**面板中的**骨架**设置中展开**视图显示**，并打开**前景**选项。这将确保骨架始终可见。
- en: Missing out on a numpad
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 没有数字键盘
- en: 'Numpad shortcuts are helpful and they will make your life easier, especially
    during modeling and rigging when you need to view your work from certain angles
    often on. The following website offers eight different ways to mimic a numpad:
    [https://essentialpicks.com/using-blender-with-no-numpad/](https://essentialpicks.com/using-blender-with-no-numpad/).'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 数字键盘快捷键很有帮助，它们会让你的生活变得更轻松，尤其是在建模和绑定时，你需要经常从特定角度查看你的工作。以下网站提供了八种模拟数字键盘的方法：[https://essentialpicks.com/using-blender-with-no-numpad/](https://essentialpicks.com/using-blender-with-no-numpad/)。
- en: 'Meshes are composed of vertices, faces, and edges. Similarly, bones are made
    of three components: **root**, **body**, and **tip**. The tip can be the root
    of another bone and vice versa. Just as we can go into **Edit Mode** for a mesh
    to change its inner parts, we can do so with an armature. So, select the armature
    and press *Tab*.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 网格由顶点、面和边组成。同样，骨骼由三个部分组成：**根**、**身体**和**尖端**。尖端可以是另一个骨骼的根，反之亦然。就像我们可以进入**编辑模式**来改变网格的内部部分一样，我们也可以对骨架这样做。所以，选择骨架并按*Tab*。
- en: You should be able to click on and select the root and tip separately. When
    you select the structure in between the joints, it’ll automatically select the
    root and the tip since it’s all connected. *Figure 5.5* shows only the tip selected.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能够分别点击并选择根和尖部。当你选择关节之间的结构时，由于它们全部相连，它将自动选择根和尖部。*图5.5* 仅显示了选中的尖部。
- en: '![](img/Figure_5.5.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_5.5.jpg)'
- en: Figure 5.5 – The tip of the bone is selected in Edit Mode
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.5 – 在编辑模式下选择了骨骼的尖部
- en: Credit where credit is due
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 知识的归属
- en: The snake model we are rigging in this section is an asset created by an artist
    known as Quaternius. You can follow his work at [https://quaternius.com](https://quaternius.com).
    We’ll be using his other assets in later chapters as well. So, thank you for your
    generosity.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们正在为蛇模型进行绑定，这是一个由艺术家Quaternius创作的资产。你可以在[https://quaternius.com](https://quaternius.com)上关注他的作品。我们将在后面的章节中也使用他的其他资产。所以，感谢你的慷慨。
- en: 'Now, we are ready to add more bones to the armature. We’ll do that by first
    positioning that initial bone, then we’ll add new bones coming off the tip. While
    still in **Edit Mode**, perform the following steps:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们准备向骨架添加更多骨骼。我们将首先定位初始骨骼，然后添加从尖部延伸出来的新骨骼。在仍然处于 **编辑模式** 的情况下，执行以下步骤：
- en: Select the root joint.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择根关节。
- en: Press *G* and move the mouse so that the joint is somewhere in the middle of
    the snake’s chest.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下 *G* 键并移动鼠标，使关节位于蛇胸部的中间位置。
- en: Click to finish grabbing.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击完成抓取。
- en: Select the tip joint.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择尖关节。
- en: Press *G* and move the mouse so that the joint is somewhere near the Y axis
    but inside the tail.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下 *G* 键并移动鼠标，使关节位于Y轴附近但位于尾巴内部。
- en: Click to finish grabbing again.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次点击完成抓取。
- en: A figure might be extremely helpful since all of this moving and positioning
    sounds a bit arbitrary. *Figure 5.6* is an example of what we have achieved in
    the last few steps.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 一张图可能非常有帮助，因为所有这些移动和定位听起来有点任意。*图5.6* 是我们在最后几个步骤中取得的成果的示例。
- en: '![Figure 5.6 – A well-placed bone for our snake ](img/Figure_5.6.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图5.6 – 为我们的蛇放置的合适骨骼](img/Figure_5.6.jpg)'
- en: Figure 5.6 – A well-placed bone for our snake
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.6 – 为我们的蛇放置的合适骨骼
- en: Since up, down, or right concepts lose their meanings in the 3D space, it’s
    important to have a simple yet effective way to represent the natural flow of
    bones. If you compare *Figure 5.5* and *Figure 5.6*, which correspond to the `Snake.First
    Bone.Editing.blend` and `Snake.First Bone.Position.blend` files, respectively,
    you’ll notice that the structure between the joints is going in different directions.
    The broader part of the bone is closer to the root, and the narrower end of the
    bone is approaching its tip. For example, imagine your kneecap as the root and
    your ankle as the tip of one bone. Moreover, hip bone to kneecap, elbow to wrist,
    and so on.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 由于向上、向下或向右的概念在三维空间中失去了意义，因此有一个简单而有效的方式来表示骨骼的自然流动是很重要的。如果你比较 *图5.5* 和 *图5.6*，它们分别对应于
    `Snake.First Bone.Editing.blend` 和 `Snake.First Bone.Position.blend` 文件，你会注意到关节之间的结构正在朝不同的方向延伸。骨骼较宽的部分靠近根部，而骨骼较窄的末端正接近其尖部。例如，想象你的髌骨作为一根骨骼的根部，而你的脚踝作为这根骨骼的尖部。此外，髋骨到髌骨，肘部到腕部，等等。
- en: 'We have to add a few more bones to our system. We’ll do that by extruding the
    original bone. While still having the tip of the bone selected, perform the following
    steps:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须向我们的系统中添加几根更多的骨骼。我们将通过拉伸原始骨骼来完成这项工作。在仍然选择骨骼尖部的情况下，执行以下步骤：
- en: Press *E* to start extrusion.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *E* 键开始拉伸。
- en: Move the mouse in the right and bottom direction so it follows the tail’s form.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将鼠标向右和向下移动，使其跟随尾巴的形状。
- en: Click to finish extrusion.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击完成拉伸。
- en: Repeat *Steps 1 to 3* until you have four bones of roughly the same length.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复 *步骤1到3*，直到你拥有四根长度大致相同的骨骼。
- en: The result is shown in *Figure 5.7*, and you can also open the `Snake.Tail Bones.blend`
    file to compare your result.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 结果在 *图5.7* 中显示，你也可以打开 `Snake.Tail Bones.blend` 文件来比较你的结果。
- en: '![Figure 5.7 – Four bones that make up the tail ](img/Figure_5.7.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![图5.7 – 组成尾巴的四根骨骼](img/Figure_5.7.jpg)'
- en: Figure 5.7 – Four bones that make up the tail
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.7 – 组成尾巴的四根骨骼
- en: Importance of clicks
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 点击的重要性
- en: Similar to finishing a grabbing operation, extrusion needs a final click to
    solidify the position of an extruded object. Hence, throughout the rest of this
    chapter, when you follow a step where you see the word *extrude*, you are expected
    to click and finalize the extrusion when you are happy with the object’s position.
    If you prematurely terminate the extrusion, you can always hit *G* and grab this
    new object to move elsewhere and continue extruding if you wish. Thus, click to
    finalize both grabbing and extrusion, and use these two handy methods as often
    as you need. Also, if you change your mind while extruding, right-clicking will
    cancel this operation.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于完成抓取操作，挤出需要点击一下以固化挤出物体的位置。因此，在本章的剩余部分，当你看到单词 *挤出* 时，你被期望在满意物体的位置时点击并最终完成挤出。如果你提前终止挤出，你可以始终按
    *G* 键并抓取这个新物体将其移动到其他地方，如果你愿意的话，继续挤出。因此，点击以最终完成抓取和挤出，并在需要时经常使用这两种方便的方法。此外，如果你在挤出过程中改变主意，右键单击将取消此操作。
- en: Extrusion helped us do a few things at once. We have created a new bone, positioned
    it correctly so its root aligned with the previous bone’s tip, parented this new
    bone to the previous bone, and finally, moved its tip to where we’d start the
    next bone.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 挤出帮助我们一次完成几件事情。我们创建了一个新的骨骼，将其正确放置，使其根与前一骨骼的尖端对齐，将这个新骨骼设置为前一骨骼的父级，并最终将其尖端移动到我们开始下一骨骼的位置。
- en: 'We’re halfway through adding bones to the snake. That being said, now is a
    good time for a bit of housekeeping. We’ll be referencing some of these bones
    later, so it would be prudent of us to rename them now. If you have been paying
    attention to the new bones’ names after the extrusion, you must have seen that
    they are labeled in a format that goes like **Bone.00X** where X is the succeeding
    bone’s number. To rename all of the bones you have added so far, perform the following
    steps:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了一半的蛇骨骼添加工作。因此，现在进行一些整理工作是个好时机。我们将在稍后引用这些骨骼，因此我们现在重命名它们是明智的。如果你在挤出后注意到了新骨骼的名称，你必须已经看到它们被标记为类似于
    **Bone.00X** 的格式，其中 X 是后续骨骼的编号。要重命名你迄今为止添加的所有骨骼，请执行以下步骤：
- en: Select the original bone.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择原始骨骼。
- en: Press *F2* and rename it to `Tail.1`.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *F2* 并将其重命名为 `Tail.1`。
- en: Repeat the preceding two steps for the rest of the bones so that their names
    look like **Tail.X**.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复前两个步骤，直到所有骨骼的名称看起来像 **Tail.X**。
- en: 'Let’s move on to adding bones for the torso. For this, we are going to utilize
    the original bone, which is now renamed **Tail.1**. Some of the decisions that
    you’ll make while rigging your models will depend on the situation you are going
    to use the rig for. It would have been perfectly possible to start the bones from
    the head and go all the way to the end of the tail. However, we know that this
    snake will have an inclination point, mainly where the torso and tail bones meet.
    Therefore, you need to perform the following steps:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续添加躯干的骨骼。为此，我们将利用现在已重命名为 **Tail.1** 的原始骨骼。你在设置模型骨架时所做的某些决定将取决于你打算为骨架做什么。从头部开始并一直延伸到尾巴末端的操作是完全可能的。然而，我们知道这条蛇将有一个倾向点，主要是躯干和尾巴骨骼相交的地方。因此，你需要执行以下步骤：
- en: Select the root of **Tail.1**.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **Tail.1** 的根。
- en: Press *E* to extrude a new bone in the right and top direction, following the
    torso.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *E* 键以在右侧和顶部方向挤出一个新的骨骼，沿着躯干进行。
- en: Repeat *Step 2* twice more so that you have three bones in the end.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再重复 *步骤2* 两次，以便最终有三个骨骼。
- en: Select each new bone and rename them to look like **Torso.X** where X is a consecutive
    number starting at 1.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择每根新骨骼并将它们重命名为 **Torso.X**，其中 X 是从 1 开始的连续数字。
- en: The result is what you see in *Figure 5.8* and in the `Snake.Torso Bones.blend`
    file.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 结果就是你在 *图5.8* 和 `Snake.Torso Bones.blend` 文件中看到的结果。
- en: '![Figure 5.8 – New bones have been added following the torso to the head ](img/Figure_5.8.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![图5.8 – 新骨骼已经按照躯干顺序添加到头部](img/Figure_5.8.jpg)'
- en: Figure 5.8 – New bones have been added following the torso to the head
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.8 – 新骨骼已经按照躯干顺序添加到头部
- en: 'We can now plan the remaining bones. We’ll be concerned with only two bones
    for brevity’s sake: the head and mouth bones. If you have been following all along,
    the tip of **Torso.3** should still be selected. If not, select it, then perform
    the following steps:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以规划剩余的骨骼。为了简洁起见，我们只关注两根骨骼：头部和嘴巴骨骼。如果你一直跟着做，**Torso.3** 的尖端应该仍然被选中。如果没有，请选中它，然后执行以下步骤：
- en: Press *E* to extrude a new bone to the end of the snake’s nose.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *E* 键以在蛇鼻的末端挤出一个新的骨骼。
- en: Select **Torso.3**’s tip again.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次选择**Torso.3**的尖端。
- en: Press *E* to extrude a new bone to the end of the snake’s mouth.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*E*键拉伸一个新的骨骼到蛇嘴的末端。
- en: In the end, the fully constructed skeleton, which you can find in the `Snake.Full
    Skeleton.blend` file, will look like what you see in *Figure 5.9*.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，完全构建的骨骼，您可以在`Snake.Full Skeleton.blend`文件中找到，看起来就像你在*图5.9*中看到的那样。
- en: '![Figure 5.9 – The skeleton of our snake is complete ](img/Figure_5.9.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![图5.9 – 我们蛇的骨骼已完成](img/Figure_5.9.jpg)'
- en: Figure 5.9 – The skeleton of our snake is complete
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.9 – 我们蛇的骨骼已完成
- en: 'We are done with the skeleton. To complete the rigging, we need to add two
    more bones, which are usually called control bones. The following is an explanation
    of why a simple skeleton, although necessary, is still considered less than ideal.
    It has to do with the following two conflicting concepts:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了骨骼的构建。为了完成绑定，我们需要添加两个额外的骨骼，这些骨骼通常被称为控制骨骼。以下是对为什么一个简单的骨骼，尽管是必要的，但仍被认为不够理想的解释。这与以下两个相互冲突的概念有关：
- en: '**Forward Kinematics** (**FK**): When you have a series of bones and you want
    to move the extremity bones, for example, a thumb in a human’s hand, the motion
    would have to be calculated while considering all of the position and orientation
    values for all of the interim bones starting from the shoulder joint. Thus, the
    motion starts off at the root and goes forward.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**正向运动学（FK**）：当你有一系列骨骼，并且你想移动末端骨骼时，例如，人的手上的大拇指，运动必须在考虑从肩关节开始的所有中间骨骼的位置和方向值的同时进行计算。因此，运动从根部开始，向前进行。'
- en: '**Inverse Kinematics** (**IK**): This is a much more efficient method where,
    following the preceding example, by moving a thumb, all of the connected bones
    determine their state in reverse order one at a time, instead of calculating the
    overall system’s behavior. Thus, the moving bone dictates how the bone behind
    should behave, and that bone behind does the same all the way to the root.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**逆运动学（IK**）: 这是一个更有效的方法，在先前的例子中，通过移动大拇指，所有连接的骨骼将依次确定它们的状态，而不是计算整个系统的行为。因此，移动的骨骼决定了后面的骨骼应该如何表现，后面的骨骼也以同样的方式一直到达根部。'
- en: 'We prefer IK in our exercise since it’s much more convenient to use, and it
    is widely accepted in the industry. If you would like to get more in-depth information,
    especially on the math aspect of FK and IK, refer to the following two pages:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的练习中，我们更喜欢逆运动学（IK），因为它使用起来更加方便，并且在行业中得到了广泛接受。如果您想获取更深入的信息，特别是关于正向运动学（FK）和逆运动学（IK）的数学方面，请参考以下两页：
- en: '[https://www.sciencedirect.com/topics/engineering/forward-kinematics](https://www.sciencedirect.com/topics/engineering/forward-kinematics)'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.sciencedirect.com/topics/engineering/forward-kinematics](https://www.sciencedirect.com/topics/engineering/forward-kinematics)'
- en: '[https://www.sciencedirect.com/topics/engineering/inverse-kinematics](https://www.sciencedirect.com/topics/engineering/inverse-kinematics)'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.sciencedirect.com/topics/engineering/inverse-kinematics](https://www.sciencedirect.com/topics/engineering/inverse-kinematics)'
- en: To introduce IK to some of our bones, we need to create control bones that will
    propagate the motion to the rest of the bones. Although these control bones will
    look like they are part of the skeleton visually, they will be decoupled from
    the skeleton. Right now, all of the bones that have been extruded have been automatically
    parented. So, we’ll need to unparent our two control bones once we extrude them
    off the end bones.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 要将逆运动学（IK）引入我们的一些骨骼，我们需要创建控制骨骼，这些骨骼将运动传递到其他骨骼。虽然这些控制骨骼在视觉上看起来像是骨骼的一部分，但它们将与骨骼解耦。目前，所有已经拉伸的骨骼都已经自动设置为父级。因此，当我们从末端骨骼拉伸它们时，我们需要将我们的两个控制骨骼从父级中移除。
- en: 'It would seem one of these bones could be coming off the **Head** bone, and
    the other control bone, by symmetry, could be coming off the **Tail.4** bone.
    Assuming you are still in the **Right Orthographic** view, in order to create
    these bones, you need to perform the following steps:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来这些骨骼中有一个可能是从**头部**骨骼上来的，而另一个控制骨骼，由于对称性，可能是从**Tail.4**骨骼上来的。假设您仍然处于**右正交**视图，为了创建这些骨骼，您需要执行以下步骤：
- en: Extrude a bone in the left direction off the tip of the **Head** bone.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**头部**骨骼的尖端向左拉伸一个骨骼。
- en: Rename this new bone as `Head.IK`.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将这个新骨骼重命名为`Head.IK`。
- en: Extrude a bone in the right direction off the tip of the **Tail.4** bone.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**Tail.4**骨骼的尖端向右拉伸一个骨骼。
- en: Rename this new bone as `Tail.IK`.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将这个新骨骼重命名为`Tail.IK`。
- en: 'We have created two new bones, but they are still attached to the skeleton.
    So, we need to separate them. *ALT+P* is a shortcut you can use to clear the parent
    relationship, but we’ll do the decoupling somewhere else since we’ll have to turn
    off another setting too. So, let’s do both at the same time, as follows:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经创建了两个新的骨骼，但它们仍然附着在骨架上。因此，我们需要将它们分开。*ALT+P*是一个可以用来清除父级关系的快捷键，但我们将要在别处进行解耦，因为我们还需要关闭另一个设置。所以，让我们同时进行这两步，如下所示：
- en: Select the **Head.IK** bone.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**Head.IK**骨骼。
- en: Turn on the **Bone Properties** tab (the green bone icon) in the **Properties**
    panel.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**属性**面板中打开**骨骼属性**选项卡（绿色骨骼图标）。
- en: Expand the **Relations** section in that tab.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在该选项卡中展开**关系**部分。
- en: Clear the parent by clicking on **X** in the name field.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在名称字段中点击**X**来清除父级。
- en: Turn off the **Deform** option.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭**变形**选项。
- en: Repeat *Steps 3 to 5* for the **Tail.IK** bone.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对**Tail.IK**骨骼重复*步骤3到5*。
- en: 'The `Snake.Full Skeleton.IK.blend` file contains all of the progress you have
    made so far, but let’s explain what we have done in the last several steps. We
    used to see the **Armature** properties, so we asked the **Properties** panel
    to show another view to display bone properties. We broke the connection of our
    control bones with their parent. Since there is no parent, the **Connected** checkbox
    automatically switched itself off. Lastly, we turned off a setting that’s the
    crux of all this whole operation: **Deform**.'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`Snake.Full Skeleton.IK.blend`文件包含了您迄今为止所做的一切进展，但让我们解释一下最后几个步骤我们所做的工作。我们曾经看到**骨架**属性，所以我们要求**属性**面板显示另一个视图来显示骨骼属性。我们断开了我们的控制骨骼与其父级之间的连接。由于没有父级，**连接**复选框自动关闭。最后，我们关闭了一个至关重要的设置：**变形**。'
- en: If you recall what topology is and why we use a rigging system to animate systems
    that bend and stretch, then you’ll know that deformation is the key. We want the
    skeleton of the snake to deform the mesh it’s in. However, we wouldn’t want that
    for the control bones since we’ll use these to dictate the overall motion. So,
    they should not be deforming anything.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还记得拓扑结构是什么以及为什么我们使用绑定系统来动画弯曲和拉伸的系统，那么您就会知道变形是关键。我们希望蛇的骨架变形其所在的网格。然而，我们不会希望控制骨骼也这样做，因为我们将使用这些骨骼来指导整体运动。因此，它们不应该变形任何东西。
- en: That being said, they will be responsible for IK, which is the last missing
    piece to the rigging. To complete the rigging, we need to add the **IK** ingredient,
    and we’ll do that in **Pose Mode**.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，它们将负责IK，这是绑定中最后缺失的一块拼图。为了完成绑定，我们需要添加**IK**成分，我们将在**姿态模式**中这样做。
- en: In [*Chapter 1*](B17473_01.xhtml#_idTextAnchor013), *Creating Low-Poly Models*,
    we went back and forth between **Object Mode** and **Edit Mode**. In this chapter,
    we’ve been in **Edit Mode** all this time to move the parts of a bone and extrude
    new ones. Bones can be in another mode, **Pose Mode**, with which you can define
    the relationship of the bones with each other by introducing constraints. Consider
    this new mode as editing the behavior of the armature, hence how the model will
    *pose*.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第一章*](B17473_01.xhtml#_idTextAnchor013)《创建低多边形模型》中，我们在**对象模式**和**编辑模式**之间来回切换。在本章中，我们一直处于**编辑模式**，以移动骨骼的各个部分并挤出新的部分。骨骼可以处于另一种模式，**姿态模式**，通过引入约束来定义骨骼之间的关系。将这种新模式视为编辑骨架的行为，从而确定模型的*姿态*。
- en: 'Assuming you are in **Edit Mode** already, press *CTRL+Tab* then press *2*
    to switch. Or, if you are in **Object Mode**, then *CTRL+Tab* will take you directly
    to **Pose Mode**. Keep in mind that this works if you have a bone or the armature
    selected. Alternatively, the dropdown in the top-left corner can help you to be
    in the right mode. We’re now ready to add **IK** constraints as follows:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您已经在**编辑模式**中，按*CTRL+Tab*然后按*2*来切换。或者，如果您在**对象模式**中，则*CTRL+Tab*将直接带您进入**姿态模式**。请记住，如果您已经选择了骨骼或骨架，则此方法有效。或者，左上角的下拉菜单可以帮助您进入正确的模式。我们现在可以按照以下方式添加**IK**约束：
- en: Select the **Tail.4** bone.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**Tail.4**骨骼。
- en: Turn on the **Bone Constraints Properties** tab (the blue bone icon with a strap
    around it) in the **Properties** panel.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**属性**面板中打开**骨骼约束属性**选项卡（带绑带的蓝色骨骼图标）。
- en: Choose the **Inverse Kinematics** option in the **Add Bone Constraint** dropdown.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**添加骨骼约束**下拉菜单中选择**逆运动学**选项。
- en: Repeat *Step 3* for the **Head** bone.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对**头部**骨骼重复*步骤3*。
- en: 'We have added the missing **IK** component to two bones. Maybe you noticed
    that the constraint was not added to the control bones but to the bones just before
    them. We’ll now map some of the **IK** constraints'' values to use the control
    bones. To do that, while the **Head** bone is selected, perform the following
    steps:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经为两根骨骼添加了缺失的**IK**组件。也许你注意到了，约束不是添加到控制骨骼上，而是添加到它们之前的骨骼上。现在，我们将映射一些**IK**约束的值，以便使用控制骨骼。要做到这一点，当**头部**骨骼被选中时，执行以下步骤：
- en: Click on the square icon in the **Target** field of the **IK** constraint.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**目标**字段的**IK**约束中点击正方形图标。
- en: Select **Armature** in the options.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选项中选择**骨架**。
- en: Click on the bone icon in the **Bone** field of the **IK** constraint.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**骨骼**字段的**骨骼**图标上点击。
- en: Select **Head.IK** in the options.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选项中选择**Head.IK**。
- en: This will designate **Head.IK** as the control bone for the **Head** bone. So,
    from now on, whenever you interact with **Head.IK**, it will control the **Head**
    bone that is connected to the other bones all the way to the root. That’s why
    you see a dotted yellow line going from the tip to the joint in between the **Torso.1**
    and **Tail.1** bones.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '这将指定**Head.IK**作为**头部**骨骼的控制骨骼。所以，从现在开始，无论何时你与**Head.IK**交互，它都将控制连接到其他骨骼的**头部**骨骼。这就是为什么你看到一条从**Torso.1**和**Tail.1**骨骼之间的关节到尖端的虚线黄色线。 '
- en: 'Let’s associate **Tail.4** and **Tail.IK** by following the preceding recipe
    so that interacting with **Tail.IK** can dictate the tail bones’ behavior. Select
    **Tail.4** then perform the following steps:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照前面的方法将**Tail.4**和**Tail.IK**关联起来，这样与**Tail.IK**的交互就可以控制尾巴骨骼的行为。选择**Tail.4**然后执行以下步骤：
- en: Select **Armature** in the options after clicking on the square icon in the
    **Target** field.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**目标**字段的正方形图标上点击后，在选项中选择**骨架**。
- en: Select **Tail.IK** in the options after clicking on the bone icon in the **Bone**
    field.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**骨骼**字段点击骨骼图标后，在选项中选择**Tail.IK**。
- en: Change the **Chain Length** value to **3**.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**链长度**值更改为**3**。
- en: The first two steps in the preceding set of instructions are pretty much exactly
    the same except that we picked the appropriate bone. The last step introduced
    a new concept that tells the control bone how far down the chain of bones the
    root bone is. The dotted line moved accordingly. The final result is what you
    see in *Figure 5.10*.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的指令集中的前两步几乎完全相同，只是我们选择了适当的骨骼。最后一步引入了一个新概念，告诉控制骨骼根骨骼在骨骼链中的位置。虚线相应地移动。最终结果就是你在*图5.10*中看到的结果。
- en: '![Figure 5.10 – A fully rigged snake ](img/Figure_5.10.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![图5.10 – 一个完全装备的蛇](img/Figure_5.10.jpg)'
- en: Figure 5.10 – A fully rigged snake
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.10 – 一个完全装备的蛇
- en: 'We’ve been doing all of this work so that the armature would be part of the
    snake. However, if you look at **Outliner**, you can still see that these two
    objects are separate. It’s time to really connect the skeleton to the snake’s
    mesh as follows:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们一直做这些工作，以便骨架成为蛇的一部分。然而，如果你查看**大纲**，你仍然可以看到这两个对象是分开的。现在是真正将骨架连接到蛇的网格上的时间：
- en: Switch to **Object Mode**.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到**对象模式**。
- en: First select the **Snake** mesh, then **Armature** by holding down the *Shift*
    key.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先选择**蛇**网格，然后按住*Shift*键选择**骨架**。
- en: Press *CTRL+P* to bring up the **Set Parent To** menu.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*CTRL+P*调出**设置父对象**菜单。
- en: Choose **With Automatic Weights**.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**带自动权重**。
- en: When you parent the armature to the mesh, two things will happen. First, **Snake**
    in **Outliner** will be moved as a child under the **Armature** item. Second,
    **Snake** will be assigned an **Armature** modifier that will build the connection
    between these two objects.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 当你将骨架设置为网格的父对象时，会发生两件事。首先，**Outliner**中的**Snake**将移动到**骨架**项下的子项。其次，**Snake**将分配一个**骨架**修改器，这将在这两个对象之间建立连接。
- en: In the end, the armature will designate its bones to nearby vertices so that
    when a bone moves, it mobilizes the associated vertices. It’s as if some vertices
    that are closer to a particular bone *weigh* more in terms of priority. Thus,
    you won’t see a tail bone move far away vertices that much.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，骨架将指定其骨骼到附近的顶点，这样当骨骼移动时，它就会带动相关的顶点。就好像一些靠近特定骨骼的顶点在优先级方面“重量”更重。因此，你不会看到尾巴骨骼将远离顶点那么远。
- en: Phew, the rigging is finally complete. As you may have noticed, all of this
    creating and separating bones, adding constraints, adjusting settings, and so
    on could sometimes become a tricky business. You get visual clues as to which
    bone is doing what and how they are connected, but the scene could quickly get
    cluttered with gizmos. Like anything else, though, you get used to doing it with
    practice. On that note, you’ll find links to more advanced rigging material in
    the *Further reading* section.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 呼，装置终于完成了。正如你可能已经注意到的，所有这些创建和分离骨骼、添加约束、调整设置等等有时可能变得有些棘手。你会有视觉线索来了解哪个骨骼在做什么以及它们是如何连接的，但场景可能会很快因为小工具而变得杂乱。然而，就像任何其他事情一样，通过练习你会习惯于这样做。关于这一点，你将在**进一步阅读**部分找到更多高级装置材料的链接。
- en: We have provided the `Snake.Rigged.blend` file both in the `Start` and `Finish`
    folders for you to compare your results. You can also use this file as a starting
    point in the following section. Since we deemed that rigging was necessary for
    animation and that our rig is done, we can now turn to a new section where we’ll
    get to know the **Animation** workspace of Blender.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在**开始**和**结束**文件夹中提供了`Snake.Rigged.blend`文件，供你比较结果。你也可以将此文件作为下一节中的起点。由于我们认为装置对于动画是必要的，并且我们的装置已经完成，我们现在可以转向一个新的部分，在那里我们将了解Blender的**动画**工作区。
- en: Animating
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动画制作
- en: We’re about to animate our snake. We’ve prepared a skeleton and introduced two
    control bones to construct a rig. In this section, we’ll use this setup to create
    an attack animation. Using the methods presented in this section, you can create
    different animations for your models and store these animations with the model
    in the same file.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 我们即将为我们的蛇进行动画制作。我们已经准备了一个骨架并引入了两个控制骨骼来构建一个装置。在本节中，我们将使用这个设置来创建攻击动画。使用本节中介绍的方法，你可以为你的模型创建不同的动画，并将这些动画与模型存储在同一文件中。
- en: 'Let’s switch to the **Animation** workspace to take advantage of a more suitable
    set of interfaces. The layout will change to mainly two side-by-side **3D Viewport**
    panels and what looks like a timeline underneath. There are actually two panels
    at the bottom, as follows:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们切换到**动画**工作区，以利用一组更合适的界面。布局将主要变为两个并排的**3D视图**面板，以及下面看起来像时间轴的东西。实际上，底部有两个面板，如下所示：
- en: '**Dope Sheet**: We’ll work with keyframes soon to mark the defining points
    when parts of your model move over time. For example, a frog can have one keyframe
    for its resting position, then another keyframe defined as its highest jump level
    later in time.'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**曲线图**：我们将很快使用关键帧来标记模型随时间移动时的定义点。例如，一只青蛙可以有一个关键帧表示它的休息位置，然后在时间稍后定义另一个关键帧，表示它跳得最高的水平。'
- en: '**Timeline**: This is a simpler version of **Dope Sheet**. It is represented
    with a clock icon and lets you see things at a higher level. We won’t utilize
    this interface that much, but it’s useful to set the **Start** and **End** keyframes
    of your animations.'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**时间轴**：这是**曲线图**的一个简化版本。它用一个时钟图标表示，并允许你从更高层次看到事物。我们不会过多地使用这个界面，但设置动画的**开始**和**结束**关键帧很有用。'
- en: 'Besides these two editors, there is also the **Graph Editor**, which you can
    access by clicking the icon in the drop-down menu in the top-left corner of any
    panel. Actually, let’s do that by changing the left **3D Viewport** into a **Graph
    Editor**. When you are done, you should see something like the following:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这两个编辑器之外，还有一个**图形编辑器**，你可以通过点击任何面板左上角的下拉菜单中的图标来访问。实际上，让我们通过将左边的**3D视图**转换为**图形编辑器**来做这件事。当你完成时，你应该会看到以下类似的内容：
- en: '![Figure 5.11 – We have further customized the Animation workspace ](img/Figure_5.11.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![图5.11 – 我们已经进一步自定义了动画工作区](img/Figure_5.11.jpg)'
- en: Figure 5.11 – We have further customized the Animation workspace
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.11 – 我们已经进一步自定义了动画工作区
- en: 'We have everything we need to animate the snake. We’ll start with an attack
    animation. For this, we’ll move the head forward and raise the tail to depict
    a menacing pose. Start by switching the 3D perspective to **Right Orthographic**
    by pressing *3* on the numpad and performing the following steps:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经拥有了动画蛇所需的一切。我们将从攻击动画开始。为此，我们将把头部向前移动，并将尾巴抬起以描绘一个威胁性的姿态。首先，通过按数字键盘上的 *3*
    键切换到**右正交**3D视角，并执行以下步骤：
- en: Go into **Pose Mode**.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入**姿态模式**。
- en: Select the **Head.IK** bone.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**头部.IK**骨骼。
- en: Press *I* to insert a keyframe and select **Location** in the options.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *I* 键插入关键帧，并在选项中选择**位置**。
- en: This operation will add a key to the first frame in **Dope Sheet** as well as
    populating some elements both in **Dope Sheet** and **Graph Editor**. So far,
    so good. Take a look at what’s added to the animation editors and expand the **Head.IK**
    title in both editors to see what exactly is happening under the hood. We are
    marking the location of the **Head.IK** bone.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 此操作将在**dope sheet**的第一帧中添加一个关键帧，并在**dope sheet**和**图形编辑器**中填充一些元素。到目前为止，一切顺利。看看动画编辑器中添加了什么，并在两个编辑器中展开**Head.IK**标题，以了解底层发生了什么。我们正在标记**Head.IK**骨骼的位置。
- en: 'For the next event in the snake’s attack animation, we need to move the snake’s
    head forward and key (mark) its new location. For this, we need to select a new
    frame in the timeline as follows:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 对于蛇攻击动画的下一个事件，我们需要将蛇头向前移动并标记（标记）其新位置。为此，我们需要在时间轴中选择一个新的帧，如下所示：
- en: Change the frame value from **1** to **10** (just to the left of the **Start**
    section in **Timeline**).
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将帧值从**1**更改为**10**（在**时间轴**的**开始**部分稍左）。
- en: Press *G* and move the head slightly to the left and up.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*G*并将头部稍微向左和向上移动。
- en: Press *I* to insert a keyframe and choose **Location** again.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*I*插入关键帧并再次选择**位置**。
- en: 'This should add more elements – more specifically, curved lines – to **Graph
    Editor**. This is good because you can use those curves to fine-tune how the action
    will start and end—more abruptly or smoothly, which can be used for more dramatic
    effects. We leave it to your artistic interpretation. What we can do, for now,
    is finish the head’s motion so that it goes back to its original position, as
    follows:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该在**图形编辑器**中添加更多元素——更具体地说，是曲线——这是好的，因为您可以使用这些曲线来微调动作的开始和结束方式——更突然或更平滑，这可以用于更戏剧性的效果。我们将其留给您的艺术诠释。目前我们能做的就是完成头部的运动，使其回到原始位置，如下所示：
- en: Change the frame value from **10** to **25**.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将帧值从**10**更改为**25**。
- en: Press *Alt+G* to reset its position to the original values.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*Alt+G*将其位置重置为原始值。
- en: Press *I* to insert a keyframe and choose **Location** again.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*I*插入关键帧并再次选择**位置**。
- en: '*Figure 5.12* shows our progress so far.'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '*图5.12*显示了我们的进展情况。'
- en: '![Figure 5.12 – We have animated the head bone via a control bone ](img/Figure_5.12.jpg)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![图5.12 – 我们已经通过控制骨骼对头部骨骼进行了动画处理](img/Figure_5.12.jpg)'
- en: Figure 5.12 – We have animated the head bone via a control bone
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.12 – 我们通过控制骨骼对头部骨骼进行了动画处理
- en: In the end, we have moved the torso bones by animating the **Head.IK** bone.
    That’s why we have implemented a control bone instead of moving the individual
    torso bones. Additionally, we haven’t done anything special to the **Mouth** bone,
    but that’s also moving to keep up with the head.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们通过动画**Head.IK**骨骼来移动躯干骨骼。这就是为什么我们实施了控制骨骼而不是移动单个躯干骨骼。此外，我们没有对**Mouth**骨骼做任何特殊处理，但这也随着头部移动以保持同步。
- en: 'Let’s do something similar with the tail, as follows:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们对尾巴做类似的事情，如下所示：
- en: Set the frame to **1**.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将帧设置为**1**。
- en: Select the **Tail.IK** bone.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**Tail.IK**骨骼。
- en: Press *I* to insert a keyframe and choose **Location**.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*I*插入关键帧并选择**位置**。
- en: Set the frame to **10**.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将帧设置为**10**。
- en: Press *G* and move the tail slightly to the top and left.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*G*并将尾部稍微向上和向左移动。
- en: Press *I* to insert a keyframe and choose **Location** again.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*I*插入关键帧并再次选择**位置**。
- en: Set the frame to **25**.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将帧设置为**25**。
- en: Press *Alt+G* to reset the position.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*Alt+G*重置位置。
- en: Press *I* to insert a keyframe and choose **Location** again.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*I*插入关键帧并再次选择**位置**。
- en: In this pose, the tail naturally looks angry, which accentuates the head’s motion.
    By the way, where is your head? If you look in **Dope Sheet**, the keyframes for
    the head animation are gone. Blender only displays the keyframes for the selected
    object to keep the interface clean and simple. You can display everything by toggling
    off the **Only Show Selected** button, which looks like a select icon in the header
    of **Dope Sheet**. There is a similar button in **Graph Editor**; if you disable
    both, you should have something similar to what you see in *Figure 5.13*.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个姿势下，尾巴自然看起来很生气，这突出了头部的运动。顺便问一下，你的头在哪里？如果你在** dope sheet**中看，头部动画的关键帧已经消失了。Blender只显示所选对象的关键帧，以保持界面简洁。您可以通过切换**仅显示所选**按钮来显示所有内容，该按钮看起来像**dope
    sheet**标题中的选择图标。**图形编辑器**中也有类似的按钮；如果您禁用两个，您应该看到类似于*图5.13*中的内容。
- en: '![Figure 5.13 – Both the head and tail keyframes are visible in the editors
    ](img/Figure_5.13.jpg)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![图5.13 – 编辑器中可见头部和尾部关键帧](img/Figure_5.13.jpg)'
- en: Figure 5.13 – Both the head and tail keyframes are visible in the editors
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.13 – 编辑器中可见头和尾的关键帧
- en: You can also refer to the `Snake.Animated.blend` file in the `Finish` folder.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以参考“Finish”文件夹中的`Snake.Animated.blend`文件。
- en: We’ve completed our first animation. If you would like to create another animation,
    where would you do it? It seems that we could keep adding more keyframes to the
    timeline. However, how would we know which keyframes are responsible for a particular
    animation?
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了第一个动画。如果你想创建另一个动画，你会在哪里做？看起来我们可以在时间轴上继续添加更多关键帧。然而，我们如何知道哪些关键帧负责特定的动画？
- en: We can answer this question both in Blender and Godot contexts. Actually, once
    we understand how to create separate animations in Blender for the same model,
    we’ll have practically prepared our animations to be shipped to Godot. To do this,
    we’ll discover **Action Editor** in the following section.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在 Blender 和 Godot 的上下文中回答这个问题。实际上，一旦我们了解了如何在 Blender 中为同一模型创建独立的动画，我们实际上就已经为动画发送到
    Godot 做好了准备。为了做到这一点，我们将在下一节中探索**动作编辑器**。
- en: Getting animations ready for Godot
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为 Godot 准备动画
- en: Creating separate Blender files for different animations would be extremely
    unwieldy. If only we had a way to store multiple animations in the same file.
    Luckily, there is. We need to use a new interface called **Action Editor** for
    that. Let’s see how we can use it to create another action for the snake.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 为不同的动画创建单独的 Blender 文件会非常难以管理。如果我们有一种方法可以在同一个文件中存储多个动画，那就太好了。幸运的是，确实有。我们需要使用一个新的界面，称为**动作编辑器**来做到这一点。让我们看看我们如何使用它为蛇创建另一个动作。
- en: 'There is a dropdown in the top-left corner of the **Dope Sheet** panel. Although
    that whole panel could be considered as the **Dope Sheet** panel, we have been
    using its default view. This is similar to how **3D Viewport** works. When we
    were switching between **Object Mode** and **Edit Mode**, we were still working
    in the same **3D Viewport** panel but in one of its specialized views. In other
    words, these dropdowns customize the panel you are in. To switch the **Dope Sheet**
    panel to its **Action Editor** view, perform the following steps:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '**Dope Sheet**面板的左上角有一个下拉菜单。尽管整个面板都可以被认为是**Dope Sheet**面板，但我们一直使用其默认视图。这与**3D
    视口**的工作方式类似。当我们切换**对象模式**和**编辑模式**时，我们仍然在同一个**3D 视口**面板中工作，但处于其专业视图之一。换句话说，这些下拉菜单自定义了你所在的面板。要将**Dope
    Sheet**面板切换到其**动作编辑器**视图，请执行以下步骤：'
- en: Expand the dropdown that shows **Dope Sheet**.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开显示**Dope Sheet**的下拉菜单。
- en: Select **Action Editor** in the options.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选项中选择**动作编辑器**。
- en: 'This will reveal the title of our first animation, `Attack`. Now, you have
    just changed the default name to something you can easily keep track of. Moreover,
    when we import this model into Godot and we want to trigger the correct animation
    sequence, we’ll use this action name. Let’s create more actions as follows:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 这将揭示我们第一个动画的标题，“攻击”。现在，你已经将默认名称更改为一个你可以轻松跟踪的名称。此外，当我们将此模型导入 Godot 并想要触发正确的动画序列时，我们将使用此动作名称。让我们按照以下步骤创建更多动作：
- en: Click on the second icon next to the action title (the icon with stacked papers).
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击动作标题旁边的第二个图标（堆叠纸张的图标）。
- en: Change this new action’s title to `Idle`.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将这个新动作的标题更改为“Idle”。
- en: 'This will actually create a copy of the first animation. Except for its title,
    everything is the same, but we can now change the features of the animation that
    match the title we just gave. In most games, the idle state of characters usually
    looks calm, but they have a slight bobbing up and down motion that indicates the
    character is alive but otherwise in a neutral state. Our idle action involves
    performing the following steps:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上会创建第一个动画的副本。除了标题之外，一切都是相同的，但现在我们可以更改与标题匹配的动画功能。在大多数游戏中，角色的空闲状态通常看起来很平静，但他们会有轻微的上下摆动动作，这表明角色是活着的，但其他方面处于中性状态。我们的空闲动作包括以下步骤：
- en: Set the frame to **10**.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将帧设置为**10**。
- en: Select the **Head.IK** bone and reset its position by pressing *Alt+G*.
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**Head.IK**骨骼，并通过按*Alt+G*重置其位置。
- en: Press *G* and move the bone ever so slightly downward.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*G*并将骨骼略微向下移动。
- en: Press *I* and choose **Location**.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*I*并选择**位置**。
- en: Repeat *Steps 2 to 5*, but move the **Tail.IK** bone slightly upward.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复*步骤 2 到 5*，但将**Tail.IK**骨骼稍微向上移动。
- en: Let’s do one more thing and test our new action. Change the **End** value in
    **Timeline** to **25** and click the play button. This will let you see the action
    in a looped manner so that you get a sense of whether the locations in the animation
    are good enough. Make more corrections to the location of the head and tail control
    bones if you would like, but remember to set their values by pressing *I*.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再做一些事情并测试我们的新动作。将**时间轴**中的**结束**值改为**25**，然后点击播放按钮。这将让您以循环的方式查看动作，以便您能够判断动画中的位置是否足够好。如果您想调整头部和尾部控制骨骼的位置，请记住通过按*I*来设置它们的值。
- en: Our snake is idling, up and down, perhaps waiting for a target to attack. By
    using the dropdown to the left of the action’s title, you can switch between different
    actions.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的蛇正在闲置，上下摆动，可能是在等待攻击目标。通过使用动作标题左侧的下拉菜单，您可以在不同的动作之间切换。
- en: Congratulations! You have officially created two animations. If, at times, it
    was difficult to follow the instructions, you can find a fully finished example
    in the `Finish` folder in the `Snake.blend` file for further studying.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您已经正式创建了两个动画。如果有时难以遵循说明，您可以在`Snake.blend`文件中的`Finish`文件夹中找到一个完整的示例，以供进一步学习。
- en: We have done a lot in this chapter. It’s time to summarize our efforts.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章中做了很多工作。现在是时候总结我们的努力了。
- en: Summary
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter started off with a discussion about which software (Blender versus
    Godot) would be suitable for animations. We exemplified different cases of animation
    and determined that Blender is the right choice for animating systems that have
    individually moving parts.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 本章一开始就讨论了哪种软件（Blender与Godot）适合动画。我们举例说明了不同的动画案例，并确定Blender是动画具有独立运动部件的系统的正确选择。
- en: We then discussed the importance of good geometry, better known as topology,
    since not everything that looks good is good enough from an animation perspective.
    Once the system is in motion, the vertices, faces, and edges will act like a wrapper
    around a skeleton. If you know you’ll be animating your model, you might be careful
    in how you create the geometry better ahead of time.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接着讨论了良好几何形状的重要性，也称为拓扑，因为从动画的角度来看，并不是所有看起来好的东西都足够好。一旦系统开始运动，顶点、面和边将像骨架的包装一样行动。如果您知道您将要对模型进行动画处理，您可能需要提前更加小心地创建几何形状。
- en: Nevertheless, if such an early option is not always possible, to prevent tearing
    and creasing that might occur in certain areas of a model, we introduced the grab
    option. It can help you resolve problematic parts by moving them to a different
    location.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，如果这样的早期选项并不总是可行，为了防止模型某些区域可能出现的撕裂和折痕，我们引入了抓取选项。它可以帮助您通过将它们移动到不同的位置来解决有问题的部分。
- en: As soon as the distribution of vertices is in a favorable place, then the rigging
    can start. This is, in fact, one of the most advanced topics for most artists
    who are learning any 3D modeling software. It helps sometimes to think of rigging
    as a bunch of strings that control a puppet. Like a puppet master, you need to
    know which string controls which parts. To that end, we introduced IK, which has
    advantages over a more direct, also known as FK, approach.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦顶点的分布处于有利的位置，就可以开始骨架设置。实际上，这是大多数学习任何3D建模软件的艺术家面临的最先进的话题之一。有时将骨架想象成控制木偶的一堆绳子是有帮助的。就像一个木偶师一样，你需要知道哪根绳子控制哪个部分。为此，我们引入了IK，它比更直接的FK（正向运动学）方法具有优势。
- en: After we created a rig for a snake, we discovered the animation workspace. Since
    the rigging depended on control bones via IK, our animation was done effortlessly.
    Along the way, we learned how to move parts of a rig and keyframe their properties.
    In our simple case, it was only location, and we kept the motion on one axis.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们为蛇创建了一个骨架之后，我们发现了动画工作区。由于骨架依赖于通过IK（逆向运动学）的控制骨骼，我们的动画制作变得轻松自如。在这个过程中，我们学习了如何移动骨架的各个部分并关键帧它们的属性。在我们的简单案例中，这仅限于位置，并且我们保持运动在一个轴上。
- en: Lastly, we got to know how we could store two animations, rather actions, for
    the same model. Once you have properly labeled actions, not only will it be easier
    for you to find them in Blender in the future, but you will also see the benefit
    of this practice later in Godot chapters.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们了解了如何为同一模型存储两个动画，而不是动作。一旦您正确标记了动作，不仅您在将来在Blender中找到它们会更容易，而且您在Godot章节中也会看到这种做法的好处。
- en: You have completed five chapters that took you from creating models to adding
    animations to your models. Along the way, you’ve also learned how to construct
    and apply materials and textures. In the following chapter, we’ll investigate
    how to export our work from Blender.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经完成了五个章节，从创建模型到为模型添加动画。在这个过程中，你还学习了如何构建和应用材质和纹理。在接下来的章节中，我们将探讨如何从 Blender
    导出我们的作品。
- en: Further reading
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'We mentioned the importance of topology, and it could be challenging to know
    what constitutes good or bad topology. So, to see more examples and benefit from
    other people’s expertise, refer to the following links:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 我们提到了拓扑的重要性，了解什么构成好的或坏的拓扑可能具有挑战性。因此，为了查看更多示例并从他人的专业知识中受益，请参考以下链接：
- en: '[https://blender.stackexchange.com/questions/140963/do-i-have-bad-topology](https://blender.stackexchange.com/questions/140963/do-i-have-bad-topology)'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://blender.stackexchange.com/questions/140963/do-i-have-bad-topology](https://blender.stackexchange.com/questions/140963/do-i-have-bad-topology)'
- en: '[https://www.reddit.com/r/blenderhelp/comments/speyjs/is_this_bad_topology/](https://www.reddit.com/r/blenderhelp/comments/speyjs/is_this_bad_topology/)'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.reddit.com/r/blenderhelp/comments/speyjs/is_this_bad_topology/](https://www.reddit.com/r/blenderhelp/comments/speyjs/is_this_bad_topology/)'
- en: '[https://www.pluralsight.com/blog/film-games/ngons-triangles-bad](https://www.pluralsight.com/blog/film-games/ngons-triangles-bad)'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.pluralsight.com/blog/film-games/ngons-triangles-bad](https://www.pluralsight.com/blog/film-games/ngons-triangles-bad)'
- en: 'Some 3D practitioners specialize only in animation. Although it’s possible
    to animate some Blender objects without rigging them, for example, cameras and
    lights to move them around the scene, most online courses usually cover rigging
    and animation topics together. The following is a list of online courses and material
    for you to further your knowledge in both of these domains:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 一些 3D 实践者只专注于动画。虽然可以在不绑定 Blender 对象的情况下对某些 Blender 对象进行动画处理，例如移动摄像机和灯光以在场景中移动它们，但大多数在线课程通常一起涵盖绑定和动画主题。以下是一份在线课程和材料的列表，供你进一步了解这两个领域：
- en: 'CG Cookie: [https://cgcookie.com/courses?sort_category=140,179](https://cgcookie.com/courses?sort_category=140,179)'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'CG Cookie: [https://cgcookie.com/courses?sort_category=140,179](https://cgcookie.com/courses?sort_category=140,179)'
- en: 'Udemy:'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Udemy:'
- en: '[https://www.udemy.com/course/rigging-fundamentals-blender/](https://www.udemy.com/course/rigging-fundamentals-blender/)'
  id: totrans-258
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.udemy.com/course/rigging-fundamentals-blender/](https://www.udemy.com/course/rigging-fundamentals-blender/)'
- en: '[https://www.udemy.com/course/rigging-and-animating-low-poly-fps-arms-in-blender/](https://www.udemy.com/course/rigging-and-animating-low-poly-fps-arms-in-blender/)'
  id: totrans-259
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.udemy.com/course/rigging-and-animating-low-poly-fps-arms-in-blender/](https://www.udemy.com/course/rigging-and-animating-low-poly-fps-arms-in-blender/)'
- en: '[https://www.udemy.com/course/learn-3d-modelling-rigging/](https://www.udemy.com/course/learn-3d-modelling-rigging/)'
  id: totrans-260
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.udemy.com/course/learn-3d-modelling-rigging/](https://www.udemy.com/course/learn-3d-modelling-rigging/)'
- en: '[https://www.udemy.com/course/blendercharacters/](https://www.udemy.com/course/blendercharacters/)'
  id: totrans-261
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.udemy.com/course/blendercharacters/](https://www.udemy.com/course/blendercharacters/)'
- en: Additionally, while you are browsing for more training content, you might come
    across a topic called **Weight Painting**, which is helpful in determining how
    the rigging will prioritize the nearby vertices. We left it out for brevity’s
    sake, but it’s a topic you’ll most likely want to cover if you want to be more
    thorough.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，当你浏览更多培训内容时，你可能会遇到一个名为 **权重绘制** 的主题，这有助于确定绑定如何优先处理附近的顶点。我们为了简洁起见省略了它，但如果你想要更全面地了解，这是一个你很可能想要涵盖的主题。
- en: 'In the following chapter, we’ll be slowly transitioning from Blender to Godot.
    So, this chapter was really the last hands-on Blender chapter. If you want to
    know more about what Blender can do, there are some really useful resources out
    there, in both written and video formats, offered by Packt Publishing, such as
    the following resources:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将逐步从 Blender 过渡到 Godot。因此，这一章实际上是 Blender 的最后一章实践操作。如果你想了解更多关于 Blender
    能做什么的信息，有一些非常有用的资源，包括书面和视频格式，由 Packt Publishing 提供，如下所示：
- en: '*Blender 3D By Example* by Oscar Baechler and Xury Greer'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《Blender 3D 案例教程》* by Oscar Baechler 和 Xury Greer'
- en: '*Blender 3D Modeling and Animation: Build 20+ 3D Projects in Blender* by Raja
    Biswas'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《Blender 3D 建模与动画：在 Blender 中构建 20+ 个 3D 项目》* by Raja Biswas'
- en: '*The Secrets to Photorealism: The PBR/Blender 2.8 Workflow* by Daniel Krafft'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《实现真实感：PBR/Blender 2.8 工作流程》* by Daniel Krafft'
- en: 'Part 2: Asset Management'
  id: totrans-267
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二部分：资产管理
- en: In this transitional part, you'll learn how to move from Blender to Godot. An
    essential part of this workflow will be knowing which settings matter. By getting
    to know potential pitfalls and how to apply workarounds, you can prepare yourself
    for scenarios where you have to use third-party assets.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个过渡部分，你将学习如何从Blender迁移到Godot。这个工作流程的一个关键部分是了解哪些设置是重要的。通过了解潜在的问题和如何应用解决方案，你可以为必须使用第三方资产的情况做好准备。
- en: 'In this part, we cover the following chapters:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 在本部分，我们将涵盖以下章节：
- en: '[*Chapter 6*](B17473_06.xhtml#_idTextAnchor092)*, Exporting Blender Assets*'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第6章*](B17473_06.xhtml#_idTextAnchor092)*，导出Blender资产*'
- en: '[*Chapter 7*](B17473_07.xhtml#_idTextAnchor112)*, Importing Blender Assets
    into Godot*'
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第7章*](B17473_07.xhtml#_idTextAnchor112)*，将Blender资产导入Godot*'
- en: '[*Chapter 8*](B17473_08.xhtml#_idTextAnchor129)*, Adding Sound Assets*'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第8章*](B17473_08.xhtml#_idTextAnchor129)*，添加声音资产*'
