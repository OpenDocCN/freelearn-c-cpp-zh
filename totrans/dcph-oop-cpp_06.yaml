- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Implementing Hierarchies with Single Inheritance
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用单继承实现层次结构
- en: This chapter will extend our pursuit of object-oriented programming in C++.
    We will begin by introducing additional OO concepts, such as **generalization**
    and s**pecialization**, and then understand how these concepts are implemented
    in C++ through *direct language support*. We will begin building hierarchies of
    related classes, and understand how each class can become an easier to maintain,
    potentially reusable building block in our applications. We will understand how
    the new OO concepts presented in this chapter will support well-planned designs,
    and we will have a clear understanding of how to implement these designs with
    robust code in C++.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将扩展我们在C++中追求面向对象编程的旅程。我们将从介绍额外的OO概念开始，例如**泛化**和**特化**，然后理解这些概念是如何通过*直接语言支持*在C++中实现的。我们将开始构建相关类的层次结构，并理解每个类如何成为我们应用程序中更容易维护、可能可重用的构建块。我们将理解本章中提出的新OO概念将如何支持精心设计的计划，并且我们将清楚地理解如何使用健壮的C++代码实现这些设计。
- en: 'In this chapter, we will cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Object-oriented concepts of generalization and specialization, and *Is-A* relationships
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 泛化和特化的面向对象概念，以及*Is-A*关系
- en: Single inheritance basics – defining derived classes, accessing inherited members,
    understanding inherited access labels and regions, and `final` class specification
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单继承基础 – 定义派生类，访问继承成员，理解继承访问标签和区域，以及`final`类指定
- en: Construction and destruction sequence in a single inheritance hierarchy; selecting
    base class constructors with the member initialization list
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单继承层次结构中的构造和析构序列；使用成员初始化列表选择基类构造函数
- en: Modifying access labels in the base class list – `public` versus `privat`e and
    `protected` base classes – to change the OO purpose of inheritance to *Implementation
    Inheritance*
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改基类列表中的访问标签 – `public`与`private`和`protected`基类 – 以改变继承的OO目的为*实现继承*
- en: By the end of this chapter, you will understand the object-oriented concepts
    of generalization and specialization and will know how to use inheritance in C++
    as a mechanism to realize these ideals. You will understand terms such as base
    and derived classes, as well as OO motivations for building hierarchies, such
    as supporting Is-A relationships or supporting implementation inheritance.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将理解面向对象的概念，如泛化和特化，并了解如何将继承用于C++，作为一种实现这些理想的机制。你将了解诸如基类和派生类等术语，以及构建层次结构时的OO动机，例如支持“是...的”关系或支持实现继承。
- en: Specifically, you will understand how to grow inheritance hierarchies using
    single inheritance, and how to access inherited data members and member functions.
    You will also understand which inherited members you may directly access, based
    on their defined access regions.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，你将理解如何使用单继承来扩展继承层次结构，以及如何访问继承的数据成员和成员函数。你还将理解基于它们定义的访问区域，你可以直接访问哪些继承成员。
- en: You will understand the order of constructor and destructor invocations when
    instances of derived class types are instantiated and destroyed. You will know
    how to make use of the member initialization list to select which, from a potential
    group, of inherited constructors a derived class object may need to utilize as
    part of its own construction.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你将理解在派生类类型的实例化和销毁时，构造函数和析构函数调用的顺序。你将知道如何利用成员初始化列表来选择派生类对象在其自身构造过程中可能需要利用的潜在继承构造函数组中的哪一个。
- en: You will also understand how changing access labels in a base class list changes
    the OO meaning for the type of inheritance hierarchy you are growing. By examining
    public versus private and protected base classes, you will understand different
    types of hierarchies, such as those built to support Is-A relationships versus
    those built to support implementation inheritance.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你还将理解如何通过改变基类列表中的访问标签来改变你正在构建的继承层次结构的OO含义。通过比较公共、私有和受保护的基类，你将理解不同类型的层次结构，例如那些用于支持“是...的”关系与那些用于支持实现继承的层次结构。
- en: By understanding the direct language support of single inheritance in C++, you
    will be able to implement the OO concepts of generalization and specialization.
    Each class within your hierarchy will be a more easily maintained component and
    can serve as a potential building block for creating new, more specialized components.
    Let us further our understanding of C++ as an OOP language by detailing single
    inheritance.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Online code for full program examples can be found in the following GitHub
    URL: [https://github.com/PacktPublishing/Deciphering-Object-Oriented-Programming-with-CPP/tree/main/Chapter06](https://github.com/PacktPublishing/Deciphering-Object-Oriented-Programming-with-CPP/tree/main/Chapter06).
    Each full program example can be found in the GitHub under the appropriate chapter
    heading (subdirectory) in a file that corresponds to the chapter number, followed
    by a dash, followed by the example number in the chapter at hand. For example,
    the first full program in this chapter can be found in the subdirectory `Chapter06`
    in a file named `Chp6-Ex1.cpp` under the aforementioned GitHub directory.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: 'The CiA video for this chapter can be viewed at: [https://bit.ly/3R7uNci](https://bit.ly/3R7uNci).'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: Expanding object-oriented concepts and terminology
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will introduce essential object-oriented concepts, as well
    as applicable terminology that will accompany these key ideas.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: From [*Chapter 5*](B19087_05.xhtml#_idTextAnchor222), *Exploring Classes in
    Detail*, you now understand the key OO ideas of encapsulation and information
    hiding, and how C++ supports these ideals through the C++ class. Now, we will
    look at how we can grow a hierarchy of related classes, using a very general class
    as a building block, and then extend that class by creating a more specific class.
    Through growing a hierarchy of related classes in this repeated fashion, OO systems
    provide building blocks of potential reuse. Each class within the hierarchy is
    encapsulated, so maintenance and upgrades to a specific class can be made more
    easily and without impact to the entire system. By incrementally refining each
    class with a more specific and more detailed class to build a hierarchy of related
    classes, specific maintenance for each component is in a focused area for maintenance
    and changes.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start by extending our basic OO terminology.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: Deciphering generalization and specialization
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The main object-oriented concepts extending through this chapter are *generalization*
    and *specialization*. Incorporating these principles into your design will provide
    the basis for writing more easily modifiable and maintainable code, and for code
    that can potentially be reused in related applications.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '**Generalization** describes the process of abstracting commonalities from
    a grouping of classes and creating a more generalized class for that grouping
    to house the common properties and behaviors. The more generalized class can be
    known as a **base** (or **parent**) class. Generalization can also be used to
    collect more general properties and behaviors of a single class into a base class
    with the expectation that the new, generalized class can later serve as a building
    block or basis for additional, more specific (derived) classes.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '**Specialization** describes the process of deriving a new class from an existing,
    generalized base class, for the purpose of adding specific, distinguishable properties
    and behaviors to adequately represent the new class. The specialized class can
    also be referred to as a **derived** (or **child**) class. A hierarchy of classes
    can incrementally refine their respective properties and behaviors through specialization.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Though reuse is difficult to achieve, the OOP concepts such as generalization
    and specialization make reuse more easily obtainable. Reuse can potentially be
    realized in applications that are similar in nature or in the same project domain,
    in continuations of existing projects, or potentially in related domains where
    minimally the most generalized classes and associated components can be reused.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: Building a hierarchy is a fundamental language feature of C++. Let’s move forward
    by exploring single inheritance to put this idea into action.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: Understanding single inheritance basics
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Inheritance** is the C++ language mechanism that allows the concepts of generalization
    and specialization to be realized. **Single inheritance** is when a given class
    has exactly one immediate base class. Both single inheritance and multiple inheritance
    are supported in C++; however, we will focus on single inheritance in this chapter
    and will cover multiple inheritance in a later chapter.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Inheritance hierarchies can be built using both classes and structures in C++.
    Classes, however, are most often utilized rather than structures to support inheritance
    and OOP.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: Growing an inheritance hierarchy for the purpose of generalization and specialization
    supports an `Person` and a derived class of `Student`, we can say *a Student Is-A
    Person*. That is, a `Student` is a specialization of a `Person`, adding additional
    data members and member functions above and beyond those provided by its base
    class, `Person`. Specifying an Is-A relationship through generalization and specialization
    is the most typical reason inheritance is used to create base and derived classes.
    Later in this chapter, we will look at another reason to utilize inheritance.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get started by looking at the language mechanics in C++ to specify base
    and derived classes and to define an inheritance hierarchy.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: Defining base and derived classes and accessing inherited members
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With single inheritance, the derived class specifies who its immediate ancestor
    or base class is. The base class does not specify that it has any derived classes.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: The derived class simply creates a base class list by adding a `:` after its
    class name, followed by the keyword `public` (for now), and then the specific
    base class name. Whenever you see a `public` keyword in the base class list, it
    means that we are using inheritance to specify an Is-A relationship.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a simple example to illustrate the basic syntax:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '`Student` *Is-A* derived class of `Person`:'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here, the base class is `Person`, and the derived class is `Student`. The derived
    class need only define additional data members and member functions that augment
    those specified in the base class.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Instances of a derived class may generally access `public` members specified
    by the derived class or by any ancestor of the derived class. Inherited members
    are accessed in the same fashion as those specified by the derived class. Recall,
    dot notation (`.`) is used to access members of objects, and arrow notation (`->`)
    is used to access members of pointers to objects.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: Of course, to make this example complete, we will need to add the applicable
    constructors, which we currently assume exist. Naturally, there will be nuances
    with constructors relating to inheritance, which we will soon cover in this chapter.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: 'Simple access of inherited members can be seen using the aforementioned classes
    as follows:'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the previous code fragment, the derived class instance of `Student`, pointed
    to by `s1`, can access both base and derived class members, such as `Person::GetTitle()`
    and `Student::GetGpa()`. The base class instance of `Person`, `p1`, can only access
    its own members, such as `Person::GetTitle()`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: 'Looking at a memory model for the preceding example, we have the following:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.1 – Memory model for current example](img/Figure_6.01_B19087.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
- en: Figure 6.1 – Memory model for current example
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: Notice that in the preceding memory model, a `Student` instance is comprised
    of a `Person` subobject. That is, at the memory address indicating the beginning
    of `*s1`, a `Student`, we first see the memory layout of its `Person` data members.
    Then, we see the memory layout of its additional `Student` data members. Of course,
    `p1`, which is a `Person`, only contains `Person` data members.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: Access to base and derived class members will be subject to the access regions
    specified by each class. Let’s take a look to see how inherited access regions
    work.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: Examining inherited access regions
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Access regions, including inherited access regions, define from which scope
    members, including inherited members, are directly accessible.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: The derived class inherits all members specified in its base class. However,
    direct access to those members is subject to the access regions specified in the
    base class.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: 'Members (both data and function) inherited from the *base class* are accessible
    to the *derived class* as specified by the access regions that are imposed by
    the base class. The inherited access regions, and how they relate to derived class
    access, are as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '**private** members defined in the base class are inaccessible outside the
    scope of the base class. The scope of a class includes member functions of that
    class.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**protected** members defined in the base class are accessible in the scope
    of the base class and within the scope of the derived class, or its descendants.
    This means member functions of these classes.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**public** members defined in the base class are accessible from any scope,
    including the scope of the derived class.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the previous, simple example, we noticed that both a `Person` and a `Student`
    instance accessed the `public` member function `Person::GetTitle()` from the scope
    of `main()`. Also, we noticed that the `Student` instance accessed its `public`
    member `Student::GetGpa()` from `main()`. Generally, outside the scope of a given
    class, the only members that are accessible are those that are in the public interface,
    such as in this example.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: We will soon see a larger, full program example in this chapter showcasing the
    `protected` access region. But first, let’s discover an additional specifier that
    may be useful in determining the shape and extensibility of our inheritance hierarchy.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: Specifying a class as final
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In C++, we can indicate that a class may not be further extended within our
    inheritance hierarchy. This is known as a `final` is used in the base class list
    to designate a class as a **final** (unextendible) class or **leaf-node**.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a simple example to illustrate the basic syntax:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: 'Given our previous base class `Person`, `Student` *Is-A* derived class of `Person`.
    Additionally, `GradStudent` *Is-A* final derived class of `Student`:'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here, `GradStudent` is specified as a final, unextendible class. Therefore,
    `GradStudent` may not appear in the base class list of a new derived class.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: Next, let’s review inherited constructors and destructors so that our upcoming
    full program example can provide greater overall utility.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: Understanding inherited constructors and destructors
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Through single inheritance, we can build a hierarchy of related classes. We
    have seen that when we instantiate a derived class object, memory for its base
    class data members is then followed by the additional memory required for the
    additional derived class data members. Each of these subobjects will need to be
    constructed. Luckily, each class will have defined a suite of constructors for
    just that purpose. We then need to understand how the language can be utilized
    to allow us to specify the appropriate base class constructor for the base class
    subobject when instantiating and constructing a derived class object.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, when an object of a derived class type is no longer needed and will
    be destructed, it is important to note that a destructor for each subobject comprising
    the derived class instance will be implicitly called on our behalf.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，当一个派生类类型的对象不再需要并被销毁时，需要注意的是，将隐式调用每个组成派生类实例的子对象的析构函数。
- en: Let’s take a look at the constructor and destructor sequence in a single inheritance
    hierarchy, and how we can make choices when more than one constructor is available
    for a base class subobject found in a derived class instance.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看单继承层次结构中的构造函数和析构函数的调用顺序，以及当在派生类实例中找到一个基类子对象时，如果存在多个构造函数可供选择，我们如何做出选择。
- en: Implicit constructor and destructor invocations
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 隐式构造函数和析构函数调用
- en: Constructors and destructors are two types of member functions that are not
    explicitly inherited by the derived class. This means that the signature of a
    base class constructor may not be used to instantiate a derived class object.
    However, we will see that when a derived class object is instantiated, the memory
    for both the base and derived class portions of the overall object will be separately
    initialized using each class’s respective constructors.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数和析构函数是两种派生类没有显式继承的成员函数。这意味着不能使用基类构造函数的签名来实例化派生类对象。然而，我们将看到，当实例化派生类对象时，将分别使用每个类的相应构造函数来单独初始化整体对象中的基类和派生类部分。
- en: When an object of a derived class type is instantiated, not only will one of
    its constructors be invoked but so will one in each of its preceding base classes.
    The most generalized base class constructor will first be executed, followed by
    the constructors all the way down the hierarchy until we arrive at the derived
    class constructor that is the same type as the instance at hand.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当实例化派生类类型的对象时，不仅会调用其构造函数，还会调用其所有先前基类的构造函数。最一般的基类构造函数首先执行，然后是层次结构中的所有构造函数，直到我们到达与当前实例类型相同的派生类构造函数。
- en: Similarly, when a derived class instance goes out of scope (or is explicitly
    deallocated for pointers to instances), all the relevant destructors will be invoked,
    but in the opposite order of construction. First, the derived class destructor
    will be executed, then all the destructors in an upward fashion for each preceding
    base class will be invoked and executed until we reach the most generalized base
    class.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，当一个派生类实例超出作用域（或显式地释放了指向实例的指针）时，所有相关的析构函数都将被调用，但调用顺序与构造顺序相反。首先执行派生类析构函数，然后以向上递归的方式调用并执行每个先前基类的析构函数，直到达到最一般的基类。
- en: You may now ask, how may I choose from a set of potential base class constructors
    for my base class subobject when instantiating a derived class? Let’s take a more
    detailed look at the member initialization list to discover the solution.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可能会问，在实例化派生类时，我如何从一组潜在的基类构造函数中选择我的基类子对象？让我们更详细地看看成员初始化列表，以发现解决方案。
- en: Usage of member initialization list to select a base class constructor
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用成员初始化列表选择基类构造函数
- en: The member initialization list may be used to specify which base class constructor
    should be invoked when instantiating a derived class object. Each derived class
    constructor may specify that a different base class constructor should be used
    to initialize the given base class portion of the derived class object.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 成员初始化列表可以用来指定在实例化派生类对象时应该调用哪个基类构造函数。每个派生类构造函数可以指定使用不同的基类构造函数来初始化派生类对象中给定的基类部分。
- en: If the derived class constructor’s member initialization list does not specify
    which base class constructor should be utilized, the default base class constructor
    will be invoked.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果派生类构造函数的成员初始化列表没有指定应该使用哪个基类构造函数，将调用默认的基类构造函数。
- en: The member initialization list is specified using a `:` after the parameter
    list in the derived class constructor. To specify which base class constructor
    should be used, the name of the base class constructor, followed by parentheses
    including any values to be passed to that base class constructor, can be indicated.
    Based upon the signature of the parameters in the base class list following the
    base class name, the appropriate base class constructor will be selected to initialize
    the base class portion of the derived class object.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a simple example to illustrate the basic syntax for base class constructor
    selection:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start with the basic class definitions (note that many member functions
    are omitted, as are some usual data members):'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The constructors for the previous class definitions would be as follows (notice
    two of the derived class constructors use the member initialization list):'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the previous short segment of code, notice that the system-supplied default
    derived class constructor, `Student::Student()`, has been elected with `=default`
    added to the constructor prototype. With an alternate constructor in this class
    definition, this specification (or by writing the default constructor ourselves)
    is necessary if we would like to support this simple interface for class instantiation.
    Remember, we only get a system-supplied default constructor if there are no other
    constructors (that is, means for instantiation) in our class definition.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: Next, notice in the alternate derived class constructor, `Student::Student(const
    string &, const string &, float)`, the use of the member initialization list for
    base class construction specification. Here, the `Person` constructor matching
    the signature of `Person::Person(const string &, const string &)` is selected
    to initialize the `Person` subobject at hand. Also, notice that parameters from
    the `Student` constructor, `n` and `t`, are passed up to the aforementioned `Person`
    constructor to help complete the `Person` subobject initialization. Had we not
    specified which `Person` base class constructor should be used in the member initialization
    list, the default `Person` constructor will be used to initialize the `Person`
    base class subobject of `Student`. The member initialization list is additionally
    used in this constructor to initialize data members introduced within the `Student`
    class definition (such as `gpa`).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: Now, notice in the copy constructor for the derived class, `Student::Student(const
    Student &)`, the member initialization list is used to select the `Person` copy
    constructor, passing `s` as a parameter to the `Person` copy constructor. Here,
    the object referenced by `s` is a `Student`, however, the top part of `Student`
    memory contains `Person` data members. Hence, it is acceptable to implicitly upcast
    the `Student` to a `Person` to allow the `Person` copy constructor to initialize
    the `Person` subobject. Also, in the member initialization list of the `Student`
    copy constructor, the additional data member added by the `Student` class definition
    is initialized, namely, by initializing `gpa(s.gpa)`. These additional data members
    could have also been set in the body of this constructor.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand how to utilize the member initialization list to specify
    a base class constructor, let’s move forward with a complete program example.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: Putting all the pieces together
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far in this chapter, we have seen many pieces contributing to a full program
    example. It is important to see our code in action, with all its various components.
    We need to see the basic mechanics of inheritance, how the member initialization
    list is used to specify which base class constructor should implicitly be invoked,
    and the significance of the `protected` access region.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s take a look at a more complex, full program example to fully illustrate
    single inheritance. This example will be broken into segments; the full program
    can be found in the following GitHub location:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Deciphering-Object-Oriented-Programming-with-CPP/blob/main/Chapter06/Chp6-Ex1.cpp](https://github.com/PacktPublishing/Deciphering-Object-Oriented-Programming-with-CPP/blob/main/Chapter06/Chp6-Ex1.cpp)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the previous class definition, we now have a fully-fledged class definition
    for `Person`, with many more details than our simple syntax examples formerly
    used in this section. Notice that we have introduced a `protected` access region
    and placed member function `void ModifyTitle(const string &);` in this access
    region.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: 'Moving onward, let’s examine the non-line member function definitions for `Person`:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The implementation for the aforesaid `Person` member functions is as expected.
    Now, let’s add the class definition for the derived class, `Student`, along with
    its inline function definitions:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the preceding definition of `Student`, `class Student` is derived from `Person`
    using `public` inheritance (that is, a public base class), which supports an Is-A
    relationship. Notice the `public` access label after the base class list following
    the `:` in the derived class definition (that is, `class Student: public Person`).
    Notice that our `Student` class has added data members and member functions above
    and beyond those that it automatically inherits from `Person`.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, adding in the non-inline `Student` member functions, we continue growing
    our code:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In the aforementioned segment of code, we define the non-inline member functions
    of `Student`. Notice that the default constructor merely uses the member initialization
    list to initialize a data member, as we did in the last chapter. Since no `Person`
    constructor has been specified in the member initialization list of the default
    `Student` constructor, the default `Person` constructor will be used to initialize
    the `Person` subobject when instantiating a `Student` with its default constructor.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: Next, the alternate constructor for `Student` uses the member initialization
    list to specify that the alternate constructor of `Person` should be utilized
    to construct the `Person` subobject contained within a given `Student` instance.
    Notice that the selected constructor will match the signature `Person::Person(const
    string &, const string &, char, const string &)`, and that selected input parameters
    from the `Student` constructor (namely `fn`, `ln`, `mi`, and `t`) will be passed
    as parameters to the `Person` alternate constructor. The `Student` constructor’s
    member initialization list is then used to initialize additional data members
    introduced by the `Student` class.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: In the copy constructor for `Student`, the member initialization list is used
    to specify that the `Person` copy constructor should be called to initialize the
    `Person` subobject of the `Student` instance that is being constructed. The `Student
    &` will be implicitly upcast to a `Person &` as the `Person` copy constructor
    is called. Recall that the top part of a `Student` object *Is-A* `Person`, so
    this is fine. Next, in the remainder of the copy constructor’s member initialization
    list for `Student`, we initialize any remaining data members the `Student` class
    has defined. Any data members requiring a deep copy (such as those that are pointers)
    may be handled in the body of the copy constructor.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: Moving onward, we see a comment indicating the `Student` destructor. Implicitly,
    as the *last* line of code in this method (whether the destructor is system-supplied
    or user-written), a call to the `Person` destructor is patched in for us by the
    compiler. This is how the destructor sequence is automated for us. Consequently,
    the most specialized portion of the object, the `Student` pieces, will first be
    destructed, followed by the implicit call to the `Person` destructor to destruct
    the base class subobject.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: Next, in the `Print()` method for `Student`, notice that we would like to print
    out various data members that are inherited from `Person`. Alas, these data members
    are `private`. We may not access them outside the scope of the `Person` class.
    Nevertheless, the `Person` class has left us with a public interface, such as
    `Person::GetTitle()` and `Person::GetFirstName()`, so that we may access these
    data members from any scope of our application, including from `Student::Print()`.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we come to the `Student::EarnPhD()` method. Notice that all this method
    does is invoke the `protected` member function `Person::ModifyTitle("Dr.");`.
    Recall that `protected` members defined by the base class are accessible within
    the scope of the derived class. `Student::EarnPhD()` is a member function of the
    derived class. `EarnPhD()` provides a public interface to modify the title of
    a `Person`, perhaps after checking whether the student has met graduation requirements.
    Because `Person::ModifyTitle()` is not `public`, instances of `Person` or `Student`
    must go through a controlled `public` interface to change their respective titles.
    Such interfaces might include methods such as `Student::EarnPhD()` or `Person::GetMarried()`,
    and so on.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: 'Nonetheless, let’s complete our full program example by examining `main()`:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In the last segment of this program, in `main()`, we simply instantiate a `Student`,
    namely `s1`. The `Student` utilizes `Student::Print()` to print its current data.
    The `Student` then sets her current course set to `"Doctoral Thesis"` and then
    invokes `Student::EarnPhD();`. Note that any `public` members of `Student` or
    `Person` are available for `s1` to utilize outside the scope of their class, such
    as in `main()`. To complete the example, `s1` reprints her details using `Student::Print()`.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the output for the full program example:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now that we have competency with the basic mechanics of single inheritance,
    and have used single inheritance to model an Is-A relationship, let’s move onward
    to see how inheritance can be used to model a different concept by exploring `protected`
    and `private` base classes.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: Implementation inheritance – changing the purpose of inheritance
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far we demonstrated using a public base class, known also as *public inheritance*.
    Public base classes are used to model Is-A relationships and provide the primary
    motivation behind building an inheritance hierarchy. This usage supports the concepts
    of generalization and specialization.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: Occasionally, inheritance may be used as a tool to implement one class in terms
    of another, that is, by one class using another as its underlying implementation.
    This is known as **implementation inheritance** and it does not support the ideals
    of generalization and specialization. Yet, implementation inheritance can provide
    a quick and easily reusable way to implement one class based upon another. It
    is fast and relatively error-free. Many class libraries use this tool without
    the knowledge of their class users. It is important to distinguish implementation
    inheritance from traditional hierarchy building for the motivation of specifying
    Is-A relationships.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: Implementation inheritance, supported in C++ with private and protected base
    classes, is exclusive to C++. Other OOP languages choose to only embrace inheritance
    for the purpose of modeling Is-A relationships, which is supported in C++ through
    public base classes. An OO purist would endeavor to use inheritance only to support
    generalization and specialization (*Is-A*). However, using C++, we will understand
    appropriate uses of implementation inheritance so that we may use this language
    feature wisely.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: C++支持实现继承，使用私有和受保护的基类，这是C++独有的。其他面向对象编程语言选择只接受继承用于建模*Is-A*关系，这在C++中通过公共基类得到支持。面向对象纯主义者会努力只使用继承来支持泛化和特殊化（*Is-A*）。然而，使用C++，我们将了解实现继承的适当用途，以便我们能够明智地使用这种语言特性。
- en: Let’s move onward to understand how and why we might utilize this type of inheritance.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续前进，了解我们可能如何以及为什么利用这种类型的继承。
- en: Modifying access labels in the base class list by using protected or private
    base classes
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过使用受保护的或私有的基类修改基类列表中的访问标记
- en: To reiterate, the usual type of inheritance is `public` inheritance. The `public`
    label is used in the base class list for a given derived class. However, in the
    base class list, the keywords `protected` and `private` are also options.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，通常的继承类型是`public`继承。对于给定的派生类，基类列表中使用`public`标记。然而，在基类列表中，`protected`和`private`关键字也是可选项。
- en: That is, in addition to labeling access regions within a class or structure
    definition, an access label can be used in the base class list of a derived class
    definition to designate how members defined in a base class are inherited by derived
    classes.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，除了在类或结构定义内标记访问区域外，访问标记还可以在派生类定义的基类列表中使用，以指定基类中定义的成员如何被派生类继承。
- en: Inherited members can only be made more restrictive than they were designated
    to be in the base class. When the derived class specifies that inherited members
    should be treated in a more restrictive fashion, any descendants of that derived
    class will also be subject to these specifications.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 继承成员只能比在基类中指定的更严格。当派生类指定继承成员应以更严格的方式处理时，该派生类的任何后代也将受到这些规定的约束。
- en: 'Let’s see a quick example of the *base class list*:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速看一下*基类列表*的例子：
- en: Recall that most often, a `public` access label will be specified in the base
    class list.
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回想一下，通常在基类列表中会指定一个`public`访问标记。
- en: 'In this example, a `public` access label is used to specify that a `Person`
    is a `public` base class of `Student`. That is, a `Student` *Is-A* `Person`:'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这个例子中，使用`public`访问标记来指定`Person`是`Student`的`public`基类。也就是说，`Student`是`Person`的*一种*：
- en: '[PRE11]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Access labels specified in the *base class list* modify inherited access regions
    as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在*基类列表*中指定的访问标记将按以下方式修改继承的访问区域：
- en: '**public**: Public members in the base class are accessible from any scope;
    protected members in the base class are accessible from the scope of the base
    and derived classes. We are familiar with using a public base class.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**公共的**：基类中的公共成员可以从任何范围访问；基类中的受保护成员可以从基类和派生类的范围访问。我们熟悉使用公共基类。'
- en: '**protected**: Public and protected members in the base class act as though
    they are defined as protected by the derived class (that is, accessible from the
    scope of the base and derived classes and any descendants of the derived class).'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**受保护的**：基类中的公共和受保护成员的行为就像它们被派生类定义为受保护的（即，可以从基类和派生类的范围以及派生类后代的范围内访问）。'
- en: '**private**: Public and protected members in the base class act as though they
    are defined as private by the derived class, allowing these members to be accessible
    within the scope of the derived class, but not within the scope of any of the
    derived class descendants.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**私有的**：基类中的公共和受保护成员的行为就像它们被派生类定义为私有的，允许这些成员在派生类的范围内访问，但不能在任何派生类后代的范围内访问。'
- en: Note
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: In all cases, class members labeled as private within a class definition, are
    accessible only within the scope of the defining class. Modifying the access labels
    in the base class list can only treat inherited members more restrictively, never
    less restrictively.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有情况下，在类定义中将成员标记为私有的，只能在其定义的范围内访问。修改基类列表中的访问标记只能使继承成员更严格，而不能更宽松。
- en: In the absence of an access label specified in conjunction with the base class,
    `private` will be assumed if the user defined type is a `class`, and `public`
    will be the default if the user defined type is a `struct`. A good rule of thumb
    is to always include the access label in the base class list for a derived class
    (or structure) definition.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: Creating a base class to illustrate implementation inheritance
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To understand implementation inheritance, let’s review a base class that may
    serve as a basis to implement other classes. We will examine a typical pair of
    classes to implement an encapsulated `LinkList`. Though this example will be broken
    into several segments, the full example will be shown, and can also be found in
    the GitHub:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Deciphering-Object-Oriented-Programming-with-CPP/blob/main/Chapter06/Chp6-Ex2.cpp](https://github.com/PacktPublishing/Deciphering-Object-Oriented-Programming-with-CPP/blob/main/Chapter06/Chp6-Ex2.cpp)'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We begin the previous segment of code with class definitions for both `LinkListElement`
    and `LinkList`. The `LinkList` class will contain data members that are pointers
    to the `head`, `tail`, and `current` element in the `LinkList`. Each of these
    pointers is of type `LinkListElement`. A variety of typical `LinkList` processing
    methods are included, such as `InsertAtFront()`, `RemoveAtFront()`, `DeleteAtFront()`,
    `IsEmpty()`, and `Print()`. Let’s take a quick peek at the implementation of these
    methods with the next segment of code:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In the previously mentioned member function definitions, we note that a `LinkList`
    can be constructed either empty or with one element (note the two available constructors).
    `LinkList::InsertAtFront()` adds an item to the front of the list for efficiency.
    `LinkList::RemoveAtFront()` removes an item and returns it to the user, whereas
    `LinkList::DeleteAtFront()` removes and deletes the front item. The `LinkList::Print()`
    function allows us to view the `LinkList` whenever necessary.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let’s see a typical `main()` function to illustrate how a `LinkList`
    can be instantiated and manipulated:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In `main()`, we create a few items, of type `Item`, which will later be data
    for `LinkListElement`. We then instantiate a `LinkListElement`, namely `element1`,
    and add it to a newly constructed `LinkList`, using `LinkList list1(element1);`.
    We then add several items to the list using `LinkList::InsertAtFront()`, and call
    `LinkList::Print()` to print out `list1` for a baseline. Next, we delete elements
    from `list1`, one by one, printing as we go, using `LinkList::DeleteAtFront()`
    and `LinkList::Print()`, respectively.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: Now, we instantiate a second `LinkList`, namely `list2`, which starts out empty.
    We gradually insert several items using `LinkList::InsertAtFront()`, then print
    the list, and then delete each element, one by one, using `LinkList::DeleteAtFront()`,
    printing the revised list with each step.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: The point of this example is not to exhaustively review the inner workings of
    this code. You are undoubtedly familiar with the concept of a `LinkList`. More
    so, the point is to establish this set of classes, `LinkListElement` and `LinkList`,
    as a set of building blocks in which several *Abstract Data Types* can be built.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: 'Nonetheless, the output for the preceding example is as follows:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Next, let’s see how `LinkList` can be used as a private base class.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: Using a private base class to implement one class in terms of another
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have just created a `LinkList` class to support the basic handling of an
    encapsulated linked list data structure. Now, let’s imagine that we would like
    to implement an `Push()`, `Pop()`, `IsEmpty()`, and perhaps `Print()`.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: You may ask how a stack is implemented. The answer is that the implementation
    does not matter, so long as it supports the expected interface of the ADT being
    modeled. Perhaps a stack is implemented using an array, or perhaps it is implemented
    in a file. Perhaps it is implemented using a `LinkedList`. Each implementation
    has pros and cons. In fact, the underlying implementation of the ADT might change,
    yet users of the ADT should not be affected by such a change. This is the basis
    of *implementation inheritance*. A derived class is implemented in terms of a
    base class, yet the underlying details of the base class from which the new class
    is derived are effectively hidden. These details cannot be directly used by instances
    of the derived class (in this case, the ADT). Nonetheless, the base class silently
    provides the implementation for the derived class.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: We will use this approach to implement a `Stack` using a `LinkedList` as its
    underlying implementation. To do this, we will have `class Stack` extend `LinkedList`
    using a `private` base class. `Stack` will define a public interface for its users
    to establish the interface for this ADT, such as `Push()`, `Pop()`, `IsEmpty()`,
    and `Print()`. The implementation of these member functions will make use of selected
    `LinkedList` member functions, but `Stack` users will not see this, nor will `Stack`
    instances be able to use any `LinkList` members directly themselves.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: Here, we are not saying a `Stack` *Is-A* `LinkList`, but rather, a `Stack` is
    implemented in terms of a `LinkedList` at the moment—and that underlying implementation
    could change!
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: 'The code to implement `Stack` is simple. Assume we are using the `LinkList`
    and `LinkListElement` classes from the previous example. Let’s add the `Stack`
    class here. The full program example can be found in our GitHub:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Deciphering-Object-Oriented-Programming-with-CPP/blob/main/Chapter06/Chp6-Ex3.cpp](https://github.com/PacktPublishing/Deciphering-Object-Oriented-Programming-with-CPP/blob/main/Chapter06/Chp6-Ex3.cpp)'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Notice how compact the aforementioned code is for our `Stack` class! We begin
    by specifying that `Stack` has a `private` base class of `LinkList`. Recall that
    a `private` base class means that the `protected` and `public` members inherited
    from `LinkList` act as though they were defined by `Stack` as `private` (and are
    only accessible within the scope of `Stack`, that is, member functions of `Stack`).
    This means that instances of `Stack` may not use the *former* public interface
    of `LinkList`. This also means that the underlying implementation of `Stack` as
    a `LinkList` is effectively hidden. Of course, `LinkList` instances are not affected
    in any way and may use their `public` interface as usual.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: We notice that `=default` has been added to both the `Stack` constructor and
    destructor prototypes. Neither of these methods has work to do because we are
    not adding any data members to this class; therefore, the default system-supplied
    versions are acceptable. Note that if we omitted both the default constructor
    and destructor prototypes, we get both system-supplied versions linked in.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: We easily define `Stack::Push()` to simply call `LinkList::InsertAtFront()`,
    just as `Stack::Pop()` does little more than call `LinkList::RemoveAtFront()`.
    Even though `Stack` would love to simply use the inherited implementations of
    `LinkList::IsEmpty()` and `LinkList::Print()`, due to `LinkList` being a `private`
    base class, these functions are not part of the public interface of `Stack`. Accordingly,
    `Stack` adds an `IsEmpty()` method that simply calls `LinkList::IsEmpty();`. Notice
    the use of the scope resolution operator to specify the `LinkList::IsEmpty()`
    method; without the base class qualification, we would be adding a recursive function
    call! This call to the base class method is allowed because `Stack` member functions
    can call the *once public* methods of `LinkList` (they are now treated as `private`
    within `Stack`). Similarly, `Stack::Print()` merely calls `LinkList::Print()`.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: In the scope of `main()`, we instantiate a `Stack`, namely `stack1`. Using the
    public interface of `Stack`, we easily manipulate `stack1` using `Stack::Push()`,
    `Stack::Pop()`, `Stack::IsEmpty()`, and `Stack::Print()`.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: 'The output for this example is as follows:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: It is important to note that a pointer to a `Stack` instance cannot be upcast
    to be stored as a pointer to a `LinkList`. Upcasting is not allowed across a `private`
    base class boundary. This would allow a `Stack` to reveal its underlying implementation;
    C++ does not allow this to happen. Here, we see that a `Stack` is merely implemented
    in terms of a `LinkList`; we are not saying that a `Stack` *Is-A* `LinkedList`.
    This is the concept of implementation inheritance in its best light; this example
    illustrates implementation inheritance favorably.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: Next, let’s move forward to see how we can use a `protected` base class, and
    how that differs from a `private` base class using implementation inheritance.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: Using a protected base class to implement one class in terms of another
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have just implemented a `Stack` in terms of a `LinkList` using a `private`
    base class. Now, let’s implement a `Queue` and a `PriorityQueue`. We will implement
    a `Queue` using `LinkList` as a `protected` base class, and a `PriorityQueue`
    using `Queue` as a `public` base class.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: Again, `Queue` and `PriorityQueue` are Abstract Data Types. It is (relatively)
    unimportant how a `Queue` is implemented. The underlying implementation may change.
    Implementation inheritance allows us to implement our `Queue` using a `LinkedList`
    without revealing the underlying implementation to users of the `Queue` class.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: Now, our class `Queue` will use `LinkedList` as a `protected` base class. `Queue`
    will define a public interface for its users to establish the expected interface
    for this ADT, such as `Enqueue()`, `Dequeue()`, `IsEmpty()`, and `Print()`. The
    implementation of these member functions will make use of selected `LinkedList`
    member functions, but `Queue` users will not see this, nor will `Queue` instances
    be able to use any `LinkList` members directly themselves.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, our class `PriorityQueue` will extend `Queue` using `public` inheritance.
    That’s right, we’re back to Is-A. We are saying that a `PriorityQueue` *Is-A*
    `Queue`, and a `Queue` is implemented using a `LinkedList`.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: We will just add a priority enqueuing method to our `PriorityQueue` class; this
    class will be glad to inherit the `public` interface from `Queue` (but obviously
    not from `LinkList`, which luckily is hidden behind a `protected` base class at
    its parent’s level).
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: 'The code to implement `Queue` and `PriorityQueue` is again straightforward.
    The `LinkList` base class needs to be augmented to be more fully functional in
    order to proceed. The `LinkListElement` class can remain the same. We will show
    the basics of the revised `LinkList` class with only its class definition. The
    full code for both `Queue` and `PriorityQueue` will be shown in a separate segment.
    The full program example can be found in our GitHub:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Deciphering-Object-Oriented-Programming-with-CPP/blob/main/Chapter06/Chp6-Ex4.cpp](https://github.com/PacktPublishing/Deciphering-Object-Oriented-Programming-with-CPP/blob/main/Chapter06/Chp6-Ex4.cpp)'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Notice that `LinkList` has been expanded to have a fuller set of features, such
    as being able to add, remove, and delete elements at various positions within
    the `LinkList`. To keep our examined code together brief, we will not show the
    implementation of these methods.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s add the class definitions for `Queue` and `PriorityQueue` in the
    next code segment:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In the previous segment of code, we define the `Queue` and `PriorityQue` classes.
    Notice that `Queue` has a `protected` base class of `LinkList`. With a `protected`
    base class, the `protected` and `public` members inherited from `LinkList` act
    as though they are defined by `Queue` as `protected`, which means that these inherited
    members are not only accessible within the scope of `Queue`, but also within any
    potential descendants of `Queue`. As before, these restrictions only apply to
    the `Queue` class, its descendants, and their instances; the `LinkList` class
    and its instances are unaffected.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: In the `Queue` class, no new data members are necessary. The internal implementation
    is handled by `LinkList`. With a `protected` base class, we are saying that the
    `Queue` is implemented using a `LinkList`. Nonetheless, we must provide the `public`
    interface for `Queue` and we do so by adding methods such as `Queue::Enqueue()`,
    `Queue::Dequeue()`, `Queue::IsEmpty()` and `Queue::Print()`. Notice that in their
    implementations, these methods merely call `LinkList` methods to perform the necessary
    operations. Users of `Queue` must use `Queue`’s public interface; the *once public*
    `LinkList` interface is hidden to `Queue` instances.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: Next, we define `PriorityQueue`, another ADT. Notice that `PriorityQueue` defines
    `Queue` as a `public` base class. We are back to inheritance to support an Is-A
    relationship. A `PriorityQueue` *Is-A* `Queue` and can do everything a `Queue`
    can do, just a little more. As such, `PriorityQueue` inherits as usual from `Queue`,
    including `Queue`’s public interface. `PriorityQueue` needs only to add an additional
    method for priority enqueuing, namely `PriorityQueue::PriorityEnqueue()`.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: Since `Queue` has a protected base class of `LinkList`, the `public` interface
    from `LinkList` is considered `protected` to `Queue` and its descendants, including
    `PriorityQueue`, so that `LinkList`’s *once public* methods are considered `protected`
    to both `Queue` and `PriorityQueue`. Notice that `PriorityQueue::PriorityEnqueue()`
    makes use of `LinkList::InsertBeforeItem()`. This would not be possible if `LinkList`
    were a `private`, versus a `protected`, base class of `Queue`.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: 'With the class definitions and implementation in place, let’s continue with
    our `main()` function:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Now, in `main()`, we instantiate a `Queue`, namely `q1`, which utilizes the
    public interface of `Queue`. Note that `q1` may not use the *once public* interface
    of `LinkList`. The `Queue` may only behave like a `Queue`, not a `LinkList`. The
    ADT of `Queue` is preserved.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we instantiate a `PriorityQueue`, namely `q2`, which utilizes the public
    interface of both `Queue` and `PriorityQueue`, such as `Queue::Enqueue()` and
    `PriorityQueue::PriorityEnqueue()`, respectively. Because a `Queue` *Is-A* `PriorityQueue`
    (`Queue` is the `public` base class), the typical mechanics of inheritance are
    in place, allowing `PriorityQueue` to utilize the public interface of its ancestors.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: 'The output for this example is as follows:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 本例的输出如下：
- en: '[PRE21]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Finally, we have seen two examples of using implementation inheritance; it is
    not an often-used feature of C++. However, you now understand `protected` or `private`
    base classes should you run across them in library code, application code that
    you are maintaining, or the rare opportunity in which this technique may prove
    useful for a programming task you may encounter.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们看到了使用实现继承的两个示例；这并不是C++中常用的特性。然而，你现在应该理解，如果你在库代码、你正在维护的应用代码中，或者在罕见的机会中，这种技术可能对你要遇到的编程任务有用，那么你会遇到`protected`或`private`基类。
- en: Optional uses for =default
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '`=default`的可选用途'
- en: We have seen `=default` used in constructor and destructor prototypes to alleviate
    the user need to supply such method definitions. However, let’s recall some guidelines
    for when a constructor (or destructor) is provided for us automatically. In such
    cases, using `=default` with a constructor or destructor prototype will be more
    documentative in nature than a requirement; we will get the same system-supplied
    method in the absence of the `=default` prototype.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了在构造函数和析构函数原型中使用`=default`来减轻用户提供此类方法定义的需求。然而，让我们回顾一下当构造函数（或析构函数）自动为我们提供时的一些指南。在这种情况下，使用构造函数或析构函数原型中的`=default`将具有更多文档性质，而不是要求；如果没有`=default`原型，我们将得到相同的系统提供的方法。
- en: Using an `=default` prototype is not necessary if the default constructor is
    the only constructor in a class; recall that you will get a system-supplied default
    constructor if a class has no constructors (to provide an interface to instantiate
    the class). Using `=default` with a default constructor prototype is crucial,
    however, if there are other constructors in the class (not including the copy
    constructor) and you want to maintain the default object creation (construction)
    interface. For the copy constructor, if the default system-supplied version is
    adequate, you will get this method regardless of whether you use an `=default`
    prototype or omit the prototype entirely. Likewise, with the destructor, if the
    system-supplied version is adequate, you will get this version linked in regardless
    of whether you use an `=default` prototype or omit the prototype altogether; the
    latter style is becoming more prevalent.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 如果默认构造函数是一个类中唯一的构造函数，则不需要使用`=default`原型；回想一下，如果一个类没有构造函数，你将得到一个系统提供的默认构造函数（以提供实例化类的接口）。然而，如果类中有其他构造函数（不包括复制构造函数），并且你想要保持默认对象创建（构造）接口，则使用默认构造函数原型中的`=default`是至关重要的。对于复制构造函数，如果你使用的是系统提供的默认版本，你将得到这个方法，无论你是否使用`=default`原型或完全省略原型。同样，对于析构函数，如果系统提供的版本足够好，你将得到这个版本，无论你是否使用`=default`原型或完全省略原型；后者风格越来越普遍。
- en: We have now covered the basic features of single inheritance in C++. Let’s quickly
    review what we’ve covered before moving to the next chapter.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经涵盖了C++中单继承的基本特性。在进入下一章之前，让我们快速回顾一下我们已经覆盖的内容。
- en: Summary
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have moved further along our journey with object-oriented
    programming. We have added additional OO concepts and terms, and have seen how
    C++ has direct language support for these concepts. We have seen how inheritance
    in C++ supports generalization and specialization. We have seen how to incrementally
    build a hierarchy of related classes.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们继续我们的面向对象编程之旅。我们添加了额外的OO概念和术语，并看到了C++如何直接支持这些概念。我们已经看到了C++中的继承如何支持泛化和特殊化。我们已经看到了如何逐步构建相关类的层次结构。
- en: We have seen how to grow inheritance hierarchies using single inheritance, and
    how to access inherited data members and member functions. We have reviewed access
    regions to understand which inherited members may be directly accessed, based
    upon the access regions in which the members are defined in the base class. We
    know that having a `public` base class equates to defining an Is-A relationship,
    which supports the ideals of generalization and specialization, which is the most
    commonly used reason for inheritance.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了如何使用单继承来扩展继承层次结构，以及如何访问继承的数据成员和成员函数。我们已经回顾了访问区域，以了解哪些继承成员可以直接访问，这取决于成员在基类中定义的访问区域。我们知道，有一个`public`基类等同于定义了一个Is-A关系，这支持了泛化和特殊化的理念，这是继承最常用的原因。
- en: We have detailed the order of constructor and destructor invocations when instances
    of derived class types are instantiated and destroyed. We have seen the member
    initialization list to select which inherited constructor a derived class object
    may choose to utilize as part of its own construction (for its base class subobject).
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: We have seen how changing access labels in a base class list changes the OO
    meaning for the type of inheritance being used. By comparing `public` versus `private`
    and `protected` base classes, we now understand different types of hierarchies,
    such as those built to support Is-A relationships versus those built to support
    implementation inheritance.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: We have seen that base classes in our hierarchies may serve as potential building
    blocks for more specialized components, leading to potential reuse. Any potential
    reuse of existing code saves development time and cuts down on maintenance of
    otherwise duplicated code.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: Through extending our OOP knowledge, we have gained a preliminary set of skills
    relating to inheritance and hierarchy building in C++. With the basic mechanics
    of single inheritance under our belts, we can now move forward to learn about
    many more interesting object-oriented concepts and details relating to inheritance.
    Continuing to [*Chapter 7*](B19087_07.xhtml#_idTextAnchor366), *Utilizing Dynamic
    Binding through Polymorphism*, we will next learn how to dynamically bind methods
    to their respective operations in a hierarchy of related classes.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using your [*Chapter 5*](B19087_05.xhtml#_idTextAnchor222), *Exploring Classes
    in Detail*, solution, create a C++ program to build an inheritance hierarchy,
    generalizing `Person` as a base class from the derived class of `Student`.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Decide which data members and member functions of your `Student` class are more
    generic and would be better positioned in a `Person` class. Build your `Person`
    class with these members, including appropriate constructors (default, alternate,
    and copy), a destructor, access member functions, and a suitable public interface.
    Be sure to place your data members in the private access region.
  id: totrans-198
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Using a `public` base class, derive `Student` from `Person`. Remove members
    from `Student` that are now represented in `Person`. Adjust constructors and the
    destructor accordingly. Use the member initialization list to specify base class
    constructors as needed.
  id: totrans-199
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Instantiate both `Student` and `Person` several times and utilize the appropriate
    `public` interfaces on each. Be sure to dynamically allocate several instances.
  id: totrans-200
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a message using `cout` as the first line in each of your constructors and
    as the first line in your destructors so that you can see the construction and
    destruction order of each instance.
  id: totrans-201
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: (Optional) Complete the class hierarchy, which includes `LinkList`, `Queue`,
    and `PriorityQueue`, using the online code as a basis. Complete the remaining
    operations in the `LinkList` class, and call them as appropriate in the public
    interface of `Queue` and `PriorityQueue`.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: （可选）使用在线代码作为基础，完成包括 `LinkList`、`Queue` 和 `PriorityQueue` 在内的类层次结构。完成 `LinkList`
    类中的剩余操作，并在 `Queue` 和 `PriorityQueue` 的公共接口中适当地调用它们。
- en: Be sure to add copy constructors for each class (or prototype them in the private
    access region or use `=delete` in the prototype to suppress copying if you truly
    do not want to allow copies).
  id: totrans-203
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保为每个类添加复制构造函数（或者在私有访问区域中对其进行原型化，或者如果你确实不希望允许复制，在原型中使用 `=delete` 来抑制复制）。
- en: Instantiate `LinkList` using either constructor, then demonstrate how each of
    your operations works. Be sure to invoke `Print()` after adding or deleting an
    element.
  id: totrans-204
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用任一构造函数实例化 `LinkList`，然后演示你的每个操作是如何工作的。确保在添加或删除元素后调用 `Print()`。
- en: Instantiate `Queue` and `PriorityQueue`, and demonstrate that each of the operations
    in their `public` interfaces works correctly. Remember to demonstrate the inherited
    operations in the `public` interface of `Queue` for instances of `PriorityQueue`.
  id: totrans-205
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实例化 `Queue` 和 `PriorityQueue`，并演示它们 `public` 接口中的每个操作都能正确工作。请记住，对于 `PriorityQueue`
    的实例，也要演示 `Queue` 的 `public` 接口中继承的操作。
