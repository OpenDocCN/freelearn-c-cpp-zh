- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Splitting and Reusing Scenes
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分割和重用场景
- en: It is possible to create the whole game within one Godot scene, but this can
    get quite unwieldy. Not only do we have to recreate every part over and over again,
    such as every boulder or enemy, but if we want to change something about the rocks,
    we have to go and find every rock to change them.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 有可能在一个Godot场景中创建整个游戏，但这可能会变得相当难以管理。我们不仅必须一次又一次地重新创建每个部分，例如每个巨石或敌人，而且如果我们想改变关于岩石的某些内容，我们必须去找每个岩石来更改它们。
- en: This is not scalable for any kind of game. Luckily, in Godot, there are such
    things as *scenes*. In [*Chapter 2*](B19358_02.xhtml#_idTextAnchor044), we saw
    how to create new scenes from scratch, but in this chapter, we will learn how
    we can create a scene for each element so that we can easily reuse it throughout
    the game. This way, we can make one scene for the rocks and use that to populate
    the arena instead of having multiple unique rocks.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于任何类型的游戏来说都不具可扩展性。幸运的是，在Godot中，有像*场景*这样的东西。在[*第2章*](B19358_02.xhtml#_idTextAnchor044)中，我们看到了如何从头创建新场景，但在这章中，我们将学习如何为每个元素创建一个场景，这样我们就可以在整个游戏中轻松重用它。这样，我们可以为岩石创建一个场景，并使用它来填充竞技场，而不是使用多个独特的岩石。
- en: Next to reusing components, it’s also way easier to work on certain parts of
    the game in isolation instead of having a big scene. Saving parts of the game
    like this will keep us focused on what we are working on.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 除了重用组件之外，单独对游戏中的某些部分进行工作也比有一个大场景要容易得多。以这种方式保存游戏的部分将使我们专注于我们正在工作的内容。
- en: Other game engines have very similar systems. Unity has Prefabs, Unreal Engine
    has Blueprint Classes, and so on. The great thing about Godot scenes is that they
    behave just like any other node once they are instanced in the scene tree.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 其他游戏引擎也有非常类似的功能。Unity有预制体，Unreal Engine有蓝图类，等等。Godot场景的伟大之处在于，一旦它们在场景树中实例化，它们的行为就像任何其他节点一样。
- en: 'In this chapter, we will cover the following main topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Saving a branch as a new scene
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将分支保存为新的场景
- en: Using saved scenes
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用保存的场景
- en: Organizing scenes in a project
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在项目中组织场景
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'As for every chapter, you can find the final code in this book’s GitHub repository
    in the subfolder for this chapter: [https://github.com/PacktPublishing/Learning-GDScript-by-Developing-a-Game-with-Godot-4/tree/main/chapter08](https://github.com/PacktPublishing/Learning-GDScript-by-Developing-a-Game-with-Godot-4/tree/main/chapter08).'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 就像每一章一样，你可以在本书的GitHub仓库中找到本章的最终代码，位于该章节的子文件夹中：[https://github.com/PacktPublishing/Learning-GDScript-by-Developing-a-Game-with-Godot-4/tree/main/chapter08](https://github.com/PacktPublishing/Learning-GDScript-by-Developing-a-Game-with-Godot-4/tree/main/chapter08)。
- en: Saving a branch as a new scene
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将分支保存为新的场景
- en: In the *Creating new scenes* section of [*Chapter 2*](B19358_02.xhtml#_idTextAnchor044),
    we learned how to create new scenes for different code experiments. This process
    can be followed to create any scene at all. But another way to do this is to save
    part of an existing scene tree. We’ll be splitting a branch of the scene tree
    into its separate sub-scene that we can reuse anywhere.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第2章*](B19358_02.xhtml#_idTextAnchor044)的[*创建新场景*]部分，我们学习了如何为不同的代码实验创建新场景。这个过程可以用来创建任何场景。但另一种方法是保存现有场景树的一部分。我们将把场景树的一个分支拆分成一个独立的子场景，我们可以在任何地方重用它。
- en: Creating a separate player scene
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建独立的玩家场景
- en: 'Let’s save the `Player` node as a separate scene so that we can work on it
    in isolation. Go to our `Main` scene and follow these steps:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将`Player`节点保存为一个独立的场景，这样我们就可以单独对其工作。前往我们的`Main`场景，按照以下步骤操作：
- en: Right-click the `Player` node.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击`Player`节点。
- en: 'From the pop-up menu, select **Save Branch** **as Scene**:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从弹出菜单中选择**保存分支** **为场景**：
- en: '![Figure 8.1 – Selecting Save Branch as Scene to save the node as a separate
    scene](img/B19358_08_01.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![图8.1 – 选择将分支保存为场景以将节点保存为独立场景](img/B19358_08_01.jpg)'
- en: Figure 8.1 – Selecting Save Branch as Scene to save the node as a separate scene
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.1 – 选择将分支保存为场景以将节点保存为独立场景
- en: 'Now, we have to select a location and name for the new scene. Leaving everything
    as-is should do the trick:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们必须选择新场景的位置和名称。保持一切不变应该就可以了：
- en: '![Figure 8.2 – Saving the scene under an appropriate name](img/B19358_08_02.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![图8.2 – 将场景保存为适当的名称](img/B19358_08_02.jpg)'
- en: Figure 8.2 – Saving the scene under an appropriate name
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.2 – 将场景保存为适当的名称
- en: 'The new scene will now open and only contain the `Player` node and its child:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 新的场景现在将打开，并且只包含`Player`节点及其子节点：
- en: '![Figure 8.3 – The player.tscn scene, which only contains the Player node and
    its children](img/B19358_08_03.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![图8.3 – 只包含玩家节点及其子节点的player.tscn场景](img/B19358_08_03.jpg)'
- en: Figure 8.3 – The player.tscn scene, which only contains the Player node and
    its children
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.3 – 只包含玩家节点及其子节点的player.tscn场景
- en: 'Reset the `Player` node’s position so that it is positioned at `(0, 0)` within
    the scene:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将“玩家”节点的位置重置为场景内的`(0, 0)`：
- en: '![Figure 8.4 – Resetting the position of the root Player node to (0, 0)](img/B19358_08_04.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图8.4 – 将根玩家节点的位置重置为(0, 0)](img/B19358_08_04.jpg)'
- en: Figure 8.4 – Resetting the position of the root Player node to (0, 0)
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.4 – 将根玩家节点的位置重置为(0, 0)
- en: 'If you go back to the main scene, as shown in *Figure 8**.3*, you’ll see that
    the `Player` node, which first had some child nodes underneath it, is replaced
    by one node called `Player`. This one node now represents everything that is within
    the **Player** scene. Visually, nothing changed in the 2D editor; the player is
    still there complete, with its **Sprite2D** and **Health** labels:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你回到主场景，如图*图8**.3*所示，你会看到原本有一些子节点位于其下的“玩家”节点被一个名为“玩家”的单个节点所取代。这个节点现在代表**玩家**场景内的所有内容。在2D编辑器中，从视觉上看没有任何变化；玩家仍然完整地存在，带有其**Sprite2D**和**Health**标签：
- en: '![Figure 8.5 – The Player node and its children are replaced with a single
    node](img/B19358_08_05.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图8.5 – 玩家节点及其子节点被替换为单个节点](img/B19358_08_05.jpg)'
- en: Figure 8.5 – The Player node and its children are replaced with a single node
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.5 – 玩家节点及其子节点被替换为单个节点
- en: 'If you run the game, nothing will change because everything has stayed the
    same. We just split off the `Player` node into its own scene file. You can check
    this by going into the **Remote** tree and confirming that the player node gets
    expanded into all its parts when the game starts to run:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运行游戏，什么都不会改变，因为一切都没有改变。我们只是将“玩家”节点拆分成了自己的场景文件。你可以通过进入**远程**树并确认当游戏开始运行时玩家节点会展开到所有部分来检查这一点：
- en: '![Figure 8.6 – The Player node expands to have all its child nodes in the Remote
    tree when running the game](img/B19358_08_06.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![图8.6 – 当运行游戏时，玩家节点扩展到在远程树中包含所有子节点](img/B19358_08_06.jpg)'
- en: Figure 8.6 – The Player node expands to have all its child nodes in the Remote
    tree when running the game
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.6 – 当运行游戏时，玩家节点扩展到在远程树中包含所有子节点
- en: 'There is also a new button available in the `Player` node. Pressing this button
    will bring us straight to the `Player` scene. This is very convenient for when
    we’ll be working with lots of different scenes and nodes later on:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在“玩家”节点中也有一个新按钮可用。按下此按钮将直接带我们到“玩家”场景。这对于我们稍后需要处理许多不同场景和节点来说非常方便：
- en: '![Figure 8.7 - The new button that will bring us directly to the Player scene](img/B19358_08_07.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图8.7 - 将我们直接带到玩家场景的新按钮](img/B19358_08_07.jpg)'
- en: Figure 8.7 - The new button that will bring us directly to the Player scene
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.7 - 将我们直接带到玩家场景的新按钮
- en: Now, the player has their own scene that we can work in without having to deal
    with everything in the whole game.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，玩家有了他们自己的场景，我们可以在其中工作，而无需处理整个游戏中的所有内容。
- en: The root node of a scene
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 场景的根节点
- en: You’ll also see that the root node of the player scene is the `CharacterBody2D`
    node called `Player`, which we chose for it in [*Chapter 7*](B19358_07.xhtml#_idTextAnchor523).
    Scenes can have any type of node as their root. You can choose this type when
    creating the scene, as we did in [*Chapter 2*](B19358_02.xhtml#_idTextAnchor044),
    or later on, by changing the node type, as we did in [*Chapter 7*](B19358_07.xhtml#_idTextAnchor523)
    for the `Player` node.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 你还会看到玩家场景的根节点是名为“Player”的`CharacterBody2D`节点，这是我们选择用于它的[第7章](B19358_07.xhtml#_idTextAnchor523)。场景可以有任意类型的节点作为其根节点。你可以在创建场景时选择此类型，就像我们在[第2章](B19358_02.xhtml#_idTextAnchor044)中做的那样，或者稍后通过更改节点类型来实现，就像我们在[第7章](B19358_07.xhtml#_idTextAnchor523)中对“玩家”节点所做的那样。
- en: Having a separate scene file allows us to create multiple instances of that
    scene within another scene. We’ll see how we can do that in the next section.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 使用单独的场景文件，我们可以在这个场景内部创建该场景的多个实例。我们将在下一节中看到如何做到这一点。
- en: Using saved scenes
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用保存的场景
- en: 'Because we will use only one player in the game, we are not going to reuse
    the player scene multiple times. However, we will want to reuse the rocks and
    walls within the arena. Follow the steps in the *Saving a branch as a new scene*
    section to separate one boulder into a new scene:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将在游戏中只使用一个玩家，所以我们不会多次重用玩家场景。然而，我们希望重用竞技场内的岩石和墙壁。按照*将分支保存为新场景*部分中的步骤，将一个巨石分离到一个新场景中：
- en: '![Figure 8.8 – The boulder.tscn scene](img/B19358_08_08.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图8.8 – boulder.tscn场景](img/B19358_08_08.jpg)'
- en: Figure 8.8 – The boulder.tscn scene
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.8 – boulder.tscn场景
- en: 'Now, let’s reuse this new scene in our arena as the default rock:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将这个新场景在我们的竞技场中作为默认岩石重用：
- en: Go back to the main scene. Remove all the rocks from the scene; we don’t need
    them anymore.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回主场景。从场景中移除所有岩石；我们不再需要它们了。
- en: Select the `Arena` node. By doing so, everything we add will be added as a child
    of this node.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`Arena`节点。通过这样做，我们添加的所有内容都将作为此节点的子节点添加。
- en: 'Now, drag and drop the boulder scene from **FileSystem** into the 2D editor.
    You will see the visual of the boulder pop up while you’re still dragging it around:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将巨石场景从**FileSystem**拖放到2D编辑器中。当你还在拖动它时，你会看到巨石的视觉效果弹出：
- en: "![Figure 8.9 – Dragging and dropping the boulder.tscn scene into the main sc\uFEFF\
    ene tree](img/B19358_08_09.jpg)"
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图8.9 – 将boulder.tscn场景拖放到主场景树中](img/B19358_08_09.jpg)'
- en: Figure 8.9 – Dragging and dropping the boulder.tscn scene into the main scene
    tree
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.9 – 将boulder.tscn场景拖放到主场景树中
- en: Now, you can do the same for the inner walls in the scene and repopulate the
    arena with rocks and walls so that it looks less barren. However, don’t do the
    same for `OuterWalls` – we aren’t going to reuse it, so this one can stay the
    same.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以对场景中的内部墙壁做同样的处理，并用岩石和墙壁重新填充竞技场，使其看起来不那么荒凉。然而，不要对`OuterWalls`做同样的事情 – 我们不会重用它，所以这个可以保持不变。
- en: When placing the boulder and wall scenes, you can use the transform parameters,
    such as rotation, scale, and skew, to give variety to the instances so that they
    don’t all look too similar.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当放置巨石和墙壁场景时，你可以使用变换参数，如旋转、缩放和倾斜，为实例添加多样性，这样它们就不会看起来太相似。
- en: The cool thing is that we can use any scene within any other scene!
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 好玩的是，我们可以在任何场景中使用任何其他场景！
- en: Having many smaller scene files has lots of upsides, with the maintainability
    of the code and easy reuse being just two of them, but it will also complexify
    the file structure of the project. Because of this, we’ll have to think about
    how we’ll organize all the files within the project. We’ll do that in the next
    section.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有许多较小的场景文件有很多优点，代码的可维护性和易于重用只是其中两个，但它也会使项目的文件结构变得复杂。因此，我们必须考虑如何组织项目中的所有文件。我们将在下一节中这样做。
- en: Organizing scene files
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组织场景文件
- en: Now that we have more files to worry about, we’ll have to start being smart
    regarding how we organize them. Let’s separate scenes into different folders that
    make sense for our project. This way, we’ll always know where to find something
    or save a new scene.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有更多文件需要关注，我们不得不开始考虑如何组织它们。让我们将场景分别放入对项目有意义的不同文件夹中。这样，我们总能知道在哪里找到某物或保存一个新场景。
- en: 'Add the following folders in the root folder of our project:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们项目的根目录中添加以下文件夹：
- en: '`parts`:'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`parts`：'
- en: '`environment`'
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`environment`'
- en: '`player`'
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`player`'
- en: '`screens`:'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`screens`：'
- en: '`game`'
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`game`'
- en: The `parts` folder will contain all the scenes that are part of a different
    scene, such as the player, walls, enemies, collectibles, UI buttons, and so forth.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`parts`文件夹将包含所有属于不同场景的场景，例如玩家、墙壁、敌人、可收集物品、UI按钮等。'
- en: '`screens`, on the other hand, will contain all scenes that can stand on their
    own, such as the game screen, full-screen menus such as the main menu or pause
    menu, and so forth. These scenes are made up of scenes from the `parts` folder.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，`screens`将包含所有可以独立存在的场景，例如游戏屏幕、全屏菜单，如主菜单或暂停菜单等。这些场景由`parts`文件夹中的场景组成。
- en: At the beginning of the project, I gave you an `assets` folder. This folder
    is used to hold all the art assets, from sprites to animations and sounds.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目开始时，我给了你一个`assets`文件夹。这个文件夹用于存放所有艺术资产，从精灵到动画和声音。
- en: 'Now, move all scenes and scripts to the appropriate folders, like so:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将所有场景和脚本移动到适当的文件夹中，如下所示：
- en: '![Figure 8.10 – Our project with better file management](img/B19358_08_10.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图8.10 – 我们的项目，文件管理更佳](img/B19358_08_10.jpg)'
- en: Figure 8.10 – Our project with better file management
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.10 – 我们的项目，文件管理更佳
- en: Once you look at other game projects made in Godot, or other game engines, you’ll
    see that everyone has their own way of organizing different files within their
    project. I like to keep scenes and scripts together within the same folder, for
    example, because most of the time, you will use and edit them very closely together.
    However, I will keep assets, such as pictures and sounds, separate because these
    are easier to reuse over different scenes.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你看过用 Godot 或其他游戏引擎制作的其它游戏项目，你会发现每个人都在他们项目中以自己的方式组织不同的文件。我喜欢将场景和脚本放在同一个文件夹中，例如，因为大多数时候，你都会非常接近地使用和编辑它们。然而，我会将资产，如图片和声音，分开，因为这些更容易在不同的场景中重复使用。
- en: Over time, you will probably develop an organizational structure for projects
    and that’s fine. Whatever makes the most sense to you is what you should use,
    so long as you are consistent.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，你可能为项目发展出一种组织结构，这是完全可以的。只要对你来说最有意义，你就应该使用它，只要你能保持一致性。
- en: Additional exercises – Sharepening the axe
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 额外练习 – 锋利斧头
- en: Using what we learned about splitting off scenes, try making a second boulder
    scene with a different shape than the first one. Call the first boulder scene
    `boulder01.tscn` and the second one `boulder02.tscn`.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用我们关于分割场景的知识，尝试制作一个与第一个不同的形状的第二块巨石场景。将第一个巨石场景命名为`boulder01.tscn`，第二个命名为`boulder02.tscn`。
- en: Summary
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: Reusing parts of your work is almost always a good idea. In this chapter, we
    learned how to reuse whole branches of the scene tree as separate scenes. This
    will come in handy in the following chapters as we are now able to work on the
    player’s camera movement separately and create collisions in all rocks and walls
    simultaneously. But that’s for the next chapter.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 重复使用你的工作部分几乎总是个好主意。在本章中，我们学习了如何将场景树中的整个分支作为单独的场景进行重复使用。这将在接下来的章节中派上用场，因为我们现在能够单独处理玩家的摄像机移动，并同时在所有岩石和墙壁上创建碰撞。但这将是下一章的内容。
- en: Quiz time
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测验时间
- en: How can you save a branch within the scene tree as a separate scene?
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你如何将场景树中的分支保存为单独的场景？
- en: Is it important to organize our scenes, scripts, and assets in the **FileSystem**
    area? Why?
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**文件系统**区域组织我们的场景、脚本和资产是否重要？为什么？
