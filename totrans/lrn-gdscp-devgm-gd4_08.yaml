- en: '8'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Splitting and Reusing Scenes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is possible to create the whole game within one Godot scene, but this can
    get quite unwieldy. Not only do we have to recreate every part over and over again,
    such as every boulder or enemy, but if we want to change something about the rocks,
    we have to go and find every rock to change them.
  prefs: []
  type: TYPE_NORMAL
- en: This is not scalable for any kind of game. Luckily, in Godot, there are such
    things as *scenes*. In [*Chapter 2*](B19358_02.xhtml#_idTextAnchor044), we saw
    how to create new scenes from scratch, but in this chapter, we will learn how
    we can create a scene for each element so that we can easily reuse it throughout
    the game. This way, we can make one scene for the rocks and use that to populate
    the arena instead of having multiple unique rocks.
  prefs: []
  type: TYPE_NORMAL
- en: Next to reusing components, it’s also way easier to work on certain parts of
    the game in isolation instead of having a big scene. Saving parts of the game
    like this will keep us focused on what we are working on.
  prefs: []
  type: TYPE_NORMAL
- en: Other game engines have very similar systems. Unity has Prefabs, Unreal Engine
    has Blueprint Classes, and so on. The great thing about Godot scenes is that they
    behave just like any other node once they are instanced in the scene tree.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Saving a branch as a new scene
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using saved scenes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Organizing scenes in a project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As for every chapter, you can find the final code in this book’s GitHub repository
    in the subfolder for this chapter: [https://github.com/PacktPublishing/Learning-GDScript-by-Developing-a-Game-with-Godot-4/tree/main/chapter08](https://github.com/PacktPublishing/Learning-GDScript-by-Developing-a-Game-with-Godot-4/tree/main/chapter08).'
  prefs: []
  type: TYPE_NORMAL
- en: Saving a branch as a new scene
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the *Creating new scenes* section of [*Chapter 2*](B19358_02.xhtml#_idTextAnchor044),
    we learned how to create new scenes for different code experiments. This process
    can be followed to create any scene at all. But another way to do this is to save
    part of an existing scene tree. We’ll be splitting a branch of the scene tree
    into its separate sub-scene that we can reuse anywhere.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a separate player scene
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s save the `Player` node as a separate scene so that we can work on it
    in isolation. Go to our `Main` scene and follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `Player` node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the pop-up menu, select **Save Branch** **as Scene**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.1 – Selecting Save Branch as Scene to save the node as a separate
    scene](img/B19358_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.1 – Selecting Save Branch as Scene to save the node as a separate scene
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we have to select a location and name for the new scene. Leaving everything
    as-is should do the trick:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.2 – Saving the scene under an appropriate name](img/B19358_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.2 – Saving the scene under an appropriate name
  prefs: []
  type: TYPE_NORMAL
- en: 'The new scene will now open and only contain the `Player` node and its child:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.3 – The player.tscn scene, which only contains the Player node and
    its children](img/B19358_08_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.3 – The player.tscn scene, which only contains the Player node and
    its children
  prefs: []
  type: TYPE_NORMAL
- en: 'Reset the `Player` node’s position so that it is positioned at `(0, 0)` within
    the scene:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.4 – Resetting the position of the root Player node to (0, 0)](img/B19358_08_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.4 – Resetting the position of the root Player node to (0, 0)
  prefs: []
  type: TYPE_NORMAL
- en: 'If you go back to the main scene, as shown in *Figure 8**.3*, you’ll see that
    the `Player` node, which first had some child nodes underneath it, is replaced
    by one node called `Player`. This one node now represents everything that is within
    the **Player** scene. Visually, nothing changed in the 2D editor; the player is
    still there complete, with its **Sprite2D** and **Health** labels:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.5 – The Player node and its children are replaced with a single
    node](img/B19358_08_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.5 – The Player node and its children are replaced with a single node
  prefs: []
  type: TYPE_NORMAL
- en: 'If you run the game, nothing will change because everything has stayed the
    same. We just split off the `Player` node into its own scene file. You can check
    this by going into the **Remote** tree and confirming that the player node gets
    expanded into all its parts when the game starts to run:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.6 – The Player node expands to have all its child nodes in the Remote
    tree when running the game](img/B19358_08_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.6 – The Player node expands to have all its child nodes in the Remote
    tree when running the game
  prefs: []
  type: TYPE_NORMAL
- en: 'There is also a new button available in the `Player` node. Pressing this button
    will bring us straight to the `Player` scene. This is very convenient for when
    we’ll be working with lots of different scenes and nodes later on:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.7 - The new button that will bring us directly to the Player scene](img/B19358_08_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.7 - The new button that will bring us directly to the Player scene
  prefs: []
  type: TYPE_NORMAL
- en: Now, the player has their own scene that we can work in without having to deal
    with everything in the whole game.
  prefs: []
  type: TYPE_NORMAL
- en: The root node of a scene
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You’ll also see that the root node of the player scene is the `CharacterBody2D`
    node called `Player`, which we chose for it in [*Chapter 7*](B19358_07.xhtml#_idTextAnchor523).
    Scenes can have any type of node as their root. You can choose this type when
    creating the scene, as we did in [*Chapter 2*](B19358_02.xhtml#_idTextAnchor044),
    or later on, by changing the node type, as we did in [*Chapter 7*](B19358_07.xhtml#_idTextAnchor523)
    for the `Player` node.
  prefs: []
  type: TYPE_NORMAL
- en: Having a separate scene file allows us to create multiple instances of that
    scene within another scene. We’ll see how we can do that in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Using saved scenes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Because we will use only one player in the game, we are not going to reuse
    the player scene multiple times. However, we will want to reuse the rocks and
    walls within the arena. Follow the steps in the *Saving a branch as a new scene*
    section to separate one boulder into a new scene:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.8 – The boulder.tscn scene](img/B19358_08_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.8 – The boulder.tscn scene
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s reuse this new scene in our arena as the default rock:'
  prefs: []
  type: TYPE_NORMAL
- en: Go back to the main scene. Remove all the rocks from the scene; we don’t need
    them anymore.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `Arena` node. By doing so, everything we add will be added as a child
    of this node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, drag and drop the boulder scene from **FileSystem** into the 2D editor.
    You will see the visual of the boulder pop up while you’re still dragging it around:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 8.9 – Dragging and dropping the boulder.tscn scene into the main sc\uFEFF\
    ene tree](img/B19358_08_09.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 8.9 – Dragging and dropping the boulder.tscn scene into the main scene
    tree
  prefs: []
  type: TYPE_NORMAL
- en: Now, you can do the same for the inner walls in the scene and repopulate the
    arena with rocks and walls so that it looks less barren. However, don’t do the
    same for `OuterWalls` – we aren’t going to reuse it, so this one can stay the
    same.
  prefs: []
  type: TYPE_NORMAL
- en: When placing the boulder and wall scenes, you can use the transform parameters,
    such as rotation, scale, and skew, to give variety to the instances so that they
    don’t all look too similar.
  prefs: []
  type: TYPE_NORMAL
- en: The cool thing is that we can use any scene within any other scene!
  prefs: []
  type: TYPE_NORMAL
- en: Having many smaller scene files has lots of upsides, with the maintainability
    of the code and easy reuse being just two of them, but it will also complexify
    the file structure of the project. Because of this, we’ll have to think about
    how we’ll organize all the files within the project. We’ll do that in the next
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Organizing scene files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have more files to worry about, we’ll have to start being smart
    regarding how we organize them. Let’s separate scenes into different folders that
    make sense for our project. This way, we’ll always know where to find something
    or save a new scene.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following folders in the root folder of our project:'
  prefs: []
  type: TYPE_NORMAL
- en: '`parts`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`environment`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`player`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`screens`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`game`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `parts` folder will contain all the scenes that are part of a different
    scene, such as the player, walls, enemies, collectibles, UI buttons, and so forth.
  prefs: []
  type: TYPE_NORMAL
- en: '`screens`, on the other hand, will contain all scenes that can stand on their
    own, such as the game screen, full-screen menus such as the main menu or pause
    menu, and so forth. These scenes are made up of scenes from the `parts` folder.'
  prefs: []
  type: TYPE_NORMAL
- en: At the beginning of the project, I gave you an `assets` folder. This folder
    is used to hold all the art assets, from sprites to animations and sounds.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, move all scenes and scripts to the appropriate folders, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.10 – Our project with better file management](img/B19358_08_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.10 – Our project with better file management
  prefs: []
  type: TYPE_NORMAL
- en: Once you look at other game projects made in Godot, or other game engines, you’ll
    see that everyone has their own way of organizing different files within their
    project. I like to keep scenes and scripts together within the same folder, for
    example, because most of the time, you will use and edit them very closely together.
    However, I will keep assets, such as pictures and sounds, separate because these
    are easier to reuse over different scenes.
  prefs: []
  type: TYPE_NORMAL
- en: Over time, you will probably develop an organizational structure for projects
    and that’s fine. Whatever makes the most sense to you is what you should use,
    so long as you are consistent.
  prefs: []
  type: TYPE_NORMAL
- en: Additional exercises – Sharepening the axe
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using what we learned about splitting off scenes, try making a second boulder
    scene with a different shape than the first one. Call the first boulder scene
    `boulder01.tscn` and the second one `boulder02.tscn`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Reusing parts of your work is almost always a good idea. In this chapter, we
    learned how to reuse whole branches of the scene tree as separate scenes. This
    will come in handy in the following chapters as we are now able to work on the
    player’s camera movement separately and create collisions in all rocks and walls
    simultaneously. But that’s for the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Quiz time
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How can you save a branch within the scene tree as a separate scene?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is it important to organize our scenes, scripts, and assets in the **FileSystem**
    area? Why?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
