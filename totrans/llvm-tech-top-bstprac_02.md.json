["```cpp\n    $ git clone https://github.com/llvm/llvm-project\n    ```", "```cpp\n    $ git clone -b release/10.x https://github.com/llvm/llvm-project\n    ```", "```cpp\n    $ mkdir .my_build\n    $ cd .my_build\n    ```", "```cpp\n$ cmake ../llvm\n$ make all\n```", "```cpp\n    $ sudo apt install ninja-build\n    ```", "```cpp\n    $ cmake -G \"Ninja\" ../llvm\n    ```", "```cpp\n    $ ninja all\n    ```", "```cpp\n$ ninja -j8 all\n```", "```cpp\n$ cmake -G \"Ninja\" -DLLVM_USE_LINKER=gold ../llvm\n```", "```cpp\n$ cmake -G \"Ninja\" -DLLVM_USE_LINKER=lld ../llvm\n```", "```cpp\n$ cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo …\n```", "```cpp\n$ cmake -DLLVM_TARGETS_TO_BUILD=\"X86\" …\n```", "```cpp\n$ cmake -DLLVM_TARGETS_TO_BUILD=\"X86;AArch64;AMDGPU\" …\n```", "```cpp\n$ cmake -DBUILD_SHARED_LIBS=ON …\n```", "```cpp\n$ cmake -DcmAKE_BUILD_TYPE=Debug -DLLVM_USE_SPLIT_DWARF=ON …\n```", "```cpp\n$ cmake -DLLVM_OPTIMIZED_TABLEGEN=ON -DCMAKE_BUILD_TYPE=Debug …\n```", "```cpp\n$ env CC=`which clang` CXX=`which clang++` \\\n  cmake -DLLVM_USE_NEWPM=ON …\n```", "```cpp\n    get.py, simply put your version into the system's PATH. If you are wondering what other GN versions are available, you might want to check out the instructions for installing depot_tools at https://dev.chromium.org/developers/how-tos/install-depot-tools.\n    ```", "```cpp\n    out/x64.release is the name of the build folder. Usually, GN users will name the build folder in <architecture>.<build type>.<other features> format.\n    ```", "```cpp\n    $ cd out/x64.release\n    $ ninja <build target>\n    ```", "```cpp\n    $ ninja -C out/x64.release <build target>\n    ```", "```cpp\n$ ./gn.py args out/x64.release\n```", "```cpp\n# Inside args.gn\nis_debug = true\nllvm_targets_to_build = [\"X86\", \"AArch64\"]\n```", "```cpp\n$ ./gn.py args --list out/x64.release\n```"]