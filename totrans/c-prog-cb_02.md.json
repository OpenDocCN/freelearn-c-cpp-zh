["```cpp\n#define max 100\n```", "```cpp\nint p[max]\n```", "```cpp\nprintf(\"Enter length of array:\");\nscanf(\"%d\",&n);\n```", "```cpp\nfor(i=0;i<=n-1;i++ )\n    scanf(\"%d\",&p[i]);\n```", "```cpp\nprintf(\"\\nEnter position where to insert:\");\nscanf(\"%d\",&k);\n```", "```cpp\nk--;\n```", "```cpp\nfor(j=n-1;j>=k;j--)\n    p[j+1]=p[j];\n```", "```cpp\nprintf(\"\\nEnter the value to insert:\");\nscanf(\"%d\",&p[k]);\n```", "```cpp\n#include<stdio.h>\n#define max 100\nvoid main()\n{\n    int p[max], n,i,k,j;\n    printf(\"Enter length of array:\");\n    scanf(\"%d\",&n);\n    printf(\"Enter %d elements of array\\n\",n);\n    for(i=0;i<=n-1;i++ )\n        scanf(\"%d\",&p[i]);\n    printf(\"\\nThe array is:\\n\");\n    for(i = 0;i<=n-1;i++)\n        printf(\"%d\\n\",p[i]);\n    printf(\"\\nEnter position where to insert:\");\n    scanf(\"%d\",&k);\n    k--;/*The position is always one value higher than the subscript, so it is decremented by one*/             \n    for(j=n-1;j>=k;j--)\n        p[j+1]=p[j];\n    /* Shifting all the elements of the array one position down from the location of insertion */\n    printf(\"\\nEnter the value to insert:\");\n    scanf(\"%d\",&p[k]);\n    printf(\"\\nArray after insertion of element: \\n\");\n    for(i=0;i<=n;i++)\n        printf(\"%d\\n\",p[i]);\n}\n\n```", "```cpp\nD:\\CBook>gcc insertintoarray.c -o insertintoarray\n```", "```cpp\nD:\\CBook>./insertintoarray\nEnter length of array:5\nEnter 5 elements of array\n10\n20\n30\n40\n50\n\nThe array is:\n10\n20\n30\n40\n50\n\nEnter target position to insert:3\nEnter the value to insert:99\nArray after insertion of element:\n10\n20\n99\n30\n40\n50\n```", "```cpp\n#include<stdio.h>\nvoid main()\n{\n    int p[100],i,n,a;\n    printf(\"Enter the length of the array: \");\n    scanf(\"%d\",&n);\n    printf(\"Enter %d elements of the array \\n\",n);\n    for(i=0;i<=n-1;i++)\n        scanf(\"%d\",&p[i]);\n    printf(\"\\nThe array is:\\n\");\\\n    for(i=0;i<=n-1;i++)\n        printf(\"%d\\n\",p[i]);\n    printf(\"Enter the position/location to delete: \");\n    scanf(\"%d\",&a);\n    a--;\n    for(i=a;i<=n-2;i++)\n    {\n        p[i]=p[i+1];\n        /* All values from the bottom of the array are shifted up till \n        the location of the element to be deleted */\n    }\n    p[n-1]=0;\n    /* The vacant position created at the bottom of the array is set to \n    0 */\n    printf(\"Array after deleting the element is\\n\");\n    for(i=0;i<= n-2;i++)\n        printf(\"%d\\n\",p[i]);\n}\n```", "```cpp\n#include  <stdio.h>\nint main()\n{\n  int matA[2][3], matB[3][4], matR[2][4];\n  int i,j,k;\n  printf(\"Enter elements of the first matrix of order 2 x 3 \\n\");\n  for(i=0;i<2;i++)\n  {\n    for(j=0;j<3;j++)\n    {\n      scanf(\"%d\",&matA[i][j]);\n    }\n  }\n  printf(\"Enter elements of the second matrix of order 3 x 4 \\n\");\n  for(i=0;i<3;i++)\n  {\n    for(j=0;j<4;j++)\n    {\n      scanf(\"%d\",&matB[i][j]);\n    }\n  }\n  for(i=0;i<2;i++)\n  {\n    for(j=0;j<4;j++)\n    {\n      matR[i][j]=0;\n      for(k=0;k<3;k++)\n      {\n        matR[i][j]=matR[i][j]+matA[i][k]*matB[k][j];\n      }\n    }\n  }\n  printf(\"\\nFirst Matrix is \\n\");\n  for(i=0;i<2;i++)\n  {\n    for(j=0;j<3;j++)\n    {\n      printf(\"%d\\t\",matA[i][j]);\n    }\n    printf(\"\\n\");\n  }\n  printf(\"\\nSecond Matrix is \\n\");\n  for(i=0;i<3;i++)\n  {\n    for(j=0;j<4;j++)\n    {\n      printf(\"%d\\t\",matB[i][j]);\n    }\n    printf(\"\\n\");\n  }\n  printf(\"\\nMatrix multiplication is \\n\");\n  for(i=0;i<2;i++)\n  {\n    for(j=0;j<4;j++)\n    {\n      printf(\"%d\\t\",matR[i][j]);\n    }\n    printf(\"\\n\");\n  }\n  return 0;\n}\n```", "```cpp\nint matA[2][3], matB[3][4]\n```", "```cpp\n  for(i=0;i<2;i++)\n  {\n    for(j=0;j<4;j++)\n    {\n      matR[i][j]=0;\n      for(k=0;k<3;k++)\n      {\n        matR[i][j]=matR[i][j]+matA[i][k]*matB[k][j];\n      }\n    }\n  }\n```", "```cpp\n      matR[i][j]=0;\n```", "```cpp\nmatR[i][j]=matR[i][j]+matA[i][k]*matB[k][j];\n```", "```cpp\nD:\\CBook>gcc matrixmulti.c -o matrixmulti\n```", "```cpp\nD:\\CBook\\Chapters\\1Arrays>./matrixmulti\n\nEnter elements of the first matrix of order 2 x 3\n3\n9\n7\n1\n5\n4\n\nEnter elements of the second matrix of order 3 x 4\n6 2 8 1\n3 9 4 0\n5 3 1 3\n\nFirst Matrix is\n3 9 7 \n1 5 4\n\nSecond Matrix is\n6 2 8 1\n3 9 4 0\n5 3 1 3\n\nMatrix multiplication is\n80 108 67 24\n41 59 32 13\n```", "```cpp\n3\n9\n7\n1\n5\n4\n```", "```cpp\n6 2 8 1\n3 9 4 0\n5 3 1 3\n```", "```cpp\n#include<stdio.h>\n#define max 100\n\nint ifexists(int z[], int u, int v)\n{\n    int i;\n    if (u==0) return 0;\n    for (i=0; i<=u;i++)\n        if (z[i]==v) return (1);\n    return (0);\n}\nvoid main()\n{\n    int p[max], q[max], r[max];\n    int m,n;\n    int i,j,k;\n    k=0;\n    printf(\"Enter the length of the first array:\");\n    scanf(\"%d\",&m);\n    printf(\"Enter %d elements of the first array\\n\",m);\n    for(i=0;i<m;i++ )\n        scanf(\"%d\",&p[i]);\n    printf(\"\\nEnter the length of the second array:\");\n    scanf(\"%d\",&n);\n    printf(\"Enter %d elements of the second array\\n\",n);\n    for(i=0;i<n;i++ )\n        scanf(\"%d\",&q[i]);\n    k=0;\n    for (i=0;i<m;i++)\n    {\n        for (j=0;j<n;j++)\n        {\n           if (p[i]==q[j])\n           {\n               if(!ifexists(r,k,p[i]))\n               {\n                   r[k]=p[i];\n                   k++;\n               }\n            }\n        }\n    }\n    if(k>0)\n    {\n        printf(\"\\nThe common elements in the two arrays are:\\n\");\n        for(i = 0;i<k;i++)\n            printf(\"%d\\n\",r[i]);\n    }\n    else\n        printf(\"There are no common elements in the two arrays\\n\");\n}\n```", "```cpp\nD:\\CBook>gcc commoninarray.c -o commoninarray\n```", "```cpp\nD:\\CBook>./commoninarray\nEnter the length of the first array:5\nEnter 5 elements in the first array\n1\n2\n3\n4\n5\n\nEnter the length of the second array:4\nEnter 4 elements in the second array\n7\n8\n9\n0\n\nThere are no common elements in the two arrays\n```", "```cpp\nD:\\CBook>./commoninarray\nEnter the length of the first array:4\nEnter 4 elements in the first array\n1\n2\n3\n4\n\nEnter the length of the second array:4\nEnter 4 elements in the second array\n1\n4\n1\n2\n\nThe common elements in the two arrays are:\n1\n2\n4\n```", "```cpp\n#include<stdio.h>\n#define max 100\n\nint ifexists(int z[], int u, int v)\n{\n    int i;\n    if (u==0) return 0;\n    for (i=0; i<=u;i++)\n        if (z[i]==v) return (1);\n    return (0);\n}\n\nvoid main()\n{\n    int p[max], q[max], r[max];\n    int m,n;\n    int i,j,k;\n    printf(\"Enter length of first array:\");\n    scanf(\"%d\",&m);\n    printf(\"Enter %d elements of first array\\n\",m);\n    for(i=0;i<m;i++ )\n        scanf(\"%d\",&p[i]);\n    printf(\"\\nEnter length of second array:\");\n    scanf(\"%d\",&n);\n    printf(\"Enter %d elements of second array\\n\",n);\n    for(i=0;i<n;i++ )                                                                                    scanf(\"%d\",&q[i]);\n    k=0;\n    for (i=0;i<m;i++)               \n    {                                \n        for (j=0;j<n;j++)                                \n        {\n            if (p[i]==q[j])\n            {                                                                                                                                    break;                                                   \n            }\n        }\n        if(j==n)\n        {\n            if(!ifexists(r,k,p[i]))                                               \n            {\n                r[k]=p[i];\n                k++;\n            }\n        }\n    }\n    printf(\"\\nThe difference of the two array is:\\n\");\n    for(i = 0;i<k;i++)\n        printf(\"%d\\n\",r[i]);\n}\n```", "```cpp\nD:\\CBook>gcc differencearray.c -o differencearray\n```", "```cpp\nD:\\CBook>./differencearray\nEnter length of first array:4\nEnter 4 elements of first array\n1\n2\n3\n4\nEnter length of second array:4\nEnter 4 elements of second array\n2\n4\n5\n6\nThe difference of the two array is:\n1\n3\n```", "```cpp\n#include<stdio.h>\n#define max 100\n\nint ifexists(int z[], int u, int v)\n{\n    int i;\n    for (i=0; i<u;i++)\n        if (z[i]==v) return (1);\n    return (0);\n}\n\nvoid main()\n{\n    int p[max], q[max];\n    int m;\n    int i,k;\n    k=0;\n    printf(\"Enter length of the array:\");\n    scanf(\"%d\",&m);\n    printf(\"Enter %d elements of the array\\n\",m);\n    for(i=0;i<m;i++ )\n        scanf(\"%d\",&p[i]);\n    q[0]=p[0];\n    k=1;\n    for (i=1;i<m;i++)\n    {\n        if(!ifexists(q,k,p[i]))\n        {\n            q[k]=p[i];\n            k++;\n        }\n    }\n    printf(\"\\nThe unique elements in the array are:\\n\");\n    for(i = 0;i<k;i++)\n        printf(\"%d\\n\",q[i]);\n}\n```", "```cpp\nq[0]=p[0]\n```", "```cpp\nD:\\CBook>gcc uniqueelements.c -o uniqueelements\n```", "```cpp\nD:\\CBook>./uniqueelements\nEnter the length of the array:5\nEnter 5 elements in the array\n1\n2\n3\n2\n1\n\nThe unique elements in the array are:\n1\n2\n3\n```", "```cpp\nThe given matrix is a sparse matrix\n```", "```cpp\nThe given matrix is not a sparse matrix\n```", "```cpp\n#include <stdio.h>\n#define max 100\n\n/*A sparse matrix has more zero elements than nonzero elements */\nvoid main ()\n{\n    static int arr[max][max];\n    int i,j,r,c;\n    int ctr=0;\n    printf(\"How many rows and columns are in this matrix? \");\n    scanf(\"%d %d\", &r, &c);\n    printf(\"Enter the elements in the matrix :\\n\");\n    for(i=0;i<r;i++)\n    {\n        for(j=0;j<c;j++)\n        {\n            scanf(\"%d\",&arr[i][j]);\n            if (arr[i][j]==0)\n                ++ctr;\n        }\n    }\n    if (ctr>((r*c)/2))\n        printf (\"The given matrix is a sparse matrix. \\n\");\n    else\n        printf (\"The given matrix is not a sparse matrix.\\n\");\n    printf (\"There are %d number of zeros in the matrix.\\n\",ctr);\n}\n```", "```cpp\nThe given matrix is a sparse matrix\n```", "```cpp\nThe given matrix is not a sparse matrix\n```", "```cpp\nD:\\CBook>gcc sparsematrix.c -o sparsematrix\n```", "```cpp\nD:\\CBook>./sparsematrix\nHow many rows and columns are in this matrix? 4 4\nEnter the elements in the matrix :\n0 1 0 0\n5 0 0 9\n0 0 3 0\n2 0 4 0\nThe given matrix is a sparse matrix.\nThere are 10 zeros in the matrix.\n```", "```cpp\nD:\\CBook>./sparsematrix\nHow many rows and columns are in this matrix? 4 4\nEnter the elements in the matrix:\n1 0 3 4\n0 0 2 9\n8 6 5 1\n0 7 0 4\nThe given matrix is not a sparse matrix.\nThere are 5 zeros in the matrix.\n```", "```cpp\n    #include <stdio.h>\n#define max 100\n/* All the elements of the principal diagonal of the  Identity matrix  are ones and rest all are zero elements  */\nvoid main ()\n{\n    static int arr[max][max];\n    int i,j,r,c, bool;\n    printf(\"How many rows and columns are in this matrix ? \");\n    scanf(\"%d %d\", &r, &c);\n    if (r !=c)\n    {\n        printf(\"An identity matrix is a square matrix\\n\");\n        printf(\"Because this matrix is not a square matrix, so it is not an \n           identity matrix\\n\");\n    }\n    else\n    {\n        printf(\"Enter elements in the matrix :\\n\");\n        for(i=0;i<r;i++)\n        {\n            for(j=0;j<c;j++)\n            {\n                scanf(\"%d\",&arr[i][j]);\n            }\n        }\n        printf(\"\\nThe entered matrix is \\n\");\n        for(i=0;i<r;i++)\n        {\n            for(j=0;j<c;j++)\n            {\n                printf(\"%d\\t\",arr[i][j]);\n            }\n            printf(\"\\n\");\n        }\n        bool=1;\n        for(i=0;i<r;i++)\n        {\n            for(j=0;j<c;j++)\n            {\n                if(i==j)\n                {\n                    if(arr[i][j] !=1)\n                    {\n                        bool=0;\n                        break;\n                    }\n                }\n                else\n                {\n                    if(arr[i][j] !=0)\n                    {\n                        bool=0;\n                        break;\n                    }\n                }\n            }\n        }\n        if(bool)\n            printf(\"\\nMatrix is an identity matrix\\n\");                             \n        else \n            printf(\"\\nMatrix is not an identity matrix\\n\");                \n    }\n}\n```", "```cpp\nD:\\CBook>gcc identitymatrix.c -o identitymatrix\n```", "```cpp\nD:\\CBook>./identitymatrix\nHow many rows and columns are in this matrix ? 3 4\nAn identity matrix is a square matrix \nBecause this matrix is not a square matrix, so it is not an identity matrix\n```", "```cpp\nD:\\CBook>./identitymatrix \nHow many rows and columns are in this matrix ? 3 3 \nEnter elements in the matrix : \n1 0 1 \n1 1 0 \n0 0 1 \n\nThe entered matrix is \n1       0       1 \n1       1       0 \n0       0       1 \n\nMatrix is not an identity matrix\n```", "```cpp\nD:\\CBook>./identitymatrix \nHow many rows and columns are in this matrix ? 3 3\nEnter elements in the matrix :\n1 0 0\n0 1 0\n0 0 1\nThe entered matrix is\n1       0       0\n0       1       0\n0       0       1\nMatrix is an identity matrix\n```", "```cpp\nr[k]=p[i];\ni++;\nk++\n```", "```cpp\nr[k]=q[j];\ni++;\nk++\n```", "```cpp\nr[k]=p[i];\ni++;\nk++\nr[k]=q[j];\ni++;\nk++\n```", "```cpp\n#include<stdio.h>\n#define max 100\n\nvoid main()\n{\n    int p[max], q[max], r[max];\n    int m,n;\n    int i,j,k;\n    printf(\"Enter length of first array:\");\n    scanf(\"%d\",&m);\n    printf(\"Enter %d elements of the first array in sorted order     \n    \\n\",m);\n    for(i=0;i<m;i++)\n        scanf(\"%d\",&p[i]);\n    printf(\"\\nEnter length of second array:\");\n    scanf(\"%d\",&n);\n    printf(\"Enter %d elements of the second array in sorted \n    order\\n\",n);\n    for(i=0;i<n;i++ )\n        scanf(\"%d\",&q[i]);\n    i=j=k=0;\n    while ((i<m) && (j <n))\n    {\n        if(p[i] < q[j])\n        {\n            r[k]=p[i];\n            i++;\n            k++;\n        }\n        else\n        {\n            if(q[j]< p[i])\n            {\n                r[k]=q[j];\n                k++;\n                j++;\n            }\n            else\n            {\n                r[k]=p[i];\n                k++;\n                i++;\n                r[k]=q[j];\n                k++;\n                j++;\n            }\n        }\n    }\n    while(i<m)\n    {\n        r[k]=p[i];\n        k++;\n        i++;\n    }\n    while(j<n)\n    {\n        r[k]=q[j];\n        k++;\n        j++;\n    }\n    printf(\"\\nThe combined sorted array is:\\n\");\n    for(i = 0;i<k;i++)\n        printf(\"%d\\n\",r[i]);\n}\n```", "```cpp\nD:\\CBook>gcc mergetwosortedarrays.c -o mergetwosortedarrays\n```", "```cpp\nD:\\CBook>./mergetwosortedarrays\nEnter length of first array:4\nEnter 4 elements of the first array in sorted order\n4\n18\n56\n99\n\nEnter length of second array:5\nEnter 5 elements of the second array in sorted order\n1\n9\n80\n200\n220\n\nThe combined sorted array is:\n1\n4\n9\n18\n56\n80\n99\n200\n220\n```"]