- en: Chapter 10. Interacting with the User
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 10 章。与用户交互
- en: 'In this chapter we will learn how to receive and respond to input from the
    user. The following recipes will be covered in the chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将学习如何接收和响应用户的输入。本章将涵盖以下菜谱：
- en: Creating an interactive object that responds to the mouse
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个对鼠标做出响应的交互式对象
- en: Adding mouse events to our interactive object
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将鼠标事件添加到我们的交互式对象中
- en: Creating a slider
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个滑块
- en: Creating a responsive text box
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个响应式文本框
- en: Dragging, scaling, and rotating objects using multi-touch
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用多点触控拖动、缩放和旋转对象
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In this chapter we will create graphical objects that react to the user using
    both mouse and touch interaction. We will learn how to create simple graphical
    interfaces that have their own events for greater flexibility.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将创建图形对象，它们通过鼠标和触摸交互来响应用户。我们将学习如何创建具有自己事件的简单图形界面，以获得更大的灵活性。
- en: Creating an interactive object that responds to the mouse
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个对鼠标做出响应的交互式对象
- en: 'In this recipe, we will create an `InteractiveObject` class for making graphical
    objects that interact with the mouse cursor and executes the following actions:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将创建一个 `InteractiveObject` 类，用于制作与鼠标光标交互的图形对象，并执行以下操作：
- en: '| Action | Description |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| 动作 | 描述 |'
- en: '| --- | --- |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Pressed | The user pressed the mouse button while over the object. |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| 按下 | 用户在对象上按下鼠标按钮。 |'
- en: '| Pressed outside | The user pressed the mouse button while outside the object.
    |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| 在对象外按下 | 用户在对象外按下鼠标按钮。 |'
- en: '| Released | The mouse button is released after being pressed over the object
    and is still over the object. |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| 释放 | 在对象上按下鼠标按钮后释放，鼠标仍在对象上。 |'
- en: '| Released outside | The mouse button is released outside the object. |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| 在对象外释放 | 鼠标按钮在对象外被释放。 |'
- en: '| Rolled over | The cursor moves over the object. |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| 悬停 | 光标移至对象上。 |'
- en: '| Rolled out | The cursor moves out of the object. |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| 移出 | 光标移出对象。 |'
- en: '| Dragged | The cursor is dragged while being over the object and after having
    pressed the object. |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| 拖动 | 光标在对象上被拖动，并且在按下对象之后。 |'
- en: For each of the previous actions, a virtual method will be called, and it would
    change the color of the object been drawn.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 对于之前的每个操作，都会调用一个虚拟方法，这将改变绘制对象的颜色。
- en: This object can be used as a base class to create interactive objects with more
    interesting graphics, such as textures.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 此对象可以用作基类，以创建具有更有趣图形的交互式对象，例如纹理。
- en: Getting ready
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Create and add the following files to your project:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下文件创建并添加到您的项目中：
- en: '`InteractiveObject.h`'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`InteractiveObject.h`'
- en: '`InteractiveObject.cpp`'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`InteractiveObject.cpp`'
- en: 'In the source file with your application class, include the `InteractiveObject.h`
    file and add the following `using` statements:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在包含您的应用程序类的源文件中，包含 `InteractiveObject.h` 文件并添加以下 `using` 语句：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How to do it…
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: We will create an `InteractiveObject` class and make it responsive to mouse
    events.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个 `InteractiveObject` 类，并使其对鼠标事件做出响应。
- en: 'Move to the file `InteractiveObject.h` and add the `#pragma once` directive
    and include the following files:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移动到文件 `InteractiveObject.h` 并添加 `#pragma once` 指令以及包含以下文件：
- en: '[PRE1]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Declare the class `InteractiveObject`:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明 `InteractiveObject` 类：
- en: '[PRE2]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Move on to the `InteractiveObject.cpp` file, and let''s begin by including
    the `InteractiveObject.h` file and adding the following `using` statements:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续到 `InteractiveObject.cpp` 文件，让我们首先包含 `InteractiveObject.h` 文件并添加以下 `using`
    语句：
- en: '[PRE3]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Let's begin by implementing `constructor` and `destructor`.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从实现 `构造函数` 和 `析构函数` 开始。
- en: '[PRE4]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In the `InteractiveObject::draw` method we will draw the rectangle using the
    appropriate colors:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `InteractiveObject::draw` 方法中，我们将使用适当的颜色绘制矩形：
- en: '[PRE5]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In the `pressed`, `released`, `rolledOver`, `rolledOut`, and `dragged` methods
    we will simply output to the console on which the action just happened:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `pressed`、`released`、`rolledOver`、`rolledOut` 和 `dragged` 方法中，我们将简单地向控制台输出刚刚发生的动作：
- en: '[PRE6]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the mouse event handlers we will check if the cursor is inside the object
    and update the `mPressed` and `mOver` variables accordingly. Every time the action
    is detected, we will also call the correspondent method.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在鼠标事件处理程序中，我们将检查光标是否在对象内，并相应地更新 `mPressed` 和 `mOver` 变量。每次检测到动作时，我们也会调用相应的函数。
- en: '[PRE7]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: With our `InteractiveObject` class ready, let's move to our application's class
    source file. Let's begin by declaring an `InteractiveObject` object.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的 `InteractiveObject` 类准备好之后，让我们转向应用程序的类源文件。让我们首先声明一个 `InteractiveObject`
    对象。
- en: '[PRE8]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In the `setup` method we will initialize `mObject`.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `setup` 方法中，我们将初始化 `mObject`。
- en: '[PRE9]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We will need to declare the mouse event handlers.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要声明鼠标事件处理程序。
- en: '[PRE10]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In the implementation of the previous methods we will simply call the corresponding
    method of `mObject`.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在前面方法的实现中，我们将简单地调用 `mObject` 的相应方法。
- en: '[PRE11]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the implementation of the `draw` method, we will clear the background with
    black and call the `draw` method of `mObject`.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `draw` 方法的实现中，我们将用黑色清除背景并调用 `mObject` 的 `draw` 方法。
- en: '[PRE12]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now build and run the application. Use the mouse to interact with the object.
    Whenever you press, release, or roll over or out of the object, a message will
    be sent to the console indicating the behavior.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在构建并运行应用程序。使用鼠标与对象进行交互。无论何时按下、释放、悬停或移出对象，都会向控制台发送一条消息，指示行为。
- en: How it works…
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The `InteractiveObject` class is to be used as a base class for interactive
    objects. The methods `pressed`, `released`, `rolledOver`, `rolledOut`, and `dragged`
    are specifically designed to be overridden.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`InteractiveObject` 类应作为交互对象的基类使用。`pressed`、`released`、`rolledOver`、`rolledOut`
    和 `dragged` 方法是专门设计为可重写的。'
- en: The mouse handlers of `InteractiveObject` call the previous methods whenever
    an action is detected. By overriding the methods, it is possible to implement
    specific behavior.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`InteractiveObject` 的鼠标处理程序在检测到动作时调用前面的方法。通过重写这些方法，可以实现特定的行为。'
- en: The virtual `destructor` is declared so that extending classes can have their
    own `destructor`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟析构函数被声明，以便扩展类可以有自己的析构函数。
- en: Adding mouse events to our interactive object
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将鼠标事件添加到我们的交互对象中
- en: In this recipe, we will continue with the previous recipe, *Creating an interactive
    object that responds to the mouse* and add the mouse events to our `InteractiveObject`
    class so that other objects can register and receive notifications whenever a
    mouse event occurs.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将继续使用之前的菜谱，*创建一个响应鼠标的交互对象*，并将鼠标事件添加到我们的 `InteractiveObject` 类中，以便其他对象可以注册并在鼠标事件发生时接收通知。
- en: Getting ready
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Grab the code from the recipe *Creating an interactive object that responds
    to the mouse* and add it to your project, as we will continue on from what was
    made earlier.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 从菜谱 *创建一个响应鼠标的交互对象* 中获取代码并将其添加到你的项目中，因为我们将继续使用之前创建的内容。
- en: How to do it…
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: We will make our `InteractiveObject` class and send its own events whenever
    it interacts with the cursor.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使 `InteractiveObject` 类在与其光标交互时发送自己的事件。
- en: 'Let''s create a class to use as an argument when sending events. Add the following
    code in the file `InteractiveObject.h` right before the `InteractiveObject` class
    declaration:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一个类，用作发送事件时的参数。在 `InteractiveObject.h` 文件中 `InteractiveObject` 类声明之前添加以下代码：
- en: '[PRE13]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In the `InteractiveObject` class, we will need to declare a member to manage
    the registered objects using the `ci::CallbakcMgr` class. Declare the following
    code as a protected member:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `InteractiveObject` 类中，我们需要声明一个成员，使用 `ci::CallbakcMgr` 类来管理已注册的对象。将以下代码声明为受保护的成员：
- en: '[PRE14]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now we will need to add a method so that other objects can register to receive
    events. Since the method will use a template, we will declare and implement it
    in the `InteraciveObject.h` file. Add the following member method:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要添加一个方法，以便其他对象可以注册以接收事件。由于该方法将使用模板，我们将在 `InteraciveObject.h` 文件中声明和实现它。添加以下成员方法：
- en: '[PRE15]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Let''s also create a method so that objects can unregister from receiving further
    events. Declare the following method:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们再创建一个方法，以便对象可以注销以停止接收进一步的事件。声明以下方法：
- en: '[PRE16]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Let''s implement the `removeListener` method. Add the following code in the
    `InteractiveObject.cpp` file:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们实现 `removeListener` 方法。在 `InteractiveObject.cpp` 文件中添加以下代码：
- en: '[PRE17]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Modify the methods `mouseDown`, `mouseUp`, `mouseDrag`, and `mouseMove` so
    that `mEvents` gets called whenever an event occurs. The implementation of these
    methods should be as follows:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改 `mouseDown`、`mouseUp`、`mouseDrag` 和 `mouseMove` 方法，以便在发生任何事件时调用 `mEvents`。这些方法的实现应如下所示：
- en: '[PRE18]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'With our `InteractiveObject` class ready, we need to register our application
    class to receive its events. In your application class declaration add the following
    method:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的 `InteractiveObject` 类准备好之后，我们需要将我们的应用程序类注册以接收其事件。在你的应用程序类声明中添加以下方法：
- en: '[PRE19]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Let's implement the `receivedEvent` method. We will check what type of event
    has been received and print a message to the console.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们实现 `receivedEvent` 方法。我们将检查接收到的事件类型，并将消息打印到控制台。
- en: '[PRE20]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'All that is left is to register for the events. In the `setup` method add the
    following code after `mObject` has been initialized:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 剩下的只是注册事件。在 `setup` 方法中，在 `mObject` 初始化后添加以下代码：
- en: '[PRE21]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Now build and run the application and use the mouse to interact with the rectangle
    on the window. Whenever a mouse event occurs on `mObject`, our method, `receivedEvent`,
    will be called.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在构建并运行应用程序，并使用鼠标与窗口上的矩形进行交互。每当在 `mObject` 上发生鼠标事件时，我们的方法 `receivedEvent` 将被调用。
- en: How it works…
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We are using the template class `ci::CallbakMgr` to manage our event listeners.
    This class takes a template with the signature of the methods that can be registered.
    In our previous code, we declared `mEvents` to be of type `ci::CallbakcMgr<void(InteractiveObjectEvent)>;`
    it means that only methods that return `void` and receive `InteractiveObejctEvent`
    as a parameter can be registered.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用模板类 `ci::CallbakMgr` 来管理我们的事件监听器。这个类接受一个模板，其中包含可以注册的方法的签名。在我们的前一个代码中，我们声明
    `mEvents` 为 `ci::CallbakcMgr<void(InteractiveObjectEvent)>;` 类型，这意味着只有返回 `void`
    并接收 `InteractiveObejctEvent` 作为参数的方法可以被注册。
- en: The template method `registerEvent` will take an object pointer and method pointer.
    These are bound to `std::function` using `std::bind1st` and added to `mEvents`.
    The method will return `ci::CallbackId` with the identification of the listener.
    The `ci::CallbackId` can be used to unregister listeners.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 模板方法 `registerEvent` 将接受一个对象指针和方法指针。这些通过 `std::bind1st` 绑定到 `std::function`
    并添加到 `mEvents` 中。该方法将返回一个 `ci::CallbackId`，用于标识监听器。`ci::CallbackId` 可以用来注销监听器。
- en: There's more…
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'The `InteractiveObject` class is very useful for creating user interfaces.
    If we want to create a `Button` class using three textures (for displaying when
    pressed, over, and idle), we can do so as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`InteractiveObject` 类对于创建用户界面非常有用。如果我们想使用三个纹理（用于显示按下、悬停和空闲状态）创建一个 `Button`
    类，我们可以这样做：'
- en: 'Include the `InteractiveObject.h` and `cinder/gl/texture.h` files:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包含 `InteractiveObject.h` 和 `cinder/gl/texture.h` 文件：
- en: '[PRE22]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Declare the following class:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明以下类：
- en: '[PRE23]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Creating a slider
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建滑块
- en: In this recipe we will learn how to create a slider UI element by extending
    the `InteractiveObject` class mentioned in the *Creating an interactive object
    that responds to the mouse* recipe of this chapter.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将学习如何通过扩展本章中提到的 *创建一个响应鼠标的交互对象* 菜谱中的 `InteractiveObject` 类来创建滑块 UI
    元素。
- en: '![Creating a slider](img/8703OS_10_01.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![创建滑块](img/8703OS_10_01.jpg)'
- en: Getting ready
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Please refer to the *Creating an interactive object that responds to the mouse*
    recipe to find the `InteractiveObject` class headers and source code.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考 *创建一个响应鼠标的交互对象* 菜谱以找到 `InteractiveObject` 类的头文件和源代码。
- en: How to do it…
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: We will create a `Slider` class and show you how to use it.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个 `Slider` 类，并展示如何使用它。
- en: 'Add a new header file named `Slider.h` to your project:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将一个名为 `Slider.h` 的新头文件添加到你的项目中：
- en: '[PRE24]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Inside the source file of your main application class, include the previously
    created header file:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的主应用程序类的源文件中包含之前创建的头文件：
- en: '[PRE25]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Add the new properties to your main class:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新属性添加到你的主类中：
- en: '[PRE26]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Inside the `setup` method do the initialization of the `slider` objects:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `setup` 方法中初始化 `slider` 对象：
- en: '[PRE27]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Add the following code for drawing sliders inside your `draw` method:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的 `draw` 方法中添加以下代码来绘制滑块：
- en: '[PRE28]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: How it works…
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We created the `Slider` class by inheriting and overriding the `InteractiveObject`
    methods and properties. In step 1, we extended it with methods for controlling
    the position and dimensions of the `slider` object. The methods `getValue` and
    `setValue` can be used to retrieve or set the actual state of `slider`, which
    can vary from `0` to `1`.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过继承和重写 `InteractiveObject` 类的方法和属性创建了 `Slider` 类。在第 1 步中，我们扩展了它，添加了控制 `slider`
    对象位置和尺寸的方法。`getValue` 和 `setValue` 方法可以用来检索或设置 `slider` 的实际状态，其值可以从 `0` 变化到 `1`。
- en: In step 4, you can find the initialization of example sliders by setting the
    initial position, size, and value just after creating the `Slider` object. We
    are drawing example sliders along with captions and information about current
    state.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在第 4 步中，你可以找到通过设置初始位置、大小和值来初始化示例滑块的代码，这些值是在创建 `Slider` 对象后立即设置的。我们正在绘制示例滑块，包括标题和当前状态的信息。
- en: See also
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: The recipe *Creating interactive object that responds to the mouse.*
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 菜谱 *创建一个响应鼠标的交互对象*。
- en: The recipe *Dragging scaling, and rotating objects using multi-touch*.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 菜谱 *使用多点触控拖动、缩放和旋转对象*。
- en: Creating a responsive text box
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个响应式文本框
- en: In this recipe we will learn how to create a text box that responds to the user's
    keystrokes. It will be active when pressed over by the mouse and inactive when
    the mouse is released outside the box.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将学习如何创建一个响应用户按键的文本框。当鼠标悬停在其上时，它将是活动的，当鼠标在框外释放时，它将是非活动的。
- en: Getting ready
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Grab the following files from the recipe *Creating an interactive object that
    responds to the mouse* and add them to your project:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 从菜谱 *创建一个响应鼠标的交互对象* 中获取以下文件并将其添加到你的项目中：
- en: '`InteractiveObject.h`'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`InteractiveObject.h`'
- en: '`InteractiveObject.cpp`'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`InteractiveObject.cpp`'
- en: 'Create and add the following files to your project:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 创建并添加以下文件到你的项目中：
- en: '`InteractiveTextBox.h`'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`InteractiveTextBox.h`'
- en: '`InteractiveTextBox.cpp`'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`InteractiveTextBox.cpp`'
- en: How to do it…
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: We will create an `InteractiveTextBox` class that inherits from `InteractiveObject`
    and adds text functionality.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个继承自 `InteractiveObject` 并添加文本功能的 `InteractiveTextBox` 类。
- en: Go to the file `InteractiveTextBox.h` and add the `#pragma once` macro and include
    the necessary files.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到文件 `InteractiveTextBox.h` 并添加 `#pragma once` 宏，包含必要的文件。
- en: '[PRE29]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now declare the `InteractiveTextBox` class, making it a subclass of `InteractiveObject`
    with the following members and methods:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在声明 `InteractiveTextBox` 类，使其成为 `InteractiveObject` 的子类，并具有以下成员和方法：
- en: '[PRE30]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now go to `InteractiveTextBox.cpp` and include the `InteractiveTextBox.h` file
    and add the following `using` statements:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在转到 `InteractiveTextBox.cpp` 文件，包含 `InteractiveTextBox.h` 文件，并添加以下 `using`
    语句：
- en: '[PRE31]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Now let's implement the constructor by initializing the parent class and setting
    up the internal `ci::TextBox`.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们通过初始化父类和设置内部的 `ci::TextBox` 来实现构造函数。
- en: '[PRE32]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: In the `InteractiveTextBox::draw` method we will set the background color of
    `mTextBox` depending if it is active or not. We will also render `mTextBox` into
    `ci::gl::Texture` and draw it.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `InteractiveTextBox::draw` 方法中，我们将根据 `mTextBox` 是否处于活动状态来设置其背景颜色。我们还将 `mTextBox`
    渲染到 `ci::gl::Texture` 中并绘制它。
- en: '[PRE33]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Now let's implement the overridden methods `pressed` and `releasedOutside` to
    define the value of `mActive`.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们实现重写的 `pressed` 和 `releasedOutside` 方法来定义 `mActive` 的值。
- en: '[PRE34]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Finally, we need to implement the `keyPressed` method.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要实现 `keyPressed` 方法。
- en: If `mActive` is false this method will simply return. Otherwise, we will remove
    the last letter of `mText` if the key released was the *Backspace* key, or, add
    the corresponding letter if any other key was pressed.
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果 `mActive` 为假，此方法将直接返回。否则，如果释放的键是 *退格* 键，我们将从 `mText` 中删除最后一个字母，或者，如果按下了其他任何键，我们将添加相应的字母。
- en: '[PRE35]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Now move to your application class source file and include the following file
    and the `using` statements:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在转到你的应用程序类源文件，包含以下文件和 `using` 语句：
- en: '[PRE37]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'In your application class declare the following member:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的应用程序类中声明以下成员：
- en: '[PRE38]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Let''s initialize `mTextBox` in the `setup` method:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在 `setup` 方法中初始化 `mTextBox`：
- en: '[PRE39]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'In the `draw` method we will clear the background with black, enable `AlphaBlending`,
    and draw our `mTextBox`:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `draw` 方法中，我们将用黑色清除背景，启用 `AlphaBlending`，并绘制我们的 `mTextBox`：
- en: '[PRE40]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'We now need to declare the following mouse event handlers:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在需要声明以下鼠标事件处理器：
- en: '[PRE41]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'And implement them by calling the respective mouse event handler of `mTextBox`:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 并通过调用 `mTextBox` 的相应鼠标事件处理器来实现它们：
- en: '[PRE42]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Now we just need to do the same with the key released event handler. Start
    by declaring it:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们只需要对键释放事件处理器做同样的处理。首先声明它：
- en: '[PRE43]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: And in it's implementation we will call the `keyUp` method of `mTextBox`.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在其实现中，我们将调用 `mTextBox` 的 `keyUp` 方法。
- en: '[PRE44]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Now build and run the application. You will see a white textbox with the phrase
    **Write some text**. Press the text box and write some text. Click outside the
    text box to set the textbox as inactive.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在构建并运行应用程序。你会看到一个带有短语 **Write some text** 的白色文本框。按下文本框并输入一些文本。点击文本框外以将文本框设置为非活动状态。
- en: How it works…
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Internally, our `InteractiveTextBox` uses a `ci::TextBox` object. This class
    manages the text inside a box with a specified width and height. We take advantage
    of that and update the text according to the keys that the user presses.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 内部，我们的 `InteractiveTextBox` 使用一个 `ci::TextBox` 对象。这个类管理一个具有指定宽度和高度的框内的文本。我们利用这一点，根据用户按下的键更新文本。
- en: Dragging, scaling, and rotating objects using multi-touch
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用多点触控拖动、缩放和旋转对象
- en: In this recipe, we will learn how to create objects responsible to multi-touch
    gestures, such as dragging, scaling, or rotating by extending the `InteractiveObject`
    class mentioned in the *Creating an interactive object that responds to the mouse*
    recipe of this chapter. We are going to build an iOS application that uses iOS
    device multi-touch capabilities.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将学习如何通过扩展本章中提到的 *创建一个对鼠标做出响应的交互对象* 食谱中提到的 `InteractiveObject` 类来创建负责多指手势的对象，例如拖动、缩放或旋转。我们将构建一个使用
    iOS 设备多指功能的 iOS 应用程序。
- en: '![Dragging, scaling, and rotating objects using multi-touch](img/8703OS_10_02.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![使用多指拖动、缩放和旋转对象](img/8703OS_10_02.jpg)'
- en: Getting ready
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Please refer to the *Creating an interactive object that responds to the mouse*
    recipe to find the `InteractiveObject` class headers and source code and *Creating
    a project for an iOS touch application recipe from* [Chapter 1](ch01.html "Chapter 1. Getting
    Started").
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考 *创建一个对鼠标做出响应的交互对象* 食谱以找到 `InteractiveObject` 类的头文件和源代码，以及从 [第 1 章](ch01.html
    "第 1 章。入门") 中创建 iOS 触摸应用程序项目的食谱。
- en: How to do it…
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: We will create an iPhone application with sample objects that can be dragged,
    scaled, or rotated.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个带有示例对象的 iPhone 应用程序，这些对象可以被拖动、缩放或旋转。
- en: 'Add a new header file named `TouchInteractiveObject.h` to your project:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向你的项目添加一个名为 `TouchInteractiveObject.h` 的新头文件：
- en: '[PRE45]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Add a new source file named `TouchInteractiveObject.cpp` to your project and
    include the previously created header file by adding the following code line:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向你的项目添加一个名为 `TouchInteractiveObject.cpp` 的新源文件，并通过添加以下代码行包含之前创建的头文件：
- en: '[PRE46]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Implement the constructor of `TouchInteractiveObject`:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现 `TouchInteractiveObject` 的构造函数：
- en: '[PRE47]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Implement the handlers for touch events:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现触摸事件的处理程序：
- en: '[PRE48]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Now, implement the basic `draw` method for `TouchInteractiveObjects`:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，为 `TouchInteractiveObjects` 实现基本的 `draw` 方法：
- en: '[PRE50]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Here is the class, which inherits all the features of `TouchInteractiveObject`,
    but overrides the `draw` method and, in this case, we want our interactive object
    to be a circle. Add the following class definition to your main source file:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这里是继承 `TouchInteractiveObject` 所有功能并重写 `draw` 方法的类，在这种情况下，我们希望我们的交互对象是一个圆形。将以下类定义添加到你的主源文件中：
- en: '[PRE51]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Now take a look at your main application class file. Include the necessary
    header files:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在看看你的主应用程序类文件。包含必要的头文件：
- en: '[PRE52]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Add the `typedef` declaration:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 `typedef` 声明：
- en: '[PRE53]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Add members to your application class to handle the objects:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向你的应用程序类添加成员以处理对象：
- en: '[PRE54]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Inside the `setup` method initialize the objects:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `setup` 方法中初始化对象：
- en: '[PRE55]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The `draw` method is simple and looks as follows:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`draw` 方法很简单，如下所示：'
- en: '[PRE56]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'As you can see in the `setup` method we are using the function `getRandPos`,
    which returns a random position in screen boundaries with some margin:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正如你在 `setup` 方法中看到的，我们使用了 `getRandPos` 函数，该函数返回屏幕边界内带有一些边距的随机位置：
- en: '[PRE57]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: How it works…
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: We created the `TouchInteractiveObject` class by inheriting and overriding the
    `InteractiveObject` methods and properties. We also extended it with methods for
    controlling position and dimensions.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过继承和重写 `InteractiveObject` 的方法和属性创建了 `TouchInteractiveObject` 类。我们还通过控制位置和尺寸的方法扩展了它。
- en: In step 3, we are initializing properties and registering callbacks for touch
    events. The next step is to implement these callbacks. On the `touchesBegan` event,
    we are checking if the object is touched by any of the new touches, but all the
    calculations of movements and gestures happen during `touchesMoved` event.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤 3 中，我们初始化属性并注册触摸事件的回调。下一步是实现这些回调。在 `touchesBegan` 事件中，我们检查对象是否被任何新的触摸所接触，但所有关于移动和手势的计算都在
    `touchesMoved` 事件期间发生。
- en: In step 6, you can see how simple it is to change the appearance and keep all
    the interactive capabilities of `TouchInteractiveObject` by overriding the `draw`
    method.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤 6 中，你可以看到通过重写 `draw` 方法，如何简单地更改外观并保留 `TouchInteractiveObject` 的所有交互功能。
- en: There is more…
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: You can notice an issue that you are dragging multiple objects while they are
    overlapping. To solve that problem, we will add a simple object activation manager.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会注意到一个问题，即当你拖动多个对象时，它们是重叠的。为了解决这个问题，我们将添加一个简单的对象激活管理器。
- en: 'Add a new class definition to your Cinder application:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的 Cinder 应用程序中添加一个新的类定义：
- en: '[PRE58]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Add a new member to your application''s main class:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向你的应用程序的主类添加一个新的成员：
- en: '[PRE59]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'At the end of the `setup` method initialize `mObjMgr`, which is the object''s
    manager, and add the previously initialized interactive objects:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`setup`方法的末尾初始化`mObjMgr`，这是对象的管理器，并添加之前初始化的交互对象：
- en: '[PRE60]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Add the `update` method to your main class as follows:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式将`update`方法添加到你的主类中：
- en: '[PRE61]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Add two new methods to the `TouchInteractiveObject` class:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向`TouchInteractiveObject`类添加两个新方法：
- en: '[PRE62]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
