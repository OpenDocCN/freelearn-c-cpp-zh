["```cpp\nextends RigidBody2D\n\nenum {INIT, ALIVE, INVULNERABLE, DEAD}\nvar state = null\n```", "```cpp\nconst INIT = 0\nconst ALIVE = 1\nconst INVULNERABLE = 2\nconst DEAD = 3\n```", "```cpp\nenum States {INIT, ALIVE}\n\nvar state = States.INIT\n```", "```cpp\nfunc _ready():\n    change_state(ALIVE)\n\nfunc change_state(new_state):\n    match new_state:\n        INIT:\n            $CollisionShape2D.disabled = true\n        ALIVE:\n            $CollisionShape2D.disabled = false\n        INVULNERABLE:\n            $CollisionShape2D.disabled = true\n        DEAD:\n            $CollisionShape2D.disabled = true\n    state = new_state\n```", "```cpp\nexport (int) var engine_power\nexport (int) var spin_power\n\nvar thrust = Vector2()\nvar rotation_dir = 0\n```", "```cpp\nfunc _process(delta):\n    get_input()\n\nfunc get_input():\n    thrust = Vector2()\n    if state in [DEAD, INIT]:\n        return\n    if Input.is_action_pressed(\"thrust\"):\n        thrust = Vector2(engine_power, 0)\n    rotation_dir = 0\n    if Input.is_action_pressed(\"rotate_right\"):\n        rotation_dir += 1\n    if Input.is_action_pressed(\"rotate_left\"):\n        rotation_dir -= 1\n\nfunc _physics_process(delta):\n    set_applied_force(thrust.rotated(rotation))\n    set_applied_torque(spin_power * rotation_dir)\n\n```", "```cpp\nvar screensize = Vector2() \n```", "```cpp\nscreensize = get_viewport().get_visible_rect().size\n```", "```cpp\nfunc _physics_process(delta):\n    if position.x > screensize.x:\n        position.x = 0\n    if position.x < 0:\n        position.x = screensize.x\n    if position.y > screensize.y:\n        position.y = 0\n    if position.y < 0:\n        position.y = screensize.y\n    set_applied_force(thrust.rotated(rotation))\n    set_applied_torque(rotation_dir * spin_thrust)\n```", "```cpp\nfunc _integrate_forces(physics_state):\n    set_applied_force(thrust.rotated(rotation))\n    set_applied_torque(spin_power * rotation_dir)\n    var xform = physics_state.get_transform()\n    if xform.origin.x > screensize.x:\n        xform.origin.x = 0\n    if xform.origin.x < 0:\n        xform.origin.x = screensize.x\n    if xform.origin.y > screensize.y:\n        xform.origin.y = 0\n    if xform.origin.y < 0:\n        xform.origin.y = screensize.y\n    physics_state.set_transform(xform)\n```", "```cpp\nextends Area2D\n\nexport (int) var speed\nvar velocity = Vector2()\n\nfunc start(pos, dir):\n    position = pos\n    rotation = dir\n    velocity = Vector2(speed, 0).rotated(dir)\n\nfunc _process(delta):\n    position += velocity * delta\n```", "```cpp\nfunc _on_VisibilityNotifier2D_screen_exited():\n    queue_free()\n```", "```cpp\nfunc _on_Bullet_body_entered( body ):\n    if body.is_in_group('rocks'):\n        body.explode()\n        queue_free()\n```", "```cpp\nsignal shoot\n\nexport (PackedScene) var Bullet\nexport (float) var fire_rate\n\nvar can_shoot = true\n```", "```cpp\n$GunTimer.wait_time = fire_rate\n```", "```cpp\nif Input.is_action_pressed(\"shoot\") and can_shoot:\n    shoot()\n```", "```cpp\nfunc shoot():\n    if state == INVULNERABLE:\n        return\n    emit_signal(\"shoot\", Bullet, $Muzzle.global_position, rotation)\n    can_shoot = false\n    $GunTimer.start()\n```", "```cpp\nfunc _on_GunTimer_timeout():\n    can_shoot = true\n```", "```cpp\nfunc _on_Player_shoot(bullet, pos, dir):\n    var b = bullet.instance()\n    b.start(pos, dir)\n    add_child(b)\n```", "```cpp\nextends RigidBody2D\n\nvar screensize = Vector2()\nvar size\nvar radius\nvar scale_factor = 0.2\n```", "```cpp\nfunc start(pos, vel, _size):\n    position = pos\n    size = _size\n    mass = 1.5 * size\n    $Sprite.scale = Vector2(1, 1) * scale_factor * size\n    radius = int($Sprite.texture.get_size().x / 2 * scale_factor * size)\n    var shape = CircleShape2D.new()\n    shape.radius = radius\n    $CollisionShape2D.shape = shape\n    linear_velocity = vel\n    angular_velocity = rand_range(-1.5, 1.5)\n```", "```cpp\nfunc _integrate_forces(physics_state):\n    var xform = physics_state.get_transform()\n    if xform.origin.x > screensize.x + radius:\n       xform.origin.x = 0 - radius\n    if xform.origin.x < 0 - radius:\n       xform.origin.x = screensize.x + radius\n    if xform.origin.y > screensize.y + radius:\n       xform.origin.y = 0 - radius\n    if xform.origin.y < 0 - radius:\n       xform.origin.y = screensize.y + radius\n    physics_state.set_transform(xform)\n```", "```cpp\nexport (PackedScene) var Rock\n\nfunc _ready():\n    randomize()\n    screensize = get_viewport().get_visible_rect().size\n    $Player.screensize = screensize\n    for i in range(3):\n        spawn_rock(3)\n```", "```cpp\nfunc spawn_rock(size, pos=null, vel=null):\n    if !pos:\n        $RockPath/RockSpawn.set_offset(randi())\n        pos = $RockPath/RockSpawn.position\n    if !vel:\n        vel = Vector2(1, 0).rotated(rand_range(0, 2*PI)) * rand_range(100, 150)\n    var r = Rock.instance()\n    r.screensize = screensize\n    r.start(pos, vel, size)\n    $Rocks.add_child(r)\n```", "```cpp\n$Explosion.scale = Vector2(0.75, 0.75) * size\n```", "```cpp\nfunc explode():\n    layers = 0\n    $Sprite.hide()\n    $Explosion/AnimationPlayer.play(\"explosion\")\n    emit_signal(\"exploded\", size, radius, position, linear_velocity)\n    linear_velocity = Vector2()\n    angular_velocity = 0\n```", "```cpp\nfunc _on_AnimationPlayer_animation_finished( name ):\n    queue_free()\n```", "```cpp\nr.connect('exploded', self, '_on_Rock_exploded')\n```", "```cpp\nfunc _on_Rock_exploded(size, radius, pos, vel):\n    if size <= 1:\n        return\n    for offset in [-1, 1]:\n        var dir = (pos - $Player.position).normalized().tangent() * offset\n        var newpos = pos + dir * radius\n        var newvel = dir * vel.length() * 1.1\n        spawn_rock(size - 1, newpos, newvel)\n```", "```cpp\nextends CanvasLayer\n\nsignal start_game\n\nonready var lives_counter = [$MarginContainer/HBoxContainer/LivesCounter/L1,\n                             $MarginContainer/HBoxContainer/LivesCounter/L2,\n                             $MarginContainer/HBoxContainer/LivesCounter/L3]\n```", "```cpp\nfunc show_message(message):\n    $MessageLabel.text = message\n    $MessageLabel.show()\n    $MessageTimer.start()\n\nfunc update_score(value):\n    $MarginContainer/MarginContainer/HBoxContainer/ScoreLabel.text = str(value)\n\nfunc update_lives(value):\n    for item in range(3):\n        lives_counter[item].visible = value > item\n```", "```cpp\nfunc game_over():\n    show_message(\"Game Over\")\n    yield($MessageTimer, \"timeout\")\n    $StartButton.show()\n```", "```cpp\nfunc _on_StartButton_pressed():\n    $StartButton.hide()\n    emit_signal(\"start_game\")\n```", "```cpp\nfunc _on_MessageTimer_timeout():\n    $MessageLabel.hide()\n    $MessageLabel.text = ''\n```", "```cpp\nvar level = 0\nvar score = 0\nvar playing = false\n```", "```cpp\nfunc new_game():\n    for rock in $Rocks.get_children():\n        rock.queue_free()\n    level = 0\n    score = 0\n    $HUD.update_score(score)\n    $Player.start()\n    $HUD.show_message(\"Get Ready!\")\n    yield($HUD/MessageTimer, \"timeout\")\n    playing = true\n    new_level()\n```", "```cpp\nfunc new_level():\n    level += 1\n    $HUD.show_message(\"Wave %s\" % level)\n    for i in range(level):\n        spawn_rock(3)\n```", "```cpp\nfunc _process(delta):\n    if playing and $Rocks.get_child_count() == 0:\n        new_level()\n```", "```cpp\nfunc game_over():\n    playing = false\n    $HUD.game_over()\n```", "```cpp\nsignal lives_changed\n\nvar lives = 0 setget set_lives\n```", "```cpp\nfunc set_lives(value):\n    lives = value\n    emit_signal(\"lives_changed\", lives)\n```", "```cpp\nfunc start():\n    $Sprite.show()\n    self.lives = 3\n    change_state(ALIVE)\n```", "```cpp\nsignal dead\n```", "```cpp\nfunc change_state(new_state):\n    match new_state:\n        INIT:\n            $CollisionShape2D.disabled = true\n            $Sprite.modulate.a = 0.5\n        ALIVE:\n            $CollisionShape2D.disabled = false\n            $Sprite.modulate.a = 1.0\n        INVULNERABLE:\n            $CollisionShape2D.disabled = true\n            $Sprite.modulate.a = 0.5\n            $InvulnerabilityTimer.start()\n        DEAD:\n            $CollisionShape2D.disabled = true\n            $Sprite.hide()\n            linear_velocity = Vector2()\n            emit_signal(\"dead\")\n    state = new_state\n```", "```cpp\nfunc _on_InvulnerabilityTimer_timeout():\n    change_state(ALIVE)\n```", "```cpp\nfunc _on_AnimationPlayer_animation_finished( name ):\n    $Explosion.hide()\n```", "```cpp\nfunc _on_Player_body_entered( body ):\n    if body.is_in_group('rocks'):\n        body.explode()\n        $Explosion.show()\n        $Explosion/AnimationPlayer.play(\"explosion\")\n        self.lives -= 1\n        if lives <= 0:\n            change_state(DEAD)\n        else:\n            change_state(INVULNERABLE)\n```", "```cpp\nfunc _input(event):\n    if event.is_action_pressed('pause'):\n        if not playing:\n            return\n    get_tree().paused = not get_tree().paused\n    if get_tree().paused:\n        $HUD/MessageLabel.text = \"Paused\"\n        $HUD/MessageLabel.show()\n    else:\n        $HUD/MessageLabel.text = \"\"\n        $HUD/MessageLabel.hide()\n```", "```cpp\nfunc _on_AnimationPlayer_animation_finished(anim_name):\n    queue_free()\n```", "```cpp\nextends Area2D\n\nsignal shoot\n\nexport (PackedScene) var Bullet\nexport (int) var speed = 150\nexport (int) var health = 3\n\nvar follow\nvar target = null\n\nfunc _ready():\n    $Sprite.frame = randi() % 3\n    var path = $EnemyPaths.get_children()[randi() % $EnemyPaths.get_child_count()]\n    follow = PathFollow2D.new()\n    path.add_child(follow)\n    follow.loop = false\n```", "```cpp\nfunc _process(delta):\n    follow.offset += speed * delta\n    position = follow.global_position\n    if follow.unit_offset > 1:\n        queue_free()\n```", "```cpp\nexport (PackedScene) var Enemy\n```", "```cpp\n$EnemyTimer.wait_time = rand_range(5, 10)\n$EnemyTimer.start()\n```", "```cpp\nfunc _on_EnemyTimer_timeout():\n    var e = Enemy.instance()\n    add_child(e)\n    e.target = $Player\n    e.connect('shoot', self, '_on_Player_shoot')\n    $EnemyTimer.wait_time = rand_range(20, 40)\n    $EnemyTimer.start()\n```", "```cpp\nextends Area2D\n\nexport (int) var speed\n\nvar velocity = Vector2()\n\nfunc start(_position, _direction):\n    position = _position\n    velocity = Vector2(speed, 0).rotated(_direction)\n    rotation = _direction\n\nfunc _process(delta):\n    position += velocity * delta\n\nfunc _on_EnemyBullet_body_entered(body):\n    queue_free()\n\nfunc _on_VisibilityNotifier2D_screen_exited():\n    queue_free()\n```", "```cpp\nfunc shoot():\n    var dir = target.global_position - global_position\n    dir = dir.rotated(rand_range(-0.1, 0.1)).angle()\n    emit_signal('shoot', Bullet, global_position, dir)\n```", "```cpp\nfunc shoot_pulse(n, delay):\n    for i in range(n):\n        shoot()\n        yield(get_tree().create_timer(delay), 'timeout')\n```", "```cpp\nfunc _on_GunTimer_timeout():\n    shoot_pulse(3, 0.15)\n```", "```cpp\nfunc take_damage(amount):\n    health -= amount\n    $AnimationPlayer.play('flash')\n    if health <= 0:\n        explode()\n    yield($AnimationPlayer, 'animation_finished')\n    $AnimationPlayer.play('rotate')\n\nfunc explode():\n    speed = 0\n    $GunTimer.stop()\n    $CollisionShape2D.disabled = true\n    $Sprite.hide()\n    $Explosion.show()\n    $Explosion/AnimationPlayer.play(\"explosion\")\n    $ExplodeSound.play()\n```", "```cpp\nfunc _on_Enemy_body_entered(body):\n    if body.name == 'Player':\n        pass\n    explode()\n```", "```cpp\nfunc _on_Bullet_area_entered(area):\n    if area.is_in_group('enemies'):\n        area.take_damage(1)\n    queue_free()\n```", "```cpp\n$LaserSound.play()\n```", "```cpp\nif Input.is_action_pressed(\"thrust\"):\n    thrust = Vector2(engine_power, 0)\n    if not $EngineSound.playing:\n        $EngineSound.play()\n else:\n     $EngineSound.stop()\n```", "```cpp\nsignal shield_changed\n\nexport (int) var max_shield\nexport (float) var shield_regen\n\nvar shield = 0 setget set_shield\n```", "```cpp\nfunc set_shield(value):\n    if value > max_shield:\n        value = max_shield\n    shield = value\n    emit_signal(\"shield_changed\", shield/max_shield)\n    if shield <= 0:\n        self.lives -= 1\n```", "```cpp\n    self.shield = max_shield\n```", "```cpp\nfunc _on_Player_body_entered( body ):\n    if body.is_in_group('rocks'):\n        body.explode()\n        $Explosion.show()\n        $Explosion/AnimationPlayer.play(\"explosion\")\n        self.shield -= body.size * 25\n```", "```cpp\nfunc _on_EnemyBullet_body_entered(body):\n    if body.name == 'Player':\n        body.shield -= 15\n    queue_free()\n```", "```cpp\nfunc _on_Enemy_body_entered(body):\n    if body.name == 'Player':\n        body.shield -= 50\n        explode()\n```", "```cpp\n    self.shield += shield_regen * delta\n```", "```cpp\nonready var ShieldBar = $MarginContainer/HBoxContainer/ShieldBar\nvar red_bar = preload(\"res://assets/barHorizontal_red_mid 200.png\")\nvar green_bar = preload(\"res://assets/barHorizontal_green_mid 200.png\")\nvar yellow_bar = preload(\"res://assets/barHorizontal_yellow_mid 200.png\")\n```", "```cpp\nfunc update_shield(value):\n    ShieldBar.texture_progress = green_bar\n    if value < 40:\n        ShieldBar.texture_progress = red_bar\n    elif value < 70:\n        ShieldBar.texture_progress = yellow_bar\n    ShieldBar.value = value\n```"]