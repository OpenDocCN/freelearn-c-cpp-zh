- en: Running Parallel Execution Using Concurrency
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用并发运行并行执行
- en: 'In the previous chapter, we discussed template metaprogramming that will make
    a code in compile-time execution. It will also improve the flow control of our
    code since we can refactor the flow using the template. Now, in this chapter,
    we will talk about concurrency in C++, where we have to control the flow again
    when we run two or more processes simultaneously. In this chapter, we will discuss
    the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们讨论了模板元编程，它将在编译时执行代码。它还将提高我们代码的流程控制，因为我们可以使用模板重构流程。现在，在这一章中，我们将讨论 C++
    中的并发，当我们同时运行两个或更多进程时，我们必须再次控制流程。在这一章中，我们将讨论以下主题：
- en: Running single as well as multiple threads in C++ programming
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 C++ 编程中运行单线程以及多线程
- en: Synchronizing the thread to avoid a deadlock
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同步线程以避免死锁
- en: Using the **handle** resource in Windows to create a thread
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Windows 中使用 **handle** 资源创建线程
- en: Concurrency in C++
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: C++ 并发
- en: Many programming languages have provided support for concurrency today. Instead
    of sequentially, the computation of the code is executed during overlapping time
    periods in concurrent programming. It will make our program responsive since the
    code doesn't need to wait until all computation is finished. Let's suppose we
    want to develop a program that can play a video and download a huge video file
    at the same time. Without the concurrency technique, we have to wait for the video
    to be downloaded successfully before we can play another video file. By using
    this technique, we can split these two tasks, playing and downloading a video,
    then run them together concurrently.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 许多编程语言今天都提供了对并发的支持。在并发编程中，代码的计算是在重叠的时间段内执行的，而不是顺序执行。这将使我们的程序更响应，因为代码不需要等待所有计算完成。假设我们想要开发一个可以同时播放视频和下载大视频文件的程序。如果没有并发技术，我们必须等待视频下载成功后才能播放另一个视频文件。通过使用这种技术，我们可以将这些两个任务，播放和下载视频，然后并发地运行它们。
- en: Before C++11 was announced, the C++ programmer depended on `Boost::thread` to
    create a concurrent program using the multithreading technique. In multithreading,
    we split up the process into the smallest sequence and run these small processes
    concurrently. Now, in the C++11 library, we get the `thread` class to address
    our need for concurrency using the multithreading technique.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在宣布 C++11 之前，C++ 程序员依赖于 `Boost::thread` 来使用多线程技术创建并发程序。在多线程中，我们将进程拆分成最小的序列，并并行运行这些小进程。现在，在
    C++11 库中，我们得到了 `thread` 类来满足我们使用多线程技术实现并发的需求。
- en: Processing a single threading code
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理单线程代码
- en: 'To use the `thread` class, we just need to create an instance of `std::thread`
    and pass the function name as the argument. We then call `std::join()` to pause
    the process until the selected thread finishes its process. Let''s take a look
    at the following `singlethread.cpp` code:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 `thread` 类，我们只需创建一个 `std::thread` 的实例，并将函数名作为参数传递。然后我们调用 `std::join()` 来暂停进程，直到选定的线程完成其过程。让我们看看以下
    `singlethread.cpp` 代码：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As we can see in the preceding code, we have a function named `threadProc()`,
    and we pass it into the `thread1` initialization in the `main()` function. After
    initialization, we call the `join()` method to execute the `thread1` object. The
    output that we will see on the console should be as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述的代码所示，我们有一个名为 `threadProc()` 的函数，并在 `main()` 函数中将它传递给 `thread1` 的初始化。初始化后，我们调用
    `join()` 方法来执行 `thread1` 对象。我们将在控制台上看到的输出应该是以下内容：
- en: '![](img/86d5d8c0-8176-4e09-8737-4e31bd48ba43.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/86d5d8c0-8176-4e09-8737-4e31bd48ba43.png)'
- en: 'We have successfully run a thread in our code. Now, let''s add a piece of code
    in the `main()` function that will iterate a line of code. We will run them together
    concurrently. The code for `singlethread2.cpp` is as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在代码中成功运行了一个线程。现在，让我们在 `main()` 函数中添加一段代码，它将迭代一行代码。我们将并发地运行它们。`singlethread2.cpp`
    的代码如下：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'As we can see in the preceding code, we add a `for` loop to iterate some code
    and to run it concurrently with `thread1`. To make sense of it, we add a `for`
    loop in the `threadProc()` function as well. Let''s take a look at the following
    screenshot to figure out what output we will get:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述的代码所示，我们添加了一个 `for` 循环来迭代一些代码，并与 `thread1` 并发运行。为了使其有意义，我们在 `threadProc()`
    函数中也添加了一个 `for` 循环。让我们看看以下截图，以了解我们将得到什么输出：
- en: '![](img/8aa03435-bafd-4bef-a608-028751070653.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8aa03435-bafd-4bef-a608-028751070653.png)'
- en: We see that the `threadProc()` function and the code in the `main()` function
    is run together concurrently. Some of you may get a different result, but it's
    okay since the result cannot be predicted because it depends on the device itself.
    However, for now, we have been able to run two processes concurrently.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到`threadProc()`函数和`main()`函数中的代码是并发运行的。有些人可能会得到不同的结果，但这没关系，因为结果无法预测，因为它取决于设备本身。然而，目前我们能够并发运行两个进程。
- en: I ran the preceding code multiple times to get the output we see in the preceding
    screenshot. You might see different order in between the `threadProc()` and `main()`
    function or get a messy output since the flow of the thread is unpredictable.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我多次运行了前面的代码，以获取前面截图中的输出。你可能会在`threadProc()`函数和`main()`函数之间看到不同的顺序，或者得到一个混乱的输出，因为线程的流程是不可预测的。
- en: Processing a multithreading code
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理多线程代码
- en: 'In the multithread technique, we run two or more threads concurrently. Let''s
    suppose we are running five threads simultaneously. We can use the following `multithread.cpp`
    code that will store these five threads in an array:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在多线程技术中，我们并发运行两个或更多线程。假设我们同时运行五个线程。我们可以使用以下`multithread.cpp`代码，它将这五个线程存储在一个数组中：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'After we initialize these five threads based on the preceding code, we will
    run the `join()` method for all threads to execute them. By using the `join()`
    method, the program will wait for all processes in the calling threads to be finished,
    then continue the next process if any. The result we see in the console is as
    follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的代码初始化这五个线程后，我们将为所有线程运行`join()`方法以执行它们。通过使用`join()`方法，程序将等待调用线程中的所有进程完成，然后继续执行任何后续进程。我们在控制台上看到的结果如下：
- en: '![](img/808eb931-b775-4816-b4c6-e756f8d99112.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/808eb931-b775-4816-b4c6-e756f8d99112.png)'
- en: 'In the preceding screenshot, we see that all five threads have been successfully
    executed. We can also initialize the thread using the Lambda expression. The following
    `lambdathread.cpp` code is refactored from the preceding code which uses Lambda
    instead of creating a separated function:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，我们看到所有五个线程都已成功执行。我们也可以使用Lambda表达式来初始化线程。下面的`lambdathread.cpp`代码是从前面使用Lambda而不是创建单独函数的代码重构而来的：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'There is no significant change if we see the `lambdathread.cpp` code comparing
    with the `multithread.cpp` code. However, since the function will only be called
    once, it''s better to use Lambda so it is easier to maintain it. The output we
    will see on the console is like the following screenshot, not much different compared
    to the `multithread.cpp` code output:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将`lambdathread.cpp`代码与`multithread.cpp`代码比较，没有显著的变化。然而，由于函数只会被调用一次，使用Lambda会更易于维护。我们在控制台上看到的输出如下，与`multithread.cpp`代码的输出没有太大区别：
- en: '![](img/533c3423-6bf0-450e-99a6-6988f42d3d61.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/533c3423-6bf0-450e-99a6-6988f42d3d61.png)'
- en: Although we retrieve the same output when running `lambdathread.cpp` comparing
    with the `multithread.cpp` code, we have a clear code when we initialize the thread
    using the Lambda expression. We don't need to create another method to be passed
    to `Thread`, for instance, `threadProc()`, since this method is actually used
    only once.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在运行`lambdathread.cpp`与`multithread.cpp`代码比较时我们得到了相同的结果，但当我们使用Lambda表达式初始化线程时，代码更加清晰。我们不需要创建另一个方法传递给`Thread`，例如`threadProc()`，因为这个方法实际上只使用了一次。
- en: Again, note that the result you see on your screen might be different from the
    screenshot I gave.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 再次注意，你屏幕上看到的结果可能与我所提供的截图不同。
- en: Synchronizing the threads using mutex
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用互斥锁同步线程
- en: As of now, we have successfully executed a multithreading code. However, a problem
    will occur if we consume a shared object and manipulate it inside the thread.
    It is called **synchronization**. In this section, we will try to avoid this problem
    by applying a `mutex` technique.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经成功执行了多线程代码。然而，如果我们消耗一个共享对象并在线程内部操作它，就会发生问题。这被称为**同步**。在本节中，我们将通过应用`mutex`技术来尝试避免这个问题。
- en: Avoiding synchronization issues
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 避免同步问题
- en: 'As we discussed earlier, in this section, we have to ensure that the shared
    object we run in the thread gives the correct value when it is executing. Let''s
    suppose we have a global variable named `counter` and we plan to increase its
    value in all the five threads we have. Each thread will execute `10000` times
    increment iteration, so we expect to get `50000` as a result for all five threads.
    The code is as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们之前讨论的，在本节中，我们必须确保在执行时，我们在线程中运行的共享对象能够给出正确的值。假设我们有一个名为 `counter` 的全局变量，我们计划在所有五个线程中增加它的值。每个线程将执行
    `10000` 次增加迭代，因此我们预计所有五个线程的结果将是 `50000`。代码如下：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, let''s take a look at the following screenshot we may get on the console
    when we run the preceding code:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看当我们运行前面的代码时可能在控制台上看到的以下屏幕截图：
- en: '![](img/e0d31bea-b6e2-49db-acff-172784871ce3.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e0d31bea-b6e2-49db-acff-172784871ce3.png)'
- en: Unfortunately, based on the preceding screenshot, we don't get what we expect.
    This happens because an incrementation process is not an atomic operation since
    the atomic operation will guarantee the isolation of the concurrent process.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，根据前面的屏幕截图，我们没有得到我们预期的结果。这是因为增加过程不是一个原子操作，因为原子操作将保证并发过程的隔离。
- en: If you get a different output, don't worry, we are still on the right track
    as this program demonstrates synchronization issues, as you will see next.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你得到了不同的输出，不要担心，我们仍然在正确的轨道上，因为这个程序演示了同步问题，正如你接下来将要看到的。
- en: 'If we trace the output deeper, we will see that there are two threads that
    execute exactly the same value for the `counter` variable, as we can see in the
    following screenshot:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们进一步追踪输出，我们将看到有两个线程执行了 `counter` 变量的相同值，正如我们可以在下面的屏幕截图中所见：
- en: '![](img/8f7a5eff-9464-4f99-b4e6-3bb1f2553f25.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8f7a5eff-9464-4f99-b4e6-3bb1f2553f25.png)'
- en: We see that the thread with ID `2504` and `5524` access the counter variable
    when its value is `44143`. That's why we retrieve an unexpected result when we
    run the preceding code. Now we need to make the increment operation to become
    an atomic operation that will be executed without any other processes being able
    to read or change the state that is read or changed during the operation.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到线程 ID 为 `2504` 和 `5524` 的线程在计数器变量的值为 `44143` 时访问了该变量。这就是为什么当我们运行前面的代码时，我们得到了一个意外的结果。现在我们需要使增加操作成为一个原子操作，该操作将在没有任何其他进程能够读取或更改操作期间读取或更改的状态的情况下执行。
- en: 'To solve this problem, we can use the `mutex` class to make our counter variable
    `thread-safe`. It means that before the thread accesses the counter variable,
    it has to ensure that the variable is not accessed by others threads. We can use
    the `lock()` and `unlock()` methods in the `mutex` class to lock and unlock the
    targeted variable. Let''s take a look at the following `mutex.cpp` code to demonstrate
    `mutex` implementation:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们可以使用 `mutex` 类来使我们的计数器变量 `线程安全`。这意味着在线程访问计数器变量之前，它必须确保变量没有被其他线程访问。我们可以使用
    `mutex` 类中的 `lock()` 和 `unlock()` 方法来锁定和解锁目标变量。让我们看一下下面的 `mutex.cpp` 代码，以展示 `mutex`
    的实现：
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'As we can see in the preceding code, before the code increments the `counter`
    variable, it calls the `lock()` method. And after that, it calls the `unlock()`
    method to notify the other threads that the `counter` variable is free to manipulate
    now. If we run the preceding code, we should see the following output on the console:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的代码中所见，在代码增加 `counter` 变量之前，它调用了 `lock()` 方法。然后，它调用 `unlock()` 方法来通知其他线程
    `counter` 变量现在可以自由操作了。如果我们运行前面的代码，我们应该在控制台上看到以下输出：
- en: '![](img/0e60f03b-94fb-43c7-aa0e-2e9ede5261b2.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0e60f03b-94fb-43c7-aa0e-2e9ede5261b2.png)'
- en: By using the `mutex` class, now we retrieve the result we expect, as we can
    see in the preceding screenshot.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用 `mutex` 类，现在我们得到了我们预期的结果，正如我们可以在前面的屏幕截图中所见。
- en: Unlocking the variable automatically
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动解锁变量
- en: 'We now know how to lock the variable to ensure that no two threads working
    on the same value simultaneously retrieve the correct value from it. However,
    the problem will occur if an exception is thrown before the thread calls the `unlock()`
    method. The program will be completely locked if the state of the variable remains
    locked. To solve this problem, we can use `lock_guard<mutex>` to lock the variable
    and to ensure that it will be unlocked at the end of the scope no matter what
    happens. The following piece of code is refactored from the preceding code by
    adding the `lock_guard<mutex>` functionality:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在知道如何锁定变量以确保没有两个线程同时从同一值中检索正确的值。然而，如果在线程调用`unlock()`方法之前抛出异常，问题就会出现。如果变量的状态保持锁定，程序将会完全锁定。为了解决这个问题，我们可以使用`lock_guard<mutex>`来锁定变量，并确保无论发生什么情况，它都会在作用域结束时解锁。以下代码是通过添加`lock_guard<mutex>`功能从前面代码重构的：
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As we can see from the preceding `automutex.cpp` code, it calls `lock_guard
    <mutex> guard(mtx)` before it increments the `counter` variable. If we run the
    code, we will get exactly the same output with the `mutex.cpp` code. However,
    now we have a program that won't be locked unpredictably.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的`automutex.cpp`代码中我们可以看出，它在增加`counter`变量之前调用了`lock_guard <mutex> guard(mtx)`。如果我们运行代码，我们会得到与`mutex.cpp`代码完全相同的输出。然而，现在我们有一个程序不会出现不可预测的锁定。
- en: Avoiding deadlock using recursive mutex
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用递归互斥锁避免死锁
- en: 'In the previous section, we used `lock_guard` to ensure that the variable is
    not accessed by more than one thread. However, we will still face a problem if
    more than one `lock_guard` obtains the lock. In the following piece of code, we
    have two functions that will call `lock_guard`--`Multiplexer()` and `Divisor()`.
    Besides them, we also have a function that will call these two functions--`RunAll()`
    that will call `lock_guard` first before calling the two functions. The code should
    look like this:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们使用了`lock_guard`来确保变量不会被多个线程访问。然而，如果多个`lock_guard`获取了锁，我们仍然会面临问题。在下面的代码片段中，我们有两个会调用`lock_guard`的函数——`Multiplexer()`和`Divisor()`。除此之外，我们还有一个会调用这两个函数的函数——`RunAll()`，它会在调用这两个函数之前首先调用`lock_guard`。代码应该看起来像这样：
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We will successfully compile the following piece of code. However, if we run
    the preceding code, an error will occur since the program won''t exit due to the
    **deadlock**. It is because the same mutex cannot be acquired by multiple threads
    twice. When the `RunAll()` function is invoked, it acquires the `lock` object.
    The `Multiplexer()` function inside the `RunAll()` function wants to acquire `lock`
    as well. However, `lock` has been locked by the `RunAll()` function. To solve
    this problem, we can replace `lock_guard<mutex>` with `lock_guard<recursive_mutex>`,
    as you can see in the following piece of code:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将成功编译以下代码片段。然而，如果我们运行前面的代码，将会出现错误，因为程序不会退出，这是由于**死锁**。这是因为同一个互斥锁不能被多个线程两次获取。当调用`RunAll()`函数时，它获取了`lock`对象。`RunAll()`函数内部的`Multiplexer()`函数也想获取`lock`。然而，`lock`已经被`RunAll()`函数锁定。为了解决这个问题，我们可以将`lock_guard<mutex>`替换为`lock_guard<recursive_mutex>`，正如你可以在以下代码中看到的那样：
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, we can successfully compile and run the preceding code. We can use the
    `lock_guard<recursive_mutex>` class that will allow mutex to be locked more than
    once without getting to the deadlock. The following screenshot will be seen on
    the console when we run the preceding code:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以成功编译并运行前面的代码。我们可以使用`lock_guard<recursive_mutex>`类，它将允许互斥锁被多次锁定而不会导致死锁。当我们运行前面的代码时，以下截图将在控制台上显示：
- en: '![](img/7faafdd2-15bc-4f57-82ca-d50df7296692.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7faafdd2-15bc-4f57-82ca-d50df7296692.png)'
- en: Now, we know we need to use one recursive `mutex` if we want to call functions
    that lock the same `mutex` recursively.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们知道如果我们想要递归地调用锁定相同`mutex`的函数，我们需要使用一个递归`mutex`。
- en: Understanding the thread processing in a Windows operating system
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Windows操作系统中的线程处理
- en: Let's move to a specific operating system that is widely used by many user computers,
    that is Windows. Our code must need to be run on some commercial platform from
    a leading OS vendor, such as Microsoft. So, we will now run the thread in Windows
    OS. In this OS, the thread is a kernel resource, which means it is an object that
    is created and owned by the OS kernel and lives in the kernel. The kernel itself
    is a core program that has complete control over everything in the system. In
    this section, we will develop a thread in Windows OS so our program can work well
    in this OS.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们转向一个被许多用户计算机广泛使用的特定操作系统，那就是Windows。我们的代码必须在一些由主要操作系统供应商提供的商业平台上运行，例如微软。因此，我们现在将在Windows操作系统上运行线程。在这个操作系统中，线程是一个内核资源，这意味着它是由操作系统内核创建和拥有的对象，并存在于内核中。内核本身是一个核心程序，它对系统中的所有内容都拥有完全的控制权。在本节中，我们将开发Windows操作系统中的线程，以便我们的程序能在该操作系统上良好运行。
- en: Working with handle
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理句柄
- en: 'In the Windows operating system, handle is an abstract reference value to a
    resource. In this discussion, we will use the abstract reference to hold the thread.
    Let''s suppose we have a `threadProc()` function that will be called inside a
    thread which is held in the `hnd` variable. The code will be as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows操作系统中，句柄是对资源的抽象引用值。在本讨论中，我们将使用抽象引用来持有线程。假设我们有一个`threadProc()`函数，它将在`hnd`变量中持有的线程内部被调用。代码如下：
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As we can see in the preceding code, we use the `CreateThread()` function provided
    by the `windows.h` header to generate a thread. For now, we just pass the `nullptr`
    value as the default parameter, except `threadProc` as a function that we will
    call from the thread.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述的代码所示，我们使用`windows.h`头文件中提供的`CreateThread()`函数生成线程。目前，我们只传递`nullptr`值作为默认参数，除了`threadProc`作为我们将从线程中调用的函数。
- en: 'After we initialize the handle of the thread, we can ensure that the `hnd`
    variable contains the handle of the thread, then invokes the `WaitForSingleObject()`
    function. It is similar to the `join()` method we used in the preceding section
    that will run the thread and wait until the thread is finished. Since the thread
    handle is a resource we use, don''t forget to release it by using the `CloseHandle()`
    function. If we run the preceding code, we will see the following output on the
    console screen:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们初始化线程的句柄后，我们可以确保`hnd`变量包含线程的句柄，然后调用`WaitForSingleObject()`函数。它与我们在前一节中使用的`join()`方法类似，将运行线程并等待线程完成。由于线程句柄是我们使用的资源，不要忘记使用`CloseHandle()`函数释放它。如果我们运行前面的代码，我们将在控制台屏幕上看到以下输出：
- en: '![](img/b74afe83-9bdb-431b-b75f-7a7da30e77ba.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b74afe83-9bdb-431b-b75f-7a7da30e77ba.png)'
- en: As we can see, we have successfully run the thread since we've got the expected
    process from the `threadProc()` function.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，我们已经成功运行了线程，因为我们从`threadProc()`函数中获得了预期的进程。
- en: Refactoring to a unique handle
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重构为唯一句柄
- en: 'Now, to ease our programming process, we will create a class named `NullHandle`
    that will automatically release the resource each time we no longer need it. It
    will be constructed from the `UniqueHandle` class, which we will develop as well.
    These classes can be found in the `uniquehandle.h` file. The implementation of
    `UniqueHandle` is as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了简化我们的编程过程，我们将创建一个名为`NullHandle`的类，每次我们不再需要它时，它将自动释放资源。它将从我们将要开发的`UniqueHandle`类中构建。这些类可以在`uniquehandle.h`文件中找到。`UniqueHandle`的实现如下：
- en: '[PRE10]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'As we can see, we have a complete implementation of the `UniqueHandle` class
    that can be instanced and will automatically close the handle from its destructor.
    To use `NullHandle` object, we will use the following code:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，我们有一个完整的`UniqueHandle`类实现，它可以实例化，并在其析构函数中自动关闭句柄。要使用`NullHandle`对象，我们将使用以下代码：
- en: '[PRE11]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The implementation of the `NullHandleCharacteristics` struct is as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`NullHandleCharacteristics`结构体的实现如下：'
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, let''s refactor our preceding `threadhandle.cpp` code. We will replace
    `HANDLE` with `NullHandle`, so it will be as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们重构先前的`threadhandle.cpp`代码。我们将用`NullHandle`替换`HANDLE`，如下所示：
- en: '[PRE13]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Then, we will create a new function named `WaitOneThread()` to call the thread
    itself and wait until it finishes. The implementation should be as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将创建一个名为`WaitOneThread()`的新函数，用于调用线程本身并等待其完成。实现应如下所示：
- en: '[PRE14]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'By using the `WaitOneThread()` function, we can know whether or not the thread
    has been run. The `WinException` struct can be implemented as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`WaitOneThread()`函数，我们可以知道线程是否已经运行。`WinException`结构体可以按如下方式实现：
- en: '[PRE15]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now, we can add the following piece of code to the `main()` function after
    we initialize the `hnd` HANDLE:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以在初始化`hnd` HANDLE之后将以下代码片段添加到`main()`函数中：
- en: '[PRE16]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'As we can see from the preceding code, we call the `WaitOneThread()` function
    and pass `0` as the `ms` parameter to find out the status of the `WaitForSingleObject()`
    function call. We can pass the `INFINITE` value to it to call the thread and wait
    for it until it finishes. The following is the `threaduniquehandle.cpp` code that
    is refactored from the `threadhandle.cpp` code and has consumed the `UniqueHandle`
    class:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如前述代码所示，我们调用了`WaitOneThread()`函数，并将`0`作为`ms`参数传递，以找出`WaitForSingleObject()`函数调用的状态。我们可以传递`INFINITE`值给它，以调用线程并等待它完成。以下是从`threadhandle.cpp`代码重构的`threaduniquehandle.cpp`代码，它使用了`UniqueHandle`类：
- en: '[PRE17]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The following screenshot is the output we should see on the console screen:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图是我们应该在控制台屏幕上看到的输出：
- en: '![](img/70059c6e-2e41-4913-86c8-d05ada792004.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/70059c6e-2e41-4913-86c8-d05ada792004.png)'
- en: As we can see from the preceding screenshot, we don't have the `Before running
    thread` line on it. It's because we will get the `WAIT_TIMEOUT` output each time
    the thread is not called. And still, we have successfully executed the code in
    the `threadProc()` function.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如前述截图所示，我们没有在它上面看到`Before running thread`行。这是因为每次线程没有被调用时，我们都会得到`WAIT_TIMEOUT`输出。尽管如此，我们还是在`threadProc()`函数中成功执行了代码。
- en: Triggering an event
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 触发事件
- en: 'After playing with thread in Windows, let''s try another concurrency type--`Event`.
    It is an action that can be triggered by the system. To know further about it,
    let''s take a look at the following code snippet where we create a new class named
    `Event` that implements `UniqueHandle` as well:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在玩转Windows中的线程之后，让我们尝试另一种并发类型--`Event`。它是由系统触发的动作。为了进一步了解它，让我们看一下以下代码片段，其中我们创建了一个名为`Event`的新类，它也实现了`UniqueHandle`：
- en: '[PRE18]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'As we can see in the preceding `Event` class implementation, we have the `Set()`,
    `Clear()`, and `Wait()` methods to set an event, clear an event, and wait for
    the event to complete respectively. We have two event types, which are automatic
    reset and manual reset, which are declared as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述的`Event`类实现中我们可以看到，我们拥有`Set()`、`Clear()`和`Wait()`方法，分别用于设置事件、清除事件和等待事件完成。我们有两种事件类型，即自动重置和手动重置，其声明如下：
- en: '[PRE19]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now, we will create content in the `main()` function. We will instance the
    `Event` class first, then we will check the event signaling. If it''s not signaled,
    we will set the event. On the contrary, we will clear the event. The code will
    be the following `event.cpp` code:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将在`main()`函数中创建内容。我们首先实例化`Event`类，然后我们将检查事件信号。如果没有信号，我们将设置事件。相反，我们将清除事件。代码如下`event.cpp`：
- en: '[PRE20]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'As we can see in the preceding code, here is what the code does:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如前述代码所示，以下是代码执行的内容：
- en: It creates the instance of the `Event` class in the `main()` function and manually
    resets the event.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它在`main()`函数中创建了`Event`类的实例并手动重置了事件。
- en: It invokes the `CheckEventSignaling()` function to find out the status of the
    event by passing the `Wait()` function to the `CheckEventSignaling()` function,
    which in turn calls the `WaitForSingleObject()` function.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它调用了`CheckEventSignaling()`函数，通过将`Wait()`函数传递给`CheckEventSignaling()`函数来找出事件的状态，该函数随后调用`WaitForSingleObject()`函数。
- en: It invokes the `Set()` and `Reset()` functions.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它调用了`Set()`和`Reset()`函数。
- en: 'Now run the preceding `event.cpp` code. You will see the following output on
    the console:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在运行前述的`event.cpp`代码。你将在控制台看到以下输出：
- en: '![](img/72bfd423-0b5b-4915-9711-490b1b27b46f.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/72bfd423-0b5b-4915-9711-490b1b27b46f.png)'
- en: If we take a look at the preceding screenshot, at first, the initialization
    of the `Event` class is not signaled. We then set the event, and it is now signaled
    as the status from the `CheckEventSignaling()` method. Here, we can say that we
    can check the status of the signaled event by calling the `WaitForSingleObject()`
    function.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看前述截图，最初`Event`类的初始化并没有被信号化。然后我们设置了事件，现在它已经被`CheckEventSignaling()`方法信号化了。在这里，我们可以说，我们可以通过调用`WaitForSingleObject()`函数来检查已信号化事件的状态。
- en: Calling an event from a thread
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从线程中调用事件
- en: 'Now, let''s use thread to call the `Event` class. However, before that, we
    have to be able to wrap more than one thread, call them together, and wait until
    their processes are finished. The following code block is a `Wrap()` function
    that will pack the threads:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用线程来调用`Event`类。然而，在那之前，我们必须能够包装多个线程，一起调用它们，并等待它们的过程完成。以下是一个`Wrap()`函数的代码块，它将包装线程：
- en: '[PRE21]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We will call the preceding `Wrap()` function when we join all the threads.
    So, we will need another function named `WaitAllThreads()`, as we can see in the
    following piece of code:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将所有线程连接起来时，我们将调用先前的`Wrap()`函数。因此，我们需要另一个名为`WaitAllThreads()`的函数，正如我们在以下代码片段中看到的那样：
- en: '[PRE22]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now, we can create our full code that will run the two threads using the following
    `eventthread.cpp` code:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以使用以下`eventthread.cpp`代码创建我们的完整代码，以运行两个线程：
- en: '[PRE23]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Moreover, if we run the preceding `eventthread.cpp` code, we will see the following
    output on the console screen:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果我们运行先前的`eventthread.cpp`代码，我们将在控制台屏幕上看到以下输出：
- en: '![](img/0a60a3d6-c786-4791-b43d-797e4d01e1e6.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0a60a3d6-c786-4791-b43d-797e4d01e1e6.png)'
- en: 'We have successfully triggered an `Event`, so it can be set to become signaled
    and can be cleared to become unsignaled in the `event.cpp` code. We have also
    successfully wrapped more than one thread, then called them together in the `eventthread.cpp`
    code. Now, let''s concatenate these two codes so we can access the event from
    the thread. The code should be like the following `eventthread2.cpp` code:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经成功触发了`事件`，因此可以在`event.cpp`代码中将其设置为可通知状态，也可以清除以使其变为不可通知状态。我们还成功封装了多个线程，然后在`eventthread.cpp`代码中将它们一起调用。现在，让我们将这些代码连接起来，以便从线程中访问事件。代码应该像以下`eventthread2.cpp`代码所示：
- en: '[PRE24]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In the preceding `eventthread2.cpp` code, we try to trigger the event using
    the thread. We initialize two `NullHandle` object threads at first. Then, we set
    the event and call the `Sleep()` function to make the event active. The `WaitAllThreads()`
    function then invokes the `threadProc()` function and runs each thread. This will
    trigger the event by calling the `ev.Wait()` function. The threads will be run
    then. The following screenshot is the output we will see on the console screen:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在先前的`eventthread2.cpp`代码中，我们尝试使用线程触发事件。首先，我们初始化两个`NullHandle`对象线程。然后，我们设置事件并调用`Sleep()`函数以使事件处于活动状态。随后，`WaitAllThreads()`函数调用`threadProc()`函数并运行每个线程。这将通过调用`ev.Wait()`函数来触发事件。然后线程将被运行。以下截图是我们在控制台屏幕上看到的输出：
- en: '![](img/94bc604a-76c4-49b3-9325-383479e5379f.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/94bc604a-76c4-49b3-9325-383479e5379f.png)'
- en: 'The preceding code is the event that we set manually to reset the event. This
    means that we have to state when we clear the event. Now, we pass `AutoReset`
    to the event instance. We will also modify the `threadProc()` function a little
    bit. The following piece of code is `eventthread3.cpp` that we are talking about:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 先前的代码是我们手动设置以重置事件的代码。这意味着我们必须声明何时清除事件。现在，我们将`AutoReset`传递给事件实例。我们还将稍微修改一下`threadProc()`函数。以下是我们正在讨论的`eventthread3.cpp`代码片段：
- en: '[PRE25]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'As we can see in the preceding code, we move the `Set()` method of the event
    from the `main()` function to the `threadProc()` function. Now, every time the
    `threadProc()` function is invoked, the event is set automatically. The following
    screenshot is the output we should see on the console screen:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述的代码所示，我们将事件的`Set()`方法从`main()`函数移动到`threadProc()`函数。现在，每次调用`threadProc()`函数时，事件都会自动设置。以下截图是我们应该在控制台屏幕上看到的输出：
- en: '![](img/c3e50f9d-5157-4271-a317-35d79fff8152.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c3e50f9d-5157-4271-a317-35d79fff8152.png)'
- en: Summary
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We have learned a concept of C++ concurrency in this chapter. We now can process
    a single thread as well as multithreads. We can also synchronize the multithreads
    so it can run smoothly; therefore, we can avoid synchronization issues and deadlock.
    Lastly, we can consume the handle resource in Windows to create a thread and trigger
    the event using that event.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了C++并发的一个概念。我们现在可以处理单个线程以及多线程。我们还可以同步多线程，使其能够平稳运行；因此，我们可以避免同步问题和死锁。最后，我们可以使用Windows中的句柄资源创建线程，并使用该事件触发事件。
- en: In the next chapter, we will apply all we have learned in the previous chapters
    to produce an application in a functional way. It will also explain how to test
    an application that is built using the C++ language.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将把前几章学到的所有知识应用到以功能方式生成应用程序。它还将解释如何测试使用C++语言构建的应用程序。
