- en: '14'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Deploying Multiplayer Games
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Deploying an Unreal multiplayer game can be a daunting task for any developer.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, I will present you with the key steps involved in packaging
    and deploying a game – a process that needs proper planning and preparation beforehand.
    This will help you avoid most issues, resulting in a successful launch at deploy
    time.
  prefs: []
  type: TYPE_NORMAL
- en: This process will also involve a crucial task – compiling Unreal Engine from
    its source code and then packaging your game as a standalone server executable
    and client executable.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, in the next sections, I will present you with the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Going online for real
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compiling Unreal Engine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a dedicated server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To follow the topics presented in this chapter, you should have completed all
    the previous chapters and have understood their content.
  prefs: []
  type: TYPE_NORMAL
- en: Although not mandatory, basic knowledge of Git technology ([https://git-scm.com](https://git-scm.com))
    will help in the second section of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Going online for real
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Up until now, to work on your projects, you have been utilizing an Unreal Engine
    official release that can be accessed through the Epic Games Launcher. However,
    if you aspire to enhance your skills in multiplayer development, you must take
    a further step to proficiently excel in this field and become an adept multiplayer
    game developer.
  prefs: []
  type: TYPE_NORMAL
- en: The first thing you need to know is that Unreal Engine releases are not “complete”
    versions of the software; they offer almost all that’s needed to work on your
    project, but they usually miss less common and more advanced features. One of
    the main reasons is to keep the regular version of Unreal Engine to a smaller,
    more affordable size.
  prefs: []
  type: TYPE_NORMAL
- en: Regrettably, these releases lack the necessary functionality to compile a project
    for multiplayer deployment, which in turn means that if you plan to release your
    game in the wild, you are out of luck.
  prefs: []
  type: TYPE_NORMAL
- en: Luckily there is a solution available – compiling the Unreal Engine Editor yourself
    directly from the source code. The full Unreal Engine source code is available
    in a repository hosted on GitHub ([https://github.com/](https://github.com/))
    and, with minimum effort, you will be able to get it and use it for your own needs.
    There are many advantages in compiling your own version of the engine, including
    peeking through the actual engine implementation classes – such as Actor and Pawn
    – and stepping inside the engine code while debugging your game to get an introspection
    on what’s happening.
  prefs: []
  type: TYPE_NORMAL
- en: 'A great number of individuals have made valuable contributions to the engine
    by identifying software glitches and taking the time to fix them. At the time
    of writing this chapter, the number of contributors to the engine is as many as
    563 developers, as shown in *Figure 14**.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.1 – The Unreal Engine GitHub page](img/Figure_14_01_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.1 – The Unreal Engine GitHub page
  prefs: []
  type: TYPE_NORMAL
- en: Another advantage of accessing the engine source code and compiling your own
    executable version is that you will be able to compile your multiplayer game as
    a **dedicated server** – a game version that will run without rendering any visuals
    and that will not run on a client machine. This kind of game instance is usually
    referred to as a **headless** game version.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using a dedicated server offers many advantages over a listen server:'
  prefs: []
  type: TYPE_NORMAL
- en: The size of the executable will be smaller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The server version will mainly focus on gameplay logic and handling information
    from the clients
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No client will have advantages or disadvantages over the others due to hosting
    the game session
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can build a dedicated server release separate from the client release and
    a client release from the dedicated server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The server-side code logic can be compiled just in the server, obfuscating important
    code that may be available to malevolent hackers if distributed inside the client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With this in mind, let’s kick off this exciting journey by creating our very
    own executable program for the Unreal Engine Editor using the source code.
  prefs: []
  type: TYPE_NORMAL
- en: The first thing to do is to obtain the actual source code from the GitHub repository
    – something we are going to do in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Compiling the Unreal Engine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you’ll be downloading the engine source code and building it
    to get a personal, executable release that will let you create your own dedicated
    servers for multiplayer deployment.
  prefs: []
  type: TYPE_NORMAL
- en: 'This process is divided into two main parts:'
  prefs: []
  type: TYPE_NORMAL
- en: Cloning the project from the official Epic Games GitHub repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up and building the sources with Visual Studio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don’t worry if you’re unfamiliar with GitHub – I’ll walk you through everything
    with clear and easy-to-follow step-by-step instructions.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading the Unreal Engine source project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'During the next steps, you will be downloading the Unreal Engine source code
    from the official Epic Games GitHub repository in order to have the full project
    in your hands. The requisites you will need to satisfy are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Have Git installed on your computer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Have a GitHub account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connect the GitHub account to your Epic Games account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you already know Git, chances are you will already have satisfied some or
    all of the requisites. If so, feel free to skip the following steps.
  prefs: []
  type: TYPE_NORMAL
- en: You will start by installing Git on your computer.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Git on your computer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Git** is a version control system that is both free and open source. It is
    designed to track the changes made to computer files, which it does by taking
    “snapshots” of a project’s files whenever a commit is executed. This feature enables
    developers to oversee and regulate their code’s evolution in an efficient, speedy
    fashion. Git is an excellent source code management tool for projects of all sizes,
    ranging from small to extremely large.'
  prefs: []
  type: TYPE_NORMAL
- en: As stated before, you don’t have to be proficient with Git in order to obtain
    the Unreal Engine repository – you will just be using its cloning capabilities
    to download the engine source code.
  prefs: []
  type: TYPE_NORMAL
- en: To install Git on your computer, head to the official download page ([https://git-scm.com/downloads](https://git-scm.com/downloads))
    and get the latest release. Once it is downloaded, simply install it as you would
    do with any common software. Once the installation phase has been completed, you
    will have the Git command line available on your machine.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'Some people – including me – prefer to use dedicated client software instead
    of using the command line, easing the pain of using the command prompt. If you
    feel uncomfortable with the command line, you can use a third-party client, some
    of which are listed on this page: [https://git-scm.com/downloads/guis](https://git-scm.com/downloads/guis).'
  prefs: []
  type: TYPE_NORMAL
- en: Once you have installed Git, you can safely proceed to create a GitHub account.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a GitHub account
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**GitHub** ([https://github.com/](https://github.com/)) is a cloud-based service
    that allows software developers to store, manage, track, and control changes made
    to their code base using Git. It enables developers to collaborate on projects
    from anywhere and provides a range of features such as project management tools,
    documentation, issue tracking, and continuous integration and deployment. GitHub
    is widely used in the software development industry and has become a crucial part
    of the software development workflow for many organizations and developers.'
  prefs: []
  type: TYPE_NORMAL
- en: To create a GitHub account, you just need to click the **Sign up** button and,
    after adding your email, follow the instructions you will be presented with.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have got your GitHub account, it’s time to get access to the Epic Games
    organization by connecting the GitHub and Epic Games accounts.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting your GitHub account to the Epic Games account
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Epic Games has a GitHub organization ([https://github.com/EpicGames](https://github.com/EpicGames))
    where public repositories are stored, including the Unreal Engine project. Accessing
    this organization is free – you just have to connect the Epic Games account to
    the GitHub one. Here’s how to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: Visit your Epic Games account page ([https://www.epicgames.com/account](https://www.epicgames.com/account)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **APPS AND** **ACCOUNTS** page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **GITHUB** section, click the **CONNECT** button, as shown in *Figure
    14**.2*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.2 – The Apps and Accounts section](img/Figure_14_02_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.2 – The Apps and Accounts section
  prefs: []
  type: TYPE_NORMAL
- en: Once you have authorized the connect operation, you will be granted access to
    the Epic Games GitHub organization ([https://github.com/EpicGames](https://github.com/EpicGames))
    and to the Unreal Engine repository ([https://github.com/EpicGames/UnrealEngine](https://github.com/EpicGames/UnrealEngine)).
    The Unreal Engine repository includes all the Unreal Engine versions organized
    in their own separate branches.
  prefs: []
  type: TYPE_NORMAL
- en: In Git, a `release` branch includes the latest stable release of the engine.
  prefs: []
  type: TYPE_NORMAL
- en: 'You are now ready to clone the repository on your local machine:'
  prefs: []
  type: TYPE_NORMAL
- en: On your PC, navigate to an empty folder or create a new one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Right-click and, from the drop-down menu, select **Git Bash Here**, as depicted
    in *Figure 14**.3*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.3 – The Git Bash Here option](img/Figure_14_03_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.3 – The Git Bash Here option
  prefs: []
  type: TYPE_NORMAL
- en: This will open a command prompt and you will be ready to clone the Unreal Engine
    project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You may be asked to enter your credentials; in this case, use those of your
    GitHub account.
  prefs: []
  type: TYPE_NORMAL
- en: The download and clone process may take a long time, depending on your internet
    connection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the process has finished, you should see an `UnrealEngine` folder in your
    directory; this is the project source code. In the Git terminal, type the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This command will retrieve all available branches in the remote repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an optional step, if you want to work with a particular release of the engine,
    you can type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For instance, if you need Unreal Engine 5.1, you will type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This command will switch to the 5.1 version branch and make its sources available.
  prefs: []
  type: TYPE_NORMAL
- en: Once the process has finished, you are ready to go and compile the sources.
  prefs: []
  type: TYPE_NORMAL
- en: Compiling from the source code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once you have downloaded the source code from the GitHub repository, you’ll
    need to compile it, in order to get an executable out of it. This will allow you
    to launch the compiled Unreal Engine application and take advantage of all its
    features.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are four main steps you’ll need to complete in order to have a fully
    working executable:'
  prefs: []
  type: TYPE_NORMAL
- en: Set up your programming IDE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set up the project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generate the project files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compile the source files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s get started by checking that your programming IDE is up to date and ready
    to go.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up your programming IDE
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As you have been working with Unreal and C++ so far, your programming IDE should
    already be up to date to compile the source files, but a double-check is mandatory,
    in order to have everything properly set up:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the Visual Studio installer on your PC.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select **Modify** from your own Visual Studio installation, as shown in *Figure
    14**.4*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.4 – Visual Studio Installer](img/Figure_14_04_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.4 – Visual Studio Installer
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the **Modyfing** window is open, select the **Individual components**
    tab, as shown in *Figure 14**.5*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.5 – The Modifying window](img/Figure_14_05_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.5 – The Modifying window
  prefs: []
  type: TYPE_NORMAL
- en: 'From the **Individual components** tab, install the latest .NET Framework development
    tools, the latest .NET Framework SDK and – not mandatory, but strongly recommended
    – all the previous versions of the .NET Framework SDK. *Figure 14**.6* depicts
    my setup at the time of writing this book:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.6 – The individual components setup](img/Figure_14_06_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.6 – The individual components setup
  prefs: []
  type: TYPE_NORMAL
- en: Once the installation is finished, you can safely close the Visual Studio installer
    and you’ll be ready to set up the project.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this step, you’ll be downloading the needed dependency files in order to
    properly set up the project. This process is pretty straightforward, but it may
    take some time, depending on your internet connection. Just open the source file
    project folder you cloned from GitHub, which should be named `Setup.bat` file,
    as shown in *Figure 14**.7*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.7 – The Setup.bat file](img/Figure_14_07_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.7 – The Setup.bat file
  prefs: []
  type: TYPE_NORMAL
- en: Then right-click on this file and select **Run as administrator**; this will
    open the command prompt and run the needed commands.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For a more advanced level of customization, you may want to pre-determine the
    target hardware and platform. For instance, you can run the `Setup.bat` command
    excluding unneeded platforms by using the `-exclude` option. As an extra benefit,
    fewer files will be downloaded and, by the end of the build process, you will
    get an engine with a smaller file size.
  prefs: []
  type: TYPE_NORMAL
- en: Once the process has finished, you will have added the needed dependencies and
    will be ready for the next step.
  prefs: []
  type: TYPE_NORMAL
- en: Generating the project files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Once you have properly set up your project, you are ready to generate the project
    files, in order to open the project in Visual Studio. The process is almost identical
    to the previous one, but you will have to run another `.bat` file instead. In
    the sources project folder (i.e., the `UnrealEngine` folder), locate the `GenerateProjectFiles.bat`
    file, as shown in *Figure 14**.8*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.8  – The GenerateProjectFiles.bat file](img/Figure_14_08_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.8 – The GenerateProjectFiles.bat file
  prefs: []
  type: TYPE_NORMAL
- en: 'Again, right-click on the file and select `UE.sln` file added to your source
    files folder, as depicted in *Figure 14**.9*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.9 – The .sln file](img/Figure_14_09_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.9 – The .sln file
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'If you require a greater degree of customization for the project generation
    command, I recommend referring to the official documentation, which provides an
    exhaustive list of all available command options: [https://docs.unrealengine.com/5.1/en-US/how-to-generate-unreal-engine-project-files-for-your-ide/](https://docs.unrealengine.com/5.1/en-US/how-to-generate-unreal-engine-project-files-for-your-ide/).'
  prefs: []
  type: TYPE_NORMAL
- en: You are now ready to open Visual Studio and build Unreal Engine.
  prefs: []
  type: TYPE_NORMAL
- en: Compiling the source files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We will now compile the source code in Visual Studio through the previously
    generated solution. To open it, just double-click on the `UE.sln` file and the
    software should open up.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you have more than one Visual Studio version, you may need to open the right
    one in order to correctly compile the project. This will depend on your PC configuration
    and .NET SDK installations.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing to do is to set the correct solution configuration. To do so,
    locate the **Solution Configurations** drop-down menu in the toolbar and set its
    value to **Development Editor**, as shown in *Figure 14**.10*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.10 – The Solution Configurations drop-down menu](img/Figure_14_10_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.10 – The Solution Configurations drop-down menu
  prefs: []
  type: TYPE_NORMAL
- en: Next, you need to check the solution platform you will be compiling for. In
    the Visual Studio toolbar, locate the **Solution Platforms** drop-down menu and
    double-check that the target platform is set to **Win64**, as shown in *Figure
    14**.11*
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.11 – The Solution Platforms drop-down menu](img/Figure_14_11_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.11 – The Solution Platforms drop-down menu
  prefs: []
  type: TYPE_NORMAL
- en: 'You are finally ready to start the build process. To do so, locate the `Engine`
    folder content. Then right-click on **UE5** and select **Build** as shown in *Figure
    14**.12*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.12 – The Build option](img/Figure_14_12_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.12 – The Build option
  prefs: []
  type: TYPE_NORMAL
- en: The build process will require a lot of time to complete (which will further
    depend on the capabilities of your computer), so you can relax and have a coffee
    break.
  prefs: []
  type: TYPE_NORMAL
- en: 'After completing the process, you’ll have something to celebrate! You’ve just
    created your very own, fresh-out-of-the-box executable for Unreal Engine. The
    `.exe` file can be found in your source files project, in the `Engine` | `Binaries`
    | `Win 64` folder. My own compiled binaries are shown in *Figure 14**.13*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.13 – The Unreal Engine compiled executable](img/Figure_14_13_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.13 – The Unreal Engine compiled executable
  prefs: []
  type: TYPE_NORMAL
- en: When you double-click on it, Unreal Engine will launch, and you’ll notice that
    things look pretty much the same as the regular Unreal Engine Editor. However,
    the difference is that, under the hood, you will have a more powerful engine with
    more features at your disposal.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you have accomplished the challenging task of compiling the
    Unreal Engine Editor from its source code – that’s something to be really proud
    of! Now, get ready for an even more challenging task in the next section, where
    you’ll be creating a dedicated server for a multiplayer game.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a dedicated server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you’ll be compiling a multiplayer project as a dedicated server.
    To keep things simple, you’ll be working with a simple project generated from
    one of the official templates, but all the topics and techniques can be easily
    adapted to any other project, including the Unreal Shadows project you’ve been
    working on so far.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to proceed with the creation of a dedicated server, your project must
    meet the specified requirements listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: You must utilize a source build of Unreal Engine – the one you compiled in the
    previous section
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your project must be created as a C++ one
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The project needs to, obviously, support client-server gameplay
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Without any more delays, let’s get started by creating the project.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, you’ll be creating a new project starting from an Unreal Engine
    template. To do this, the first thing you will need to do is to open your own
    compiled Unreal Engine Editor. So, locate the executable, which can be found in
    your GitHub downloaded directory using the following path:'
  prefs: []
  type: TYPE_NORMAL
- en: '`[Your Project Folder]` | `Engine` | `Binaries` | `Win64` | `UnrealEngine.exe`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Double-click on the file to launch the Unreal Engine Editor and, once it has
    started, create a new project with the following settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Template**: **Games** | **Third Person**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Project** **Name**: **TP_Multiplayer**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Project Type**: **C++** (if you opt for a **Blueprint** project, just remember
    that, later on, you will have to convert it to a C++ one when you need to compile
    the dedicated server; this will be a really easy task, as you will just need to
    add a C++ class to the project)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Leave **Starter** **Content** unchecked
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'My setup for this project is shown in *Figure 14**.14*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.14 – The project setup](img/Figure_14_14_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.14 – The project setup
  prefs: []
  type: TYPE_NORMAL
- en: Once the project has been created, you are ready to set up and build the project
    solution.
  prefs: []
  type: TYPE_NORMAL
- en: Building the project solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that you have created the project, locate the `Source` folder inside your
    project. Here, you will find two files named `TP_Multiplayer.Target.cs` and `TP_MultiplayerEditor.Target.cs`.
  prefs: []
  type: TYPE_NORMAL
- en: Target files are written in C# language and their purpose is to define how the
    Unreal Engine build tool will compile the target builds. In this case, the first
    one will be used when packaging a regular executable and the second one will be
    used for the Unreal Engine Editor.
  prefs: []
  type: TYPE_NORMAL
- en: We need to define a third one that will be used to package the server version
    of the application. In order to do this, in the same folder as the other two `.Target.cs`
    files, create a third target file and name it `TP_MultiplayerServer.Target.cs`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the file has been created, open it with your text editor of choice and
    insert the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: If you are not familiar with C# syntax, don’t worry! There’s not much to understand
    here – we are just defining a class named `TP_MultiplayerServerTarget` and, in
    the constructor, we are defining some build settings. The only thing to notice
    is that we have defined the built target type as `Server` as we need to create
    a dedicated server build.
  prefs: []
  type: TYPE_NORMAL
- en: 'Get back to the root folder of your project and locate the Unreal Engine project
    file, which should be called `TP_Multiplayer.uproject`. Right-click on it and,
    from the drop-down options, select **Generate Visual Studio project files**, as
    depicted in *Figure 14**.15*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.15 – The project file generation option](img/Figure_14_15_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.15 – The project file generation option
  prefs: []
  type: TYPE_NORMAL
- en: Once the generation process has finished, your project will be set to also compile
    a server build – something you will need to create your dedicated server.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can now open Visual Studio by double-clicking on the `TP_Multiplayer.sln`
    solution file, in order to create the needed builds. Once your programming IDE
    is opened, create your build by clicking on the **Solution Configurations** drop-down
    menu in the main toolbar and selecting **Development Server**, as shown in *Figure
    14**.16*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.16 – The solution configuration set as Development Server](img/Figure_14_16_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.16 – The solution configuration set as Development Server
  prefs: []
  type: TYPE_NORMAL
- en: You can now build the project by right-clicking on the **TP_Multiplayer** item
    in the **Solution Explorer** window and selecting **Build**.
  prefs: []
  type: TYPE_NORMAL
- en: Once the process has finished, you will have successfully built the development
    server, which will allow the Unreal build tool to recognize the server build target.
  prefs: []
  type: TYPE_NORMAL
- en: Before getting back to the Unreal Engine Editor, you will have to also build
    the Development Editor configuration, so repeat the previous steps with the Editor
    configuration by taking the following steps. In the main toolbar, click on the
    **Solution Configurations** drop-down menu and select **Development Editor**.
    Then build the project by right-clicking on the **TP_Multiplayer** item in the
    **Solution Explorer** window and selecting **Build**.
  prefs: []
  type: TYPE_NORMAL
- en: Once the build process has finished, you can safely close Visual Studio and
    get back to Unreal Engine to build the dedicated server.
  prefs: []
  type: TYPE_NORMAL
- en: Building the dedicated server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this subsection, you’ll be building a dedicated server executable for your
    project from the Unreal Engine Editor. The first thing you will need to do is
    to create a new map that will serve as an entry point for the server:'
  prefs: []
  type: TYPE_NORMAL
- en: From the main menu, select **File** | **New Level** and create a new **Basic**
    level.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Content Browser, create a `Maps` folder and save the level in it, calling
    it `Map_0`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **World Setting** window of the level, set **Game Mode Override** to
    **Game Mode Base**; this will avoid opening this level with the default Third
    Person Game Mode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This map will be used by the client as an entry point when connecting to the
    server. The next step is to update some project settings before starting the server
    packaging phase.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start by selecting **Edit** | **Project Settings** from the main menu.
    Then select the **Maps &** **Modes** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Default Modes** | **Selected GameMode** category, expand the **Advanced**
    section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set the **Global Default Server Game Mode** drop-down value to **BP_ThirdPersonGameMode**,
    as shown in *Figure 14**.17*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.17 – Global Default Server Game Mode](img/Figure_14_17_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.17 – Global Default Server Game Mode
  prefs: []
  type: TYPE_NORMAL
- en: The aforementioned setup will define the Game Mode that will be used by clients
    when connected to the server.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are now going to define the game and server maps, in order to set the entry
    point that will be used when the clients connect. Locate the **Default Maps**
    category and do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: In the **Game Default Map** drop-down menu, select **Map_0**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Expand the **Advanced** section and, in the **Server Default Map** drop-down
    menu, select **ThirdPersonMap**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The final result for the **Default Maps** category is shown in *Figure 14**.18*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.18 – The Default Maps category](img/Figure_14_18_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.18 – The Default Maps category
  prefs: []
  type: TYPE_NORMAL
- en: 'We are done with the **Maps & Modes** settings. You will now need to define
    the packaging settings for your project:'
  prefs: []
  type: TYPE_NORMAL
- en: In **Project Settings**, expand the **Packaging** | **Advanced** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Locate the **List of maps to include in the packaged build** array field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the **+** button to add the **Map_0.umap** level.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the **+** button again to add the **ThirdPersonMap.umap** level.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should now have a setup pretty similar to the one shown in *Figure 14**.19*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.19 – The list of maps to be packaged in the build](img/Figure_14_19_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.19 – The list of maps to be packaged in the build
  prefs: []
  type: TYPE_NORMAL
- en: As an additional step, double-check that in the **Project** category, the **Build**
    configuration is set to **Development**; this will allow us to connect to the
    server through the command line later on in this chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Close the **Project Settings** window and in the Unreal Engine main toolbar,
    click the **Platforms** button and select **Windows** | **TP_MultiplayerServer**
    to set the build target, as shown in *Figure 14**.20*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.20 – Building the server](img/Figure_14_20_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.20 – Building the server
  prefs: []
  type: TYPE_NORMAL
- en: Next, click **Windows** | **Package Content** to start packaging the application
    and, once the build has finished, you will have in your hands a dedicated server
    executable!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To get a client executable, you will have to repeat the same steps as above,
    using a different build target. To do so, in the Unreal Engine main toolbar, click
    the **Platforms** button and select **Windows** | **TP_Multiplayer** to set the
    build target, as shown in *Figure 14**.21*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![ Figure 14.21 – Building the client](img/Figure_14_21_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.21 – Building the client
  prefs: []
  type: TYPE_NORMAL
- en: Then, click **Windows** | **Package Content** to start packaging the client
    build. Once it has finished, you will also have the client executable, and you
    will be ready to test the application.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that both the dedicated server and the client have been successfully built,
    it’s time to test their functionalities.
  prefs: []
  type: TYPE_NORMAL
- en: To start your server locally, all you have to do is double-click on the build
    executable you created in the previous steps.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, if you are interested in checking the server log, you can take
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the Windows Command Prompt.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Through the `cd` command, navigate to the folder that contains the server executable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Insert the name of your server executable, followed by the `–log` parameter,
    for instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Once the server has started, it will start listening for connection requests
    from clients.
  prefs: []
  type: TYPE_NORMAL
- en: As we have used an out-of-the-box, base template and we did not implement any
    session logic, we will be connecting the clients from the Unreal Engine command
    line. This is something you obviously won’t use in a final release but that is
    really handy at development time.
  prefs: []
  type: TYPE_NORMAL
- en: The command line is available in the client executable because we compiled the
    project as a development build in the previous steps.
  prefs: []
  type: TYPE_NORMAL
- en: To start the client application, all you have to do is to double-click on the
    executable, which should be named `TP_Multiplayer.exe`. This will open the executable
    with the default starting map (i.e., `Map_0`).
  prefs: []
  type: TYPE_NORMAL
- en: 'As stated before, to connect to the server, we will be using the console command,
    which can be opened by default with the ’ character (i.e., backtick). Once the
    console is open, enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The client application with the console command open is shown in *Figure 14**.22*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.22 – The client application with the console command open](img/Figure_14_22_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.22 – The client application with the console command open
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you are using a keyboard that does not support the backtick character (like
    mine), you can easily change the keyboard shortcut by opening **Editor Preferences**
    and looking for the **Open Console Command** **Box** field.
  prefs: []
  type: TYPE_NORMAL
- en: 'The client should now open the regular Third Person map and your client will
    be connected to the dedicated server. To double-check this, if you started the
    server with the `–log` option enabled, you should see a log message similar to
    this one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: And that’s it – you have finally succeeded in creating your own dedicated server
    and connecting your clients to a LAN!
  prefs: []
  type: TYPE_NORMAL
- en: If you want an extra challenge, you can give compiling the Unreal Shadows project
    with a dedicated server a try. You already have some knowledge in this area, so
    it shouldn’t take too much effort.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, if you want to go deeper into this topic, Epic Games has provided
    a full tutorial on how to compile Lyra Starter Game ([https://docs.unrealengine.com/5.1/en-US/lyra-sample-game-in-unreal-engine/](https://docs.unrealengine.com/5.1/en-US/lyra-sample-game-in-unreal-engine/)),
    a real-world project including many of the topics covered in this book. The link
    to the tutorial is [https://docs.unrealengine.com/5.1/en-US/setting-up-dedicated-servers-in-unreal-engine/](https://docs.unrealengine.com/5.1/en-US/setting-up-dedicated-servers-in-unreal-engine/).
  prefs: []
  type: TYPE_NORMAL
- en: Anything is possible with a little bit of hard work!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you have faced the frightening task of downloading the Unreal
    Engine Editor source code from GitHub and compiling it into an executable application.
  prefs: []
  type: TYPE_NORMAL
- en: If you plan to make a living as a multiplayer developer, building Unreal Engine
    source code is a mandatory skill whenever you want to set up a dedicated server
    for your game or need to customize the engine’s networking and multiplayer settings.
  prefs: []
  type: TYPE_NORMAL
- en: As you have discovered, building and packaging a dedicated server is not an
    easy task and requires a lot of time and patience – and sometimes a bit of luck!
  prefs: []
  type: TYPE_NORMAL
- en: In the next – and final – chapter, you will learn how to take a step further
    in multiplayer game development by using online cloud services, specifically Epic
    Online Services.
  prefs: []
  type: TYPE_NORMAL
