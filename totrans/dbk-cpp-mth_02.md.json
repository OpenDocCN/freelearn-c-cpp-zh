["```cpp\n#include <iostream>\ntypedef struct S {\n   int a;\n} S, const *CSP;\nint main() {\n   S s1; s1.a = 1;\n   CSP ps1 = &s1;\n   std::cout << ps1->a;\n}\n```", "```cpp\nstruct person {\n   void set_age(int page) { m_age = page; }\n   int get_age() const { return m_age; }\n   __declspec (property(get = get_age, put = set_age)) int age;\n   person() = default;\nprivate:\n   int m_age;\n};\nint main() {\n   person joe;\n   joe.age = 12;\n   std::cout << \"Hello \" << joe.age;\n}\n```", "```cpp\nchar arr[6] = {'a', 'b', \"cde\"};\n```", "```cpp\nclass person {\npublic:\n   int age;\n   class {\n   public:\n       std::string name;\n   };\n};\n```", "```cpp\nint main() {\n   person joe;\n   joe.name = \"Joe\";\n   std::cout << \"Hello \" << joe.name;\n}\n```", "```cpp\nint main() {\n   std::vector<void*> labels = { &&start, &&state1, &&state2, &&end };\n   int state = 0;\n   goto *labels[state];\n   start:\n       std::cout << \"In start state\" << std::endl;\n       state = 1;\n       goto *labels[state];\n   state1:\n       std::cout << \"In state 1\" << std::endl;\n       state = 2;\n       goto *labels[state];\n   state2:\n       std::cout << \"In state 2\" << std::endl;\n       state = 3;\n       goto *labels[state];\n   end:\n       std::cout << \"In end state\" << std::endl;\n       return 0;\n}\n```", "```cpp\nint y = ({ int x = 10; x + 5; });\n```", "```cpp\n#include <iostream>\nint main() {\n   int (^square)(int) = ^(int num) { return num * num; };\n   int y = square(12);\n   std::cout << y << std::endl;\n}\n```", "```cpp\nauto square = [](int num) ->int { return num * num; };\n```", "```cpp\nauto generate(int n) -> std::vector<int>{\n   int array[n] = {0};\n   for(int i=0; i<n; i++) array[i] = i;\n   return std::vector<int>{array, array + n};\n}\n```", "```cpp\nerror: variable-sized object may not be initialized\n   5 |     int array[n] = {0};\n```", "```cpp\nauto generate(int n) -> std::vector<int>{\n   int array[n];\n   for(int i=0; i<n; i++) array[i] = i;\n   return std::vector<int>{array, array + n};\n}\n```", "```cpp\nvoid old_function() __attribute__((deprecated));\nvoid fatal_error() __attribute__((noreturn));\nint pure_function(int x) __attribute__((pure));\nint x __attribute__((aligned(16)));\nvoid old_function() {\n   std::cout << \"This function is deprecated.\";\n}\nvoid fatal_error() {\n   std::cerr << \"This function does not return.\";\n   exit(1);\n}\nint pure_function(int x) {\n   return x * x;\n}\n```", "```cpp\n#ifndef MYCONTROL_H\n#define MYCONTROL_H\n#include <QObject>\n#include <QPushButton>\n#include <QWidget>\nclass MyControl : public QWidget {\n   Q_OBJECT\npublic:\n   MyControl(QWidget *parent = nullptr);\nprivate slots:\n   void onButtonClicked();\nsignals:\n   void nameChanged(const QString &name);\nprivate:\n   QPushButton *myButton;\n};\n#endif\n```", "```cpp\n#include <iostream>\n#include <atlstr.h>\n#include <stdio.h>\nusing namespace System;\nint main() {\n   array<String^>^ args = { \"managed\", \"world\" };\n   String^ s = \"Hello\";\n   for each (String ^ a in args) s += \" \" + a ;\n   CString cs(s);\n   wprintf(cs);\n}\n```", "```cpp\n#include <array>\n#include <iostream>\n#include <string>\nint main() {\n   std::array<std::string, 2> args = { \"unmanaged\", \"world\" };\n   std::string s = \"Hello\";\n   for(const auto& a : args) {\n       s += \" \" + a ;\n   }\n   std::cout << s;\n}\n```", "```cpp\nclass Counter {\n   int viewCount = 0;\npublic:\n   void view() const {\n       const_cast<Counter*>(this)->viewCount++;\n   }\n   void print() const {\n       std::cout << \"Count: \" << viewCount << std::endl;\n   }\n};\n```", "```cpp\ntemplate <unsigned int N>\nstruct Factorial {\n   static const unsigned long long value = N * Factorial<N - 1>::value;\n};\ntemplate <>\nstruct Factorial<0> {\n   static const unsigned long long value = 1;\n};\nconst unsigned long long fac5 =  Factorial<5>::value;\n```", "```cpp\nconstexpr unsigned long long factorial(unsigned int n) {\n   return n <= 1 ? 1 : n * factorial(n - 1);\n}\nconst unsigned long long fac5too =  factorial(5);\n```"]