- en: Additional Topics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Congratulations! The projects you've built in this book have started you on
    the road to becoming a Godot expert. However, you've only just scratched the surface
    of what's possible in Godot. As you become more proficient, and the size of your
    projects grows, you'll need to know how to find solutions to your problems, how
    to distribute your games so they can be played, and even how to extend the engine
    yourself.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you''ll learn about the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: How to effectively use Godot's built-in documentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exporting projects to run on other platforms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using other programming languages in Godot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use Godot's asset library to install plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Becoming a Godot contributor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Community resources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Godot's documentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Learning Godot''s API can seem overwhelming at first. How can you learn all
    the different nodes, and the properties and methods each one contains? Fortunately,
    Godot''s built-in documentation is there to help you. Develop the habit of using
    it often: it will help you find things when you''re learning, but it''s also a
    great way to quickly look up a method or property for reference once you know
    your way around.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you are in the Script tab of the editor, you''ll see the following buttons
    in the upper-right corner:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00175.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The Online Docs button will open the documentation website in your browser.
    If you have a multimonitor setup, it can be very useful to keep the API reference
    open on one side for quick reference while you're working in Godot.
  prefs: []
  type: TYPE_NORMAL
- en: 'The other two buttons allow you to view the documentation directly in the Godot
    editor. The Classes button allows you to browse through the available node and
    object types, while the Search Help button lets you search for any method or property
    name. Both searches are *smart*, meaning you can type part of a word and the results
    will be narrowed down as you type. Take a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00176.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: When you find the property or method you're looking for, click Open and the
    documentation reference for that node will appear.
  prefs: []
  type: TYPE_NORMAL
- en: Reading the API documentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you''ve found the documentation for the node you want, you''ll see that
    it follows a common format, with the name of the node at the top followed by several
    subsections of information, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00177.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'At the top of the document is a list titled Inherits, which shows you the chain
    of classes that a particular node is built from all the way back to `Object`,
    which is Godot''s base object class. For example, an `Area2D` node has the following
    inheritance chain:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This lets you quickly see what other properties this type of object may have.
    You can click on any of the node names to jump to that node's documentation.
  prefs: []
  type: TYPE_NORMAL
- en: You can also see a list of what node types, if any, inherit from that particular
    node, as well as a general description of the node. Below that, you can see the
    member variables and methods of the node. The names of most methods and types
    are links, so you can click on any item to read more about it.
  prefs: []
  type: TYPE_NORMAL
- en: Develop the habit of consulting the API documentation regularly as you work.
    You'll find that you will quickly begin to develop a stronger understanding of
    how everything works together.
  prefs: []
  type: TYPE_NORMAL
- en: Exporting projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Eventually, your project will reach the stage where you want to share it with
    the world. *Exporting* your project means converting it into a package that can
    be run by someone who doesn't have the Godot editor. You can export your project
    for a number of popular platforms.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the time of writing, Godot supports the following target platforms:'
  prefs: []
  type: TYPE_NORMAL
- en: Windows Universal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows Desktop
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: macOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Android (mobile)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iOS (mobile)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTML5 (web)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The method for exporting the project varies depending on the platform you are
    targeting. For example, to export for iOS, you must be running on a macOS computer
    with Xcode installed.
  prefs: []
  type: TYPE_NORMAL
- en: Each platform is unique, and some features of your game may not work on some
    platforms because of hardware limitations, screen size, or other factors. As an
    example, if you wanted to export the Coin Dash game (from [Chapter 1](part0022.html#KVCC0-5809b3bef8d2453086d97dfad17b2ee2),
    *Introduction*) for the Android platform, your player wouldn't be able to move
    because the keyboard controls wouldn't work! For that platform, you would need
    to include touchscreen controls in your game's code (more about this later).
  prefs: []
  type: TYPE_NORMAL
- en: You may even find that you need to set different values in Project Settings
    for different platforms. You can do this by selecting the setting and clicking
    Override For....This will create a new setting specific to that platform.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if you want to enable HiDPI support, but not allow it for Android,
    you can create an override for that setting:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00178.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Every platform is unique, and there are many factors to consider when configuring
    your project for export. Consult the official documentation for the latest instructions
    on exporting to your desired platform.
  prefs: []
  type: TYPE_NORMAL
- en: Getting the export templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Export templates* are versions of Godot that are compiled for each target
    platform, but don''t include the editor. Your project will be combined with the
    target platform''s template to create a standalone application.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin, you must download the export templates. Click on Manage Export Templates
    from the Editor menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00179.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In this window, you can click Download to fetch the export templates:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00180.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Templates can also be downloaded from the Godot website at [http://godotengine.org/download](http://godotengine.org/download).
    If you choose to do this, use the Install From File button to complete the installation.
  prefs: []
  type: TYPE_NORMAL
- en: The template's version must match the version of Godot you are using. If you
    upgrade to a new version of Godot, make sure that you also download the corresponding
    templates, or your exported project may not work properly.
  prefs: []
  type: TYPE_NORMAL
- en: Export presets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you''re ready to export your project, click on Project | Export:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00181.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In this window, you can create *presets* for each platform by clicking Add...
    and selecting the platform from the list. You can make as many presets for each
    platform as you wish. For example, you may want to create both Debug and Release
    versions of your projects.
  prefs: []
  type: TYPE_NORMAL
- en: Each platform has its own settings and options, too many to describe here. The
    default values are typically good, but you should test them thoroughly before
    distributing the project.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Resources tab, you can customize which portions of your project are
    exported. For example, you can choose to only export selected scenes or to exclude
    certain source files from the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00182.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The Patches tab allows you to create updates for your previously exported projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, the Features tab displays a summary of the features (configured in
    the Options tab) for the platform. These features can determine which properties
    are customized by the Override value in the Project Settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00183.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Exporting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are two export buttons at the bottom of the window. The first button, Export
    PCK/Zip, will only create a PCK, or packed, version of your project's data. This
    doesn't include an executable, so the game can't be run on its own. This method
    is useful if you need to provide add-ons or DLC (downloadable content) for your
    game.
  prefs: []
  type: TYPE_NORMAL
- en: The second button, Export Project, will create an executable version of your
    game, such as an `.exe` for Windows or an `.apk` for Android.
  prefs: []
  type: TYPE_NORMAL
- en: Click Save and you will have a playable version of your game.
  prefs: []
  type: TYPE_NORMAL
- en: Example – Coin Dash for Android
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have an Android device, you can follow this example to export the Coin
    Dash game for mobile platforms. For other platforms, see Godot's documentation
    at [http://docs.godotengine.org/en/latest/getting_started/workflow/export](http://docs.godotengine.org/en/latest/getting_started/workflow/export).
  prefs: []
  type: TYPE_NORMAL
- en: Mobile devices come with a wide variety of capabilities. Always consult the
    official documentation in the preceding link for information on your platform
    and what restrictions, if any, may apply to your device. In most cases, Godot's
    default settings will work, but mobile development is sometimes more art than
    science, and you may need to do some experimenting and searching for help in order
    to get everything working.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Because the game as written in this chapter uses keyboard controls, you won''t
    be able to play on a mobile device without making some changes. Fortunately, Godot
    has support for touchscreen input. First, open Project Settings, and in the Display/Window
    section, make sure Orientation is set to portrait and Emulate Touchscreen is On.
    This will let you test the program on your computer by treating mouse clicks as
    touch events:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00184.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, you need to change the player controls. Instead of using the four direction
    inputs, the player will move toward the position of the touch event. Change the
    player script as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Try it out and make sure that mouse clicks are causing the player to move. If
    everything is working, you're ready to set up your computer for Android development.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing your system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to export your project to Android, you'll need to download the Android
    **software development kit** (**SDK**) from [https://developer.android.com/studio/](https://developer.android.com/studio/)
    and the **Java Development Kit** (**JDK**) from [http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'When you run Android Studio for the first time, click on Configure | SDK Manager
    and make sure that you install Android SDK Platform-Tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00185.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This will install the `adb` command-line tool, which Godot uses to communicate
    with your device.
  prefs: []
  type: TYPE_NORMAL
- en: 'After you''ve installed the development tools, create a debug keystore by running
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In Godot, click on Editor | Editor Settings, find the Export/Android section,
    and set the paths to the applications on your system. Note that you''ll only have
    to do this once, as the editor settings are independent of the project settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00186.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Exporting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You''re now ready to export. Click on Project | Export and add a preset for
    Android (see the previous section). Click the Export Project button and you''ll
    have an **Android Package Kit** (**APK**) you can install on your device. You
    can do this with a graphical tool or from the command line using `adb`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that if your system supports it, connecting a compatible Android device
    will cause the one-click deploy button to appear in the Godot editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00187.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking this button will export the project and install it on your device
    in one step. Your device may need to be in developer mode for this to happen:
    consult your device''s documentation for details.'
  prefs: []
  type: TYPE_NORMAL
- en: Shaders
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A *shader* is a program that is designed to run in the GPU, and alters the way
    that objects appear on the screen. Shaders are used extensively in both 2D and
    3D development to create a variety of visual effects. They are called shaders
    because they were originally used for shading and lighting effects, but today
    they are used for any number of visual effects. Because they run in the GPU in *parallel*,
    they are very fast, but also come with some restrictions.
  prefs: []
  type: TYPE_NORMAL
- en: This section is a very brief introduction to the concept of shaders. For a more
    in-depth understanding, see [https://thebookofshaders.com/](https://thebookofshaders.com/)
    and Godot's shader documentation at [http://docs.godotengine.org/en/latest/tutorials/shading/shading_language.html](http://docs.godotengine.org/en/latest/tutorials/shading/shading_language.html).
  prefs: []
  type: TYPE_NORMAL
- en: In Godot 3.0, shaders are written in a language very similar to GLSL ES 3.0\.
    If you are familiar with C, you will find the syntax very similar. If you are
    not, it may look strange to you at first. See the end of this section for links
    to further resources where you can learn more.
  prefs: []
  type: TYPE_NORMAL
- en: 'Shaders in Godot come in three types: **spatial** (for 3D rendering), **canvas
    item** (for 2D), and **particles** (for rendering particle effects). The first
    line of your shader must declare which of these types you are writing.'
  prefs: []
  type: TYPE_NORMAL
- en: After determining the type of shader, you have another three choices of what render
    phase(s) you want to affect: fragment, vertex, and/or light. Fragment shaders
    are used to set the color of every affected pixel. Vertex shaders are used to
    modify the vertices of a shape or mesh (and thus are typically used more in 3D
    applications). Finally, light shaders are applied to alter the way light is processed
    for an object.
  prefs: []
  type: TYPE_NORMAL
- en: After choosing the type(s) of your shader, you will then write code that will
    be run *simultaneously* on every affected item. This is where the real power of
    shaders comes from. For example, when using a fragment shader, the code is run
    on every pixel of the object at the same time. This is a very different process
    than what you might be used to using a traditional language, where you would loop
    over each pixel one at a time. That kind of sequential code just isn't fast enough
    to handle the huge number of pixels modern games need to process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider a game running at the relatively low resolution of 480 x 720\. The
    total number of pixels on the screen is almost 350,000\. Any manipulation of those
    pixels in code must happen in less than 1/60 of a second to avoid lag—even less
    when you consider the rest of your code that also has to run for every frame:
    game logic, animation, networking, and everything else. This is why GPUs are so
    important, especially for high-end games that may be processing millions of pixels
    for each frame.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a shader
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To demonstrate some shader effects, create a scene with a `Sprite` node and
    choose any texture you like. This demo will use the cactus image from Coin Dash:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00188.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: A shader can be added to any `CanvasItem` derived node—in this case, `Sprite`,
    via its Material property. In this property, select New Shader Material and click
    on the newly created resource. The first property is Shader, where you can choose
    a New Shader. When you do, a Shader panel appears at the bottom of the editor
    window.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is where you''ll write your shader code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00189.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'A blank shader looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: For the purposes of this example, you'll be coding a 2D-fragment shader, so
    you won't need to include the other two functions.
  prefs: []
  type: TYPE_NORMAL
- en: Shader functions have a number of *built-ins*, which are either input values
    or output values. For example, the `TEXTURE` input built-in contains the pixel
    data of the object's texture, while the `COLOR` output built-in is used to set
    the result of your calculation. Remember, a fragment shader's purpose is to affect
    the color of every processed pixel.
  prefs: []
  type: TYPE_NORMAL
- en: 'When working with shaders in the `TEXTURE` property, for example, coordinates
    are measured in a *normalized* (that is, ranging from `0` to `1`) coordinate space.
    This coordinate space is called `UV` to distinguish it from the *x*/*y* coordinate
    space:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00190.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As a result, all values in coordinate vectors will range from `0` and `1`.
  prefs: []
  type: TYPE_NORMAL
- en: As a very small example, this first shader will take the pixels of the cactus
    image and change them all to a single color. To allow you to choose the color,
    you can use a `uniform` variable.
  prefs: []
  type: TYPE_NORMAL
- en: Uniforms allow you to pass data into the shader from outside. Declaring a `uniform` variable will
    cause it to appear in the Inspector (similar to how `export` works in GDScript)
    and also allow you to set it via code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type the following code into the Shader panel:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the image change immediately: The whole image turns black. To
    select a different color, click on the Material in the inspector, and you''ll
    see your `uniform` variable listed under Shader Param:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00191.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You''re not done, however. The image just turned to a colored rectangle, but
    you only want the cactus to change color, not its surrounding transparent pixels.
    Add one more line after setting `COLOR.rgb`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This last line makes the shader output every pixel with the same alpha (transparency)
    value as the pixel in the original texture. Now the empty area around the cactus
    remains transparent, with an alpha of `0`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code shows one more example. In this shader, you create a blur
    effect by setting each pixel''s color to the average value of the pixels around
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that since you''ve added five color values together (the original pixel''s,
    plus the four that are found by moving in each direction around it), you need
    to divide by `5.0` to get the average value. The larger you make the `radius`,
    the more "smeared" the image looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00192.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Learning more
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Shaders are capable of an amazing range of effects. Experimenting with Godot's
    shader language is a great way to learn the basics, but there is also a wealth
    of resources on the internet for learning more. When learning about shaders, you
    can use resources that aren't specific to Godot, and you shouldn't have much trouble
    getting them to work in Godot. The concept is the same across all types of graphics
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: To see some examples of just how powerful shaders can be, visit [https://www.shadertoy.com/](https://www.shadertoy.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Using other languages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The projects in this book have all been written using GDScript. GDScript has
    a number of advantages that make it the best choice for building your games. It
    is very tightly integrated with Godot's API, and its Python-style syntax makes
    it useful for rapid development while also being very beginner-friendly.
  prefs: []
  type: TYPE_NORMAL
- en: It's not the only option, however. Godot also supports two other "official"
    scripting languages, and also provides tools for integrating code using a variety
    of other languages.
  prefs: []
  type: TYPE_NORMAL
- en: C#
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the release of Godot 3.0 in early 2018, support was added for C# as a scripting
    language for the first time. C# is very popular in game development, and the Godot
    version is based on the Mono 5.2 .NET framework. Because of its wide use, there
    are many resources available for learning C# and a great deal of existing code
    in the language for accomplishing a variety of game-related functions.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing, the current Godot version is 3.0.2\. In this version,
    C# support should be considered preliminary; it is functional, but has not been
    fully tested. Some features and capabilities, such as exporting projects, are
    not yet supported.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to try out the C# implementation, you'll need to first make sure
    you have Mono installed, which you can get from [http://www.mono-project.com/download/](http://www.mono-project.com/download/).
    You must also download the Godot version that has C# support included, which you
    can find at [http://godotengine.org/download](http://godotengine.org/download) where
    it is labeled Mono Version.
  prefs: []
  type: TYPE_NORMAL
- en: You'll probably also want to use an external editor—such as Visual Studio Code
    or MonoDevelop—that provides more debugging and language functionality than Godot's
    built-in editor. You can set this in Editor Settings under the Mono section.
  prefs: []
  type: TYPE_NORMAL
- en: 'To attach a C# script to a node, select the language from the Attach Node Script
    dialog:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00193.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In general, scripting in C# works very much the same as what you've seen with
    GDScript. The main difference is that API functions are renamed in `PascalCase`
    to follow C# standards instead of `snake_case`, which is the standard for GDScript.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of `KinematicBody2D` movement using C#:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: For more details about using C#, see the **Scripting** section of the documentation
    at [http://docs.godotengine.org/en/latest/getting_started/scripting/](http://docs.godotengine.org/en/latest/getting_started/scripting/).
  prefs: []
  type: TYPE_NORMAL
- en: VisualScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Visual scripting is intended to provide an alternative scripting method using
    a drag-and-drop visual metaphor instead of written code. To create a script, you
    drag nodes (not to be confused with Godot's nodes) representing functions and
    data, and connect them by drawing lines. Running your script means following the
    path of the line through the nodes. The goal of this style of presentation is
    to provide a more intuitive way to visualize program flow for non-programmers,
    such as artists or animators, who need to collaborate on a project.
  prefs: []
  type: TYPE_NORMAL
- en: In practice, this goal has yet to be reached in a practical way. Godot's VisualScript
    was also added for the first time in version 3.0, and it is currently not mature
    enough as a feature to be used in an actual project. As with C#, it should be
    considered in testing, and if you're interested in it, your testing and feedback
    will be very valuable to the Godot team in improving its functionality.
  prefs: []
  type: TYPE_NORMAL
- en: One potential strength of VisualScript is to use it as a second layer of scripting.
    You can create an object's core behavior in GDScript, and then a game designer
    can use a VisualScript that calls the functions of those scripts in visual nodes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot is an example VisualScript project. Here, you can
    see a portion of the player movement code in Coin Dash:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00194.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The player movement code in Coin Dash
  prefs: []
  type: TYPE_NORMAL
- en: Native code – GDNative
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many programming languages to choose from. Each has its strengths
    and weaknesses, as well as its fans who prefer to use it over other options. While
    it doesn't make sense to support every language directly in Godot, there are situations
    where GDScript is no longer sufficient to solve a particular problem. Perhaps
    you want to use an existing external library, or you're doing something computationally
    intensive—such as AI or procedural world generation—that doesn't make sense for
    GDScript.
  prefs: []
  type: TYPE_NORMAL
- en: Because GDScript is an interpreted language, it trades performance for flexibility.
    This means that for some processor-intensive code, it can run unacceptably slow.
    In this case, the highest performance would be achieved by running native code
    written in a compiled language. In this situation, you can move that code to a
    GDNative library.
  prefs: []
  type: TYPE_NORMAL
- en: GDNative is a C API that can be used by external libraries to interface with
    Godot. These external libraries can be your own or any existing third-party libraries
    that you may need for a particular project.
  prefs: []
  type: TYPE_NORMAL
- en: 'In GDScript, you can then use the `GDNative` and `GDNativeLibrary` classes
    to load and call functions from these libraries. The following code is an example
    of calling a library that has been saved as a `GDNativeLibrary` resource file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Whereas, the library might look something like this (in C):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Keep in mind that writing code like this is definitely more involved than sticking
    to pure GDScript. In a native language, you'll need to handle calling constructors
    and destructors for objects and manually manage working with Godot's `Variant`
    class. You should only resort to using GDNative when performance truly becomes
    an issue, and even then, only use it if the functionality really demands its use.
  prefs: []
  type: TYPE_NORMAL
- en: If this section made no sense at all to you, don't worry. Most Godot developers
    will never need to delve into this side of development. Even if you find yourself
    needing higher-performance code, you may only need to look at the Asset library
    to find that someone has already created a library for you. You can find out about
    the Asset library in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Language bindings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another benefit of GDNative is that it has allowed proponents of other languages
    to create API bindings to enable scripting in those languages.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing, several projects are available that use GDNative to
    allow you to use other languages for scripting. These include C, C++, Python,
    Nim, D, Go, and others. While these additional language bindings are still relatively
    new at the time of writing, they each have a dedicated group of developers working
    on them. If you're interested in using a particular language with Godot, a Google
    search of "godot + <language name>" will help you find what's available.
  prefs: []
  type: TYPE_NORMAL
- en: Asset library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At the top of the editor window, in the Workspaces section, you''ll find a
    button labeled AssetLib:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00195.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking this button will take you to Godot''s Asset library. This is a collection
    of add-ons, tools, and utilities contributed by the Godot community that you may
    find useful in your projects. For example, if you search for `State`, you''ll
    see that there is a tool called **finite state machine** (**FSM**) available in
    the library. You can click on its name for more information, and if you decide
    you want to try it out, click Install to download it into the `res://addons/`
    folder, which will be created if it doesn''t already exist:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00196.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You then need to enable the add-on by opening Project Settings and choosing
    the Plugins tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00197.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The plugin is now ready to use. Be sure to read the plugin author's instructions
    to understand how it works.
  prefs: []
  type: TYPE_NORMAL
- en: Contributing to Godot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Godot is an open source, community-driven project. All of the work that's done
    to build, test, document, and otherwise support Godot is done primarily by passionate
    individuals contributing their time and skills. For the majority of contributors,
    it is a labor of love, and they take pride in helping to build something of quality
    that people enjoy using.
  prefs: []
  type: TYPE_NORMAL
- en: In order for Godot to continue growing and improving, there is always a need
    for more members of the community to step up and contribute. There are many ways
    you can help out, regardless of your skill level or the amount of time you can
    commit.
  prefs: []
  type: TYPE_NORMAL
- en: Contributing to the engine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are two main ways you can directly contribute to Godot''s development.
    If you visit [https://github.com/godotengine/godot](https://github.com/godotengine/godot),
    you can see Godot''s source code, as well as find out exactly what''s being worked
    on. Click the Clone or Download button, and you''ll have the up-to-the-minute
    source code and can test out the latest features. You''ll need to build the engine,
    but don''t be intimidated: Godot is one of the easiest open source projects to
    compile that you''ll find. See [http://docs.godotengine.org/en/latest/development/compiling/](http://docs.godotengine.org/en/latest/development/compiling/)
    for instructions.'
  prefs: []
  type: TYPE_NORMAL
- en: If you're not able to actually contribute to the C++ code, go to the Issues
    tab, where you can report or read about bugs and suggestions for improvements.
    There is always a need for people to confirm bug reports, test fixes, and give
    their opinions on new features.
  prefs: []
  type: TYPE_NORMAL
- en: Writing documentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Godot's official documentation is only as good as its community's contributions.
    From something as small as correcting a typo to writing an entire tutorial, all
    levels of help are very welcome. The home of the official documentatin is [https://github.com/godotengine/godot-docs](https://github.com/godotengine/godot-docs).
  prefs: []
  type: TYPE_NORMAL
- en: Hopefully, by now you've taken some time to browse through the official documentation
    and get an idea of what's available. If you spot something wrong or something
    missing, open an issue at the aforementioned GitHub link. If you're comfortable
    with using GitHub, you can even go ahead and submit a pull request yourself. Just
    make sure you read all the guidelines first so that your contribution will be
    accepted. You can find the guidelines at [http://docs.godotengine.org/en/latest/community/contributing/](http://docs.godotengine.org/en/latest/community/contributing/).
  prefs: []
  type: TYPE_NORMAL
- en: If you speak a language other than English, translations are also very much
    needed, and will be greatly appreciated by Godot's non-English-speaking users.
    See [https://hosted.weblate.org/projects/godot-engine/godot-docs/](https://hosted.weblate.org/projects/godot-engine/godot-docs/)
    for how to contribute in your language.
  prefs: []
  type: TYPE_NORMAL
- en: Donations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Godot is a not-for-profit project, and user donations go a long way to help
    pay for hosting costs and development resources, such as hardware. Financial contributions
    also allow the project to pay core developers, allowing them to dedicate themselves
    part- or full-time to working on the engine.
  prefs: []
  type: TYPE_NORMAL
- en: The easiest way to contribute to Godot is via the Patreon page at [https://www.patreon.com/godotengine](https://www.patreon.com/godotengine).
  prefs: []
  type: TYPE_NORMAL
- en: Getting help – community resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Godot's online community is one of its strengths. Because of its open source
    nature, there is a wide variety of people working together to improve the engine,
    write documentation, and help each other with issues.
  prefs: []
  type: TYPE_NORMAL
- en: You can find a full list of community resources at [https://godotengine.org/community](https://godotengine.org/community).
  prefs: []
  type: TYPE_NORMAL
- en: These links may change over time, but the following are the main community resources
    you should be aware of.
  prefs: []
  type: TYPE_NORMAL
- en: GitHub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '** [https://github.com/godotengine/](https://github.com/godotengine/)**'
  prefs: []
  type: TYPE_NORMAL
- en: The Godot GitHub repository is where Godot's developers work. You can find Godot's
    source code here, if you find yourself needing to compile a custom version of
    the engine for your own use.
  prefs: []
  type: TYPE_NORMAL
- en: If you find any kind of problem with the engine itself—something that doesn't
    work, a typo in the documentation, and so on—this is the place where you should
    report it.
  prefs: []
  type: TYPE_NORMAL
- en: Godot Q and A
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[https://godotengine.org/qa/](https://godotengine.org/qa/)'
  prefs: []
  type: TYPE_NORMAL
- en: This is Godot's official help site. You can post questions here for the community
    to answer, as well as search the growing database of previously answered questions.
    If you happen to see a question you know the answer to, you can help out as well.
  prefs: []
  type: TYPE_NORMAL
- en: Discord / Forum
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[https://discord.gg/zH7NUgz](https://discord.gg/zH7NUgz)'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://godotdevelopers.org/](http://godotdevelopers.org/)'
  prefs: []
  type: TYPE_NORMAL
- en: While not *official*, these are two very active communities of Godot users where
    you can get help, find answers to questions, and discuss your project with others.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about a few additional topics that will help you
    continue to level up your Godot skills. Godot has a great many features in addition
    to those explored in this book. You'll need to know where to look and where to
    ask for help as you move on to working on projects of your own.
  prefs: []
  type: TYPE_NORMAL
- en: You also learned about some more advanced topics, such as working with other
    programming languages and using shaders to enhance your game's visual effects.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, since Godot is built by its community, you learned how you can
    participate and become part of the team that is making it one of the fastest-growing
    projects of its kind.
  prefs: []
  type: TYPE_NORMAL
