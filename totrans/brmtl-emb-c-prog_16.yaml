- en: '16'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '16'
- en: Independent Watchdog (IWDG)
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 独立看门狗（IWDG）
- en: In this chapter, we’ll learn about the **Independent Watchdog** (**IWDG**) timer,
    a unique component for enhancing the reliability of embedded systems. IWDG is
    essential for monitoring the system’s operation and ensuring it can recover from
    unexpected faults or malfunctions.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习关于**独立看门狗定时器（IWDG**）的内容，这是一个用于增强嵌入式系统可靠性的独特组件。IWDG对于监控系统操作和确保系统能够从意外故障或故障中恢复至关重要。
- en: We will begin by exploring the general concept of **watchdog timers** (**WDTs**)
    and their importance in embedded systems. Following this, we will examine how
    WDTs function and the unique features of IWDG. Next, we will focus specifically
    on the STM32 implementation of the IWDG, looking at its key registers and configuration.
    Finally, we will apply this knowledge to develop a bare-metal IWDG driver, providing
    practical code examples to solidify our understanding.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先探讨看门狗定时器（WDT）的一般概念及其在嵌入式系统中的重要性。在此之后，我们将检查WDT的工作原理和IWDG的独特功能。接下来，我们将专门关注STM32的IWDG实现，查看其关键寄存器和配置。最后，我们将应用这些知识来开发裸机IWDG驱动程序，提供实际代码示例以巩固我们的理解。
- en: 'In this chapter, we will cover the following main topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Understanding WDTs
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解看门狗定时器
- en: Types of WDTs
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 看门狗定时器（WDT）的类型
- en: The STM32 IWDG
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: STM32 IWDG
- en: Developing the IWDG driver
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发独立看门狗（IWDG）驱动程序
- en: By the end of this chapter, you will have a comprehensive understanding of IWDG
    timers and their critical role in embedded systems. You will also gain skills
    to develop and implement IWDG drivers for STM32 microcontrollers, ensuring your
    systems can maintain robustness and reliability.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将全面了解IWDG定时器及其在嵌入式系统中的关键作用。您还将获得开发STM32微控制器IWDG驱动程序和实施IWDG驱动程序所需的技能，以确保您的系统可以保持稳健和可靠。
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'All code examples for this chapter can be found on GitHub at the following
    link:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的所有代码示例都可以在以下GitHub链接中找到：
- en: '[https://github.com/PacktPublishing/Bare-Metal-Embedded-C-Programming](https://github.com/PacktPublishing/Bare-Metal-Embedded-C-Programming)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Bare-Metal-Embedded-C-Programming](https://github.com/PacktPublishing/Bare-Metal-Embedded-C-Programming)'
- en: Understanding WDTs
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解看门狗定时器
- en: WDTs are one of the unsung heroes of embedded systems. They quietly monitor
    the system’s health, ensuring it can recover gracefully from unexpected hitches.
    Imagine them as vigilant guards, always on the lookout for system malfunctions,
    ready to reset the microcontroller if something goes wrong. In this section, we’ll
    explore what WDTs are and how they function, and dive into some common use cases
    to illustrate their importance.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 看门狗定时器（WDT）是嵌入式系统中的无名英雄之一。它们默默地监控系统的健康状况，确保系统可以从意外中断中优雅地恢复。想象它们是警惕的守卫，始终在寻找系统故障，如果出现问题，它们会重置微控制器。在本节中，我们将探讨看门狗定时器是什么以及它们如何工作，并深入一些常见用例以说明它们的重要性。
- en: What are WDTs?
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 看门狗定时器是什么？
- en: WDTs are like guardians for your microcontroller. Imagine you’re using a device,
    and something goes wrong—a bug in the developer’s code causes an infinite loop,
    or a hardware glitch freezes the system. Without a watchdog, your device would
    be stuck, potentially causing significant problems, especially in critical applications
    such as medical devices or automotive systems.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 看门狗定时器（WDT）是您的微控制器的守护者。想象一下，您正在使用一个设备，然后出了问题——开发者代码中的错误导致无限循环，或者硬件故障使系统冻结。如果没有看门狗，您的设备就会卡住，可能会造成重大问题，尤其是在医疗设备或汽车系统等关键应用中。
- en: A WDT is a hardware or software timer that resets the system if the main program
    fails to reset the timer before it expires. It’s a simple yet powerful mechanism
    to ensure that your system can recover from unexpected issues. Let’s see how they
    work.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 看门狗定时器（WDT）是一种硬件或软件计时器，如果主程序在计时器到期之前未能重置计时器，它将重置系统。这是一个简单但强大的机制，确保您的系统可以从意外问题中恢复。让我们看看它们是如何工作的。
- en: How WDTs work
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 看门狗定时器的工作原理
- en: 'Think of a WDT as an hourglass that you need to turn over regularly to prevent
    it from running out of sand. Here’s a step-by-step breakdown of how it works:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 将看门狗定时器想象成一个需要定期翻转以防止沙子耗尽的沙漏。以下是它如何工作的逐步分解：
- en: '**Initialization**: When your system starts, you initialize the WDT with a
    specific timeout period. This period is the maximum time your system can run without
    resetting the timer.'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**初始化**：当您的系统启动时，您将使用特定的超时周期初始化看门狗定时器（WDT）。这个周期是您的系统可以在不重置计时器的情况下运行的最大时间。'
- en: '**Countdown**: The WDT starts counting down from the set timeout value. If
    it reaches zero, it assumes something went wrong and triggers a system reset.'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**倒计时**：WDT从设定的超时值开始倒计时。如果它达到零，它假定出了问题，并触发系统重置。'
- en: '**Resetting the timer**: Your main program needs to periodically reset the
    WDT before it reaches zero. This action is often called **feeding the watchdog**
    or **kicking the dog**. If the program is running correctly, it will continue
    to reset the timer, preventing a reset.'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**重置定时器**：在定时器达到零之前，主程序需要定期重置WDT。这一行为通常被称为**喂狗**或**踢狗**。如果程序运行正确，它将继续重置定时器，防止系统重置。'
- en: '**System reset**: If your program fails to reset the WDT in time—perhaps because
    it got stuck in an infinite loop or encountered a critical error—the WDT will
    expire and reset the system, bringing it back to a known state.'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**系统重置**：如果你的程序未能及时重置WDT——可能是因为它卡在一个无限循环中或遇到了一个关键错误——WDT将到期并重置系统，将其恢复到一个已知状态。'
- en: Now that we understand the basics, let’s look at some real-world applications
    where WDTs play a crucial role.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了基础知识，让我们看看一些WDT在现实世界中扮演关键角色的应用实例。
- en: Common use cases
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常见用例
- en: Following is a list of some real-world applications.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些实际应用的列表。
- en: Industrial automation
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 工业自动化
- en: In industrial automation, reliability is paramount. Machines and processes need
    to run continuously and without failure. WDTs ensure that if a **Programmable
    Logic Controller** (**PLC**) or other control systems hang or crash, they can
    quickly recover.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在工业自动化中，可靠性至关重要。机器和流程需要连续且无故障地运行。WDT确保如果可编程逻辑控制器（PLC）或其他控制系统挂起或崩溃，它们可以快速恢复。
- en: '*Example*: Imagine a conveyor belt system in a manufacturing plant. The PLC
    controlling the conveyor belt has a WDT set to 1 second. If the PLC software fails
    to reset the watchdog within 1 second due to a software bug or external interference,
    the WDT will reset the PLC. This reset ensures that the conveyor belt can resume
    operation with minimal downtime, preventing potential production losses.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例*：想象一个制造工厂中的传送带系统。控制传送带的PLC设置了一个1秒的WDT。如果PLC软件由于软件错误或外部干扰在1秒内未能重置看门狗，WDT将重置PLC。这次重置确保传送带可以以最短的中断时间恢复运行，防止潜在的生产损失。'
- en: Automotive systems
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 汽车系统
- en: Modern vehicles rely heavily on embedded systems for various functions, from
    engine control to infotainment. WDTs are vital in ensuring these systems operate
    reliably.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现代车辆在执行各种功能时，如引擎控制和信息娱乐系统，严重依赖嵌入式系统。看门狗定时器（WDTs）在确保这些系统可靠运行方面至关重要。
- en: '*Example*: Consider an **engine control unit** (**ECU**) in a car. The ECU
    monitors and controls critical engine parameters. A WDT in the ECU might be set
    to 500 milliseconds. If the ECU software fails to reset the watchdog due to a
    fault, the WDT resets the ECU. This reset can prevent engine misbehavior, ensuring
    the vehicle operates safely.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例*：考虑一辆汽车中的**发动机控制单元**（ECU）。ECU监控和控制关键发动机参数。ECU中的WDT可能被设置为500毫秒。如果ECU软件由于故障未能重置看门狗，WDT将重置ECU。这次重置可以防止发动机异常行为，确保车辆安全运行。'
- en: Medical devices
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 医疗设备
- en: In medical devices, WDTs can be life-saving. Devices such as pacemakers, infusion
    pumps, and patient monitors must operate without failure.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在医疗设备中，WDT可以救命。如起搏器、输液泵和患者监护仪等设备必须无故障运行。
- en: '*Example*: Take a patient monitor that tracks vital signs such as heart rate
    and blood pressure. The monitor’s software includes a WDT set to 2 seconds. If
    the software encounters a problem and fails to reset the watchdog, the device
    will reset. This reset ensures the monitor can quickly recover and continue providing
    accurate, real-time data, which is crucial for patient care.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例*：以一个监测生命体征（如心率血压）的患者监护仪为例。监护仪的软件中设置了一个2秒的WDT。如果软件遇到问题，未能重置看门狗，设备将重置。这次重置确保监护仪可以快速恢复并继续提供准确、实时的数据，这对于患者护理至关重要。'
- en: Consumer electronics
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 消费电子产品
- en: Even in consumer electronics, WDTs help maintain system reliability and enhance
    user experience. Think of smartphones, smart home devices, and gaming consoles.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在消费电子产品中，WDT也有助于维护系统可靠性和提升用户体验。想想智能手机、智能家居设备和游戏机。
- en: '*Example*: In a smart thermostat, the software manages temperature settings
    and connectivity. A WDT ensures that if the software freezes, the system resets
    and continues operating. This functionality prevents users from experiencing extended
    downtime, maintaining comfort and convenience in their homes.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例*: 在一个智能恒温器中，软件管理温度设置和连接性。一个看门狗定时器确保如果软件冻结，系统将重置并继续运行。这种功能可以防止用户经历长时间的中断，保持家庭舒适和便利。'
- en: These examples illustrate the crucial role that WDTs play in modern systems.
    When implementing WDTs, it’s essential to consider several key factors to ensure
    their effectiveness. Let’s see some of these factors.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这些示例说明了看门狗定时器在现代系统中的关键作用。在实现看门狗定时器时，考虑几个关键因素以确保其有效性是至关重要的。让我们看看这些因素中的一些。
- en: Practical considerations
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实际考虑因素
- en: 'When implementing WDTs, you must consider the following:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在实现看门狗定时器时，你必须考虑以下因素：
- en: '**Timeout period**: Choose an appropriate timeout period based on your application’s
    needs. Too short, and you risk unnecessary resets; too long, and you might not
    recover quickly enough from faults.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**超时周期**: 根据应用需求选择适当的超时周期。太短，可能会造成不必要的重置；太长，可能无法从故障中快速恢复。'
- en: '**Reset mechanism**: Ensure that resetting the WDT (feeding the dog) is done
    in a part of your code that runs regularly and indicates the system is operating
    correctly.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**复位机制**: 确保在代码中定期重置看门狗定时器（喂狗）的部分表明系统正在正确运行。'
- en: '**Recovery strategy**: Plan how your system should recover after a watchdog
    reset. Ensure critical data is preserved and the system returns to a safe state.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**恢复策略**: 计划系统在看门狗定时器重置后的恢复方式。确保关键数据得到保留，系统返回到安全状态。'
- en: '**Testing**: Thoroughly test your WDT implementation to ensure it behaves as
    expected under various fault conditions.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试**: 仔细测试你的看门狗定时器实现，以确保在各种故障条件下它按预期工作。'
- en: Next, let’s see the types of WDTs available.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看可用的看门狗定时器类型。
- en: Types of WDTs
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 看门狗定时器类型
- en: WDTs can be categorized into several types based on their functionality and
    integration. Let’s explore the most common types.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 根据其功能和集成，看门狗定时器可以根据几种类型进行分类。让我们探索最常见的类型。
- en: Internal WDTs
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 内部看门狗定时器
- en: Internal WDTs are built into the microcontroller. They are a convenient option
    because they don’t require additional external components. These timers are directly
    integrated into the microcontroller’s architecture and can be configured through
    software.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 内部看门狗定时器是集成在微控制器中的。这是一个方便的选项，因为它不需要额外的外部组件。这些定时器直接集成到微控制器的架构中，可以通过软件进行配置。
- en: 'They have the following features:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 它们具有以下特性：
- en: '**Integration**: No need for external circuitry'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集成**: 无需外部电路'
- en: '**Configuration**: Typically configured using the microcontroller’s registers'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置**: 通常使用微控制器的寄存器进行配置'
- en: '**Power**: They can continue to operate in low-power modes, making them suitable
    for battery-powered applications'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**功率**: 它们可以在低功耗模式下继续运行，这使得它们非常适合电池供电的应用'
- en: '*Example use case*: In a small IoT device, an internal WDT can monitor the
    microcontroller’s operation without adding extra hardware, ensuring the device
    can reset itself if it encounters an error.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例用例*: 在一个小型物联网设备中，一个内部看门狗定时器可以监控微控制器的操作，而无需添加额外的硬件，确保设备在遇到错误时可以自行重置。'
- en: External WDTs
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 外部看门狗定时器
- en: External WDTs are separate components connected to the microcontroller. These
    timers provide additional flexibility and can be used when the internal WDT isn’t
    sufficient or if redundancy is required.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 外部看门狗定时器是连接到微控制器的独立组件。这些定时器提供了额外的灵活性，可以在内部看门狗定时器不足或需要冗余时使用。
- en: 'Here is a list of their features:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是他们的一些特性列表：
- en: '**Flexibility**: Can be chosen based on specific requirements (for example,
    longer timeout periods)'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**灵活性**: 可以根据具体要求选择（例如，更长的超时周期）'
- en: '**Redundancy**: Adding an external watchdog provides an extra layer of safety'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**冗余**: 添加外部看门狗提供额外的安全层'
- en: '**Independence**: Operate independently of the microcontroller’s clock and
    power'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**独立性**: 独立于微控制器的时钟和电源运行'
- en: '*Example use case*: In a critical automotive system, an external WDT can provide
    an additional safeguard, ensuring the system resets even if the internal timer
    fails.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例用例*: 在一个关键汽车系统中，一个外部看门狗定时器可以提供额外的安全保护，确保即使内部定时器失败，系统也能重置。'
- en: Windowed WDTs
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 窗口看门狗定时器
- en: '**Windowed WDTs** (**WWDTs**) add an extra layer of control by introducing
    a *window* period. The system must reset the timer within a specific window period;
    too early or too late resets the system. This prevents scenarios where the software
    gets stuck in a loop resetting the watchdog too frequently (which could mask a
    malfunction).'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**窗口看门狗定时器**（**WWDT**）通过引入一个*窗口*周期来增加额外的控制层。系统必须在特定的窗口周期内重置计时器；太早或太晚的重置会导致系统复位。这防止了软件陷入循环，频繁地重置看门狗（这可能会掩盖故障）。'
- en: 'Their features include the following:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 它们的特性包括以下内容：
- en: '**Precision**: Require the timer to be reset within a specific time window'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**精度**：需要计时器在特定的时窗内重置'
- en: '**Fault detection**: Can detect both early and late watchdog resets, offering
    improved fault detection'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**故障检测**：可以检测早期和晚期的看门狗复位，提供改进的故障检测'
- en: '**Security**: Enhance system security by ensuring the timer is reset at appropriate
    intervals'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全性**：通过确保计时器在适当的间隔内重置来增强系统安全性'
- en: '*Example use case*: In a medical device, a WWDT ensures the control software
    operates correctly within defined time intervals, adding an extra layer of reliability.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例用例*：在医疗设备中，一个WWDT确保控制软件在定义的时间间隔内正确运行，增加了一个额外的可靠性层。'
- en: IWDGs
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: IWDGs
- en: IWDGs are designed to be robust and reliable. They run from a separate clock
    source, usually a **low-speed internal** (**LSI**) clock, and operate independently
    of the main system clock. This independence ensures they continue to function
    even if the main clock fails.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: IWDGs被设计成鲁棒且可靠。它们从一个独立的时钟源运行，通常是一个**低速内部**（**LSI**）时钟，并且独立于主系统时钟运行。这种独立性确保即使在主时钟失败的情况下，它们也能继续工作。
- en: 'Their features include the following:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 它们的特性包括以下内容：
- en: '**Independence**: Operate from a separate clock source'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**独立性**：从一个独立的时钟源运行'
- en: '**Robustness**: Continue functioning even if the main system clock fails'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**鲁棒性**：即使在主系统时钟失败的情况下也能继续工作'
- en: '**Minimal configuration**: Typically simple to configure and use'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最小配置**：通常简单易配置和使用'
- en: '*Example use case*: In an **industrial control system** (**ICS**), an IWDG
    ensures the system can recover from malfunctions, even if the main clock source
    is disrupted.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例用例*：在**工业控制系统**（**ICS**）中，一个IWDG确保系统可以从故障中恢复，即使主时钟源被中断。'
- en: Selecting the appropriate WDT depends on several factors, including the criticality
    of the application, power constraints, and required reliability.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 选择合适的WDT取决于多个因素，包括应用的紧迫性、电源限制和所需的可靠性。
- en: Choosing the right WDT
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选择正确的WDT
- en: 'Here’s a quick guide to help you choose the right WDT:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个快速指南，帮助您选择正确的WDT：
- en: '**For low-power applications**: Consider internal WDTs due to their integration
    and low power consumption'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对于低功耗应用**：由于集成度和低功耗，考虑使用内部WDT'
- en: '**For high-reliability systems**: Use external WDTs for redundancy'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对于高可靠性系统**：使用外部WDT进行冗余'
- en: '**For applications requiring precise timing**: WWDTs provide enhanced fault
    detection'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对于需要精确时序的应用**：WWDT提供了增强的故障检测'
- en: '**For systems needing robust operation**: IWDGs offer continued functionality
    even if the main clock fails'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对于需要鲁棒操作的系统**：IWDGs即使在主时钟失败的情况下也能保持功能'
- en: Understanding the different types of WDTs and their features allows us to choose
    the right one for our applications. Whether it’s an internal WDT for simplicity,
    an external one for redundancy, a WWDT for precise control, or an IWDG for robustness,
    there’s a WDT suited for every need.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 理解不同类型的看门狗定时器（WDT）及其特性，使我们能够为我们的应用选择合适的型号。无论是为了简单性而使用的内部WDT，还是为了冗余性而使用的外部WDT，或者是用于精确控制的WWDT，亦或是用于鲁棒性的IWDG，总有一个WDT适合每一个需求。
- en: In the upcoming section, we will delve into the IWDG embedded within the STM32F411
    microcontroller, examining its features and how to leverage it for enhanced system
    reliability.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将深入探讨STM32F411微控制器内部的IWDG，检查其特性和如何利用它来提高系统可靠性。
- en: The STM32 IWDG
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: STM32 IWDG
- en: In this section, we’ll analyze the STM32 IWDG module, exploring its main features
    and other relevant information to help you understand how to leverage this powerful
    feature in your embedded applications.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将分析STM32 IWDG模块，探讨其主要特性和其他相关信息，以帮助您了解如何在嵌入式应用中利用这一强大功能。
- en: 'STM32 microcontrollers feature two types of WDTs: the IWDG and the **Window
    Watchdog** (**WWDG**). Both are essential for detecting and correcting software
    malfunctions by initiating a system reset, but they each have unique characteristics
    and applications.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: STM32微控制器具有两种类型的WDT：IWDG和**窗口看门狗**（**WWDG**）。两者都是通过启动系统复位来检测和纠正软件故障，但它们各自具有独特的特性和应用。
- en: The IWDG operates using a dedicated LSI clock, ensuring it continues to function
    even if the main system clock fails. This makes it highly reliable for applications
    that require continuous monitoring, regardless of the main clock’s state. In contrast,
    the WWDG derives its clock from the APB1 clock and features a configurable time
    window. The system must refresh the WWDG within this time window; failing to do
    so, either too early or too late, will trigger a system reset.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: IWDG使用专用的LSI时钟运行，确保即使主系统时钟失败，它也能继续工作。这使得它在需要持续监控的应用中非常可靠，无论主时钟的状态如何。相比之下，WWDG从APB1时钟中获取时钟，并具有可配置的时间窗口。系统必须在时间窗口内刷新WWDG；如果过早或过晚，将触发系统复位。
- en: The IWDG is best suited for applications needing an independent watchdog process
    with lower timing accuracy constraints, while the WWDG is ideal for applications
    requiring precise timing windows. Let’s see some key features of the IWDG.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: IWDG（独立看门狗定时器）最适合需要独立看门狗进程且对时间精度要求较低的应用，而WWDG（窗口看门狗定时器）则适用于需要精确时间窗口的应用。让我们看看IWDG的一些关键特性。
- en: Key features of the IWDG
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IWDG的关键特性
- en: 'The IWDG in STM32 microcontrollers boasts several key features:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: STM32微控制器中的IWDG具有几个关键特性：
- en: '**Free-running downcounter**: The IWDG operates as a free-running downcounter,
    continuously counting down from a preset value'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自由运行倒计时器**：IWDG作为一个自由运行的倒计时器运行，从预设值开始连续倒计时。'
- en: '**Independent clock source**: It uses an independent **resistor-capacitor**
    (**RC**) oscillator, allowing it to function in low-power modes such as Standby
    and Stop'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**独立时钟源**：它使用独立的**电阻-电容**（**RC**）振荡器，允许它在低功耗模式（如待机模式）下工作。'
- en: '**System reset on timeout**: If the WDT is activated and the downcounter reaches
    zero (0x000), a system reset is triggered'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**超时系统复位**：如果WDT被激活，倒计时器达到零（0x000），将触发系统复位。'
- en: '**Write access protection**: To modify critical registers, a specific sequence
    of operations is required, ensuring protection against accidental or malicious
    modifications'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**写入访问保护**：要修改关键寄存器，需要特定的操作序列，以确保防止意外或恶意的修改。'
- en: Let’s see how it works.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看它是如何工作的。
- en: How the IWDG works
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IWDG的工作原理
- en: 'The IWDG module operates as an independent safeguard for the microcontroller,
    ensuring the system can recover from software malfunctions. *Figure 16**.1* presents
    a block diagram of the IWDG, sourced from the reference manual:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: IWDG模块作为微控制器的独立保护措施运行，确保系统可以从软件故障中恢复。*图16.1*展示了IWDG的模块框图，来源于参考手册：
- en: '![Figure 16.1: IWDG block diagram](img/B21914_16_1.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图16.1：IWDG模块框图](img/B21914_16_1.jpg)'
- en: 'Figure 16.1: IWDG block diagram'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.1：IWDG模块框图
- en: 'Let’s break down its functional blocks and how it operates:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解其功能模块及其工作方式：
- en: '`0xCCCC` to the Key Register (`IWDG_KR`). This action initiates the downcounter,
    which begins counting down from the reset value of `0xFFF`.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`0xCCCC`写入键寄存器（`IWDG_KR`）。这一操作启动了倒计时器，它从`0xFFF`的复位值开始倒计时。
- en: '`0xAAAA` to the `IWDG_KR` register, which reloads the counter with the value
    from the Reload Register (`IWDG_RLR`) and prevents a reset.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`0xAAAA`写入`IWDG_KR`寄存器，这会将计数器重新加载为从重载寄存器（`IWDG_RLR`）中读取的值，并防止复位。
- en: '**Hardware watchdog feature**: If enabled, the IWDG is automatically activated
    at power-on. In this mode, the WDT will generate a reset unless the Key Register
    is written with the appropriate value before the counter reaches zero.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**硬件看门狗特性**：如果启用，IWDG在电源开启时自动激活。在此模式下，如果计数器达到零之前没有用适当的值写入键寄存器，WDT将生成复位。'
- en: '`IWDG_PR`) and reload (`IWDG_RLR`) registers, we must temporarily disable write
    access protection by writing the code `0x5555` to the `IWDG_KR` register. After
    doing this, any changes to these registers must be made immediately; otherwise,
    access protection will be re-enabled.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IWDG_PR`（预分频寄存器）和重载`IWDG_RLR`寄存器，我们必须暂时禁用写入访问保护，通过将代码`0x5555`写入`IWDG_KR`寄存器来实现。完成此操作后，必须立即对这些寄存器进行更改；否则，访问保护将重新启用。'
- en: With this general overview of the IWDG block in mind, let’s analyze the key
    registers one by one.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在心中有了IWDG模块的总体概述后，让我们逐一分析关键寄存器。
- en: IWDG registers
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IWDG寄存器
- en: In this section, we will explore the characteristics and functions of some of
    the crucial registers within the IWDG peripheral.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨 IWDG 外设中一些关键寄存器的特性和功能。
- en: Let’s start with the `IWDG_KR`).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从 `IWDG_KR` 开始。
- en: IWDG Key Register (IWDG_KR)
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: IWDG 密钥寄存器 (IWDG_KR)
- en: The `IWDG_KR` register is a key register used to control the IWDG’s operations,
    including starting the watchdog, reloading the counter, and disabling write access
    to other registers. This register is pivotal in managing the IWDG’s functionality.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`IWDG_KR` 寄存器是一个用于控制 IWDG 操作的关键寄存器，包括启动看门狗、重载计数器和禁用对其他寄存器的写访问。此寄存器在管理 IWDG
    功能方面至关重要。'
- en: 'Key operations in this register include the following:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 此寄存器中的关键操作包括以下内容：
- en: '`0xCCCC`: Start the IWDG. Writing this value to `IWDG_KR` starts the IWDG timer.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0xCCCC`: 启动 IWDG。将此值写入 `IWDG_KR` 将启动 IWDG 定时器。'
- en: '`0xAAAA`: Reload the counter. Writing this value reloads the IWDG counter,
    preventing it from reaching zero and triggering a system reset.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0xAAAA`: 重载计数器。写入此值将重载 IWDG 计数器，防止其达到零并触发系统复位。'
- en: '`0x5555`: Disable write protection. This value allows modifications to the
    prescaler and reload registers.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0x5555`: 禁用写保护。此值允许修改预分频器和重载寄存器。'
- en: Next, let’s discuss the `IWDG_PR`).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们讨论 `IWDG_PR`。
- en: IWDG Prescaler Register (IWDG_PR)
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: IWDG 预分频器寄存器 (IWDG_PR)
- en: The `IWDG_PR` register is used to set the prescaler value, which determines
    the frequency of the IWDG clock by dividing the LSI clock. Adjusting this register
    helps configure the countdown speed of the WDT.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`IWDG_PR` 寄存器用于设置预分频器值，该值通过除以 LSI 时钟来确定 IWDG 时钟的频率。调整此寄存器有助于配置 WDT 的倒计时速度。'
- en: 'Key bits in this register is `PR[2:0]`: Prescaler value. These bits can be
    set to divide the LSI clock by 4, 8, 16, 32, 64, 128, or 256, allowing flexibility
    in setting the WDT interval.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 此寄存器中的关键位是 `PR[2:0]`：预分频器值。这些位可以设置为将 LSI 时钟除以 4、8、16、32、64、128 或 256，从而在设置 WDT
    间隔时提供灵活性。
- en: Next, we move on to the `IWDG_RLR`).
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们转向 `IWDG_RLR`。
- en: IWDG Reload Register (IWDG_RLR)
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: IWDG 重载寄存器 (IWDG_RLR)
- en: The `IWDG_RLR` register defines the reload value for the IWDG counter. This
    value determines the timeout period before the watchdog triggers a system reset
    if not reloaded in time.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`IWDG_RLR` 寄存器定义了 IWDG 计数器的重载值。此值确定在未及时重载的情况下，看门狗触发系统重置的超时时间。'
- en: The key field in this register is `RL[11:0]`; this means reload value. It is
    a 12-bit value that sets the counter’s reload value, which can range from 0x000
    to 0xFFF.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 此寄存器中的关键字段是 `RL[11:0]`；这意味着重载值。它是一个 12 位值，用于设置计数器的重载值，其范围从 0x000 到 0xFFF。
- en: Finally, we examine the `IWDG_SR`).
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们检查 `IWDG_SR`。
- en: IWDG Status Register (IWDG_SR)
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: IWDG 状态寄存器 (IWDG_SR)
- en: The `IWDG_SR` register provides status information about the IWDG, indicating
    whether updates to the prescaler or reload registers are ongoing.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`IWDG_SR` 寄存器提供了关于 IWDG 的状态信息，指示是否正在更新预分频器或重载寄存器。'
- en: 'Key bits in this register include the following:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 此寄存器中的关键位包括以下内容：
- en: '`PVU`: **Prescaler value update** (**PVU**). This bit indicates that the prescaler
    value is being updated.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PVU`：**预分频器值更新**（**PVU**）。此位指示预分频器值正在更新。'
- en: '`RVU`: **Reload value update** (**RVU**). This bit indicates that the reload
    value is being updated.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RVU`：**重载值更新**（**RVU**）。此位指示重载值正在更新。'
- en: With a clear understanding of the IWDG’s functionality and its registers, we
    can now move on to the next section, where we will develop the IWDG driver.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在对 IWDG 的功能和其寄存器有清晰理解的基础上，我们现在可以继续到下一节，我们将开发 IWDG 驱动程序。
- en: Developing the IWDG driver
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发 IWDG 驱动程序
- en: In this section, we’ll use what we’ve learned so far in this chapter to develop
    the IWDG driver.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用本章学到的知识来开发 IWDG 驱动程序。
- en: Let’s start by setting up the project.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从设置项目开始。
- en: Create a copy of your previous project in your IDE, following the steps outlined
    in earlier chapters. Rename this copied project to `IWDG`. Next, create a new
    file named `iwdg.c` in the `Src` folder and another file named `iwdg.h` in the
    `Inc` folder.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 按照前面章节中概述的步骤，在你的 IDE 中创建你之前项目的副本。将此复制的项目重命名为 `IWDG`。接下来，在 `Src` 文件夹中创建一个名为 `iwdg.c`
    的新文件，并在 `Inc` 文件夹中创建一个名为 `iwdg.h` 的新文件。
- en: The IWDG implementation file
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IWDG 实现文件
- en: 'Populate your `iwdg.c` file with the following code:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的 `iwdg.c` 文件中添加以下代码：
- en: '[PRE0]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Let’s break it down. Let’s look at the **macro** **definitions** first:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解一下。首先让我们看看 **宏定义**：
- en: '[PRE1]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`IWDG_KEY_ENABLE`: This macro defines the key to enable the IWDG'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IWDG_KEY_ENABLE`：此宏定义了启用 IWDG 的密钥'
- en: '`IWDG_KEY_WR_ACCESS_ENABLE`: This macro defines the key to enable write access
    to IWDG registers'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IWDG_KEY_WR_ACCESS_ENABLE`: 这个宏定义了用于启用对IWDG寄存器写访问的密钥'
- en: '`IWDG_PRESCALER_4`: This macro defines the prescaler value for the IWDG'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IWDG_PRESCALER_4`: 这个宏定义了IWDG的预分频器值'
- en: '`IWDG_RELOAD_VAL`: This macro sets the reload value to the maximum, 0xFFF,
    providing the longest timeout period'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IWDG_RELOAD_VAL`: 这个宏将重载值设置为最大值，0xFFF，提供最长的超时周期'
- en: Next, we have the `iwdg_init()` function.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们有 `iwdg_init()` 函数。
- en: '[PRE2]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This line writes `0x0000CCCC` to the IWDG **Key Register** (**KR**) to enable
    the IWDG.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码将`0x0000CCCC`写入IWDG **密钥寄存器**（**KR**）以启用IWDG。
- en: '[PRE3]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This line writes `0x00005555` to the IWDG Key Register to enable write access
    to the prescaler and reload registers.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码将 `0x00005555` 写入IWDG密钥寄存器以启用对预分频器和重载寄存器的写访问。
- en: '[PRE4]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This line sets the prescaler register to divide the clock by 4, as defined by
    `IWDG_PRESCALER_4`.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码将预分频器寄存器设置为按 `IWDG_PRESCALER_4` 定义的除以4，以定义预分频器。
- en: '[PRE5]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This sets the reload register to the maximum value of 0xFFF to get the longest
    possible timeout period.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这将重载寄存器设置为最大值0xFFF以获得最长的超时周期。
- en: '[PRE6]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This waits until the IWDG **status register** (**SR**) indicates that the prescaler
    and reload registers have been updated and are ready.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这将等待直到IWDG **状态寄存器**（**SR**）指示预分频器和重载寄存器已更新并准备好。
- en: '[PRE7]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This writes `0x0000AAAA` to the IWDG Key Register to reload the counter and
    prevent the IWDG from resetting the system.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这将 `0x0000AAAA` 写入IWDG密钥寄存器以重载计数器并防止IWDG重置系统。
- en: The `isIwdg_ready()` function checks the Status Register to see if the `PVU`
    and `RVU` bits are cleared. It returns 1 if both bits are cleared, indicating
    that the IWDG is ready, or 0 otherwise.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '`isIwdg_ready()` 函数检查状态寄存器以查看 `PVU` 和 `RVU` 位是否清除。如果两个位都清除，则返回1，表示IWDG已准备好，否则返回0。'
- en: We are now ready to test inside `main.c`.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已准备好在 `main.c` 中进行测试。
- en: The main file
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 主文件
- en: 'Update your `main.c` file as shown next:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下所示更新你的 `main.c` 文件：
- en: '[PRE8]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `main` function kicks off by setting up the `EXTI`) on pin `PC13`, which
    is connected to the blue push button. The function then calls `check_reset_source`
    to determine if the last reset was caused by the IWDG. After that, it initializes
    the IWDG itself, ensuring that the system can recover from software malfunctions.
    The `main` loop continually checks the state of `g_btn_press`; if the button hasn’t
    been pressed, it refreshes the IWDG to prevent a system reset and toggles the
    LED, providing a visual indicator of system activity.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`main` 函数首先在连接到蓝色按钮的引脚 `PC13` 上设置 `EXTI`，然后调用 `check_reset_source` 以确定上一次重置是否由IWDG引起。之后，它初始化IWDG本身，确保系统可以从软件故障中恢复。`main`
    循环持续检查 `g_btn_press` 的状态；如果按钮未被按下，它刷新IWDG以防止系统重置，并切换LED，提供系统活动的视觉指示。'
- en: 'Let’s look at the next part of the code:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看代码的下一部分：
- en: '[PRE9]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `check_reset_source` function determines if the most recent system reset
    was triggered by the IWDG. It begins by checking the `CSR`) for the IWDG reset
    flag (`RCC_CSR_IWDGRSTF`). If this flag is set, it confirms that the watchdog
    initiated the reset. The function then clears this flag by writing to the `RCC_CSR_RMVF`
    bit, ensuring the flag is reset for future detection. As a visual indication of
    the IWDG-triggered reset, the LED is turned on, and a message is printed to the
    UART. The function enters a loop, waiting for the user to press the button (detected
    by the `g_btn_press` variable) before clearing the button press state and exiting.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '`check_reset_source` 函数确定最近的系统重置是否由IWDG触发。它首先检查 `CSR` 寄存器中的IWDG重置标志（`RCC_CSR_IWDGRSTF`）。如果此标志被设置，则确认看门狗触发了重置。然后，通过写入
    `RCC_CSR_RMVF` 位清除此标志，确保标志被重置以供未来检测。作为IWDG触发的重置的视觉指示，LED被点亮，并通过UART打印一条消息。函数进入一个循环，等待用户按下按钮（通过
    `g_btn_press` 变量检测）在清除按钮按下状态并退出之前。'
- en: 'Then, there is the callback:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，有一个回调：
- en: '[PRE10]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This is followed by the interrupt handler:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 接着是中断处理程序：
- en: '[PRE11]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `exti_callback` function is a simple yet vital part of our interrupt-handling
    mechanism. Its sole purpose is to set the `g_btn_press` flag to `1`, indicating
    that a button press has been detected. This flag is later used in the main loop
    to control the program flow. The `EXTI15_10_IRQHandler` function is the interrupt
    handler for external interrupts on lines 10 to 15\. When an interrupt is triggered
    on *line 13*, this handler first checks the pending register (`PR`) to confirm
    the interrupt source. Once verified, it clears the pending flag by writing back
    to the `PR` register. After clearing the interrupt, the handler calls `exti_callback`
    to update the `g_btn_press` flag.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '`exti_callback`函数是我们中断处理机制的一个简单但至关重要的部分。它的唯一目的是将`g_btn_press`标志设置为`1`，表示检测到了按钮按下。这个标志随后在主循环中用于控制程序流程。`EXTI15_10_IRQHandler`函数是10到15行外部中断的中断处理程序。当在*第13行*触发中断时，此处理程序首先检查挂起寄存器（`PR`）以确认中断源。一旦验证，它通过写入`PR`寄存器来清除挂起标志。清除中断后，处理程序调用`exti_callback`来更新`g_btn_press`标志。'
- en: Testing the project
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试项目
- en: 'To test the project on the microcontroller, follow these steps:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 要在微控制器上测试项目，请按照以下步骤操作：
- en: '**Build and run the project**: Compile the code and upload it to your microcontroller.
    Once running, you should observe the green LED blinking, indicating that the system
    is functioning correctly.'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**构建和运行项目**：编译代码并将其上传到你的微控制器。一旦运行，你应该观察到绿色LED闪烁，这表明系统正在正常工作。'
- en: '**Monitor the serial output**: Open RealTerm or any other serial terminal application.
    Configure it with the appropriate port and baud rate to view the debug messages.
    This will allow you to confirm when the system restarts due to the IWDG.'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**监控串行输出**：打开RealTerm或其他串行终端应用程序。使用适当的端口和波特率进行配置，以查看调试信息。这将允许你确认系统因IWDG而重新启动。 '
- en: '**Trigger a watchdog reset**: Press the blue push button to stop the IWDG timer
    from being refreshed. After the IWDG timeout period elapses, the system will reset,
    and you should see a corresponding message in the serial terminal.'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**触发看门狗复位**：按下蓝色按钮以停止刷新IWDG计时器。在IWDG超时期间，系统将重置，你应该在串行终端中看到相应的消息。'
- en: Summary
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, we explored the IWDG timer, an important component for enhancing
    the reliability of embedded systems. We began by discussing the general concept
    of WDTs, emphasizing their role in ensuring systems can recover from unexpected
    faults or malfunctions. We explored how WDTs function and highlighted the unique
    features of the IWDG.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了IWDG计时器，这是增强嵌入式系统可靠性的重要组件。我们首先讨论了看门狗（WDT）的一般概念，强调了它们在确保系统可以从意外故障或故障中恢复的作用。我们探讨了WDT的工作原理，并突出了IWDG的独特特性。
- en: Next, we focused on the STM32 implementation of the IWDG, examining its key
    registers and configuration options. We detailed the purpose and usage of essential
    registers such as the Key Register (`IWDG_KR`), Prescaler Register (`IWDG_PR`),
    Reload Register (`IWDG_RLR`), and Status Register (`IWDG_SR`). This provided a
    comprehensive understanding of how to configure and control the IWDG for robust
    system operation.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们专注于STM32对IWDG的实现，检查了其关键寄存器和配置选项。我们详细介绍了诸如密钥寄存器（`IWDG_KR`）、预分频寄存器（`IWDG_PR`）、重载寄存器（`IWDG_RLR`）和状态寄存器（`IWDG_SR`）等基本寄存器的目的和用法。这为我们提供了如何配置和控制IWDG以实现稳健系统操作的综合理解。
- en: We also provided practical examples to solidify our understanding, including
    the development of a bare-metal IWDG driver. This involved initializing the IWDG,
    configuring its prescaler and reload values, and implementing the necessary functions
    to ensure the system can recover from software malfunctions.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还提供了实际示例来巩固我们的理解，包括裸机IWDG驱动程序的开发。这包括初始化IWDG、配置其预分频和重载值，并实现必要的函数以确保系统可以从软件故障中恢复。
- en: In the next chapter, we will learn about the **Direct Memory Access** (**DMA**)
    module, an advanced feature for transferring data.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习**直接内存访问**（**DMA**）模块，这是用于数据传输的高级功能。
