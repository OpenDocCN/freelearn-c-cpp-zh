["```cpp\n#include<SDL.h>\n\nSDL_Window* g_pWindow = 0;\nSDL_Renderer* g_pRenderer = 0;\n\nint main(int argc, char* args[])\n{\n  // initialize SDL\n  if(SDL_Init(SDL_INIT_EVERYTHING) >= 0)\n  {\n    // if succeeded create our window\n    g_pWindow = SDL_CreateWindow(\"Chapter 1: Setting up SDL\", \n    SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED,\n    640, 480, \n    SDL_WINDOW_SHOWN);\n\n    // if the window creation succeeded create our renderer\n    if(g_pWindow != 0)\n    {\n      g_pRenderer = SDL_CreateRenderer(g_pWindow, -1, 0);\n    }\n  }\n  else\n  {\n    return 1; // sdl could not initialize\n  }\n\n  // everything succeeded lets draw the window\n\n  // set to black // This function expects Red, Green, Blue and \n  //  Alpha as color values\n  SDL_SetRenderDrawColor(g_pRenderer, 0, 0, 0, 255);\n\n  // clear the window to black\n  SDL_RenderClear(g_pRenderer);\n\n  // show the window\n  SDL_RenderPresent(g_pRenderer);\n\n  // set a delay before quitting\n  SDL_Delay(5000);\n\n  // clean up SDL\n  SDL_Quit();\n\n  return 0;\n}\n```", "```cpp\n    #include<SDL.h>\n    ```", "```cpp\n    SDL_Window* g_pWindow = 0;\n    SDL_Renderer* g_pRenderer = 0;\n    ```", "```cpp\n    int main(int argc, char* argv[])\n    {\n      // initialize SDL\n      if(SDL_Init(SDL_INIT_EVERYTHING) >= 0)\n       {\n    ```", "```cpp\n    // if succeeded create our window\n    g_pWindow = SDL_CreateWindow(\"Chapter 1: Setting up SDL\", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, 640, 480, SDL_WINDOW_SHOWN);\n    ```", "```cpp\n    // if the window creation succeeded create our renderer\n    if(g_pWindow != 0)\n    {\n      g_pRenderer = SDL_CreateRenderer(g_pWindow, -1, 0);\n    }\n    else\n    {\n      return 1; // sdl could not initialize\n    }\n    ```", "```cpp\n    // everything succeeded lets draw the window\n\n      // set to black\n    SDL_SetRenderDrawColor(g_pRenderer, 0, 0, 0, 255);\n\n       // clear the window to black\n    SDL_RenderClear(g_pRenderer);\n\n       // show the window\n    SDL_RenderPresent(g_pRenderer);\n\n       // set a delay before quitting\n    SDL_Delay(5000);\n\n       // clean up SDL\n    SDL_Quit();\n    ```", "```cpp\nSDL_Init(SDL_INIT_AUDIO | SDL_INIT_VIDEO);\n```", "```cpp\nif(SDL_WasInit(SDL_INIT_VIDEO) != 0)\n{\n  cout << \"video was initialized\";\n}\n```", "```cpp\nbool g_bRunning = false; // this will create a loop\n```", "```cpp\n    bool init(const char* title, int xpos, int ypos, int \n    height, int width, int flags)\n    {\n      // initialize SDL\n      if(SDL_Init(SDL_INIT_EVERYTHING) >= 0)\n      {\n        // if succeeded create our window\n        g_pWindow = SDL_CreateWindow(title, xpos, ypos, \n        height, width, flags);\n\n        // if the window creation succeeded create our \n        renderer\n        if(g_pWindow != 0)\n        {\n          g_pRenderer = SDL_CreateRenderer(g_pWindow, -1, 0);\n        }\n      }\n      else\n      {\n        return false; // sdl could not initialize\n      }\n\n      return true;\n    }\n\n    void render()\n    {\n      // set to black\n      SDL_SetRenderDrawColor(g_pRenderer, 0, 0, 0, 255);\n\n      // clear the window to black\n      SDL_RenderClear(g_pRenderer);\n\n      // show the window\n      SDL_RenderPresent(g_pRenderer);\n    }\n    ```", "```cpp\n    int main(int argc, char* argv[])\n    {\n      if(init(\"Chapter 1: Setting up SDL\", \n      SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, 640, \n      480, SDL_WINDOW_SHOWN))\n      {\n        g_bRunning = true;\n      }\n      else\n      {\n        return 1; // something's wrong\n      }\n\n      while(g_bRunning)\n      {\n        render();\n      }\n\n      // clean up SDL\n      SDL_Quit();\n\n      return 0;\n    }\n    ```", "```cpp\nvoid init(){}\nvoid render(){}\nvoid update(){}\nvoid handleEvents(){}\nvoid clean(){}\n\nbool g_bRunning = true;\n\nint main()\n{\n  init();\n\n  while(g_bRunning)\n  {\n    handleEvents();\n    update();\n    render();\n  }\n\n  clean();\n}\n```", "```cpp\n    #ifndef __Game__\n    #define __Game__\n\n    class Game\n    {\n    };\n\n    #endif /* defined(__Game__) */\n    ```", "```cpp\n    class Game\n    {\n    public:\n\n      Game() {}\n      ~Game() {}\n\n      // simply set the running variable to true\n      void init() { m_bRunning = true; }    \n\n      void render(){}\n      void update(){}\n      void handleEvents(){}\n      void clean(){}\n\n      // a function to access the private running variable \n      bool running() { return m_bRunning; }\n\n    private:\n\n      bool m_bRunning;\n    };\n    ```", "```cpp\n    #include \"Game.h\"\n\n    // our Game object\n    Game* g_game = 0;\n\n    int main(int argc, char* argv[])\n    {\n      g_game = new Game();\n\n      g_game->init(\"Chapter 1\", 100, 100, 640, 480, 0);\n\n      while(g_game->running())\n      {\n        g_game->handleEvents();\n        g_game->update();\n        g_game->render();\n      }\n      g_game->clean();\n\n      return 0;\n    }\n    ```", "```cpp\n    #include \"SDL.h\"\n\n    class Game\n    {\n    public:\n\n      Game();\n      ~Game();\n\n      void init();\n\n      void render();\n      void update();\n      void handleEvents();\n      void clean();\n\n      bool running() { return m_bRunning; }\n\n    private:\n\n      SDL_Window* m_pWindow;\n      SDL_Renderer* m_pRenderer;\n\n      bool m_bRunning;\n    };\n    ```", "```cpp\nbool init(const char* title, int xpos, int ypos, int width, int height, int flags);\n```", "```cpp\n    #include \"Game.h\"\n    ```", "```cpp\n    bool Game::init(const char* title, int xpos, int ypos, int width, int height, int flags)\n    {\n      // attempt to initialize SDL\n      if(SDL_Init(SDL_INIT_EVERYTHING) == 0)\n      {\n        std::cout << \"SDL init success\\n\";\n        // init the window\n        m_pWindow = SDL_CreateWindow(title, xpos, ypos, \n        width, height, flags);\n\n        if(m_pWindow != 0) // window init success\n        {\n          std::cout << \"window creation success\\n\";\n          m_pRenderer = SDL_CreateRenderer(m_pWindow, -1, 0);\n\n          if(m_pRenderer != 0) // renderer init success\n          {\n            std::cout << \"renderer creation success\\n\";\n            SDL_SetRenderDrawColor(m_pRenderer, \n            255,255,255,255);\n          }\n          else\n          {\n            std::cout << \"renderer init fail\\n\";\n            return false; // renderer init fail\n          }\n        }\n        else\n        {\n          std::cout << \"window init fail\\n\";\n          return false; // window init fail\n        }\n      }\n      else\n      {\n        std::cout << \"SDL init fail\\n\";\n        return false; // SDL init fail\n      }\n\n      std::cout << \"init success\\n\";\n      m_bRunning = true; // everything inited successfully, \n      start the main loop\n\n      return true;\n    }\n    ```", "```cpp\n    void Game::render()\n    {\n      SDL_RenderClear(m_pRenderer); // clear the renderer to \n      the draw color\n\n      SDL_RenderPresent(m_pRenderer); // draw to the screen\n    }\n    ```", "```cpp\n    {\n      std::cout << \"cleaning game\\n\";\n      SDL_DestroyWindow(m_pWindow);\n      SDL_DestroyRenderer(m_pRenderer);\n      SDL_Quit();\n    }\n    ```", "```cpp\nvoid Game::handleEvents()\n{\n  SDL_Event event;\n  if(SDL_PollEvent(&event))\n  {\n    switch (event.type)\n    {\n      case SDL_QUIT:\n        m_bRunning = false;\n      break;\n\n      default:\n      break;\n    }\n  }\n}\n```", "```cpp\nvoid Game::clean()\n{\n  std::cout << \"cleaning game\\n\";\n  SDL_DestroyWindow(m_pWindow);\n  SDL_DestroyRenderer(m_pRenderer);\n  SDL_Quit();\n}\n```", "```cpp\nbool init(const char* title, int xpos, int ypos, int width, int height, int flags);\n```", "```cpp\n// init the window\nm_pWindow = SDL_CreateWindow(title, xpos, ypos, width, height, flags);\n```", "```cpp\ng_game->init(\"Chapter 1\", 100, 100, 640, 580, SDL_WINDOW_FULLSCREEN))\n```", "```cpp\n    bool init(const char* title, int xpos, int ypos, int width, int height, bool fullscreen);\n    ```", "```cpp\n    bool Game::init(const char* title, int xpos, int ypos, int width, int height, bool fullscreen)\n    {\n      int flags = 0;\n\n      if(fullscreen)\n      {\n        flags = SDL_WINDOW_FULLSCREEN;\n      }\n    }\n    ```", "```cpp\nif(g_game->init(\"Chapter 1\", 100, 100, 640, 480, true))\n```"]