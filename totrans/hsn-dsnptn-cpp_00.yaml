- en: Preface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前言
- en: 'When considering this book, some of you will ask: *Another book on design patterns
    in C++? Why that, and why now? Hasn’t everything there is to know about design
    patterns been* *written already?*'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当考虑这本书时，你们中的一些人可能会问：*又有一本关于C++设计模式的书籍？为什么是现在，为什么是这个？关于设计模式的所有知识不是都已经* *被写出来了？*
- en: There are several reasons why yet another book on *design* *patterns* has been
    written, but first of all, this is very much a C++ book—this is not a book on
    *design patterns* in C++ but a book on design patterns *in C++*, and the emphasis
    sets it apart. C++ has all the capabilities of a traditional object-oriented language,
    so all the classic object-oriented design patterns, such as Factory and Strategy,
    can be implemented in C++. A few of those are covered in this book. But the full
    power of C++ is realized when you utilize its generic programming capabilities.
    Remember that design patterns are frequently occurring design challenges and the
    commonly accepted solution—both sides are equally important in a pattern. It stands
    to reason that when new tools become available, new solutions become possible.
    Over time, the community settles on some of these solutions as the most advantageous
    overall, and a new variation of an old design pattern is born—the same challenge
    but a different preferred solution. But expanding capabilities also opens up new
    frontiers—with new tools at our disposal, new design challenges arise.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 写了关于*设计模式*的又一本书，有几个原因，但首先，这是一本非常典型的C++书籍——这不是一本关于C++中*设计模式*的书，而是一本关于在C++中*设计模式*的书，这种强调使其与众不同。C++拥有传统面向对象语言的所有功能，因此所有经典面向对象设计模式，如工厂模式和策略模式，都可以在C++中实现。本书涵盖了其中的一些。但是，当你利用其泛型编程能力时，C++的强大功能才得以实现。记住，设计模式是经常出现的设计挑战和普遍接受的解决方案——模式的两面同样重要。从逻辑上讲，当新的工具变得可用时，新的解决方案也成为可能。随着时间的推移，社区将一些解决方案确定为最有利的整体解决方案，从而产生了旧设计模式的新变体——相同的挑战，但不同的首选解决方案。但是，扩展功能也开辟了新的领域——有了我们手中的新工具，新的设计挑战也随之产生。
- en: 'Others may expect to find a new coming of the classic book “*Design Patterns:
    Elements of Reusable Object-Oriented Software*”. This ‘isn’t that book, and I
    do not believe that the time is right for such a book. The “*Gang of Four*” book
    was novel, even revolutionary, and it introduced the language of design patterns
    into the broad programming community. This has been done once and for all. It
    also established the neat taxonomy of design patterns, and that part has not aged
    nearly as well: as our pattern vocabulary expanded, we found patterns that do
    not fit easily into a particular category. We also extended the notion of design
    patterns beyond object-oriented programming and found that some of these patterns
    strongly resemble their object-oriented cousins while others are entirely new
    and different. Furthermore, in C++ and other languages with significantly different
    capabilities, a pattern that addresses the same need may look totally different.
    The bottom line is the original classification of patterns, while still useful,
    by now has more exceptions than typical examples, and the pattern landscape became
    too divergent for a new taxonomy that would not seem far too artificial. Maybe
    in time, as we develop the art further, new trends will emerge from the bird’s
    eye view of the expanded pattern landscape, but it has not happened yet.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 另一些人可能会期待找到经典书籍“*《设计模式：可复用面向对象软件元素》*”的新版本。但这“*不是那本书，我也不认为现在是出版这样一本书的好时机*”。“*四人帮*”的书籍是新颖的，甚至是革命性的，它将设计模式的语言引入了广泛的编程社区。这已经一劳永逸地完成了。它还建立了一个整洁的设计模式分类法，但这一部分并没有像我们想象的那么经久不衰：随着我们的模式词汇量的扩大，我们发现有些模式并不容易融入特定的类别。我们还扩展了设计模式的概念，超越了面向对象编程，并发现其中一些模式与面向对象的近亲非常相似，而另一些则是全新的、不同的。此外，在C++和其他具有显著不同功能的语言中，解决相同需求的设计模式可能看起来完全不同。总的来说，原始的模式分类法虽然仍然有用，但现在有更多的例外而不是典型例子，模式景观变得过于分歧，以至于新的分类法似乎过于人为。也许随着时间的推移，当我们进一步发展这门艺术时，从对扩展模式景观的鸟瞰中可能会出现新的趋势，但这种情况尚未发生。
- en: This book has less ambitious but very practical goals. In this book, we focus
    on design patterns where C++ has something essential to add to at least one of
    the two sides of the pattern. On the one hand, we have patterns such as Visitor,
    where the generic programming capabilities of C++ allow for a better solution.
    That better solution was made possible by new features that were added with the
    evolution of the language from C++11 to C++17\. On the other hand, generic programming
    is still programming (only the execution of the program happens at compile time);
    programming requires design, and design has common challenges that are not all
    that dissimilar to the challenges of traditional programming. Thus, many of the
    traditional patterns have their twins, or at least close siblings, in generic
    programming, and we largely focus on those patterns in this book. A prime example
    is the Strategy pattern, better known in the generic programming community by
    its alternative name, the Policy pattern. Also, as new features are added to the
    language, it can offer solutions to new problems or new solutions to old problems,
    and both of these eventually develop into design patterns. This is the case with
    the C++ coroutines, which make an appearance in the last chapter.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书的目标不那么雄心勃勃，但非常实用。在这本书中，我们专注于C++至少对模式的两面都有重要贡献的设计模式。一方面，我们有像访问者（Visitor）这样的模式，C++的泛型编程能力允许有更好的解决方案。这种更好的解决方案是通过语言从C++11到C++17的演变中添加的新特性而实现的。另一方面，泛型编程仍然是编程（只是程序的执行发生在编译时）；编程需要设计，而设计有常见的挑战，这些挑战与传统编程的挑战并不完全不同。因此，许多传统模式在泛型编程中都有其双胞胎，或者至少是近亲，我们在这本书中主要关注这些模式。一个主要的例子是策略模式（Strategy
    pattern），在泛型编程社区中更广为人知的是它的别名，策略模式（Policy pattern）。此外，随着语言中添加了新特性，它可以提供解决新问题或旧问题的解决方案，这两种解决方案最终都发展成为设计模式。这是C++协程的情况，它在最后一章中有所体现。
- en: Finally, a language as complex as C++ is bound to have a few idiosyncrasies
    of its own that often lead to C++-specific challenges that have common, or *standard*,
    solutions. While not quite deserving of being called *patterns*, these C++-specific
    idioms are also covered in this book.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，像C++这样复杂的语言必然会有一些独特的特性，这些特性往往会导致C++特有的挑战，这些挑战有共同或**标准**的解决方案。虽然这些C++特有的惯用用法不完全值得被称为**模式**，但本书也涵盖了这些惯用用法。
- en: 'A few words about the changes for the second edition: first of all, there is
    a new chapter on patterns for concurrency. All examples are updated to use C++17
    or C++20 wherever it makes sense, but never gratuitously. Many patterns, idioms,
    and examples demonstrating their use were updated with recent developments and
    advances – the result of the work of the C++ programming community in the last
    few years.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 关于第二版的一些改动：首先，新增了一章关于并发模式的章节。所有示例都已更新，以使用C++17或C++20，只要合理，但绝不为追求而使用。许多模式、惯用用法以及展示它们使用的示例都随着最近几年的发展进行了更新——这是C++编程社区工作的结果。
- en: 'All that said, there are three main reasons why this book has been written:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些话，这本书被写出来的主要有三个原因：
- en: To cover C++-specific solutions for otherwise general, *classic* design patterns
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了涵盖针对其他通用、**经典**设计模式的C++特定解决方案。
- en: To show C++-specific pattern variants that occur when old design challenges
    arise in the new domain of generic programming
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 展示在新的泛型编程领域中，当旧的设计挑战出现时，C++特定的模式变体。
- en: To keep our patterns up to date with the language’s evolution
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了使我们的模式与语言的演变保持同步。
- en: Who this book is for
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 这本书面向的对象
- en: This book is intended for C++ programmers who want to learn from *the wisdom
    of the community*—from commonly-recognized good solutions to frequently occurring
    design problems. Another way to put it is that this book is a way for a programmer
    to learn from someone else’s mistakes.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书旨在为想要从**社区智慧**中学习的C++程序员提供帮助——从公认的优良解决方案到常见的设计问题。另一种说法是，这本书是程序员从他人错误中学习的一种方式。
- en: This is not a *learn* *C++* book; the target audience is mostly programmers
    who are reasonably familiar with the tools and the syntax of the language, and
    who are more interested in learning how and why these tools should be used. However,
    this book will also be useful for programmers wanting to learn more about C++,
    but wishing that their study could be guided by concrete and practical examples
    (for such programmers, we recommend having a C++ reference book close to hand
    as well). Finally, programmers who want to learn not just what’s new in C++17
    or C++20, but what all these new features can be used for, will hopefully find
    this book illuminating as well.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是一本**学习**C++的书籍；目标读者主要是对工具和语言语法有相当了解的程序员，他们更感兴趣的是了解这些工具应该如何以及为什么应该被使用。然而，这本书对想要了解更多关于C++的程序员来说也将非常有用，尤其是那些希望他们的学习能够通过具体和实际例子来指导的程序员（对于这样的程序员，我们建议同时手头备有一本C++参考书）。最后，对于那些不仅想了解C++17或C++20中有什么新内容，还想了解所有这些新功能可以用来做什么的程序员，这本书也许也能提供一些启发。
- en: What this book covers
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书涵盖的内容
- en: '[*Chapter 1*](B19262_01.xhtml#_idTextAnchor014)*, An Introduction to Inheritance
    and Polymorphism*, provides a brief overview of the object-oriented features of
    C++. This chapter is not intended as a reference for object-oriented programming
    in C++, but, rather, highlights the aspects of it that are important for the subsequent
    chapters.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第1章*](B19262_01.xhtml#_idTextAnchor014)“继承和多态简介”，简要概述了C++的面向对象特性。本章的目的不是作为C++面向对象编程的参考，而是突出其对于后续章节重要性的方面。'
- en: '[*Chapter 2*](B19262_02.xhtml#_idTextAnchor043)*, Class and Function Templates*,
    provides an overview of the generic programming facilities of C++—class templates,
    function templates, and lambda expressions. This chapter covers template instantiations
    and specializations, along with template function argument deduction and overload
    resolution, and prepares you for more complex uses of templates in later chapters.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第2章*](B19262_02.xhtml#_idTextAnchor043)“类和函数模板”，概述了C++的泛型编程功能——类模板、函数模板和lambda表达式。本章涵盖了模板实例化和特化，以及模板函数参数推导和重载解析，为后续章节中更复杂的模板使用做准备。'
- en: '[*Chapter 3*](B19262_03.xhtml#_idTextAnchor110)*, Memory and Ownership*, describes
    modern idiomatic ways of expressing different kinds of memory ownership in C++.
    This is a collection of conventions or idioms—the compiler does not enforce these
    rules, but programmers will find it easier to understand each other if they use
    the shared idiomatic vocabulary.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第3章*](B19262_03.xhtml#_idTextAnchor110)“内存和所有权”，描述了在C++中表达不同类型内存所有权的现代惯用法。这是一系列约定或惯用法——编译器不会强制执行这些规则，但如果程序员使用共享的惯用法词汇，他们将更容易理解彼此。'
- en: '[*Chapter 4*](B19262_04.xhtml#_idTextAnchor152)*, Swap - From Simple to Subtle*,
    explores one of the most basic C++ operations, the swap, or exchange, of two values.
    This operation has surprisingly complex interactions with other C++ features that
    are discussed in the chapter.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第4章*](B19262_04.xhtml#_idTextAnchor152)“从简单到微妙地交换”，探讨了C++中最基本的一个操作，即两个值的交换或交换操作。这一操作与其他在章节中讨论的C++特性有着惊人的复杂交互。'
- en: '[*Chapter 5*](B19262_05.xhtml#_idTextAnchor199)*, A Comprehensive Look at RAII*,
    explores in detail one of the fundamental concepts of C++, that of resource management,
    and introduces what may be the most popular C++ idiom, RAII, which is the standard
    C++ approach to managing resources.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第5章*](B19262_05.xhtml#_idTextAnchor199)“全面了解RAII”，详细探讨了C++的一个基本概念，即资源管理，并介绍了可能是最受欢迎的C++惯用法，即RAII，这是C++管理资源的标准方法。'
- en: '[*Chapter 6*](B19262_06.xhtml#_idTextAnchor266)*, Understanding Type Erasure*,
    provides insight into a C++ technique that has been available in C++ for a long
    time but has grown in popularity and importance since the introduction of C++11\.
    Type erasure allows the programmer to write abstract programs that do not explicitly
    mention certain types.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第6章*](B19262_06.xhtml#_idTextAnchor266)“理解类型擦除”，深入探讨了C++中一种已经存在很长时间的技术，自从C++11引入以来，其受欢迎程度和重要性也在不断增长。类型擦除允许程序员编写不显式提及某些类型的抽象程序。'
- en: '[*Chapter 7*](B19262_07.xhtml#_idTextAnchor314)*, SFINAE, Concepts, and Overload
    Resolution Management*, discusses SFINAE—a C++ idiom that is, on the one hand,
    essential to the use of templates in C++ and *just happens* transparently, while
    on the other hand, requires a very thorough and subtle understanding of C++ templates
    when used purposefully.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第7章*](B19262_07.xhtml#_idTextAnchor314)*，SFINAE、概念和重载解析管理*，讨论了SFINAE——一种C++惯用语，一方面对于C++中模板的使用是必不可少的，而且“恰好”透明地使用，另一方面，在有意使用时，需要对C++模板有非常深入和微妙的理解。'
- en: '[*Chapter 8*](B19262_08.xhtml#_idTextAnchor360)*, The Curiously Recurring Template
    Pattern*, describes a *mind-wrapping* template-based pattern that combines the
    benefits of object-oriented programming with the flexibility of templates. The
    chapter explains the pattern and teaches you how to use it properly to solve practical
    problems. Lastly, this chapter prepares you for recognizing this pattern in later
    chapters.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第8章*](B19262_08.xhtml#_idTextAnchor360)*，奇特重复的模板模式*，描述了一种*令人着迷的*基于模板的模式，它结合了面向对象编程的优点和模板的灵活性。本章解释了该模式，并教你如何正确地使用它来解决实际问题。最后，本章为你准备在后续章节中识别这种模式。'
- en: '[*Chapter 9*](B19262_09.xhtml#_idTextAnchor406)*, Named Arguments, Method Chaining,
    and the Builder Pattern*, covers an unusual technique for calling functions in
    C++, using named arguments instead of positional ones. This is another one of
    those idioms we use implicitly in every C++ program, but its explicit purposeful
    use takes some thought.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第9章*](B19262_09.xhtml#_idTextAnchor406)*，命名参数、方法链和构建者模式*，介绍了一种在C++中调用函数的不寻常技术，使用命名参数而不是位置参数。这是我们在每个C++程序中隐式使用的那些惯用语之一，但它的明确目的性使用需要一些思考。'
- en: '[*Chapter 10*](B19262_10.xhtml#_idTextAnchor453)*, Local Buffer Optimization*,
    is the only purely performance-oriented chapter in this book. Performance and
    efficiency are critical considerations that influence every design decision that
    affects the language itself—there is not a feature in the language that was not
    reviewed from the point of view of efficiency before being accepted into the standard.
    It is only fair that a chapter is dedicated to a common idiom used to improve
    the performance of C++ programs.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第10章*](B19262_10.xhtml#_idTextAnchor453)*，局部缓冲区优化*，是本书中唯一纯粹以性能为导向的章节。性能和效率是影响语言本身每个设计决策的关键考虑因素——在标准被接受之前，没有一项特性不是从效率的角度进行审查的。为提高C++程序的性能而使用的常见惯用语，设立一个章节是公平的。'
- en: '[*Chapter 11*](B19262_11.xhtml#_idTextAnchor509)*, ScopeGuard*, introduces
    an old C++ pattern that has changed almost beyond recognition with the recent
    versions of C++. The chapter teaches you about a pattern for easily writing exception-safe,
    or, more generally, error-safe code in C++.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第11章*](B19262_11.xhtml#_idTextAnchor509)*，作用域保护*，介绍了一种几乎在C++最新版本中无法辨认的旧C++模式。本章教你如何轻松编写异常安全或更普遍的错误安全代码。'
- en: '[*Chapter 12*](B19262_12.xhtml#_idTextAnchor562)*, Friend Factory*, describes
    another old pattern that finds new uses in modern C++. This pattern is used to
    generate functions *associated* with templates, such as arithmetic operators for
    every type generated by a template.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第12章*](B19262_12.xhtml#_idTextAnchor562)*，友元工厂*，描述了另一种在现代C++中找到新用途的旧模式。这种模式用于生成与模板相关的函数，例如每个由模板生成的类型的算术运算符。'
- en: '[*Chapter 13*](B19262_13.xhtml#_idTextAnchor596)*, Virtual Constructors and
    Factories*, covers another classic object-oriented programming pattern as applied
    to C++, the Factory pattern. In the process, the chapter also shows you how to
    get the appearance of polymorphic behavior from C++ constructors, even though
    constructors cannot be virtual.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第13章*](B19262_13.xhtml#_idTextAnchor596)*，虚构造函数和工厂*，涵盖了应用于C++的另一个经典面向对象编程模式，即工厂模式。在这个过程中，本章还展示了如何从C++构造函数中获得多态行为的外观，尽管构造函数不能是虚的。'
- en: '[*Chapter 14*](B19262_14.xhtml#_idTextAnchor640)*, The Template Method Pattern
    and the Non-Virtual Idiom*, describes an interesting crossover between a classic
    object-oriented pattern, the template, and a very C++-centric idiom. Together,
    they form a pattern that describes the optimal use of virtual functions in C++.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第14章*](B19262_14.xhtml#_idTextAnchor640)*，模板方法模式和非常量惯用语*，描述了经典面向对象模式、模板和非常C++中心的惯用语之间的有趣交叉。它们共同形成了一个模式，描述了在C++中最佳使用虚函数的方法。'
- en: '[*Chapter 15*](B19262_15.xhtml#_idTextAnchor689)*, Policy-Based Design*, covers
    one of the jewels of C++ design patterns, the Policy pattern (more commonly known
    as the Strategy pattern), applied at compile time, that is, as a generic programming
    pattern instead of an object-oriented pattern.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第15章*](B19262_15.xhtml#_idTextAnchor689)*，基于策略的设计*，涵盖了C++设计模式中的瑰宝之一，即策略模式（更常见的是策略模式），它在编译时应用，即作为一种泛型编程模式，而不是面向对象模式。'
- en: '[*Chapter 16*](B19262_16.xhtml#_idTextAnchor739)*, Adapters and Decorators*,
    discusses the two very broad and closely related patterns as they apply to C++.
    The chapter considers the use of these patterns in object-oriented designs, as
    well as in generic programs.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第16章*](B19262_16.xhtml#_idTextAnchor739)*，适配器和装饰器*，讨论了两种非常广泛且密切相关的设计模式，它们适用于C++。本章考虑了这些模式在面向对象设计以及泛型程序中的应用。'
- en: '[*Chapter 17*](B19262_17.xhtml#_idTextAnchor783)*, The Visitor Pattern and
    Multiple Dispatch*, rounds off our gallery of classic object-oriented programming
    patterns with the perennially popular Visitor pattern. The chapter explains the
    pattern itself, then focuses on the ways that modern C++ makes the implementation
    of Visitor simpler, more robust, and less error-prone.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第17章*](B19262_17.xhtml#_idTextAnchor783)*，访问者模式和多重分派*，通过永受欢迎的访问者模式结束我们的经典面向对象编程模式系列。本章解释了该模式本身，然后重点介绍了现代C++如何使访问者模式的实现更加简单、健壮和错误率更低。'
- en: '[*Chapter 18*](B19262_18.xhtml#_idTextAnchor832)*, Patterns for Concurrency*,
    is a new addition to the book. While C++ has been used to write concurrent programs
    long before C++11 gave us the “official” tools for it, the wide range of problem-specific
    solutions makes identifying common patterns difficult. This chapter introduces
    the patterns that became the basic building blocks for designing concurrent software
    in C++.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第18章*](B19262_18.xhtml#_idTextAnchor832)*，并发模式*，是本书的新增内容。虽然C++在C++11为我们提供“官方”工具之前就已经被用来编写并发程序，但广泛的特定问题解决方案使得识别常见模式变得困难。本章介绍了成为设计C++并发软件基本构建块的模式。'
- en: To get the most out of this book
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 要充分利用本书
- en: To run examples from this book, you will need a computer running Windows, Linux,
    or macOS (C++ programs can be built on something as small as a Raspberry Pi).
    You will also need a modern C++ compiler, such as GCC, Clang, Visual Studio, or
    another compiler that supports the C++ language up to C++20 (most examples need
    only C++14, some rely on C++17 features, and a few require up-to-date C++20 support).
    You will need a basic knowledge of GitHub and Git in order to clone a project
    with examples.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行本书中的示例，您需要一个运行Windows、Linux或macOS的计算机（C++程序可以在像树莓派这样小的设备上构建）。您还需要一个支持C++语言至C++20的现代C++编译器，如GCC、Clang、Visual
    Studio或其他编译器。您还需要具备GitHub和Git的基本知识，以便克隆带有示例的项目。
- en: Download the example code files
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载示例代码文件
- en: You can download the example code files for this book from GitHub at [https://github.com/PacktPublishing/Hands-On-Design-Patterns-with-CPP-Second-Edition/](https://github.com/PacktPublishing/Hands-On-Design-Patterns-with-CPP-Second-Edition/).
    If there’s an update to the code, it will be updated in the GitHub repository.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从GitHub（[https://github.com/PacktPublishing/Hands-On-Design-Patterns-with-CPP-Second-Edition/](https://github.com/PacktPublishing/Hands-On-Design-Patterns-with-CPP-Second-Edition/)）下载本书的示例代码文件。如果代码有更新，它将在GitHub仓库中更新。
- en: We also have other code bundles from our rich catalog of books and videos available
    at [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/).
    Check them out!
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有来自我们丰富的图书和视频目录的其他代码包，可在[https://github.com/PacktPublishing/](https://github.com/PacktPublishing/)找到。查看它们！
- en: Conventions used
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用的约定
- en: There are a number of text conventions used throughout this book.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 本书使用了多种文本约定。
- en: '`Code in text`: Indicates code words in text, database table names, folder
    names, filenames, file extensions, pathnames, dummy URLs, user input, and Twitter
    handles. Here is an example: “The implementation of the `insert()` function must
    insert the record into both the storage and the index, there is no way around
    it.”'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`文本中的代码`: 表示文本中的代码单词、数据库表名、文件夹名、文件名、文件扩展名、路径名、虚拟URL、用户输入和Twitter昵称。以下是一个示例：“`insert()`函数的实现必须将记录插入存储和索引中，别无他法。”'
- en: 'A block of code is set as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 代码块应如下设置：
- en: '[PRE0]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Any command-line input or output is written as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 任何命令行输入或输出都应如下编写：
- en: '[PRE1]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Tips or important notes
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士或重要注意事项
- en: Appear like this.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来像这样。
- en: Get in touch
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 联系我们
- en: Feedback from our readers is always welcome.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们读者的反馈总是受欢迎的。
- en: '**General feedback**: If you have questions about any aspect of this book,
    email us at [customercare@packtpub.com](mailto:customercare@packtpub.com) and
    mention the book title in the subject of your message.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**一般反馈**：如果您对本书的任何方面有任何疑问，请通过电子邮件与我们联系[customercare@packtpub.com](mailto:customercare@packtpub.com)，并在邮件主题中提及书名。'
- en: '**Errata**: Although we have taken every care to ensure the accuracy of our
    content, mistakes do happen. If you have found a mistake in this book, we would
    be grateful if you would report this to us. Please visit [www.packtpub.com/support/errata](http://www.packtpub.com/support/errata)
    and fill in the form.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**勘误表**：尽管我们已经尽最大努力确保内容的准确性，但错误仍然可能发生。如果您在本书中发现错误，我们将不胜感激，如果您能向我们报告，我们将不胜感激。请访问[www.packtpub.com/support/errata](http://www.packtpub.com/support/errata)并填写表格。'
- en: '**Piracy**: If you come across any illegal copies of our works in any form
    on the internet, we would be grateful if you would provide us with the location
    address or website name. Please contact us at [copyright@packt.com](mailto:copyright@packt.com)
    with a link to the material.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**盗版**：如果您在互联网上以任何形式发现我们作品的非法副本，我们将不胜感激，如果您能提供位置地址或网站名称，我们将不胜感激。请通过[copyright@packt.com](mailto:copyright@packt.com)与我们联系，并提供材料的链接。'
- en: '**If you are interested in becoming an author**: If there is a topic that you
    have expertise in and you are interested in either writing or contributing to
    a book, please visit [authors.packtpub.com](http://authors.packtpub.com).'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果您有兴趣成为作者**：如果您在某个主题上具有专业知识，并且您有兴趣撰写或为本书做出贡献，请访问[authors.packtpub.com](http://authors.packtpub.com)。'
- en: Share Your Thoughts
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分享您的想法
- en: Once you’ve read *Hands-On Design Patterns with C++ (Second Edition)*, we’d
    love to hear your thoughts! Please [click here to go straight to the Amazon review
    page](https://packt.link/r/1-804-61155-7) for this book and share your feedback.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您阅读了《动手实践C++设计模式（第2版）》，我们很乐意听听您的想法！请[点击此处直接访问亚马逊评论页面](https://packt.link/r/1-804-61155-7)并分享您的反馈。
- en: Your review is important to us and the tech community and will help us make
    sure we’re delivering excellent quality content.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 您的评论对我们和科技社区非常重要，并将帮助我们确保我们提供高质量的内容。
- en: Download a free PDF copy of this book
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载本书的免费PDF副本
- en: Thanks for purchasing this book!
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢您购买本书！
- en: Do you like to read on the go but are unable to carry your print books everywhere?
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 您喜欢在路上阅读，但无法携带您的印刷书籍到处走？
- en: Is your eBook purchase not compatible with the device of your choice?
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 您的电子书购买是否与您选择的设备不兼容？
- en: Don’t worry, now with every Packt book you get a DRM-free PDF version of that
    book at no cost.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 别担心，现在，随着每本Packt书籍，您都可以免费获得该书的DRM免费PDF版本。
- en: Read anywhere, any place, on any device. Search, copy, and paste code from your
    favorite technical books directly into your application.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何地方、任何设备上阅读。直接从您最喜欢的技术书籍中搜索、复制和粘贴代码到您的应用程序中。
- en: The perks don’t stop there, you can get exclusive access to discounts, newsletters,
    and great free content in your inbox daily
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 优惠远不止于此，您还可以获得独家折扣、时事通讯和每日免费内容的每日电子邮件。
- en: 'Follow these simple steps to get the benefits:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下简单步骤获取这些好处：
- en: Scan the QR code or visit the link below
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 扫描下面的二维码或访问以下链接
- en: '![](img/B19262_QR_Free_PDF.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19262_QR_Free_PDF.jpg)'
- en: https://packt.link/free-ebook/9781804611555
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: https://packt.link/free-ebook/9781804611555
- en: Submit your proof of purchase
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提交您的购买证明
- en: That’s it! We’ll send your free PDF and other benefits to your email directly
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就这样！我们将直接将免费PDF和其他好处发送到您的电子邮件。
- en: 'Part 1: Getting Started with C++ Features and Concepts'
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1部分：C++特性和概念入门
- en: 'This part introduces and explains the features of C++ object-oriented programming,
    generic programming, and some of the other advanced language tools that are necessary
    for you to understand the rest of the book. We also discuss some of the more annoying
    limitations imposed by the language: many of the patterns we show in the later
    chapters are nothing but universally recognized solutions to these limitations.
    This is not meant as a complete guide for any of the features, but helps make
    the book more self-contained as a hands-on guide for programmers. This part has
    the following chapters:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分介绍了C++面向对象编程、泛型编程以及一些其他高级语言工具的特性，这些工具对于您理解本书的其余部分是必要的。我们还讨论了语言强加的一些更令人烦恼的限制：我们在后续章节中展示的许多模式只是对这些限制的普遍认可解决方案。这并不是对任何特性的完整指南，而是帮助本书作为一个面向程序员的实战指南更加自包含。本部分包含以下章节：
- en: '[*Chapter 1*](B19262_01.xhtml#_idTextAnchor014), *An Introduction to Inheritance
    and Polymorphism*'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第1章*](B19262_01.xhtml#_idTextAnchor014), *继承与多态简介*'
- en: '[*Chapter 2*](B19262_02.xhtml#_idTextAnchor043), *Class and Function Templates*'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第2章*](B19262_02.xhtml#_idTextAnchor043), *类与函数模板*'
- en: '[*Chapter 3*](B19262_03.xhtml#_idTextAnchor110), *Memory and Ownership*'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第3章*](B19262_03.xhtml#_idTextAnchor110), *内存与所有权*'
