- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When considering this book, some of you will ask: *Another book on design patterns
    in C++? Why that, and why now? Hasn’t everything there is to know about design
    patterns been* *written already?*'
  prefs: []
  type: TYPE_NORMAL
- en: There are several reasons why yet another book on *design* *patterns* has been
    written, but first of all, this is very much a C++ book—this is not a book on
    *design patterns* in C++ but a book on design patterns *in C++*, and the emphasis
    sets it apart. C++ has all the capabilities of a traditional object-oriented language,
    so all the classic object-oriented design patterns, such as Factory and Strategy,
    can be implemented in C++. A few of those are covered in this book. But the full
    power of C++ is realized when you utilize its generic programming capabilities.
    Remember that design patterns are frequently occurring design challenges and the
    commonly accepted solution—both sides are equally important in a pattern. It stands
    to reason that when new tools become available, new solutions become possible.
    Over time, the community settles on some of these solutions as the most advantageous
    overall, and a new variation of an old design pattern is born—the same challenge
    but a different preferred solution. But expanding capabilities also opens up new
    frontiers—with new tools at our disposal, new design challenges arise.
  prefs: []
  type: TYPE_NORMAL
- en: 'Others may expect to find a new coming of the classic book “*Design Patterns:
    Elements of Reusable Object-Oriented Software*”. This ‘isn’t that book, and I
    do not believe that the time is right for such a book. The “*Gang of Four*” book
    was novel, even revolutionary, and it introduced the language of design patterns
    into the broad programming community. This has been done once and for all. It
    also established the neat taxonomy of design patterns, and that part has not aged
    nearly as well: as our pattern vocabulary expanded, we found patterns that do
    not fit easily into a particular category. We also extended the notion of design
    patterns beyond object-oriented programming and found that some of these patterns
    strongly resemble their object-oriented cousins while others are entirely new
    and different. Furthermore, in C++ and other languages with significantly different
    capabilities, a pattern that addresses the same need may look totally different.
    The bottom line is the original classification of patterns, while still useful,
    by now has more exceptions than typical examples, and the pattern landscape became
    too divergent for a new taxonomy that would not seem far too artificial. Maybe
    in time, as we develop the art further, new trends will emerge from the bird’s
    eye view of the expanded pattern landscape, but it has not happened yet.'
  prefs: []
  type: TYPE_NORMAL
- en: This book has less ambitious but very practical goals. In this book, we focus
    on design patterns where C++ has something essential to add to at least one of
    the two sides of the pattern. On the one hand, we have patterns such as Visitor,
    where the generic programming capabilities of C++ allow for a better solution.
    That better solution was made possible by new features that were added with the
    evolution of the language from C++11 to C++17\. On the other hand, generic programming
    is still programming (only the execution of the program happens at compile time);
    programming requires design, and design has common challenges that are not all
    that dissimilar to the challenges of traditional programming. Thus, many of the
    traditional patterns have their twins, or at least close siblings, in generic
    programming, and we largely focus on those patterns in this book. A prime example
    is the Strategy pattern, better known in the generic programming community by
    its alternative name, the Policy pattern. Also, as new features are added to the
    language, it can offer solutions to new problems or new solutions to old problems,
    and both of these eventually develop into design patterns. This is the case with
    the C++ coroutines, which make an appearance in the last chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, a language as complex as C++ is bound to have a few idiosyncrasies
    of its own that often lead to C++-specific challenges that have common, or *standard*,
    solutions. While not quite deserving of being called *patterns*, these C++-specific
    idioms are also covered in this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'A few words about the changes for the second edition: first of all, there is
    a new chapter on patterns for concurrency. All examples are updated to use C++17
    or C++20 wherever it makes sense, but never gratuitously. Many patterns, idioms,
    and examples demonstrating their use were updated with recent developments and
    advances – the result of the work of the C++ programming community in the last
    few years.'
  prefs: []
  type: TYPE_NORMAL
- en: 'All that said, there are three main reasons why this book has been written:'
  prefs: []
  type: TYPE_NORMAL
- en: To cover C++-specific solutions for otherwise general, *classic* design patterns
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To show C++-specific pattern variants that occur when old design challenges
    arise in the new domain of generic programming
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To keep our patterns up to date with the language’s evolution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is intended for C++ programmers who want to learn from *the wisdom
    of the community*—from commonly-recognized good solutions to frequently occurring
    design problems. Another way to put it is that this book is a way for a programmer
    to learn from someone else’s mistakes.
  prefs: []
  type: TYPE_NORMAL
- en: This is not a *learn* *C++* book; the target audience is mostly programmers
    who are reasonably familiar with the tools and the syntax of the language, and
    who are more interested in learning how and why these tools should be used. However,
    this book will also be useful for programmers wanting to learn more about C++,
    but wishing that their study could be guided by concrete and practical examples
    (for such programmers, we recommend having a C++ reference book close to hand
    as well). Finally, programmers who want to learn not just what’s new in C++17
    or C++20, but what all these new features can be used for, will hopefully find
    this book illuminating as well.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*Chapter 1*](B19262_01.xhtml#_idTextAnchor014)*, An Introduction to Inheritance
    and Polymorphism*, provides a brief overview of the object-oriented features of
    C++. This chapter is not intended as a reference for object-oriented programming
    in C++, but, rather, highlights the aspects of it that are important for the subsequent
    chapters.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 2*](B19262_02.xhtml#_idTextAnchor043)*, Class and Function Templates*,
    provides an overview of the generic programming facilities of C++—class templates,
    function templates, and lambda expressions. This chapter covers template instantiations
    and specializations, along with template function argument deduction and overload
    resolution, and prepares you for more complex uses of templates in later chapters.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 3*](B19262_03.xhtml#_idTextAnchor110)*, Memory and Ownership*, describes
    modern idiomatic ways of expressing different kinds of memory ownership in C++.
    This is a collection of conventions or idioms—the compiler does not enforce these
    rules, but programmers will find it easier to understand each other if they use
    the shared idiomatic vocabulary.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B19262_04.xhtml#_idTextAnchor152)*, Swap - From Simple to Subtle*,
    explores one of the most basic C++ operations, the swap, or exchange, of two values.
    This operation has surprisingly complex interactions with other C++ features that
    are discussed in the chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B19262_05.xhtml#_idTextAnchor199)*, A Comprehensive Look at RAII*,
    explores in detail one of the fundamental concepts of C++, that of resource management,
    and introduces what may be the most popular C++ idiom, RAII, which is the standard
    C++ approach to managing resources.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B19262_06.xhtml#_idTextAnchor266)*, Understanding Type Erasure*,
    provides insight into a C++ technique that has been available in C++ for a long
    time but has grown in popularity and importance since the introduction of C++11\.
    Type erasure allows the programmer to write abstract programs that do not explicitly
    mention certain types.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B19262_07.xhtml#_idTextAnchor314)*, SFINAE, Concepts, and Overload
    Resolution Management*, discusses SFINAE—a C++ idiom that is, on the one hand,
    essential to the use of templates in C++ and *just happens* transparently, while
    on the other hand, requires a very thorough and subtle understanding of C++ templates
    when used purposefully.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B19262_08.xhtml#_idTextAnchor360)*, The Curiously Recurring Template
    Pattern*, describes a *mind-wrapping* template-based pattern that combines the
    benefits of object-oriented programming with the flexibility of templates. The
    chapter explains the pattern and teaches you how to use it properly to solve practical
    problems. Lastly, this chapter prepares you for recognizing this pattern in later
    chapters.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B19262_09.xhtml#_idTextAnchor406)*, Named Arguments, Method Chaining,
    and the Builder Pattern*, covers an unusual technique for calling functions in
    C++, using named arguments instead of positional ones. This is another one of
    those idioms we use implicitly in every C++ program, but its explicit purposeful
    use takes some thought.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 10*](B19262_10.xhtml#_idTextAnchor453)*, Local Buffer Optimization*,
    is the only purely performance-oriented chapter in this book. Performance and
    efficiency are critical considerations that influence every design decision that
    affects the language itself—there is not a feature in the language that was not
    reviewed from the point of view of efficiency before being accepted into the standard.
    It is only fair that a chapter is dedicated to a common idiom used to improve
    the performance of C++ programs.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 11*](B19262_11.xhtml#_idTextAnchor509)*, ScopeGuard*, introduces
    an old C++ pattern that has changed almost beyond recognition with the recent
    versions of C++. The chapter teaches you about a pattern for easily writing exception-safe,
    or, more generally, error-safe code in C++.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 12*](B19262_12.xhtml#_idTextAnchor562)*, Friend Factory*, describes
    another old pattern that finds new uses in modern C++. This pattern is used to
    generate functions *associated* with templates, such as arithmetic operators for
    every type generated by a template.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 13*](B19262_13.xhtml#_idTextAnchor596)*, Virtual Constructors and
    Factories*, covers another classic object-oriented programming pattern as applied
    to C++, the Factory pattern. In the process, the chapter also shows you how to
    get the appearance of polymorphic behavior from C++ constructors, even though
    constructors cannot be virtual.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 14*](B19262_14.xhtml#_idTextAnchor640)*, The Template Method Pattern
    and the Non-Virtual Idiom*, describes an interesting crossover between a classic
    object-oriented pattern, the template, and a very C++-centric idiom. Together,
    they form a pattern that describes the optimal use of virtual functions in C++.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 15*](B19262_15.xhtml#_idTextAnchor689)*, Policy-Based Design*, covers
    one of the jewels of C++ design patterns, the Policy pattern (more commonly known
    as the Strategy pattern), applied at compile time, that is, as a generic programming
    pattern instead of an object-oriented pattern.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 16*](B19262_16.xhtml#_idTextAnchor739)*, Adapters and Decorators*,
    discusses the two very broad and closely related patterns as they apply to C++.
    The chapter considers the use of these patterns in object-oriented designs, as
    well as in generic programs.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 17*](B19262_17.xhtml#_idTextAnchor783)*, The Visitor Pattern and
    Multiple Dispatch*, rounds off our gallery of classic object-oriented programming
    patterns with the perennially popular Visitor pattern. The chapter explains the
    pattern itself, then focuses on the ways that modern C++ makes the implementation
    of Visitor simpler, more robust, and less error-prone.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 18*](B19262_18.xhtml#_idTextAnchor832)*, Patterns for Concurrency*,
    is a new addition to the book. While C++ has been used to write concurrent programs
    long before C++11 gave us the “official” tools for it, the wide range of problem-specific
    solutions makes identifying common patterns difficult. This chapter introduces
    the patterns that became the basic building blocks for designing concurrent software
    in C++.'
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To run examples from this book, you will need a computer running Windows, Linux,
    or macOS (C++ programs can be built on something as small as a Raspberry Pi).
    You will also need a modern C++ compiler, such as GCC, Clang, Visual Studio, or
    another compiler that supports the C++ language up to C++20 (most examples need
    only C++14, some rely on C++17 features, and a few require up-to-date C++20 support).
    You will need a basic knowledge of GitHub and Git in order to clone a project
    with examples.
  prefs: []
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download the example code files for this book from GitHub at [https://github.com/PacktPublishing/Hands-On-Design-Patterns-with-CPP-Second-Edition/](https://github.com/PacktPublishing/Hands-On-Design-Patterns-with-CPP-Second-Edition/).
    If there’s an update to the code, it will be updated in the GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: We also have other code bundles from our rich catalog of books and videos available
    at [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/).
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`Code in text`: Indicates code words in text, database table names, folder
    names, filenames, file extensions, pathnames, dummy URLs, user input, and Twitter
    handles. Here is an example: “The implementation of the `insert()` function must
    insert the record into both the storage and the index, there is no way around
    it.”'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Tips or important notes
  prefs: []
  type: TYPE_NORMAL
- en: Appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Get in touch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome.
  prefs: []
  type: TYPE_NORMAL
- en: '**General feedback**: If you have questions about any aspect of this book,
    email us at [customercare@packtpub.com](mailto:customercare@packtpub.com) and
    mention the book title in the subject of your message.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Errata**: Although we have taken every care to ensure the accuracy of our
    content, mistakes do happen. If you have found a mistake in this book, we would
    be grateful if you would report this to us. Please visit [www.packtpub.com/support/errata](http://www.packtpub.com/support/errata)
    and fill in the form.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Piracy**: If you come across any illegal copies of our works in any form
    on the internet, we would be grateful if you would provide us with the location
    address or website name. Please contact us at [copyright@packt.com](mailto:copyright@packt.com)
    with a link to the material.'
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are interested in becoming an author**: If there is a topic that you
    have expertise in and you are interested in either writing or contributing to
    a book, please visit [authors.packtpub.com](http://authors.packtpub.com).'
  prefs: []
  type: TYPE_NORMAL
- en: Share Your Thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you’ve read *Hands-On Design Patterns with C++ (Second Edition)*, we’d
    love to hear your thoughts! Please [click here to go straight to the Amazon review
    page](https://packt.link/r/1-804-61155-7) for this book and share your feedback.
  prefs: []
  type: TYPE_NORMAL
- en: Your review is important to us and the tech community and will help us make
    sure we’re delivering excellent quality content.
  prefs: []
  type: TYPE_NORMAL
- en: Download a free PDF copy of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thanks for purchasing this book!
  prefs: []
  type: TYPE_NORMAL
- en: Do you like to read on the go but are unable to carry your print books everywhere?
  prefs: []
  type: TYPE_NORMAL
- en: Is your eBook purchase not compatible with the device of your choice?
  prefs: []
  type: TYPE_NORMAL
- en: Don’t worry, now with every Packt book you get a DRM-free PDF version of that
    book at no cost.
  prefs: []
  type: TYPE_NORMAL
- en: Read anywhere, any place, on any device. Search, copy, and paste code from your
    favorite technical books directly into your application.
  prefs: []
  type: TYPE_NORMAL
- en: The perks don’t stop there, you can get exclusive access to discounts, newsletters,
    and great free content in your inbox daily
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these simple steps to get the benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: Scan the QR code or visit the link below
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19262_QR_Free_PDF.jpg)'
  prefs: []
  type: TYPE_IMG
- en: https://packt.link/free-ebook/9781804611555
  prefs: []
  type: TYPE_NORMAL
- en: Submit your proof of purchase
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That’s it! We’ll send your free PDF and other benefits to your email directly
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Part 1: Getting Started with C++ Features and Concepts'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This part introduces and explains the features of C++ object-oriented programming,
    generic programming, and some of the other advanced language tools that are necessary
    for you to understand the rest of the book. We also discuss some of the more annoying
    limitations imposed by the language: many of the patterns we show in the later
    chapters are nothing but universally recognized solutions to these limitations.
    This is not meant as a complete guide for any of the features, but helps make
    the book more self-contained as a hands-on guide for programmers. This part has
    the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 1*](B19262_01.xhtml#_idTextAnchor014), *An Introduction to Inheritance
    and Polymorphism*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 2*](B19262_02.xhtml#_idTextAnchor043), *Class and Function Templates*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 3*](B19262_03.xhtml#_idTextAnchor110), *Memory and Ownership*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
