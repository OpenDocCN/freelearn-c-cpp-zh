["```cpp\n    // Spring arm component which will act as a \n    // placeholder for \n    // the player camera. This component is recommended to // be used as it automatically controls how the \n    //camera handles situations\n    // where it becomes obstructed by geometry inside the \n    // level, etc\n    UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = \n      MyTPS_Cam, meta = (AllowPrivateAccess = \"true\"))\n    class USpringArmComponent* CameraBoom;\n    // Follow camera\n    UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = \n      MyTPS_Cam, meta = (AllowPrivateAccess = \"true\"))\n    class UCameraComponent* FollowCamera;\n    ```", "```cpp\n    #include \"GameFramework/SpringArmComponent.h\"\n    #include \"Camera/CameraComponent.h\"\n    ```", "```cpp\n    #include \"Components/CapsuleComponent.h\"\n    #include \"GameFramework/CharacterMovementComponent.h\"\n    ```", "```cpp\n    // Set size for collision capsule\n    GetCapsuleComponent()->InitCapsuleSize(42.f, 96.0f);\n    // Don't rotate when the controller rotates. Let that // just \n      affect the camera.\n    bUseControllerRotationPitch = false;\n    bUseControllerRotationYaw = false;\n    bUseControllerRotationRoll = false;\n    // Configure character movement\n    GetCharacterMovement()->bOrientRotationToMovement = true;\n    // Create a camera boom (pulls in towards the \n      player if there is a collision)\n    CameraBoom = \n      CreateDefaultSubobject<USpringArmComponent>(\n      TEXT(\"CameraBoom\"));\n    CameraBoom->SetupAttachment(RootComponent);\n    CameraBoom->TargetArmLength = 300.0f;\n    CameraBoom->bUsePawnControlRotation = true; \n    // Create a camera that will follow the character\n    FollowCamera = \n      CreateDefaultSubobject<UcameraComponent>(\n      TEXT(\"FollowCamera\"));\n    FollowCamera->SetupAttachment(CameraBoom, \n      USpringArmComponent::SocketName);\n    FollowCamera->bUsePawnControlRotation = false;\n    ```"]