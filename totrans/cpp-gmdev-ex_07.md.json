["```cpp\nstd::vector<Enemy*> enemies; \nstd::vector<Rocket*> rockets; \n\nfloat currentTime; \nfloat prevTime = 0.0f; \n\nint score = 0; \nbool gameover = true; \n```", "```cpp\nbool checkCollision(sf::Sprite sprite1, sf::Sprite sprite2); \nvoid reset(); \n```", "```cpp\nvoid reset() { \n\n   score = 0; \n   currentTime = 0.0f; \n   prevTime = 0.0; \n\n   for (Enemy *enemy : enemies) { \n         delete(enemy); \n   } \n   for (Rocket *rocket : rockets) { \n         delete(rocket); \n   } \n\n   enemies.clear(); \n   rockets.clear(); \n}\n```", "```cpp\n           if (event.key.code == sf::Keyboard::Down) { \n\n             if (gameover) {\n                gameover = false;\n                reset();\n              } \n            else { \n                 shoot(); \n                  }                \n            } \n```", "```cpp\n// Update Enemies \n   for (int i = 0; i < enemies.size(); i++) { \n\n         Enemy* enemy = enemies[i]; \n\n         enemy->update(dt); \n\n         if (enemy->getSprite().getPosition().x < 0) { \n\n               enemies.erase(enemies.begin() + i); \n               delete(enemy); \n               gameover = true;\n         } \n   } \n```", "```cpp\n   while (window.isOpen()) { \n\n         ////update input \n         updateInput(); \n\n         //// +++ Update Game Here +++ \n         sf::Time dt = clock.restart(); \n         if(!gameover)\n             update(dt.asSeconds());\n         //// +++ Draw Game Here ++ \n\n         window.clear(sf::Color::Red); \n\n         draw(); \n\n         // Show everything we just drew \n         window.display(); \n\n   } \n```", "```cpp\n   // Check collision between Rocket and Enemies \n\n   for (int i = 0; i < rockets.size(); i++) { \n         for (int j = 0; j < enemies.size(); j++) { \n\n               Rocket* rocket = rockets[i]; \n               Enemy* enemy = enemies[j]; \n\n               if (checkCollision(rocket->getSprite(), enemy-\n                   >getSprite())) { \n\n                     score++; \n\n                     rockets.erase(rockets.begin() + i); \n                     enemies.erase(enemies.begin() + j); \n\n                     delete(rocket); \n                     delete(enemy); \n\n                     printf(\" rocket intersects enemy \\n\"); \n               } \n\n         } \n   } \n```", "```cpp\nint score = 0; \nbool gameover = true; \n\n// Text \nsf::Font headingFont;   \n```", "```cpp\n   // Create Sprite and Attach a Texture \n   bgSprite.setTexture(bgTexture); \n\n   // Load font \n\n   headingFont.loadFromFile(\"Assets/fonts/SnackerComic.ttf\"); \n```", "```cpp\nsf::Text headingText;   \n```", "```cpp\n   // Set Heading Text \n   headingText.setFont(headingFont); \n   headingText.setString(\"Tiny Bazooka\"); \n   headingText.setCharacterSize(84); \n   headingText.setFillColor(sf::Color::Red); \n```", "```cpp\n   sf::FloatRect headingbounds = headingText.getLocalBounds(); \n   headingText.setOrigin(headingbounds.width/2, \n      headingbounds.height / 2); \n   headingText.setPosition(sf::Vector2f(viewSize.x * 0.5f, \n      viewSize.y * 0.10f));\n```", "```cpp\n   if (gameover) { \n         window.draw(headingText); \n   }\n```", "```cpp\nsf::Font headingFont; \nsf::Text headingText; \n\nsf::Font scoreFont; \nsf::Text scoreText;\n```", "```cpp\n   scoreFont.loadFromFile(\"Assets/fonts/arial.ttf\"); \n\n   // Set Score Text \n\n   scoreText.setFont(scoreFont); \n   scoreText.setString(\"Score: 0\"); \n   scoreText.setCharacterSize(45); \n   scoreText.setFillColor(sf::Color::Red); \n\n   sf::FloatRect scorebounds = scoreText.getLocalBounds(); \n   scoreText.setOrigin(scorebounds.width / 2,\n      scorebounds.height / 2); \n   scoreText.setPosition(sf::Vector2f(viewSize.x * 0.5f, \n      viewSize.y * 0.10f)); \n```", "```cpp\n   score++; \n   std::string finalScore = \"Score: \" + std::to_string(score); \n   scoreText.setString(finalScore); \n   sf::FloatRect scorebounds = scoreText.getLocalBounds(); \n   scoreText.setOrigin(scorebounds.width / 2, \n     scorebounds.height / 2); \n   scoreText.setPosition(sf::Vector2f(viewSize.x * 0.5f, viewSize.y\n     * 0.10f));\n```", "```cpp\n   if (gameover) { \n         window.draw(headingText); \n   } else { \n        window.draw(scoreText);\n    } \n```", "```cpp\n   prevTime = 0.0; \n   scoreText.setString(\"Score: 0\"); \n```", "```cpp\nsf::Text tutorialText; \n\n```", "```cpp\n   // Tutorial Text \n\n   tutorialText.setFont(scoreFont); \n   tutorialText.setString(\"Press Down Arrow to Fire and Start Game, \n   Up Arrow to Jump\"); \n   tutorialText.setCharacterSize(35); \n   tutorialText.setFillColor(sf::Color::Red); \n\n   sf::FloatRect tutorialbounds = tutorialText.getLocalBounds(); \n   tutorialText.setOrigin(tutorialbounds.width / 2, tutorialbounds.height / 2); \n   tutorialText.setPosition(sf::Vector2f(viewSize.x * 0.5f, viewSize.y * 0.20f)); \n```", "```cpp\nif (gameover) { \n         window.draw(headingText); \nwindow.draw(tutorialText);\n  } \n   else { \n         window.draw(scoreText); \n   } \n```", "```cpp\n #include \"SFML-2.5.1\\include\\SFML\\Audio.hpp\" \n```", "```cpp\nsf::Music bgMusic;  \n```", "```cpp\n   // Audio  \n\n   bgMusic.openFromFile(\"Assets/audio/bgMusic.ogg\"); \n   bgMusic.play();\n```", "```cpp\nsf::SoundBuffer fireBuffer; \nsf::SoundBuffer hitBuffer;\n```", "```cpp\nsf::Sound fireSound(fireBuffer); \nsf::Sound hitSound(hitBuffer); \n```", "```cpp\nbgMusic.openFromFile(\"Assets/audio/bgMusic.ogg\"); \n   bgMusic.play(); \n\n   hitBuffer.loadFromFile(\"Assets/audio/hit.ogg\"); \n   fireBuffer.loadFromFile(\"Assets/audio/fire.ogg\"); \n```", "```cpp\nhitSound.play(); \n         score++; \n\n         std::string finalScore = \"Score: \" + \n                                  std::to_string(score); \n\n         scoreText.setString(finalScore); \n\n         sf::FloatRect scorebounds = scoreText.getLocalBounds(); \n         scoreText.setOrigin(scorebounds.width / 2,\n         scorebounds.height / 2); \n         scoreText.setPosition(sf::Vector2f(viewSize.x * 0.5f,\n         viewSize.y * 0.10f)); \n```", "```cpp\nvoid shoot() { \n   Rocket* rocket = new Rocket(); \n\n   rocket->init(\"Assets/graphics/rocket.png\", hero.getSprite().getPosition(), 400.0f); \n\n   rockets.push_back(rocket); \n fireSound.play();\n} \n```", "```cpp\nclass Hero{ \n\npublic: \n   Hero(); \n   ~Hero(); \n\n   void init(std::string textureName, int frameCount, \n      float animDuration, sf::Vector2f position, float mass); \n\nvoid update(float dt); \n   void jump(float velocity); \n   sf::Sprite getSprite(); \n\nprivate: \n\n   int jumpCount = 0; \n   sf::Texture m_texture; \n   sf::Sprite m_sprite; \n   sf::Vector2f m_position; \n   float m_mass; \n   float m_velocity; \n   const float m_gravity = 9.81f; \n   bool m_grounded; \n\n   int m_frameCount; \n   float m_animDuration; \n   float m_elapsedTime;; \n   sf::Vector2i m_spriteSize; \n\n}; \n```", "```cpp\nvoid Hero::init(std::string textureName, int frameCount, \n  float animDuration, sf::Vector2f position, float mass){ \n\n   m_position = position; \n   m_mass = mass; \n   m_grounded = false; \n\n   m_frameCount = frameCount;\n   m_animDuration = animDuration;\n\n   // Load a Texture \n   m_texture.loadFromFile(textureName.c_str()); \n\n   m_spriteSize = sf::Vector2i(92, 126);\n\n   // Create Sprite and Attach a Texture \n   m_sprite.setTexture(m_texture); \n   m_sprite.setTextureRect(sf::IntRect(0, 0, m_spriteSize.x, \n     m_spriteSize.y));\n\n   m_sprite.setPosition(m_position); \n   m_sprite.setOrigin(m_spriteSize.x / 2, m_spriteSize.y / 2);\n\n} \n```", "```cpp\nvoid Hero::update(float dt){ \n   // Animate Sprite \n   M_elapsedTime += dt; \n   int animFrame = static_cast<int> ((m_elapsedTime / \n                   m_animDuration) * m_frameCount) % m_frameCount; \n\n   m_sprite.setTextureRect(sf::IntRect(animFrame * m_spriteSize.x, \n      0, m_spriteSize.x, m_spriteSize.y)); \n\n   // Update Position \n\n   m_velocity -= m_mass * m_gravity * dt; \n\n   m_position.y -= m_velocity * dt; \n\n   m_sprite.setPosition(m_position); \n\n   if (m_position.y >= 768 * 0.75) { \n\n         m_position.y = 768 * 0.75; \n         m_velocity = 0; \n         m_grounded = true; \n         jumpCount = 0; \n   } \n\n} \n```", "```cpp\nhero.init(\"Assets/graphics/heroAnim.png\", 4, 1.0f, sf::Vector2f(viewSize.x * 0.25f, viewSize.y * 0.5f), 200); \n```"]