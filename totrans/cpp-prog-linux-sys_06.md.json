["```cpp\nstruct Account {\n    Account(std::string_view the_owner, unsigned\n      the_amount) noexcept :\n        balance{the_amount}, owner{the_owner} {}\n    std::string GetBalance() const {\n        return \"Current account balance of \" + owner +\n                \" is \" + std::to_string(balance) + '\\n';\n    }\nprivate:\n    unsigned balance;\n    std::string owner;\n};\n```", "```cpp\nAccount& operator+=(unsigned amount) noexcept {\n        Print(\" balance before depositing: \", balance,\n          owner);\n        auto temp{balance}; // {1}\n        std::this_thread::sleep_for(1ms);\n        balance = temp + amount; // {2}\n        Print(\" balance after depositing: \", balance,\n          owner);\n        return *this;\n    }\n    Account& operator-=(unsigned amount) noexcept {\n        Print(\" balance before withdrawing: \", balance,\n          owner);\n        auto temp{balance}; // {1}\n        balance = temp - amount; // {2}\n        Print(\" balance after withdrawing: \", balance,\n          owner);\n        return *this;\n    }\n```", "```cpp\nvoid TransferMoney(unsigned amount, Account& from, Account& to) {\n    from -= amount; // {1}\n    to += amount; // {2}\n}\n```", "```cpp\nint main() {\n    Account bill_account{\"Bill\", 100}; // {1}\n    Account john_account{\"John\", 50}; // {2}\n    std::jthread first_transfer{[&](){ TransferMoney(10,\n      bill_account, john_account); }}; // {3}\n    std::jthread second_transfer{[&](){ TransferMoney(20,\n      bill_account, john_account); }}; // {4}\n    std::this_thread::sleep_for(100ms); // {5}\n    std::cout << bill_account.GetBalance(); // {6}\n    std::cout << john_account.GetBalance(); // {7}\n    return 0;\n}\n```", "```cpp\n140278035490560 Bill balance before withdrawing: 100\n140278027097856 Bill balance before withdrawing: 100\n140278027097856 Bill balance after withdrawing: 80\n140278035490560 Bill balance after withdrawing: 90\n140278027097856 John balance before depositing: 50\n140278035490560 John balance before depositing: 50\n140278027097856 John balance after depositing: 70\n140278035490560 John balance after depositing: 60\nCurrent account balance of Bill is 80\nCurrent account balance of John is 60\n```", "```cpp\nAccount& operator+=(unsigned amount) noexcept {\n    Print(\" balance before withdrawing: \", balance, owner);\n    auto temp{balance}; // {1}\n    std::this_thread::sleep_for(1ms); // {2}\n    balance = temp + amount; // {3}\n    Print(\" balance after withdrawing: \", balance, owner);\n    return *this;\n}\n```", "```cpp\n140278035490560 Bill balance before withdrawing: 100\n140278027097856 Bill balance before withdrawing: 100\n140278027097856 Bill balance after withdrawing: 80\n140278035490560 Bill balance after withdrawing: 90\n```", "```cpp\n#include <iostream>\n#include <thread>\n#include <syncstream>\n#include <array>\nint main() {\n    std::array<std::jthread, 5> my_threads; // Just an\n      array of 5 jthread objects which do nothing.\n    const auto worker{[]{\n        const auto thread_id = std::\n           this_thread::get_id();  // 3\n        std::osyncstream sync_cout{std::cout};\n        sync_cout << \"Hello from new jthread with id:\"\n                  << thread_id << '\\n';\n    }};\n    for (auto& thread : my_threads) {\n        thread = std::jthread{worker}; // This moves the\n          new jthread on the place of the placeholder\n    }\n    std::osyncstream{std::cout} << \"Hello Main program\n      thread with id:\" << std::this_thread::get_id() <<\n        '\\n';\n    return 0; // jthread dtors join them here.\n}\n```", "```cpp\nconst auto worker{[]{\n    const auto thread_id = std::this_thread::get_id();\n    std::osyncstream sync_cout{std::cout};\n    sync_cout << \"Hello from new jthread with id:\" <<\n      thread_id << '\\n';\n}};\n```", "```cpp\nfor (auto& thread : my_threads) {\n    thread = jthread{worker}; // This moves the new jthread\n      on the place of the placeholder\n}\n```", "```cpp\nstd::osyncstream{std::cout} << \"Hello Main program thread\n  with id:\" << std::this_thread::get_id() << '\\n';\n```", "```cpp\nHello from new jthread with id:1567180544\nHello from new jthread with id:1476392704\nHello from new jthread with id:1468000000\nHello Main program thread with id:1567184704\nHello from new jthread with id:1558787840\nHello from new jthread with id:1459607296\n```", "```cpp\n#include <iostream>\n#include <syncstream>\n#include <thread>\n#include <array>\nusing namespace std::literals::chrono_literals;\nint main() {\n    const auto worker{[](std::stop_token token, int num){\n      // {1}\n        while (!token.stop_requested()) { // {2}\n            std::osyncstream{std::cout} << \"Thread with id\n              \" << num << \" is currently working.\\n\";\n            std::this_thread::sleep_for(200ms);\n        }\n        std::osyncstream{std::cout} << \"Thread with id \" <<\n          num << \" is now stopped!\\n\";\n    }};\n    std::array<std::jthread, 3> my_threads{\n        std::jthread{worker, 0},\n        std::jthread{worker, 1},\n        std::jthread{worker, 2}\n    };\n    // Give some time to the other threads to start\n      executing …\n    std::this_thread::sleep_for(1s);\n    // 'Let's stop them\n    for (auto& thread : my_threads) {\n        thread.request_stop(); // {3} - this is not a\n          blocking call, it is just a request.\n    }\n    std::osyncstream{std::cout} < \"Main thread just\n      requested stop!\\n\";\n    return 0; // jthread dtors join them here.\n}\n```", "```cpp\nThread with id 0 is currently working.\nThread with id 1 is currently working.\nThread with id 2 is currently working.\nThread with id 1 is currently working.\nThread with id 2 is currently working.\nThread with id 0 is currently working.\nThread with id 1 is currently working.\nThread with id 2 is currently working.\nThread with id 0 is currently working.\nThread with id 2 is currently working.\nThread with id 1 is currently working.\nThread with id 0 is currently working.\nThread with id 1 is currently working.\nThread with id 0 is currently working.\nThread with id 2 is currently working.\nMain thread just requested stop!\nThread with id 1 is now stopped!\nThread with id 0 is now stopped!\nThread with id 2 is now stopped!\n```", "```cpp\n#include <iostream>\n#include <syncstream>\n#include <thread>\n#include <array>\nusing namespace std::literals::chrono_literals;\nint main() {\n    std::stop_source source;\n    const auto worker{[](std::stop_source sr, int num){\n        std::stop_token token = sr.get_token();\n        while (!token.stop_requested()) {\n            std::osyncstream{std::cout} << \"Thread with id\n              \" << num << \" is currently working.\\n\";\n            std::this_thread::sleep_for(200ms);\n        }\n        std::osyncstream{std::cout} << \"Thread with id \" <<\n          num << \" is now stopped!\\n\";\n    }};\n    std::array<std::jthread, 3> my_threads{\n        std::jthread{worker, source, 0},\n        std::jthread{worker, source, 1},\n        std::jthread{worker, source, 2}\n    };\n    std::this_thread::sleep_for(1s);\n    source.request_stop(); // this is not a blocking call,\n      it is just a request. {1}\n    Std::osyncstream{std::cout} << \"Main thread just\n      requested stop!\\n\";\n    return 0; // jthread dtors join them here.\n}\n```", "```cpp\nThread with id 0 is currently working.\nThread with id 1 is currently working.\nThread with id 2 is currently working.\nThread with id 1 is currently working.\nThread with id 2 is currently working.\nThread with id 0 is currently working.\nThread with id 1 is currently working.\nThread with id 2 is currently working.\nThread with id 0 is currently working.\nThread with id 1 is currently working.\nThread with id 0 is currently working.\nThread with id 2 is currently working.\nThread with id 1 is currently working.\nThread with id 0 is currently working.\nThread with id 2 is currently working.\nMain thread just requested stop!\nThread with id 1 is now stopped!\nThread with id 0 is now stopped!\nThread with id 2 is now stopped!\n```", "```cpp\n#include <future>\n#include <thread>\n#include <iostream>\nusing namespace std::literals::chrono_literals;\nint main() {\n    std::promise<std::string> promise; // {1}\n    std::future<std::string> future{promise.get_future()};\n      // {2} – Get the future from the promise.\n    std::jthread th1{[p{std::move(promise)}]() mutable { //\n      {3} – Move the promise inside the worker thread.\n        std::this_thread::sleep_for(20ms);\n        p.set_value_at_thread_exit(\"I promised to call you\n          back once I am ready!\\n\"); // {4}\n    }};\n    std::cout << \"Main thread is ready.\\n\";\n    std::cout << future.get(); // {5} – This is a blocking\n      call!\n    return 0;\n}\n```", "```cpp\nMain thread is ready.\nI promised to call you back once I am ready!\n```", "```cpp\n#include <thread>\n#include <iostream>\n#include <array>\n#include <latch>\n#include <syncstream>\nusing namespace std::literals::chrono_literals;\nint main() {\n    std::latch progress{2}; // {1}\n    std::array<std::jthread, 2> threads {\n        std::jthread{[&](int num){\n            std::osyncstream{std::cout} << \"Starting thread\n              \" << num << \" and go to sleep.\\n\";\n            std::this_thread::sleep_for(100ms);\n            std::osyncstream{std::cout} << \"Decrementing\n              the latch for thread \" << num << '\\n';\n            progress.count_down(); // {2}\n            std::osyncstream{std::cout} << \"Thread \" << num\n              << \" finished!\\n\";\n        }, 0},\n        std::jthread{[&](int num){\n            std::osyncstream{std::cout} << \"Starting thread\n              \" << num << \". Arrive on latch and wait to\n                 become zero.\\n\";\n            progress.arrive_and_wait(); // {3}\n            std::osyncstream{std::cout} << \"Thread \" << num\n              << \" finished!\\n\";\n        }, 1}\n    };\n    std::osyncstream{std::cout} << \"Main thread waiting\n      workers to finish.\\n\";\n    progress.wait(); // {4} wait for all threads to finish.\n    std::cout << \"Main thread finished!\\n\";\n    return 0;\n}\n```", "```cpp\nMain thread waiting workers to finish.\nStarting thread 1\\. Arrive on latch and wait to become zero.\nStarting thread 0 and go to sleep.\nDecrementing the latch for thread 0\nThread 0 finished!\nMain thread finished!\nThread 1 finished!\n```", "```cpp\nusing Temperature =\n    std::tuple<std::string, // The name of the room\n               std::vector<double>, // Temperature\n                 measurements\n               double>; // Calculated mean temperature\n                        // value for a specific room\nstd::vector<Temperature> room_temperatures {\n    {\"living_room\",{}, 0.0},\n    {\"bedroom\", {}, 0.0},\n    {\"kitchen\", {}, 0.0},\n    {\"closet\", {}, 0.0}\n};\n```", "```cpp\nstd::stop_source message;\nstd::barrier measurementBarrier{ // {1}\n    static_cast<int>(room_temperatures.size()), // {2}\n    [&message]() noexcept { // {3}\n        // 1\\. Compute the mean temperature of the entire\n          home.\n        // 2\\. Push new temperature data\n        // 3\\. After 5 measurement cycles request stop.\n    }\n};\nstd::vector<std::jthread> measurementSensors;\nfor (auto& temp : room_temperatures) {\n    measurementSensors.emplace_back([&measurementBarrier,\n      &message, &temp](){\n        const auto& token = message.get_token();\n        while(!token.stop_requested()) {\n            ProcessMeasurement(temp);\n            measurementBarrier.arrive_and_wait(); // {4}\n        }\n    });\n}\n```", "```cpp\nvoid GetTemperatures(Temperature& temp) {\n    std::mt19937 gen{std::random_device{}()};\n    // Add normal distribution with mean = 20\n    // and standard deviation of 8\n    std::normal_distribution<> d{20, 8};\n    auto& input_data{std::get<1>(temp)};\n    input_data.clear();\n    for (auto n{0}; n < 10; ++n) {\n        // Add input data\n        input_data.emplace_back(d(gen));\n    }\n}\nvoid ProcessMeasurement(Temperature& temp){\n    const auto& values{std::get<1>(temp)};\n    auto& mean{std::get<2>(temp)};\n    mean = std::reduce(values.begin(), values.end()) /\n      values.size();\n}\n```", "```cpp\nint main() {\n    // Init data\n    std::ranges::for_each(room_temperatures,\n      GetTemperatures);\n    std::stop_source message;\n    std::barrier measurementBarrier{\n        static_cast<int>(room_temperatures.size()),\n        [&message]() noexcept {\n            // Get all results\n            double mean{0.0};\n            for (const auto& room_t : room_temperatures) {\n                std::cout << \"Mean temperature in \"\n                          << std::get<0>(room_t)\n                          << \" is \" << std::get<2>(room_t)\n                            << \".\\n\";\n                mean += std::get<2>(room_t);\n            }\n            mean /= room_temperatures.size();\n            std::cout << \"Mean temperature in your home is\n              \" << mean << \" degrees Celsius.\\n\";\n            std::cout << \"=======================\n              ======================\\n\";\n            // Add new input data\n            std::ranges::for_each(room_temperatures,\n              GetTemperatures);\n            // Make 4 measurements and request stop.\n            static unsigned timer{0};\n            if (timer >= 3) {\n                message.request_stop();\n            }\n            ++timer;\n        }\n    };\n    std::vector<std::jthread> measurementSensors;\n    for (auto& temp : room_temperatures) {\n        measurementSensors.emplace_back\n          ([&measurementBarrier, &message, &temp](){\n            const auto& token = message.get_token();\n            while(!token.stop_requested()) {\n                ProcessMeasurement(temp);\n                measurementBarrier.arrive_and_wait();\n            }\n        });\n    }\n    return 0;\n}\n```", "```cpp\nMean temperature in living_room is 18.7834.\nMean temperature in bedroom is 16.9559.\nMean temperature in kitchen is 22.6351.\nMean temperature in closet is 20.0296.\nMean temperature in your home is 19.601 degrees Celsius.\n=============================================\nMean temperature in living_room is 19.8014.\nMean temperature in bedroom is 20.4068.\nMean temperature in kitchen is 19.3223.\nMean temperature in closet is 21.2223.\nMean temperature in your home is 20.1882 degrees Celsius.\n=============================================\nMean temperature in living_room is 17.9305.\nMean temperature in bedroom is 22.6204.\nMean temperature in kitchen is 17.439.\nMean temperature in closet is 20.3107.\nMean temperature in your home is 19.5752 degrees Celsius.\n=============================================\nMean temperature in living_room is 19.4584.\nMean temperature in bedroom is 19.0377.\nMean temperature in kitchen is 16.3529.\nMean temperature in closet is 20.1057.\nMean temperature in your home is 18.7387 degrees Celsius.\n=============================================\n```"]