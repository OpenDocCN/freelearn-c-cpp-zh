["```cpp\nclass Bat\n{\n    private:\n        // Length of the pong bat\n        int m_Length = 100;\n        // Height of the pong bat\n        int m_Height = 10;\n        // Location on x axis\n        int m_XPosition;      \n        // Location on y axis\n        int m_YPosition;      \n    public:\n        void moveRight();\n        void moveLeft();\n};\n```", "```cpp\nclass Bat\n{\n    …\n    …\n};\n```", "```cpp\n// Length of the pong bat\nint m_Length = 100; \n// Height of the pong bat\nint m_Height = 10;\n// Location on x axis\nint m_XPosition;      \n// Location on y axis\nint m_YPosition;\n```", "```cpp\nprivate:\n    // more code here\npublic:\n    // More code here\n```", "```cpp\nvoid moveRight();\nvoid moveLeft();\n```", "```cpp\n#include \"Bat.h\"\nvoid Bat::moveRight()\n{\n    // Move the bat a pixel to the right\n    xPosition ++;\n}\nvoid Bat::moveLeft()\n{\n    // Move the bat a pixel to the left\n    xPosition --;\n}\n```", "```cpp\nclass Bat\n{\n    private:\n        // Length of the pong bat\n        int m_Length = 100; \n        // Length of the pong bat\n        int m_Height = 10;\n        // Location on x axis\n        int m_XPosition;      \n        // Location on y axis\n        int m_YPosition;      \n    public:\n        void Bat::moveRight()\n        {\n            // Move the bat a pixel to the right\n            xPosition ++;\n        }\n        void Bat::moveLeft()\n        {\n            // Move the bat a pixel to the left\n            xPosition --;\n        }\n};\n```", "```cpp\nBat bat;\n```", "```cpp\nbat.moveLeft();\n```", "```cpp\nbat.moveRight();\n```", "```cpp\nBat bat;\nBat bat2;\n```", "```cpp\n#pragma once\n#include <SFML/Graphics.hpp>\nusing namespace sf;\nclass Bat\n{\nprivate:\n    Vector2f m_Position;\n    // A RectangleShape object\n    RectangleShape m_Shape;\n    float m_Speed = 1000.0f;\n    bool m_MovingRight = false;\n    bool m_MovingLeft = false;\npublic:\n    Bat(float startX, float startY);\n    FloatRect getPosition();\n    RectangleShape getShape();\n    void moveLeft();\n    void moveRight();\n    void stopLeft();\n    void stopRight();\n    void update(Time dt);\n};\n```", "```cpp\n#include \"Bat.h\"\n\n// This the constructor and it is called when we create an object\nBat::Bat(float startX, float startY)\n{\n    m_Position.x = startX;\n    m_Position.y = startY;\n\n    m_Shape.setSize(sf::Vector2f(50, 5));\n    m_Shape.setPosition(m_Position);\n}\n```", "```cpp\nFloatRect Bat::getPosition()\n{\n    return m_Shape.getGlobalBounds();\n}\nRectangleShape Bat::getShape()\n{\n    return m_Shape;\n}\nvoid Bat::moveLeft()\n{\n     m_MovingLeft = true;\n}\nvoid Bat::moveRight()\n{\n    m_MovingRight = true;\n}\nvoid Bat::stopLeft()\n{\n    m_MovingLeft = false;\n}\nvoid Bat::stopRight()\n{\n    m_MovingRight = false;\n}\nvoid Bat::update(Time dt)\n{\n    if (m_MovingLeft) {\n        m_Position.x -= m_Speed * dt.asSeconds();\n    }\n    if (m_MovingRight) {\n        m_Position.x += m_Speed * dt.asSeconds();\n    }\n    m_Shape.setPosition(m_Position);\n}\n```", "```cpp\n#include \"Bat.h\"\n#include <sstream>\n#include <cstdlib>\n#include <SFML/Graphics.hpp>\nint main()\n{\n    // Create a video mode object\n    VideoMode vm(1920, 1080);\n    // Create and open a window for the game\n    RenderWindow window(vm, \"Pong\", Style::Fullscreen);\n    int score = 0;\n    int lives = 3;\n\n    // Create a bat at the bottom center of the screen\n    Bat bat(1920 / 2, 1080 - 20);\n    // We will add a ball in the next chapter\n    // Create a Text object called HUD\n    Text hud;\n    // A cool retro-style font\n    Font font;\n    font.loadFromFile(\"fonts/DS-DIGI.ttf\");\n    // Set the font to our retro-style\n    hud.setFont(font);\n    // Make it nice and big\n    hud.setCharacterSize(75);\n    // Choose a color\n    hud.setFillColor(Color::White);\n    hud.setPosition(20, 20);\n    // Here is our clock for timing everything\n    Clock clock;\n    while (window.isOpen())\n    {\n        /*\n        Handle the player input\n        ****************************\n        ****************************\n        ****************************\n        */\n        /*\n        Update the bat, the ball and the HUD\n        *****************************\n        *****************************\n        *****************************\n        */\n\n        /*\n        Draw the bat, the ball and the HUD\n        *****************************\n        *****************************\n        *****************************\n        */\n\n    }\n    return 0;\n}\n```", "```cpp\n// Create a bat\nBat bat(1920 / 2, 1080 - 20);\n```", "```cpp\n      /*\n        Handle the player input\n        …\n        /*\n        Update the bat, the ball and the HUD\n        …\n\n        /*\n        Draw the bat, the ball and the HUD\n        …\n```", "```cpp\nEvent event;\nwhile (window.pollEvent(event))\n{\n    if (event.type == Event::Closed)\n        // Quit the game when the window is closed\n        window.close();\n}\n// Handle the player quitting\nif (Keyboard::isKeyPressed(Keyboard::Escape))\n{\n    window.close();\n}\n// Handle the pressing and releasing of the arrow keys\nif (Keyboard::isKeyPressed(Keyboard::Left))\n{\n    bat.moveLeft();\n}\nelse\n{\n    bat.stopLeft();\n}\nif (Keyboard::isKeyPressed(Keyboard::Right))\n{\n    bat.moveRight();\n}\nelse\n{\n    bat.stopRight();\n}\n```", "```cpp\nif (Keyboard::isKeyPressed(Keyboard::Left))\n{\n    bat.moveLeft();\n}\nelse\n{\n    bat.stopLeft();\n}\n```", "```cpp\n// Update the delta time\nTime dt = clock.restart();\nbat.update(dt);\n// Update the HUD text\nstd::stringstream ss;\nss << \"Score:\" << score << \"  Lives:\" << lives;\nhud.setString(ss.str());\n```", "```cpp\nwindow.clear();\nwindow.draw(hud);\nwindow.draw(bat.getShape());\nwindow.display();\n```"]