- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: 'Project #3 – a Remote Asset Tracking Application with LoRaWAN'
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '项目 #3 – 基于 LoRaWAN 的远程资产跟踪应用'
- en: This chapter is dedicated to **smart transportation** and **smart remote monitoring**
    using low-power and long-range communication technology. The project in this chapter
    will take you through the implementation and deployment of a remote alarming application
    based on **Long Range Wide Area Network** (**LoRaWAN**), connected to the public,
    global, and decentralized The Things Network. The project in this chapter provides
    localization features by using a GPS module. The **Arduino IoT Cloud** will be
    used for data visualization and remote configuration of the device. The application
    will be used in real use cases, showing the benefits offered by LoRaWAN technologies
    compared to other wireless technologies.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章致力于**智能交通**和**智能远程监控**，使用低功耗和长距离通信技术。本章中的项目将引导您实现和部署一个基于**长距离广域网络**（**LoRaWAN**）的远程报警应用，连接到公共、全球和去中心化的
    The Things 网络。本章中的项目通过使用 GPS 模块提供定位功能。**Arduino IoT Cloud**将用于数据可视化和设备的远程配置。该应用将用于实际案例，展示
    LoRaWAN 技术相较于其他无线技术提供的优势。
- en: Here, we will practically explore LoRaWAN technologies, which are very useful
    in remote monitoring and control, whether it’s **asset tracking** or **remote
    operation monitoring**. This project uses the **Arduino MKR WAN 1300** development
    board, which is equipped with the latest communication frequencies, 433/868/915
    MHz US/EU. It is specially designed for **Internet of Things** (**IoT**) and **Industry
    4.0** use cases. This project explains how you can practically develop a tracking
    solution based on LoRaWAN communication for different use cases.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将实际探索 LoRaWAN 技术，这些技术在远程监控和控制中非常有用，无论是**资产跟踪**还是**远程操作监控**。本项目使用**Arduino
    MKR WAN 1300**开发板，该板配备了最新的通信频率，433/868/915 MHz US/EU。它专门为**物联网**（**IoT**）和**工业4.0**用例设计。本项目解释了您如何实际开发基于
    LoRaWAN 通信的跟踪解决方案，适用于不同的用例。
- en: 'In this chapter, we will cover the following main topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Understanding LoRaWAN and its IoT applications
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 LoRaWAN 及其物联网应用
- en: LoRaWAN versus other communication technologies
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LoRaWAN 与其他通信技术的比较
- en: Components of a LoRaWAN IoT application
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LoRaWAN 物联网应用组件
- en: Essential hardware – sensors and development boards
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必备硬件 – 传感器和开发板
- en: Designing the project architecture
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计项目架构
- en: Setting up the Thing, adding devices, cloud variables, and code
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 Thing，添加设备，云变量和代码
- en: Configuring the The Things Indoor Gateway
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 The Things 室内网关
- en: Creating web and mobile dashboards
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建网页和移动仪表板
- en: Technical requirements
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The following hardware components are required to complete the exercise in
    this chapter:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本章练习所需的以下硬件组件：
- en: MKR WAN 1300 or MKR WAN 1310
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MKR WAN 1300 或 MKR WAN 1310
- en: The Things Indoor Gateway
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: The Things 室内网关
- en: The NEO-6M u-blox GPS module
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NEO-6M u-blox GPS 模块
- en: A breadboard
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 面包板
- en: Jumper cables
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跳线
- en: To code, we will use the **Arduino Web Editor**, which includes a large collection
    of development boards and sensor libraries, and the Arduino IoT Cloud for the
    Thing and dashboard setup. To develop hardware and sensor designs, we need the
    **Fritzing** desktop software, and we need the **Arduino IDE** for GPS module
    testing.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 编码时，我们将使用**Arduino Web Editor**，它包含大量开发板和传感器库，以及用于 Thing 和仪表板设置的**Arduino IoT
    Cloud**。为了开发硬件和传感器设计，我们需要**Fritzing**桌面软件，以及用于 GPS 模块测试的**Arduino IDE**。
- en: 'In this chapter, we will use the **The Things Indoor Gateway** for LoRaWAN
    communication. The code used in the chapter is available in the book’s official
    GitHub repository by following this link: [https://github.com/PacktPublishing/Arduino-IoT-Cloud-for-Developers](https://github.com/PacktPublishing/Arduino-IoT-Cloud-for-Developers).'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用**The Things 室内网关**进行 LoRaWAN 通信。本章中使用的代码可在本书的官方 GitHub 仓库中找到，通过以下链接：[https://github.com/PacktPublishing/Arduino-IoT-Cloud-for-Developers](https://github.com/PacktPublishing/Arduino-IoT-Cloud-for-Developers)。
- en: Understanding LoRaWAN and its IoT applications
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 LoRaWAN 及其物联网应用
- en: LoRaWAN is a wireless communication protocol and network architecture specifically
    designed for **Low-Power Wide Area Networks** (**LPWANs**), enabling long-range
    communication between devices in the context of the IoT. LoRaWAN technology is
    optimized for applications that require low data rates, long battery life, and
    long communication ranges, making it well-suited for various IoT use cases.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: LoRaWAN是一种专为**低功耗广域网（LPWANs**）设计的无线通信协议和网络架构，它使得在物联网环境中设备之间能够进行长距离通信。LoRaWAN技术针对需要低数据速率、长电池寿命和长通信范围的应用进行了优化，使其非常适合各种物联网用例。
- en: Usage in IoT
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在物联网中的应用
- en: 'LoRaWAN has been widely adopted in various IoT applications due to its unique
    features. Some common use cases include the following:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 由于其独特的特性，LoRaWAN已被广泛应用于各种物联网应用。以下是一些常见的用例：
- en: '**Smart agriculture**: LoRaWAN can be used for soil moisture monitoring, crop
    health monitoring, livestock tracking, and precision farming, allowing farmers
    to optimize their operations and increase yield'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**智能农业**：LoRaWAN可用于土壤湿度监测、作物健康监测、牲畜追踪和精准农业，帮助农民优化他们的操作并提高产量'
- en: '**Smart cities**: LoRaWAN can enable smart street lighting, waste management,
    parking management, and environmental monitoring, helping cities become more efficient
    and sustainable'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**智能城市**：LoRaWAN可以启用智能街灯、废物管理、停车管理和环境监测，帮助城市变得更加高效和可持续'
- en: '**Industrial monitoring**: LoRaWAN can monitor equipment health, track assets,
    and improve supply chain management in industrial settings, leading to better
    maintenance practices and reduced downtime'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工业监控**：LoRaWAN可在工业环境中监测设备健康、追踪资产并改善供应链管理，从而提高维护实践并减少停机时间'
- en: '**Utilities**: LoRaWAN can be used for smart meters and to remotely monitor
    utility infrastructure, such as water and gas meters, improving billing accuracy
    and resource management'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**公用事业**：LoRaWAN可用于智能电表，并远程监控公用事业基础设施，如水和燃气表，提高计费准确性和资源管理'
- en: '**Environmental monitoring**: LoRaWAN can support applications such as air
    quality monitoring, water quality monitoring, and wildlife tracking, helping researchers
    and organizations gather valuable environmental data'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**环境监测**：LoRaWAN可以支持空气质量监测、水质监测和野生动物追踪等应用，帮助研究人员和组织收集有价值的环保数据'
- en: '**Asset tracking**: LoRaWAN enables real-time tracking of assets, such as shipping
    containers, vehicles, and valuable equipment, ensuring their security and efficient
    utilization'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资产追踪**：LoRaWAN能够实时追踪资产，如货运集装箱、车辆和贵重设备，确保其安全和高效利用'
- en: Overall, LoRaWAN’s combination of long communication ranges, low power consumption,
    and scalability makes it a powerful technology to build IoT networks that cover
    large areas and connect a wide range of devices for various applications.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，LoRaWAN的长通信范围、低功耗和可扩展性使其成为构建覆盖大面积并连接各种应用的物联网网络的强大技术。
- en: In this section, we have discussed the different use cases of LoRaWAN in the
    field of IoT, and in the next section, we will discuss why to choose LoRaWAN over
    other communication technologies.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论了LoRaWAN在物联网领域的不同应用案例，在下一节中，我们将讨论为什么选择LoRaWAN而非其他通信技术。
- en: LoRaWAN versus other communication technologies
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: LoRaWAN与其他通信技术的比较
- en: 'LoRaWAN offers several advantages over other communication technologies, making
    it a preferred choice for certain IoT applications. Here are some reasons why
    LoRaWAN might be chosen over other alternatives:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: LoRaWAN相较于其他通信技术具有多项优势，使其成为某些物联网应用的优先选择。以下是选择LoRaWAN而非其他替代方案的一些原因：
- en: '**Long range**: LoRaWAN provides exceptional long-range communication capabilities,
    enabling devices to communicate over several kilometers in open areas. This is
    particularly useful for applications that require connectivity over large distances,
    such as agriculture, environmental monitoring, and asset tracking.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**长距离**：LoRaWAN提供了卓越的长距离通信能力，使得设备能够在开阔地区进行数公里的通信。这对于需要在大距离范围内连接的应用尤其有用，如农业、环境监测和资产追踪。'
- en: '**Low power consumption**: Devices using LoRaWAN can operate on very low power,
    extending battery life for years. This is crucial for remote or hard-to-reach
    locations where changing or recharging batteries is impractical or costly.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**低功耗**：使用LoRaWAN的设备可以在非常低的功耗下运行，延长电池寿命数年。这对于偏远或难以到达的地方至关重要，在这些地方更换或充电电池不切实际或成本高昂。'
- en: '**Deep indoor penetration**: LoRaWAN can penetrate buildings and other obstacles
    effectively, ensuring connectivity even in challenging environments. This makes
    it suitable for applications such as smart building management and indoor asset
    tracking.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**深度室内穿透**：LoRaWAN能够有效地穿透建筑物和其他障碍物，确保即使在具有挑战性的环境中也能保持连接。这使得它适用于智能楼宇管理和室内资产跟踪等应用。'
- en: '**Cost-effective**: Implementing and maintaining a LoRaWAN network is often
    more cost-effective than deploying traditional cellular networks. This makes LoRaWAN
    a viable option for businesses and organizations looking to deploy IoT solutions
    on a larger scale.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**成本效益**：实施和维护LoRaWAN网络通常比部署传统蜂窝网络更具成本效益。这使得LoRaWAN成为寻求在大规模部署物联网解决方案的企业和组织的一个可行的选择。'
- en: '**Scalability**: LoRaWAN networks can handle a massive number of devices within
    a single network. This scalability is essential for IoT applications that involve
    a high density of devices, such as smart city deployments.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性**：LoRaWAN网络能够在单个网络中处理大量的设备。这种可扩展性对于涉及高密度设备的物联网应用至关重要，例如智能城市部署。'
- en: '**Low data rate applications**: LoRaWAN is optimized for applications that
    transmit small amounts of data at low data rates. For IoT use cases involving
    sensor data, meter readings, and periodic updates, LoRaWAN provides a suitable
    and efficient communication solution.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**低数据速率应用**：LoRaWAN针对传输少量数据且数据速率较低的应用进行了优化。对于涉及传感器数据、仪表读数和定期更新的物联网用例，LoRaWAN提供了一个合适且高效的通信解决方案。'
- en: '**Network flexibility**: LoRaWAN supports both public and private network deployments.
    Organizations can choose to set up their own private LoRaWAN network or use existing
    public networks, giving them flexibility in terms of ownership and control.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络灵活性**：LoRaWAN支持公共和私有网络的部署。组织可以选择建立自己的私有LoRaWAN网络或使用现有的公共网络，这为他们提供了在所有权和控制方面的灵活性。'
- en: '**Adaptive data rate**: LoRaWAN devices can adjust their data rate based on
    signal strength and interference, optimizing communication for the current conditions.
    This adaptive feature enhances reliability and ensures the efficient use of available
    resources.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自适应数据速率**：LoRaWAN设备可以根据信号强度和干扰调整其数据速率，优化当前条件下的通信。这种自适应功能提高了可靠性并确保了可用资源的有效利用。'
- en: '**Global standard**: LoRaWAN is a global standard, and devices designed to
    work with it can operate seamlessly across different regions and countries. This
    standardization simplifies device development and deployment for international
    projects.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**全球标准**：LoRaWAN是一个全球标准，与其兼容的设备可以在不同地区和国家无缝运行。这种标准化简化了国际项目的设备开发和部署。'
- en: '**Diverse applications**: LoRaWAN’s versatility enables its use in various
    application domains, from agriculture and industrial monitoring to smart cities
    and environmental sensing.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多样化的应用**：LoRaWAN的通用性使其能够在各种应用领域中使用，从农业和工业监控到智能城市和环境传感。'
- en: While LoRaWAN offers these advantages, it’s important to note that no single
    communication technology is universally superior. The choice between LoRaWAN and
    other technologies (such as cellular, Wi-Fi, Bluetooth, or Zigbee) depends on
    the specific requirements of the IoT application, including factors such as range,
    power consumption, data rate, cost, and scalability. Each technology has its strengths
    and weaknesses, and the selection should be based on a careful analysis of a project’s
    needs.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然LoRaWAN提供了这些优势，但重要的是要注意，没有一种通信技术是普遍优越的。在LoRaWAN和其他技术（如蜂窝、Wi-Fi、蓝牙或Zigbee）之间的选择取决于物联网应用的具体要求，包括范围、功耗、数据速率、成本和可扩展性等因素。每种技术都有其优势和劣势，选择应基于对项目需求的仔细分析。
- en: In this section, we have discussed the benefits of using LoRaWAN. In the next
    section, we will explore the important components of LoRaWAN.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论了使用LoRaWAN的好处。在下一节中，我们将探讨LoRaWAN的重要组件。
- en: Components of a LoRaWAN IoT application
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: LoRaWAN物联网应用组件
- en: LoRaWAN is a wireless communication protocol and network architecture designed
    to enable long-range, low-power communication between IoT devices. It’s specifically
    tailored to connect devices that require extended battery life, reliable long-distance
    communication, and efficient use of the wireless spectrum. LoRaWAN is one of the
    key technologies in the realm of LPWANs. *Figure 6**.1* illustrates the whole
    architecture of the LoRaWAN solution, including the end nodes, gateway, network
    server, and application server.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: LoRaWAN是一种无线通信协议和网络架构，旨在实现物联网设备之间的长距离、低功耗通信。它专门针对需要延长电池寿命、可靠的长距离通信和高效无线频谱使用的设备进行设计。LoRaWAN是LPWAN领域的关键技术之一。*图6.1*展示了LoRaWAN解决方案的整体架构，包括终端节点、网关、网络服务器和应用服务器。
- en: '![Figure 6.1 – The components of a LoRaWAN network](img/B19752_06_01.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图6.1 – LoRaWAN网络的组件](img/B19752_06_01.jpg)'
- en: Figure 6.1 – The components of a LoRaWAN network
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.1 – LoRaWAN网络的组件
- en: 'The LoRaWAN architecture consists of four main components:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: LoRaWAN架构由四个主要组件组成：
- en: '**End nodes/devices**: These are the IoT devices that gather data from sensors
    or perform specific tasks. They communicate with gateways using the LoRa modulation
    technique, sending data packets at low data rates.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**终端节点/设备**：这些是物联网设备，从传感器收集数据或执行特定任务。它们使用LoRa调制技术与网关通信，以低数据速率发送数据包。'
- en: '**Gateways**: Gateways serve as intermediate points that receive data packets
    from end devices and transmit them to a centralized network server. They are typically
    connected to the internet via wired or wireless connections.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网关**：网关作为中间点，接收来自终端设备的数据包并将它们传输到集中式网络服务器。它们通常通过有线或无线连接连接到互联网。'
- en: '**Network server**: The network server manages communication between gateways
    and end devices. It handles functions such as authentication, encryption, and
    the routing of data packets to their respective application servers.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络服务器**：网络服务器负责管理网关和终端设备之间的通信。它处理诸如身份验证、加密以及将数据包路由到相应的应用服务器等功能。'
- en: '**Application server**: The application server is responsible for processing
    data received from the network server and performing specific actions based on
    the data. It interfaces with an end user’s application or backend system to present
    data, trigger alerts, perform analytics, or control devices. The application server
    can be hosted on the cloud or on-premises.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用服务器**：应用服务器负责处理从网络服务器接收到的数据，并根据数据执行特定操作。它与终端用户的客户端或后端系统接口，以展示数据、触发警报、执行分析或控制设备。应用服务器可以托管在云端或本地。'
- en: In this section, we have discussed LoRaWAN components in detail, and in the
    next section, we are going to explore the hardware and sensors that are required
    to execute the practical exercise of this chapter.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们详细讨论了LoRaWAN组件，在下一节中，我们将探讨执行本章实际练习所需的硬件和传感器。
- en: Essential hardware – sensors and development boards
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 必要硬件 – 传感器和开发板
- en: The Arduino series has a wide collection of development boards that vary in
    size, pins, and communication technologies. In this chapter, we will use the Arduino
    MKR WAN 1300 development board, as it’s compact, battery-enabled, and provides
    support for different frequencies from different regions around the world, including
    433/868/915 MHz. *Figure 6**.2* shows a pinout diagram of the MKR WAN 1300.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino系列拥有多种开发板，尺寸、引脚和通信技术各不相同。在本章中，我们将使用Arduino MKR WAN 1300开发板，因为它体积紧凑、支持电池供电，并提供支持全球不同地区的不同频率，包括433/868/915
    MHz。*图6.2*展示了MKR WAN 1300的引脚图。
- en: '![Figure 6.2 – Arduino MKR WAN 1300](img/B19752_06_02.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图6.2 – Arduino MKR WAN 1300](img/B19752_06_02.jpg)'
- en: Figure 6.2 – Arduino MKR WAN 1300
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.2 – Arduino MKR WAN 1300
- en: The Arduino MKR WAN 1300 provides seven analog pins, which start with **A**
    (**A0**, **A1**, and so on), and eight digital input/output pins, which start
    with **D** (**D0**, **D1**, and so on), with built-in battery charging and a **lithium
    polymer** (**LiPo**) battery connector for standby power, which helps developers
    build prototypes and solutions for remote monitoring/operations without worrying
    about power backups. For further updates and the latest product development news,
    please visit the official website at [https://store.arduino.cc/products/arduino-mkr-wan-1300-lora-connectivity](https://store.arduino.cc/products/arduino-mkr-wan-1300-lora-connectivity).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino MKR WAN 1300提供七个模拟引脚，以**A**开头（**A0**、**A1**等），以及八个数字输入/输出引脚，以**D**开头（**D0**、**D1**等），内置电池充电和**锂聚合物**(**LiPo**)电池连接器用于备用电源，这有助于开发者构建远程监控/操作的原型和解决方案，无需担心电源备份。有关进一步更新和最新产品开发新闻，请访问官方网站[https://store.arduino.cc/products/arduino-mkr-wan-1300-lora-connectivity](https://store.arduino.cc/products/arduino-mkr-wan-1300-lora-connectivity)。
- en: Arduino’s latest development board is the MKR WAN 1310, which contains the same
    processor and module for LoRa communication as the MKR WAN 1300\. However, the
    MKR WAN 1310 has an updated in-battery charger, 2 MB of **Serial Peripheral Interface**
    (**SPI**) flash, and enhanced power consumption. This board is specially designed
    for IoT devices and is quickly growing in popularity in different regions. For
    its complete details and specifications, visit [https://store.arduino.cc/products/arduino-mkr-wan-1310](https://store.arduino.cc/products/arduino-mkr-wan-1310).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino最新的开发板是MKR WAN 1310，它包含与MKR WAN 1300相同的LoRa通信处理器和模块。然而，MKR WAN 1310具有更新的内置电池充电器、2
    MB的**串行外设接口**(**SPI**)闪存和增强的功耗。该板专门为物联网设备设计，并在不同地区迅速增长。有关其完整详情和规格，请访问[https://store.arduino.cc/products/arduino-mkr-wan-1310](https://store.arduino.cc/products/arduino-mkr-wan-1310)。
- en: In this chapter, we will track the device via GPS coordinates. To get the GPS
    coordinates, we will use the GY-GPS6MV2 GPS module, which is based on the NEO-6M
    u-blox chip. The GPS module operates on both a software serial and a hardware
    serial, but the MKR WAN 1300 provides a built-in hardware serial, so we will use
    *ins 13* and *14* to communicate with the GPS module shown in *Figure 6**.3*.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将通过GPS坐标追踪设备。为了获取GPS坐标，我们将使用基于NEO-6M u-blox芯片的GY-GPS6MV2 GPS模块。该GPS模块可以在软件串行和硬件串行上运行，但MKR
    WAN 1300提供了内置的硬件串行，因此我们将使用*ins 13*和*14*与*图6**.3*中所示的GPS模块进行通信。
- en: 'The GPS module provides latitude, longitude, satellite count, altitude feet,
    and speed-per-mile properties. These properties will be displayed on a dashboard
    for proper asset tracking. This module was developed in China and is available
    at affordable prices, but many other organizations are developing GPS modules
    that are also based on the NEO-6M u-blox chip, such as SparkFun, Seeed Studio,
    and Adafruit. *Figure 6**.3* shows a NEO-6M u-blox GPS module and its pinout diagram:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: GPS模块提供纬度、经度、卫星数量、海拔英尺和每英里速度属性。这些属性将在仪表板上显示，以便进行适当的资产追踪。该模块是在中国开发的，价格实惠，但许多其他组织也在开发基于NEO-6M
    u-blox芯片的GPS模块，例如SparkFun、Seeed Studio和Adafruit。*图6**.3*显示了NEO-6M u-blox GPS模块及其引脚图：
- en: '![Figure 6.3 – The GY-GPS6MV2 NEO6MV2 GPS module and a pinout diagram](img/B19752_06_03.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图6.3 – GY-GPS6MV2 NEO6MV2 GPS模块和引脚图](img/B19752_06_03.jpg)'
- en: Figure 6.3 – The GY-GPS6MV2 NEO6MV2 GPS module and a pinout diagram
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.3 – GY-GPS6MV2 NEO6MV2 GPS模块和引脚图
- en: 'The preceding diagram describes the pinout layout of the GPS module. *Pin #1*
    is the **GND** pin that connects with the onboard GND pin of the MKR WAN 1300\.
    *Pin #2* and *Pin #3* are **TX** and **RX**, respectively, and will connect to
    *Pin #13* and *Pin #14* of the MKR WAN 1300, respectively. *Pin #4*, **VCC**,
    works with both an onboard VCC and the 5V pins of the MKR WAN 1300\. You can solder
    the male headers with the GPS module or directly solder the cables without any
    header pins.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 上述图示描述了GPS模块的引脚布局。*引脚#1*是**GND**引脚，它与MKR WAN 1300板上的GND引脚相连。*引脚#2*和*引脚#3*分别是**TX**和**RX**，将分别连接到MKR
    WAN 1300的*引脚#13*和*引脚#14*。*引脚#4*，**VCC**，与板上的VCC和MKR WAN 1300的5V引脚兼容。您可以使用带有GPS模块的雄性引脚或直接焊接电缆而不使用任何引脚。
- en: Important note
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The GPS module works best in an outdoor environment. Make sure there are no
    rooftops above during testing and deployment to properly receive a signal from
    satellites.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: GPS模块在户外环境中表现最佳。确保在测试和部署期间没有屋顶阻挡，以便正确接收来自卫星的信号。
- en: If you are using the module in the lab, then there will be a chance that the
    GPS module will not work properly. Remember that there is a built-in light on
    the GPS module that starts blinking when you receive signals from satellites.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是在实验室中使用该模块，那么GPS模块可能无法正常工作。请记住，GPS模块上有一个内置的灯，当你从卫星接收到信号时，它会开始闪烁。
- en: In this section, we have discussed the development board and GPS module in detail,
    including their pinout diagrams. In the next section, we will start exploring
    how to connect the GPS module with the MKR WAN 1300.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们详细讨论了开发板和GPS模块，包括它们的引脚图。在下一节中，我们将开始探索如何将GPS模块与MKR WAN 1300连接起来。
- en: Designing the project architecture
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计项目架构
- en: In the preceding sections, we discussed the module and development board in
    detail. Now, it’s time to cook the recipe. In hardware development, before getting
    to work with sensors and development boards, we need to develop the design concepts
    to get a better understanding of how things will connect. There is a lot of software
    that is available to design and develop design concepts for an electronics project,
    but in this case, we will use Fritzing.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们详细讨论了模块和开发板。现在，是时候准备食谱了。在硬件开发中，在开始使用传感器和开发板之前，我们需要开发设计概念，以便更好地了解事物如何连接。有许多软件可用于设计电子项目的概念，但在此情况下，我们将使用Fritzing。
- en: In the following two subsections, we will talk about schematics and designing
    a project, while explaining how to connect pins with a development board and soldering.
    Then, we will do some tests to fetch GPS coordinates, which is very important
    before sending data to the Arduino IoT Cloud.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的两个子节中，我们将讨论电路图和项目设计，同时解释如何使用开发板连接引脚并进行焊接。然后，我们将进行一些测试以获取GPS坐标，这在将数据发送到Arduino
    IoT Cloud之前非常重要。
- en: Schematics design and assembly
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 电路图设计和组装
- en: 'The purpose of your schematic design is to get a clear understanding of how
    sensors will connect with a development board. This helps engineers develop a
    prototype on a breadboard or Veroboard, as shown in *Figure 6**.4*. Another major
    benefit of designing is that Fritzing builds hardware schematics and PCB design
    in the background according to your design, which can be adjusted according to
    system requirements. *Figure 6**.4* shows a schematic diagram of how to connect
    the MKR WAN 1300 with the NEO-6M u-blox GPS module:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 你的电路图设计目的是为了清楚地了解传感器如何与开发板连接。这有助于工程师在面包板或Veroboard上开发原型，如图*图6**.4*所示。设计的主要好处之一是Fritzing可以根据你的设计在后台构建硬件电路图和PCB设计，这可以根据系统要求进行调整。*图6**.4*显示了如何连接MKR
    WAN 1300与NEO-6M u-blox GPS模块的电路图：
- en: '![Figure 6.4 – The MKR WAN 1300 and GPS module schematic](img/B19752_06_04.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图6.4 – MKR WAN 1300和GPS模块电路图](img/B19752_06_04.jpg)'
- en: Figure 6.4 – The MKR WAN 1300 and GPS module schematic
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.4 – MKR WAN 1300和GPS模块电路图
- en: While *Figure 6**.4* illustrates the design of the MKR WAN 1300 and GPS module,
    we have created *Table 6.1* for easier understanding, which illustrates (in row
    format) how to connect pins.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然*图6**.4*说明了MKR WAN 1300和GPS模块的设计，但我们创建了*表6.1*以方便理解，它以行格式说明了如何连接引脚。
- en: '| **MKR** **WAN 1300** | **NEO-6M u-blox** **GPS module** |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| **MKR** **WAN 1300** | **NEO-6M u-blox** **GPS模块** |'
- en: '| 14 (TX) | RX |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| 14 (TX) | RX |'
- en: '| 13 (RX) | TX |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| 13 (RX) | TX |'
- en: '| VCC | VCC |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| VCC | VCC |'
- en: '| GND | GND |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| GND | GND |'
- en: Table 6.1 – MKR WAN 1300 to GPS module pinout
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 表6.1 – MKR WAN 1300到GPS模块引脚分配
- en: 'The preceding design provides a full overview of how you can connect a module
    to a development board. According to our design, we have 5V and GND pins going
    from the development board to the GPS module. The GPS module **TX** pin is connected
    to the **RX** pin (*Pin #13*), and the GPS module **RX** pin is connected to the
    **TX** pin (*Pin #14*) of the development board. Finally, we built our prototype
    by using a breadboard, which is shown in *Figure 6**.5*:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 上述设计提供了如何将模块连接到开发板的全面概述。根据我们的设计，我们从开发板到GPS模块有5V和GND引脚。GPS模块的**TX**引脚连接到开发板的**RX**引脚（*引脚编号13*），GPS模块的**RX**引脚连接到开发板的**TX**引脚（*引脚编号14*）。最后，我们使用面包板构建了我们的原型，如图*图6**.5*所示：
- en: '![Figure 6.5 – The final prototype MKR WAN 1300 and GPS module](img/B19752_06_05.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![图6.5 – 最终原型MKR WAN 1300和GPS模块](img/B19752_06_05.jpg)'
- en: Figure 6.5 – The final prototype MKR WAN 1300 and GPS module
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.5 – 最终原型MKR WAN 1300和GPS模块
- en: After soldering the male headers to the GPS module, connect the pins according
    to the schematic diagram. There is only one sensor, so there is no requirement
    for the Veroboard. Next, we will test the GPS module using Arduino’s **Serial
    Monitor** tool to verify that our GPS module works properly and gets values from
    GPS satellites.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在将公排针焊接至GPS模块后，根据原理图连接引脚。由于只有一个传感器，因此不需要Veroboard。接下来，我们将使用Arduino的**串行监视器**工具测试GPS模块，以验证我们的GPS模块是否正常工作并从GPS卫星获取值。
- en: Testing GPS module data
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试GPS模块数据
- en: 'Before moving toward the Arduino IoT Cloud, firstly, we need to verify that
    our GPS module is working. So, in this section, we will test the GPS module by
    using the Arduino IDE and its Serial Monitor tool to observe the readings from
    the GPS module. The following steps will guide you on how we will set up the testing
    environment:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在转向Arduino IoT Cloud之前，首先，我们需要验证我们的GPS模块是否工作。因此，在本节中，我们将使用Arduino IDE及其串行监视器工具测试GPS模块，以观察GPS模块的读数。以下步骤将指导我们如何设置测试环境：
- en: For module testing, we need the Serial Monitor tool to verify whether the GPS
    module works properly or not. Click on the **Tools** menu and select **Serial
    Monitor**. Select the Arduino MKR WAN 1300 board from **Tools** | **Board** |
    **Arduino SAMD** | **Arduino MKR WAN 1300** in the Arduino IDE.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于模块测试，我们需要串行监视器工具来验证GPS模块是否正常工作。点击**工具**菜单并选择**串行监视器**。在Arduino IDE中，从**工具**
    | **板** | **Arduino SAMD** | **Arduino MKR WAN 1300**选择Arduino MKR WAN 1300板。
- en: Select the port of the MKR WAN 1300.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择MKR WAN 1300的端口。
- en: Next, we need to install the library for the GPS module in the Arduino IDE.
    Navigate to `tinygps` into the search bar.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要在Arduino IDE中安装GPS模块的库。在搜索栏中导航到`tinygps`。
- en: '![Figure 6.6 – The TinyGPSPlus library](img/B19752_06_06.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![图6.6 – TinyGPSPlus库](img/B19752_06_06.jpg)'
- en: Figure 6.6 – The TinyGPSPlus library
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.6 – TinyGPSPlus库
- en: After searching, the Library Manager brings up a lot of libraries. Select the
    **TinyGPSPlus** library and install its latest version. The library comes with
    a lot of examples, and all of them are based on a software serial. However, Arduino
    SAMD boards provide a hardware serial. Therefore, I’ve modified the code to use
    a hardware serial to communicate with the GPS module.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 搜索后，库管理器会显示许多库。选择**TinyGPSPlus**库并安装其最新版本。该库附带许多示例，所有这些示例都是基于软件串行的。然而，Arduino
    SAMD板提供硬件串行。因此，我已经修改了代码以使用硬件串行与GPS模块通信。
- en: 'Download the code from the book’s official GitHub repository, and under the
    `chapter#6` folder, open the `MKR-WAN-1300-NEO-6M-GPS-Module` ZIP folder, extract
    it, and upload the code to the development board:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从书籍的官方GitHub仓库下载代码，然后在`chapter#6`文件夹下，打开`MKR-WAN-1300-NEO-6M-GPS-Module` ZIP文件夹，解压它，并将代码上传到开发板：
- en: '[PRE0]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the setup, we have initialized `Serial` and `Serial1`. `Serial` is used to
    display the content to the Serial Monitor (the magnifier icon in the top right
    of the Arduino IDE) on screen, while `Serial1` is the hardware serial that is
    used to communicate with the GPS module. The preceding code belongs to the `loop()`
    method.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置中，我们已初始化`Serial`和`Serial1`。`Serial`用于在屏幕上显示内容到串行监视器（Arduino IDE右上角的放大镜图标），而`Serial1`是用于与GPS模块通信的硬件串行。前面的代码属于`loop()`方法。
- en: First, the GPS module will read data from satellites using the `Serial1.read()`
    method and encode it via the `gps.encode()` method. `Serial1` only reads one character
    at a time, so it will take a little bit of time for the updated values. Then,
    we will verify whether there is any update in `Latitude` and `Longitude` coordinates
    by using the `gps.location.isUpdated()` method. If there is a change, then the
    data will be printed on the Serial Monitor.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，GPS模块将使用`Serial1.read()`方法从卫星读取数据，并通过`gps.encode()`方法进行编码。`Serial1`一次只读取一个字符，因此更新值将需要一点时间。然后，我们将使用`gps.location.isUpdated()`方法验证`纬度`和`经度`坐标是否有任何更新。如果有变化，则数据将在串行监视器上打印出来。
- en: Important note
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Make sure your GPS module is placed in an open environment where you have a
    clear sky, without any obstruction such as a roof or anything that stops you from
    receiving proper signals from satellites.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您的GPS模块放置在一个开阔的环境中，您有清晰的视野，没有任何障碍物，如屋顶或任何阻止您接收卫星正确信号的东西。
- en: The GPS module has an onboard built-in LED that starts blinking when it starts
    receiving data from GPS satellites.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: GPS模块有一个板载内置LED，当它开始接收来自GPS卫星的数据时，LED开始闪烁。
- en: The same code will work with the MKR WAN 1310 without any modification.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 同样的代码无需修改即可在MKR WAN 1310上运行。
- en: '*Figure 6**.7* shows the Serial Monitor with values from the GPS, which includes
    `Latitude`, `Longitude`, and other parameters:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '*图6.7*显示了带有GPS值的串行监视器，包括`纬度`、`经度`和其他参数：'
- en: '![Figure 6.7 – The GPS module data on the Serial Monitor](img/B19752_06_07.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![图6.7 – 串行监视器上的GPS模块数据](img/B19752_06_07.jpg)'
- en: Figure 6.7 – The GPS module data on the Serial Monitor
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.7 – 串行监视器上的GPS模块数据
- en: The preceding figure shows the data that is received by the GPS module from
    GPS satellites and printed on the Serial Monitor. The data includes the satellite
    count, the latitude and longitude that represent the location coordinates, the
    speed in MPH based on current and previous GPS coordinates, and the altitude in
    feet.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图显示了GPS模块从GPS卫星接收的数据，并在串行监视器上打印出来。数据包括卫星数量、代表位置坐标的纬度和经度、基于当前和先前GPS坐标的速度（英里/小时），以及高度（英尺）。
- en: In this section, we tested the NEO-6M u-blox GPS module in the Arduino IDE.
    First, we installed the `TinyGPSPlus` library for the module, and later, we used
    the aforementioned code for the development board, which shows the readings on
    the Serial Monitor. In the next section, we will start with the Thing setup in
    the Arduino IoT Cloud.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们在Arduino IDE中测试了NEO-6M u-blox GPS模块。首先，我们为该模块安装了`TinyGPSPlus`库，然后我们使用了上述代码进行开发板开发，该代码在串行监视器上显示了读数。在下一节中，我们将从Arduino
    IoT云中的“物”设置开始。
- en: Setting up the Thing, device association, cloud variables, and code
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置“物”、设备关联、云变量和代码
- en: 'After setting up the hardware, it’s time to set up the Thing in the Arduino
    IoT Cloud. For this project, we need four cloud variables to fetch different properties
    from the device. The device association settings will be different due to the
    LoRa series board. Also, network configuration will happen automatically when
    we upload the code/sketch to the MKR WAN 1300\. *Figure 6**.8* shows a complete
    overview of the Thing:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置好硬件之后，现在是时候在Arduino IoT云中设置“物”了。对于这个项目，我们需要四个云变量来从设备获取不同的属性。由于LoRa系列板，设备关联设置将有所不同。此外，当我们上传代码/草图到MKR
    WAN 1300时，网络配置将自动完成。*图6.8*显示了“物”的完整概述：
- en: '![Figure 6.8 – Remote asset tracking using the LoRaWAN Thing setup](img/B19752_06_08.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![图6.8 – 使用LoRaWAN“物”设置的远程资产跟踪](img/B19752_06_08.jpg)'
- en: Figure 6.8 – Remote asset tracking using the LoRaWAN Thing setup
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.8 – 使用LoRaWAN“物”设置的远程资产跟踪
- en: Set up a new Thing with the name **A remote asset tracking using LoRaWAN**,
    and then follow the next steps, which will take you to the next subsections to
    create variables, an associate device network configuration, and finally, code.
    We have marked the preceding figure with red boxes and numbers according to the
    following steps.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 以**使用LoRaWAN进行远程资产跟踪**的名称设置一个新的“物”，然后按照以下步骤进行，这将带您进入下一小节以创建变量、关联设备网络配置，最后是代码。我们根据以下步骤在先前的图中用红色方框和数字进行了标记。
- en: Firstly, we need to set up four cloud variables – `Location`, `AltitudeFeet`,
    `SatelliteCount`, and `Speed`. The complete details regarding cloud variables
    are available in the following subsection.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要设置四个云变量——`Location`、`AltitudeFeet`、`SatelliteCount`和`Speed`。有关云变量的完整细节可在以下小节中找到。
- en: After that, we need to associate the device with the Thing. In the current project,
    we will use the MKR WAN 1300, so the process will be the same as the one used
    for Arduino boards, but here, we will see some different options due to LoRaWAN.
    The complete details are available in the *Associating a* *device* section.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们需要将设备与“物”关联。在当前项目中，我们将使用MKR WAN 1300，因此过程将与Arduino板上的过程相同，但在这里，我们将看到一些由于LoRaWAN而不同的选项。完整细节可在*关联设备*部分找到。
- en: Cloud variables
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 云变量
- en: The following table explains all the properties of the variables that we need
    to create. For the location, we need two different variables to store the latitude
    and longitude, but thanks to the Arduino IoT Cloud extended group of variables,
    we have a `Location`-type variable. Then, make sure each variable matches the
    declaration in the table; otherwise, you will need to modify the example code
    according to your naming.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 下表解释了我们需要创建的所有变量的属性。对于位置，我们需要两个不同的变量来存储纬度和经度，但多亏了Arduino IoT云扩展变量组，我们有一个`Location`类型的变量。然后，确保每个变量与表中的声明相匹配；否则，您需要根据您的命名修改示例代码。
- en: As shown in *Table 6.2*, when creating the cloud variables, we set the permission
    to **Read-Only**. Although we have the *Read*/*Write* option, in this project,
    we only want to receive data from the device instead of modifying the data via
    the dashboard. That’s why **read-only** mode is used – to avoid issues in data
    consistency. **Update policy** is set to **On Change**, as the device will send
    the data when the GPS module receives new data from satellites.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如*表6.2*所示，在创建云变量时，我们将权限设置为**只读**。尽管我们有**读/写**选项，但在本项目中，我们只想从设备接收数据，而不是通过仪表板修改数据。这就是为什么使用**只读**模式的原因——以避免数据一致性问题。**更新策略**设置为**有变化时**，因为当GPS模块从卫星接收到新数据时，设备将发送数据。
- en: '| **S#** | **Variable name** | **Variable type** | **Declaration** | **Permission**
    | **Update** **policy** |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| **S#** | **变量名** | **变量类型** | **声明** | **权限** | **更新策略** |'
- en: '| 1 | `AltitudeFeet` | `Float` | `altitudeFeet` | Read-Only | On Change |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| 1 | `AltitudeFeet` | `Float` | `altitudeFeet` | 只读 | 有变化时 |'
- en: '| 2 | `Location` | `CloudLocation` | `location` | Read-Only | On Change |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| 2 | `Location` | `CloudLocation` | `location` | 只读 | 有变化时 |'
- en: '| 3 | `SatelliteCount` | `Int` | `satelliteCount` | Read-Only | On Change |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| 3 | `SatelliteCount` | `Int` | `satelliteCount` | 只读 | 有变化时 |'
- en: '| 4 | `Speed` | `Float` | `speed` | Read-Only | On Change |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| 4 | `Speed` | `Float` | `speed` | 只读 | 有变化时 |'
- en: Table 6.2 – The cloud variables list for the Thing
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 表6.2 – 设备的云变量列表
- en: In this section, we discussed what type of cloud variables are required for
    this project. Here, we listed four cloud variables of different types but in **read-only**
    mode, as we only want to extract the values from the device. In the next subsection,
    we will associate the MKR WAN 1300 with the Thing.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论了本项目所需的云变量类型。在这里，我们列出了四种不同类型的云变量，但都设置为**只读**模式，因为我们只想从设备提取值。在下一个小节中，我们将关联MKR
    WAN 1300与设备。
- en: Associating a device
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关联设备
- en: 'After creating the variables, it’s time to add the device and associate it
    with the Thing:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 创建变量后，现在是时候添加设备并将其与设备关联了：
- en: Before adding the device, connect the development board to the computer and
    open the **Arduino Create Agent** application. *Figure 6**.9* shows a popup in
    which we have options to either select the existing device for association or
    set up a new device that is not available on the list.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在添加设备之前，请将开发板连接到计算机并打开**Arduino Create Agent**应用程序。*图6.9*显示了弹出窗口，其中我们有两个选项：选择现有设备进行关联或设置不在列表上的新设备。
- en: '![Figure 6.9 – Associate device – selecting a device](img/B19752_06_09.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![图6.9 – 关联设备 – 选择设备](img/B19752_06_09.jpg)'
- en: Figure 6.9 – Associate device – selecting a device
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.9 – 关联设备 – 选择设备
- en: In our case, we already have different devices in the portal, but we want to
    add a new one, MKR WAN 1300, so just click on **SET UP NEW DEVICE** to configure
    the new device in the account.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，我们已经在门户中有了不同的设备，但我们要添加一个新的，即MKR WAN 1300，因此只需点击**设置新设备**来在账户中配置新设备。
- en: Then, you will see three options in the popup. The first option is **Arduino
    board**, the second option is **Third party device**, and the third option is
    **Any Device**, which is for non-compatible devices. This means you can now use
    all types of Arduino devices as well as third-party devices with the Arduino IoT
    Cloud, which supports Python, MicroPython, and JavaScript.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，您将在弹出窗口中看到三个选项。第一个选项是**Arduino板**，第二个选项是**第三方设备**，第三个选项是**任何设备**，这是用于非兼容设备的。这意味着您现在可以使用所有类型的Arduino设备以及第三方设备，Arduino
    IoT Cloud支持Python、MicroPython和JavaScript。
- en: '![Figure 6.10 – Choosing a development device](img/B19752_06_10.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![图6.10 – 选择开发设备](img/B19752_06_10.jpg)'
- en: Figure 6.10 – Choosing a development device
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.10 – 选择开发设备
- en: Click on **Arduino board** (marked with a red box in *Figure 6**.10*) and the
    next step will automatically detect the MKR WAN 1300 board, which we are using
    in this chapter. Before adding the device, make sure that **Arduino Create Agent**
    is running on your machine. *Figure 6**.11* shows that the Arduino IoT Cloud detected
    the MKR WAN 1300.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**Arduino板**（如图6.10中的红色方框所示）并自动检测我们本章使用的MKR WAN 1300板。在添加设备之前，请确保**Arduino
    Create Agent**正在您的机器上运行。*图6.11*显示Arduino IoT Cloud已检测到MKR WAN 1300。
- en: '![Figure 6.11 – The device found](img/B19752_06_11.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![图6.11 – 找到的设备](img/B19752_06_11.jpg)'
- en: Figure 6.11 – The device found
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.11 – 找到的设备
- en: When the popup finds the device, click on the **CONFIGURE** button, which will
    take you to the next screen.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 当弹出窗口找到设备时，点击**配置**按钮，这将带您进入下一个屏幕。
- en: '*Figure 6**.12* shows a screen that provides some details about the **The Things
    Stack** portal link. You will also see a message saying that you need an active
    LoRaWAN gateway for the MKR WAN 1300 to communicate with the Arduino IoT Cloud.'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*图 6**.12* 展示了一个屏幕，提供了有关 **The Things Stack** 站点链接的一些详细信息。您还将看到一个消息，说明您需要一个活跃的
    LoRaWAN 网关，以便 MKR WAN 1300 与 Arduino IoT Cloud 进行通信。'
- en: '![Figure 6.12 – The active LoRaWAN gateway](img/B19752_06_12.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.12 – 活跃的 LoRaWAN 网关](img/B19752_06_12.jpg)'
- en: Figure 6.12 – The active LoRaWAN gateway
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.12 – 活跃的 LoRaWAN 网关
- en: If you already have the gateway set up, then that’s fine; otherwise, in the
    *Configuring the The Things Indoor Gateway* section, read up on how to set up
    the The Things Indoor Gateway, which will provide connectivity to your MKR WAN
    1300 development board.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经设置了网关，那么就没有问题；否则，在 *配置 The Things 室内网关* 部分中，了解如何设置 The Things 室内网关，这将提供与
    MKR WAN 1300 开发板的连接。
- en: This message also informs you that the Arduino IoT Cloud will automatically
    configure your device in the The Things Stack portal.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 此消息还通知您，Arduino IoT Cloud 将自动在 The Things Stack 站点中配置您的设备。
- en: After associating the device, you will receive an email with a username and
    password, as well as a URL for the The Things Stack portal login, which contains
    all the information about LoRaWAN nodes. Here, the Arduino IoT Cloud will automatically
    add the MKR WAN 1300 to the The Things Stack portal after the final steps. Next,
    *Figure 6**.13* shows that we need to select a frequency for our device.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将设备关联后，您将收到一封电子邮件，其中包含用户名和密码，以及 The Things Stack 站点登录的 URL，其中包含有关 LoRaWAN 节点的所有信息。在这里，Arduino
    IoT Cloud 将在最终步骤完成后自动将 MKR WAN 1300 添加到 The Things Stack 站点。接下来，*图 6**.13* 显示我们需要为我们的设备选择一个频率。
- en: '![Figure 6.13 – The MKR WAN 1300 frequency selection](img/B19752_06_13.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.13 – MKR WAN 1300 频率选择](img/B19752_06_13.jpg)'
- en: Figure 6.13 – The MKR WAN 1300 frequency selection
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.13 – MKR WAN 1300 频率选择
- en: As we discussed earlier, LoRaWAN operates on different frequencies according
    to region. So, from the dropdown, select the specific frequency according to your
    region. I selected **Europe 863-870 MHZ (SF9 for RX2 - recommended)** according
    to my LoRaWAN gateway. After selecting the frequency from the dropdown, click
    on the **NEXT** button.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们之前讨论的，LoRaWAN 根据地区使用不同的频率。因此，从下拉菜单中选择您所在地区的特定频率。根据我的 LoRaWAN 网关，我选择了 **欧洲
    863-870 MHz (RX2 的 SF9 - 推荐)**。从下拉菜单中选择频率后，单击 **下一步** 按钮。
- en: Now, we need to provide a name for the device, as shown in *Figure 6**.14*.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要为设备提供一个名称，如图 *图 6**.14* 所示。
- en: '![Figure 6.14 – Assigning a name to the MKR WAN 1300](img/B19752_06_14.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.14 – 为 MKR WAN 1300 分配名称](img/B19752_06_14.jpg)'
- en: Figure 6.14 – Assigning a name to the MKR WAN 1300
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.14 – 为 MKR WAN 1300 分配名称
- en: Here, I assigned the name `LoRaWanGPSTracker` to the device, but you can use
    any name related to your project structure. After assigning the name, click on
    the **NEXT** button.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我已将名称 `LoRaWanGPSTracker` 分配给设备，但您可以使用与您的项目结构相关的任何名称。分配名称后，单击 **下一步** 按钮。
- en: Then, another popup will appear, as shown in *Figure 6**.15*, which will prepare
    your device for the Arduino IoT Cloud.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将出现另一个弹出窗口，如图 *图 6**.15* 所示，这将准备您的设备用于 Arduino IoT Cloud。
- en: '![Figure 6.15 – MKR WAN 1300 configuration](img/B19752_06_15.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.15 – MKR WAN 1300 配置](img/B19752_06_15.jpg)'
- en: Figure 6.15 – MKR WAN 1300 configuration
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.15 – MKR WAN 1300 配置
- en: Here, the Arduino IoT Cloud configures the MKR WAN 1300 via **Arduino Create
    Agent**. It will take one to two minutes to set up the development board with
    the necessary configuration.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，Arduino IoT Cloud 通过 **Arduino Create Agent** 配置 MKR WAN 1300。设置开发板并完成必要的配置可能需要一到两分钟。
- en: When the device has been configured successfully, you will see the following
    popup. Just click on the **DONE** button and your device will be associated with
    your Thing.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当设备配置成功后，您将看到以下弹出窗口。只需单击 **完成** 按钮即可，您的设备将与您的项目关联。
- en: '![Figure 6.16 – A successful device setup](img/B19752_06_16.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.16 – 设备设置成功](img/B19752_06_16.jpg)'
- en: Figure 6.16 – A successful device setup
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.16 – 设备设置成功
- en: In this section, we have associated the MKR WAN 1300 with our Thing. We have
    also seen a lot of new options regarding LoRaWAN such as frequency, gateway, and
    so on. In the upcoming sections, we will discuss the network and code.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将 MKR WAN 1300 与我们的项目关联。我们还看到了许多关于 LoRaWAN 的新选项，例如频率、网关等。在接下来的章节中，我们将讨论网络和代码。
- en: Network
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络
- en: In previous chapters, after associating the device with the Thing, we configured
    the network settings for device communication. However, this time, we don’t need
    to configure any network settings, as the device will be configured automatically
    when we upload the sketch to the MKR WAN 1300 development board. At first, you
    will see an empty area in the **Network** configuration, as shown in *Figure 6**.8*,
    but after the sketch uploads, you will see the LoRaWAN network configuration parameters.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，在将设备与实体关联后，我们配置了设备通信的网络设置。然而，这次我们不需要配置任何网络设置，因为当我们将草图上传到MKR WAN 1300开发板时，设备将自动配置。最初，你会在**网络**配置中看到一个空白区域，如图6.8所示，但在草图上传后，你会看到LoRaWAN网络配置参数。
- en: Coding
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编程
- en: The code for this chapter is available in the book’s official GitHub repository.
    Download the `A_remote_asset_tracking_using_LoRaWAN_aug30a.zip` file and import
    it into your Arduino Web Editor.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码可在本书的官方GitHub仓库中找到。下载`A_remote_asset_tracking_using_LoRaWAN_aug30a.zip`文件并将其导入到你的Arduino
    Web Editor中。
- en: 'You can download the code and put it into your Thing by navigating to the `setup()`
    method. Remember to never try to use the `delay()` method, as it will block the
    `ArduinoCloud.update()` method:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过导航到`setup()`方法下载代码并将其放入你的实体中。记住，永远不要尝试使用`delay()`方法，因为它会阻塞`ArduinoCloud.update()`方法：
- en: '[PRE1]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the preceding code snippet, we declare the `gps` instance and two variables,
    which wait for `30000` milliseconds (30 seconds) before the next readings are
    taken without blocking the code.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们声明了`gps`实例和两个变量，这些变量在读取下一次数据之前会等待`30000`毫秒（30秒），而不会阻塞代码。
- en: 'Now, we will explore the `loop()` method. Here, we call the `FetchGPS()` method
    every 30 minutes, which will be carried out by comparing `currentMillis` and `previousMillis`
    without the use of `delay()`:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将探索`loop()`方法。在这里，我们每30分钟调用一次`FetchGPS()`方法，这将通过比较`currentMillis`和`previousMillis`而不使用`delay()`来实现：
- en: '[PRE2]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In the following snippet, I have just picked a small part of the code from
    the `FetchGPS()` method. Here, I assign the latest values from the GPS module
    to the Arduino cloud variables, which will be used to send data to the cloud as
    well as print it on the Serial Monitor:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码片段中，我仅从`FetchGPS()`方法中选取了一小部分代码。在这里，我将GPS模块的最新值分配给Arduino云端变量，这些变量将被用于向云端发送数据以及在串行监视器上打印：
- en: '[PRE3]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Upload the code to the device, and open up the Arduino Web Editor Serial Monitor
    to verify the values. After successfully uploading the data to the cloud, it’s
    time to set up a beautiful dashboard for web and mobile for end users.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 将代码上传到设备，并打开Arduino Web Editor串行监视器以验证值。在成功将数据上传到云端后，是时候为最终用户设置一个漂亮的网页和移动端仪表板了。
- en: Important note
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: If you used different *naming* when declaring the variables, update the code
    according to your naming scheme. However, it’s recommended to first follow all
    the steps in the book and change the cloud variable names later, modifying your
    code respectively.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你声明变量时使用了不同的**命名**，请根据你的命名方案更新代码。然而，建议首先遵循书中的所有步骤，然后在稍后更改云端变量名称，分别修改你的代码。
- en: Never try to use the `delay()` method, which will create a block for the `ArduinoCloud.update()`
    method.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 永远不要尝试使用`delay()`方法，这将会阻塞`ArduinoCloud.update()`方法。
- en: The Arduino IoT Cloud only updates values on its dashboard whenever the variable
    value changes. For example, if the GPS location is the same after some time, then
    it means an asset has not moved from its original location. Then, the Arduino
    IoT Cloud will not record the value, so don’t get confused if values don’t change
    on the map. Another benefit of this feature is you will not get duplicate data
    when you export the content.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino IoT Cloud仅在变量值发生变化时才更新其仪表板上的值。例如，如果经过一段时间后GPS位置保持不变，那么这意味着资产没有从其原始位置移动。然后，Arduino
    IoT Cloud将不会记录该值，所以如果地图上的值没有变化，请不要感到困惑。这个功能的另一个好处是，当你导出内容时，你不会得到重复的数据。
- en: The same code will work with the MKR WAN 1310 without any modification. However,
    in this instance, you need to associate the MKR WAN 1310 device with the Thing
    instead of the MKR WAN 1300.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 同样的代码在MKR WAN 1310上无需修改即可使用。然而，在这个例子中，你需要将MKR WAN 1310设备与实体关联，而不是与MKR WAN 1300关联。
- en: In this section, we have explored our code step by step to understand how it
    works. In the next section, we will set up the The Things Indoor Gateway. If you
    already have the gateway in your region/area, then you can skip this, but if you
    don’t have any gateway near your location, then you need to set up the gateway;
    otherwise, your MKR WAN 1300 will not be able to communicate with the Arduino
    IoT Cloud.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们逐步分析了我们的代码，以了解其工作原理。在下一节中，我们将设置The Things室内网关。如果你在你的地区/区域已经有了网关，那么你可以跳过这一部分，但如果你在附近没有网关，那么你需要设置网关；否则，你的MKR
    WAN 1300将无法与Arduino IoT云通信。
- en: Configuring the The Things Indoor Gateway
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置The Things室内网关
- en: 'In this section, we will set up the The Things Indoor Gateway. It is available
    in different frequencies but I have a gateway with the EU868 MHz frequency. If
    you already have the LoRaWAN gateway in your area and want to skip this section,
    you’re good to go, but if you don’t have the gateway in your area, then this section
    is mandatory for MKR WAN 1300 communication. Without the gateway, your module
    will not communicate with the Arduino IoT Cloud. To set up the gateway, please
    follow these steps:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将设置The Things室内网关。它适用于不同的频率，但我有一个EU868 MHz频率的网关。如果你在你的地区已经有了LoRaWAN网关并想跳过这一节，那么你可以继续前进，但如果你在你的地区没有网关，那么这一节对于MKR
    WAN 1300通信是强制性的。没有网关，你的模块将无法与Arduino IoT云通信。要设置网关，请按照以下步骤操作：
- en: Open your gateway box, set it up with a power cable, and turn on the gateway.
    If you are using a brand-new gateway, then it will be in setup mode; otherwise,
    you can put the gateway into setup mode by pressing the **SETUP** button for a
    few seconds when the orange and green lights start blinking. This means the gateway
    has entered setup mode.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的网关盒子，用电源线设置好，并打开网关。如果你使用的是全新的网关，那么它将处于设置模式；否则，你可以通过在橙色和绿色灯光开始闪烁时按住**设置**按钮几秒钟来将网关置于设置模式。这意味着网关已进入设置模式。
- en: Select the Wi-Fi network of your the The Things Indoor Gateway, and connect
    to it. The Wi-Fi password is written on the back of the device. *Figure 6**.17*
    shows the **Setup** page for the The Things Indoor Gateway.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择The Things室内网关的Wi-Fi网络，并连接到它。Wi-Fi密码写在设备的背面。*图6.17*显示了The Things室内网关的**设置**页面。
- en: '![Figure 6.17 – The Things Indoor Gateway setup page](img/B19752_06_17.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![图6.17 – The Things室内网关设置页面](img/B19752_06_17.jpg)'
- en: Figure 6.17 – The Things Indoor Gateway setup page
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.17 – The Things室内网关设置页面
- en: After connecting to the indoor gateway, open up your browser and type `http://192.168.4.1`.
    This will open up the **MiniHub Setup** page, as shown in the preceding figure.
    Click on the plus icon (**+**) to select the Wi-Fi network that is connected to
    the internet, and provide its Wi-Fi password. Then, click on the **SAVE & REBOOT**
    button. It will take some seconds to restart, and eventually, your LoRaWAN indoor
    gateway will be connected to the internet via your selected Wi-Fi network.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 连接到室内网关后，打开你的浏览器并输入`http://192.168.4.1`。这将打开**MiniHub设置**页面，如图所示。点击加号图标（**+**）选择连接到互联网的Wi-Fi网络，并提供其Wi-Fi密码。然后，点击**保存并重启**按钮。它将需要几秒钟来重启，最终，你的LoRaWAN室内网关将通过你选择的Wi-Fi网络连接到互联网。
- en: Now, it’s time to configure the LoRaWAN gateway in the **The Things Stack**
    portal, as shown in *Figure 6**.18*.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，是时候在**The Things Stack**门户中配置LoRaWAN网关了，如图*图6.18*所示。
- en: '![Figure 6.18 – LoRaWAN gateway registration – step 1](img/B19752_06_18.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![图6.18 – LoRaWAN网关注册 – 第1步](img/B19752_06_18.jpg)'
- en: Figure 6.18 – LoRaWAN gateway registration – step 1
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.18 – LoRaWAN网关注册 – 第1步
- en: When you associate the MKR WAN 1300 to the Thing in the Arduino IoT Cloud, you
    will receive an email from the The Things Stack Cloud that contains the portal
    URL, along with your username and password details. Log in to the portal, where
    you will be given a clusters list to add your gateway to a recommended cluster.
    In the *Associating a device* section, I chose the **Europe 863-870 MHZ (SF9 for
    RX2 - recommended)** frequency for the MKR WAN 1300, so here, I will choose **Europe
    1** for my gateway. This way, my gateway and MKR WAN 1300 development board both
    sit under the same cluster.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 当你将MKR WAN 1300与Arduino IoT云中的事物关联时，你将收到来自The Things Stack云的电子邮件，其中包含门户URL以及你的用户名和密码详情。登录到门户，在那里你将获得一个集群列表，以便将你的网关添加到推荐的集群。在**关联设备**部分，我选择了MKR
    WAN 1300的**欧洲863-870 MHz（RX2的SF9推荐）**频率，因此在这里，我将选择**欧洲1**作为我的网关。这样，我的网关和MKR WAN
    1300开发板都位于同一个集群下。
- en: After choosing the cluster, you will be redirected to the main page of the portal.
    From here, we will start adding the gateway, as shown in *Figure 6**.19*.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择集群后，您将被重定向到门户的主页。从这里，我们将开始添加网关，如图 *图 6**.19* 所示。
- en: '![Figure 6.19 – LoRaWAN gateway registration – step 2](img/B19752_06_19.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.19 – LoRaWAN 网关注册 – 步骤 2](img/B19752_06_19.jpg)'
- en: Figure 6.19 – LoRaWAN gateway registration – step 2
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.19 – LoRaWAN 网关注册 – 步骤 2
- en: On the main page, we have some menus and two big icons, as shown in the preceding
    figure. From there, click on the **Go to** **gateways** icon.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在主页上，我们有几个菜单和两个大图标，如图中所示。从那里，点击 **转到** **网关** 图标。
- en: Then, we will be on the page that shows the complete list of gateways, as well
    as the option to register a new gateway, as shown in *Figure 6**.20*.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将进入显示网关完整列表以及注册新网关选项的页面，如图 *图 6**.20* 所示。
- en: '![Figure 6.20 – LoRaWAN gateway registration – step 3](img/B19752_06_20.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.20 – LoRaWAN 网关注册 – 步骤 3](img/B19752_06_20.jpg)'
- en: Figure 6.20 – LoRaWAN gateway registration – step 3
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.20 – LoRaWAN 网关注册 – 步骤 3
- en: Click on the blue **+ Register** **gateway** button.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 点击蓝色 **+ 注册** **网关** 按钮。
- en: This will take us to a new page where we can add a gateway to the the The Things
    Stack network, as shown in *Figure 6**.21*.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将带我们到一个新页面，我们可以向 The Things Stack 网络添加网关，如图 *图 6**.21* 所示。
- en: '![Figure 6.21 – LoRaWAN gateway registration – step 4](img/B19752_06_21.jpg)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.21 – LoRaWAN 网关注册 – 步骤 4](img/B19752_06_21.jpg)'
- en: Figure 6.21 – LoRaWAN gateway registration – step 4
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.21 – LoRaWAN 网关注册 – 步骤 4
- en: Firstly, we need to select the owner from the **Owner** dropdown. Here, you
    will see two names. One is your personal username, and the other is **arduino-iot-cloud-user**.
    Just select your personal username, as you are the main person adding the gateway.
    In the next field, insert the **Gateway EUI** details. The EUI will be written
    on the back of the gateway. After that, click on the **Confirm** button.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要从 **所有者** 下拉菜单中选择所有者。在这里，您将看到两个名字。一个是您的个人用户名，另一个是 **arduino-iot-cloud-user**。只需选择您的个人用户名，因为您是添加网关的主要人员。在下一个字段中，输入
    **网关 EUI** 详细信息。EUI 将写在网关背面。之后，点击 **确认** 按钮。
- en: Now, we will verify our gateway and select the frequency plan, as shown in *Figure
    6**.22*.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将验证我们的网关并选择频率计划，如图 *图 6**.22* 所示。
- en: '![Figure 6.22 – LoRaWAN gateway registration – step 5](img/B19752_06_22.jpg)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.22 – LoRaWAN 网关注册 – 步骤 5](img/B19752_06_22.jpg)'
- en: Figure 6.22 – LoRaWAN gateway registration – step 5
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.22 – LoRaWAN 网关注册 – 步骤 5
- en: You will see the **Claim authentication code** field at the top. Here, we need
    to provide the gateway with a Wi-Fi password for authentication. You can get the
    gateway Wi-Fi password from the back of the gateway, from where you previously
    took it to connect with the device’s Wi-Fi network.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在顶部看到 **声明认证码** 字段。在这里，我们需要为网关提供一个用于认证的 Wi-Fi 密码。您可以从网关背面获取网关 Wi-Fi 密码，您之前就是从那里将其取下来连接到设备的
    Wi-Fi 网络。
- en: Now, we need to select the frequency plan for our gateway. We already selected
    **Europe 863-870 MHZ (SF9 for RX2 - recommended)** during the MKR WAN 1300 association,
    so we will select the same frequency from the dropdown. After selecting the frequency,
    click on the **Claim** **gateway** button.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要为我们的网关选择频率计划。在 MKR WAN 1300 关联期间，我们已经选择了 **欧洲 863-870 MHz (RX2 的 SF9
    - 推荐)**，因此我们将从下拉菜单中选择相同的频率。选择频率后，点击 **声明** **网关** 按钮。
- en: After successfully registering the gateway, we will see a page like the one
    in the following figure, which provides you with the gateway connectivity status,
    as well as **Live data**, **Created at**, **Last updated at**, and lots of other
    information.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 网关成功注册后，我们将看到以下图所示的页面，它提供了网关连接状态、**实时数据**、**创建于**、**最后更新于**以及大量其他信息。
- en: '![Figure 6.23 – The LoRaWAN gateway successfully registered on The Things Network](img/B19752_06_23.jpg)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.23 – LoRaWAN 网关成功注册在 The Things Network 上](img/B19752_06_23.jpg)'
- en: Figure 6.23 – The LoRaWAN gateway successfully registered on The Things Network
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.23 – LoRaWAN 网关成功注册在 The Things Network 上
- en: In this section, we explored how to set up the The Things Indoor Gateway step
    by step. In the next section, we will create a dashboard for our Thing on mobile
    and web to track our assets.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们逐步探讨了如何设置 The Things Indoor 网关。在下一节中，我们将为我们的设备在移动和网页上创建仪表板以跟踪我们的资产。
- en: Creating web and mobile dashboards
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建网页和移动仪表板
- en: After uploading the code to the device, it’s time to set up a dashboard for
    web and mobile to visualize data with different widgets. *Figure 6**.24* demonstrates
    the visualization of readings with different widgets.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在将代码上传到设备后，是时候设置一个用于网页和移动端的仪表板，使用不同的小部件来可视化数据了。*图6.24*展示了使用不同小部件进行读数可视化的示例。
- en: '![Figure 6.24 – The Thing dashboard](img/B19752_06_24.jpg)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![图6.24 – The Thing仪表板](img/B19752_06_24.jpg)'
- en: Figure 6.24 – The Thing dashboard
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.24 – The Thing仪表板
- en: 'We have four readings from the GPS module to visualize. Here, I have used four
    widgets: one gauge, two values, and one map. The gauge widget shows `location`
    variable. Currently, the map widget is only capable of displaying the location
    of the asset device based on coordinates; if you have multiple assets to track,
    then you need to set up multiple map widgets according to the number of tracking
    devices.'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从GPS模块中获取了四个读数以进行可视化。在这里，我使用了四个小部件：一个仪表盘，两个值和一个地图。仪表盘小部件显示`位置`变量。目前，地图小部件只能根据坐标显示资产设备的地理位置；如果您要跟踪多个资产，则需要根据跟踪设备的数量设置多个地图小部件。
- en: Well, this is the last section of our chapter. Here, we created a stunning dashboard
    for GPS tracking that shows **Location** using a map widget on the dashboard,
    **Speed Per Mile**, and some other parameters.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，这是我们章节的最后一部分。在这里，我们为GPS跟踪创建了一个令人惊叹的仪表板，它使用仪表板上的地图小部件显示**位置**，**每英里速度**，以及其他一些参数。
- en: What next?
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接下来是什么？
- en: We still have a lot of options available to explore, but now it’s your turn
    to use different sensors and development boards to do some more experiments and
    learn from them. In this chapter, we only used one GPS module, which gave us only
    four parameters, but there are a lot of GPS modules on the market that provide
    a wide variety of functionalities, such as working under a roof and accuracy features.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有很多选项可供探索，但现在轮到您使用不同的传感器和开发板进行更多实验并从中学习。在本章中，我们只使用了一个GPS模块，它只提供了四个参数，但市场上有很多GPS模块提供广泛的性能，例如在屋顶下工作以及精度功能。
- en: While monitoring the location of assets, some other parameters are very important
    to monitor in different industries, such as temperature and humidity, which are
    very important in food and medical products. CO2 and **liquefied petroleum gas**
    (**LPG**) gases are very important to monitor during fuel transportation. Try
    using different sensors with a GPS module to set up different tracking prototypes
    for different industries.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在监控资产位置的同时，在各个行业中，一些其他参数也非常重要，例如温度和湿度，这在食品和医疗产品中非常重要。在燃料运输期间，CO2和**液化石油气**（LPG）气体也非常重要需要监控。尝试使用GPS模块与不同传感器一起设置不同行业的不同跟踪原型。
- en: Summary
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we explored how to develop an asset-tracking system using LoRaWAN
    and a GPS module. We set up the Thing, which included cloud variable creation,
    device association, the The Things Indoor Gateway, and coding a development board.
    Then, we created a dashboard to visualize the Thing readings with different types
    of widgets to display current readings. The most important widget of the chapter
    is the map widget, which is very interesting and important for plotting the current
    location of the device.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了如何使用LoRaWAN和GPS模块开发资产跟踪系统。我们设置了The Thing，包括云变量创建、设备关联、The Things室内网关，以及编写开发板代码。然后，我们创建了一个仪表板，使用不同类型的小部件来可视化The
    Thing读数。本章最重要的部件是地图小部件，它对于绘制设备的当前位置非常有趣且重要。
- en: GPS tracking is a very important topic that helps us to develop a device for
    our assets, assisting us in asset tracking and monitoring. We can use LoRaWAN
    for a specific region, as it has a longer range, but that range only operates
    in a specific area, unlike other wireless technologies. This chapter demonstrated
    how we can display the location of a device on a dashboard, giving you more confidence
    to build more asset-tracking solutions.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: GPS跟踪是一个非常重要的主题，它帮助我们开发用于我们资产的设备，协助我们在资产跟踪和监控方面。我们可以在特定区域使用LoRaWAN，因为它有更长的范围，但这个范围仅在特定区域内工作，与其他无线技术不同。本章展示了我们如何在仪表板上显示设备的地理位置，这使你更有信心构建更多的资产跟踪解决方案。
- en: In the next chapter, *Enabling Communication between Different Devices*, we
    will explore how the Arduino IoT Cloud makes it easy to send data between devices.
    Using this method, we will sync IoT nodes with each other for seamless operations.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，*“启用不同设备之间的通信”*，我们将探讨Arduino IoT Cloud如何使设备之间发送数据变得容易。使用这种方法，我们将同步物联网节点以实现无缝操作。
- en: 'Part 3: Exchanging Data between Nodes and Cloud Applications'
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3部分：节点和云应用之间的数据交换
- en: This third part of the book describes how to exchange data between IoT nodes
    provisioned on the Arduino IoT Cloud and between the Arduino IoT Cloud and external
    cloud applications.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 本书第三部分描述了如何在Arduino IoT Cloud上配置的物联网节点之间以及Arduino IoT Cloud和外部云应用之间交换数据。
- en: These functionalities are required in many real cases to build a distributed
    and reliable network, to implement some interdependent visualization and logic
    on the IoT application, and to expand the functionalities of the Arduino IoT Cloud
    with external tools.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多实际案例中，这些功能是构建分布式和可靠网络、在物联网应用中实现一些相互依赖的可视化和逻辑，以及通过外部工具扩展Arduino IoT Cloud功能所必需的。
- en: 'This part has the following chapters:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分包含以下章节：
- en: '[*Chapter 7*](B19752_07.xhtml#_idTextAnchor141), *Enabling Communication between
    Different Devices*'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第7章*](B19752_07.xhtml#_idTextAnchor141), *启用不同设备之间的通信*'
- en: '[*Chapter 8*](B19752_08.xhtml#_idTextAnchor158), *Working with the Arduino
    IoT Cloud SDK and JavaScript*'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第8章*](B19752_08.xhtml#_idTextAnchor158), *使用Arduino IoT Cloud SDK和JavaScript进行操作*'
- en: '[*Chapter 9*](B19752_09.xhtml#_idTextAnchor195), *Project #4 – Collecting Data
    from the Soil and Environment for Smart Farming*'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第9章*](B19752_09.xhtml#_idTextAnchor195), *项目#4 – 为智能农业收集土壤和环境数据*'
- en: '[*Chapter 10*](B19752_10.xhtml#_idTextAnchor211), *Project #5 – Making Your
    Homes Smarter with a Voice Assistant*'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第10章*](B19752_10.xhtml#_idTextAnchor211), *项目#5 – 使用语音助手使您的家庭更智能*'
