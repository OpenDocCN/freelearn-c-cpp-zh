["```cpp\n#pragma once\n#include \"CoreMinimal.h\"\n#include \"Engine/DataTable.h\"\n#include \"US_CharacterStats.generated.h\"\nUSTRUCT(BlueprintType)\nstruct UNREALSHADOWS_LOTL_API FUS_CharacterStats : public FTableRowBase\n{\n GENERATED_BODY()\n UPROPERTY(BlueprintReadWrite, EditAnywhere)\n float WalkSpeed = 200.0f;\n UPROPERTY(BlueprintReadWrite, EditAnywhere)\n float SprintSpeed = 400.0f;\n UPROPERTY(BlueprintReadWrite, EditAnywhere)\n float DamageMultiplier = 1.0f;\n UPROPERTY(BlueprintReadWrite, EditAnywhere)\n int32 NextLevelXp = 10.0f;\n UPROPERTY(BlueprintReadWrite, EditAnywhere)\n float StealthMultiplier = 1.0f;\n};\n```", "```cpp\nUPROPERTY(EditAnywhere, BlueprintReadOnly, Category = \"Character Data\", meta = (AllowPrivateAccess = \"true\"))\nclass UDataTable* CharacterDataTable;\nstruct FUS_CharacterStats* CharacterStats;\n```", "```cpp\nvoid UpdateCharacterStats(int32 CharacterLevel);\n```", "```cpp\nFORCEINLINE FUS_CharacterStats* GetCharacterStats() const { return CharacterStats; }\n```", "```cpp\n#include \"US_CharacterStats.h\"\n#include \"Engine/DataTable.h\"\n```", "```cpp\nvoid AUS_Character::UpdateCharacterStats(int32 CharacterLevel)\n{\n if(CharacterDataTable)\n {\n  TArray<FUS_CharacterStats*> CharacterStatsRows;\n  CharacterDataTable->GetAllRows<FUS_CharacterStats>(TEXT(\"US_Character\"), CharacterStatsRows);\n  if(CharacterStatsRows.Num() > 0)\n  {\n   const auto NewCharacterLevel = FMath::Clamp(CharacterLevel, 1, CharacterStatsRows.Num());\n   CharacterStats = CharacterStatsRows[NewCharacterLevel - 1];\n   GetCharacterMovement()->MaxWalkSpeed = GetCharacterStats()->WalkSpeed;\n  }\n }\n}\n```", "```cpp\nUpdateCharacterStats(1);\n```", "```cpp\nGetCharacterMovement()->MaxWalkSpeed = 3000.f;\n```", "```cpp\nif (GetCharacterStats())\n{\n GetCharacterMovement()->MaxWalkSpeed = GetCharacterStats()->SprintSpeed;\n}\n```", "```cpp\nGetCharacterMovement()->MaxWalkSpeed = 500.f;\n```", "```cpp\nif(GetCharacterStats())\n{\n GetCharacterMovement()->MaxWalkSpeed = GetCharacterStats()->WalkSpeed;\n}\n```", "```cpp\nUPROPERTY(Replicated)\nint32 Score;\n```", "```cpp\nUPROPERTY(ReplicatedUsing=\"OnRep_Score\")\nint32 Score;\n```", "```cpp\nDOREPLIFETIME(AMyActor, Score);\n```", "```cpp\nUPROPERTY(EditDefaultsOnly, BlueprintReadOnly, ReplicatedUsing=\"OnRep_Xp\", Category = \"Experience\")\nint Xp = 0;\nUPROPERTY(EditDefaultsOnly, BlueprintReadOnly, ReplicatedUsing=\"OnRep_CharacterLevelUp\", Category = \"Experience\")\nint CharacterLevel = 1;\nUFUNCTION()\nvoid OnRep_Xp(int32 OldValue) const;\nUFUNCTION()\nvoid OnRep_CharacterLevelUp(int32 OldValue) const;\n```", "```cpp\nUFUNCTION(BlueprintCallable, Category=\"Experience\")\nvoid AddXp(int32 Value);\n```", "```cpp\nvirtual void GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const override;\n```", "```cpp\nDECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnXpChanged, int32, NewXp);\nDECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnCharacterLevelUp, int32, NewLevelXp);\n```", "```cpp\nUPROPERTY(BlueprintAssignable, Category = \"Events\")\nFOnXpChanged OnXpChanged;\nUPROPERTY(BlueprintAssignable, Category = \"Events\")\nFOnCharacterLevelUp OnCharacterLevelUp;\n```", "```cpp\n#include \"US_Character.h\"\n#include \"US_CharacterStats.h\"\n#include \"Net/UnrealNetwork.h\"\n```", "```cpp\nvoid AUS_PlayerState::GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const\n{\n Super::GetLifetimeReplicatedProps(OutLifetimeProps);\n DOREPLIFETIME_CONDITION(AUS_PlayerState, Xp, COND_OwnerOnly);\n DOREPLIFETIME_CONDITION(AUS_PlayerState, CharacterLevel, COND_OwnerOnly);\n}\n```", "```cpp\nvoid AUS_PlayerState::AddXp(const int32 Value)\n{\n Xp += Value;\n OnXpChanged.Broadcast(Xp);\n GEngine->AddOnScreenDebugMessage(0, 5.f, FColor::Yellow, FString::Printf(TEXT(\"Total Xp: %d\"), Value));\n if (const auto Character = Cast<AUS_Character>(GetPawn()))\n {\n  if(Character->GetCharacterStats()->NextLevelXp < Xp)\n  {\n   GEngine->AddOnScreenDebugMessage(3, 5.f, FColor::Red, TEXT(\"Level Up!\"));\n   CharacterLevel++;\n   Character->UpdateCharacterStats(CharacterLevel);\n   OnCharacterLevelUp.Broadcast(CharacterLevel);\n  }\n }\n}\n```", "```cpp\nvoid AUS_PlayerState::OnRep_Xp(int32 OldValue) const\n{\n OnXpChanged.Broadcast(Xp);\n}\nvoid AUS_PlayerState::OnRep_CharacterLevelUp(int32 OldValue) const\n{\n OnCharacterLevelUp.Broadcast(CharacterLevel);\n}\n```"]