- en: '15'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Adding Epic Online Services (EOS)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When developing multiplayer games, it is important to add online services to
    the overall experience in order to enable players to connect and play with other
    people over the internet. This is especially important for games that require
    a large number of players or that are played by people in different locations
    of the world. Adding online services allows players to enjoy a more social gaming
    experience and increases the overall fun and engagement of the game. Plus, it
    also allows the game developer to gather data and feedback from players, which
    can be useful for improving the game and fixing any issues that arise.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, I will be presenting you with **Epic Online Services** (**EOS**),
    a cloud platform that provides developers with the tools to create, deploy, and
    operate high-performance gaming experiences. Developed by Epic Games, this powerful
    platform brings together all of its existing technologies and expertise into one
    unified system. With its scalable infrastructure and advanced features such as
    analytics and cloud hosting capabilities, Epic Games EOS allows developers to
    build games optimized for maximum performance on any device or operating system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Through the next sections, I will present you the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing EOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing the Developer Portal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting started with the EOS SDK
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To follow the topics presented in this chapter, you should have completed all
    the previous chapters and have understood their content.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing EOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: EOS ([https://dev.epicgames.com/en-US/services](https://dev.epicgames.com/en-US/services))
    is a powerful suite of services and tools designed to help developers create the
    most immersive online experiences possible. With EOS, developers can easily manage
    user authentication, matchmaking, leaderboards, achievements, and more – all from
    one centralized system. Whether you’re working on an MMO or a single-player game
    with online features such as multiplayer mode or leaderboards, EOS has something
    to offer every developer looking to take their games further. One thing to mention
    is that all services are free to use, even if you don’t use an Epic Games account.
  prefs: []
  type: TYPE_NORMAL
- en: 'EOS can be categorized into three distinct sets of services:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Game Services**, which covers multiplayer functionalities, such as sessions,
    lobbies, or achievements'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Account Services**, which covers player identity, such as authentication
    and profile handling, and friend management'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Store Services**, which covers Epic Games store transactions, including catalog
    management and verification'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Game Services can also be used with any identity provider, such as Discord,
    Steam, Google, and, of course, Epic Games; this means players won’t need an Epic
    Game account in order to get access to these services. On the other hand, Account
    Services and Store Services can only be used with an Epic Games account.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'In case you are wondering, EOS does not include a cloud machine to host a Dedicated
    Server (like the one you built in [*Chapter 14*](B18203_14.xhtml#_idTextAnchor275),
    *Deploying Multiplayer Games*). To host your server in the cloud, you will need
    to use services such as **Amazon Web Services** (**AWS**) or **Microsoft Azure**.
    The official Epic Games documentation has a dedicated section on this topic and
    can be found on this web page: [https://docs.unrealengine.com/5.0/en-US/unreal-engine-cloud-deployments/](https://docs.unrealengine.com/5.0/en-US/unreal-engine-cloud-deployments/).'
  prefs: []
  type: TYPE_NORMAL
- en: EOS is accessible via the **Epic Games Developer Portal**, which is a browser-based
    tool that enables users to configure and set up their games through a list of
    developer resources. In addition to the EOS, the Developer Portal also offers
    the functionality to manage the games that you may have made available in the
    Epic Games Store.
  prefs: []
  type: TYPE_NORMAL
- en: Upon successful registration for a Developer Portal account, you will gain the
    capability to manage your products, configure services, and establish settings
    for identity providers and available platforms. Additional features provided within
    the Developer Portal include the ability for users to update game information,
    provide support for players, manage game finances, and access usage reports and
    statistical data.
  prefs: []
  type: TYPE_NORMAL
- en: It is also worth noting that the Developer Portal is intended to be cross-platform-compatible,
    giving developers the capability to deploy their games across an array of different
    platforms – such as consoles, desktops, and mobile devices – while utilizing a
    single service for managing gameplay across all of these platforms. This functionality
    helps to provide a cohesive and seamless experience for players across these different
    platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: As the Developer Portal and EOS are web-based, they remain in a perpetual state
    of development. Consequently, it is possible to encounter inconsistencies or variations
    in the features and functionality described in the following sections. Despite
    any discrepancies, you should still be able to navigate and engage with these
    services effectively and with minimal disruption to the overall experience.
  prefs: []
  type: TYPE_NORMAL
- en: As EOS is a huge topic on its own – and not meant to work just for Unreal Engine
    but with many developer platforms – having a full understanding of it is out of
    this book’s scope; however, in the following sections, I will guide you through
    the main parts of the Developer Portal, EOS, and their peculiarities, so you will
    have a solid base to use them in your games.
  prefs: []
  type: TYPE_NORMAL
- en: The first thing to do is to start creating your own organization in order to
    grant you access to all the features available in the cloud service.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing the Developer Portal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, I will guide you through the creation of a Developer Portal
    account in order to properly set up and manage your own projects, whether they
    are multiplayer or not. The steps you will need to complete to get your game ready
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up an Epic Games account (you should have one already) and creating
    an organization for the Developer Portal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Product
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring the Product
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, let’s get started.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing the Epic Games Developer Portal
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first thing you need to do in order to access and use the Epic Games Developer
    Portal is to create an **organization** – this is a group that holds the responsibility
    for both creating and owning Products within the Epic Games Developer Portal.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by accessing the dedicated web page, which can be found at this link:
    [https://dev.epicgames.com/portal](https://dev.epicgames.com/portal). After logging
    in with your Epic Games account, you will be presented with a registration form
    where you will need to insert an organization name and an email, as shown in *Figure
    15**.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.1 – The organization creation form](img/Figure_15_01_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.1 – The organization creation form
  prefs: []
  type: TYPE_NORMAL
- en: Once you have registered, you will be granted access to the Developer Portal,
    where you will be able to manage your organization, download the EOS SDK, create
    your projects, and, most importantly, set up them.
  prefs: []
  type: TYPE_NORMAL
- en: As the creator of the organization, you will be responsible for setting up all
    the needed information for it, such as tax and payout information if you plan
    to generate some revenue from your games.
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, unless you plan to work as a one-man army, you’ll be able to
    invite additional members to the organization itself. This feature is available
    in the **Organization | Members** section. Each member can be assigned a role,
    to get access to some, or all of, the features available in the organization.
    You can create your own roles, each with its custom access level, but Epic Games
    has already created some for you; some of these roles are listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Admin**: This role will grant the member access to all functionalities in
    the Portal. It is the role automatically assigned to the organization creator
    (i.e., you).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Community Tools**: This role will give the member access to all community-related
    features, such as game analytics, accounts, and the ticketing system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Payout**: This role will give the member access to all finance-related sections,
    such as payout and reports.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you’re working in a game studio – even if it’s a small one – having this
    kind of member access is going to be really important to make everything work
    perfectly.
  prefs: []
  type: TYPE_NORMAL
- en: Once the organization has been properly set up and you have a well-organized
    team, the next thing to do is to create your first Product, be it a multiplayer
    game or anything else.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Product
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you are inside an organization, you will need to create a **Product**
    – this is a game or a software project that contains some EOS logic. Once a Product
    has been created, it will be assigned a default **Sandbox**, which is a development
    environment that will contain the distribution data, such as store-related or
    specific deployment information. At the time of writing this book, Epic Games
    provides the following default Sandboxes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Dev**: Used for editing and configuring a Product at development time'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stage**: Used for testing a Product for readiness'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Live**: Used to distribute a Product on the Epic Games Store'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inside a Sandbox, you will be able to create one or more **Deployment**, a specific
    distribution that will store all gameplay and player data, such as achievements
    and current matches.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, let’s imagine you want to implement some services for the Unreal
    Shadows game, and you don’t want to make things too complicated. First of all,
    you will need to create a dedicated Product and then you will work with a single
    Sandbox; inside the Sandbox, you will use the aforementioned deployment environment
    depending on your needs. For example, see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: In the **Dev** environment, you will conduct development and internal testing
    for your project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the **Stage** environment, you will test the game
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the **Live** environment, you will ship the game as an official release
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s now imagine that, during your game development, you (or the game design
    team) decide to add a new experimental feature, such as a voice chat for all the
    players. You’ll create a new deployment, called **Dev-Experimental-VOIP**, and
    test its functionalities internally. Once this feature is solid and ready for
    a release, you will simply have to add it to your **Stage** deployment and, once
    it is solid enough, to the **Live** deployment.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a practical example, we’ll create a demo Product. Inside your **Developer
    Portal Dashboard**, click the **Create Product** button, as shown in *Figure 15**.2*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.2 – Creating a new Product](img/Figure_15_02_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.2 – Creating a new Product
  prefs: []
  type: TYPE_NORMAL
- en: 'You will get a pop-up window where you will need to insert the Product name.
    In my case, I opted for `EOS Demo`, as shown in *Figure 15**.3*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.3 – Naming the Product](img/Figure_15_03_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.3 – Naming the Product
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Once created a Product, you won’t be able to change its name, so choose wisely!
  prefs: []
  type: TYPE_NORMAL
- en: If this is the first Product you have created with your organization, you’ll
    be asked to review some agreements with Epic Games, involving topics such as store
    distribution and marketing subscriber lists; read them carefully and, if you agree
    with the terms, click the **Accept** button. Once accepted, you will probably
    be asked to pay a submission fee; just skip this as it’s about the Epic Games
    Store and not related to the Game Services we are interested in at the moment
    – you may need in the future once you decide to publish your games on the Epic
    Games Store.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have created your own Product, you are ready for the next step,
    configuring the services you will be using.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the Product services
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To access your project page, all you have to do is click on your Product link
    – in my case, the **EOS Demo** Product – in your Developer Portal, as shown in
    *Figure 15**.4*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.4 – Selecting the product configuration](img/Figure_15_04_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.4 – Selecting the product configuration
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you are on the Product page, you can access its settings by clicking **Product
    Settings**, as shown in *Figure 15**.5*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.5 – The Product Settings section](img/Figure_15_05_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.5 – The Product Settings section
  prefs: []
  type: TYPE_NORMAL
- en: You are now able to create an EOS Client for your application.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an EOS Client
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the context of Epic Online Services, the term **Client** refers to a program
    that utilizes the functionality of EOS for a particular Product. This can encompass
    locally installed game builds that end users operate on their systems, dedicated
    servers maintained by the Product’s owners, or any other program that necessitates
    access to the backend services that EOS provides. Each Client will have its own
    ID and secret password for authentication.
  prefs: []
  type: TYPE_NORMAL
- en: Each Client will also have its own **Client Policy**, which will determine the
    level of access for the features that will be implemented. This means that, if
    you are creating a multiplayer game using EOS, your dedicated server will need
    its own EOS Client, and the player’s clients will have their own dedicated EOS
    Clients. On the other hand, if you plan to distribute a listen server version
    of your game, you will need just one EOS Client for your game.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you’re feeling a bit confused by the term “Client” in this context, don’t
    worry – I felt the same way the first time I read the official EOS documentation!
    To help with this, let’s actually create a Client:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **Clients** link in the main page toolbar, as shown in *Figure 15**.6*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 15.6 – The Clients section](img/Figure_15_06_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.6 – The Clients section
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Add New Client** button; this will open the **Add New Client**
    window (shown later in *Figure 15**.8*).
  prefs: []
  type: TYPE_NORMAL
- en: In the `EOS` `Demo Client`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on `EOS` `Demo Policy`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Client policy type**, you can choose one of the pre-made configuration
    or you can create a custom one. For the purpose of this example, I chose the **GameClient**
    options, which are configured to manage untrusted Client applications and, as
    such, will require an authenticated user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The previous selection will enable a list of additional options, such as **Leaderboards**,
    **Matchmaking**, or **Lobbies**, which you will be able to change, depending on
    your own needs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once you are happy with your Client’s configuration, click **ADD NEW CLIENT
    POLICY**, as shown in *Figure 15**.7*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 15.7 – The Client policy creation](img/Figure_15_07_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.7 – The Client policy creation
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the Client policy has been created, you will be brought back to the Client
    creation. Click the **Add New Client** button, as shown in *Figure 15**.8*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 15.8 – The Client creation](img/Figure_15_08_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.8 – The Client creation
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the Client has been created, you will be brought back to the Product page
    and you should see listed both the Client and the Client policy, as shown in *Figure
    15**.9*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.9 – The Client and the Client Policy on the Product settings page](img/Figure_15_09_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.9 – The Client and the Client Policy on the Product settings page
  prefs: []
  type: TYPE_NORMAL
- en: In the **Client** section, you will notice the features that have been enabled
    for this Client and its ID, which will be used when connecting to the services.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing Epic Account Services
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now that the Client has been created, you need to access the **Epic Account
    Services** section of your Product page, in order to finalize the EOS configuration.
    To access this section, click the **Epic Account Services** button, as shown in
    *Figure 15**.10*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.10 – The Epic Account Services section](img/Figure_15_10_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.10 – The Epic Account Services section
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing to do is to configure the permissions for the Client so, click
    the **Permissions** button in the **EOS Demo** application section, as shown in
    *Figure 15**.11*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.11 – The PERMISSIONS section](img/Figure_15_11_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.11 – The PERMISSIONS section
  prefs: []
  type: TYPE_NORMAL
- en: 'Unless you want to add some custom configuration, you will just need to click
    on the **SAVE CHANGES** button, in order to initialize the permissions configuration.
    This will set this section as **CONFIGURED**, as depicted in *Figure 15**.12*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.12 – The configured PERMISSIONS section](img/Figure_15_12_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.12 – The configured PERMISSIONS section
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you need to select the **Linked Clients** section in order to set the
    previously created Client as the selected one. Once you are in the **Linked Clients**
    section, all you need to do is to select your Client – in this case, **EOS Demo
    Client** – from the drop-down menu and click the **SAVE CHANGES** button. This
    will set this section as **CONFIGURED**, as shown in *Figure 15**.13*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.13 – The configured LINKED CLIENTS section](img/Figure_15_13_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.13 – The configured LINKED CLIENTS section
  prefs: []
  type: TYPE_NORMAL
- en: The **BRAND SETTINGS** section can be left unconfigured at a development stage
    because it will be required only once you are in a release phase and your application
    will need to be reviewed and approved by Epic Games.
  prefs: []
  type: TYPE_NORMAL
- en: Once you are done with this, your application is ready, and EOS can be connected
    with your game or application.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you have been introduced to the Epic Games Developer Portal
    and its online services. As you have seen, you will need to access the portal
    in order to initialize and configure the cloud features you will implement in
    your game. In the next section, I will give you a brief introduction to the tools
    that you’ll use in your game, to integrate it with the EOS environment.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with the EOS SDK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **EOS SDK** is a tool that’s independent of any particular game engine,
    providing developers access to several cross-platform services that can be integrated
    into their games. Depending on the game engine being utilized, the level of integration
    options available to incorporate the EOS SDK into the game will vary. Nonetheless,
    the method of integration is at the discretion of the development team, and they
    may even use a combination of integration options.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to start using the EOS SDK you will have to:'
  prefs: []
  type: TYPE_NORMAL
- en: Download it from the Developer Portal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrate it into your game
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this section, I will give you a brief walkthrough on how to get the SDK and
    to understand the basic concepts on how to integrate it in your project.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading the EOS SDK
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To download the SDK, go to your **Developer Portal Dashboard** page and click
    the **SDK & Release Notes** button, as shown in *Figure 15**.14*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.14 – The download SDK button](img/Figure_15_14_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.14 – The download SDK button
  prefs: []
  type: TYPE_NORMAL
- en: 'As stated before, the SDK is meant to target multiple developer platforms and
    so you will get multiple download options (i.e., the SDK for C, C#, iOS, or Android),
    as shown in *Figure 15**.15*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.15 – The download options](img/Figure_15_15_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.15 – The download options
  prefs: []
  type: TYPE_NORMAL
- en: After choosing your preferred platform, the download will start. Once it's finished,
    you will be able to start integrating the SDK with your own application.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating the system into your game
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: No matter which game engine you decide to use, you can totally use the EOS SDK
    in your game! All you need to do – after having configured the Product in the
    Developer Portal and having downloaded the SDK – is to write your integration
    to your game engine of choice.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you plan to integrate the SDK with an Unreal Engine project, there are two
    options to integrate the EOS SDK:'
  prefs: []
  type: TYPE_NORMAL
- en: Use the EOS **Online Subsystem** (**OSS**) plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use a third-party plugin or write one on your own
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s look at both options.
  prefs: []
  type: TYPE_NORMAL
- en: Using the EOS Online Subsystem
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As you have already seen in [*Chapter 12*](B18203_12.xhtml#_idTextAnchor239)*,
    Managing Multiplayer Sessions*, the OSS in Unreal Engine is a tool that provides
    a uniform way of accessing the numerous online features provided by different
    online services by means of a set of plugins. This includes Xbox Live, Steam and,
    finally, the Epic Online Services – through the dedicated EOS OSS plugin – making
    it immensely valuable in game development workflows that support multiple platforms
    or online services. With this in mind, you will be able to easily configure your
    game’s EOS settings within the Unreal Editor without the need for coding.
  prefs: []
  type: TYPE_NORMAL
- en: 'To access the EOS OSS, you will have to enable the plugin in Unreal Engine.
    This is quite easy to achieve. Once you have opened your Unreal Engine project,
    all you will have to do is:'
  prefs: []
  type: TYPE_NORMAL
- en: Select **Edit | Plugins** from the main menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable the **Online Subsystem EOS** and **EOS** **Shared** plugins.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Restart the Unreal Engine in order to initialize the plugins.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the plugins have been enabled, you will need to setup your project, to
    connect it with the EOS Product you have previously created. This setup is pretty
    long but quite straightforward; you can find instructions on how to do this in
    the official documentation, found here: [https://docs.unrealengine.com/5.1/en-US/online-subsystem-eos-plugin-in-unreal-engine/](https://docs.unrealengine.com/5.1/en-US/online-subsystem-eos-plugin-in-unreal-engine/).
    You can also find more information about the OSS plugin, which is out of the scope
    of the book.'
  prefs: []
  type: TYPE_NORMAL
- en: 'It is worth noting that at the time of writing this book, some of the EOS SDK
    interfaces haven’t been developed yet in the EOS OSS plugin and so they will not
    be available out-of-the-box. The interfaces that aren’t still available are as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Anti-cheat interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reports interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sanctions interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom Invites interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This means that if your game needs these features, you will have to write your
    own plugin, or use a third-party one.
  prefs: []
  type: TYPE_NORMAL
- en: Using a third-party plugin
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As stated before, the other option for integrating your game with the EOS SDK
    is to develop your own plugin in Unreal Engine.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The EOS SDK needs to be initialized inside a plugin – writing your own implementation
    inside your project may result in unexpected behaviours or some interfaces not
    working at all.
  prefs: []
  type: TYPE_NORMAL
- en: 'Developing your own plugin in Unreal Engine is a wonderful way to hone your
    skills and bring them to the next level. To get started, the best advice is to
    read the official documentation that thoroughly describes the process of developing
    and managing plugins in Unreal Engine. The documentation page can be found by
    following this link: [https://docs.unrealengine.com/5.1/en-US/plugins-in-unreal-engine/](https://docs.unrealengine.com/5.1/en-US/plugins-in-unreal-engine/).'
  prefs: []
  type: TYPE_NORMAL
- en: However, if you feel uncomfortable with plugin development, you can take advantage
    of the Unreal Engine Marketplace ([https://unrealengine.com/marketplace](https://unrealengine.com/marketplace))
    and look for a commercial solution. As an example, a couple of amazing integration
    tools are **EOS Online Subsystem** ([https://unrealengine.com/marketplace/en-US/product/eos-online-subsystem](https://unrealengine.com/marketplace/en-US/product/eos-online-subsystem))
    developed by Redpoint Games and **EOS Integration Kit** ([https://unrealengine.com/marketplace/en-US/product/eos-integration-kit](https://unrealengine.com/marketplace/en-US/product/eos-integration-kit))
    developed by Betide Studio. Both offer seamless integration with EOS and almost
    all service interfaces are exposed, in order to make your multiplayer game easier
    and more efficient to develop and maintain.
  prefs: []
  type: TYPE_NORMAL
- en: It is also worth noting that both plugins offer some sort of free or open source
    license, so you can test them out in order to check if they are the right tool
    for you. Buying them will, of course, help the development team maintain the plugin
    and add new features as time goes by.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have the basic knowledge on EOS, it’s time to start working on
    your soon-to-be successful game and integrate it with some (or all!) of the services
    offered by Epic Games.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'To learn about all the features that come shipped with EOS, you can start by
    checking the official documentation that can be found on this web page: [https://dev.epicgames.com/docs/epic-online-services](https://dev.epicgames.com/docs/epic-online-services).'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this final chapter of the book, I have presented you to the Developer Portal
    and the EOS platform. You accessed the Developer Portal in order to create your
    own Product and to connect it with any kind of application or game. You have also
    seen how the basic structure of an EOS application is made and initialized with
    some basic and default settings.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you have learned that you can integrate these services with any development
    platform, including Unreal Engine; this can be achieved by using the official
    – but, at the moment, incomplete – plugin, you can use a third-party integration
    system, or you can even write your own code so that you will focus on what you
    really need.
  prefs: []
  type: TYPE_NORMAL
- en: As you guessed, there’s a lot more on this and you have just started scratching
    the surface of this environment. My final advice is to try the services and explore
    all the interfaces offered by the SDK. Experiment by writing your own code and
    – if you feel courageous enough – create your own plugin; I assure you, if you
    are a game programmer, this will be super-fun! (But, maybe, this topic might be
    best left for another book!)
  prefs: []
  type: TYPE_NORMAL
- en: And that’s the end of *Multiplayer Game Development with Unreal Engine 5*. It
    has been a pleasure to share my knowledge and experience with you, and I am confident
    that you now know how to create amazing multiplayer games for your soon-to-be
    players.
  prefs: []
  type: TYPE_NORMAL
- en: Thank you for joining me on this journey and may the odds be ever in your projects’
    favor!
  prefs: []
  type: TYPE_NORMAL
