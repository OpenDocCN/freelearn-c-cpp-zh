- en: '12'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '12'
- en: 'Project #6 – Tracking and Notifying about Your Heart Rate'
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '项目 #6 – 跟踪和通知心率'
- en: This chapter is dedicated to smart healthcare and wearables. It shows how healthcare
    devices can be integrated with the **Arduino IoT Cloud platform** and offers an
    example of an interface between the Arduino IoT Cloud and a third-party service.
    The notification service sends notifications to recipients when the measured heart
    rate exceeds the defined heart rate threshold.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章致力于智能医疗保健和可穿戴设备。它展示了医疗设备如何与**Arduino IoT Cloud平台**集成，并提供了Arduino IoT Cloud与第三方服务之间接口的示例。当测量的心率超过定义的心率阈值时，通知服务会向收件人发送通知。
- en: In this chapter, we will embark on a practical exploration of smart health and
    wearables by working with a **heart rate sensor** and Seeed Studio’s newest and
    very small development board in the **XIAO series**, based on **ESP32** with a
    lot of features. With the help of a sensor, a development board, and the Arduino
    IoT Cloud, we will build an IoT-enabled wearable healthcare solution. You will
    also learn how to set up webhooks for sending the latest heart rate values to
    Zapier. Finally, you will see how to set up Zaps in Zapier for email/mobile notifications
    on heart rate data.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将通过使用**心率传感器**和Seeed Studio最新且非常小巧的开发板——**XIAO系列**中的XIAO ESP32C3，它具有许多功能——来实际探索智能健康和可穿戴设备。借助传感器的帮助、开发板和Arduino
    IoT Cloud，我们将构建一个物联网智能健康解决方案。你还将学习如何设置webhooks，以便将最新的心率值发送到Zapier。最后，你将看到如何在Zapier中设置Zaps，以便在心率数据上接收电子邮件/移动通知。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Exploring IoT for smart health solutions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索物联网智能健康解决方案
- en: Knowing the hardware components – sensors and development boards
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解硬件组件——传感器和开发板
- en: Understanding the project architecture
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解项目架构
- en: Setting up Things, network credentials, cloud variables, and code
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置事物、网络凭据、云变量和代码
- en: Setting up a dashboard for web and mobile
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置网页和移动仪表板
- en: Setting up the notification service
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置通知服务
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The following hardware components are required to complete this chapter’s exercise:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 以下硬件组件是完成本章练习所必需的：
- en: Seeed Studio XIAO ESP32C3
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Seeed Studio XIAO ESP32C3
- en: USB Type-C cable for the XIAO ESP32C3
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XIAO ESP32C3的USB Type-C线缆
- en: Pulse sensor (find the complete details and store links in the *Knowing the
    hardware components – sensors and development* *boards* section)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 脉搏传感器（在*了解硬件组件——传感器和开发板*部分找到完整详情和存储链接）
- en: Male headers for the development board
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发板上的公接头
- en: Jumper cables
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跳线
- en: For coding, we will use the **Arduino Web Editor**, which includes a large collection
    of development boards and sensor libraries, along with Arduino IoT Cloud for Thing
    and dashboard setup. To develop hardware and sensor designs, we need the **Fritzing**
    desktop software and the **Arduino IDE** desktop software for pulse-sensor calibration
    using the **Serial Plotter**, which is not available in the Arduino Web Editor.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 对于编码，我们将使用**Arduino Web Editor**，它包含大量开发板和传感器库，以及用于事物和仪表板设置的Arduino IoT Cloud。为了开发硬件和传感器设计，我们需要**Fritzing**桌面软件和**Arduino
    IDE**桌面软件，用于使用**串行绘图仪**对脉搏传感器进行校准，而串行绘图仪在Arduino Web Editor中不可用。
- en: We will also use **Zapier** to send alerts by email when our sensor detects
    a heart rate above our specified **beats-per-minute** (**BPM**) threshold. You
    can use a Free/trial account or buy a Zapier Professional plan according to the
    requirements of your project as Zapier Professional provides more features and
    functions compared to a Free account. The code used in this chapter is available
    from the book’s official GitHub repository at [https://github.com/PacktPublishing/Arduino-IoT-Cloud-for-Developers](https://github.com/PacktPublishing/Arduino-IoT-Cloud-for-Developers).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将使用**Zapier**在传感器检测到心率超过我们指定的**每分钟跳动次数**（**BPM**）阈值时通过电子邮件发送警报。你可以根据项目需求使用免费/试用账户或购买Zapier专业计划，因为与免费账户相比，Zapier专业计划提供了更多功能和功能。本章中使用的代码可在书籍的官方GitHub仓库[https://github.com/PacktPublishing/Arduino-IoT-Cloud-for-Developers](https://github.com/PacktPublishing/Arduino-IoT-Cloud-for-Developers)中找到。
- en: Exploring IoT for smart health solutions
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索物联网智能健康解决方案
- en: The **Internet of Things** (**IoT**) is playing a significant role in providing
    smart healthcare solutions that can improve patient outcomes and reduce healthcare
    costs. IoT devices can collect real-time data, communicate with other devices,
    and generate insights that can help healthcare providers make better decisions.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**物联网**（**IoT**）在提供能够改善患者结果和降低医疗保健成本的智能医疗保健解决方案中发挥着重要作用。物联网设备可以收集实时数据，与其他设备通信，并生成有助于医疗保健提供者做出更好决策的见解。'
- en: 'Here are some examples of how IoT can be used in smart health solutions:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些物联网在智能健康解决方案中应用的例子：
- en: '**Remote patient monitoring**: IoT devices can be used to monitor patients’
    health in real time, even when they are not in the hospital. Wearable devices,
    sensors, and medical-grade IoT devices can collect data on vital signs, BPM rates,
    blood-glucose levels, and medication adherence. Healthcare providers can use this
    data to provide personalized care and prevent complications.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**远程患者监测**：物联网设备可用于实时监测患者健康状况，即使他们不在医院。可穿戴设备、传感器和医疗级物联网设备可以收集生命体征、心率、血糖水平和药物依从性的数据。医疗保健提供者可以使用这些数据提供个性化护理并防止并发症。'
- en: '**Telemedicine**: IoT devices can enable virtual consultations and remote medical
    services. Patients can communicate with their healthcare providers using video
    conferencing, and healthcare providers can remotely monitor patients’ health through
    IoT devices. This can improve access to healthcare services, reduce healthcare
    costs, and improve patient outcomes.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**远程医疗**：物联网设备可以启用虚拟咨询和远程医疗服务。患者可以通过视频会议与他们的医疗保健提供者沟通，医疗保健提供者可以通过物联网设备远程监测患者的健康状况。这可以提高医疗保健服务的可及性，降低医疗保健成本，并改善患者结果。'
- en: '**Smart medication management**: IoT devices can help patients manage their
    medications more effectively. IoT-enabled pill dispensers can remind patients
    when it’s time to take their medication and can track medication usage. Healthcare
    providers can use this data to provide personalized care and prevent medication
    errors.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**智能药物管理**：物联网设备可以帮助患者更有效地管理他们的药物。物联网药物分配器可以在患者需要服药时提醒他们，并跟踪药物使用情况。医疗保健提供者可以使用这些数据提供个性化护理并防止用药错误。'
- en: '**Predictive maintenance**: IoT devices can be used to monitor medical equipment
    and predict when maintenance is required. This can help prevent equipment failures,
    reduce downtime, and improve patient outcomes.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**预测性维护**：物联网设备可用于监控医疗设备并预测何时需要维护。这有助于防止设备故障，减少停机时间，并改善患者结果。'
- en: '**Smart hospital management**: IoT devices can be used to manage hospital resources
    more efficiently. For example, IoT-enabled asset tracking systems can help healthcare
    providers locate medical equipment quickly, reducing waiting times for patients.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**智能医院管理**：物联网设备可用于更有效地管理医院资源。例如，物联网资产跟踪系统可以帮助医疗保健提供者快速定位医疗设备，减少患者的等待时间。'
- en: In conclusion, IoT can enable smart health solutions that improve patient outcomes
    and reduce healthcare costs. Healthcare providers can use IoT data to provide
    personalized care and make more informed decisions. As IoT technology continues
    to evolve, we can expect to see even more innovative healthcare solutions in the
    future.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，物联网可以启用改善患者结果和降低医疗保健成本的智能健康解决方案。医疗保健提供者可以使用物联网数据提供个性化护理并做出更明智的决策。随着物联网技术的不断发展，我们预计未来将看到更多创新的健康保健解决方案。
- en: In this section, we have discussed IoT and smart healthcare and how IoT is beneficial
    to us in the development of smart healthcare products. Next, we will take a look
    at what types of hardware and sensors are required to carry out the exercise in
    this chapter.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论了物联网和智能医疗保健以及物联网如何对我们开发智能医疗保健产品有益。接下来，我们将探讨执行本章练习所需的硬件和传感器类型。
- en: Knowing the hardware components – sensors and development boards
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解硬件组件——传感器和开发板
- en: 'The ESP32 series offers a wide array of development boards that vary in the
    sizes and pins offered. In this chapter, we are using Seeed Studio’s latest development
    board, the **XIAO ESP32C3**, as it’s very compact and smaller in size than other
    boards, cheaper in cost, and provides 5V along with 3.3V. *Figure 12**.1* shows
    a pin diagram of the XIAO ESP32C3 we will use:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: ESP32系列提供了各种尺寸和引脚的开发板。在本章中，我们使用的是Seeed Studio的最新开发板，**XIAO ESP32C3**，因为它非常紧凑，尺寸比其他板更小，成本更低，并提供5V和3.3V。*图12.1*显示了我们将使用的XIAO
    ESP32C3的引脚图：
- en: '![Figure 12.1 – XIAO ESP32C3 pinout diagram](img/B19752_12_01.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图12.1 – XIAO ESP32C3 引脚图](img/B19752_12_01.jpg)'
- en: Figure 12.1 – XIAO ESP32C3 pinout diagram
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.1 – XIAO ESP32C3 引脚图
- en: The XIAO ESP32C3 provides multiple pins for digital input/output. In previous
    ESP-series boards such as the ESP8266, we only had one analog pin, but we have
    four on this development board, which removes the biggest hurdle encountered when
    developing solutions using multiple analog pins. To get around this on previous
    ESP-series boards, we had to use **ADS1115**/**ADS1015** for extra analog pins,
    so this development board will save you some bucks with its four analog pins by
    default.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: XIAO ESP32C3 提供了多个数字输入/输出引脚。在之前的 ESP 系列板上，如 ESP8266，我们只有一个模拟引脚，但在这个开发板上我们有四个，这消除了在多个模拟引脚上开发解决方案时遇到的最大障碍。为了在之前的
    ESP 系列板上解决这个问题，我们不得不使用 **ADS1115**/**ADS1015** 来增加额外的模拟引脚，因此这个开发板默认提供四个模拟引脚，可以为您节省一些费用。
- en: Besides these features, XIAO provides a built-in battery charge module and the
    board is optimized for power consumption, which make this board appropriate for
    developing wearable devices. For connectivity, both Wi-Fi and Bluetooth are available,
    including **Bluetooth Low Energy** (**BLE**) **5 support**, which is more specific
    to IoT use cases. For further details, please visit [https://wiki.seeedstudio.com/XIAO_ESP32C3_Getting_Started/](https://wiki.seeedstudio.com/XIAO_ESP32C3_Getting_Started/).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些特性，XIAO 提供了内置电池充电模块，并且该板针对功耗进行了优化，这使得该板非常适合开发可穿戴设备。对于连接性，Wi-Fi 和蓝牙都可用，包括
    **低功耗蓝牙** (**BLE**) **5** 支持，这更适用于物联网用例。有关进一步详情，请访问 [https://wiki.seeedstudio.com/XIAO_ESP32C3_Getting_Started/](https://wiki.seeedstudio.com/XIAO_ESP32C3_Getting_Started/)。
- en: For our current project, we need one analog pin for the **pulse sensor**, and
    a5V pin for power. One of the good features of our chosen development board is
    that we have a 5V power pin, which is not available in most of the ESP32 series
    development boards.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们当前的项目，我们需要一个用于 **脉冲传感器** 的模拟引脚和一个 5V 电源引脚。我们选择的开发板的一个优点是它有一个 5V 电源引脚，这在大多数
    ESP32 系列开发板上是不存在的。
- en: We use the pulse sensor to measure the BPM but there is a variety of other pulse
    oximeters on the market for BPM and pulse measurement. The following pulse sensor
    (*Figure 12**.2*) is open source, cheaper, and easier to use than other sensors.
    You can also use Chinese-made pulse sensors but you will require controlled conditions
    while using these sensors.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用脉冲传感器来测量 BPM，但市场上还有各种其他用于 BPM 和脉搏测量的脉搏血氧计。以下脉冲传感器（*图12*.*2*）是开源的，比其他传感器更便宜，也更易于使用。您也可以使用中国制造的脉冲传感器，但在使用这些传感器时需要控制条件。
- en: '![Figure 12.2 – Pulse sensor and its pinout diagram](img/B19752_12_02.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图12.2 – 脉冲传感器及其引脚图](img/B19752_12_02.jpg)'
- en: Figure 12.2 – Pulse sensor and its pinout diagram
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.2 – 脉冲传感器及其引脚图
- en: 'The following is a list of official stores where you can buy the original pulse
    sensor:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是可以购买原始脉冲传感器的官方商店列表：
- en: '**SparkFun**: [https://www.sparkfun.com/products/11574](https://www.sparkfun.com/products/11574)'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SparkFun**: [https://www.sparkfun.com/products/11574](https://www.sparkfun.com/products/11574)'
- en: '**Adafruit**: [https://www.adafruit.com/product/1093](https://www.adafruit.com/product/1093)'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Adafruit**: [https://www.adafruit.com/product/1093](https://www.adafruit.com/product/1093)'
- en: '**Amazon** **UK**: [https://www.amazon.co.uk/dp/B01CPP4QM0](https://www.amazon.co.uk/dp/B01CPP4QM0)'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Amazon** **UK**: [https://www.amazon.co.uk/dp/B01CPP4QM0](https://www.amazon.co.uk/dp/B01CPP4QM0)'
- en: '**Amazon** **USA**: [https://www.amazon.com/PulseSensor-com-Original-Pulse-Sensor-project/dp/B01CPP4QM0](https://www.amazon.com/PulseSensor-com-Original-Pulse-Sensor-project/dp/B01CPP4QM0)'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Amazon** **USA**: [https://www.amazon.com/PulseSensor-com-Original-Pulse-Sensor-project/dp/B01CPP4QM0](https://www.amazon.com/PulseSensor-com-Original-Pulse-Sensor-project/dp/B01CPP4QM0)'
- en: 'The preceding figure shows the pinout layout of the pulse sensor. *Pin #1*
    is the GND pin, which connects to the onboard GND pin. *Pin #2*, VCC, works with
    both 3.3V and 5V. *Pin #3* connects to any analog pin on the board. I connect
    it to *Pin #A1* on the board. You can solder the male headers to the pulse sensor
    or directly solder the cables without any header pins.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '前面的图显示了脉冲传感器的引脚布局。*引脚 #1* 是 GND 引脚，它连接到板上的 GND 引脚。*引脚 #2*，VCC，与 3.3V 和 5V 都兼容。*引脚
    #3* 连接到板上的任何模拟引脚。我将它连接到板上的 *Pin #A1*。您可以将公头接到脉冲传感器上，或者直接焊接电缆而不使用任何头针。'
- en: Measuring a pulse is a very critical and difficult task, but we can benefit
    from [pulsesensor.com](http://pulsesensor.com), started by **World Famous Electronics
    LLC** as a crowd-funding project. On this site, you can find all the official
    details including specifications, how the sensor works, and development board
    code samples.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 测量脉搏是一个非常关键且困难的任务，但我们可以从由**世界著名的电子公司**发起的众筹项目[pulsesensor.com](http://pulsesensor.com)中受益。在这个网站上，你可以找到所有官方细节，包括规格、传感器的工作原理以及开发板代码示例。
- en: Important note
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Chinese-made pulse sensors are good for DIY projects, but even sensors from
    official stores can’t be deployed in real-world use cases without professional
    calibration using a real-time **electrocardiogram** (**ECG**), BPM equipment,
    and a doctor’s verification.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 国产的脉搏传感器适合DIY项目，但即使是官方店铺的传感器，在没有使用实时**心电图**（**ECG**）、BPM设备和医生验证的专业校准的情况下，也无法在实际应用场景中部署。
- en: In this section, we discussed the pulse sensor and where you can buy it, as
    well as examining its pinout diagram for better understanding. Next, we will examine
    the project architecture, covering how to connect the sensors to the XIAO ESP32C3.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论了脉搏传感器，以及你可以在哪里购买它，以及检查其引脚图以获得更好的理解。接下来，我们将检查项目架构，涵盖如何将传感器连接到XIAO ESP32C3。
- en: Understanding the project architecture
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解项目架构
- en: In the preceding sections, we discussed the sensors and development board in
    detail. Now it’s time to get started on the recipe. In hardware development, before
    we start working with sensors and development boards, we need to develop the design
    concepts to get a better understanding of how things will be connected. There
    are many pieces of software available to design and develop design concepts for
    electronics projects, but we are going to use Fritzing.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们详细讨论了传感器和开发板。现在，我们该开始着手制作食谱了。在硬件开发中，在我们开始使用传感器和开发板之前，我们需要开发设计概念，以便更好地理解事物如何连接。有许多软件可用于为电子项目设计和开发设计概念，但我们将使用Fritzing。
- en: In the following two subsections, we will cover schematics and project design,
    explaining how to connect the pins to the development board and soldering. Next,
    we will do some calibration of the *pulse sensor fetch-reading threshold*, as
    this is different for different development boards. This is very important to
    do before we send the data to the cloud.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的两个小节中，我们将涵盖原理图和项目设计，解释如何将引脚连接到开发板并进行焊接。接下来，我们将对*脉搏传感器读取阈值*进行一些校准，因为这对于不同的开发板是不同的。在我们将数据发送到云之前，这非常重要。
- en: Schematics design and assembly
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 印制电路板设计和组装
- en: 'The purpose of design is to get a clear understanding of how the sensors will
    be connected to the development board. A clear design helps engineers to develop
    a prototype on a **breadboard** or **veroboard**. Another major benefit of effective
    design is that Fritzing builds hardware schematics and PCB designs in the background
    according to your design, which can then be adjusted by designers according to
    the system requirements. *Figure 12**.3* shows the project schematic diagram demonstrating
    how to connect the pulse sensor to the XIAO ESP32C3:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 设计的目的是清楚地了解传感器将如何连接到开发板。清晰的设计有助于工程师在**面包板**或**Veroboard**上开发原型。有效设计的另一个主要好处是，Fritzing会根据你的设计在后台构建硬件原理图和PCB设计，然后设计师可以根据系统要求进行调整。*图12.3*显示了项目原理图，展示了如何将脉搏传感器连接到XIAO
    ESP32C3：
- en: '![Figure 12.3 – XIAO ESP32C and pulse sensor system design](img/B19752_12_03.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图12.3 – XIAO ESP32C和脉搏传感器系统设计](img/B19752_12_03.jpg)'
- en: Figure 12.3 – XIAO ESP32C and pulse sensor system design
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.3 – XIAO ESP32C和脉搏传感器系统设计
- en: The design in the preceding figure provides an overview of how to connect the
    sensors to the development board. According to our design, we have 5V and GND
    from the development board to the pulse sensor. The pulse sensor is an analog
    sensor, so we connected its *Signal* pin to the *A1* pin of the development board.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的设计图概述了如何将传感器连接到开发板。根据我们的设计，我们从开发板到脉搏传感器有5V和GND。脉搏传感器是一个模拟传感器，因此我们将它的*信号*引脚连接到开发板的*A1*引脚。
- en: '![Figure 12.4 – Final prototype](img/B19752_12_04.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图12.4 – 最终原型](img/B19752_12_04.jpg)'
- en: Figure 12.4 – Final prototype
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.4 – 最终原型
- en: After soldering the male headers to the pulse sensor and the XIAO ESP32C3, connect
    the pins according to the schematic. There is only one sensor, so no veroboard
    is required. *Figure 12**.4* shows the pulse sensor connected to the XIAO ESP32C3
    without any breadboard or Veroboard, but rather, directly connected with jumper
    wires. Now, it’s time to calibrate the pulse sensor and get an appropriate threshold
    value by putting your fingertip on the sensor.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在将公头焊接到脉冲传感器和XIAO ESP32C3之后，根据原理图连接引脚。只有一个传感器，因此不需要面包板。*图12.4*显示了脉冲传感器直接通过跳线连接到XIAO
    ESP32C3，而没有使用任何面包板或Veroboard。现在，是时候校准脉冲传感器并通过将指尖放在传感器上来获取适当的阈值值了。
- en: Sensor calibration
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 传感器校准
- en: For sensor calibration, we need the Serial Plotter to identify the pulse value
    threshold. Currently, the Arduino Web Editor does not support the Serial Plotter,
    so we are going to use the Arduino IDE. To work with the Arduino IDE, we need
    to install the **Seeed Studio XIAO ESP32C3 series** development board and the
    [pulsesensor.com](http://pulsesensor.com) library.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 对于传感器校准，我们需要串行绘图器来识别脉冲值阈值。目前，Arduino Web 编辑器不支持串行绘图器，因此我们将使用Arduino IDE。要使用Arduino
    IDE，我们需要安装**Seeed Studio XIAO ESP32C3系列**开发板和[pulsesensor.com](http://pulsesensor.com)库。
- en: 'To install the ESP32 series development board in the Arduino IDE, firstly,
    add the board’s definition file in the preferences:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Arduino IDE中安装ESP32系列开发板，首先，在首选项中添加板的定义文件：
- en: 'Navigate to **File** > **Preferences**, and fill the **Additional Boards Manager
    URLs** field with the following URL: [https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_dev_index.json](https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_dev_index.json).'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**文件** > **首选项**，并在**附加板管理器URL**字段中填写以下URL：[https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_dev_index.json](https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_dev_index.json)。
- en: Then, navigate to `esp32` in the search box, select the latest version of ****esp32****,
    and install it.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在搜索框中导航到`esp32`，选择**esp32**的最新版本，并安装它。
- en: Finally, select the board by navigating to **Tools** > **Board** > **ESP32 Arduino**
    and selecting **XIAO_ESP32C3**. The list of boards is a little long and you will
    need to scroll to the bottom to find it.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，通过导航到**工具** > **板** > **ESP32 Arduino**并选择**XIAO_ESP32C3**来选择板。板列表有点长，您需要滚动到底部才能找到它。
- en: It’s time to install the pulse sensor library. Navigate to `pulsesensor playground`
    into the search bar. Only one library will be returned here – install it.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候安装脉冲传感器库了。在搜索栏中导航到`pulsesensor playground`。这里只会返回一个库——安装它。
- en: 'Now we are ready to proceed to the calibration step. Navigate to **File** >
    **Examples** > **PulseSensor Playground** > **Getting Started Project**. Here,
    you will get the template code for calibration, to which we will make the following
    changes:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好进入校准步骤。导航到**文件** > **示例** > **PulseSensor Playground** > **入门项目**。在这里，您将获得校准的模板代码，我们将对其进行以下修改：
- en: '[PRE0]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Set the `PulseSensorPurplePin` variable to `A1`. Remember to never use a simple
    `1` as it will give you different values. Next, assign `10` to the `LED` variable.
    After these modifications, upload the code to the board. To monitor the recorded
    values in graph format, navigate to **Tools** > **Serial Plotter**. *Figure 12**.5*
    shows the Serial Plotter presenting all the values in the form of a graph. The
    threshold values are marked by the red box.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 将`PulseSensorPurplePin`变量设置为`A1`。请记住永远不要使用简单的`1`，因为它会给出不同的值。接下来，将`10`分配给`LED`变量。在这些修改完成后，将代码上传到板。要以图形格式监控记录的值，请导航到**工具**
    > **串行绘图器**。*图12.5*显示了串行绘图器以图形形式展示所有值。阈值值由红色框标记。
- en: '![Figure 12.5 – Pulse sensor raw-readings graph using the Serial Plotter](img/B19752_12_05.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图12.5 – 使用串行绘图器显示的脉冲传感器原始读取值图](img/B19752_12_05.jpg)'
- en: Figure 12.5 – Pulse sensor raw-readings graph using the Serial Plotter
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.5 – 使用串行绘图器显示的脉冲传感器原始读取值图
- en: Put a finger on the front side of the pulse sensor, which is marked with a white
    heart shape. Wait for some time for the readings to stabilize on the Serial Plotter.
    After a few seconds, you should see stable readings as shown in the preceding
    figure. Mark the lowest level as the threshold. In my case, I take **3500** as
    the threshold value to avoid noise.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 将手指放在脉冲传感器的正面，上面有一个白色的心形标记。等待一段时间，让读取值在串行绘图器上稳定。几秒钟后，您应该看到如图所示稳定的读取值。将最低值标记为阈值。在我的情况下，我将**3500**作为阈值值以避免噪声。
- en: 'After that, download the `PulseSensor_BPM_Alternative` code from the GitHub
    repository under [*Chapter 12*](B19752_12.xhtml#_idTextAnchor251). This is some
    code modified by us that we’ll use to display the BPM. But before uploading the
    code to the board, modify the values as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，从 GitHub 仓库下载 *第 12 章* 下的 `PulseSensor_BPM_Alternative` 代码（[B19752_12.xhtml#_idTextAnchor251]）。这是我们修改过的代码，我们将用它来显示
    BPM。但在将代码上传到板子之前，请按照以下方式修改值：
- en: '[PRE1]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Assign `A1` to the `PULSE_INPUT` variable, `10` to `PULSE_BLINK`, and set the
    `THRESHOLD` value according to your stabilized reading taken from the Serial Plotter.
    As stated, I am using `3500` from my graph. Upload the code to the board and observe
    the BPM readings in the Serial Monitor. Place a finger on the top of the sensor
    and you will get different BPM readings. *Figure 12**.6* demonstrates what this
    should look like:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `A1` 分配给 `PULSE_INPUT` 变量，将 `10` 分配给 `PULSE_BLINK`，并根据从 Serial Plotter 读取的稳定值设置
    `THRESHOLD` 值。正如所述，我使用的是从我的图表中读取的 `3500`。将代码上传到板子，并在 Serial Monitor 中观察 BPM 读取值。将手指放在传感器的顶部，你会得到不同的
    BPM 读取值。*图 12.6* 展示了它应该看起来是什么样子：
- en: '![Figure 12.6 – BPM values in the Serial Monitor](img/B19752_12_06.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.6 – 序列监视器中的 BPM 值](img/B19752_12_06.jpg)'
- en: Figure 12.6 – BPM values in the Serial Monitor
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.6 – 序列监视器中的 BPM 值
- en: The preceding figure shows random BPM values, and when we put a finger on the
    sensor, it detects **96** and **100** BPM. You can play with the sensor and verify
    the readings with any professional smartwatch. Next, we need to set up a Thing,
    some code, and a dashboard in the Arduino IoT Cloud to prepare our IoT project.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图显示了随机的 BPM 值，当我们把手指放在传感器上时，它会检测到 **96** 和 **100** BPM。你可以玩一下传感器，并用任何专业智能手表验证读取值。接下来，我们需要在
    Arduino IoT Cloud 中设置一个 Thing、一些代码和一个仪表盘，以准备我们的物联网项目。
- en: Setting up a Thing, network credentials, cloud variables, and code
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 Thing、网络凭据、云变量和代码
- en: 'After setting up the hardware, it’s time to set up a Thing in the Arduino IoT
    Cloud. For this project, we need one cloud variable to fetch BPM reading from
    the device. The network settings will be different from those of Arduino IoT development
    boards as we are using an ESP series board. *Figure 12**.7* shows the complete
    Thing details including cloud variables, device info, and network configurations:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置好硬件之后，现在是时候在 Arduino IoT Cloud 中设置一个 Thing 了。对于这个项目，我们需要一个云变量来从设备获取 BPM 读取值。由于我们使用的是
    ESP 系列板，网络设置将与 Arduino IoT 开发板不同。*图 12.7* 展示了包括云变量、设备信息和网络配置在内的完整 Thing 详细信息：
- en: '![Figure 12.7 – Tracking and notifying about your heart rate Thing setup](img/B19752_12_07.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.7 – 跟踪和通知心率 Thing 设置](img/B19752_12_07.jpg)'
- en: Figure 12.7 – Tracking and notifying about your heart rate Thing setup
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.7 – 跟踪和通知心率 Thing 设置
- en: 'Set up a new `Tracking and notifying about your heart rate`. Then, proceed
    to the following sections of this chapter, which will take us through the following
    steps to create the variables, associate the device, set up the network configuration,
    and finally, apply the code:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 设置一个新的 `Tracking and notifying about your heart rate`。然后，继续阅读本章的以下部分，它将带我们完成以下步骤：创建变量、关联设备、设置网络配置，最后应用代码：
- en: Firstly, we need to set up one cloud variable for **BPM**. The complete details
    regarding cloud variables are available in the following *Cloud* *variables* section.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要为 **BPM** 设置一个云变量。有关云变量的详细信息，请参阅以下 *云变量* 部分。
- en: After that, we need to associate the device with the Thing. In our current project,
    we are using the XIAO ESP32C3, so the wizard will be different from that for Arduino
    boards. The complete details are available in the *Device* *association* section.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，我们需要将设备与 Thing 关联。在我们的当前项目中，我们使用的是 XIAO ESP32C3，因此向导将不同于 Arduino 板的向导。详细信息请参阅
    *设备关联* 部分。
- en: Next, we need to set up the network configuration for the device, but this time,
    we need to provide a security key for ESP-series boards to make the connection
    secure (whereas Arduino-compatible boards are configured by the Arduino IoT Cloud
    automatically during the device setup wizard).
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要为设备设置网络配置，但这次，我们需要为 ESP 系列板提供一个安全密钥，以确保连接的安全性（而 Arduino 兼容板在设备设置向导期间会自动由
    Arduino IoT Cloud 配置）。
- en: Lastly, we will set up the webhook toward the end of the chapter, along with
    the notification service using Zapier.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将在本章末尾设置 webhook，以及使用 Zapier 设置通知服务。
- en: Cloud variables
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 云变量
- en: The following table outlines the properties that we need to use during cloud
    variable creation. For BPM, we could just use the `integer` data type, but thanks
    to the Arduino IoT Cloud extended group of variables, we can choose the specific
    `Heart rate` variable type. Next, make sure you use the same variable declaration
    as in the table; otherwise, you will need to modify the example code according
    to your own naming.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 下表概述了我们在创建云变量时需要使用的属性。对于BPM，我们可以只使用`整数`数据类型，但多亏了Arduino IoT Cloud扩展变量组，我们可以选择特定的`心率`变量类型。接下来，请确保您使用与表中相同的变量声明；否则，您将需要根据您自己的命名修改示例代码。
- en: 'For **Permission**, while we do have a **Read/Write** option, I chose **Read
    Only** as we only want to receive data from the device, as opposed to dashboard
    modification, so **Read Only** mode will avoid issues in data consistency. **Update
    Policy** is set to **On change** as the device will send the data whenever there
    is any change detected in the BPM value:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 对于**权限**，虽然我们有**读/写**选项，但我选择了**只读**，因为我们只想从设备接收数据，而不是修改仪表板，因此**只读**模式将避免数据一致性问题。**更新策略**设置为**更改时**，因为设备将在检测到BPM值有任何变化时发送数据：
- en: '| **S#** | **Variable Name** | **Variable Type** | **Declaration** | **Permission**
    | **Update Policy** |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| **S#** | **变量名** | **变量类型** | **声明** | **权限** | **更新策略** |'
- en: '| 1 | BPM | Heart rate | `bPM` | Read Only | On change |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| 1 | BPM | 心率 | `bPM` | 只读 | 更改时 |'
- en: Table 12.1 – Cloud variable for our Thing
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 表12.1 – 我们事物的云变量
- en: In this section, we have created the cloud variable that receives the heart
    rate value in BPM from the sensor device. In the next section, we will associate
    the device with the Thing.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们创建了接收来自传感器设备的BPM心率值的云变量。在下一节中，我们将关联设备与事物。
- en: Device association
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设备关联
- en: 'After variable creation, it’s time to add the device and associate it with
    the Thing. Before adding the device, connect the development board to the computer
    and open the **Arduino Create Agent** application. *Figure 12**.8* shows the device
    setup wizard where we have selected **ESP32** and then **XIAO_ESP32C3** from the
    dropdown:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 变量创建完成后，现在是时候添加设备并将其与事物关联起来。在添加设备之前，将开发板连接到计算机并打开**Arduino Create Agent**应用程序。*图12.8*显示了设备设置向导，我们在下拉菜单中选择了**ESP32**，然后选择了**XIAO_ESP32C3**：
- en: '![Figure 12.8 – Device selection wizard](img/B19752_12_08.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![图12.8 – 设备选择向导](img/B19752_12_08.jpg)'
- en: Figure 12.8 – Device selection wizard
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.8 – 设备选择向导
- en: Click on the **Select Device** button under the **Associated Devices** section
    on the Thing page. A popup will appear showing all the devices that are already
    available. If you have already added your XIAO ESP32C3, select it. Otherwise,
    click on **SET UP** **NEW DEVICE**.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在事物页面上的**关联设备**部分下点击**选择设备**按钮。将弹出一个窗口，显示所有已可用的设备。如果您已经添加了您的XIAO ESP32C3，请选择它。否则，点击**设置**
    **新设备**。
- en: Next, click on the **Third Party device** option. Select **ESP32** and **XIAO_ESP32C3**
    from the dropdown and click on the **CONTINUE** button.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击**第三方设备**选项。从下拉菜单中选择**ESP32**和**XIAO_ESP32C3**，然后点击**继续**按钮。
- en: Fill in the **Device Name** field and click on the **Next** button.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**设备名称**字段中填写，然后点击**下一步**按钮。
- en: On the final wizard screen, the **Device ID** and **Secret Key** values will
    be displayed. Copy the **Secret Key** value to a safe place as it will be needed
    later during the network configuration.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在最后的向导屏幕上，将显示**设备ID**和**密钥**值。将**密钥**值复制到安全的地方，因为它将在稍后的网络配置中需要。
- en: In this section, we associated the XIAO ESP32C3 device with the Thing. The device
    association process is somewhat different to adding the Arduino MKR1010 to a Thing.
    Next, let’s complete the network settings.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将XIAO ESP32C3设备与事物关联起来。设备关联过程与将Arduino MKR1010添加到事物中的过程有所不同。接下来，让我们完成网络设置。
- en: Network
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络
- en: After associating the device with the Thing, it is time to configure the Wi-Fi
    settings for device communication. Fill in the form shown in *Figure 12**.9* with
    your **Wi-Fi Name** and **Password** values. The last field here is the **Secret
    Key** field. Paste the secret key value in here that we received from the system
    during device creation.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 将设备与事物关联后，现在是时候配置设备通信的Wi-Fi设置了。使用*图12.9*中所示表格填写您的**Wi-Fi名称**和**密码**值。最后一个字段是**密钥**字段。粘贴我们在设备创建期间从系统中接收到的密钥值。
- en: "![Figure 12.9 – Network configuration for \uFEFFthe Thing](img/B19752_12_09.jpg)"
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![图12.9 – 事物的网络配置](img/B19752_12_09.jpg)'
- en: Figure 12.9 – Network configuration for the Thing
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.9 – 事物的网络配置
- en: '*Figure 12**.9* shows how it should look once you’ve entered all the relevant
    values. In the next subsection, we will cover the coding for the device.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '*图12**.9*显示了输入所有相关值后应该看起来是什么样子。在下一小节中，我们将介绍设备的编码。'
- en: Coding
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编程
- en: The code for this chapter is available in the book’s official GitHub repository.
    Download the `Tracking_and_notifying_Your_Heart_Rate_mar31a` code from the repository
    and import it to the Arduino Web Editor.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码可在本书的官方GitHub仓库中找到。从仓库中下载`Tracking_and_notifying_Your_Heart_Rate_mar31a`代码，并将其导入Arduino
    Web Editor。
- en: You can download the code and add it to your Thing by navigating to the **Sketch**
    tab. We will not discuss the code at length as you will get the gist after reading
    the code yourself, but I will explain the main workflow with which we initialize
    all the variables and constants in the setup.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过导航到**草图**选项卡来下载代码并将其添加到你的设备中。我们不会详细讨论代码，因为你在自己阅读代码后就会明白其要点，但我将解释我们初始化所有变量和常数的main
    workflow。
- en: 'Remember to never use the `delay` method as it will create blocking in the
    `ArduinoCloud.update()` method. But before moving on to the code, we need to set
    the `PULSE_INPUT` variable to pin `A1`, `PULSE_BLINK` to digital pin `10` for
    the LED, and set `THRESHOLD` with your calibration value:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 记住永远不要使用`delay`方法，因为它会在`ArduinoCloud.update()`方法中创建阻塞。但在继续代码之前，我们需要将`PULSE_INPUT`变量设置为引脚`A1`，将`PULSE_BLINK`设置为数字引脚`10`用于LED，并使用你的校准值设置`THRESHOLD`：
- en: '[PRE2]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'After configuring the preceding variables with the appropriate values, it’s
    time to explore the loop method:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用适当的值配置前面的变量之后，是时候探索循环方法了：
- en: '[PRE3]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the loop method, the development board calls `pulseSensor.sawNewSample()`
    to fetch new samples if they exist. Other than that, it will not call any activity,
    which is why you will see a delay in readings returned if there is no change found
    by the system in the BPM data. If any change occurred in the sensor readings,
    then BPM readings will verify using the `pulseSensor.sawStartOfBeat()` method.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在循环方法中，开发板会调用`pulseSensor.sawNewSample()`来获取新的样本，如果存在的话。除此之外，它不会调用任何活动，这就是为什么如果你在BPM数据中没有找到变化，你会看到返回的读取有延迟。如果传感器读取中发生了任何变化，则BPM读取将使用`pulseSensor.sawStartOfBeat()`方法进行验证。
- en: In the previous section where we created the cloud variable, recall the cloud
    variable declaration – our `pulseSensor.getBeatsPerMinute();` method assigns the
    sensor reading to that `thingProperties.h` file. So, when you assign the values
    to these constants, the `ArduinoCloud.update()` method in the loop will automatically
    send the data to the cloud. Finally, upload the code to the device and verify
    the readings returned using the Serial Monitor.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们创建云变量的上一节中，回想一下云变量声明——我们的`pulseSensor.getBeatsPerMinute();`方法将传感器读取分配给那个`thingProperties.h`文件。所以，当你将这些值分配给这些常量时，循环中的`ArduinoCloud.update()`方法将自动将数据发送到云。最后，将代码上传到设备，并使用串行监视器验证返回的读取值。
- en: Important note
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: If you used different *naming* in the variable declaration, then update the
    code according to your naming scheme. It would be better, however, if you followed
    the steps according to the book first and then change the cloud variable names
    later and modify your code respectively.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用了不同的*命名*在变量声明中，那么根据你的命名方案更新代码。然而，按照书中的步骤首先进行操作，然后稍后更改云变量名称并相应地修改你的代码会更好。
- en: Never use the `delay` method, which will create a block for the `ArduinoCloud.update()`
    method, and don’t put code at the end of the loop method, as it will cause a delay
    in the pulse sensor readings.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 永远不要使用`delay`方法，因为它会在`ArduinoCloud.update()`方法中创建阻塞，并且不要在循环方法的末尾放置代码，因为它会导致脉搏传感器读取的延迟。
- en: The Arduino IoT Cloud only updates the value on the dashboard whenever the variable
    value is changed. For example, if the heart beat is `80` and after 5 minutes it’s
    still the same, then the Arduino IoT Cloud will not record the value, so don’t
    get confused if values do not appear to change on the graph. Another benefit of
    this feature is you will not get duplicated data when you export the content.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino IoT Cloud仅在变量值更改时才更新仪表板上的值。例如，如果心跳是`80`，并且5分钟后仍然相同，那么Arduino IoT Cloud将不会记录该值，所以如果你在图表上没有看到值的变化，请不要感到困惑。这个功能的另一个好处是，当你导出内容时，你将不会得到重复的数据。
- en: In this section, we discussed the code in depth and guided you through the code
    operation and how to set the threshold values. In the next section, we are going
    to set up the dashboard to visualize the BPM value in different formats for better
    understanding.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们深入讨论了代码，并指导您了解代码操作以及如何设置阈值。在下一节中，我们将设置仪表板以不同格式可视化 BPM 值，以便更好地理解。
- en: Setting up a dashboard for web and mobile
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为网页和移动设备设置仪表板
- en: 'After uploading the code to the device, it’s now time to set up the dashboard
    for web and mobile to visualize the data with different widgets. The following
    figure demonstrates how this visualization might look:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在将代码上传到设备后，现在是时候设置网页和移动仪表板，以便使用不同的小部件可视化数据了。以下图示演示了这种可视化可能的外观：
- en: '![Figure 12.10 – Thing dashboard](img/B19752_12_10.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.10 – 事物仪表板](img/B19752_12_10.jpg)'
- en: Figure 12.10 – Thing dashboard
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.10 – 事物仪表板
- en: In the preceding figure, we have a BPM reading, and to visualize it, we have
    used two widgets, **Value** and **Advanced Chart**. The **Value** widget on the
    left of the screen shows the real-time **BPM** values, while the **Advanced Chart**
    widget illustrates the real-time readings as well as historical readings for proper
    analysis, just like an ECG machine display. Both widgets are attached to the BPM
    cloud variable.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图中，我们有一个 BPM 读数，为了可视化它，我们使用了两个小部件，**值**和**高级图表**。屏幕左侧的**值**小部件显示实时**BPM**值，而**高级图表**小部件展示了实时读数以及用于适当分析的历史读数，就像心电图机显示一样。这两个小部件都连接到
    BPM 云变量。
- en: The **Advanced Chart** widget is a new addition to the widgets on offer, and
    comes with a variety of features including different chart formats such as line,
    spline, spline/line area, and bar charts, with the option to customize the color
    of the plot. Another big feature is the ability to visualize multiple cloud variables
    on the same chart, which is not available in simpler chart widgets. We will use
    that feature in upcoming projects for a proper demonstration.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '**高级图表**小部件是新增的小部件之一，它包含各种功能，包括不同的图表格式，如线形图、样条图、样条图/线形图面积图和柱状图，以及自定义绘图颜色的选项。另一个重要功能是能够在同一图表上可视化多个云变量，这在简单的图表小部件中是不可用的。我们将在未来的项目中使用该功能进行适当的演示。'
- en: In this section, we briefly discussed some widgets and why these widgets are
    used in our dashboard. Next, we will set up the notification service using Zapier,
    which will send an email/SMS when the pulse is detected as going above or below
    our thresholds.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们简要讨论了一些小部件及其为何在我们的仪表板中使用。接下来，我们将使用 Zapier 设置通知服务，当脉冲检测到超过或低于我们的阈值时，将发送电子邮件/SMS。
- en: Setting up the notification service
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置通知服务
- en: Multiple platforms provide **Software-as-a-Service** (**SaaS**) infrastructure
    and operate as a bridge between a variety of applications to make interoperability
    easy. Platforms for this purpose include **Zapier**, **IFTTT**, and **Integromat**,
    and provide an interface to integrate other platforms into the Arduino IoT Cloud
    platform to fulfill the requirements instead of developing the required features
    from scratch.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 多个平台提供 **软件即服务** (**SaaS**) 基础设施，并作为各种应用程序之间的桥梁，使互操作性变得容易。此类平台包括 **Zapier**、**IFTTT**
    和 **Integromat**，并提供接口将其他平台集成到 Arduino IoT 云平台中，以满足需求，而不是从头开始开发所需功能。
- en: So firstly, we need to understand why we need the Zapier automation platform.
    In our current project, we want to send notifications by email/SMS when a specific
    threshold is met, but the Arduino IoT Cloud only provides the data visualization,
    webhooks, and API functionalities. We have two options to solve this problem.
    Either we need to develop a custom solution to send notifications by email/SMS
    using Arduino webhooks and APIs, or we can use an automation platform such as
    Zapier or IFTTT, which will save time and reduce costs compared to the first option.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，首先，我们需要了解为什么我们需要 Zapier 自动化平台。在我们的当前项目中，我们希望在达到特定阈值时通过电子邮件/SMS 发送通知，但 Arduino
    IoT 云平台仅提供数据可视化、webhooks 和 API 功能。我们有两种解决此问题的方法。要么我们需要开发一个自定义解决方案，使用 Arduino webhooks
    和 API 通过电子邮件/SMS 发送通知，或者我们可以使用自动化平台，如 Zapier 或 IFTTT，这比第一种方法节省时间和降低成本。
- en: For this exercise, we will use Zapier, which will receive the data via **Arduino
    webhooks**. We will apply Zapier filters in Zaps to manage the threshold, and
    when the threshold is crossed, Zapier will send an email notification about BPM
    levels. A *Zap* is a term used in Zapier to describe an automated workflow that
    allows you to connect apps and services together, and each Zap can consist of
    multiple actions.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个练习，我们将使用 Zapier，它将通过 **Arduino webhook** 接收数据。我们将在 Zaps 中应用 Zapier 过滤器来管理阈值，当阈值被超过时，Zapier
    将发送关于 BPM 水平的电子邮件通知。*Zap* 是 Zapier 中用来描述允许连接应用程序和服务的自动化工作流程的术语，每个 Zap 可以包含多个操作。
- en: 'Before moving onto the main steps, first sign up to [zapier.com](http://zapier.com)
    and use the trial version, as the Zapier webhooks we are going to use are only
    available under the *Professional plan*. The following screenshot demonstrates
    the trigger and two actions required to set up our notification functionality:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行主要步骤之前，首先在 [zapier.com](http://zapier.com) 上注册并使用试用版，因为我们将要使用的 Zapier webhook
    只在 *专业计划* 下可用。以下截图展示了设置我们的通知功能所需的触发器和两个操作：
- en: '![Figure 12.11 – Zapier complete notification Zap](img/B19752_12_11.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.11 – Zapier 完整通知 Zap](img/B19752_12_11.jpg)'
- en: Figure 12.11 – Zapier complete notification Zap
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.11 – Zapier 完整通知 Zap
- en: 'The steps to create this, which we will work through for the remainder of this
    section, are as follows:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 创建此 Zap 的步骤，我们将在本节剩余部分进行操作，如下所示：
- en: Firstly, we need to set up the **webhook trigger**, which will provide a URL.
    This URL should be inserted into the **Thing** by clicking on **Set Webhook**
    on the Arduino IoT Cloud Thing page. This trigger will be responsible for receiving
    the data from the Arduino IoT Cloud.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要设置 **webhook 触发器**，它将提供一个 URL。这个 URL 应该通过点击 Arduino IoT Cloud Thing 页面上的
    **设置 Webhook** 来插入到 **Thing** 中。这个触发器将负责接收来自 Arduino IoT Cloud 的数据。
- en: In the second step, we apply the filter on the BPM value, which specifies that
    if the BPM is greater than 100 or less than 60, then proceed to the next action;
    otherwise, the BPM is normal and there is no need to send a notification.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第二步中，我们对 BPM 值应用过滤器，指定如果 BPM 大于 100 或小于 60，则进行下一个操作；否则，BPM 是正常的，不需要发送通知。
- en: Finally, we will use the **Email by Zapier** or **Gmail** option to send the
    notification. We add multiple actions to the Zap. To keep things easy and manageable,
    we chose to use a simple email notification. Alternatively, you could also use
    **Twillo** to send SMS notifications to recipients.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将使用 **Zapier 的电子邮件** 或 **Gmail** 选项来发送通知。我们在 Zap 中添加了多个操作。为了使事情简单易管理，我们选择使用简单的电子邮件通知。或者，您也可以使用
    **Twilio** 向收件人发送短信通知。
- en: 'Previously, we have discussed the different triggers and actions step by step
    that are required for notifications to be triggered and sent. The following points
    will guide you through these steps in Zapier:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，我们已经逐步讨论了触发和发送通知所需的不同的触发器和操作。以下要点将指导您在 Zapier 中完成这些步骤：
- en: The preceding screenshot gives a rough idea of how our setup looks in Zapier.
    To create a new Zap in Zapier, click the **Create** button and select **New Zap**,
    which will open a new page where you select the required triggers and actions.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上一张截图大致展示了我们在 Zapier 中的设置。要在 Zapier 中创建一个新的 Zap，请点击 **创建** 按钮，然后选择 **新建 Zap**，这将打开一个新页面，您可以在其中选择所需的触发器和操作。
- en: Type `Webhook` in the search bar and select the **Webhooks By Zapier** option,
    which is available under the Professional plan. Click on **Event** and select
    **Catch Hook**, then click **Continue**. In the **Trigger** tab, just leave the
    empty **Pick off a Child Key** textbox as is and proceed to the next step by clicking
    on the **Continue** button.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在搜索栏中输入 `Webhook` 并选择 **Zapier Webhooks** 选项，这是在专业计划下可用的。点击 **事件** 并选择 **捕获钩子**，然后点击
    **继续**。在 **触发器** 选项卡中，只需保持空的 **选择子键** 文本框不变，然后通过点击 **继续** 按钮进行下一步。
- en: In the **Test** tab, you will get the **webhook URL** – copy that and navigate
    to **Thing** in the Arduino IoT Cloud, then click on **Set Webhook**. Insert the
    URL into the window that pops up, then hit the **Save** button.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **测试** 选项卡中，您将获得 **webhook URL** – 复制该 URL 并导航到 Arduino IoT Cloud 中的 **Thing**，然后点击
    **设置 Webhook**。将 URL 插入弹出的窗口中，然后点击 **保存** 按钮。
- en: 'Come back to Zapier and click the **Test Trigger** button to verify whether
    data is arriving or not. Before you can verify this, the device must be powered
    on and connected to the internet to send the values. This might not work on your
    first try; if not, try again and you should see the data arriving, which means
    you are receiving the data successfully from the Arduino Thing. *Figure 12**.12*
    shows a trigger test, demonstrating the values received from the Arduino IoT Cloud
    pulse monitoring Thing:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 返回 Zapier 并点击 **测试触发** 按钮以验证数据是否到达。在您验证之前，设备必须开启并连接到互联网以发送值。这可能不会在第一次尝试时成功；如果不成功，请再次尝试，您应该会看到数据到达，这意味着您已成功从
    Arduino Thing 接收数据。*图 12*.12 显示了一个触发测试，展示了从 Arduino IoT Cloud 脉搏监测 Thing 接收到的值：
- en: '![Figure 12.12 – Trigger test](img/B19752_12_12.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.12 – 触发测试](img/B19752_12_12.jpg)'
- en: Figure 12.12 – Trigger test
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.12 – 触发测试
- en: 'The preceding screenshot shows Zapier successfully receiving the data from
    the Arduino IoT Cloud Thing. In the red box, we can see **bPM** and **value**.
    The **value** parameter will be used in the next action. Click the **Continue**
    button and a new **Action** popup will appear. Here, we need to configure the
    filter action where we will set the threshold for our BPM notification, as shown
    in *Figure 12**.13*:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 上一张截图显示了 Zapier 成功从 Arduino IoT Cloud Thing 接收数据。在红色框中，我们可以看到 **bPM** 和 **value**。**value**
    参数将在下一个动作中使用。点击 **继续** 按钮，将出现一个新的 **动作** 弹窗。在这里，我们需要配置过滤器动作，我们将设置 BPM 通知的阈值，如图
    *12*.13 所示：
- en: '![Figure 12.13 – Filter action](img/B19752_12_13.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.13 – 过滤器动作](img/B19752_12_13.jpg)'
- en: Figure 12.13 – Filter action
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.13 – 过滤器动作
- en: Type `Filter` in the search box and select `100` in the next input field. This
    sets the upper threshold value to 100 BPM. Next, click `60` in the next field.
    Lastly, click on **Continue**.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在搜索框中输入 `Filter`，然后在下一个输入字段中选择 `100`。这会将上限阈值设置为 100 BPM。接下来，在下一个字段中点击 `60`。最后，点击
    **继续**。
- en: 'Our filter is ready; now, our email notification action is required to finish
    the setup. We have two options to send email notifications: either `Email` in
    the search box and click on **Email by Zapier**. Click on **Event** and select
    **Send Outbound Email**. In the next window, set all the parameters for the email
    receiver, subject, and body, as shown in the following screenshot:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的过滤器已准备就绪；现在，我们需要电子邮件通知动作来完成设置。我们有两种发送电子邮件通知的方式：在搜索框中输入 `Email` 并点击 **通过 Zapier
    发送电子邮件**。点击 **事件** 并选择 **发送出站电子邮件**。在下一个窗口中，设置电子邮件接收者、主题和正文的全部参数，如图下所示截图：
- en: '![Figure 12.14 – Email notification settings](img/B19752_12_14.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.14 – 邮件通知设置](img/B19752_12_14.jpg)'
- en: Figure 12.14 – Email notification settings
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.14 – 邮件通知设置
- en: Only three fields are mandatory here – insert the recipient email in the **To**
    field, write a relevant entry for the **Subject** field, and insert a message
    in the **Body** area. It’s up to you whether you fill the other fields or leave
    them blank. If you observe the preceding screenshot, you may notice I added **Values
    Value** to both the **Subject** and **Body** fields, which will display the values
    that triggered the notification in the email. Click the **Continue** button at
    the bottom of the page and test the action – if you receive the email with the
    BPM values, then publish the Zap and you are good to go.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这里只有三个字段是必填的——在 **收件人** 字段中输入收件人电子邮件，为 **主题** 字段编写相关条目，并在 **正文** 区域中插入消息。是否填写其他字段或留空取决于您。如果您观察上一张截图，可能会注意到我在
    **主题** 和 **正文** 字段中添加了 **Values Value**，这将显示触发通知的电子邮件中的值。点击页面底部的 **继续** 按钮并测试动作——如果您收到带有
    BPM 值的电子邮件，那么发布 Zap 即可。
- en: In this section, we set up the notification services for our pulse monitor using
    Zapier. We created a Zap that consists of three steps. Firstly, we set up the
    webhook responsible for receiving the data. The second step deals with the threshold,
    and the third and final step handles sending the email notification.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们使用 Zapier 为我们的脉搏监测器设置通知服务。我们创建了一个包含三个步骤的 Zap。首先，我们设置了负责接收数据的 webhook。第二步处理阈值，第三步和最后一步处理发送电子邮件通知。
- en: What next?
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接下来是什么？
- en: There are many more options available to explore, but these are left to you
    to work on, using different health sensors and development boards to do some more
    experiments and learn from them. In the current chapter, we only used one sensor
    that provided only one parameter, but there are many sensors on the market that
    provide a wide variety of functionalities including the monitoring of blood sugar,
    blood oxygen, blood pressure, body temperature, and more.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多更多选项可供探索，但这些留给你去使用不同的健康传感器和开发板进行更多实验并从中学习。在当前章节中，我们只使用了一个传感器，它只提供了一个参数，但市场上有很多传感器提供了广泛的性能，包括血糖、血氧、血压、体温等的监测。
- en: 'Try the following sensors to enhance your practical knowledge and compare this
    selection with other sensors in terms of features, ranges, and cost:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试以下传感器以增强你的实践知识，并从功能、范围和成本等方面将此选择与其他传感器进行比较：
- en: LilyPad temperature sensor ([https://www.sparkfun.com/products/8777](https://www.sparkfun.com/products/8777))
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LilyPad温度传感器（[https://www.sparkfun.com/products/8777](https://www.sparkfun.com/products/8777)）
- en: High-sensitivity pulse oximeter and heart-rate sensor for wearables ([https://www.seeedstudio.com/MAXREFDES117-HEART-RATE-AND-PULSE-OXIMETRY-MONITOR-p-2762.html?queryID=51de6141574a711bbe455cb4894ce3fb&objectID=411&index
    Name=bazaar_retailer_products](https://www.seeedstudio.com/MAXREFDES117-HEART-RATE-AND-PULSE-OXIMETRY-MONITOR-p-2762.html?queryID=51de6141574a711bbe455cb4894ce3fb&objectID=411&indexName=bazaar_retailer_products))
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高灵敏度脉搏血氧仪和心率传感器，适用于可穿戴设备（[https://www.seeedstudio.com/MAXREFDES117-HEART-RATE-AND-PULSE-OXIMETRY-MONITOR-p-2762.html?queryID=51de6141574a711bbe455cb4894ce3fb&objectID=411&indexName=bazaar_retailer_products](https://www.seeedstudio.com/MAXREFDES117-HEART-RATE-AND-PULSE-OXIMETRY-MONITOR-p-2762.html?queryID=51de6141574a711bbe455cb4894ce3fb&objectID=411&indexName=bazaar_retailer_products)）
- en: Fall detection module ([https://www.seeedstudio.com/24GHz-mmWave-Radar-Sensor-Fall-Detection-Module-p-5268.html](https://www.seeedstudio.com/24GHz-mmWave-Radar-Sensor-Fall-Detection-Module-p-5268.html))
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 倒地检测模块（[https://www.seeedstudio.com/24GHz-mmWave-Radar-Sensor-Fall-Detection-Module-p-5268.html](https://www.seeedstudio.com/24GHz-mmWave-Radar-Sensor-Fall-Detection-Module-p-5268.html)）
- en: Open source Arduino blood glucose meter shield
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开源Arduino血糖仪盾牌
- en: MIKROE series health sensors
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MIKROE系列健康传感器
- en: Summary
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we explored how to develop a low-cost wearable smart heart-rate
    monitoring system using the XIAO ESP32C3 and a pulse sensor. One important thing
    to note was the necessity of calibrating medical sensors before using them in
    the field. We set up a Thing, which included cloud variable creation, device association,
    network configuration, and coding for our development board. Later, we created
    a dashboard to visualize our sensor readings with different widgets to display
    both current readings and historical data with the help of graphs. Finally, we
    used Zapier to set up an email notification service based on thresholds using
    webhooks and saw how to employ webhooks to integrate third-party services with
    the Arduino IoT Cloud.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了如何使用XIAO ESP32C3和一个脉搏传感器开发低成本可穿戴智能心率监测系统。需要注意的一个重要事项是在现场使用医疗传感器之前必须对其进行校准。我们设置了一个“事物”，其中包括云变量创建、设备关联、网络配置和为我们的开发板编写代码。后来，我们创建了一个仪表板，使用不同的小部件可视化我们的传感器读数，包括当前读数和历史数据，并通过图表帮助显示。最后，我们使用Zapier根据阈值设置基于webhooks的电子邮件通知服务，并了解了如何使用webhooks将第三方服务与Arduino
    IoT Cloud集成。
- en: In the next chapter, we will learn about scripting in the Arduino IoT Cloud
    with the **Arduino Cloud CLI** (**CCLI**). This is a command-line tool that provides
    access to Arduino IoT Cloud services via terminal commands. We will use the Arduino
    IoT Cloud CLI to automate bulk operations, including bulk device creation, which
    will help us to minimize the time required for operations and maintenance.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何在Arduino IoT Cloud中使用**Arduino Cloud CLI**（**CCLI**）进行脚本编写。这是一个通过终端命令提供对Arduino
    IoT Cloud服务访问的命令行工具。我们将使用Arduino IoT Cloud CLI来自动化大量操作，包括大量设备创建，这将帮助我们最小化操作和维护所需的时间。
