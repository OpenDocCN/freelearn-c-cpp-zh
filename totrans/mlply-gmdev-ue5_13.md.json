["```cpp\nUPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = \"Arrow\", meta = (AllowPrivateAccess = \"true\"))\nTObjectPtr<class UArrowComponent> Arrow;\nUPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = \"Camera\", meta = (AllowPrivateAccess = \"true\"))\nTObjectPtr<class UCameraComponent> Camera;\nUPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = \"Camera\", meta = (AllowPrivateAccess = \"true\"))\nTObjectPtr<USkeletalMeshComponent> Mesh;\n```", "```cpp\nFORCEINLINE UArrowComponent* GetArrow() const { return Arrow; }\nFORCEINLINE UCameraComponent* GetCamera() const { return Camera; }\nFORCEINLINE USkeletalMeshComponent* GetMesh() const { return Mesh; }\n```", "```cpp\n#include \"Camera/CameraComponent.h\"\n#include \"Components/ArrowComponent.h\"\n```", "```cpp\nArrow = CreateDefaultSubobject<UArrowComponent>(TEXT(\"Arrow\"));\nRootComponent = Arrow;\nCamera = CreateDefaultSubobject<UCameraComponent>(TEXT(\"Camera\"));\nCamera->SetupAttachment(RootComponent);\nCamera->SetRelativeLocation(FVector(450.f, 90.f, 160.f));\nCamera->SetRelativeRotation(FRotator(-10.f, 180.f, 0.f));\nMesh = CreateDefaultSubobject<USkeletalMeshComponent>(TEXT(\"Mesh\"));\nMesh->SetupAttachment(RootComponent);\nCamera->SetRelativeLocation(FVector(0.f, -30.f, 90.f));\nstatic ConstructorHelpers::FObjectFinder<USkeletalMesh> SkeletalMeshAsset(TEXT(\"/Game/KayKit/Characters/rogue\"));\nif (SkeletalMeshAsset.Succeeded())\n{\n Mesh->SetSkeletalMesh(SkeletalMeshAsset.Object);\n}\n```", "```cpp\nUPROPERTY(BlueprintReadWrite)\nint32 SkinIndex;\n```", "```cpp\n#pragma once\n#include \"CoreMinimal.h\"\n#include \"Engine/DataTable.h\"\n#include \"US_CharacterSkins.generated.h\"\nUSTRUCT(BlueprintType)\nstruct UNREALSHADOWS_LOTL_API FUS_CharacterSkins : public FTableRowBase\n{\n GENERATED_BODY()\n UPROPERTY(BlueprintReadWrite, EditAnywhere)\n UMaterialInterface *Material4;\n UPROPERTY(BlueprintReadWrite, EditAnywhere)\n UMaterialInterface *Material0;\n UPROPERTY(BlueprintReadWrite, EditAnywhere)\n UMaterialInterface *Material1;\n UPROPERTY(BlueprintReadWrite, EditAnywhere)\n UMaterialInterface *Material2;\n};\n```", "```cpp\nUPROPERTY(EditAnywhere, BlueprintReadOnly, Category = \"Character Data\", meta = (AllowPrivateAccess = \"true\"))\nclass UDataTable* CharacterSkinDataTable;\nstruct FUS_CharacterSkins* CharacterSkin;\n```", "```cpp\nFORCEINLINE FUS_CharacterSkins* GetCharacterSkin() const { return CharacterSkin; }\n```", "```cpp\nvoid RandomizeCharacterSkin();\n```", "```cpp\n#include \"US_CharacterSkins.h\"\n#include \"US_GameInstance.h\"\n```", "```cpp\nvoid AUS_MainMenuPawn::RandomizeCharacterSkin()\n{\n if(CharacterSkinDataTable)\n {\n  TArray<FUS_CharacterSkins*> CharacterSkinsRows;\n  CharacterSkinDataTable->GetAllRows<FUS_CharacterSkins>(TEXT(\"US_Character\"), CharacterSkinsRows);\n  if(CharacterSkinsRows.Num() > 0)\n  {\n   const auto NewIndex = FMath::RandRange(0, CharacterSkinsRows.Num() - 1);\n   CharacterSkin = CharacterSkinsRows [NewIndex];\n   Mesh->SetMaterial(4, CharacterSkinsRows[NewIndex]->Material4);\n   Mesh->SetMaterial(0, CharacterSkinsRows[NewIndex]->Material0);\n   Mesh->SetMaterial(1, CharacterSkinsRows[NewIndex]->Material1);\n   Mesh->SetMaterial(2, CharacterSkinsRows[NewIndex]->Material2);\n   if (const auto GameInstance = Cast<UUS_GameInstance>(GetGameInstance()))\n   {\n    GameInstance->SkinIndex = NewIndex;\n   }\n  }\n }\n```", "```cpp\nif(IsLocallyControlled())\n{\n RandomizeCharacterSkin();\n}\n```", "```cpp\nUPROPERTY(EditAnywhere, BlueprintReadOnly, Category = \"Character Data\", meta = (AllowPrivateAccess = \"true\"))\nUDataTable* CharacterSkinDataTable;\nstruct FUS_CharacterSkins* CharacterSkin;\n```", "```cpp\nUPROPERTY(EditDefaultsOnly, BlueprintReadOnly, ReplicatedUsing=\"OnRep_SkinChanged\", Category = \"Skin\")\nint32 SkinIndex = 0;\nUFUNCTION()\nvoid OnRep_SkinChanged(int32 OldValue);\nUFUNCTION(Server, Reliable)\nvoid SetSkinIndex_Server(int32 Value);\nUFUNCTION()\nvoid UpdateCharacterSkin();\n```", "```cpp\nFORCEINLINE FUS_CharacterSkins* GetCharacterSkins() const { return CharacterSkin; }\nvirtual void GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const override;\n```", "```cpp\n#include \"US_GameInstance.h\"\n#include \"US_CharacterSkins.h\"\n#include \"Net/UnrealNetwork.h\"\n```", "```cpp\nvoid AUS_Character::GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const\n{\n Super::GetLifetimeReplicatedProps(OutLifetimeProps);\n DOREPLIFETIME(AUS_Character, SkinIndex);\n}\n```", "```cpp\nvoid AUS_Character::OnRep_SkinChanged(int32 OldValue)\n{\n UpdateCharacterSkin();\n}\n```", "```cpp\nvoid AUS_Character::SetSkinIndex_Server_Implementation(const int32 Value)\n{\n SkinIndex = Value;\n UpdateCharacterSkin();\n}\n```", "```cpp\nvoid AUS_Character::UpdateCharacterSkin()\n{\n if(CharacterSkinDataTable)\n {\n  TArray<FUS_CharacterSkins*> CharacterSkinsRows;\n  CharacterSkinDataTable->GetAllRows<FUS_CharacterSkins>(TEXT(\"US_Character\"), CharacterSkinsRows);\n  if(CharacterSkinsRows.Num() > 0)\n  {\n   const auto Index = FMath::Clamp(SkinIndex, 0, CharacterSkinsRows.Num() - 1);\n   CharacterSkin = CharacterSkinsRows[Index];\n   GetMesh()->SetMaterial(4, CharacterSkin->Material4);\n   GetMesh()->SetMaterial(0, CharacterSkin->Material0);\n   GetMesh()->SetMaterial(1, CharacterSkin->Material1);\n   GetMesh()->SetMaterial(2, CharacterSkin->Material2);\n  }\n }\n}\n```", "```cpp\nif(IsLocallyControlled())\n{\n if(const auto GameInstanceCast = Cast<UUS_GameInstance>(GetWorld()->GetGameInstance()); GameInstanceCast != nullptr)\n {\n  SetSkinIndex_Server(GameInstanceCast->SkinIndex);\n }\n}\n```"]