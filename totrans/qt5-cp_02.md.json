["```cpp\n#ifndef MAINWINDOW_H\n#define MAINWINDOW_H\n\n#include <QMainWindow>\n\nnamespace Ui {\n  class MainWindow;\n}\n\nclass MainWindow : public QMainWindow\n{\n  Q_OBJECT\n\npublic:\n  explicit MainWindow(QWidget *parent = 0);\n  ~MainWindow();\n\nprivate:\n  Ui::MainWindow *ui;\n\nprivate slots:\n  void updateTime();\n};\n\n#endif // MAINWINDOW_H\n```", "```cpp\n#include <QTimer>\n#include <QTime>\n#include \"mainwindow.h\"\n#include \"ui_mainwindow.h\"\n\nMainWindow::MainWindow(QWidget *parent) :\n  QMainWindow(parent),\n  ui(new Ui::MainWindow)\n{\n  ui->setupUi(this);\n\n  QTimer *timer = new QTimer(this);\n  connect(timer, &QTimer::timeout, this, &MainWindow::updateTime);\n  timer->start(1000);\n\n  updateTime();\n}\n\nMainWindow::~MainWindow()\n{\n  delete ui;\n}\n\nvoid MainWindow::updateTime()\n{\n  QTime currentTime = QTime::currentTime();\n  QString currentTimeText = currentTime.toString(\"hh:mm\");\n  if (currentTime.second() % 2 == 0) {\n    currentTimeText[2] = ' ';\n  }\n  ui->lcdNumber->display(currentTimeText);\n}\n```", "```cpp\nsetAttribute(Qt::WA_TranslucentBackground);\n```", "```cpp\nsetWindowFlags(Qt::WindowStaysOnTopHint | Qt::FramelessWindowHint);\n```", "```cpp\nsetWindowFlags(Qt::WindowStaysOnTopHint | Qt::FramelessWindowHint | windowFlags());\n```", "```cpp\n#include \"mainwindow.h\"\n#include <QApplication>\n\nint main(int argc, char *argv[])\n{\n  QApplication a(argc, argv);\n\n  QWidget wid;\n  MainWindow w(&wid);\n  w.show();\n\n  return a.exec();\n}\n```", "```cpp\n#ifndef MAINWINDOW_H\n#define MAINWINDOW_H\n\n#include <QMainWindow>\n\nnamespace Ui {\n  class MainWindow;\n}\n\nclass MainWindow : public QMainWindow\n{\n  Q_OBJECT\npublic:\n  explicit MainWindow(QWidget *parent = 0);\n  ~MainWindow();\n\nprivate:\n  Ui::MainWindow *ui;\n\nprivate slots:\n  void updateTime();\n  void showContextMenu(const QPoint &pos);\n\nprotected:\n  void mouseReleaseEvent(QMouseEvent *);\n};\n\n#endif // MAINWINDOW_H\n```", "```cpp\n#include <QTimer>\n#include <QTime>\n#include <QMouseEvent>\n#include <QMenu>\n#include <QAction>\n#include \"mainwindow.h\"\n#include \"ui_mainwindow.h\"\n\nMainWindow::MainWindow(QWidget *parent) :\n  QMainWindow(parent),\n  ui(new Ui::MainWindow)\n{\n  ui->setupUi(this);\n\n  setAttribute(Qt::WA_TranslucentBackground);\n  setWindowFlags(Qt::WindowStaysOnTopHint | Qt::FramelessWindowHint | windowFlags());\n\n  connect(this, &MainWindow::customContextMenuRequested, this, &MainWindow::showContextMenu);\n\n  QTimer *timer = new QTimer(this);\n  connect(timer, &QTimer::timeout, this, &MainWindow::updateTime);\n  timer->start(1000);\n\n  updateTime();\n}\n\nMainWindow::~MainWindow()\n{\n  delete ui;\n}\n\nvoid MainWindow::updateTime()\n{\n  QTime currentTime = QTime::currentTime();\n  QString currentTimeText = currentTime.toString(\"hh:mm\");\n  if (currentTime.second() % 2 == 0) {\n    currentTimeText[2] = ' ';\n  }\n  ui->lcdNumber->display(currentTimeText);\n}\n\nvoid MainWindow::showContextMenu(const QPoint &pos)\n{\n  QMenu contextMenu;\n  contextMenu.addAction(QString(\"Exit\"), this, SLOT(close()));\n  contextMenu.exec(mapToGlobal(pos));\n}\n\nvoid MainWindow::mouseReleaseEvent(QMouseEvent *e)\n{\n  if (e->button() == Qt::RightButton) {\n    emit customContextMenuRequested(e->pos());\n  }\n  else {\n    QMainWindow::mouseReleaseEvent(e);\n  }\n}\n```", "```cpp\n#ifndef MAINWINDOW_H\n#define MAINWINDOW_H\n\n#include <QMainWindow>\n\nnamespace Ui {\n  class MainWindow;\n}\n\nclass MainWindow : public QMainWindow\n{\n  Q_OBJECT\n\npublic:\n  explicit MainWindow(QWidget *parent = 0);\n  ~MainWindow();\n\nprivate:\n  Ui::MainWindow *ui;\n  QPoint m_mousePos;\n\nprivate slots:\n  void updateTime();\n  void showContextMenu(const QPoint &pos);\n\nprotected:\n  void mouseReleaseEvent(QMouseEvent *);\n  void mousePressEvent(QMouseEvent *);\n  void mouseMoveEvent(QMouseEvent *);\n};\n\n#endif // MAINWINDOW_H\n```", "```cpp\nvoid MainWindow::mousePressEvent(QMouseEvent *e)\n{\n  m_mousePos = e->pos();\n}\n\nvoid MainWindow::mouseMoveEvent(QMouseEvent *e)\n{\n  this->move(e->globalPos() - m_mousePos);\n}\n```", "```cpp\nQSettings settings(\"Qt5 Blueprints\", \"Fancy Clock\");\n```", "```cpp\n#include \"mainwindow.h\"\n#include <QApplication>\n\nint main(int argc, char *argv[])\n{\n  QApplication a(argc, argv);\n\n  a.setOrganizationName(QString(\"Qt5 Blueprints\"));\n  a.setApplicationName(QString(\"Fancy Clock\"));\n\n  QWidget wid;\n  MainWindow w(&wid);\n  w.show();\n\n  return a.exec();\n}\n```", "```cpp\nvoid closeEvent(QCloseEvent *);\n```", "```cpp\nvoid MainWindow::closeEvent(QCloseEvent *e)\n{\n  QSettings sts;\n  sts.setValue(\"MainGeometry\", saveGeometry());\n  sts.setValue(\"MainState\", saveState());\n  e->accept();\n}\n```", "```cpp\nQSettings sts;\nrestoreGeometry(sts.value(\"MainGeometry\").toByteArray());\nrestoreState(sts.value(\"MainState\").toByteArray());\n```", "```cpp\n#ifndef PREFERENCE_H\n#define PREFERENCE_H\n\n#include <QDialog>\n\nnamespace Ui {\n  class Preference;\n}\n\nclass Preference : public QDialog\n{\n  Q_OBJECT\n\npublic:\n  explicit Preference(QWidget *parent = 0);\n  ~Preference();\n\nprivate:\n  Ui::Preference *ui;\n\nprivate slots:\n  void onAccepted();\n};\n\n#endif // PREFERENCE_H\n```", "```cpp\n#include <QSettings>\n#include \"preference.h\"\n#include \"ui_preference.h\"\n\nPreference::Preference(QWidget *parent) :\n  QDialog(parent),\n  ui(new Ui::Preference)\n{\n  ui->setupUi(this);\n\n  QSettings sts;\n  ui->colourBox->setCurrentIndex(sts.value(\"Colour\").toInt());\n\n  connect(ui->buttonBox, &QDialogButtonBox::accepted, this, &Preference::onAccepted);\n}\n\nPreference::~Preference()\n{\n  delete ui;\n}\n\nvoid Preference::onAccepted()\n{\n  QSettings sts;\n  sts.setValue(\"Colour\", ui->colourBox->currentIndex());\n}\n```", "```cpp\n#ifndef MAINWINDOW_H\n#define MAINWINDOW_H\n\n#include <QMainWindow>\n\nnamespace Ui {\n  class MainWindow;\n}\n\nclass MainWindow : public QMainWindow\n{\n  Q_OBJECT\n\npublic:\n  explicit MainWindow(QWidget *parent = 0);\n  ~MainWindow();\n\nprivate:\n  Ui::MainWindow *ui;\n  QPoint m_mousePos;\n  void setColour();\n\nprivate slots:\n  void updateTime();\n  void showContextMenu(const QPoint &pos);\n  void showPreference();\n\nprotected:\n  void mouseReleaseEvent(QMouseEvent *);\n  void mousePressEvent(QMouseEvent *);\n  void mouseMoveEvent(QMouseEvent *);\n  void closeEvent(QCloseEvent *);\n};\n\n#endif // MAINWINDOW_H\n```", "```cpp\n#include <QTimer>\n#include <QTime>\n#include <QMouseEvent>\n#include <QMenu>\n#include <QAction>\n#include <QSettings>\n#include \"mainwindow.h\"\n#include \"preference.h\"\n#include \"ui_mainwindow.h\"\n\nMainWindow::MainWindow(QWidget *parent) :\n  QMainWindow(parent),\n  ui(new Ui::MainWindow)\n{\n  ui->setupUi(this);\n\n  setAttribute(Qt::WA_TranslucentBackground);\n  setWindowFlags(Qt::WindowStaysOnTopHint | Qt::FramelessWindowHint | windowFlags());\n\n  QSettings sts;\n  restoreGeometry(sts.value(\"MainGeometry\").toByteArray());\n  restoreState(sts.value(\"MainState\").toByteArray());\n  setColour();\n\n  connect(this, &MainWindow::customContextMenuRequested, this, &MainWindow::showContextMenu);\n\n  QTimer *timer = new QTimer(this);\n  connect(timer, &QTimer::timeout, this, &MainWindow::updateTime);\n  timer->start(1000);\n\n  updateTime();\n}\n\nMainWindow::~MainWindow()\n{\n  delete ui;\n}\n\nvoid MainWindow::updateTime()\n{\n  QTime currentTime = QTime::currentTime();\n  QString currentTimeText = currentTime.toString(\"hh:mm\");\n  if (currentTime.second() % 2 == 0) {\n    currentTimeText[2] = ' ';\n  }\n  ui->lcdNumber->display(currentTimeText);\n}\n\nvoid MainWindow::showContextMenu(const QPoint &pos)\n{\n  QMenu contextMenu;\n  contextMenu.addAction(QString(\"Preference\"), this, SLOT(showPreference()));\n  contextMenu.addAction(QString(\"Exit\"), this, SLOT(close()));\n  contextMenu.exec(mapToGlobal(pos));\n}\n\nvoid MainWindow::mouseReleaseEvent(QMouseEvent *e)\n{\n  if (e->button() == Qt::RightButton) {\n    emit customContextMenuRequested(e->pos());\n  }\n  else {\n    QMainWindow::mouseReleaseEvent(e);\n  }\n}\n\nvoid MainWindow::mousePressEvent(QMouseEvent *e)\n{\n  m_mousePos = e->pos();\n}\n\nvoid MainWindow::mouseMoveEvent(QMouseEvent *e)\n{\n  this->move(e->globalPos() - m_mousePos);\n}\n\nvoid MainWindow::closeEvent(QCloseEvent *e)\n{\n  QSettings sts;\n  sts.setValue(\"MainGeometry\", saveGeometry());\n  sts.setValue(\"MainState\", saveState());\n  e->accept();\n}\n\nvoid MainWindow::setColour()\n{\n  QSettings sts;\n  int i = sts.value(\"Colour\").toInt();\n  QPalette c;\n  switch (i) {\n  case 0://black\n    c.setColor(QPalette::Foreground, Qt::black);\n    break;\n  case 1://white\n    c.setColor(QPalette::Foreground, Qt::white);\n    break;\n  case 2://green\n    c.setColor(QPalette::Foreground, Qt::green);\n    break;\n  case 3://red\n    c.setColor(QPalette::Foreground, Qt::red);\n    break;\n  }\n  ui->lcdNumber->setPalette(c);\n  this->update();\n}\n\nvoid MainWindow::showPreference()\n{\n  Preference *pre = new Preference(this);\n  pre->exec();\n  setColour();\n}\n```", "```cpp\nvoid Preference::onAccepted()\n{\n  QSettings sts;\n  sts.setValue(\"Colour\", ui->colourBox->currentIndex());\n  this->accept();\n}\n```", "```cpp\nvoid MainWindow::showPreference()\n{\n  Preference *pre = new Preference(this);\n  connect(pre, &Preference::accepted, this, &MainWindow::setColour);\n  pre->exec();\n}\n```", "```cpp\nsetWindowFlags(Qt::WindowStaysOnTopHint | Qt::FramelessWindowHint | Qt::Tool);\n```", "```cpp\nQT       += core gui\n\nwin32: QT += winextras\n\ngreaterThan(QT_MAJOR_VERSION, 4): QT += widgets\n\nTARGET = Fancy_Clock\nTEMPLATE = app\n\nSOURCES += main.cpp\\\n    mainwindow.cpp \\\n    preference.cpp\n\nHEADERS  += mainwindow.h \\\n    preference.h\n\nFORMS    += mainwindow.ui \\\n    preference.ui\n```", "```cpp\nwin32 {\n  message(\"Built on Windows\")\n}\nelse: unix: macx{\n  message(\"Built on Mac OS X\")\n}\nelse {\n  message(\"Built on Linux\")\n}\n```", "```cpp\nvoid MainWindow::showContextMenu(const QPoint &pos)\n{\n  QMenu contextMenu;\n  #ifdef Q_OS_WIN\n  contextMenu.addAction(QString(\"Options\"), this, SLOT(showPreference()));\n  #elif defined(Q_OS_LINUX)\n  contextMenu.addAction(QString(\"Profile\"), this, SLOT(showPreference()));\n  #else\n  contextMenu.addAction(QString(\"Preference\"), this, SLOT(showPreference()));\n  #endif\n  contextMenu.addAction(QString(\"Exit\"), this, SLOT(close()));\n  contextMenu.exec(mapToGlobal(pos));\n}\n```"]