["```cpp\n$ brew install cmake\n```", "```cpp\n$ sudo port install cmake\n```", "```cpp\n$ git clone https://github.com/llvm/llvm-project.git -b release/18.x\n$ cd llvm-project\n```", "```cpp\n$ mkdir build\n$ cd build\n```", "```cpp\n$ cmake -DCMAKE_BUILD_TYPE=Debug ../llvm\n```", "```cpp\ncmake -G Ninja -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=../install -DLLVM_TARGETS_TO_BUILD=\"X86\" -DLLVM_ENABLE_PROJECTS=\"lldb;clang;clang-tools-extra\" -DLLVM_USE_SPLIT_DWARF=ON ../llvm\n```", "```cpp\ncmake -G Ninja -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=../install -DLLVM_TARGETS_TO_BUILD=\"X86\" -DLLVM_ENABLE_PROJECTS=\"lldb;clang;clang-tools-extra\" -DLLVM_USE_SPLIT_DWARF=ON -DBUILD_SHARED_LIBS=ON ../llvm\n```", "```cpp\ncmake -G Ninja -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=../install -DLLVM_TARGETS_TO_BUILD=\"X86\" -DLLVM_ENABLE_PROJECTS=\"lldb;clang;clang-tools-extra\" -DLLVM_USE_LINKER=gold -DLLVM_USE_SPLIT_DWARF=ON -DBUILD_SHARED_LIBS=ON ../llvm\n```", "```cpp\ncmake -G Ninja -DCMAKE_BUILD_TYPE=RelWithDebInfo _DCMAKE_INSTALL_PREFIX=../install -DLLVM_TARGETS_TO_BUILD=\"X86\" -DLLVM_ENABLE_PROJECTS=\"lldb;clang;clang-tools-extra\" -DLLVM_USE_SPLIT_DWARF=ON ../llvm\n```", "```cpp\n$ ninja\n```", "```cpp\n$ ninja clang\n```", "```cpp\n$ ninja check-clang\n```", "```cpp\n$ ninja install\n```", "```cpp\n$ ls ../install\nbin  include  lib  libexec  share\n```", "```cpp\n$ cd llvm-project\n$ mkdir release\n$ cd release\n```", "```cpp\ncmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=../install -DLLVM_TARGETS_TO_BUILD=\"X86\" -DLLVM_ENABLE_PROJECTS=\"lldb;clang\" ../llvm\n```", "```cpp\n$ ninja clang lldb -j $(nproc)\n```", "```cpp\n$ ninja install-clang install-lldb\n```", "```cpp\n1 int main() { \n\n2   return 0; \n\n3 }\n```", "```cpp\n$ <...>/llvm-project/install/bin/clang main.cpp -o main -g -O0\n```", "```cpp\n1$ <...>/llvm-project/install/bin/lldb main \n\n2 (lldb) target create \"./main\" \n\n3 ... \n\n4 (lldb) b main \n\n5 Breakpoint 1: where = main‘main + 11 at main.cpp:2:3,... \n\n6 (lldb) r \n\n7 Process 1443051 launched: ... \n\n8 Process 1443051 stopped \n\n9 * thread #1, name = ’main’, stop reason = breakpoint 1.1 \n\n10    frame #0: 0x000055555555513b main‘main at main.cpp:2:3 \n\n11    1    int main() { \n\n12 -> 2     return 0; \n\n13    3    } \n\n14 (lldb) q\n```", "```cpp\ncmake -G Ninja -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=../install -DLLVM_TARGETS_TO_BUILD=\"X86\" -DLLVM_ENABLE_PROJECTS=\"clang\" -DLLVM_USE_LINKER=gold -DLLVM_USE_SPLIT_DWARF=ON -DBUILD_SHARED_LIBS=ON ../llvm\n```", "```cpp\n$ ninja install\n```", "```cpp\n1 cmake_minimum_required(VERSION 3.16) \n\n2 project(\"syntax-check\") \n\n3  \n\n4 if ( NOT DEFINED ENV{LLVM_HOME}) \n\n5   message(FATAL_ERROR \"$LLVM_HOME is not defined\") \n\n6 else() \n\n7   message(STATUS \"$LLVM_HOME found: $ENV{LLVM_HOME}\") \n\n8   set(LLVM_HOME $ENV{LLVM_HOME} CACHE PATH \"Root of LLVM installation\") \n\n9   set(LLVM_LIB ${LLVM_HOME}/lib)\n\n```", "```cpp\n10  set(LLVM_DIR ${LLVM_LIB}/cmake/llvm) \n\n11   find_package(LLVM REQUIRED CONFIG) \n\n12   include_directories(${LLVM_INCLUDE_DIRS}) \n\n13   link_directories(${LLVM_LIBRARY_DIRS}) \n\n14   set(SOURCE_FILES SyntaxCheck.cpp) \n\n15   add_executable(syntax-check ${SOURCE_FILES}) \n\n16   set_target_properties(syntax-check PROPERTIES COMPILE_FLAGS \"-fno-rtti\") \n\n17   target_link_libraries(syntax-check \n\n18    LLVMSupport \n\n19    clangBasic \n\n20    clangFrontend \n\n21    clangSerialization \n\n22    clangTooling \n\n23   ) \n\n24 endif()\n```", "```cpp\n1 #include \"clang/Frontend/FrontendActions.h\" // clang::SyntaxOnlyAction \n\n2 #include \"clang/Tooling/CommonOptionsParser.h\" \n\n3 #include \"clang/Tooling/Tooling.h\" \n\n4 #include \"llvm/Support/CommandLine.h\" // llvm::cl::extrahelp \n\n5  \n\n6 namespace { \n\n7 llvm::cl::OptionCategory TestCategory(\"Test project\"); \n\n8 llvm::cl::extrahelp \n\n9     CommonHelp(clang::tooling::CommonOptionsParser::HelpMessage); \n\n10 } // namespace \n\n11  \n\n12 int main(int argc, const char **argv) { \n\n13   llvm::Expected<clang::tooling::CommonOptionsParser> OptionsParser = \n\n14       clang::tooling::CommonOptionsParser::create(argc, argv, TestCategory); \n\n15   if (!OptionsParser) { \n\n16     llvm::errs() << OptionsParser.takeError(); \n\n17     return 1; \n\n18   } \n\n19   clang::tooling::ClangTool Tool(OptionsParser->getCompilations(), \n\n20                                  OptionsParser->getSourcePathList()); \n\n21   return Tool.run( \n\n22       clang::tooling::newFrontendActionFactory<clang::SyntaxOnlyAction>() \n\n23           .get()); \n\n24 }\n```", "```cpp\nexport LLVM_HOME=<...>/llvm-project/install\nmkdir build\ncd build\ncmake -G Ninja ..\nninja\n```", "```cpp\n$ cd build\n$ ./syntax-check --help\nUSAGE: syntax-check [options] <source0> [... <sourceN>]\n...\n```", "```cpp\n$ ./syntax-check mainbroken.cpp -- -std=c++17\nmainbroken.cpp:2:11: error: expected ’;’ after return statement\n  return 0\n          ^\n          ;\n1  error generated.\nError while processing mainbroken.cpp.\n```", "```cpp\n$  <...>/llvm-project/install/bin/lldb \\\n                        ./syntax-check \\\n                        --           \\\n                        main.cpp     \\\n                        -- -std=c++17\n```", "```cpp\n1(lldb) b clang::ParseAST \n\n2 ... \n\n3 (lldb) r \n\n4 ... \n\n5 Running without flags. \n\n6 Process 608249 stopped \n\n7 * thread #1, name = ’syntax-check’, stop reason = breakpoint 1.1 \n\n8    frame #0: ... clang::ParseAST(...) at ParseAST.cpp:117:3 \n\n9    114 \n\n10    115  void clang::ParseAST(Sema &S, bool PrintStats, bool SkipFunctionBodies) { \n\n11    116    // Collect global stats on Decls/Stmts (until we have a module streamer). \n\n12 -> 117    if (PrintStats) { \n\n13    118     Decl::EnableStatistics(); \n\n14    119     Stmt::EnableStatistics(); \n\n15    120    } \n\n16 (lldb) c \n\n17 Process 608249 resuming \n\n18 Process 608249 exited with status = 0 (0x00000000) \n\n19 (lldb)\n```"]