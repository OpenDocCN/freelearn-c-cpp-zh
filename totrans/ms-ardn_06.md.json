["```cpp\n/* This is a block comment\n   This comment can span multiple lines\n   This type of comment is usually found outside function calls\n*/\n```", "```cpp\n// This is a single line comment\nSerial.println(\"Hello World\"); // comment after statement\n```", "```cpp\nint myInt = 0;\n```", "```cpp\nboolean myBool = true;\n```", "```cpp\nbyte myByte = 128;\n```", "```cpp\nint mySignedInt = 25;\nunsigned int myUnsignedInt = 15;\n```", "```cpp\nlong myLong = 123,456,789; \n```", "```cpp\ndouble myDouble = 1.25; \nfloat myFloat = 1.5; \n```", "```cpp\nchar myChar = 'A';\nchar myChar = 65;\n```", "```cpp\nint myInts[10];\nint myInts[] = {1, 2, 3, 4};\nint myInts[8] = {2, 4, 6, 8, 10};\n```", "```cpp\nint myInts[] = {1, 2, 3, 4};\nint myInt = myInts[1];\n```", "```cpp\nint myInts[] = {1, 2, 3, 4};\nint myInt0 = myInts[0]; // contains 1\nint myInt1 = myInts[1]; // contains 2\nint myInt2 = myInts[2]; // contains 3\nint myInt3 = myInts[3]; // contains 4\n```", "```cpp\nint myInts[5];\nSerial.println(myInts[0]);\nSerial.println(myInts[1]);\nSerial.println(myInts[2]);\nSerial.println(myInts[3]);\nSerial.println(myInts[4]);\n```", "```cpp\nint myInts[2];\nmyInts[0] = 0;\nmyInts[1] = 1;\n```", "```cpp\nint myInts[3][4];\nint myInts[][] = { {0,1,2,3}, {4,5,6,7}, {8,9,10,11} };\n```", "```cpp\nint myInt = myInts[1,2]; // The value would be 6\n```", "```cpp\nchar myStr[10]; \nchar myStr[8] = {'A', 'r', 'd', 'u', 'i', 'n', 'o', '\\0'}; \n```", "```cpp\nchar myStr[] = \"Arduino\";\nchar myStr[10] = \"Arduino\";\n```", "```cpp\n#define LED_PIN 8\n```", "```cpp\nconst float pi = 3.14; \n```", "```cpp\nz = x + y; // calculates the sum of x and y\nz = x - y; // calculates the difference of x and y\nz = x * y; // calculates the product of x and y\nz = x / y; // calculates the quotient of x and y\n```", "```cpp\nz = x % y // z will contain the remainder of x divided by y\n```", "```cpp\nx++; // increments x by 1 and assigns the result to x\nx--; // decrements x by 1 and assigns the result to x\nx += y; //increments x by y and assigns the result to x\nx -= y; //decrement x by y and assigns the result to x\nx *= y; //multiplies x and y and assigns the result to x\nx /= y; //divides x and y and assigns the result to x\n```", "```cpp\nabs(x) // returns the absolute value of x\nmax(x,y) // returns the larger of the two values\nmin(x,y) //returns the smaller of the two values\npow(x,y) // returns the value of x raised to the power of y\nsq(x) // returns the value of x squared\nsqrt(x) // returns the square root of the value\n```", "```cpp\nx == y // returns true if x is equal to y\nx != y // returns true if x is not equal to y\nx > y // returns true if x is greater than y\nx < y // returns true if x is less than y\nx >= y // returns true if x is greater or equal to y\nx <= y // returns true if x is less than or equal to y\n```", "```cpp\n(x > 5 && x < 10) // true if x is greater than 5 and less than 10\n(x > 5 || x < 1) // true if x is greater than 5 or less than 1\n!(x == y) // returns true if x is not equal to y\n```", "```cpp\nint x = 5;\nfloat y = 3.14;\nfloat z = (float)x + y;\n```", "```cpp\nif (condition) {\n  // Code to execute\n}\n```", "```cpp\nif (condition) {\n  // Code to execute if condition is true\n} else {\n  // Code to execute if condition is false\n}\n```", "```cpp\nif (varA > varB) {\n  Serial.println(\"varA is greater than varB\");\n} else {\n  Serial.println(\"varB is greater or equal to varA\");\n}\n```", "```cpp\nif (varA == varB) {\n  Serial.println(\"varA is equal to varB\");\n} else if (varA > varB) {\n  Serial.println(\"varA is greater than varB\");\n} else {\n  Serial.println(\"varB is greater than varA\");\n}\n```", "```cpp\nswitch (var) { \n  case match1:\n    // Code to execute if condition matches case\n  break;\n  case match2:\n   // Code to execute if condition matches case\n  break;\n  case match3:\n   // Code to execute if condition matches case\n  break;\n  default:\n   // Code to execute if condition matches case\n}\n```", "```cpp\nfor (initialization; condition; change) { }\n```", "```cpp\nfor (int i = 0; i < 10; i++) {\n  // Code to execute\n}\n```", "```cpp\nwhile (condition) {\n  // code to execute\n}\n```", "```cpp\nint x = 0;\nwhile (x < 200) {\n  // code to execute\n  x++;\n}\n```", "```cpp\ndo {\n  // code to execute\n} while (condition);\n```", "```cpp\nint x = 0;\ndo {\n  // code to execute\n  x++;\n} while (x < 200);\n```", "```cpp\ntype name (parameters) { } \n```", "```cpp\nvoid myFunction() {\n  // Function code\n}    \n\nvoid myFunction(int param) {\n  // Function code\n}\n\nint myFunction() {\n  // Function code\n}\n\nint myFunction(int param) {\n  // Function Code\n}\n```", "```cpp\nint myFunction() {\n  var x = 1;\n  var y = 2;\n  return x + y;\n}\n```", "```cpp\nint g = 1;\nvoid function myFunction1() {\n  int x1 = 2;\n}\nvoid function myFunction2() {\n int x2 = 3;\n}\n```"]