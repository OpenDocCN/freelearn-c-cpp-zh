["```cpp\ngit clone https://github.com/codeplea/Hands-On-Network-Programming-with-C\ncd Hands-On-Network-Programming-with-C/chap02\n```", "```cpp\n/*sock_init.c*/\n\n#if defined(_WIN32)\n#ifndef _WIN32_WINNT\n#define _WIN32_WINNT 0x0600\n#endif\n#include <winsock2.h>\n#include <ws2tcpip.h>\n#pragma comment(lib, \"ws2_32.lib\")\n\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <netdb.h>\n#include <unistd.h>\n#include <errno.h>\n\n#endif\n\n#include <stdio.h>\n\nint main() {\n\n#if defined(_WIN32)\n    WSADATA d;\n    if (WSAStartup(MAKEWORD(2, 2), &d)) {\n        fprintf(stderr, \"Failed to initialize.\\n\");\n        return 1;\n    }\n#endif\n\n    printf(\"Ready to use socket API.\\n\");\n\n#if defined(_WIN32)\n    WSACleanup();\n#endif\n\n    return 0;\n}\n```", "```cpp\ngcc sock_init.c -o sock_init\n./sock_init\n```", "```cpp\ngcc sock_init.c -o sock_init.exe -lws2_32\nsock_init.exe\n```", "```cpp\n#if !defined(_WIN32)\n#define SOCKET int\n#endif\n```", "```cpp\n#if defined(_WIN32)\n#define ISVALIDSOCKET(s) ((s) != INVALID_SOCKET)\n#else\n#define ISVALIDSOCKET(s) ((s) >= 0)\n#endif\n```", "```cpp\n#if defined(_WIN32)\n#define CLOSESOCKET(s) closesocket(s)\n#else\n#define CLOSESOCKET(s) close(s)\n#endif\n```", "```cpp\n#if defined(_WIN32)\n#define GETSOCKETERRNO() (WSAGetLastError())\n#else\n#define GETSOCKETERRNO() (errno)\n#endif\n\n```", "```cpp\n/*time_console.c*/\n\n#include <stdio.h>\n#include <time.h>\n\nint main()\n{\n    time_t timer;\n    time(&timer);\n\n    printf (\"Local time is: %s\", ctime(&timer));\n\n    return 0;\n}\n```", "```cpp\n$ gcc time_console.c -o time_console\n$ ./time_console\nLocal time is: Fri Oct 19 08:42:05 2018\n```", "```cpp\n/*time_server.c*/\n\n#if defined(_WIN32)\n#ifndef _WIN32_WINNT\n#define _WIN32_WINNT 0x0600\n#endif\n#include <winsock2.h>\n#include <ws2tcpip.h>\n#pragma comment(lib, \"ws2_32.lib\")\n\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <netdb.h>\n#include <unistd.h>\n#include <errno.h>\n\n#endif\n```", "```cpp\n/*time_server.c continued*/\n\n#if defined(_WIN32)\n#define ISVALIDSOCKET(s) ((s) != INVALID_SOCKET)\n#define CLOSESOCKET(s) closesocket(s)\n#define GETSOCKETERRNO() (WSAGetLastError())\n\n#else\n#define ISVALIDSOCKET(s) ((s) >= 0)\n#define CLOSESOCKET(s) close(s)\n#define SOCKET int\n#define GETSOCKETERRNO() (errno)\n#endif\n```", "```cpp\n/*time_server.c continued*/\n\n#include <stdio.h>\n#include <string.h>\n#include <time.h>\n```", "```cpp\n/*time_server.c continued*/\n\nint main() {\n\n#if defined(_WIN32)\n    WSADATA d;\n    if (WSAStartup(MAKEWORD(2, 2), &d)) {\n        fprintf(stderr, \"Failed to initialize.\\n\");\n        return 1;\n    }\n#endif\n```", "```cpp\n/*time_server.c continued*/\n\n    printf(\"Configuring local address...\\n\");\n    struct addrinfo hints;\n    memset(&hints, 0, sizeof(hints));\n    hints.ai_family = AF_INET;\n    hints.ai_socktype = SOCK_STREAM;\n    hints.ai_flags = AI_PASSIVE;\n\n    struct addrinfo *bind_address;\n    getaddrinfo(0, \"8080\", &hints, &bind_address);\n```", "```cpp\n/*time_server.c continued*/\n\n    printf(\"Creating socket...\\n\");\n    SOCKET socket_listen;\n    socket_listen = socket(bind_address->ai_family,\n            bind_address->ai_socktype, bind_address->ai_protocol);\n```", "```cpp\n/*time_server.c continued*/ \n\n   if (!ISVALIDSOCKET(socket_listen)) {\n       fprintf(stderr, \"socket() failed. (%d)\\n\", GETSOCKETERRNO());\n        return 1;\n    }\n```", "```cpp\n/*time_server.c continued*/\n\n    printf(\"Binding socket to local address...\\n\");\n    if (bind(socket_listen,\n                bind_address->ai_addr, bind_address->ai_addrlen)) {\n        fprintf(stderr, \"bind() failed. (%d)\\n\", GETSOCKETERRNO());\n        return 1;\n    }\n    freeaddrinfo(bind_address);\n```", "```cpp\n/*time_server.c continued*/\n\n    printf(\"Listening...\\n\");\n    if (listen(socket_listen, 10) < 0) {\n        fprintf(stderr, \"listen() failed. (%d)\\n\", GETSOCKETERRNO());\n        return 1;\n    }\n```", "```cpp\n/*time_server.c continued*/\n\n    printf(\"Waiting for connection...\\n\");\n    struct sockaddr_storage client_address;\n    socklen_t client_len = sizeof(client_address);\n    SOCKET socket_client = accept(socket_listen,\n            (struct sockaddr*) &client_address, &client_len);\n    if (!ISVALIDSOCKET(socket_client)) {\n        fprintf(stderr, \"accept() failed. (%d)\\n\", GETSOCKETERRNO());\n        return 1;\n    }\n```", "```cpp\n/*time_server.c continued*/\n\n    printf(\"Client is connected... \");\n    char address_buffer[100];\n    getnameinfo((struct sockaddr*)&client_address,\n            client_len, address_buffer, sizeof(address_buffer), 0, 0,\n            NI_NUMERICHOST);\n    printf(\"%s\\n\", address_buffer);\n```", "```cpp\n/*time_server.c continued*/\n\n    printf(\"Reading request...\\n\");\n    char request[1024];\n    int bytes_received = recv(socket_client, request, 1024, 0);\n    printf(\"Received %d bytes.\\n\", bytes_received);\n```", "```cpp\n    printf(\"%.*s\", bytes_received, request);\n```", "```cpp\n/*time_server.c continued*/\n\n    printf(\"Sending response...\\n\");\n    const char *response =\n        \"HTTP/1.1 200 OK\\r\\n\"\n        \"Connection: close\\r\\n\"\n        \"Content-Type: text/plain\\r\\n\\r\\n\"\n        \"Local time is: \";\n    int bytes_sent = send(socket_client, response, strlen(response), 0);\n    printf(\"Sent %d of %d bytes.\\n\", bytes_sent, (int)strlen(response));\n```", "```cpp\n/*time_server.c continued*/\n\n    time_t timer;\n    time(&timer);\n    char *time_msg = ctime(&timer);\n    bytes_sent = send(socket_client, time_msg, strlen(time_msg), 0);\n    printf(\"Sent %d of %d bytes.\\n\", bytes_sent, (int)strlen(time_msg));\n```", "```cpp\n/*time_server.c continued*/\n\n    printf(\"Closing connection...\\n\");\n    CLOSESOCKET(socket_client);\n```", "```cpp\n/*time_server.c continued*/\n\n    printf(\"Closing listening socket...\\n\");\n    CLOSESOCKET(socket_listen);\n\n#if defined(_WIN32)\n    WSACleanup();\n#endif\n\n    printf(\"Finished.\\n\");\n\n    return 0;\n}\n```", "```cpp\ngcc time_server.c -o time_server\n./time_server\n```", "```cpp\ngcc time_server.c -o time_server.exe -lws2_32\ntime_server\n```", "```cpp\n/*time_server_dual.c excerpt*/\n\n    int option = 0;\n    if (setsockopt(socket_listen, IPPROTO_IPV6, IPV6_V6ONLY, (void*)&option, sizeof(option))) {\n        fprintf(stderr, \"setsockopt() failed. (%d)\\n\", GETSOCKETERRNO());\n        return 1;\n    }\n```", "```cpp\n/*time_server_dual.c excerpt*/\n\n#if !defined(IPV6_V6ONLY)\n#define IPV6_V6ONLY 27\n#endif\n```"]