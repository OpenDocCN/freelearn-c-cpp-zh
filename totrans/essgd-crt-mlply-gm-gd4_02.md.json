["```cpp\n{\n  \"position\": {\n    \"x\": 2244,\n    \"y\": 1667\n  },\n  \"rotation\": 45,\n  \"scale\": {\n    \"x\": 2,\n    \"y\": 2\n  },\n  \"texture_path\": \"res://assets/objects/Bullet.png\"\n}\n```", "```cpp\n    extends Node\n    var user = \"\"\n    ```", "```cpp\n    var session_token = \"\"\n    ```", "```cpp\n        var message = {'authenticate_credentials':\n            {'user': user_line_edit.text, 'password':\n                password_line_edit.text}}\n    ```", "```cpp\n        var packet = PacketPeerUDP.new()\n    ```", "```cpp\n    packet.connect_to_host(ADDRESS, PORT)\n    ```", "```cpp\n        packet.put_var(JSON.stringify(message))\n    ```", "```cpp\n        while packet.wait() == OK:\n    ```", "```cpp\n            var response = JSON.parse_string\n                (packet.get_var())\n    ```", "```cpp\n            if \"token\" in response:\n                AuthenticationCredentials.session_token =\n                    response['token']\n    ```", "```cpp\n                AuthenticationCredentials.user = message\n                    ['authenticate_credentials']['user']\n    ```", "```cpp\n                error_label.text = \"logged!!\"\n    ```", "```cpp\n                get_tree().change_scene_to_file\n                    (\"res://AvatarScreen.tscn\")\n                break\n    ```", "```cpp\n            else:\n                error_label.text = \"login failed,\n                    check your credentials\"\n                break\n    ```", "```cpp\n    func send_credentials():\n        var message = {'authenticate_credentials':\n            {'user': user_line_edit.text, 'password':\n                password_line_edit.text}}\n        var packet = PacketPeerUDP.new()\n        packet.connect_to_host(ADDRESS, PORT)\n        packet.put_var(JSON.stringify(message))\n        while packet.wait() == OK:\n            var data = JSON.parse_string(packet.get_var())\n            if \"token\" in data:\n                error_label.text = \"logged!!\"\n                AuthenticationCredentials.user = message\n                    ['authenticate_credentials']['user']\n                AuthenticationCredentials.session_token =\n                    data['token']\n                get_tree().change_scene_to_file\n                    (\"res://AvatarScreen.tscn\")\n                break\n            else:\n                error_label.text = \"login failed,\n                    check your credentials\"\n                break\n    ```", "```cpp\n    var server = UDPServer.new()\n    ```", "```cpp\n    func _ready():\n        server.listen(PORT)\n    ```", "```cpp\n    func _process(delta):\n        server.poll()\n    ```", "```cpp\n    if server.is_connection_available():\n        var peer = server.take_connection()\n    ```", "```cpp\n    var message = JSON.parse_string(peer.get_var())\n    ```", "```cpp\n    if \"authenticate_credentials\" in message:\n        authenticate_player(peer, message)\n    ```", "```cpp\n    extends Node\n    const PORT = 9999\n    @export var database_file_path =\n        \"res://FakeDatabase.json\"\n    var database = {}\n    var logged_users = {}\n    var server = UDPServer.new()\n    func _ready():\n        server.listen(PORT)\n    func _process(delta):\n        server.poll()\n        if server.is_connection_available():\n            var peer = server.take_connection()\n            var message = JSON.parse_string\n                (peer.get_var())\n            if \"authenticate_credentials\" in message:\n                authenticate_player(peer, message)\n    ```", "```cpp\n{\n  \"user1\": {\n    \"password\":\"test\",\n    \"avatar\":\"res://Avatars/adventurer_idle.png\",\n    \"name\":\"Sakaki\"\n  },\n  \"user2\": {\n    \"password\":\"test\",\n    \"avatar\":\"res://Avatars/player_idle.png\",\n    \"name\":\"Keyaki\"\n  }\n}\n```", "```cpp\n    func load_database(path_to_database_file):\n        var file = FileAccess.open(path_to_database_file,\n            FileAccess.READ)\n    ```", "```cpp\n        var file_content = file.get_as_text()\n    ```", "```cpp\n        fake_database = JSON.parse_string(file_content)\n    ```", "```cpp\n    func load_database(path_to_database_file):\n        var file = FileAccess.open(database_file_path,\n            FileAccess.READ)\n        var file_content = file.get_as_text()\n        database = JSON.parse_string(file_content)\n    ```", "```cpp\n    func authenticate_player(peer, message):\n        var credentials = message\n            ['authenticate_credentials']\n    ```", "```cpp\n        if \"user\" in credentials and \"password\" in\n            credentials:\n    ```", "```cpp\n    var user = credentials[\"user\"]\n    var password = credentials[\"password\"]\n    ```", "```cpp\n    if user in fake_database.keys():\n    ```", "```cpp\n    if fake_database[user][\"password\"] == password:\n    ```", "```cpp\n    var token = randi()\n    logged_users[user] = token\n    ```", "```cpp\n    var response = {\"token\":token}\n    ```", "```cpp\n    peer.put_var(JSON.stringify(response))\n    ```", "```cpp\n    else:\n        peer.put_var(\"\")\n    ```", "```cpp\n    func authenticate_player(peer, message):\n        var credentials = message['authenticate_\n            credentials']\n        if \"user\" in credentials and \"password\" in\n            credentials:\n            var user = credentials[\"user\"]\n            var password = credentials[\"password\"]\n            if user in database.keys():\n                if database[user][\"password\"] == password:\n                    var token = randi()\n                    var response = {\"token\":token}\n                    logged_users[user] = token\n                    peer.put_var(JSON.stringify(response))\n                else:\n                    peer.put_var(\"\")\n    ```", "```cpp\n    func get_authentication_token(peer, message):\n        var credentials = message\n    ```", "```cpp\n        if \"user\" in credentials:\n    ```", "```cpp\n        if credentials['token'] == logged_users\n            [credentials['user']]:\n    ```", "```cpp\n        var token = logged_users[credentials['user']]\n        peer.put_var(JSON.stringify(token))\n    ```", "```cpp\n    func get_authentication_token(peer, message):\n        var credentials = message\n        if \"user\" in credentials:\n            if credentials['token'] == logged_users\n                [credentials['user']]:\n                Var token = logged_users[credentials\n                    ['user']]\n                peer.put_var(JSON.stringify(token))\n    ```", "```cpp\nfunc _process(delta):\n    server.poll()\n    if server.is_connection_available():\n        var peer = server.take_connection()\n        var message = JSON.parse_string(peer.get_var())\n        if \"authenticate_credentials\" in message:\n            authenticate_player(peer, message)\n        elif \"get_authentication_token\" in message:\n            get_authentication_token(peer, message)\n```", "```cpp\n    func get_avatar(peer, message):\n        var dictionary = message\n    ```", "```cpp\n        if \"user\" in dictionary:\n    ```", "```cpp\n            var user = dictionary['user']\n    ```", "```cpp\n            if dictionary['token'] == logged_users[user]:\n    ```", "```cpp\n                var avatar = fake_database[dictionary\n                    ['user']]['avatar']\n    ```", "```cpp\n                var nick_name = fake_database[dictionary\n                    ['user']]['name']\n    ```", "```cpp\n                var response = {\"avatar\": avatar, \"name\":\n                    nick_name}\n    ```", "```cpp\n                peer.put_var(JSON.stringify(response))\n    ```", "```cpp\n    func get_avatar(peer, message):\n        var dictionary = message\n        if \"user\" in dictionary:\n            var user = dictionary['user']\n            if dictionary['token'] == logged_users[user]:\n                var avatar = database[dictionary\n                    ['user']]['avatar']\n                var nick_name = database[dictionary\n                    ['user']]['name']\n                var response = {\"avatar\": avatar, \"name\":\n                    nick_name}\n                peer.put_var(JSON.stringify(response))\n    ```", "```cpp\n    func request_authentication(packet):\n        var request = {'get_authentication_token': true,\n            \"user\": AuthenticationCredentials.user, \"token\n               \": AuthenticationCredentials.session_token}\n    ```", "```cpp\n        packet.put_var(JSON.stringify(request))\n    ```", "```cpp\n        while packet.wait() == OK:\n            var data = JSON.parse_string(packet.get_var())\n    ```", "```cpp\n            if data == AuthenticationCredentials.\n                session_token:\n                request_avatar(packet)\n                break\n    ```", "```cpp\n    func request_authentication(packet):\n        var request = {'get_authentication_token': true,\n            \"user\": AuthenticationCredentials.user,\n                 \"token\": AuthenticationCredentials.\n                      session_token}\n        packet.put_var(JSON.stringify(request))\n        while packet.wait() == OK:\n            var data = JSON.parse_string(packet.get_var())\n            if data == AuthenticationCredentials.\n                session_token:\n                request_avatar(packet)\n                break\n    ```", "```cpp\n    func request_avatar(packet):\n        var request = {'get_avatar': true, 'token':\n            AuthenticationCredentials.session_token,\n                \"user\": AuthenticationCredentials.user}\n    ```", "```cpp\n        packet.put_var(JSON.stringify(request))\n    ```", "```cpp\n        while packet.wait() == OK:\n            var data = JSON.parse_string(packet.get_var())\n    ```", "```cpp\n            if \"avatar\" in data:\n                var texture = load(data['avatar'])\n                texture_rect.texture = texture\n                label.text = data['name']\n                break\n    ```", "```cpp\n    func request_avatar(packet):\n        var request = {'get_avatar': true, 'token':\n            AuthenticationCredentials.session_token,\n                \"user\": AuthenticationCredentials.user}\n        packet.put_var(JSON.stringify(request))\n        while packet.wait() == OK:\n            var data = JSON.parse_string(packet.get_var())\n            if \"avatar\" in data:\n                var texture = load(data['avatar'])\n                texture_rect.texture = texture\n                label.text = data['name']\n                break\n    ```", "```cpp\n    func _process(delta):\n        server.poll()\n        if server.is_connection_available():\n            var peer = server.take_connection()\n            var message = JSON.parse_string\n                (peer.get_var())\n            if \"authenticate_credentials\" in message:\n                authenticate_player(peer, message)\n            elif \"get_authentication_token\" in message:\n                get_authentication_token(peer, message)\n            elif \"get_avatar\" in message:\n                get_avatar(peer, message)\n    ```"]