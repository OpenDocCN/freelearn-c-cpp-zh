["```cpp\n#include <stdio.h>\nint main(int argc, char** argv) {\n#if __STDC_VERSION__ >=  201710L\n  printf(\"Hello World from C18!\\n\");\n#elif __STDC_VERSION__ >= 201112L\n  printf(\"Hello World from C11!\\n\");\n#elif __STDC_VERSION__ >= 199901L\n  printf(\"Hello World from C99!\\n\");\n#else\n  printf(\"Hello World from C89/C90!\\n\");\n#endif\n  return 0;\n}\n```", "```cpp\n$ gcc ExtremeC_examples_chapter12_1.c -o ex12_1.out\n$ ./ex12_1.out\nHello World from C11!\n$ gcc ExtremeC_examples_chapter12_1.c -o ex12_1.out -std=c11\n$ ./ex12_1.out\nHello World from C11!\n$ gcc ExtremeC_examples_chapter12_1.c -o ex12_1.out -std=c99\n$ ./ex12_1.out\nHello World from C99!\n$ gcc ExtremeC_examples_chapter12_1.c -o ex12_1.out -std=c90\n$ ./ex12_1.out\nHello World from C89/C90!\n$ gcc ExtremeC_examples_chapter12_1.c -o ex12_1.out -std=c89\n$ ./ex12_1.out\nHello World from C89/C90!\n$\n```", "```cpp\nFILE* fopen(const char *pathname, const char *mode);\nFILE* fdopen(int fd, const char *mode);\nFILE* freopen(const char *pathname, const char *mode, FILE *stream);\n```", "```cpp\n$ man 3 fopen\n...\nThe argument mode points to a string beginning with one of the following letters:\n     \"r\"     Open for reading.  The stream is positioned at the beginning\n             of the file.  Fail if the file does not exist.\n     \"w\"     Open for writing.  The stream is positioned at the beginning\n             of the file.  Create the file if it does not exist.\n     \"a\"     Open for writing.  The stream is positioned at the end of\n             the file. Subsequent writes to the file will always end up\n             at the then current end of file, irrespective of \n             any intervening fseek(3) or similar. Create the file \n             if it does not exist.\n     An optional \"+\" following \"r\", \"w\", or \"a\" opens the file\n     for both reading and writing.  An optional \"x\" following \"w\" or\n     \"w+\" causes the fopen() call to fail if the file already exists.\n     An optional \"e\" following the above causes the fopen() call to set\n     the FD_CLOEXEC flag on the underlying file descriptor.\n     The mode string can also include the letter \"b\" after either \n     the \"+\" or the first letter.\n...\n$\n```", "```cpp\nerrno_t strcpy_s(char *restrict dest, rsize_t destsz, const char *restrict src);\n```", "```cpp\nvoid main_loop() {\n  while (1) {\n    ...\n  }\n}\n\nint main(int argc, char** argv) {\n  ...\n  main_loop();\n  return 0;\n}\n```", "```cpp\n_Noreturn void main_loop() {\n  while (true) {\n    ...\n  }\n}\n```", "```cpp\n#include <stdio.h>\n#define abs(x) _Generic((x), \\\n                        int: absi, \\\n                        double: absd)(x)\nint absi(int a) {\n  return a > 0 ? a : -a;\n}\ndouble absd(double a) {\n  return a > 0 ? a : -a;\n}\nint main(int argc, char** argv) {\n  printf(\"abs(-2): %d\\n\", abs(-2));\n  printf(\"abs(2.5): %f\\n\", abs(2.5));;\n  return 0;\n}\n```", "```cpp\n#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n#ifdef __APPLE__\n#include <stdint.h>\ntypedef uint16_t char16_t;\ntypedef uint32_t char32_t;\n#else\n#include <uchar.h> // Needed for char16_t and char32_t\n#endif\n```", "```cpp\ntypedef struct {\n  long num_chars;\n  long num_bytes;\n} unicode_len_t;\nunicode_len_t strlen_ascii(char* str) {\n  unicode_len_t res;\n  res.num_chars = 0;\n  res.num_bytes = 0;\n  if (!str) {\n    return res;\n  }\n  res.num_chars = strlen(str) + 1;\n  res.num_bytes = strlen(str) + 1;\n  return res;\n}\nunicode_len_t strlen_u8(char* str) {\n  unicode_len_t res;\n  res.num_chars = 0;\n  res.num_bytes = 0;\n  if (!str) {\n    return res;\n  }\n  // Last null character\n  res.num_chars = 1;\n  res.num_bytes = 1;\n  while (*str) {\n    if ((*str | 0x7f) == 0x7f) { // 0x7f = 0b01111111\n      res.num_chars++;\n      res.num_bytes++;\n      str++;\n    } else if ((*str & 0xc0) == 0xc0) { // 0xc0 = 0b11000000\n      res.num_chars++;\n      res.num_bytes += 2;\n      str += 2;\n    } else if ((*str & 0xe0) == 0xe0) { // 0xe0 = 0b11100000\n      res.num_chars++;\n      res.num_bytes += 3;\n      str += 3;\n    } else if ((*str & 0xf0) == 0xf0) { // 0xf0 = 0b11110000\n      res.num_chars++;\n      res.num_bytes += 4;\n      str += 4;\n    } else {\n      fprintf(stderr, \"UTF-8 string is not valid!\\n\");\n      exit(1);\n    }\n  }\n  return res;\n}\nunicode_len_t strlen_u16(char16_t* str) {\n  unicode_len_t res;\n  res.num_chars = 0;\n  res.num_bytes = 0;\n  if (!str) {\n    return res;\n  }\n  // Last null character\n  res.num_chars = 1;\n  res.num_bytes = 2;\n  while (*str) {\n    if (*str < 0xdc00 || *str > 0xdfff) {\n      res.num_chars++;\n      res.num_bytes += 2;\n      str++;\n    } else {\n      res.num_chars++;\n      res.num_bytes += 4;\n      str += 2;\n    }\n  }\n  return res;\n}\nunicode_len_t strlen_u32(char32_t* str) {\n  unicode_len_t res;\n  res.num_chars = 0;\n  res.num_bytes = 0;\n  if (!str) {\n    return res;\n  }\n  // Last null character\n  res.num_chars = 1;\n  res.num_bytes = 4;\n  while (*str) {\n      res.num_chars++;\n      res.num_bytes += 4;\n      str++;\n  }\n  return res;\n}\n```", "```cpp\nint main(int argc, char** argv) {\n  char ascii_string[32] = \"Hello World!\";\n  char utf8_string[32] = u8\"Hello World!\";\n  char utf8_string_2[32] = u8\"درود دنیا!\";\n  char16_t utf16_string[32] = u\"Hello World!\";\n  char16_t utf16_string_2[32] = u\"درود دنیا!\";\n  char16_t utf16_string_3[32] = u\"হহহ!\";\n  char32_t utf32_string[32] = U\"Hello World!\";\n  char32_t utf32_string_2[32] = U\"درود دنیا!\";\n  char32_t utf32_string_3[32] = U\"হহহ!\";\n  unicode_len_t len = strlen_ascii(ascii_string);\n  printf(\"Length of ASCII string:\\t\\t\\t %ld chars, %ld bytes\\n\\n\",\n      len.num_chars, len.num_bytes);\n  len = strlen_u8(utf8_string);\n  printf(\"Length of UTF-8 English string:\\t\\t %ld chars, %ld bytes\\n\",\n      len.num_chars, len.num_bytes);\n  len = strlen_u16(utf16_string);\n  printf(\"Length of UTF-16 english string:\\t %ld chars, %ld bytes\\n\",\n      len.num_chars, len.num_bytes);\n  len = strlen_u32(utf32_string);\n  printf(\"Length of UTF-32 english string:\\t %ld chars, %ld bytes\\n\\n\",\n      len.num_chars, len.num_bytes);\n  len = strlen_u8(utf8_string_2);\n  printf(\"Length of UTF-8 Persian string:\\t\\t %ld chars, %ld bytes\\n\",\n      len.num_chars, len.num_bytes);\n  len = strlen_u16(utf16_string_2);\n  printf(\"Length of UTF-16 persian string:\\t %ld chars, %ld bytes\\n\",\n      len.num_chars, len.num_bytes);\n  len = strlen_u32(utf32_string_2);\n  printf(\"Length of UTF-32 persian string:\\t %ld chars, %ld bytes\\n\\n\",\n      len.num_chars, len.num_bytes);\n  len = strlen_u16(utf16_string_3);\n  printf(\"Length of UTF-16 alien string:\\t\\t %ld chars, %ld bytes\\n\",\n      len.num_chars, len.num_bytes);\n  len = strlen_u32(utf32_string_3);\n  printf(\"Length of UTF-32 alien string:\\t\\t %ld chars, %ld bytes\\n\",\n      len.num_chars, len.num_bytes);\n  return 0;\n}\n```", "```cpp\n$ gcc ExtremeC_examples_chapter12_3.c -std=c11 -o ex12_3.out\n$ ./ex12_3.out\nLength of ASCII string:            13 chars, 13 bytes\nLength of UTF-8 english string:      13 chars, 13 bytes\nLength of UTF-16 english string:     13 chars, 26 bytes\nLength of UTF-32 english string:     13 chars, 52 bytes\nLength of UTF-8 persian string:      11 chars, 19 bytes\nLength of UTF-16 persian string:     11 chars, 22 bytes\nLength of UTF-32 persian string:     11 chars, 44 bytes\nLength of UTF-16 alien string:       5 chars, 14 bytes\nLength of UTF-32 alien string:       5 chars, 20 bytes\n$\n```", "```cpp\ntypedef struct {\n  union {\n    struct {\n      int x;\n      int y;\n    };\n    int data[2];\n  };\n} point_t;\n```", "```cpp\n#include <stdio.h>\ntypedef struct {\n  union {\n    struct {\n      int x;\n      int y;\n    };\n    int data[2];\n  };\n} point_t;\nint main(int argc, char** argv) {\n  point_t p;\n  p.x = 10;\n  p.data[1] = -5;\n  printf(\"Point (%d, %d) using an anonymous structure inside an anonymous union.\\n\", p.x, p.y);\n  printf(\"Point (%d, %d) using byte array inside an anonymous union.\\n\",\n      p.data[0], p.data[1]);\n  return 0;\n}\n```", "```cpp\n$ gcc ExtremeC_examples_chapter12_4.c -std=c11 -o ex12_4.out\n$ ./ex12_4.out\nPoint (10, -5) using anonymous structure.\nPoint (10, -5) using anonymous byte array.\n$\n```"]