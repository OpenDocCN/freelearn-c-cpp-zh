["```cpp\n#include \"../JuceLibraryCode/JuceHeader.h\"\n\nclass MainContentComponent  : public Component\n{\npublic:\n  //==============================================================\n  MainContentComponent();\n  ~MainContentComponent();\n\n  void paint (Graphics&);\n  void resized();\n\n  private:\n  //==============================================================\n  JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR\n    (MainContentComponent)\n};\n```", "```cpp\nclass MainContentComponent : public Component\n{\npublic:\n  MainContentComponent()\n  {\n    setSize (200, 100);\n  }\n};\n```", "```cpp\nclass MainContentComponent : public Component\n{\npublic:\n  MainContentComponent()\n  : button1 (\"Click\") // Step [2]\n  {\n    addAndMakeVisible (&button); // Step [3] and [4]\n    setSize (200, 100);\n  }\n\n  void resized()\n  {\n    // Step [5]\n    button1.setBounds (10, 10, getWidth()-20, getHeight()-20);\n  }\n\nprivate:\n  TextButton button1; // Step [1]\n};\n```", "```cpp\n...\n{\n  setContentOwned (new MainContentComponent(), true);\n\n  centreWithSize (getWidth(), getHeight());\n  setVisible (true);\n  setResizable (true, true);\n}\n...\n```", "```cpp\nclass MainContentComponent : public Component\n{\npublic:\n  MainContentComponent()\n  : button1 (\"Click\"),\n label1 (\"label1\", \"Info\")\n  {\n slider1.setRange (0.0, 100.0);\n    addAndMakeVisible (&button1);\n addAndMakeVisible (&slider1);\n addAndMakeVisible (&label1);\n    setSize (200, 100);\n  }\n\n  void resized()\n  {\n button1.setBoundsRelative (0.05, 0.05, 0.90, 0.25);\n slider1.setBoundsRelative (0.05, 0.35, 0.90, 0.25);\n label1.setBoundsRelative (0.05, 0.65, 0.90, 0.25);\n  }\n\nprivate:\n  TextButton button1;\n Slider slider1;\n Label label1;\n};\n```", "```cpp\n#ifndef __MAINCOMPONENT_H__\n#define __MAINCOMPONENT_H__\n\n#include \"../JuceLibraryCode/JuceHeader.h\"\n\nclass MainContentComponent : public Component\n{\npublic:\n  MainContentComponent();\n  void resized();\n\nprivate:\n  TextButton button1;\n  Slider slider1;\n  Label label1;\n};\n#endif \n```", "```cpp\n#include \"MainComponent.h\"\n\nMainContentComponent::MainContentComponent()\n: button1 (\"Click\")\n{\n  slider1.setRange (0.0, 100.0);\n  addAndMakeVisible (&button1);\n  addAndMakeVisible (&slider1);\n  addAndMakeVisible (&label1);\n  setSize (200, 100);\n}\n\nvoid MainContentComponent::resized()\n{\n  button1.setBoundsRelative (0.05, 0.05, 0.90, 0.25);\n  slider1.setBoundsRelative (0.05, 0.35, 0.90, 0.25);\n  label1.setBoundsRelative (0.05, 0.65, 0.90, 0.25);\n}\n```", "```cpp\nclass MainContentComponent :  public Component,\n public Button::Listener,\n public Slider::Listener\n{\n...\n```", "```cpp\n  ...\n void buttonClicked (Button* button);\n void sliderValueChanged (Slider* slider);\n  ...\n\n```", "```cpp\n#include \"MainComponent.h\"\n\nMainContentComponent::MainContentComponent()\n: button1 (\"Zero Slider\"),\n slider1 (Slider::LinearHorizontal, Slider::NoTextBox)\n{\n  slider1.setRange (0.0, 100.0);\n\n slider1.addListener (this);\n button1.addListener (this);\n slider1.setValue (100.0, sendNotification);\n\n  addAndMakeVisible (&button1);\n  addAndMakeVisible (&slider1);\n  addAndMakeVisible (&label1);\n\n  setSize (200, 100);\n}\n\nvoid MainContentComponent::resized()\n{\n  button1.setBoundsRelative (0.05, 0.05, 0.90, 0.25);\n  slider1.setBoundsRelative (0.05, 0.35, 0.90, 0.25);\n  label1.setBoundsRelative (0.05, 0.65, 0.90, 0.25);\n}\n\nvoid MainContentComponent::buttonClicked (Button* button)\n{\n if (&button1 == button)\n slider1.setValue (0.0, sendNotification);\n}\nvoid MainContentComponent::sliderValueChanged(Slider* slider)\n{\n if (&slider1 == slider) {\n label1.setText (String (slider1.getValue()), \n sendNotification);\n }\n}\n\n```", "```cpp\nif \n(button == &button1)\n...\n```", "```cpp\nclass MainContentComponent :  public Component,\n                              public Button::Listener,\n                              public Slider::Listener,\n public Label::Listener\n{\n...\n```", "```cpp\n... \n void labelTextChanged (Label* label);\n...\n```", "```cpp\nMainContentComponent::MainContentComponent()\n: button1 (\"Zero Slider\"),\n  slider1 (Slider::LinearHorizontal, Slider::NoTextBox)\n{\n  slider1.setRange (0.0, 100.0);\n label1.setEditable (true);\n\n  slider1.addListener (this);\n  button1.addListener (this);\n label1.addListener (this);\n\n  slider1.setValue (100.0, sendNotification);\n\n  addAndMakeVisible (&button1);\n  addAndMakeVisible (&slider1);\n  addAndMakeVisible (&label1);\n\n  setSize (200, 100);\n}\n```", "```cpp\nvoid MainContentComponent::labelTextChanged (Label* label)\n{\n if (&label1 == label) {\n slider1.setValue (label1.getText().getDoubleValue(), \n sendNotification);\n }\n}\n\n```", "```cpp\n  if (&label1 == label)\n  {\n    slider1.setValue (label1.getText().getDoubleValue(),\n                      sendNotification);\n    label1.setText (String (slider1.getValue()), \n dontSendNotification);\n  }\n```", "```cpp\nclass NumericalLabel : public Label\n{\npublic:\n  void editorShown (TextEditor* editor)\n  {\n    editor->setInputRestrictions (0, \"-0123456789.\");\n  }\n};\n```", "```cpp\n...\nprivate:\n  TextButton button1;\n  Slider slider1;\n NumericalLabel label1;\n...\n```", "```cpp\n    #ifndef __MAINCOMPONENT_H__\n    #define __MAINCOMPONENT_H__\n\n    #include \"../JuceLibraryCode/JuceHeader.h\"\n\n    class MainContentComponent :  public Component,\n                                  public Button::Listener\n    {\n    public:\n      MainContentComponent();\n      void resized();\n\n      void buttonClicked (Button* button);\n\n    private:\n      Slider slider1;\n      Slider slider2;\n      ToggleButton toggle1;\n    };\n    #endif\n    ```", "```cpp\n    #include \"MainComponent.h\"\n\n    MainContentComponent::MainContentComponent()\n    : slider1 (Slider::LinearHorizontal, Slider::TextBoxLeft),\n      slider2 (Slider::LinearHorizontal, Slider::TextBoxLeft),\n      toggle1 (\"Slider style: Linear Bar\")\n    {\n      slider1.setColour (Slider::thumbColourId, Colours::red);\n      toggle1.addListener (this);\n\n      addAndMakeVisible (&slider1);\n      addAndMakeVisible (&slider2);\n      addAndMakeVisible (&toggle1);\n\n      setSize (400, 200);\n    }\n\n    void MainContentComponent::resized()\n    {\n      slider1.setBounds (10, 10, getWidth() - 20, 20);\n      slider2.setBounds (10, 40, getWidth() - 20, 20);\n      toggle1.setBounds (10, 70, getWidth() - 20, 20);\n    }\n\n    void MainContentComponent::buttonClicked (Button* button)\n    {\n      if (&toggle1 == button)\n      {\n        if (toggle1.getToggleState()) {\n          slider1.setSliderStyle (Slider::LinearBar);\n          slider2.setSliderStyle (Slider::LinearBar);\n        } else {\n          slider1.setSliderStyle (Slider::LinearHorizontal);\n          slider2.setSliderStyle (Slider::LinearHorizontal);\n        }\n      }\n    }\n    ```", "```cpp\nColour red1 = Colours::red;        // using Colours\nColour red2 = Colour (0xffff0000); // using hexadecimal ARGB\nColour red3 = Colour (255, 0, 0);  // using 8-bit RGB values\nColour red4 = Colour::fromFloatRGBA (1.f, 0.f, 0.f, 1.f); // float\nColour red5 = Colour::fromHSV (0.f, 1.f, 1.f, 1.f);       // HSV\n```", "```cpp\nvoid setColour (int colourId, Colour newColour);\n```", "```cpp\nMainContentComponent::MainContentComponent()\n: slider1 (Slider::LinearHorizontal, Slider::TextBoxLeft),\n  slider2 (Slider::LinearHorizontal, Slider::TextBoxLeft),\n  toggle1 (\"Slider style: Linear Bar\")\n{\n  slider1.setColour (Slider::thumbColourId, Colours::red);\n  slider2.setColour (Slider::thumbColourId, Colours::red);\n  toggle1.addListener (this);\n\n  addAndMakeVisible (&slider1);\n  addAndMakeVisible (&slider2);\n  addAndMakeVisible (&toggle1);\n\n  setSize (400, 200);\n}\n```", "```cpp\n  slider1.setColour (Slider::thumbColourId, Colours::red);\n  slider2.setColour (Slider::thumbColourId, Colours::red);\n```", "```cpp\nvoid initialise (const String& commandLine)\n{\n  LookAndFeel& lnf = LookAndFeel::getDefaultLookAndFeel();\nlnf.setColour (Slider::thumbColourId, Colours::red);\n  mainWindow = new MainWindow();\n}\n```", "```cpp\n#ifndef __MAINCOMPONENT_H__\n#define __MAINCOMPONENT_H__\n\n#include \"../JuceLibraryCode/JuceHeader.h\"\n\nclass MainContentComponent :  public Component,\n                              public Button::Listener\n{\npublic:\n  MainContentComponent();\n  void resized();\n\n  void buttonClicked (Button* button);\n\n class AltLookAndFeel : public LookAndFeel\n {\n public:\n AltLookAndFeel()\n {\n setColour (Slider::thumbColourId, Colours::red);\n }\n };\nprivate:\n  Slider slider1;\n  Slider slider2;\n  ToggleButton toggle1;\n  AltLookAndFeel altLookAndFeel;\n};\n#endif\n```", "```cpp\nMainContentComponent::MainContentComponent()\n: slider1 (Slider::LinearHorizontal, Slider::TextBoxLeft),\n  slider2 (Slider::LinearHorizontal, Slider::TextBoxLeft),\n  toggle1 (\"Slider style: Linear Bar\")\n{\n  setLookAndFeel (&altLookAndFeel);\n  toggle1.addListener (this);\n\n  addAndMakeVisible (&slider1);\n  addAndMakeVisible (&slider2);\n  addAndMakeVisible (&toggle1);\n\n  setSize (400, 200);\n}\n```", "```cpp\n#ifndef __MAINCOMPONENT_H__\n#define __MAINCOMPONENT_H__\n\n#include \"../JuceLibraryCode/JuceHeader.h\"\n\nclass MainContentComponent :  public Component\n{\npublic:\n  MainContentComponent();\n  void paint (Graphics& g);\n};\n#endif\n```", "```cpp\n#include \"MainComponent.h\"\n\nMainContentComponent::MainContentComponent()\n{\n  setSize (200, 200);\n}\n\nvoid MainContentComponent::paint (Graphics& g)\n{\n  g.fillAll (Colours::cornflowerblue);\n}\n```", "```cpp\nvoid MainContentComponent::paint (Graphics& g)\n{\n  Random& r (Random::getSystemRandom());\n  g.fillAll (Colours::cornflowerblue);\n\n  for (int i = 0; i < 20; ++i) {\n    g.setColour (Colour (r.nextFloat(),\n                         r.nextFloat(),\n                         r.nextFloat(),\n                         r.nextFloat()));\n\n    const int width = r.nextInt (getWidth() / 4);\n    const int height = r.nextInt (getHeight() / 4);\n    const int left = r.nextInt (getWidth() - width);\n    const int top = r.nextInt (getHeight() - height);\n\n    g.fillRect (left, top, width, height);\n  }\n}\n```", "```cpp\nvoid MainContentComponent::paint (Graphics& g)\n{\n  Random& r (Random::getSystemRandom());\n  g.fillAll (Colours::cornflowerblue);\n\n const float lineThickness = r.nextFloat() * 5.f + 1.f;\n  for (int i = 0; i < 20; ++i) {\n    g.setColour (Colour (r.nextFloat(),\n                         r.nextFloat(),\n                         r.nextFloat(),\n                         r.nextFloat()));\n\n const float startX = r.nextFloat() * getWidth();\n const float startY = r.nextFloat() * getHeight();\n const float endX = r.nextFloat() * getWidth();\n const float endY = r.nextFloat() * getHeight();\n **g.drawLine (startX, startY,**\n **endX, endY,**\n **lineThickness);**\n  }\n}\n```", "```cpp\nvoid MainContentComponent::paint (Graphics& g)\n{\n  Random& r (Random::getSystemRandom());\n  g.fillAll (Colours::cornflowerblue);\n\n  const float lineThickness = r.nextFloat() * 5.f + 1.f;\n\n **float x1 = r.nextFloat() * getWidth();**\n **float y1 = r.nextFloat() * getHeight();**\n  for (int i = 0; i < 20; ++i) {\n    g.setColour (Colour (r.nextFloat(),\n                         r.nextFloat(),\n                         r.nextFloat(),\n                         r.nextFloat()));\n\n **const float x2 = r.nextFloat() * getWidth();**\n **const float y2 = r.nextFloat() * getHeight();**\n **g.drawLine (x1, y1, x2, y2, lineThickness);**\n **x1 = x2;**\n **y1 = y2;**\n  }\n}\n```", "```cpp\nvoid MainContentComponent::paint (Graphics& g)\n{\n  Random& r (Random::getSystemRandom());\n  g.fillAll (Colours::cornflowerblue);\n\n **Path path;**\n **path.startNewSubPath (r.nextFloat() * getWidth(),**\n **r.nextFloat() * getHeight());**\n  for (int i = 0; i < 20; ++i) {\n **path.lineTo (r.nextFloat() * getWidth(),**\n **r.nextFloat() * getHeight());**\n  }\n\n  **g.setColour (Colour (r.nextFloat(),**\n **r.nextFloat(),**\n **r.nextFloat(),**\n **r.nextFloat()));**\n ****const float lineThickness = r.nextFloat() * 5.f + 1.f;**\n **g.strokePath (path, PathStrokeType (lineThickness));**\n}**\n```", "```cpp\n**#ifndef __MAINCOMPONENT_H__\n#define __MAINCOMPONENT_H__\n\n#include \"../JuceLibraryCode/JuceHeader.h\"\n\nclass MainContentComponent : public Component\n{\npublic:\n  MainContentComponent();\n  void paint (Graphics& g);\n\n  void mouseEnter (const MouseEvent& event);\n  void mouseMove (const MouseEvent& event);\n  void mouseDown (const MouseEvent& event);\n  void mouseDrag (const MouseEvent& event);\n  void mouseUp (const MouseEvent& event);\n  void mouseExit (const MouseEvent& event);\n\n  void handleMouse (const MouseEvent& event);\n\nprivate:\n  String text;\n  int x, y;\n};\n#endif**\n```", "```cpp\n**#include \"MainComponent.h\"\n\nMainContentComponent::MainContentComponent()\n: x (0), y (0)\n{\n  setSize (200, 200);\n}\n\nvoid MainContentComponent::paint (Graphics& g)\n{  \n  g.fillAll (Colours::cornflowerblue);\n  g.setColour (Colours::yellowgreen);\n  g.setFont (Font (24));\n  g.drawText (text, 0, 0, getWidth(), getHeight(),\n              Justification::centred, false);\n  g.setColour (Colours::yellow);\n  const float radius = 10.f;\n  g.fillEllipse (x - radius, y - radius,\n                 radius * 2.f, radius * 2.f);\n}**\n```", "```cpp\n**void MainContentComponent::mouseEnter (const MouseEvent& event)\n{\n  text = \"mouse enter\";\n  handleMouse (event);\n}\n\nvoid MainContentComponent::mouseMove (const MouseEvent& event)\n{\n  text = \"mouse move\";\n  handleMouse (event);\n}\n\nvoid MainContentComponent::mouseDown (const MouseEvent& event)\n{\n  text = \"mouse down\";\n  handleMouse (event);\n}\n\nvoid MainContentComponent::mouseDrag (const MouseEvent& event)\n{\n  text = \"mouse drag\";\n  handleMouse (event);\n}\n\nvoid MainContentComponent::mouseUp (const MouseEvent& event)\n{\n  text = \"mouse up\";\n  handleMouse (event);\n}\n\nvoid MainContentComponent::mouseExit (const MouseEvent& event)\n{\n  text = \"mouse exit\";\n  handleMouse (event);\n}\n\nvoid MainContentComponent::handleMouse (const MouseEvent& event)\n{\n  x = event.x;\n  y = event.y;\n  repaint();\n}**\n```", "```cpp\n#ifndef __MAINCOMPONENT_H__\n#define __MAINCOMPONENT_H__\n\n#include \"../JuceLibraryCode/JuceHeader.h\"\n#include \"CustomComponent.h\"\n\nclass MainContentComponent   : public Component\n{\npublic:\n  MainContentComponent();\n\nprivate:\n  CustomComponent custom;\n};\n#endif\n```", "```cpp\n#include \"MainComponent.h\"\n\nMainContentComponent::MainContentComponent()\n{\n  addAndMakeVisible (&custom);\n  setSize (custom.getWidth(), custom.getHeight());\n}\n```", "```cpp\n... \n    //[UserPreSize]\n    //[/UserPreSize]\n\n    setSize (600, 400);\n\n    //[Constructor] You can add your own custom stuff here..\n    //[/Constructor]\n}\n```"]