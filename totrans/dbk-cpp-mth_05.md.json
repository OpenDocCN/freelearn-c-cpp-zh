["```cpp\nstruct a_class {\n   void reboot() {\n      this->~a_class();\n      new (reinterpret_cast<void*>(this)) a_class();\n    }\n};\n```", "```cpp\nstruct point {\n   bool active;\n   double x;\n   double y;\n   double z;\n};\n```", "```cpp\nclass point {\n   bool active;\n   double x;\n   bool x_changed;\n   double y;\n   bool y_changed;\n   double z;\n   bool z_changed;\n};\n```", "```cpp\n> $ clang -cc1 -fdump-record-layouts main.cpp\n*** Dumping AST Record Layout\n         0 | struct Point\n         0 |   _Bool active\n         8 |   double x\n        16 |   _Bool x_changed\n        24 |   double y\n        32 |   _Bool y_changed\n        40 |   double z\n        48 |   _Bool z_changed\n           | [sizeof=56, dsize=56, align=8,\n           |  nvsize=56, nvalign=8]\n```", "```cpp\nclass point {\n   bool active;\n   bool x_changed;\n   bool y_changed;\n   bool z_changed;\n   double y;\n   double x;\n   double z;\n};\n```", "```cpp\n> $ clang -cc1 -fdump-record-layouts main.cpp\n*** Dumping AST Record Layout\n         0 | struct Point\n         0 |   _Bool active\n         1 |   _Bool x_changed\n         2 |   _Bool y_changed\n         3 |   _Bool z_changed\n         8 |   double x\n        16 |   double y\n        24 |   double z\n           | [sizeof=32, dsize=32, align=8,\n           |  nvsize=32, nvalign=8]\n```", "```cpp\n#include <cstdlib>\nint main(int argc, char **argv) {\n    char *cptr = (char*)malloc(sizeof(int) + 1);\n    int* iptr = (int *) ++cptr;\n    *iptr = 42;\n    return 0;\n}\n```", "```cpp\n/* Historical signals specified by POSIX. */\n#define SIGBUS        7    /* Bus error.  */\n```", "```cpp\n#include <string>\n#include <format>\n#include <iostream>\n#include <string_view>\nstruct life_point_tracker {\n  life_point_tracker(std::string_view player, int points) {\n       m_player = player;\n       m_points = points;\n       m_result = std::format(\"{} has {} LPs\",\n                              m_player, m_points);\n   }\n   std::string get_data() const {\n       return m_result;\n   }\nprivate:\n   std::string m_result {\"\"};\n   std::string m_player {\"\"};\n   int m_points         {0};\n };\nint main() {\n   life_point_tracker lpt(\"Joe\", 120);\n   std::cout << lpt.get_data();\n}\n```", "```cpp\nconst std::string m_result {\"\"};\nconst std::string m_player {\"\"};\nconst int m_points         {0};\n```", "```cpp\nlife_point_tracker(std::string_view player, int points)\n: m_player(player), m_points(points),\n  m_result(std::format(\"{} has {} LPs\", m_player, m_points)) {}\n```", "```cpp\nlife_point_tracker(std::string_view player, int points)\ntry :\n    m_result(std::format(\"{} has {} LPs\", player, points)),\n    m_player(player),\n    m_points(points)\n{\n}\ncatch(...) {throw;}\n```", "```cpp\nstruct life_point_tracker {\n   std::string get_data() const {\n       return m_result;\n   }\n   std::string m_player {\"Nameless\"};\n   int m_points {0};\n   const std::string m_result\n       {std::format(\"{} has {} LPs\", m_player, m_points)};\n};\n```", "```cpp\nint main(int argc, char **argv) {\n   life_point_tracker lpt {\n       .m_player = \"Joe\",\n       .m_points = 120\n   };\n   std::cout << lpt.get_data();\n}\n```", "```cpp\n#include <cstdio>\n#include <thread>\n#include <chrono>\nusing namespace std::chrono_literals;\nstruct bar {\n  bar() : i(new long long) {\n    *i = 0;  printf(\"bar::bar()\\n\");}\n  ~bar() {printf(\"bar::~bar()\\n\"); delete i;  i = nullptr;}\n  void serve() {\n   while(true) {\n     (*i)++;\n     if(*i % 1024768 == 0) {\n       std::this_thread::sleep_for(200ms);\n       (*i) = 0;\n       printf(\".\"); fflush(stdout);\n     }\n     if(stopRequest) break;\n   }\n}\nlong long* i = nullptr;\nbool stopRequest = false;\n};\nstruct foo {\n  foo() : thread(&foo::threadFunc, this) {\n    printf(\"foo::foo()\\n\");\n  }\n  ~foo() {\n      printf(\"foo::~foo()\\n\"); b.stopRequest = true;\n  }\n  void threadFunc() {\n    b.serve();\n  }\n  std::jthread thread;\n  bar b;\n};\nint main() {\n  foo f;\n  std::this_thread::sleep_for(2000ms);\n  printf(\"main returns\\n\");\n  return 0;\n}\n```", "```cpp\n> $ ./a.out\nbar::bar()\nfoo::foo()\n.........main returns\nfoo::~foo()\nbar::~bar()\n```", "```cpp\n> $ ./a.out\nbar::bar()\nfoo::foo()\n.........main returns\nfoo::~foo()\nbar::~bar()\n[1]    93622 segmentation fault (core dumped)  ./a.out\n```", "```cpp\nbar() { std::this_thread::sleep_for(200ms);\n    i = new long long; *i = 0;  printf(\"bar::bar()\\n \");}\n```", "```cpp\nbar b;\nstd::jthread thread;\n```", "```cpp\nint main() {\n    int a[16] = {0};\n    a[2] = 3;\n    3[a] = 4;\n}\n```", "```cpp\n#include <vector>\n#include <iostream>\nstruct wrapper {\n   wrapper(int p) : i(p) {}\n   int operator[](const std::vector<int> v) {return v[i];}\n   int i = 0;\n};\nstruct helper {\n   helper() = default;\n   wrapper operator << (int a) { return wrapper {a}; }\n};\n#define _ helper()<<\nint main() {\n   std::vector<int> vec = {10, 20, 30, 40, 50};\n   int b= (_ 2) [vec];\n   std::cout << b << std::endl;  // Outputs 30\n   return 0;\n}\n```", "```cpp\nerror: no match for 'operator[]' (operand types are 'int' and 'std::vector<int>')\n```", "```cpp\n#include <iostream>\nint main() {\n    auto a = 4;\n    std::cout << sizeof(a)[\"Hello World\"] << std::endl;\n    return 0;\n}\n```", "```cpp\n#include <iostream>\nint f (int a, int b, int c) {\n    std::cout << \"a=\"<<a<<\" b=\"<<b<<\" c=\"<<c<<std::endl;\n    return a+b+c;\n}\nint main() {\n    int i = 1;\n    std::cout<<\"f=\"<<f(i++, i++, i++)<<std::endl<<\"i=\"<<i<<std::endl;\n}\n```", "```cpp\n#include <iostream>\nint main() {\n    int i = 4;\n    i = ++i + i++;\n    std::cout << i << std::endl;\n    return 0;\n}\n```", "```cpp\n#include <iostream>\nint main() {\n  int i = 4;\n  int preIncrement = ++i; // i is now 5\n  int postIncrement = i++; //postIncrement is 5, i is now 6\n  i = preIncrement + postIncrement;\n  std::cout << i << std::endl; // Output will be 10\n  return 0;\n}\n```", "```cpp\nint f() { std::cout << \"f\"; return 1; }\nint g() { std::cout << \"g\"; return 2; }\nint result = f() + g();\n```"]