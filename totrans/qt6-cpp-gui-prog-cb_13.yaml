- en: '13'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Developing Web Applications Using Qt WebEngine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Qt includes a module called **Qt WebEngine** that allows us to embed a web browser
    widget into our program and use it to display web pages or local HTML content.
    Prior to version 5.6, Qt used another similar module called **Qt WebKit**, which
    is now deprecated and has since been replaced by the Chromium-based **WebEngine**
    module. Qt also allows communication between JavaScript and C++ code through **Qt
    WebChannel**, which enables us to make use of this module in a much more effective
    fashion.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing **Qt WebEngine**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using `webview` and web settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Embedding Google maps in your project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calling C++ functions from JavaScript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calling JavaScript functions from C++
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The technical requirements for this chapter include Qt 6.6.1 MSVC 2019 64 bit,
    Qt Creator 12.0.2, and Microsoft Visual Studio. All the code used in this chapter
    can be downloaded from the following GitHub repository: [https://github.com/PacktPublishing/QT6-C-GUI-Programming-Cookbook---Third-Edition-/tree/main/Chapter13](https://github.com/PacktPublishing/QT6-C-GUI-Programming-Cookbook---Third-Edition-/tree/main/Chapter13).'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Qt WebEngine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this example project, we will explore the basic features of the **WebEngine**
    module in Qt and try building a simple working web browser. Since Qt 5.6, Qt’s
    **WebKit** module has been deprecated and replaced by the **WebEngine** module,
    which is based on Google’s Chromium engine.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, let’s set up our **WebEngine** project:'
  prefs: []
  type: TYPE_NORMAL
- en: 'At the moment, Qt’s **WebEngine** module only works with the Visual C++ compiler
    and not others, such as **MinGW** or **Cygwin**. This might change in the future,
    but it all depends on whether Qt developers want to port it to other compilers
    or not. Make sure that the Qt version you installed on your computer supports
    the Visual C++ compiler. You can add the **MSVC 2019 64-bit** component to your
    Qt installation using Qt’s maintenance tool. Also, make sure that you have installed
    the **Qt WebEngine** component in your Qt version:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.1 – Making sure MSVC 2019 and Qt WebEngine are installed](img/B20976_13_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.1 – Making sure MSVC 2019 and Qt WebEngine are installed
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up Qt Creator and create a new **Qt Widgets Application** project. Select
    a kit that uses the Visual C++ compiler:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.2 – Only MSVC is officially supported by Qt WebEngine](img/B20976_13_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.2 – Only MSVC is officially supported by Qt WebEngine
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up your project file (`.pro`) and add the following modules to your project.
    After that, you must run `qmake` to apply the changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 13.3 – Removing the menu bar, main toolbar, and status bar](img/B20976_13_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.3 – Removing the menu bar, main toolbar, and status bar
  prefs: []
  type: TYPE_NORMAL
- en: 'Place two horizontal layouts on the canvas, then place a **Line Edit** widget
    and a push button for the layout at the top:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.4 – Placing the line edit widget and push button in a layout](img/B20976_13_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.4 – Placing the line edit widget and push button in a layout
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the canvas and click on the **Lay Out Vertically** button located at
    the top of the editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.5 – Clicking on the Lay Out Vertically button](img/B20976_13_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.5 – Clicking on the Lay Out Vertically button
  prefs: []
  type: TYPE_NORMAL
- en: 'The layouts will expand and follow the size of the main window. The line edit
    will also expand horizontally, based on the width of the horizontal layout:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.6 – The line edit is now expanding horizontally](img/B20976_13_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.6 – The line edit is now expanding horizontally
  prefs: []
  type: TYPE_NORMAL
- en: 'Add two buttons to the left side of the line edit. We’ll use these two buttons
    to move backward and forward between page histories. Add a `webview` to it later
    at *step 15* using C++ code, and the space will be occupied:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.7 – Adding two more buttons and a progress bar to the UI](img/B20976_13_007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.7 – Adding two more buttons and a progress bar to the UI
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on one of the buttons and select `clicked()` and click `mainwindow.h`
    and `mainwindow.cpp`. Repeat this step for all the other buttons as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the line edit and select `returnPressed()` and click `mainwindow.h`
    and `mainwindow.cpp`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let’s hop over to `mainwindow.h`. The first thing we need to do is to add the
    following header to `mainwindow.h`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare a `loadUrl()` function under the class destructor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'private slots:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: void on_goButton_clicked();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: void on_address_returnPressed();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: void on_backButton_clicked();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: void on_forwardButton_clicked();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: void loading(int progress);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare a `QWebEngineView` object and call it `webview`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `mainwindow.cpp` file and initiate the `WebEngine` view. Add it to
    the second horizontal layout and connect its `loadProgress()` signal to the `loading()`
    slot function we just added to `mainwindow.h`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare what will happen when the `loadUrl()` function is called:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Call the `loadUrl()` function when the **Go** button is clicked or when the
    *Enter* key is pressed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As for the other two buttons, we’ll ask `webview` to load the previous page
    or the next page if it is available in the history stack:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change the value of `progressBar` when the web page is being loaded:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Build and run the program now, and you will get a very basic but functional
    web browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.8 – We have created a simple web browser from scratch!](img/B20976_13_008.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.8 – We have created a simple web browser from scratch!
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The old `webview` system was based on Apple’s **WebKit** engine and is only
    available in Qt 5.5 and its predecessor. Since 5.6, **WebKit** has been completely
    abandoned by Qt and replaced with Google’s **Chromium** engine. The API has been
    completely changed, and therefore all the code related to **Qt WebKit** will not
    work correctly once migrated to 5.6\. If you’re new to Qt, it’s recommended you
    skip **WebKit** and learn the **WebEngine** API since it is becoming the new standard
    in Qt.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have used Qt’s **WebKit** in the past, this web page teaches you how
    to port your old code over to **WebEngine**: [https://wiki.qt.io/Porting_from_QtWebKit_to_QtWebEngine](https://wiki.qt.io/Porting_from_QtWebKit_to_QtWebEngine)'
  prefs: []
  type: TYPE_NORMAL
- en: In *step 15* in the previous section, we connected the `loadProgress()` signal
    that belongs to the `webview` widget to the `loading()` slot function. The signal
    will be called automatically when `webview` is loading the web page you requested
    by calling `QWebEnginePage::load()` in *step 17*. You can also connect the `loadStarted()`
    and `loadFinished()` signals if you need to.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 17*, we used the `QUrl` class to convert the text obtained from the
    line edit to URL format. By default, the address we inserted will lead to the
    local path if we do not specify the URL scheme (HTTP, HTTPS, FTP, and so on).
    We may not be able to load the page if, say, we gave it `google.com` instead of
    `http://google.com`. Therefore, we manually specified a URL scheme for it by calling
    `QUrl::setScheme()`. This ensured the address is properly formatted before passing
    it to `webview`.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If for some reason you need the **WebKit** module for your project instead
    of **WebEngine**, you can obtain the module code from GitHub and build it by yourself:
    [https://github.com/qt/qtwebkit](https://github.com/qt/qtwebkit)'
  prefs: []
  type: TYPE_NORMAL
- en: Using webview and web settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will dive deeper into the features available in Qt’s `webview`.
    We will use the source files from the previous example and add more code to it.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s explore some of the basic features of the **Qt** **WebEngine** module:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `mainwindow.ui` and add a vertical layout under the progress bar. Add
    a `plaintext` property of the **Plain Text Edit** widget to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This is how it should look after you have added the code on top of the **Plain
    Text** **Edit** widget:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 13.9 – Adding a Plain Text Edit widget and a push button to the bottom](img/B20976_13_009.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.9 – Adding a Plain Text Edit widget and a push button to the bottom
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to **File** | **New File**. A window will pop up and ask you to choose a
    file template. Select **Qt Resource File** under the **Qt** category and click
    on the **Choose…** button. Type in your desired filename and click **Next**, followed
    by **Finish**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.10 – Creating a Qt resource file](img/B20976_13_010.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.10 – Creating a Qt resource file
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the resource file we just created by right-clicking on it in the `/` and
    click `tux.png` image file and click `.exe`) once it’s compiled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.11 – Adding the tux.png image file to our resource file](img/B20976_13_011.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.11 – Adding the tux.png image file to our resource file
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `mainwindow.h` and add the following headers to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'public:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: explicit MainWindow(QWidget *parent = 0);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ~MainWindow();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: void loadUrl();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'private slots:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: void on_goButton_clicked();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: void on_address_returnPressed();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: void on_backButton_clicked();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: void on_forwardButton_clicked();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: void startLoading();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: void loading(int progress);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: void loaded(bool ok);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: void on_loadHtml_clicked();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'private:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Ui::MainWindow *ui;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'mainwindow.cpp and add the following code to the class constructor:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: QFile file("://tux.png");
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: if (file.open(QFile::ReadOnly)) {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: QByteArray data = file.readAll();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: webview->page()->setContent(data, "image/png");
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: else {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: qDebug() << "File cannot be opened.";
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: connect(webview, &QWebEngineView::loadStarted, this, &MainWindow::startLoading()));
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: connect(webview, &QWebEngineView::loadProgress, this, &MainWindow::loading(int)));
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: connect(webview, &QWebEngineView::loadFinished, this, &MainWindow::loaded(bool)));
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `MainWindow::loadUrl()` function stays the same as in the previous example
    in the *Introducing Qt WebEngine* recipe, which sets the URL scheme to HTTP before
    loading the page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The same goes for the following functions, which also remain the same as the
    previous example in the *Introducing Qt* *WebEngine* recipe:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `MainWindow::startLoading()` and `MainWindow::loaded()` slot functions,
    which will be called by the `loadStarted()` and `loadFinished()` signals. These
    two functions basically show a progress bar when a page is starting to load and
    hide the progress bar when the page has finished loading:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Call `webview->loadHtml()` to convert the plain text to HTML content when the
    **Load HTML** button is clicked:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Build and run the program, and you should see something like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.12 –webview will now display the result generated from your HTML
    code](img/B20976_13_012.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.12 –webview will now display the result generated from your HTML code
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we used C++ to load an image file and set it as `webview` default
    content (instead of a blank page). We could achieve the same result by loading
    a default HTML file with an image at startup.
  prefs: []
  type: TYPE_NORMAL
- en: Some of the code in the class constructor has been commented out. You can remove
    the double slashes (`//`) and see the difference it makes – the JavaScript alert
    will no longer appear (since JavaScript is disabled) and images will no longer
    appear in your `webview`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another thing you can try is to change the font family from `QWebEngineSettings::SansSerifFont`
    to `QWebEngineSettings::SerifFont`. You will notice a slight difference in the
    font as it appears in `webview`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.13 – Different types of font showing in webview](img/B20976_13_013.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.13 – Different types of font showing in webview
  prefs: []
  type: TYPE_NORMAL
- en: By clicking the `webview` to treat the content of the **Plain Text Edit** widget
    as HTML code and load it as an HTML page. You can use this to make a simple HTML
    editor powered by Qt!
  prefs: []
  type: TYPE_NORMAL
- en: Embedding Google maps in your project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to embed Google maps in our project through
    Qt’s **WebEngine** module. This example doesn’t focus much on Qt and C++, but
    rather on the **Google Maps** API in HTML code.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s create a program that displays Google maps by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new **Qt Widgets Application** project and remove the **statusBar**,
    **menuBar**, and **mainToolBar** objects.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open your project file (`.pro`) and add the following modules to your project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open `mainwindow.ui` and add a vertical layout to the canvas. Then, select
    the canvas and click the **Lay Out Vertically** button on top of the canvas. You
    will get the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.14 – Adding a vertical layout to the central widget](img/B20976_13_014.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.14 – Adding a vertical layout to the central widget
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `mainwindow.cpp` and add the following header to the top of the source
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code to the `MainWindow` constructor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Go to `.qrc`). We will add an HTML file to our project, called `map.html`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.15 – Adding map.html to the resource file](img/B20976_13_015.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.15 – Adding map.html to the resource file
  prefs: []
  type: TYPE_NORMAL
- en: Open `map.html` with your favorite text editor. It’s not recommended to open
    an HTML file using Qt Creator as it does not provide any color coding for HTML
    syntax.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start writing the HTML code by declaring important tags, such as `<html>`,
    `<head>`, and `<body>`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a `<div>` tag to the body and set its ID as `map-canvas`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code to the head of the HTML document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code, also to the head of the HTML document, beneath the
    code we inserted in the previous step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a marker and place it on the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a polyline to the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a polygon shape:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a drawing manager and apply it to the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Compile and run the project. You should see the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.16 – You should see a marker, a polyline, and a triangle on the
    Google map](img/B20976_13_016.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.16 – You should see a marker, a polyline, and a triangle on the Google
    map
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Google allows you to embed Google maps in a web page using its JavaScript library,
    called the `webview` widget, which uses the **Google Maps** API. The only downside
    of this method is that we cannot load maps when there is no internet connection.
  prefs: []
  type: TYPE_NORMAL
- en: The **Google Maps** API can be called by your website as Google allows it. Choose
    [the free API if your plan is for heav](https://console.developers.google.com)ier
    traffic.
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://console.developers.google.com](https://console.developers.google.com)
    to get a free key and replace `YOUR_KEY_HERE` in the JavaScript source path with
    the API key you obtained from Google.
  prefs: []
  type: TYPE_NORMAL
- en: We must define a `<div>` object, which serves as a container for the map. Then,
    when we initialize the map, we specify the ID of the `<div>` object so that the
    **Google Maps** API knows which HTML element to look for when embedding the map.
    By default, we set the center of the map to the coordinates of New York and set
    the default zoom level to 6\. Then, we add an event listener that gets triggered
    when the zoom level of the map changes.
  prefs: []
  type: TYPE_NORMAL
- en: Remove the double slashes (`//`) from the code to see it in action. After that,
    we add a marker to the map through JavaScript. The marker also has an event listener
    attached to it, which will trigger the `panTo()` function when the marker is clicked.
  prefs: []
  type: TYPE_NORMAL
- en: It basically pans the map view to the marker that has been clicked. Although
    we have added the drawing manager to the map (the icon buttons beside the **Map**
    and **Satellite** buttons), which allows users to draw any type of shape on top
    of the map, it’s also possible to add shapes manually using JavaScript, similar
    to how we added a marker in *step 12*, in the *How to do* *it...* section.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, you may have noticed that headers are added to `mainwindow.cpp` instead
    of `mainwindow.h`. This is totally fine unless you are declaring class pointers
    in `mainwindow.h`—then, you have to include those headers in it.
  prefs: []
  type: TYPE_NORMAL
- en: Calling C++ functions from JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to put our knowledge to use and create a functional
    login screen using Qt and SQLite.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s learn how to call C++ functions from JavaScript using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `.pro`) and add the following modules to the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a vertical layout to the canvas, then select the canvas and click on the
    `Hello!`. Make its font bigger by setting its `styleSheet` property as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This is what it looks like after we applied the font properties to our style
    sheet:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 13.17 – Applying the font property to the “Hello!” text](img/B20976_13_017.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.17 – Applying the font property to the “Hello!” text
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to **File** | **New File…** and create a resource file. Add an empty HTML
    file and all the JavaScript files, CSS files, font files, and so on that belong
    to **jQuery**, **Bootstrap**, and **Font Awesome** to your project resources:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.18 – Adding all the files to the project’s resource](img/B20976_13_018.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.18 – Adding all the files to the project’s resource
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your HTML file, which in this case is called `test.html`. Link all the
    necessary JavaScript and CSS files to the HTML source code, between the `<``head>`
    tags:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following JavaScript to the `<head>` element, wrapped between the `<``script>`
    tags:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print **Good bye!** when clicking on the **changeText** button with the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code to the `<``body>` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Continuing from the previous code, this time, we create input fields for username
    and password, with two buttons at the bottom called **Login** and **Change** **Cpp
    Text**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open `mainwindow.h` and add the following public functions to the `MainWindow`
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '#include <QtWebEngineWidgets/QWebEngineView>'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#include <QtWebChannel/QWebChannel>'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#include <QMessageBox>'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code to the `MainWindow` constructor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare what happens when `changeQtText()` and `showLoginInfo()` are called:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Compile and run the program; you should see something similar to the following
    screenshot. If you click on the **Change Cpp Text** button, the word **Hello!**
    at the top will change to **Goodbye!** If you click on the **Login** button, a
    message box will appear and show you exactly what you typed in the **Username**
    and **Password** input fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.19 – Clicking on the buttons to call C++ functions](img/B20976_13_019.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.19 – Clicking on the buttons to call C++ functions
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this example, we used two JavaScript libraries: **jQuery** and **Bootstrap**.
    We also used an iconic font package called **Font Awesome**. These third-party
    add-ons were used to make the HTML UI more interesting and responsive to different
    screen resolutions.'
  prefs: []
  type: TYPE_NORMAL
- en: We also used **jQuery** to detect the document’s ready status, as well as [to
    obtain the values of in](https://jquery.com/download)put fields.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You can download **jQuery** from [https://jquery.com/download](https://jquery.com/download),
    **Bootstrap** from [http://getbootstrap.com/getting-started/#download](http://getbootstrap.com/getting-started/#download),
    and **Font Awesome** from [http://fontawesome.io](http://fontawesome.io).
  prefs: []
  type: TYPE_NORMAL
- en: 'Qt’s **WebEngine** module uses a mechanism called **WebChannel**, which enables
    **peer-to-peer** (**P2P**) communication between the C++ program and the HTML
    page. The **WebEngine** module provides a JavaScript library that makes integration
    a lot easier. The JavaScript is embedded in your project’s resource by default,
    so you don’t need to import it into your project manually. You just have to include
    it in your HTML page by calling the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Once you have included `qwebchannel.js`, you can initialize the `QWebChannel`
    class and assign the Qt object we registered earlier in C++ to a JavaScript variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'In C++, this is done as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, in JavaScript, this is done as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'You may be wondering what this line means:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Qt’s `1234` defines the port number you want to use for remote debugging.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have enabled remote debugging, you can access the debugging page by
    opening up a Chromium-based web browser, such as Google Chrome (this will not
    work in Firefox and other browsers), and typing in `http://127.0.0.1:1234`. You
    will then see a page that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.20 – Inspectable pages allow you to debug more easily](img/B20976_13_020.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.20 – Inspectable pages allow you to debug more easily
  prefs: []
  type: TYPE_NORMAL
- en: The first page will display all HTML pages that are currently running in your
    program, which in this case is `test.html`. Click on the page link, and it will
    take you to another page for inspection. You can use this to check for CSS errors,
    JavaScript errors, and missing files.
  prefs: []
  type: TYPE_NORMAL
- en: Note that you should disable remote debugging once your program is bug-free
    and ready for deployment. This is because remote debugging takes time to initialize
    and will increase your program’s startup time.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to call a C++ function from JavaScript, you must place the `Q_INVOKABLE`
    macro in front of the function’s declaration; otherwise, it will not work:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Calling Javascript functions from C++
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous recipe, we learned how to call C++ functions from JavaScript
    through Qt’s **WebChannel** system. In this example, we will try to do the reverse:
    call JavaScript functions from C++ code.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can call JavaScript functions from C++ through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new `webenginewidgets` module to your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open `mainwindow.ui` and remove the **mainToolBar**, **menuBar**, and **statusBar**
    objects.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a vertical layout and a horizontal layout to the canvas. Select the canvas
    and click **Lay Out Vertically**. Make sure the horizontal layout is located at
    the bottom of the vertical layout.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add two push buttons to the horizontal layout; one is called `clicked()` option
    and click **OK**. Qt will automatically add a slot function to your source code.
    Repeat this step for the other button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.21 – Placing the buttons in the bottom layout](img/B20976_13_021.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.21 – Placing the buttons in the bottom layout
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `mainwindow.h` and add the following headers to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare the class pointer of a `QWebEngineView` object called `webview`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'MainWindow::MainWindow(QWidget *parent) :'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: QMainWindow(parent),
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ui(new Ui::MainWindow)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: //qputenv("QTWEBENGINE_REMOTE_DEBUGGING", "1234");
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ui->setupUi(this);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: webview = new QWebEngineView();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ui->verticalLayout->addWidget(webview);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: QWebChannel* webChannel = new QWebChannel();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: webChannel->registerObject("mainWindow", this);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: webview->page()->setWebChannel(webChannel);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: webview->page()->load(QUrl("qrc:///html/test.html"));
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define what will happen when the `changeHtmlText` button and the `playUIAnimation`
    button are clicked:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Let’s create a resource file for our project by going to **File** | **New File...**.
    Select **Qt Resource File** under the **Qt** category and click **Choose...**.
    Insert your desired filename and click **Next**, followed by **Finish**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add an empty HTML file and all the required add-ons (`tux.png` image file to
    the resources file as well, as we’ll be using it in a short while in *step 14*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the HTML file we just created and add it to the project resources; in
    our case, it’s called `test.html`. Add the following HTML code to the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following JavaScript code, which is wrapped within the `<script>` tags,
    to the `<head>` element of our HTML file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define a `startAnim()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code to the `<body>` element of our HTML file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Continue writing the following code, to which we’ve added a list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The code continues as we add the remaining items to a second list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Build and run the program; you should get a similar result to that in the following
    screenshot. When you click on the **Change HTML Text** button, the information
    text is located within the top panel. If you click on the **Play UI Animation**
    button, penguin images, alongside the two sets of widgets, will appear one after
    the other, with different animations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.22 – Clicking on the buttons at the bottom to see the results](img/B20976_13_022.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.22 – Clicking on the buttons at the bottom to see the results
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This example is similar to the previous one in the *Calling C++ functions from
    JavaScript* recipe. Once we have included the `QWebChannel` class, we can call
    any of the JavaScript functions from C++ by calling `webview->page()->runJavascript("jsFunctionNameHere();")`.
    Don’t forget to apply the web channel created in C++ to `webview` page as well;
    otherwise, it will not be able to communicate with the `QWebChannel` class in
    your HTML file.
  prefs: []
  type: TYPE_NORMAL
- en: By default, we change the CSS properties of the penguin image and set its opacity
    to 0, width to 0%, and height to 0%. We also hide the two list groups by calling
    the `hide()` **jQuery** function. When the **Play UI Animation** button is clicked,
    we repeat the steps just in case the animations have been played before (that
    is, the same button has been clicked before), and then we hide the list groups
    again in order for the animations to be replayed.
  prefs: []
  type: TYPE_NORMAL
- en: One powerful feature of **jQuery** is that you can define what happens after
    an animation finishes, which allows us to play animations in sequence. In this
    example, we started with the penguin image and interpolated its CSS properties
    to a targeted setting within a second (1,000 milliseconds). Once that was done,
    we started another animation, which made the first list group slide from top to
    bottom in 1 second. After that, we ran the third animation, which made the second
    list group fade in from nowhere within 1.5 seconds.
  prefs: []
  type: TYPE_NORMAL
- en: To replace the information text located in the top panel, we created a JavaScript
    function called `changeHtmlText()` within the function itself, and we got the
    HTML element by referring to its ID and calling `html()` to change its contents.
  prefs: []
  type: TYPE_NORMAL
