- en: Creating Optimized Game Art for VR in UE4
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在UE4中为VR创建优化的游戏艺术
- en: '*Server 17* has come a long way. We have brought the game from a simple puzzle
    idea to a working game prototype. At this stage, we have a sample level, custom
    gameplay, and custom interfaces. We have built interaction systems that can be
    expanded to add even more game mechanics. However, the game is not much to look
    at, is it? Our lighting is basic. We are still using the default textures for
    many things. There is nothing wrong with it, since this is still a game prototype,
    but if we want to be able to present this to anyone beyond family and friends,
    it is going to need a bit of sprucing up.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*服务器17*已经取得了长足的进步。我们已经将游戏从简单的谜题想法发展成了一个可工作的游戏原型。在这个阶段，我们有一个样本关卡，自定义游戏玩法和自定义界面。我们已经构建了可以扩展以添加更多游戏机制的交互系统。然而，游戏看起来并不怎么样，对吧？我们的照明很基础。我们仍在使用许多事物的默认纹理。这没有问题，因为这是一个游戏原型，但如果我们想将这个游戏展示给家人和朋友之外的人，它将需要一些美化。'
- en: Creating 3D game art for VR is not like creating game art for other titles.
    Though we use many of the same programs, VR requires us to be conservative with
    our art. The performance requirements of VR demand that we keep polygon counts
    low, use tricks to eliminate the use of advanced lighting techniques, and rethink
    our approach to art. Fake everything you can, and treat your game art as if it
    is the late, 90s.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为VR创建3D游戏艺术与为其他游戏创建游戏艺术不同。尽管我们使用了许多相同的程序，但VR要求我们在艺术上保持保守。VR的性能要求我们需要保持多边形数量低，使用技巧来消除高级照明技术的使用，并重新思考我们的艺术方法。尽可能伪造一切，并将你的游戏艺术视为90年代末的作品。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Performance is key
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性能是关键
- en: Artistic limitations in VR
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VR中的艺术限制
- en: Performance-boosting techniques
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性能提升技巧
- en: Measuring ingame performance
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测量游戏中的性能
- en: Performance is key
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 性能是关键
- en: Again and again, we have touched on the theme of performance in VR. We talked
    about it first when we discussed VR sickness in [Chapter 1](926e8e71-f556-43b2-b4f8-47dc017c7a38.xhtml),
    *Introducing VR Technology in Unreal Engine 4*. We touched on it again in [Chapter
    3](ec4818ac-6582-4488-ba15-e48ef829466f.xhtml), *Exploring Riveting Gameplay in
    Virtual Reality*, when we programmed the interaction systems that make our game
    work. So, why do we keep talking about it? Performance is central to enjoying
    a VR experience. Having high-end visuals helps our players become immersed in
    our digital environments, while keeping steady frame rates is the best way to
    maximize player comfort and reduce VR sickness. So, how do we balance both of
    these needs?
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 反复提及VR中的性能主题。我们第一次讨论它是在[第1章](926e8e71-f556-43b2-b4f8-47dc017c7a38.xhtml)，“在虚幻引擎4中介绍VR技术”时，我们讨论了VR不适感。我们再次在[第3章](ec4818ac-6582-4488-ba15-e48ef829466f.xhtml)，“探索虚拟现实中的扣人心弦的游戏玩法”中提及了它，当时我们编写了使我们的游戏运行起来的交互系统。那么，为什么我们一直谈论这个话题呢？性能是享受VR体验的核心。高端视觉效果有助于我们的玩家沉浸在我们的数字环境中，而保持稳定的帧率是最大化玩家舒适度和减少VR不适感的最佳方式。那么，我们如何平衡这两者呢？
- en: In this chapter, we are going to talk about performance regarding to 3D game
    art, lighting, and visual effects. In VR, managing your assets and detail level
    becomes a balancing act. How do we provide the visuals required to engage our
    players while keeping framerates at 90 FPS or above to keep them comfortable?
    The simple answer is understanding and careful planning. With the right planning
    and a few tricks, we can keep our FPS high, and deliver the experience our players
    demand.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论与3D游戏艺术、照明和视觉效果相关的性能。在VR中，管理你的资源和细节级别变成了一场平衡游戏。我们如何提供吸引玩家的视觉效果，同时保持90
    FPS或以上的帧率以保持他们的舒适度？简单的答案是理解和周密的计划。有了正确的规划和一些技巧，我们可以保持高FPS，并交付玩家所要求的体验。
- en: 'To start us off, let''s discuss the important points of how VR renders the
    elements we place on the screen. Each object we create and add to our environment
    needs to go through the process of being drawn to the screen. The more detailed
    the object (as measured by the polygon count or the triangle count), the more
    processing it takes. Processing takes time. We also have to be aware of draw calls.
    Each time we update the screen, the object needs to be drawn again along with
    each material that it uses. We could describe this as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们讨论一下VR如何渲染我们在屏幕上放置的元素的重要要点。我们创建并添加到环境中的每个对象都需要经过绘制到屏幕的过程。对象越详细（以多边形计数或三角形计数来衡量），所需的处理就越多。处理需要时间。我们还要注意绘制调用。每次我们更新屏幕时，对象都需要再次绘制，以及它所使用的每种材料。我们可以这样描述：
- en: '*Draw Calls = Number of Meshes on screen * Number of Materials per Mesh*'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*绘制调用 = 屏幕上网格的数量 * 每个网格的材料数量*'
- en: 'We also have to remember that VR headsets render to two screens (one per eye).
    So the number of draw calls is actually doubled! This is where planning can help.
    Here are some helpful do''s and don''ts:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还必须记住，VR头戴式设备渲染到两个屏幕（每个眼睛一个）。因此，绘制调用的数量实际上是翻倍的！这就是规划可以发挥作用的地方。以下是一些有用的做法和禁忌：
- en: '**Do''s**:'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**做法**：'
- en: Plan our environment so we can minimize the number of meshes on the screen.
    Make sure that each mesh has a purpose and adds something to the level by being
    there.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 规划我们的环境，以便我们可以最小化屏幕上的网格数量。确保每个网格都有目的，并且通过存在为关卡增添内容。
- en: Minimize the number of materials that are on each object. It is possible to
    create one large material that can be used with several different meshes. However,
    keeping the number of materials per object as low as possible works as well.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最小化每个对象上的材料数量。可以创建一个大的材料，可以与几个不同的网格一起使用。然而，将每个对象上的材料数量保持在尽可能低的工作效果同样好。
- en: '**Don''ts**:'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**禁忌**：'
- en: Place meshes just to fill space. This makes the level feel cluttered and busy.
    This also increases the number of draw calls per frame.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅放置网格以填充空间。这使得关卡感觉杂乱无章。这也增加了每帧的绘制调用数量。
- en: Depend on advanced rendering techniques to display meshes and effects. Features
    such as transparency, screen-space reflections, and normal maps do not work well
    in VR. Either they are too resource intensive or do not display correctly.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依赖高级渲染技术来显示网格和效果。如透明度、屏幕空间反射和法线贴图等特性在VR中表现不佳。要么它们太资源密集，要么显示不正确。
- en: These are just a couple of the ways knowledge and planning can help with performance.
    By understanding the demands of VR and planning our approach to the art, we can
    do our best to minimize draw calls.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是知识和规划如何帮助性能的一两种方式。通过理解VR的需求并规划我们的艺术方法，我们可以尽最大努力减少绘制调用。
- en: Artistic limitations in VR
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: VR中的艺术限制
- en: 'Now that we have a basic understanding, it''s time to get specific. How do
    the limitations we face in VR affect each of the following categories of game
    art?:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了基本理解，是时候具体分析了。我们在VR中面临的限制如何影响以下游戏艺术类别的每个类别？：
- en: Static and skeletal meshes
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 静态和骨骼网格
- en: Materials
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 材料图
- en: Lighting
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 灯光
- en: Visual effects
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视觉效果
- en: Each category represents different limitations that need to be considered when
    creating the visuals for our game.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 每个类别代表在为我们的游戏创建视觉效果时需要考虑的不同限制。
- en: Static and skeletal mesh limitations
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 静态和骨骼网格的限制
- en: 'Let''s start by taking a look at static and skeletal meshes:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先从静态网格和骨骼网格开始看：
- en: '![](img/a5a44b03-4c2d-4305-9cbc-8a2823bd12cd.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a5a44b03-4c2d-4305-9cbc-8a2823bd12cd.png)'
- en: The static mesh editor in Unreal 4
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Unreal 4中的静态网格编辑器
- en: Static and skeletal meshes represent the majority of the art that goes into
    creating a game in Unreal Engine 4\. These are your 3D models and tend to be sorted
    into groups such as environment, character, weapon, vehicle, and so on. Back in
    the late '90s when computer resources were more limited, artists had to work within
    strict limits when it came to polygon or triangle counts, but those limits are
    a thing of the past. Modern game hardware can push millions of triangles to the
    screen with no problems. However, with the performance needs of VR being so high,
    it is time to create our models like it's 1999!
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 静态和骨骼网格代表了在Unreal Engine 4中创建游戏所投入的大部分艺术。这些是你的3D模型，通常被归类为环境、角色、武器、车辆等。回到20世纪90年代末，当计算机资源更加有限时，艺术家在多边形或三角形计数方面必须遵守严格的限制，但那些限制已经成为过去。现代游戏硬件可以毫无问题地将数百万个三角形推送到屏幕上。然而，由于VR对性能的需求如此之高，现在是时候像1999年一样创建我们的模型了！
- en: For some of us older folks, we are able to remember what those limitations were
    like. For others of us (younger readers), we need a bit of a refresher on what
    that means. Today's standards for triangle counts are quite high. A first-person
    weapon can be 30,000 triangles or more. It is not uncommon for characters to have
    a triangle count of up to 120,000 triangles. However, every bit of extra detail
    can impact performance. Without normal maps to help us fake detail and decrease
    these numbers, how can we maintain the level of detail that we need for a high-end
    environment? A common practice is to delete the polygons on objects in places
    that the player won't see. How can we do that when the player can see all around
    our objects?
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们这些较老的人来说，我们能够记住那些限制是什么样的。对于其他人（年轻的读者）来说，我们需要稍微回顾一下这意味着什么。今天的三角形计数标准相当高。第一人称武器可以有30,000个三角形或更多。角色拥有高达120,000个三角形的三角形计数并不罕见。然而，任何额外的细节都会影响性能。如果没有法线贴图帮助我们伪造细节并减少这些数字，我们如何保持高端环境所需的细节水平？一种常见的做法是在玩家看不到的地方删除对象上的多边形。当玩家可以看到我们对象的四面八方时，我们如何做到这一点？
- en: Material limitations
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 材质限制
- en: 'Next, let''s discuss materials:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们讨论材质：
- en: '![](img/f601798a-ccfc-4bb2-88fe-8827484bc665.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f601798a-ccfc-4bb2-88fe-8827484bc665.png)'
- en: A glimpse of the material editor
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 材质编辑器的一瞥
- en: The complexity and number of a scene's materials is often the major reason for
    poor performance in VR. Each material that we apply to a mesh adds a draw call
    to our game, forcing the computer to work harder each frame. This can result in
    slower performance and not being able to hit our 90 FPS target. There is also
    the issue of transparency and reflections. Transparent and translucent materials
    are a fantastic effect. However, they are costly in VR, as the material has to
    be reevaluated and redrawn every frame. Reflections are another great effect that
    helps a world feel more realistic and immersive. Yet, these are also very resource
    intensive and require complex calculations.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 场景材质的复杂性和数量往往是VR中性能不佳的主要原因。我们应用到网格上的每种材质都会给我们的游戏增加一个绘制调用，迫使计算机在每一帧都要更加努力工作。这可能导致性能变慢，无法达到我们90
    FPS的目标。还有透明度和反射的问题。透明和不透明的材质是一种很棒的效果。然而，在VR中，这些材质的成本很高，因为材质必须每帧重新评估和重新绘制。反射是另一种很棒的效果，它有助于让世界感觉更加真实和沉浸。然而，这些效果也非常消耗资源，需要复杂的计算。
- en: Lighting limitations
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 光照限制
- en: 'It''s now time to look at lighting:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候看看光照了：
- en: '![](img/30f3667d-19fc-41f6-a60e-bae31151b78f.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/30f3667d-19fc-41f6-a60e-bae31151b78f.png)'
- en: An example of lighting in UE4
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: UE4中的光照示例
- en: Many modern games make use of dynamic light sources to provide players with
    a living world. Shadows move as the sun marches across the sky. NPCs cast shadows
    as they move under street lamps. This type of lighting and shadow help us feel
    grounded in the world and are an essential part of any game. However, dynamic
    lighting is very expensive to calculate for every frame. So, how can we use shadows
    to keep the realism in our virtual worlds?
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 许多现代游戏利用动态光源为玩家提供一个活生生的世界。阴影随着太阳在天空中移动而移动。NPC在街灯下移动时投下阴影。这种光照和阴影让我们感觉在这个世界中扎根，是任何游戏不可或缺的一部分。然而，动态光照对每一帧的计算成本非常高。那么，我们如何使用阴影来保持虚拟世界中的真实感呢？
- en: Visual Effects (VFX) limitations
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 视觉效果（VFX）限制
- en: 'Lastly, we come to visual effects:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们来谈谈视觉效果：
- en: '![](img/2497210e-43fc-4798-a5e0-20fde43adcda.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2497210e-43fc-4798-a5e0-20fde43adcda.png)'
- en: Unreal Engine 4 Cascade VFX editor
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Unreal Engine 4 Cascade VFX编辑器
- en: The right visual effects bring a punch and excitement to many different kinds
    of games. They are essential in action games. They bring a sense of impact to
    sports games. They even add to the realism and feel of simulations. Yet, much
    like dynamic lighting, they are costly when it comes to performance. The limitations
    on translucent and transparent materials apply here. Making some techniques such
    as the use of SubUV textures (laying out the frames of an animated particle in
    a grid) ineffective. Many particles also contain dynamic light sources.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 正确的视觉效果可以为许多不同类型的游戏带来冲击力和兴奋感。它们在动作游戏中至关重要。它们为体育游戏带来冲击感。它们甚至增加了模拟的真实感和感觉。然而，就像动态光照一样，它们在性能方面成本很高。透明和不透明材质的限制也适用于这里。一些技术，如使用SubUV纹理（在网格中排列动画粒子的帧），变得无效。许多粒子还包含动态光源。
- en: Performance-boosting techniques
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 性能提升技术
- en: 'With the player''s comfort to consider and all of these limitations, how are
    designers creating amazing 3D worlds for VR users to step into? The answer can
    be summed up in the phase *fake it till you make it*. The technology behind VR
    is rapidly evolving. New techniques for dealing with the issues we''ve mentioned
    are being built into the next generation of game engines. However, for now, there
    are some best practices currently being used by artists in the industry today
    to deliver amazing visuals, such as the showdown demo from Epic Games:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到玩家的舒适度和所有这些限制，设计师们是如何为VR用户创造令人惊叹的3D世界的？答案可以总结为阶段*fake it till you make it*。VR背后的技术正在快速发展。处理我们提到的问题的新技术正在被集成到下一代游戏引擎中。然而，目前，艺术家们正在使用一些最佳实践来提供令人惊叹的视觉效果，例如Epic
    Games的决战演示：
- en: '![](img/7b29d208-bebe-4a58-b174-372d85025d83.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7b29d208-bebe-4a58-b174-372d85025d83.png)'
- en: The showdown demo from Epic Games
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Epic Games的决战演示
- en: These guys were able to render this amazing scene at 90 FPS. There is transparency,
    lighting, and visual effects. The models used are from various other UE4 demos
    and are not reduced in quality. Here is just some of how they did it.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这些人能够在90 FPS的帧率下渲染出这个惊人的场景。这里有透明度、光照和视觉效果。所使用的模型来自各种其他UE4演示，并且没有降低质量。以下是他们是如何做到的一些例子。
- en: Static and skeletal mesh techniques
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 静态和骨骼网格技术
- en: 'The best way to maximize the success of your VR environment in terms of performance
    is to approach the scene with a plan and be as conservative as possible. Since
    the player has the opportunity to scrutinize and interact with the environment
    more than in a traditional game, VR-ready assets need to be scaled for users of
    an average height. Meshes must also be manifold. This means ensuring that the
    object is complete and there are no missing polygons in the mesh, since the player
    can usually view the object from any angle. Here is an example of a DJ deck that
    was created for *Tribe XR*:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 要在性能方面最大限度地提高你的VR环境的成功率，你需要有计划地处理场景，并尽可能保守。由于玩家有机会比在传统游戏中更仔细地检查和与环境互动，因此VR准备好的资产需要为平均身高的用户进行缩放。网格也必须是多面的。这意味着要确保对象是完整的，网格中没有缺失的多边形，因为玩家通常可以从任何角度查看对象。以下是一个为*Tribe
    XR*创建的DJ台示例：
- en: '![](img/72096641-4865-40cc-9d57-e1786f96f1af.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/72096641-4865-40cc-9d57-e1786f96f1af.png)'
- en: Pioneer CDJ used in Tribe XR open in Autodesk Maya. This mesh is only 2,001
    triangles
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在Tribe XR中使用的先锋CDJ在Autodesk Maya中打开。这个网格只有2,001个三角形
- en: In their game *Tribe XR*, the team planned and focused their VR DJing experience
    to fit in one room so that they could maximize the ability to create an immersive
    Sci-Fi environment. Inspired by games such as *Overwatch* and *Team Fortress 2*,
    the lounge they have created has just enough meshes in it to give it that lived-in
    feel. Each one is placed with purpose to create a relaxed and believable atmosphere.
    The meshes they used have low polygon/triangle counts, and UV maps are optimized
    to reduce redundant draw calls. The result is a smooth VR experience that keeps
    framerates high and players absorbed in the music.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在他们的游戏*Tribe XR*中，团队计划和专注于他们的VR DJ体验，以便在一个房间里进行，这样他们就能最大限度地提高创造沉浸式科幻环境的能力。受到像*Overwatch*和*Team
    Fortress 2*这样的游戏的启发，他们创建的休息室中包含足够的网格，以营造出一种居住感。每个网格都经过精心放置，以创造一种轻松和逼真的氛围。他们使用的网格具有低多边形/三角形计数，并且UV贴图经过优化以减少冗余的绘制调用。结果是流畅的VR体验，保持高帧率，让玩家沉浸在音乐中。
- en: Standard methods of game optimization, such as the use of **Level of Detail**
    (**LOD**) meshes, is still viable in VR and should still be considered.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏优化的标准方法，如使用**细节级别**（**LOD**）网格，在VR中仍然有效，应该仍然被考虑。
- en: Material techniques
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 材料技术
- en: As mentioned previously, materials for VR should be planned and designed to
    minimize the number of draw calls that are required in every frame. Each mesh
    should incorporate the minimum number of materials to reduce these draw calls.
    In the showdown demo, Epic Games created many purpose-built props, though some
    were taken from previous demos, such as the Samaritan demo. The meshes constructed
    for VR all follow a similar pattern. All are optimized with low triangle counts,
    and most utilize only one material.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，VR的材料应该有计划地设计和规划，以最大限度地减少每帧所需的绘制调用次数。每个网格应包含尽可能少的材料以减少这些绘制调用。在决战演示中，Epic
    Games创建了许多专门设计的道具，尽管其中一些是从以前的演示中借用的，例如Samaritan演示。为VR构建的网格都遵循类似的模式。所有网格都经过优化，三角形数量低，大多数只使用一种材料。
- en: 'The translucency/transparency is kept to a minimum and only used in a handful
    of locations, such as the glass in vehicles. The glass in the surrounding buildings
    has been faked through the texture images that are used. In places where translucency
    is needed, the DitherTemporalAA material node can be used to make opacity-masked
    objects look like translucent ones. Here is one example using a rocket smoke trail:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 透明度/透明度被控制在最低限度，并且仅在少数几个位置使用，例如车辆中的玻璃。周围建筑中的玻璃是通过使用的纹理图像伪造的。在需要透明度的位置，可以使用DitherTemporalAA材质节点来使不透明度蒙版对象看起来像透明对象。以下是一个使用火箭烟雾尾迹的示例：
- en: '![](img/735777df-dc38-4795-a1d7-644117502651.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/735777df-dc38-4795-a1d7-644117502651.png)'
- en: The RocketTrail material from the showdown demo
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 对决演示中的RocketTrail材质
- en: Specifically, using the DitherTemporalAA node helps eliminate pixel overdraw,
    and this improves performance.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，使用DitherTemporalAA节点有助于消除像素过度绘制，从而提高性能。
- en: 'Finally, we have a powerful tool in helping us fine-tune the materials in our
    scenes: the Shader Complexity view. Accessed through the View Mode drop-down menu
    in the viewport, this view shades the scene in greens and reds, with green being
    less complex and red being more complex. Let''s look at this screenshot from the
    showdown demo:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有一个强大的工具可以帮助我们微调场景中的材质：着色器复杂度视图。通过视口中的视图模式下拉菜单访问，此视图以绿色和红色着色场景，绿色表示较简单，红色表示较复杂。让我们看看这个来自对决演示的截图：
- en: '![](img/25782631-9279-43b8-9f99-62362e425c13.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/25782631-9279-43b8-9f99-62362e425c13.png)'
- en: The showdown demo with Shader Complexity enabled
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 启用着色器复杂度的对决演示
- en: Most of the scene is overlayed in green, showing us that there is a minimum
    number of shader instructions for most objects in the level. Where we see red
    is the transparent windshield glass and the shaders used on the characters that
    were taken from the infiltrator demo (these are not optimized for VR).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数场景都叠加在绿色上，显示该级别中大多数对象的着色器指令数量最少。我们看到红色的地方是透明的挡风玻璃和从渗透者演示中获取的角色的着色器（这些没有针对VR进行优化）。
- en: Lighting techniques
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 照明技术
- en: Lighting a level is one of the most resource intensive processes that happens
    every frame update. When dynamic lights move, it changes shadows, reflections,
    and scattered light, which all have to be recalculated and redrawn. To compensate
    for this, Unreal Engine 4 gives the option to bake lightmaps for each object.
    This creates static lighting by baking the lighting data into a lightmap on each
    object. Lightmaps can't be as realistic as dynamic lighting, but the performance
    difference is very dramatic. That isn't to say that dynamic lighting doesn't have
    a place in VR projects. Dynamic lights may still be used in limited numbers, and
    they should never touch one another. If the scene you are creating is an outdoor
    scene, try setting your directional light (sun or moon) to dynamic, and then use
    cascading shadow maps with the simplest settings you can.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 照明级别是每帧更新中最资源密集的过程之一。当动态灯光移动时，它会改变阴影、反射和散射光，这些都必须重新计算和重新绘制。为了补偿这一点，虚幻引擎4为每个对象提供了烘焙光图选项。这通过将照明数据烘焙到每个对象上的光图中来创建静态照明。光图不能像动态照明那样逼真，但性能差异非常明显。这并不是说动态照明在VR项目中没有位置。动态灯光仍然可以有限地使用，并且它们永远不应该相互接触。如果你正在创建的场景是户外场景，尝试将你的方向光（太阳或月亮）设置为动态，然后使用最简单的设置使用级联阴影图。
- en: 'However, the problem with using static lighting is the loss of shadows for
    your dynamic objects. Things such as the player, enemies, and interactive objects
    just seem to float within your virtual space, without a shadow to ground them.
    This gives the space a somewhat-unnatural look. To fix this, we can use a technique
    that can create a fake blob shadow. We can see it here in the showdown demo:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，使用静态照明的缺点是动态对象会失去阴影。例如玩家、敌人以及交互对象似乎只是漂浮在你的虚拟空间中，没有阴影来固定它们。这给空间带来了一种不太自然的外观。为了解决这个问题，我们可以使用一种可以创建伪造blob阴影的技术。我们可以在对决演示中看到它：
- en: '![](img/1eea53e5-378b-44e2-8486-404ef0da696c.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1eea53e5-378b-44e2-8486-404ef0da696c.png)'
- en: A static mesh with a fake blob shadow
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 一个带有伪造的blob阴影的静态网格
- en: Finally, reflections can go a long way to giving an area a feeling of complexity
    and realism. However, real-time reflections use a significant amount of resources
    and are not well-suited to VR games. In the spirit of *fake it till you make it*, the
    designers at Epic Games created the reflection-capture actor. These actors grab
    reflections from within their areas of influence and encode them into static cube
    maps. These cube maps can then be used by materials to create and fine-tune reflections
    in the level. Since these cube maps are created before the game begins, they have
    very little impact on the level of performance.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，反射可以极大地增强一个区域的感觉复杂性和现实感。然而，实时反射消耗了大量的资源，并且不适合VR游戏。本着“假装做到你做到”的精神，Epic Games的设计师创建了反射捕获演员。这些演员从它们的影响区域内捕获反射并将它们编码到静态立方图中。这些立方图可以由材质用于在关卡中创建和微调反射。由于这些立方图是在游戏开始之前创建的，它们对性能的影响非常小。
- en: Visual effects techniques
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 视觉效果技术
- en: 'If you''ve done much game development work, whether it is two or three dimensional,
    then you are aware of the traditional SubUV technique for creating particle effects.
    This technique involves creating a sprite sheet that represents a particle, such
    as fire or smoke, and having the game engine animate through the cells. This creates
    an animated particle that looks three dimensional but is actually a 2D texture.
    Here is an example of smoke:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你做过很多游戏开发工作，无论是二维还是三维，那么你应该知道用于创建粒子效果的传统的SubUV技术。这项技术涉及创建一个代表粒子（如火焰或烟雾）的精灵图集，并让游戏引擎通过单元格进行动画处理。这创建了一个看起来是三维的动画粒子，但实际上是一个2D纹理。以下是一个烟雾的例子：
- en: '![](img/5bf52efb-b5f4-4a65-9b10-6ad912934437.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5bf52efb-b5f4-4a65-9b10-6ad912934437.png)'
- en: Smoke particle created with the SubUV technique
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 使用SubUV技术创建的烟雾粒子
- en: 'Your first thought might be that this type of particle would be ideal for VR
    since we are projecting a smoke particle with a 2D texture. However, since the
    technique depends on transparency, creating this particle in VR would be tough
    on our performance. We would also need to consider that players in VR can view
    the particles from many different angles. Because of this, particles created using
    the SubUV technique end up looking flat and uninteresting. Designers can work
    around these issues by focusing on using small meshes as particles and creating
    effects that are close to the camera:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你的第一个想法可能是这种类型的粒子对于VR来说非常理想，因为我们正在使用2D纹理投射烟雾粒子。然而，由于这项技术依赖于透明度，在VR中创建这种粒子对我们的性能来说将是艰难的。我们还需要考虑VR中的玩家可以从许多不同的角度观看粒子。正因为如此，使用SubUV技术创建的粒子最终看起来很平面且缺乏趣味。设计师可以通过专注于使用小网格作为粒子，并创建接近摄像机的效果来解决这个问题：
- en: '![](img/93d9392a-24c2-4e7d-b154-d44759f89199.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/93d9392a-24c2-4e7d-b154-d44759f89199.png)'
- en: A VR-friendly particle open in Cascade
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在Cascade中打开的VR友好型粒子
- en: In the showdown demo, smoke is used at several points in the level, such as
    part of the vehicle explosion that flips the car. To minimize the impact on performance,
    the designers created an animated smoke material that they were able to place
    on to a 3D ribbon mesh, which is then emitted along with several different types
    of concrete chunks as part of the effect. When the demo is viewed with the Shader
    Complexity view enabled, these smoke effects are shown with a green tint, meaning
    that they are optimized and have little impact on the framerate. This also allowed
    the designers to deploy these effects near or directly in front of the camera—something
    that can be done well with SubUV particles.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在对决演示中，烟雾在关卡中的几个地方被使用，例如翻转汽车的车辆爆炸的一部分。为了最小化对性能的影响，设计师创建了一个动画烟雾材质，他们可以将它放置在3D带状网格上，然后作为效果的一部分与几种不同类型的混凝土块一起发射。当启用Shader
    Complexity视图查看演示时，这些烟雾效果以绿色调显示，这意味着它们已经优化并且对帧率的影响很小。这也允许设计师在摄像机附近或正前方部署这些效果——这是SubUV粒子可以很好地做到的事情。
- en: Measuring ingame performance
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测量游戏内性能
- en: Over and over again, I have mentioned-performance as the most important consideration
    for a VR game. Yet, we have not talked about how to measure performance inside
    Unreal Engine 4 so that we can know whether we are optimizing well or not. Let's
    take a look at the tools we have available.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 反复提到性能是VR游戏最重要的考虑因素。然而，我们还没有讨论如何在Unreal Engine 4内部测量性能，以便我们知道我们是否进行了良好的优化。让我们看看我们有哪些可用的工具。
- en: 'UE4 has an amazing number of performance profiling tools available as part
    of the game engine, more than I could discuss in this one-quick-start guide. However,
    I do want to discuss a couple that are relevant to our discussion: the Stat commands
    and the GPU Visualizer:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: UE4作为游戏引擎的一部分提供了大量的性能分析工具，多到我在这个快速入门指南中无法全部讨论。然而，我确实想讨论几个与我们讨论相关的内容：Stat命令和GPU可视化器：
- en: '![](img/cffc171d-ccae-4367-b1e5-e05d05dcd02e.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![Stat FPS](img/cffc171d-ccae-4367-b1e5-e05d05dcd02e.png)'
- en: Stat command statistics
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Stat命令统计信息
- en: 'There are several Stat commands that can be useful for us to determine our
    performance. They are accessed by  opening Accessing the console with the tilde
    key and typing in the following commands (they are not case-sensitive):'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个Stat命令对我们确定性能很有用。它们可以通过按波浪线键打开控制台并输入以下命令来访问（它们不区分大小写）：
- en: '**Stat FPS**: This command brings up the current framerate and the time it
    takes to render a frame in milliseconds. Remember that our target goal for HTC
    Vive and Oculus Rift is 90 FPS.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Stat FPS**：此命令显示当前帧率以及渲染一帧所需的时间（以毫秒为单位）。请记住，我们针对HTC Vive和Oculus Rift的目标是90
    FPS。'
- en: '**Stat Unit**: Displays in milliseconds the time per frame spent on rendering
    the frame, game calculations, draw calls, and GPU calculation time.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Stat Unit**：以毫秒为单位显示渲染帧、游戏计算、绘制调用和GPU计算时间。'
- en: '**Stat SceneRendering**: Displays general render time statistics. When performance
    starts to drop, this panel can show us the culprit.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Stat SceneRendering**：显示一般的渲染时间统计信息。当性能开始下降时，此面板可以显示罪魁祸首。'
- en: These statistics can help us understand whether our game is CPU bound or GPU
    bound. Being CPU bound means that our game has too many complex calculations and
    performance is currently being bottlenecked by the CPU. When our game is GPU bound,
    it means that we have too many draw calls, lights, or complex visuals, and our
    performance is being constrained by the graphics processor.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这些统计数据可以帮助我们了解我们的游戏是受CPU限制还是受GPU限制。受CPU限制意味着我们的游戏有太多的复杂计算，性能目前正受到CPU的瓶颈限制。当我们的游戏受GPU限制时，这意味着我们有太多的绘制调用、灯光或复杂的视觉效果，我们的性能正受到图形处理器的限制。
- en: Another simple method of determining whether we are CPU or GPU bound is to lower
    the graphics quality of the game and take a look at the effects on our framerate.
    If there is no change to the current FPS, then we are bound to the CPU.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 判断我们是CPU受限还是GPU受限的另一种简单方法是降低游戏图形质量，并观察对帧率的影响。如果当前FPS没有变化，那么我们就受CPU限制。
- en: 'The other tool we have is the GPU Visualizer:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们拥有的另一个工具是GPU可视化器：
- en: '![](img/59bf5795-5d0c-4c6f-8d87-7c766568b987.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![Stat Unit](img/59bf5795-5d0c-4c6f-8d87-7c766568b987.png)'
- en: The GPU Visualizer
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: GPU可视化器
- en: This is a visual interface that allows us to see the GPU cost of the render
    passes used to draw each frame. Though it may look complicated at first, this
    interface can show us which visual element or feature is causing the largest drop
    in performance, as indicated by the feature taking the largest number of milliseconds
    to render. With that knowledge, we can optimize the specific feature or remove
    it entirely. For more information on this subject, please refer to the *Performance
    and Profiling* section of the Unreal Engine 4 documentation located at [https://docs.unrealengine.com/en-us/Engine/Performance.](https://docs.unrealengine.com/en-us/Engine/Performance)
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个可视化界面，允许我们查看用于绘制每一帧的渲染通道的GPU成本。尽管一开始可能看起来很复杂，但这个界面可以显示哪个视觉元素或功能导致了性能的最大下降，正如该功能在渲染时占用最多的毫秒数所指示的那样。有了这些知识，我们可以优化特定的功能或完全删除它。有关此主题的更多信息，请参阅位于[https://docs.unrealengine.com/en-us/Engine/Performance](https://docs.unrealengine.com/en-us/Engine/Performance)的Unreal
    Engine 4文档中的*性能和性能分析*部分。
- en: Summary
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned several of the known causes of performance issues
    in VR games related to static and skeletal meshes, materials, lighting, and visual
    effects. After discussing the causes, we explored several different solutions
    using some examples from the DJ simulation *Tribe XR* and Epic Games own the cinematic
    VR demo showdown. Lastly, we discussed methods for profiling our own game performance
    to determine whether our game is being limited by the CPU or GPU, and how we can
    use that data to adjust and optimize our application for maximum player comfort.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了与静态和骨骼网格、材质、光照和视觉效果相关的VR游戏中性能问题的几个已知原因。在讨论了原因之后，我们通过一些来自DJ模拟器*Tribe
    XR*和Epic Games自家的电影级VR演示对决的例子，探讨了几个不同的解决方案。最后，我们讨论了如何对自家的游戏性能进行剖析，以确定游戏是否受到CPU或GPU的限制，以及我们如何利用这些数据来调整和优化我们的应用程序，以实现最大程度的玩家舒适度。
- en: In the final chapter, we will discuss the importance of game testing in the
    user experience design process and how to collect that data to make further design
    decisions. We will also learn how to finalize our game through the cooking process
    and prepare it for distribution. Finally, we will discuss the importance of everything
    we learned, how to proceed with the game prototype that we created, and look at
    further resources for continuing to develop VR applications.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一章中，我们将讨论游戏测试在用户体验设计过程中的重要性，以及如何收集这些数据以做出进一步的设计决策。我们还将学习如何通过烹饪过程最终确定我们的游戏，并为其分发做准备。最后，我们将讨论我们所学到的一切的重要性，如何继续进行我们创建的游戏原型，以及查看进一步开发VR应用程序的资源。
