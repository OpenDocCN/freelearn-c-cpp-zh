["```cpp\nshared float local_image_data[ LOCAL_DATA_SIZE ][\n   LOCAL_DATA_SIZE ];\nlocal_image_data[ local_index.y ][ local_index.x ] = \n   luminance( texelFetch( global_textures[ \n   color_image_index ], global_index, 0 ).rgb ); \nbarrier();\n```", "```cpp\nfloat dx = local_image_data[ local_index.y - 1 ][\n    local_index.x - 1 ] - local_image_data[\n    local_index.y - 1 ][ local_index.x + 1 ] +\n    2 * local_image_data[ local_index.y ][\n    local_index.x - 1 ] -\n    2 * local_image_data[ local_index.y ][\n    local_index.x + 1 ] +\n    local_image_data[ local_index.y + 1][\n    local_index.x - 1 ] -\n    local_image_data[ local_index.y + 1 ][\n    local_index.x + 1 ];\nfloat dy = local_image_data[ local_index.y - 1 ][\n    local_index.x - 1 ] +\n    2 * local_image_data[ local_index.y - 1 ][\n    local_index.x ] +\n    local_image_data[ local_index.y - 1 ][\n    local_index.x + 1 ] -\n    local_image_data[ local_index.y + 1 ][\n    local_index.x - 1 ] -\n    2 * local_image_data[ local_index.y + 1 ][\n    local_index.x ] -\n    local_image_data[ local_index.y + 1 ][\n    local_index.x + 1 ];\nfloat d = pow( dx, 2 ) + pow( dy, 2 );\n```", "```cpp\nuint rate = 1 << 2 | 1;\nif ( d > 0.1 ) {\n    rate = 0;\n}\nimageStore( global_uimages_2d[ fsr_image_index ], ivec2(\n    gl_GlobalInvocationID.xy ), uvec4( rate, 0, 0, 0 ) );\n```", "```cpp\nsize_w = 2^( ( texel / 4 ) & 3 )\nsize_h = 2^( texel & 3 )\n```", "```cpp\nVK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_\n    KHR\n```", "```cpp\nVK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR\n```", "```cpp\nVkRenderingFragmentShadingRateAttachmentInfoKHR\nshading_rate_info {\n    VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_SHADING\n        _RATE_ATTACHMENT_INFO_KHR };\nshading_rate_info.imageView = texture->vk_image_view;\nshading_rate_info.imageLayout =\n    VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE\n        _ATTACHMENT_OPTIMAL_KHR;\nshading_rate_info.shadingRateAttachmentTexelSize = { 1, 1 };\nrendering_info.pNext = ( void* )&shading_rate_info;\n```", "```cpp\n    case ( SpvDecorationSpecId ):\n    ```", "```cpp\n    {\n    ```", "```cpp\n        id.binding = data[ word_index + 3 ];\n    ```", "```cpp\n        break;\n    ```", "```cpp\n    }\n    ```", "```cpp\n    switch ( id.op ) {\n    ```", "```cpp\n        case ( SpvOpSpecConstantTrue ):\n    ```", "```cpp\n        case ( SpvOpSpecConstantFalse ):\n    ```", "```cpp\n        case ( SpvOpSpecConstant ):\n    ```", "```cpp\n        case ( SpvOpSpecConstantOp ):\n    ```", "```cpp\n        case ( SpvOpSpecConstantComposite ):\n    ```", "```cpp\n        {\n    ```", "```cpp\n            Id& id_spec_binding = ids[ id.type_index ];\n    ```", "```cpp\n    SpecializationConstant& \n    ```", "```cpp\n       specialization_constant = parse_result-> \n    ```", "```cpp\n       specialization_constants[ \n    ```", "```cpp\n       parse_result-> \n    ```", "```cpp\n       specialization_constants_count \n    ```", "```cpp\n       ]; \n    ```", "```cpp\n            specialization_constant.binding =\n    ```", "```cpp\n                id_spec_binding.binding;\n    ```", "```cpp\n            specialization_constant.byte_stride =\n    ```", "```cpp\n                id.width / 8;\n    ```", "```cpp\n            specialization_constant.default_value =\n    ```", "```cpp\n                id.value;\n    ```", "```cpp\n            SpecializationName& specialization_name =\n    ```", "```cpp\n             parse_result->specialization_names[\n    ```", "```cpp\n                 parse_result->\n    ```", "```cpp\n                 specialization_constants_count ];\n    ```", "```cpp\n            raptor::StringView::copy_to(\n    ```", "```cpp\n                id_spec_binding.name,\n    ```", "```cpp\n                     specialization_name.name, 32 );\n    ```", "```cpp\n            ++parse_result->\n    ```", "```cpp\n                specialization_constants_count;\n    ```", "```cpp\n            break;\n    ```", "```cpp\n        }\n    ```", "```cpp\n    }\n    ```", "```cpp\n    VkSpecializationInfo specialization_info;\n    ```", "```cpp\n    VkSpecializationMapEntry specialization_entries[\n    ```", "```cpp\n        spirv::k_max_specialization_constants ];\n    ```", "```cpp\n    u32 specialization_data[\n    ```", "```cpp\n        spirv::k_max_specialization_constants ];\n    ```", "```cpp\n    specialization_info.mapEntryCount = shader_state->\n    ```", "```cpp\n        parse_result->specialization_constants_count;\n    ```", "```cpp\n    specialization_info.dataSize = shader_state->\n    ```", "```cpp\n        parse_result->specialization_constants_count *\n    ```", "```cpp\n            sizeof( u32 );\n    ```", "```cpp\n    specialization_info.pMapEntries =\n    ```", "```cpp\n        specialization_entries;\n    ```", "```cpp\n    specialization_info.pData = specialization_data;\n    ```", "```cpp\n    for ( u32 i = 0; i < shader_state->parse_result->\n    ```", "```cpp\n        specialization_constants_count; ++i ) {\n    ```", "```cpp\n        const spirv::SpecializationConstant&\n    ```", "```cpp\n            specialization_constant = shader_state->\n    ```", "```cpp\n                parse_result->\n    ```", "```cpp\n                    specialization_constants[ i ];\n    ```", "```cpp\n        cstring specialization_name = shader_state->\n    ```", "```cpp\n            parse_result->specialization_names[ i ].name;\n    ```", "```cpp\n        VkSpecializationMapEntry& specialization_entry =\n    ```", "```cpp\n            specialization_entries[ i ];\n    ```", "```cpp\n        if ( strcmp(specialization_name, \"SUBGROUP_SIZE\")\n    ```", "```cpp\n            == 0 ) {\n    ```", "```cpp\n                       specialization_entry.constantID =\n    ```", "```cpp\n                          specialization_constant.binding;\n    ```", "```cpp\n            specialization_entry.size = sizeof( u32 );\n    ```", "```cpp\n            specialization_entry.offset = i * sizeof( u32 );\n    ```", "```cpp\n            specialization_data[ i ] = subgroup_size;\n    ```", "```cpp\n        }\n    ```", "```cpp\n    }\n    ```", "```cpp\nshader_stage_info.pSpecializationInfo =\n    &specialization_info;\n```"]