["```cpp\n<type>[optional scope]: <description>\n[optional body]\n[optional footer(s)]\n```", "```cpp\n    feat(authentication): add biometric authentication support\n    ```", "```cpp\n    fix(database): resolve race condition in user data retrieval\n    ```", "```cpp\n    docs(readme): update installation instructions\n    ```", "```cpp\n    refactor(ui): simplify button component logic\n    ```", "```cpp\n    style(css): remove unused CSS classes\n    ```", "```cpp\n    test(api): add tests for new user endpoint\n    ```", "```cpp\n    chore(build): update build script for deployment\n    ```", "```cpp\n    feat(database): change database schema for users table\n    ```", "```cpp\n    BREAKING CHANGE: The database schema modification requires resetting the database. This change will affect all services interacting with the users table.\n    ```", "```cpp\n    feat!(api): overhaul authentication system\n    ```", "```cpp\nnpm install --save-dev @commitlint/{cli,config-conventional,prompt-cli}\n```", "```cpp\nmodule.exports = {extends: ['@commitlint/config-conventional']};\n```", "```cpp\nnpm install --save-dev husky\n```", "```cpp\nnpx commitlint --from HEAD~1 --to HEAD --verbose\n⧗   input: feat: add output\n✔   found 0 problems, 0 warnings\n```", "```cpp\ngit commit -m\"Changed output type\"\nnpx commitlint --from HEAD~1 --to HEAD --verbose\n⧗   input: Changed output type\n✖   subject may not be empty [subject-empty]\n✖   type may not be empty [type-empty]\n✖   found 2 problems, 0 warnings\nⓘ   Get help: https://github.com/conventional-changelog/commitlint/#what-is-commitlint\n```", "```cpp\n\"husky\": {\n  \"hooks\": {\n    \"commit-msg\": \"commitlint -E HUSKY_GIT_PARAMS\"\n  }\n}\n```", "```cpp\nmodule.exports = {\n  extends: ['@commitlint/config-conventional'],\n};\n```", "```cpp\nmodule.exports = {\n  rules: {\n    'type-enum': [2, 'always', ['feat', 'fix', 'docs', 'style', 'refactor', 'test', 'chore']],\n  },\n};\n```", "```cpp\nmodule.exports = {\n  rules: {\n    'scope-enum': [2, 'always', ['ui', 'backend', 'api', 'docs']],\n    'subject-full-stop': [2, 'never', '.'],\n  },\n};\n```", "```cpp\n// commitlint-config-myorg.js\nmodule.exports = {\n  rules: {\n    // Custom rules here\n  },\n};\n// In a project's commitlint.config.js\nmodule.exports = {\n  extends: ['commitlint-config-myorg'],\n};\n```", "```cpp\nname: Commitlint\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\njobs:\n  commitlint:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Check out code\n      uses: actions/checkout@v3\n      with:\n        # Fetch at least the immediate parents so that if this is\n        # a pull request then we can checkout the head.\n        fetch-depth: 0\n    - name: Check Commit Message\n      uses: wagoid/commitlint-github-action@v5\n      with:\n        failOnWarnings: true\n```", "```cpp\ngit commit -m\"Changed output type\"\ngit checkout -b exit_message\ngit push origin exit_message\n```", "```cpp\ncurl https://sh.rustup.rs -sSf | sh\n```", "```cpp\ncargo install git-cliff\n```", "```cpp\ngit cliff --init\n```", "```cpp\ngit cliff -o CHANGELOG.md\n```", "```cpp\ngit tag v1.0.0 HEAD\ngit cliff\n```", "```cpp\ngit commit -m\"feat!: make breaking change\"\ngit cliff --bump\n```", "```cpp\na85e2979 - (HEAD -> master) Add RAPIDJSON_BUILD_CXX20 option (6 hours ago) <Brian Rogers>\n2cd6149d - fix Visual Studio 2022 (using /std:c++20) warning warning C5232: in C++20 this comparison ...\n478cd636 - Bad commit (6 hours ago) <f-squirrel>\n25edb27a - tests: Only run valgrind tests if valgrind was found (23 hours ago) <Richard W.M. Jones>\n606791f6 - Fix static_cast in regex.h (23 hours ago) <Dylan Burr>\n5f071d72 - Fix comparision of two doubles (23 hours ago) <Esther Wang>\n060a09a1 - Fix schema regex preprocessor include logic (6 weeks ago) <Bryant Ferguson>\n6089180e - Use correct format for printf (4 months ago) <Esther Wang>\n...\n```", "```cpp\n$ git bisect start\n$ git bisect bad HEAD\n$ git bisect good 6089180e\nBisecting: 3 revisions left to test after this (roughly 2 steps)\n[606791f6662c136ba34f842313b807114580852d] Fix static_cast in regex.h\n```", "```cpp\ncmake --build ./build -j $(nproc) || exit 1\n./build/bin/unittest || exit 1\n```", "```cpp\n[  PASSED  ] 468 tests.\n$ git bisect good\nBisecting: 1 revision left to test after this (roughly 1 step)\n[478cd636a813abe76e32154544b0ec793fdc5566] Bad commit\n```", "```cpp\n[  FAILED  ] 2 tests, listed below:\n[  FAILED  ] BigInteger.Constructor\n[  FAILED  ] BigInteger.LeftShift\n 2 FAILED TESTS\n```", "```cpp\n$ git bisect start\n$ git bisect bad HEAD\n$ git bisect good 6089180e\nBisecting: 3 revisions left to test after this (roughly 2 steps)\n[606791f6662c136ba34f842313b807114580852d] Fix static_cast in regex.h\n$ git bisect run ./test.sh\nrunning  './test.sh'\n... build and test output ...\n[==========] 468 tests from 34 test suites ran. (321 ms total)\n[  PASSED  ] 468 tests.\n478cd636a813abe76e32154544b0ec793fdc5566 is the first bad commit\ncommit 478cd636a813abe76e32154544b0ec793fdc5566\nAuthor: f-squirrel <dmitry.b.danilov@gmail.com>\nDate:   Mon Mar 25 15:18:18 2024 +0200\n    Bad commit\n include/rapidjson/internal/biginteger.h | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\nbisect found first bad commit\n```"]