["```cpp\nvoid AFollowingCharacter::Tick(float DeltaTime)\n{\n    Super::Tick(DeltaTime);\n\n // Get current location\n auto startPos = GetActorLocation();\n\n // Get player's location\n FVector playerPos = GetWorld()->GetFirstPlayerController()->GetPawn()->GetActorLocation();\n\n // Get the direction to move in\n FVector direction = playerPos - startPos;\n direction.Normalize();\n\n // Move the player in that direction\n SetActorLocation(startPos + direction);\n}\n```", "```cpp\nusing UnrealBuildTool;\n\npublic class Chapter_13 : ModuleRules\n{\n  public Chapter_13(ReadOnlyTargetRules Target) : base(Target)\n  {\n    PCHUsage = PCHUsageMode.UseExplicitOrSharedPCHs;\n\n    PublicDependencyModuleNames.AddRange(new string[] { \"Core\", \"CoreUObject\", \"Engine\", \"InputCore\", \"HeadMountedDisplay\" });\n        PublicDependencyModuleNames.AddRange(new string[] { \"AIModule\", \"GameplayTasks\" });\n\n    }\n}\n```", "```cpp\n#pragma once\n\n#include \"CoreMinimal.h\"\n#include \"AIController.h\"\n#include \"BehaviorTree/BehaviorTreeComponent.h\"\n#include \"BehaviorTree/BlackboardComponent.h\"\n#include \"EnemyAIController.generated.h\"\n\n/**\n * \n */\nUCLASS()\nclass CHAPTER_13_API AEnemyAIController : public AAIController\n{\n    GENERATED_BODY()\n\nprivate:\n // AI Component references\n UBehaviorTreeComponent* BehaviorComp;\n UBlackboardComponent* BlackboardComp;\n\npublic:\n AEnemyAIController();\n\n // Called when the controller possesses a Pawn/Character\n virtual void Possess(APawn* InPawn) override;\n\n    FBlackboard::FKey TargetKeyID;\n\n};\n\n```", "```cpp\n#include \"EnemyAIController.h\"\n\nAEnemyAIController::AEnemyAIController()\n{\n    //Initialize components\n    BehaviorComp = CreateDefaultSubobject<UBehaviorTreeComponent>(TEXT(\"BehaviorComp\"));\n    BlackboardComp = CreateDefaultSubobject<UBlackboardComponent>(TEXT(\"BlackboardComp\"));\n}\n\n// Called when the controller possesses a Pawn/Character\nvoid AEnemyAIController::Possess(APawn* InPawn)\n{\n    Super::Possess(InPawn);\n}\n```", "```cpp\n#pragma once\n\n#include \"CoreMinimal.h\"\n#include \"GameFramework/Character.h\"\n#include \"EnemyCharacter.generated.h\"\n\nUCLASS()\nclass CHAPTER_13_API AEnemyCharacter : public ACharacter\n{\n    GENERATED_BODY()\n\npublic:\n    // Sets default values for this character's properties\n    AEnemyCharacter();\n\n UPROPERTY(EditAnywhere, Category = Behavior)\n class UBehaviorTree *EnemyBehaviorTree;\n\nprotected:\n    // Called when the game starts or when spawned\n    virtual void BeginPlay() override;\n\npublic: \n    // Called every frame\n    virtual void Tick(float DeltaTime) override;\n\n    // Called to bind functionality to input\n    virtual void SetupPlayerInputComponent(class UInputComponent* PlayerInputComponent) override;\n\n};\n```", "```cpp\n#include \"EnemyAIController.h\"\n#include \"EnemyCharacter.h\"\n#include \"BehaviorTree/BehaviorTree.h\"\n\nAEnemyAIController::AEnemyAIController()\n{\n    // Initialize components\n    BehaviorComp = CreateDefaultSubobject<UBehaviorTreeComponent>(TEXT(\"BehaviorComp\"));\n    BlackboardComp = CreateDefaultSubobject<UBlackboardComponent>(TEXT(\"BlackboardComp\"));\n}\n\n// Called when the controller possesses a Pawn/Character\nvoid AEnemyAIController::Possess(APawn* InPawn)\n{\n    Super::Possess(InPawn);\n\n // Convert InPawn to EnemyCharacter\n auto Character = Cast<AEnemyCharacter>(InPawn);\n\n // Check if pointers are valid\n if(Character && Character->EnemyBehaviorTree)\n {\n BlackboardComp->InitializeBlackboard(*Character->EnemyBehaviorTree->BlackboardAsset);\n\n TargetKeyID = BlackboardComp->GetKeyID(\"Target\");\n\n BehaviorComp->StartTree(*Character->EnemyBehaviorTree);\n }\n}\n```", "```cpp\n#pragma once\n\n#include \"CoreMinimal.h\"\n#include \"BehaviorTree/BTService.h\"\n#include \"BehaviorTree/BehaviorTreeComponent.h\"\n#include \"BTService_FindPlayer.generated.h\"\n\n/**\n * \n */\nUCLASS()\nclass CHAPTER_13_API UBTService_FindPlayer : public UBTService\n{\n    GENERATED_BODY()\n\npublic:\n UBTService_FindPlayer();\n\n /** update next tick interval\n * this function should be considered as const (don't modify state of object) if node is not instanced! */\n virtual void TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds) override;\n\n};\n```", "```cpp\n#include \"BTService_FindPlayer.h\"\n#include \"EnemyAIController.h\"\n#include \"BehaviorTree/Blackboard/BlackboardKeyType_Object.h\"\n\nUBTService_FindPlayer::UBTService_FindPlayer()\n{\n    bCreateNodeInstance = true;\n}\n\nvoid UBTService_FindPlayer::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds)\n{\n    Super::TickNode(OwnerComp, NodeMemory, DeltaSeconds);\n\n    auto EnemyAIController = Cast<AEnemyAIController>(OwnerComp.GetAIOwner());\n\n    if(EnemyAIController)\n    {\n        auto PlayerPawn = GetWorld()->GetFirstPlayerController()->GetPawn();\n        OwnerComp.GetBlackboardComponent()->SetValue<UBlackboardKeyType_Object>(EnemyAIController->TargetKeyID, PlayerPawn);\n        UE_LOG(LogTemp, Warning, TEXT(\"Target has been set!\"));\n\n    }\n\n}\n```", "```cpp\n#pragma once\n\n#include \"CoreMinimal.h\"\n#include \"BehaviorTree/Tasks/BTTask_BlackboardBase.h\"\n#include \"BTTask_MoveToPlayer.generated.h\"\n\n/**\n * \n */\nUCLASS()\nclass CHAPTER_13_API UBTTask_MoveToPlayer : public UBTTask_BlackboardBase\n{\n    GENERATED_BODY()\n\npublic:\n /** starts this task, should return Succeeded, Failed or InProgress\n * (use FinishLatentTask() when returning InProgress)\n * this function should be considered as const (don't modify state of object) if node is not instanced! */\n virtual EBTNodeResult::Type ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory) override;\n\n};\n```", "```cpp\n#include \"BTTask_MoveToPlayer.h\"\n#include \"EnemyAIController.h\"\n#include \"GameFramework/Character.h\"\n#include \"BehaviorTree/Blackboard/BlackboardKeyType_Object.h\"\n\nEBTNodeResult::Type UBTTask_MoveToPlayer::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory)\n{\n auto EnemyController = Cast<AEnemyAIController>(OwnerComp.GetAIOwner());\n auto Blackboard = OwnerComp.GetBlackboardComponent();\n\n ACharacter * Target = Cast<ACharacter>(Blackboard->GetValue<UBlackboardKeyType_Object>(EnemyController->TargetKeyID));\n\n if(Target)\n {\n EnemyController->MoveToActor(Target, 50.0f);\n return EBTNodeResult::Succeeded;\n }\n\n return EBTNodeResult::Failed;\n}\n```"]