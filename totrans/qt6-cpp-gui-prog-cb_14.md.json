["```cpp\n    #include <QPushButton>\n    #include <QGridLayout>\n    #include <QMessageBox>\n    #include <QElapsedTimer>\n    #include <QDebug>\n    ```", "```cpp\n    MainWindow::MainWindow(QWidget *parent) : QMainWindow(parent), ui(new Ui::MainWindow)\n    {\n        ui->setupUi(this);\n        QElapsedTimer object. We will be using this to measure the performance of our next operation:\n\n    ```", "```cpp\n\n    ```", "```cpp\n        for (int i = 0; i < 40; ++i) {\n            for (int j = 0; j < 15; ++j) {\n                QPushButton* newWidget = new QPushButton();\n                newWidget->setText(\"Button\");\n                layout->addWidget(newWidget, i, j);\n                connect(newWidget, QPushButton::clicked, [this]() {\n                QMessageBox::information(this, \"Clicked\", \"Button has been clicked!\");\n                });\n            }\n        }\n        qDebug() << \"Test GUI:\" << time->elapsed() << \"msec\";\n    ```", "```cpp\n    QPushButton* newWidget = new QPushButton();\n    newWidget->setText(\"Button\");\n    newWidget->setStyleSheet(\"background-color: blue; color: white;\");\n    layout->addWidget(newWidget, i, j);\n    ```", "```cpp\n    #include \"mainwindow.h\"\n    #include <QApplication>\n    #include <QDebug>\n    #include <QElapsedTimer>\n    #include <vector>\n    #include <QVector>\n    ```", "```cpp\n    int testArray(int count) {\n        int sum = 0;\n        int *myarray = new int[count];\n        for (int i = 0; i < count; ++i)\n            myarray[i] = i;\n        for (int j = 0; j < count; ++j)\n            sum += myarray[j];\n        delete [] myarray;\n        return sum;\n    }\n    ```", "```cpp\n    int testVector(int count) {\n        int sum = 0;\n        std::vector<int> myarray;\n        for (int i = 0; i < count; ++i)\n            myarray.push_back(i);\n        for (int j = 0; j < count; ++j)\n            sum += myarray.at(j);\n        return sum;\n    }\n    ```", "```cpp\n    int testQtVector(int count) {\n        int sum = 0;\n        QVector<int> myarray;\n        for (int i = 0; i < count; ++i)\n            myarray.push_back(i);\n        for (int j = 0; j < count; ++j)\n            sum += myarray.at(j);\n        return sum;\n    }\n    ```", "```cpp\n    int main(int argc, char *argv[]) {\n        QApplication a(argc, argv);\n        MainWindow w;\n        w.show();\n        QElapsedTimer* time = new QElapsedTimer;\n        time->start();\n        int lastElapse = 0;\n    ```", "```cpp\n        int result = testArray(100000000);\n        qDebug() << \"Array:\" << (time->elapsed() - lastElapse) << \"msec\";\n        lastElapse = time->elapsed();\n        int result2 = testVector(100000000);\n        qDebug() << \"STL vector:\" << (time->elapsed() - lastElapse) << \"msec\";\n        lastElapse = time->elapsed();\n        int result3 = testQtVector(100000000);\n        qDebug() << \"Qt vector:\" << (time->elapsed() - lastElapse) << \"msec\";\n        lastElapse = time->elapsed();\n    ```", "```cpp\nItem {\n    width: 400\n    height: 400\n    Rectangle {\n    id: rect\n    anchors.fill: parent\n    color: \"green\"\n    }\n    Component.onCompleted: {\n        for (var i = 0; i < 1000; ++i) {\n            console.log(\"red\", rect.color.r);\n            console.log(\"green\", rect.color.g);\n            console.log(\"blue\", rect.color.b);\n            console.log(\"alpha\", rect.color.a);\n        }\n    }\n```", "```cpp\nComponent.onCompleted: {\n    var rectColor = rect.color;\n    for (var i = 0; i < 1000; ++i) {\n        console.log(\"red\", rectColor.r);\n        console.log(\"green\", rectColor.g);\n        console.log(\"blue\", rectColor.b);\n        console.log(\"alpha\", rectColor.a);\n    }\n}\n```", "```cpp\nItem {\n    id: myItem\n    width: 400\n    height: 400\n    property int myValue: 0\n    Text {\n        anchors.fill: parent\n        text: myItem.myValue.toString()\n    }\n    Component.onCompleted: {\n        for (var i = 0; i < 1000; ++i) {\n            myValue += 1;\n        }\n    }\n}\n```", "```cpp\nComponent.onCompleted: {\n    var temp = myValue;\n    for (var i = 0; i < 1000; ++i) {\n        temp += 1;\n    }\n    myValue = temp;\n}\n```", "```cpp\n    Window {\n        id: window\n        visible: true\n        width: 650\n        height: 650\n    ```", "```cpp\n        property int frame: 0;\n        onAfterRendering: { frame++; }\n        Timer {\n        id: timer\n        interval: 1000\n        running: true\n        repeat: true\n        onTriggered: { frame = 0; }\n    }\n    ```", "```cpp\n        Repeater {\n            model: 10\n            delegate:\n            Image {\n            id: tux\n            source: \"tux.png\"\n            sourceSize.width: 50\n            sourceSize.height: 60\n            width: 50\n            height: 60\n            smooth: false\n            antialiasing: false\n            asynchronous: true\n    ```", "```cpp\n            property double startX: Math.random() * 600;\n            property double startY: Math.random() * 600;\n            property double endX: Math.random() * 600;\n            property double endY: Math.random() * 600;\n            property double speed: Math.random() * 3000 + 1000;\n            RotationAnimation on rotation{\n            loops: Animation.Infinite\n            from: 0\n            to: 360\n            duration: Math.random() * 3000 + 1000;\n    }\n    ```", "```cpp\n        SequentialAnimation {\n            running: true\n            loops: Animation.Infinite\n            ParallelAnimation {\n            NumberAnimation {\n            target: tux\n            property: \"x\"\n            from: startX\n            to: endX\n            duration: speed\n            easing.type: Easing.InOutQuad\n        }\n    ```", "```cpp\n        NumberAnimation {\n            target: tux\n            property: \"y\"\n            from: startY\n            to: endY\n            duration: speed\n            easing.type: Easing.InOutQuad\n        }\n    }\n    ```", "```cpp\n        ParallelAnimation {\n            NumberAnimation {\n                target: tux\n                property: \"x\"\n                from: endX\n                to: startX\n                duration: speed\n                easing.type: Easing.InOutQuad\n            }\n    ```", "```cpp\n            NumberAnimation {\n                target: tux\n                property: \"y\"\n                from: endY\n                to: startY\n                duration: speed\n                easing.type: Easing.InOutQuad\n            }\n        }\n    ```", "```cpp\n    Text {\n        property int frame: 0\n        color: \"red\"\n        text: \"FPS: 0 fps\"\n        x: 20\n        y: 20\n        font.pointSize: 20\n    ```", "```cpp\n        Timer {\n            id: fpsTimer\n            repeat: true\n            interval: 1000\n            running: true\n            onTriggered: {\n            parent.text = \"FPS: \" + frame + \" fps\"\n            }\n        }\n    }\n    ```", "```cpp\n    Image {\n        id: tux\n        source: \"tux.png\"\n        //sourceSize.width: 50\n        //sourceSize.height: 60\n        width: 50\n        height: 60\n        smooth: true\n        antialiasing: false\n        asynchronous: false\n    ```"]