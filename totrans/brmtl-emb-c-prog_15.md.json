["```cpp\n#include \"rtc.h\"\n#define PWREN        (1U << 28)\n#define CR_DBP       (1U << 8)\n#define CSR_LSION    (1U << 0)\n#define CSR_LSIRDY   (1U << 1)\n#define BDCR_BDRST   (1U << 16)\n#define BDCR_RTCEN   (1U << 15)\n#define RTC_WRITE_PROTECTION_KEY_1 ((uint8_t)0xCAU)\n#define RTC_WRITE_PROTECTION_KEY_2 ((uint8_t)0x53U)\n#define RTC_INIT_MASK               0xFFFFFFFFU\n#define ISR_INITF                   (1U << 6)\n#define WEEKDAY_FRIDAY              ((uint8_t)0x05U)\n#define MONTH_DECEMBER              ((uint8_t)0x12U)\n#define TIME_FORMAT_PM              (1U << 22)\n#define CR_FMT                      (1U << 6)\n#define ISR_RSF                     (1U << 5)\n#define RTC_ASYNCH_PREDIV           ((uint32_t)0x7F)\n#define RTC_SYNCH_PREDIV            ((uint32_t)0x00F9)\n```", "```cpp\nstatic void rtc_set_asynch_prescaler(uint32_t AsynchPrescaler)\n{\n  MODIFY_REG(RTC->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_\n  PRER_PREDIV_A_Pos);\n}\n```", "```cpp\nstatic void rtc_set_synch_prescaler(uint32_t SynchPrescaler)\n{\n  MODIFY_REG(RTC->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);\n}\n```", "```cpp\nvoid _rtc_enable_init_mode(void)\n{\n    RTC->ISR = RTC_INIT_MASK;\n}\n```", "```cpp\nvoid _rtc_disable_init_mode(void)\n{\n    RTC->ISR = ~RTC_INIT_MASK;\n}\n```", "```cpp\nuint8_t _rtc_isActiveflag_init(void)\n{\n    return ((RTC->ISR & ISR_INITF) == ISR_INITF);\n}\n```", "```cpp\nuint8_t _rtc_isActiveflag_rs(void)\n{\n    return ((RTC->ISR & ISR_RSF) == ISR_RSF);\n}\n```", "```cpp\nstatic uint8_t rtc_init_seq(void)\n{\n    /* Start init mode */\n    _rtc_enable_init_mode();\n    /* Wait till we are in init mode */\n    while (_rtc_isActiveflag_init() != 1) {}\n    return 1;\n}\n```", "```cpp\nstatic uint8_t wait_for_synchro(void)\n{\n    /* Clear RSF */\n    RTC->ISR &= ~ISR_RSF;\n    /* Wait for registers to synchronize */\n    while (_rtc_isActiveflag_rs() != 1) {}\n    return 1;\n}\n```", "```cpp\nstatic uint8_t exit_init_seq(void)\n{\n    /* Stop init mode */\n    _rtc_disable_init_mode();\n    /* Wait for registers to synchronize */\n    return (wait_for_synchro());\n}\n```", "```cpp\nstatic void rtc_date_config(uint32_t WeekDay, uint32_t Day, uint32_t Month, uint32_t Year)\n{\n  register uint32_t temp = 0U;\n  temp = (WeekDay << RTC_DR_WDU_Pos) |\\\n         (((Year & 0xF0U) << (RTC_DR_YT_Pos - 4U)) | \n         ((Year & 0x0FU) << RTC_DR_YU_Pos)) |\\\n         (((Month & 0xF0U) << (RTC_DR_MT_Pos - 4U)) | \n         ((Month & 0x0FU) << RTC_DR_MU_Pos)) |\\\n         (((Day & 0xF0U) << (RTC_DR_DT_Pos - 4U)) | \n         ((Day & 0x0FU) << RTC_DR_DU_Pos));\n  MODIFY_REG(RTC->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT \n  | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);\n}\n```", "```cpp\nstatic void rtc_time_config(uint32_t Format12_24, uint32_t Hours, uint32_t Minutes, uint32_t Seconds)\n{\n  register uint32_t temp = 0U;\n  temp = Format12_24 |\\\n         (((Hours & 0xF0U) << (RTC_TR_HT_Pos - 4U)) | \n         ((Hours & 0x0FU) << RTC_TR_HU_Pos)) |\\\n         (((Minutes & 0xF0U) << (RTC_TR_MNT_Pos - 4U)) | \n         ((Minutes & 0x0FU) << RTC_TR_MNU_Pos)) |\\\n         (((Seconds & 0xF0U) << (RTC_TR_ST_Pos - 4U)) | \n         ((Seconds & 0x0FU) << RTC_TR_SU_Pos));\n  MODIFY_REG(RTC->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT \n  | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);\n}\n```", "```cpp\nvoid rtc_init(void)\n{\n    /* Enable clock access to PWR */\n    RCC->APB1ENR |= PWREN;\n    /* Enable Backup access to config RTC */\n    PWR->CR |= CR_DBP;\n    /* Enable Low Speed Internal (LSI) */\n    RCC->CSR |= CSR_LSION;\n    /* Wait for LSI to be ready */\n    while((RCC->CSR & CSR_LSIRDY) != CSR_LSIRDY) {}\n    /* Force backup domain reset */\n    RCC->BDCR |= BDCR_BDRST;\n    /* Release backup domain reset */\n    RCC->BDCR &= ~BDCR_BDRST;\n    /* Set RTC clock source to LSI */\n    RCC->BDCR &= ~(1U << 8);\n    RCC->BDCR |= (1U << 9);\n    /* Enable the RTC */\n    RCC->BDCR |= BDCR_RTCEN;\n    /* Disable RTC registers write protection */\n    RTC->WPR = RTC_WRITE_PROTECTION_KEY_1;\n    RTC->WPR = RTC_WRITE_PROTECTION_KEY_2;\n    /* Enter the initialization mode */\n    if(rtc_init_seq() != 1)\n    {\n        // Handle initialization failure\n    }\n    /* Set desired date: Friday, December 29th, 2016 */\n    rtc_date_config(WEEKDAY_FRIDAY, 0x29, MONTH_DECEMBER, 0x16);\n    /* Set desired time: 11:59:55 PM */\n    rtc_time_config(TIME_FORMAT_PM, 0x11, 0x59, 0x55);\n    /* Set hour format */\n    RTC->CR |= CR_FMT;\n    /* Set Asynchronous prescaler */\n    rtc_set_asynch_prescaler(RTC_ASYNCH_PREDIV);\n    /* Set Synchronous prescaler */\n    rtc_set_synch_prescaler(RTC_SYNCH_PREDIV);\n    /* Exit the initialization mode */\n    exit_init_seq();\n    /* Enable RTC registers write protection */\n    RTC->WPR = 0xFF;\n}\n```", "```cpp\nRCC->APB1ENR |= PWREN;\n```", "```cpp\nPWR->CR |= CR_DBP;\n```", "```cpp\nRCC->CSR |= CSR_LSION;\n```", "```cpp\nwhile((RCC->CSR & CSR_LSIRDY) != CSR_LSIRDY) {}\n```", "```cpp\nRCC->BDCR |= BDCR_BDRST;\n```", "```cpp\nRCC->BDCR &= ~BDCR_BDRST;\n```", "```cpp\nRCC->BDCR &= ~(1U << 8);\nRCC->BDCR |= (1U << 9);\n```", "```cpp\nRCC->BDCR |= BDCR_RTCEN;\n```", "```cpp\nRTC->WPR = RTC_WRITE_PROTECTION_KEY_1;\nRTC->WPR = RTC_WRITE_PROTECTION_KEY_2;\n```", "```cpp\nif(rtc_init_seq() != 1)\n{\n    // Handle initialization failure\n}\n```", "```cpp\nrtc_date_config(WEEKDAY_FRIDAY, 0x29, MONTH_DECEMBER, 0x16);\n```", "```cpp\nrtc_time_config(TIME_FORMAT_PM, 0x11, 0x59, 0x55);\n```", "```cpp\nRTC->CR |= CR_FMT;\n```", "```cpp\nrtc_set_asynch_prescaler(RTC_ASYNCH_PREDIV);\nrtc_set_synch_prescaler(RTC_SYNCH_PREDIV);\n```", "```cpp\nexit_init_seq();\n```", "```cpp\nRTC->WPR = 0xFF;\n```", "```cpp\nuint8_t rtc_convert_dec2bcd(uint8_t value)\n{\n    return (uint8_t)((((value) / 10U) << 4U) | ((value) % 10U));\n}\n```", "```cpp\nuint8_t rtc_convert_bcd2dec(uint8_t value)\n{\n    return (uint8_t)(((uint8_t)((value) & (uint8_t)0xF0U) >> \n    (uint8_t)0x4U) * 10U + ((value) & (uint8_t)0x0FU));\n}\n```", "```cpp\nuint32_t rtc_date_get_day(void)\n{\n    return (uint32_t)((READ_BIT(RTC->DR, (RTC_DR_DT | RTC_DR_DU))) >> \n    RTC_DR_DU_Pos);\n}\n```", "```cpp\nuint32_t rtc_date_get_year(void)\n{\n    return (uint32_t)((READ_BIT(RTC->DR, (RTC_DR_YT | RTC_DR_YU))) >> \n    RTC_DR_YU_Pos);\n}\n```", "```cpp\n    uint32_t rtc_date_get_month(void)\n    {\n        return (uint32_t)((READ_BIT(RTC->DR, (RTC_DR_MT | RTC_DR_\n        MU))) >> RTC_DR_MU_Pos);\n    }\n    ```", "```cpp\n    uint32_t rtc_time_get_second(void)\n    {\n        return (uint32_t)(READ_BIT(RTC->TR, (RTC_TR_ST | RTC_TR_SU)) \n        >> RTC_TR_SU_Pos);\n    }\n    ```", "```cpp\n    uint32_t rtc_time_get_minute(void)\n    {\n        return (uint32_t)(READ_BIT(RTC->TR, (RTC_TR_MNT | RTC_TR_\n        MNU)) >> RTC_TR_MNU_Pos);\n    }\n    ```", "```cpp\n    uint32_t rtc_time_get_hour(void)\n    {\n        return (uint32_t)((READ_BIT(RTC->TR, (RTC_TR_HT | RTC_TR_\n        HU))) >> RTC_TR_HU_Pos);\n    }\n    ```", "```cpp\n#ifndef RTC_H__\n#define RTC_H__\n#include <stdint.h>\n#include \"stm32f4xx.h\"\nvoid rtc_init(void);\nuint8_t rtc_convert_bcd2dec(uint8_t value);\nuint32_t rtc_date_get_day(void);\nuint32_t rtc_date_get_year(void);\nuint32_t rtc_date_get_month(void);\nuint32_t rtc_time_get_second(void);\nuint32_t rtc_time_get_minute(void);\nuint32_t rtc_time_get_hour(void);\n#endif\n```", "```cpp\n#include <stdio.h>\n#include \"rtc.h\"\n#include \"uart.h\"\n#define BUFF_LEN        20\nuint8_t time_buff[BUFF_LEN] = {0};\nuint8_t date_buff[BUFF_LEN] = {0};\nstatic void display_rtc_calendar(void);\nint main(void)\n{\n    /*Initialize debug UART*/\n    uart_init();\n    /*Initialize rtc*/\n    rtc_init();\n    while(1)\n    {\n        display_rtc_calendar();\n    }\n}\nstatic void display_rtc_calendar(void)\n{\n    /*Display format :  hh : mm : ss*/\n    sprintf((char *)time_buff,\"%.2d :%.2d :%.2d\",rtc_convert_\n    bcd2dec(rtc_time_get_hour()),\n            rtc_convert_bcd2dec(rtc_time_get_minute()),\n            rtc_convert_bcd2dec(rtc_time_get_second()));\n    printf(\"Time : %.2d :%.2d :%.2d\\n\\r\",rtc_convert_bcd2dec(rtc_time_\n    get_hour()),\n            rtc_convert_bcd2dec(rtc_time_get_minute()),\n            rtc_convert_bcd2dec(rtc_time_get_second()));\n    /*Display format :  mm : dd : yy*/\n    sprintf((char *)date_buff,\"%.2d - %.2d - %.2d\",rtc_convert_\n    bcd2dec(rtc_date_get_month()),\n            rtc_convert_bcd2dec(rtc_date_get_day()),\n            rtc_convert_bcd2dec(rtc_date_get_year()));\n    printf(\"Date : %.2d - %.2d - %.2d    \",rtc_convert_bcd2dec(rtc_\n    date_get_month()),\n            rtc_convert_bcd2dec(rtc_date_get_day()),\n            rtc_convert_bcd2dec(rtc_date_get_year()));\n}\n```", "```cpp\n#define BUFF_LEN 20\nuint8_t time_buff[BUFF_LEN] = {0};\nuint8_t date_buff[BUFF_LEN] = {0};\n```", "```cpp\nsprintf((char *)time_buff, \"%.2d :%.2d :%.2d\",\n        rtc_convert_bcd2dec(rtc_time_get_hour()),\n        rtc_convert_bcd2dec(rtc_time_get_minute()),\n        rtc_convert_bcd2dec(rtc_time_get_second()));\nprintf(\"Time : %.2d :%.2d :%.2d\\n\\r\",rtc_convert_bcd2dec(rtc_time_get_hour()),\n            rtc_convert_bcd2dec(rtc_time_get_minute()),\n            rtc_convert_bcd2dec(rtc_time_get_second()));\n```"]