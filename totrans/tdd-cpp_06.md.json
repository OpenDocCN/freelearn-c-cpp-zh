["```cpp\ninline void confirm (\n    bool expected,\n    bool actual,\n    int line)\n{\n    if (actual != expected)\n    {\n        throw BoolConfirmException(expected, line);\n    }\n}\n```", "```cpp\ninline void confirm (\n    bool expected, \n    bool actual,\n    const std::source_location location = \n        std::source_location::current())\n{\n    if (actual != expected)\n    {\n        throw BoolConfirmException(expected, location.line());\n    }\n}\n```", "```cpp\n#include <ostream>\n#include <source_location>\n#include <string_view>\n#include <vector>\n```", "```cpp\n#define CONFIRM_FALSE( actual ) \\\n    MereTDD::confirm(false, actual)\n#define CONFIRM_TRUE( actual ) \\\n    MereTDD::confirm(true, actual)\n#define CONFIRM( expected, actual ) \\\n    MereTDD::confirm(expected, actual)\n```", "```cpp\nTEST(\"Test can be created\")\n{\n}\n```", "```cpp\nTest test123(\"Test can be created\") = [] ()\n{\n};\n```", "```cpp\nTest test123(\"Test can be created\", [] ()\n{\n});\n```", "```cpp\nint main ()\n{\n    Test(\"Test can be created\") = [] ()\n    {\n    };\n    return 0;\n};\n```", "```cpp\nclass TestBase;\ninline std::vector<TestBase *> & getTests ()\n{\n    static std::vector<TestBase *> tests;\n    return tests;\n}\nclass TestBase\n{\npublic:\n    TestBase (std::string_view name)\n    : mName(name), mPassed(true), mConfirmLocation(-1)\n    {\n        getTests().push_back(this);\n    }\n```", "```cpp\ntemplate <typename ExceptionT>\nclass TestExBase : public TestBase\n{\npublic:\n    TestExBase (std::string_view name,\n        std::string_view exceptionName)\n    : TestBase(name), mExceptionName(exceptionName)\n    { }\n    void runEx () override\n    {\n        try\n        {\n            run();\n        }\n        catch (ExceptionT const &)\n        {\n            return;\n        }\n        throw MissingException(mExceptionName);\n    }\nprivate:\n    std::string mExceptionName;\n};\n```", "```cpp\n#define TEST( testName ) \\\nnamespace { \\\nclass MERETDD_CLASS : public MereTDD::TestBase \\\n{ \\\npublic: \\\n    MERETDD_CLASS (std::string_view name) \\\n    : TestBase(name) \\\n    { } \\\n    void run () override; \\\n}; \\\n} /* end of unnamed namespace */ \\\nMERETDD_CLASS MERETDD_INSTANCE(testName); \\\nvoid MERETDD_CLASS::run ()\n```", "```cpp\n#define TEST_EX( testName, exceptionType ) \\\nnamespace { \\\nclass MERETDD_CLASS : public MereTDD::TestExBase<exceptionType> \\\n{ \\\npublic: \\\n    MERETDD_CLASS (std::string_view name, \\\n        std::string_view exceptionName) \\\n    : TestExBase(name, exceptionName) \\\n    { } \\\n    void run () override; \\\n}; \\\n} /* end of unnamed namespace */ \\\nMERETDD_CLASS MERETDD_INSTANCE(testName, #exceptionType); \\\nvoid MERETDD_CLASS::run ()\n```"]