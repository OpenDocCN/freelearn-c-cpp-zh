- en: '*Chapter 7*: Creating a Clap Switch'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第7章*：创建拍手开关'
- en: When it comes to automating the home, one of the most desired features is often
    the ability to switch electronic devices on and off remotely (Colon, 2020). To
    address this, in this chapter – which covers the fifth project in this book –
    we will learn how to build a wireless electronic remote control to turn an LED
    on when two successive clapping sounds are detected using a simple microphone
    (**clap switch**). The next two successive clapping sounds detected will turn
    the LED off. The importance of having a switch clap remote control is that an
    electronic appliance can be turned on and off from anywhere in a room. This characteristic
    makes it of particular interest to the elderly or people with a motor disability.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到家庭自动化时，最希望的功能之一通常是远程开关电子设备的能力（Colon，2020）。为了解决这个问题，在本章——涵盖本书的第五个项目——我们将学习如何构建一个无线电子遥控器，当检测到简单的麦克风（**拍手开关**）的两个连续拍手声音时，它会打开LED。检测到的下一个两个连续拍手声音将关闭LED。拥有一个拍手开关遥控器的重要性在于，电子设备可以从房间的任何地方打开或关闭。这种特性使得它对老年人或肢体残疾人特别感兴趣。
- en: 'This chapter will cover the following main topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主要主题：
- en: Connecting a microphone to a microcontroller board port
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将麦克风连接到微控制器板端口
- en: Coding your clap switch sketch
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写拍手开关草图
- en: Coding a clap switch with two clapping sounds
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写具有两个拍手声音的拍手开关代码
- en: Coding a clap switch with a timer between claps
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写具有拍手间隔计时器的拍手开关代码
- en: Improving the project performance
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提高项目性能
- en: After completing this chapter, you will be able to apply what you have learned
    to projects that need to read data from an analog source, process this data to
    convert it to digital data, and thus be able to use it to automate processes.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本章后，你将能够将所学知识应用于需要从模拟源读取数据、将数据转换为数字数据的项目，从而能够使用它来自动化流程。
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The hardware components that will be needed to develop the clap switch are
    as follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 开发拍手开关所需硬件组件如下：
- en: One breadboard
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个面包板
- en: One electret microphone FC-04 module
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个驻极体麦克风FC-04模块
- en: Seven male-to-male jumper wires
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 七根公对公跳线
- en: One LED
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个LED
- en: One 220-ohm resistor
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个220欧姆电阻
- en: A 5-volt power source
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个5伏电源
- en: 'These components are very common, and there will be no problems in getting
    them easily. On the software side, you will require the Arduino IDE and the GitHub
    repository for this chapter: [https://github.com/PacktPublishing/DIY-Microcontroller-Projects-for-Hobbyists/tree/master/Chapter07](https://github.com/PacktPublishing/DIY-Microcontroller-Projects-for-Hobbyists/tree/master/Chapter07)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这些组件非常常见，而且很容易获得。在软件方面，你需要Arduino IDE和本章的GitHub仓库：[https://github.com/PacktPublishing/DIY-Microcontroller-Projects-for-Hobbyists/tree/master/Chapter07](https://github.com/PacktPublishing/DIY-Microcontroller-Projects-for-Hobbyists/tree/master/Chapter07)
- en: 'The Code in Action video for this chapter can be found here: [https://bit.ly/3h2xjQu](https://bit.ly/3h2xjQu)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的“代码在行动”视频可以在这里找到：[https://bit.ly/3h2xjQu](https://bit.ly/3h2xjQu)
- en: 'To supply the power source, you can use power adapters (*Figure 7.1*) that
    fit into the breadboard rails (these power adapters or breadboard power supplies
    are common and can be purchased at a low price in online stores), can be jumpered
    to provide 3.3 or 5 volts, and include an on/off button:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提供电源，你可以使用适合面包板轨道的电源适配器（*图7.1*），这些电源适配器或面包板电源在网店中很常见，可以跳线提供3.3或5伏，并包含一个开关按钮：
- en: '![Figure 7.1 – Power supply](img/Figure_7.1_B16413.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![图7.1 – 电源](img/Figure_7.1_B16413.jpg)'
- en: Figure 7.1 – Power supply
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.1 – 电源
- en: Additionally, you can use a 9-volt battery. Using these batteries is one of
    the most common options since the 9-volt voltage is appropriate to power up projects
    with microcontrollers such as the Blue Pill STM32.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你可以使用9伏电池。使用这些电池是最常见的选项之一，因为9伏电压适合为带有微控制器如Blue Pill STM32的项目供电。
- en: Connecting a microphone to a microcontroller board port
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将麦克风连接到微控制器板端口
- en: In this section, we are going to learn about the hardware components needed
    to build a clap switch using the **STM32 Blue Pill** and the microphone FC-04
    module.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何使用**STM32 Blue Pill**和麦克风FC-04模块构建拍手开关所需的硬件组件。
- en: However, before we begin connecting the components, we must understand the basics
    of a microphone.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在我们开始连接组件之前，我们必须了解麦克风的基本知识。
- en: Understanding the electret microphone module
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解驻极体麦克风模块
- en: A clap switch uses a microphone to sense the environment while waiting for an
    event that will trigger an action. In this section, we will understand how to
    apply this functionality in a project.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 拍手开关使用麦克风来感知环境，同时等待触发动作的事件。在本节中，我们将了解如何将此功能应用于项目中。
- en: 'We will use a generic microphone module, which is a breakout board with an
    electret condenser microphone (as shown in *Figure 7.2*):'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一个通用的麦克风模块，它是一个带有驻极体电容麦克风的扩展板（如图*图7.2*所示）：
- en: '![Figure 7.2 – Electret microphone board](img/Figure_7.2_B16413.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图7.2 – 驻极体麦克风板](img/Figure_7.2_B16413.jpg)'
- en: Figure 7.2 – Electret microphone board
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.2 – 驻极体麦克风板
- en: Condenser microphones are composed of a diaphragm membrane on a plate, and both
    are conductors. Condensers are essentially capacitors formed of conductors and
    insulation between them. Therefore, when there is a smaller distance between these
    two conductors, a higher capacitance is obtained.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 电容式麦克风由一个放置在板上的振膜膜片组成，两者都是导体。电容器本质上是由导体和它们之间的绝缘体形成的。因此，当这两个导体之间的距离较小时，可以获得更高的电容。
- en: Important note
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Capacitance is the property or capacity that an electronic component has to
    collect and store energy in the form of an electrical charge.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 电容是电子组件收集和存储电能的能力或容量。
- en: The microphone receives the sound, making the diaphragm vibrate. The vibration
    varies the distance between the conductors and changes its capacitance to produce
    a voltage charge, which in turn requires a lot of voltage to maintain, making
    traditional microphones ineffective for projects with microcontroller boards (such
    as the Blue Pill or the Curiosity Nano) in reducing power consumption. To address
    the issue of the high amount of power consumption, electret microphones were developed.
    Electret microphones use a unique polarized material charged during their manufacturing
    process, thus not requiring external voltage (Fox, 2020). With an understanding
    of microphone basics, we will now move on to the steps to connect a microphone
    to a microcontroller board.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 麦克风接收声音，使振膜振动。振动改变导体之间的距离，并改变其电容以产生电压电荷，这反过来又需要大量的电压来维持，使得传统的麦克风在降低微控制器板（如Blue
    Pill或Curiosity Nano）的功耗方面无效。为了解决大量功耗的问题，开发了驻极体麦克风。驻极体麦克风使用在制造过程中充电的独特极化材料，因此不需要外部电压（Fox,
    2020）。在了解麦克风基础知识后，我们现在将进入将麦克风连接到微控制器板的步骤。
- en: Connecting the components
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接组件
- en: 'Now we are going to connect the electronic components to the breadboard, do
    the wiring, and finally connect everything to the STM32 Blue Pill:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将连接电子组件到面包板，进行布线，最后将所有东西连接到STM32 Blue Pill：
- en: In connecting the components, place the electret microphone, the resistor, the
    LED, and the STM32 Blue Pill on a breadboard with enough space to add the wiring
    layer, as shown in *Figure 7.3*. The hardware connections for this project are
    very straightforward:![Figure 7.3 – Components on the breadboard](img/Figure_7.3_B16413.jpg)
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在连接组件时，将驻极体麦克风、电阻、LED和STM32 Blue Pill放置在面包板上，留有足够的空间添加布线层，如图*图7.3*所示。本项目的硬件连接非常简单：![图7.3
    – 面包板上的组件](img/Figure_7.3_B16413.jpg)
- en: Figure 7.3 – Components on the breadboard
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图7.3 – 面包板上的组件
- en: Next, to power up the clap switch with an external power source, connect the
    5-volt pin to the red rail on the breadboard and a ground pin to the blue track,
    as shown in the following photo (*Figure 7.4*):![Figure 7.4 – Connections to the
    power supply](img/Figure_7.4_B16413.jpg)
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，为了使用外部电源启动拍手开关，将5伏引脚连接到面包板上的红色轨道，并将地线引脚连接到蓝色轨道，如图所示（*图7.4*）:![图7.4 – 连接到电源](img/Figure_7.4_B16413.jpg)
- en: Figure 7.4 – Connections to the power supply
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图7.4 – 连接到电源
- en: Connect the ground (**GND**) pin of the sensor to the blue rail (the holes next
    to the blue lines) of the breadboard or a **GND** terminal of the SMT32 Blue Pill.
    Next, you need to connect the voltage (**VCC**) pin to the red rail (the holes
    next to the red lines) of the breadboard, or the **5V** bus of the Blue Pill,
    as shown in the following figure. The sensor generates an analog output, so it
    must be connected to an analog input on the Blue Pill card and connect the output
    pin of the sound sensor to pin **A0** of the Blue Pill, as shown in *Figure 7.5*:![Figure
    7.5 – Microphone connection](img/Figure_7.5_B16413.jpg)
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将传感器的地（**GND**）引脚连接到面包板的蓝色轨道（蓝色线条旁边的孔）或SMT32 Blue Pill的**GND**端子。接下来，你需要将电压（**VCC**）引脚连接到面包板的红色轨道（红色线条旁边的孔），或Blue
    Pill的**5V**总线，如图所示。传感器产生模拟输出，因此必须连接到Blue Pill卡的模拟输入，并将声音传感器的输出引脚连接到Blue Pill的**A0**引脚，如图*图7.5*所示：![Figure
    7.5 – 麦克风连接](img/Figure_7.5_B16413.jpg)
- en: Figure 7.5 – Microphone connection
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图7.5 – 麦克风连接
- en: In this way, the acquisition of the analog signal that comes from the sensor
    will be achieved, and the microcontroller will convert it into digital.
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这样，就可以实现从传感器来的模拟信号的采集，微控制器将其转换为数字信号。
- en: 'To configure the LED, connect the cathode of the LED to a **GND** pin of the
    Blue Pill and the anode to pin **13** of the Blue Pill. The resistor must be between
    these two as this is a digital output pin (see *Figure 7.6*):'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要配置LED，将LED的阴极连接到Blue Pill的**GND**引脚，将阳极连接到Blue Pill的**13**号引脚。电阻必须位于这两个引脚之间，因为这是一个数字输出引脚（见*图7.6*）：
- en: '![Figure 7.6 – LED setup](img/Figure_7.6_B16413.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![Figure 7.6 – LED设置](img/Figure_7.6_B16413.jpg)'
- en: Figure 7.6 – LED setup
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.6 – LED设置
- en: 'Finally, you need to use a power source such as batteries or the ST-LINK connected
    to the USB port of the computer to power up the board. The ST-LINK will also serve
    to upload the scripts to the microcontroller board. *Figure 7.7* summarizes all
    the hardware connections:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你需要使用电池或连接到计算机USB端口的ST-LINK等电源为板子供电。ST-LINK还将用于将脚本上传到微控制器板。*图7.7*总结了所有硬件连接：
- en: '![Figure 7.7 – Circuit for the microphone sensor connection](img/Figure_7.7_B16413.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![Figure 7.7 – 麦克风传感器连接电路](img/Figure_7.7_B16413.jpg)'
- en: Figure 7.7 – Circuit for the microphone sensor connection
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.7 – 麦克风传感器连接电路
- en: The previous figure shows all the connections between the STM32 Blue Pill and
    the electronic components. This figure summarizes the connection steps we just
    completed.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 上一图显示了STM32 Blue Pill和电子组件之间的所有连接。此图总结了我们刚刚完成的连接步骤。
- en: '*Figure 7.8* presents the schematics for this project:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '*图7.8*展示了本项目的电路图：'
- en: '![Figure 7.8 – Schematics for the microphone sensor connection](img/Figure_7.8_B16413.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![Figure 7.8 – 麦克风传感器连接的电路图](img/Figure_7.8_B16413.jpg)'
- en: Figure 7.8 – Schematics for the microphone sensor connection
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.8 – 麦克风传感器连接的电路图
- en: 'The schematics figure shows the electric diagram for the complete project.
    *Figure 7.9* shows how everything is connected in our **do it yourself** (**DIY**)
    clap switch:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 电路图显示了整个项目的电气图。*图7.9*展示了我们在**自己动手做**（**DIY**）的拍手开关中所有部件的连接方式：
- en: '![Figure 7.9 – Clap switch device](img/Figure_7.9_B16413.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![Figure 7.9 – 拍手开关设备](img/Figure_7.9_B16413.jpg)'
- en: Figure 7.9 – Clap switch device
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.9 – 拍手开关设备
- en: '*Figure 7.9* shows how all the finished hardware connections will look.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '*图7.9*显示了所有完成的硬件连接将如何看起来。'
- en: Now, let's move on to the next section, which will detail the essential parts
    of the C code to complete the functionality of the clap switch.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们进入下一节，该节将详细说明C代码的必要部分，以完成拍手开关的功能。
- en: Coding your clap switch sketch
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写你的拍手开关草图
- en: 'In this section, we will develop the program to identify a clap sound from
    a microphone. This sound will turn an LED on and off. Let''s get started:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将开发程序以从麦克风识别拍手声。这个声音将使LED开关。让我们开始吧：
- en: As a first step, we need to define which pins of the Blue Pill card pins will
    be used for input and output. Then, we need to assign the sound threshold level
    for the microphone to detect the sound; this value is in the range `0`-`1023`.
    We are using a value of `300`, so the sound captured by the microphone is loud
    enough to identify a clap and not any background noise (we will show how to select
    an appropriate threshold in the *Improving the project performance* section).
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为第一步，我们需要定义Blue Pill卡片引脚的哪些引脚将被用于输入和输出。然后，我们需要为麦克风分配声音阈值水平以检测声音；这个值在`0`-`1023`范围内。我们使用`300`这个值，所以麦克风捕捉到的声音足够大，可以识别拍手声而不是任何背景噪音（我们将在*改进项目性能*部分展示如何选择合适的阈值）。
- en: 'As can be seen in the following code snippet, the analog reading pin will be
    `0` (labeled `PC13` (labeled `const` keyword to assign its value. Another way
    to do it is with a preprocessor macro using `#define`, as shown in the following
    code snippet:'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如以下代码片段所示，模拟读取引脚将是`0`（标记为`PC13`），使用`const`关键字来分配其值。另一种方法是使用预处理宏`#define`，如下面的代码片段所示：
- en: '[PRE0]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The difference between both forms is that with `#define`, the compiler replaces
    all occurrences with the values before compilation to avoid memory usage in the
    microcontroller and will always have a global scope. In contrast, `const` is a
    constant value variable stored in the microcontroller memory and has a limited
    scope.
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 两者之间的区别在于，使用`#define`时，编译器会在编译前替换所有出现的位置，以避免在微控制器中使用内存，并且始终具有全局作用域。相比之下，`const`是一个存储在微控制器内存中的常量值变量，具有有限的作用域。
- en: Based on best programming practices, the recommended option for type safety
    is the use of constant variables, given that the `#define` directive substitutes
    the macro value disregarding the scope, which can lead to data type problems.
    In contrast, `const` will always be of the same data type that was defined in
    its declaration.
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 基于最佳编程实践，推荐使用常量变量来确保类型安全，因为`#define`指令会替换宏值而不考虑作用域，这可能导致数据类型问题。相比之下，`const`将始终是其声明中定义的相同数据类型。
- en: 'Next, in the `setup()` part, we need to start the serial data transmission
    and assign the speed of the transfer (`9600` bps as a standard value):'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在`setup()`部分，我们需要启动串行数据传输并分配传输速度（以`9600` bps作为标准值）：
- en: '[PRE1]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We also need to configure which pins the microcontroller will use as input
    and output. These values were previously defined in the constants. In the following
    code, the assignment is made to the microcontroller card:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要配置微控制器将使用哪些引脚作为输入和输出。这些值之前已在常量中定义。在以下代码中，赋值是针对微控制器卡的：
- en: '[PRE2]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now comes the `loop()` part in the sketch. It contains two main parts: *the
    reading of the analog input pin* and *the clap detection to turn on the LED*.'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在是草图中的`loop()`部分。它包含两个主要部分：*读取模拟输入引脚*和*检测拍手声以点亮LED*。
- en: 'The `analogRead()` function reads the value of the previously defined input
    pin:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`analogRead()`函数读取先前定义的输入引脚的值：'
- en: '[PRE3]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now we have the read value from the microphone in the `SoundValue` variable;
    the next step will be to compare its value with the defined threshold. If the
    sound input by the microphone is higher than the threshold, the LED will light
    up, and a 1-second pause will occur, in which you can observe that the LED is
    lit. If the detected sound does not exceed the threshold value, the LED will be
    instructed to remain off. In both cases, the serial console will display the status
    of the running script:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们有了麦克风中的`SoundValue`变量中的读数值；下一步将是将其值与定义的阈值进行比较。如果麦克风输入的声音高于阈值，LED灯将亮起，并且将发生1秒的暂停，在这段时间内你可以观察到LED灯是亮着的。如果检测到的声音不超过阈值值，LED灯将被指令保持关闭。在两种情况下，串行控制台将显示正在运行的脚本的状态：
- en: '[PRE4]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now we have the complete code for the first sketch to detect the sound of a
    clap and turn on a LED. Next, we can see the complete sketch, which is available
    in the `Chapter7/clap_switch` folder in the GitHub repository.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了第一个草图检测拍手声并点亮LED的完整代码。接下来，我们可以看到完整的草图，该草图位于GitHub仓库的`Chapter7/clap_switch`文件夹中。
- en: Now that the sketch is complete, you can upload it to the Blue Pill board. To
    test that our project works, just give a clap to see how the LED turns on. Do
    not forget that the breadboard must be powered, either by batteries or connected
    to the computer.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在草图已经完成，你可以将其上传到Blue Pill板。为了测试我们的项目是否工作，只需拍手看看LED灯是如何亮起的。别忘了面包板必须供电，无论是通过电池还是连接到电脑。
- en: So far, we have learned how to read an analog value (sound) from a microphone
    with a microcontroller. During the main loop, the device keeps listening to the
    microphone to detect whether any sound (we will assume the detected sound is a
    clap) is louder than the defined threshold; if so, an LED lights up. If not, the
    microcontroller will keep the LED off.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经学习了如何使用微控制器从麦克风读取模拟值（声音）。在主循环期间，设备持续监听麦克风以检测是否有任何声音（我们将假设检测到的声音是拍手声）比定义的阈值更大；如果是这样，LED灯就会亮起。如果不是，微控制器将保持LED灯关闭。
- en: Next, we are going to modify the sketch to indicate to our clap switch to wait
    for two claps before turning on the LED. For better organization, we will create
    a copy of the code to compare with the original sketch or in case we need to revert
    to the previous version when experiencing an issue with the new code.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将修改草图，让我们的拍手开关在LED灯开启之前等待两次拍手。为了更好的组织，我们将创建代码的副本以与原始草图进行比较，或者在我们遇到新代码问题时需要回滚到上一个版本。
- en: Coding a clap switch with two clapping sounds
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写带有两个拍手声的拍手开关
- en: 'In this section, we will modify our program to identify two clapping sounds
    from the microphone. This will allow us to be more precise before activating the
    remote control:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将修改我们的程序以从麦克风识别两个拍手声。这将使我们能够在激活遥控器之前更加精确：
- en: 'Once we define the constants, we define two variables: the integer type, to
    count the number of claps, and the Boolean type, to know the status of the LED
    (on or off). For a better reading, we have highlighted the changes to the original
    variables'' declaration of the sketch:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们定义了常量，我们定义两个变量：整数类型，用于计数拍手的次数，布尔类型，用于知道LED的状态（开启或关闭）。为了更好的阅读，我们已突出显示草图中原变量声明的更改：
- en: '[PRE5]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We will leave the `setup()` section unchanged and continue to the `loop()`
    section, where we have the most important logic changes. We will modify the instructions
    that are within the conditional sentence that verifies whether the sound registered
    by the microphone is louder than the defined threshold:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将保持`setup()`部分不变，继续到`loop()`部分，那里有最重要的逻辑更改。我们将修改位于验证麦克风记录的声音是否比定义的阈值更大的条件语句中的指令：
- en: '[PRE6]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We need to know whether the total number of claps is `2`, so we must write
    another condition in our sketch to ask whether the `ClapNumber` variable already
    has the two claps registered; if so, it must turn on the LED:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要知道拍手的总次数是否为`2`，因此我们必须在我们的草图中编写另一个条件，询问`ClapNumber`变量是否已经记录了两次拍手；如果是这样，它必须开启LED：
- en: '[PRE7]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now we are ready to test the new sketch on our device, compile it, and load
    it. We can test the code with two consecutive claps, with a short pause between
    them (remember the delay that we programmed).
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在我们已经准备好在我们的设备上测试新的草图，编译它，并加载它。我们可以通过两次连续的拍手来测试代码，两次拍手之间有一个短暂的停顿（记住我们编程的延迟）。
- en: 'As you can perceive, the LED turns on, but it does not turn off. For turning
    off the LED again, we are going to program the functionality to turn off when
    the user gives two more claps. For this, we will require the other variable that
    we define: `LedState`. In it, we will store whether the LED is on or off:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如你所见，LED灯亮了，但它没有熄灭。为了再次熄灭LED，我们将编程功能，当用户再拍两次手时熄灭LED。为此，我们需要另一个我们定义的变量：`LedState`。在其中，我们将存储LED是开启还是关闭的状态：
- en: '[PRE8]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: When the microcontroller detects two claps in a row, the first thing it will
    do is check the state of the variable that stores the LED state using the next
    conditional sentence, `if (LedState)`. As it is a Boolean type variable, it can
    be analyzed directly into the `if` statement without the need for additional operators.
    If the variable has a `TRUE` value, it triggers the `if` block, and if it is `FALSE`,
    it executes the `else` block. So, the preceding code turns on the LED if the variable
    is `TRUE` and turns it off if it is `FALSE`. Finally, within the same condition
    of two claps detected, the `ClapNumber` variable is reset to `0` claps to restart
    the counter and wait for two new claps. The value of the `LedState` variable is
    changed utilizing a negation operator, inverting the value of the Boolean variable;
    if the state was `ON`, the command would turn it into `OFF` and vice versa.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 当微控制器检测到连续两次掌声时，它将首先使用下一个条件语句`if (LedState)`检查存储LED状态的变量的状态。由于它是一个布尔类型变量，可以直接将其分析到`if`语句中，无需额外的运算符。如果变量具有`TRUE`值，它将触发`if`块，如果它是`FALSE`，则执行`else`块。因此，前面的代码在变量为`TRUE`时打开LED，在变量为`FALSE`时关闭它。最后，在检测到两次掌声的同一条件下，`ClapNumber`变量被重置为`0`次掌声以重新启动计数器并等待两次新的掌声。`LedState`变量的值是通过使用否定运算符来改变的，反转布尔变量的值；如果状态是`ON`，命令将把它变成`OFF`，反之亦然。
- en: With this previous step, our project for detecting two continuous claps and
    turning on an LED is complete. The full sketch is shown as follows and is also
    available in the `Chapter7/double_clap_switch` folder in the GitHub repository.
    With the complete sketch for detecting two continuous claps, we can already test
    it with its new functionality. In the beginning, the LED will be off. When you
    clap twice, with a short pause between them, it will light up; clapping twice
    again will turn it off.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个先前的步骤，我们检测两次连续掌声并打开LED的项目就完成了。完整的草图如下所示，也位于GitHub仓库的`Chapter7/double_clap_switch`文件夹中。有了检测两次连续掌声的完整草图，我们就可以测试其新的功能。一开始，LED将是关闭的。当你两次掌声，它们之间有短暂的停顿时，它会亮起；再次连续拍两次手，它会关闭。
- en: Finally, we are going to add a timer to our sketch to indicate to our clap switch
    to wait only 30 seconds between the two claps before turning on the LED. The same
    as this section, we will create a copy of the code and work with the new code.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将向我们的草图添加一个计时器，以指示我们的掌声开关在打开LED之前只等待30秒。与这个部分相同，我们将创建代码的副本并使用新的代码进行工作。
- en: Coding a clap switch with a timer between claps
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写带有掌声之间计时器的掌声开关代码
- en: 'Now, we will add a timer to limit the waiting timeframe between the first and
    second claps:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将添加一个计时器来限制第一次和第二次掌声之间的等待时间框架：
- en: 'Define two new variables, both of the `unsigned long` type, to store the time
    of each clap. The changes to the previous sketch are highlighted:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义两个新的变量，都是`unsigned long`类型，用于存储每次掌声的时间。对之前草图的更改如下所示：
- en: '[PRE9]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'These two highlighted variables will store the milliseconds when a clap is
    detected: one for the first time and another for the second time.'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这两个突出显示的变量将存储检测到掌声时的毫秒数：一个用于第一次，另一个用于第二次。
- en: 'The `setup()` section remains unchanged, and we will continue to the `loop()`
    section to introduce the timer changes. We will add a conditional inside the conditional
    sentence for detecting a clap:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`setup()`部分保持不变，我们将继续到`loop()`部分来介绍计时器的更改。我们将在条件语句内添加一个条件来检测掌声：'
- en: '[PRE10]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'After we identify the two claps, we will assign `millis()` to the `SecondClapEvent`
    variable. Now, we need to write another condition in our script to ask whether
    the time between both claps is less than 30 seconds:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们识别出两次掌声后，我们将`millis()`赋值给`SecondClapEvent`变量。现在，我们需要在我们的脚本中编写另一个条件来询问两次掌声之间的时间是否少于30秒：
- en: '[PRE11]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now we can test the code with two consecutive claps, with a 30-second timeframe
    between them. The full sketch is shown as follows and is also available in the
    GitHub repository folder: `Chapter7/double_clap_switch_timer`.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以通过两次连续的掌声来测试代码，它们之间有30秒的时间框架。完整的草图如下所示，也位于GitHub仓库的`Chapter7/double_clap_switch_timer`文件夹中：
- en: Now that we have completed the sketch with all its functionality, just load
    and execute the sketch to test and validate the functionality.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了具有所有功能的草图，只需加载并执行草图以测试和验证其功能。
- en: In the next section, we will learn how to test the system and provide a useful
    tip to improve the work with analog data.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习如何测试系统并提供一个有用的技巧来提高处理模拟数据的工作效率。
- en: Improving the project performance
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提高项目性能
- en: I mentioned earlier that we were going to talk about the threshold value. In
    general, solutions for projects with analog read set the threshold value to `200`,
    but as you remember, we are using a value of `300` to ensure we are reading a
    clap, not background noise.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我之前提到过，我们将讨论阈值值。一般来说，具有模拟读取的项目将阈值值设置为 `200`，但如您所记得，我们正在使用 `300` 的值以确保我们读取的是拍手声，而不是背景噪音。
- en: 'If you want to know more precisely the value of your clap''s sound, then you
    can use the example script that the IDE provides us. To access this sketch, we
    must go to the **File** menu, then to **Examples**, and choose **Basics**. In
    that section, we will find the **AnalogReadSerial** sketch, as shown in *Figure
    7.10*:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想更精确地知道您拍手声的值，那么您可以使用 IDE 提供的示例脚本。要访问此草图，我们必须转到 **文件** 菜单，然后转到 **示例**，并选择
    **基础**。在该部分中，我们将找到 **AnalogReadSerial** 草图，如图 *7.10* 所示：
- en: '![Figure 7.10 – Analog serial reading example](img/Figure_7.10_B16413.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.10 – 模拟串行读取示例](img/Figure_7.10_B16413.jpg)'
- en: Figure 7.10 – Analog serial reading example
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.10 – 模拟串行读取示例
- en: 'Selecting that menu option will open the `AnalogReadSerial.ino` sketch:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 选择该菜单选项将打开 `AnalogReadSerial.ino` 草图：
- en: '[PRE12]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The previous code introduces an instruction that we have not used so far in
    this project, which is `Serial.println()`. This code displays the data in ASCII
    format in a console called the serial port so that it is understandable to people
    and it includes a line break.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码引入了一个我们在此项目中尚未使用的指令，即 `Serial.println()`。此代码在名为串行端口的控制台中显示数据，以便人们可以理解，并且它包括一个换行符。
- en: By loading and executing the script, we can open the serial monitor of our Arduino
    IDE to see the values that our microphone is generating (in the range `0`-`1023`).
    You just need to try some test claps to find out the value of the sound of your
    clap and use that as a more personalized threshold.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 通过加载和执行脚本，我们可以打开 Arduino IDE 的串行监视器，以查看麦克风生成的值（在 `0`-`1023` 范围内）。您只需尝试一些测试拍手声，以找出您拍手声的值，并将其用作更个性化的阈值。
- en: The previous code blocks sense a microphone to detect two clap sounds and turn
    on and off an LED. The system waits for a 30-second timeframe between each clap
    sound before turning on or off the LED.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码块检测麦克风以检测两个拍手声并打开或关闭一个 LED。系统在每次拍手声之间等待 30 秒的时间框架，然后打开或关闭 LED。
- en: Congratulations, you have now built a wireless electronic remote control!
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜，您现在已经构建了一个无线电子遥控器！
- en: Summary
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: So, what have we learned in this project? Firstly, we learned how to connect
    the microphone module, LED, and resistor to the STM32 Blue Pill microcontroller
    board, which would be controlled by the STM32 microcontroller. We then wrote a
    piece of code to read an analog value and analyze it in our microcontroller. Subsequently,
    we sent a digital signal to turn the LED on or off depending on the embedded rules
    in our STM32\. Lastly, we physically tested the device to understand the real-life
    operation.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们在本项目中学到了什么？首先，我们学习了如何将麦克风模块、LED 和电阻连接到由 STM32 微控制器控制的 STM32 Blue Pill 微控制器板。然后，我们编写了一段代码来读取模拟值并在我们的微控制器中分析它。随后，我们发送了一个数字信号，根据我们
    STM32 中的嵌入式规则打开或关闭 LED。最后，我们物理测试了该设备，以了解其真实世界的操作。
- en: This project gives us the skills to begin to create a remote control to automate
    home appliances and use them according to our needs. For example, you can add
    a relay module and connect it to a lamp so you can turn it on and off from the
    comfort of where you are without the need to reach the lamp switch.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 此项目使我们能够开始创建一个遥控器来自动化家用电器，并根据我们的需求使用它们。例如，您可以添加一个继电器模块并将其连接到灯具，这样您就可以在您所在的地方舒适地打开和关闭灯具，而无需触及灯具开关。
- en: In the next chapter, we will learn how to use the serial monitor feature to
    analyze the outputs that our sketch generates while it is running. We will do
    so by building a gas sensor project with the help of the STM32 microcontroller.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何使用串行监视器功能来分析我们的草图在运行时生成的输出。我们将通过使用 STM32 微控制器构建一个气体传感器项目来实现这一点。
- en: Further reading
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Colon, A. (2020). *The Best Smart Home Devices for 2020*. PCMAG: [https://www.pcmag.com/news/the-best-smart-home-devices-for-2020](https://www.pcmag.com/news/the-best-smart-home-devices-for-2020'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Colon, A. (2020). *2020 年最佳智能家居设备*. PCMAG: [https://www.pcmag.com/news/the-best-smart-home-devices-for-2020](https://www.pcmag.com/news/the-best-smart-home-devices-for-2020)'
- en: )
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: 'Fox, A. (2020). *The Complete Guide to Electret Condenser Microphones*. My
    New Microphone: [https://mynewmicrophone.com/the-complete-guide-to-electret-condenser-microphones/](https://mynewmicrophone.com/the-complete-guide-to-electret-condenser-microphones/'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Fox, A. (2020). *《电容器麦克风完全指南》*. 我的新麦克风：[https://mynewmicrophone.com/the-complete-guide-to-electret-condenser-microphones/](https://mynewmicrophone.com/the-complete-guide-to-electret-condenser-microphones/)
- en: )
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: )
