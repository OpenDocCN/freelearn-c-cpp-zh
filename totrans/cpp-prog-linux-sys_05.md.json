["```cpp\n#include <iostream>\n#include <fcntl.h>\n#include <unistd.h>\n#include <cstring>\nint main() {\n    const int fd{open(\"no-such-file.txt\", O_RDONLY)}; //\n      {1}\n    if (fd == -1) {\n        std::cerr << \"Error opening file: \" <<\n          strerror(errno) << '\\n';\n        std::cerr << \"Error code: \" << errno << '\\n';\n        return  EXIT_FAILURE;\n    }\n    // Do something with the file...\n    if (close(fd) == -1) {\n        std::cerr << \"Error closing file: \" <<\n          strerror(errno) << '\\n';\n        std::cerr << \"Error code: \" << errno << '\\n';\n        return  EXIT_FAILURE;\n    }\n    return 0;\n}\n```", "```cpp\nError opening file: No such file or directory\nError code: 2\n```", "```cpp\n#include <iostream>\n#include <sys/stat.h>\nstd::error_code CreateDirectory(const std::string& dirPath) {\n    std::error_code ecode{};\n    if (mkdir(dirPath.c_str(), 0777) != 0) {\n        ecode = std::error_code{errno,\n          std::generic_category()}; // {1}\n    }\n    return ecode;\n}\nint main() {\n    auto ecode{CreateDirectory(\"/tmp/test\")};\n    if (ecode){ // {2}\n        std::cerr << \"Error 1: \" << ecode.message() <<\n          '\\n';\n    }\n    ecode = CreateDirectory(\"/tmp/test\"); // {3}\n    if (ecode){\n        std::cerr << \"Error 2: \" << ecode.message() <<\n          '\\n';\n    }\n    if (ecode.value() == EEXIST) {\n        std::cout << \"This is platform specific and not\n          portable.\\n\";\n    }\n    return 0;\n}\n```", "```cpp\nError 2: File exists\nThis is platform specific and not portable.\n```", "```cpp\nif (ecode.value() == EEXIST)\n```", "```cpp\nstd::error_code CreateDirectory(const std::string& dirPath) {\n    std::error_code ecode{};\n    if (mkdir(dirPath.c_str(), 0777) != 0) {\n        std::errc cond{errno}; // {1}\n        ecode = std::make_error_code(cond); // {2}\n    }\n    return ecode;\n}\n```", "```cpp\nint main() {\n    auto ecode{CreateDirectory(\"/tmp/test\")};\n    if (ecode){\n        std::cerr << \"Error 1: \" << ecode.message() <<\n          '\\n';\n    }\n    ecode = CreateDirectory(\"/tmp/test\");\n    if (ecode){\n        std::cerr << \"Error 2: \" << ecode.message() <<\n          '\\n';\n    }\n    if (ecode == std::errc::file_exists) { // {3}\n        std::cout << \"This is platform agnostic and is\n          portable.\\n\";\n    }\n    return 0;\n}\n```", "```cpp\nenum class MyFileLibraryError {\n    FileNotFound = 1000,\n    FileAlreadyExists = 2000,\n    FileBusy = 3000,\n    FileTooBig = 4000\n};\n```", "```cpp\necode = std::error_code{errno, std::generic_category()};\n```", "```cpp\nclass MyFileLibraryCategory : public std::error_category {\npublic:\n    const char* name() const noexcept override { // {1}\n        return \"MyFileLibrary\";\n    }\n    std::string message(int ev) const override { // {2}\n        switch (static_cast<MyFileLibraryError>(ev)) {\n        case MyFileLibraryError::FileAlreadyExists:\n            return \"The file already exists\";\n        default:\n            return \"Unsupported error\";\n        }\n    }\n    bool equivalent(int code,\n                    const std::error_condition& condition)\n                      const noexcept override { // {3}\n        switch (static_cast<MyFileLibraryError>(code)) {\n        case MyFileLibraryError::FileAlreadyExists:\n            return condition == std::errc::file_exists; //\n                {4}\n        default:\n            return false;\n        }\n    }\n};\n```", "```cpp\nconst MyFileLibraryCategory my_file_lib_category{}; // {1}\nint main() {\n    std::error_code file_exists{static_cast<int>\n      (MyFileLibraryError::FileAlreadyExists),\n       my_file_lib_category}; // {2}\n    if (file_exists == std::errc::file_exists) { // {3}\n        std::cout << \"Msg: \" << file_exists.message() <<\n          '\\n'; // {4}\n        std::cout << \"Category: \" << file_exists\n          .default_error_condition().category().name() <<\n             '\\n'; // {5}\n    }\n    return 0;\n}\n```", "```cpp\nMsg: The file already exists\nCategory: MyFileLibrary\n```", "```cpp\nvoid CreateDirectory(const std::string& dirPath) { // {1}\n    using namespace std;\n    if (mkdir(dirPath.c_str(), 0777) != 0) {\n        const auto ecode{make_error_code(errc{errno})}; //\n           {2}\n        cout << \"CreateDirectory reports error: \" <<\n          ecode.message() << '\\n';\n        system_error exception{ecode}; // {3}\n        throw exception; // {4}\n    }\n}\n```", "```cpp\nint main() {\n    try {\n        CreateDirectory(\"/tmp/test\"); // First try succeeds\n        CreateDirectory(\"/tmp/test\"); // Second try throws\n    } catch (const std::system_error& se) { // {5}\n        const auto econd{se.code()\n          .default_error_condition()}; // {6}\n        if (econd != std::errc::file_exists) { // {7}\n            std::cerr << \"Unexpected system error: \" <<\n              se.what() << '\\n';\n            throw; // {8}\n        }\n        std::cout << \"Nothing unexpected, safe to\n          continue.\\n\";\n    }\n    return 0;\n}\n```", "```cpp\nCreateDirectory reports error: File exists\nNothing unexpected, safe to continue.\n```", "```cpp\nthrow 42;\n```", "```cpp\nvoid Throw() {\n    using namespace std;\n    throw system_error{make_error_code\n      (errc::bad_file_descriptor)};\n}\n```", "```cpp\nint main() {\n    using namespace std;\n    try {\n        try {\n            Throw(); // {1}\n        } catch (runtime_error e) { // {2}\n            throw e; // {3}\n        }\n    } catch (const exception& e) { // {4}\n        const system_error& se{dynamic_cast<const\n          system_error&>(e)}; // {5}\n        const auto econd{se.code()\n          .default_error_condition()};\n        std::cerr << econd.message() << '\\n';\n    }\n    return 0;\n}\n```", "```cpp\nthrow e;\n```", "```cpp\nterminate called after throwing an instance of 'std::bad_cast'\n  what():  std::bad_cast\n```", "```cpp\ncatch (runtime_error e) {\n    throw e;\n}\n```", "```cpp\nint main() {\n    try {\n        const int fd{open(\"/tmp/cpp-test-file\", O_RDONLY)};\n          // {1}\n        if (fd == -1) { return errno; }\n        // Do something with the file and suddenly\n          something throws {2}\n        if (close(fd) == -1) { return errno; } // {3}\n    } catch (...) {\n        std::cerr << \"Something somewhere went terribly\n          wrong!\\n\";\n        return -1;\n    }\n    return 0;\n}\n```", "```cpp\nvoid Throw() {\n    cout << \"Ops, I need to throw ...\\n\";\n    throw system_error{make_error_code\n      (errc::bad_file_descriptor)};\n}\nint main() {\n    const string_view myFileName{\"/tmp/cpp-test-file\"}; //\n      {1}\n    ofstream theFile(myFileName.data()); // {2}\n    try {\n        file_guard guard(myFileName, O_RDONLY); // {3}\n        const auto fd = guard.getFileDescriptor();\n        Throw(); // {4}\n    } catch (const exception& e) {\n        cout << e.what();\n        return -1;\n    }\n    return 0;\n}\n```", "```cpp\nusing namespace std;\nclass file_guard final {\npublic:\n    file_guard(string_view file, mode_t mode) : // {5}\n        fd{open(file.data(), mode)}\n    {\n        if (fd == -1) {\n            throw system_error\n              {make_error_code(errc{errno})};\n        }\n        cout << \"File '\" << file <<\n        \"' with file descriptor '\" <<\n        fd << \"' is opened.\\n\";\n    }\n    explicit file_guard(const file_guard&) = delete; // {6}\n    file_guard& operator=(const file_guard&) = delete;\n    explicit file_guard(file_guard&& other) noexcept : //\n      {7}\n        fd{move(other.fd)} { other.fd = -1; }\n    file_guard& operator=(file_guard&& other) noexcept\n    {\n        fd = move(other.fd);\n        other.fd = -1;\n        return *this;\n    }\n    int getFileDescriptor() const noexcept { // {8}\n        return fd;\n    }\n    ~file_guard() noexcept { // {9}\n        if (fd != -1) {\n            close(fd);\n            cout << \"File with file descriptor '\" << fd <<\n              \"' is closed.\\n\";\n        }\n    }\nprivate:\n    int fd;\n};\n```"]