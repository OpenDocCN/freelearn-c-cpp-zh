["```cpp\n__attribute__((no_instrument_function))\nvoid __cyg_profile_func_enter(void *this_fn, void *call_site)\n{\n}\n__attribute__((no_instrument_function))\nvoid __cyg_profile_func_exit(void *this_fn, void *call_site)\n{\n} \n```", "```cpp\nextern \"C\" {\n__attribute__((no_instrument_function))\nvoid __cyg_profile_func_enter(void *this_fn, void *call_site)\n{\n    printf(\"entry, %p, %d\", this_fn, DWT_CYCCNT);\n}\n__attribute__((no_instrument_function))\nvoid __cyg_profile_func_exit(void *this_fn, void *call_site)\n{\n    printf(\"exit, %p, %d\", this_fn, DWT_CYCCNT);\n}\n} \n```", "```cpp\n std::vector<std::uint8_t> vec;\n  constexpr std::size_t n_elem = 8;\n  for (std::uint8_t i = 0; i < n_elem; i++) {\n    vec.push_back(i);\n  }\n  const auto print_array = [](uint8_t *arr, std::size_t n) {\n    for (std::size_t i = 0; i < n; i++) {\n      printf(\"%d \", arr[i]);\n    }\n    printf(\"\\r\\n\");\n  };\n  print_array(vec.data(), n_elem); \n```", "```cpp\nvoid *operator new(std::size_t count) {\n  printf(\"%s, size = %ld\\r\\n\", __PRETTY_FUNCTION__, count);\n  return std::malloc(count);\n}\nvoid operator delete(void *ptr) noexcept {\n  printf(\"%s\\r\\n\", __PRETTY_FUNCTION__);\n  std::free(ptr);\n} \n```", "```cpp\nvoid* operator new(std::size_t), size = 1\nvoid* operator new(std::size_t), size = 2\nvoid operator delete(void*)\nvoid* operator new(std::size_t), size = 4\nvoid operator delete(void*)\nvoid* operator new(std::size_t), size = 8\nvoid operator delete(void*) \n```", "```cpp\n vec.reserve(8); \n```", "```cpp\ntemplate<\n    class T,\n    class Allocator = std::allocator<T>\n> class vector; \n```", "```cpp\n using namespace std;\n  using namespace std::pmr;\n  array<uint8_t, sizeof(uint8_t) * 8> buffer{0};\n  monotonic_buffer_resource mbr{buffer.data(), buffer.size()};\n  polymorphic_allocator<uint8_t> pa{&mbr};\n  std::pmr::vector<uint8_t> vec{pa}; \n```", "```cpp\nnamespace pmr {\n    template< class T >\n    using vector = std::vector<T, std::pmr::polymorphic_allocator<T>>;\n} \n```", "```cpp\n#include <cstdio>\n#include <cstdlib>\n#include <array>\n#include <memory_resource>\n#include <vector>\n#include <new>\nvoid *operator new(std::size_t count, std::align_val_t al) {\n  printf(\"%s, size = %ld\\r\\n\", __PRETTY_FUNCTION__, count);\n  return std::malloc(count);\n}\nint main() {\n  using namespace std;\n  using namespace std::pmr;\n  constexpr size_t n_elem = 8;\n  array<uint8_t, sizeof(uint8_t) * 8> buffer{0};\n  monotonic_buffer_resource mbr{buffer.data(), buffer.size()};\n  polymorphic_allocator<uint8_t> pa{&mbr};\n  std::pmr::vector<uint8_t> vec{pa};\n  //vec.reserve(n_elem);\nfor (uint8_t i = 0; i < n_elem; i++) {\n    vec.push_back(i);\n  }\n  for (uint8_t data : buffer) {\n    printf(\"%d \", data);\n  }\n  printf(\"\\r\\n\");\n  return 0;\n} \n```", "```cpp\nvoid* operator new(std::size_t, std::align_val_t), size = 64\n0 0 1 0 1 2 3 0 \n```", "```cpp\n#include <cstdio>\n#include <cstdlib>\n#include <exception>\n#include <array>\nint main() {\n  constexpr auto my_terminate_handler = []() {\n    printf(\"This is my_terminate_handler\\r\\n\");\n    std::abort();\n  };\n  std::set_terminate(my_terminate_handler);\n  std::array<int, 4> arr;\n  for (int i = 0; i < 5; i++) {\n   arr.at(i) = i;\n  }\n  return 0;\n} \n```", "```cpp\n#include <cstdio>\n#include <vector>\n#include <new>\nvoid *operator new(std::size_t count) = delete;\nvoid *operator new[](std::size_t count) = delete;\nvoid *operator new(std::size_t count, std::align_val_t al) = delete;\nvoid *operator new[](std::size_t count, std::align_val_t al) = delete;\nvoid *operator new(std::size_t count, const std::nothrow_t &tag) = delete;\nvoid *operator new[](std::size_t count, const std::nothrow_t &tag) = delete;\nvoid *operator new(std::size_t count, std::align_val_t al, const std::nothrow_t &) = delete;\nvoid *operator new[](std::size_t count, std::align_val_t al,const std::nothrow_t &) = delete;\nint main() {\n  std::vector<int> vec;\n  vec.push_back(123);\n  printf(\"vec[0] = %d\\r\\n\", vec[0]);\n  return 0;\n} \n```", "```cpp\n/usr/include/c++/13/bits/new_allocator.h:143:59: error: use of deleted function 'void* operator new(std::size_t, std::align_val_t)'\n  143 |             return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW (__n * sizeof(_Tp), \n```"]