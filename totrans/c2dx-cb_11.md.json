["```cpp\n    #include \"ZipUtils.h\"\n    ```", "```cpp\n    ZipUtils::setPvrEncryptionKey (0x5f2c492e, 0x635eaaf8, 0xe5a4ee49, 0x32ffe0cf);\n    ```", "```cpp\n    Size visibleSize = Director::getInstance()- >getVisibleSize();\n    Vec2 origin = Director::getInstance()->getVisibleOrigin();\n\n    SpriteFrameCache::getInstance()- >addSpriteFramesWithFile(\"res/encrypted.plist\");\n    auto sprite = Sprite::createWithSpriteFrameName(\"run_01.png\");\n    sprite->setPosition(Vec2(visibleSize/2)+origin);\n    this->addChild(sprite);\n    ```", "```cpp\n//#ifndef NOUNCRYPT\n//        #define NOUNCRYPT\n//#endif\n```", "```cpp\n#include \"CCPlatformDefine.h\"\n```", "```cpp\n#include \"platform/CCPlatformDefine.h\"\n```", "```cpp\n#include \"external/unzip/unzip.h\"\n```", "```cpp\n#define BUFFER_SIZE    8192\n#define MAX_FILENAME   512\n\nbool HelloWorld::uncompress(const char* password)\n{\n    // Open the zip file\n    std::string outFileName = FileUtils::getInstance()- \n    >fullPathForFilename(\"encrypt.zip\"); \n    unzFile zipfile = unzOpen(outFileName.c_str()); \n    int ret = unzOpenCurrentFilePassword(zipfile, password); \n    if (ret!=UNZ_OK) { CCLOG(\"can not open zip file %s\", outFileName.c_str()); \n        return false;\n    }\n\n    // Get info about the zip file\n    unz_global_info global_info;\n    if (unzGetGlobalInfo(zipfile, &global_info) != UNZ_OK) {\n        CCLOG(\"can not read file global info of %s\", \n        outFileName.c_str());\n        unzClose(zipfile);\n        return false;\n    }\n\n    CCLOG(\"start uncompressing\");\n\n    // Loop to extract all files.\n    uLong i;\n    for (i = 0; i < global_info.number_entry; ++i) {\n        // Get info about current file.\n        unz_file_info fileInfo;\n        char fileName[MAX_FILENAME];\n        if (unzGetCurrentFileInfo(zipfile, &fileInfo, fileName, \n        MAX_FILENAME, nullptr, 0, nullptr,  0) != UNZ_OK) {\n            CCLOG(\"can not read file info\");\n            unzClose(zipfile);\n            return false;\n        }\n\n        CCLOG(\"filename = %s\", fileName);\n\n        unzCloseCurrentFile(zipfile);\n\n        // Goto next entry listed in the zip file.\n        if ((i+1) < global_info.number_entry) {\n            if (unzGoToNextFile(zipfile) != UNZ_OK) {\n                CCLOG(\"can not read next file\");\n                unzClose(zipfile);\n                return false;\n            }\n        }\n    }\n\n    CCLOG(\"end uncompressing\");\n    unzClose(zipfile);\n\n    return true;\n}\n```", "```cpp\nthis->uncompress(\"cocos2d-x\");\n```", "```cpp\n    unzFile zipfile = unzOpen(outFileName.c_str());\n    ```", "```cpp\n    int ret = unzOpenCurrentFilePassword(zipfile, password);\n    if (ret!=UNZ_OK) {\n        CCLOG(\"can not open zip file %s\", outFileName.c_str());\n        return false;\n    }\n    ```", "```cpp\n    LOCAL_PATH := $(call my-dir)\n    include $(CLEAR_VARS)\n    LOCAL_MODULE := wxsqlite3_static\n    LOCAL_MODULE_FILENAME := libwxsqlite3\n    LOCAL_CFLAGS += -DSQLITE_HAS_CODEC\n    LOCAL_SRC_FILES := src/sqlite3secure.c\n    LOCAL_EXPORT_C_INCLUDES := $(LOCAL_PATH)/src\n    LOCAL_C_INCLUDES := $(LOCAL_PATH)/src\n    include $(BUILD_STATIC_LIBRARY)\n    ```", "```cpp\n    LOCAL_PATH := $(call my-dir)\n    include $(CLEAR_VARS)\n\n    LOCAL_MODULE := cocos_localstorage_static\n\n    LOCAL_MODULE_FILENAME := liblocalstorage\n\n    LOCAL_SRC_FILES := LocalStorage.cpp\n\n    LOCAL_EXPORT_C_INCLUDES := $(LOCAL_PATH)/..\n\n    LOCAL_C_INCLUDES := $(LOCAL_PATH)/../..\n\n    LOCAL_CFLAGS += -Wno-psabi\n    LOCAL_CFLAGS += -DSQLITE_HAS_CODEC\n    LOCAL_EXPORT_CFLAGS += -Wno-psabi\n\n    LOCAL_WHOLE_STATIC_LIBRARIES := cocos2dx_internal_static\n    LOCAL_WHOLE_STATIC_LIBRARIES += wxsqlite3_static\n\n    include $(BUILD_STATIC_LIBRARY)\n\n    $(call import-module,.)\n    ```", "```cpp\n    //#if (CC_TARGET_PLATFORM != CC_PLATFORM_ANDROID)\n    ```", "```cpp\n    //#endif // #if (CC_TARGET_PLATFORM != CC_PLATFORM_ANDROID)\n    ```", "```cpp\n    LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                       ../../Classes/AppDelegate.cpp \\\n                       ../../Classes/HelloWorldScene.cpp \\\n                       ../../cocos2d/external/wxsqlite/src/sqlite3secure.c\n\n    LOCAL_C_INCLUDES := $(LOCAL_PATH)/../../Classes\n    LOCAL_C_INCLUDES += $(LOCAL_PATH)/../../cocos2d/external/wxsqlite/src/\n    LOCAL_CFLAGS += -DSQLITE_HAS_CODEC\n    ```", "```cpp\n    #include \"sqlite3.h\"\n    ```", "```cpp\n    std::string dbname = \"data.db\";\n    std::string path = FileUtils::getInstance()->getWritablePath() + dbname;\n    CCLOG(\"%s\", path.c_str());\n\n    sqlite3 *database = nullptr;\n    if ((sqlite3_open(path.c_str(), &database) != SQLITE_OK)) {\n        sqlite3_close(database);\n        CCLOG(\"open error\");\n    } else {\n        const char* key = \"pass_phrase\";\n        sqlite3_key(database, key, (int)strlen(key));\n\n        // sql: create table\n        char create_sql[] = \"CREATE TABLE sample ( \"\n        \"               id     INTEGER PRIMARY KEY, \"\n        \"               key    TEXT    NOT NULL,    \"\n        \"               value  INTEGER NOT NULL     \"\n        \"             )                             \";\n\n        // create table\n        sqlite3_exec(database, create_sql, 0, 0, NULL);\n\n        // insert data\n        char insert_sql[] = \"INSERT INTO sample ( id, key, value )\"\n        \"            values (%d, '%s', '%d')     \";\n\n        char insert_record[3][256];\n        sprintf(insert_record[0],insert_sql,0,\"test\",300);\n        sprintf(insert_record[1],insert_sql,1,\"hoge\",100);\n        sprintf(insert_record[2],insert_sql,2,\"foo\",200);\n\n        for(int i = 0; i < 3; i++ ) {\n            sqlite3_exec(database, insert_record[i], 0, 0, NULL);\n        }\n\n        sqlite3_reset(stmt);\n        sqlite3_finalize(stmt);\n        sqlite3_close(database);\n    }\n    ```", "```cpp\n    std::string dbname = \"data.db\";\n    std::string path = FileUtils::getInstance()->getWritablePath() + dbname;\n    CCLOG(\"%s\", path.c_str());\n\n    sqlite3 *database = nullptr;\n    if ((sqlite3_open(path.c_str(), &database) != SQLITE_OK)) {\n        sqlite3_close(database);\n        CCLOG(\"open error\");\n    } else {\n        const char* key = \"pass_phrase\";\n        sqlite3_key(database, key, (int)strlen(key));\n\n        // select data\n        sqlite3_stmt *stmt = nullptr;\n\n        std::string sql = \"SELECT value FROM sample WHERE key='test'\";\n        if (sqlite3_prepare_v2(database, sql.c_str(), -1, &stmt, NULL) == SQLITE_OK) {\n            if (sqlite3_step(stmt) == SQLITE_ROW) {\n                int value = sqlite3_column_int(stmt, 0);\n                CCLOG(\"value = %d\", value);\n            } else {\n                CCLOG(\"error , error=%s\", sqlite3_errmsg(database));\n            }\n        }\n\n        sqlite3_reset(stmt);\n        sqlite3_finalize(stmt);\n        sqlite3_close(database);\n    }\n    ```", "```cpp\n    const char* key = \"pass_phrase\";\n    sqlite3_key(database, key, (int)strlen(key));\n    ```", "```cpp\n$ sqlite3 data.db \nSQLite version 3.8.4.3 2014-04-03 16:53:12\nEnter \".help\" for usage hints.\nsqlite> .schema\nError: file is encrypted or is not a database\nsqlite>\n\n```", "```cpp\n\"file is encrypted or is not a database\".\n\n```", "```cpp\n    Count.h\n    class Count : public cocos2d::Label\n    {\n    private:\n        int _count;\n        void countUp(float dt);\n    public:\n        ~Count();\n        virtual bool init();\n        CREATE_FUNC(Count);\n    };\n    Count.cpp\n    Count::~Count()\n    {\n        this->getEventDispatcher()- >removeCustomEventListeners(\"TimeCount\");\n    }\n\n    bool Count::init()\n    {\n        if (!Label::init()) {\n            return false;\n        }\n\n        _count = 0;\n\n        this->setString(\"0\");\n        this->setFontScale(2.0f);\n\n        this->getEventDispatcher()- >addCustomEventListener(\"TimeCount\", [=](EventCustom* event) { this->countUp(0); });\n\n        return true;\n    }\n\n    void Count::countUp(float dt)\n    {\n        _count++;\n        this->setString(StringUtils::format(\"%d\", _count));\n    }\n    ```", "```cpp\n    bool HelloWorld::init()\n    {\n        if ( !Layer::init() )\n        {\n            return false;\n        }\n\n        auto listener = EventListenerTouchOneByOne::create();\n        listener->setSwallowTouches(_swallowsTouches);\n        listener->onTouchBegan = C_CALLBACK_2(HelloWorld::onTouchBegan, this);\n        this->getEventDispatcher()- >addEventListenerWithSceneGraphPriority(listener, this);\n\n        this->schedule(schedule_selector(HelloWorld::countUp), 1.0f);\n\n        return true;\n    }\n\n    bool HelloWorld::onTouchBegan(cocos2d::Touch *touch, cocos2d::Event *unused_event) {\n        auto countLabel = Count::create(); this->addChild(countLabel); countLabel->setPosition(touch->getLocation()); \n        return true; }\n\n    void HelloWorld::countUp(float dt)\n    {\n        this->getEventDispatcher()- >dispatchCustomEvent(\"TimeCount\"); }\n    ```", "```cpp\n    this->getEventDispatcher()- >addCustomEventListener(\"TimeCount\", [=](EventCustom* event) {\n        this->countUp(0);\n    });\n    ```", "```cpp\n    this->getEventDispatcher()- >removeCustomEventListeners(\"TimeCount\");\n    ```", "```cpp\n    this->getEventDispatcher()- >dispatchCustomEvent(\"TimeCount\");\n    ```", "```cpp\n    void Count::countUp(float dt){\n        _count++;\n        this->setString(StringUtils::format(\"%d\", _count));\n    }\n    ```", "```cpp\nbool Count::init()\n{\n    if (!Label::init()) {\n        return false;\n    }\n\n    _count = 0;\n\n    this->setString(\"0\");\n    this->setFontScale(2.0f);\n    this->schedule(schedule_selector(Count::countUp), 1.0f); \n    return true;\n}\n```", "```cpp\n #include \"network/HttpClient.h\"\n```", "```cpp\n<user-permission android:name=\"android.permission.INTERNET\" />\n```", "```cpp\nauto request = new network::HttpRequest();\nrequest->setUrl(\"http://google.com/ \");\nrequest->setRequestType(network::HttpRequest::Type::GET);\nrequest->setResponseCallback([](network::HttpClient* sender, network::HttpResponse* response){\n    if (!response->isSucceed()) {\n        CCLOG(\"error\");\n        return;\n    }\n\n    std::vector<char>* buffer = response->getResponseData();\n    for (unsigned int i = 0; i <buffer-> size (); i ++) {\n        printf(\"%c\", (* buffer)[i]);\n    }\n    printf(\"\\n\");\n});\n\nnetwork::HttpClient::getInstance()->send(request);\nrequest->release();\n```", "```cpp\n    auto request = new network::HttpRequest();\n    ```", "```cpp\n    request->setUrl(\"http://google.com/ \"); request->setRequestType(network::HttpRequest::Type::GET);\n    ```", "```cpp\n    request->setResponseCallback([](network::HttpClient* \n    sender, network::HttpResponse* response){ \n        if (!response->isSucceed()) { \n            CCLOG(\"error\"); \n            return;\n        }\n\n        std::vector<char>* buffer = response- >getResponseData(); \n        for (unsigned int i = 0; i <buffer-> size (); i ++) { \n            printf(\"%c\", (* buffer)[i]); \n        }\n        printf(\"\\n\");\n    });\n    ```", "```cpp\n    network::HttpClient::getInstance()->send(request);\n    ```", "```cpp\n    request->release();\n    ```", "```cpp\nauto request = new network::HttpRequest();\nrequest- >setUrl(\"https://www.google.co.jp/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png\"); \nrequest->setRequestType(network::HttpRequest::Type::GET); \nrequest->setResponseCallback([&](network::HttpClient* sender, \nnetwork::HttpResponse* response){ \n    if (!response->isSucceed()) { \n        CCLOG(\"error\");\n        return;\n    }\n\n    std::vector<char>* buffer = response->getResponseData(); \n    std::string path = FileUtils::getInstance()->getWritablePath() \n+ \"image.png\"; \n    FILE* fp = fopen(path.c_str(), \"wb\");\n    fwrite(buffer->data(), 1, buffer->size(), fp);\n    fclose(fp);\n\n    auto size = Director::getInstance()->getWinSize();\n    auto sprite = Sprite::create(path);\n    sprite->setPosition(size/2);\n    this->addChild(sprite);\n});\n\nnetwork::HttpClient::getInstance()->send(request);\nrequest->release();\n```"]