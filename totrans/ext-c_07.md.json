["```cpp\ntypedef struct {\n  char name[32];\n  char surname[32];\n  unsigned int age;\n} person_t;\n```", "```cpp\nclass Person {\npublic:\n  std::string name;\n  std::string family;\n  uint32_t age;\n};\n```", "```cpp\n#ifndef EXTREME_C_EXAMPLES_CHAPTER_7_1_CAR_H\n#define EXTREME_C_EXAMPLES_CHAPTER_7_1_CAR_H\nstruct car_t;\n// Memory allocator\nstruct car_t* car_new();\n// Constructor\nvoid car_ctor(struct car_t*);\n// Destructor\nvoid car_dtor(struct car_t*);\n// Behavior functions\nvoid car_start(struct car_t*);\nvoid car_stop(struct car_t*);\ndouble car_get_engine_temperature(struct car_t*);\n#endif\n```", "```cpp\n#ifndef EXTREME_C_EXAMPLES_CHAPTER_7_1_ENGINE_H\n#define EXTREME_C_EXAMPLES_CHAPTER_7_1_ENGINE_H\nstruct engine_t;\n// Memory allocator\nstruct engine_t* engine_new();\n// Constructor\nvoid engine_ctor(struct engine_t*);\n// Destructor\nvoid engine_dtor(struct engine_t*);\n// Behavior functions\nvoid engine_turn_on(struct engine_t*);\nvoid engine_turn_off(struct engine_t*);\ndouble engine_get_temperature(struct engine_t*);\n#endif\n```", "```cpp\n#include <stdlib.h>\n// Car is only able to work with the public interface of Engine\n#include \"ExtremeC_examples_chapter7_1_engine.h\"\ntypedef struct {\n  // Composition happens because of this attribute\n  struct engine_t* engine;\n} car_t;\ncar_t* car_new() {\n  return (car_t*)malloc(sizeof(car_t));\n}\nvoid car_ctor(car_t* car) {\n  // Allocate memory for the engine object\n  car->engine = engine_new();\n  // Construct the engine object\n  engine_ctor(car->engine);\n}\nvoid car_dtor(car_t* car) {\n  // Destruct the engine object\n  engine_dtor(car->engine);\n  // Free the memory allocated for the engine object\n  free(car->engine);\n}\nvoid car_start(car_t* car) {\n  engine_turn_on(car->engine);\n}\nvoid car_stop(car_t* car) {\n  engine_turn_off(car->engine);\n}\ndouble car_get_engine_temperature(car_t* car) {\n  return engine_get_temperature(car->engine);\n}\n```", "```cpp\n#include <stdlib.h>\ntypedef enum {\n  ON,\n  OFF\n} state_t;\ntypedef struct {\n  state_t state;\n  double temperature;\n} engine_t;\n// Memory allocator\nengine_t* engine_new() {\n  return (engine_t*)malloc(sizeof(engine_t));\n}\n// Constructor\nvoid engine_ctor(engine_t* engine) {\n  engine->state = OFF;\n  engine->temperature = 15;\n}\n// Destructor\nvoid engine_dtor(engine_t* engine) {\n  // Nothing to do\n}\n// Behavior functions\nvoid engine_turn_on(engine_t* engine) {\n  if (engine->state == ON) {\n    return;\n  }\n  engine->state = ON;\n  engine->temperature = 75;\n}\nvoid engine_turn_off(engine_t* engine) {\n  if (engine->state == OFF) {\n    return;\n  }\n  engine->state = OFF;\n  engine->temperature = 15;\n}\ndouble engine_get_temperature(engine_t* engine) {\n  return engine->temperature;\n}\n```", "```cpp\n#include <stdio.h>\n#include <stdlib.h>\n#include \"ExtremeC_examples_chapter7_1_car.h\"\nint main(int argc, char** argv) {\n  // Allocate memory for the car object\n  struct car_t *car = car_new();\n  // Construct the car object\n  car_ctor(car);\n  printf(\"Engine temperature before starting the car: %f\\n\",\n          car_get_engine_temperature(car));\n  car_start(car);\n  printf(\"Engine temperature after starting the car: %f\\n\",\n          car_get_engine_temperature(car));\n  car_stop(car);\n  printf(\"Engine temperature after stopping the car: %f\\n\",\n          car_get_engine_temperature(car));\n  // Destruct the car object\n  car_dtor(car);\n  // Free the memory allocated for the car object\n  free(car);\n  return 0;\n}\n```", "```cpp\n$ gcc -c ExtremeC_examples_chapter7_1_engine.c -o engine.o\n$ gcc -c ExtremeC_examples_chapter7_1_car.c -o car.o\n$ gcc -c ExtremeC_examples_chapter7_1_main.c -o main.o\n$ gcc engine.o car.o main.o -o ex7_1.out\n$ ./ex7_1.out\nEngine temperature before starting the car: 15.000000\nEngine temperature after starting the car: 75.000000\nEngine temperature after stopping the car: 15.000000\n$\n```", "```cpp\n#ifndef EXTREME_C_EXAMPLES_CHAPTER_7_2_GUN_H\n#define EXTREME_C_EXAMPLES_CHAPTER_7_2_GUN_H\ntypedef int bool_t;\n// Type forward declarations\nstruct gun_t;\n// Memory allocator\nstruct gun_t* gun_new();\n// Constructor\nvoid gun_ctor(struct gun_t*, int);\n// Destructor\nvoid gun_dtor(struct gun_t*);\n// Behavior functions\nbool_t gun_has_bullets(struct gun_t*);\nvoid gun_trigger(struct gun_t*);\nvoid gun_refill(struct gun_t*);\n#endif\n```", "```cpp\n#ifndef EXTREME_C_EXAMPLES_CHAPTER_7_2_PLAYER_H\n#define EXTREME_C_EXAMPLES_CHAPTER_7_2_PLAYER_H\n// Type forward declarations\nstruct player_t;\nstruct gun_t;\n// Memory allocator\nstruct player_t* player_new();\n// Constructor\nvoid player_ctor(struct player_t*, const char*);\n// Destructor\nvoid player_dtor(struct player_t*);\n// Behavior functions\nvoid player_pickup_gun(struct player_t*, struct gun_t*);\nvoid player_shoot(struct player_t*);\nvoid player_drop_gun(struct player_t*);\n#endif\n```", "```cpp\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include \"ExtremeC_examples_chapter7_2_gun.h\"\n// Attribute structure\ntypedef struct {\n  char* name;\n  struct gun_t* gun;\n} player_t;\n// Memory allocator\nplayer_t* player_new() {\n  return (player_t*)malloc(sizeof(player_t));\n}\n// Constructor\nvoid player_ctor(player_t* player, const char* name) {\n  player->name =\n      (char*)malloc((strlen(name) + 1) * sizeof(char));\n  strcpy(player->name, name);\n  // This is important. We need to nullify aggregation pointers\n  // if they are not meant to be set in constructor.\n  player->gun = NULL;\n}\n// Destructor\nvoid player_dtor(player_t* player) {\n  free(player->name);\n}\n// Behavior functions\nvoid player_pickup_gun(player_t* player, struct gun_t* gun) {\n  // After the following line the aggregation relation begins.\n  player->gun = gun;\n}\nvoid player_shoot(player_t* player) {\n  // We need to check if the player has picked up the gun\n  // otherwise, shooting is meaningless\n  if (player->gun) {\n    gun_trigger(player->gun);\n  } else {\n    printf(\"Player wants to shoot but he doesn't have a gun!\");\n    exit(1);\n  }\n}\nvoid player_drop_gun(player_t* player) {\n  // After the following line the aggregation relation\n  // ends between two objects. Note that the object gun\n  // should not be freed since this object is not its\n  // owner like composition.\n  player->gun = NULL;\n}\n```", "```cpp\n#include <stdlib.h>\ntypedef int bool_t;\n// Attribute structure\ntypedef struct {\n  int bullets;\n} gun_t;\n// Memory allocator\ngun_t* gun_new() {\n  return (gun_t*)malloc(sizeof(gun_t));\n}\n// Constructor\nvoid gun_ctor(gun_t* gun, int initial_bullets) {\n  gun->bullets = 0;\n  if (initial_bullets > 0) {\n    gun->bullets = initial_bullets;\n  }\n}\n// Destructor\nvoid gun_dtor(gun_t* gun) {\n  // Nothing to do\n}\n// Behavior functions\nbool_t gun_has_bullets(gun_t* gun) {\n  return (gun->bullets > 0);\n}\nvoid gun_trigger(gun_t* gun) {\n  gun->bullets--;\n}\nvoid gun_refill(gun_t* gun) {\n  gun->bullets = 7;\n}\n```", "```cpp\n#include <stdio.h>\n#include <stdlib.h>\n#include \"ExtremeC_examples_chapter7_2_player.h\"\n#include \"ExtremeC_examples_chapter7_2_gun.h\"\nint main(int argc, char** argv) {\n  // Create and constructor the gun object\n  struct gun_t* gun = gun_new();\n  gun_ctor(gun, 3);\n  // Create and construct the player object\n  struct player_t* player = player_new();\n  player_ctor(player, \"Billy\");\n  // Begin the aggregation relation.\n  player_pickup_gun(player, gun);\n  // Shoot until no bullet is left.\n  while (gun_has_bullets(gun)) {\n    player_shoot(player);\n  }\n  // Refill the gun\n  gun_refill(gun);\n  // Shoot until no bullet is left.\n  while (gun_has_bullets(gun)) {\n    player_shoot(player);\n  }\n  // End the aggregation relation.\n  player_drop_gun(player);\n  // Destruct and free the player object\n  player_dtor(player);\n  free(player);\n  // Destruct and free the gun object\n  gun_dtor(gun);\n  free(gun);\n  return 0;\n}\n```", "```cpp\n$ gcc -c ExtremeC_examples_chapter7_2_gun.c -o gun.o $ gcc -c ExtremeC_examples_chapter7_2_player.c -o player.o $ gcc -c ExtremeC_examples_chapter7_2_main.c -o main.o $ gcc gun.o player.o main.o -o ex7_2.out $ ./ex7_2.out $\n```"]