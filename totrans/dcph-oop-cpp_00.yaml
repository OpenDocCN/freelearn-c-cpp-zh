- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Companies choose to utilize C++ for its speed; however, object-oriented (OO)
    software design leads to more robust code that is easier to modify and maintain.
    Understanding how to utilize C++ as an object-oriented language is, therefore,
    essential. Programming in C++ won’t guarantee object-oriented programming (OOP)
    – you must understand OO concepts and how they map to C++ language features and
    programming techniques. Additionally, programmers will want to harness additional
    skills beyond OOP to make code more generic and robust, as well as employ well-tested,
    creative solutions that can be found in popular design patterns. It is also critical
    for programmers to understand language features and conventions that can make
    C++ a safer language to use.
  prefs: []
  type: TYPE_NORMAL
- en: A programmer who learns how to use C++ as an object-oriented language, following
    safe programming conventions, will become a valuable C++ developer – a developer
    whose code is easy to maintain, modify, and be understood by others.
  prefs: []
  type: TYPE_NORMAL
- en: This book has step-by-step explanations of essential OO concepts, paired with
    practical examples in code and often with diagrams so you can truly understand
    how and why things work. Self-assessment questions are available to test your
    skills.
  prefs: []
  type: TYPE_NORMAL
- en: This book first provides necessary building blocks of skills (which may not
    be object-oriented) that provide the essential foundation on which to build OOP
    skills. Next, OO concepts will be described and paired with language features
    as well as coding techniques so that you can understand how to use C++ as an OOP
    language successfully. Additionally, more advanced skills are added to augment
    the programmer’s repertoire, including friend function/classes, operator overloading,
    templates (to build more generic code), exception handling (to build robust code),
    Standard Template Library (STL) basics, as well as design patterns and idioms.
    The book wraps up by re-examining programming constructs presented throughout
    the book, paired with conventions that lead to safer programming in C++. The end
    goal is to enable you to produce robust code that is easy to maintain and understand
    by others.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this book, you will understand both essential and advanced OO
    concepts and how to implement these concepts in C++. You will have a versatile
    toolkit of C++ programming skills. You will additionally understand ways to make
    safer, more robust, and easily maintainable code, as well as understand how to
    employ well-tested design patterns as part of your programming repertoire.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Programmers wanting to utilize C++ for OOP will find this book essential to
    understand how to implement OO designs in C++ through both language features and
    refined programming techniques, while creating robust and easily maintainable
    code. This OOP book assumes prior programming experience; however, if you have
    limited or no prior C++ experience, the early chapters will help you learn essential
    C++ skills to serve as the basis for the many OOP sections, advanced features,
    design patterns, and conventions to promote safe programming in C++.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*Chapter 1*](B19087_01.xhtml#_idTextAnchor016), *Understanding Basic C++ Assumptions*,
    provides a concise review of basic language features that are assumed knowledge
    within the book. Existing programmers can quickly grasp the language basics reviewed
    in this first chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 2*](B19087_02.xhtml#_idTextAnchor072), *Adding Language Necessities*,
    reviews non-OO features that are critical C++ building blocks: `const` qualifiers,
    function prototyping (default values), and function overloading.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 3*](B19087_03.xhtml#_idTextAnchor118), *Indirect Addressing – Pointers*,
    reviews pointers in C++, including memory allocation/deallocation, pointer usage/dereferencing,
    usage in function arguments, void pointers, and introduces the concept of smart
    pointers.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B19087_04.xhtml#_idTextAnchor188), *Indirect Addressing – References*,
    introduces references as an alternative to pointers, including initialization,
    function arguments/return values, and const qualification.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B19087_05.xhtml#_idTextAnchor222), *Exploring Classes in Detail*,
    introduces OOP by first exploring OO and the concepts of encapsulation and information
    hiding, and then covers class features in detail: member functions, the `this`
    pointer, access labels and regions, constructors, destructor, and qualifiers on
    data members and member functions (`const`, `static`, and `inline`).'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B19087_06.xhtml#_idTextAnchor314), *Implementing Hierarchies
    with Single Inheritance*, details generalization and specialization using single
    inheritance. This chapter covers inheriting members, the use of base class constructors,
    inherited access regions, order of construction/destruction, `final` classes,
    as well as public versus private and protected base classes, and how this changes
    the meaning of inheritance.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B19087_07.xhtml#_idTextAnchor366), *Utilizing Dynamic Binding
    through Polymorphism*, describes the OO concept of polymorphism and then distinguishes
    operation from method, details virtual functions and runtime binding of methods
    to operations (including how the v-table works), and differentiates the use of
    `virtual`, `override`, and `final`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B19087_08.xhtml#_idTextAnchor399), *Mastering Abstract Classes*,
    explains the OO concept of abstract classes, their implementation using pure virtual
    functions, the OO concept of an interface and how to implement it, as well as
    up and down casting within a public inheritance hierarchy.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B19087_09.xhtml#_idTextAnchor426), *Exploring Multiple Inheritance*,
    details how to use multiple inheritance as well as its controversy in OO designs.
    This chapter covers virtual base classes, diamond-shaped hierarchies, and when
    to consider alternate designs by examining the OO concept of a discriminator.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 10*](B19087_10.xhtml#_idTextAnchor454), *Implementing Association*,
    *Aggregation, and Composition*, describes the OO concepts of association, aggregation,
    and composition and how to implement each concept using pointers, sets of pointers,
    containment, and sometimes references.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 11*](B19087_11.xhtml#_idTextAnchor488), *Handling Exceptions*, explains
    how to `try`, `throw`, and `catch` exceptions by considering many exception scenarios.
    This chapter shows how to extend an exception handling hierarchy.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 12*](B19087_12.xhtml#_idTextAnchor526), *Friends and Operator Overloading*,
    explains the proper use of friend functions and classes, and examines operator
    overloading (which may use friends) to allow an operator to work with user defined
    types in the same way it works with standard types.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 13*](B19087_13.xhtml#_idTextAnchor561), *Working with Templates*,
    details template functions and classes to genericize certain types of code to
    work with any data type. This chapter also shows how operator overloading can
    make selected code more generic for any type to further support the use of templates.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 14*](B19087_14.xhtml#_idTextAnchor595), *Understanding STL Basics*,
    introduces the Standard Template Library in C++ and demonstrates how to use common
    containers, such as `list`, `iterator`, `deque`, `stack`, `queue`, `priority_queue`,
    and `map`. Additionally, STL algorithms and functors are introduced.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 15*](B19087_15.xhtml#_idTextAnchor655), *Testing Classes and Components*,
    illustrates OO testing methods using the canonical class form and drivers to test
    classes, and shows how to test classes related through inheritance, association,
    and aggregation. This chapter also shows how to test classes that utilize exception
    handling.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 16*](B19087_16.xhtml#_idTextAnchor711), *Using the Observer Pattern*,
    introduces design patterns overall and then explains the Observer pattern, with
    an in-depth example illustrating the components of the pattern.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 17*](B19087_17.xhtml#_idTextAnchor743), *Applying the Factory Pattern*,
    introduces the Factory Method pattern and showcases its implementation with and
    without an Object Factory. It also compares an Object Factory to an Abstract Factory.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 18*](B19087_18.xhtml#_idTextAnchor783), *Applying the Adapter Pattern*,
    examines the Adapter pattern, providing strategies and examples utilizing inheritance
    versus association to implement the pattern. Additionally, this chapter demonstrates
    a wrapper class as a simple Adapter.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 19*](B19087_19.xhtml#_idTextAnchor829), *Using the Singleton Pattern*,
    examines in detail the Singleton pattern with a sophisticated paired-class implementation.
    Singleton registries are also introduced.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 20*](B19087_20.xhtml#_idTextAnchor876), *Removing Implementation
    Details Using the pImpl Pattern*, describes the pImpl pattern, which is used to
    reduce compile-time dependencies within code. A detailed implementation is explored
    using unique pointers. Performance issues are explored relating to the pattern.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 21*](B19087_21.xhtml#_idTextAnchor920), *Making C++ Safer*, revisits
    topics covered throughout the book, with the intention of identifying core programming
    guidelines that can be used to make C++ a safer language for the development of
    robust software.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Assessments*](B19087_Assessment.xhtml#_idTextAnchor970) contains all the
    answers to the questions from every chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is assumed that you have a current C++ compiler available. You will want
    to try the many online code examples! You can use any C++ compiler; however, C++17
    or higher is recommended. The code presented will be C++20 compliant. Minimally,
    please download g++ from [https://gcc.gnu.org](https://gcc.gnu.org).
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B19087_Preface.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Please keep in mind that though there is an ISO standard for C++, some compilers
    vary and interpret the standard with very slight differences.
  prefs: []
  type: TYPE_NORMAL
- en: If you are using the digital version of this book, we advise you to type the
    code yourself or access the code from the book’s GitHub repository (a link is
    available in the next section). Doing so will help you avoid any potential errors
    related to the copying and pasting of code.
  prefs: []
  type: TYPE_NORMAL
- en: Trying the coding examples as you read the book is highly recommended. Completing
    the Assessments will further enhance your grasp of each new concept.
  prefs: []
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download the example code files for this book from GitHub at [https://github.com/PacktPublishing/Deciphering-Object-Oriented-Programming-with-CPP](https://github.com/PacktPublishing/Deciphering-Object-Oriented-Programming-with-CPP).
    If there’s an update to the code, it will be updated in the GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: We also have other code bundles from our rich catalog of books and videos available
    at [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/).
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Code in Action
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Code in Action videos for this book can be viewed at [https://bit.ly/3pylFkV](https://bit.ly/3pylFkV).
  prefs: []
  type: TYPE_NORMAL
- en: Download the color images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We also provide a PDF file that has color images of the screenshots and diagrams
    used in this book. You can download it here: [https://packt.link/ZvNhC](https://packt.link/ZvNhC).'
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`Code in text`: Indicates code words in text, database table names, folder
    names, filenames, file extensions, pathnames, dummy URLs, user input, and Twitter
    handles. Here is an example: “With that in mind, let’s take a look at our Adapter
    class, `Humanoid`.”'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Tips or important notes
  prefs: []
  type: TYPE_NORMAL
- en: Appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Get in touch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome.
  prefs: []
  type: TYPE_NORMAL
- en: 'General feedback: If you have questions about any aspect of this book, email
    us at [customercare@packtpub.com](mailto:customercare@packtpub.com) and mention
    the book title in the subject of your message.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Errata: Although we have taken every care to ensure the accuracy of our content,
    mistakes do happen. If you have found a mistake in this book, we would be grateful
    if you would report this to us. Please visit [www.packtpub.com/support/errata](http://www.packtpub.com/support/errata)
    and fill in the form.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Piracy: If you come across any illegal copies of our works in any form on the
    internet, we would be grateful if you would provide us with the location address
    or website name. Please contact us at [copyright@packt.com](mailto:copyright@packt.com)
    with a link to the material.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are interested in becoming an author: If there is a topic that you have
    expertise in and you are interested in either writing or contributing to a book,
    please visit [authors.packtpub.com](http://authors.packtpub.com).'
  prefs: []
  type: TYPE_NORMAL
- en: Share Your Thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you’ve read Deciphering Object-Oriented Programming with C++, we’d love
    to hear your thoughts! Please [click here to go straight to the Amazon review
    page](https://packt.link/r/1-804-61390-8) for this book and share your feedback.
  prefs: []
  type: TYPE_NORMAL
- en: Your review is important to us and the tech community and will help us make
    sure we’re delivering excellent quality content.
  prefs: []
  type: TYPE_NORMAL
- en: 'Part 1: C++ Building Block Essentials'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The goal of this part is to ensure that you have a strong background in non-OO
    C++ skills with which to build the forthcoming OOP skills in C++. This is the
    shortest section of the book, designed to quickly get you up to speed in preparation
    for OOP and more advanced book chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first chapter quickly reviews the basic skills that you are assumed to
    have to progress through the book: basic language syntax, looping constructs,
    operators, function usage, user defined type basics (`struct`, `typedef`, `class`
    basics, `using` statement, `enum`, strongly-typed `enum`), and `namespace` basics.
    The next chapter discusses `const` qualified variables, function prototyping,
    prototyping with default values, and function overloading.'
  prefs: []
  type: TYPE_NORMAL
- en: The subsequent chapter covers indirect addressing with pointers by introducing
    `new()` and `delete()` to allocate basic types of data, dynamically allocating
    arrays of 1, 2, and N dimensions, managing memory with `delete`, passing parameters
    as arguments to functions, using void pointers, and an overview of smart pointers.
    This section concludes with a chapter featuring indirect addressing with references
    that will take you through a review of reference basics, references to existing
    objects, and as arguments to functions.
  prefs: []
  type: TYPE_NORMAL
- en: Although this book will gradually progress to use smart pointers as a preference
    (and recommends smart pointers for safety), gaining proficiency with native C++
    pointers will be an important skill to have. This skill will be crucial for modifying
    and deciphering existing code with native pointers, as well as for clearly understanding
    the potential misuses and pitfalls of native pointers.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part comprises the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 1*](B19087_01.xhtml#_idTextAnchor016), *Understanding Basic C++ Assumptions*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 2*](B19087_02.xhtml#_idTextAnchor072), *Adding Language Necessities*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 3*](B19087_03.xhtml#_idTextAnchor118), *Indirect Addressing – Pointers*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B19087_04.xhtml#_idTextAnchor188), *Indirect Addressing – References*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Part 1: C++ Building Block Essentials'
  prefs: []
  type: TYPE_NORMAL
