- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Asynchronous programming is an essential practice for building efficient, responsive,
    and high-performance software, particularly in today’s world of multi-core processors
    and real-time data processing. This book dives deep into the principles and practical
    techniques for mastering asynchronous programming in C++, equipping you with the
    knowledge needed to handle everything from thread management to performance optimization.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several key pillars to developing asynchronous software:'
  prefs: []
  type: TYPE_NORMAL
- en: Thread management and synchronization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Asynchronous programming concepts, models, and libraries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging, testing, and optimizing multithreaded and asynchronous software
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While many resources focus on the basics of parallel programming or generic
    software development, this book is designed to offer a comprehensive exploration
    of these pillars. It covers the essential techniques for managing concurrency,
    debugging complex systems, and optimizing software performance, all while grounding
    these concepts in real-world scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will guide you through various aspects of asynchronous programming with
    practical examples based on the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Our extensive experience developing high-performance software
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Best practices learned from working across diverse industries, from finance
    to research centers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As multi-core processors and parallel computing architectures become increasingly
    integral to modern applications, the demand for asynchronous programming expertise
    is growing rapidly. Mastering the techniques covered in this book will help you
    not only tackle today’s complex software development challenges but also prepare
    for future advancements in performance-critical software.
  prefs: []
  type: TYPE_NORMAL
- en: Whether you’re working with low-latency financial systems, developing high-throughput
    applications, or simply looking to improve your programming skills, this book
    will provide you with the tools and knowledge to succeed.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This book is designed for software engineers, developers, and technical leads
    seeking to deepen their understanding of asynchronous programming using the latest
    C++ versions and optimize their software performance. The primary target audience
    includes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Software engineers** *:* Those looking to enhance their skills in C++ and
    gain practical insights into multithreading and asynchronous programming, debugging,
    and performance optimization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Technical leads** *:* Leaders aiming to implement efficient asynchronous
    systems will find strategies and best practices for managing complex software
    development and improving team productivity *.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Students and enthusiasts** *:* Individuals eager to learn about high-performance
    computing and asynchronous programming will benefit from the comprehensive explanations
    and examples, helping them to advance their careers in technology.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This book will empower readers to tackle real-world challenges and excel in
    technical interviews, equipping them with the knowledge to thrive in today’s fast-paced
    software landscape.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*Chapter 1*](B22219_01.xhtml#_idTextAnchor014) , *Parallel Programming Paradigms*
    , explores different architectures and models for building parallel systems, along
    with various parallel programming paradigms and their performance metrics.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 2*](B22219_02.xhtml#_idTextAnchor035) , *Processes, Threads, and
    Services* , delves into processes in operating systems, examining their life cycle,
    inter-process communication, and the role of threads, including daemons and multithreading.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 3*](B22219_03.xhtml#_idTextAnchor051) , *How to Create and Manage
    Threads in C++* , instructs on how to create and manage threads, pass arguments,
    retrieve results, and handle exceptions to ensure efficient execution in multithreaded
    environments.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B22219_04.xhtml#_idTextAnchor074) , *Thread Synchronization with
    Locks* , explains the use of C++ Standard Library synchronization primitives,
    including mutexes and condition variables, while addressing race conditions, deadlocks,
    and livelocks.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B22219_05.xhtml#_idTextAnchor097) , *Atomic Operations* , explores
    insights into C++ atomic types, memory models, and how to implement a basic SPSC
    lock-free queue, preparing for future performance enhancements.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B22219_06.xhtml#_idTextAnchor125) , *Promises and Futures* ,
    introduces asynchronous programming concepts, including promises, futures, and
    packaged tasks, and shows how to tackle real-life problems using these tools.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B22219_07.xhtml#_idTextAnchor143) , *The Async Function* , explores
    the functionality of **std::async** for executing asynchronous tasks, defining
    launch policies, handling exceptions, and optimizing performance.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B22219_08.xhtml#_idTextAnchor164) , *Asynchronous Programming
    Using Coroutines* , describes C++ coroutines, their basic requirements, and how
    to implement generators and parsers, while handling exceptions within coroutines.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B22219_09.xhtml#_idTextAnchor184) , *Asynchronous Programming
    Using Boost.Asio* , explains how to use Boost.Asio for managing asynchronous tasks
    related to external resources, focusing on I/O objects, execution contexts, and
    event processing.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 10*](B22219_10.xhtml#_idTextAnchor212) , *Coroutines with Boost.Cobalt*
    , explores the Boost.Cobalt library to implement coroutines easily, avoiding low-level
    complexities and focusing on functional programming needs.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 11*](B22219_11.xhtml#_idTextAnchor228) , *Logging and Debugging Asynchronous
    Software* , explains how to effectively use logging and debugging tools to identify
    and resolve issues in asynchronous applications, including deadlocks and race
    conditions.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 12*](B22219_12.xhtml#_idTextAnchor243) , *Sanitizing and Testing
    Asynchronous Software* , explores how to use sanitizers for multithreaded code
    and explores testing techniques tailored for asynchronous software with the GoogleTest
    library.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 13*](B22219_13.xhtml#_idTextAnchor267) , *Improving Asynchronous
    Software Performance* , examines performance measurement tools and techniques,
    including high-resolution timers, cache optimization, and strategies to avoid
    false and true sharing.'
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to have previous experience with programming using C++ and how
    to use debuggers to find bugs. As we are using C++20 features, and in some examples
    C++23, you will need to install GCC 14 and Clang 18. All source code examples
    have been tested in Ubuntu and macOS, but as they are platform-independent, they
    should compile and run on any platform.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Software/hardware covered in** **the book** | **Operating** **system requirements**
    |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| C++20 and C++23 | Linux (tested in Ubuntu 24.04) |'
  prefs: []
  type: TYPE_TB
- en: '| GCC 14.2 | macOS (tested in macOS Sonoma 14.x) |'
  prefs: []
  type: TYPE_TB
- en: '| Clang 18 | Windows 11 |'
  prefs: []
  type: TYPE_TB
- en: '| Boost 1.86 |  |'
  prefs: []
  type: TYPE_TB
- en: '| GDB 15.1 |  |'
  prefs: []
  type: TYPE_TB
- en: Each chapter includes a *Technical requirements* section highlighting relevant
    information on how to install the tools and libraries needed to compile the chapter’s
    examples.
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are using the digital version of this book, we advise you to type
    the code yourself or access the code from the book’s GitHub repository (a link
    is available in the next section). Doing so will help you avoid any potential
    errors related to the copying and pasting** **of code.**'
  prefs: []
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download the example code files for this book from GitHub at [https://github.com/PacktPublishing/Asynchronous-Programming-with-CPP](https://github.com/PacktPublishing/Asynchronous-Programming-with-CPP)
    . If there’s an update to the code, it will be updated in the GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: We also have other code bundles from our rich catalog of books and videos available
    at [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/)
    . Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '**Code in text** : Indicates code words in text, database table names, folder
    names, filenames, file extensions, pathnames, dummy URLs, user input, and Twitter
    handles. Here is an example: “The code above generates a vector of normally distributed
    random numbers and then sorts the vector with both **std::sort()** and **std::stable_sort()**
    .”'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Tips or important notes
  prefs: []
  type: TYPE_NORMAL
- en: Appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Get in touch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome.
  prefs: []
  type: TYPE_NORMAL
- en: '**General feedback** : If you have questions about any aspect of this book,
    email us at [customercare@packtpub.com](mailto:customercare@packtpub.com) and
    mention the book title in the subject of your message.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Errata** : Although we have taken every care to ensure the accuracy of our
    content, mistakes do happen. If you have found a mistake in this book, we would
    be grateful if you would report this to us. Please visit [www.packtpub.com/support/errata](http://www.packtpub.com/support/errata)
    and fill in the form.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Piracy** : If you come across any illegal copies of our works in any form
    on the internet, we would be grateful if you would provide us with the location
    address or website name. Please contact us at [copyright@packt.com](mailto:copyright@packt.com)
    with a link to the material.'
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are interested in becoming an author** : If there is a topic that
    you have expertise in and you are interested in either writing or contributing
    to a book, please visit [authors.packtpub.com](http://authors.packtpub.com) .'
  prefs: []
  type: TYPE_NORMAL
- en: Share Your Thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you’ve read *Asynchronous Programming with C++* , we’d love to hear your
    thoughts! Please [click here to go straight to the Amazon review page](https://packt.link/r/1835884253)
    for this book and share your feedback.
  prefs: []
  type: TYPE_NORMAL
- en: Your review is important to us and the tech community and will help us make
    sure we’re delivering excellent quality content.
  prefs: []
  type: TYPE_NORMAL
- en: Download a free PDF copy of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thanks for purchasing this book!
  prefs: []
  type: TYPE_NORMAL
- en: Do you like to read on the go but are unable to carry your print books everywhere?
  prefs: []
  type: TYPE_NORMAL
- en: Is your eBook purchase not compatible with the device of your choice?
  prefs: []
  type: TYPE_NORMAL
- en: Don’t worry, now with every Packt book you get a DRM-free PDF version of that
    book at no cost.
  prefs: []
  type: TYPE_NORMAL
- en: Read anywhere, any place, on any device. Search, copy, and paste code from your
    favorite technical books directly into your application.
  prefs: []
  type: TYPE_NORMAL
- en: The perks don’t stop there, you can get exclusive access to discounts, newsletters,
    and great free content in your inbox daily
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these simple steps to get the benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: Scan the QR code or visit the link below
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![img](img/B22219_QR_Free_PDF.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[https://packt.link/free-ebook/9781835884249](https://packt.link/free-ebook/9781835884249)'
  prefs: []
  type: TYPE_NORMAL
- en: Submit your proof of purchase
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That’s it! We’ll send your free PDF and other benefits to your email directly
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Part 1:Foundations of Parallel Programming and Process Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this part, we delve into the fundamental concepts and paradigms that form
    the foundation of parallel programming and process management. You will gain a
    deep understanding of the architectures used to build parallel systems and explore
    the various programming paradigms available for developing efficient parallel,
    multithreading, and asynchronous software. Additionally, we will cover critical
    concepts related to processes, threads, and services, highlighting their importance
    in operating systems, especially in the context of process life cycle, performance,
    and resource management.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part has the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 1*](B22219_01.xhtml#_idTextAnchor014) , *Parallel Programming Paradigms*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 2*](B22219_02.xhtml#_idTextAnchor035) , *Processes, Threads, and
    Services*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
