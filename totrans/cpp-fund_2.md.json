["```cpp\n// Declaration: function without body\nreturn_type function_name( parameter list );\n```", "```cpp\nvoid doNothingForNow();\n```", "```cpp\n#include <iostream>\n\nvoid doNothingForNow();\nint main() {\n  doNothingForNow ();\n  std::cout << \"Done\";\n}\n```", "```cpp\n// Definition: function with body\nreturn_type function_name( parameter_list ) {\n  statement1;\n  statement2;\n...\n  last statement;\n}\n```", "```cpp\nvoid doNothingForNow() {\n  // Do nothing\n}\n```", "```cpp\n#include <iostream>\nvoid doNothingForNow() {\n  // do nothing\n}\nint main() {\n  doNothingForNow();\n  std::cout << \"Done\";\n}\n```", "```cpp\n    void log();\n    ```", "```cpp\n    #include <iostream> \n    // This is where std::cout and std::endl are defined\n    void log() {\n      std::cout << \"Error!\" << std::endl;\n    }\n    ```", "```cpp\n    #include <log.h>\n    int main() {\n      log();\n    }\n    ```", "```cpp\n#include <iostream>\n/* 1 */ const int globalVar = 10;\nint* foo(const int* other) {\n    /* 5 */ int fooLocal = 0;\n     std::cout << \"foo's local: \" << fooLocal << std::endl;\n    std::cout << \"main's local: \" << *other << std::endl;\n    /* 6 */ return &fooLocal;\n}\nint main()\n{\n    /* 2 */ int mainLocal = 15;\n    /* 3 */ int* fooPointer = foo(&mainLocal);\n    std::cout << \"main's local: \" << mainLocal << std::endl;\n    std::cout << \"We should not access the content of fooPointer! It's not valid.\" << std::endl;\n    /* 4 */ return 0;\n}\n```", "```cpp\nvoid foo() {\n  int a;\n}\n```", "```cpp\nvoid foo() {\n  int a;\n  int b;\n}\n```", "```cpp\nvoid foo() {\n  if (false) {\n    int a;\n  }\n  int b;\n}\n```", "```cpp\nconst int a = 1;\nvoid main() {\n  std::cout << \"a=\" << a << std::endl;\n}\n```", "```cpp\n    #include <iostream>\n    const int POSITION = 10;\n    const int ALREADY_COMPUTED = 3;\n    ```", "```cpp\n    void print_tenth_fibonacci()\n    ```", "```cpp\n      int n_1 = 1;\n      int n_2 = 0;\n      int current = n_1 + n_2;\n    ```", "```cpp\n    for(int i = ALREADY_COMPUTED; i < POSITION; ++i){\n    \tn_2 = n_1;\n    \tn_1 = current;\n    \tcurrent = n_1 + n_2;\n    }\n    ```", "```cpp\n      std::cout << current << std::endl;\n    ```", "```cpp\n    int main() {\n      std::cout << \"Computing the 10th Fibonacci number\" << std::endl;\n      print_tenth_fibonacci();\n    }\n    ```", "```cpp\nvoid foo()\n  if(cond1) {\n    int a;\n  }\n  if (cond2) {\n    int b;\n  }\n}\n```", "```cpp\nvoid two_ints(int, int);\n```", "```cpp\nvoid two_ints(int a, int b);\n```", "```cpp\ntwo_ints(1,2);\n```", "```cpp\ntwo_ints(1+2, 2+3);\n```", "```cpp\n    void byvalue_age_in_5_years(int age) {\n      age += 5;\n      std::cout << \"Age in 5 years: \" << age << std::endl;\n      // Prints 100\n    }\n    ```", "```cpp\n    int main() {\n      int age = 95;\n      byvalue_age_in_5_years(age);\n      std::cout << \"Current age: \" << age;\n      // Prints 95\n    }\n    ```", "```cpp\n    void byreference_age_in_5_years(int& age) {\n      age += 5;\n    }\n    ```", "```cpp\n    int main() {\n      int age = 13;\n      byreference_age_in_5_years(age);\n      if (age >= 18) {\n        std::cout << \"Congratulations! \" << std::endl;\n      }\n    }\n    ```", "```cpp\n    #include <iostream>\n    void byreference_age_in_5_years(int& age) {\n      if (age >= 18) {\n        std::cout << \"Congratulations! You are eligible to vote for your nation.\" << std::endl;\n        return;\n    ```", "```cpp\n      } else{\n        int reqAge = 18;\n      }\n    }\n    ```", "```cpp\n    int main() {\n        int age;\n        std::cout << \"Please enter your age:\";\n        std::cin >> age;\n    ```", "```cpp\nvoid modify_pointer(int* pointer) {\n  *pointer = 1;\n  pointer = 0;\n}\nint main() {\n  int a = 0;\n  int* ptr = &a;\n  modify_pointer(ptr);\n  std::cout << \"Value: \" << *ptr << std::endl;\n  std::cout << \"Did the pointer change? \" << std::boolalpha <<  (ptr == &a);\n}\n```", "```cpp\nint sum(int, int);\n```", "```cpp\nint a = sum(1, 2);\n```", "```cpp\nvoid rideRollercoasterWithChecks(int heightInCm) {\n  if (heightInCm < 100) {\n    std::cout << \"Too short\";\n    return;\n  }\n  if (heightInCm > 210) {\n    std::cout << \"Too tall\";\n    return;\n  }\n  rideRollercoaster();\n  // implicit return at the end of the function\n}\n```", "```cpp\nint sum(int a, int b) {\n  return a + b;\n}\n```", "```cpp\nint max(int a, int b) {\n  if(a > b) {\n    return a;\n  } else {\n    return b;\n  }\n}\n```", "```cpp\nconst int& max(const int& a, const int& b) {\n  if (a > b) {\n    return a;\n  } else {\n    return b;\n  }\n}\n```", "```cpp\nint main() {\n  const int& a = max(1,2);\n  std::cout << a;\n}\n```", "```cpp\nint& sum(int a, int b) {\n  int c = a + b;\n  return c;\n}\n```", "```cpp\nint& getMaxIndex(std::array<int, 3>& array, int index1, int index2) {\n  /* This function requires that index1 and index2 must be smaller than 3! */\n  int maxIndex = max(index1, index2);\n  return array[maxIndex];\n```", "```cpp\nint main() {\n  std:array<int, 3> array = {1,2,3};\n  int& elem = getMaxIndex(array, 0, 2);\n  elem = 0;\n  std::cout << array[2];\n  // Prints 0\n}\n```", "```cpp\nvoid setTheThirdItem(std::array<int, 10>& array, int item)\n```", "```cpp\nint findFirstGreaterThan(const std::array<int, 10>&  array, int threshold)\n```", "```cpp\nint multiply(int multiplied, int multiplier = 1);\n```", "```cpp\nmultiply(10); // Returns 10\nmultiply(10, 2); // Returns 20\n```", "```cpp\nnamespace example_namespace {\n  // code goes here\n}\n```", "```cpp\nnamespace parent {\n  namespace child {\n    // code goes here\n  }\n}\n```", "```cpp\nbool isSafeHeightForRollercoaster(int heightInCm) {\n  return heightInCm > 100 && heightInCm < 210;\n}\nbool isSafeHeightForRollercoaster(float heightInM) {\n  return heightInM > 1.0f && heightInM < 2.1f;\n}\n// Calls the int overload\nisSafeHeightForRollercoaster(187);\n// Class the float overload\nisSafeHeightForRollercoaster(1.67f);\n```"]