- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a tech-driven world where embedded systems power nearly every modern device
    and innovation, the ability to develop efficient and reliable firmware is a prized
    skill. The journey from writing basic code to mastering low-level firmware development
    can be daunting, but the rewards are substantial. Whether it’s a home appliance,
    an industrial control system, or a sophisticated IoT device, embedded systems
    serve as the silent, hardworking engines behind modern technology.
  prefs: []
  type: TYPE_NORMAL
- en: This book, *Bare-Metal Embedded C Programming*, was born out of a desire to
    help you not only write functional firmware but also to deeply understand the
    underlying mechanisms that govern how microcontrollers work at their core. My
    goal is to take you on an in-depth, technical journey into the heart of ARM-based
    microcontroller firmware development, specifically focusing on the STM32 family.
    This is not a book for the faint of heart, nor is it one for those looking for
    quick shortcuts. Instead, it is designed for individuals who are ready to step
    away from the comforts of pre-built libraries and tools to develop the skills
    necessary for writing efficient, bare-metal code from scratch.
  prefs: []
  type: TYPE_NORMAL
- en: So, what exactly is *bare-metal* programming? Simply put, it’s the art of writing
    firmware that interacts directly with the hardware—without the abstraction layers
    provided by third-party libraries. This approach requires precision, a deep understanding
    of microcontroller architecture, and the ability to read and manipulate registers
    to achieve the exact behavior you want from your hardware.
  prefs: []
  type: TYPE_NORMAL
- en: '*Why I Wrote* *This Book*'
  prefs: []
  type: TYPE_NORMAL
- en: As someone with years of experience in embedded systems development, I’ve often
    noticed a gap in the way firmware development is taught. Many texts and courses
    focus on high-level development, promoting the use of pre-built libraries that
    abstract away the complexities of hardware interaction. While this approach is
    undoubtedly convenient and practical in many cases, it leaves a void for those
    who truly wish to understand how things work at the lowest level. I believe that
    understanding the “bare-metal” aspect of embedded systems development is essential
    for becoming a truly skilled firmware engineer.
  prefs: []
  type: TYPE_NORMAL
- en: This book is my effort to fill that gap. Through step-by-step guidance, I’ll
    show you how to build your own drivers, manipulate registers, and write code that
    takes full control of the microcontroller. This is not just about learning a new
    skill—it’s about achieving mastery.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you’re a developer, engineer, or a student eager to dive deep into the world
    of microcontroller firmware development, this book is for you. You’ll find it
    especially valuable if you’re the kind of person who prefers to understand what’s
    happening under the hood, rather than relying on copy-paste solutions from online
    forums. Whether you’re transitioning from other platforms or seeking to build
    a strong foundation in bare-metal development, this book will give you the hands-on
    experience you need.
  prefs: []
  type: TYPE_NORMAL
- en: What This Book Covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*Chapter 1*](B21914_01.xhtml#_idTextAnchor015), *Setting Up the Tools of*
    *the Trade*'
  prefs: []
  type: TYPE_NORMAL
- en: This chapter introduces the essential tools you’ll need for development. From
    navigating datasheets to setting up your Integrated Development Environment (IDE),
    this chapter lays the groundwork for everything that follows.
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 2*](B21914_02.xhtml#_idTextAnchor039), *Constructing Peripheral Registers
    from* *Memory Addresses*'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we dive into the core of bare-metal programming. You’ll learn
    how to define and access peripheral registers directly from memory addresses,
    using the official microcontroller documentation as your guide.
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 3*](B21914_03.xhtml#_idTextAnchor080), *Understanding the Build Process
    and Exploring the* *GNU Toolchain*'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we take a closer look at the embedded C build process. You’ll
    explore how to compile and link code manually using the GNU Toolchain, gaining
    complete control over how your firmware is created.
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B21914_04.xhtml#_idTextAnchor118), *Developing the Linker Script
    and* *Startup File*'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to write a custom linker script to define
    how your firmware is placed in the microcontroller’s memory, including allocating
    sections like code, data, and stack. Additionally, you’ll develop a startup file
    that configures the microcontroller’s initial state, sets up the stack, initializes
    memory, and jumps to your main code.
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B21914_05.xhtml#_idTextAnchor171), *The “Make”* *Build System*'
  prefs: []
  type: TYPE_NORMAL
- en: Automating the build process is a critical part of embedded development. This
    chapter teaches you how to use the Make build system to streamline your workflow
    by creating custom Makefiles that automate repetitive tasks.
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B21914_06.xhtml#_idTextAnchor192), *The Common Microcontroller
    Software Interface* *Standard (CMSIS)*'
  prefs: []
  type: TYPE_NORMAL
- en: CMSIS simplifies development on ARM Cortex microcontrollers. In this chapter,
    you’ll learn how to leverage CMSIS to write efficient code that takes advantage
    of the microcontroller’s features while maintaining simplicity.
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B21914_07.xhtml#_idTextAnchor217), *The General-Purpose Input/Output
    (**GPIO) Peripheral*'
  prefs: []
  type: TYPE_NORMAL
- en: GPIO allows your microcontroller to interact with external devices. This chapter
    guides you through developing both input and output drivers for GPIO, one of the
    most frequently used peripherals in embedded systems.
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B21914_08.xhtml#_idTextAnchor241), *System Tick (**SysTick) Timer*'
  prefs: []
  type: TYPE_NORMAL
- en: Timing is essential in embedded systems, and the SysTick timer provides an easy
    way to generate precise time delays and system ticks. This chapter walks you through
    developing SysTick drivers for use in your embedded applications.
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B21914_09.xhtml#_idTextAnchor262), *General-Purpose* *Timers
    (TIM)*'
  prefs: []
  type: TYPE_NORMAL
- en: This chapter introduces you to the general-purpose timers (TIM) in STM32 microcontrollers,
    teaching you how to develop timer drivers for tasks that require precise timing.
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 10*](B21914_10.xhtml#_idTextAnchor278), *The Universal Asynchronous*
    *Receiver/Transmitter Protocol*'
  prefs: []
  type: TYPE_NORMAL
- en: Communication is a key aspect of embedded systems. This chapter focuses on the
    UART protocol, one of the most widely used communication protocols. You’ll learn
    how to develop UART drivers, enabling your microcontroller to send and receive
    data from external devices.
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 11*](B21914_11.xhtml#_idTextAnchor303), *Analog-to-Digital* *Converter
    (ADC)*'
  prefs: []
  type: TYPE_NORMAL
- en: Many embedded applications require converting analog signals into digital data
    that your microcontroller can process. This chapter covers how to configure the
    ADC peripheral, allowing you to read and convert analog inputs into meaningful
    digital values.
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 12*](B21914_12.xhtml#_idTextAnchor335), *S**erial Peripheral* *Interface
    (SPI)*'
  prefs: []
  type: TYPE_NORMAL
- en: SPI is a high-speed communication protocol commonly used in embedded systems.
    This chapter guides you through developing SPI drivers, enabling efficient communication
    between your microcontroller and other peripherals, such as sensors or memory
    devices.
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 13*](B21914_13.xhtml#_idTextAnchor371), *Inter-Integrated* *Circuit
    (I2C)*'
  prefs: []
  type: TYPE_NORMAL
- en: I2C is another popular communication protocol for connecting devices, it is
    often used for short-distance communication in embedded systems. This chapter
    covers the development of I2C drivers, allowing your microcontroller to communicate
    with multiple devices over a shared bus.
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 14*](B21914_14.xhtml#_idTextAnchor392), *External Interrupts and*
    *Events (EXTI)*'
  prefs: []
  type: TYPE_NORMAL
- en: Responsiveness is critical in embedded systems, and external interrupts allow
    your system to react to changes in its environment. This chapter covers how to
    configure and manage external interrupts and events (EXTI) for timely and efficient
    responses to external stimuli.
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 15*](B21914_15.xhtml#_idTextAnchor417), *The Real-Time* *Clock (RTC)*'
  prefs: []
  type: TYPE_NORMAL
- en: For systems that require accurate timekeeping, the RTC peripheral is indispensable.
    In this chapter, you’ll learn how to set up and use the RTC to track time in low-power
    systems, even when the microcontroller is in sleep mode.
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 16*](B21914_16.xhtml#_idTextAnchor448), *Independent* *Watchdog (IWDG)*'
  prefs: []
  type: TYPE_NORMAL
- en: Stability is crucial for embedded systems, and the Independent Watchdog Timer
    (IWDG) ensures that your system can recover from unexpected malfunctions. This
    chapter teaches you how to configure the IWDG to automatically reset your microcontroller
    if it stops responding, ensuring reliable operation.
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 17*](B21914_17.xhtml#_idTextAnchor467), *Direct Memory* *Access (DMA)*'
  prefs: []
  type: TYPE_NORMAL
- en: Direct Memory Access (DMA) allows data transfers to occur independently of the
    CPU, significantly improving system efficiency. This chapter covers how to configure
    and use DMA for memory-to-memory transfers, as well as for peripherals like ADC
    and UART, offloading the work from the CPU.
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 18*](B21914_18.xhtml#_idTextAnchor490), *Power Management and Energy
    Efficiency in* *Embedded Systems*'
  prefs: []
  type: TYPE_NORMAL
- en: Power management is essential for energy-efficient systems, especially in battery-powered
    devices. In this final chapter, you’ll learn techniques for reducing power consumption,
    including how to use sleep modes, wake-up sources, and optimize firmware to achieve
    the best balance between performance and energy efficiency.
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To fully benefit from this book, it’s important to have a general familiarity
    with the C programming language. While we’ll cover the specifics of embedded systems
    programming in detail, having a basic understanding of how code operates will
    make the material easier to follow. Familiarity with microcontrollers is certainly
    helpful but not a strict requirement. Everything you need will be introduced as
    we progress. Whether you’re a beginner or an experienced developer, this book
    will guide you step-by-step through the fascinating world of bare-metal embedded
    programming.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Software/hardware covered in** **the book** | **Operating** **system requirements**
    |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| STM32CubeIDE | Windows |'
  prefs: []
  type: TYPE_TB
- en: '| GNU Arm Embedded Toolchain |  |'
  prefs: []
  type: TYPE_TB
- en: '| NUCLEO-411 Development Board |  |'
  prefs: []
  type: TYPE_TB
- en: '| 10k Potentiometer |  |'
  prefs: []
  type: TYPE_TB
- en: '| OpenOCD |  |'
  prefs: []
  type: TYPE_TB
- en: '| Notepad++ |  |'
  prefs: []
  type: TYPE_TB
- en: '| RealTerm |  |'
  prefs: []
  type: TYPE_TB
- en: '**If you are using the digital version of this book, we advise you to type
    the code yourself or access the code from the book’s GitHub repository (a link
    is available in the next section). Doing so will help you avoid any potential
    errors related to the copying and pasting** **of code.**'
  prefs: []
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download the example code files for this book from GitHub at [https://github.com/PacktPublishing/Bare-Metal-Embedded-C-Programming](https://github.com/PacktPublishing/Bare-Metal-Embedded-C-Programming).
    If there’s an update to the code, it will be updated in the GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: We also have other code bundles from our rich catalog of books and videos available
    at [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/).
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`Code in text`: Indicates code words in text, database table names, folder
    names, filenames, file extensions, pathnames, dummy URLs, user input, and Twitter
    handles. Here is an example: “Copy the path to the `openocd` `bin` folder.”'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Bold**: Indicates a new term, an important word, or words that you see onscreen.
    For instance, words in menus or dialog boxes appear in **bold**. Here is an example:
    “Right-click on **This PC**, and then choose **Properties**.”'
  prefs: []
  type: TYPE_NORMAL
- en: Tips or important notes
  prefs: []
  type: TYPE_NORMAL
- en: Appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Get in touch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome.
  prefs: []
  type: TYPE_NORMAL
- en: '**General feedback**: If you have questions about any aspect of this book,
    email us at [customercare@packtpub.com](mailto:customercare@packtpub.com) and
    mention the book title in the subject of your message.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Errata**: Although we have taken every care to ensure the accuracy of our
    content, mistakes do happen. If you have found a mistake in this book, we would
    be grateful if you would report this to us. Please visit [www.packtpub.com/support/errata](http://www.packtpub.com/support/errata)
    and fill in the form.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Piracy**: If you come across any illegal copies of our works in any form
    on the internet, we would be grateful if you would provide us with the location
    address or website name. Please contact us at [copyright@packt.com](mailto:copyright@packt.com)
    with a link to the material.'
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are interested in becoming an author**: If there is a topic that you
    have expertise in and you are interested in either writing or contributing to
    a book, please visit [authors.packtpub.com](http://authors.packtpub.com).'
  prefs: []
  type: TYPE_NORMAL
- en: Share Your Thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you’ve read *Bare-Metal Embedded C Programming*, we’d love to hear your
    thoughts! Please [click here to go straight to the Amazon review page](https://packt.link/r/183546081X)
    for this book and share your feedback.
  prefs: []
  type: TYPE_NORMAL
- en: Your review is important to us and the tech community and will help us make
    sure we’re delivering excellent quality content.
  prefs: []
  type: TYPE_NORMAL
- en: Download a free PDF copy of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thanks for purchasing this book!
  prefs: []
  type: TYPE_NORMAL
- en: Do you like to read on the go but are unable to carry your print books everywhere?
  prefs: []
  type: TYPE_NORMAL
- en: Is your eBook purchase not compatible with the device of your choice?
  prefs: []
  type: TYPE_NORMAL
- en: Don’t worry, now with every Packt book you get a DRM-free PDF version of that
    book at no cost.
  prefs: []
  type: TYPE_NORMAL
- en: Read anywhere, any place, on any device. Search, copy, and paste code from your
    favorite technical books directly into your application.
  prefs: []
  type: TYPE_NORMAL
- en: The perks don’t stop there, you can get exclusive access to discounts, newsletters,
    and great free content in your inbox daily
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these simple steps to get the benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: Scan the QR code or visit the link below
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B21914_QR_Free_PDF.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[https://packt.link/free-ebook/9781835460818](https://packt.link/free-ebook/9781835460818)'
  prefs: []
  type: TYPE_NORMAL
- en: Submit your proof of purchase
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That’s it! We’ll send your free PDF and other benefits to your email directly
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
