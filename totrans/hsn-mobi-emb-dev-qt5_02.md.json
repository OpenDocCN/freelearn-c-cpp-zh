["```cpp\nqApp->setStyleSheet(\"QButton {padding: 10px;}\");\n```", "```cpp\nmyButton->setStyleSheet(\"padding: 10px;\");\n```", "```cpp\nif (!QTouchScreen::devices().isEmpty()) {\n   qApp->setStyleSheet(\"QButton {padding: 10px;}\");\n}\n```", "```cpp\n<array><string>UIInterfaceOrientationLandscapeLeft</string></array>\n```", "```cpp\nQList<Qt::GestureType> gestures;\ngestures << Qt::PanGesture;\ngestures << Qt::PinchGesture;\ngestures << Qt::SwipeGesture;\nfor (Qt::GestureType gesture : gestures)\n    someWidget->grabGesture(gesture);\n```", "```cpp\nbool SomeWidget::event(QEvent *event)\n{\n    if (event->type() == QEvent::Gesture)\n        return handleGesture(static_cast<QGestureEvent *>(event));\n    return QWidget::event(event);\n}\n```", "```cpp\nif (QGesture *swipe = event->gesture(Qt::SwipeGesture)) {\n    if (swipe->state() == Qt::GestureFinished) {\n        switch (gesture->horizontalDirection()) {\n            case QSwipeGesture::Left:\n            break;\n            case QSwipeGesture::Right:\n            break;\n            case QSwipeGesture::Up:\n            break;\n            case QSwipeGesture::Down:\n            break;\n        }\n    }\n}\n```", "```cpp\nQPushButton *button = new QPushButton(this);\nQPushButton *button2 = new QPushButton(this);\nQBoxLayout *boxLayout = new QVBoxLayout;\nboxLayout->addWidget(button);\nboxLayout->addWidget(button2);\nQHBoxLayout *horizontalLayout = new QHBoxLayout;\nhorizontalLayout->setLayout(boxLayout); \n```", "```cpp\nQGraphicsScene *gScene = new QGraphicsScene(this);\nui->graphicsView->setScene(gScene);\n```", "```cpp\ngScene->setSceneRect(-50, -50, 120, 120);\n\n```", "```cpp\nQPen pen = QPen(Qt::red);\ngScene->addRect(gScene->sceneRect(), pen);\n```", "```cpp\n#include <QGraphicsScene>\n#include <QGraphicsSimpleTextItem>\n#include <QGraphicsItem>\n#include <QPainter>\nclass TextGraphic :public QGraphicsSimpleTextItem\n{\npublic:\n    TextGraphic(const QString &text);\n    void paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget);\n    QString simpleText;\n};\n```", "```cpp\nTextGraphic::TextGraphic(const QString &text)\n : QGraphicsSimpleTextItem(text),\n      simpleText(text)\n{\n}\n\nvoid TextGraphic::paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget)\n{\n    if (scene()->collidingItems(this).isEmpty())\n        QGraphicsSimpleTextItem::setText(\"BOOM!\");\n    else\n        QGraphicsSimpleTextItem::setText(simpleText);\n\n    QGraphicsSimpleTextItem::paint(painter, option, widget);\n}\n```", "```cpp\nTextGraphic *text = new TextGraphic(QStringLiteral(\"Qt Mobile!\"));\ngScene->addItem(text);\n```", "```cpp\ntext->setFlag(QGraphicsItem::ItemIsMovable);\n```"]