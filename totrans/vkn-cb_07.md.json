["```cpp\n      glslangValidator -H -o <output> <input> > <output_txt>\n\n```", "```cpp\n#version 450 \n\nlayout( location = 0 ) in vec4 app_position; \n\nvoid main() { \n  gl_Position = app_position; \n}\n\n```", "```cpp\n      layout( vertices = <count> ) out;\n\n```", "```cpp\n#version 450 \n\nlayout( vertices = 3 ) out; \n\nvoid main() { \n  if( 0 == gl_InvocationID ) { \n    gl_TessLevelInner[0] = 3.0; \n    gl_TessLevelOuter[0] = 3.0; \n    gl_TessLevelOuter[1] = 4.0; \n    gl_TessLevelOuter[2] = 5.0; \n  } \n  gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position; \n}\n\n```", "```cpp\n      layout( <primitive>, <spacing>, <winding> ) in;\n\n```", "```cpp\n#version 450 \n\nlayout( triangles, equal_spacing, cw ) in; \n\nvoid main() { \n  gl_Position = gl_in[0].gl_Position * gl_TessCoord.x + \n                gl_in[1].gl_Position * gl_TessCoord.y + \n                gl_in[2].gl_Position * gl_TessCoord.z; \n}\n\n```", "```cpp\n      layout( <primitive type> ) in;\n\n```", "```cpp\n      layout( <primitive type>, max_vertices = <count> ) out;\n\n```", "```cpp\n#version 450 \n\nlayout( triangles ) in; \nlayout( triangle_strip, max_vertices = 9 ) out; \n\nvoid main() { \n\n  for( int vertex = 0; vertex < 3; ++vertex ) { \n    gl_Position = gl_in[vertex].gl_Position + vec4( 0.0, -0.2, 0.0, 0.0 ); \n    EmitVertex(); \n\n    gl_Position = gl_in[vertex].gl_Position + vec4( -0.2, 0.2, 0.0, 0.0 ); \n    EmitVertex(); \n\n    gl_Position = gl_in[vertex].gl_Position + vec4( 0.2, 0.2, 0.0, 0.0 ); \n    EmitVertex(); \n\n    EndPrimitive(); \n  } \n}\n\n```", "```cpp\n#version 450 \n\nlayout( location = 0 ) out vec4 frag_color; \n\nvoid main() { \n  frag_color = vec4( 0.8, 0.4, 0.0, 1.0 ); \n}\n\n```", "```cpp\nlayout( local_size_x = <x size>, local_size_y = <y size>, local_size_z = <z size> ) in;\n\n```", "```cpp\ngl_WorkGroupID * gl_WorkGroupSize + gl_LocalInvocationID\n\n```", "```cpp\n#version 450 \n\nlayout( local_size_x = 32, local_size_y = 32 ) in; \n\nlayout( set = 0, binding = 0, rgba8 ) uniform image2D StorageImage; \n\nvoid main() { \n\n  vec2 z = gl_GlobalInvocationID.xy * 0.001 - vec2( 0.0, 0.4 ); \n  vec2 c = z; \n\n  vec4 color = vec4( 0.0 ); \n\n  for( int i=0; i<50; ++I ) { \n    z.x = z.x * z.x-- z.y * z.y + c.x; \n    z.y = 2.0 * z.x * z.y + c.y; \n    if( dot( z, z ) > 10.0 ) { \n      color = i * vec4( 0.1, 0.15, 0.2, 0.0 ); \n      break; \n    } \n  } \n\n  imageStore( StorageImage, ivec2( gl_GlobalInvocationID.xy ), color ); \n}\n\n```", "```cpp\n      layout(location = 0) in vec4 app_position;\n\n```", "```cpp\n      layout(set=0, binding=0) uniform UniformBuffer { \n        mat4 ModelViewProjectionMatrix; \n      };\n\n```", "```cpp\n      gl_Position = ModelViewProjectionMatrix * app_position;\n\n```", "```cpp\n#version 450 \n\nlayout(location = 0) in vec4 app_position; \n\nlayout(set=0, binding=0) uniform UniformBuffer { \n  mat4 ModelViewProjectionMatrix; \n}; \n\nvoid main() { \n  gl_Position = ModelViewProjectionMatrix * app_position; \n}\n\n```", "```cpp\n      <instance name>.<variable name>\n\n```", "```cpp\n      <instance name>.<variable name>\n\n```", "```cpp\n#version 450 \n\nlayout( location = 0 ) out vec4 frag_color; \n\nlayout( push_constant ) uniform ColorBlock { \n  vec4 Color; \n} PushConstant; \n\nvoid main() { \n  frag_color = PushConstant.Color; \n}\n\n```", "```cpp\n      layout( location = 1 ) in vec2 app_tex_coordinates;\n\n```", "```cpp\n      layout( location = 0 ) out vec2 vert_tex_coordinates;\n\n```", "```cpp\n      vert_tex_coordinates = app_tex_coordinates;\n\n```", "```cpp\n      layout( location = 0 ) in vec2 vert_tex_coordinates;\n\n```", "```cpp\n      layout( set=0, binding=0 ) uniform sampler2D TextureImage;\n\n```", "```cpp\n      layout( location = 0 ) out vec4 frag_color;\n\n```", "```cpp\n      frag_color = texture( TextureImage, vert_tex_coordinates );\n\n```", "```cpp\n#version 450 \n\nlayout( location = 0 ) in vec4 app_position; \nlayout( location = 1 ) in vec2 app_tex_coordinates; \n\nlayout( location = 0 ) out vec2 vert_tex_coordinates; \n\nvoid main() { \n  gl_Position = app_position; \n  vert_tex_coordinates = app_tex_coordinates; \n}\n\n```", "```cpp\n#version 450 \n\nlayout( location = 0 ) in vec2 vert_tex_coordinates; \n\nlayout( set=0, binding=0 ) uniform sampler2D TextureImage; \n\nlayout( location = 0 ) out vec4 frag_color; \n\nvoid main() { \n  frag_color = texture( TextureImage, vert_tex_coordinates ); \n}\n\n```", "```cpp\n      layout( location = 0 ) in vec4 app_position;\n\n```", "```cpp\n      layout( location = 1 ) in vec3 app_normal;\n\n```", "```cpp\n      layout( set = 0, binding = 0 ) uniform UniformBuffer { \n        mat4 ModelViewMatrix; \n        mat4 ProjectionMatrix; \n      };\n\n```", "```cpp\n      layout( location = 0 ) out vec4 vert_normal;\n\n```", "```cpp\n      gl_Position = ModelViewMatrix * app_position;\n\n```", "```cpp\n      vert_normal = vec4( mat3( ModelViewMatrix ) * app_normal * \n      <scale>, 0.0 );\n\n```", "```cpp\n      layout( triangles ) in;\n\n```", "```cpp\n      layout( location = 0 ) in vec4 vert_normal[];\n\n```", "```cpp\n      layout( set = 0, binding = 0 ) uniform UniformBuffer { \n        mat4 ModelViewMatrix; \n        mat4 ProjectionMatrix; \n      };\n\n```", "```cpp\n      layout( line_strip, max_vertices = 6 ) out;\n\n```", "```cpp\n      layout( location = 0 ) out vec4 geom_color;\n\n```", "```cpp\n      layout( location = 0 ) in vec4 geom_color;\n\n```", "```cpp\n      layout( location = 0 ) out vec4 frag_color;\n\n```", "```cpp\n      frag_color = geom_color;\n\n```", "```cpp\n#version 450 \n\nlayout( location = 0 ) in vec4 app_position; \nlayout( location = 1 ) in vec3 app_normal; \n\nlayout( set = 0, binding = 0 ) uniform UniformBuffer { \n  mat4 ModelViewMatrix; \n  mat4 ProjectionMatrix; \n}; \n\nlayout( location = 0 ) out vec4 vert_normal; \n\nvoid main() { \n  gl_Position = ModelViewMatrix * app_position; \n  vert_normal = vec4( mat3( ModelViewMatrix ) * app_normal * 0.2, 0.0 ); \n}\n\n```", "```cpp\n#version 450 \n\nlayout( triangles ) in; \n\nlayout( location = 0 ) in vec4 vert_normal[]; \n\nlayout( set = 0, binding = 0 ) uniform UniformBuffer { \n  mat4 ModelViewMatrix; \n  mat4 ProjectionMatrix; \n}; \n\nlayout( line_strip, max_vertices = 6 ) out; \n\nlayout( location = 0 ) out vec4 geom_color; \n\nvoid main() { \n  for( int vertex = 0; vertex < 3; ++vertex ) { \n    gl_Position = ProjectionMatrix * gl_in[vertex].gl_Position; \n    geom_color = vec4( 0.2 ); \n    EmitVertex(); \n\n    gl_Position = ProjectionMatrix * (gl_in[vertex].gl_Position + vert_normal[vertex]); \n    geom_color = vec4( 0.6 ); \n    EmitVertex(); \n\n    EndPrimitive(); \n  } \n}\n\n```", "```cpp\n#version 450 \n\nlayout( location = 0 ) in vec4 geom_color; \n\nlayout( location = 0 ) out vec4 frag_color; \n\nvoid main() { \n  frag_color = geom_color; \n}\n\n```"]