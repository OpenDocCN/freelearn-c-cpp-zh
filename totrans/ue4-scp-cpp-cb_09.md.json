["```cpp\nUCLASS()\nclass CHAPTER_09_API UTileType : public UObject\n{\n    GENERATED_BODY()\npublic:\n UPROPERTY()\n int32 MovementCost;\n\n UPROPERTY()\n bool CanBeBuiltOn;\n\n UPROPERTY()\n FString TileName;\n};\n```", "```cpp\nUCLASS(BlueprintType)\nclass CHAPTER_09_API UTileType : public UObject\n```", "```cpp\nUPROPERTY() \nFString WeaponName; \nUPROPERTY() \nint32 MaximumHealth;\n```", "```cpp\nUCLASS(Blueprintable)\nclass CHAPTER_09_API ABaseEnemy : public AActor\n```", "```cpp\nclass CHAPTER_09_API ASlidingDoor : public AStaticMeshActor\n{\n    GENERATED_BODY()\n\npublic: \n    // Sets default values for this actor's properties\n    ASlidingDoor();\n\nprotected:\n    // Called when the game starts or when spawned\n    virtual void BeginPlay() override;\n\npublic: \n    // Called every frame\n    virtual void Tick(float DeltaTime) override;\n\n UFUNCTION(BlueprintCallable, Category = Door)\n void Open();\n\n UPROPERTY()\n bool IsOpen;\n\n UPROPERTY()\n FVector TargetLocation;\n};\n```", "```cpp\n#include \"SlidingDoor.h\"\n#include \"ConstructorHelpers.h\"\n\n// Sets default values\nASlidingDoor::ASlidingDoor()\n{\n    // Set this actor to call Tick() every frame. You can turn\n    // this off to improve performance if you don't need it.\n    PrimaryActorTick.bCanEverTick = true;\n\n    auto MeshAsset = ConstructorHelpers::FObjectFinder<UStaticMesh>\n    (TEXT(\"StaticMesh'/Engine/BasicShapes/Cube.Cube'\"));\n\n UStaticMeshComponent * SM = GetStaticMeshComponent();\n\n if (SM != nullptr)\n {\n if (MeshAsset.Object != nullptr)\n {\n SM->SetStaticMesh(MeshAsset.Object);\n SM->SetGenerateOverlapEvents(true);\n }\n\n SM->SetMobility(EComponentMobility::Movable);\n SM->SetWorldScale3D(FVector(0.3, 2, 3));\n }\n\n SetActorEnableCollision(true);\n\n IsOpen = false;\n PrimaryActorTick.bStartWithTickEnabled = true;\n}\n\n// Called when the game starts or when spawned\nvoid ASlidingDoor::BeginPlay()\n{\n    Super::BeginPlay();\n}\n\n// Called every frame\nvoid ASlidingDoor::Tick(float DeltaTime)\n{\n    Super::Tick(DeltaTime);\n\n if (IsOpen)\n {\n SetActorLocation(FMath::Lerp(GetActorLocation(), \n TargetLocation, 0.05));\n }\n}\n\nvoid ASlidingDoor::Open()\n{\n TargetLocation = ActorToWorld().TransformPositionNoScale( \n FVector(0, 0, 200));\n IsOpen = true;\n}\n\n```", "```cpp\n#pragma once\n\n#include \"CoreMinimal.h\"\n#include \"Engine/StaticMeshActor.h\"\n#include \"Spotter.generated.h\"\n\nUCLASS()\nclass CHAPTER_09_API ASpotter : public AStaticMeshActor\n{\n  GENERATED_BODY()\n\npublic:\n // Sets default values for this actor's properties\n ASpotter();\n\n // Called every frame\n virtual void Tick(float DeltaSeconds) override;\n\n UFUNCTION(BlueprintImplementableEvent)\n void OnPlayerSpotted(APawn* Player);\n\n};\n```", "```cpp\n#include \"Spotter.h\"\n#include \"ConstructorHelpers.h\"\n#include \"DrawDebugHelpers.h\"\n\n// Sets default values\nASpotter::ASpotter()\n{\n    // Set this actor to call Tick() every frame. You can\n    // turn this off to improve performance if\n    // you don't need it.\n    PrimaryActorTick.bCanEverTick = true;\n\n    // Set up visual aspect of the spotter\n    auto MeshAsset = \n    ConstructorHelpers::FObjectFinder<UStaticMesh>\n    (TEXT(\"StaticMesh'/Engine/BasicShapes/Cone.Cone'\"));\n\n    UStaticMeshComponent * SM = GetStaticMeshComponent();\n\n    if (SM != nullptr)\n    {\n        if (MeshAsset.Object != nullptr)\n        {\n            SM->SetStaticMesh(MeshAsset.Object);\n            SM->SetGenerateOverlapEvents(true);\n        }\n\n        SM->SetMobility(EComponentMobility::Movable);\n        SM->SetRelativeRotation(FRotator(90, 0, 0));\n    }\n\n}\n\n// Called every frame\nvoid ASpotter::Tick(float DeltaTime)\n{\n    Super::Tick(DeltaTime);\n\n    auto EndLocation = GetActorLocation() + \n    ActorToWorld().TransformVector(FVector(0, 0, -200));\n\n    // Check if there is an object in front of us\n    FHitResult HitResult;\n    GetWorld()->SweepSingleByChannel(HitResult,\n    GetActorLocation(), EndLocation, FQuat::Identity, \n    ECC_Camera, FCollisionShape::MakeSphere(25), \n    FCollisionQueryParams(\"Spot\", true, this));\n\n    APawn* SpottedPlayer = Cast<APawn>(HitResult.Actor.Get());\n\n    // If there is call the OnPlayerSpotted function\n    if (SpottedPlayer != nullptr)\n    {\n        OnPlayerSpotted(SpottedPlayer);\n    }\n\n    // Displays where we are checking for collision\n    DrawDebugLine(GetWorld(), GetActorLocation(), EndLocation, FColor::Red);\n\n}\n```", "```cpp\n#pragma once\n\n#include \"CoreMinimal.h\"\n#include \"Engine/StaticMeshActor.h\"\n#include \"King.generated.h\"\n\nDECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnKingDeathSignature, AKing*, DeadKing);\nUCLASS()\nclass CHAPTER_09_API AKing : public AStaticMeshActor\n{\n  GENERATED_BODY()\n```", "```cpp\nDECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnKingDeathSignature, AKing*, DeadKing);\nUCLASS()\nclass CHAPTER_09_API AKing : public AStaticMeshActor\n{\n    GENERATED_BODY()\n\n // Sets default values for this actor's properties\n AKing();\n};\n```", "```cpp\nUFUNCTION(BlueprintCallable, Category = King) \nvoid Die(); \n```", "```cpp\nUPROPERTY(BlueprintAssignable) \nFOnKingDeathSignature OnKingDeath; \n```", "```cpp\n#include \"King.h\"\n#include \"ConstructorHelpers.h\"\n\n// Sets default values\nAKing::AKing()\n{\n // Set this actor to call Tick() every frame. You can turn\n    // this off to improve performance if you don't need it.\n PrimaryActorTick.bCanEverTick = true;\n\n auto MeshAsset = ConstructorHelpers::FObjectFinder<UStaticMesh>\n    (TEXT(\"StaticMesh'/Engine/BasicShapes/Cone.Cone'\"));\n\n UStaticMeshComponent * SM = GetStaticMeshComponent();\n\n if (SM != nullptr)\n {\n if (MeshAsset.Object != nullptr)\n {\n SM->SetStaticMesh(MeshAsset.Object);\n SM->SetGenerateOverlapEvents(true);\n }\n SM->SetMobility(EComponentMobility::Movable);\n }\n}\n```", "```cpp\nvoid AKing :: Die () \n{ \n  OnKingDeath.Broadcast(this); \n} \n```", "```cpp\nAPeasant (); \n```", "```cpp\nUFUNCTION(BlueprintCallable, category = Peasant) \nvoid Flee (AKing * DeadKing); \n```", "```cpp\n#include \"Peasant.h\"\n#include \"ConstructorHelpers.h\"\n\nAPeasant::APeasant()\n{\n  // Set this actor to call Tick() every frame. You can\n  // turn this off to improve performance if \n  // you don't need it.\n  PrimaryActorTick.bCanEverTick = true;\n\n  auto MeshAsset = ConstructorHelpers::FObjectFinder<UStaticMesh>\n  (TEXT(\"StaticMesh'/Engine/BasicShapes/Cube.Cube'\"));\n\n  UStaticMeshComponent * SM = GetStaticMeshComponent();\n\n  if (SM != nullptr)\n  {\n    if (MeshAsset.Object != nullptr)\n    {\n      SM->SetStaticMesh(MeshAsset.Object);\n      SM->SetGenerateOverlapEvents(true);\n    }\n    SM->SetMobility(EComponentMobility::Movable);\n  }\n}\n```", "```cpp\nvoid APeasant::Flee(AKing* DeadKing)\n{\n    // Display message on the screen\n    GEngine->AddOnScreenDebugMessage(-1, 2, FColor::Red,\n        TEXT(\"Waily Waily!\"));\n\n    // Get the direction away from the dead king\n    FVector FleeVector = GetActorLocation() -\n        DeadKing->GetActorLocation();\n\n    // Set the magnitude (length) of the vector to 1\n    FleeVector.Normalize();\n\n    // Make the vector 500 times longer\n    FleeVector *= 500;\n\n    // Set the Actor's new location\n    SetActorLocation(GetActorLocation() + FleeVector);\n}\n```", "```cpp\n#pragma once\n\n#include \"CoreMinimal.h\"\n#include \"Engine/StaticMeshActor.h\"\n#include \"Tree.generated.h\"\n\nUENUM(BlueprintType)\nenum TreeType\n{\n Tree_Poplar,\n Tree_Spruce,\n Tree_Eucalyptus,\n Tree_Redwood\n};\n\nUCLASS()\nclass CHAPTER_09_API ATree : public AStaticMeshActor\n{\n```", "```cpp\nUCLASS()\nclass CHAPTER_09_API ATree : public AStaticMeshActor\n{\n    GENERATED_BODY()\n\npublic:\n // Sets default values for this actor's properties\n ATree();\n\n UPROPERTY(BlueprintReadWrite)\n TEnumAsByte<TreeType> Type;\n};\n```", "```cpp\n#include \"Tree.h\"\n\n#include \"ConstructorHelpers.h\"\n\n// Sets default values\nATree::ATree()\n{\n // Set this actor to call Tick() every frame. You can turn\n    // this off to improve performance if you don't need it.\n PrimaryActorTick.bCanEverTick = true;\n\n auto MeshAsset = ConstructorHelpers::FObjectFinder<UStaticMesh>\n    (TEXT(\"StaticMesh'/Engine/BasicShapes/Cylinder.Cylinder'\"));\n\n UStaticMeshComponent * SM = GetStaticMeshComponent();\n\n if (SM != nullptr)\n {\n if (MeshAsset.Object != nullptr)\n {\n SM->SetStaticMesh(MeshAsset.Object);\n SM->SetGenerateOverlapEvents(true);\n }\n SM->SetMobility(EComponentMobility::Movable);\n }\n}\n\n```", "```cpp\n#pragma once\n\n#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n#include \"PropertySpecifierActor.generated.h\"\n\nUCLASS()\nclass CHAPTER_09_API APropertySpecifierActor : public AActor\n{\n    GENERATED_BODY()\n\npublic: \n    // Sets default values for this actor's properties\n    APropertySpecifierActor();\n\nprotected:\n    // Called when the game starts or when spawned\n    virtual void BeginPlay() override;\n\npublic: \n    // Called every frame\n    virtual void Tick(float DeltaTime) override;\n\n    // Property Specifiers\n    UPROPERTY(EditDefaultsOnly)\n    bool EditDefaultsOnly;\n\n    UPROPERTY(EditInstanceOnly)\n    bool EditInstanceOnly;\n\n    UPROPERTY(EditAnywhere)\n    bool EditAnywhere;\n\n    UPROPERTY(VisibleDefaultsOnly)\n    bool VisibleDefaultsOnly;\n\n    UPROPERTY(VisibleInstanceOnly)\n    bool VisibleInstanceOnly;\n\n    UPROPERTY(VisibleAnywhere)\n    bool VisibleAnywhere;\n};\n```", "```cpp\n#pragma once\n\n#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n#include \"BlueprintPropertyActor.generated.h\"\n\nUCLASS()\nclass CHAPTER_09_API ABlueprintPropertyActor : public AActor\n{\n    GENERATED_BODY()\n\npublic: \n    // Sets default values for this actor's properties\n    ABlueprintPropertyActor();\n\nprotected:\n    // Called when the game starts or when spawned\n    virtual void BeginPlay() override;\n\npublic: \n    // Called every frame\n    virtual void Tick(float DeltaTime) override;\n\n UPROPERTY(BlueprintReadWrite, Category = Cookbook)\n bool ReadWriteProperty;\n\n UPROPERTY(BlueprintReadOnly, Category = Cookbook)\n bool ReadOnlyProperty;\n\n};\n```", "```cpp\nUCLASS()\nclass CHAPTER_09_API APostEditChangePropertyActor : public \nAStaticMeshActor\n{\n    GENERATED_BODY()\n\n // Sets default values for this actor's properties\n APostEditChangePropertyActor();\n\n UPROPERTY(EditAnywhere)\n bool ShowStaticMesh = true;\n\n virtual void PostEditChangeProperty(FPropertyChangedEvent& \n                                        PropertyChangedEvent) override;\n\n};\n```", "```cpp\n#include \"PostEditChangePropertyActor.h\"\n#include \"ConstructorHelpers.h\"\n\nAPostEditChangePropertyActor::APostEditChangePropertyActor()\n{\n // Set this actor to call Tick() every frame. You can turn\n    // this off to improve performance if you don't need it.\n PrimaryActorTick.bCanEverTick = true;\n\n auto MeshAsset = ConstructorHelpers::FObjectFinder<UStaticMesh>\n    (TEXT(\"StaticMesh'/Engine/BasicShapes/Cone.Cone'\"));\n\n UStaticMeshComponent * SM = GetStaticMeshComponent();\n\n if (SM != nullptr)\n {\n if (MeshAsset.Object != nullptr)\n {\n SM->SetStaticMesh(MeshAsset.Object);\n SM->SetGenerateOverlapEvents(true);\n }\n SM->SetMobility(EComponentMobility::Movable);\n }\n}\n```", "```cpp\nvoid APostEditChangePropertyActor::PostEditChangeProperty( FPropertyChangedEvent& PropertyChangedEvent)\n{\n    // Check if property is valid\n    if (PropertyChangedEvent.Property != nullptr)\n    {\n        // Get the name of the changed property\n        const FName PropertyName( \n                            PropertyChangedEvent.Property->GetFName());\n\n        // If the changed property is ShowStaticMesh then we\n        // will set the visibility of the actor\n        if (PropertyName == GET_MEMBER_NAME_CHECKED( \n                         APostEditChangePropertyActor, ShowStaticMesh))\n        {\n            UStaticMeshComponent * SM = GetStaticMeshComponent();\n\n            if (SM != nullptr)\n            {\n                SM->SetVisibility(ShowStaticMesh);\n            }\n        }\n    }\n\n    // Then call the parent version of this function\n    Super::PostEditChangeProperty(PropertyChangedEvent);\n}\n```", "```cpp\n#pragma once\n\n#include \"CoreMinimal.h\"\n#include \"Engine/StaticMeshActor.h\"\n#include \"OnConstructionActor.generated.h\"\n\nUCLASS()\nclass CHAPTER_09_API AOnConstructionActor : public AStaticMeshActor\n{\n  GENERATED_BODY()\n\npublic:\n AOnConstructionActor();\n\n virtual void OnConstruction(const FTransform& Transform) override;\n\n UPROPERTY(EditAnywhere)\n bool ShowStaticMesh;\n\n};\n```", "```cpp\n#include \"OnConstructionActor.h\"\n#include \"ConstructorHelpers.h\"\n\nAOnConstructionActor::AOnConstructionActor()\n{ \n // Set this actor to call Tick() every frame. You can turn\n    // this off to improve performance if you don't need it.\n PrimaryActorTick.bCanEverTick = true;\n\n auto MeshAsset = ConstructorHelpers::FObjectFinder<UStaticMesh>( \n TEXT(\"StaticMesh'/Engine/BasicShapes/Cone.Cone'\"));\n\n UStaticMeshComponent * SM = GetStaticMeshComponent();\n\n if (SM != nullptr)\n {\n if (MeshAsset.Object != nullptr)\n {\n SM->SetStaticMesh(MeshAsset.Object);\n SM->SetGenerateOverlapEvents(true);\n }\n SM->SetMobility(EComponentMobility::Movable);\n }\n\n // Default value of property\n ShowStaticMesh = true;\n}\n```", "```cpp\nvoid AOnConstructionActor::OnConstruction(const FTransform& Transform) \n{ \n  GetStaticMeshComponent()->SetVisibility(ShowStaticMesh); \n} \n```", "```cpp\nvoid AActor::PostEditMove(bool bFinished)\n{\n    if ( ReregisterComponentsWhenModified() && !FLevelUtils::IsMovingLevel())\n    {\n        UBlueprint* Blueprint = Cast<UBlueprint>(GetClass()->ClassGeneratedBy);\n        if (bFinished || bRunConstructionScriptOnDrag || (Blueprint && Blueprint->bRunConstructionScriptOnDrag))\n        {\n            FNavigationLockContext NavLock(GetWorld(), ENavigationLockReason::AllowUnregister);\n            RerunConstructionScripts();\n        }\n    }\n\n    // .... \n```"]