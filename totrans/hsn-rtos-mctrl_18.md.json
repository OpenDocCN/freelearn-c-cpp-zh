["```cpp\nosStatus_t status;\nstatus = osKernelInitialize();\nassert(status == osOK);\n```", "```cpp\n/// Attributes structure for thread.\ntypedef struct {\n  const char *name;    ///< name of the thread\n  uint32_t attr_bits;  ///< attribute bits\n  void *cb_mem;        ///< memory for control block\n  ///< size of provided memory for control block\n  uint32_t cb_size; \n  void *stack_mem;     ///< memory for stack\n  uint32_t stack_size; ///< size of stack\n  ///< initial thread priority (default: osPriorityNormal)\n  osPriority_t priority;\n  TZ_ModuleId_t tz_module; ///< TrustZone module identifier\n  uint32_t reserved;       ///< reserved (must be 0)\n} osThreadAttr_t;\n```", "```cpp\n  #define STACK_SIZE 512\n  osThreadAttr_t greenThreadAtrribs = {   .name = \"GreenTask\",\n                                          .attr_bits = osThreadDetached,\n                                          .cb_mem = NULL,\n                                          .cb_size = 0,\n                                          .stack_mem = NULL,\n                                          .stack_size = STACK_SIZE,\n                                          .priority = osPriorityNormal,\n                                          .tz_module = 0,\n                                          .reserved = 0};\n```", "```cpp\nosThreadId_t osThreadNew (    osThreadFunc_t func, \n                              void *argument, \n                              const osThreadAttr_t *attr);\n```", "```cpp\ngreenTaskThreadID = osThreadNew( GreenTask, NULL,\n                            &greenThreadAtrribs);\nassert(greenTaskThreadID != NULL);\n```", "```cpp\nvoid GreenTask(void *argument)\n{\n  while(1)\n  {\n    GreenLed.On();\n    osDelay(200);\n    GreenLed.Off();\n    osDelay(200);\n  }\n}\n```", "```cpp\nstatus = osKernelStart();\nassert(status == osOK);\n```", "```cpp\n#define STACK_SIZE 512\nstatic uint8_t RedTask_Stack[STACK_SIZE];\n```", "```cpp\n#define TCB_SIZE (sizeof(StaticTask_t))\n```", "```cpp\nuint8_t RedTask_TCB[TCB_SIZE];\n```", "```cpp\nosThreadAttr_t redThreadAtrribs = { .name = \"RedTask\",\n        .attr_bits = osThreadDetached,\n        .cb_mem = RedTask_TCB,\n        .cb_size = TCB_SIZE,\n        .stack_mem = RedTask_Stack,\n        .stack_size = STACK_SIZE,\n        .priority = osPriorityNormal,\n        .tz_module = 0,\n        .reserved = 0};\n```", "```cpp\nredTaskThreadID = osThreadNew( RedTask, NULL, &redThreadAtrribs);\nassert(redTaskThreadID != NULL);\n```", "```cpp\n#define configUSE_POSIX_ERRNO 1\n#define configUSE_APPLICATION_TASK_TAG 1\n```", "```cpp\n// FreeRTOS POSIX includes\n#include <FreeRTOS_POSIX.h>\n#include <FreeRTOS_POSIX/pthread.h>\n#include <FreeRTOS_POSIX/unistd.h>\n```", "```cpp\nvoid GreenTask(void *argument);\nvoid RedTask(void *argument);\nvoid lookBusy( void );\n```", "```cpp\npthread_t greenThreadId, redThreadId;\n```", "```cpp\nint pthread_create( pthread_t *thread, const pthread_attr_t *attr,\n                    void *(*start_routine) (void *), void *arg);\n```", "```cpp\nretVal = pthread_create( &greenThreadId, NULL, GreenTask, NULL);\nassert(retVal == 0);\n\nretVal = pthread_create( &redThreadId, NULL, RedTask, NULL);\nassert(retVal == 0);\n```", "```cpp\nvTaskStartScheduler();\n```", "```cpp\nvoid GreenTask(void *argument)\n{\n  while(1)\n  {\n    GreenLed.On();\n    sleep(1);\n    GreenLed.Off();\n    sleep(1);\n  }\n}\n```", "```cpp\nvoid RedTask( void* argument )\n{\n  while(1)\n  {\n    lookBusy();\n    RedLed.On();\n    sleep(1);\n    RedLed.Off();\n    sleep(2);\n  }\n}\n```"]