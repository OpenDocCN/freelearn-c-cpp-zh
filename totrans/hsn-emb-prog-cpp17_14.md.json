["```cpp\nlibrary IEEE; \nuse IEEE.STD_LOGIC_1164.ALL; \nuse IEEE.std_logic_unsigned.ALL; \nuse IEEE.numeric_std.all; \n\nentity FleaFPGA_Ohm_A5 is   \n   port( \n   sys_clock         : in        std_logic;  -- 25MHz clock input from external xtal oscillator. \n   sys_reset         : in        std_logic;  -- master reset input from reset header. \n```", "```cpp\n   n_led1                  : buffer    std_logic; \n\n   LVDS_Red          : out       std_logic_vector(0 downto 0); \n   LVDS_Green        : out       std_logic_vector(0 downto 0); \n   LVDS_Blue         : out       std_logic_vector(0 downto 0); \n   LVDS_ck                 : out       std_logic_vector(0 downto 0); \n\n   slave_tx_o        : out       std_logic; \n   slave_rx_i        : in        std_logic; \n   slave_cts_i       : in        std_logic;  -- Receive signal from #RTS pin on FT230x \n```", "```cpp\n   GPIO_2                  : inout           std_logic; \n   GPIO_3                  : inout           std_logic; \n   GPIO_4                  : inout           std_logic; \n   -- GPIO_5               : inout           std_logic; \n   GPIO_6                  : inout           std_logic;   \n   GPIO_7                  : inout           std_logic;   \n   GPIO_8                  : inout           std_logic;   \n   GPIO_9                  : inout           std_logic;   \n   GPIO_10                 : inout           std_logic; \n   GPIO_11                 : inout           std_logic;   \n   GPIO_12                 : inout           std_logic;   \n   GPIO_13                 : inout           std_logic;   \n   GPIO_14                 : inout           std_logic;   \n   GPIO_15                 : inout           std_logic;   \n   GPIO_16                 : inout           std_logic;   \n   GPIO_17                 : inout           std_logic; \n   GPIO_18                 : inout           std_logic;   \n   GPIO_19                 : inout           std_logic;   \n   GPIO_20                 : in        std_logic; \n   GPIO_21                 : in        std_logic;   \n   GPIO_22                 : inout           std_logic;   \n   GPIO_23                 : inout           std_logic; \n   GPIO_24                 : inout           std_logic; \n   GPIO_25                 : inout           std_logic;   \n   GPIO_26                 : inout           std_logic;   \n   GPIO_27                 : inout           std_logic; \n   GPIO_IDSD         : inout           std_logic; \n   GPIO_IDSC         : inout           std_logic; \n```", "```cpp\n   --ADC0_input      : in        std_logic; \n   --ADC0_error      : buffer    std_logic; \n   --ADC1_input      : in        std_logic; \n   --ADC1_error      : buffer    std_logic; \n   --ADC2_input      : in        std_logic; \n   --ADC2_error      : buffer    std_logic; \n   ADC3_input  : in        std_logic; \n   ADC3_error  : buffer    std_logic; \n```", "```cpp\n   mmc_dat1          : in        std_logic; \n   mmc_dat2          : in        std_logic; \n   mmc_n_cs          : out       std_logic; \n   mmc_clk           : out       std_logic; \n   mmc_mosi          : out       std_logic; \n   mmc_miso          : in        std_logic; \n\n   PS2_enable        : out       std_logic; \n   PS2_clk1          : inout           std_logic; \n   PS2_data1         : inout           std_logic; \n\n   PS2_clk2          : inout           std_logic; \n   PS2_data2         : inout           std_logic \n   ); \nend FleaFPGA_Ohm_A5; \n```", "```cpp\narchitecture arch of FleaFPGA_Ohm_A5 is \n   signal clk_dvi  : std_logic := '0'; \n   signal clk_dvin : std_logic := '0'; \n   signal clk_vga  : std_logic := '0'; \n   signal clk_50  : std_logic := '0'; \n   signal clk_pcs   : std_logic := '0'; \n\n   signal vga_red     : std_logic_vector(3 downto 0) := (others => '0'); \n   signal vga_green   : std_logic_vector(3 downto 0) := (others => '0'); \n   signal vga_blue    : std_logic_vector(3 downto 0) := (others => '0'); \n\n   signal ADC_lowspeed_raw     : std_logic_vector(7 downto 0) := (others => '0'); \n\n   signal red     : std_logic_vector(7 downto 0) := (others => '0'); \n   signal green   : std_logic_vector(7 downto 0) := (others => '0'); \n   signal blue    : std_logic_vector(7 downto 0) := (others => '0'); \n   signal hsync   : std_logic := '0'; \n   signal vsync   : std_logic := '0'; \n   signal blank   : std_logic := '0'; \n```", "```cpp\nbegin \n Dram_CKE <= '0';    -- DRAM Clock disable. \n Dram_n_cs <= '1';   -- DRAM Chip disable. \n PS2_enable <= '1'; -- Configures both USB host ports for legacy PS/2 mode. \n mmc_n_cs <= '1';    -- Micro SD card chip disable. \n```", "```cpp\n user_module1 : entity work.FleaFPGA_DSO \n    port map( \n         rst => not sys_reset, \n         clk => clk_50, \n         ADC_1 => n_led1, \n         ADC_lowspeed_raw => ADC_lowspeed_raw, \n         Sampler_Q => ADC3_error, \n         Sampler_D => ADC3_input, \n         Green_out => vga_green, \n         Red_out => vga_red, \n         Blue_out => vga_blue, \n         VGA_HS => hsync, \n         VGA_VS => vsync, \n         blank => blank, \n         samplerate_adj => GPIO_20, \n         trigger_adj => GPIO_21 \n    ); \n```", "```cpp\n   red <= vga_red & \"0000\"; \n   green <= vga_green & \"0000\"; \n   blue <= vga_blue & \"0000\"; \n```", "```cpp\n u0 : entity work.DVI_clkgen \n   port map( \n         CLKI              =>    sys_clock, \n         CLKOP             =>    clk_dvi, \n         CLKOS                   =>  clk_dvin, \n         CLKOS2                  =>  clk_vga, \n         CLKOS3                  =>  clk_50 \n         );   \n\n   u100 : entity work.dvid PORT MAP( \n      clk       => clk_dvi, \n      clk_n     => clk_dvin, \n      clk_pixel => clk_vga, \n      red_p     => red, \n      green_p   => green, \n      blue_p    => blue, \n      blank     => blank, \n      hsync     => hsync, \n      vsync     => vsync, \n      -- outputs to TMDS drivers \n      red_s     => LVDS_Red, \n      green_s   => LVDS_Green, \n      blue_s    => LVDS_Blue, \n      clock_s   => LVDS_ck \n   ); \n```", "```cpp\n   myuart : entity work.simple_uart \n\n         port map( \n               clk => clk_50, \n               reset => sys_reset, -- active low \n               txdata => ADC_lowspeed_raw, \n               --txready => ser_txready, \n               txgo => open, \n               --rxdata => ser_rxdata, \n               --rxint => ser_rxint, \n               txint => open, \n               rxd => slave_rx_i, \n               txd => slave_tx_o \n         ); \nend architecture; \n```", "```cpp\n#include <QMainWindow> \n\n#include <QSerialPort> \n#include <QChartView> \n#include <QLineSeries> \n\nnamespace Ui { \n    class MainWindow; \n} \n\nclass MainWindow : public QMainWindow { \n    Q_OBJECT \n\npublic: \n    explicit MainWindow(QWidget *parent = nullptr); \n    ~MainWindow(); \n\npublic slots: \n    void connectUart(); \n    void disconnectUart(); \n    void about(); \n    void quit(); \n\nprivate: \n    Ui::MainWindow *ui; \n\n    QSerialPort serialPort; \n    QtCharts::QLineSeries* series; \n    quint64 counter = 0; \n\nprivate slots: \n    void uartReady(); \n}; \n```", "```cpp\n#include \"mainwindow.h\" \n#include \"ui_mainwindow.h\" \n\n#include <QSerialPortInfo> \n#include <QInputDialog> \n#include <QMessageBox> \n\nMainWindow::MainWindow(QWidget *parent) : QMainWindow(parent), \n    ui(new Ui::MainWindow) { \n    ui->setupUi(this); \n\n    // Menu connections. \n    connect(ui->actionQuit, SIGNAL(triggered()), this, SLOT(quit())); \n    connect(ui->actionConnect, SIGNAL(triggered()), this, SLOT(connectUart())); \n    connect(ui->actionDisconnect, SIGNAL(triggered()), this, SLOT(disconnectUart())); \n    connect(ui->actionInfo, SIGNAL(triggered()), this, SLOT(about())); \n\n    // Other connections \n    connect(&serialPort, SIGNAL(readyRead()), this, SLOT(uartReady())); \n\n    // Configure the chart view. \n    QChart* chart = ui->chartView->chart(); \n    chart->setTheme(QChart::ChartThemeBlueIcy); \n    chart->createDefaultAxes(); \n    series = new QtCharts::QLineSeries(chart); \n    chart->setAnimationOptions(QChart::NoAnimation);         \n    chart->addSeries(series); \n} \n```", "```cpp\nMainWindow::~MainWindow() { \n    delete ui; \n} \n\nvoid MainWindow::connectUart() { \n    QList<QSerialPortInfo> comInfo = QSerialPortInfo::availablePorts(); \n    QStringList comNames; \n    for (QSerialPortInfo com: comInfo) { \n        comNames.append(com.portName()); \n    } \n\n    if (comNames.size() < 1) { \n        QMessageBox::warning(this, tr(\"No serial port found\"), tr(\"No serial port was found on the system. Please check all connections and try again.\")); \n        return; \n    } \n\n    QString comPort = QInputDialog::getItem(this, tr(\"Select serial port\"), tr(\"Available ports:\"), comNames, 0, false); \n\n    if (comPort.isEmpty()) { return; } \n\n    serialPort.setPortName(comPort); \n    if (!serialPort.open(QSerialPort::ReadOnly)) { \n        QMessageBox::critical(this, tr(\"Error\"), tr(\"Failed to open the serial port.\")); \n        return; \n    } \n\n    serialPort.setBaudRate(19200); \n    serialPort.setParity(QSerialPort::NoParity); \n    serialPort.setStopBits(QSerialPort::OneStop); \n    serialPort.setDataBits(QSerialPort::Data8); \n} \n```", "```cpp\nvoid MainWindow::disconnectUart() { \n    serialPort.close(); \n} \n```", "```cpp\nvoid MainWindow::uartReady() { \n    QByteArray data = serialPort.readAll(); \n\n    for (qint8 value: data) { \n        series->append(counter++, value); \n    } \n} \n```", "```cpp\nvoid MainWindow::about() { \n    QMessageBox::aboutQt(this, tr(\"About\")); \n} \n\nvoid MainWindow::quit() { \n    exit(0); \n} \n```"]