["```cpp\ngit clone https://github.com/codeplea/Hands-On-Network-Programming-with-C\ncd Hands-On-Network-Programming-with-C/chap06\n```", "```cpp\n//chap06.h//\n\n#if defined(_WIN32)\n#ifndef _WIN32_WINNT\n#define _WIN32_WINNT 0x0600\n#endif\n#include <winsock2.h>\n#include <ws2tcpip.h>\n#pragma comment(lib, \"ws2_32.lib\")\n\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <netdb.h>\n#include <unistd.h>\n#include <errno.h>\n\n#endif\n\n#if defined(_WIN32)\n#define ISVALIDSOCKET(s) ((s) != INVALID_SOCKET)\n#define CLOSESOCKET(s) closesocket(s)\n#define GETSOCKETERRNO() (WSAGetLastError())\n\n#else\n#define ISVALIDSOCKET(s) ((s) >= 0)\n#define CLOSESOCKET(s) close(s)\n#define SOCKET int\n#define GETSOCKETERRNO() (errno)\n#endif\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <clock.h>\n```", "```cpp\nGET /page1.htm HTTP/1.1\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36\nAccept-Language: en-US\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nAccept-Encoding: gzip, deflate\nHost: example.com\nConnection: Keep-Alive\n```", "```cpp\nHTTP/1.1 200 OK\nCache-Control: max-age=604800\nContent-Type: text/html; charset=UTF-8\nDate: Fri, 14 Dec 2018 16:46:09 GMT\nEtag: \"1541025663+gzip\"\nExpires: Fri, 21 Dec 2018 16:46:09 GMT\nLast-Modified: Fri, 09 Aug 2013 23:54:35 GMT\nServer: ECS (ord/5730)\nVary: Accept-Encoding\nX-Cache: HIT\nContent-Length: 1270\n\n<!doctype html>\n<html>\n<head>\n    <title>Example Domain</title>\n...\n```", "```cpp\nHTTP/1.1 200 OK\nContent-Type: text/plain; charset=ascii\nTransfer-Encoding: chunked\n\n44\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eius\n37\nmod tempor incididunt ut labore et dolore magna aliqua.\n0\n```", "```cpp\n/*web_get.c excerpt*/\n\nvoid parse_url(char *url, char **hostname, char **port, char** path) {\n    printf(\"URL: %s\\n\", url);\n```", "```cpp\n/*web_get.c excerpt*/\n\n    char *p;\n    p = strstr(url, \"://\");\n\n    char *protocol = 0;\n    if (p) {\n        protocol = url;\n        *p = 0;\n        p += 3;\n    } else {\n        p = url;\n    }\n\n    if (protocol) {\n        if (strcmp(protocol, \"http\")) {\n            fprintf(stderr,\n                    \"Unknown protocol '%s'. Only 'http' is supported.\\n\",\n                    protocol);\n            exit(1);\n        }\n    }\n```", "```cpp\n/*web_get.c excerpt*/\n\n    *hostname = p;\n    while (*p && *p != ':' && *p != '/' && *p != '#') ++p;\n```", "```cpp\n/*web_get.c excerpt*/\n\n    *port = \"80\";\n    if (*p == ':') {\n        *p++ = 0;\n        *port = p;\n    }\n    while (*p && *p != '/' && *p != '#') ++p;\n```", "```cpp\n/*web_get.c excerpt*/\n\n    *path = p;\n    if (*p == '/') {\n        *path = p + 1;\n    }\n    *p = 0;\n```", "```cpp\n/*web_get.c excerpt*/\n\n    while (*p && *p != '#') ++p;\n    if (*p == '#') *p = 0;\n```", "```cpp\n/*web_get.c excerpt*/\n\n    printf(\"hostname: %s\\n\", *hostname);\n    printf(\"port: %s\\n\", *port);\n    printf(\"path: %s\\n\", *path);\n}\n```", "```cpp\n/*web_get.c*/\n\n#include \"chap06.h\"\n```", "```cpp\n/*web_get.c continued*/\n\n#define TIMEOUT 5.0\n```", "```cpp\n/*web_get.c continued*/\n\nvoid send_request(SOCKET s, char *hostname, char *port, char *path) {\n    char buffer[2048];\n\n    sprintf(buffer, \"GET /%s HTTP/1.1\\r\\n\", path);\n    sprintf(buffer + strlen(buffer), \"Host: %s:%s\\r\\n\", hostname, port);\n    sprintf(buffer + strlen(buffer), \"Connection: close\\r\\n\");\n    sprintf(buffer + strlen(buffer), \"User-Agent: honpwc web_get 1.0\\r\\n\");\n    sprintf(buffer + strlen(buffer), \"\\r\\n\");\n\n    send(s, buffer, strlen(buffer), 0);\n    printf(\"Sent Headers:\\n%s\", buffer);\n}\n```", "```cpp\n/*web_get.c continued*/\n\nSOCKET connect_to_host(char *hostname, char *port) {\n    printf(\"Configuring remote address...\\n\");\n    struct addrinfo hints;\n    memset(&hints, 0, sizeof(hints));\n    hints.ai_socktype = SOCK_STREAM;\n    struct addrinfo *peer_address;\n    if (getaddrinfo(hostname, port, &hints, &peer_address)) {\n        fprintf(stderr, \"getaddrinfo() failed. (%d)\\n\", GETSOCKETERRNO());\n        exit(1);\n    }\n\n    printf(\"Remote address is: \");\n    char address_buffer[100];\n    char service_buffer[100];\n    getnameinfo(peer_address->ai_addr, peer_address->ai_addrlen,\n            address_buffer, sizeof(address_buffer),\n            service_buffer, sizeof(service_buffer),\n            NI_NUMERICHOST);\n    printf(\"%s %s\\n\", address_buffer, service_buffer);\n```", "```cpp\n/*web_get.c continued*/\n\n    printf(\"Creating socket...\\n\");\n    SOCKET server;\n    server = socket(peer_address->ai_family,\n            peer_address->ai_socktype, peer_address->ai_protocol);\n    if (!ISVALIDSOCKET(server)) {\n        fprintf(stderr, \"socket() failed. (%d)\\n\", GETSOCKETERRNO());\n        exit(1);\n    }\n\n    printf(\"Connecting...\\n\");\n    if (connect(server,\n                peer_address->ai_addr, peer_address->ai_addrlen)) {\n        fprintf(stderr, \"connect() failed. (%d)\\n\", GETSOCKETERRNO());\n        exit(1);\n    }\n    freeaddrinfo(peer_address);\n\n    printf(\"Connected.\\n\\n\");\n\n    return server;\n}\n```", "```cpp\n/*web_get.c continued*/\n\nint main(int argc, char *argv[]) {\n\n#if defined(_WIN32)\n    WSADATA d;\n    if (WSAStartup(MAKEWORD(2, 2), &d)) {\n        fprintf(stderr, \"Failed to initialize.\\n\");\n        return 1;\n    }\n#endif\n\n    if (argc < 2) {\n        fprintf(stderr, \"usage: web_get url\\n\");\n        return 1;\n    }\n    char *url = argv[1];\n```", "```cpp\n/*web_get.c continued*/\n\n    char *hostname, *port, *path;\n    parse_url(url, &hostname, &port, &path);\n```", "```cpp\n/*web_get.c continued*/\n\n    SOCKET server = connect_to_host(hostname, port);\n    send_request(server, hostname, port, path);\n```", "```cpp\n/*web_get.c continued*/\n\n    const clock_t start_time = clock();\n```", "```cpp\n/*web_get.c continued*/\n\n#define RESPONSE_SIZE 8192\n    char response[RESPONSE_SIZE+1];\n    char *p = response, *q;\n    char *end = response + RESPONSE_SIZE;\n    char *body = 0;\n\n    enum {length, chunked, connection};\n    int encoding = 0;\n    int remaining = 0;\n```", "```cpp\n/*web_get.c continued*/\n\n    while(1) {\n\n        if ((clock() - start_time) / CLOCKS_PER_SEC > TIMEOUT) {\n            fprintf(stderr, \"timeout after %.2f seconds\\n\", TIMEOUT);\n            return 1;\n        }\n\n        if (p == end) {\n            fprintf(stderr, \"out of buffer space\\n\");\n            return 1;\n        }\n```", "```cpp\n/*web_get.c continued*/\n\n        fd_set reads;\n        FD_ZERO(&reads);\n        FD_SET(server, &reads);\n\n        struct timeval timeout;\n        timeout.tv_sec = 0;\n        timeout.tv_usec = 200000;\n\n        if (select(server+1, &reads, 0, 0, &timeout) < 0) {\n            fprintf(stderr, \"select() failed. (%d)\\n\", GETSOCKETERRNO());\n            return 1;\n        }\n```", "```cpp\n/*web_get.c continued*/\n\n        if (FD_ISSET(server, &reads)) {\n            int bytes_received = recv(server, p, end - p, 0);\n            if (bytes_received < 1) {\n                if (encoding == connection && body) {\n                    printf(\"%.*s\", (int)(end - body), body);\n                }\n\n                printf(\"\\nConnection closed by peer.\\n\");\n                break;\n            }\n\n            /*printf(\"Received (%d bytes): '%.*s'\",\n                    bytes_received, bytes_received, p);*/\n\n            p += bytes_received;\n            *p = 0;\n```", "```cpp\n/*web_get.c continued*/\n\n            if (!body && (body = strstr(response, \"\\r\\n\\r\\n\"))) {\n                *body = 0;\n                body += 4;\n```", "```cpp\n/*web_get.c continued*/\n\n                printf(\"Received Headers:\\n%s\\n\", response);\n```", "```cpp\n/*web_get.c continued*/\n\n                q = strstr(response, \"\\nContent-Length: \");\n                if (q) {\n                    encoding = length;\n                    q = strchr(q, ' ');\n                    q += 1;\n                    remaining = strtol(q, 0, 10);\n\n                } else {\n                    q = strstr(response, \"\\nTransfer-Encoding: chunked\");\n                    if (q) {\n                        encoding = chunked;\n                        remaining = 0;\n                    } else {\n                        encoding = connection;\n                    }\n                }\n                printf(\"\\nReceived Body:\\n\");\n            }\n```", "```cpp\n/*web_get.c continued*/\n\n            if (body) {\n                if (encoding == length) {\n                    if (p - body >= remaining) {\n                        printf(\"%.*s\", remaining, body);\n                        break;\n                    }\n```", "```cpp\n/*web_get.c continued*/\n\n                } else if (encoding == chunked) {\n                    do {\n                        if (remaining == 0) {\n                            if ((q = strstr(body, \"\\r\\n\"))) {\n                                remaining = strtol(body, 0, 16);\n                                if (!remaining) goto finish;\n                                body = q + 2;\n                            } else {\n                                break;\n                            }\n                        }\n                        if (remaining && p - body >= remaining) {\n                            printf(\"%.*s\", remaining, body);\n                            body += remaining + 2;\n                            remaining = 0;\n                        }\n                    } while (!remaining);\n                }\n            } //if (body)\n```", "```cpp\n/*web_get.c continued*/\n\n        } //if FDSET\n    } //end while(1)\nfinish:\n\n    printf(\"\\nClosing socket...\\n\");\n    CLOSESOCKET(server);\n\n#if defined(_WIN32)\n    WSACleanup();\n#endif\n\n    printf(\"Finished.\\n\");\n    return 0;\n}\n```", "```cpp\ngcc web_get.c -o web_get\n./web_get http://example.com/\n```", "```cpp\ngcc web_get.c -o web_get.exe -lws2_32\nweb_get.exe http://example.com/\n```", "```cpp\nPOST /orders HTTP/1.1\nHost: example.com\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:64.0)\nContent-Type: application/json\nContent-Length: 56\nConnection: close\n\n{\"symbol\":\"VOO\",\"qty\":\"10\",\"side\":\"buy\",\"type\":\"market\"}\n```", "```cpp\n<form method=\"post\" action=\"/submission.php\">\n\n  <label for=\"name\">Name:</label>\n  <input name=\"name\" type=\"text\"><br>\n\n  <label for=\"comment\">Comment:</label>\n  <input name=\"comment\" type=\"text\"><br>\n\n  <input type=\"submit\" value=\"submit\">\n\n</form>\n```", "```cpp\nPOST /submission.php HTTP/1.1\nHost: 127.0.0.1:8080\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7)\nAccept-Language: en-US\nAccept-Encoding: gzip, deflate\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 31\nConnection: keep-alive\n\nname=Alice&comment=Well+Done%21\n```", "```cpp\n<form method=\"post\" enctype=\"multipart/form-data\" action=\"/submit.php\">\n    <input name=\"name\" type=\"text\"><br>\n    <input name=\"comment\" type=\"text\"><br>\n    <input name=\"file\" type=\"file\"><br>\n    <input type=\"submit\" value=\"submit\">\n</form>\n```", "```cpp\nPOST /submit.php HTTP/1.1\nHost: example.com\nContent-Type: multipart/form-data; boundary=-----------233121195710604\nContent-Length: 1727\n\n-------------233121195710604\nContent-Disposition: form-data; name=\"name\"\n\nAlice\n-------------233121195710604\nContent-Disposition: form-data; name=\"comment\"\n\nWell Done!\n-------------233121195710604\nContent-Disposition: form-data; name=\"file\"; filename=\"upload.txt\"\nContent-Type: text/plain\n\nHello.... <truncated>\n```"]