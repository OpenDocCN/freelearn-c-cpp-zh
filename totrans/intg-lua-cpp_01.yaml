- en: '1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Getting Your C++ Project Lua-Ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout the course of this book, you will learn how to integrate Lua into
    your C++ projects. Each chapter will be based on the knowledge learned from the
    previous chapters. This chapter teaches you how to prepare a C++ project in which
    to integrate Lua and introduces the tools used in this book so that you can understand
    the examples better. If you already know how to use some of the tools, please
    feel free to skip those sections. If not, feel free to do a deeper dive after
    going through this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Compiling the Lua source code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a C++ project with the Lua library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a C++ project with the Lua source code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executing a simple Lua script
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other toolchain options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To follow this chapter and this book, you will require the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A working C++ compiler, preferably the **GNU C++ Compiler** or **Clang/LLVM**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A build automation tool, preferably **Make**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code editor of your choice
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Lua source code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The source code for this chapter: [https://github.com/PacktPublishing/Integrate-Lua-with-CPP/tree/main/Chapter01](https://github.com/PacktPublishing/Integrate-Lua-with-CPP/tree/main/Chapter01)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You do not need prior Lua programming knowledge to understand this chapter.
    If you have any doubts relating to the Lua code examples in this chapter, that
    is fine; you can read it as C++ code, although there are syntax differences. You
    will learn Lua as you progress through this book. While it would be beneficial,
    you do not need to be a Lua expert if your focus is only on the C++ side.
  prefs: []
  type: TYPE_NORMAL
- en: We decided to use open-source compilers and build tools to work with the code
    examples in this book because they are readily available to everyone and are also
    the tools of choice in most large-scale projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are using a Linux or Mac development machine, the GNU C++ Compiler (or
    Clang/LLVM) and Make should already be installed. If not, please install the versions
    that are supported by your system. If you are a Windows user, you can go to the
    last section of this chapter first: *Other* *toolchain options*.'
  prefs: []
  type: TYPE_NORMAL
- en: The build tool used is called Make. In real projects, you might use other build
    tools. But Make is a fundamental option with no other dependencies, and other
    build tools share similar ideas, which makes it suitable for the purpose of this
    book. If you wish to, you can adapt the examples in this book to another build
    tool of your choice.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download the Lua source code from [https://www.lua.org/download.xhtml](https://www.lua.org/download.xhtml).
    You can select a specific version, but you will most likely wish to use the latest
    release. You can also clone the source code from Lua’s Git repository, here: [https://www.github.com/lua/lua](https://www.github.com/lua/lua).
    However, this is not officially recommended because Lua is stable and compact
    with infrequent changes.'
  prefs: []
  type: TYPE_NORMAL
- en: Compiling the Lua source code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many ways to access the Lua language. If you are using Linux, you
    can install Lua for development with the distribution’s package manager. For Windows,
    you can also find prebuilt binaries. However, since our goal is to integrate Lua
    into your C++ project, instead of using it as a standalone interpreter, it’s best
    to build from the source code yourself. When studying Lua, this will help you
    learn more about Lua. For example, in a modern code editor, *Visual Studio Code*
    included, you can easily check the declaration and implementation of Lua library
    functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we will focus on compiling Lua from its source code. Unarchive
    the downloaded Lua source code archive. Most compression tools support this, and
    the Lua download site also gives instructions. When you have done this, you will
    see a simple folder structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We will learn what the preceding code block does in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: The Lua source code package has a typical **POSIX** (think Linux and Unix) folder
    structure.
  prefs: []
  type: TYPE_NORMAL
- en: '`Makefile` is the root `Makefile` for the package'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`src` subfolder contains the source code'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`doc` subfolder contains the documentation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing shell
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will learn what a `zsh` (`Z` `shell`) on a POSIX machine.
    Another popular shell is `bash`, using which you can also run the examples in
    this book directly. Even if you use an **Integrated Development Environment**
    (**IDE**) and adapt the examples manually to your IDE, understanding the basics
    of shell commands can help you understand the examples better. All IDEs internally
    use various command line programs to do their work, which is similar to what we
    will be doing in a shell.
  prefs: []
  type: TYPE_NORMAL
- en: In very basic terms, a shell provides a command-line interface to the system.
    When you access a shell interactively, it could also be said that you are accessing
    a terminal. The words shell and terminal are sometimes used interchangeably, although
    they are technically different things. Thankfully, we do not need to worry about
    the terminology differences here. All systems with graphic user interfaces will
    also provide an application in which to start a shell. Often, those applications
    are called a **terminal** or a **console**.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can start a shell and try the following commands. To find out which shell
    you are using, use this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The output `/bin/zsh` indicates that the shell in use is the `Z` shell.
  prefs: []
  type: TYPE_NORMAL
- en: 'To go to a directory, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '`cd` is the command to change the current working directory. This goes into
    the Lua source code folder.'
  prefs: []
  type: TYPE_NORMAL
- en: 'And, as you have seen previously, `ls` is the command to list the contents
    of a directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Another thing of importance is the `%` sign. It signifies a shell prompt, and
    different shells or user roles may see a different sign. The part before `%` is
    the current working directory. The part after `%` is what command you would type
    into the terminal.
  prefs: []
  type: TYPE_NORMAL
- en: This section is only meant to be a brief explanation. If you encounter a shell
    command that you do not know, check it out online.
  prefs: []
  type: TYPE_NORMAL
- en: Building Lua
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In a shell terminal, go to the unarchived Lua source code folder and execute
    `make all test`. If your toolchain is found to be working, you will have compiled
    the Lua library and command-line interpreter. Now, let’s inspect the files of
    interest:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '`liblua.a` is the Lua library you can link with. `lua` is the Lua command-line
    interpreter.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s now try the interpreter to see if we can run it successfully:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'In the terminal, execute `src/lua` to start the interactive Lua interpreter.
    First, enter `1+1`: Lua will print back a result of `2`. Then enter `os.exit()`
    to exit the Lua interpreter.'
  prefs: []
  type: TYPE_NORMAL
- en: You have now successfully compiled the Lua library from its source code. Next,
    we will see how to use it in your project.
  prefs: []
  type: TYPE_NORMAL
- en: Building a C++ project with the Lua library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building your C++ project with the Lua library has the benefit of not having
    to include the 100+ Lua source files in your project and your source control system.
    However, it has some disadvantages as well. For example, if your project needs
    to support multiple platforms, you will need to maintain multiple pre-compiled
    libraries. In such a case, building from the Lua source code might be easier.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a project to work with the Lua library
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous section, we built the Lua library from the source code. Now,
    let’s extract it to use within our project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember the `Makefile` in the root of the source code folder? Open it and
    you will find the two lines shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: These are the header files and the static library you need.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a folder for your project. Within it, create an empty source file named
    `main.cpp`, an empty `Makefile`, and two empty folders named `include` and `lib`.
    Copy the header files into the `include` folder and the library file into the
    `lib` folder. The project folder should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: If you are using Linux, `tree` is a shell program used to print a folder’s hierarchy.
    If you don’t have `tree` installed, no need to worry. You can also examine the
    folder structure inside your preferred IDE.
  prefs: []
  type: TYPE_NORMAL
- en: Writing the C++ code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will write a simple C++ program to test whether we can link to the Lua library.
    In C++, you only need to include one header file for Lua: `lua.hpp`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Write `main.cpp` as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The preceding source code opens Lua, prints its build number, and then closes
    Lua.
  prefs: []
  type: TYPE_NORMAL
- en: Writing the Makefile
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As part of the first project, writing the `Makefile` is very simple. Let’s use
    this as a chance to learn some more details about the `Makefile`, if you haven’t
    got a good understanding already. For more information, you can check out the
    official website at [https://www.gnu.org/software/make/](https://www.gnu.org/software/make/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Write the `Makefile` as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This is a very basic `Makefile`. In a real project, you would need a more complex
    `Makefile` to make it more flexible. You will see more flexible examples later
    in this chapter. Here, the focus is simplicity for the first encounter. This initial
    `Makefile` has the following elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '`project-with-lua-lib` is a `Makefile` target. You can have as many targets
    as needed in a `Makefile`. When you invoke `make` without an explicit target,
    it will execute the first one defined in the file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`main.cpp` is the target’s dependency. You can depend on another target or
    a file. You can have as many dependencies as needed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The target invokes a `g++` command to compile `main.cpp` and link it with the
    Lua library. You will need to use a tab instead of spaces before the target commands.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-o project-with-lua-lib` specifies the name of the compiled executable file.
    You can change `project-with-lua-lib` to any name you want.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-Ilua/include` adds `lua/include` to the search path for header files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-Llua/lib` adds `lua/lib` to the linker search path for libraries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-llua` tells the linker to link with the static Lua library: `liblua.a`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing the project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In a terminal, execute `make` to build the project. Then execute `./project-with-lua-lib`
    to run the compiled project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'As shown in the preceding code, the C++ program will execute and print: `Lua
    version number` `is 504`.'
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You have finished your first C++ project with Lua by linking
    to the pre-compiled Lua library. In the next section, we will explore how to use
    Lua source code directly to avoid the disadvantages stated at the beginning of
    this section.
  prefs: []
  type: TYPE_NORMAL
- en: Building a C++ project with the Lua source code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building your C++ project with the Lua source code has the benefit that it is
    always compiled as part of your project, and there is no possibility of any surprises
    arising from compiler incompatibilities.
  prefs: []
  type: TYPE_NORMAL
- en: The major difference from linking with a pre-compiled Lua library is that we
    will now compile the Lua library from its source code first. It is also better
    to use the source code package without modifying it or copying only a few selected
    files into a new folder hierarchy. This will help in the future if you need to
    use a newer Lua version. In such a case, all you will need to do is to replace
    the Lua source code folder with the new version.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a project to work with the Lua source code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create a project using the Lua source code, we need to go back to the Lua
    source code package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: You will need the `src` subfolder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a folder for a new project. Within it, create an empty `main.cpp` and
    an empty `Makefile`, and copy the `src` subfolder shown in the preceding shell
    output as the `lua` subfolder in your project folder. The project structure should
    look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Writing the C++ code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can write the C++ code in exactly the same way that you did when building
    with the Lua library.
  prefs: []
  type: TYPE_NORMAL
- en: Writing the Makefile
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s go one step further compared to the last project, and write two targets
    for the `Makefile` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This `Makefile` first goes into the `lua` subfolder and then it builds the Lua
    library. After this, it compiles the C++ code and links it with the Lua library.
    The `lua` subfolder is a copy of the `src` folder from the Lua source code archive.
    If you accidentally copied the whole archive there, you may see some compile errors.
  prefs: []
  type: TYPE_NORMAL
- en: The `Makefile` also includes a `clean` target. This will delete compiled files.
    Usually, all build systems will have a `clean` target implemented.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In a terminal, enter `make` to build the project. Then enter `./project-with-lua-src`
    to execute the compiled project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The C++ program will execute and print : `Lua version number` `is 504`.'
  prefs: []
  type: TYPE_NORMAL
- en: Testing the clean target
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Since we have implemented a `clean` target, let’s also test that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This cleans the working folder by deleting compiler-generated files. In a production-ready
    project, you would do more by first outputting all intermediate files to a separate
    folder during building, most likely called `build` or `output`, and exclude that
    folder from the source control system.
  prefs: []
  type: TYPE_NORMAL
- en: So far, we have learned two ways to integrate Lua with C++ projects. Next, let’s
    learn how to execute real Lua scripts from C++.
  prefs: []
  type: TYPE_NORMAL
- en: Executing a simple Lua script
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To execute a Lua script, you can choose to use either the Lua library or the
    Lua source code. For production projects, I personally recommend using the source
    code. For learning purposes, either way is fine. We will use Lua source code in
    the rest of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Can you notice this?
  prefs: []
  type: TYPE_NORMAL
- en: Even if you choose to use the Lua source code, in the `Makefile`, you are first
    building the Lua source code into the Lua library and then make your project link
    to the library. Compared to using the Lua library directly, using the Lua source
    code is just doing one more step in your project. You can focus more on the similarities
    rather than the differences.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s look at a more general project structure.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As said, there will be more complex projects in the following chapters. For
    now, we will explore a more general project structure. We will build and link
    to Lua in a shared location instead of making a copy for each project.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the structure of the project as shown within its parent folders:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The two relevant folders for this project are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The `execute-lua-script` folder contains the main project, inside which there
    is a C++ source file, a `Makefile`, and a Lua script file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `lua` folder contains the Lua source code package, which is unarchived and
    used as-is
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The other folders shown indicate how the source code of this book is organized
    – first into chapters and then into projects. Following the exact structure is
    optional, as long as you can make it work.
  prefs: []
  type: TYPE_NORMAL
- en: Writing the Makefile
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We’ve seen two simple `Makefiles` in the previous two projects. Let’s write
    a more flexible `Makefile` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'This `Makefile` is more flexible and should be good enough to use as a template
    for study purposes. It differs from the previous ones in the following aspects:'
  prefs: []
  type: TYPE_NORMAL
- en: It defines a few variables at the beginning of the file. The benefit is that
    in a real-life project, you would need to compile multiple files. This way, you
    do not need to repeat yourself in each target. This is also clearer to read.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The default target, conventionally named `all`, depends on two other targets.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the `lua` target, there is an `@` sign before the command. This will stop
    printing out the command content in the terminal when `make` executes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LUA_PATH` is the path to the Lua source code relative to the folder where
    this `Makefile` resides.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CXX` is the conventional variable name to define the C++ compiler program.
    Use `CC` for the C compiler.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CXXFLAGS` defines the parameters provided to the C++ compiler. Use `CFLAGS`
    for the C compiler.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CPPFLAGS` defines the parameters provided to the C preprocessor, and C++ shares
    the same preprocessor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LDFLAGS` defines the parameters provided to the linker. In some development
    systems, you may need to put `LDFLAGS` after `-``o $(EXECUTABLE)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With the `Makefile` ready, let’s write the C++ code.
  prefs: []
  type: TYPE_NORMAL
- en: Writing the C++ code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To execute a Lua script, we need some real actions, which we can get by calling
    some Lua library functions. Write `main.cpp` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The code is doing the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: Opening Lua and creating a Lua state with `luaL_newstate`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Opening Lua standard libs with `luaL_openlibs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Loading a Lua script named `script.lua` with `luaL_loadfile` and executing it
    with `lua_pcall`. We will write `script.lua` soon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Outputting an error if the script has failed to execute. This is done inside
    the `if` clause.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Closing Lua with `lua_close`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Lua functions used here, as well as the Lua state, will be explained in
    detail in *Chapter 3*.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you have created an empty `script.lua`, delete it. Compile and run the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: As expected, it says `script.lua` is not found. Don’t worry. You will write
    it next. The important thing to note is that you have finished coding the C++
    part of the project and have already compiled the project.
  prefs: []
  type: TYPE_NORMAL
- en: Writing the Lua script
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Write `script.lua` as the one-liner shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: This will print `Hello C++!`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the project again without recompiling the C++ code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Congratulations! You have now executed a Lua script from a C++ program and changed
    what the C++ program does after it has been compiled.
  prefs: []
  type: TYPE_NORMAL
- en: The next section offers some ideas to set up your development environment differently.
  prefs: []
  type: TYPE_NORMAL
- en: Other toolchain options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you do not have access to a native POSIX system, there are many other toolchain
    options. Here we have given two examples. Because your development platform may
    be different and OS updates and situations change, these only serve as some ideas.
    You can always research online and experiment to get a comfortable setup for yourself.
  prefs: []
  type: TYPE_NORMAL
- en: Using Visual Studio or Xcode
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Lua source code is written in C and does not need other dependencies. You
    can copy the `src` folder from the Lua source code package into Visual Studio
    or Xcode, either into your project directly or by configuring it as a Lua project
    that your main project depends on. Tweak the project settings as you need. This
    is quite doable.
  prefs: []
  type: TYPE_NORMAL
- en: Whatever IDE you choose to use, remember to check its license to see whether
    you can use the IDE for your purpose.
  prefs: []
  type: TYPE_NORMAL
- en: Using Cygwin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you use Windows, you can get Cygwin for a POSIX experience:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the Cygwin installer from [https://sourceware.org/cygwin/](https://sourceware.org/cygwin/)
    and run the installer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: During package selection, search for the two packages called `make` and `gcc-g++`.
    Select them for installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change all your shell commands and project `Makefiles` related to Lua slightly.
    You need to build the Linux flavor of the library explicitly. For example, change
    `cd lua && make` to `cd lua && make linux`. This is because the Lua `Makefile`
    could not detect Cygwin as a Linux flavor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Cygwin terminal, and you can build and run projects as shown in the
    examples in this chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned how to compile the Lua source code, how to
    link to the Lua library, and how to include the Lua source code directly in your
    project. Finally, we executed a Lua script from C++ code. By following these steps
    yourself, you should be comfortable and confident in including Lua in your C++
    projects and prepared for more complex work.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn the basics of the Lua programming language.
    If you are already familiar with the Lua programming language, feel free to skip
    *Chapter 2**, Lua Fundamentals*. We will come back to the communications between
    Lua and C++ in *Chapter 3**, How to Call Lua* *from C++*.
  prefs: []
  type: TYPE_NORMAL
