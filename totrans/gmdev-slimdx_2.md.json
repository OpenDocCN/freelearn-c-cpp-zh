["```cpp\nusing SlimDX.DirectInput;\nusing SlimDX.XInput;\n```", "```cpp\nbool m_IsDisposed = false;\nDirectInput m_DirectInput;\n\nKeyboard m_Keyboard;\nKeyboardState m_KeyboardStateCurrent;\nKeyboardState m_KeyboardStateLast;\n\nMouse m_Mouse;\nMouseState m_MouseStateCurrent;\nMouseState m_MouseStateLast;\n```", "```cpp\npublic UserInput()\n{\n  InitDirectInput();\n\n  m_KeyboardStateCurrent = new KeyboardState();\n  m_KeyboardStateLast = new KeyboardState();\n\n  m_MouseStateCurrent = new MouseState();\n  m_MouseStateLast = new MouseState();\n\n}\n```", "```cpp\nprivate void InitDirectInput()\n{\n  m_DirectInput = new DirectInput();\n\n  // Create our keyboard and mouse devices.\n  m_Keyboard = new Keyboard(m_DirectInput);\n  m_Mouse = new Mouse(m_DirectInput);\n\n}\n```", "```cpp\npublic void Update()\n{\n  // Reacquire the devices in case another application has\n  // taken control of them.\n  m_Keyboard.Acquire();\n  m_Mouse.Acquire();\n\n  // Update our keyboard state variables.\n  m_KeyboardStateLast = m_KeyboardStateCurrent;\n  m_KeyboardStateCurrent = m_Keyboard.GetCurrentState();\n\n  // Update our mouse state variables.\n  m_MouseStateLast = m_MouseStateCurrent;\n  m_MouseStateCurrent = m_Mouse.GetCurrentState();\n}\n```", "```cpp\nprotected virtual void Dispose(bool disposing)\n{\n  if (!this.m_IsDisposed)\n  {\n    if (disposing)\n    {\n      // Unregister events\n\n      // get rid of managed resources here\n      if (m_DirectInput != null)\n      m_DirectInput.Dispose();\n\n      if (m_Keyboard != null)\n      m_Keyboard.Dispose();\n\n      if (m_Mouse != null)\n      m_Mouse.Dispose();\n    }\n\n    // get rid of unmanaged resources here\n\n  }\n\n  m_bDisposed = true;\n}\n```", "```cpp\npublic bool IsDisposed\n{\n  get\n  {\n    return m_bDisposed;\n  }\n}\n\npublic Keyboard Keyboard\n{\n  get\n  {\n    return m_Keyboard;\n  }\n}\n```", "```cpp\nusing SlimDX.DirectInput;\n```", "```cpp\nprivate UserInput m_UserInput;\n```", "```cpp\nm_UserInput = new UserInput();\n```", "```cpp\npublic bool IsKeyPressed(Key key)\n{\n  return m_KeyboardStateCurrent.IsPressed(key);\n}\n```", "```cpp\npublic virtual void UpdateScene(double frameTime)\n{\n  // Get the latest user input.\n  m_UserInput.Update();\n\n  if (m_UserInput.IsKeyPressed(Key.Return) &&\n    (m_UserInput.IsKeyPressed(Key.LeftAlt) ||\n    m_UserInput.IsKeyPressed(Key.RightAlt)))\n  {\n    // Toggle fullscreen mode.\n    ToggleFullscreen();\n  }\n  else if (m_UserInput.IsKeyPressed(Key.Escape))\n  {\n    // Close the program.\n    m_Form.Close();\n  }\n}\n```", "```cpp\nm_UserInput.Dispose();\n```", "```cpp\nm_DirectInput.GetDevices(DeviceClass.GameController, DeviceEnumerationFlags.AttachedOnly);\n```", "```cpp\npublic void GetJoysticks()\n{\n  IList<DeviceInstance> deviceList = m_DirectInput.GetDevices(DeviceClass.GameController, DeviceEnumerationFlags.AttachedOnly);\n  if (deviceList.Count < 1)\n  {\n    System.Diagnostics.Debug.WriteLine(\"NO GAME CONTROLLERS WERE FOUND!\");\n  }\n  else\n  {\n    foreach (DeviceInstance device in deviceList)\n    {\n      System.Diagnostics.Debug.WriteLine(\"PRODUCT NAME: \" + device.ProductName);\n    }\n  }\n}\n```", "```cpp\nGetJoysticks();\n```", "```cpp\nJoystick m_Joystick1;\nJoystickState m_Joy1StateCurrent;\nJoystickState m_Joy1StateLast;\n```", "```cpp\nm_Joy1StateCurrent = new JoystickState();\nm_Joy1StateLast = new JoystickState();\n```", "```cpp\npublic void GetJoysticks()\n{\n  IList<DeviceInstance> deviceList = m_DirectInput.GetDevices(DeviceClass.GameController, DeviceEnumerationFlags.AttachedOnly);\n\n  for (int i = 0; i < deviceList.Count; i++)\n  {\n    if (i == 0)\n    {\n      m_Joystick1 = new Joystick(m_DirectInput, deviceList[0].InstanceGuid);\n      // Set the range to use for all of the axis on our game controller.\n      m_Joystick1.Properties.SetRange(-1000, 1000);\n\n    }\n  }\n}\n```", "```cpp\nm_Joystick1.Acquire();\n```", "```cpp\nm_Joy1StateLast = m_Joy1StateCurrent;\nm_Joy1StateCurrent = m_Joystick1.GetCurrentState();\n```", "```cpp\nif (m_Joy1StateCurrent.IsPressed(0))\n  System.Diagnostics.Debug.WriteLine(\"DIRECTINPUT: BUTTON 0 IS PRESSED!\");\nif (m_Joy1StateCurrent.IsPressed(1))\n  System.Diagnostics.Debug.WriteLine(\"DIRECTINPUT: BUTTON 1 IS PRESSED!\");\nif (m_Joy1StateCurrent.IsPressed(2))\n  System.Diagnostics.Debug.WriteLine(\"DIRECTINPUT: BUTTON 2 IS PRESSED!\");\nif (m_Joy1StateCurrent.IsPressed(3))\n  System.Diagnostics.Debug.WriteLine(\"DIRECTINPUT: BUTTON 3 IS PRESSED!\");\n```", "```cpp\nif (m_Joystick1 != null)\n  m_Joystick1.Dispose();\n```", "```cpp\nController m_Controller1;\nGamepad m_Controller1StateCurrent;\nGamepad m_Controller1StateLast;\n```", "```cpp\nprivate void InitXInput()\n{\n  m_Controller1 = new Controller(UserIndex.One);\n}\n```", "```cpp\npublic UserInput()\n{\n  InitDirectInput();\n InitXInput();\n\n  m_KeyboardStateCurrent = new KeyboardState();\n  m_KeyboardStateLast = new KeyboardState();\n\n  m_MouseStateCurrent = new MouseState();\n  m_MouseStateLast = new MouseState();\n\n  m_Joy1StateCurrent = new JoystickState();\n  m_Joy1StateLast = new JoystickState();\n\n m_Controller1StateCurrent = new Gamepad();\n m_Controller1StateLast = new Gamepad();\n}\n```", "```cpp\nm_Controller1StateLast = m_Controller1StateCurrent;\nm_Controller1StateCurrent = m_Controller1.GetState().Gamepad;\"\nif (XI_IsButtonPressed(GamepadButtonFlags.A))\n  System.Diagnostics.Debug.WriteLine(\"XINPUT: THE A BUTTON IS PRESSED!!\");\nif (XI_IsButtonPressed(GamepadButtonFlags.B))\n  System.Diagnostics.Debug.WriteLine(\"XINPUT: THE B BUTTON IS PRESSED!!\");\nif (XI_IsButtonPressed(GamepadButtonFlags.X))\n  System.Diagnostics.Debug.WriteLine(\"XINPUT: THE X BUTTON IS PRESSED!!\");\nif (XI_IsButtonPressed(GamepadButtonFlags.Y))\n  System.Diagnostics.Debug.WriteLine(\"XINPUT: THE Y BUTTON IS PRESSED!!\");\n```"]