["```cpp\n{\n     \"user1\": \"https://i.ibb.co/KxqzJMp/rocket.png\",\n     \"user2\": \"https://i.ibb.co/d7BR6hX/saucer.png\"\n}\n```", "```cpp\n    extends HTTPRequest\n    @export_global_dir var cache_directory = \"user://.cache/\"\n    ```", "```cpp\n    extends HTTPRequest\n    @export_global_dir var cache_directory = \"user://.cache/\"\n    @export_global_file var spaceships_database_path = \"user://.  cache/PlayerSpaces\n    hips.json\"\n    ```", "```cpp\n    extends HTTPRequest\n    @export_global_dir var cache_directory = \"user://.cache/\"\n    @export_global_file var spaceships_database_path = \"user://.cache/PlayerSpaces\n    hips.json\"\n    @export var spaceships_database_link = \"https://raw.githubusercontent.com/PacktPublishing/The-Essential-Guide-to-Creating-Multiplayer-Games-with-Godot-4.0/13.caching-data/source/09.prototyping-space-adventure/PlayerSpaceships.json\"\n    ```", "```cpp\n    func download_spaceships_database():\n         var directory_access = DirAccess.open(cache_directory)\n         if not directory_access:\n              DirAccess.make_dir_absolute(cache_directory)\n    ```", "```cpp\n    func download_spaceships_database():\n         var directory_access = DirAccess.open(cache_directory)\n         if not directory_access:\n              DirAccess.make_dir_absolute(cache_directory)\n         var file_access = FileAccess.open(spaceships_database_path, FileAccess.READ)\n         if not file_access:\n              download_file = spaceships_database_path\n    ```", "```cpp\n    func download_spaceships_database():\n         var directory_access = DirAccess.open(cache_directory)\n         if not directory_access:\n              DirAccess.make_dir_absolute(cache_directory)\n         var file_access = FileAccess.open(spaceships_database_path, FileAccess.READ)\n         if not file_access:\n              download_file = spaceships_database_path\n              request(spaceships_database_link)\n    ```", "```cpp\n    func download_spaceships_database():\n         var directory_access = DirAccess.open(cache_directory)\n         if not directory_access:\n              DirAccess.make_dir_absolute(cache_directory)\n         var file_access = FileAccess.open(spaceships_database_path, FileAccess.READ)\n         if not file_access:\n              download_file = spaceships_database_path\n              request(spaceships_database_link)\n              await request_completed\n    ```", "```cpp\n    extends HTTPRequest\n    @export_global_file var spaceships_database_file = \"user://.cache/PlayerSpaces hips.json\"\n    ```", "```cpp\n    extends HTTPRequest\n    @export_global_file var spaceships_database_file = \"user://.cache/PlayerSpaces hips.json\"\n    func download_spaceship(user, sprite_file):\n    ```", "```cpp\n    func download_spaceship(user, sprite_file):\n         var players_spaceships = {}\n    ```", "```cpp\n    func download_spaceship(user, sprite_file):\n         var players_spaceships = {}     if FileAccess.file_exists(spaceships_database_file):\n              var file = FileAccess.open(spaceships_database_file, FileAccess.READ)\n              players_spaceships = JSON.parse_string(file.get_as_text())\n    ```", "```cpp\n    func download_spaceship(user, sprite_file):\n         var players_spaceships = {}\n         if FileAccess.file_exists(spaceships_database_file):\n              var file = FileAccess.open(spaceships_database_file, FileAccess.READ)\n              players_spaceships = JSON.parse_string(file.get_as_text())\n         if user in players_spaceships:\n              download_file = sprite_file\n              var error = request(players_spaceships[user])\n    ```", "```cpp\n    func download_spaceship(user, sprite_file):\n         var players_spaceships = {}\n         if FileAccess.file_exists(spaceships_database_file):\n              var file = FileAccess.open(spaceships_database_file, FileAccess.READ)\n              players_spaceships = JSON.parse_string(file.get_as_text())\n         if user in players_spaceships:\n              download_file = sprite_file\n              var error = request(players_spaceships[user])\n              await request_completed\n              return error\n         return FAILED\n    ```", "```cpp\n    @onready var http_request = $TextureDownloadHTTPRequest\n    ```", "```cpp\n    @rpc(\"authority\", \"call_local\")\n    func load_spaceship(user):\n    ```", "```cpp\n    @rpc(\"authority\", \"call_local\")\n    func load_spaceship(user):\n         var spaceship_file = \"user://.cache/\" + user + \"_spaceship.png\"\n    ```", "```cpp\n    @rpc(\"authority\", \"call_local\")\n    func load_spaceship(user):\n         var spaceship_file = \"user://.cache/\" + user + \"_spaceship.png\"\n         if FileAccess.file_exists(spaceship_file):\n              update_sprite(spaceship_file)\n    ```", "```cpp\n    @rpc(\"authority\", \"call_local\")\n    func load_spaceship(user):\n         var spaceship_file = \"user://.cache/\" + user + \"_spaceship.png\"\n         if FileAccess.file_exists(spaceship_file):\n              update_sprite(spaceship_file)\n         else:\n              if await http_request.download_spaceship(user, spaceship_file) == OK:\n                   update_sprite(spaceship_file)\n    ```", "```cpp\n    func update_sprite(spaceship_file):\n         var image = Image.load_from_file(spaceship_file)\n         var texture = ImageTexture.create_from_image(image)\n         $Spaceship/Sprite2D.texture = texture\n    ```", "```cpp\n    @onready var http_request = $SpaceshipsDatabaseDownloadHTTPRequest\n    ```", "```cpp\n    var player_users = {}\n    ```", "```cpp\n    func _ready():\n         if not multiplayer.is_server():\n              await(get_tree().create_timer(0.1).timeout)\n              await http_request.download_spaceships_database()\n    ```", "```cpp\n    func _ready():\n         if not multiplayer.is_server():\n              await(get_tree().create_timer(0.1).timeout)\n              await http_request.download_spaceships_database()\n              rpc_id(1, \"sync_world\")\n              rpc_id(1, \"create_spaceship\", AuthenticationCredentials.user)\n    ```", "```cpp\n    @rpc(\"any_peer\", \"call_remote\")\n    func create_spaceship(user):\n    ```", "```cpp\n    @rpc(\"any_peer\", \"call_remote\")\n    func create_spaceship(user):\n         var player_id = multiplayer.get_remote_sender_id()\n         var spaceship = preload(\"res://09.prototyping-space-adventure/Actors/Player/Play er2D.tscn\").instantiate()\n         spaceship.name = str(player_id)\n         player_users[spaceship.name] = user\n    ```", "```cpp\n    @rpc(\"any_peer\", \"call_remote\")\n    func create_spaceship(user):\n         var player_id = multiplayer.get_remote_sender_id()\n         var spaceship = preload(\"res://09.prototyping-space-adventure/Actors/Player/Play er2D.tscn\").instantiate()\n         spaceship.name = str(player_id)\n         player_users[spaceship.name] = user\n         $Players.add_child(spaceship)\n         await(get_tree().create_timer(0.1).timeout)\n         spaceship.rpc(\"setup_multiplayer\", player_id)\n         spaceship.rpc(\"load_spaceship\", user)\n    ```", "```cpp\n    func _on_players_multiplayer_spawner_spawned(node):\n         var player_id = int(str(node.name))\n    ```", "```cpp\n    func _on_players_multiplayer_spawner_spawned(node):\n         var player_id = int(str(node.name))\n         node.rpc(\"setup_multiplayer\", player_id)\n    ```", "```cpp\n    func _on_players_multiplayer_spawner_spawned(node):\n         var player_id = int(str(node.name))\n         node.rpc(\"setup_multiplayer\", player_id)\n         if not multiplayer.is_server():\n              rpc_id(1, \"sync_spaceship\", player_id)\n    ```", "```cpp\n    @rpc(\"any_peer\", \"call_local\")\n    func sync_spaceship(player_id):\n    ```", "```cpp\n    @rpc(\"any_peer\", \"call_local\")\n    func sync_spaceship(player_id):\n         var requester = multiplayer.get_remote_sender_id()\n    ```", "```cpp\n    @rpc(\"any_peer\", \"call_local\")\n    func sync_spaceship(player_id):\n         var requester = multiplayer.get_remote_sender_id()\n         var node = get_node(\"Players/%s\" % player_id)\n    ```", "```cpp\n    @rpc(\"any_peer\", \"call_local\")\n    func sync_spaceship(player_id):\n         var requester = multiplayer.get_remote_sender_id()\n         var node = get_node(\"Players/%s\" % player_id)\n         var user = player_users[node.name]\n    ```", "```cpp\n    @rpc(\"any_peer\", \"call_local\")\n    func sync_spaceship(player_id):\n         var requester = multiplayer.get_remote_sender_id()\n         var node = get_node(\"Players/%s\" % player_id)\n         var user = player_users[node.name]\n         node.rpc_id(requester, \"load_spaceship\", user)\n    ```", "```cpp\nfunc _ready():\n     var callable = Callable(self, \"get_texture_downloaded_bytes\")\n     Performance.add_custom_monitor(\"Network/Texture Download Bytes\", callable)\nfunc get_texture_downloaded_bytes():\n     return get_downloaded_bytes()\n```", "```cpp\ncurl -X GET \"https://api.lootlocker.io/game/v1/assets/list?count=10&filter=purchasabl e\" \\-H \"x-session-token: your_token_here\"\n```", "```cpp\nvar url = \"https://api.lootlocker.io/game/v1/assets/list?count=10&filter=purchasable\"\nvar header = [\"Content-Type: application/json\", \"x-session-token: %s\" % LootLocker.tok\nen]\nrequest(url, header)\n```"]