- en: Creating and Loading a WebAssembly Module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The flags we passed to the `emcc` command in [Chapter 4](d03f5dbf-8b6e-49aa-96be-9bb64681be24.xhtml), *Installing
    the Required Dependencies*, produced a single `.wasm` file that could be loaded
    and instantiated in the browser using the native `WebAssembly` object. The C code
    was a very simple example intended to test the compiler without having to accommodate
    for included libraries or WebAssembly's limitations. We can overcome some of the
    limitations of WebAssembly in our C / C++ code with minimal performance loss by
    utilizing some of Emscripten's capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we'll cover the compilation and loading steps that correspond
    with the use of Emscripten's glue code. We'll also describe the process for compiling/outputting
    strictly `.wasm` files and loading them using the browser's `WebAssembly` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our goal for this chapter is to understand the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The compilation process for C code that utilizes Emscripten's JavaScript "glue"
    code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to load an Emscripten module in the browser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The compilation process for C code that outputs only `.wasm` files (no "glue"
    code)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to configure build tasks in VS Code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to compile and load a Wasm module in the browser using the global `WebAssembly`
    object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compiling C with Emscripten glue code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 4](d03f5dbf-8b6e-49aa-96be-9bb64681be24.xhtml), *Installing the
    Required Dependencies*, you wrote and compiled a simple three-line program to
    ensure your Emscripten installation was valid. We passed several flags to the
    `emcc` command that were required to only output a single `.wasm` file. By passing
    other flags to the `emcc` command, we can output JavaScript glue code alongside
    the `.wasm` file as well as an HTML file to handle the loading process. In this
    section, we're going to write a more complex C program and compile it with the
    output options that Emscripten offers.
  prefs: []
  type: TYPE_NORMAL
- en: Writing the example C code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We didn't include any header files or pass in any functions in the example we
    covered in [Chapter 4](d03f5dbf-8b6e-49aa-96be-9bb64681be24.xhtml), *Installing
    the Required Dependencies*. Since the intention of the code was solely to test
    if the compiler installation was valid, there wasn't much need. Emscripten offers
    a lot of extra functionality that enables us to interact with our C and C++ code
    with JavaScript and vice versa. Some of these capabilities are Emscripten-specific
    and don't correspond to the *Core Specification* or its APIs. In our first example,
    we'll take advantage of one of Emscripten's ported libraries and a function provided
    by Emscripten's API.
  prefs: []
  type: TYPE_NORMAL
- en: The following program uses a **Simple DirectMedia Layer **(**SDL2**) to move
    a rectangle diagonally across a canvas in an infinite loop. It was taken from
    [https://github.com/timhutton/sdl-canvas-wasm](https://github.com/timhutton/sdl-canvas-wasm),
    but I converted it from C++ to C and modified the code slightly. The code for
    this section is located in the `/chapter-05-create-load-module` folder of the
    `learn-webassembly` repository. Follow the following instructions to compile C
    with Emscripten.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a folder in your `/book-examples` folder named `/chapter-05-create-load-module`.
    Create a new file in this folder named `with-glue.c` and populate it with the
    following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `emscripten_set_main_loop_arg()` toward the end of the `main()` function
    is available because we included `emscripten.h` at the top of the file. The variables
    and functions prefixed with `SDL_` are available because of the `#include <SDL2/SDL.h>`
    at the top of the file. If you're seeing a squiggly red error line under the `<SDL2/SDL.h>`
    statement, you can disregard it. It's due to SDL's `include` path not being present
    in your `c_cpp_properties.json` file.
  prefs: []
  type: TYPE_NORMAL
- en: Compiling the example C code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have our C code written, we''ll need to compile it. One of the
    required flags you must pass to the `emcc` command is `-o <target>`, where `<target>`
    is the path to the desired output file. The extension of that file will do more
    than just output that file; it impacts some of the decisions the compiler makes.
    The following table, taken from Emscripten''s `emcc` documentation at [http://kripken.github.io/emscripten-site/docs/tools_reference/emcc.html#emcc-o-target](http://kripken.github.io/emscripten-site/docs/tools_reference/emcc.html#emcc-o-target),
    defines the generated output types based on the file extension specified:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Extension** | **Output** |'
  prefs: []
  type: TYPE_TB
- en: '| `<name>.js` | JavaScript glue code (and `.wasm` if the `s WASM=1` flag is
    specified). |'
  prefs: []
  type: TYPE_TB
- en: '| `<name>.html` | HTML and separate JavaScript file (`<name>.js`). Having the
    separate JavaScript file improves page load time. |'
  prefs: []
  type: TYPE_TB
- en: '| `<name>.bc` | LLVM bitcode (default). |'
  prefs: []
  type: TYPE_TB
- en: '| `<name>.o` | LLVM bitcode (same as `.bc`). |'
  prefs: []
  type: TYPE_TB
- en: '| `<name>.wasm` | Wasm file only (with flags specified from [Chapter 4](d03f5dbf-8b6e-49aa-96be-9bb64681be24.xhtml),
    *Installing the Required Dependencies*). |'
  prefs: []
  type: TYPE_TB
- en: You can disregard the `.bc` and `.o` file extensions—we won't need to output
    LLVM bitcode. The `.wasm` extension isn't on the `emcc` *Tools Reference* page,
    but it is a valid option if you pass the correct compiler flags. These output
    options factor into the C/C++ code we write.
  prefs: []
  type: TYPE_NORMAL
- en: Outputting HTML with glue code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you specify an HTML file extension (for example, `-o with-glue.html`) for
    the output, you''ll end up with a `with-glue.html`, `with-glue.js`, and `with-glue.wasm`
    file (assuming you also specified `-s WASM=1`). If you have a `main()` function
    in the source C/C++ file, it''ll execute that function as soon as the HTML loads.
    Let''s compile our example C code to see this in action. To compile it with the
    HTML file and JavaScript glue code, `cd` into the `/chapter-05-create-load-module` folder
    and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The first time you run this command, Emscripten is going to download and build
    the `SDL2` library. It could take several minutes to complete this, but you''ll
    only need to wait once. Emscripten caches the library so subsequent builds will
    be much faster. Once the build is complete, you''ll see three new files in the
    folder: `HTML`, `JavaScript`, and `Wasm` files. Run the following command to `serve`
    the file locally:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If you open your browser up to `http://127.0.0.1:8080/with-glue.html`, you
    should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bb584a1f-c5eb-415f-b86a-5904f11404a5.png)'
  prefs: []
  type: TYPE_IMG
- en: Emscripten loading code running in the browser
  prefs: []
  type: TYPE_NORMAL
- en: The blue rectangle should be moving diagonally from the upper-left corner of
    the red rectangle to the lower-right. Since you specified a `main()` function
    in the C file, Emscripten knows it should execute it right away. If you open up
    the `with-glue.html` file in VS code and scroll to the bottom of the file, you
    will see the loading code. You won't see any references to the `WebAssembly` object;
    that's being handled in the JavaScript glue code file.
  prefs: []
  type: TYPE_NORMAL
- en: Outputting glue code with no HTML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The loading code that Emscripten generates in the HTML file contains error handling
    and other helpful functions to ensure the module is loading before executing the
    `main()` function. If you specify `.js` for the extension of the output file,
    you'll have to create an HTML file and write the loading code yourself. In the
    next section, we're going to dig into the loading code in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Loading the Emscripten module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Loading and interacting with a module that utilizes Emscripten's glue code is
    considerably different from WebAssembly's JavaScript API. This is because Emscripten
    provides additional functionality for interacting with the JavaScript code. In
    this section, we're going to discuss the loading code that Emscripten provides
    when outputting an HTML file and review the process for loading an Emscripten
    module in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: Pre-generated loading code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you specify `-o <target>.html` when running the `emcc` command, Emscripten
    generates an HTML file and automatically adds code to load the module to the end
    of the file. Here''s what the loading code in the HTML file looks like with the
    contents of each `Module` function excluded:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The functions within the `Module` object are present to detect and address
    errors, monitor the loading status of the `Module`, and optionally execute some
    functions before or after the `run()` method from the corresponding glue code
    file executes. The `canvas` function, shown in the following snippet, returns
    the `<canvas>` element from the DOM that was specified in the HTML file before
    the loading code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This code is convenient for detecting errors and ensuring the `Module` is loaded,
    but for our purposes, we won't need to be as verbose.
  prefs: []
  type: TYPE_NORMAL
- en: Writing custom loading code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Emscripten''s generated loading code provides helpful error handling. If you''re
    using Emscripten''s output in production, I would recommend that you include it
    to ensure you''re handling errors correctly. However, we don''t actually need
    all the code to utilize our `Module`. Let''s write some much simpler code and
    test it out. First, let''s compile our C file down to glue code with no HTML output.
    To do that, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The `-s MODULARIZE=1` compiler flag allows us to use a Promise-like API to
    load our `Module`. Once the compilation is complete, create a file in the `/chapter-05-create-load-module`
    folder named `custom-loading.html` and populate it with the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The loading code is now using ES6''s arrow function syntax for the canvas loading
    function, which reduces the lines of code required. Start your local server by
    running the `serve` command within the `/chapter-05-create-load-module` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'When you navigate to `http://127.0.0.1:8080/custom-loading.html` in your browser,
    you should see this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5089d0d0-ffc7-4874-8cdf-9e307b5c3a1a.png)'
  prefs: []
  type: TYPE_IMG
- en: Custom loading code running in the browser
  prefs: []
  type: TYPE_NORMAL
- en: Of course, the function we're running isn't very complex, but it demonstrates
    the bare-bones requirements for loading Emscripten's `Module`. We will examine
    the `Module` object in much greater detail in [Chapter 6](cdf64596-59dd-4805-8509-7315b7760b1e.xhtml), *Interacting
    with JavaScript and Debugging*, but for now just be aware that the loading process
    is different from WebAssembly, which we'll cover in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Compiling C without the glue code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If we want to use WebAssembly according to the official specification, without
    the extra features that Emscripten provides, we need to pass some flags to the
    `emcc` command and ensure we're writing code that can be used by WebAssembly with
    relative ease. In the *Writing the example C code* section, we wrote a program
    that rendered a blue rectangle that moved diagonally across a red canvas. It utilized
    one of Emscripten's ported libraries, SDL2\. In this section, we're going to write
    and compile some C code that doesn't rely on Emscripten's helper methods and ported
    libraries.
  prefs: []
  type: TYPE_NORMAL
- en: C code for WebAssembly
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we get to the C code we''ll use for our WebAssembly module, let''s try
    an experiment. Open the CLI in the `/chapter-05-create-load-module` folder, and
    try running this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see a `try-with-glue.wasm` file appear in VS Code''s file explorer
    panel after the compilation is complete. Right-click on the file and select Show
    WebAssembly. The beginning of the corresponding Wat representation should resemble
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: If you wanted to load this in a browser and execute it, you'd have to pass in
    an `importObj` object to WebAssembly's `instantiate()` or `compile()` function
    with an `env` object containing each of those `import "env"` functions. Emscripten
    handles all of this for us behind the scenes with the glue code, which makes it
    an incredibly valuable tool. However, we can replace the SDL2 functionality by
    using the DOM while still tracking the rectangle's location in C.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will write the C code differently to ensure we only have to pass a few functions
    into the `importObj.env` object to execute the code. Create a file named `without-glue.c`
    in the `/chapter-05-create-load-module` folder and populate it with the following
    contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We will call the functions from the C code to determine the *x* and *y* coordinates.
    The `setIsRunning()` function can be used to pause the rectangle''s movement.
    Now that our C code is ready, let''s compile it. In the VS Code terminal, `cd`
    into the `/chapter-05-create-load-module` folder, and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the compilation is complete, you can right-click on the resultant `without-glue.wasm`
    file and select Show WebAssembly to see the Wat representation. You should see
    the following at the top of the file for the `import "env"` items:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: We need to pass in the `_jsClearRect` and `_jsFillRect` functions within the
    `importObj` object. We'll cover how to do that in the section on the HTML file
    with JavaScript interaction code.
  prefs: []
  type: TYPE_NORMAL
- en: Compiling with a Build Task in VS Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `emcc` command is a little verbose, and having to manually run this on
    the command line for different files can get cumbersome. To expedite the compilation
    process, we can use VS Code''s Tasks feature to create a build task for the files
    we''ll use. To create a build task, select Tasks | Configure Default Build Task…,
    select the Create tasks.json from template option, and select Others to generate
    a simple `tasks.json` file in the `.vscode` folder. Update the contents of the
    file to contain the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The `label` value is simply a name to refer to when running a task. The `type` and
    `command` values indicate that it should run the `emcc` command in a shell (terminal).
    The `args` value is an array of arguments to be passed to the `emcc` command (based
    on space separation). The `"${file}"` argument tells VS Code to compile the currently
    open file. The `"${fileDirname}/${fileBasenameNoExtension}.wasm"`  argument indicates
    that the `.wasm` output will have the same name as the currently open file (with
    a `.wasm` extension), and it should be placed in the active folder of the currently
    open file. If you don't specify `${fileDirname}`, the output file will be placed
    in the root folder (rather than `/chapter-05-create-load-module` in this case).
  prefs: []
  type: TYPE_NORMAL
- en: The `group` object indicates that this task is the default build step, so if
    you use the keyboard shortcut *Cmd*/*Ctrl* + *Shift* + *B*, this is the task that
    will be run. The `presentation.panel` value of `"new"` tells VS Code to open up
    a new CLI instance when the build step runs. This is a personal preference and
    can be omitted.
  prefs: []
  type: TYPE_NORMAL
- en: You can save and close the `tasks.json` file once it's fully populated. To test
    it out, first delete the `without-glue.wasm` file that you generated with the
    `emcc` command in the previous section. Next, ensure you have `without-glue.c`
    open with the cursor in the file and run the build task by either selecting **Tasks**
    | Run Build Task… or using the keyboard shortcut *Cmd*/*Ctrl* + *Shift* + *B*.
    A new panel in the integrated terminal will perform the compilation and a `without-glue.wasm`
    file should appear after a second or two.
  prefs: []
  type: TYPE_NORMAL
- en: Fetching and instantiating a Wasm file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have a Wasm file, we'll need some JavaScript code to compile and
    execute it. There's a few steps we'll have to follow to ensure the code can be
    successfully utilized in the browser. In this section, we will write some common
    JavaScript loading code that we can reuse for other examples, create an HTML file
    that demonstrates the use of the Wasm module, and test the results in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: Common JavaScript loading code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will fetch and instantiate a `.wasm` file in several of the examples, so
    it makes sense to move the JavaScript loading code to a common file. The actual
    fetch and instantiation code is only a few lines, but having to repeatedly redefine
    the `importObj` object that Emscripten expects is a waste of time. We''ll make
    this code available in a commonly accessible file to expedite the code-writing
    process. Create a new folder named `/common` in the `/book-examples` folder and
    add a file named `load-wasm.js` with the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The `getDefaultEnv()` function provides the required `importObj.env` contents
    for Emscripten''s Wasm module. We want the ability to pass in any additional imports,
    which is why the `Object.assign()` statement is used. With the addition of any
    other imports the Wasm module expects, Emscripten''s Wasm output will always require
    these five import statements for the `"env"` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: We need to pass those into the `instantiate()` function to ensure the Wasm module
    loads successfully, otherwise the browser will throw an error. Now that we have
    our loading code ready, let's move on to the HTML and rectangle-rendering code.
  prefs: []
  type: TYPE_NORMAL
- en: The HTML page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''re going to need an HTML page with a `<canvas>` element and JavaScript
    code to interact with the Wasm module. Create a file named `without-glue.html`
    in the `/chapter-05-create-load-module` folder and populate it with the following
    contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This code will replicate the SDL example we created in the previous sections
    with some added functionality. When the rectangle bumps into the lower-right hand
    corner, it changes direction. You're also able to pause and resume the rectangle's
    movement using a button under the `<canvas>` element. You can see how we passed
    the `_jsFillRect` and `_jsClearRect` functions into the `importObj.env` object
    so they can be referenced by the Wasm module.
  prefs: []
  type: TYPE_NORMAL
- en: Serving it all up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s test our code out in the browser. From the VS Code terminal, make sure
    you''re in the `/book-examples` folder and run the command to start up a local
    server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'It''s important that you''re in the `/book-examples` folder. If you try serving
    up the code in the `/chapter-05-create-load-module` folder only, you won''t be
    able to use the `loadWasm()` function. If you open up your browser to `http://127.0.0.1:8080/chapter-05-create-load-module/without-glue.html`,
    you should see this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/76e4c6ba-e85a-448f-8418-7e71adddb265.png)'
  prefs: []
  type: TYPE_IMG
- en: Without glue code example running in the browser
  prefs: []
  type: TYPE_NORMAL
- en: Try pressing the Pause button; the caption should change to Start and the rectangle
    should stop moving. Clicking it again should cause the rectangle to start moving
    again.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered the compilation and loading processes for modules
    that utilize the Emscripten glue code alongside the Wasm modules. By utilizing
    some of Emscripten's built-in features, such as ported libraries and helper methods,
    we were able to demonstrate the advantages Emscripten offers. We discussed some
    of the compiler flags that you can pass to the `emcc` command and how that will
    affect your output. By utilizing VS Code's Tasks feature, we were able to set
    up a build command to expedite the build process going forward. We also reviewed
    the process for compiling and loading a Wasm module without the glue code. We
    wrote some reusable JavaScript code to load the module as well as code to interact
    with our compiled Wasm module.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 6](cdf64596-59dd-4805-8509-7315b7760b1e.xhtml),* Interacting with
    JavaScript and Debugging*, we're going to cover interacting with JavaScript and
    debugging techniques in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What does SDL stand for?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In addition to JavaScript, HTML, and Wasm, what other output type can you generate
    with the `-o` flag for the `emcc` command?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What advantages does using Emscripten's pre-generated loading code offer?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What must you name your function in the C/C++ file to ensure it automatically
    executes the compiled output in the browser?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why can't we use just the Wasm file output without the "glue" code when using
    ported libraries?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the keyboard shortcut in VS Code for running your default build task?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why do we need the `getDefaultEnv()` method in the Wasm loading code?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which five items are required for the `importObj.env` object passed into the
    Wasm instantiation code for a Wasm module created with Emscripten?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'About SDL: [https://www.libsdl.org/index.php](https://www.libsdl.org/index.php)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Emscripten Compiler Frontend** (**emcc**): [http://kripken.github.io/emscripten-site/docs/tools_reference/emcc.html](http://kripken.github.io/emscripten-site/docs/tools_reference/emcc.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Integrate with External Tools via Tasks: [https://code.visualstudio.com/docs/editor/tasks](https://code.visualstudio.com/docs/editor/tasks)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Loading and running WebAssembly code: [https://developer.mozilla.org/en-US/docs/WebAssembly/Loading_and_running](https://developer.mozilla.org/en-US/docs/WebAssembly/Loading_and_running)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
