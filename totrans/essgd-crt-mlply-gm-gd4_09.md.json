["```cpp\nclass_name Spaceship2D\nextends RigidBody2D\n@export var acceleration = 600.0\n@export var turn_torque = 10.0\nfunc thrust():\n    var delta = get_physics_process_delta_time()\n    linear_velocity += (acceleration * delta) *\n        Vector2.RIGHT.rotated(rotation)\nfunc turn(direction):\n    var delta = get_physics_process_delta_time()\n    angular_velocity += (direction * turn_torque) * delta\n```", "```cpp\nextends Node2D\n@export var thrust_action = \"move_up\"\n@export var turn_left_action = \"move_left\"\n@export var turn_right_action = \"move_right\"\n@export var shoot_action = \"shoot\"\n@onready var spaceship = $Spaceship\n@onready var weapon = $Spaceship/Weapon2D\nfunc _process(delta):\n  if Input.is_action_pressed(shoot_action):\n    weapon.fire()\nfunc _physics_process(delta):\n  if Input.is_action_pressed(thrust_action):\n    spaceship.thrust()\n  if Input.is_action_pressed(turn_left_action):\n    spaceship.turn(-1)\n  elif Input.is_action_pressed(turn_right_action):\n    spaceship.turn(1)\n```", "```cpp\nextends Spawner2D\nfunc spawn(reference = spawn_scene):\n  var bullet = super(reference)\n  bullet.direction = Vector2.RIGHT.rotated(global_rotation)\n```", "```cpp\nclass_name Weapon2D\nextends Marker2D\n@export var bullet_scene: PackedScene\n@export_range(0, 1, 1, \"or_greater\") var fire_rate = 3\n@onready var spawner = $BulletSpawner2D\n@onready var timer = $Timer\n@onready var animation_player = $AnimationPlayer\nfunc fire():\n  if timer.is_stopped():\n    animation_player.play(\"fire\")\n    spawner.spawn(bullet_scene)\n    timer.start(1.0 / fire_rate)\n```", "```cpp\nextends Node2D\n@export var max_health = 3\n@onready var health = max_health\n@onready var animator = $AnimationPlayer\nfunc apply_damage(damage):\n  health -= damage\n  if health < 1:\n    animator.play(\"explode\")\n  elif health > 0:\n    animator.play(\"hit\")\nfunc _on_hurt_area_2d_damage_taken(damage):\n  apply_damage(damage)\nfunc _on_animation_player_animation_finished(anim_name):\n  if anim_name == \"explode\":\n    queue_free()\n```", "```cpp\nextends Node\nsignal updated(quest_id, new_amount)\nsignal finished(quest_id)\n@export var id = \"asteroid_1\"\n@export var title = \"Quest Title\"\n@export var description = \"Insert Quest description here\"\n@export var target_amount = 1\nvar current_amount = 0 : set = set_current_amount\nvar completed = false\nfunc set_current_amount(new_value):\n  current_amount = new_value\n  current_amount = clamp(current_amount, 0, target_amount)\n  updated.emit(id, current_amount)\n  if current_amount >= target_amount:\n    finished.emit(id)\n```", "```cpp\n{\n  \"asteroid_1\": {\n    \"completed\": false,\n    \"progress\": 0\n  }\n}\n```", "```cpp\n{\n    \"asteroid_1\" : {\n        \"title\": \"Destroy 10 Asteroids\",\n        \"description\": \"Destroy some asteroids,\n            please. They are taking too much space here\",\n        \"target_amount\": 10}\n}\n```", "```cpp\nfunc _notification(notification):\n    if notification == NOTIFICATION_WM_CLOSE_REQUEST:\n        store_database()\n```", "```cpp\nextends Node\nsignal quest_created(new_quest)\nvar quest_scene = preload(\"res://09.prototyping-space-\n    adventure/Quests/Quest.tscn\")\nvar quests = {}\nfunc retrieve_quests():\n  var player_quests = QuestDatabase.get_player_quests()\n  for quest in player_quests:\n    create_quest(player_quests[quest])\nfunc create_quest(quest_data):\n  var quest = quest_scene.instantiate()\n  quest.id = quest_data[\"id\"]\n  quest.title = quest_data[\"title\"]\n  quest.description = quest_data[\"description\"]\n  quest.target_amount = quest_data[\"target_amount\"]\n  quest.current_amount = quest_data[\"current_amount\"]\n  quest.completed = quest_data[\"completed\"]\n  add_child(quest)\n  quests[quest.id] = quest\n  quest_created.emit(quest)\nfunc get_quest(quest_id):\n  return quests[quest_id]\nfunc increase_quest_progress(quest_id, amount):\n  var quest = quests[quest_id]\n  quest.current_amount += amount\n  QuestDatabase.update_player_progress(quest_id,\n      quest.current_amount, quest.completed)\n```", "```cpp\nextends Node\n@export var quest_id = \"asteroid_1\"\nfunc increase_progress(amount = 1):\n  Quests.increase_quest_progress(quest_id, amount)\n```", "```cpp\nextends ScrollContainer\nvar quest_labels = {}\nfunc _ready():\n  Quests.quest_created.connect(add_quest)\n  Quests.retrieve_quests()\nfunc add_quest(quest):\n  var label = Label.new()\n  var quest_data = \"%s \\n %s/%s \\n \\n %s\" %[quest.title,\n      quest.current_amount, quest.target_amount,\n          quest.description]\n  label.autowrap_mode = TextServer.AUTOWRAP_WORD_SMART\n  label.text = quest_data\n  $VBoxContainer.add_child(label)\n  quest.updated.connect(update_quest)\n  quest_labels[quest.id] = label\nfunc update_quest(quest_id, current_amount):\n  var quest = Quests.get_quest(quest_id)\n  var quest_data_text = \"%s \\n %s/%s \\n \\n %s\" %\n      [quest.title, quest.current_amount,\n          quest.target_amount, quest.description]\n  var label = quest_labels[quest_id]\n  label.text = quest_data_text\n```", "```cpp\nextends Node\n@onready var asteroid_spawner = $Asteroids\n@onready var player_spawner = $Players\nfunc _ready():\n  for i in 30:\n    asteroid_spawner.spawn()\n  create_spaceship()\nfunc create_spaceship():\n  player_spawner.spawn()\n```", "```cpp\n    func _on_StartButton_pressed():\n      rpc_id(1, \"start_game\")\n    ```", "```cpp\n    @rpc(\"authority\", \"call_local\")\n    func start_game():\n      get_tree().change_scene_to_file(next_scene)\n    ```", "```cpp\n    func _ready():\n        if multiplayer.is_server():\n            peer.create_server(PORT)\n            multiplayer.multiplayer_peer = peer\n            load_database()\n    ```", "```cpp\n        else:\n            peer.create_client(ADDRESS, PORT)\n            multiplayer.multiplayer_peer = peer\n    ```", "```cpp\n    @rpc(\"any_peer\", \"call_remote\")\n    func start_game():\n        var peer_id = multiplayer.get_remote_sender_id()\n        rpc_id(peer_id, \"start_game\")\n    ```", "```cpp\n    func _ready():\n      if not multiplayer.get_unique_id() == 1:\n        rpc_id(1, \"sync_world\")\n      else:\n        for i in 30:\n          asteroid_spawner.spawn()\n    ```", "```cpp\n    @rpc(\"any_peer\", \"call_local\")\n    func sync_world():\n        var player_id = multiplayer.get_remote_sender_id()\n        get_tree().call_group(\"Sync\", \"set_visibility_for\n            \",player_id, true)\n    ```", "```cpp\n    @rpc(\"any_peer\", \"call_remote\")\n    func create_spaceship():\n    ```", "```cpp\n      var player_id = multiplayer.get_remote_sender_id()\n    var spaceship = preload(\"res://09.prototyping-space-\n    adventure/Actors/Player/Player2D.tscn\").instantiate()\n      spaceship.name = str(player_id)\n      $Players.add_child(spaceship)\n    ```", "```cpp\n      await(get_tree().create_timer(0.1).timeout)\n      spaceship.rpc(\"setup_multiplayer\", player_id)\n    ```", "```cpp\n    func _on_players_multiplayer_spawner_spawned(Node):\n        Node.rpc(\"setup_multiplayer\", int(str(Node.name)))\n    ```", "```cpp\n    @rpc(\"any_peer\", \"call_local\")\n    func setup_multiplayer(player_id):\n    ```", "```cpp\n      var self_id = multiplayer.get_unique_id()\n      var is_player = self_id == player_id\n    ```", "```cpp\n      set_process(is_player)\n      set_physics_process(is_player)\n      camera.enabled = is_player\n      if is_player:\n        camera.make_current()\n    ```", "```cpp\n      set_multiplayer_authority(player_id)\n    setup_multiplayer() method’s code implementation:\n    ```", "```cpp\n    @rpc(\"any_peer\", \"call_local\")\n    func setup_multiplayer(player_id):\n      var self_id = multiplayer.get_unique_id()\n      var is_player = self_id == player_id\n      set_process(is_player)\n      set_physics_process(is_player)\n      camera.enabled = is_player\n      if is_player:\n        camera.make_current()\n      set_multiplayer_authority(player_id)\n    ```", "```cpp\nfunc _process(delta):\n  if Input.is_action_pressed(shoot_action):\n    weapon.rpc(\"fire\")\n```", "```cpp\n    func _on_hurt_area_2d_damage_taken(damage):\n        if multiplayer.is_server():\n            apply_damage(damage)\n    ```", "```cpp\n    func apply_damage(damage):\n      health -= damage\n      if health < 1:\n        rpc(\"explode\")\n      elif health > 0:\n        rpc(\"hit\")\n    @rpc(\"authority\", \"call_local\")\n    func explode():\n      animator.play(\"explode\")\n    @rpc(\"authority\", \"call_local\")\n    func hit():\n      animator.play(\"hit\")\n    ```", "```cpp\n    func _on_animation_player_animation_finished(anim_name):\n      if multiplayer.is_server():\n        if anim_name == \"explode\":\n          queue_free()\n    ```", "```cpp\n{\n  \"user1\":{\n    \"asteroid_1\":{\n      \"completed\":false,\n      \"progress\":4\n    }\n  },\n  \"user2\":{\n    \"asteroid_1\":{\n      \"completed\":false,\n      \"progress\":2\n    }\n  }\n}\n```", "```cpp\n    func retrieve_quests():\n      if multiplayer.is_server():\n        return\n      await(get_tree().create_timer(0.1).timeout)\n      QuestDatabase.rpc_id(1, \"get_player_quests\",\n          AuthenticationCredentials.user)\n    ```", "```cpp\n    @rpc(\"authority\", \"call_remote\")\n    func create_quest(quest_data):\n    ```", "```cpp\n    func increase_quest_progress(quest_id, amount):\n      if not quest_id in quests.keys():\n        return\n      var quest = quests[quest_id]\n      quest.current_amount += amount\n      QuestDatabase.rpc_id(1, \"update_player_progress\",\n          quest_id, quest.current_amount, quest.completed,\n              AuthenticationCredentials.user)\n    ```", "```cpp\n    func _ready():\n      if multiplayer.is_server():\n      load_database()\n    ```", "```cpp\n    func _notification(notification):\n        if notification == NOTIFICATION_WM_CLOSE_REQUEST\n           and multiplayer.is_server():\n            store_database()\n    ```", "```cpp\n    @rpc(\"any_peer\", \"call_remote\")\n    func get_player_quests():\n    ```", "```cpp\n    func get_player_quests():\n        var requester_id = multiplayer.get_remote_\n            sender_id()\n    ```", "```cpp\n    func get_player_quests(user):\n      var requester_id = multiplayer.get_remote_\n          sender_id()\n      var quests = {}\n      for quest in progress_database[user]:\n    ```", "```cpp\n      for quest in progress_database[user]:\n        var quest_data = {}\n        quest_data[\"id\"] = quest\n        quest_data[\"title\"] = get_title(quest)\n        quest_data[\"description\"] = get_description(quest)\n        quest_data[\"target_amount\"] = get_target_amount\n            (quest)\n        quest_data[\"current_amount\"] = get_progress\n            (quest, user)\n        quest_data[\"completed\"] = get_completion\n            (quest, user)\n        quests[quest] = quest_data\n    ```", "```cpp\n    func get_progress(quest_id, user):\n      return progress_database[user][quest_id][\"progress\"]\n    func get_completion(quest_id, user):\n      return progress_database[user][quest_id]\n          [\"completed\"]\n    ```", "```cpp\n        for quest in progress_database[user]:\n            var quest_data = {}\n            quest_data[\"id\"] = quest\n            quest_data[\"title\"] = get_title(quest)\n            quest_data[\"description\"] = get_description\n                (quest)\n            quest_data[\"target_amount\"] = get_target_\n                amount(quest)\n            quest_data[\"current_amount\"] = get_progress\n                (quest, user)\n            quest_data[\"completed\"] = get_completion\n                (quest, user)\n            quests[quest] = quest_data\n            Quests.rpc_id(requester_id, \"create_quest\",\n                quest_data)\n    ```", "```cpp\n    @rpc(\"any_peer\", \"call_remote\")\n    func update_player_progress(quest_id, current_amount,\n        completed, user):\n      if multiplayer.is_server():\n        progress_database[user][quest_id][\"progress\"] =\n            current_amount\n        progress_database[user][quest_id][\"completed\"] =\n            completed\n    ```"]