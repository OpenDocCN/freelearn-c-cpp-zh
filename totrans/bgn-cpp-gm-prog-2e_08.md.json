["```cpp\n#pragma once\n#include <SFML/Graphics.hpp>\nusing namespace sf;\nclass Ball\n{\nprivate:\n    Vector2f m_Position;    \n    RectangleShape m_Shape;\n    float m_Speed = 300.0f;\n    float m_DirectionX = .2f;\n    float m_DirectionY = .2f;\npublic:\n    Ball(float startX, float startY);\n    FloatRect getPosition();\n    RectangleShape getShape();\n    float getXVelocity();\n    void reboundSides();\n    void reboundBatOrTop();\n    void reboundBottom();\n    void update(Time dt);\n};\n```", "```cpp\n#include \"Ball.h\"\n// This the constructor function\nBall::Ball(float startX, float startY)\n{\n    m_Position.x = startX;\n    m_Position.y = startY;\n    m_Shape.setSize(sf::Vector2f(10, 10));\n    m_Shape.setPosition(m_Position);\n}\n```", "```cpp\nFloatRect Ball::getPosition()\n{\n    return m_Shape.getGlobalBounds();\n}\nRectangleShape Ball::getShape()\n{\n    return m_Shape;\n}\nfloat Ball::getXVelocity()\n{\n    return m_DirectionX;\n}\n```", "```cpp\nvoid Ball::reboundSides()\n{\n    m_DirectionX = -m_DirectionX;\n}\nvoid Ball::reboundBatOrTop()\n{\n    m_DirectionY = -m_DirectionY;\n}\nvoid Ball::reboundBottom()\n{\n    m_Position.y = 0;\n    m_Position.x = 500;\n    m_DirectionY = -m_DirectionY;\n}\n```", "```cpp\nvoid Ball::update(Time dt)\n{\n    // Update the ball's position\n    m_Position.y += m_DirectionY * m_Speed * dt.asSeconds();\n    m_Position.x += m_DirectionX * m_Speed * dt.asSeconds();\n    // Move the ball \n    m_Shape.setPosition(m_Position);\n}\n```", "```cpp\n#include \"Ball.h\"\n```", "```cpp\n// Create a bat\nBat bat(1920 / 2, 1080 - 20);\n// Create a ball\nBall ball(1920 / 2, 0);\n// Create a Text object called HUD\nText hud;\n```", "```cpp\n/*\nUpdate the bat, the ball and the HUD\n****************************************************\n****************************************************\n****************************************************\n*/\n// Update the delta time\nTime dt = clock.restart();\nbat.update(dt);\nball.update(dt);\n// Update the HUD text\nstd::stringstream ss;\nss << \"Score:\" << score << \"    Lives:\" << lives;\nhud.setString(ss.str());\n```", "```cpp\n/*\nDraw the bat, the ball and the HUD\n*********************************************\n*********************************************\n*********************************************\n*/\nwindow.clear();\nwindow.draw(hud);\nwindow.draw(bat.getShape());\nwindow.draw(ball.getShape());\nwindow.display();\n```", "```cpp\nif(objectA.getPosition().right > objectB.getPosition().left\n    && objectA.getPosition().left < objectB.getPosition().right )\n{    \n    // objectA is intersecting objectB on x axis    \n    // But they could be at different heights    \n\n    if(objectA.getPosition().top < objectB.getPosition().bottom         \n        && objectA.getPosition().bottom > objectB.getPosition().top )\n        {       \n            // objectA is intersecting objectB on y axis as well \n            // Collision detected  \n        } \n}\n```", "```cpp\n/*\nUpdate the bat, the ball and the HUD\n**************************************\n**************************************\n**************************************\n*/\n// Update the delta time\nTime dt = clock.restart();\nbat.update(dt);\nball.update(dt);\n// Update the HUD text\nstd::stringstream ss;\nss << \"Score:\" << score << \"    Lives:\" << lives;\nhud.setString(ss.str());\n// Handle ball hitting the bottom\nif (ball.getPosition().top > window.getSize().y)\n{\n    // reverse the ball direction\n    ball.reboundBottom();\n    // Remove a life\n    lives--;\n    // Check for zero lives\n    if (lives < 1) {\n        // reset the score\n        score = 0;\n        // reset the lives\n        lives = 3;\n    }\n}\n```", "```cpp\nif (ball.getPosition().top > window.getSize().y)\n```", "```cpp\n// Handle ball hitting top\nif (ball.getPosition().top < 0)\n{\n    ball.reboundBatOrTop();\n    // Add a point to the players score\n    score++;\n}\n```", "```cpp\n// Handle ball hitting sides\nif (ball.getPosition().left < 0 || \n    ball.getPosition().left + ball.getPosition().width> window.getSize().x)\n{\n    ball.reboundSides();\n}\n```", "```cpp\n// Has the ball hit the bat?\nif (ball.getPosition().intersects(bat.getPosition()))\n{\n    // Hit detected so reverse the ball and score a point\n    ball.reboundBatOrTop();\n}\n```", "```cpp\n// Speed up a little bit on each hit\nm_Speed = m_Speed * 1.1f;\n```"]