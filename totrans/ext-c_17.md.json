["```cpp\n#include <stdio.h>\n#include <unistd.h>\nint main(int argc, char** argv) {\n  printf(\"This is the parent process with process ID: %d\\n\",\n          getpid());\n  printf(\"Before calling fork() ...\\n\");\n  pid_t ret = fork();\n  if (ret) {\n    printf(\"The child process is spawned with PID: %d\\n\", ret);\n  } else {\n    printf(\"This is the child process with PID: %d\\n\", getpid());\n  }\n  printf(\"Type CTRL+C to exit ...\\n\");\n  while (1);\n  return 0;\n}\n```", "```cpp\n$ gcc ExtremeC_examples_chapter17_1.c -o ex17_1.out\n$ ./ex17_1.out\nThis is the parent process with process ID: 10852\nBefore calling fork() …\nThe child process is spawned with PID: 10853\nThis is the child process with PID: 10853\nType CTRL+C to exit ...\n$\n```", "```cpp\n$ pstree -p\nsystemd(1)─┬─accounts-daemon(877)─┬─{accounts-daemon}(960)\n           │                      └─{accounts-daemon}(997)\n...\n...\n...\n           ├─systemd-logind(819)\n           ├─systemd-network(673)\n           ├─systemd-resolve(701)\n           ├─systemd-timesyn(500)───{systemd-timesyn}(550)\n           ├─systemd-udevd(446)\n           └─tmux: server(2083)─┬─bash(2084)───pstree(13559)\n                                └─bash(2337)───ex17_1.out(10852)───ex17_1.out(10853)\n$\n```", "```cpp\n#include <stdio.h>\n#include <unistd.h>\nint main(int argc, char** argv) {\n  pid_t ret = fork();\n  if (ret) {\n    for (size_t i = 0; i < 5; i++) {\n      printf(\"AAA\\n\");\n      usleep(1);\n    }\n  } else {\n    for (size_t i = 0; i < 5; i++) {\n      printf(\"BBBBBB\\n\");\n      usleep(1);\n    }\n  }\n  return 0;\n}\n```", "```cpp\n$ gcc ExtremeC_examples_chapter17_2.c -o ex17_2.out\n$ ./ex17_2.out\nAAA\nAAA\nAAA\nAAA\nAAA\nBBBBBB\nBBBBBB\nBBBBBB\nBBBBBB\nBBBBBB\n$ ./ex17_2.out\nAAA\nAAA\nBBBBBB\nAAA\nAAA\nBBBBBB\nBBBBBB\nBBBBBB\nAAA\nBBBBBB\n$\n```", "```cpp\n#include <stdio.h>\n#include <unistd.h>\n#include <string.h>\n#include <errno.h>\nint main(int argc, char** argv) {\n  char *args[] = {\"echo\", \"Hello\", \"World!\", 0};\n  execvp(\"echo\", args);\n  printf(\"execvp() failed. Error: %s\\n\", strerror(errno));\n  return 0;\n}\n```", "```cpp\n#include <stdio.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <errno.h>\n#include <string.h>\n#include <sys/mman.h>\n#define SH_SIZE 16\nint main(int argc, char** argv) {\n  int shm_fd = shm_open(\"/shm0\", O_CREAT | O_RDWR, 0600);\n  if (shm_fd < 0) {\n    fprintf(stderr, \"ERROR: Failed to create shared memory: %s\\n\",\n        strerror(errno));\n    return 1;\n  }\n  fprintf(stdout, \"Shared memory is created with fd: %d\\n\",\n          shm_fd);\n  if (ftruncate(shm_fd, SH_SIZE * sizeof(char)) < 0) {\n    fprintf(stderr, \"ERROR: Truncation failed: %s\\n\",\n            strerror(errno));\n    return 1;\n  }\n  fprintf(stdout, \"The memory region is truncated.\\n\");\n  void* map = mmap(0, SH_SIZE, PROT_WRITE, MAP_SHARED, shm_fd, 0);\n  if (map == MAP_FAILED) {\n    fprintf(stderr, \"ERROR: Mapping failed: %s\\n\",\n            strerror(errno));\n    return 1;\n  }\n  char* ptr = (char*)map;\n  ptr[0] = 'A';\n  ptr[1] = 'B';\n  ptr[2] = 'C';\n  ptr[3] = '\\n';\n  ptr[4] = '\\0';\n  while(1);\n  fprintf(stdout, \"Data is written to the shared memory.\\n\");\n  if (munmap(ptr, SH_SIZE) < 0) {\n    fprintf(stderr, \"ERROR: Unmapping failed: %s\\n\",\n            strerror(errno));\n    return 1;\n  }\n  if (close(shm_fd) < 0) {\n    fprintf(stderr, \"ERROR: Closing shared memory failed: %s\\n\",\n        strerror(errno));\n    return 1;\n  }\n  return 0;\n}\n```", "```cpp\n$ ls /dev/shm\n$ gcc ExtremeC_examples_chapter17_4.c -lrt -o ex17_4.out\n$ ./ex17_4.out\nShared memory is created with fd: 3\nThe memory region is truncated.\nData is written to the shared memory.\n$ ls /dev/shm\nshm0\n$\n```", "```cpp\n$ cat /dev/shm/shm0\nABC\n$\n```", "```cpp\n#include <stdio.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <errno.h>\n#include <string.h>\n#include <sys/mman.h>\n#define SH_SIZE 16\nint main(int argc, char** argv) {\n  int shm_fd = shm_open(\"/shm0\", O_RDONLY, 0600);\n  if (shm_fd < 0) {\n    fprintf(stderr, \"ERROR: Failed to open shared memory: %s\\n\",\n        strerror(errno));\n    return 1;\n  }\n  fprintf(stdout, \"Shared memory is opened with fd: %d\\n\", shm_fd);\n  void* map = mmap(0, SH_SIZE, PROT_READ, MAP_SHARED, shm_fd, 0);\n  if (map == MAP_FAILED) {\n    fprintf(stderr, \"ERROR: Mapping failed: %s\\n\",\n            strerror(errno));\n    return 1;\n  }\n  char* ptr = (char*)map;\n  fprintf(stdout, \"The contents of shared memory object: %s\\n\",\n          ptr);\n  if (munmap(ptr, SH_SIZE) < 0) {\n    fprintf(stderr, \"ERROR: Unmapping failed: %s\\n\",\n            strerror(errno));\n    return 1;\n  }\n  if (close(shm_fd) < 0) {\n    fprintf(stderr, \"ERROR: Closing shared memory fd filed: %s\\n\",\n        strerror(errno));\n    return 1;\n  }\n  if (shm_unlink(\"/shm0\") < 0) {\n    fprintf(stderr, \"ERROR: Unlinking shared memory failed: %s\\n\",\n        strerror(errno));\n    return 1;\n  }\n  return 0;\n}\n```", "```cpp\n$ ls /dev/shm\nshm0\n$ gcc ExtremeC_examples_chapter17_5.c -lrt -o ex17_5.out\n$ ./ex17_5.out\nShared memory is opened with fd: 3\nThe contents of the shared memory object: ABC\n$ ls /dev/shm\n$\n```", "```cpp\n#include <stdio.h>\n#include <stdint.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <errno.h>\n#include <string.h>\n#include <sys/mman.h>\n#include <sys/wait.h>\n#define SH_SIZE 4\n// Shared file descriptor used to refer to the\n// shared memory object\nint shared_fd = -1;\n// The pointer to the shared counter\nint32_t* counter = NULL;\nvoid init_shared_resource() {\n  // Open the shared memory object\n  shared_fd = shm_open(\"/shm0\", O_CREAT | O_RDWR, 0600);\n  if (shared_fd < 0) {\n    fprintf(stderr, \"ERROR: Failed to create shared memory: %s\\n\",\n        strerror(errno));\n    exit(1);\n  }\n  fprintf(stdout, \"Shared memory is created with fd: %d\\n\",\n          shared_fd);\n}\nvoid shutdown_shared_resource() {\n  if (shm_unlink(\"/shm0\") < 0) {\n    fprintf(stderr, \"ERROR: Unlinking shared memory failed: %s\\n\",\n        strerror(errno));\n    exit(1);\n  }\n}\nvoid inc_counter() {\n  usleep(1);\n  int32_t temp = *counter;\n  usleep(1);\n  temp++;\n  usleep(1);\n  *counter = temp;\n  usleep(1);\n}\nint main(int argc, char** argv) {\n  // Parent process needs to initialize the shared resource\n  init_shared_resource();\n  // Allocate and truncate the shared memory region\n  if (ftruncate(shared_fd, SH_SIZE * sizeof(char)) < 0) {\n    fprintf(stderr, \"ERROR: Truncation failed: %s\\n\",\n            strerror(errno));\n    return 1;\n  }\n  fprintf(stdout, \"The memory region is truncated.\\n\");\n  // Map the shared memory and initialize the counter\n  void* map = mmap(0, SH_SIZE, PROT_WRITE,\n          MAP_SHARED, shared_fd, 0);\n  if (map == MAP_FAILED) {\n    fprintf(stderr, \"ERROR: Mapping failed: %s\\n\",\n            strerror(errno));\n    return 1;\n  }\n  counter = (int32_t*)map;\n  *counter = 0;\n  // Fork a new process\n  pid_t pid = fork();\n  if (pid) { // The parent process\n    // Increment the counter\n    inc_counter();\n    fprintf(stdout, \"The parent process sees the counter as %d.\\n\",\n        *counter);\n    // Wait for the child process to exit\n    int status = -1;\n    wait(&status);\n    fprintf(stdout, \"The child process finished with status %d.\\n\",\n        status);\n  } else { // The child process\n    // Incrmenet the counter\n    inc_counter();\n    fprintf(stdout, \"The child process sees the counter as %d.\\n\",\n        *counter);\n  }\n  // Both processes should unmap shared memory region and close\n  // its file descriptor\n  if (munmap(counter, SH_SIZE) < 0) {\n    fprintf(stderr, \"ERROR: Unmapping failed: %s\\n\",\n            strerror(errno));\n    return 1;\n  }\n  if (close(shared_fd) < 0) {\n    fprintf(stderr, \"ERROR: Closing shared memory fd filed: %s\\n\",\n        strerror(errno));\n    return 1;\n  }\n  // Only parent process needs to shutdown the shared resource\n  if (pid) {\n    shutdown_shared_resource();\n  }\n  return 0;\n}\n```", "```cpp\n$ gcc ExtremeC_examples_chapter17_6 -o ex17_6.out\n$ ./ex17_6.out\nShared memory is created with fd: 3\nThe memory region is truncated.\nThe parent process sees the counter as 1.\nThe child process sees the counter as 2.\nThe child process finished with status 0.\n$ ./ex17_6\n...\n...\n...\n$ ./ex17_6.out\nShared memory is created with fd: 3\nThe memory region is truncated.\nThe parent process sees the counter as 1.\nThe child process sees the counter as 1.\nThe child process finished with status 0.\n$\n```", "```cpp\n#include <stdio.h>\n#include <stdint.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <errno.h>\n#include <string.h>\n#include <sys/mman.h>\n#include <sys/wait.h>\n#define SH_SIZE 4\n// The shared file descriptor used to refer to the shared file\nint shared_fd = -1;\n// The pointer to the shared counter\nint32_t* counter = NULL;\nvoid init_shared_resource() {\n  // Open the file\n  shared_fd = open(\"data.bin\", O_CREAT | O_RDWR, 0600);\n  if (shared_fd < 0) {\n    fprintf(stderr, \"ERROR: Failed to create the file: %s\\n\",\n        strerror(errno));\n    exit(1);\n  }\n  fprintf(stdout, \"File is created and opened with fd: %d\\n\",\n          shared_fd);\n}\nvoid shutdown_shared_resource() {\n  if (remove(\"data.bin\") < 0) {\n    fprintf(stderr, \"ERROR: Removing the file failed: %s\\n\",\n        strerror(errno));\n    exit(1);\n  }\n}\nvoid inc_counter() {\n  ... As exmaple 17.6 ...\n}\nint main(int argc, char** argv) {\n  ... As exmaple 17.6 ...\n}\n```"]