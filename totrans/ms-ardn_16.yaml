- en: Servo Motors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When power is supplied to a brushed DC motor, it will begin to continuously
    spin until the power is cut off. This makes brushed DC motors very good for such
    items as turning the wheels on a robot or the blades on a fan. There are times
    when we need more precise control over how much the motor turns. For example,
    to control a robotic arm, we would need the motors to turn at a precise amount
    to put the arm where it needs to be. For applications like this, we can use a
    servo motor.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn:'
  prefs: []
  type: TYPE_NORMAL
- en: How to control a servo motor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use the Arduino servo library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to power a servo motor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The types of servo motors that we will use with the Arduino are pretty small,
    but most have fairly high torque and are very energy efficient. This allows us
    to use these motors for industrial-grade applications such as robotic arms, conveyor
    belts, autofocus lenses in cameras and even solar-tracking systems for solar panels.
  prefs: []
  type: TYPE_NORMAL
- en: 'A servo motor is made up of a DC motor, which does the actual work; a potentiometer,
    which controls the amount of power going to the motor; control circuitry, which controls
    the movement of the motor and gears. The following photograph shows a servo motor
    connected to a robotic claw:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/13c29d50-863c-4366-8b5c-c06f6c40962e.png)'
  prefs: []
  type: TYPE_IMG
- en: A servo motor contains three wires for the control signal, power and ground.
    The signal wire is usually orange or yellow. The power is the usual red, and the
    ground wire is usually brown or black.
  prefs: []
  type: TYPE_NORMAL
- en: Some smaller servo motors can use the 5V out on the Arduino; however, in this
    chapter, I will be using the **MG996R high torque motor**, which can handle up
    to 7.2V and has a running current of 500mA to 900mA. Therefore, we will be connecting
    it to an external 6V battery pack that contains 4 AA batteries. I would recommend
    referring to the datasheet for your servo motor to determine the correct power
    input for your servo motor.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**: While some of the smaller motors can be powered by the 5V out, I
    would recommend using an external power source anytime you are powering motors.'
  prefs: []
  type: TYPE_NORMAL
- en: The ground wire should be connected to a common ground that is shared with the
    battery pack and also the Arduino ground. The signal wire should be connected
    to a PWM out pin on the Arduino.
  prefs: []
  type: TYPE_NORMAL
- en: The duty cycle from the PWM pin determines the position of the servo shaft.
    When the shaft of the servo motor is at the desired position, the power supplied
    to the motor is cut off. The speed that the motor will spin at is proportional
    to the difference in the actual position and the desired position, which means
    the further the desired position is from the actual position, the faster the motor
    will spin. This makes the servo motor very efficient because it only works as
    hard as it needs to.
  prefs: []
  type: TYPE_NORMAL
- en: Different servo motors have different maximum turn radiuses. The turn radius
    of most servo motors is either 120 degrees (60 degrees each direction) or 180
    degrees (90 degrees each direction). The MG996R servo motor that I will be using
    in this chapter has a maximum turn radius of 120 degrees. Once a servo motor rotates
    to the desired position, it will attempt to hold that position and will resist
    any attempt to push it out of position.
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at the components we will need for this chapter's project.
  prefs: []
  type: TYPE_NORMAL
- en: Components needed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you will need the following components:'
  prefs: []
  type: TYPE_NORMAL
- en: One Arduino Uno or compatible board
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One servo motor (the code has been tested with the MG996R servo. However, any
    standard servo should work)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One potentiometer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One 4 AA battery holder with batteries to power the servo motor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jumper wires
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One breadboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Circuit diagrams
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following diagram shows how to connect the servo motor with the Arduino:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a45ffdce-bc90-4771-9221-c2fcb039a3fa.png)'
  prefs: []
  type: TYPE_IMG
- en: In this project, we will use the potentiometer to control the position of the
    servo motor. Notice that the potentiometer uses the 5V power source from the Arduino
    while the servo motor uses 6V (4 × 1.5V) from the batteries; however, the two
    power sources share a common ground. Now let's look at the code to control the
    servo motor.
  prefs: []
  type: TYPE_NORMAL
- en: Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Both the Arduino IDE and Web Editor come with a servo library that we can use
    simply by including the header file. The following code will do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we need to define the pin that the servo motor and the potentiometer
    are connected to. The following code will connect the signal wire to the digital
    `3` pin and the potentiometer to the analog `0` pin on the Arduino:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we need to define an instance of the `Servo` type as shown in the following
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Within the `setup` function, we need to call the `attach()` method from the
    `servo` instance to initialize the instance and to tell it what pin the servo
    is attached to. The following code shows this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We will want to define a function that will read the potentiometer and set the
    position of the servo position based on how much the potentiometer is turned.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This function will accept an integer, which is the pin that the potentiometer
    is connected to. The `analogRead()` function is called to read the pin that the
    potentiometer is connected to. We use the `map()` function to map the value that
    was read from the analog pin (values from 0-1023) with the 120 degrees that the
    servo motor can move. The `write()` function from the servo type is then used
    to write that value to the servo, causing the servo to adjust its position.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `setServo()` function is then called from the `loop()` function to read
    the potentiometer and set the servo as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The reason we created the `setServo()` function, rather than putting that code
    directly in the `loop()` function, is it makes it a lot easier to add multiple
    servo motors. For example, if we want to create a robotic arm with five servos,
    we could very easily do it by setting up the servos as we did with the first one
    and then using the following code in the `setup()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: If we have the code, like the code in the `setServo()` function that may be
    used multiple times, it is always a good idea to put that code in a separate function
    like this.
  prefs: []
  type: TYPE_NORMAL
- en: If this project is run, the position of the servo will change as the potentiometer
    is turned.
  prefs: []
  type: TYPE_NORMAL
- en: Challenge
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For the challenge in this chapter, you will need a 6 **DOF** (**Degree of Freedom**)
    robotic arm. The following image show what a 6 DOF robotic arm looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/642aec12-9453-4157-8add-abfbe9e9fe7b.png)'
  prefs: []
  type: TYPE_IMG
- en: For this challenge, you will need to figure out how to wire the remaining servo
    motors to the Arduino and the correct power configuration. You can order 6 DOF
    robotic arm kits from Amazon or eBay. Go to their site and do a search for `6
    DOF robotic arm`. Prices for these kits varies greatly depending on the size and
    power of the arm/claw. You can get the robotic arms prebuilt, or as a kit that
    you need to build yourself.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how a servo motor works and how we can control them
    with an Arduino. We also saw what components make up a servo motor. In the next
    chapter, we will see how to use a relay board.
  prefs: []
  type: TYPE_NORMAL
