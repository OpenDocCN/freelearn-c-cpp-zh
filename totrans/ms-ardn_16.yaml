- en: Servo Motors
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 伺服电机
- en: When power is supplied to a brushed DC motor, it will begin to continuously
    spin until the power is cut off. This makes brushed DC motors very good for such
    items as turning the wheels on a robot or the blades on a fan. There are times
    when we need more precise control over how much the motor turns. For example,
    to control a robotic arm, we would need the motors to turn at a precise amount
    to put the arm where it needs to be. For applications like this, we can use a
    servo motor.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当给刷式直流电机供电时，它将开始连续旋转，直到切断电源。这使得刷式直流电机非常适合像机器人轮子或风扇叶片这样的物品。有时我们需要对电机旋转的精确度有更多的控制。例如，为了控制机器人臂，我们需要电机以精确的量旋转，以便将臂放置在所需的位置。对于此类应用，我们可以使用伺服电机。
- en: 'In this chapter, you will learn:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习：
- en: How to control a servo motor
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何控制伺服电机
- en: How to use the Arduino servo library
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用Arduino伺服库
- en: How to power a servo motor
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何为伺服电机供电
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: The types of servo motors that we will use with the Arduino are pretty small,
    but most have fairly high torque and are very energy efficient. This allows us
    to use these motors for industrial-grade applications such as robotic arms, conveyor
    belts, autofocus lenses in cameras and even solar-tracking systems for solar panels.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将与Arduino一起使用的伺服电机类型相当小巧，但大多数都具有相当高的扭矩，并且非常节能。这使得我们可以将这些电机用于工业级应用，如机器人臂、输送带、相机中的自动对焦镜头，甚至是太阳能板的太阳能跟踪系统。
- en: 'A servo motor is made up of a DC motor, which does the actual work; a potentiometer,
    which controls the amount of power going to the motor; control circuitry, which controls
    the movement of the motor and gears. The following photograph shows a servo motor
    connected to a robotic claw:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 伺服电机由一个直流电机组成，它执行实际工作；一个电位计，用于控制电机接收的功率；控制电路，用于控制电机的运动和齿轮。以下照片显示了一个连接到机器人爪子的伺服电机：
- en: '![](img/13c29d50-863c-4366-8b5c-c06f6c40962e.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![](img/13c29d50-863c-4366-8b5c-c06f6c40962e.png)'
- en: A servo motor contains three wires for the control signal, power and ground.
    The signal wire is usually orange or yellow. The power is the usual red, and the
    ground wire is usually brown or black.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 伺服电机包含三根线，用于控制信号、电源和地线。信号线通常是橙色或黄色。电源通常是红色，地线通常是棕色或黑色。
- en: Some smaller servo motors can use the 5V out on the Arduino; however, in this
    chapter, I will be using the **MG996R high torque motor**, which can handle up
    to 7.2V and has a running current of 500mA to 900mA. Therefore, we will be connecting
    it to an external 6V battery pack that contains 4 AA batteries. I would recommend
    referring to the datasheet for your servo motor to determine the correct power
    input for your servo motor.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一些较小的伺服电机可以使用Arduino上的5V输出；然而，在本章中，我将使用**MG996R高扭矩电机**，它可以处理高达7.2V的电压，并且运行电流为500mA至900mA。因此，我们将将其连接到一个包含4节AA电池的外部6V电池组。我建议您查阅您的伺服电机的数据表，以确定伺服电机的正确电源输入。
- en: '**NOTE**: While some of the smaller motors can be powered by the 5V out, I
    would recommend using an external power source anytime you are powering motors.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：虽然一些较小的电机可以通过5V输出供电，但我建议在为电机供电时始终使用外部电源。'
- en: The ground wire should be connected to a common ground that is shared with the
    battery pack and also the Arduino ground. The signal wire should be connected
    to a PWM out pin on the Arduino.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 地线应连接到与电池组和Arduino共用的公共地线。信号线应连接到Arduino的PWM输出引脚。
- en: The duty cycle from the PWM pin determines the position of the servo shaft.
    When the shaft of the servo motor is at the desired position, the power supplied
    to the motor is cut off. The speed that the motor will spin at is proportional
    to the difference in the actual position and the desired position, which means
    the further the desired position is from the actual position, the faster the motor
    will spin. This makes the servo motor very efficient because it only works as
    hard as it needs to.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: PWM引脚的占空比决定了伺服轴的位置。当伺服电机的轴处于所需位置时，会切断对电机的供电。电机将旋转的速度与实际位置和所需位置之间的差异成正比，这意味着所需位置离实际位置越远，电机旋转的速度就越快。这使得伺服电机非常高效，因为它只工作到所需的程度。
- en: Different servo motors have different maximum turn radiuses. The turn radius
    of most servo motors is either 120 degrees (60 degrees each direction) or 180
    degrees (90 degrees each direction). The MG996R servo motor that I will be using
    in this chapter has a maximum turn radius of 120 degrees. Once a servo motor rotates
    to the desired position, it will attempt to hold that position and will resist
    any attempt to push it out of position.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的伺服电机有不同的最大转动半径。大多数伺服电机的转动半径要么是 120 度（每个方向 60 度）要么是 180 度（每个方向 90 度）。在本章中我将使用的
    MG996R 伺服电机的最大转动半径为 120 度。一旦伺服电机旋转到所需的位置，它将尝试保持该位置，并抵抗任何将其推出位置的尝试。
- en: Let's look at the components we will need for this chapter's project.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看本章项目所需的组件。
- en: Components needed
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 需要的组件
- en: 'In this chapter, you will need the following components:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你需要以下组件：
- en: One Arduino Uno or compatible board
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 Arduino Uno 或兼容板
- en: One servo motor (the code has been tested with the MG996R servo. However, any
    standard servo should work)
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个伺服电机（代码已在 MG996R 伺服电机上测试过。然而，任何标准伺服电机都应适用）
- en: One potentiometer
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个电位计
- en: One 4 AA battery holder with batteries to power the servo motor
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 4 AA 电池盒和电池，为伺服电机供电
- en: Jumper wires
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跳线
- en: One breadboard
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个面包板
- en: Circuit diagrams
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 电路图
- en: 'The following diagram shows how to connect the servo motor with the Arduino:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的图示显示了如何将伺服电机连接到 Arduino：
- en: '![](img/a45ffdce-bc90-4771-9221-c2fcb039a3fa.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a45ffdce-bc90-4771-9221-c2fcb039a3fa.png)'
- en: In this project, we will use the potentiometer to control the position of the
    servo motor. Notice that the potentiometer uses the 5V power source from the Arduino
    while the servo motor uses 6V (4 × 1.5V) from the batteries; however, the two
    power sources share a common ground. Now let's look at the code to control the
    servo motor.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将使用电位计来控制伺服电机的位置。请注意，电位计使用 Arduino 的 5V 电源，而伺服电机使用来自电池的 6V（4 × 1.5V）；然而，这两个电源共享一个公共地。现在让我们看看控制伺服电机的代码。
- en: Code
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码
- en: 'Both the Arduino IDE and Web Editor come with a servo library that we can use
    simply by including the header file. The following code will do this:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino IDE 和 Web 编辑器都附带了一个伺服库，我们可以通过包含头文件来简单地使用它。以下代码将执行此操作：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, we need to define the pin that the servo motor and the potentiometer
    are connected to. The following code will connect the signal wire to the digital
    `3` pin and the potentiometer to the analog `0` pin on the Arduino:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要定义伺服电机和电位计连接到的引脚。以下代码将信号线连接到数字 `3` 引脚，将电位计连接到 Arduino 的模拟 `0` 引脚：
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now we need to define an instance of the `Servo` type as shown in the following
    line:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要定义一个 `Servo` 类型的实例，如下面的行所示：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Within the `setup` function, we need to call the `attach()` method from the
    `servo` instance to initialize the instance and to tell it what pin the servo
    is attached to. The following code shows this:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `setup()` 函数中，我们需要从 `servo` 实例调用 `attach()` 方法来初始化实例并告诉它伺服电机连接到哪个引脚。以下代码显示了这一点：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We will want to define a function that will read the potentiometer and set the
    position of the servo position based on how much the potentiometer is turned.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将想要定义一个函数，该函数将读取电位计并根据电位计旋转的程度设置伺服电机的位置。
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This function will accept an integer, which is the pin that the potentiometer
    is connected to. The `analogRead()` function is called to read the pin that the
    potentiometer is connected to. We use the `map()` function to map the value that
    was read from the analog pin (values from 0-1023) with the 120 degrees that the
    servo motor can move. The `write()` function from the servo type is then used
    to write that value to the servo, causing the servo to adjust its position.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数将接受一个整数，即电位计连接到的引脚。调用 `analogRead()` 函数来读取电位计连接到的引脚。我们使用 `map()` 函数将读取的模拟引脚值（0-1023
    的值）映射到伺服电机可以移动的 120 度。然后使用伺服类型的 `write()` 函数将此值写入伺服电机，使伺服电机调整其位置。
- en: 'The `setServo()` function is then called from the `loop()` function to read
    the potentiometer and set the servo as shown in the following code:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然后从 `loop()` 函数中调用 `setServo()` 函数来读取电位计并设置伺服电机，如下面的代码所示：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The reason we created the `setServo()` function, rather than putting that code
    directly in the `loop()` function, is it makes it a lot easier to add multiple
    servo motors. For example, if we want to create a robotic arm with five servos,
    we could very easily do it by setting up the servos as we did with the first one
    and then using the following code in the `setup()` function:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建`setServo()`函数而不是直接将其代码放入`loop()`函数中的原因，是这样做可以更容易地添加多个伺服电机。例如，如果我们想创建一个带有五个伺服电机的机械臂，我们可以非常容易地通过像第一个一样设置伺服电机，然后在`setup()`函数中使用以下代码：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If we have the code, like the code in the `setServo()` function that may be
    used multiple times, it is always a good idea to put that code in a separate function
    like this.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们有像`setServo()`函数中的代码那样可能被多次使用的代码，将其放入一个单独的函数中总是一个好主意。
- en: If this project is run, the position of the servo will change as the potentiometer
    is turned.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果运行此项目，随着电位器的旋转，伺服电机的位置将发生变化。
- en: Challenge
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 挑战
- en: 'For the challenge in this chapter, you will need a 6 **DOF** (**Degree of Freedom**)
    robotic arm. The following image show what a 6 DOF robotic arm looks like:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的挑战中，你需要一个6自由度（**DOF**）的机械臂。以下图片展示了6自由度机械臂的外观：
- en: '![](img/642aec12-9453-4157-8add-abfbe9e9fe7b.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/642aec12-9453-4157-8add-abfbe9e9fe7b.png)'
- en: For this challenge, you will need to figure out how to wire the remaining servo
    motors to the Arduino and the correct power configuration. You can order 6 DOF
    robotic arm kits from Amazon or eBay. Go to their site and do a search for `6
    DOF robotic arm`. Prices for these kits varies greatly depending on the size and
    power of the arm/claw. You can get the robotic arms prebuilt, or as a kit that
    you need to build yourself.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个挑战，你需要想出如何将剩余的伺服电机连接到Arduino以及正确的电源配置。你可以从亚马逊或eBay订购6自由度机械臂套件。访问他们的网站，并搜索`6自由度机械臂`。这些套件的价格因机械臂/爪的大小和功率而大不相同。你可以购买预组装的机械臂，或者作为需要自己组装的套件。
- en: Summary
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, we learned how a servo motor works and how we can control them
    with an Arduino. We also saw what components make up a servo motor. In the next
    chapter, we will see how to use a relay board.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了伺服电机的工作原理以及如何使用Arduino来控制它们。我们还看到了组成伺服电机的组件。在下一章中，我们将看到如何使用继电器板。
