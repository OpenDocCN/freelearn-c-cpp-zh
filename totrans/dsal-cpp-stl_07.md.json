["```cpp\n#include <algorithm>\n#include <iostream>\n#include <set>\n#include <vector>\nint main() {\n  std::set<int> numbers = {5, 3, 8, 1, 4};\n  auto [position, wasInserted] = numbers.insert(6);\n  if (wasInserted) {\n    std::cout << \"6 was inserted into the set.\\n\";\n  }\n  auto result = numbers.insert(5);\n  if (!result.second) {\n    std::cout << \"5 is already in the set.\\n\";\n  }\n  if (numbers.find(3) != numbers.end()) {\n    std::cout << \"3 is in the set.\\n\";\n  }\n  numbers.erase(1);\n  std::cout << \"Elements in the set:\";\n  for (int num : numbers) { std::cout << ' ' << num; }\n  std::cout << '\\n';\n  std::set<int> moreNumbers = {9, 7, 2};\n  numbers.merge(moreNumbers);\n  std::cout << \"After merging:\";\n  for (int num : numbers) { std::cout << ' ' << num; }\n  std::cout << '\\n';\n  if (numbers.count(2)) {\n    std::cout << \"2 exists in the set.\\n\";\n  }\n  std::set<std::string, bool (*)(const std::string &,\n                                 const std::string &)>\n      caseInsensitiveSet{[](const std::string &lhs,\n                            const std::string &rhs) {\n        return std::lexicographical_compare(\n            lhs.begin(), lhs.end(), rhs.begin(), rhs.end(),\n            [](char a, char b) {\n              return std::tolower(a) < std::tolower(b);\n            });\n      }};\n  caseInsensitiveSet.insert(\"Hello\");\n  if (!caseInsensitiveSet.insert(\"hello\").second) {\n    std::cout << \"Duplicate insertion (case-insensitive) \"\n                 \"detected.\\n\";\n  }\n  return 0;\n}\n```", "```cpp\n6 was inserted into the set.\n5 is already in the set.\n3 is in the set.\nElements in the set: 3 4 5 6 8\nAfter merging: 2 3 4 5 6 7 8 9\n2 exists in the set.\nDuplicate insertion (case-insensitive) detected.\n```", "```cpp\n#include <algorithm>\n#include <iostream>\n#include <map>\n#include <string>\nint main() {\n  std::map<std::string, int> ageMap = {\n      {\"Lisa\", 25}, {\"Corbin\", 30}, {\"Aaron\", 22}};\n  ageMap[\"Kristan\"] = 28;\n  ageMap.insert_or_assign(\"Lisa\", 26);\n  if (ageMap.find(\"Corbin\") != ageMap.end()) {\n    std::cout << \"Corbin exists in the map.\\n\";\n  }\n  ageMap[\"Aaron\"] += 1;\n  std::cout << \"Age records:\\n\";\n  for (const auto &[name, age] : ageMap) {\n    std::cout << name << \": \" << age << '\\n';\n  }\n  ageMap.erase(\"Corbin\");\n  if (ageMap.count(\"Regan\") == 0) {\n    std::cout << \"Regan does not exist in the map.\\n\";\n  }\n  std::map<std::string, int,\n           bool (*)(const std::string &,\n                    const std::string &)>\n      customOrderMap{[](const std::string &lhs,\n                        const std::string &rhs) {\n        return lhs > rhs; // reverse lexicographic order\n      }};\n  customOrderMap[\"Lisa\"] = 25;\n  customOrderMap[\"Corbin\"] = 30;\n  customOrderMap[\"Aaron\"] = 22;\n  std::cout << \"Custom ordered map:\\n\";\n  for (const auto &[name, age] : customOrderMap) {\n    std::cout << name << \": \" << age << '\\n';\n  }\n  return 0;\n}\n```", "```cpp\nCorbin exists in the map.\nAge records:\nAaron: 23\nCorbin: 30\nKristan: 28\nLisa: 26\nRegan does not exist in the map.\nCustom ordered map:\nLisa: 25\nCorbin: 30\nAaron: 22\n```", "```cpp\n#include <iostream>\n#include <iterator>\n#include <set>\n#include <string>\nint main() {\n  std::multiset<int> numbers = {5, 3, 8, 5, 3, 9, 4};\n  numbers.insert(6);\n  numbers.insert(5); // Inserting another duplicate\n  for (int num : numbers) { std::cout << num << ' '; }\n  std::cout << '\\n';\n  std::cout << \"Number of 5s: \" << numbers.count(5)\n            << '\\n';\n  auto [begin, end] = numbers.equal_range(5);\n  for (auto it = begin; it != end; ++it) {\n    std::cout << *it << ' ';\n  }\n  std::cout << '\\n';\n  numbers.erase(5);\n  std::multiset<std::string, std::greater<>> words = {\n      \"apple\", \"banana\", \"cherry\", \"apple\"};\n  for (const auto &word : words) {\n    std::cout << word << ' ';\n  }\n  std::cout << '\\n';\n  std::multiset<int> dataset = {1, 2, 3, 4, 5,\n                                6, 7, 8, 9, 10};\n  const auto start = dataset.lower_bound(4);\n  const auto stop = dataset.upper_bound(7);\n  std::copy(start, stop,\n            std::ostream_iterator<int>(std::cout, \" \"));\n  std::cout << '\\n';\n  return 0;\n}\n```", "```cpp\n3 3 4 5 5 5 6 8 9\nNumber of 5s: 3\n5 5 5\ncherry banana apple apple\n4 5 6 7\n```", "```cpp\n#include <iostream>\n#include <map>\n#include <string>\nint main() {\n  std::multimap<std::string, int> grades;\n  grades.insert({\"John\", 85});\n  grades.insert({\"Corbin\", 78});\n  grades.insert({\"Regan\", 92});\n  grades.insert({\"John\", 90}); // John has another grade\n  for (const auto &[name, score] : grades) {\n    std::cout << name << \" scored \" << score << '\\n';\n  }\n  std::cout << '\\n';\n  std::cout << \"John's grade count:\"\n            << grades.count(\"John\") << '\\n';\n  auto [begin, end] = grades.equal_range(\"John\");\n  for (auto it = begin; it != end; ++it) {\n    std::cout << it->first << \" scored \" << it->second\n              << '\\n';\n  }\n  std::cout << '\\n';\n  grades.erase(\"John\");\n  std::multimap<std::string, int, std::greater<>>\n      reverseGrades = {{\"Mandy\", 82},\n                       {\"Mandy\", 87},\n                       {\"Aaron\", 90},\n                       {\"Dan\", 76}};\n  for (const auto &[name, score] : reverseGrades) {\n    std::cout << name << \" scored \" << score << '\\n';\n  }\n  return 0;\n}\n```", "```cpp\nCorbin scored 78\nJohn scored 85\nJohn scored 90\nRegan scored 92\nJohn's grade count:2\nJohn scored 85\nJohn scored 90\nMandy scored 82\nMandy scored 87\nDan scored 76\nAaron scored 90\n```"]