["```cpp\nQT       += core gui network\n\ngreaterThan(QT_MAJOR_VERSION, 4): QT += widgets\n\nTARGET = Downloader_Demo\nTEMPLATE = app\n\nSOURCES +=  main.cpp\\\n            mainwindow.cpp \\\n            downloader.cpp \\\n            downloaddialog.cpp\n\nHEADERS  += mainwindow.h \\\n            downloader.h \\\n            downloaddialog.h\n\nFORMS    += mainwindow.ui \\\n            downloaddialog.ui\n```", "```cpp\n#ifndef DOWNLOADER_H\n#define DOWNLOADER_H\n\n#include <QObject>\n#include <QNetworkAccessManager>\n#include <QNetworkRequest>\n#include <QNetworkReply>\n\nclass Downloader : public QObject\n{\n  Q_OBJECT\npublic:\n  explicit Downloader(QObject *parent = 0);\n\npublic slots:\n  void download(const QUrl &url, const QString &file);\n\nsignals:\n  void errorString(const QString &);\n  void available(bool);\n  void running(bool);\n  void downloadProgress(qint64, qint64);\n\nprivate:\n  QNetworkAccessManager *naManager;\n  QString saveFile;\n\n  void saveToDisk(QNetworkReply *);\n\nprivate slots:\n  void onDownloadFinished(QNetworkReply *);\n};\n\n#endif // DOWNLOADER_H\n```", "```cpp\nDownloader::Downloader(QObject *parent) :\n  QObject(parent)\n{\n  naManager = new QNetworkAccessManager(this);\n  connect(naManager, &QNetworkAccessManager::finished, this, &Downloader::onDownloadFinished);\n}\n```", "```cpp\nvoid Downloader::onDownloadFinished(QNetworkReply *reply)\n{\n  if (reply->error() != QNetworkReply::NoError) {\n    emit errorString(reply->errorString());\n  }\n  else {\n    saveToDisk(reply);\n  }\n  reply->deleteLater();\n  emit available(true);\n  emit running(false);\n}\n```", "```cpp\nvoid Downloader::saveToDisk(QNetworkReply *reply)\n{\n  QFile f(saveFile);\n  f.open(QIODevice::WriteOnly | QIODevice::Truncate);\n  f.write(reply->readAll());\n  f.close();\n}\n```", "```cpp\nvoid Downloader::download(const QUrl &url, const QString &file)\n{\n  saveFile = file;\n  QNetworkRequest req(url);\n  QNetworkReply *reply = naManager->get(req);\n  connect(reply, &QNetworkReply::downloadProgress, this, &Downloader::downloadProgress);\n  emit available(false);\n  emit running(true);\n}\n```", "```cpp\n#ifndef DOWNLOADDIALOG_H\n#define DOWNLOADDIALOG_H\n\n#include <QDialog>\n\nnamespace Ui {\n  class DownloadDialog;\n}\n\nclass DownloadDialog : public QDialog\n{\n  Q_OBJECT\n\npublic:\n  explicit DownloadDialog(QWidget *parent = 0);\n  ~DownloadDialog();\n\nsignals:\n  void accepted(const QUrl &, const QString &);\n\nprivate:\n  Ui::DownloadDialog *ui;\n\nprivate slots:\n  void onButtonAccepted();\n  void onSaveAsButtonClicked();\n};\n\n#endif // DOWNLOADDIALOG_H\n```", "```cpp\n#include <QFileDialog>\n#include \"downloaddialog.h\"\n#include \"ui_downloaddialog.h\"\n\nDownloadDialog::DownloadDialog(QWidget *parent) :\n  QDialog(parent),\n  ui(new Ui::DownloadDialog)\n{\n  ui->setupUi(this);\n\n  connect(ui->buttonBox, &QDialogButtonBox::accepted, this, &DownloadDialog::onButtonAccepted);\n  connect(ui->saveAsButton, &QPushButton::clicked, this, &DownloadDialog::onSaveAsButtonClicked);\n}\n\nDownloadDialog::~DownloadDialog()\n{\n  delete ui;\n}\n\nvoid DownloadDialog::onButtonAccepted()\n{\n  emit accepted(QUrl(ui->urlEdit->text()), ui->saveAsEdit->text());\n  this->accept();\n}\n\nvoid DownloadDialog::onSaveAsButtonClicked()\n{\n  QString str = QFileDialog::getSaveFileName(this, \"Save As\");\n  if (!str.isEmpty()) {\n    ui->saveAsEdit->setText(str);\n  }\n}\n```", "```cpp\n#ifndef MAINWINDOW_H\n#define MAINWINDOW_H\n\n#include <QMainWindow>\n#include \"downloader.h\"\n#include \"downloaddialog.h\"\n\nnamespace Ui {\n  class MainWindow;\n}\n\nclass MainWindow : public QMainWindow\n{\n  Q_OBJECT\n\npublic:\n  explicit MainWindow(QWidget *parent = 0);\n  ~MainWindow();\n\nprivate:\n  Ui::MainWindow *ui;\n Downloader *downloader;\n DownloadDialog *ddlg;\n\nprivate slots:\n  void onNewDownloadButtonPressed();\n  void showMessage(const QString &);\n  void onDownloadProgress(qint64, qint64);\n};\n\n#endif // MAINWINDOW_H\n```", "```cpp\nMainWindow::MainWindow(QWidget *parent) :\n  QMainWindow(parent),\n  ui(new Ui::MainWindow)\n{\n  ui->setupUi(this);\n  ui->progressBar->setVisible(false);\n\n  downloader = new Downloader(this);\n\n  connect(ui->newDownloadButton, &QPushButton::clicked, this, &MainWindow::onNewDownloadButtonPressed);\n  connect(downloader, &Downloader::errorString, this, &MainWindow::showMessage);\n  connect(downloader, &Downloader::downloadProgress, this, &MainWindow::onDownloadProgress);\n  connect(downloader, &Downloader::available, ui->newDownloadButton, &QPushButton::setEnabled);\n  connect(downloader, &Downloader::running, ui->progressBar, &QProgressBar::setVisible);\n}\n```", "```cpp\nvoid MainWindow::onNewDownloadButtonPressed()\n{\n  ddlg = new DownloadDialog(this);\n  connect(ddlg, &DownloadDialog::accepted, downloader, &Downloader::download);\n  ddlg->exec();\n  ddlg->deleteLater();\n}\n```", "```cpp\nvoid MainWindow::showMessage(const QString &es)\n{\n  ui->statusBar->showMessage(es, 3000);\n}\n```", "```cpp\nvoid MainWindow::onDownloadProgress(qint64 r, qint64 t)\n{\n  ui->progressBar->setMaximum(t);\n  ui->progressBar->setValue(r);\n}\n```", "```cpp\n#ifndef DOWNLOADWORKER_H\n#define DOWNLOADWORKER_H\n\n#include <QObject>\n#include <QNetworkReply>\n#include <QNetworkRequest>\n#include <QNetworkAccessManager>\n\nclass DownloadWorker : public QObject\n{\n  Q_OBJECT\n\npublic slots:\n  void doDownload(const QUrl &url, QNetworkAccessManager *nm);\n\nsignals:\n  void downloadProgress(qint64, qint64);\n};\n\n#endif // DOWNLOADWORKER_H\n```", "```cpp\n#include \"downloadworker.h\"\n\nvoid DownloadWorker::doDownload(const QUrl &url, QNetworkAccessManager *nm)\n{\n  QNetworkRequest req(url);\n  QNetworkReply *reply = nm->get(req);\n  connect(reply, &QNetworkReply::downloadProgress, this, &DownloadWorker::downloadProgress);\n}\n```", "```cpp\n#ifndef DOWNLOADER_H\n#define DOWNLOADER_H\n\n#include <QObject>\n#include <QNetworkAccessManager>\n#include <QNetworkRequest>\n#include <QNetworkReply>\n#include <QThread>\n#include \"downloadworker.h\"\n\nclass Downloader : public QObject\n{\n  Q_OBJECT\npublic:\n  explicit Downloader(QObject *parent = 0);\n  ~Downloader();\n\npublic slots:\n  void download(const QUrl &url, const QString &file);\n\nsignals:\n  void errorString(const QString &);\n  void available(bool);\n  void running(bool);\n  void downloadProgress(qint64, qint64);\n\nprivate:\n  QString saveFile;\n  QNetworkAccessManager *naManager;\n  DownloadWorker *worker;\n  QThread workerThread;\n\n  void saveToDisk(QNetworkReply *);\n\nprivate slots:\n  void onDownloadFinished(QNetworkReply *);\n};\n\n#endif // DOWNLOADER_H\n```", "```cpp\n#include <QFile>\n#include \"downloader.h\"\n\nDownloader::Downloader(QObject *parent) :\n  QObject(parent)\n{\n  naManager = new QNetworkAccessManager(this);\n  worker = new DownloadWorker;\n  worker->moveToThread(&workerThread);\n\n  connect(naManager, &QNetworkAccessManager::finished, this, &Downloader::onDownloadFinished);\n  connect(&workerThread, &QThread::finished, worker, &DownloadWorker::deleteLater);\n  connect(worker, &DownloadWorker::downloadProgress, this, &Downloader::downloadProgress);\n\n  workerThread.start();\n}\n\nDownloader::~Downloader()\n{\n  workerThread.quit();\n  workerThread.wait();\n}\n\nvoid Downloader::download(const QUrl &url, const QString &file)\n{\n  saveFile = file;\n  worker->doDownload(url, naManager);\n  emit available(false);\n  emit running(true);\n}\n\nvoid Downloader::onDownloadFinished(QNetworkReply *reply)\n{\n  if (reply->error() != QNetworkReply::NoError) {\n    emit errorString(reply->errorString());\n  }\n  else {\n    saveToDisk(reply);\n  }\n  reply->deleteLater();\n  emit available(true);\n  emit running(false);\n}\n\nvoid Downloader::saveToDisk(QNetworkReply *reply)\n{\n  QFile f(saveFile);\n  f.open(QIODevice::WriteOnly | QIODevice::Truncate);\n  f.write(reply->readAll());\n  f.close();\n}\n```", "```cpp\n#ifndef MAINWINDOW_H\n#define MAINWINDOW_H\n\n#include <QMainWindow>\n#include <QNetworkConfigurationManager>\n#include <QNetworkConfiguration>\n#include <QNetworkSession>\n#include <QStandardItemModel>\n\nnamespace Ui {\n  class MainWindow;\n}\n\nclass MainWindow : public QMainWindow\n{\n  Q_OBJECT\n\npublic:\n  explicit MainWindow(QWidget *parent = 0);\n  ~MainWindow();\n\nprivate:\n  Ui::MainWindow *ui;\n  QNetworkConfigurationManager *networkConfManager;\n  QStandardItemModel *confListModel;\n\nprivate slots:\n  void onOnlineStateChanged(bool isOnline);\n  void onConfigurationChanged(const QNetworkConfiguration &config);\n  void onRefreshClicked();\n  void onRefreshCompleted();\n  void onConnectClicked();\n  void onDisconnectClicked();\n};\n\n#endif // MAINWINDOW_H\n```", "```cpp\nMainWindow::MainWindow(QWidget *parent) :\n  QMainWindow(parent),\n  ui(new Ui::MainWindow)\n{\n  ui->setupUi(this);\n\n  networkConfManager = new QNetworkConfigurationManager(this);\n  confListModel = new QStandardItemModel(0, 1, this);\n\n  ui->listView->setModel(confListModel);\n  ui->progressBar->setVisible(false);\n\n  connect(networkConfManager, &QNetworkConfigurationManager::onlineStateChanged, this, &MainWindow::onOnlineStateChanged);\n  connect(networkConfManager, &QNetworkConfigurationManager::configurationChanged, this, &MainWindow::onConfigurationChanged);\n  connect(networkConfManager, &QNetworkConfigurationManager::updateCompleted, this, &MainWindow::onRefreshCompleted);\n\n  connect(ui->refreshButton, &QPushButton::clicked, this, &MainWindow::onRefreshClicked);\n  connect(ui->connectButton, &QPushButton::clicked, this, &MainWindow::onConnectClicked);\n  connect(ui->disconnectButton, &QPushButton::clicked, this, &MainWindow::onDisconnectClicked);\n\n  onOnlineStateChanged(networkConfManager->isOnline());\n  onRefreshClicked();\n}\n```", "```cpp\nvoid MainWindow::onOnlineStateChanged(bool isOnline)\n{\n  ui->onlineStatus->setText(isOnline ? \"Online\" : \"Offline\");\n}\n```", "```cpp\nvoid MainWindow::onConfigurationChanged(const QNetworkConfiguration &config)\n{\n  QList<QStandardItem *> itemList = confListModel->findItems(config.name());\n  foreach (QStandardItem *i, itemList) {\n    if (i->data(Qt::UserRole).toString().compare(config.identifier()) == 0) {\n      if (config.state().testFlag(QNetworkConfiguration::Active)) {\n        i->setBackground(QBrush(Qt::green));\n      }\n      else {\n        i->setBackground(QBrush(Qt::NoBrush));\n      }\n    }\n  }\n}\n```", "```cpp\nvoid MainWindow::onRefreshClicked()\n{\n  ui->progressBar->setVisible(true);\n  ui->refreshButton->setEnabled(false);\n  networkConfManager->updateConfigurations();\n}\n```", "```cpp\nvoid MainWindow::onRefreshCompleted()\n{\n  confListModel->removeRows(0, confListModel->rowCount());\n  foreach(QNetworkConfiguration c, networkConfManager->allConfigurations()) {\n    QStandardItem *item = new QStandardItem(c.name());\n    item->setData(QVariant(c.identifier()), Qt::UserRole);\n    if (c.state().testFlag(QNetworkConfiguration::Active)) {\n      item->setBackground(QBrush(Qt::green));\n    }\n    confListModel->appendRow(item);\n  }\n  ui->progressBar->setVisible(false);\n  ui->refreshButton->setEnabled(true);\n}\n```", "```cpp\nvoid MainWindow::onConnectClicked()\n{\n  ui->progressBar->setVisible(true);\n  QString ident = confListModel->data(ui->listView->currentIndex(), Qt::UserRole).toString();\n  QNetworkConfiguration conf = networkConfManager->configurationFromIdentifier(ident);\n  QNetworkSession *session = new QNetworkSession(conf, this);\n  session->open();\n  session->waitForOpened(1000);\n  session->deleteLater();\n  ui->progressBar->setVisible(false);\n}\n\nvoid MainWindow::onDisconnectClicked()\n{\n  QString ident = confListModel->data(ui->listView->currentIndex(), Qt::UserRole).toString();\n  QNetworkConfiguration conf = networkConfManager->configurationFromIdentifier(ident);\n  QNetworkSession *session = new QNetworkSession(conf, this);\n  if (networkConfManager->capabilities().testFlag(QNetworkConfigurationManager::SystemSessionSupport)) {\n    session->close();\n  }\n  else {\n    session->stop();\n  }\n  session->deleteLater();\n}\n```"]