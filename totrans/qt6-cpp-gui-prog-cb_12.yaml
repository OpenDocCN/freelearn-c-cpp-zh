- en: '12'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Accessing Databases with SQL Driver and Qt
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Structured Query Language** (**SQL**) is a special programming language used
    to manage data held in a relational database management system. A SQL server is
    a database system designed to use one of the many types of SQL programming languages
    to manage its data.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a database
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting to a database
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing basic SQL queries
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a login screen with Qt
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying information from a database in model view
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Advanced SQL queries
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The technical requirements for this chapter include Qt 6.6.1 MinGW 64-bit and
    Qt Creator 12.0.2\. All the code used in this chapter can be downloaded from the
    following GitHub repository: [https://github.com/PacktPublishing/QT6-C-GUI-Programming-Cookbook---Third-Edition-/tree/main/Chapter12](https://github.com/PacktPublishing/QT6-C-GUI-Programming-Cookbook---Third-Edition-/tree/main/Chapter12).'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a database
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Qt supports several different types of SQL drivers in the form of plugins/add-ons,
    such as **SQLite**, **ODBC**, **PostgreSQL**, **MySQL**, and so on. However, it’s
    very easy to integrate these drivers into your Qt project. We will learn how to
    do this in the following example.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this example, we will learn how to use Qt with **SQLite**. Let’s set up
    our SQLite editor before we dive into Qt:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: 'Download **SQLiteStudio** from [https://sqlitestudio.pl](https://sqlitestudio.pl)
    and install it to administrate your SQLite databases:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.1 – Install SQLiteStudio onto your computer](img/B20976_12_001.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
- en: Figure 12.1 – Install SQLiteStudio onto your computer
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: 'Open **SQLiteStudio** and you should see something like this:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.2 – SQLiteStudio is a handy program for managing SQLite databases](img/B20976_12_002.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
- en: Figure 12.2 – SQLiteStudio is a handy program for managing SQLite databases
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to create a new database before we start; go to **Database** | **Add
    a database**. Select the **SQLite 3** option for your database type, followed
    by selecting your file name and setting your database name. Then, click the **Test
    connection** button. You should see a green tick appearing beside the button.
    After that, click on the **OK** button:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.3 – Creating a new SQLite 3 database](img/B20976_12_003.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
- en: Figure 12.3 – Creating a new SQLite 3 database
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the database has been created, you should see the database appear in the
    **Databases** window. Then, right-click on **Tables** and select **Create a table**
    option from the menu that pops up:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.4 – Select the Create a table option from the menu](img/B20976_12_004.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
- en: Figure 12.4 – Select the Create a table option from the menu
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: 'Set the table name as `employee`. Then, click on the **Add column (lns)** button
    located above the table name input field. The **Column** window will now pop up:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.5 – Create a new column called emp_id](img/B20976_12_005.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
- en: Figure 12.5 – Create a new column called emp_id
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: 'Set the column name as `emp_id`, set the data type as **INTEGER**, and check
    the **Primary key** checkbox. Then, click on the **Configure** button at the right
    of the **Primary key** checkbox. The **Edit constraint** window will now pop up.
    Check on the **Autoincrement** checkbox and click **Apply**:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.6 – Enable the Autoincrement checkbox](img/B20976_12_006.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
- en: Figure 12.6 – Enable the Autoincrement checkbox
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: 'After that, press the `emp_id`. Let’s repeat the steps above (without enabling
    the primary key) to create other columns. You may follow the same settings as
    seen here:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.7 – Create all five columns](img/B20976_12_007.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
- en: Figure 12.7 – Create all five columns
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: 'The columns are not actually created at this point. Click on the button with
    a green tick icon located above the table name. A window will pop up to confirm
    the creation of the columns. Press **OK** to proceed:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.8 – Click the OK button to confirm](img/B20976_12_008.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
- en: Figure 12.8 – Click the OK button to confirm
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we have created the `employee` table. Let’s move on from the `employee`
    table, which is currently empty. Let’s insert dummy data into the `employee` table
    by clicking on the **Insert row (Ins)** button, which is the one with a green
    plus icon. Then, simply insert some dummy data like so:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.9 – Insert dummy data into the employee table](img/B20976_12_009.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
- en: Figure 12.9 – Insert dummy data into the employee table
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: Let’s set up the SQL driver for our Qt project. Just go to your Qt installation
    folder and look for the `sqldrivers` folder. For example, mine is located at `C:\Qt\6.4.2\mingw_64\plugins\sqldrivers`.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the entire `sqldrivers` folder to your project’s build directory. You can
    remove the DLL files that are not relevant to the SQL server you’re running. In
    our case, since we’re using `qsqlite.dll`.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The DLL files mentioned in the previous step are the drivers that enable Qt
    to communicate with different types of SQL architecture. You may also need the
    DLL file of the SQL client library in order for the driver to work. In our case,
    we need `sqlite3.dll` to be located in the same directory as our program’s executable.
    You can either get it from the installation directory of **SQLiteStudio** or from
    the official website of **SQLite**: [https://www.sqlite.org/download.html](https://www.sqlite.org/download.html).'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Qt provides us with SQL drivers so that we can easily connect to different types
    of SQL servers without implementing them ourselves.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: Currently, Qt officially supports SQLite, ODBC, and PostgreSQL. If you need
    to connect directly to MySQL, you need to recompile Qt drivers by yourself, which
    is out of the scope of this book. For security reasons, it’s not recommended that
    you connect to MySQL directly from your application. Instead, your application
    should interact with your MySQL database (or any other SQL servers that are not
    officially supported by Qt) indirectly by sending an HTTP request using `QNetworkAccessManager`
    to your backend script (such as PHP, ASP, and JSP), which can then communicate
    with the database.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: If you only need a simple file-based database and don’t plan to use a server-based
    database, **SQLite** is a good choice for you, which is what we have chosen for
    this chapter.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: In the *Connecting to a database* recipe, we will learn how to connect to our
    SQL database using Qt’s SQL module.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to a database
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to connect our Qt 6 application to the SQL
    server.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Connecting to SQL Server in Qt is really simple:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: Open Qt Creator and create a new **Qt Widgets** **Application** project.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open your project file (`.pro`), add the `sql` module to your project, and
    run `qmake` like this:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![Figure 12.10 –  Setting the text properties](img/B20976_12_010.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
- en: Figure 12.10 – Setting the text properties
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `mainwindow.h` and add the following headers below the `QMainWindow` header:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'MainWindow::MainWindow(QWidget *parent) :'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: QMainWindow(parent), ui(new Ui::MainWindow) {
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ui->setupUi(this);
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: QSqlDatabase db = QSqlDatabase::addDatabase("QSQLITE");
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: db.setDatabaseName("database.db3");
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Start the SQL query once the database connection has been opened:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Print out any error texts:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If you compile and run your project now, you should get something like this:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.11 – The data from our database is now showing on the Qt program](img/B20976_12_011.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
- en: Figure 12.11 – The data from our database is now showing on the Qt program
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The previous example shows you how to connect to your SQL database using the
    `QSqlDatabase` class derived from the SQL module. You won’t be able to access
    any of the classes related to SQL without adding the module to your Qt project.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: 'We must tell Qt which SQL architecture we are running by mentioning it when
    calling the `addDatabase()` function. The options supported by Qt are `QSqlDatabase:
    QMYSQL driver not loaded`, you should check whether the DLL files are placed in
    the correct directory.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: We can send our SQL statements to the database through the `QSqlQuery` class
    and wait for it to return the results, which are usually either the data you requested
    or error messages due to invalid statements. If there are any data coming from
    the database server, they will all be stored in the `QSqlQuery` class. All you
    need to retrieve these data is to perform a “while” loop on the `QSqlQuery` class
    to check for all existing records and retrieve them by calling the `value()` function.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: Since we used SQLite in the preceding example, we don’t need to set the server
    host, username, and password when connecting to the database. SQLite is a file-based
    SQL database; therefore, we only need to set the file name when calling `QSqlDatabase::setDatabaseName()`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: Qt 6 no longer officially supports QMYSQL or QMYSQL3\. You can add MySQL support
    by re-compiling Qt from the source yourself. However, this method is not recommended
    for beginners. For more information, check out [https://doc.qt.io/qt-6/sql-driver.html#compile-qt-with-a-specific-driver](https://doc.qt.io/qt-6/sql-driver.html#compile-qt-with-a-specific-driver).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: Writing basic SQL queries
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous example, we wrote our very first SQL query, which involves the
    `SELECT` statement. This time, we will learn how to use some other SQL statements,
    such as `INSERT`, `UPDATE`, and `DELETE`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s create a simple program that demonstrates basic SQL query commands by
    following these steps:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use our previous project files, but there are a couple of things we
    need to change. Open `mainwindow.ui` and replace the labels for `UPDATE`, `INSERT`,
    and `DELETE`:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.12 – Modify the UI to this](img/B20976_12_012.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
- en: Figure 12.12 – Modify the UI to this
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `mainwindow.h` and add the following variables under the private inheritance:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'MainWindow::MainWindow(QWidget *parent) :'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: QMainWindow(parent), ui(new Ui::MainWindow) {
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ui->setupUi(this);
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: db = QSqlDatabase::addDatabase("QSQLITE");
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: db.setDatabaseName("database.db3");
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: connected = db.open();
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let’s make a query after we have connected to the database:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Print out any error messages:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Go to `mainwindow.ui` and right-click on one of the buttons we added to the
    canvas in step 1\. Select `mainwindow.h` and `mainwindow.cpp`:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Open `mainwindow.cpp` and we will declare what the program will do when we
    click on the **Update** button:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Make an `UPDATE` query like so:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Print out the last error message, if any:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Declare what will happen when the **INSERT** button is clicked:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Make an `INSERT` query like so:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Declare what will happen when the **Delete** button is clicked:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Call `QSqlDatabase::close()` at the class destructor to properly terminate
    the SQL connection before exiting the program:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'If you compile and run the program now, you should be able to select the default
    data from the database. Then, you can choose to update it or delete it from the
    database. You can also insert new data into the database by clicking the Insert
    button. You can use **SQLiteStudio** to check whether the data are being altered
    correctly:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.13 – Data successfully modified in SQLite](img/B20976_12_013.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
- en: Figure 12.13 – Data successfully modified in SQLite
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It’s very important to check whether the database is connected before we proceed
    to send an SQL query to the database. Therefore, we keep that status in a variable
    and use it to check before sending out any queries. This, however, is not recommended
    for complex programs that are kept open for long periods of time, as the database
    might get disconnected during those periods, and a fixed variable may not be accurate.
    In that case, it’s better to check the actual status by calling `QSqlDatabase::isOpen()`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: The `currentID` variable is used to save the ID of the current data you obtained
    from the database. When you want to update the data or delete them from the database,
    this variable is crucial for letting the database know what data you’re trying
    to update or delete. If you set your database table correctly, SQLite will treat
    each item of data as a unique entry, so you can be sure that no repeated ID will
    be produced in the database when new data are being saved.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: After inserting new data into the database, we call `QSqlQuery::lastInsertId()`
    to obtain the ID of the new data and save it as a `currentID` variable so that
    it becomes the current data that we can update or delete from the database. It
    is a good habit to test your SQL queries on `SQLiteStudio` before using them in
    Qt. You can instantly find out whether your SQL statements are correct or incorrect
    instead of waiting for your project to be built, trying it out, and then rebuilding
    it. As programmers, we must work in the most efficient way.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: Work hard and work smart.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: Creating a login screen with Qt
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how put our knowledge to use and create a functional
    login screen using Qt and SQLite.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create your first functional login screen by following these steps:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a web browser and go to `user`, which looks like this:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.14 – Create a new user table](img/B20976_12_014.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
- en: Figure 12.14 – Create a new user table
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s insert our first item of data into the newly created table and set `user_employeeID`
    to the ID of an existing employee. In this way, the user account we create will
    be linked to the data of one of the employees:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.15 – The user_employeeID column is linked to the employee’s emp_id
    column](img/B20976_12_015.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
- en: Figure 12.15 – The user_employeeID column is linked to the employee’s emp_id
    column
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `mainwindow.ui`. Place a stacked widget on the canvas and make sure it
    contains two pages. Then, set up the two pages in the stacked widget as follows:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.16 – Create a two-page UI inside a stacked widget](img/B20976_12_016.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
- en: Figure 12.16 – Create a two-page UI inside a stacked widget
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: 'On the first page of the stacked widget, click the **Edit Tab Order** icon
    on top of the widget so that you can adjust the order of the widgets in your program:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.17 – Change the order of the widgets by pressing this button](img/B20976_12_017.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
- en: Figure 12.17 – Change the order of the widgets by pressing this button
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you click the **Edit Tab Order** icon, you will see some numbers appear
    on top of each widget in the canvas. Make sure the numbers look the same as they
    do in the screenshot that follows. Otherwise, click on the numbers to change their
    order. We only do this for the first page of the stacked widget; it’s okay to
    keep the second page as it is:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.18 – The order of each widget is shown](img/B20976_12_018.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
- en: Figure 12.18 – The order of each widget is shown
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the `clicked()` option is selected and press **OK**. Qt will
    then create a slot function for you in your project source files. Repeat this
    step for the **Log Out** button as well.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `mainwindow.h` and add the following headers after the `#include <``QMainWindow>`
    line:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'private:'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Ui::MainWindow *ui;
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: QSqlDatabase db;
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Open `mainwindow.cpp` and put this code in the class constructor:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Define what will happen if the `Login` button is clicked:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Make a SQL query:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We continue with the preceding code, and we set the gender and married texts
    before switching the stacked widget to its second page:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Print an error message if the login fails:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Define what will happen if the **Log Out** button is clicked:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Close the database when the main window is closed:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Compile and run the program, and you should be able to log in with the dummy
    account. After you have logged in, you should be able to see the dummy employee
    information linked to the user account. You can also log out by clicking on the
    **Log** **Out** button:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.19 – A simple, working login screen](img/B20976_12_019.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
- en: Figure 12.19 – A simple, working login screen
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we select data from the user table that matches the username
    and password that we inserted into the text fields. If nothing is found, it means
    we have provided an invalid username or password. Otherwise, obtain the `user_employeeID`
    data from the user account and do another SQL query to look for information from
    the `employee` table that matches the `user_employeeID` variable. Then, display
    the data according to the UI of your program.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: We must set the widget order in the **Edit Tab Order** mode so that when the
    program has started, the first widget that gets focused on is the username line-edit
    widget. If the user presses the *Tab* key on the keyboard, the focus should switch
    to the second widget, which is the password line edit. An incorrect widget order
    will ruin the user experience and drive away any potential users. Make sure that
    the **echoMode** option of the password line edit is set to **Password**. That
    setting will hide the actual password inserted into the line edit and replace
    it with dot symbols for security purposes.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: Since SQLite does not support returning the query size, we cannot use the `QSqlQuery::size()`
    function to determine how many results are being returned; the result will always
    be -`1`. Therefore, we declared a `resultSize` variable to count the result within
    the while loop operation.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: Displaying information from a database in model view
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these steps to display information from a database on a model view widget:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we will learn how to display multiple sets of data obtained
    from our SQL database in a model view in our program:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: 'We will be using the database table called `employee`, which we used in the
    previous example in *Creating a login screen with Qt*. This time, we need a lot
    more data in the employee table. Open up your **SQLiteStudio** control panel.
    Add data for a few more employees so that we can display it later in our program:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.20 – Add more dummy data to the employee table](img/B20976_12_020.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
- en: Figure 12.20 – Add more dummy data to the employee table
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: Open Qt Creator, create a new **Qt Widgets Application** project, and then add
    the **SQL** module to your project.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `mainwindow.ui` and add a table widget (not a table view) from **Item
    Widget** (item-based) under the **Widget** box pane. Select the main window on
    the canvas and click on either the **Lay Out Vertically** or **Lay Out Horizontally**
    button to make the table widget stick to the size of the main window even when
    it’s resized:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.21 – Click on the Lay Out Vertically button](img/B20976_12_021.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
- en: Figure 12.21 – Click on the Lay Out Vertically button
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: 'Double-click on the table widget and a window will appear. Under the **Columns**
    tab, add five items by clicking on the **+** button in the top-left corner. Name
    the items **ID**, **Name**, **Age**, **Gender**, and **Married**. Click **OK**
    when you’re done:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.22 – We also set the text alignment to center](img/B20976_12_022.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
- en: Figure 12.22 – We also set the text alignment to center
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the table widget and select `itemChanged(QTableWidgetItem*)`
    option in the pop-up window, and press **OK**. A slot function will be created
    in both of your source files.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `mainwindow.h` and add these private variables to the `MainWindow` class:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '#include <QtSql>'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#include <QSqlDatabase>'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#include <QSqlQuery>'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#include <QMessageBox>'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#include <QDebug>'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#include <QTableWidgetItem>'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Open `mainwindow.cpp`; we’re going to write tons of code there. We need to
    declare what will happen when the program is started. Add the following code to
    the constructor of the `MainWindow` class:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The SQL query code looks like this:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Create several `QTableWidgetItem` objects:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Move those objects to the table widget:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Declare what will happen when an item of the table widget has been edited.
    Add the following code to the `on_tableWidget_itemChanged()` slot function:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Close the database at the class destructor:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'If you compile and run the example now, you should get something like this:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.23 – We have created our own SQL editor](img/B20976_12_023.jpg)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
- en: Figure 12.23 – We have created our own SQL editor
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The table widget is similar to the one you see in spreadsheet applications such
    as **Microsoft Excel** and **OpenOffice Calc**. In contrast to other types of
    model viewers, such as list view or tree view, table view (or table widget) is
    a two-dimensional model viewer, which displays data in the form of rows and columns.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: The main difference between a table view and a table widget in Qt is that a
    table widget is built on top of a table view class, which means a table widget
    is easier to use and more suitable for beginners. However, a table widget is less
    flexible and tends to be less scalable than a table view, which is not the best
    choice if you want to customize your table. After retrieving data from SQLite,
    we created a `QTableWidgetItem` item for each of the data items and set which
    column and row should be added to the table widget. Before adding an item to the
    table widget, we must increase the row count of the table by calling `QTableWidget::setRowCount()`.
    We can also get the current row count of the table widget by simply calling `QTableWidget::rowCount()`.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: The first column from the left is hidden from view because we only use it to
    save the ID of the data so that we can use it to update the database when one
    of the data items in its row has changed. The `on_tableWidget_itemChanged()` slot
    function will be called when the data in one of the cells has changed. It will
    not only get called when you edit the data in the cell but also when the data
    are first added to the table after being retrieved from the database. To ensure
    that this function is only triggered when we edit the data, we use a Boolean variable
    called `hasInit` to check whether we have done the initialization process (adding
    the first batch of data to the table). If `hasInit` is false, ignore the function
    call.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: To prevent users from entering a totally irrelevant type of data, such as inserting
    letters into a numerical-only data cell, we manually check whether the data are
    anything close to what we’d expected when they were being edited. Revert it to
    a default value if it doesn’t come close to anything considered valid. This is,
    of course, a simple hack, which does the job but is not the most professional
    method. Alternatively, you can try to create a new class that inherits the `QItemDelegate`
    class and defines how your model view should behave. Then, call `QTableWidget::setItemDelegate()`
    to apply the class to your table widget.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: Advanced SQL queries
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By following this recipe, you will learn how to use advanced SQL statements
    such as `INNER` `JOIN`, `COUNT`, `LIKE`, and `DISTINCT`.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can do a lot more than just perform simple queries on the SQL database.
    Let’s follow these steps to learn how:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to add a few tables to our database before we can dive into the programming
    part. Open your **SQLiteStudio**. We need several tables for this example to work:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.24 – Additional tables that we need to create for this example](img/B20976_12_024.jpg)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
- en: Figure 12.24 – Additional tables that we need to create for this example
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: 'I will show you the structure of each of the tables required for this project
    and the dummy data inserted into the tables for testing. The first table is called
    `branch`, which is used to store the IDs and names of different branches of the
    dummy company:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.25 – The branch table](img/B20976_12_025.jpg)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
- en: Figure 12.25 – The branch table
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: 'Secondly, we have the `department` table, which stores the IDs and names of
    different departments of the dummy company, which is also linked to the `branch`
    data by the branch IDs:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.26 – The department table, which links to the branch table](img/B20976_12_026.jpg)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
- en: Figure 12.26 – The department table, which links to the branch table
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: 'We also have an `employee` table, which stores information on all the employees
    in the dummy company. This table is similar to the one we used in the previous
    examples, except it has two extra columns, `emp_birthday` and `emp_departmentID`:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.27 – The employee table, which links to the department table](img/B20976_12_027.jpg)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
- en: Figure 12.27 – The employee table, which links to the department table
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: 'We also have a table called `log`, which contains dummy records of the login
    time for each employee. `log_loginTime` will be set as a date-time variable type:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.28 – The log table, which links to the user table](img/B20976_12_028.jpg)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
- en: Figure 12.28 – The log table, which links to the user table
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: 'We have the `user` table that we also used in the previous examples:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.29 – The user table](img/B20976_12_029.jpg)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
- en: Figure 12.29 – The user table
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: 'Open Qt Creator. This time, instead of choosing **Qt Widgets Application**,
    we select **Qt** **Console Application**:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.30 – Create a Qt Console Application project](img/B20976_12_030.jpg)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
- en: Figure 12.30 – Create a Qt Console Application project
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your project file (.pro) and add the `sql` module to your project:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '#include <QSqlDatabase>'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#include <QSqlQuery>'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#include <QSqlError>'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#include <QDate>'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#include <QDebug>'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Add the following function to display employees who are more than 30 years
    old:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Add the following function to display the `department` and `branch` information
    of each employee:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Add the following function, which displays employees who are working in the
    New York branch and are under 40 years old:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Add the following function, which counts the total number of female employees
    in the dummy company:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Add the following function, which filters the employee list and only displays
    those names that start with `Ja`:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Add the following function, which displays employees who have birthdays in
    August:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Add the following function, which checks who logged into the dummy system on
    27 April 2024 and displays their names on the terminal:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'In the `main()` function, connect the program to the SQLite database and call
    all the functions that we defined in the previous steps. Close the database connection,
    and we’re done:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'If you compile and run the project now, you should see a terminal window that
    displays the filtered results:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.31 – Printing the results on the Application Output window](img/B20976_12_031.jpg)'
  id: totrans-267
  prefs: []
  type: TYPE_IMG
- en: Figure 12.31 – Printing the results on the Application Output window
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  id: totrans-269
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A console application does not have a GUI and only shows you a text display
    in a terminal window. This is usually used in a backend system, as it uses fewer
    resources compared to a widget application. We used it in this example because
    it’s faster to display the result without the need to place any widgets in the
    program, which we don’t need in this case.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: We separated the SQL queries into different functions so that it’s easier to
    maintain the code and it doesn’t become too messy. Do note that in C++, the functions
    have to be located before the `main()` function; otherwise, they will not be able
    to be called by `main()`.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  id: totrans-272
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `INNER JOIN` statement used in the preceding example joins two tables together
    and selects all rows from both tables, as long as there is a match between the
    columns in both tables. There are many other types of `JOIN` statements that you
    can use in SQLite (and some other types of SQL architecture), such as `LEFT JOIN`,
    `RIGHT JOIN`, and `FULL` `OUTER JOIN`.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows the different types of `JOIN` statements and their
    effects:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.32 – Different types of JOIN statements](img/B20976_12_032.jpg)'
  id: totrans-275
  prefs: []
  type: TYPE_IMG
- en: Figure 12.32 – Different types of JOIN statements
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: 'The following bullet points explain the `LIKE` and `DISTINCT` statements, which
    we used in our example code in this recipe:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: The `LIKE` statement is normally used to search for a string variable in the
    database without the full word. Notice that there are two % symbols located before
    and after the search keyword.
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `DISTINCT` statement used in the previous example filters out results that
    have the exact same variable. For example, without the `DISTINCT` statement, you
    will see two versions of Larry King appear in the terminal because there are two
    records of him logging into the system on the same day. By adding the `DISTINCT`
    statement, SQLite will eliminate one of the results and ensure every result is
    unique.
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You may be wondering what `d-MMMM-yyyy` stands for and why we used it in the
    preceding example. That is actually an expression supplied to the `QDateTime`
    class in Qt to display the date-time result using a given format. In this case,
    it will change the date-time data that we get from SQLite, 2024-08-06, to the
    format that we specified, resulting in 6-August-2024.
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more information, check out Qt’s documentation at [http://doc.qt.io/qt-6/qdatetime.html#toString](http://doc.qt.io/qt-6/qdatetime.html#toString),
    which has the full list of expressions that can be used to determine the format
    of the date and time string.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: SQL provides an easy and efficient way to save and load user data without reinventing
    the wheel. Qt provides you with an out-of-the-box solution for connecting your
    application with a SQL database; in this chapter, we have learned how to do this
    by using a step-by-step approach, and we were able to load and save our user’s
    data into the SQL database.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: SQL提供了一种简单高效的方法来保存和加载用户数据，无需重新发明轮子。Qt为您提供了一个现成的解决方案，用于将您的应用程序与SQL数据库连接；在本章中，我们通过逐步的方法学习了如何实现这一点，并且能够将我们的用户数据加载和保存到SQL数据库中。
