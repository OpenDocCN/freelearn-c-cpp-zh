["```cpp\n    #include <QFuture>\n    #include <QtConcurrent/QtConcurrent>\n    #include <QFutureWatcher>\n    #include <QThread>\n    #include <QDebug>\n    ```", "```cpp\n    void printText(QString text, int count) {\n        for (int i = 0; i < count; ++i)\n            qDebug() << text << QThread::currentThreadId();\n        qDebug() << text << \"Done\";\n    }\n    ```", "```cpp\n    int main(int argc, char *argv[]) {\n        QApplication a(argc, argv);\n        MainWindow w;\n        w.show();\n        printText(\"A\", 100);\n        printText(\"B\", 100);\n        return a.exec();\n    }\n    ```", "```cpp\n    ...\n    \"A\" 0x2b82c\n    \"A\" 0x2b82c\n    \"A\" 0x2b82c\n    \"A\" Done\n    ...\n    \"B\" 0x2b82c\n    \"B\" 0x2b82c\n    \"B\" 0x2b82c\n    \"B\" Done\n    ```", "```cpp\n        QFuture<void> f1 = QtConcurrent::run(printText, QString(\"A\"), 100);\n        QFuture<void> f2 = QtConcurrent::run(printText, QString(\"B\"), 100);\n        QFuture<void> f3 = QtConcurrent::run(printText, QString(\"C\"), 100);\n        f1.waitForFinished();\n        f2.waitForFinished();\n        f3.waitForFinished();\n    ```", "```cpp\n    ...\n    \"A\" 0x271ec\n    \"C\" 0x26808\n    \"B\" 0x27a40\n    \"A\" 0x271ec\n    \"C\" Done\n    \"B\" 0x27a40\n    \"A\" Done\n    \"B\" Done\n    ```", "```cpp\n        QFuture<void> f1 = QtConcurrent::run(printText, QString(\"A\"), 100);\n        QFuture<void> f2 = QtConcurrent::run(printText, QString(\"B\"), 100);\n        QFuture<void> f3 = QtConcurrent::run(printText, QString(\"C\"), 100);\n        QFutureWatcher<void> futureWatcher;\n        QObject::connect(&futureWatcher,\n        QFutureWatcher<void>::finished, &w, MainWindow::mySlot);\n        futureWatcher.setFuture(f1);\n        f1.waitForFinished();\n        f2.waitForFinished();\n        f3.waitForFinished();\n    ```", "```cpp\n    public slots:\n        void mySlot();\n    ```", "```cpp\n    void MainWindow::mySlot() {\n        qDebug() << \"Done!\" << QThread::currentThreadId();\n    }\n    ```", "```cpp\n    ...\n    \"A\" 0x271ec\n    \"C\" 0x26808\n    \"B\" 0x27a40\n    \"A\" 0x271ec\n    \"C\" Done\n    \"B\" 0x27a40\n    \"A\" Done\n    \"B\" Done\n    QFutureWatcher is linked to f1, the Done! message only gets printed after all of the threads have finished executing. This is because mySlot() runs in the main thread, proven by the thread ID shown in the debug window alongside the Done! message.\n    ```", "```cpp\n    #include <QObject>\n    #include <QDebug>\n    ```", "```cpp\n    signals:\n        void showResults(int res);\n        void doneProcess();\n    public slots:\n        void process();\n    ```", "```cpp\n    void MyWorker::process() {\n        int result = 0;\n        for (int i = 0; i < 2000000000; ++i) {\n        result += 1;\n        }\n        emit showResults(result);\n        emit doneProcess();\n    }\n    ```", "```cpp\n    #include <QDebug>\n    #include <QThread>\n    #include \"myworker.h\"\n    ```", "```cpp\n    public slots:\n        void handleResults(int res);\n    ```", "```cpp\n    void MainWindow::handleResults(int res) {\n        qDebug() << \"Handle results\" << res;\n    }\n    ```", "```cpp\n    MainWindow::MainWindow(QWidget *parent) :     QMainWindow(parent), ui(new Ui::MainWindow){\n        ui->setupUi(this);\n        QThread* workerThread = new QThread;\n        MyWorker *workerObject = new MyWorker;\n        workerObject->moveToThread(workerThread);\n        connect(workerThread, &QThread::started,  workerObject, &MyWorker::process);\n        connect(workerObject, &MyWorker::doneProcess,  workerThread, &QThread::quit);\n        connect(workerObject, &MyWorker::doneProcess, workerObject, &MyWorker::deleteLater);\n        connect(workerObject, &MyWorker::showResults, this, &MainWindow::handleResults);\n        connect(workerThread, &QThread::finished, workerObject, &MyWorker::deleteLater);\n        workerThread->start();\n    }\n    ```", "```cpp\n    Final result: 2000000000\n    ```", "```cpp\n        //QThread* workerThread = new QThread;\n        MyWorker *workerObject = new MyWorker;\n        //workerObject->moveToThread(workerThread);\n        //connect(workerThread, &QThread::started, workerObject, &MyWorker::process);\n        //connect(workerObject, &MyWorker::doneProcess, workerThread, &QThread::quit);\n        connect(workerObject, &MyWorker::doneProcess, workerObject, &MyWorker::deleteLater);\n        connect(workerObject, &MyWorker::showResults, this, &MainWindow::handleResults);\n        //connect(workerThread, &QThread::finished, workerObject, &MyWorker::deleteLater);\n        //workerThread->start();\n        workerObject->process();\n    ```", "```cpp\n    #include <QObject>\n    #include <QDebug>\n    #include <QMutex>\n    ```", "```cpp\n    public:\n        explicit MyWorker(QMutex *mutex);\n        int* myInputNumber;\n        QMutex* myMutex;\n    signals:\n        void showResults(int res);\n        void doneProcess();\n    ```", "```cpp\n    MyWorker::MyWorker(QMutex *mutex) {\n        myMutex = mutex;\n    }\n    ```", "```cpp\n    void MyWorker::process() {\n        myMutex->lock();\n        for (int i = 1; i < 100000; ++i){\n        *myInputNumber += i * i + 2 * i + 3 * i;\n        }\n        myMutex->unlock();\n        emit showResults(*myInputNumber);\n        emit doneProcess();\n    }\n    ```", "```cpp\n    MainWindow::MainWindow(QWidget *parent) : QMainWindow(parent),\n        ui(new Ui::MainWindow) {\n        ui->setupUi(this);\n        int myNumber = 5;\n        QMutex* newMutex = new QMutex;\n        QThread* workerThread = new QThread;\n        QThread* workerThread2 = new QThread;\n        QThread* workerThread3 = new QThread;\n        MyWorker *workerObject = new MyWorker(newMutex);\n        MyWorker *workerObject2 = new MyWorker(newMutex);\n        MyWorker *workerObject3 = new MyWorker(newMutex);\n    ```", "```cpp\n        workerObject->myInputNumber = &myNumber;\n        workerObject->moveToThread(workerThread);\n        connect(workerThread, &QThread::started, workerObject, &MyWorker::process);\n        connect(workerObject, &MyWorker::doneProcess, workerThread, &QThread::quit);\n        connect(workerObject, &MyWorker::doneProcess, workerObject, &MyWorker::deleteLater);\n        connect(workerObject, &MyWorker::showResults, this, &MainWindow::handleResults);\n        connect(workerThread, &QThread::finished, workerObject, &MyWorker::deleteLater);\n    ```", "```cpp\n        workerObject2->myInputNumber = &myNumber;\n        workerObject2->moveToThread(workerThread2);\n        connect(workerThread2, &QThread::started, workerObject2, &MyWorker::process);\n        connect(workerObject2, &MyWorker::doneProcess, workerThread2, &QThread::quit);\n        connect(workerObject2, &MyWorker::doneProcess, workerObject2, &MyWorker::deleteLater);\n        connect(workerObject2, &MyWorker::showResults, this, &MainWindow::handleResults);\n        connect(workerThread2, &QThread::finished, workerObject2, &MyWorker::deleteLater);\n        workerObject3->myInputNumber = &myNumber;\n        workerObject3->moveToThread(workerThread3);\n        connect(workerThread3, &QThread::started, workerObject3, &MyWorker::process);\n        connect(workerObject3, &MyWorker::doneProcess, workerThread3, &QThread::quit);\n        connect(workerObject3, &MyWorker::doneProcess, workerObject3, &MyWorker::deleteLater);\n        connect(workerObject3, &MyWorker::showResults, this, &MainWindow::handleResults);\n        connect(workerThread3, &QThread::finished, workerObject3, &MyWorker::deleteLater);\n    ```", "```cpp\n        workerThread->start();\n        workerThread2->start();\n        workerThread3->start();\n    ```", "```cpp\n    Final result: -553579035\n    Final result: -1107158075\n    Final result: -1660737115\n    ```", "```cpp\n    void MyWorker::process() {\n        //myMutex->lock();\n        for (int i = 1; i < 100000; ++i) {\n            *myInputNumber += i * i + 2 * i + 3 * i;\n            }\n        //myMutex->unlock();\n        emit showResults(*myInputNumber);\n        emit doneProcess();\n    }\n    ```", "```cpp\n    1st time:\n    Final result: -589341102\n    Final result: 403417142\n    Final result: -978935318\n    2nd time:\n    Final result: 699389030\n    Final result: -175723048\n    Final result: 1293365532\n    3rd time:\n    Final result: 1072831160\n    Final result: 472989964\n    Final result: -534842088\n    ```", "```cpp\n    #include <QRunnable>\n    #include <QDebug>\n    ```", "```cpp\n    class MyProcess : public QRunnable {\n        public:\n                MyProcess();\n                void run();\n    };\n    ```", "```cpp\n    void MyProcess::run() {\n        int myNumber = 0;\n        for (int i = 0; i < 100000000; ++i) {\n        myNumber += i;\n        }\n        qDebug() << myNumber;\n    }\n    ```", "```cpp\n    #include <QMainWindow>\n    #include <QThreadPool>\n    #include \"myprocess.h\"\n    ```", "```cpp\n    MainWindow::MainWindow(QWidget *parent) : QMainWindow(parent),\n        ui(new Ui::MainWindow) {\n        ui->setupUi(this);\n        MyProcess* process = new MyProcess;\n        MyProcess* process2 = new MyProcess;\n        MyProcess* process3 = new MyProcess;\n        MyProcess* process4 = new MyProcess;\n        QThreadPool::globalInstance()->start(process);\n        QThreadPool::globalInstance()->start(process2);\n        QThreadPool::globalInstance()->start(process3);\n        QThreadPool::globalInstance()->start(process4);\n        qDebug() << QThreadPool::globalInstance()-       >activeThreadCount();\n    }\n    ```", "```cpp\n        qDebug() << QThreadPool::globalInstance()->activeThreadCount();\n        this->thread()->sleep(3);\n        qDebug() << QThreadPool::globalInstance()->activeThreadCount();\n    ```"]