["```cpp\ntypedef enum {SWEET, SOUR} taste_t;\n// Function pointer type\ntypedef taste_t (*get_taste_func_t)(void*);\ntypedef struct {\n  // Pointer to the definition of the virtual function\n  get_taste_func_t get_taste_func;\n} eatable_t;\neatable_t* eatable_new() { ... }\nvoid eatable_ctor(eatable_t* eatable) {\n  // We don't have any default definition for the virtual function\n  eatable->get_taste_func = NULL;\n}\n// Virtual behavior function\ntaste_t eatable_get_taste(eatable_t* eatable) {\n  return eatable->get_taste_func(eatable);\n}\n```", "```cpp\neatable_t *eatable = eatable_new();\neatable_ctor(eatable);\ntaste_t taste = eatable_get_taste(eatable); // Segmentation fault!\nfree(eatable);\n```", "```cpp\n#include <stdio.h>\ntypedef struct {\n  int width;\n  int length;\n} rect_t;\nint rect_area(rect_t* rect) {\n  return rect->width * rect->length;\n}\nint main(int argc, char** argv) {\n  rect_t r;\n  r.width = 10;\n  r.length = 25;\n  int area = rect_area(&r);\n  printf(\"Area: %d\\n\", area);\n  return 0;\n}\n```", "```cpp\n#include <iostream>\nclass Rect {\npublic:\n  int Area() {\n    return width * length;\n  }\n  int width;\n  int length;\n};\nint main(int argc, char** argv) {\n  Rect r;\n  r.width = 10;\n  r.length = 25;\n  int area = r.Area();\n  std::cout << \"Area: \" << area << std::endl;\n  return 0;\n}\n```", "```cpp\n$ gcc -S ExtremeC_examples_chapter9_1.c -o ex9_1_c.s\n$ g++ -S ExtremeC_examples_chapter9_1.cpp -o ex9_1_cpp.s\n$\n```", "```cpp\n$ cat ex9_1_c.s\n...\nrect_area:\n.LFB0:\n    .cfi_startproc\n    pushq   %rbp\n    .cfi_def_cfa_offset 16\n    .cfi_offset 6, -16\n    movq    %rsp, %rbp\n    .cfi_def_cfa_register 6\n movq    %rdi, -8(%rbp)\n movq    -8(%rbp), %rax\n movl    (%rax), %edx\n movq    -8(%rbp), %rax\n movl    4(%rax), %eax\n    imull   %edx, %eax\n    popq    %rbp\n    .cfi_def_cfa 7, 8\n    Ret\n    .cfi_endproc\n...\n$\n```", "```cpp\n$ cat ex9_1_cpp.s\n...\n_ZN4Rect4AreaEv:\n.LFB1493:\n    .cfi_startproc\n    pushq   %rbp\n    .cfi_def_cfa_offset 16\n    .cfi_offset 6, -16\n    movq    %rsp, %rbp\n    .cfi_def_cfa_register 6\n movq    %rdi, -8(%rbp)\n movq    -8(%rbp), %rax\n movl    (%rax), %edx\n movq    -8(%rbp), %rax\n movl    4(%rax), %eax\n    imull   %edx, %eax\n    popq    %rbp\n    .cfi_def_cfa 7, 8\n    Ret\n    .cfi_endproc\n...\n$\n```", "```cpp\n#include <string.h>\ntypedef struct {\n  char c;\n  char d;\n} a_t;\ntypedef struct {\n  a_t parent;\n  char str[5];\n} b_t;\nint main(int argc, char** argv) {\n  b_t b;\n  b.parent.c = 'A';\n  b.parent.d = 'B';\n  strcpy(b.str, \"1234\");\n  // We need to set a break point at this line to see the memory layout.\n  return 0;\n}\n```", "```cpp\n#include <string.h>\nclass A {\npublic:\n  char c;\n  char d;\n};\nclass B : public A {\npublic:\n  char str[5];\n};\nint main(int argc, char** argv) {\n  B b;\n  b.c = 'A';\n  b.d = 'B';\n  strcpy(b.str, \"1234\");\n  // We need to set a break point at this line to see the memory layout.\n  return 0;\n}\n```", "```cpp\n$ gcc -g ExtremeC_examples_chapter9_2.c -o ex9_2_c.out\n$ gdb ./ex9_2_c.out\n...\n(gdb) b ExtremeC_examples_chapter9_2.c:19\nBreakpoint 1 at 0x69e: file ExtremeC_examples_chapter9_2.c, line 19.\n(gdb) r\nStarting program: .../ex9_2_c.out\nBreakpoint 1, main (argc=1, argv=0x7fffffffe358) at ExtremeC_examples_chapter9_2.c:20\n20    return 0;\n(gdb) x/7c &b\n0x7fffffffe261: 65 'A'  66 'B'  49 '1'  50 '2'  51 '3'  52 '4'  0 '\\000'\n(qdb) c\n[Inferior 1 (process 3759) exited normally]\n(qdb) q\n$\n```", "```cpp\n$ g++ -g ExtremeC_examples_chapter9_2.cpp -o ex9_2_cpp.out\n$ gdb ./ex9_2_cpp.out\n...\n(gdb) b ExtremeC_examples_chapter9_2.cpp:20\nBreakpoint 1 at 0x69b: file ExtremeC_examples_chapter9_2.cpp, line 20.\n(gdb) r\nStarting program: .../ex9_2_cpp.out\nBreakpoint 1, main (argc=1, argv=0x7fffffffe358) at ExtremeC_examples_chapter9_2.cpp:21\n21    return 0;\n(gdb) x/7c &b\n0x7fffffffe251: 65 'A'  66 'B'  49 '1'  50 '2'  51 '3'  52 '4'  0 '\\000'\n(qdb) c\n[Inferior 1 (process 3804) exited normally]\n(qdb) q\n$\n```", "```cpp\ntypedef struct { ... } a_t;\ntypedef struct { ... } b_t;\ntypedef struct {\n  a_t a;\n  b_t b;\n  ...\n} c_t;\nc_t c_obj;\na_t* a_ptr = (a_ptr*)&c_obj;\nb_t* b_ptr = (b_ptr*)&c_obj;\nc_t* c_ptr = &c_obj;\n```", "```cpp\nc_t c_obj;\na_t* a_ptr = (a_ptr*)&c_obj;\nb_t* b_ptr = (b_ptr*)(&c_obj + sizeof(a_t));\nc_t* c_ptr = &c_obj;\n```", "```cpp\n#include <string.h>\nclass A {\npublic:\n  char a;\n  char b[4];\n};\nclass B {\npublic:\n  char c;\n  char d;\n};\nclass C {\npublic:\n  char e;\n  char f;\n};\nclass D : public A, public B, public C {\npublic:\n  char str[5];\n};\nint main(int argc, char** argv) {\n  D d;\n  d.a = 'A';\n  strcpy(d.b, \"BBB\");\n  d.c = 'C';\n  d.d = 'D';\n  d.e = 'E';\n  d.f = 'F';\n  strcpy(d.str, \"1234\");\n  A* ap = &d;\n  B* bp = &d;\n  C* cp = &d;\n  D* dp = &d;\n  // We need to set a break point at this line.\n  return 0;\n}\n```", "```cpp\n$ g++ -g ExtremeC_examples_chapter9_3.cpp -o ex9_3.out\n$ gdb ./ex9_3.out\n...\n(gdb) b ExtremeC_examples_chapter9_3.cpp:40\nBreakpoint 1 at 0x100000f78: file ExtremeC_examples_chapter9_3.cpp, line 40.\n(gdb) r\nStarting program: .../ex9_3.out\nBreakpoint 1, main (argc=1, argv=0x7fffffffe358) at ExtremeC_examples_chapter9_3.cpp:41\n41    return 0;\n(gdb) x/14c &d\n0x7fffffffe25a: 65 'A'  66 'B'  66 'B'  66 'B'  0 '\\000'    67 'C'  68 'D'  69 'E'\n0x7fffffffe262: 70 'F'  49 '1'  50 '2'  51 '3'  52 '4'  0 '\\000'\n(gdb)\n$\n```", "```cpp\n(gdb) print ap\n$1 = (A *) 0x7fffffffe25a\n(gdb) print bp\n$2 = (B *) 0x7fffffffe25f\n(gdb) print cp\n$3 = (C *) 0x7fffffffe261\n(gdb) print dp\n$4 = (D *) 0x7fffffffe25a\n(gdb)\n```", "```cpp\n// Typedefing function pointer types\ntypedef void* (*func_1_t)(void*, ...);\ntypedef void* (*func_2_t)(void*, ...);\n...\ntypedef void* (*func_n_t)(void*, ...);\n// Attribute structure of the parent class\ntypedef struct {\n  // Attributes\n  ...\n  // Pointers to functions\n  func_1_t func_1;\n  func_2_t func_2;\n  ...\n  func_n_t func_t;\n} parent_t;\n// Default private definitions for the\n// virtual behavior functions\nvoid* __default_func_1(void* parent, ...) {  // Default definition }\nvoid* __default_func_2(void* parent, ...) {  // Default definition }\n...\nvoid* __default_func_n(void* parent, ...) {  // Default definition }\n// Constructor\nvoid parent_ctor(parent_t *parent) {\n  // Initializing attributes\n  ...\n  // Setting default definitions for virtual\n  // behavior functions\n  parent->func_1 = __default_func_1;\n  parent->func_2 = __default_func_2;\n  ...\n  parent->func_n = __default_func_n;\n}\n// Public and non-virtual behavior functions\nvoid* parent_non_virt_func_1(parent_t* parent, ...) { // Code }\nvoid* parent_non_virt_func_2(parent_t* parent, ...) { // Code }\n...\nvoid* parent_non_virt_func_m(parent_t* parent, ...) { // Code }\n// Actual public virtual behavior functions\nvoid* parent_func_1(parent_t* parent, ...) {\n  return parent->func_1(parent, ...); \n}\nvoid* parent_func_2(parent_t* parent, ...) {\n  return parent->func_2(parent, ...); \n}\n...\nvoid* parent_func_n(parent_t* parent, ...) { \n  return parent->func_n(parent, ...); \n}\n```", "```cpp\nInclude everything related to parent class ...\ntypedef struct {\n  parent_t parent;\n  // Child attributes\n  ...\n} child_t;\nvoid* __child_func_4(void* parent, ...) { // Overriding definition }\nvoid* __child_func_7(void* parent, ...) { // Overriding definition }\nvoid child_ctor(child_t* child) {\n  parent_ctor((parent_t*)child);\n  // Initialize child attributes\n  ...\n  // Update pointers to functions\n  child->parent.func_4 = __child_func_4;\n  child->parent.func_7 = __child_func_7;\n}\n// Child's behavior functions\n...\n```", "```cpp\nenum class Taste { Sweet, Sour };\n// This is an interface\nclass Eatable {\npublic:\n  virtual Taste GetTaste() = 0;\n};\n```", "```cpp\nenum class Taste { Sweet, Sour };\n// This is an interface\nclass Eatable {\npublic:\n  virtual Taste GetTaste() = 0;\n};\nclass Apple : public Eatable {\npublic:\n  Taste GetTaste() override {\n    return Taste::Sweet;\n  }\n};\n```"]