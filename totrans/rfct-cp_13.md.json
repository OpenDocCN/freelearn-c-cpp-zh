["```cpp\nsudo apt install libboost-all-dev\n```", "```cpp\nsudo yum install boost-devel\n```", "```cpp\nbrew install boost\n```", "```cpp\nchoco install boost\n```", "```cpp\ngit submodule add https://github.com/google/googletest.git external/googletest\ngit submodule update --init\n```", "```cpp\nadd_subdirectory(external/googletest)\ninclude_directories(${gtest_SOURCE_DIR}/include ${gtest_SOURCE_DIR})\n```", "```cpp\ninclude(FetchContent)\nFetchContent_Declare(\n  json\n  GIT_REPOSITORY https://github.com/nlohmann/json.git\n  GIT_TAG v3.7.3\n)\nFetchContent_MakeAvailable(json)\n```", "```cpp\n[options]\nPoco:shared=True  # Use dynamic linking for Poco\nOr in conanfile.py:\nclass MyProject(ConanFile):\n    requires = “poco/1.10.1”\n    default_options = {“poco:shared”: True}\n```", "```cpp\n    include(${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)\n    ```", "```cpp\n    conan_basic_setup(TARGETS)\n    ```", "```cpp\n    target_link_libraries(my_project_target CONAN_PKG::poco)\n    ```", "```cpp\n    include conanbuildinfo.mak\n    ```", "```cpp\ngit clone https://github.com/Microsoft/vcpkg.git\ncd vcpkg\n./bootstrap-vcpkg.sh  # Use bootstrap-vcpkg.bat on Windows\nInstall nlohmann-json using vcpkg:\n./vcpkg install nlohmann-json\n```", "```cpp\ncmake -B build -S . -DCMAKE_TOOLCHAIN_FILE=[vcpkg root]/scripts/buildsystems/vcpkg.cmake\nReplace [vcpkg root] with the path to your vcpkg installation.\nIn your CMakeLists.txt, find and link against the nlohmann-json package:\ncmake_minimum_required(VERSION 3.0)\nproject(MyVcpkgProject)\nfind_package(nlohmann_json CONFIG REQUIRED)\nadd_executable(my_app main.cpp)\ntarget_link_libraries(my_app PRIVATE nlohmann_json::nlohmann_json)\nIn your main.cpp, you can now use the nlohmann-json library:\n#include <nlohmann/json.hpp>\nint main() {\n    nlohmann::json j;\n    j[“message”] = “Hello, world!”;\n    std::cout << j << std::endl;\n    return 0;\n}\n```", "```cpp\n#include <boost/filesystem/operations.hpp>\n#include <iostream>\nint main(int argc, char *argv[]) {\n    std::cout << “The path to the binary is: “\n              << boost::filesystem::absolute(argv[0])\n              << “, the size is:” << boost::filesystem::file_size(argv[0]) << ‘\\n’;\n    return 0;\n}\n```", "```cpp\ncmake_minimum_required(VERSION 3.10.2)\nproject(a.out)\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n# Remove for compiler-specific features\nset(CMAKE_CXX_EXTENSIONS OFF)\nstring(APPEND CMAKE_CXX_FLAGS “ -Wall”)\nstring(APPEND CMAKE_CXX_FLAGS “ -Wbuiltin-macro-redefined”)\nstring(APPEND CMAKE_CXX_FLAGS “ -pedantic”)\nstring(APPEND CMAKE_CXX_FLAGS “ -Werror”)\n# clangd completion\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\ninclude_directories(${CMAKE_SOURCE_DIR})\nfile(GLOB SOURCES “${CMAKE_SOURCE_DIR}/*.cpp”)\nadd_executable(${PROJECT_NAME} ${SOURCES})\nset(Boost_USE_STATIC_LIBS        ON) # only find static libs\nset(Boost_USE_MULTITHREADED      ON)\nset(Boost_USE_STATIC_RUNTIME    OFF) # do not look for boost libraries linked against static C++ std lib\nfind_package(Boost REQUIRED COMPONENTS filesystem)\ntarget_link_libraries(${PROJECT_NAME}\n    Boost::filesystem\n)\n```", "```cpp\nFROM ubuntu:18.04\nLABEL Description=”Build environment”\nENV HOME /root\nSHELL [“/bin/bash”, “-c”]\nRUN apt-get update && apt-get -y --no-install-recommends install \\\n    build-essential \\\n    clang \\\n    cmake \\\n    gdb \\\n    wget\n# Let us add some heavy dependency\nRUN cd ${HOME} && \\\n    wget --no-check-certificate --quiet \\\n        https://boostorg.jfrog.io/artifactory/main/release/1.77.0/source/boost_1_77_0.tar.gz && \\\n        tar xzf ./boost_1_77_0.tar.gz && \\\n        cd ./boost_1_77_0 && \\\n        ./bootstrap.sh && \\\n        ./b2 install && \\\n        cd .. && \\\n        rm -rf ./boost_1_77_0\n```", "```cpp\n$ docker build -t example/example_build:0.1 -f DockerfileBuildEnv .\nHere is supposed to be a long output of boost build\n```", "```cpp\n$ cd project\n$ docker run -it --rm --name=example \\\n --mount type=bind,source=${PWD},target=/src \\\n example/example_build:0.1 \\\n bash\n```", "```cpp\nroot@3abec58c9774:/# cd src\nroot@3abec58c9774:/src# mkdir build && cd build\nroot@3abec58c9774:/src/build# cmake ..\n-- The C compiler identification is GNU 7.5.0\n-- The CXX compiler identification is GNU 7.5.0\n-- Check for working C compiler: /usr/bin/cc\n-- Check for working C compiler: /usr/bin/cc -- works\n-- Detecting C compiler ABI info\n-- Detecting C compiler ABI info - done\n-- Detecting C compile features\n-- Detecting C compile features - done\n-- Check for working CXX compiler: /usr/bin/c++\n-- Check for working CXX compiler: /usr/bin/c++ -- works\n-- Detecting CXX compiler ABI info\n-- Detecting CXX compiler ABI info - done\n-- Detecting CXX compile features\n-- Detecting CXX compile features - done\n-- Boost  found.\n-- Found Boost components:\n   filesystem\n-- Configuring done\n-- Generating done\n-- Build files have been written to: /src/build\nroot@3abec58c9774:/src/build# make\nScanning dependencies of target a.out\n[ 50%] Building CXX object CMakeFiles/a.out.dir/main.cpp.o\n[100%] Linking CXX executable a.out\n[100%] Built target a.out\n```", "```cpp\n$ build/a.out\nThe size of “/home/dima/dockerized_cpp_build_example/build/a.out” is 177320\n```", "```cpp\n$ make help\ngen_cmake                      Generate cmake files, used internally\nbuild                          Build source. In order to build a specific target run: make TARGET=<target name>.\ntest                           Run all tests\nclean                          Clean build directory\nlogin                          Login to the container. Note: if the container is already running, login into the existing one\nbuild-docker-deps-image        Build the deps image.\n```", "```cpp\ngit submodule add  https://github.com/f-squirrel/dockerized_cpp.git build_tools/\n```", "```cpp\ninclude build_tools/Makefile\n```", "```cpp\nPROJECT_NAME=example\nDOCKER_DEPS_VERSION=0.1\ninclude build_tools/Makefile\nBy defining the project name, we automatically set the build image name as example/example_build.\n```", "```cpp\n$ make build-docker-deps-image\ndocker build  -t example/example_build:latest \\\n -f ./DockerfileBuildEnv .\nSending build context to Docker daemon  1.049MB\nStep 1/6 : FROM ubuntu:18.04\n< long output of docker build >\nBuild finished. Docker image name: “example/example_build:latest”.\nBefore you push it to Docker Hub, please tag it(DOCKER_DEPS_VERSION + 1).\nIf you want the image to be the default, please update the following variables:\n/home/dima/dockerized_cpp_build_example/Makefile: DOCKER_DEPS_VERSION\n```", "```cpp\n$ make\ndocker run -it --init --rm --memory-swap=-1 --ulimit core=-1 --name=”example_build” --workdir=/example --mount type=bind,source=/home/dima/dockerized_cpp_build_example,target=/example  example/example_build:0.1 \\\n bash -c \\\n “mkdir -p /example/build && \\\n cd build && \\\n CC=clang CXX=clang++ \\\n cmake  ..”\n-- The C compiler identification is Clang 6.0.0\n-- The CXX compiler identification is Clang 6.0.0\n-- Check for working C compiler: /usr/bin/clang\n-- Check for working C compiler: /usr/bin/clang -- works\n-- Detecting C compiler ABI info\n-- Detecting C compiler ABI info - done\n-- Detecting C compile features\n-- Detecting C compile features - done\n-- Check for working CXX compiler: /usr/bin/clang++\n-- Check for working CXX compiler: /usr/bin/clang++ -- works\n-- Detecting CXX compiler ABI info\n-- Detecting CXX compiler ABI info - done\n-- Detecting CXX compile features\n-- Detecting CXX compile features - done\n-- Boost  found.\n-- Found Boost components:\n   filesystem\n-- Configuring done\n-- Generating done\n-- Build files have been written to: /example/build\nCMake finished.\ndocker run -it --init --rm --memory-swap=-1 --ulimit core=-1 --name=”example_build” --workdir=/example --mount type=bind,source=/home/dima/dockerized_cpp_build_example,target=/example  example/example_build:latest \\\n bash -c \\\n “cd build && \\\n make -j $(nproc) “\nScanning dependencies of target a.out\n[ 50%] Building CXX object CMakeFiles/a.out.dir/main.cpp.o\n[100%] Linking CXX executable a.out\n[100%] Built target a.out\nBuild finished. The binaries are in /home/dima/dockerized_cpp_build_example/build\n```", "```cpp\nmake DOCKER_USER_ROOT=ON\n```"]