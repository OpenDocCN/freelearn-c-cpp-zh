- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First Look at the Arduino IoT Cloud
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every developer/programmer/cloud engineer, when they start their coding/cloud
    journey, is very curious to get started with the platform immediately. Well, guys,
    your wait is over, and we welcome you to this chapter with a *Hello World* greeting.
    This chapter not only provides you with a *Hello World* example but also comes
    with many important core concepts of how the **Arduino IoT Cloud** works. This
    is the most important chapter for all readers, as this chapter will give you an
    overview of how to get started with the Arduino IoT Cloud, as the Arduino IoT
    Cloud platform has significant differences compared to other platforms. This chapter
    is divided into two parts; in the first part, you will learn how to use the **Arduino
    MKR Wi-Fi 1010** board to interact with the Arduino IoT Cloud platform, and in
    the second part, you will learn how to use an **API** with **Node-RED** for communication
    with the cloud platform.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Along with these examples, you will learn the difference between a **Thing**
    and a **device**, what a **variable** is, and different properties of Thing. You
    will also get a taste of the **Arduino Web Editor**, which is an awesome feature
    with interesting stuff. After that, we will move on to the dashboard, which helps
    a user control a Thing and visualize sensor data. So, guys, buckle up for this
    interesting journey.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: Understanding how the Arduino IoT Cloud works
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Arduino IoT Cloud and an MKR1010 Hello World example
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An introduction to Node-RED
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Arduino IoT Cloud and a Node-RED Hello World example
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we start, we first need to set up an Arduino IoT Cloud-compatible board.
    I recommend the Arduino MKR Wi-Fi 1010, but there is a complete list of compatible
    boards at [https://docs.arduino.cc/arduino-cloud/getting-started/technical-reference#compatible-hardware](https://docs.arduino.cc/arduino-cloud/getting-started/technical-reference#compatible-hardware),
    which you can choose according to your requirements.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: Second, you should have an Arduino IoT Cloud account. If you don’t, then sign
    up at [https://cloud.arduino.cc/](https://cloud.arduino.cc/) and select a plan
    according to your requirements.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Third, we need to download and install the **Arduino Create Agent**. Arduino
    has created a beautiful web-based guide for installation at [https://create.arduino.cc/getting-started/plugin/welcome](https://create.arduino.cc/getting-started/plugin/welcome).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: The second part of the chapter is related to Node-RED, which will be used for
    devices that are not officially supported by the Arduino IoT Cloud such as Raspberry
    Pi and older versions of Arduino development boards. Download and install Node-RED
    according to your operating system from [https://nodered.org/docs/getting-started/local](https://nodered.org/docs/getting-started/local).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: 'All the Arduino IoT Cloud plans are available on the Arduino IoT Cloud website.
    You can visit the following link for updated plans, pricing, and features: [https://cloud.arduino.cc/plans/](https://cloud.arduino.cc/plans/).
    If you are from an educational institute, then there are plenty of good plans
    for students and faculties. Arduino also offers customized plans to business organizations
    according to their requirements.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: Understanding how the Arduino IoT Cloud works
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So, before we start our Arduino IoT Cloud journey, we need to understand how
    it operates because it’s a little bit different from traditional IoT cloud platforms.
    As a result, the Arduino IoT Cloud is a more flexible, secure, and industry-deployment-ready
    IoT solution. Firstly, we will understand the design of the Arduino IoT Cloud
    with the following diagram, which will help you to understand the key pillars
    of the Arduino IoT Cloud:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 2.1 – \uFEFFThe \uFEFFArduino IoT Cloud architecture](img/B19752_02_01.jpg)"
  id: totrans-18
  prefs: []
  type: TYPE_IMG
- en: Figure 2.1 – The Arduino IoT Cloud architecture
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: Most cloud platforms work with the concept of devices and sensors, but in the
    Arduino IoT Cloud, we have the concept of the Thing, which includes devices and
    variables known as **sensors**/**actuators**. You may be thinking that a *Thing*
    and a *Device* are both the same; actually, they’re not. It’s important to make
    this distinction because if we do not understand it, then it will create more
    complications going forward.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: To understand the difference between a Thing and a device, I am going to take
    an example from real life. Let’s say we have an empty box. If we put some stuff
    in that box, it will be a filled box. However, what if we put the shipping label
    on that box? Will it still be a box? No, now it’s a parcel. So, we can understand
    that a parcel is just a logical container that consists of the box, the stuff
    in the box, and the shipping label.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: Like the preceding example, a Thing is a logical container that consists of
    a development board, variables that act as a bridge between the cloud and sensors/actuators
    for read/write operations, and network connectivity that makes the Thing live
    in an ecosystem (which is like the shipping label in the box analogy).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: Next, we need to understand how device configuration works in relation to the
    Arduino IoT Cloud. Here, we are not talking about **network connectivity** but
    **device configuration**. Some cloud platforms provide **Arduino IDE** libraries
    or **Software Development Kits** (**SDKs**) for device configuration, but Arduino
    has a different, more restrictive system. Firstly, the Arduino IoT Cloud has two
    ways for device configuration; the first one uses compatible boards via the Arduino
    Create Agent (in the upcoming section, you will dive deep into the Arduino Create
    Agent) and the second way is through an API, which is used for non-compatible
    devices.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: So, why does Arduino have this restriction for device connectivity? Arduino
    cares about security for IoT devices, and security is as vital in an IoT infrastructure
    as water is for living beings. Also, not all the official Arduino development
    boards are compatible with the Arduino IoT Cloud. You can find the complete list
    of Arduino IoT Cloud-compatible devices at [https://docs.arduino.cc/arduino-cloud/getting-started/technical-reference#compatible-hardware](https://docs.arduino.cc/arduino-cloud/getting-started/technical-reference#compatible-hardware).
    The Arduino IoT Cloud directly supports some famous boards besides the Arduino
    official compatible boards, which include **ESP8266 Series**, **ESP32 Series**,
    and **LoRaWAN Nodes**. An API is available for other development boards, which
    can be used via any programming language. Later on in this chapter, we will explain
    how to use APIs with Node-RED to communicate with the Arduino IoT Cloud.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，为什么Arduino对设备连接有这种限制呢？Arduino关心物联网设备的安全性，安全性与水对生物的重要性一样重要。此外，并非所有官方Arduino开发板都与Arduino
    IoT Cloud兼容。你可以在[https://docs.arduino.cc/arduino-cloud/getting-started/technical-reference#compatible-hardware](https://docs.arduino.cc/arduino-cloud/getting-started/technical-reference#compatible-hardware)找到Arduino
    IoT Cloud兼容设备的完整列表。Arduino IoT Cloud除了直接支持Arduino官方兼容板之外，还支持一些著名的板，包括**ESP8266系列**、**ESP32系列**和**LoRaWAN节点**。对于其他开发板，提供了一个API，可以通过任何编程语言使用。在本章的后面部分，我们将解释如何使用API与Node-RED通信Arduino
    IoT Cloud。
- en: Finally, which options are available for **data visualization** and **data extraction**?
    The Arduino IoT Cloud platform provides a variety of options. For data visualization,
    the platform provides a flexible dashboard option for both web and mobile, with
    huge widget features as well as sharing features. For third-party application
    integrations, a **Representational State Transfer** (**REST**) **API** and **w****ebhooks**
    are available. For custom application development or custom integrations, Arduino
    provides **JavaScript** and **Python SDKs**, which enrich the platform’s extensibility.
    An organization can create custom dashboard visualization and control panels by
    using these SDKs.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，对于**数据可视化**和**数据提取**有哪些选项可用？Arduino IoT Cloud平台提供了各种选项。对于数据可视化，平台为网页和移动设备提供了灵活的仪表板选项，以及大量的小部件功能和共享功能。对于第三方应用程序集成，提供了**表示状态转移**（**REST**）**API**和**webhooks**。对于自定义应用程序开发或自定义集成，Arduino提供了**JavaScript**和**Python
    SDKs**，这些SDK丰富了平台的可扩展性。组织可以通过使用这些SDK创建自定义仪表板可视化控件面板。
- en: We have discussed the Arduino IoT Cloud’s main pillars; now it’s time to explore
    the Arduino IoT Cloud by implementing basic examples, which will get you started
    with the Arduino MKR Wi-Fi 1010 development board and the Arduino IoT Cloud.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了Arduino IoT Cloud的主要支柱；现在是时候通过实现基本示例来探索Arduino IoT Cloud了，这些示例将帮助你开始使用Arduino
    MKR Wi-Fi 1010开发板和Arduino IoT Cloud。
- en: The Arduino IoT Cloud and the MKR1010 Hello World example
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Arduino IoT Cloud和MKR1010 Hello World示例
- en: A **Hello World program** is the first program that every programmer uses when
    they start learning any programming technology to get a taste for a platform.
    However, when it comes to the IoT side, things are different; you will be working
    with hardware and software, which means the *Hello World* example will be different
    from its traditional onscreen appearance. In this section, we will demonstrate
    how to turn on/off a built-in LED of an Arduino MKR Wi-Fi 1010 development board
    using the Arduino IoT Cloud dashboard, which is a *Hello World* example for the
    Arduino IoT Cloud.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**Hello World程序**是每个程序员在学习任何编程技术时第一次使用的程序，以了解平台。然而，当涉及到物联网方面时，情况就不同了；你将处理硬件和软件，这意味着*Hello
    World*示例将与传统的屏幕外观不同。在本节中，我们将演示如何使用Arduino IoT Cloud仪表板打开/关闭Arduino MKR Wi-Fi 1010开发板上的内置LED，这是一个Arduino
    IoT Cloud的*Hello World*示例。'
- en: In a series of steps, you will learn how to work with Arduino IoT Cloud-compatible
    boards. This part is very important to understand how a Thing works on the Arduino
    IoT Cloud platform. First, you need to get the required hardware, software, and
    accounts, as mentioned in the *Technical* *requirements* section.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 通过一系列步骤，你将学习如何使用与Arduino IoT Cloud兼容的板。这部分对于理解事物如何在Arduino IoT Cloud平台上工作非常重要。首先，你需要获取所需的硬件、软件和账户，如*技术要求*部分所述。
- en: So, in this section, we are going to start the *Hello World* project for the
    Arduino IoT Cloud using MKR Wi-Fi 1010\. In the next sub-section, we will cover
    the Arduino Create Agent. Next, we will create a Thing and cloud variables, associate
    the MKR Wi-Fi 1010 device with the Thing, and provide the network configuration
    for the Thing. Later, we will discuss the sketch/coding for the development board.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: What is the Arduino Create Agent?
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Arduino IoT Cloud provides a different way to connect a device to its cloud.
    Arduino does not publicly reveal its cloud connectivity technique for security
    reasons. That’s why we only have two options to connect devices with the Arduino
    IoT Cloud – using the Arduino Cloud IDE or the API. Also, for the Arduino Cloud
    IDE, it’s mandatory to have the Arduino Create Agent on your machine. *Figure
    2**.2* shows the complete process of how the Create Agent helps devices to interact
    with the Arduino Web Editor.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.2 – The Arduino Create Agent process flow](img/B19752_02_02.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
- en: Figure 2.2 – The Arduino Create Agent process flow
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: As the Arduino Web Editor is a web-based tool, there is no way to talk to development
    boards via a browser. That’s why the Arduino team developed software for all major
    operating systems, including Windows, Linux, and macOS, called the Arduino Create
    Agent. The Create Agent acts like a bridge between a device and the Arduino Web
    Editor. The preceding diagram explains the process in detail.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: 'To get the Create Agent on your machine, visit [https://create.arduino.cc/getting-started/plugin/welcome](https://create.arduino.cc/getting-started/plugin/welcome)
    and follow the steps. After installation, start the Create Agent, as just installing
    it is not enough for connectivity. The Create Agent will run as a background process
    to provide continuous integration between a device and a browser. The following
    is a figure that describes all the options of the Arduino Create Agent:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.3 – The Arduino Create Agent menu](img/B19752_02_03.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
- en: Figure 2.3 – The Arduino Create Agent menu
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: When we click on the Create Agent icon, it shows the Create Agent version, a
    **Go to Arduino Create** option, and an **Open Debug Console** option, which is
    like a serial monitor, where you can execute different commands to get the status
    and information about the current process, devices, and ports. Also from this
    menu, you can pause/resume the Create Agent, or if you want to close it down properly,
    then click on **Quit Agent**.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Thing, device, and variable
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will create a Thing and name it. We will also learn how
    to add a device, along with network configuration and cloud variables.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Thing
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you first open the dashboard in the Arduino IoT Cloud (*Figure 2**.4*),
    you will see menu links such as **Things**, **Dashboards**, **Devices**, **Integrations**,
    and **Templates**, and the **Create your first Thing** message. Just click on
    the **CREATE THING** button and your journey will start.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.4 – The Thing dashboard](img/B19752_02_04.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
- en: Figure 2.4 – The Thing dashboard
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: 'Adding a Thing is totally different compared to other IoT cloud platforms,
    as the Thing is a combination of multiple ingredients. The following figure describes
    all the ingredients of the Thing, such as the name, cloud variables, device, network
    settings, code, and Thing metadata:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.5 – Thing creation](img/B19752_02_05.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
- en: Figure 2.5 – Thing creation
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: 'All the aspects indicated in the preceding screenshot are explained, step by
    step, as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: Assign a name to the Thing; the name should relate to the location and functionality
    of the device, which will help you to find the Thing easily in the following wizards.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clicking on **Select Device** will show you a popup, where you can select the
    old device or set up a new device, as discussed in detail in a moment.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After attaching the device, we need to make the device network-ready by providing
    a Wi-Fi SSID and a password. Just click on the **Configure** button and you will
    see the popup for network settings.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, we need to add a variable for the sensors/actuators to perform read/write
    operations. The Arduino IoT Cloud provides different types of variables, like
    the Arduino IDE; the only difference is that in the Arduino IDE, we declare the
    variables, whereas here, we need to create variables via the interface.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this section, we have created the Thing and named it. Three further steps
    are required adding a device, network configuration, and adding cloud variables.
    We are going to cover the remaining steps in the following subsections.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: Adding a device
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'After assigning a name to the Thing, we need to attach a device to it. When
    you click on the **Select Device** button, you will see a popup that shows you
    an available device and the option to add a new device. If there is no device,
    then you will see the following figure to set up a new device:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.6 – Associating a device](img/B19752_02_06.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
- en: Figure 2.6 – Associating a device
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: In our case, we don’t have any device in the portal, so we will just click on
    **SET UP NEW DEVICE** to configure a new device in the account.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you will see the two options in the popup. The first option is **Arduino
    board**, and the second option is **Third party device**. Here, you will see an
    icon in front of both names, which means you need to use compatible devices with
    the Arduino IoT Cloud. Next, you will see two options: one for the Arduino official
    development boards and a second option for the third-party development boards.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.7 – Choosing a development device](img/B19752_02_07.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
- en: Figure 2.7 – Choosing a development device
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: Select one option from the popup according to the available device. For this
    chapter, we will click on **Arduino board**, as in this chapter, we will use the
    MKR Wi-Fi 1010 board. Before adding the device, make sure that the Arduino Create
    Agent is running on your machine.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: You can find the Arduino IoT Cloud-compatible boards at [https://store-usa.arduino.cc/pages/cloud-compatible-boards](https://store-usa.arduino.cc/pages/cloud-compatible-boards),
    and for third-party devices, we have three options, which are **ESP8266**, **ESP32**,
    and **LoRaWAN** devices. For some devices, we have API access, which will be discussed
    in the second part of this chapter.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you will see the **Setup Device** popup, which will start searching for
    your device. So, make sure the device is properly connected to your machine. When
    the Arduino Create Agent detects the compatible development board device, the
    following popup will be shown:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.8 – Setup Device](img/B19752_02_08.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
- en: Figure 2.8 – Setup Device
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: 'The wizard will find and list all the connected boards with their name and
    port details. Click on the **CONFIGURE** button to move forward. If the wizard
    doesn’t show the device after searching, try to plug in a different port and click
    on the **refresh** link, located at the bottom. After development board configuration
    has been taken care of by the Arduino IoT Cloud, you will see a popup where you
    need to provide the name of your device:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: In the next configuration wizard, provide the device’s name (note that spaces
    and special characters are not allowed in the device name) and then click on the
    **NEXT** button.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.9 – The device configuration name](img/B19752_02_09.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
- en: Figure 2.9 – The device configuration name
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: After that, the wizard will start the device configuration process, which will
    take up to five minutes. But in most cases, it only takes one minute to configure
    the device.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: Eventually, you will see a popup with a **Congratulations! You are all set**
    message. Click on the **Done** button, and the device will be attached to your
    Thing.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: 'On the Thing page, you will see the device details, which are marked in the
    red box in the following figure:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.10 – The device attached to the Thing](img/B19752_02_10.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
- en: Figure 2.10 – The device attached to the Thing
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: 'The page shows the device name, the device ID, its type, its status (which
    is either **Online** or **Offline**), and two buttons, **Change** and **Detach**:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '**Change** is used to switch between devices – for example, if you have chosen
    the wrong device, then you can select a different one via this option.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Detach** means removing the device from the Thing. Why might we need to detach?
    For example, you may have created a Thing and associated the device with it, but
    you are now not using that Thing. If you want to set up a new Thing with that
    device, the platform will not allow you to do so if it’s already associated with
    the old Thing.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important note
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: The device and the Thing have a one-to-one relationship. If you want to use
    a device with a new Thing, then make sure it’s not associated with another one.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: As we have added the device, let us move toward network configuration.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the network
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'After attaching the device to the Thing, we can see that the device is offline.
    To bring it online, we need to provide Wi-Fi details. The following figure represents
    the network configuration popup, which only consists of two fields:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.11 – Network configuration](img/B19752_02_11.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
- en: Figure 2.11 – Network configuration
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: On the Thing page shown in *Figure 2**.5*, under the **Network** tab, click
    on the **CONFIGURE** button, which will take you to the **Configure network**
    popup with two fields, **Wi-Fi Name** and **Password**. Type the Wi-Fi SSID and
    password, and then click on the **SAVE** button.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we have configured the network for our device, which is MKR
    Wi-Fi 1010, and in the next sub section, we will create the cloud variable.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: Adding a cloud variable
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The final part is adding a cloud variable. Before adding a variable, you have
    to have an idea of what type of variables you need for your project, including
    the **variable type**, the **variable permission**, and the **variable** **update
    policy**.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: 'For the current example, we need one variable to control the built-in LED,
    so the variable type will be **Boolean** (either on/off):'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.12 – Adding a variable](img/B19752_02_12.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
- en: Figure 2.12 – Adding a variable
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: 'This way, we will control the LED via the dashboard:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: Assign a meaningful name to the variable, related to the sensor/actuator type.
    Remember that spaces and special characters are not allowed in the name.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you want to sync the variable with other Things’ variables, then click on
    the **Sync with other Things option**. The sync option is very beneficial if you
    want to share data across other Things. Sync will be explained in later chapters
    alongside a practical demonstration.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the variable type from the dropdown; the platform provides dozens of
    variable types. For this example, we need a **Boolean** variable type for LED
    control.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After selecting the variable type, you will see the variable `LED`, but the
    system has converted the first letter to lowercase and the rest of the characters
    are left as is, making the name **lED**. This declaration part is very important;
    you can change the declaration according to your requirements, but keep the declaration
    in mind, as it will be used in coding.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The variable permission provides two options, **Read & Write** and **Read Only**.
    The permission provides an extra layer of security for the Thing’s control. If
    a sensor only senses data such as temperature/humidity, then choose the **Read
    Only** option. If you want to control actuators such as the relay and the LED,
    then choose the **Read & Write** option. For our example, we need to write data
    to the variable to control the LED, so we will simply choose **Read &** **Write**.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, we need to choose an update policy according to our requirements. One
    option is event-driven (shown onscreen as **On change**), which only works when
    there is a change. It works when prompted by commands such as turning on/off a
    relay or LED. The second option is **Periodically**, which means taking data from
    a variable, such as temperature, humidity, air pressure, or a **Light Dependent
    Resistor** (**LDR**) value after a specific time. When you change the option to
    **Periodically**, it will ask you for a time measured in seconds, whereas for
    **On change**, there is a threshold option.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After adding the variable, our Thing now has all the mandatory ingredients.
    The following figure describes all the settings and configurations when we are
    done with the cloud variable, device, and network settings. Next, we need to jump
    to the **Sketch** tab for coding:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.13 – The Thing after configuration](img/B19752_02_13.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
- en: Figure 2.13 – The Thing after configuration
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: The preceding screenshot illustrates the device association, network configuration,
    and variable settings, which are essential components of the Thing. Next, click
    the **Sketch** tab, where you will open the Arduino Web Editor for coding. Here,
    we will add the code that will be associated with the LED variable. In this section,
    we have completed all the tasks via drag and drop, but now it’s time to do some
    work by putting some coding into our development board. In the next section, we
    will explore sketches.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: Writing a sketch
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most Things are set up in the cloud via a **graphical user interface** (**GUI**),
    but we still need to do some coding. The following figure describes all the options
    of the mini web editor, such as verifying and uploading the code, selecting the
    development board on specific ports, and the code area for writing and editing.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.14 – Mini web editor](img/B19752_02_14.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
- en: Figure 2.14 – Mini web editor
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: 'The code will associate a variable with physical sensors/actuators to make
    it work properly. Please see the following steps:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: Here, you will see two buttons, like with the Arduino IDE. The tick button is
    used to verify code, while the arrow icon button is used to upload the code to
    the development board.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This part shows whether your device is connected to your machine or not. If
    the development board is connected, then it will show the device name with the
    port.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Arduino Cloud Editor has two variants – one is basic and the other is full.
    In the **Thing** tab shown in *Figure 2**.14*, we can see the mini version of
    the editor, but if you want to move to the full editor for the installation of
    libraries or other stuff, then click on the **</>** button.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll down the editor, and at the bottom, you will see the `OnLEDChange()`
    function, which is associated with the **LED** variable. In this function, we
    need to write the code that will provide connectivity to the sensor/physical pins
    of the development board.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'According to our current example project, we just want a turned-on/turned-off,
    built-in LED for the development board. The following is the code that will be
    used in the function:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: First, let’s recall the declaration used during variable creation, which is
    shown in *Figure 2**.12*. What the code does is turn the built-in LED on if the
    `lED` variable contains a true value; otherwise, it turns the built-in LED off.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: 'To write Boolean values on development board pins, we have a method called
    `digitalWrite`, which takes two parameters. The first parameter is a pin number
    and in the second parameter we will place `true`/`false` or `1`/`0`, while we
    are using `LED_BUILTIN`, which is a constant and contains *PIN #13*. The second
    parameter is a value, which is either `1` or `0`. This parameter changes according
    to the `lED` variable state. Here we are done with our coding exercise. Now it’s
    time to create a graphical user interface from where we turn on/off the LED. In
    the following section, we will set up the dashboard to control the LED.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: Creating a dashboard for web and mobile with an interactive widget
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After setting up a complete Thing, we are done with device setup, network settings,
    the variable, and coding the variable. The next question is, how can we turn the
    LED on/off? For that, we need to create a dashboard. *Figure 2**.15* illustrates
    a dashboard. Click on the **Dashboards** link in the top menu. After loading the
    dashboard page for the first time, you will see an empty page with one green button
    at the bottom of the page – **Build Dashboard**.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.15 – The Things dashboard](img/B19752_02_15.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
- en: Figure 2.15 – The Things dashboard
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the button, and you will be taken to the dashboard builder page to
    create a new stunning dashboard for your device control, as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: The dashboard has two modes, view and editing. By default, it’s on editing mode,
    which is denoted by an edit icon, and we can switch to view mode by clicking on
    the eye icon. In view mode, we can’t modify the widget’s settings and alignment.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To add controls on the dashboard, click on the green **ADD** button, and a drop-down
    menu will appear with a variety of widgets. Here, you can select a widget by scrolling
    or searching.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This button is used to arrange the widgets. During editing, you are not able
    to navigate, resize, or move the widget controls.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As mobile icon is representing it’s working from its icon, this means by click
    on this icon you can adjust your dashboard for mobile devices. Arduino provides
    both views of the dashboard for desktop and mobile. You can switch between them
    by clicking on the mobile/desktop icon.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the textbox, type the dashboard name.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now that we have created the dashboard, it’s time to put a widget on it. Widgets
    will help us to control/view the sensors/actuators. When you click on the **Add**
    button, you will see the list of widgets. Here you can select a widget by scrolling
    through the list or by searching the widgets via the search bar, as shown in the
    following figure:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.16 – The widgets list](img/B19752_02_16.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
- en: Figure 2.16 – The widgets list
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: Select the **Switch** widget control for the current example project. After
    selecting the widget control, a popup will appear, where we need to link the Thing
    variable with the widget control to read/write the data to the device sensors.
    This is because the variable is the bridge between the dashboard widget controls
    and the Thing sensors to read and write data.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: 'In the widget popup, we have different settings, as shown in the following
    figure:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.17 – Widget settings](img/B19752_02_17.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
- en: Figure 2.17 – Widget settings
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: 'The widget settings are detailed as follows:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: Firstly, we need to assign a name to our widget. Make sure to give it a proper
    name that represents the sensor’s name. Here, I used the name **LED-Switch**.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hide or show the widget frame content, which is at the top and bottom of the
    widget.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Link Variable** to attach the Thing variable to the widget control,
    which will be explained in the next figure.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hide/show the widget label to hide the text that overlays the widget control.
    In the preceding figure, it switches the **ON**/**OFF** button text.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'It’s time to attach the widget control to the variables. Note that we can add
    multiple controls on the same dashboard that are linked to different Things’ variables,
    which shows the versatility of Arduino IoT Cloud dashboards, as shown in the following
    figure:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.18 – Linking a Thing variable with a widget control](img/B19752_02_18.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
- en: Figure 2.18 – Linking a Thing variable with a widget control
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: 'As shown in *Figure 2**.18*, we have the following steps to assign the cloud
    variable to the widget control:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: Select a Thing from the **Things** list. After selecting the Thing, it will
    show you the variables that are associated with that Thing.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select a variable from the **Variables** list.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here, you will see all the details of the variables, such as the Thing name,
    **Type**, **Last value**, **Permission**, **Update policy**, and **Last update**.
    The purpose of this detailed summary is to make sure to verify that you have attached
    the right variable to the widget control.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After selecting the variable from the specific Thing, click on the **LINK VARIABLE**
    button, and you will see the variable details in the widget control popup. From
    there, you can change or detach the variable. Finally, click on the **DONE** button;
    now, our dashboard is ready, with a widget control to send commands to the Thing.
    Just click on the eye icon on the dashboard to make it operational. After that,
    start testing the dashboard controls.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: Here we are done with our first example project with Arduino MKR1010 and the
    Arduino IoT Cloud. Next, you need to solve *Assignment 1* of this section. After
    that, you will jump into the second section of this chapter, where you will learn
    how to use the Arduino IoT Cloud with non-compatible devices, such as Arduino
    Uno, Raspberry Pi, and so on via Node-RED.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: Assignment 1
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Congratulations! You have completed the first part of this chapter successfully,
    and I hope you enjoyed that journey. Now, it’s time to verify what you have learned
    so far by giving you a small assignment:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: Attach three differently colored LEDs of any color (preferably, red, yellow,
    and green) to the Arduino MKR1010 development board on pin numbers 1, 2, and 3,
    respectively.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set up a new Thing with the name `IoT-Based Traffic` `Lights Control`.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Associate the device, configure its network settings, and create variables according
    to the number of LEDs. Variable names should be based on LED colors such as `LED_Red`.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write the code that will turn the LED on/off according to the variable value.
    After writing the code for each LED, verify and upload the code to the development
    board.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, set up the dashboard with the name `Traffic Light` `Control Dashboard`.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the **Switch** buttons according to the number of LEDs, and link them with
    their associated variables.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test the LEDs by switching them on/off via a dashboard.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Important note
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: Try the **Push Button** widget control along with the **Switch** button widget
    control. Verify whether one variable allows you to connect with more than one
    widget. Also, verify the behavior of the **Push Button** widget control by turning
    the **Switch** button on/off.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: Our world is full of different types of technologies. Whenever a new innovation
    comes on the market, it always provides compatibility with older devices. In the
    Arduino IoT Cloud, we have a list of devices that are currently supported, but
    there are millions of devices that are not compatible with the Arduino IoT Cloud.
    So, while in the previous section of the chapter, we practiced an example with
    Arduino IoT Cloud-compatible development boards, next, we are going to look at
    how we can connect/use non-compatible devices with the Arduino IoT Cloud, such
    as Arduino UNO, Raspberry Pi, BeagleBone, and so on.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Node-RED
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Node-RED is a free, open source visual programming tool for IoT and other applications.
    It was developed by IBM Emerging Technology and was first released in 2013\. Node-RED
    provides a web-based interface to wire together hardware devices, APIs, and online
    services in new and interesting ways. The tool uses a **graphical flow-based programming
    language**, making it easy for users with little or no programming experience
    to build complex IoT systems. Node-RED has become popular in the IoT and smart
    home communities for its ease of use and ability to integrate with a wide range
    of devices and services.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: Node-RED是一个免费的开源物联网和其他应用的视觉编程工具。它由IBM新兴技术部门开发，并于2013年首次发布。Node-RED提供了一个基于网页的界面，以新颖有趣的方式连接硬件设备、API和在线服务。该工具使用基于**图形流程**的编程语言，使得编程经验很少或没有的用户也能轻松构建复杂的物联网系统。Node-RED因其易用性和能够与广泛设备和服务集成而受到物联网和智能家居社区的欢迎。
- en: Node-RED is a flow-based development tool for IoT and other applications. It
    provides a visual, drag-and-drop interface to connect different devices, APIs,
    and online services. With Node-RED, users can wire together inputs, outputs, and
    functions to create sophisticated IoT solutions. As well as being open source
    and free to use, Node-RED has a large user community and a library of pre-built
    components.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: Node-RED是一个基于流程的物联网和其他应用的开发工具。它提供了一个视觉拖放界面，用于连接不同的设备、API和在线服务。使用Node-RED，用户可以将输入、输出和功能连接起来，以创建复杂的物联网解决方案。除了开源和免费使用外，Node-RED还拥有庞大的用户社区和预构建组件库。
- en: 'With all Node-RED’s aforementioned benefits, the following question arises:
    why do we need to use the Arduino IoT Cloud? At the start of the chapter, I mentioned
    that the Arduino IoT Cloud only supports a few development boards natively. Even
    Arduino doesn’t support all of their development boards, especially Arduino UNO,
    Arduino Mega, and Raspberry Pi from the Raspberry Pi Foundation, which are very
    famous among makers and hobbyists and used by industry. The solution to this is
    Node-RED, which is compatible with most development boards and has an Arduino
    IoT Cloud module, making it easier for developers to integrate non-compatible
    devices with the Arduino IoT Cloud.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有Node-RED的上述优点的基础上，以下问题随之而来：为什么我们需要使用Arduino IoT Cloud？在章节的开头，我提到Arduino IoT
    Cloud仅原生支持少数几款开发板。即使是Arduino，也不支持它们所有的开发板，尤其是Arduino UNO、Arduino Mega以及来自树莓派基金会的树莓派，这些在创客和爱好者中非常著名，并被工业界所使用。Node-RED就是解决这个问题的方案，它与大多数开发板兼容，并拥有Arduino
    IoT Cloud模块，这使得开发者更容易将不兼容的设备集成到Arduino IoT Cloud中。
- en: 'Node-RED can be used with the Arduino IoT Cloud with several benefits:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: Node-RED与Arduino IoT Cloud结合使用，具有以下好处：
- en: '**Ease of development**: Node-RED’s visual, drag-and-drop interface makes it
    easy for users to connect Arduino boards to the cloud and build IoT applications
    quickly'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发简便**：Node-RED的视觉拖放界面使得用户能够轻松地将Arduino板连接到云端并快速构建物联网应用。'
- en: '**Integration with the Arduino IoT Cloud**: Node-RED has built-in support for
    the Arduino IoT Cloud, allowing users to easily connect their Arduino boards,
    as well as other development boards, and send data to the cloud'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**与Arduino IoT Cloud集成**：Node-RED内置了对Arduino IoT Cloud的支持，使用户能够轻松地将他们的Arduino板以及其他开发板连接起来，并将数据发送到云端。'
- en: '**Flexibility**: The flow-based programming model of Node-RED makes it easy
    to build and modify complex systems'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**灵活性**：Node-RED的基于流程的编程模型使得构建和修改复杂系统变得容易。'
- en: '**Flow-based programming**: Node-RED’s flow-based programming model is well
    suited to building IoT applications, as it allows users to quickly connect inputs,
    outputs, and functions to create sophisticated systems'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于流程的编程**：Node-RED的基于流程的编程模型非常适合构建物联网应用，因为它允许用户快速连接输入、输出和功能，以创建复杂的系统。'
- en: '**Open source**: Node-RED is open source, allowing users to access the source
    code and make modifications if necessary'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开源**：Node-RED是开源的，允许用户访问源代码并在必要时进行修改。'
- en: '**Large user community**: Node-RED has a large and active user community, providing
    access to a wealth of information and pre-built components'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**庞大的用户社区**：Node-RED拥有庞大且活跃的用户社区，提供丰富的信息和预构建组件。'
- en: These benefits make Node-RED a good choice for developing Arduino-based IoT
    applications and connecting them to the cloud. By using Node-RED, users can leverage
    the power of the cloud to store, analyze, and visualize data from their IoT systems.
    In this section, we have discussed the features and benefits of Node-RED. Now
    it’s time to take a practical look by implementing the example project. The following
    sections will take you through the implementation of the project step by step.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这些优势使Node-RED成为开发基于Arduino的物联网应用并将其连接到云端的良好选择。通过使用Node-RED，用户可以利用云的力量来存储、分析和可视化其物联网系统中的数据。在本节中，我们讨论了Node-RED的功能和优势。现在，是时候通过实现示例项目来实际看看了。接下来的几节将逐步引导您完成项目的实现。
- en: The Arduino IoT Cloud and a Node-RED Hello World example
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Arduino IoT Cloud和Node-RED Hello World示例
- en: In this section, we will build on our project by adding some extra functionality
    to our system via Node-RED. This will help you to understand how you can use Node-RED
    to integrate non-compatible devices with the Arduino IoT Cloud.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将通过Node-RED向我们的系统添加一些额外的功能，以扩展我们的项目。这将帮助您了解如何使用Node-RED将不兼容的设备与Arduino
    IoT Cloud集成。
- en: Node-RED will monitor the LED status based on a value that is either `LEDStatus`,
    which will be linked to the **Status** widget, which shows the LED as being either
    on or off. Using this example, you will learn how to read data from a Thing property/variable
    and how to write data to a Thing property/variable.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: Node-RED将根据一个值监控LED状态，该值可以是`LEDStatus`，它将链接到**状态**小部件，显示LED是开启还是关闭。通过这个示例，您将学习如何从设备属性/变量中读取数据以及如何将数据写入设备属性/变量。
- en: Node-RED has a module that was officially developed by Arduino for connectivity
    with the Arduino IoT Cloud. It provides five nodes to carry out different types
    of operations. For further details, visit [https://flows.nodered.org/node/@arduino/node-red-contrib-arduino-iot-cloud](https://flows.nodered.org/node/@arduino/node-red-contrib-arduino-iot-cloud).
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: Node-RED有一个由Arduino官方开发的模块，用于与Arduino IoT Cloud连接。它提供了五个节点来执行不同类型的操作。有关更多详细信息，请访问[https://flows.nodered.org/node/@arduino/node-red-contrib-arduino-iot-cloud](https://flows.nodered.org/node/@arduino/node-red-contrib-arduino-iot-cloud)。
- en: A tour of the Node-RED editor
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Node-RED编辑器的游览
- en: Before moving on, I want to first remind you that you need to set up Node-RED
    on your machine. If you already have, that’s great; otherwise, you need to set
    up on a local machine by going to [https://nodered.org/docs/getting-started/local](https://nodered.org/docs/getting-started/local).
    If you are looking for more cloud/development board options, then go to [https://nodered.org/docs/getting-started/](https://nodered.org/docs/getting-started/).
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，我想首先提醒您，您需要在您的机器上设置Node-RED。如果您已经设置好了，那太好了；否则，您需要通过访问[https://nodered.org/docs/getting-started/local](https://nodered.org/docs/getting-started/local)在本地机器上设置。如果您正在寻找更多云/开发板选项，请访问[https://nodered.org/docs/getting-started/](https://nodered.org/docs/getting-started/)。
- en: 'After installation, start Node-RED and type `127.0.0.1:1880` or `localhost:1880`
    in your browser URL bar. After that, you will see an interface, with a white space
    area and several different colored boxes on the left sidebar; here I have marked
    the following figure with different numbered boxes, which are explained in detail
    after the figure:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，启动Node-RED，并在浏览器地址栏中输入`127.0.0.1:1880`或`localhost:1880`。之后，您将看到一个界面，其中包含一个空白区域和左侧边栏上的几个不同颜色的盒子；在这里，我已经用不同的编号标记了以下图中的盒子，这些盒子将在图后详细解释：
- en: '![ Figure 2.19 – A Node-RED interface overview](img/B19752_02_19.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![图2.19 – Node-RED界面概览](img/B19752_02_19.jpg)'
- en: Figure 2.19 – A Node-RED interface overview
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.19 – Node-RED界面概览
- en: 'The various parts of the preceding figure are explained as follows:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 前图的各种部分解释如下：
- en: These colorful boxes are called **nodes**. Node-RED divides different types
    of nodes into different groups, such as **common** and **function**.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这些彩色盒子被称为**节点**。Node-RED将不同类型的节点分为不同的组，例如**常用**和**函数**。
- en: This is the working area, or canvas area, where you will drag and place the
    nodes.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是工作区域，或画布区域，您将在这里拖放和放置节点。
- en: The **debug** area is used to debug the output and input of different operations
    to verify that everything is working fine.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**调试**区域用于调试不同操作的输出和输入，以验证一切是否运行正常。'
- en: Just like in other development environments, we can execute/run a program using
    the **Deploy** option. **Deploy** has different options; if you click on the small
    downward arrow icon, you will get a list of options, such as **Full**, **Modified
    Flows**, **Modified Nodes**, and **Restart Flows**.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The hamburger icon at the top right is the main navigation button, where you
    can find all the options to control the Node-RED configuration, especially for
    the installation of modules. In our case, we will install the Arduino IoT Cloud
    module.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here we have discussed the interface of Node-RED with all the main options.
    In the following section, we will look at how to install the Arduino IoT Cloud
    module for Node-RED, and in the subsequent sections, we will see its implementation.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Arduino IoT Cloud module for Node-RED
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For Node-RED to communicate with the Arduino IoT Cloud, we need to install the
    Arduino IoT Cloud module, which was officially developed by the Arduino team.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the navigation icon in the top-right corner of the app and then click
    on **Manage palette**. After that, you will see a popup like the one in the following
    figure:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.20 – Arduino IoT Cloud module installation](img/B19752_02_20.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
- en: Figure 2.20 – Arduino IoT Cloud module installation
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: 'From that popup, we will install a module:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: To install a module, click on **Palette**.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, select the **Install** tab.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Initially, you will see a blank area. Type `Arduino` in the search bar, which
    will display different modules.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find the **@arduino/node-red-contrib-arduinio-iot-cloud** module and click on
    **install**. In the previous figure, you can see that I already have that module.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now that we have installed the module, it’s time to have a look at what type
    of nodes are available in the Arduino IoT Cloud module. Close the installation
    palette, scroll down through the nodes to the bottom, and you will arrive at the
    **Arduino IoT Cloud** section, as shown in the following figure:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.21 – Arduino IoT Cloud nodes](img/B19752_02_21.jpg)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
- en: Figure 2.21 – Arduino IoT Cloud nodes
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a breakdown of the nodes shown in *Figure 2**.21*:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: The first one is an *IN* node (in Node-RED, we have nodes; that’s why I used
    the word node instead of property to get the value from the Thing property/variable).
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The second is an *OUT* node, used to write the value to the Thing property/variable.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The third is the **historic** node, which is used to get data from a specific
    property until a specific time. This node is useful when you want to get the set
    of values for a specific sensor, such as temperature/humidity.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The fourth is **periodic** and is useful when you want to get the value of a
    specific property after a specific period of time, such as getting the value of
    soil moisture after a specific time interval.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The fifth, which is our last node, is **inject**. This is used to add value
    to the flow of the Arduino IoT Cloud variables after receiving some sort of input.
    *OUT* is different, as it only sends out data, but this node will inject the value
    into the Arduino IoT Cloud variable.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this section, we have discussed the nodes to work with the Arduino IoT Cloud,
    that are available to developers from the Arduino IoT Cloud module. Next, we will
    set up the API, cloud variables, and dashboard to proceed further.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: Setting up an API, variable, and dashboard widget
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After installing the Arduino IoT Cloud module, it’s time to set up an API in
    the Arduino IoT Cloud. In the Arduino IoT Cloud’s older interface, there were
    API options under the **Integrations** tab, but now, the Arduino team has moved
    the API option to the Arduino IoT Cloud, which is available at [https://cloud.arduino.cc/home/](https://cloud.arduino.cc/home/).
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on **API Keys**. After that, you will be taken to the API page; click
    on **CREATE API KEY**. A popup will appear; type the name for API and click on
    the **CONTINUE** button. The following wizard will take some seconds to generate
    the keys, and then a new popup will appear displaying them:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B19752_02_22.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
- en: Figure 2.22 – The API keys
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: Copy the client ID and client secret by clicking on the copy icons; never try
    to copy the secret name by selecting it, as it is too long. Save both the client
    ID and client secret to secure the location, and after that, click on the checkbox
    beside **I saved my Client ID and Secret** to confirm that you have saved your
    keys. Finally, click on the **DONE** button, and you will see your API key in
    the panel, ready for use.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: One API key has access to all the Things and their variables. So, it’s good
    to use one API key to gain access to all Things instead of creating separate API
    keys for each one. On the other hand, take care of your keys, as losing them can
    be a big security risk.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: After API key generation, we need to set up an extra variable that will receive
    the value from Node-RED, and a **Status** widget that will act according to the
    variable value.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: For variable creation, go back to the IoT Cloud dashboard shown in *Figure 2**.12*,
    select the desired Thing, create a new variable named `LEDStatus`, and choose
    the Boolean type that we previously created for the LED. Then, navigate back to
    the dashboard and select the dashboard that we developed for the previous exercise.
    Click on the `LEDStatus` variable with the **Status** widget.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: Here we have created the API keys in the Arduino IoT Cloud for Node-RED, as
    well as a new Thing with cloud variables and a dashboard. Next, we are going to
    configure the API keys in Node-RED for proper communication with the Arduino IoT
    Cloud.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: Creating a first project with Node-RED
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have done all the mandatory stuff that is required in our journey so far.
    Return to the Node-RED dashboard shown in *Figure 2**.19*, scroll down the left
    side, and move your node to the Arduino IoT Cloud.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the first node, which is *IN*, and drag it to the flow area. Double-click
    on the node, and you will see the following popup for node configuration:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.23 – Arduino IN node configuration](img/B19752_02_23.jpg)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
- en: Figure 2.23 – Arduino IN node configuration
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: 'To edit the property node, follow these steps:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: Select the Arduino connection from the dropdown (the dropdown is only there
    if you have multiple Arduino IoT Cloud connections).
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you don’t have a connection, click on the pencil icon, and it will take you
    to a new popup where you will need to provide the name of the connection, along
    with the client ID and client secret that were generated in the previous section
    in *Figure 2**.22*. When you save the connection, it will appear under the **Connection**
    dropdown.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After successfully creating and selecting a connection, a list of Things that
    are associated with that connection will appear. From the **Thing** dropdown,
    select the target Thing that you will use in your flow. If you do not see anything
    in the dropdown, it means there is an issue with the connection.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the selection of Thing, the **Property** dropdown will list all the variables
    that are associated with the selected Thing. Select one variable that you want
    to sense; in our exercise, I chose the **LED** variable to get its status.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Assign a name to the node, click on the **Done** button, and then you are done
    with the configuration.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following is a complete flow of nodes. It shows the entire workflow, from
    getting variable values to the final node, which sends a value to the cloud based
    on input:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.24 – A complete flow of the Node-RED project](img/B19752_02_24.jpg)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
- en: Figure 2.24 – A complete flow of the Node-RED project
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: 'The node workflow is broken down as follows:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: The first node is the *IN* node. Select the variable that you want to read;
    I selected the **LED** variable.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the *switch* node (node `Functions`tab on the left sidebar of the page.
    This node is responsible for taking the value from node **1** and selecting the
    specific node from **3** or **4**, according to the value. Link the Arduino *IN*
    node to the *switch* node. After linking, double-click on the *switch* node, where
    we need to specify the switch cases.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.25 – Switch node options](img/B19752_02_25.jpg)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
- en: Figure 2.25 – Switch node options
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: 'To edit the *switch* node, follow these steps:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: Firstly, assign a name to the node and then add the switch cases.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In our current exercise, we have two switch statements: the LED is either *true*
    or *false*, which means on or off. By default, there is only one option – click
    on the small `1` and `0`, and we will then have two flows.'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The *change* nodes (`True`/`1`/`On` value. Double-click on this node. Now, click
    on the drop-down icon, which is marked by a red box in the following figure, select
    the **Boolean** type, and then select **true**.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.26 – Changing the node configuration](img/B19752_02_26.jpg)'
  id: totrans-244
  prefs: []
  type: TYPE_IMG
- en: Figure 2.26 – Changing the node configuration
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: 'To edit the change node, follow these steps:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: Again, insert the *change* node and link it with the *switch* node (node `False`/`0`/`Off`
    value. Double-click the *change* node, select the Boolean data type, and select
    the **false** value.
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Everything is ready now. We just need to add a node that will send data to a
    specific Arduino IoT Cloud Thing variable. To send the data, we need the Arduino
    *OUT* node, which is the second node under the Arduino IoT Cloud tab shown in
    *Figure 2**.21*. Drag this node, and connect both *change* nodes (`LEDStatus`
    variable.
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, we are done with all the node configurations and linkage. Click on
    the `LEDStatus` Arduino IoT Cloud variable according to the Node-RED **LED** variable,
    and the status widget will be changed accordingly.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: In the second part of the chapter, we have explored how to connect non-compatible
    IoT development boards with the Arduino IoT Cloud using Node-RED. Next up is *Assignment
    2*, which is specially designed for you to practice with different experiments.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: Assignment 2
  id: totrans-251
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Continue the previous assignment, where you connected three LEDs to MKR Wi-Fi
    1010 and the Arduino IoT Cloud setup:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: Create three status variables in the Thing, according to the LED name such as
    Red, Yellow and Green, to the previously-set-up Thing.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add three status widgets to the previously-set-up dashboard and attach newly
    created status variables to them.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set up three different flows for each LED and deploy the flows.
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify the status widgets by turning the LEDs on/off with the **Switch** button
    widget.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  id: totrans-257
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter is the first chapter where we explored how to connect devices with
    the Arduino IoT Cloud using a basic LED on/off example. In the first part, we
    used an Arduino IoT Cloud-compatible development board, which was the MKR Wi-Fi
    1010 board, where we learned how to create Things and cloud variables, how to
    associate devices, how to configure networks, and how to create sketches. At the
    end of that section, there was an assignment for you to practice on.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: In the second part of this chapter, we explored how to connect non-compatible
    development boards, such as Arduino UNO, Arduino Mega, and Raspberry Pi, with
    the Arduino IoT Cloud, using Node-RED and the Arduino API interface. Here we have
    explored Node-RED, the Node-RED module for the Arduino IoT Cloud, and generating
    API keys in the cloud. This part of the chapter helped teach you how to use non-compatible
    existing technologies with the Arduino IoT Cloud.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: Arduino has a lot of options in the Arduino IoT Cloud, such as Things, devices,
    dashboards, and a lot of widgets for dashboards and the Arduino Web Editor. So,
    in the next chapter, we will explore all those options in detail before moving
    on. [*Chapter 3*](B19752_03.xhtml#_idTextAnchor056) is very important for you
    to better understand all of the Arduino IoT Cloud options.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino 在 Arduino IoT Cloud 中提供了许多选项，例如事物、设备、仪表盘以及大量用于仪表盘和 Arduino Web 编辑器的部件。因此，在下一章中，我们将在继续前进之前详细探讨所有这些选项。[*第
    3 章*](B19752_03.xhtml#_idTextAnchor056) 对于您更好地理解所有 Arduino IoT Cloud 选项非常重要。
