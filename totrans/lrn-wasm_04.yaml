- en: Installing the Required Dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you have your development environment set up and you're ready to start
    writing C, C++, and JavaScript, it's time to add the final piece of the puzzle.
    In order to generate `.wasm` files from our C/C++ code, we need to install and
    configure the **Emscripten SDK** (**EMSDK**).
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we'll discuss the development workflow and talk about how the
    EMSDK fits into the development process. Detailed instructions will be provided
    on how to install and configure the EMSDK on each platform, as well as any prerequisites.
    Once the installation and configuration process is complete, you'll test it out
    by writing and compiling some C code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our goal for this chapter is to understand the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The overall development workflow when working with WebAssembly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How the EMSDK relates to Emscripten and WebAssembly and why it's needed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to install the prerequisites for the EMSDK
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to install and configure the EMSDK
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to test the EMSDK to ensure it's working correctly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The development workflow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The development workflow for WebAssembly is comparable to most other languages
    that require compilation and a build process. Before getting into the tooling
    setup, we will cover the development cycle. In this section, we will establish
    some context for the tooling we will install and configure in the rest of this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Steps in the workflow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this book, we will write C and C++ code and compile it down to a Wasm module,
    but the workflow will be applicable to any programming language that compiles
    down to a `.wasm` file. The following diagram gives an overview of the process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b43e1500-5c09-4f8d-a81c-665fad256758.png)'
  prefs: []
  type: TYPE_IMG
- en: Steps in the development workflow
  prefs: []
  type: TYPE_NORMAL
- en: This process will be used throughout the book for our examples, so you'll get
    an idea of how the project structure corresponds to the workflow. We'll use some
    of the tooling available to expedite and simplify the process, but the steps will
    still be the same.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating Tooling into the workflow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many editors and tools available to simplify the development process.
    Fortunately, C/C++ and JavaScript have been around for quite some time, so you
    can take advantage of the options that suit you best. The list of tools for WebAssembly
    is considerably shorter, given the shorter duration of which the technology has
    existed, but they are out there.
  prefs: []
  type: TYPE_NORMAL
- en: The primary tool we'll use, VS Code, offers some excellent and useful features
    for simplifying the build and development process. In addition to using it for
    writing our code, we'll utilize VS Code's built-in Tasks feature to build the
    `.wasm` file from C/C++. By creating a `.vscode/tasks.json` file in the project
    root folder, we're able to specify all of the parameters associated with the build
    step and run it quickly using a keyboard shortcut. In addition to performing a
    build, we can start and stop a running Node.js process (that is, the local server
    in the workflow diagram). We'll cover how to add and configure these features
    in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Emscripten and the EMSDK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We'll use Emscripten to compile our C/C++ code down to `.wasm` files. Up to
    this point, Emscripten has only briefly been mentioned in a general context. Since
    we'll use this tool and the corresponding Emscripten SDK (EMSDK) in the build
    process, it's important to understand what each technology is and the part it
    plays in the development workflow. In this section, we'll describe Emscripten's
    purpose and discuss its relationship to the EMSDK.
  prefs: []
  type: TYPE_NORMAL
- en: Emscripten overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So what is Emscripten? Wikipedia provides the following definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '"Emscripten is a source-to-source compiler that runs as a back end to the LLVM
    compiler and produces a subset of JavaScript known as asm.js. It can also produce
    WebAssembly."'
  prefs: []
  type: TYPE_NORMAL
- en: We discussed source-to-source compilers (or transpilers) in the first chapter
    and used TypeScript as an example. Transpilers convert source code in one programming
    language to equivalent source code in another programming language. To elaborate
    on Emscripten running as a backend to the LLVM compiler, we need to provide some
    additional details about LLVM.
  prefs: []
  type: TYPE_NORMAL
- en: 'The official website for LLVM ([https://llvm.org](https://llvm.org)) defines
    the LLVM as *a collection of modular and reusable compiler and toolchain technologies*.
    There are several sub-projects that make up LLVM, but we''ll be focusing on the
    two that Emscripten utilizes: Clang and the LLVM Core libraries. To understand
    how these pieces fit together, let''s review the design of a three-stage compiler:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fd686aef-f7e8-4aa4-a782-25c68ec02e2a.png)'
  prefs: []
  type: TYPE_IMG
- en: Design of a general three-stage compiler
  prefs: []
  type: TYPE_NORMAL
- en: 'The process is relatively straightforward: three separate stages or *ends*
    handle the compilation process. This design allows for different frontends and
    backends for various programming languages and target architectures and completely
    decouples the machine code from the source code by using an intermediate representation.
    Now let''s associate each compilation stage with a component of the toolchain
    we''ll use to generate WebAssembly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3a332b22-6a36-4623-b326-dde857731fd7.png)'
  prefs: []
  type: TYPE_IMG
- en: Three-stage compilation using the LLVM, Clang, and Emscripten
  prefs: []
  type: TYPE_NORMAL
- en: Clang is used to compile C/C++ down to LLVM's **Intermediate Representation**
    (**IR**), which Emscripten compiles to a Wasm module (binary format). The two
    diagrams also demonstrate the relationship between Wasm and machine code. You
    can think of WebAssembly as a CPU in the browser, with Wasm being the machine
    code on which it runs.
  prefs: []
  type: TYPE_NORMAL
- en: Where does the EMSDK fit in?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Emscripten refers to the toolchain used to compile C and C++ down to `asm.js`
    or WebAssembly. The EMSDK is used to manage the tools in the toolchain and the
    corresponding configuration. This eliminates the need for complex environment
    setup and prevents issues with incompatible versions of tooling. By installing
    the EMSDK, we have all of the tooling we need (with the exception of the prerequisites)
    to use the Emscripten compiler. The following diagram is a visual representation
    of the Emscripten toolchain (with the EMSDK shown in dark gray):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c88f7e5e-eefe-454f-a218-816b9caebac5.png)'
  prefs: []
  type: TYPE_IMG
- en: Emscripten Toolchain (modified slightly from emscripten.org)
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have a better understanding of Emscripten and the EMSDK, let's
    move on to the installation process for the prerequisites.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the prerequisites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before installing and configuring the EMSDK, we'll need to install some prerequisites.
    You installed two of the prerequisites in [Chapter 3](706c89b2-c820-4fb0-906c-2f2e49602d27.xhtml),
    *Setting Up a Development Environment*: Node.js and Git. Each platform has slightly
    different installation processes and tooling requirements. In this section, we
    cover the installation process for the prerequisite tooling for each platform.
  prefs: []
  type: TYPE_NORMAL
- en: Common prerequisites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It''s possible that you already have all of the prerequisites installed. Here
    are the three that you''ll need regardless of the platform:'
  prefs: []
  type: TYPE_NORMAL
- en: Git
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Node.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python 2.7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note the Python version; this is important because installing the wrong version
    could cause the installation process to fail. If you followed along in [Chapter
    2](0b30dfc9-4624-48b6-a968-0342540d1ef5.xhtml), *Elements of WebAssembly - Wat,
    Wasm, and the JavaScript API*, and installed Node.js and Git, all that's left
    is to install Python 2.7 and any additional prerequisites specified for your platform.
    The Python installation process for each platform will be specified in the following
    subsections.
  prefs: []
  type: TYPE_NORMAL
- en: Python is a high-level programming language used for general-purpose programming.
    If you'd like to learn more, check out the official website at [https://www.python.org/](https://www.python.org/).
  prefs: []
  type: TYPE_NORMAL
- en: Installing the prerequisites on macOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are three additional tools you''ll need to install prior to installing
    the EMSDK:'
  prefs: []
  type: TYPE_NORMAL
- en: Xcode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Xcode Command Line Tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CMake
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can install Xcode from the macOS App Store. If you already had Xcode installed,
    you can check if the Command Line Tools are installed by going to Xcode | Preferences
    | Locations and checking if the Command Line Tools option has a value. The Command
    Line Tools should have already been installed if you installed the Homebrew package
    manager:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1fec0953-9278-4312-b286-c5ed34ec45e3.png)'
  prefs: []
  type: TYPE_IMG
- en: Checking the current version of the Xcode Command Line Tools
  prefs: []
  type: TYPE_NORMAL
- en: 'If you don''t see that, open up Terminal and run this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Once complete, you can install CMake by running this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Prior to installing Python, run this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If you see `Python 2.7.xx` (where `xx` is the patch version and can be any
    number), you''re ready to install the EMSDK. If you get an error saying the Python
    command wasn''t found or you see `Python 3.x.xx`, I recommend you install `pyenv`,
    a Python Version manager. To install `pyenv`, run this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You''ll need to take some additional configuration steps to finalize the installation.
    Follow the installation instructions for Homebrew at [https://github.com/pyenv/pyenv#homebrew-on-mac-os-x](https://github.com/pyenv/pyenv#homebrew-on-mac-os-x).
    After installing and configuring `pyenv`, run this command to install Python 2.7:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'After the installation is complete, run this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'To ensure you''re using the correct version of Python, run this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: You should see Python `2.7.xx`, where `xx` is the patch version (I was seeing
    `2.7.10`, which will work fine).
  prefs: []
  type: TYPE_NORMAL
- en: Installing the prerequisites on Ubuntu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Ubuntu should already have Python 2.7 installed. You can confirm this by running
    this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'If you see Python `2.7.xx` (where `xx` is the patch version and can be any
    number), you''re ready to install the EMSDK. If you get an error saying the python
    command wasn''t found or you see `Python 3.x.xx`, I recommend you install `pyenv`,
    a Python version manager. Before installing `pyenv`, check if you have `curl`
    installed. You can do this by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'If you see a version number and other information, `curl` is installed. If
    not, you can install `curl` by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the `curl` installation is complete, run this command to install `pyenv`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'After installing and configuring pyenv, run this command to install Python
    2.7:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'If you encounter build issues, navigate to the *Common build problems* page
    at [https://github.com/pyenv/pyenv/wiki/common-build-problems](https://github.com/pyenv/pyenv/wiki/common-build-problems).
    After the installation is complete, run this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'To ensure you''re using the correct version of Python, run this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: You should see `Python 2.7.xx`, where `xx` is the patch version (I was seeing
    `2.7.10`, which will work fine).
  prefs: []
  type: TYPE_NORMAL
- en: Installing the prerequisites on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The only additional prerequisite for Windows is Python 2.7\. Before attempting
    the installation, run this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'If you see `Python 2.7.xx` (where `xx` is the patch version and can be any
    number), you''re ready to install the EMSDK. If you get an error saying the Python
    command wasn''t found, or you see `Python 3.x.xx` and Python 2.7 isn''t installed
    on your system, run this command to install Python 2.7:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'If you saw `Python 3.x.xx` prior to installing Python 2.7, you should be able
    to change the current Python version by updating your path. Before attempting
    the EMSDK installation, run this command to set Python to 2.7:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Installing and configuring the EMSDK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have all of the prerequisites installed, you're ready to install the
    EMSDK. The process for getting the EMSDK up and running is relatively straightforward.
    In this section, we cover the installation process for the EMSDK and demonstrate
    how to update your VS Code C/C++ configuration to accommodate for Emscripten.
  prefs: []
  type: TYPE_NORMAL
- en: Installation process across all platforms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, select a folder to install the EMSDK. I created a folder at `~/Tooling`
    (or `C:\Users\Mike\Tooling` on Windows). In a terminal, `cd` into the folder you
    just created and run this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Once the clone process is complete, follow the instructions to complete the
    installation from the section below that corresponds to your platform.
  prefs: []
  type: TYPE_NORMAL
- en: Installation on macOS and Ubuntu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once the clone process is complete, run each of the commands from the following
    code snippet. If you see a message recommending that you run `git pull` instead
    of `./emsdk update`, use the `git pull` command prior to running the `./emsdk
    install latest` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The `source ./emsdk_env.sh` command will activate the environment variables
    in the current Terminal, which means every time you create a new Terminal instance,
    you''d have to re-run it. To prevent having to take this step, you can add the
    following line to your Bash or Zsh configuration file (that is, `~/.bash_profile`
    or `~/.zshrc`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'If you installed the EMSDK in a different location, make sure that you update
    the path to reflect this. Adding this line to your configuration file will run
    that environment update command automatically so you can start using the EMSDK
    immediately. To ensure you can use the Emscripten compiler, run this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: If you see a message with version information, the setup was successful. If
    you see an error message stating that the command was not found, double-check
    your configuration. You may have specified an invalid path for the `emsdk_env.sh`
    in your Bash or Zsh configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: Installation and configuration on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before completing the installation, I recommend you use **PowerShell** going
    forward. The examples in this book will be using PowerShell inside `cmder`. Once
    the clone process is complete, run each of the commands given in the following
    code snippet. If you see a message recommending that you run `git pull` instead
    of `./emsdk update`, use the `git pull` command prior to running the `./emsdk
    install latest` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The `--global` flag in the `.\emsdk activate` command allows you to run `emcc`
    without having to run a script to set the environment variables each session.
    To ensure you can use the Emscripten compiler, restart your CLI and run this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: If you see a message with version information, the setup was successful.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration in VS Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you haven''t already done so, create a folder that will contain the code
    samples we''ll be working through (the examples use the name `book-examples`).
    Open this folder in VS Code, press the *F1* key, and select C/Cpp: Edit Configurations…
    to create a `.vscode/c_cpp_properties.json` file in the root of your project.
    It should open the file automatically. Add the following line to the `browse.path`
    array: `"${env:EMSCRIPTEN}/system/include"`. This will prevent errors being thrown
    if you include the `emscripten.h` header. You may need to manually create the
    `browse` object with a `path` entry if it didn''t generate one automatically.
    The following snippet represents the updated configuration file on Ubuntu:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Testing the compiler
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After installing and configuring the EMSDK, you'll need to test it to ensure
    you're able to generate Wasm modules from C/C++ code. The easiest way to test
    it is to compile some code using the `emcc` command and try running it in a browser.
    In this section, we'll validate the EMSDK installation by writing and compiling
    some simple C code and evaluating the Wat associated with the `.wasm` output.
  prefs: []
  type: TYPE_NORMAL
- en: The C code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We'll use some very simple C code to test our compiler installation. We won't
    need to import any headers or external libraries. We won't use C++ for this test
    because we need to perform an extra step with C++ to prevent name mangling, which
    we'll describe in greater detail in [Chapter 6](cdf64596-59dd-4805-8509-7315b7760b1e.xhtml), *Interacting
    with JavaScript and Debugging*. The code for this section is located in the `/chapter-04-installing-deps` folder
    of the `learn-webassembly` repository. Follow the instructions listed here to
    test out the EMSDK.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a subfolder named `/chapter-04-installing-deps` in your `/book-examples`
    folder. Next, create a new file in this folder named `main.c` and populate it
    with the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Compiling the C code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to compile a C/C++ file with Emscripten, we''ll use the `emcc` command.
    We need to pass some arguments to the compiler to ensure we get a valid output
    that we can utilize in the browser. To generate a Wasm file from a C/C++ file,
    the command follows this format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s a breakdown of each of the arguments for the `emcc` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Argument** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `<file.c>` | Path of the C or C++ input file that will be compiled down to
    a Wasm module; we''ll replace this with the actual file path when we run the command.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `-Os` | Compiler optimization level. This optimization flag allows for module
    instantiation without requiring Emscripten''s glue code. |'
  prefs: []
  type: TYPE_TB
- en: '| `-s WASM=1` | Tells the compiler to compile code to WebAssembly. |'
  prefs: []
  type: TYPE_TB
- en: '| `-s SIDE_MODULE=1` | Ensures only a `WebAssembly` module is output (no glue
    code). |'
  prefs: []
  type: TYPE_TB
- en: '| `-s BINARYEN_ASYNC_COMPILATION=0` | From official docs:Whether to compile
    the wasm asynchronously, which is more efficient and does not block the main thread.
    This is currently required for all but the smallest modules to run in V8*.* |'
  prefs: []
  type: TYPE_TB
- en: '| `-o <file.wasm>` | Path of output file `.wasm` file. We''ll replace this
    with the desired output path when we run the command. |'
  prefs: []
  type: TYPE_TB
- en: 'To test if Emscripten is working correctly, open the integrated terminal in
    VS Code and run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: It may take a minute to compile the file the first time, but subsequent builds
    will be much faster. If the compilation was successful, you should see a `main.wasm`
    file in the `/chapter-04-installing-deps` folder. If you encounter an error, Emscripten's
    error message should be descriptive enough to help you correct the issue.
  prefs: []
  type: TYPE_NORMAL
- en: 'If everything completed successfully, you can view the Wat associated with
    the `main.wasm` file by right-clicking `main.wasm` in VS Code''s file explorer
    and selecting Show WebAssembly from the context menu. The output should look like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: If the compiler ran successfully, you're ready to move on to the next step and
    write JavaScript code to interact with the module, which we'll cover in the next
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered the overall development workflow when working with
    WebAssembly. In order to generate our `.wasm` files, we're using Emscripten, which
    requires the installation of the EMSDK. Prior to reviewing any installation details,
    we discussed the technologies under the hood and described how they relate to
    each other and to WebAssembly. We covered each of the steps required to get EMDSK
    working locally on your computer. The installation process for the EMSDK on each
    platform was presented, as well as the installation and configuration instructions
    for the EMSDK. After installing the EMSDK , we tested the compiler (no to). That
    was the `emcc` command we ran in the previous section. Using the `emcc` command
    on a simple C code file to ensure Emscripten was working correctly. In the next
    chapter, we'll walk through the process of creating and loading your first module!
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What are the five steps in the development workflow?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which stage or end does Emscripten represent in the compilation process?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What does IR stand for (LLVM's output)?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What role does the EMSDK play with regard to Emscripten?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which EMSDK prerequisites are required on all three platforms (macOS, Windows,
    and Linux)?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why do you need to run the `emsdk_env` script before you can use the Emscripten
    compiler?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why do you need to add the `"${env:EMSCRIPTEN}/system/include"` path to the
    C/Cpp configuration file?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the command used to compile C/C++ down to Wasm modules?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What does the `-Os` compiler flag represent?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Emscripten: [http://emscripten.org](http://emscripten.org)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The LLVM Compiler Infrastructure Project: [https://llvm.org](https://llvm.org)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'C++ programming with Visual Studio Code: [https://code.visualstudio.com/docs/languages/cpp](https://code.visualstudio.com/docs/languages/cpp)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
