["```cpp\n#include \"../Test.h\"\nTEST\n{\n}\nTEST\n{\n    throw 1;\n}\n```", "```cpp\n#include \"../Test.h\"\nTEST(\"Test can be created\")\n{\n}\nTEST(\"Test with throw can be created\")\n{\n    throw 1;\n}\n```", "```cpp\n#include \"../Test.h\"\nTEST(\"Test can be created\")\n{\n}\nTEST(\"Test with throw can be created\")\n{\n    throw 1;\n}\n```", "```cpp\nTEST_EX(\"Test with throw can be created\", int)\n{\n    throw 1;\n}\n```", "```cpp\n#define TEST_EX( testName, exceptionType ) \\\nclass MERETDD_CLASS : public MereTDD::TestBase \\\n{ \\\npublic: \\\n    MERETDD_CLASS (std::string_view name) \\\n    : TestBase(name) \\\n    { \\\n        MereTDD::getTests().push_back(this); \\\n    } \\\n    void runEx () override \\\n    { \\\n        try \\\n        { \\\n            run(); \\\n        } \\\n        catch (exceptionType const &) \\\n        { \\\n        } \\\n    } \\\n    void run () override; \\\n}; \\\nMERETDD_CLASS MERETDD_INSTANCE(testName); \\\nvoid MERETDD_CLASS::run ()\n```", "```cpp\n    virtual void runEx ()\n    {\n        run();\n    }\n    virtual void run () = 0;\n```", "```cpp\ninline int runTests (std::ostream & output)\n{\n    output << \"Running \"\n        << getTests().size()\n        << \" tests\\n\";\n    int numPassed = 0;\n    int numFailed = 0;\n    for (auto * test: getTests())\n    {\n        output << \"---------------\\n\"\n            << test->name()\n            << std::endl;\n        try\n        {\n            test->runEx();\n        }\n        catch (...)\n        {\n            test->setFailed(\"Unexpected exception thrown.\");\n        }\n```", "```cpp\nRunning 2 tests\n---------------\nTest can be created\nPassed\n---------------\nTest with throw can be created\nPassed\n---------------\nAll tests passed.\nProgram ended with exit code: 0\n```", "```cpp\n#include \"../Test.h\"\nTEST(\"Test can be created\")\n{\n}\nTEST_EX(\"Test with throw can be created\", int)\n{\n    throw 1;\n}\nTEST_EX(\"Test that never throws can be created\", int)\n{\n}\n```", "```cpp\nRunning 3 tests\n---------------\nTest can be created\nPassed\n---------------\nTest with throw can be created\nPassed\n---------------\nTest that never throws can be created\nPassed\n---------------\nAll tests passed.\nProgram ended with exit code: 0\n```", "```cpp\n    void runEx () override \\\n    { \\\n        try \\\n        { \\\n            run(); \\\n        } \\\n        catch (exceptionType const &) \\\n        { \\\n            return; \\\n        } \\\n        throw 1; \\\n    } \\\n```", "```cpp\nRunning 3 tests\n---------------\nTest can be created\nPassed\n---------------\nTest with throw can be created\nPassed\n---------------\nTest that never throws can be created\nFailed\nUnexpected exception thrown.\n---------------\nTests passed: 2\nTests failed: 1\nProgram ended with exit code: 1\n```", "```cpp\nclass MissingException\n{\npublic:\n    MissingException (std::string_view exType)\n    : mExType(exType)\n    { }\n    std::string_view exType () const\n    {\n        return mExType;\n    }\nprivate:\n    std::string mExType;\n};\n```", "```cpp\n    void runEx () override \\\n    { \\\n        try \\\n        { \\\n            run(); \\\n        } \\\n        catch (exceptionType const &) \\\n        { \\\n            return; \\\n        } \\\n        throw MereTDD::MissingException(#exceptionType); \\\n    } \\\n```", "```cpp\n        try\n        {\n            test->runEx();\n        }\n        catch (MissingException const & ex)\n        {\n            std::string message = \"Expected exception type \";\n            message += ex.exType();\n            message += \" was not thrown.\";\n            test->setFailed(message);\n        }\n        catch (...)\n        {\n            test->setFailed(\"Unexpected exception thrown.\");\n        }\n```", "```cpp\nRunning 3 tests\n---------------\nTest can be created\nPassed\n---------------\nTest with throw can be created\nPassed\n---------------\nTest that never throws can be created\nFailed\nExpected exception type int was not thrown.\n---------------\nTests passed: 2\nTests failed: 1\nProgram ended with exit code: 1\n```", "```cpp\n// This test should fail because it throws an\n// unexpected exception.\nTEST(\"Test that throws unexpectedly can be created\")\n{\n    setExpectedFailureReason(\n        \"Unexpected exception thrown.\");\n    throw \"Unexpected\";\n}\n// This test should fail because it does not throw\n// an exception that it is expecting to be thrown.\nTEST_EX(\"Test that never throws can be created\", int)\n{\n    setExpectedFailureReason(\n        \"Expected exception type int was not thrown.\");\n}\n// This test should fail because it throws an\n// exception that does not match the expected type.\nTEST_EX(\"Test that throws wrong type can be created\", int)\n{\n    setExpectedFailureReason(\n        \"Unexpected exception thrown.\");\n    throw \"Wrong type\";\n}\n```", "```cpp\n    std::string_view reason () const\n    {\n        return mReason;\n    }\n    std::string_view expectedReason () const\n    {\n        return mExpectedReason;\n    }\n    void setFailed (std::string_view reason)\n    {\n        mPassed = false;\n        mReason = reason;\n    }\n    void setExpectedFailureReason (std::string_view reason)\n    {\n        mExpectedReason = reason;\n    }\nprivate:\n    std::string mName;\n    bool mPassed;\n    std::string mReason;\n    std::string mExpectedReason;\n};\n```", "```cpp\n        if (test->passed())\n        {\n            ++numPassed;\n            output << \"Passed\"\n                << std::endl;\n        }\n        else if (not test->expectedReason().empty() &&\n            test->expectedReason() == test->reason())\n        {\n            ++numPassed;\n            output << \"Expected failure\\n\"\n                << test->reason()\n                << std::endl;\n        }\n        else\n        {\n            ++numFailed;\n            output << \"Failed\\n\"\n                << test->reason()\n                << std::endl;\n        }\n```", "```cpp\nRunning 5 tests\n---------------\nTest can be created\nPassed\n---------------\nTest that throws unexpectedly can be created\nExpected failure\nUnexpected exception thrown.\n---------------\nTest with throw can be created\nPassed\n---------------\nTest that never throws can be created\nExpected failure\nExpected exception type int was not thrown.\n---------------\nTest that throws wrong type can be created\nExpected failure\nUnexpected exception thrown.\n---------------\nAll tests passed.\nProgram ended with exit code: 0\n```", "```cpp\n// This test should throw an unexpected exception\n// but it doesn't. We need to somehow let the user\n// know what happened. This will result in a missed failure.\nTEST(\"Test that should throw unexpectedly can be created\")\n{\n    setExpectedFailureReason(\n        \"Unexpected exception thrown.\");\n}\n```", "```cpp\nRunning 6 tests\n---------------\nTest can be created\nPassed\n---------------\nTest that throws unexpectedly can be created\nExpected failure\nUnexpected exception thrown.\n---------------\nTest that should throw unexpectedly can be created\nPassed\n---------------\nTest with throw can be created\nPassed\n---------------\nTest that never throws can be created\nExpected failure\nExpected exception type int was not thrown.\n---------------\nTest that throws wrong type can be created\nExpected failure\nUnexpected exception thrown.\n---------------\nAll tests passed.\nProgram ended with exit code: 0\n```", "```cpp\ninline int runTests (std::ostream & output)\n{\n    output << \"Running \"\n        << getTests().size()\n        << \" tests\\n\";\n    int numPassed = 0;\n    int numMissedFailed = 0;\n    int numFailed = 0;\n```", "```cpp\n        if (test->passed())\n        {\n            if (not test->expectedReason().empty())\n            {\n                // This test passed but it was supposed\n                // to have failed.\n                ++numMissedFailed;\n                output << \"Missed expected failure\\n\"\n                    << \"Test passed but was expected to fail.\"\n                    << std::endl;\n            }\n            else\n            {\n                ++numPassed;\n                output << \"Passed\"\n                    << std::endl;\n            }\n        }\n```", "```cpp\n    output << \"---------------\\n\";\n    output << \"Tests passed: \" << numPassed\n           << \"\\nTests failed: \" << numFailed;\n    if (numMissedFailed != 0)\n    {\n        output << \"\\nTests failures missed: \" <<         numMissedFailed;\n    }\n    output << std::endl;\n    return numFailed;\n}\n```", "```cpp\nRunning 6 tests\n---------------\nTest can be created\nPassed\n---------------\nTest that throws unexpectedly can be created\nExpected failure\nUnexpected exception thrown.\n---------------\nTest that should throw unexpectedly can be created\nMissed expected failure\nTest passed but was expected to fail.\n---------------\nTest with throw can be created\nPassed\n---------------\nTest that never throws can be created\nExpected failure\nExpected exception type int was not thrown.\n---------------\nTest that throws wrong type can be created\nExpected failure\nUnexpected exception thrown.\n---------------\nTests passed: 5\nTests failed: 0\nTests failures missed: 1\nProgram ended with exit code: 0\n```"]