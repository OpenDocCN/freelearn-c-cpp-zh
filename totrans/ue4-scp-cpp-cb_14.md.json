["```cpp\nusing UnrealBuildTool;\n\npublic class Chapter_14 : ModuleRules\n{\n  public Chapter_14(ReadOnlyTargetRules Target) : base(Target)\n  {\n    PCHUsage = PCHUsageMode.UseExplicitOrSharedPCHs;\n\n    PublicDependencyModuleNames.AddRange(new string[] { \"Core\", \n    \"CoreUObject\", \"Engine\", \"InputCore\" });\n\n    PrivateDependencyModuleNames.AddRange(new string[] { });\n\n    // Uncomment if you are using Slate UI\n    PrivateDependencyModuleNames.AddRange(new string[] { \"Slate\", \n    \"SlateCore\" });\n\n    // Uncomment if you are using online features\n    // PrivateDependencyModuleNames.Add(\"OnlineSubsystem\");\n\n    // To include OnlineSubsystemSteam, add it to the plugins section in your uproject file with the Enabled attribute set to true\n  }\n}\n```", "```cpp\n#pragma once\n\n#include \"CoreMinimal.h\"\n#include \"GameFramework/GameModeBase.h\"\n#include \"CustomHUDGameMode.generated.h\"\n\n/**\n * \n */\nUCLASS()\nclass CHAPTER_14_API ACustomHUDGameMode : public AGameModeBase\n{\n    GENERATED_BODY()\n\n    ACustomHUDGameMode();\n\n};\n```", "```cpp\n#include \"CustomHUDGameMode.h\"\n#include \"CustomHUD.h\"\n\nACustomHUDGameMode::ACustomHUDGameMode() : AGameModeBase()\n{\n    HUDClass = ACustomHUD::StaticClass();\n}\n```", "```cpp\n#pragma once\n\n#include \"CoreMinimal.h\"\n#include \"GameFramework/HUD.h\"\n#include \"CustomHUD.generated.h\"\n\n/**\n * \n */\nUCLASS()\nclass CHAPTER_14_API ACustomHUD : public AHUD\n{\n    GENERATED_BODY()\n\npublic:\n virtual void DrawHUD() override;\n\n};\n```", "```cpp\n#include \"CustomHUD.h\"\n#include \"Engine/Canvas.h\"\n\nvoid ACustomHUD::DrawHUD()\n{\n Super::DrawHUD();\n Canvas->DrawText(GEngine->GetSmallFont(), TEXT(\"Test string to be printed to screen\"), 10, 10); \n FCanvasBoxItem ProgressBar(FVector2D(5, 25), FVector2D(100, 5));\n Canvas->DrawItem(ProgressBar);\n DrawRect(FLinearColor::Blue, 5, 25, 100, 5);\n}\n```", "```cpp\nfloat DrawText(constUFont* InFont, constFString&InText, \n float X, float Y, float XScale = 1.f, float YScale = 1.f, \n constFFontRenderInfo&RenderInfo = FFontRenderInfo());\n```", "```cpp\n#pragma once\n\n#include \"CoreMinimal.h\"\n#include \"GameFramework/PlayerController.h\"\n#include \"CustomHUDPlayerController.generated.h\"\n\n/**\n * \n */\nUCLASS()\nclass CHAPTER_14_API ACustomHUDPlayerController : public APlayerController\n{\n    GENERATED_BODY()\n\npublic:\n virtual void BeginPlay() override;\n\n};\n```", "```cpp\n#include \"CustomHUDPlayerController.h\"\n#include \"SlateBasics.h\"\n\nvoid ACustomHUDPlayerController::BeginPlay()\n{\n Super::BeginPlay();\n TSharedRef<SVerticalBox> widget = SNew(SVerticalBox)\n + SVerticalBox::Slot()\n .HAlign(HAlign_Center)\n .VAlign(VAlign_Center)\n [\n SNew(SButton)\n .Content()\n [\n SNew(STextBlock)\n .Text(FText::FromString(TEXT(\"Test button\")))\n ]\n ];\n GEngine->GameViewport->AddViewportWidgetForPlayer(GetLocalPlayer(), widget, 1);\n}\n```", "```cpp\n#pragma once\n\n#include \"CoreMinimal.h\"\n#include \"GameFramework/GameModeBase.h\"\n#include \"SlateHUDGameMode.generated.h\"\n\n/**\n * \n */\nUCLASS()\nclass CHAPTER_14_API ASlateHUDGameMode : public AGameModeBase\n{\n    GENERATED_BODY()\n\n ASlateHUDGameMode();\n};\n```", "```cpp\n#include \"SlateHUDGameMode.h\"\n#include \"CustomHUDPlayerController.h\"\n\nASlateHUDGameMode::ASlateHUDGameMode() : Super()\n{\n PlayerControllerClass = ACustomHUDPlayerController::StaticClass();\n}\n```", "```cpp\n#pragma once\n\n#include \"CoreMinimal.h\"\n#include \"GameFramework/PlayerController.h\"\n#include \"ScalingUIPlayerController.generated.h\"\n\n/**\n * \n */\nUCLASS()\nclass CHAPTER_14_API AScalingUIPlayerController : public APlayerController\n{\n    GENERATED_BODY()\n\npublic:\n virtual void BeginPlay() override;\n};\n\n```", "```cpp\n#include \"ScalingUIPlayerController.h\"\n#include \"SlateBasics.h\"\n\nvoid AScalingUIPlayerController::BeginPlay()\n{\n Super::BeginPlay();\n TSharedRef<SVerticalBox> widget = SNew(SVerticalBox)\n + SVerticalBox::Slot()\n\n .HAlign(HAlign_Center)\n .VAlign(VAlign_Center)\n [\n SNew(SButton)\n .Content()\n [\n SNew(STextBlock)\n .Text(FText::FromString(TEXT(\"Test button\")))\n ]\n ];\n GEngine->GameViewport->AddViewportWidgetForPlayer(GetLocalPlayer(), widget, 1);\n}\n```", "```cpp\n#pragma once\n\n#include \"CoreMinimal.h\"\n#include \"GameFramework/GameModeBase.h\"\n#include \"ScalingUIGameMode.generated.h\"\n\n/**\n * \n */\nUCLASS()\nclass CHAPTER_14_API AScalingUIGameMode : public AGameModeBase\n{\n    GENERATED_BODY()\n\n AScalingUIGameMode();\n};\n```", "```cpp\n#include \"ScalingUIGameMode.h\"\n#include \"CustomHUDPlayerController.h\"\n\nAScalingUIGameMode::AScalingUIGameMode() : AGameModeBase()\n{\n    PlayerControllerClass = ACustomHUDPlayerController::StaticClass();\n}\n```", "```cpp\n    [/Script/Engine.UserInterfaceSettings]\n    UIScaleCurve=(EditorCurveData=(PreInfinityExtrap=RCCE_Constant,PostInfinityExtrap=RCCE_Constant,DefaultValue=340282346638528859811704183484516925440.000000,Keys=((Time=480.000000,Value=1.000000),(Time=720.000000,Value=1.000000),(Time=1080.000000,Value=1.000000),(Time=8640.000000,Value=8.000000))),ExternalCurve=None)\n    ```", "```cpp\n    [Section Name] \n    Key=Value \n    ```", "```cpp\n    #pragma once\n\n    #include \"CoreMinimal.h\"\n    #include \"GameFramework/GameModeBase.h\"\n    #include \"SlateBasics.h\"\n    #include \"ToggleHUDGameMode.generated.h\"\n\n    UCLASS()\n    class CHAPTER_14_API AToggleHUDGameMode : public AGameModeBase\n    {\n     GENERATED_BODY()\n\n    public:\n     UPROPERTY()\n     FTimerHandle HUDToggleTimer;\n\n     TSharedPtr<SVerticalBox> widget;\n\n     virtual void BeginPlay() override;\n     virtual void EndPlay(const EEndPlayReason::Type EndPlayReason) override;\n    };\n    ```", "```cpp\n    void AToggleHUDGameMode::BeginPlay()\n    {\n        Super::BeginPlay();\n        widget = SNew(SVerticalBox)\n            + SVerticalBox::Slot()\n            .HAlign(HAlign_Center)\n            .VAlign(VAlign_Center)\n            [\n                SNew(SButton)\n                .Content()\n            [\n                SNew(STextBlock)\n                .Text(FText::FromString(TEXT(\"Test button\")))\n            ]\n            ];\n\n        auto player = GetWorld()->GetFirstLocalPlayerFromController();\n\n        GEngine->GameViewport->AddViewportWidgetForPlayer(player, widget.ToSharedRef(), 1);\n\n        auto lambda = FTimerDelegate::CreateLambda\n        ([this]\n        {\n            if (this->widget->GetVisibility().IsVisible())\n            {\n                this->widget->SetVisibility(EVisibility::Hidden);\n\n            }\n            else\n            {\n                this->widget->SetVisibility(EVisibility::Visible);\n            }\n        });\n\n        GetWorld()->GetTimerManager().SetTimer(HUDToggleTimer, lambda, 5, true);\n    }\n    ```", "```cpp\n    void AToggleHUDGameMode::EndPlay(const EEndPlayReason::Type EndPlayReason)\n    {\n        Super::EndPlay(EndPlayReason);\n        GetWorld()->GetTimerManager().ClearTimer(HUDToggleTimer);\n    }\n    ```", "```cpp\n    #pragma once\n\n    #include \"CoreMinimal.h\"\n    #include \"GameFramework/GameModeBase.h\"\n    #include \"SlateBasics.h\"\n    #include \"ClickEventGameMode.generated.h\"\n\n    UCLASS()\n    class CHAPTER_14_API AClickEventGameMode : public AGameModeBase\n    {\n        GENERATED_BODY()\n\n    private:\n     TSharedPtr<SVerticalBox> Widget;\n     TSharedPtr<STextBlock> ButtonLabel;\n\n    public:\n     virtual void BeginPlay() override;\n     FReply ButtonClicked();\n    };\n    ```", "```cpp\n    void AClickEventGameMode::BeginPlay()\n    {\n        Super::BeginPlay();\n\n        Widget = SNew(SVerticalBox)\n            + SVerticalBox::Slot()\n            .HAlign(HAlign_Center)\n            .VAlign(VAlign_Center)\n            [\n                SNew(SButton)\n                .OnClicked(FOnClicked::CreateUObject(this, &AClickEventGameMode::ButtonClicked))\n            .Content()\n            [\n                SAssignNew(ButtonLabel, STextBlock)\n                .Text(FText::FromString(TEXT(\"Click me!\")))\n            ]\n            ];\n\n        auto player = GetWorld()->GetFirstLocalPlayerFromController();\n\n        GEngine->GameViewport->AddViewportWidgetForPlayer(player, Widget.ToSharedRef(), 1);\n\n        GetWorld()->GetFirstPlayerController()->bShowMouseCursor = true;\n\n        auto pc = GEngine->GetFirstLocalPlayerController(GetWorld());\n\n        EMouseLockMode lockMode = EMouseLockMode::DoNotLock;\n\n        auto inputMode = FInputModeUIOnly().SetLockMouseToViewportBehavior(lockMode).SetWidgetToFocus(Widget);\n\n        pc->SetInputMode(inputMode);\n\n    }\n    ```", "```cpp\n    FReply AClickEventGameMode::ButtonClicked()\n    {\n        ButtonLabel->SetText(FString(TEXT(\"Clicked!\")));\n        return FReply::Handled();\n    }\n    ```", "```cpp\n    /** The delegate to execute when the button is clicked */\n     FOnClickedOnClicked;\n    ```", "```cpp\n    #pragma once\n\n    #include \"CoreMinimal.h\"\n    #include \"GameFramework/GameStateBase.h\"\n    #include \"SlateBasics.h\"\n    #include \"AttributeGameMode.generated.h\"\n\n    /**\n     * \n     */\n    UCLASS()\n    class CHAPTER_14_API AAttributeGameMode : public AGameModeBase\n    {\n     GENERATED_BODY()\n\n     TSharedPtr<SVerticalBox> Widget;\n     FText GetButtonLabel() const;\n\n    public:\n     virtual void BeginPlay() override;\n\n    };\n    ```", "```cpp\n    void AAttributeGameMode::BeginPlay()\n    {\n        Super::BeginPlay();\n\n        Widget = SNew(SVerticalBox)\n            + SVerticalBox::Slot()\n            .HAlign(HAlign_Center)\n            .VAlign(VAlign_Center)\n            [\n                SNew(SButton)\n                .Content()\n            [\n                SNew(STextBlock)\n                .Text(TAttribute<FText>::Create(TAttribute<FText>::FGetter::CreateUObject(this, &AAttributeGameMode::GetButtonLabel)))\n            ]\n            ];\n        GEngine->GameViewport->AddViewportWidgetForPlayer(GetWorld()->GetFirstLocalPlayerFromController(), Widget.ToSharedRef(), 1);\n\n    }\n    ```", "```cpp\n    FText AAttributeGameMode::GetButtonLabel() const\n    {\n        FVector ActorLocation = GetWorld()->GetFirstPlayerController()->GetPawn()->GetActorLocation();\n        return FText::FromString(FString::Printf(TEXT(\"%f, %f, %f\"), ActorLocation.X, ActorLocation.Y, ActorLocation.Z));\n    }\n    ```", "```cpp\n    .Text( \n     TAttribute<FText>::Create(TAttribute<FText>::FGetter::Creat\n     eUObject(this, &AAttributeGameMode::GetButtonLabel)))\n    ```", "```cpp\n    template<typenameObjectType>\n     classTAttribute\n     {\n     public:\n     /**\n     * Attribute 'getter' delegate\n     *\n     * ObjectTypeGetValue() const\n     *\n     * @return The attribute's value\n     */\n     DECLARE_DELEGATE_RetVal(ObjectType, FGetter);\n     (...)\n     }\n    ```", "```cpp\n    #pragma once\n    #include \"SlateBasics.h\"\n    #include \"SlateExtras.h\"\n\n    class FCookbookStyle\n    {\n    public:\n        static void Initialize();\n        static void Shutdown();\n        static void ReloadTextures();\n        static const ISlateStyle& Get();\n        static FName GetStyleSetName();\n\n    private:\n        static TSharedRef< class FSlateStyleSet > Create();\n    private:\n        static TSharedPtr< class FSlateStyleSet > CookbookStyleInstance;\n    };\n    ```", "```cpp\n    #include \"CookbookStyle.h\"\n    #include \"SlateGameResources.h\"\n\n    TSharedPtr< FSlateStyleSet > FCookbookStyle::CookbookStyleInstance = NULL;\n\n    void FCookbookStyle::Initialize()\n    {\n        if (!CookbookStyleInstance.IsValid())\n        {\n            CookbookStyleInstance = Create();\n        FSlateStyleRegistry::RegisterSlateStyle(*CookbookStyleInstance);\n        }\n    }\n\n    void FCookbookStyle::Shutdown()\n    {\n        FSlateStyleRegistry::UnRegisterSlateStyle(*CookbookStyleInstance);\n        ensure(CookbookStyleInstance.IsUnique());\n        CookbookStyleInstance.Reset();\n    }\n\n    FName FCookbookStyle::GetStyleSetName()\n    {\n        static FName StyleSetName(TEXT(\"CookbookStyle\"));\n        return StyleSetName;\n    }\n\n    ```", "```cpp\n    #define IMAGE_BRUSH( RelativePath, ... ) FSlateImageBrush( FPaths::GameContentDir() / \"Slate\"/ RelativePath + TEXT(\".png\"), __VA_ARGS__ )\n    #define BOX_BRUSH( RelativePath, ... ) FSlateBoxBrush( FPaths::GameContentDir() / \"Slate\"/ RelativePath + TEXT(\".png\"), __VA_ARGS__ )\n    #define BORDER_BRUSH( RelativePath, ... ) FSlateBorderBrush( FPaths::GameContentDir() / \"Slate\"/ RelativePath + TEXT(\".png\"), __VA_ARGS__ )\n    #define TTF_FONT( RelativePath, ... ) FSlateFontInfo( FPaths::GameContentDir() / \"Slate\"/ RelativePath + TEXT(\".ttf\"), __VA_ARGS__ )\n    #define OTF_FONT( RelativePath, ... ) FSlateFontInfo( FPaths::GameContentDir() / \"Slate\"/ RelativePath + TEXT(\".otf\"), __VA_ARGS__ )\n\n    TSharedRef< FSlateStyleSet > FCookbookStyle::Create()\n    {\n        TSharedRef<FSlateStyleSet> StyleRef = FSlateGameResources::New(FCookbookStyle::GetStyleSetName(), \"/Game/Slate\", \"/Game/Slate\");\n        FSlateStyleSet& Style = StyleRef.Get();\n\n        Style.Set(\"NormalButtonBrush\",\n            FButtonStyle().\n            SetNormal(BOX_BRUSH(\"Button\", FVector2D(54, 54), FMargin(14.0f / 54.0f))));\n        Style.Set(\"NormalButtonText\",\n            FTextBlockStyle(FTextBlockStyle::GetDefault())\n            .SetColorAndOpacity(FSlateColor(FLinearColor(1, 1, 1, 1))));\n        return StyleRef;\n    }\n\n    #undef IMAGE_BRUSH\n    #undef BOX_BRUSH\n    #undef BORDER_BRUSH\n    #undef TTF_FONT\n    #undef OTF_FONT\n\n    void FCookbookStyle::ReloadTextures()\n    {\n        FSlateApplication::Get().GetRenderer()->ReloadTextureResources();\n    }\n\n    const ISlateStyle& FCookbookStyle::Get()\n    {\n        return *CookbookStyleInstance;\n    }\n    ```", "```cpp\n    #pragma once\n\n    #include \"CoreMinimal.h\"\n    #include \"GameFramework/GameModeBase.h\"\n    #include \"SlateBasics.h\"\n    #include \"StyledHUDGameMode.generated.h\"\n\n    /**\n     * \n     */\n    UCLASS()\n    class CHAPTER_14_API AStyledHUDGameMode : public AGameModeBase\n    {\n        GENERATED_BODY()\n\n        TSharedPtr<SVerticalBox> Widget;\n\n    public:\n        virtual void BeginPlay() override;\n    };\n    ```", "```cpp\n    #include \"StyledHUDGameMode.h\"\n    #include \"CookbookStyle.h\"\n\n    void AStyledHUDGameMode::BeginPlay()\n    {\n        Super::BeginPlay();\n\n        Widget = SNew(SVerticalBox)\n            + SVerticalBox::Slot()\n            .HAlign(HAlign_Center)\n            .VAlign(VAlign_Center)\n            [\n                SNew(SButton)\n                .ButtonStyle(FCookbookStyle::Get(), \"NormalButtonBrush\")\n            .ContentPadding(FMargin(16))\n            .Content()\n            [\n                SNew(STextBlock)\n                .TextStyle(FCookbookStyle::Get(), \"NormalButtonText\")\n            .Text(FText::FromString(\"Styled Button\"))\n            ]\n            ];\n        GEngine->GameViewport->AddViewportWidgetForPlayer(GetWorld()->GetFirstLocalPlayerFromController(), Widget.ToSharedRef(), 1);\n\n    }\n    ```", "```cpp\n    #pragma once\n\n    #include \"CoreMinimal.h\"\n    #include \"CookbookStyle.h\"\n\n    class Chapter_14Module : public FDefaultGameModuleImpl\n    {\n     virtual void StartupModule() override\n     {\n     FCookbookStyle::Initialize();\n     };\n     virtual void ShutdownModule() override\n     {\n     FCookbookStyle::Shutdown();\n     };\n    };\n    ```", "```cpp\n    #include \"Chapter_14.h\"\n    #include \"Modules/ModuleManager.h\"\n\n    IMPLEMENT_PRIMARY_GAME_MODULE(Chapter_14Module, Chapter_14, \"Chapter_14\" );\n    ```", "```cpp\n    .ButtonStyle(FCookbookStyle::Get(), \"NormalButtonBrush\")\n     .TextStyle(FCookbookStyle::Get(), \"NormalButtonText\")\n    ```", "```cpp\n    using UnrealBuildTool;\n\n    public class Chapter_14 : ModuleRules\n    {\n      public Chapter_14(ReadOnlyTargetRules Target) : base(Target)\n      {\n        PCHUsage = PCHUsageMode.UseExplicitOrSharedPCHs;\n\n        PublicDependencyModuleNames.AddRange(new string[] { \"Core\", \"CoreUObject\", \"Engine\", \"InputCore\" });\n\n        PrivateDependencyModuleNames.AddRange(new string[] { });\n\n        // Uncomment if you are using Slate UI\n        PrivateDependencyModuleNames.AddRange(new string[] { \"Slate\", \n        \"SlateCore\", \"UMG\" });\n\n        // Uncomment if you are using online features\n        // PrivateDependencyModuleNames.Add(\"OnlineSubsystem\");\n\n        // To include OnlineSubsystemSteam, add it to the plugins \n        // section in your uproject file with the Enabled attribute\n        // set to true\n      }\n    }\n    ```", "```cpp\n    #pragma once\n\n    #include \"CoreMinimal.h\"\n    #include \"Widgets/SCompoundWidget.h\"\n\n    class CHAPTER_14_API SCustomButton : public SCompoundWidget\n    {\n        SLATE_BEGIN_ARGS(SCustomButton)\n            : _Label(TEXT(\"Default Value\"))\n            , _ButtonClicked()\n        {}\n        SLATE_ATTRIBUTE(FString, Label)\n            SLATE_EVENT(FOnClicked, ButtonClicked)\n            SLATE_END_ARGS()\n\n    public:\n        void Construct(const FArguments& InArgs);\n        TAttribute<FString> Label;\n        FOnClicked ButtonClicked;\n    };\n    ```", "```cpp\n    #include \"CustomButton.h\"\n    #include \"SlateOptMacros.h\"\n    #include \"Chapter_14.h\"\n\n    void SCustomButton::Construct(const FArguments& InArgs)\n    {\n        Label = InArgs._Label;\n        ButtonClicked = InArgs._ButtonClicked;\n        ChildSlot.VAlign(VAlign_Center)\n            .HAlign(HAlign_Center)\n            [SNew(SButton)\n            .OnClicked(ButtonClicked)\n            .Content()\n            [\n                SNew(STextBlock)\n                .Text_Lambda([this] {return FText::FromString(Label.Get()); })\n            ]\n            ];\n    }\n    ```", "```cpp\n    #pragma once\n\n    #include \"CoreMinimal.h\"\n    #include \"Components/Widget.h\"\n    #include \"CustomButton.h\"\n    #include \"SlateDelegates.h\"\n    #include \"CustomButtonWidget.generated.h\"\n\n    DECLARE_DYNAMIC_DELEGATE_RetVal(FString, FGetString);\n    DECLARE_DYNAMIC_MULTICAST_DELEGATE(FButtonClicked); \n    UCLASS()\n    class CHAPTER_14_API UCustomButtonWidget : public UWidget\n    {\n        GENERATED_BODY()\n\n    protected:\n     TSharedPtr<SCustomButton> MyButton;\n\n     virtual TSharedRef<SWidget> RebuildWidget() override;\n\n    public:\n     UCustomButtonWidget();\n     //multicast\n     UPROPERTY(BlueprintAssignable)\n     FButtonClicked ButtonClicked;\n\n     FReply OnButtonClicked();\n\n     UPROPERTY(BlueprintReadWrite, EditAnywhere)\n     FString Label;\n\n     //MUST be of the form varnameDelegate\n     UPROPERTY()\n     FGetString LabelDelegate;\n\n     virtual void SynchronizeProperties() override;\n    };\n    ```", "```cpp\n    #include \"CustomButtonWidget.h\"\n    #include \"Chapter_14.h\"\n\n    TSharedRef<SWidget> UCustomButtonWidget::RebuildWidget()\n    {\n        MyButton = SNew(SCustomButton)\n            .ButtonClicked(BIND_UOBJECT_DELEGATE(FOnClicked, OnButtonClicked));\n        return MyButton.ToSharedRef();\n    }\n\n    UCustomButtonWidget::UCustomButtonWidget()\n        :Label(TEXT(\"Default Value\"))\n    {\n\n    }\n\n    FReply UCustomButtonWidget::OnButtonClicked()\n    {\n        ButtonClicked.Broadcast();\n        return FReply::Handled();\n    }\n\n    void UCustomButtonWidget::SynchronizeProperties()\n    {\n        Super::SynchronizeProperties();\n        TAttribute<FString> LabelBinding = OPTIONAL_BINDING(FString, Label);\n        MyButton->Label = LabelBinding;\n    }\n    ```"]