["```cpp\n\n1 int max(int a, int b) { \n\n2   if (a > b) \n\n3     return a; \n\n4   return b; \n\n5 }\n```", "```cpp\n1 int max(int a, int b) { \n\n2   if (a > b) \n\n3     return a; \n\n4   return b // missing ; \n\n5 }\n```", "```cpp\nmax_invalid_syntax.cpp:4:11: error: expected ’;’ after return statement\n  return b // missing ;\n          ^\n          ;\n```", "```cpp\n1 int max(int a, int b) { \n\n2   if (a > b) \n\n3     return a; \n\n4   return &b; // invalid return type \n\n5 }\n```", "```cpp\nmax_invalid_sema.cpp:4:10: error: cannot initialize return object of type \\\n’int’ with an rvalue of type ’int *’\n  return &b; // invalid return type\n         ^~\n```", "```cpp\n1 #include <iostream> \n\n2  \n\n3 int main() { \n\n4   std::cout << \"Hello world!\" << std::endl; \n\n5   return 0; \n\n6 }\n```", "```cpp\n$ <...>/llvm-project/install/bin/clang hello.cpp -o /tmp/hello -lstdc++\n```", "```cpp\n$ <...>/llvm-project/install/bin/clang hello.cpp -o /tmp/hello -lstdc++ \\\n                                       -ccc-print-phases\n```", "```cpp\n              +- 0: input, \"hello.cpp\", c++\n         +- 1: preprocessor, {0}, c++-cpp-output\n      +- 2: compiler, {1}, ir\n   +- 3: backend, {2}, assembler\n+- 4: assembler, {3}, object\n|- 5: input, \"1%dM\", object\n6 : linker, {4, 5}, image\n```", "```cpp\n1#include <iostream> \n\n2 ...\n```", "```cpp\n$ <...>/llvm-project/install/bin/clang hello.cpp -o /tmp/hello -lstdc++ -###\n```", "```cpp\n1clang version 18.1.0rc (https://github.com/llvm/llvm-project.git ...) \n\n2  \"<...>/llvm-project/install/bin/clang-18\" \n\n3    \"-cc1\" ... \\ \n\n4    \"-internal-isystem\" \\ \n\n5    \"/usr/include/c++/13\" ... \\ \n\n6    \"-internal-isystem\" \\ \n\n7    \"/usr/include/c++/13/x86_64-redhat-linux\" ... \\ \n\n8    \"-internal-isystem\" ... \\ \n\n9    \"<...>/llvm-project/install/lib/clang/18/include\" ... \\ \n\n10    \"-internal-externc-isystem\" \\ \n\n11    \"/usr/include\" ... \\ \n\n12    \"-o\" \"/tmp/hello-XXX.o\" \"-x\" \"c++\" \"hello.cpp\" \n\n13  \".../bin/ld\" ... \\ \n\n14    \"-o\" \"/tmp/hello\" ... \\ \n\n15    \"/tmp/hello-XXX.o\" \\ \n\n16    \"-lstdc++\" ...\n```", "```cpp\n$<...>/llvm-project/install/bin/clang -c hello.cpp \\\n                                      -o /tmp/hello.o\nas -o /tmp/hello.o /tmp/hello.s\n```", "```cpp\n$ lldb <...>/llvm-project/install/bin/clang -- hello.cpp -o /tmp/hello \\\n                                               -lstdc++\n```", "```cpp\n1$ lldb <...>/llvm-project/install/bin/clang -- hello.cpp -o /tmp/hello.o -lstdc++ \n\n2 ... \n\n3 (lldb) b clang::ParseAST \n\n4 ... \n\n5 (lldb) r \n\n6 ... \n\n72  locations added to breakpoint 1 \n\n8 ... \n\n9 Process 247135 stopped and restarted: thread 1 received signal: SIGCHLD \n\n10 Process 247135 stopped and restarted: thread 1 received signal: SIGCHLD \n\n11 Process 247135 exited with status = 0 (0x00000000) \n\n12 (lldb)\n```", "```cpp\n$ <...>/llvm-project/install/bin/clang -c hello.cpp  \\\n                                       -o /tmp/hello.o \\\n                                       -###\nclang version 18.1.0rc ...\nInstalledDir: <...>/llvm-project/install/bin\n (in-process)\n \"<...>/llvm-project/install/bin/clang-18\" \"-cc1\"...\"hello.cpp\"\n ...\n```", "```cpp\n1$ lldb <...>/llvm-project/install/bin/clang -- -cc1 hello.cpp -o /tmp/hello.o \n\n2 ... \n\n3 (lldb) b clang::ParseAST \n\n4 ... \n\n5 (lldb) r \n\n6 ... \n\n72  locations added to breakpoint 1 \n\n8 Process 249890 stopped \n\n9 * thread #1, name = ’clang’, stop reason = breakpoint 1.1 \n\n10     frame #0: ... at ParseAST.cpp:117:3 \n\n11    114 \n\n12    115  void clang::ParseAST(Sema &S, bool PrintStats, bool SkipFunctionBodies) { \n\n13    116    // Collect global stats on Decls/Stmts (until we have a module streamer). \n\n14 -> 117    if (PrintStats) { \n\n15    118      Decl::EnableStatistics(); \n\n16    119      Stmt::EnableStatistics(); \n\n17    120    } \n\n18 (lldb) c \n\n19 Process 249890 resuming \n\n20 hello.cpp:1:10: fatal error: ’iostream’ file not found \n\n21 #include <iostream> \n\n22          ^~~~~~~~~~ \n\n231  error generated. \n\n24 Process 249890 exited with status = 1 (0x00000001) \n\n25 (lldb)\n```", "```cpp\nlldb <...>/llvm-project/install/bin/clang -- -cc1                    \\\n     -internal-isystem /usr/include/c++/13                           \\\n     -internal-isystem /usr/include/c++/13/x86_64-redhat-linux       \\\n     -internal-isystem <...>/llvm-project/install/lib/clang/18/include \\\n     -internal-externc-isystem /usr/include                          \\\n     hello.cpp                                                       \\\n     -o /tmp/hello.o\n```", "```cpp\n1(lldb) b clang::ParseAST \n\n2 ... \n\n3 (lldb) r \n\n4 ... \n\n52  locations added to breakpoint 1 \n\n6 Process 251736 stopped \n\n7 * thread #1, name = ’clang’, stop reason = breakpoint 1.1 \n\n8    frame #0: 0x00007fffe803eae0 ... at ParseAST.cpp:117:3 \n\n9    114 \n\n10    115  void clang::ParseAST(Sema &S, bool PrintStats, bool SkipFunctionBodies) { \n\n11    116    // Collect global stats on Decls/Stmts (until we have a module streamer). \n\n12 -> 117    if (PrintStats) { \n\n13    118     Decl::EnableStatistics(); \n\n14    119     Stmt::EnableStatistics(); \n\n15    120    } \n\n16 (lldb) c \n\n17 Process 251736 resuming \n\n18 Process 251736 exited with status = 0 (0x00000000) \n\n19 (lldb)\n```", "```cpp\n$ <...>/llvm-project/install/bin/clang -cc1 -emit-html max.cpp\n```", "```cpp\n$ <...>/llvm-project/install/bin/clang -Xclang -emit-html max.cpp \\\n                                       -fsyntax-only\n```", "```cpp\n1 int max(int a, int b) { \n\n2   if (a > b) \n\n3     return a; \n\n4   return b; \n\n5 }\n```", "```cpp\n$ <...>/llvm-project/install/bin/clang -cc1 -dump-tokens max.cpp\n```", "```cpp\nint ’int’        [StartOfLine]  Loc=<max.cpp:1:1>\nidentifier ’max’         [LeadingSpace] Loc=<max.cpp:1:5>\nl_paren ’(’             Loc=<max.cpp:1:8>\nint ’int’               Loc=<max.cpp:1:9>\nidentifier ’a’   [LeadingSpace] Loc=<max.cpp:1:13>\ncomma ’,’               Loc=<max.cpp:1:14>\nint ’int’        [LeadingSpace] Loc=<max.cpp:1:16>\nidentifier ’b’   [LeadingSpace] Loc=<max.cpp:1:20>\nr_paren ’)’             Loc=<max.cpp:1:21>\nl_brace ’{’      [LeadingSpace] Loc=<max.cpp:1:23>\nif ’if’  [StartOfLine] [LeadingSpace]   Loc=<max.cpp:2:3>\nl_paren ’(’      [LeadingSpace] Loc=<max.cpp:2:6>\nidentifier ’a’          Loc=<max.cpp:2:7>\ngreater ’>’      [LeadingSpace] Loc=<max.cpp:2:9>\nidentifier ’b’   [LeadingSpace] Loc=<max.cpp:2:11>\nr_paren ’)’             Loc=<max.cpp:2:12>\nreturn ’return’  [StartOfLine] [LeadingSpace]   Loc=<max.cpp:3:5>\nidentifier ’a’   [LeadingSpace] Loc=<max.cpp:3:12>\nsemi ’;’                Loc=<max.cpp:3:13>\nreturn ’return’  [StartOfLine] [LeadingSpace]   Loc=<max.cpp:4:3>\nidentifier ’b’   [LeadingSpace] Loc=<max.cpp:4:10>\n```", "```cpp\nsemi ’;’                Loc=<max.cpp:4:11>\nr_brace ’}’      [StartOfLine]  Loc=<max.cpp:5:1>\neof ’’          Loc=<max.cpp:5:2>\n```", "```cpp\n1 namespace clangbook { \n\n2 template <typename T> class A {}; \n\n3 } // namespace clangbook \n\n4 clangbook::A<int> a;\n```", "```cpp\n1$ lldb <...>/llvm-project/install/bin/clang -- -cc1 annotation.cpp \n\n2 ... \n\n3 (lldb) b clang::Parser::ConsumeAnnotationToken \n\n4 ... \n\n5 (lldb) r \n\n6 ... \n\n7    608    } \n\n8    609 \n\n9    610    SourceLocation ConsumeAnnotationToken() { \n\n10 -> 611      assert(Tok.isAnnotation() && \"wrong consume method\"); \n\n11    612      SourceLocation Loc = Tok.getLocation(); \n\n12    613      PrevTokLocation = Tok.getAnnotationEndLoc(); \n\n13    614      PP.Lex(Tok); \n\n14 (lldb) p Tok.getAnnotationRange().printToString(PP.getSourceManager()) \n\n15 (std::string) \"<annotation.cpp:4:1, col:17>\"\n```", "```cpp\n$ <...>/llvm-project/install/bin/clang -cc1 -ast-dump max.cpp\n```", "```cpp\nTranslationUnitDecl 0xa9cb38 <<invalid sloc>> <invalid sloc>\n|-TypedefDecl 0xa9d3a8 <<invalid sloc>> <invalid sloc>\nimplicit __int128_t ’__int128’\n| ‘-BuiltinType 0xa9d100 ’__int128’\n...\n‘-FunctionDecl 0xae6a98 <max.cpp:1:1, line:5:1> line:1:5 max\n’int (int, int)’\n  |-ParmVarDecl 0xae6930 <col:9, col:13> col:13 used a ’int’\n  |-ParmVarDecl 0xae69b0 <col:16, col:20> col:20 used b ’int’\n  ‘-CompoundStmt 0xae6cd8 <col:23, line:5:1>\n    |-IfStmt 0xae6c70 <line:2:3, line:3:12>\n    | |-BinaryOperator 0xae6c08 <line:2:7, col:11> ’bool’ ’>’\n    | | |-ImplicitCastExpr 0xae6bd8 <col:7> ’int’ <LValueToRValue>\n    | | | ‘-DeclRefExpr 0xae6b98 <col:7> ’int’ lvalue ParmVar 0xae6930\n            ’a’ ’int’\n    | | ‘-ImplicitCastExpr 0xae6bf0 <col:11> ’int’ <LValueToRValue>\n    | |   ‘-DeclRefExpr 0xae6bb8 <col:11> ’int’ lvalue ParmVar 0xae69b0\n            ’b’ ’int’\n    | ‘-ReturnStmt 0xae6c60 <line:3:5, col:12>\n    |   ‘-ImplicitCastExpr 0xae6c48 <col:12> ’int’ <LValueToRValue>\n    |     ‘-DeclRefExpr 0xae6c28 <col:12> ’int’ lvalue ParmVar 0xae6930\n            ’a’ ’int’\n    ‘-ReturnStmt 0xae6cc8 <line:4:3, col:10>\n      ‘-ImplicitCastExpr 0xae6cb0 <col:10> ’int’ <LValueToRValue>\n```", "```cpp\n        ‘-DeclRefExpr 0xae6c90 <col:10> ’int’ lvalue ParmVar 0xae69b0\n            ’b’ ’int’\n```", "```cpp\nfunction-definition :\n        ... declarator ... function-body\n        ...\n```", "```cpp\n1int max(...) { \n\n2   ... \n\n3 }\n```", "```cpp\ndeclarator:\n        ...\n        ... parameters-and-qualifiers ...\n...\nparameters-and-qualifiers:\n        ( parameter-declaration-clause ) ...\n...\nparameter-declaration-clause:\n        parameter-declaration-list ...\nparameter-declaration-list:\n        parameter-declaration\n        parameter-declaration-list , parameter-declaration\n```", "```cpp\n1... (int a, int b) \n\n2   ...\n```", "```cpp\nfunction-body:\n       ... compound-statement\n       ...\n```", "```cpp\ncompound-statement:\n       { statement-seq ... }\nstatement-seq:\n       statement\n       statement-seq statement\n```", "```cpp\nstatement:\n        ...\n        selection-statement\n        ...\n        jump-statement\n        ...\n```", "```cpp\njump-statement:\n        ...\n        return expr-or-braced-init-list;\n        ...\n```", "```cpp\nexpr-or-braced-init-list:\n        expression\n        ...\n```", "```cpp\n$ lldb <...>/llvm-project/install/bin/clang -- -cc1 max.cpp\n```", "```cpp\n1(lldb) b clang::Parser::ParseReturnStatement \n\n2 (lldb) r \n\n3 ... \n\n4 (lldb) c \n\n5 ... \n\n6 * thread #1, name = ’clang’, stop reason = breakpoint 1.1 \n\n7    frame #0: ... clang::Parser::ParseReturnStatement(...) ... \n\n8    2421 StmtResult Parser::ParseReturnStatement() { \n\n9 -> 2422   assert((Tok.is(tok::kw_return) || Tok.is(tok::kw_co_return)) && \n\n10    2423         \"Not a return stmt!\"); \n\n11    2424   bool IsCoreturn = Tok.is(tok::kw_co_return); \n\n12    2425   SourceLocation ReturnLoc = ConsumeToken();  // eat the ’return’. \n\n13 (lldb) bt \n\n14   * frame #0: ... clang::Parser::ParseReturnStatement( ... \n\n15    ... \n\n16    frame #2: ... clang::Parser::ParseStatementOrDeclaration( ... \n\n17    frame #3: ... clang::Parser::ParseCompoundStatementBody( ... \n\n18    frame #4: ... clang::Parser::ParseFunctionStatementBody( ... \n\n19    frame #5: ... clang::Parser::ParseFunctionDefinition( ... \n\n20    ...\n```", "```cpp\n1$ lldb <...>/llvm-project/install/bin/clang -- -cc1 max.cpp \n\n2 ... \n\n3 (lldb) b clang::ReturnStmt::Create \n\n4 (lldb) r \n\n5 ... \n\n6 (lldb) c \n\n7 ... \n\n8 * thread #1, name = ’clang’, stop reason = breakpoint 1.1 \n\n9    frame #0: ... clang::ReturnStmt::Create(...) at Stmt.cpp:1205:8 \n\n10    1202 \n\n11    1203 ReturnStmt *ReturnStmt::Create(const ASTContext &Ctx, SourceLocation RL, \n\n12    1204                              Expr *E, const VarDecl *NRVOCandidate) { \n\n13 -> 1205   bool HasNRVOCandidate = NRVOCandidate != nullptr; \n\n14    1206   ... \n\n15    1207   ... \n\n16    1208   return new (Mem) ReturnStmt(RL, E, NRVOCandidate); \n\n17 (lldb) bt \n\n18 * thread #1, name = ’clang’, stop reason = breakpoint 1.1 \n\n19   * frame #0: ... clang::ReturnStmt::Create( ... \n\n20    frame #1: ... clang::Sema::BuildReturnStmt( ... \n\n21    frame #2: ... clang::Sema::ActOnReturnStmt( ... \n\n22    frame #3: ... clang::Parser::ParseReturnStatement( ... \n\n23    frame #4: ... clang::Parser::ParseStatementOrDeclarationAfterAttributes( ... \n\n24    ...\n```", "```cpp\n1(lldb) f 4 \n\n2 frame #4: ... clang::Parser::ParseStatementOrDeclarationAfterAttributes( ... \n\n3    323     SemiError = \"break\"; \n\n4    324     break; \n\n5    325    case tok::kw_return:             // C99 6.8.6.4: return-statement \n\n6 -> 326     Res = ParseReturnStatement(); \n\n7    327     SemiError = \"return\"; \n\n8    328     break; \n\n9    329    case tok::kw_co_return:           // C++ Coroutines: ... \n\n10 (lldb)\n```"]