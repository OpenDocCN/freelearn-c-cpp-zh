["```cpp\npublic:\n\n        UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"Targeting\")\n        float HearingRadius = 300.0f;\n```", "```cpp\npublic:\n\n        AMeleeAIController(const FObjectInitializer& ObjectInitializer = FObjectInitializer::Get());\n\n        UFUNCTION(BlueprintImplementableEvent)\n        void OnTargetChange(class AMasteringCharacter* Target);\n\n        UFUNCTION(BlueprintCallable)\n        class AMasteringCharacter* GetTarget();\n\n        virtual void BeginPlay() override;\n\n        UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"Targeting\")\n        class USphereComponent* HearingSphere;\n\n        UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"Targeting\")\n        float HearingRadius = 1000.0f;\n\nprotected:\n    UFUNCTION()\n    void OnHearingOverlap(UPrimitiveComponent* OverlappedComp, AActor* Other, UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const FHitResult& SweepResult);\n\n    UPROPERTY()\n    AMasteringCharacter* CurrentTarget = nullptr;\nAMeleeAIController::AMeleeAIController(const FObjectInitializer& ObjectInitializer)\n        : Super(ObjectInitializer)\n{\n        HearingSphere = CreateDefaultSubobject<USphereComponent>(TEXT(\"HearingSphere\"));\n        HearingSphere->InitSphereRadius(HearingRadius);\n        HearingSphere->SetCollisionObjectType(ECC_Pawn);\n        HearingSphere->SetCollisionProfileName(\"Trigger\");\n\n        HearingSphere->OnComponentBeginOverlap.AddDynamic(this, &AMeleeAIController::OnHearingOverlap);\n\n        bAttachToPawn = true;\n}\nclass AMasteringCharacter* AMeleeAIController::GetTarget()\n{\n        return CurrentTarget;\n}\n\nvoid AMeleeAIController::BeginPlay()\n{\n        Super::BeginPlay();\n\n        HearingSphere->AttachComponentTo(GetRootComponent(), FAttachmentTransformRules::SnapToTargetNotIncludingScale);\n}\n\nvoid AMeleeAIController::OnHearingOverlap(UPrimitiveComponent* OverlappedComp, AActor* Other, UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const FHitResult& SweepResult)\n{\n        AMasteringCharacter *Target = Cast<AMasteringCharacter>(Other);\n        if (Target != nullptr && CurrentTarget != Target)\n        {\n                CurrentTarget = Target;\n                OnTargetChange(CurrentTarget);\n        }\n}\n```", "```cpp\nvoid AMeleeAIController::OnHearingOverlap(UPrimitiveComponent* OverlappedComp, AActor* Other, UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const FHitResult& SweepResult)\n{\n        AStealthCharacter* StealthChar = Cast<AStealthCharacter>(Other);\n        if (StealthChar != nullptr)\n        {\n                if (StealthChar->IsStealthed())\n                {\n                        return; // we let the stealthed sphere deal with these\n                }\n        }\n\n        SetPotentialTarget(Other);\n}\n\nvoid AMeleeAIController::OnStealthHearingOverlap(UPrimitiveComponent* OverlappedComp, AActor* Other, UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const FHitResult& SweepResult)\n{\n        SetPotentialTarget(Other);\n}\n\nvoid AMeleeAIController::OnSightOverlap(UPrimitiveComponent* OverlappedComp, AActor* Other, UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const FHitResult& SweepResult)\n{\n        APawn* Owner = GetPawn();\n\n        if (Owner == Other)\n        {\n                return;\n        }\n\n        FVector ToTarget = Other->GetActorLocation() - Owner->GetActorLocation();\n        FVector Facing = GetPawn()->GetActorForwardVector();\n\n        if (SightAngle > 90.0f)\n        {\n                UE_LOG(LogTemp, Error, TEXT(\"Sight Angles of 90+ degrees not supported, please use hearing for this detection!\"));\n                SightAngle = 90.0f;\n        }\n\n        if (FVector::DotProduct(ToTarget, Facing) < 0.0f)\n        {\n                return;\n        }\n\n        float DotToTarget = FVector::DotProduct(ToTarget.GetSafeNormal(), Facing.GetSafeNormal());\n        float RadiansToTarget = FMath::Acos(DotToTarget);\n        float AngToTarget = RadiansToTarget * 180.0f / PI;\n\n        if (AngToTarget < SightAngle)\n        {\n                SetPotentialTarget(Other);\n        }\n}\n\nvoid AMeleeAIController::SetPotentialTarget(AActor* Other)\n{\n        AMasteringCharacter* Target = Cast<AMasteringCharacter>(Other);\n        if (Target != nullptr && CurrentTarget != Target)\n        {\n                CurrentTarget = Target;\n                OnTargetChange(CurrentTarget);\n        }\n}\n```", "```cpp\nvoid AMeleeAIController::BeginPlay()\n{\n        Super::BeginPlay();\n\n        HomeLocation = GetPawn()->GetNavAgentLocation();\n\n    HearingSphere->AttachToComponent(GetRootComponent(), FAttachmentTransformRules::SnapToTargetNotIncludingScale);\n    StealthHearingSphere->AttachToComponent(GetRootComponent(), FAttachmentTransformRules::SnapToTargetNotIncludingScale);\n    SightSphere->AttachToComponent(GetRootComponent(), FAttachmentTransformRules::SnapToTargetNotIncludingScale);\n\n        OnReturnedHome();\n}\n```", "```cpp\nUPROPERTY(EditAnywhere, BlueprintReadWrite, SaveGame, Category = \"Health\")\nfloat Health = 100.0f;\n```", "```cpp\nvoid AMasteringProjectile::OnHit(UPrimitiveComponent* HitComp, AActor* OtherActor, UPrimitiveComponent* OtherComp, FVector NormalImpulse, const FHitResult& Hit)\n{\n        // Only add impulse and destroy projectile if we hit a physics\n        if ((OtherActor != NULL) && (OtherActor != this) && (OtherComp != NULL))\n        {\n                AController* controller = GetInstigatorController();\n                AActor* damager = GetInstigator();\n                FDamageEvent DamEvt;\n\n                OtherActor->TakeDamage(DamageAmount, DamEvt, controller, damager != nullptr ? damager : this);\n\n                if (OtherComp->IsSimulatingPhysics())\n                {\n                        OtherComp->AddImpulseAtLocation(GetVelocity() * 100.0f, GetActorLocation());\n                }\n                else if (Cast<APawn>(OtherActor) != nullptr)\n                {\n                        Destroy();\n                }\n        }\n}\n```", "```cpp\nActorSpawnParams.Instigator = Cast<APawn>(GetOwner());\n```", "```cpp\nUFUNCTION(BlueprintNativeEvent, BlueprintCallable, Category = \"Load-Save\")\nvoid ActorSaved();\n```", "```cpp\nISavedActorInterface::Execute_ActorSaved(Actor);\n```"]