["```cpp\nint mySum(int m, int n);\n```", "```cpp\nint mySum(int m, int n) // this row is the header\n{\n  // between curly brackets sits the body\n}\n```", "```cpp\nreturnType functionName(arguments)\n```", "```cpp\nint myAction()\n{\n  // between curly brackets sits the body\n}\n```", "```cpp\nint mySum(int m, int n) // this row is the header\n{\n  int result;\t\t// this is the variable to store the result\n  result = m + n; \t// it makes the sum and store it in result\n  return result;\t// it returns the value of result variable\n}\n```", "```cpp\nvoid setup() {\nSerial.begin(9600); Let's check an actual example of Arduino code to understand this better.\n}\t\n\nVoid loop() {\n// let's sum all integers from 0 to 99, 2 by 2 and display\nint currentResult;\t\t\nfor (int i = 0 ; i < 100 ; i++)\n{\n  currentResult = mySum(i,i+1);\t// sum and store\n  Serial.println(currentResult);\t// display to serial monitor\n}\ndelay(2000); make a 2 second pause\n}\nint mySum(int m, int n) // this row is the header\n{\n  int result;\t\t// this is the variable to store the result\n  result = m + n; \t// it makes the sum and store it in result\n  return result;\t// it returns the value of result variable\n}\n```", "```cpp\nint a = 35;    // in binary: 00000000 00100011\nint b = 49;    // in binary: 00000000 00110001\nint c = a & b; // in binary: 00000000 00100001 and in decimal 33\n```", "```cpp\nint a = 35;   // in binary: 00000000 00100011\nint b = ~a ;  // in binary: 11111111 11011100 and in decimal -36\n```", "```cpp\nint a = 36; \t\t// in binary 00000000 00100100\nint b = a << 2;\t// in binary 00000000 10010000, decimal 144\nint c = a >> 1;\t// in binary 00000000 00010010, decimal 18\n```", "```cpp\nint myFunction( int valueToTest )\n{\n  if (valueToTest == 1)\n  {\n    int temporaryVariable;\n    // some calculations with temporaryVariable\n    return temporaryVariable;\n  }\n  else {\n  return -1;\n  }\n}\n```", "```cpp\nint myFunction( int valueToTest )\n{\n  if (valueToTest == 1)\n  {\n    int temporaryVariable;\n    temporaryVariable += globalVariable;\n    temporaryVariable *= 7;\n    return temporaryVariable;\n  }\n  else {\n  return -1;\n  }\n}\n```", "```cpp\nint myFunction( int valueToTest )\n{\n  if (valueToTest == 1)\n  {\n    return ( (globalVariable + 1)*7 );\n  }\n  else {\n  return -1;\n  }\n}\n```", "```cpp\nfloat cosLUT[(int) (360.0 * 1 / 0.5)] ;\nconst float DEG2RAD = 180 / PI ;\n\nconst float cosinePrecision = 0.5;\nconst int cosinePeriod = (int) (360.0 * 1 / cosinePrecision);\n\nvoid setup()\n{\n  initCosineLUT();\n}\n\nvoid loop()\n{\n  // nothing for now!\n}\n\nvoid initCosineLUT(){  \n  for (int i = 0 ; i < cosinePeriod ; i++)\n  {\n    cosLUT[i] = (float) cos(i * DEG2RAD * cosinePrecision);\n  }\n}\n```", "```cpp\nfloat cosLUT[720];\n```", "```cpp\nfloat myFastCosine(float angle){\n\n   return cosLUT[(int) (angle * 1 / cosinePrecision) % cosinePeriod];\n}\n```", "```cpp\n/*\n  measuringTime is a small program measuring the uptime and printing it\n  to the serial monitor each 250ms in order not to be too verbose.\n\n  Written by Julien Bayle, this example code is under Creative Commons CC-BY-SA\n\n  This code is related to the book \"C programming for Arduino\" written by Julien Bayle\n  and published by Packt Publishing.\n\n  http://cprogrammingforarduino.com\n */\n\nunsigned long measuredTime;      // store the uptime\n\nvoid setup(){\n  Serial.begin(9600);\n}\n\nvoid loop(){\n  Serial.print(\"Time: \");\n  measuredTime = millis();\n\n  Serial.println(measuredTime);  // prints the current uptime\n\n  delay(250);         // pausing the program 250ms\n}\n```", "```cpp\n/*\n  measuringTime is a small program measuring the uptime and printing it\n  to the serial monitor each 250ms in order not to be too verbose.\n\n  Written by Julien Bayle, this example code is under Creative Commons CC-BY-SA\n  This code is related to the book \"C programming for Arduino\" written by Julien Bayle\n  and published by Packt Publishing.\n\n  http://cprogrammingforarduino.com\n */\n\nvoid setup(){\n  Serial.begin(9600);\n}\n\nvoid loop(){\n  Serial.print(\"Time: \");\n  Serial.println(millis());  // prints the current uptime\n  delay(250);         // pausing the program 250ms\n}\n```", "```cpp\n/*\n  measuringTimeMicros is a small program measuring the uptime in ms and\n  µs and printing it to the serial monitor each 250ms in order not to be too verbose.\n\n  Written by Julien Bayle, this example code is under Creative Commons CC-BY-SA\n\n  This code is related to the book «C programming for Arduino» written by Julien Bayle\n  and published by Packt Publishing.\n\n  http://cprogrammingforarduino.com\n */\n\nvoid setup(){\n  Serial.begin(9600);\n}\n\nvoid loop(){\n  Serial.print(«Time in ms: «);\n  Serial.println(millis());  // prints the current uptime in ms\n  Serial.print(«Time in µs: «);\n  Serial.println(micros());  // prints the current uptime in µs\n\n  delay(250); \t\t      // pausing the program 250ms\n}\n```", "```cpp\nsetup()\n- initialize things\n\nloop()\n- ask an input value and wait for it until it is available\n- test this input according to something else\n- if the test is true perform something else, loop to the beginning\n```", "```cpp\n#include <SimpleTimer.h>\t// include the Marcello's library\n\nSimpleTimer timer ;\t\t// the timer object construction\nboolean currentLEDState ;\nint ledPin = 13 ;\n\nvoid setup() {\ncurrentLEDState = false ;\npinMode(ledPin, OUTPUT) ;\ntimer.setInterval(120, blink) ;\n\n}\n\nvoid loop() {\ntimer.run() ;\n}\n// a function to be executed periodically\nvoid blink() {\n  if (!currentLEDState)\tdigitalWrite(ledPin, HIGH);\nelse digitalWrite(ledPin, LOW);\ncurrentLEDState = !currentLEDState ; // invert the boolean\n}\n```", "```cpp\nvoid blink() {\n  if (!currentLEDState) {\ndigitalWrite(ledPin, HIGH);\ncurrentLEDState  = true ;\n}\n\nelse {\ndigitalWrite(ledPin, LOW);\ncurrentLEDState  = false;\n}\n}\n```"]