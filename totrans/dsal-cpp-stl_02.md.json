["```cpp\n#include <iostream>\n#include <vector>\nint main() {\n  std::vector<int> numbers = {10, 20, 30, 40, 50};\n  for (auto it = numbers.begin(); it != numbers.end();\n       ++it) {\n    std::cout << *it << \" \";\n  }\n  std::cout << \"\\n\";\n  return 0;\n}\n```", "```cpp\n#include <algorithm>\n#include <iostream>\n#include <iterator>\n#include <vector>\nint main() {\n  std::vector<int> numbers;\n  std::generate_n(std::back_inserter(numbers), 10,\n                  [n = 0]() mutable { return ++n; });\n  for (auto num : numbers) { std::cout << num << \" \"; }\n  std::cout << \"\\n\";\n  return 0;\n}\n```", "```cpp\n#include <forward_list>\n#include <iostream>\nint main() {\n  std::forward_list<int> flist = {10, 20, 30, 40, 50};\n  std::cout << \"Original list: \";\n  for (auto it = flist.begin(); it != flist.end(); ++it) {\n    std::cout << *it << \" \";\n  }\n  std::cout << \"\\n\";\n  for (auto it = flist.begin(); it != flist.end(); ++it) {\n    (*it)++;\n  }\n  std::cout << \"Modified list: \";\n  for (auto it = flist.begin(); it != flist.end(); ++it) {\n    std::cout << *it << \" \";\n  }\n  std::cout << \"\\n\";\n  return 0;\n}\n```", "```cpp\nOriginal list: 10 20 30 40 50\nModified list: 11 21 31 41 51\n```", "```cpp\n#include <iostream>\n#include <list>\nint main() {\n  std::list<int> numbers = {1, 2, 3, 4, 5};\n  std::cout << \"Traversing the list forwards:\\n\";\n  for (std::list<int>::iterator it = numbers.begin();\n       it != numbers.end(); ++it) {\n    std::cout << *it << \" \";\n  }\n  std::cout << \"\\n\";\n  std::cout << \"Traversing the list backwards:\\n\";\n  for (std::list<int>::reverse_iterator rit =\n           numbers.rbegin();\n       rit != numbers.rend(); ++rit) {\n    std::cout << *rit << \" \";\n  }\n  std::cout << \"\\n\";\n  return 0;\n}\n```", "```cpp\nTraversing the list forwards:\n1 2 3 4 5\nTraversing the list backward:\n5 4 3 2 1\n```", "```cpp\n#include <chrono>\n#include <iostream>\n#include <mutex>\n#include <thread>\n#include <vector>\nstd::mutex vecMutex;\nvoid add_to_vector(std::vector<int> &numbers, int value) {\n  std::lock_guard<std::mutex> guard(vecMutex);\n  numbers.push_back(value);\n}\nvoid print_vector(const std::vector<int> &numbers) {\n  std::lock_guard<std::mutex> guard(vecMutex);\n  for (int num : numbers) { std::cout << num << \" \"; }\n  std::cout << \"\\n\";\n}\nint main() {\n  std::vector<int> numbers;\n  std::thread t1(add_to_vector, std::ref(numbers), 1);\n  std::thread t2(add_to_vector, std::ref(numbers), 2);\n  t1.join();\n  t2.join();\n  std::thread t3(print_vector, std::ref(numbers));\n  t3.join();\n  return 0;\n}\n```", "```cpp\nfor(auto it = values.begin(); it != values.end(); ++it) {\n  std::cout << *it << \"\\n\";\n}\n```", "```cpp\nfor(auto cit = values.cbegin(); cit != values.cend(); ++cit) {\n  std::cout << *cit << \"\\n\";\n}\n```", "```cpp\n#include <array>\n#include <iostream>\n#include <list>\n#include <vector>\ntemplate <typename Container>\nvoid displayElements(const Container &c) {\n  for (auto it = std::begin(c); it != std::end(c); ++it) {\n    std::cout << *it << \" \";\n  }\n  std::cout << \"\\n\";\n}\nint main() {\n  std::vector<int> vec = {1, 2, 3, 4, 5};\n  std::list<int> lst = {6, 7, 8, 9, 10};\n  std::array<int, 5> arr = {11, 12, 13, 14, 15};\n  std::cout << \"Elements in vector: \";\n  displayElements(vec);\n  std::cout << \"Elements in list: \";\n  displayElements(lst);\n  std::cout << \"Elements in array: \";\n  displayElements(arr);\n  return 0;\n}\n```", "```cpp\nstd::vector<int> numbers = {1, 2, 3, 4, 5};\nfor (int num : numbers) {\n  std::cout << num << \" \";\n}\n```", "```cpp\nfor (auto &num : numbers) {\n  num *= 2;\n}\n```", "```cpp\n#include <iostream>\n#include <iterator>\n#include <vector>\nclass SquareIterator {\npublic:\n  using iterator_category =\n      std::random_access_iterator_tag;\n  using value_type = int;\n  using difference_type = std::ptrdiff_t;\n  using pointer = int *;\n  using reference = int &;\n  explicit SquareIterator(pointer ptr) : ptr(ptr) {}\n  value_type operator*() const { return (*ptr) * (*ptr); }\n  pointer operator->() { return ptr; }\n  SquareIterator &operator++() {\n    ++ptr;\n    return *this;\n  }\n  SquareIterator operator++(int) {\n    SquareIterator tmp = *this;\n    ++ptr;\n    return tmp;\n  }\n  SquareIterator &operator+=(difference_type diff) {\n    ptr += diff;\n    return *this;\n  }\n  SquareIterator operator+(difference_type diff) const {\n    return SquareIterator(ptr + diff);\n  }\n  value_type operator[](difference_type diff) const {\n    return *(ptr + diff) * *(ptr + diff);\n  }\n  bool operator!=(const SquareIterator &other) const {\n    return ptr != other.ptr;\n  }\nprivate:\n  pointer ptr;\n};\nint main() {\n  std::vector<int> vec = {1, 2, 3, 4, 5};\n  SquareIterator begin(vec.data());\n  SquareIterator end(vec.data() + vec.size());\n  for (auto it = begin; it != end; ++it) {\n    std::cout << *it << ' ';\n  }\n  SquareIterator it = begin + 2;\n  std::cout << \"\\nValue at position 2: \" << *it;\n  std::cout\n      << \"\\nValue at position 3 using subscript operator: \"\n      << it[1];\n  return 0;\n}\n```", "```cpp\n1 4 9 16 25\nValue at position 2: 9\nValue at position 3 using subscript operator: 16\n```", "```cpp\n#include <iostream>\n#include <iterator>\n#include <vector>\nstruct RGBA {\n  uint8_t r, g, b, a;\n};\nclass AlphaIterator {\npublic:\n  using iterator_category = std::input_iterator_tag;\n  using value_type = uint8_t;\n  using difference_type = std::ptrdiff_t;\n  using pointer = uint8_t *;\n  using reference = uint8_t &;\n  explicit AlphaIterator(std::vector<RGBA>::iterator itr)\n      : itr_(itr) {}\n  reference operator*() { return itr_->a; }\n  AlphaIterator &operator++() {\n    ++itr_;\n    return *this;\n  }\n  AlphaIterator operator++(int) {\n    AlphaIterator tmp(*this);\n    ++itr_;\n    return tmp;\n  }\n  bool operator==(const AlphaIterator &other) const {\n    return itr_ == other.itr_;\n  }\n  bool operator!=(const AlphaIterator &other) const {\n    return itr_ != other.itr_;\n  }\nprivate:\n  std::vector<RGBA>::iterator itr_;\n};\nint main() {\n  std::vector<RGBA> bitmap = {\n      {255, 0, 0, 128}, {0, 255, 0, 200}, {0, 0, 255, 255},\n      // ... add more colors\n  };\n  std::cout << \"Alpha values:\\n\";\n  for (AlphaIterator it = AlphaIterator(bitmap.begin());\n       it != AlphaIterator(bitmap.end()); ++it) {\n    std::cout << static_cast<int>(*it) << \" \";\n  }\n  std::cout << \"\\n\";\n  return 0;\n}\n```"]