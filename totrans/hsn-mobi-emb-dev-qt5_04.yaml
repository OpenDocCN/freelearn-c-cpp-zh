- en: Graphical and Special Effects
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图形和特效
- en: Qt Quick has been extended with animation and special effects through the use
    of particles. Particles and Qt Graphical Effects will make a **User Interface**
    (**UI**) come alive and stand out among the crowd.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Qt Quick 通过使用粒子扩展了动画和特效。粒子和 Qt 图形特效可以使用户界面（**UI**）生动活泼，并在众多界面中脱颖而出。
- en: The particle system in Qt Quick allows for a large number of images or other
    graphical objects to simulate highly energized and chaotic animation and effects.
    Simulating snow falling or explosions with fire is made easier by using a particle
    system. Dynamic properties of these elements animate these even more.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Qt Quick 中的粒子系统允许大量图像或其他图形对象模拟高度活跃和混乱的动画和效果。使用粒子系统模拟下雪或爆炸着火变得更容易。这些元素的动态属性使动画更加生动。
- en: Using Qt Graphical Effects can help make UIs visually more appealing and make
    it easier for the user to differentiate between graphical components. Drop shadows,
    glows, and blurring make 2-dimensional objects seem more like 3-dimensional ones.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Qt 图形特效可以帮助使 UI 在视觉上更具吸引力，并使用户更容易区分图形组件。阴影、发光和模糊使二维对象看起来更像三维对象。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: The universe of particles
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 粒子宇宙
- en: Particle `painters`, `emitters`, and `affectors`
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 粒子 `画家`、`发射器` 和 `影响器`
- en: Graphical effects for Qt Quick
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Qt Quick 的图形特效
- en: The universe of particles
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 粒子宇宙
- en: Finally! We have reached the fun part of the book where the magic happens. It's
    all fine and dandy using rectangles, text, and buttons, but particles add splash
    and zing, together with adding wisps of light to games. They can also be used
    to highlight and emphasize items of interest.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 最后！我们终于到达了书中最有趣的部分，魔法就在这里发生。使用矩形、文本和按钮已经很好了，但粒子增加了活力和动感，同时为游戏增添了光影。它们还可以用来突出和强调感兴趣的项目。
- en: 'Particles are a type of animation that consist of numerous graphical elements,
    all moving in a fuzzy manner. There are four main QML components to use:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 粒子是一种由众多图形元素组成的动画，所有元素都以模糊的方式移动。有四个主要的 QML 组件可以使用：
- en: '`ParticleSystem`: Maintains the particle animation timeline'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ParticleSystem`：维护粒子动画时间线'
- en: '`Emitters`: Radiates the particles in to the system'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`发射器`：将粒子辐射到系统中'
- en: '`Painters`: These components paint the particles. Here are the various components:'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`画家`：这些组件绘制粒子。以下是各种组件：'
- en: '`ImageParticle`: A particle using an image'
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ImageParticle`：使用图像的粒子'
- en: '`ItemParticle`: A particle using a QML item as delegate'
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ItemParticle`：使用 QML 项目作为代理的粒子'
- en: '`CustomParticle`: A particle using a shader'
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CustomParticle`：使用着色器的粒子'
- en: '`Affectors`: Alters the properties of a particle'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`影响器`：改变粒子的属性'
- en: To see how we manage all these items, let's take a look at the main particle
    manager, the `ParticleSystem`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解我们如何管理所有这些项目，让我们看看主要的粒子管理器，即 `ParticleSystem`。
- en: ParticleSystem
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ParticleSystem
- en: The `ParticleSystem` component maintains the particle animation timeline. It
    is what bonds all the other elements together and acts as the center for operations.
    You can `pause`, `resume`, `restart`, `reset`, `start`, and `stop` the particle
    animation.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`ParticleSystem` 组件维护粒子动画时间线。它是将所有其他元素连接在一起并作为操作中心的元素。您可以`暂停`、`恢复`、`重启`、`重置`、`开始`和`停止`粒子动画。'
- en: The `painters`, `emitters`, and `affectors` all interact with each other through
    the `ParticleSystem`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`画家`、`发射器` 和 `影响器` 都通过 `ParticleSystem` 相互交互。'
- en: Many `ParticleSystem` components can exist in your application, and each has
    an `Emitter` component.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的应用程序中可以存在多个 `ParticleSystem` 组件，每个组件都有一个 `Emitter` 组件。
- en: Let's dive a little more into the details about particle `painters`, `emitters`,
    and `affectors`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更深入地探讨一下关于粒子 `画家`、`发射器` 和 `影响器的细节。
- en: Particle painters, emitters, and affectors
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 粒子画家、发射器和影响器
- en: Particles in Qt Quick are graphical elements such as images, QML items, and
    OpenGL shaders.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Qt Quick 中的粒子是图形元素，如图像、QML 项目和 OpenGL 着色器。
- en: They can be made to move and flow in endless ways.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 它们可以被制作成以无数种方式移动和流动。
- en: Every particle is part of a `ParticleGroup`, which, by default, has an empty
    name. A `ParticleGroup` is a group of particle painters that allow for the timed
    animation transitions for the grouped particle painters.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 每个粒子都是 `ParticleGroup` 的一部分，默认情况下，它有一个空名称。`ParticleGroup` 是一组粒子画家，允许对分组粒子画家进行定时动画转换。
- en: The direction that particles are emitted is controlled by the `Direction` items
    which consist of these components: `AngleDirection`, `PointDirection`, and `TargetDirection`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 粒子发射的方向由 `Direction` 项目控制，这些项目由以下组件组成：`AngleDirection`、`PointDirection` 和 `TargetDirection`。
- en: 'There are only a few types of particle painters you can use, but they cover
    just about everything you would want to use them for. Particle types available
    in Qt Quick are as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用的粒子画家类型只有几种，但它们几乎涵盖了你想用它们做的所有事情。Qt Quick 中可用的粒子类型如下：
- en: '`CustomParticle`: A particle based on OpenGL shader'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CustomParticle`：基于 OpenGL 着色器的粒子'
- en: '`ImageParticle`: A particle based on an image file'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ImageParticle`：基于图像文件的粒子'
- en: '`ItemParticle`: A particle based on a QML Item'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ItemParticle`：基于 QML 项目的粒子'
- en: '`ImageParticle` is probably the most common and easiest to use and can be made
    from any image that QML has support for. If there are going to be numerous particles,
    it might be best to use small and optimized images.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`ImageParticle` 可能是最常见且最容易使用的，可以从 QML 支持的任何图像中创建。如果将要有很多粒子，最好使用小而优化的图像。'
- en: Let's examine a simple `ItemParticle` animation. We will start by defining a
    `ParticleSystem` component with a child `ItemParticle` animation that is defined
    as a transparent `Rectangle` element with a small green border and a radius of
    65, which means it appears as a green circle.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查一个简单的 `ItemParticle` 动画。我们将首先定义一个 `ParticleSystem` 组件，它有一个作为透明 `Rectangle`
    元素定义的子 `ItemParticle` 动画，该元素有一个小的绿色边框和半径 65，这意味着它看起来像一个绿色圆圈。
- en: There are actually two type of emitters—the standard `Emitter` type, but also
    a special `TrailEmitter` type, which is derived from the `Emitter` item, but emits
    its particles from other particles instead of its bounding area.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上有两种类型的发射器——标准的 `Emitter` 类型，还有一种特殊的 `TrailEmitter` 类型，它从 `Emitter` 项目派生出来，但它的粒子是从其他粒子而不是其边界区域发射的。
- en: An `Emitter` item is defined with the `SystemParticle` component bound to its
    `system` property. For the `velocity` property of the `Emitter` item, we use `AngleDirection`.
    `AngleDirection` directs the particles emitted at a certain angle.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `SystemParticle` 组件将其 `system` 属性绑定到一个 `Emitter` 项目上，定义了一个 `Emitter` 项目。对于
    `Emitter` 项目的 `velocity` 属性，我们使用 `AngleDirection`。`AngleDirection` 将发射的粒子指向一定角度。
- en: 'Angles in QML elements work in a clockwise fashion, starting at the right-hand
    side of an element. Here''s the representation of it:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: QML 元素中的角度是顺时针方向的，从元素的右侧开始。以下是它的表示：
- en: '![](img/d929f1ba-f034-404c-b6bb-5486a10104d5.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d929f1ba-f034-404c-b6bb-5486a10104d5.png)'
- en: For example, setting an `AngleDirection` of 90 would make the particles move
    downward.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，设置 `AngleDirection` 为 90 将使粒子向下移动。
- en: 'Let''s dig into a particle example:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入一个粒子示例：
- en: The source code can be found on the Git repository under the `Chapter03-1` directory,
    in the `cp3` branch.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 源代码可以在 Git 仓库的 `Chapter03-1` 目录下的 `cp3` 分支中找到。
- en: 'We start by defining a `ParticleSystem`:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先定义一个 `ParticleSystem`：
- en: '[PRE0]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We add an `ItemParticle` and define the `delegate` to be a transparent `Rectangle`.
    We define a `radius`, which gives it rounded corners, and designate it to have
    a small green border:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们添加一个 `ItemParticle` 并将 `delegate` 定义为透明的 `Rectangle`。我们定义一个 `radius`，使其具有圆角，并指定它有一个小的绿色边框：
- en: '[PRE1]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We define an `Emitter` and assign it to the `ParticleSystem`:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们定义一个 `Emitter` 并将其分配给 `ParticleSystem`：
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We give the `Emitter` an `AngleDirection` `velocity` to add some variation
    in the direction:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们给 `Emitter` 一个 `AngleDirection` `velocity` 以增加方向上的变化：
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'At this point, the app looks like this:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，应用程序看起来是这样的：
- en: '![](img/ec663039-75fa-4426-ab9c-d6cfeec363f4.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ec663039-75fa-4426-ab9c-d6cfeec363f4.png)'
- en: 'Let''s see how the emitter would look when it is not centered:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看当发射器未居中时的样子：
- en: We bind the `Emitter` property, called `enabled`, to the value of `false` in
    order to stop the particles being constantly emitted.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将 `Emitter` 属性，称为 `enabled`，绑定到 `false` 的值，以停止粒子持续发射。
- en: 'We then bind the `burst` property to animate a pulse of `25` particles with
    a mouse click like this:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将 `burst` 属性绑定到动画，通过鼠标点击来产生 `25` 个粒子的脉冲，如下所示：
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The properties of the `Emitter` component are attributes of the particles at
    the start of the animation.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`Emitter` 组件的属性是动画开始时粒子的属性。'
- en: 'We bind the `Emitter` property''s `x` and `y` properties to the mouse position:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将 `Emitter` 属性的 `x` 和 `y` 属性绑定到鼠标位置：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We can also remove the `horizontalCenter` anchor as well, unless you want the
    particle burst start to always be centered horizontally.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们也可以移除 `horizontalCenter` 锚点，除非你希望粒子爆发始终在水平方向上居中。
- en: 'This image shows the `Emitter` when it''s not centered horizontally:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这张图片显示了`Emitter`在水平方向未居中的情况：
- en: '![](img/7b59dd07-93e2-4394-8f21-99a2eb099b24.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7b59dd07-93e2-4394-8f21-99a2eb099b24.png)'
- en: To influence the particles as they get beamed out into the scene, you need an
    `Affector`. Let's take a look at how to use an `Affector` in the next section.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 要影响粒子在场景中发射时的行为，你需要一个`Affector`。让我们看看如何在下一节中如何使用`Affector`。
- en: Affectors
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 影响器
- en: 'An affector is an attribute that affects the way particles are streamed. There
    are a few types of `affectors` to choose from:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 影响器是一种属性，它影响粒子流的模式。有几种类型的`affectors`可供选择：
- en: '`Age`: Will terminate particles early'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Age`：将提前终止粒子'
- en: '`Attractor`: Attracts particles toward a point'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Attractor`：吸引粒子向一个点'
- en: '`Friction`: Slows a particle proportional to its velocity'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Friction`：根据粒子的速度减慢粒子'
- en: '`Gravity`: Applies acceleration at an angle'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Gravity`：以角度应用加速度'
- en: '`Turbulence`: Applies noise in a fluid manner'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Turbulence`：以流体方式应用噪声'
- en: '`Wander`: Random particle trajectory'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Wander`：随机粒子轨迹'
- en: There are also `GroupGoal` and `SpriteGoal` `affectors`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 还有`GroupGoal`和`SpriteGoal``affectors`。
- en: '`Affectors` are optional but add their bling to the particles after they get
    emitted.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`Affectors`是可选的，但在粒子发射后会增加其效果。'
- en: Let's examine one way to use these items.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考察一种使用这些项目的方法。
- en: 'We add a `Turbulence` item as a child to the `ParticleSystem` component. The
    particles will now fly around randomly, like falling leaves being blown around
    in the wind:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将一个`Turbulence`项目作为子组件添加到`ParticleSystem`组件中。现在，粒子将随机飞舞，就像被风吹散的落叶：
- en: '[PRE6]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You can have more than one affector. Let''s add some `Gravity`, as well! We
    will make this `Gravity` go upward. `Gravity` is kind of like giving an item some
    weight in a certain direction:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以有多个影响器。让我们添加一些`Gravity`，也！我们将使这个`Gravity`向上。`Gravity`有点像给一个项目在某个方向上施加重量：
- en: '[PRE7]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here is what our example of `Turbulence` circles looks like:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我们的`Turbulence`圆形示例的样子：
- en: '![](img/26d5a457-86a1-42bd-af62-83a7f7d71995.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/26d5a457-86a1-42bd-af62-83a7f7d71995.png)'
- en: You can try the Qt for WebAssembly version here at [https://lpotter.github.io/particles/ch3-1.html](https://lpotter.github.io/particles/ch3-1.html).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里尝试Qt for WebAssembly版本：[https://lpotter.github.io/particles/ch3-1.html](https://lpotter.github.io/particles/ch3-1.html)。
- en: We can also cause the particles to flow in a particular direction, or act in
    a particular shape.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以使粒子以特定方向流动，或以特定形状行动。
- en: Shapes and directions
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 形状和方向
- en: Shapes are a way that can be used to affect how Affectors act upon a certain
    area.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 形状是一种可以用来影响影响器如何作用于特定区域的方法。
- en: '`EllipseShape`: Acts on ellipse shaped area'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EllipseShape`：作用于椭圆形状区域'
- en: '`LineShape`: Acts on a line'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LineShape`：作用于一条线'
- en: '`MaskShape`: Acts on an image shaped area'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MaskShape`：作用于图像形状区域'
- en: '`RectangleShape`: Acts on a rectangle area'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RectangleShape`：作用于矩形区域'
- en: 'Particles can have a velocity in a certain direction. There are three ways
    to direct particles:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 粒子可以在某个方向上具有速度。有三种方法可以引导粒子：
- en: '`AngleDirection`'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AngleDirection`'
- en: '`PointDirection`'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PointDirection`'
- en: '`TargetDirection`'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TargetDirection`'
- en: From the point of emissions, `AngleDirection` has four properties—`angle`, `angleVariation`,
    `magnitude`, and `magnitudeVariation`. As I mentioned previously, angles are measured
    in degrees clockwise, starting to the right of the `Emitter` item. The `magnitude`
    property specifies the velocity of movement in pixels per second.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 从发射点开始，`AngleDirection`有四个属性——`angle`、`angleVariation`、`magnitude`和`magnitudeVariation`。正如我之前提到的，角度是以顺时针方向测量的，从`Emitter`项的右侧开始。`magnitude`属性指定每秒移动的速度（以像素为单位）。
- en: '`PointDirection` will direct a `velocity` property to a certain point in the
    scene, or off the screen, if you like. It takes the `x`, `y`, `xVariation`, and
    `yVariation` properties.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`PointDirection`将`velocity`属性指向场景中的某个点，或者如果你喜欢，可以指向屏幕外。它需要`x`、`y`、`xVariation`和`yVariation`属性。'
- en: With `TargetDirection`, you can instruct particles to be emitted toward a target
    item, or a targeted `x`, `y` point. `TargetDirection` has a new property called
    `proportionalMagnitude`, which makes the `magnitude` and `magnitudeVariation`
    properties operate as a multiple of the distance between starting point and target
    point per second.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`TargetDirection`，你可以指示粒子向目标项发射，或者向目标`x`、`y`点发射。`TargetDirection`有一个新属性称为`proportionalMagnitude`，这使得`magnitude`和`magnitudeVariation`属性作为起始点和目标点之间距离的每秒倍数来操作。
- en: Particles can be quite fun and add a sci-fi element to an application. It takes
    some experimentation to get them to perform as you see in your mind, as there
    is a great randomness to them.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 粒子可以非常有趣，并为应用程序增添科幻元素。要使它们表现出你心中所想，需要进行一些实验，因为它们具有很大的随机性。
- en: Now, let's look at adding some other types of effects for graphics.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何添加其他类型的图形效果。
- en: Graphical effects for Qt Quick
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Qt Quick 的图形效果
- en: When you usually think of effects such as blur, contrast, and glow, you might
    think of image editing software, as they tend to be applied those effects to images.
    Qt Graphical Effects can apply those same types of effects to QML UI components.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 当你通常想到模糊、对比度和发光等效果时，你可能会想到图像编辑软件，因为它们倾向于将这些效果应用于图像。Qt 图形效果可以将这些相同类型的效应应用于 QML
    UI 组件。
- en: If you use the Qt Quick Scene Graph software renderer, these will not be available
    or usable, as this does not support the effects.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用 Qt Quick Scene Graph 软件渲染器，这些效果将不可用或不可用，因为该软件不支持这些效果。
- en: 'Qt Graphical Effects come in a variety of types, each with various sub-effects:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Qt 图形效果有多种类型，每种类型都有各种子效果：
- en: '`Blend`'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Blend`'
- en: '`Color`:'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Color`:'
- en: '`BrightnessContrast`'
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BrightnessContrast`'
- en: '`` `ColorOverlay` ``'
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`` `ColorOverlay` ``'
- en: '`Colorize`'
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Colorize`'
- en: '`Desaturate`'
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Desaturate`'
- en: '`GammaAdjust`'
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GammaAdjust`'
- en: '`HueSaturation`'
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HueSaturation`'
- en: '`LevelAdjust`'
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LevelAdjust`'
- en: '`Gradients`:'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Gradients`:'
- en: '`ConicalGradient`'
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ConicalGradient`'
- en: '`LinearGradient`'
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LinearGradient`'
- en: '`RadialGradient`'
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RadialGradient`'
- en: '`Displace`'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Displace`'
- en: '`DropShadows`:'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DropShadows`:'
- en: '`DropShadow`'
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DropShadow`'
- en: '`InnerShadow`'
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`InnerShadow`'
- en: '`Blurs`:'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Blurs`:'
- en: '`FastBlur`'
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FastBlur`'
- en: '`GaussianBlur`'
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GaussianBlur`'
- en: '`MaskedBlur`'
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MaskedBlur`'
- en: '`RecursiveBlur`'
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RecursiveBlur`'
- en: '`MotionBlurs`:'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MotionBlurs`:'
- en: '`DirectionalBlur`'
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DirectionalBlur`'
- en: '`RadialBlur`'
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RadialBlur`'
- en: '`ZoomBlur`'
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ZoomBlur`'
- en: '`Glows`:'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Glows`:'
- en: '`Glow`'
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Glow`'
- en: '`RectangularGlow`'
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RectangularGlow`'
- en: '`Masks`:'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Masks`:'
- en: '`OpacityMask`'
  id: totrans-131
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OpacityMask`'
- en: '`ThresholdMask`'
  id: totrans-132
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ThresholdMask`'
- en: Now, let's move on to how `DropShadow`, being one of the most useful effects,
    works.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续探讨 `DropShadow` 作为最有用的效果之一是如何工作的。
- en: DropShadow
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DropShadow
- en: A `DropShadow` effect is something you can use to make things stand out and
    look more alive. It's usefulness is that it will give depth to otherwise flat
    objects.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`DropShadow` 效果是一种可以使事物突出并看起来更有生命力的效果。它的用途在于，它将为原本平面的物体增加深度。'
- en: We can add a `DropShadow` effect to a `Text` item from our last example. The
    `horizontalOffset` and `verticalOffset` properties characterize where the shadow
    will be perceived as being positioned upon the scene. The `radius` property describes
    the focus of the shadow, while the `samples` property determines the number of
    samples per pixel when blurring.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在上一个例子中的 `Text` 项上添加一个 `DropShadow` 效果。`horizontalOffset` 和 `verticalOffset`
    属性描述了阴影在场景中的感知位置。`radius` 属性描述了阴影的焦点，而 `samples` 属性决定了模糊时每像素的样本数。
- en: 'Use the following code to add a `DropShadow `and apply it to the `Text` component:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下代码添加 `DropShadow` 并将其应用于 `Text` 组件：
- en: '[PRE8]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The source code can be found on the Git repository under the `Chapter03-2` directory,
    in the `cp3` branch.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 源代码可以在 Git 仓库的 `Chapter03-2` 目录下的 `cp3` 分支中找到。
- en: 'Here, you can see the letters now have a white shadow under them:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以看到字母现在下面有一个白色阴影：
- en: '![](img/b3f7ea20-24e0-4d8a-9951-d641e54aab72.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b3f7ea20-24e0-4d8a-9951-d641e54aab72.png)'
- en: It also has a `spread` property that controls the sharpness of the shadow. That
    is still a bit difficult to read, so let's try something else. How about a `Glow` effect?
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 它还有一个控制阴影锐度的 `spread` 属性。这仍然有点难以阅读，所以让我们试试别的。怎么样，一个 `Glow` 效果？
- en: Glow
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Glow
- en: '`Glow` is an effect that produces a diffused color around the object by using
    the following code:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`Glow` 是一种通过以下代码产生物体周围扩散颜色的效果：'
- en: '[PRE9]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The effect is shown in the following screenshot. Notice the nice light blue
    glow:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 效果在下面的屏幕截图中显示。注意漂亮的浅蓝色发光效果：
- en: '![](img/53c15dc4-6b94-4bef-a5fa-8d82ff2f13b1.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](img/53c15dc4-6b94-4bef-a5fa-8d82ff2f13b1.png)'
- en: 'That''s more like it! We can even give the `Glow` effect its own shadow! Change
    the `DropShadow`, `anchors.fill`, and `source` properties to `glow`:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在更像了！我们甚至可以给 `Glow` 效果添加自己的阴影！将 `DropShadow`、`anchors.fill` 和 `source` 属性更改为
    `glow`：
- en: '[PRE10]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Let's make the `horizontalOffset` and `verticalOffset` properties a tad bigger
    too.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们把 `horizontalOffset` 和 `verticalOffset` 属性也稍微调大一些。
- en: 'Our banner now looks like this:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在的横幅看起来是这样的：
- en: '![](img/14727e9a-b68b-402f-b9d6-db88475e7496.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](img/14727e9a-b68b-402f-b9d6-db88475e7496.png)'
- en: '`DropShadows` are great for making something stand out from the scene. Gradients
    are another effect to use.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`DropShadows` 对于使某物从场景中脱颖而出非常出色。渐变是另一种要使用的效果。'
- en: Gradient
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渐变
- en: '`Gradients` can grab a user''s attention, draw them into a UI, and connect
    to their emotions. Qt Graphical Effects have built-in support for three types
    of gradients—`Conical`, `Linear`, and `Radial`.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`梯度`可以吸引用户的注意力，将他们引入UI界面，并与他们的情感相连接。Qt图形效果内置了对三种类型的梯度支持——`锥形`、`线性`和`径向`。'
- en: '`RadialGradient`, or any QML gradient for that matter, is made up of a series
    of `GradientStop` items, which specify the color and where to start it in the
    gradient cycle, the number zero being at the beginning, and one being at the end
    point.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`径向梯度`，或者更确切地说，任何QML梯度，由一系列`GradientStop`项目组成，这些项目指定了颜色以及在梯度周期中从哪里开始，数字零代表开始点，而一代表终点。'
- en: 'Here''s the code for representing a `RadialGradient`:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是表示`径向梯度`的代码：
- en: '[PRE11]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The source code can be found on the Git repository under the `Chapter03-4` directory,
    in the `cp3` branch.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 源代码可以在Git仓库的`Chapter03-4`目录下的`cp3`分支中找到。
- en: 'The following is the pictorial presentation of our `RadialGradient`:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们`径向梯度`的图示：
- en: '![](img/b34e5629-1e88-4d45-9df8-403fb6b24f58.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b34e5629-1e88-4d45-9df8-403fb6b24f58.png)'
- en: This `RadialGradient` uses three `GradientStop` items to tell the gradient where
    a certain color should start from. The `position` property is a `qreal` value
    from `0.0` to `1.0`; although having a number larger than `1.0` will not give
    an error, it will simply not be drawn in the bounding item.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`径向梯度`使用三个`GradientStop`项目来告诉梯度某种颜色应该从哪里开始。`position`属性是一个从`0.0`到`1.0`的`qreal`值；尽管大于`1.0`的数字不会产生错误，但它将简单地不会绘制在边界项中。
- en: Using the same color-stop schemes as the `RadialGradient`, we see how the `LinearGradient`
    and `ConicalGradient` look.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 使用与`径向梯度`相同的颜色停止方案，我们看到`线性梯度`和`锥形梯度`的外观。
- en: 'The following is a representation of `LinearGradient`:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对`线性梯度`的表示：
- en: '![](img/35a4de21-6acd-4942-b0de-4cf07ba60432.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![](img/35a4de21-6acd-4942-b0de-4cf07ba60432.png)'
- en: 'The following is a representation of `ConicalGradient`:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对`锥形梯度`的表示：
- en: '![](img/e953671a-516d-4c19-931c-501bca66e30a.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e953671a-516d-4c19-931c-501bca66e30a.png)'
- en: You can see the differences between each of these gradients.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到这些梯度之间的差异。
- en: Blur
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模糊
- en: '`Blur` effects can help de-emphasize or bring action to a static image. The
    fastest `Blur` effect would be the aptly named `FastBlur` effect, but the `GaussianBlur` effect
    is the highest quality, and, consequently, the slowest to render.'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '`模糊`效果可以帮助降低或强调静态图像。最快的`模糊`效果是名为`FastBlur`的效果，但`高斯模糊`效果质量最高，因此渲染速度最慢。'
- en: All the `Blur` effects have `radius`, `samples`, and `source` properties. `Radius`
    represents the distance of pixels that will affect the `Blur` effect, with a higher
    number increasing the `Blur` effect. The `samples` property represents the number
    of samples per pixel used when the effect is applied. A higher number means better
    quality, but a slower render time. `Source` is the source item that the `Blur` effect
    will be applied to.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的`模糊`效果都有`radius`、`samples`和`source`属性。`Radius`代表影响`模糊`效果的像素距离，数值越大，`模糊`效果越强。`samples`属性代表应用效果时每个像素使用的样本数。数值越大意味着质量越好，但渲染时间会变慢。`Source`是应用`模糊`效果的目标项。
- en: '`Displace` is a type of a `Blur` effect, but with more of a possible watermark-type
    effect. The `displacementSource` property is the item that is being interposed
    onto the source item. The `displacement` property is a `qreal` value between -1.0
    and 1.0, with 0 meaning there is no displacement of pixels.'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '`Displace`是一种`模糊`效果，但具有更多可能的水印效果。`displacementSource`属性是放置在源项上的项。`displacement`属性是一个介于-1.0和1.0之间的`qreal`值，其中0表示没有像素位移。'
- en: Summary
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Qt Quick offers graphical and special effects that are very easy to start using.
    Particles, in particular, are great for gaming apps. You now know how to use the
    `ParticleSystem` to emit an `ImageParticle` at a particular angle using `AngleDirection`.
    We examined how `Affectors` such as `Turbulence` will affect an `Emitter` by adding
    variation to the particle stream.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: Qt Quick提供了非常容易开始使用的图形和特殊效果。特别是粒子，非常适合游戏应用。您现在知道如何使用`ParticleSystem`通过`AngleDirection`在特定角度发射`ImageParticle`。我们探讨了`Affectors`（如`Turbulence`）如何通过向粒子流添加变化来影响`Emitter`。
- en: '`Gradients`, `Glow`, and `DropShadows` are useful for bringing emphasis to
    certain items. The `Blur` effects are used to simulate movement action or to add
    your watermark to images.'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '`梯度`、`发光`和`阴影`对于强调某些项目非常有用。`模糊`效果用于模拟运动动作或向图像添加水印。'
- en: In the next chapter, we delve into using something now ubiquitous on mobile
    phones—touch input. I will also touch upon (pun intended) using other forms of
    inputs, such as what to do when there is no hardware keyboard and your app is
    what gets booted into.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入探讨在手机上现在无处不在的功能——触摸输入。我还会涉及到（字面意义上的“触及”）使用其他形式的输入，例如当没有硬件键盘时，你的应用需要启动的情况。
