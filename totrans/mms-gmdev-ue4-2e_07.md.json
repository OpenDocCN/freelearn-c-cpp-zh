["```cpp\n// try and play the sound if specified\nif (FireSound != nullptr)\n{\n        UGameplayStatics::PlaySoundAtLocation(this, FireSound, GetActorLocation());\n}\n```", "```cpp\nUSTRUCT(BlueprintType)\nstruct FPhysSound\n{\n        GENERATED_USTRUCT_BODY()\n\n        UPROPERTY(EditAnywhere, BlueprintReadWrite)\n        TEnumAsByte<EPhysicalSurface> SurfaceType;\n\n        UPROPERTY(EditAnywhere, BlueprintReadWrite)\n        class USoundCue* SoundCue;\n};\n```", "```cpp\nUPROPERTY(EditAnywhere, BlueprintReadWrite)\nTArray<FPhysSound> ImpactSounds;\n```", "```cpp\n#include \"Sound/SoundCue.h\"\nEPhysicalSurface surfType = SurfaceType_Default;\nif (OtherComp->GetBodyInstance() != nullptr && OtherComp->GetBodyInstance()->GetSimplePhysicalMaterial() != nullptr)\n{\n        surfType = OtherComp->GetBodyInstance()->GetSimplePhysicalMaterial()->SurfaceType;\n}\n\nUSoundCue* cueToPlay = nullptr;\nfor (auto physSound : ImpactSounds)\n{\n        if (physSound.SurfaceType == surfType)\n        {\n                cueToPlay = physSound.SoundCue;\n                break;\n        }\n}\n\nconst float minVelocity = 400.0f;\nif (cueToPlay != nullptr && GetVelocity().Size() > minVelocity)\n{\n        UGameplayStatics::PlaySoundAtLocation(this, cueToPlay, Hit.Location);\n}\n```", "```cpp\nUGameplayStatics::GetSurfaceType(Hit);\n```", "```cpp\nUSTRUCT(BlueprintType)\nstruct FFootstepSounds\n{\n        GENERATED_USTRUCT_BODY()\n\n        UPROPERTY(EditAnywhere, BlueprintReadWrite)\n        TEnumAsByte<EPhysicalSurface> SurfaceType;\n\n        UPROPERTY(EditAnywhere, BlueprintReadWrite)\n        class USoundCue* SoundCue;\n};\nUPROPERTY(EditAnywhere, BlueprintReadWrite)\nTArray<FFootstepSounds> FootstepSounds;\nUFUNCTION(BlueprintCallable)\nvoid PlayFootstepSound();\n```", "```cpp\n#include \"Sound/SoundCue.h\"\n#include \"PhysicalMaterials/PhysicalMaterial.h\"\n```", "```cpp\nvoid AMasteringCharacter::PlayFootstepSound()\n{\n        FVector startPos = GetActorLocation();\n        FVector endPos = startPos - FVector(0.0f, 0.0f, 200.0f); // 2m down\n\n        FCollisionQueryParams queryParams;\n        queryParams.AddIgnoredActor(this);\n        queryParams.bTraceComplex = true;\n        queryParams.bReturnPhysicalMaterial = true;\n        FHitResult hitOut;\n\n        bool bHit = GetWorld()->LineTraceSingleByProfile(hitOut, startPos, endPos, TEXT(\"IgnoreOnlyPawn\"));\n\n        if (bHit)\n        {\n                EPhysicalSurface surfHit = SurfaceType_Default;\n\n                if (hitOut.Component->GetBodyInstance() != nullptr && hitOut.Component->GetBodyInstance()->GetSimplePhysicalMaterial() != nullptr)\n                {\n                        surfHit = hitOut.Component->GetBodyInstance()->GetSimplePhysicalMaterial()->SurfaceType;\n                }\n\n                if (hitOut.PhysMaterial != nullptr)\n                {\n                        surfHit = hitOut.PhysMaterial->SurfaceType;\n                }\n                USoundCue* cueToPlay = nullptr;\n                for (auto physSound : FootstepSounds)\n                {\n                        if (physSound.SurfaceType == surfHit)\n                        {\n                                cueToPlay = physSound.SoundCue;\n                                break;\n                        }\n                }\n\n                if (cueToPlay != nullptr)\n                {\n                        UGameplayStatics::PlaySoundAtLocation(this, cueToPlay, hitOut.Location);\n                }\n        }\n}\n```"]