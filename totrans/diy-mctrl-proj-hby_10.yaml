- en: '*Chapter 10*: IoT Plant Pot Moisture Sensor'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the advent of the **Internet of Things** (**IoT**), we are immersed in
    the new industrial revolution—the so-called **Industry 4.0**. One of the industries
    that have benefited the most from these technologies is agriculture (Chalimov,
    2020). Agricultural IoT applications range from autonomous harvesting to sensors
    to recognize pests and diseases or to measure humidity. We can take advantage
    of these advances in our homes—for instance, monitoring our ornamental plants
    to have more efficient care.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will put into practice information learned in [*Chapter
    9*](B16413_09_Final_NM_ePub.xhtml#_idTextAnchor122), *IoT Temperature-Logging
    System*, about how to connect and program an internet connection, but this time
    we will introduce a **NodeMCU microcontroller** to facilitate the ESP8266 programming.
    You will learn how to create a digital device to monitor a plant pot, reading
    data from a soil moisture sensor and determining whether it needs water, and then
    sending an alert to notify that it is too dry.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Connecting a soil moisture sensor to the Blue Pill board
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading data from the soil moisture sensor module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Coding a program to send the sensed data to the internet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Showing sensor data results over the internet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By completing this chapter, you will discover how to read the soil's moisture
    amount through a sensor connected to the STM32 Blue Pill board. You will also
    learn how to send this information to the internet through the NodeMCU development
    board and visualize the sensor values from a responsive web page.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The hardware components that will be needed to develop the plant pot moisture
    system are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: One solderless breadboard.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One Blue Pill microcontroller board.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One NodeMCU microcontroller.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One ST-Link/V2 electronic interface, needed for uploading the compiled code
    to the Blue Pill board. Bear in mind that the ST-Link/V2 interface requires four
    female-to-female jumper wires.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One soil moisture sensor.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One ESP8266 Wi-Fi module.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Male-to-male jumper wires.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Power source.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These components can be easily obtained from your favorite supplier. Additionally,
    you will require the Arduino **integrated development environment** (**IDE**)
    and the GitHub repository for this chapter, which can be found at [https://github.com/PacktPublishing/DIY-Microcontroller-Projects-for-Hobbyists/tree/master/Chapter10](https://github.com/PacktPublishing/DIY-Microcontroller-Projects-for-Hobbyists/tree/master/Chapter10)
  prefs: []
  type: TYPE_NORMAL
- en: 'The Code in Action video for this chapter can be found here: [https://bit.ly/3d9CmNM](https://bit.ly/3d9CmNM)'
  prefs: []
  type: TYPE_NORMAL
- en: The next section presents an introduction to a soil moisture sensor and how
    to use it with the STM32 Blue Pill microcontroller board.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting a soil moisture sensor to the Blue Pill board
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will start this section by learning how to use a sensor to measure soil humidity
    in a plant pot, and you will later learn how to connect it to the **STM32 Blue
    Pill** board to build a plant pot moisture-monitoring system.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing soil moisture sensors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A **soil moisture sensor** consists of two pads that measure the amount of water
    in the soil. The sensed value is acquired by allowing the the electric current
    running through the soil to pass through, and according to resistance, this shows
    the level of humidity in the plant pot.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find a generic breakout module that is pretty straightforward to use.
    This is shown in the following photo:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.1 – Soil moisture sensor breakout board](img/Figure_10.1_B16413.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.1 – Soil moisture sensor breakout board
  prefs: []
  type: TYPE_NORMAL
- en: 'The pads are connected to the breakout board with the included female-to-female
    jumper wires. The breakout board connects to the STM32 Blue Pill board with four
    pins, outlined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Analog output** (**AO**): This pin generates an analog signal and must be
    connected to an analog input of the microcontroller.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Digital output** (**DO**): This pin generates a digital signal and must be
    connected to a digital input of the microcontroller.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**VCC**: Pin to supply power to the sensor (3.3 **volts** (**V**)-5 V).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ground** (**GND**): Ground connection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To simplify the development of our project, we will use a DO pin to build our
    system because it only generates binary data depending on the humidity.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting the components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will use a solderless breadboard to connect the sensor and the STM32 Blue
    Pill microcontroller, and finally wire to connect the components. Follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Place the soil moisture sensor and the STM32 Blue Pill board on the solderless
    breadboard with enough space to add the wiring layer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the ground (GND) pin of the sensor to a GND terminal of the SMT32 Blue
    Pill board.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, you need to connect the voltage (VCC) pin to the 3V3 bus of the STM32
    Blue Pill board. The sensor DO must be connected to a digital input on the STM32
    Blue Pill board, so connect the DO pin of the sensor to pin B12 of the Blue Pill,
    as shown in the following photo:![Figure 10.2 – Soil moisture sensor connection
    to the Blue Pill](img/Figure_10.2_B16413.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 10.2 – Soil moisture sensor connection to the Blue Pill
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finally, you will need a power source to power up the board. Use the ST-LINK
    to upload the scripts to the STM32 Blue Pill microcontroller board. The following
    screenshot summarizes all the hardware connections:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.3 – Circuit for soil moisture sensor connection](img/Figure_10.3_B16413.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.3 – Circuit for soil moisture sensor connection
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot presents a schematic diagram for this project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.4 – Schematic diagram for soil moisture sensor connection](img/Figure_10.4_B16413.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.4 – Schematic diagram for soil moisture sensor connection
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 10.4* shows an electric diagram for this part of the project. The ground
    pin of the sensor was connected to the GND pin of the Blue Pill, while the VCC
    pin was connected to the Blue Pill''s 3V3 bus. Finally, the DO of the sensor was
    plugged into the B12 pin of the STM32 microcontroller. The following photo shows
    the plant pot moisture system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.5 – Plant pot moisture system](img/Figure_10.5_B16413.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.5 – Plant pot moisture system
  prefs: []
  type: TYPE_NORMAL
- en: In the previous photo, we can see how the humidity monitoring system's deployment
    is carried out. As we can see, we built a compact electronic circuit to monitor
    the moisture of the soil in a plant pot.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we understood the concept of a humidity sensor and its components.
    Furthermore, we learned how to connect the sensor to a microcontroller through
    a breadboard, and finally learned how to connect the complete system to a plant
    pot.
  prefs: []
  type: TYPE_NORMAL
- en: It's time to move on to the next section, which will show you how to write C
    code to complete the IoT humidity monitoring system's first functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Reading data from the soil moisture sensor module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will now learn how to code a program that reads the information from the
    moisture sensor and shows on the serial monitor if the plant pot needs watering
    or is moist enough.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start developing the program to collect the sensor data from the STM32
    Blue Pill, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get started writing the code. This time, we won''t need any additional
    libraries. Define which of the STM32 Blue Pill card pins will be used as input
    for reading the sensor data. Also, declare a variable to save the reading data
    from the sensor, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, in the `setup()` part, we need to start the serial data transmission
    and assign the speed of the transfer (as usual, we will use 9,600 **bits per second**
    (**bps**) as the standard value). Here is the code to do this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Indicate to the microcontroller the type of pin assigned to `PB12` by running
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The rest of the sketch is in the `loop()` part. The first lines read the input
    pin''s data sensor and display its value in the serial console. The code is shown
    in the following snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The value read from the sensor could be `1` or `0`; remember, we are reading
    a digital value. If the value is `1`, then the plant pot needs water; otherwise,
    it is moist enough.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The code is now complete. You can find the complete sketch in the `Chapter10/moisture`
    folder in the GitHub repository.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that the sketch is complete, you can upload it to the Blue Pill board and
    insert the sensor pads into a plant pot. Now, you can see in the **serial monitor**
    that the soil is too dry, as shown in the following screenshot:![Figure 10.6 –
    Serial monitor readings with dry soil](img/Figure_10.6_B16413.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 10.6 – Serial monitor readings with dry soil
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, add water to the plant pot, taking care not to get any electronic components
    wet. The serial monitor''s information will change as soon as the soil gets wet,
    as illustrated in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.7 – Serial monitor readings upon moistening the soil](img/Figure_10.7_B16413.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.7 – Serial monitor readings upon moistening the soil
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: In recent macOS versions, the **Universal Serial Bus** (**USB**) port may not
    appear in the Arduino IDE, and it therefore may not be possible to see the serial
    monitor. To solve this, it is necessary to install the USB-UART drivers (where
    **UART** stands for **Universal Asynchronous Receiver/Transmitter**) from [https://www.silabs.com/developers/usb-to-uart-bridge-vcp-drivers](https://www.silabs.com/developers/usb-to-uart-bridge-vcp-drivers).
  prefs: []
  type: TYPE_NORMAL
- en: Let's recap what we have learned so far. We learned about a sensor to measure
    soil humidity. We learned how to connect it to our STM32 Blue Pill microcontroller
    in the *Connecting a soil moisture sensor to the Blue Pill board* section. In
    this section, we wrote the code to obtain its data and display it on the serial
    monitor.
  prefs: []
  type: TYPE_NORMAL
- en: The skills you have acquired so far in this chapter will allow you to create
    other electronic systems that require digital reading of data generated in sensors,
    enabling you to use this sensor in additional projects where it is required to
    measure soil moisture.
  prefs: []
  type: TYPE_NORMAL
- en: Coming up next, we will learn about the NodeMCU microcontroller, which will
    facilitate connection to the internet with its integrated ESP8266 module.
  prefs: []
  type: TYPE_NORMAL
- en: Coding a program to send the sensed data to the internet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you remember, in [*Chapter 9*](B16413_09_Final_NM_ePub.xhtml#_idTextAnchor122),
    *IoT Temperature-Logging System*, we found that an ESP-01 module was used because
    it integrates Wi-Fi communication through ESP8266\. This module was programmed
    using **AT commands** through the STM32 Blue Pill microcontroller (where **AT**
    stands for **Attention**). As mentioned at the beginning of the chapter, we will
    use the **NodeMCU development board**, which is depicted in the following photo:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.8 – NodeMCU development board](img/Figure_10.8_B16413.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.8 – NodeMCU development board
  prefs: []
  type: TYPE_NORMAL
- en: This board is also based on the ESP8266 microcontroller. However, unlike the
    SP-01 module, this can be programmed directly from its micro USB port using different
    development IDEs and various programming languages such as Lua and C. It also
    includes **general-purpose input/output** (**GPIO**) pins to be programmed according
    to the developer's needs. These characteristics make the NodeMCU microcontroller
    one of the most popular IoT platforms today.
  prefs: []
  type: TYPE_NORMAL
- en: 'The NodeMCU associates with both firmware and development boards, and in conjunction
    offers the most popular open source IoT platform. The development board is based
    on the ESP-12 module that, as with the ESP-01 module, gives us the Wi-Fi connection
    functionality and adds the functionality of the development board, with the following
    features:'
  prefs: []
  type: TYPE_NORMAL
- en: Micro USB port and serial-USB converter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simple programming via micro USB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Power via USB terminals (pins) for easy connection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrated reset button and **light-emitting diode** (**LED**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using its pins, we can easily place it on a solderless breadboard to connect
    the electronic components required by the projects we will carry out. The NodeMCU
    enables Wi-Fi communication using the **Transmission Control Protocol/Internet
    Protocol** (**TCP/IP**) stack.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: To program the NodeMCU, the steps to add this type of board indicated in the
    *Showing sensor data results over the internet* section of [*Chapter 9*](B16413_09_Final_NM_ePub.xhtml#_idTextAnchor122),
    *IoT Temperature-Logging System*, must already have been carried out.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a program to connect the NodeMCU to the internet. Follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, include the Wi-Fi library for the ESP8266\. You will need two string-type
    variables for the Wi-Fi network''s `0`: Moist'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`1`: Dry'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`2`: Without reading. Hardcoded here, not from the sensor'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The code is illustrated in the following snippet:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will create a web server to receive the sensor data. The server will be
    listening on port `80`. Here is the code to do this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `setup()` part, we need to start the serial data transmission and assign
    the speed of the transfer (this time, we will use 115,200 bps). The code is shown
    in the following snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Indicate to the NodeMCU board the type of pin for reading the STM32, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The rest of the `setup()` part will configure the Wi-Fi network, and upon a
    successful connection will send the IP address to the serial monitor. The code
    can be seen here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `loop()` part was built into three functionalities. First, start the web
    server. Then, read the sensor data from the STM32\. Finally, display a responsive
    web app to visualize the sensor monitoring.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For the complete sketch, refer to the `Chapter10/webserver` folder in the GitHub
    repository.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The web server will be listening for incoming connections from clients. After
    a client connects, we catch it on the `if` condition, as illustrated in the following
    code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After a client connects, the code verifies that is receiving a `GET` request
    with a command to read the sensor data, as illustrated in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If the request received by the client asks the sensor value, the NodeMCU will
    take from the STM32 Blue Pill a reading of the sensor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To make this bridge between the NodeMCU and the STM32, it will be necessary
    to add the additional connections shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 10.9 – Circuit for microcontrollers'' interconnection](img/Figure_10.9_B16413.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 10.9 – Circuit for microcontrollers' interconnection
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Here is a schematic diagram of the microcontrollers'' interconnection:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 10.10 – Schematic diagram of microcontrollers'' interconnection](img/Figure_10.10_B16413.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 10.10 – Schematic diagram of microcontrollers' interconnection
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Connect a male-to-male jumper wire from NodeMCU GPIO 4 (D2) to the GPIO PC13
    pin of the STM32.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The following photo shows how everything was connected in the actual system:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 10.11 – STM32 and NodeMCU connection](img/Figure_10.11_B16413.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 10.11 – STM32 and NodeMCU connection
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, to complete the connection between the NodeMCU and the STM32, it's necessary
    to add a few new lines of code to the `Chapter10/moisture` sketch.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a new constant to store the output pin used to send the data to the NodeMCU,
    as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `setup()` part, indicate the pin type for `PC13`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the `if` condition in the `loop()` part, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The final step to complete our web server is to serve a responsive web app after
    a client request. In this way, any device connected to the same Wi-Fi network
    and a web browser will be able to access the sensor reading remotely.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: But first, we will learn a few concepts of `<meta>` tag with the `name` property
    that has a `viewport` value. This tag will be responsible for adjusting our app's
    layout according to the device with which we are browsing, so we can do it from
    a desktop PC to a mobile device.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To give it the desired visual style, we can do it in two ways: importing a
    `<style></style>` tags, both within the `<head>` tag, as illustrated in the following
    code snippet:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: For our web app, we are going to need a button. If we do not know much about
    giving CSS visual style, we can use tools freely available on the internet, such
    as [https://www.bestcssbuttongenerator.com/](https://www.bestcssbuttongenerator.com/),
    which will visually generate the style CSS of our buttons.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To include HTML code in our sketch, we will use the following sentence:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The code for visualizing the sensor value on our web app prints a paragraph
    indicating to the user whether the soil is dry or not, and a graphical indicator
    to better understand our plant pot state, as illustrated in the following code
    snippet:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To allow the user to gather the sensor reading, we included a button to press
    each time they need to know their plant's status. Remember—the complete code for
    this part of the project is available in the `Chapter10/webserver` GitHub folder.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Important note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If you need to use free images and icons, you can find them on the internet
    repositories such as the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[https://pixabay.com/](https://pixabay.com/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[https://fontawesome.com/icons](https://fontawesome.com/icons)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The sketch is now complete, so upload it to the NodeMCU board and reset it
    after completing the upload. Now, you can see in the **serial monitor** the IP
    address to connect our client, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.12 – IP address on the serial monitor](img/Figure_10.12_B16413.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.12 – IP address on the serial monitor
  prefs: []
  type: TYPE_NORMAL
- en: It's now time to move on to the next section, which will show you how to visualize
    the data over the internet.
  prefs: []
  type: TYPE_NORMAL
- en: Showing sensor data results over the internet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Having objects connected to the internet will allow you to access their data
    from anywhere that has a connection to that network.
  prefs: []
  type: TYPE_NORMAL
- en: This is why we gave our project the ability to become a web server and thus
    be able to access the state of the plant pot from any web browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this project, access can only be from our Wi-Fi network. To test its operation,
    we are going to access the developed web app from any mobile or desktop web browser.
    Proceed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a web browser and go to the IP address of our server (see *Figure 10.12*).
    You should see our landing page to monitor our plant pot, as shown in the following
    screenshot:![Figure 10.13 – Web app landing page](img/Figure_10.13_B16413.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 10.13 – Web app landing page
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: On the landing page, you can simply press the button every time you want to
    measure the humidity of the plant pot. If the soil is dry, we will see a representative
    image and a legend stating **Soil is too dry**, as illustrated in the following
    screenshot:![Figure 10.14 – Web app screen for dry soil](img/Figure_10.14_B16413.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 10.14 – Web app screen for dry soil
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Otherwise, if the soil has good humidity, we get a legend stating **Soil is
    moist enough** along with a representative image, as illustrated in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.15 – Web app screen for moist soil](img/Figure_10.15_B16413.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.15 – Web app screen for moist soil
  prefs: []
  type: TYPE_NORMAL
- en: You can monitor your plant pots with this IoT device and application from anywhere
    in your home, as long as you are connected to your local Wi-Fi network.
  prefs: []
  type: TYPE_NORMAL
- en: We have reached the end of this chapter. Well done! Let's see what we learned
    in this project.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the beginning of the project, you saw how to interface a soil moisture sensor
    to your STM32 board. Then, we created a simple sketch to collect the sensor readings
    and tested it to ensure it worked properly.
  prefs: []
  type: TYPE_NORMAL
- en: We also learned how to connect a NodeMCU card to the internet and read the sensor
    data from the STM32\. Finally, in the last part of the project, we built a web
    app to control the IoT device from any web browser, either mobile or desktop.
  prefs: []
  type: TYPE_NORMAL
- en: The IoT area is growing quickly, so talented people with the right skills in
    this technology can easily access jobs in this exciting area. With this in mind,
    after completing this chapter, we now have a stronger foundation for creating
    IoT devices and applications.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to connect our electronic devices to
    the internet and make them available outside our local Wi-Fi network.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Chalimov, A, *IoT in agriculture: 8 technology use cases for smart farming
    (and challenges to consider)*. Eastern Peak, 2020: [https://easternpeak.com/blog/iot-in-agriculture-technology-use-cases-for-smart-farming-and-challenges-to-consider/](https://easternpeak.com/blog/iot-in-agriculture-technology-use-cases-for-smart-farming-and-challenges-to-consider/)'
  prefs: []
  type: TYPE_NORMAL
