["```cpp\n#include <iostream>\nint main(){\n\t// This is a single line comment\n\t/* This is a multi-line \n        comment */\n\tstd::cout << \"Hello Universe\" << std::endl;\n\treturn 0;\n} \n```", "```cpp\n> g++ -o HelloUniverse HelloUniverse.cpp\n> ./HelloUniverse\n```", "```cpp\n> cl /EHsc HelloUniverse.cpp\n> HelloUniverse.exe\n```", "```cpp\n// implementation of logger\n```", "```cpp\n#include <logger.hpp>\n// implementation of calculator\n```", "```cpp\n#include <logger.hpp>\n#include <calculator.hpp>\nint main() {\n  // use both the logger and the calculator\n}\n```", "```cpp\n// implementation of logger\n// implementation of logger\n// implementation of calculator\nint main() {\n  // use both the logger and the calculator\n}\n```", "```cpp\n#ifndef <unique_name>\n#define <unique_name>\n// all the header code should go here\n#endif /* <unique_name> */\n```", "```cpp\nint main() \n{\n  return 0;\n}\n```", "```cpp\n    int main()\n    {\n      return 0;\n    }\n    ```", "```cpp\n    //On UNIX:\n    > g++ main.cpp\n    //On Windows:\n    > cl /EHsc main.cpp\n    ```", "```cpp\ntype variable_name;\n```", "```cpp\ntype variable_name1, variable_name2, â€¦;\n```", "```cpp\ntype variable_name1;\ntype variable_name2;\ntype ...;\n```", "```cpp\ntype variable_name = value;\n```", "```cpp\ntype variable_name (value);\n```", "```cpp\ntype variable_name {value};\n```", "```cpp\nauto vvariable_name = value;\n```", "```cpp\ntype variable_name1;\ndecltype(variable_name1) variable_name2;\n```", "```cpp\nint foo;\nauto foo2;\nint bar = 10;\nsum = 0;\nfloat price = 5.3 , cost = 10.1;\nauto val = 5.6;\nauto val = 5.6f;\nauto var = val;\nint  a = 0, b = {1} , c(0);\n```", "```cpp\n&variable_name\n```", "```cpp\ntype * pointer_name;\n```", "```cpp\ntype * pointer_name1, * pointer_name2, *...;\n```", "```cpp\ntype * pointer_name, pointer_name;\n```", "```cpp\npointer_name = &variable_name; \n```", "```cpp\ntype * pointer_name1 = &variable_name; \ntype * pointer_name2 = pointer_name1; \n```", "```cpp\ntype * pointer_name1 = &variable_name; \ntype * pointer_name2 = &pointer_name1;\n```", "```cpp\ntype ** pointer_name;\n```", "```cpp\ntype variable_name1 = value;\ntype * pointer_name = &variable_name1;\ntype variable_name2 = *pointer_name; \n```", "```cpp\ntype variable_name1 = value1;\ntype * pointer_name = &variable_name1;\n*pointer_name = value2;\n```", "```cpp\ntype variable_name = value;\ntype &reference_name = variable_name;\n```", "```cpp\n#include <iostream>\nint main()\n{\n  int first_variable = 10;\n  int &ref_name = first_variable;\n  std::cout << \"Value of first_variable: \" << first_variable << std::endl;\n  std::cout << \"Value of ref_name: \" << ref_name << std::endl;\n}\n//Output\nValue of first_variable: 10\nValue of ref_name: 10\n```", "```cpp\nint &c = a;\nfloat &c = &b;\nint &c;\nint *c;\nint *c = p;\nint *c = &p;\nint *c = a;\nint *c = &b;\nint *c = *p;\n```", "```cpp\nconst type variable_name = value;\n```", "```cpp\n#include <iostream>\nint main()\n{\n  const int imm = 10;\n  std::cout << imm << std::endl;\n  //Output: 10\n  int imm_change = 11;\n  std::cout << imm_change << std::endl;\n  //Output: 11\n  imm = imm_change;\n  std::cout << imm << std::endl;\n  //Error: We cannot change the value of imm\n}\n```", "```cpp\nconst type variable_name;\nconst type &reference_name = variable_name;\n```", "```cpp\ntype variable_name;\nconst type &reference_name = variable_name;\n```", "```cpp\nconst type variable_name = value;\ntype &reference_name = variable_name; \n// Wrong\n```", "```cpp\n#include <iostream>\nint main()\n{\n  const int const_v = 10;\n  int &const_ref = const_v;\n  //Error\n  std::cout << const_v << std::endl;\n  //Output: 10\n}\n```", "```cpp\nconst type *pointer_name = &variable_name;\n```", "```cpp\n#include <iostream>\nint main()\n{\n  int v = 10;\n  const int *const_v_pointer  = &v;\n  std::cout << v << std::endl;\n  //Output: 10\n  std::cout << const_v_pointer << std::endl;\n  //Output: Memory location of v\n}\n```", "```cpp\ntype *const pointer_name = &variable_name;\n```", "```cpp\n#include <iostream>\nint main()\n{\n  int v = 10;\n  int *const v_const_pointer = &v;\n  std::cout << v << std::endl;\n  //Output: 10\n  std::cout << v_const_pointer << std::endl;\n  //Output: Memory location of v\n}\n```", "```cpp\n#include <iostream>\nint global_var = 100;\n//Global variable initialized\nint print(){\n  std::cout << global_var << std::endl;\n  //Output: 100\n  std::cout << local_var << std::endl;\n  //Output: Error: Out of scope\n}\nint main()\n{\n  int local_var = 10;\n  std::cout << local_var << std::endl;\n  //Output: 10\n  std::cout << global_var << std::endl;\n  //Output: 100\n  print();\n  //Output:100\n  //Output: Error: Out of scope\n}\n```", "```cpp\n#include <iostream>\nint global_var = 1000;\nint main()\n{\n  int global_var = 100;\n  std::cout << \"Global: \"<< ::global_var << std::endl;\n  std::cout << \"Local: \" << global_var << std::endl;\n}\nOutput:\nGlobal: 1000\nLocal: 100\n```", "```cpp\n#include <iostream>\nint main()\n{\n  int a = 10;\n  {\n    int b = a;\n  }\n  const int c = 11;\n  int d = c;\n  c = a;\n}\n```", "```cpp\nif (condition) statement\n```", "```cpp\nif (condition) {\n  statement_1;\n  statement_2;\n  statement_N;\n}\n```", "```cpp\nif (condition) statement1 else statement2\n```", "```cpp\nif (condition1) {\n  statement1 \n} else if (condition2) {\n  statement2 \n} else {\n  statement3\n}\n```", "```cpp\nif (x > 0) { \n  // When x is greater than 0, statement1 is executed.\n  // If that is not the case, the control jumps to the else block. \n  statement1 \n} else if (x > 100) {\n  statement2 \n}\n```", "```cpp\nif (condition1) \n  // If condition1 is true, statement1 is executed\n  statement1 \nif (condition2) \n  // if condition2 is true then statement2 is executed\n  statement2\n  /* independently whether condition1 and condition2 is true or not, the   statement3 will be executed */\nstatement3\n```", "```cpp\n#include <iostream>\nint main()\n{\n  int x = 10;\n  if  (x > 0){\n    std::cout << x << std::endl;\n  }\n  if (x > 11 ){\n    std::cout << x << std::endl;\n  }\n  else{\n    std::cout << x-1 << std::endl;\n  }\n}\nOutput:\n10\n9\n```", "```cpp\nswitch (expression)\n{\n  case constant1:\n    group-of-statements-1;\n  break;\n  case constant2:\n    group-of-statements-2;\n  break;\n...\n  default:\n    default-group-of-statements;\n  break;\n}\n```", "```cpp\nfor (initialization; condition; increase){\n  statement1;\n  statement2;\n...\n  statementN;\n}\n```", "```cpp\nfor ( ; ; ) statement;\n```", "```cpp\nfor ( declaration : range ) statement;\n```", "```cpp\n#include <iostream>\nint main()\n{\n  for (int x = 0; x < 5; x++){\n    for (int y = 5; y > x; y--){\n      std::cout << \"*\";            \n    }\n    std::cout <<\"\\n\" ;\n  }\n}\nOutput:\n*****\n****\n***\n**\n*\n```", "```cpp\nwhile (condition) statement;\n```", "```cpp\ndo statement while (condition);\n```", "```cpp\nwhile (condition1){\n    statement1;\n    if (condition2)\n        break;\n}\n```", "```cpp\nwhile (condition1){\n    statement1;\n    if (condition2)\n        continue;\n    statement2;\n}\n```", "```cpp\ntry {\n  statement1;\n} catch (exception-declaration1) { \n  statement2; \n} catch (exception-declaration2) { \n  statement3; \n}\n...\n```", "```cpp\n#include <iostream> \nint main() \n{ \n  int x = 10; \n  try { \n    std::cout << \"Inside try block\" << std::endl;\n    if (x > 0) // True\n    { \n      throw x;// Following statement will be skipped\n      std::cout << \"After throw keyword\" << std::endl;\n    }\n  } \n  catch (int x ) { \n    std::cout << \"Inside catch block: Exception found\" << std::endl;\n  } \n  std::cout << \"Outside try-catch block\" << std::endl; \n}\nOutput:\nInside try block\nInside catch block: Exception found\nOutside try-catch block\n```", "```cpp\n    #include <iostream>\n    ```", "```cpp\n    unsigned count = 0;\n    ```", "```cpp\n    for(unsigned x = 1; x <= 30; x++){\n    }\n    ```", "```cpp\n    if (x%3 == 0) {\n      count++;\n    }\n    ```", "```cpp\n    std::cout << count << std::endl;\n    ```", "```cpp\n    i++;\n    ```", "```cpp\ntype name [elements];\n```", "```cpp\nint foo [5] = { 1, 2, 11, 15, 1989 };\n```", "```cpp\nint foo [] = { 1, 2, 11, 15, 1989 };\n```", "```cpp\nint foo [5] = { 1, 2, 11 };\n```", "```cpp\nint foo [5] = { 1, 2, 11, 0, 0 };\n```", "```cpp\nname[index]\n```", "```cpp\nfoo [4] = 15\n```", "```cpp\nint x = foo [2]\n```", "```cpp\ntype name [n][m];\nint bi_array [3][4]\n```", "```cpp\n#include <iostream>\nint main()\n{\n  int foo [3][5] = {{ 1, 2, 11, 15, 1989 }, { 0, 7, 1, 5, 19 }, { 9, 6, 131, 1, 2 }};\n  for (int x = 0; x < 3; x++) \n  { \n    for (int y = 0; y < 5; y++) \n    {\n      std::cout <<\"Array element at [\" << x << \"]\" << \"[\" << y << \"]: \"<< foo[x][y] << std::endl;\n    }\n  }\n}\nOutput:\nArray element at [0][0]: 1\nArray element at [0][1]: 2\nArray element at [0][2]: 11\nArray element at [0][3]: 15\nArray element at [0][4]: 1989\nArray element at [1][0]: 0\nArray element at [1][1]: 7\nArray element at [1][2]: 1\nArray element at [1][3]: 5\nArray element at [1][4]: 19\nArray element at [2][0]: 9\nArray element at [2][1]: 6\nArray element at [2][2]: 131\nArray element at [2][3]: 1\nArray element at [2][4]: 2\n```", "```cpp\nint foo [3][5] = {1, 2, 11, 15, 1989, 0, 7, 1, 5, 19, 9, 6, 131, 1, 2};\n```"]