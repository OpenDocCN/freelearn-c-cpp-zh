["```cpp\nclass LuaExecutor\n{\npublic:\n    LuaValue getRegistry(const LuaValue &key);\n    void setRegistry(const LuaValue &key,\n                     const LuaValue &value);\n};\n```", "```cpp\nLuaValue LuaExecutor::getRegistry(const LuaValue &key)\n{\n    pushValue(key);\n    lua_gettable(L, LUA_REGISTRYINDEX);\n    return popValue();\n}\n```", "```cpp\nvoid LuaExecutor::setRegistry(const LuaValue &key,\n                              const LuaValue &value)\n{\n    pushValue(key);\n    pushValue(value);\n    lua_settable(L, LUA_REGISTRYINDEX);\n}\n```", "```cpp\nint main()\n{\n    auto listener = std::make_unique<\n        LoggingLuaExecutorListener>();\n    auto lua = std::make_unique<LuaExecutor>(*listener);\n    auto key = LuaString::make(\"darabumba\");\n    lua->setRegistry(key,\n        LuaString::make(\"gwentuklutar\"));\n    auto v1 = lua->getRegistry(key);\n    lua->setRegistry(key, LuaString::make(\"wanghaoran\"));\n    auto v2 = lua->getRegistry(key);\n    std::cout << getLuaValueString(key)\n              << \" -> \" << getLuaValueString(v1)\n              << \" -> \" << getLuaValueString(v2);\n    return 0;\n}\n```", "```cpp\ndarabumba -> gwentuklutar -> wanghaoran\n```", "```cpp\nauto regkey = LuaLightUserData::make(listener.get());\nlua->setRegistry(regkey, LuaString::make(\n    \"a LuaExecutorListener implementation\"));\nauto regValue = lua->getRegistry(regkey);\nstd::cout << std::hex << listener.get() << \" is \"\n          << getLuaValueString(regValue);\n```", "```cpp\n0x14f7040d0 is a LuaExecutorListener implementation\n```", "```cpp\nclass Destinations : public LuaModule\n{\npublic:\n    Destinations();\n};\n```", "```cpp\nclass Destinations : public LuaModule\nprivate:\n    std::string name;\n};\n```", "```cpp\nDestinations::Destinations() : wishlist({}) {}\n```", "```cpp\nnamespace\n{\n    const std::string NAME(\"Destinations\");\n}\nconst std::string &Destinations::luaName() const\n{\n    return NAME;\n}\n```", "```cpp\nint main()\n{\n    auto listener = std::make_unique<\n        LoggingLuaExecutorListener>();\n    auto lua = std::make_unique<LuaExecutor>(*listener);\n    auto wishlist = std::make_unique<Destinations>();\n    lua->registerModule(*wishlist.get());\n    lua->executeFile(\"script.lua\");\n    return 0;\n}\n```", "```cpp\nvoid *lua_newuserdatauv (\n    lua_State *L, size_t size, int nuvalue);\n```", "```cpp\nint luaNew(lua_State *L);\nconst std::vector<luaL_Reg> REGS = {\n    {\"new\", luaNew},\n    ...\n    {NULL, NULL}};\nint luaNew(lua_State *L)\n{\n    Destinations *obj = new Destinations();\n    Destinations **userdata =\n        reinterpret_cast<Destinations **>(\n            lua_newuserdatauv(L, sizeof(obj), 0));\n    *userdata = obj;\n    return 1;\n}\n```", "```cpp\ndst = Destinations.new()\ndst:wish(\"London\", \"Paris\", \"Amsterdam\")\ndst:went(\"Paris\")\nprint(\"Visited:\", dst:list_visited())\nprint(\"Unvisited:\", dst:list_unvisited())\ndst = Destinations.new()\ndst:wish(\"Beijing\")\ndst:went(\"Berlin\")\nprint(\"Visited:\", dst:list_visited())\nprint(\"Unvisited:\", dst:list_unvisited())\n```", "```cpp\n[LuaExecutor] Failed to execute: script.lua:2: attempt to index a userdata value (global 'dst')\n```", "```cpp\nconst std::string METATABLE_NAME(\n    \"Destinations.Metatable\");\nint luaNew(lua_State *L)\n{\n    Destinations *obj = new Destinations();\n    Destinations **userdata =\n        reinterpret_cast<Destinations **>(\n            lua_newuserdatauv(L, sizeof(obj), 0));\n    *userdata = obj;\n    int type = luaL_getmetatable(\n        L, METATABLE_NAME.c_str());\n    if (type == LUA_TNIL)\n    {\n        lua_pop(L, 1);\n        luaL_newmetatable(L, METATABLE_NAME.c_str());\n        lua_pushvalue(L, -1);\n        lua_setfield(L, -2, \"__index\");\n        luaL_setfuncs(L, REGS.data(), 0);\n    }\n    lua_setmetatable(L, 1);\n    return 1;\n}\n```", "```cpp\n    if (type == LUA_TNIL)\n    {\n        lua_pop(L, 1);\n        luaL_newmetatable(L, METATABLE_NAME.c_str());\n        lua_pushvalue(L, -1);\n        lua_setfield(L, -2, \"__index\");\n        luaL_setfuncs(L, REGS.data(), 0);\n    }\n```", "```cpp\ninline Destinations *getObj(lua_State *L)\n{\n    luaL_checkudata(L, 1, METATABLE_NAME.c_str());\n    return *reinterpret_cast<Destinations **>(\n        lua_touserdata(L, 1));\n}\n```", "```cpp\nint luaWish(lua_State *L)\n{\n    Destinations *obj = getObj(L);\n    std::vector<std::string> places;\n    int nArgs = lua_gettop(L);\n    for (int i = 2; i <= nArgs; i++)\n    {\n        places.push_back(lua_tostring(L, i));\n    }\n    obj->wish(places);\n    return 0;\n}\n```", "```cpp\n[Lua] Visited: Paris\n[Lua] Unvisited: Amsterdam London\n[Lua] Visited: Berlin\n[Lua] Unvisited: Beijing\n```", "```cpp\nDestinations::Destinations() : wishlist({})\n{\n    std::cout << \"Destinations instance created: \"\n              << std::hex << this << std::endl;\n}\nDestinations::~Destinations()\n{\n    std::cout << \"Destinations instance destroyed: \"\n              << std::hex << this << std::endl;\n}\n```", "```cpp\nDestinations instance created: 0x12df07150\nDestinations instance created: 0x12f804170\n[Lua] Visited: Paris\n[Lua] Unvisited: Amsterdam London\nDestinations instance created: 0x12f8043a0\n[Lua] Visited: Berlin\n[Lua] Unvisited: Beijing\nDestinations instance destroyed: 0x12df07150\n```", "```cpp\nint luaDelete(lua_State *L)\n{\n    Destinations *obj = getObj(L);\n    delete obj;\n    return 0;\n}\n```", "```cpp\nint luaNew(lua_State *L)\n{\n    ....\n    if (type == LUA_TNIL)\n    {\n        ...\n        lua_pushcfunction(L, luaDelete);\n        lua_setfield(L, -2, \"__gc\");\n    }\n    ...\n}\n```", "```cpp\nDestinations instance created: 0x14c609a60\nDestinations instance created: 0x14c704170\n[Lua] Visited: Paris\n[Lua] Unvisited: Amsterdam London\nDestinations instance created: 0x14c7043a0\n[Lua] Visited: Berlin\n[Lua] Unvisited: Beijing\nDestinations instance destroyed: 0x14c609a60\nDestinations instance destroyed: 0x14c7043a0\nDestinations instance destroyed: 0x14c704170\n```"]