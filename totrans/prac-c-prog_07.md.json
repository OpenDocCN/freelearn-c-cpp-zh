["```cpp\npthread_t tid;\n```", "```cpp\npthread_create(&tid, NULL, runThread, NULL);\n```", "```cpp\nprintf(\"Running Thread \\n\");\n```", "```cpp\nfor(i=1;i<=5;i++) printf(\"%d\\n\",i);\n```", "```cpp\npthread_join(tid, NULL);\n```", "```cpp\n#include <stdio.h>\n#include <stdlib.h>\n#include <pthread.h>\n\nvoid *runThread(void *arg)\n{\n    int i;\n    printf(\"Running Thread \\n\");\n    for(i=1;i<=5;i++) printf(\"%d\\n\",i);\n    return NULL;\n}\n\nint main()\n{\n    pthread_t tid;\n    printf(\"In main function\\n\");\n    pthread_create(&tid, NULL, runThread, NULL);\n    pthread_join(tid, NULL);\n    printf(\"Thread over\\n\");\n    return 0;\n}\n```", "```cpp\nD:\\CBook>gcc createthread.c -o createthread\n```", "```cpp\npthread_t tid1, tid2;\n```", "```cpp\npthread_create(&tid1,NULL,runThread1,NULL);\npthread_create(&tid2,NULL,runThread2,NULL);\n```", "```cpp\nprintf(\"Running Thread 1\\n\");\n```", "```cpp\nfor(i=1;i<=5;i++)\n    printf(\"Thread 1 - %d\\n\",i);\n```", "```cpp\n  printf(\"Running Thread 2\\n\");\n```", "```cpp\nfor(i=1;i<=5;i++)\n    printf(\"Thread 2 - %d\\n\",i);\n```", "```cpp\npthread_join(tid1,NULL);\npthread_join(tid2,NULL);\n```", "```cpp\nprintf(\"Both threads are over\\n\");\n```", "```cpp\n#include<pthread.h>\n#include<stdio.h>\n\nvoid *runThread1(void *arg){\n    int i;\n    printf(\"Running Thread 1\\n\");\n    for(i=1;i<=5;i++)\n        printf(\"Thread 1 - %d\\n\",i);\n}\n\nvoid *runThread2(void *arg){\n    int i;\n    printf(\"Running Thread 2\\n\");\n    for(i=1;i<=5;i++)\n        printf(\"Thread 2 - %d\\n\",i);\n}\n\nint main(){\n    pthread_t tid1, tid2;\n    pthread_create(&tid1,NULL,runThread1,NULL);\n    pthread_create(&tid2,NULL,runThread2,NULL);\n    pthread_join(tid1,NULL);\n    pthread_join(tid2,NULL);\n    printf(\"Both threads are over\\n\");\n    return 0;\n}\n```", "```cpp\nD:\\CBook>gcc twothreads.c -o twothreads\n```", "```cpp\npthread_t tid1,tid2;\npthread_mutex_t lock;\n```", "```cpp\npthread_mutex_init(&lock, NULL)\n```", "```cpp\npthread_create(&tid1, NULL, &runThread, NULL);\npthread_create(&tid2, NULL, &runThread, NULL);\n```", "```cpp\npthread_mutex_lock(&lock);\n```", "```cpp\npthread_t id = pthread_self();\nif(pthread_equal(id,tid1))                                \n    printf(\"First thread is running\\n\");\n```", "```cpp\nprintf(\"Processing the common resource\\n\");\n```", "```cpp\nsleep(5);\n```", "```cpp\nprintf(\"First thread is over\\n\\n\");\n```", "```cpp\npthread_mutex_unlock(&lock);  \n```", "```cpp\npthread_mutex_lock(&lock);\n\n```", "```cpp\nprintf(\"Second thread is running\\n\");\n```", "```cpp\nprintf(\"Processing the common resource\\n\");\n```", "```cpp\nsleep(5);\nprintf(\"Second thread is over\\n\\n\"); \n```", "```cpp\npthread_mutex_unlock(&lock);  \n```", "```cpp\npthread_join(tid1, NULL);\npthread_join(tid2, NULL);\n```", "```cpp\npthread_mutex_destroy(&lock);\n```", "```cpp\n#include<stdio.h>\n#include<pthread.h>\n#include<unistd.h>\npthread_t tid1,tid2;\npthread_mutex_t lock;\n\nvoid* runThread(void *arg)\n{\n    pthread_mutex_lock(&lock);\n    pthread_t id = pthread_self();\n    if(pthread_equal(id,tid1))\n        printf(\"First thread is running\\n\");\n    else\n        printf(\"Second thread is running\\n\");\n    printf(\"Processing the common resource\\n\");\n    sleep(5);\n    if(pthread_equal(id,tid1))\n        printf(\"First thread is over\\n\\n\");\n    else\n        printf(\"Second thread is over\\n\\n\"); \n    pthread_mutex_unlock(&lock);  \n    return NULL;\n}\n\nint main(void)\n{ \n    if (pthread_mutex_init(&lock, NULL) != 0)\n        printf(\"\\n mutex init has failed\\n\");\n    pthread_create(&tid1, NULL, &runThread, NULL);\n    pthread_create(&tid2, NULL, &runThread, NULL);\n    pthread_join(tid1, NULL);\n    pthread_join(tid2, NULL);\n    pthread_mutex_destroy(&lock);\n    return 0;\n}\n```", "```cpp\nD:\\CBook>gcc twothreadsmutex.c -o twothreadsmutex\n```", "```cpp\n#define max 10\nint stack[max];\n```", "```cpp\npthread_mutex_t pop_mutex;\npthread_mutex_t push_mutex;\n```", "```cpp\nint top=-1;\n```", "```cpp\npthread_t tid1,tid2;\n```", "```cpp\npthread_create(&tid1,NULL,&push,NULL);\n```", "```cpp\npthread_create(&tid2,NULL,&pop,NULL);\n```", "```cpp\npthread_mutex_lock(&push_mutex);\n```", "```cpp\npthread_mutex_lock(&pop_mutex);\n```", "```cpp\nprintf(\"Enter the value to push: \");\nscanf(\"%d\",&n);\n```", "```cpp\ntop++;\nstack[top]=n;\n```", "```cpp\npthread_mutex_unlock(&pop_mutex);                                                       pthread_mutex_unlock(&push_mutex);  \n```", "```cpp\nprintf(\"Value is pushed to stack \\n\");\n```", "```cpp\npthread_mutex_lock(&pop_mutex);\n```", "```cpp\nsleep(5);\npthread_mutex_lock(&push_mutex);\n```", "```cpp\nk=stack[top];\n```", "```cpp\ntop--;\nprintf(\"Value popped is %d \\n\",k);\n```", "```cpp\npthread_mutex_unlock(&push_mutex);     \npthread_mutex_unlock(&pop_mutex);\n```", "```cpp\npthread_join(tid1,NULL);\npthread_join(tid2,NULL);\n```", "```cpp\n#include <stdio.h>\n#include <pthread.h>\n#include <unistd.h>\n#include <stdlib.h>\n\n#define max 10\npthread_mutex_t pop_mutex;\npthread_mutex_t push_mutex;\nint stack[max];\nint top=-1;\n\nvoid * push(void *arg) {\n    int n;\n    pthread_mutex_lock(&push_mutex);\n    pthread_mutex_lock(&pop_mutex);\n    printf(\"Enter the value to push: \");\n    scanf(\"%d\",&n);\n    top++;\n    stack[top]=n;\n    pthread_mutex_unlock(&pop_mutex);\n    pthread_mutex_unlock(&push_mutex);\n    printf(\"Value is pushed to stack \\n\");\n}\nvoid * pop(void *arg) {\n    int k;\n    pthread_mutex_lock(&pop_mutex);\n    pthread_mutex_lock(&push_mutex);\n    k=stack[top];\n    top--;\n    printf(\"Value popped is %d \\n\",k);\n    pthread_mutex_unlock(&push_mutex);\n    pthread_mutex_unlock(&pop_mutex);\n}\n\nint main() {\n    pthread_t tid1,tid2;\n    pthread_create(&tid1,NULL,&push,NULL);\n    pthread_create(&tid2,NULL,&pop,NULL);\n    printf(\"Both threads are created\\n\");\n    pthread_join(tid1,NULL);\n    pthread_join(tid2,NULL);\n    return 0;\n}\n```", "```cpp\nD:\\CBook>gcc deadlockstate.c -o deadlockstate\n```", "```cpp\n#define max 10\nint stack[max];\n```", "```cpp\npthread_mutex_t pop_mutex;\npthread_mutex_t push_mutex;\n```", "```cpp\nint top=-1;\n```", "```cpp\npthread_t tid1,tid2;\n```", "```cpp\npthread_create(&tid1,NULL,&push,NULL);\n```", "```cpp\npthread_create(&tid2,NULL,&pop,NULL);\n```", "```cpp\nprintf(\"Both threads are created\\n\");\n```", "```cpp\npthread_mutex_lock(&push_mutex);\n```", "```cpp\nsleep(2);\npthread_mutex_lock(&pop_mutex);\n```", "```cpp\nprintf(\"Enter the value to push: \");\nscanf(\"%d\",&n);\n```", "```cpp\ntop++;\nstack[top]=n;\n```", "```cpp\npthread_mutex_unlock(&pop_mutex);                                                   pthread_mutex_unlock(&push_mutex);\n```", "```cpp\nprintf(\"Value is pushed to stack \\n\");\n```", "```cpp\npthread_mutex_lock(&push_mutex);\n```", "```cpp\nsleep(5);\npthread_mutex_lock(&pop_mutex);\n```", "```cpp\nk=stack[top];\n```", "```cpp\ntop--;\nprintf(\"Value popped is %d \\n\",k);\n```", "```cpp\npthread_mutex_unlock(&pop_mutex);\npthread_mutex_unlock(&push_mutex);\n```", "```cpp\npthread_join(tid1,NULL);\npthread_join(tid2,NULL);\n```", "```cpp\n#include <stdio.h>\n#include <pthread.h>\n#include<unistd.h>\n#include <stdlib.h>\n\n#define max 10\npthread_mutex_t pop_mutex;\npthread_mutex_t push_mutex;\nint stack[max];\nint top=-1;\n\nvoid * push(void *arg) {\n    int n;\n    pthread_mutex_lock(&push_mutex);\n    sleep(2);\n    pthread_mutex_lock(&pop_mutex);\n    printf(\"Enter the value to push: \");\n    scanf(\"%d\",&n);\n    top++;\n    stack[top]=n;\n    pthread_mutex_unlock(&pop_mutex);\n    pthread_mutex_unlock(&push_mutex);\n    printf(\"Value is pushed to stack \\n\");\n}\n\nvoid * pop(void *arg) {\n    int k;\n    pthread_mutex_lock(&push_mutex);\n    sleep(5);\n    pthread_mutex_lock(&pop_mutex);\n    k=stack[top];\n    top--;\n    printf(\"Value popped from stack is %d \\n\",k);\n    pthread_mutex_unlock(&pop_mutex);\n    pthread_mutex_unlock(&push_mutex);\n}\n\nint main() {\n    pthread_t tid1,tid2;\n    pthread_create(&tid1,NULL,&push,NULL);\n    pthread_create(&tid2,NULL,&pop,NULL);\n    printf(\"Both threads are created\\n\");\n    pthread_join(tid1,NULL);\n    pthread_join(tid2,NULL);\n    return 0;\n}\n```", "```cpp\nD:\\CBook>gcc avoiddeadlockst.c -o avoiddeadlockst\n```"]