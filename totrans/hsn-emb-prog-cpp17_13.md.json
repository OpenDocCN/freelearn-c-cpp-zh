["```cpp\n#include <QCoreApplication> \n#include <core.h> \n\nint main(int argc, char *argv[]) { \n   QCoreApplication app(argc, argv); \n   Core core; \n\n   connect(&core, &Core::done, &app, &app::quit, Qt::QueuedConnection); \n   core.start(); \n\n   return app.exec(); \n} \n```", "```cpp\nconnect(core, SIGNAL(done()), &app, SLOT(quit()), Qt::QueuedConnection); \n```", "```cpp\n#include <QObject> \n\nclass Core : public QObject { \n   Q_OBJECT \npublic: \n   explicit Core(QObject *parent = 0); \n\nsignals: \n   void done(); \npublic slots: \n   void start(); \n}; \n```", "```cpp\n#include \"core.h\" \n#include <iostream> \n\nCore::Core(QObject *parent) : QObject(parent) { \n   // \n} \n\nvoid hang::start() { \n   std::cout << \"Start emitting done()\" << std::endl; \n   emit done(); \n} \n```", "```cpp\n#include \"mainwindow.h\" \n#include <QApplication> \n\nint main(int argc, char *argv[]) { \n    QApplication a(argc, argv); \n    MainWindow w; \n    w.show(); \n\n    return a.exec(); \n} \n```", "```cpp\n#include <QMainWindow> \n\n#include <QAudioRecorder> \n#include <QAudioProbe> \n#include <QMediaPlayer> \n\nnamespace Ui { \n    class MainWindow; \n} \n\nclass MainWindow : public QMainWindow { \n    Q_OBJECT \n\npublic: \n    explicit MainWindow(QWidget *parent = nullptr); \n    ~MainWindow(); \n\npublic slots: \n    void playBluetooth(); \n    void stopBluetooth(); \n    void playOnlineStream(); \n    void stopOnlineStream(); \n    void playLocalFile(); \n    void stopLocalFile(); \n    void recordMessage(); \n    void playMessage(); \n\n    void errorString(QString err); \n\n    void quit(); \n\nprivate: \n    Ui::MainWindow *ui; \n\n    QMediaPlayer* player; \n    QAudioRecorder* audioRecorder; \n    QAudioProbe* audioProbe; \n\n    qint64 silence; \n\nprivate slots: \n    void processBuffer(QAudioBuffer); \n}; \n```", "```cpp\nMainWindow::MainWindow(QWidget *parent) : QMainWindow(parent), \n    ui(new Ui::MainWindow) { \n    ui->setupUi(this); \n```", "```cpp\n    connect(ui->actionQuit, SIGNAL(triggered()), this, SLOT(quit())); \n```", "```cpp\n    connect(ui->playBluetoothButton, SIGNAL(pressed), this, SLOT(playBluetooth)); \n    connect(ui->stopBluetoothButton, SIGNAL(pressed), this, SLOT(stopBluetooth)); \n    connect(ui->playLocalAudioButton, SIGNAL(pressed), this, SLOT(playLocalFile)); \n    connect(ui->stopLocalAudioButton, SIGNAL(pressed), this, SLOT(stopLocalFile)); \n    connect(ui->playOnlineStreamButton, SIGNAL(pressed), this, SLOT(playOnlineStream)); \n    connect(ui->stopOnlineStreamButton, SIGNAL(pressed), this, SLOT(stopOnlineStream)); \n    connect(ui->recordMessageButton, SIGNAL(pressed), this, SLOT(recordMessage)); \n    connect(ui->playBackMessage, SIGNAL(pressed), this, SLOT(playMessage)); \n```", "```cpp\n    silence = 0; \n\n    // Create the audio interface instances. \n    player = new QMediaPlayer(this); \n    audioRecorder = new QAudioRecorder(this); \n    audioProbe = new QAudioProbe(this); \n\n    // Configure the audio recorder. \n    QAudioEncoderSettings audioSettings; \n    audioSettings.setCodec(\"audio/amr\"); \n    audioSettings.setQuality(QMultimedia::HighQuality);     \n    audioRecorder->setEncodingSettings(audioSettings);     \n    audioRecorder->setOutputLocation(QUrl::fromLocalFile(\"message/last_message.amr\")); \n\n    // Configure audio probe. \n    connect(audioProbe, SIGNAL(audioBufferProbed(QAudioBuffer)), this, SLOT(processBuffer(QAudioBuffer))); \n    audioProbeâ†’setSource(audioRecorder); \n```", "```cpp\n    QThread* thread = new QThread; \n    VoiceInput* vi = new VoiceInput(); \n    vi->moveToThread(thread); \n    connect(thread, SIGNAL(started()), vi, SLOT(run())); \n    connect(vi, SIGNAL(finished()), thread, SLOT(quit())); \n    connect(vi, SIGNAL(finished()), vi, SLOT(deleteLater())); \n    connect(thread, SIGNAL(finished()), thread, SLOT(deleteLater())); \n\n    connect(vi, SIGNAL(error(QString)), this, SLOT(errorString(QString))); \n    connect(vi, SIGNAL(playBluetooth), this, SLOT(playBluetooth)); \n    connect(vi, SIGNAL(stopBluetooth), this, SLOT(stopBluetooth)); \n    connect(vi, SIGNAL(playLocal), this, SLOT(playLocalFile)); \n    connect(vi, SIGNAL(stopLocal), this, SLOT(stopLocalFile)); \n    connect(vi, SIGNAL(playRemote), this, SLOT(playOnlineStream)); \n    connect(vi, SIGNAL(stopRemote), this, SLOT(stopOnlineStream)); \n    connect(vi, SIGNAL(recordMessage), this, SLOT(recordMessage)); \n    connect(vi, SIGNAL(playMessage), this, SLOT(playMessage)); \n\n    thread->start(); \n} \n```", "```cpp\nMainWindow::~MainWindow() { \n    delete ui; \n} \n```", "```cpp\n#include \"interface.h\" \n#include <QtGui/QGuiApplication> \n#include <QtGui/QOpenGLContext> \n#include <QtQuick/QQuickView> \n#include <QtQuick/QQuickItem> \n#include <QtQml/QQmlContext> \n#include <QObject> \n\nint main(int argc, char* argv[]) { \n    QGuiApplication app(argc, argv); \n\n    QSurfaceFormat format; \n    if (QOpenGLContext::openGLModuleType() == QOpenGLContext::LibGL) { \n        format.setVersion(3, 2); \n        format.setProfile(QSurfaceFormat::CoreProfile); \n    } \n\n    format.setDepthBufferSize(24); \n    format.setStencilBufferSize(8); \n\n    QQuickView view; \n    view.setFormat(format); \n    view.create(); \n\n    QmlInterface qmlinterface; \n    view.rootContext()->setContextProperty(\"qmlinterface\", &qmlinterface); \n    view.setSource(QUrl(\"qrc:/main.qml\")); \n\n    qmlinterface.setPlaying(); \n\n    view.setResizeMode(QQuickView::SizeRootObjectToView); \n    view.setMaximumSize(QSize(1820, 1080)); \n    view.setMinimumSize(QSize(300, 150)); \n    view.show(); \n\n    return app.exec(); \n} \n```", "```cpp\n#include <QtCore/QObject> \n#include <QMediaPlayer> \n#include <QByteArray> \n\nclass QmlInterface : public QObject { \n    Q_OBJECT     \n    Q_PROPERTY(QString durationTotal READ getDurationTotal NOTIFY durationTotalChanged) \n    Q_PROPERTY(QString durationLeft READ getDurationLeft NOTIFY durationLeftChanged) \n\n```", "```cpp\n\n    QString formatDuration(qint64 milliseconds); \n\n    QMediaPlayer mediaPlayer; \n    QByteArray magnitudeArray; \n    const int millisecondsPerBar = 68; \n    QString durationTotal; \n    QString durationLeft; \n    qint64 trackDuration; \n\npublic: \n    explicit QmlInterface(QObject *parent = nullptr); \n\n    Q_INVOKABLE bool isHoverEnabled() const; \n    Q_INVOKABLE void setPlaying(); \n   Q_INVOKABLE void setStopped(); \n   Q_INVOKABLE void setPaused(); \n    Q_INVOKABLE qint64 duration(); \n    Q_INVOKABLE qint64 position(); \n    Q_INVOKABLE double getNextAudioLevel(int offsetMs); \n\n    QString getDurationTotal() { return durationTotal; } \n    QString getDurationLeft() { return durationLeft; } \n\npublic slots: \n    void mediaStatusChanged(QMediaPlayer::MediaStatus status); \n    void durationChanged(qint64 duration); \n    void positionChanged(qint64 position); \n\nsignals: \n    void start(); \n    void stopped(); \n    void paused(); \n    void playing(); \n    void durationTotalChanged(); \n    void durationLeftChanged(); \n}; \n```", "```cpp\n#include \"interface.h\" \n#include <QtGui/QTouchDevice> \n#include <QDebug> \n#include <QFile> \n#include <QtMath> \n\nQmlInterface::QmlInterface(QObject *parent) : QObject(parent) { \n    // Set track for media player. \n    mediaPlayer.setMedia(QUrl(\"qrc:/music/tiltshifted_lost_neon_sun.mp3\")); \n\n    // Load magnitude file for the audio track. \n    QFile magFile(\":/music/visualization.raw\", this); \n    magFile.open(QFile::ReadOnly); \n    magnitudeArray = magFile.readAll(); \n\n    // Media player connections. \n    connect(&mediaPlayer, SIGNAL(mediaStatusChanged(QMediaPlayer::MediaStatus)), this, SLOT(mediaStatusChanged(QMediaPlayer::MediaStatus))); \n    connect(&mediaPlayer, SIGNAL(durationChanged(qint64)), this, SLOT(durationChanged(qint64))); \n    connect(&mediaPlayer, SIGNAL(positionChanged(qint64)), this, SLOT(positionChanged(qint64))); \n} \n```", "```cpp\nbool QmlInterface::isHoverEnabled() const { \n#if defined(Q_OS_IOS) || defined(Q_OS_ANDROID) || defined(Q_OS_QNX) || defined(Q_OS_WINRT) \n    return false; \n#else \n    bool isTouch = false; \n    foreach (const QTouchDevice *dev, QTouchDevice::devices()) { \n        if (dev->type() == QTouchDevice::TouchScreen) { \n            isTouch = true; \n            break; \n        } \n    } \n\n    bool isMobile = false; \n    if (qEnvironmentVariableIsSet(\"QT_QUICK_CONTROLS_MOBILE\")) { \n        isMobile = true; \n    } \n\n    return !isTouch && !isMobile; \n#endif \n} \n```", "```cpp\nvoid QmlInterface::setPlaying() { \n   mediaPlayer.play(); \n} \n\nvoid QmlInterface::setStopped() { \n   mediaPlayer.stop(); \n} \n\nvoid QmlInterface::setPaused() { \n   mediaPlayer.pause(); \n} \n```", "```cpp\nvoid QmlInterface::mediaStatusChanged(QMediaPlayer::MediaStatus status) { \n    if (status == QMediaPlayer::EndOfMedia) { \n        emit stopped(); \n    } \n} \n```", "```cpp\nvoid QmlInterface::durationChanged(qint64 duration) { \n    qDebug() << \"Duration changed: \" << duration; \n\n    durationTotal = formatDuration(duration); \n    durationLeft = \"-\" + durationTotal; \n    trackDuration = duration; \n    emit start(); \n    emit durationTotalChanged(); \n    emit durationLeftChanged(); \n} \n\nvoid QmlInterface::positionChanged(qint64 position) { \n    qDebug() << \"Position changed: \" << position; \n    durationLeft = \"-\" + formatDuration((trackDuration - position)); \n    emit durationLeftChanged(); \n} \n```", "```cpp\nqint64 QmlInterface::duration() { \n    qDebug() << \"Returning duration value: \" << mediaPlayer.duration(); \n    return mediaPlayer.duration(); \n} \n\nqint64 QmlInterface::position() { \n    qDebug() << \"Returning position value: \" << mediaPlayer.position(); \n    return mediaPlayer.position(); \n} \n```", "```cpp\ndouble QmlInterface::getNextAudioLevel(int offsetMs) { \n    // Calculate the integer index position in to the magnitude array \n    qint64 index = ((mediaPlayer.position() + offsetMs) / millisecondsPerBar) | 0; \n\n    if (index < 0 || index >= (magnitudeArray.length() / 2)) { \n        return 0.0; \n    } \n\n    return (((quint16*) magnitudeArray.data())[index] / 63274.0); \n} \n```", "```cpp\nQString QmlInterface::formatDuration(qint64 milliseconds) { \n    qint64 minutes = floor(milliseconds / 60000); \n    milliseconds -= minutes * 60000; \n    qint64 seconds = milliseconds / 1000; \n    seconds = round(seconds); \n    if (seconds < 10) { \n        return QString::number(minutes) + \":0\" + QString::number(seconds); \n    } \n    else { \n        return QString::number(minutes) + \":\" + QString::number(seconds); \n    } \n} \n```", "```cpp\nimport QtQuick 2.0 \nimport QtQuick.Scene3D 2.0 \nimport QtQuick.Layouts 1.2 \nimport QtMultimedia 5.0 \n\nItem { \n    id: mainview \n    width: 1215 \n    height: 720 \n    visible: true \n    property bool isHoverEnabled: false \n    property int mediaLatencyOffset: 68 \n```", "```cpp\n    state: \"stopped\" \n    states: [ \n        State { \n            name: \"playing\" \n            PropertyChanges { \n                target: playButtonImage \n                source: { \n                    if (playButtonMouseArea.containsMouse) \n                        \"qrc:/images/pausehoverpressed.png\" \n                    else \n                        \"qrc:/images/pausenormal.png\" \n                } \n            } \n            PropertyChanges { \n                target: stopButtonImage \n                source: \"qrc:/images/stopnormal.png\" \n            } \n        }, \n        State { \n            name: \"paused\" \n            PropertyChanges { \n                target: playButtonImage \n                source: { \n                    if (playButtonMouseArea.containsMouse) \n                        \"qrc:/images/playhoverpressed.png\" \n                    else \n                        \"qrc:/images/playnormal.png\" \n                } \n            } \n            PropertyChanges { \n                target: stopButtonImage \n                source: \"qrc:/images/stopnormal.png\" \n            } \n        }, \n        State { \n            name: \"stopped\" \n            PropertyChanges { \n                target: playButtonImage \n                source: \"qrc:/images/playnormal.png\" \n            } \n            PropertyChanges { \n                target: stopButtonImage \n                source: \"qrc:/images/stopdisabled.png\" \n            } \n        } \n    ]    \n```", "```cpp\n    Connections { \n        target: qmlinterface \n        onStopped: mainview.state = \"stopped\" \n        onPaused: mainview.state = \"paused\" \n        onPlaying: mainview.state = \"started\" \n        onStart: visualizer.startVisualization() \n    } \n```", "```cpp\n    Component.onCompleted: isHoverEnabled = qmlinterface.isHoverEnabled() \n\n    Image { \n        id: coverImage \n        anchors.fill: parent \n        source: \"qrc:/images/albumcover.png\" \n    } \n```", "```cpp\n    Scene3D { \n        anchors.fill: parent \n\n        Visualizer { \n            id: visualizer \n            animationState: mainview.state \n            numberOfBars: 120 \n            barRotationTimeMs: 8160 // 68 ms per bar \n        } \n    } \n```", "```cpp\n    Rectangle { \n        id: blackBottomRect \n        color: \"black\" \n        width: parent.width \n        height: 0.14 * mainview.height \n        anchors.bottom: parent.bottom \n    } \n\n    Text { \n        text: qmlinterface.durationTotal \n        color: \"#80C342\" \n        x: parent.width / 6 \n        y: mainview.height - mainview.height / 8 \n        font.pixelSize: 12 \n    } \n\n    Text { \n        text: qmlinterface.durationLeft \n        color: \"#80C342\" \n        x: parent.width - parent.width / 6 \n        y: mainview.height - mainview.height / 8 \n        font.pixelSize: 12 \n    } \n```", "```cpp\n    property int buttonHorizontalMargin: 10 \n    Rectangle { \n        id: playButton \n        height: 54 \n        width: 54 \n        anchors.bottom: parent.bottom \n        anchors.bottomMargin: width \n        x: parent.width / 2 - width - buttonHorizontalMargin \n        color: \"transparent\" \n\n        Image { \n            id: playButtonImage \n            source: \"qrc:/images/pausenormal.png\" \n        } \n\n        MouseArea { \n            id: playButtonMouseArea \n            anchors.fill: parent \n            hoverEnabled: isHoverEnabled \n            onClicked: { \n                if (mainview.state == 'paused' || mainview.state == 'stopped') \n                    mainview.state = 'playing' \n                else \n                    mainview.state = 'paused' \n            } \n            onEntered: { \n                if (mainview.state == 'playing') \n                    playButtonImage.source = \"qrc:/images/pausehoverpressed.png\" \n                else \n                    playButtonImage.source = \"qrc:/images/playhoverpressed.png\" \n            } \n            onExited: { \n                if (mainview.state == 'playing') \n                    playButtonImage.source = \"qrc:/images/pausenormal.png\" \n                else \n                    playButtonImage.source = \"qrc:/images/playnormal.png\" \n            } \n        } \n    } \n\n    Rectangle { \n        id: stopButton \n        height: 54 \n        width: 54 \n        anchors.bottom: parent.bottom \n        anchors.bottomMargin: width \n        x: parent.width / 2 + buttonHorizontalMargin \n        color: \"transparent\" \n\n        Image { \n            id: stopButtonImage \n            source: \"qrc:/images/stopnormal.png\" \n        } \n\n        MouseArea { \n            anchors.fill: parent \n            hoverEnabled: isHoverEnabled \n            onClicked: mainview.state = 'stopped' \n            onEntered: { \n                if (mainview.state != 'stopped') \n                    stopButtonImage.source = \"qrc:/images/stophoverpressed.png\" \n            } \n            onExited: { \n                if (mainview.state != 'stopped') \n                    stopButtonImage.source = \"qrc:/images/stopnormal.png\" \n            } \n        } \n    } \n} \n```", "```cpp\nimport Qt3D.Core 2.0 \nimport Qt3D.Render 2.0 \nimport Qt3D.Extras 2.0 \nimport QtQuick 2.4 as QQ2 \n\nEntity { \n    property int rotationTimeMs: 0 \n    property int entityIndex: 0 \n    property int entityCount: 0 \n    property int startAngle: 0 + 360 / entityCount * entityIndex \n    property bool needsNewMagnitude: true \n    property real magnitude: 0 \n    property real animWeight: 0 \n\n    property color lowColor: \"black\" \n    property color highColor: \"#b3b3b3\" \n    property color barColor: lowColor \n\n    property string entityAnimationsState: \"stopped\" \n    property bool entityAnimationsPlaying: true \n\n    property var entityMesh: null \n```", "```cpp\n    onEntityAnimationsStateChanged: { \n        if (animationState == \"paused\") { \n            if (angleAnimation.running) \n                angleAnimation.pause() \n            if (barColorAnimations.running) \n                barColorAnimations.pause() \n        } else if (animationState == \"playing\"){ \n            needsNewMagnitude = true; \n            if (heightDecreaseAnimation.running) \n                heightDecreaseAnimation.stop() \n            if (angleAnimation.paused) { \n                angleAnimation.resume() \n            } else if (!entityAnimationsPlaying) { \n                magnitude = 0 \n                angleAnimation.start() \n                entityAnimationsPlaying = true \n            } \n            if (barColorAnimations.paused) \n                barColorAnimations.resume() \n        } else { \n            if (animWeight != 0) \n                heightDecreaseAnimation.start() \n            needsNewMagnitude = true \n            angleAnimation.stop() \n            barColorAnimations.stop() \n            entityAnimationsPlaying = false \n        } \n    } \n```", "```cpp\n    property Material barMaterial: PhongMaterial { \n        diffuse: barColor \n        ambient: Qt.darker(barColor) \n        specular: \"black\" \n        shininess: 1 \n    } \n```", "```cpp\n    property Transform angleTransform: Transform { \n        property real heightIncrease: magnitude * animWeight \n        property real barAngle: startAngle \n\n        matrix: { \n            var m = Qt.matrix4x4() \n            m.rotate(barAngle, Qt.vector3d(0, 1, 0)) \n            m.translate(Qt.vector3d(1.1, heightIncrease / 2 - heightIncrease * 0.05, 0)) \n            m.scale(Qt.vector3d(0.5, heightIncrease * 15, 0.5)) \n            return m; \n        } \n\n        property real compareAngle: barAngle \n        onBarAngleChanged: { \n            compareAngle = barAngle \n\n            if (compareAngle > 360) \n                compareAngle = barAngle - 360 \n\n            if (compareAngle > 180) { \n                parent.enabled = false \n                animWeight = 0 \n                if (needsNewMagnitude) { \n                    // Calculate the ms offset where the bar will be at the center point of the \n                    // visualization and fetch the correct magnitude for that point in time. \n                    var offset = (90.0 + 360.0 - compareAngle) * (rotationTimeMs / 360.0) \n                    magnitude = qmlinterface.getNextAudioLevel(offset) \n                    needsNewMagnitude = false \n                } \n            } else { \n                parent.enabled = true \n                // Calculate a power of 2 curve for the bar animation that peaks at 90 degrees \n                animWeight = Math.min((compareAngle / 90), (180 - compareAngle) / 90) \n                animWeight = animWeight * animWeight \n                if (!needsNewMagnitude) { \n                    needsNewMagnitude = true \n                    barColorAnimations.start() \n                } \n            } \n        } \n    } \n```", "```cpp\n    components: [entityMesh, barMaterial, angleTransform] \n\n    QQ2.NumberAnimation { \n        id: angleAnimation \n        target: angleTransform \n        property: \"barAngle\" \n        duration: rotationTimeMs \n        loops: QQ2.Animation.Infinite \n        running: true \n        from: startAngle \n        to: 360 + startAngle \n    } \n\n    QQ2.NumberAnimation { \n        id: heightDecreaseAnimation \n        target: angleTransform \n        property: \"heightIncrease\" \n        duration: 400 \n        running: false \n        from: angleTransform.heightIncrease \n        to: 0 \n        onStopped: barColor = lowColor \n    } \n\n    property int animationDuration: angleAnimation.duration / 6 \n\n    QQ2.SequentialAnimation on barColor { \n        id: barColorAnimations \n        running: false \n\n        QQ2.ColorAnimation { \n            from: lowColor \n            to: highColor \n            duration: animationDuration \n        } \n\n        QQ2.PauseAnimation { \n            duration: animationDuration \n        } \n\n        QQ2.ColorAnimation { \n            from: highColor \n            to: lowColor \n            duration: animationDuration \n        } \n    } \n} \n```", "```cpp\nimport Qt3D.Core 2.0 \nimport Qt3D.Render 2.0 \nimport Qt3D.Extras 2.0 \nimport QtQuick 2.2 as QQ2 \n\nEntity { \n    id: sceneRoot \n    property int barRotationTimeMs: 1 \n    property int numberOfBars: 1 \n    property string animationState: \"stopped\" \n    property real titleStartAngle: 95 \n    property real titleStopAngle: 5 \n\n    onAnimationStateChanged: { \n        if (animationState == \"playing\") { \n            qmlinterface.setPlaying(); \n            if (progressTransformAnimation.paused) \n                progressTransformAnimation.resume() \n            else \n                progressTransformAnimation.start() \n        } else if (animationState == \"paused\") { \n            qmlinterface.setPaused(); \n            if (progressTransformAnimation.running) \n                progressTransformAnimation.pause() \n        } else { \n            qmlinterface.setStopped(); \n            progressTransformAnimation.stop() \n            progressTransform.progressAngle = progressTransform.defaultStartAngle \n        } \n    } \n```", "```cpp\n    QQ2.Item { \n        id: stateItem \n\n        state: animationState \n        states: [ \n            QQ2.State { \n                name: \"playing\" \n                QQ2.PropertyChanges { \n                    target: titlePrism \n                    titleAngle: titleStopAngle \n                } \n            }, \n            QQ2.State { \n                name: \"paused\" \n                QQ2.PropertyChanges { \n                    target: titlePrism \n                    titleAngle: titleStopAngle \n                } \n            }, \n            QQ2.State { \n                name: \"stopped\" \n                QQ2.PropertyChanges { \n                    target: titlePrism \n                    titleAngle: titleStartAngle \n                } \n            } \n        ] \n\n        transitions: QQ2.Transition { \n            QQ2.NumberAnimation { \n                property: \"titleAngle\" \n                duration: 2000 \n                running: false \n            } \n        } \n    } \n```", "```cpp\n    function startVisualization() { \n        progressTransformAnimation.duration = qmlinterface.duration() \n        mainview.state = \"playing\" \n        progressTransformAnimation.start() \n    } \n```", "```cpp\n    Camera { \n        id: camera \n        projectionType: CameraLens.PerspectiveProjection \n        fieldOfView: 45 \n        aspectRatio: 1820 / 1080 \n        nearPlane: 0.1 \n        farPlane: 1000.0 \n        position: Qt.vector3d(0.014, 0.956, 2.178) \n        upVector: Qt.vector3d(0.0, 1.0, 0.0) \n        viewCenter: Qt.vector3d(0.0, 0.7, 0.0) \n    } \n```", "```cpp\n    Entity { \n        components: [ \n            DirectionalLight { \n                intensity: 0.9 \n                worldDirection: Qt.vector3d(0, 0.6, -1) \n            } \n        ] \n    } \n\n    RenderSettings { \n        id: external_forward_renderer \n        activeFrameGraph: ForwardRenderer { \n            camera: camera \n            clearColor: \"transparent\" \n        } \n    } \n```", "```cpp\n    components: [external_forward_renderer] \n\n    CuboidMesh { \n        id: barMesh \n        xExtent: 0.1 \n        yExtent: 0.1 \n        zExtent: 0.1 \n    } \n```", "```cpp\n    NodeInstantiator { \n        id: collection \n        property int maxCount: parent.numberOfBars \n        model: maxCount \n\n        delegate: BarEntity { \n            id: cubicEntity \n            entityMesh: barMesh \n            rotationTimeMs: sceneRoot.barRotationTimeMs \n            entityIndex: index \n            entityCount: sceneRoot.numberOfBars \n            entityAnimationsState: animationState \n            magnitude: 0 \n        } \n    } \n```", "```cpp\n    Entity { \n        id: titlePrism \n        property real titleAngle: titleStartAngle \n\n        Entity { \n            id: titlePlane \n\n            PlaneMesh { \n                id: titlePlaneMesh \n                width: 550 \n                height: 100 \n            } \n\n            Transform { \n                id: titlePlaneTransform \n                scale: 0.003 \n                translation: Qt.vector3d(0, 0.11, 0) \n            } \n\n            NormalDiffuseMapAlphaMaterial { \n                id: titlePlaneMaterial \n                diffuse: TextureLoader { source: \"qrc:/images/demotitle.png\" } \n                normal: TextureLoader { source: \"qrc:/images/normalmap.png\" } \n                shininess: 1.0 \n            } \n\n            components: [titlePlaneMesh, titlePlaneMaterial, titlePlaneTransform] \n        } \n```", "```cpp\n        Entity { \n            id: songTitlePlane \n\n            PlaneMesh { \n                id: songPlaneMesh \n                width: 550 \n                height: 100 \n            } \n\n            Transform { \n                id: songPlaneTransform \n                scale: 0.003 \n                rotationX: 90 \n                translation: Qt.vector3d(0, -0.03, 0.13) \n            } \n\n            property Material songPlaneMaterial: NormalDiffuseMapAlphaMaterial { \n                diffuse: TextureLoader { source: \"qrc:/images/songtitle.png\" } \n                normal: TextureLoader { source: \"qrc:/images/normalmap.png\" } \n                shininess: 1.0 \n            } \n\n            components: [songPlaneMesh, songPlaneMaterial, songPlaneTransform] \n        } \n```", "```cpp\n        property Transform titlePrismPlaneTransform: Transform { \n            matrix: { \n                var m = Qt.matrix4x4() \n                m.translate(Qt.vector3d(-0.5, 1.3, -0.4)) \n                m.rotate(titlePrism.titleAngle, Qt.vector3d(1, 0, 0)) \n                return m; \n            } \n        } \n\n        components: [titlePlane, songTitlePlane, titlePrismPlaneTransform] \n    } \n```", "```cpp\n    Mesh { \n        id: circleMesh \n        source: \"qrc:/meshes/circle.obj\" \n    } \n\n    Entity { \n        id: circleEntity \n        property Material circleMaterial: PhongAlphaMaterial { \n            alpha: 0.4 \n            ambient: \"black\" \n            diffuse: \"black\" \n            specular: \"black\" \n            shininess: 10000 \n        } \n\n        components: [circleMesh, circleMaterial] \n    } \n```", "```cpp\n    Mesh { \n        id: progressMesh \n        source: \"qrc:/meshes/progressbar.obj\" \n    } \n\n    Transform { \n        id: progressTransform \n        property real defaultStartAngle: -90 \n        property real progressAngle: defaultStartAngle \n        rotationY: progressAngle \n    } \n\n    Entity { \n        property Material progressMaterial: PhongMaterial { \n            ambient: \"purple\" \n            diffuse: \"white\" \n        } \n\n        components: [progressMesh, progressMaterial, progressTransform] \n    } \n\n    QQ2.NumberAnimation { \n        id: progressTransformAnimation \n        target: progressTransform \n        property: \"progressAngle\" \n        duration: 0 \n        running: false \n        from: progressTransform.defaultStartAngle \n        to: -270 \n        onStopped: if (animationState != \"stopped\") animationState = \"stopped\" \n    } \n} \n```"]