["```cpp\n#include<stdarg.h>\n```", "```cpp\nint min(int count, ...)\n```", "```cpp\n{\n```", "```cpp\n   va_list args;\n```", "```cpp\n   va_start(args, count);\n```", "```cpp\n   int val = va_arg(args, int);\n```", "```cpp\n   for (int i = 1; i < count; i++)\n```", "```cpp\n   {\n```", "```cpp\n      int n = va_arg(args, int);\n```", "```cpp\n      if (n < val)\n```", "```cpp\n         val = n;\n```", "```cpp\n   }\n```", "```cpp\n   va_end(args);\n```", "```cpp\n   return val;\n```", "```cpp\n}\n```", "```cpp\nint main()\n```", "```cpp\n{\n```", "```cpp\n   std::cout << \"min(42, 7)=\" << min(2, 42, 7) << '\\n';\n```", "```cpp\n   std::cout << \"min(1,5,3,-4,9)=\" << \n```", "```cpp\n                 min(5, 1, 5, 3, -4, \n```", "```cpp\n              9) << '\\n';\n```", "```cpp\n}\n```", "```cpp\ntemplate <typename T>\n```", "```cpp\nT min(int count, ...)\n```", "```cpp\n{\n```", "```cpp\n   va_list args;\n```", "```cpp\n   va_start(args, count);\n```", "```cpp\n   T val = va_arg(args, T);\n```", "```cpp\n   for (int i = 1; i < count; i++)\n```", "```cpp\n   {\n```", "```cpp\n      T n = va_arg(args, T);\n```", "```cpp\n      if (n < val)\n```", "```cpp\n         val = n;\n```", "```cpp\n   }\n```", "```cpp\n   va_end(args);\n```", "```cpp\n   return val;\n```", "```cpp\n}\n```", "```cpp\nint main()\n```", "```cpp\n{\n```", "```cpp\n   std::cout << \"min(42.0, 7.5)=\"\n```", "```cpp\n             << min<double>(2, 42.0, 7.5) << '\\n';\n```", "```cpp\n   std::cout << \"min(1,5,3,-4,9)=\" \n```", "```cpp\n             << min<int>(5, 1, 5, 3, -4, 9) << '\\n';\n```", "```cpp\n}\n```", "```cpp\ntemplate <typename T>\n```", "```cpp\nT min(T a, T b)\n```", "```cpp\n{\n```", "```cpp\n   return a < b ? a : b;\n```", "```cpp\n}\n```", "```cpp\ntemplate <typename T, typename... Args>\n```", "```cpp\nT min(T a, Args... args)\n```", "```cpp\n{\n```", "```cpp\n   return min(a, min(args...));\n```", "```cpp\n}\n```", "```cpp\nint main()\n```", "```cpp\n{\n```", "```cpp\n   std::cout << \"min(42.0, 7.5)=\" << min(42.0, 7.5) \n```", "```cpp\n             << '\\n';\n```", "```cpp\n   std::cout << \"min(1,5,3,-4,9)=\" << min(1, 5, 3, -4, 9)\n```", "```cpp\n             << '\\n';\n```", "```cpp\n}\n```", "```cpp\nint min(int a, int b)\n```", "```cpp\n{\n```", "```cpp\n   return a < b ? a : b;\n```", "```cpp\n}\n```", "```cpp\nint min(int a, int b, int c)\n```", "```cpp\n{\n```", "```cpp\n   return min(a, min(b, c));\n```", "```cpp\n}\n```", "```cpp\nint min(int a, int b, int c, int d)\n```", "```cpp\n{\n```", "```cpp\n   return min(a, min(b, min(c, d)));\n```", "```cpp\n}\n```", "```cpp\nint min(int a, int b, int c, int d, int e)\n```", "```cpp\n{\n```", "```cpp\n   return min(a, min(b, min(c, min(d, e))));\n```", "```cpp\n}\n```", "```cpp\nint main()\n```", "```cpp\n{    \n```", "```cpp\n   std::cout << min(1, 5, 3, -4, 9);\n```", "```cpp\n}\n```", "```cpp\nsub     rsp, 8\n```", "```cpp\nmov     esi, -4\n```", "```cpp\nmov     edi, OFFSET FLAT:_ZSt4cout\n```", "```cpp\ncall    std::basic_ostream<char, std::char_traits<char>>\n```", "```cpp\n           ::operator<<(int)\n```", "```cpp\nmov     eax, 0\n```", "```cpp\nadd     rsp, 8\n```", "```cpp\nret\n```", "```cpp\nint main()\n```", "```cpp\n{    \n```", "```cpp\n    int a, b, c, d, e;\n```", "```cpp\n    std::cin >> a >> b >> c >> d >> e;\n```", "```cpp\n    std::cout << min(a, b, c, d, e);\n```", "```cpp\n}\n```", "```cpp\nmov     esi, DWORD PTR [rsp+12]\n```", "```cpp\nmov     eax, DWORD PTR [rsp+16]\n```", "```cpp\ncmp     esi, eax\n```", "```cpp\ncmovg   esi, eax\n```", "```cpp\nmov     eax, DWORD PTR [rsp+20]\n```", "```cpp\ncmp     esi, eax\n```", "```cpp\ncmovg   esi, eax\n```", "```cpp\nmov     eax, DWORD PTR [rsp+24]\n```", "```cpp\ncmp     esi, eax\n```", "```cpp\ncmovg   esi, eax\n```", "```cpp\nmov     eax, DWORD PTR [rsp+28]\n```", "```cpp\ncmp     esi, eax\n```", "```cpp\ncmovg   esi, eax\n```", "```cpp\nmov     edi, OFFSET FLAT:_ZSt4cout\n```", "```cpp\ncall    std::basic_ostream<char, std::char_traits<char>> \n```", "```cpp\n             ::operator<<(int)\n```", "```cpp\ntemplate <typename T>\n```", "```cpp\nT min(T a, T b)\n```", "```cpp\n{\n```", "```cpp\n#if defined(__clang__) || defined(__GNUC__) || defined(__GNUG__)\n```", "```cpp\n   std::cout << __PRETTY_FUNCTION__ << \"\\n\";\n```", "```cpp\n#elif defined(_MSC_VER)\n```", "```cpp\n   std::cout << __FUNCSIG__ << \"\\n\";\n```", "```cpp\n#endif\n```", "```cpp\n   return a < b ? a : b;\n```", "```cpp\n}\n```", "```cpp\ntemplate <typename T, typename... Args>\n```", "```cpp\nT min(T a, Args... args)\n```", "```cpp\n{\n```", "```cpp\n#if defined(__clang__) || defined(__GNUC__) || defined(__GNUG__)\n```", "```cpp\n   std::cout << __PRETTY_FUNCTION__ << \"\\n\";\n```", "```cpp\n#elif defined(_MSC_VER)\n```", "```cpp\n   std::cout << __FUNCSIG__ << \"\\n\";\n```", "```cpp\n#endif\n```", "```cpp\n   return min(a, min(args...));\n```", "```cpp\n}\n```", "```cpp\nint main()\n```", "```cpp\n{\n```", "```cpp\n   min(1, 5, 3, -4, 9);\n```", "```cpp\n}\n```", "```cpp\nT min(T, Args...) [T = int, Args = <int, int, int, int>]\nT min(T, Args...) [T = int, Args = <int, int, int>]\nT min(T, Args...) [T = int, Args = <int, int>]\nT min(T, T) [T = int]\nT min(T, T) [T = int]\nT min(T, T) [T = int]\nT min(T, T) [T = int]\n```", "```cpp\nint __cdecl min<int,int,int,int,int>(int,int,int,int,int)\nint __cdecl min<int,int,int,int>(int,int,int,int)\nint __cdecl min<int,int,int>(int,int,int)\nint __cdecl min<int>(int,int)\nint __cdecl min<int>(int,int)\nint __cdecl min<int>(int,int)\nint __cdecl min<int>(int,int)\n```", "```cpp\ntemplate <typename T, typename... Args>\n```", "```cpp\nT sum(T a, Args... args)\n```", "```cpp\n{\n```", "```cpp\n   if constexpr (sizeof...(args) == 0)\n```", "```cpp\n      return a;\n```", "```cpp\n   else\n```", "```cpp\n      return a + sum(args...);\n```", "```cpp\n}\n```", "```cpp\ntemplate <typename T>\n```", "```cpp\nT sum(T a)\n```", "```cpp\n{\n```", "```cpp\n   return a;\n```", "```cpp\n}\n```", "```cpp\ntemplate <typename T, typename... Args>\n```", "```cpp\nT sum(T a, Args... args)\n```", "```cpp\n{\n```", "```cpp\n   return a + sum(args...);\n```", "```cpp\n}\n```", "```cpp\ntemplate<typename... Ts>\n```", "```cpp\nconstexpr auto get_type_sizes()\n```", "```cpp\n{\n```", "```cpp\n   return std::array<std::size_t, \n```", "```cpp\n                     sizeof...(Ts)>{sizeof(Ts)...};\n```", "```cpp\n}\n```", "```cpp\nauto sizes = get_type_sizes<short, int, long, long long>();\n```", "```cpp\ntemplate<typename T1, typename T2, \n```", "```cpp\n         typename T3, typename T4>\n```", "```cpp\nconstexpr auto get_type_sizes()\n```", "```cpp\n{\n```", "```cpp\n   return std::array<std::size_t, 4> {\n```", "```cpp\n      sizeof(T1), sizeof(T2), sizeof(T3), sizeof(T4)\n```", "```cpp\n   };\n```", "```cpp\n}\n```", "```cpp\ntemplate <typename... Ts, typename... Us>\n```", "```cpp\nconstexpr auto multipacks(Ts... args1, Us... args2)\n```", "```cpp\n{\n```", "```cpp\n   std::cout << sizeof...(args1) << ','\n```", "```cpp\n             << sizeof...(args2) << '\\n';\n```", "```cpp\n}\n```", "```cpp\nmultipacks<int>(1, 2, 3, 4, 5, 6);\n```", "```cpp\n                 // 1,5\n```", "```cpp\nmultipacks<int, int, int>(1, 2, 3, 4, 5, 6);\n```", "```cpp\n                // 3,3\n```", "```cpp\nmultipacks<int, int, int, int>(1, 2, 3, 4, 5, 6);\n```", "```cpp\n               // 4,2\n```", "```cpp\nmultipacks<int, int, int, int, int, int>(1, 2, 3, 4, 5, 6); \n```", "```cpp\n               // 6,0\n```", "```cpp\nmultipacks<int, int>(1, 2, 4.0, 5.0, 6.0);         // 2,3\n```", "```cpp\nmultipacks<int, int, int>(1, 2, 3, 4.0, 5.0, 6.0); // 3,3\n```", "```cpp\ntemplate <typename... Ts, typename... Us>\n```", "```cpp\nconstexpr auto multipacks(Ts... args1, Us... args2)\n```", "```cpp\n{\n```", "```cpp\n   static_assert(\n```", "```cpp\n      sizeof...(args1) == sizeof...(args2),\n```", "```cpp\n      \"Packs must be of equal sizes.\");\n```", "```cpp\n}\n```", "```cpp\nmultipacks<int>(1, 2, 3, 4, 5, 6);                   // error\n```", "```cpp\nmultipacks<int, int, int>(1, 2, 3, 4, 5, 6);         // OK\n```", "```cpp\nmultipacks<int, int, int, int>(1, 2, 3, 4, 5, 6);    // error\n```", "```cpp\nmultipacks<int, int, int, int, int, int>(1, 2, 3, 4, 5, 6); \n```", "```cpp\n                                                     // error\n```", "```cpp\nmultipacks<int, int>(1, 2, 4.0, 5.0, 6.0);           // error\n```", "```cpp\nmultipacks<int, int, int>(1, 2, 3, 4.0, 5.0, 6.0);   // OK\n```", "```cpp\ntemplate<typename, typename>\n```", "```cpp\nstruct func_pair;\n```", "```cpp\ntemplate<typename R1, typename... A1, \n```", "```cpp\n         typename R2, typename... A2>\n```", "```cpp\nstruct func_pair<R1(A1...), R2(A2...)>\n```", "```cpp\n{\n```", "```cpp\n   std::function<R1(A1...)> f;\n```", "```cpp\n   std::function<R2(A2...)> g;\n```", "```cpp\n};\n```", "```cpp\nbool twice_as(int a, int b)\n```", "```cpp\n{\n```", "```cpp\n   return a >= b*2;\n```", "```cpp\n}\n```", "```cpp\ndouble sum_and_div(int a, int b, double c)\n```", "```cpp\n{\n```", "```cpp\n   return (a + b) / c;\n```", "```cpp\n}\n```", "```cpp\nfunc_pair<bool(int, int), double(int, int, double)> funcs{\n```", "```cpp\n   twice_as, sum_and_div };\n```", "```cpp\nfuncs.f(42, 12);\n```", "```cpp\nfuncs.g(42, 12, 10.0);\n```", "```cpp\n    template <typename... T>\n    struct outer\n    {\n       template <T... args>\n       struct inner {};\n    };\n    outer<int, double, char[5]> a;\n    ```", "```cpp\n    template <typename... T>\n    struct tag {};\n    template <typename T, typename U, typename ... Args>\n    void tagger()\n    {\n       tag<T, U, Args...> t1;\n       tag<T, Args..., U> t2;\n       tag<Args..., T, U> t3;\n       tag<U, T, Args...> t4;\n    }\n    ```", "```cpp\n    template <typename... Args>\n    void make_it(Args... args)\n    {\n    }\n    make_it(42);\n    make_it(42, 'a');\n    ```", "```cpp\n    template <typename T>\n    T step_it(T value)\n    {\n       return value+1;\n    }\n    template <typename... T>\n    int sum(T... args)\n    {\n       return (... + args);\n    }\n    template <typename... T>\n    void do_sums(T... args)\n    {\n       auto s1 = sum(args...);\n       // sum(1, 2, 3, 4)\n       auto s2 = sum(42, args...);\n       // sum(42, 1, 2, 3, 4)\n       auto s3 = sum(step_it(args)...); \n       // sum(step_it(1), step_it(2),... step_it(4))\n    }\n    do_sums(1, 2, 3, 4);\n    ```", "```cpp\n    template <typename... T>\n    struct sum_wrapper\n    {\n       sum_wrapper(T... args)\n       {\n          value = (... + args);\n       }\n       std::common_type_t<T...> value;\n    };\n    template <typename... T>\n    void parenthesized(T... args)\n    {\n       std::array<std::common_type_t<T...>, \n                  sizeof...(T)> arr {args...};\n       // std::array<int, 4> {1, 2, 3, 4}\n       sum_wrapper sw1(args...);\n       // value = 1 + 2 + 3 + 4\n       sum_wrapper sw2(++args...);\n       // value = 2 + 3 + 4 + 5\n    }\n    parenthesized(1, 2, 3, 4);\n    ```", "```cpp\n    template <typename... T>\n    void brace_enclosed(T... args)\n    {\n       int arr1[sizeof...(args) + 1] = {args..., 0};     \n       // arr1: {1,2,3,4,0}\n       int arr2[sizeof...(args)] = { step_it(args)... };\n       // arr2: {2,3,4,5}\n    }\n    brace_enclosed(1, 2, 3, 4);\n    ```", "```cpp\n    struct A {};\n    struct B {};\n    struct C {};\n    template<typename... Bases>\n    struct X : public Bases...\n    {\n       X(Bases const & ... args) : Bases(args)...\n       { }\n    };\n    A a;\n    B b;\n    C c;\n    X x(a, b, c);\n    ```", "```cpp\n    struct A \n    {\n       void execute() { std::cout << \"A::execute\\n\"; }\n    };\n    struct B \n    {\n       void execute() { std::cout << \"B::execute\\n\"; }\n    };\n    struct C \n    {\n       void execute() { std::cout << \"C::execute\\n\"; }\n    };\n    template<typename... Bases>\n    struct X : public Bases...\n    {\n       X(Bases const & ... args) : Bases(args)...\n       {}\n       using Bases::execute...;\n    };\n    A a;\n    B b;\n    C c;\n    X x(a, b, c);\n    x.A::execute();\n    x.B::execute();\n    x.C::execute();\n    ```", "```cpp\n    template <typename... T>\n    void captures(T... args)\n    {\n       auto l = [args...]{ \n                   return sum(step_it(args)...); };\n       auto s = l();\n    }\n    captures(1, 2, 3, 4);\n    ```", "```cpp\n    template <typename... T>\n    int sum(T... args)\n    {\n       return (... + args);\n    }\n    ```", "```cpp\n    template <typename... T>\n    auto make_array(T... args)\n    {\n       return std::array<std::common_type_t<T...>, \n                         sizeof...(T)> {args...};\n    };\n    auto arr = make_array(1, 2, 3, 4);\n    ```", "```cpp\n    template <typename... T>\n    struct alignment1\n    {\n       alignas(T...) char a;\n    };\n    template <int... args>\n    struct alignment2\n    {\n       alignas(args...) char a;\n    };\n    alignment1<int, double> al1;\n    alignment2<1, 4, 8> al2;\n    ```", "```cpp\ntemplate <typename T, typename... Ts>\n```", "```cpp\nstruct tuple\n```", "```cpp\n{\n```", "```cpp\n   tuple(T const& t, Ts const &... ts)\n```", "```cpp\n      : value(t), rest(ts...)\n```", "```cpp\n   {\n```", "```cpp\n   }\n```", "```cpp\n   constexpr int size() const { return 1 + rest.size(); }\n```", "```cpp\n   T            value;\n```", "```cpp\n   tuple<Ts...> rest;\n```", "```cpp\n};\n```", "```cpp\ntemplate <typename T>\n```", "```cpp\nstruct tuple<T>\n```", "```cpp\n{\n```", "```cpp\n   tuple(const T& t)\n```", "```cpp\n      : value(t)\n```", "```cpp\n   {\n```", "```cpp\n   }\n```", "```cpp\n   constexpr int size() const { return 1; }\n```", "```cpp\n   T value;\n```", "```cpp\n};\n```", "```cpp\ntuple<int> one(42);\n```", "```cpp\ntuple<int, double> two(42, 42.0);\n```", "```cpp\ntuple<int, double, char> three(42, 42.0, 'a');\n```", "```cpp\nstd::cout << one.value << '\\n';\n```", "```cpp\nstd::cout << two.value << ',' \n```", "```cpp\n          << two.rest.value << '\\n';\n```", "```cpp\nstd::cout << three.value << ',' \n```", "```cpp\n          << three.rest.value << ','\n```", "```cpp\n          << three.rest.rest.value << '\\n';\n```", "```cpp\nstd::cout << get<0>(one) << '\\n';\n```", "```cpp\nstd::cout << get<0>(two) << ','\n```", "```cpp\n          << get<1>(two) << '\\n';\n```", "```cpp\nstd::cout << get<0>(three) << ','\n```", "```cpp\n          << get<1>(three) << ','\n```", "```cpp\n          << get<2>(three) << '\\n';\n```", "```cpp\ntemplate <size_t N, typename... Ts>\n```", "```cpp\ntypename nth_type<N, Ts...>::value_type & get(tuple<Ts...>& t);\n```", "```cpp\ntemplate <size_t N, typename T, typename... Ts>\n```", "```cpp\nstruct nth_type : nth_type<N - 1, Ts...>\n```", "```cpp\n{\n```", "```cpp\n   static_assert(N < sizeof...(Ts) + 1,\n```", "```cpp\n                 \"index out of bounds\");\n```", "```cpp\n};\n```", "```cpp\ntemplate <typename T, typename... Ts>\n```", "```cpp\nstruct nth_type<0, T, Ts...>\n```", "```cpp\n{\n```", "```cpp\n   using value_type = T;\n```", "```cpp\n};\n```", "```cpp\ntemplate <size_t N>\n```", "```cpp\nstruct getter\n```", "```cpp\n{\n```", "```cpp\n   template <typename... Ts>\n```", "```cpp\n   static typename nth_type<N, Ts...>::value_type& \n```", "```cpp\n   get(tuple<Ts...>& t)\n```", "```cpp\n   {\n```", "```cpp\n      return getter<N - 1>::get(t.rest);\n```", "```cpp\n   }\n```", "```cpp\n};\n```", "```cpp\ntemplate <>\n```", "```cpp\nstruct getter<0>\n```", "```cpp\n{\n```", "```cpp\n   template <typename T, typename... Ts>\n```", "```cpp\n   static T& get(tuple<T, Ts...>& t)\n```", "```cpp\n   {\n```", "```cpp\n      return t.value;\n```", "```cpp\n   }\n```", "```cpp\n};\n```", "```cpp\ntemplate <size_t N, typename... Ts>\n```", "```cpp\ntypename nth_type<N, Ts...>::value_type & \n```", "```cpp\nget(tuple<Ts...>& t)\n```", "```cpp\n{\n```", "```cpp\n   return getter<N>::get(t);\n```", "```cpp\n}\n```", "```cpp\ntuple<int, double, char> three(42, 42.0, 'a');\n```", "```cpp\nget<2>(three);\n```", "```cpp\ntemplate <typename T, typename... Ts>\n```", "```cpp\nstruct tuple\n```", "```cpp\n{\n```", "```cpp\n   tuple(T const& t, Ts const &... ts)\n```", "```cpp\n      : value(t), rest(ts...)\n```", "```cpp\n   { }\n```", "```cpp\n   constexpr int size() const { return 1 + rest.size(); }\n```", "```cpp\n   T value;\n```", "```cpp\n   tuple<Ts...> rest;\n```", "```cpp\n};\n```", "```cpp\ntemplate<> struct tuple<int, double, char>\n```", "```cpp\n{\n```", "```cpp\n  inline tuple(const int & t, \n```", "```cpp\n               const double & __ts1, const char & __ts2)\n```", "```cpp\n  : value{t}, rest{tuple<double, char>(__ts1, __ts2)}\n```", "```cpp\n  {}\n```", "```cpp\n  inline constexpr int size() const;\n```", "```cpp\n  int value;\n```", "```cpp\n  tuple<double, char> rest;\n```", "```cpp\n};\n```", "```cpp\ntemplate<> struct tuple<double, char>\n```", "```cpp\n{\n```", "```cpp\n  inline tuple(const double & t, const char & __ts1)\n```", "```cpp\n  : value{t}, rest{tuple<char>(__ts1)}\n```", "```cpp\n  {}\n```", "```cpp\n  inline constexpr int size() const;\n```", "```cpp\n  double value;\n```", "```cpp\n  tuple<char> rest;\n```", "```cpp\n};\n```", "```cpp\ntemplate<> struct tuple<char>\n```", "```cpp\n{\n```", "```cpp\n  inline tuple(const char & t)\n```", "```cpp\n  : value{t}\n```", "```cpp\n  {}\n```", "```cpp\n  inline constexpr int size() const;\n```", "```cpp\n  char value;\n```", "```cpp\n};\n```", "```cpp\ntemplate<typename T>\n```", "```cpp\nstruct tuple<T>\n```", "```cpp\n{\n```", "```cpp\n   inline tuple(const T & t) : value{t}\n```", "```cpp\n   { }\n```", "```cpp\n   inline constexpr int size() const\n```", "```cpp\n   { return 1; }\n```", "```cpp\n   T value;\n```", "```cpp\n};\n```", "```cpp\ntemplate <size_t N, typename T, typename... Ts>\n```", "```cpp\nstruct nth_type : nth_type<N - 1, Ts...>\n```", "```cpp\n{\n```", "```cpp\n   static_assert(N < sizeof...(Ts) + 1,\n```", "```cpp\n                 \"index out of bounds\");\n```", "```cpp\n};\n```", "```cpp\ntemplate<>\n```", "```cpp\nstruct nth_type<2, int, double, char> : \n```", "```cpp\n   public nth_type<1, double, char>\n```", "```cpp\n{ };\n```", "```cpp\ntemplate<>\n```", "```cpp\nstruct nth_type<1, double, char> : public nth_type<0, char>\n```", "```cpp\n{ };\n```", "```cpp\ntemplate<>\n```", "```cpp\nstruct nth_type<0, char>\n```", "```cpp\n{\n```", "```cpp\n   using value_type = char;\n```", "```cpp\n};\n```", "```cpp\ntemplate<typename T, typename ... Ts>\n```", "```cpp\nstruct nth_type<0, T, Ts...>\n```", "```cpp\n{\n```", "```cpp\n   using value_type = T;\n```", "```cpp\n};\n```", "```cpp\ntemplate <size_t N>\n```", "```cpp\nstruct getter\n```", "```cpp\n{\n```", "```cpp\n   template <typename... Ts>\n```", "```cpp\n   static typename nth_type<N, Ts...>::value_type& \n```", "```cpp\n   get(tuple<Ts...>& t)\n```", "```cpp\n   {\n```", "```cpp\n      return getter<N - 1>::get(t.rest);\n```", "```cpp\n   }\n```", "```cpp\n};\n```", "```cpp\ntemplate<>\n```", "```cpp\nstruct getter<2>\n```", "```cpp\n{\n```", "```cpp\n   template<>\n```", "```cpp\n   static inline typename \n```", "```cpp\n   nth_type<2UL, int, double, char>::value_type & \n```", "```cpp\n   get<int, double, char>(tuple<int, double,  char> & t)\n```", "```cpp\n   {\n```", "```cpp\n      return getter<1>::get(t.rest);\n```", "```cpp\n   } \n```", "```cpp\n};\n```", "```cpp\ntemplate<>\n```", "```cpp\nstruct getter<1>\n```", "```cpp\n{\n```", "```cpp\n   template<>\n```", "```cpp\n   static inline typename nth_type<1UL, double,\n```", "```cpp\n                                   char>::value_type &\n```", "```cpp\n   get<double, char>(tuple<double, char> & t)\n```", "```cpp\n   {\n```", "```cpp\n      return getter<0>::get(t.rest);\n```", "```cpp\n   }\n```", "```cpp\n};\n```", "```cpp\ntemplate<>\n```", "```cpp\nstruct getter<0>\n```", "```cpp\n{\n```", "```cpp\n   template<typename T, typename ... Ts>\n```", "```cpp\n   static inline T & get(tuple<T, Ts...> & t)\n```", "```cpp\n   {\n```", "```cpp\n      return t.value;\n```", "```cpp\n   }\n```", "```cpp\n   template<>\n```", "```cpp\n   static inline char & get<char>(tuple<char> & t)\n```", "```cpp\n   {\n```", "```cpp\n      return t.value;\n```", "```cpp\n   }\n```", "```cpp\n};\n```", "```cpp\ntemplate <size_t N, typename... Ts>\n```", "```cpp\ntypename nth_type<N, Ts...>::value_type & \n```", "```cpp\nget(tuple<Ts...>& t)\n```", "```cpp\n{\n```", "```cpp\n   return getter<N>::get(t);\n```", "```cpp\n}\n```", "```cpp\ntemplate<>\n```", "```cpp\ntypename nth_type<2UL, int, double, char>::value_type & \n```", "```cpp\nget<2, int, double, char>(tuple<int, double, char> & t)\n```", "```cpp\n{\n```", "```cpp\n  return getter<2>::get(t);\n```", "```cpp\n}\n```", "```cpp\ntemplate<>\n```", "```cpp\ntypename nth_type<1UL, int, double, char>::value_type & \n```", "```cpp\nget<1, int, double, char>(tuple<int, double, char> & t)\n```", "```cpp\n{\n```", "```cpp\n  return getter<1>::get(t);\n```", "```cpp\n}\n```", "```cpp\ntemplate <typename T>\n```", "```cpp\nT sum(T a)\n```", "```cpp\n{\n```", "```cpp\n   return a;\n```", "```cpp\n}\n```", "```cpp\ntemplate <typename T, typename... Args>\n```", "```cpp\nT sum(T a, Args... args)\n```", "```cpp\n{\n```", "```cpp\n   return a + sum(args...);\n```", "```cpp\n}\n```", "```cpp\ntemplate <typename... T>\n```", "```cpp\nint sum(T... args)\n```", "```cpp\n{\n```", "```cpp\n    return (... + args);\n```", "```cpp\n}\n```", "```cpp\nint main()\n```", "```cpp\n{\n```", "```cpp\n    std::cout << sum(1) << '\\n';\n```", "```cpp\n    std::cout << sum(1,2) << '\\n';\n```", "```cpp\n    std::cout << sum(1,2,3,4,5) << '\\n';\n```", "```cpp\n}\n```", "```cpp\ntemplate <typename... T>\n```", "```cpp\nint sum_from_zero(T... args)\n```", "```cpp\n{\n```", "```cpp\n   return (0 + ... + args);\n```", "```cpp\n}\n```", "```cpp\nint s1 = sum();           // error\n```", "```cpp\nint s2 = sum_from_zero(); // OK\n```", "```cpp\ntemplate <typename... T>\n```", "```cpp\nvoid printl(T... args)\n```", "```cpp\n{\n```", "```cpp\n   (..., (std::cout << args)) << '\\n';\n```", "```cpp\n}\n```", "```cpp\ntemplate <typename... T>\n```", "```cpp\nvoid printr(T... args)\n```", "```cpp\n{\n```", "```cpp\n   ((std::cout << args), ...) << '\\n';\n```", "```cpp\n}\n```", "```cpp\nprintl('d', 'o', 'g');  // dog\n```", "```cpp\nprintr('d', 'o', 'g');  // dog\n```", "```cpp\ntemplate<typename T, typename... Args>\n```", "```cpp\nvoid push_back_many(std::vector<T>& v, Args&&... args)\n```", "```cpp\n{\n```", "```cpp\n   (v.push_back(args), ...);\n```", "```cpp\n}\n```", "```cpp\npush_back_many(v, 1, 2, 3, 4, 5); // v = {1, 2, 3, 4, 5}\n```", "```cpp\ntemplate <typename T, typename... Args>\n```", "```cpp\nstruct foo \n```", "```cpp\n{\n```", "```cpp\n};\n```", "```cpp\ntemplate <typename... Args>\n```", "```cpp\nusing int_foo = foo<int, Args...>;\n```", "```cpp\nfoo<double, char, int> f1;\n```", "```cpp\nfoo<int, char, double> f2;\n```", "```cpp\nint_foo<char, double> f3;\n```", "```cpp\nstatic_assert(std::is_same_v<decltype(f2), decltype(f3)>);\n```", "```cpp\ntemplate<typename T, T... Ints>\n```", "```cpp\nstruct integer_sequence\n```", "```cpp\n{};\n```", "```cpp\ntemplate<std::size_t... Ints>\n```", "```cpp\nusing index_sequence = integer_sequence<std::size_t,\n```", "```cpp\n                                        Ints...>;\n```", "```cpp\ntemplate<typename T, std::size_t N, T... Is>\n```", "```cpp\nstruct make_integer_sequence : \n```", "```cpp\n  make_integer_sequence<T, N - 1, N - 1, Is...> \n```", "```cpp\n{};\n```", "```cpp\ntemplate<typename T, T... Is>\n```", "```cpp\nstruct make_integer_sequence<T, 0, Is...> : \n```", "```cpp\n  integer_sequence<T, Is...> \n```", "```cpp\n{};\n```", "```cpp\ntemplate<std::size_t N>\n```", "```cpp\nusing make_index_sequence = make_integer_sequence<std::size_t, \n```", "```cpp\n                                                  N>;\n```", "```cpp\ntemplate<typename... T>\n```", "```cpp\nusing index_sequence_for = \n```", "```cpp\n   make_index_sequence<sizeof...(T)>;\n```", "```cpp\ntemplate <int... R>\n```", "```cpp\nconstexpr int Sum = (... + R);\n```", "```cpp\nint main()\n```", "```cpp\n{\n```", "```cpp\n    std::cout << Sum<1> << '\\n';\n```", "```cpp\n    std::cout << Sum<1,2> << '\\n';\n```", "```cpp\n    std::cout << Sum<1,2,3,4,5> << '\\n';\n```", "```cpp\n}\n```"]