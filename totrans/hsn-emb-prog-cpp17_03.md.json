["```cpp\n#include <stdio.h> \nint main(void) \n{ \n    printf(\"hello, world\"); \n    return 0; \n} \n```", "```cpp\nvoid* pointer; \nint* number = pointer; \n```", "```cpp\nint* number = malloc(sizeof(int) * 5); \n```", "```cpp\nvoid* pointer; \nint* number = (int*) pointer; \n```", "```cpp\nint* number = (int*) malloc(sizeof(int) * 5); \n```", "```cpp\nconst int constNumber = 42; \nint number = &constNumber; // Error: invalid initialization of reference. \n```", "```cpp\nconst int constNumber = 42; \nint number = const_cast<int&>(constNumber); \n```", "```cpp\nnamespace had { \nusing uint8_t = unsigned char; \nconst uint8_t bufferSize = 16;  \n    class RingBuffer { \n        uint8_t data[bufferSize]; \n        uint8_t newest_index; \n        uint8_t oldest_index;  \n        public: \n        enum BufferStatus { \n            OK, EMPTY, FULL \n        };  \n        RingBuffer();  \n        BufferStatus bufferWrite(const uint8_t byte); \n        enum BufferStatus bufferRead(uint8_t& byte); \n    }; \n} \n```", "```cpp\ntypedef unsigned char uint8_t; \nenum BufferStatus {BUFFER_OK, BUFFER_EMPTY, BUFFER_FULL}; \n#define BUFFER_SIZE 16 \nstruct RingBuffer { \n   uint8_t data[BUFFER_SIZE]; \n   uint8_t newest_index; \n   uint8_t oldest_index; \n};  \nvoid initBuffer(struct RingBuffer* buffer); \nenum BufferStatus bufferWrite(struct RingBuffer* buffer, uint8_t byte); \nenum BufferStatus bufferRead(struct RingBuffer* buffer, uint8_t *byte); \n```", "```cpp\nhad::RingBuffer r_buffer;  \nint main() { \n    uint8_t tempCharStorage;     \n    // Fill the buffer. \n    for (int i = 0; r_buffer.bufferWrite('A' + i) == \n    had::RingBuffer::OK; i++)    { \n        // \n    } \n    // Read the buffer. \n    while (r_buffer.bufferRead(tempCharStorage) == had::RingBuffer::OK) \n    { \n         // \n    } \n} \n```", "```cpp\nstruct RingBuffer buffer;  \nint main() { \n    initBuffer(&buffer); \n    uint8_t tempCharStorage;  \n    // Fill the buffer. \n    uint8_t i = 0; \n    for (; bufferWrite(&buffer, 'A' + i) == BUFFER_OK; i++) {          \n        // \n    }  \n    // Read the buffer. \n    while (bufferRead(&buffer, &tempCharStorage) == BUFFER_OK) { // \n    } \n} \n```", "```cpp\nclass B : public A { // Private members. public: // Additional public members. }; \n```", "```cpp\nclass A { \npublic: \n   virtual bool methodA() = 0; \n   virtual bool methodB() = 0; \n}; \n```", "```cpp\nVirtualClass* → vtable_ptr → vtable[0] → methodA() \n```", "```cpp\nstd::map<std::string, int> myMap; \n```"]