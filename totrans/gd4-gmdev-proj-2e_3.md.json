["```cpp\nextends RigidBody2D\nenum {INIT, ALIVE, INVULNERABLE, DEAD}\nvar state = INIT\n```", "```cpp\nconst INIT = 0\nconst ALIVE = 1\nconst INVULNERABLE = 2\nconst DEAD = 3\n```", "```cpp\nfunc _ready():\n    change_state(ALIVE)\nfunc change_state(new_state):\n    match new_state:\n        INIT:\n            $CollisionShape2D.set_deferred(\"disabled\",\n                true)\n        ALIVE:\n            $CollisionShape2D.set_deferred(\"disabled\",\n                false)\n        INVULNERABLE:\n            $CollisionShape2D.set_deferred(\"disabled\",\n                true)\n        DEAD:\n            $CollisionShape2D.set_deferred(\"disabled\",\n                true)\n    state = new_state\n```", "```cpp\n@export var engine_power = 500\n@export var spin_power = 8000\nvar thrust = Vector2.ZERO\nvar rotation_dir = 0\n```", "```cpp\nfunc _process(delta):\n    get_input()\nfunc get_input():\n    thrust = Vector2.ZERO\n    if state in [DEAD, INIT]:\n        return\n    if Input.is_action_pressed(\"thrust\"):\n        thrust = transform.x * engine_power\n    rotation_dir = Input.get_axis(\"rotate_left\",\n        \"rotate_right\")\nfunc _physics_process(delta):\n    constant_force = thrust\n    constant_torque = rotation_dir * spin_power\n```", "```cpp\nvar screensize = Vector.ZERO\n```", "```cpp\nscreensize = get_viewport_rect().size\n```", "```cpp\nfunc _physics_process(delta):\n    if position.x > screensize.x:\n        position.x = 0\n    if position.x < 0:\n        position.x = screensize.x\n    if position.y > screensize.y:\n        position.y = 0\n    if position.y < 0:\n        position.y = screensize.y\n```", "```cpp\nfunc _integrate_forces(physics_state):\n    var xform = physics_state.transform\n    xform.origin.x = wrapf(xform.origin.x, 0, screensize.x)\n    xform.origin.y = wrapf(xform.origin.y, 0, screensize.y)\n    physics_state.transform = xform\n```", "```cpp\nextends Area2D\n@export var speed = 1000\nvar velocity = Vector2.ZERO\nfunc start(_transform):\n    transform = _transform\n    velocity = transform.x * speed\nfunc _process(delta):\n    position += velocity * delta\n```", "```cpp\nfunc _on_visible_on_screen_notifier_2d_screen_exited():\n    queue_free()\n```", "```cpp\nfunc _on_bullet_body_entered(body):\n    if body.is_in_group(\"rocks\"):\n        body.explode()\n        queue_free()\n```", "```cpp\n@export var bullet_scene : PackedScene\n@export var fire_rate = 0.25\nvar can_shoot = true\n```", "```cpp\n$GunCooldown.wait_time = fire_rate\n```", "```cpp\nif Input.is_action_pressed(\"shoot\") and can_shoot:\n    shoot()\n```", "```cpp\nfunc shoot():\n    if state == INVULNERABLE:\n        return\n    can_shoot = false\n    $GunCooldown.start()\n    var b = bullet_scene.instantiate()\n    get_tree().root.add_child(b)\n    b.start($Muzzle.global_transform)\n```", "```cpp\nfunc _on_gun_cooldown_timeout():\n    can_shoot = true\n```", "```cpp\nextends RigidBody2D\nvar screensize = Vector2.ZERO\nvar size\nvar radius\nvar scale_factor = 0.2\n```", "```cpp\nfunc start(_position, _velocity, _size):\n    position = _position\n    size = _size\n    mass = 1.5 * size\n    $Sprite2D.scale = Vector2.ONE * scale_factor * size\n    radius = int($Sprite2D.texture.get_size().x / 2 *\n        $Sprite2D.scale.x)\n    var shape = CircleShape2D.new()\n    shape.radius = radius\n    $CollisionShape2d.shape = shape\n    linear_velocity = _velocity\n    angular_velocity = randf_range(-PI, PI)\n```", "```cpp\nfunc _integrate_forces(physics_state):\n    var xform = physics_state.transform\n    xform.origin.x = wrapf(xform.origin.x, 0 - radius,\n        screensize.x + radius)\n    xform.origin.y = wrapf(xform.origin.y, 0 - radius,\n        screensize.y + radius)\n    physics_state.transform = xform\n```", "```cpp\nextends Node\n@export var rock_scene : PackedScene\nvar screensize = Vector2.ZERO\nfunc _ready():\n    screensize = get_viewport().get_visible_rect().size\n    for i in 3:\n        spawn_rock(3)\n```", "```cpp\nfunc spawn_rock(size, pos=null, vel=null):\n    if pos == null:\n        $RockPath/RockSpawn.progress = randi()\n        pos = $RockPath/RockSpawn.position\n    if vel == null:\n        vel = Vector2.RIGHT.rotated(randf_range(0, TAU)) *\n            randf_range(50, 125)\n    var r = rock_scene.instantiate()\n    r.screensize = screensize\n    r.start(pos, vel, size)\n    call_deferred(\"add_child\", r)\n```", "```cpp\n$Explosion.scale = Vector2.ONE * 0.75 * size\n```", "```cpp\nfunc explode():\n    $CollisionShape2D.set_deferred(\"disabled\", true)\n    $Sprite2d.hide()\n    $Explosion/AnimationPlayer.play(\"explosion\")\n    $Explosion.show()\n    exploded.emit(size, radius, position, linear_velocity)\n    linear_velocity = Vector2.ZERO\n    angular_velocity = 0\n    await $Explosion/AnimationPlayer.animation_finished\n    queue_free()\n```", "```cpp\nr.exploded.connect(self._on_rock_exploded)\n```", "```cpp\nfunc _on_rock_exploded(size, radius, pos, vel):\n    if size <= 1:\n        return\n    for offset in [-1, 1]:\n        var dir = $Player.position.direction_to(pos)\n            .orthogonal() * offset\n        var newpos = pos + dir * radius\n        var newvel = dir * vel.length() * 1.1\n        spawn_rock(size - 1, newpos, newvel)\n```", "```cpp\nextends CanvasLayer\nsignal start_game\n@onready var lives_counter = $MarginContainer/HBoxContainer/LivesCounter.get_children()\n@onready var score_label = $MarginContainer/HBoxContainer/ScoreLabel\n@onready var message = $VBoxContainer/Message\n@onready var start_button = $VBoxContainer/StartButton\n```", "```cpp\nfunc show_message(text):\n    message.text = text\n    message.show()\n    $Timer.start()\nfunc update_score(value):\n    score_label.text = str(value)\nfunc update_lives(value):\n    for item in 3:\n        lives_counter[item].visible = value > item\n```", "```cpp\nfunc game_over():\n    show_message(\"Game Over\")\n    await $Timer.timeout\n    start_button.show()\n```", "```cpp\nfunc _on_start_button_pressed():\n    start_button.hide()\n    start_game.emit()\nfunc _on_timer_timeout():\n    message.hide()\n    message.text = \"\"\n```", "```cpp\nvar level = 0\nvar score = 0\nvar playing = false\n```", "```cpp\nfunc new_game():\n    # remove any old rocks from previous game\n    get_tree().call_group(\"rocks\", \"queue_free\")\n    level = 0\n    score = 0\n    $HUD.update_score(score)\n    $HUD.show_message(\"Get Ready!\")\n    $Player.reset()\n    await $HUD/Timer.timeout\n    playing = true\n```", "```cpp\nfunc new_level():\n    level += 1\n    $HUD.show_message(\"Wave %s\" % level)\n    for i in level:\n        spawn_rock(3)\n```", "```cpp\nfunc _process(delta):\n    if not playing:\n        return\n    if get_tree().get_nodes_in_group(\"rocks\").size() == 0:\n        new_level()\n```", "```cpp\nfunc game_over():\n    playing = false\n    $HUD.game_over()\n```", "```cpp\nsignal lives_changed\nsignal dead\nvar reset_pos = false\nvar lives = 0: set = set_lives\nfunc set_lives(value):\n    lives = value\n    lives_changed.emit(lives)\n    if lives <= 0:\n        change_state(DEAD)\n    else:\n        change_state(INVULNERABLE)\n```", "```cpp\nfunc reset():\n    reset_pos = true\n    $Sprite2d.show()\n    lives = 3\n    change_state(ALIVE)\n```", "```cpp\nif reset_pos:\n    physics_state.transform.origin = screensize / 2\n    reset_pos = false\n```", "```cpp\nfunc change_state(new_state):\n    match new_state:\n        INIT:\n            $CollisionShape2D.set_deferred(\"disabled\",\n                true)\n            $Sprite2D.modulate.a = 0.5\n        ALIVE:\n            $CollisionShape2d.set_deferred(\"disabled\",\n                false)\n            $Sprite2d.modulate.a = 1.0\n        INVULNERABLE:\n            $CollisionShape2d.set_deferred(\"disabled\",\n                true)\n            $Sprite2d.modulate.a = 0.5\n            $InvulnerabilityTimer.start()\n        DEAD:\n            $CollisionShape2d.set_deferred(\"disabled\",\n                true)\n            $Sprite2d.hide()\n            linear_velocity = Vector2.ZERO\n            dead.emit()\n    state = new_state\n```", "```cpp\nfunc _on_invulnerability_timer_timeout():\n    change_state(ALIVE)\n```", "```cpp\nfunc _on_body_entered(body):\n    if body.is_in_group(\"rocks\"):\n        body.explode()\n        lives -= 1\n        explode()\nfunc explode():\n    $Explosion.show()\n    $Explosion/AnimationPlayer.play(\"explosion\")\n    await $Explosion/AnimationPlayer.animation_finished\n    $Explosion.hide()\n```", "```cpp\nfunc _input(event):\n    if event.is_action_pressed(\"pause\"):\n        if not playing:\n            return\n        get_tree().paused = not get_tree().paused\n        var message = $HUD/VBoxContainer/Message\n        if get_tree().paused:\n            message.text = \"Paused\"\n            message.show()\n        else:\n            message.text = \"\"\n            message.hide()\n```", "```cpp\nextends Area2D\n@export var bullet_scene : PackedScene\n@export var speed = 150\n@export var rotation_speed = 120\n@export var health = 3\nvar follow = PathFollow2D.new()\nvar target = null\nfunc _ready():\n    $Sprite2D.frame = randi() % 3\n    var path = $EnemyPaths.get_children()[randi() %\n        $EnemyPaths.get_child_count()]\n    path.add_child(follow)\n    follow.loop = false\n```", "```cpp\nfunc _physics_process(delta):\n    rotation += deg_to_rad(rotation_speed) * delta\n    follow.progress += speed * delta\n    position = follow.global_position\n    if follow.progress_ratio >= 1:\n        queue_free()\n```", "```cpp\n@export var enemy_scene : PackedScene\n```", "```cpp\n$EnemyTimer.start(randf_range(5, 10))\n```", "```cpp\nfunc _on_enemy_timer_timeout():\n    var e = enemy_scene.instantiate()\n    add_child(e)\n    e.target = $Player\n    $EnemyTimer.start(randf_range(20, 40))\n```", "```cpp\nextends Area2D\n@export var speed = 1000\nfunc start(_pos, _dir):\n    position = _pos\n    rotation = _dir.angle()\nfunc _process(delta):\n    position += transform.x * speed * delta\nfunc _on_body_entered(body):\n    queue_free()\nfunc _on_visible_on_screen_notifier_2d_screen_exited():\n    queue_free()\n```", "```cpp\n@export var bullet_spread = 0.2\nfunc shoot():\n    var dir =\n       global_position.direction_to(target.global_position)\n    dir = dir.rotated(randf_range(-bullet_spread,\n       bullet_spread))\n    var b = bullet_scene.instantiate()\n    get_tree().root.add_child(b)\n    b.start(global_position, dir)\n```", "```cpp\nfunc _on_gun_cooldown_timeout():\n    shoot()\n```", "```cpp\nfunc shoot_pulse(n, delay):\n    for i in n:\n        shoot()\n        await get_tree().create_timer(delay).timeout\n```", "```cpp\nfunc _on_gun_cooldown_timeout():\n    shoot_pulse(3, 0.15)\n```", "```cpp\nfunc take_damage(amount):\n    health -= amount\n    $AnimationPlayer.play(\"flash\")\n    if health <= 0:\n        explode()\nfunc explode():\n    speed = 0\n    $GunCooldown.stop()\n    $CollisionShape2D.set_deferred(\"disabled\", true)\n    $Sprite2D.hide()\n    $Explosion.show()\n    $Explosion/AnimationPlayer.play(\"explosion\")\n    await $Explosion/AnimationPlayer.animation_finished\n    queue_free()\n```", "```cpp\nfunc _on_body_entered(body):\n    if body.is_in_group(\"rocks\"):\n        return\n    explode()\n```", "```cpp\nfunc _on_area_entered(area):\n    if area.is_in_group(\"enemies\"):\n        area.take_damage(1)\n```", "```cpp\nsignal shield_changed\n@export var max_shield = 100.0\n@export var shield_regen = 5.0\nvar shield = 0: set = set_shield\nfunc set_shield(value):\n    value = min(value, max_shield)\n    shield = value\n    shield_changed.emit(shield / max_shield)\n    if shield <= 0:\n        lives -= 1\n        explode()\n```", "```cpp\nfunc _on_body_entered(body):\n    if body.is_in_group(\"rocks\"):\n        shield -= body.size * 25\n        body.explode()\n```", "```cpp\n@export var damage = 15\nfunc _on_body_entered(body):\n    if body.name == \"Player\":\n        body.shield -= damage\n    queue_free()\n```", "```cpp\nfunc _on_body_entered(body):\n    if body.is_in_group(\"rocks\"):\n        return\n    explode()\n    body.shield -= 50\n```", "```cpp\nshield = max_shield\n```", "```cpp\nshield += shield_regen * delta\n```", "```cpp\n@onready var shield_bar =\n    $MarginContainer/HBoxContainer/ShieldBar\nvar bar_textures = {\n    \"green\": preload(\"res://assets/bar_green_200.png\"),\n    \"yellow\": preload(\"res://assets/bar_yellow_200.png\"),\n    \"red\": preload(\"res://assets/bar_red_200.png\")\n}\n```", "```cpp\nfunc update_shield(value):\n    shield_bar.texture_progress = bar_textures[\"green\"]\n    if value < 0.4:\n        shield_bar.texture_progress = bar_textures[\"red\"]\n    elif value < 0.7:\n        shield_bar.texture_progress = bar_textures[\"yellow\"]\n    shield_bar.value = value\n```", "```cpp\n$LaserSound.play()\n```", "```cpp\nif Input.is_action_pressed(\"thrust\"):\n    thrust = transform.x * engine_power\n    if not $EngineSound.playing:\n        $EngineSound.play()\nelse:\n    $EngineSound.stop()\n```"]