- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*The Essential Guide to Creating Multiplayer Games with Godot 4.0* is the ultimate
    hands-on guide to understanding how to make online multiplayer games using the
    open source Godot Engine. In its fourth version, Godot Engine introduces a high-level
    network API that allows users to focus on creating interesting and funny mechanics
    while letting the engine do the heavy work.'
  prefs: []
  type: TYPE_NORMAL
- en: Through this book, you will learn the fundamentals of networks, including the
    basic UDP, TCP, and HTTP protocols. You will see how Godot Engine uses its ENet
    library implementation to seamlessly integrate these protocols into its game development
    workflow. Through nine projects, including five games, one of them an online multiplayer
    adventure game, you will learn all you need to know to connect players together
    in amazing shared experiences.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is made for intermediary Godot Engine users, people who already know
    how Godot Engine works, its design philosophy, the editor, the documentation,
    and its core features. These users have already made games using Godot Engine.
    They are looking for something to make their next project stand out, and adding
    online multiplayer features is that thing.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*Chapter 1*](B18527_01.xhtml#_idTextAnchor018), *Setting up a Server*, explains
    what a network is and how Godot Engine implements networking features through
    its ENet library implementation. You’ll learn how to make your first handshake
    to effectively connect a server and a client machine.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 2*](B18527_02.xhtml#_idTextAnchor037), *Sending and Receiving Data*,
    discusses the foundation of a network, which is for multiple computers to exchange
    data with each other. In this chapter, you will learn that we use a data structure
    called packets, and we serialize data to recreate game states on the network.
    For this, we use the UDP protocol. At the end, we will have a login screen, effectively
    retrieving data from the server.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*chapter 3*](B18527_03.xhtml#_idTextAnchor065), *Making a Lobby to Gather
    Players Together*, explains how Godot Engine eases the process of serializing
    and exchanging data using the industry-standard UDP protocol by providing **Remote
    Procedure Calls** (**RPCs**), allowing us to essentially make calls to methods
    on remote objects. By the end of the chapter, we expand the login screen into
    a lobby, adding another client to the equation and connecting three computers
    together.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B18527_04.xhtml#_idTextAnchor095), *Creating an Online Chat*,
    explains that with the power of RPCs, we can now change objects’ states remotely
    with ease. In this chapter, we learn how we use RPCs to allow players to exchange
    messages in a chat. We discuss how we can use RPCs and channels to prevent network
    bottlenecks. With that, we prepare ourselves to implement actual game features.
    By the end of the chapter, we will have a fully functional chat.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B18527_05.xhtml#_idTextAnchor108), *Making an Online Quiz Game*,
    explains how we can synchronize players’ game states based on the general game
    state. We will set up a server that will react to player interactions and change
    the game state from waiting for a response to processing a match winner, announcing
    the winner, starting a new match, and reaching the end of available quiz questions,
    effectively ending the game. By the end of the chapter, we will have an online
    quiz game where multiple players compete to answer the most questions correctly.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B18527_06.xhtml#_idTextAnchor131), *Building an Online Checkers
    Game*, moves on to implementing a turn-based multiplayer online game, and nothing
    is better than the classic checkers for that. In this chapter, we will learn how
    to get the most out of our RPCs while still maintaining the heavy processing on
    players’ machines. We will also discuss MultiplayerSynchronizer, a node that allows
    us to easily synchronize nodes’ properties remotely. We will also learn what Multiplayer
    Authority is, which prevents players from messing around with other players’ objects.
    By the end of the chapter, we will have a fully functional online checkers game.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B18527_07.xhtml#_idTextAnchor146), *Developing an Online Pong
    Game*, begins the transition from turn-based to action. Action games rely heavily
    on players’ reaction times, and the game world should update its state quickly
    to allow players to have a smooth experience. Here, we will develop an online
    Pong game and use the MultiplayerSynchronizer node to sync the players’ paddles
    and the ball. We will also learn that some features should use different syncing
    processes. We will go even deeper into the Multiplayer Authority realm to prevent
    one player’s input from interfering with the other player’s paddle’s movement.
    By the end of the chapter, we have a playable multiplayer online Pong game.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B18527_08.xhtml#_idTextAnchor162), *Designing an Online Co-**O**p
    Platformer*, is where our baby steps stop and we start to implement interesting
    features for a custom game. We will prototype a physics puzzle platformer game
    where players grab and move crates around to overcome obstacles and reach the
    level’s goal. Applying everything we’ve learned in the previous chapters, we will
    expand the usage of the MultiplayerSynchronizer by syncing animations on top of
    objects’ positions. By the end of the chapter, we will have a working prototype
    of a physics puzzle co-op platformer game.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B18527_09.xhtml#_idTextAnchor188), *Creating an Online Adventure
    Prototype*, is, if we’re honest, what you have been looking for throughout this
    book. Here, we will use all our skills to create an online multiplayer adventure
    game. Players can join and leave at any time and the world is persistent, maintaining
    players’ progress in quests. We will discuss the basics of making an MMORPG game,
    storing and retrieving players’ quest progress in a database, syncing players’
    spaceships and bullets, and making their actions affect other players’ experiences.
    By the end of the chapter, we will have a prototype of an online multiplayer top-down
    space-shooter adventure game.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 10*](B18527_10.xhtml#_idTextAnchor260), *Debugging and Profiling
    the Network*, moves on from implementing the online multiplayer features on our
    top-down space-shooting adventure prototype. We now need to pave the way for thousands
    of players to play our game simultaneously. For that, we will use Godot Engine’s
    built-in debugging and profiling tools to assess the potential areas for improvements
    in our game. We will focus on the network profiler and the monitor debugging tools
    to assess and propose potential solutions for the bottlenecks we find in our prototype.
    By the end of the chapter, we will have two of the most powerful and necessary
    skills a developer can have: the ability to debug and optimize a game.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 11*](B18527_11.xhtml#_idTextAnchor276), *Optimizing Data Requests*,
    builds on the understanding of the tools we have at our disposal to assess the
    information we need to discover potential areas for improvement; now, it’s time
    to get our hands dirty. Throughout this chapter, we will learn how to create custom
    monitors to gather data about specific game features and decide the best strategy
    to optimize them. By the end of the chapter, we will have refactored our top-down
    space-shooting adventure, decreasing the bandwidth and the number of RPCs we make,
    effectively making our network consumption much lighter. We will have also implemented
    several techniques to decrease the network load, assessing each improvement with
    the network profiler and custom monitors to see how much better the game is becoming.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 12*](B18527_12.xhtml#_idTextAnchor285), *Implementing Lag Compensation*,
    deals with the issue that due to the improvements made to decrease network usage,
    our game may be inaccurately replicated on players’ machines. With fewer RPCs
    and more sparse synchronization, the game may become asynchronous among players.
    Add latency and packet loss on top of that and you effectively worsen the players’
    experience. Nobody likes lag in their game. In this chapter, we will learn how
    to use Tweens to implement interpolation, prediction, and extrapolation to compensate
    for all these issues. By the end of the chapter, we will have a version of the
    top-down space-shooting adventure prototype with some fake latency and solutions
    for this game-breaking issue.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 13*](B18527_13.xhtml#_idTextAnchor296), *Caching Data to Decrease
    Bandwidth*, handles an important issue: throughout our network engineering endeavors,
    we have learned that bandwidth is our core resource and that we should always
    look to optimize its usage. In this chapter, we will learn how to use HTTP to
    download some data and store it on players’ machines so that we can reuse it when
    necessary. By the end of the chapter, we will have implemented a feature that
    allows players to use custom images for their spaceships, and this new image will
    be replicated on all other players’ instances of the game. To save bandwidth,
    we will implement caching using the user data folder.'
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book uses Godot Engine’s ENet library implementation to create several
    prototypes that explore the boundaries of this technology. To get the most out
    of this book, you need to understand how Godot Engine works, how to code in GDScript,
    how to use Git, and the basics of the UDP, TCP, and HTTP protocols.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Software/hardware covered in** **the book** | **Operating** **system requirements**
    |'
  prefs: []
  type: TYPE_TB
- en: '| Godot Engine 4.0 | Windows, macOS, or Linux |'
  prefs: []
  type: TYPE_TB
- en: Throughout the book, we use the projects available in the book’s GitHub repository.
    This book focuses on the networking aspects of each project, so to save you time,
    you have ready-to-use projects available so you don’t need to bother with implementing
    other features that are not related to network engineering. In that sense, having
    Git installed is recommended, although not mandatory because you can download
    the code directly through the links provided as well.
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are using the digital version of this book, we advise you to type
    the code yourself or access the code from the book’s GitHub repository (a link
    is available in the next section). Doing so will help you avoid any potential
    errors related to the copying and pasting** **of code.**'
  prefs: []
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download the example code files for this book from GitHub at [https://github.com/PacktPublishing/The-Essential-Guide-to-Creating-Multiplayer-Games-with-Godot-4.0/](https://github.com/PacktPublishing/The-Essential-Guide-to-Creating-Multiplayer-Games-with-Godot-4.0/).
    If there’s an update to the code, it will be updated in the GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: We also have other code bundles from our rich catalog of books and videos available
    at [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/).
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`Code in text`: Indicates code words in text, database table names, folder
    names, filenames, file extensions, pathnames, dummy URLs, user input, and Twitter
    handles. Here is an example: “One of the Godot Engine’s Network API core features
    is the `ENetMultiplayerPeer` class.”'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Bold**: Indicates a new term, an important word, or words that you see onscreen.
    For instance, words in menus or dialog boxes appear in **bold**. Here is an example:
    “From there, we first need a server. So, choose one instance and press the **ServerButton**.”'
  prefs: []
  type: TYPE_NORMAL
- en: Tips or important notes
  prefs: []
  type: TYPE_NORMAL
- en: Appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Get in touch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome.
  prefs: []
  type: TYPE_NORMAL
- en: '**General feedback**: If you have questions about any aspect of this book,
    email us at [customercare@packtpub.com](mailto:customercare@packtpub.com) and
    mention the book title in the subject of your message.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Errata**: Although we have taken every care to ensure the accuracy of our
    content, mistakes do happen. If you have found a mistake in this book, we would
    be grateful if you would report this to us. Please visit [www.packtpub.com/support/errata](http://www.packtpub.com/support/errata)
    and fill in the form.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Piracy**: If you come across any illegal copies of our works in any form
    on the internet, we would be grateful if you would provide us with the location
    address or website name. Please contact us at [copyright@packt.com](mailto:copyright@packt.com)
    with a link to the material.'
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are interested in becoming an author**: If there is a topic that you
    have expertise in and you are interested in either writing or contributing to
    a book, please visit [authors.packtpub.com](http://authors.packtpub.com).'
  prefs: []
  type: TYPE_NORMAL
- en: Share Your Thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you’ve read *The Essential Guide to Creating Multiplayer Games with Godot
    4.0*, we’d love to hear your thoughts! Please [click here to go straight to the
    Amazon review page](https://packt.link/r/1803232617) for this book and share your
    feedback.
  prefs: []
  type: TYPE_NORMAL
- en: Your review is important to us and the tech community and will help us make
    sure we’re delivering excellent quality content.
  prefs: []
  type: TYPE_NORMAL
- en: Download a free PDF copy of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thanks for purchasing this book!
  prefs: []
  type: TYPE_NORMAL
- en: Do you like to read on the go but are unable to carry your print books everywhere?
  prefs: []
  type: TYPE_NORMAL
- en: Is your eBook purchase not compatible with the device of your choice?
  prefs: []
  type: TYPE_NORMAL
- en: Don’t worry, now with every Packt book you get a DRM-free PDF version of that
    book at no cost.
  prefs: []
  type: TYPE_NORMAL
- en: Read anywhere, any place, on any device. Search, copy, and paste code from your
    favorite technical books directly into your application.
  prefs: []
  type: TYPE_NORMAL
- en: The perks don’t stop there, you can get exclusive access to discounts, newsletters,
    and great free content in your inbox daily
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these simple steps to get the benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: Scan the QR code or visit the link below
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18527_QR_Free_PDF.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[https://packt.link/free-ebook/9781803232614](https://packt.link/free-ebook/9781803232614)'
  prefs: []
  type: TYPE_NORMAL
- en: Submit your proof of purchase
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That’s it! We’ll send your free PDF and other benefits to your email directly
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Part 1:Handshaking and Networking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout this part of the book, we take our first steps into the realm of
    networking. We start by making a handshake using Godot Engine’s high-level `EnetMultiplayerPeer`
    class. We also learn how to use the UDP protocol to exchange data and end up by
    learning how to use **Remote Procedure** **Call** (**RPC**).
  prefs: []
  type: TYPE_NORMAL
- en: 'This part contains the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 1*](B18527_01.xhtml#_idTextAnchor018), *Setting up a Server*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 2*](B18527_02.xhtml#_idTextAnchor037), *Sending and Receiving Data*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*chapter 3*](B18527_03.xhtml#_idTextAnchor065)*,* *Making a Lobby to Gather
    Players Together*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B18527_04.xhtml#_idTextAnchor095)*,* *Creating an Online Chat*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
