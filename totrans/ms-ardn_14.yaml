- en: Speech Recognition and Voice Synthesizing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Anyone who has used Amazon's Echo, Google's Home speaker or even Apple's Siri
    knows how powerful and convenient speech recognition and voice synthesizing can
    be. Now imagine if we could add these features, at a smaller scale, to our smart
    devices? If we could, we would have the ability to speak directly to our coffee
    pot and tell it to start brewing our coffee in the morning or command the robots
    that we build.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will look at how we can add voice recognition and voice
    synthesizing to any Arduino projects using the MOVI shield. Throughout this chapter,
    we will learn:'
  prefs: []
  type: TYPE_NORMAL
- en: How to use the MOVI shield for speech recognition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use the MOVI shield for voice synthesizing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create a voice-activated thermometer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The name **MOVI** stands for **My Own Voice Interface**. The MOVI Arduino shield
    by Audeme is an extremely easy to use speech recognition and voice synthesizing
    shield. This shield will work directly with the **Uno R3**, **Duemilanove**, **Mega
    2560**, or **Leonardo Arduinos**. However, you should not power the board through
    the USB connector while the MOVI shield is connected. The MOVI shield requires
    a minimum of 7V. Therefore, you may damage the MOVI and/or the Arduino if you
    attempt to power it from a USB connection.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can read about the MOVI shield and download the user manual from Audeme''s
    website here: [https://www.audeme.com](http://www.audeme.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: When powering and programming the Arduino with the MOVI attached, you will want
    to power the Arduino through the DC supply input connector using an input of 9V.
    Once the boards are powered up, you can then connect the USB cable between the
    Arduino and your computer for programming. Since the board was originally powered
    by the DC supply input connector, it will continue drawing power from that source
    rather than the USB connection.
  prefs: []
  type: TYPE_NORMAL
- en: '**Very important:** Do not power the Arduino, when the MOVI shield is connected,
    from the USB connector.'
  prefs: []
  type: TYPE_NORMAL
- en: 'While programming the MOVI, it is recommended to attach an external microphone,
    to get better voice recognition, and headphone, so you can hear the MOVI''s responses.
    The following photograph shows the MOVI attached to an Arduino with an external
    microphone and earphones attached to the MOVI:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b6829136-9b12-4b4b-897c-b7befb60df48.png)'
  prefs: []
  type: TYPE_IMG
- en: There is a built-in microphone on the MOVI shield that can be used rather than
    an external one. However, there is no built-in speaker. To receive audio feedback,
    which includes errors and system messages, you must connect headphones or an external
    speaker to the MOVI shield. The speaker impedance should be 32 ohms, which is
    the standard for headphones. You should not connect a 4- or 8-ohm speaker to the
    external speaker jack.
  prefs: []
  type: TYPE_NORMAL
- en: The MOVI can be used as a replacement for buttons, remote controls or any other
    control input. As we will see in the sample project for this chapter, we can use
    the MOVI to issue voice commands that the Arduino can respond to.
  prefs: []
  type: TYPE_NORMAL
- en: One of the best features with the MOVI shield is that no internet connection
    is required. This alleviates any privacy concerns that are normally associated
    with other voice control devices such as the Amazon Echo and Google Home speaker,
    since no data is sent to external servers.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is an LED on the MOVI shield, which indicates the state that the shield
    is in. The following list shows the different states the MOVI shield can be in
    and the associated LED state:'
  prefs: []
  type: TYPE_NORMAL
- en: '**LED off**: Indicates that the shield is turned off or there is not enough
    power for the MOVI to operate'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**LED blinking faster and faster**: The MOVI is booting'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**LED blinking randomly**: The MOVI is writing to the SD card'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**LED blinking with constant frequency**: There may be an issue with the SD
    card'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**LED on**: Indicates that the MOVI is on and ready'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The MOVI shield is one of the most interesting and fun boards that you can use
    with the Arduino. If you are interested in some of the more advanced things you
    can do with it, you should look at the examples that come with the MOVI library.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will create a voice-activated thermometer using the DHT-11
    temperature sensor that we used in [Chapter 9](4334ea1c-5df5-4be7-a7c1-86592cb3aaa6.xhtml),
    *Environment Sensors,* and the MOVI shield. To connect the temperature sensor
    and the MOVI shield to the Arduino, we will want to attach the MOVI shield to
    the Arduino first and then connect the DHT-11 temperature sensor to the pin headers
    on the MOVI shield.
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at the components that we will need for this project.
  prefs: []
  type: TYPE_NORMAL
- en: Components needed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will need the following components.
  prefs: []
  type: TYPE_NORMAL
- en: One Arduino Uno or compatible board
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 9V power source such as a wall outlet adapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One MOVI shield
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One DHT-11 temperature/humidity sensor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One 4.7K resistor
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: Jumper wires
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: One breadboard
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Circuit diagrams
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following diagram shows how to connect the DHT-11 temperature sensor for
    this project. Remember to attach the MOVI shield to the Arduino prior to connecting
    the temperature sensor. The resistor shown in the following diagram is a 4.7K-
    ohm resistor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2f2a09fc-e918-469f-9179-159603fc1b06.png)'
  prefs: []
  type: TYPE_IMG
- en: Now let's look at the code for our voice-activated temperature sensor.
  prefs: []
  type: TYPE_NORMAL
- en: Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should already have the DHT-11 library downloaded from the example in [Chapter
    9](4334ea1c-5df5-4be7-a7c1-86592cb3aaa6.xhtml), *Environment Sensors,* but you
    will need to download the MOVI library. If you go to the library manager and do
    a search for `Movi`, you will find several libraries that match that term. Look
    for the **MOVI Voice Dialog Shield library by Audeme LLC** and download it.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will begin the sketch by including both the MOVI and the DHT libraries.
    The following code shows how to include both:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will define the DHT pin/type and create an instance of the DHT type
    as we did in [Chapter 9](4334ea1c-5df5-4be7-a7c1-86592cb3aaa6.xhtml),Â *Environment
    Sensors*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we will want to create an instance of the MOVI type as shown in the following
    line of code. The Boolean `false` value indicates that we do not want serial debugging
    turned on:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Finally, we will need a character array that will be used to create the sentence
    that contains the current temperature so the MOVI shield can tell us the temperature
    when we ask for it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Within the `setup()` function we will need to initialize both the DHT temperature
    sensor and also the MOVI shield. The following code shows the `setup()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This function starts off by initializing the DHT temperature sensor by calling
    the `begin()` function from the `dht` type. Next, we initiate the `movi` type
    by calling the `init()` function. This function must be called first to initialize
    the `movi` type.
  prefs: []
  type: TYPE_NORMAL
- en: Most voice-activated devices like Amazon Echo are activated by a call sign.
    For Amazon's devices, the call sign is "Alexa." In our example, the MOVI shield
    will also use a call sign that will activate it. A call sign can be set up using
    the `callSign()` method, where the call sign to use is passed in as a string.
    In this example, the call sign will be "buddy".
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will want to add a sentence or words that the MOVI will match. We do
    this with the `addSentence()` function. For this example, we will try to match
    the word "temp." We do have the option of training the MOVI shield with complete
    sentences or words. If you wish for the MOVI shield to recognize a sentence, it
    is recommended to add the complete sentence even if you need to add multiple versions
    of the same sentence. By adding the complete sentence, the MOVI's algorithm can
    be used to identify the sentence. This gives greater accuracy. It is also recommended
    that all trained sentences be close to the same size. A single long sentence will
    be favored over much smaller ones if a lot of words are spoken.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the `train()` method is called to tell the MOVI shield that we have
    added all of the sentences and the call sign. The first time you add a sentence
    or call sign the MOVI shield will take some time to train, but if the call sign
    and sentence stay the same between builds of your application, then the MOVI shield
    will start up very quickly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that the `setup()` function is complete, let''s look at the `loop()` function.
    The following code shows the `loop()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In the first line, we use the `poll()` function from the `movi` instance. This
    function will poll for any match to the trained sentences. This function would
    return zero (`0`) if no event happened or a positive number if it matches a sentence.
    The number that is returned is the number of the sentence that it matched. In
    our example, we only have one sentence. Therefore, the only possible match is
    to sentence number `1`.
  prefs: []
  type: TYPE_NORMAL
- en: If a match to the sentence is found, the current temperature is read from the
    DHT-11 temperature sensor and then it is converted from a float value to an integer
    value by typecasting.
  prefs: []
  type: TYPE_NORMAL
- en: To construct the string that we wish for the MOVI shield to say, the `sprintf()`
    function is used. This function can be used to construct a character array. In
    this example, we start with the sentence `The temperature is` and then add the
    temperature value using the `%02d` format. This tells the `sprintf()` function
    to add a two-digit integer to the string. The character array that is created
    is stored in the answer array that was created at the beginning of this sketch.
  prefs: []
  type: TYPE_NORMAL
- en: We use the `say()` function from the `movi` instance to have the MOVI shield
    tell us the current temperature through the connected headphones or speaker.
  prefs: []
  type: TYPE_NORMAL
- en: Now let's run the project.
  prefs: []
  type: TYPE_NORMAL
- en: Running the project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first time the project is run, it will take a little time to train the MOVI
    shield. Wait for the shield to say that it is ready and then use the call sign
    to activate it. Once you say the call sign, you will hear a beep if the MOVI shield
    recognizes it. If MOVI recognizes the call sign say the sentence "temp." The MOVI
    shield should respond back by telling you the current temperature that was read
    by the DHT-11 temperature sensor.
  prefs: []
  type: TYPE_NORMAL
- en: This example only touches the very basics of what you can do with the MOVI shield
    and gives you enough to get started with it.
  prefs: []
  type: TYPE_NORMAL
- en: Challenge
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are other very useful functions that we can use with the MOVI instance.
    Here are a few additional functions that you can try to add to the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '**isReady()**: Will return a Boolean value of true if the MOVI is ready or
    false if it is not ready.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**setVolume(int volume)**: Will set the volume of the MOVI''s output from 0
    (muted) to 100 (full volume).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**setVoiceGender(bool female)**: Will set the gender for the MOVI''s voice.
    A true value will set it to a female voice, and a false value will set it to a
    male voice.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**setThreshold(int threshold)**: Sets the noise threshold for the speech recognizer.
    Values can range from 2 to 95\. A value of 15 is good for a noisy environment
    while a value of 30 is good for a very noisy environment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**welcomeMessage(bool on)**: Will set the MOVI welcome message on or off.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**beeps(bool on)**: Turns the recognition beep on or off.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ask() and ask(string question)**: Directly listens without waiting for a
    call sign. If a string is passed in, then the MOVI will ask the question first
    before listening.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The challenge is to try to add some of these functions in the sample project
    and see what else you can do with the MOVI shield. Also, try adding additional
    sentences for MOVI to listen for.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we saw how we could use the MOVI shield for both speech recognition
    and also for voice synthesizing. We used the speech recognition to listen for
    a specific command and the voice synthesizing to respond to the command.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at how we can use DC motors and motor controllers.
  prefs: []
  type: TYPE_NORMAL
