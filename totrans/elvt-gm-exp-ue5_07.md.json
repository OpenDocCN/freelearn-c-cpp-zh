["```cpp\n    public:\n    // Can we see the given actor\n    static bool CanSeeActor(\n    const UWorld* World,\n    FVector Location,\n    const AActor* TargetActor,\n    TArray<const AActor*> IgnoreActors = TArray<const AActor*>());\n    ```", "```cpp\n        // Where the Line Trace starts and ends\n        FVector Start = Location;\n        ```", "```cpp\n        FCollisionQueryParams QueryParams;\n        // Ignore the actors specified\n        QueryParams.AddIgnoredActors(IgnoreActors);\n        ```", "```cpp\n        // Execute the Line Trace\n        World->LineTraceSingleByChannel(Hit, Start, End, Channel, \n          QueryParams);\n        // Show the Line Trace inside the game\n        DrawDebugLine(World, Start, End, FColor::Red);\n        ```", "```cpp\n        #include \"Engine/World.h\"\n        #include \"DrawDebugHelpers.h\"\n        #include \"CollisionQueryParams.h\"\n        ```", "```cpp\n        // Remove this line\n        #include \"DrawDebugHelpers.h\"\n        ```", "```cpp\n        #include \"DodgeballFunctionLibrary.h\"\n        ```", "```cpp\n        const TArray<const AActor*> IgnoreActors = {this, \n          TargetActor};\n        ```", "```cpp\n        if (UDodgeballFunctionLibrary::CanSeeActor(\n          GetWorld(),\n          SightSource->GetComponentLocation(),\n          TargetActor,\n          IgnoreActors))\n        ```", "```cpp\n    // The Owner's initial and current amount health \n    // points\n    UPROPERTY(EditDefaultsOnly, Category = Health)\n    float Health = 100.f;\n    ```", "```cpp\n    // Take health points from its Owner\n    void LoseHealth(float Amount);\n    ```", "```cpp\n    PrimaryComponentTick.bCanEverTick = false;\n    ```", "```cpp\n    void UHealthComponent::LoseHealth(float Amount)\n    {\n      Health -= Amount;\n    }\n    ```", "```cpp\n    if (Health <= 0.f)\n    {\n    }\n    ```", "```cpp\n        Health = 0.f;\n        ```", "```cpp\n        UKismetSystemLibrary::QuitGame(this,\n                                      nullptr,\n                                      EQuitPreference::Quit,\n                                      true);\n        ```", "```cpp\n        #include \"Kismet/KismetSystemLibrary.h\"\n        ```", "```cpp\n    // The damage the dodgeball will deal to the player's \n      character\n    UPROPERTY(EditAnywhere, Category = Damage)\n    float Damage = 34.f;\n    ```", "```cpp\n    #include \"HealthComponent.h\"\n    ```", "```cpp\n    ADodgeballCharacter* Player = \n      Cast<ADodgeballCharacter>(OtherActor);\n    if (Player != nullptr)\n    {\n    }\n    ```", "```cpp\n    UHealthComponent* HealthComponent = Player->\n    FindComponentByClass<UHealthComponent>();\n    ```", "```cpp\n    if (HealthComponent != nullptr)\n    {\n      HealthComponent->LoseHealth(Damage);\n    }\n    Destroy();\n    ```", "```cpp\n    class UHealthComponent* HealthComponent;\n    ```", "```cpp\n    #include \"HealthComponent.h\"\n    ```", "```cpp\n    HealthComponent = \n      CreateDefaultSubobject<UHealthComponent>(\n      TEXT(\"Health \n      Component\"));\n    ```", "```cpp\nUFUNCTION(BlueprintNativeEvent)\nvoid MyEvent();\nvirtual void MyEvent_Implementation();\n```", "```cpp\n    UFUNCTION(BlueprintNativeEvent, Category = Health)\n    void OnDeath();\n    virtual void OnDeath_Implementation() = 0;\n    ```", "```cpp\n    // Add this include\n    #include \"HealthInterface.h\"\n    #include \"DodgeballCharacter.generated.h\"\n    ```", "```cpp\n    class ADodgeballCharacter : public ACharacter, public \n      IHealthInterface\n    ```", "```cpp\n    virtual void OnDeath_Implementation() override;\n    ```", "```cpp\n    void ADodgeballCharacter::OnDeath_Implementation()\n    {\n      UKismetSystemLibrary::QuitGame(this,\n                                    nullptr,\n                                    EQuitPreference::Quit,\n                                    true);\n    }\n    ```", "```cpp\n    #include \"Kismet/KismetSystemLibrary.h\"\n    ```", "```cpp\n    // Replace this line\n    #include \"Kismet/KismetSystemLibrary.h\"\n    // With this line\n    #include \"HealthInterface.h\"\n    ```", "```cpp\n    // Remove this\n    UKismetSystemLibrary::QuitGame(this,\n                                  nullptr,\n                                  EQuitPreference::Quit,\n                                  true);\n    ```", "```cpp\n    if (GetOwner()->Implements<UHealthInterface>())\n    {\n    }\n    ```", "```cpp\n    #include \"GameFramework/Actor.h\"\n    ```", "```cpp\n    if (GetOwner()->Implements<UHealthInterface>())\n    {\n      IHealthInterface::Execute_OnDeath(GetOwner());\n    }\n    ```"]