["```cpp\n    clang++ -fsanitize=address -g -o your_program your_file.cpp\n    ```", "```cpp\n    export ASAN_SYMBOLIZER_PATH=/path/to/llvm-symbolizer\n    ```", "```cpp\nint main() {\n    int *heapArray = new int[5];\n    heapArray[5]   = 10; // Out-of-bounds write on the heap\n    delete[] heapArray;\n    return 0;\n}\n```", "```cpp\nmake && ./a.out\n=================================================================\n==3102850==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x603000000054 at pc 0x55af5525f222 bp 0x7ffde596fb60 sp 0x7ffde596fb50\nWRITE of size 4 at 0x603000000054 thread T0\n    #0 0x55af5525f221 in main /home/user/clang-sanitizers/main.cpp:3\n    #1 0x7f1ad0a29d8f  (/lib/x86_64-linux-gnu/libc.so.6+0x29d8f)\n    #2 0x7f1ad0a29e3f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x29e3f)\n    #3 0x55af5525f104 in _start (/home/user/clang-sanitizers/build/a.out+0x1104)\n0x603000000054 is located 0 bytes to the right of 20-byte region [0x603000000040,0x603000000054)\nallocated by thread T0 here:\n    #0 0x7f1ad12b6357 in operator new[](unsigned long) ../../../../src/libsanitizer/asan/asan_new_delete.cpp:102\n    #1 0x55af5525f1de in main /home/user/clang-sanitizers/main.cpp:2\n    #2 0x7f1ad0a29d8f  (/lib/x86_64-linux-gnu/libc.so.6+0x29d8f)\nSUMMARY: AddressSanitizer: heap-buffer-overflow /home/user/clang-sanitizers/main.cpp:3 in main\nShadow bytes around the buggy address:\n  0x0c067fff7fb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c067fff7fc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c067fff7fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c067fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c067fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n=>0x0c067fff8000: fa fa 00 00 00 fa fa fa 00 00[04]fa fa fa fa fa\n  0x0c067fff8010: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c067fff8020: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c067fff8030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c067fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c067fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07\n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n  Shadow gap:              cc\n==3102850==ABORTING\n```", "```cpp\nint main() {\n    int stackArray[5];\n    stackArray[5] = 10; // Out-of-bounds write on the stack\n    return 0;\n}\n```", "```cpp\n==3190568==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffd166961e4 at pc 0x55b4cd113295 bp 0x7ffd166961a0 sp 0x7ffd16696190\nWRITE of size 4 at 0x7ffd166961e4 thread T0\n    #0 0x55b4cd113294 in main /home/user/clang-sanitizers/main.cpp:3\n    #1 0x7f90fc829d8f  (/lib/x86_64-linux-gnu/libc.so.6+0x29d8f)\n    #2 0x7f90fc829e3f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x29e3f)\n    #3 0x55b4cd113104 in _start (/home/user/clang-sanitizers/build/a.out+0x1104)\nAddress 0x7ffd166961e4 is located in stack of thread T0 at offset 52 in frame\n    #0 0x55b4cd1131d8 in main /home/user/clang-sanitizers/main.cpp:1\n  This frame has 1 object(s):\n    [32, 52) ‘stackArray’ (line 2) <== Memory access at offset 52 overflows this variable\nHINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork\n      (longjmp and C++ exceptions *are* supported)\nSUMMARY: AddressSanitizer: stack-buffer-overflow /home/user/clang-sanitizers/main.cpp:3 in main\nShadow bytes around the buggy address:\n  0x100022ccabe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100022ccabf0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100022ccac00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100022ccac10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100022ccac20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n=>0x100022ccac30: 00 00 00 00 00 00 f1 f1 f1 f1 00 00[04]f3 f3 f3\n  0x100022ccac40: f3 f3 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100022ccac50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100022ccac60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100022ccac70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100022ccac80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07\n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n  Shadow gap:              cc\n==3190568==ABORTING\n```", "```cpp\nint globalArray[5];\nint main() {\n    globalArray[5] = 10;  // Out-of-bounds access to a global array\n    return 0;\n}\n```", "```cpp\n#include <iostream>\ntemplate <typename T>\nstruct Node {\n    T data;\n    Node *next;\n    Node(T val) : data(val), next(nullptr) {}\n};\nint main() {\n    auto *head = new Node(1);\n    auto *temp = head;\n    head       = head->next;\n    delete temp;\n    std::cout << temp->data; // Use-after-free in a linked list\n    return 0;\n}\n```", "```cpp\nclass Example {\npublic:\n    int value;\n    Example() : value(0) {}\n};\nExample* obj = new Example();\nExample& ref = *obj;\ndelete obj;\nstd::cout << ref.value;  // Use-after-free through a reference\n```", "```cpp\nstruct Node {\n    int data;\n    Node* next;\n    Node(int val) : data(val), next(nullptr) {}\n};\nNode* head = new Node(1);\nNode* temp = head;\nhead = head->next;\ndelete temp;\nstd::cout << temp->data;  // Use-after-free in a linked list\n```", "```cpp\nmake && ./a.out\nConsolidate compiler generated dependencies of target a.out\n[100%] Built target a.out\n=================================================================\n==3448347==ERROR: AddressSanitizer: heap-use-after-free on address 0x602000000010 at pc 0x55fbcc2ca3b2 bp 0x7fff2f3af7a0 sp 0x7fff2f3af790\nREAD of size 4 at 0x602000000010 thread T0\n    #0 0x55fbcc2ca3b1 in main /home/user/clang-sanitizers/main.cpp:15\n    #1 0x7efdb6429d8f  (/lib/x86_64-linux-gnu/libc.so.6+0x29d8f)\n    #2 0x7efdb6429e3f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x29e3f)\n    #3 0x55fbcc2ca244 in _start (/home/user/clang-sanitizers/build/a.out+0x1244)\n```", "```cpp\n    clang++ -fsanitize=address -fsanitize-address-use-after-return=always -g -o your_program your_file.cpp\n    ```", "```cpp\n        ASAN_OPTIONS=detect_stack_use_after_return=1 ./your_program\n        ```", "```cpp\n        ASAN_OPTIONS=detect_stack_use_after_return=0 ./your_program\n        ```", "```cpp\n#include <iostream>\nconst std::string &get_binary_name() {\n    const std::string name = “main”;\n    return name; // Returning address of a local variable\n}\nint main() {\n    const auto &name = get_binary_name();\n    // Use after return: accessing memory through name is undefined behavior\n    std::cout << name << std::endl;\n    return 0;\n}\n```", "```cpp\nclang++ -fsanitize=address -Wno-return-local-addr -g your_file.cpp -o your_program\n```", "```cpp\nConsolidate compiler generated dependencies of target a.out\n[100%] Built target a.out\nAddressSanitizer:DEADLYSIGNAL\n=================================================================\n==4104819==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000008 (pc 0x7f74e354f4c4 bp 0x7ffefcd298e0 sp 0x7ffefcd298c8 T0)\n==4104819==The signal is caused by a READ memory access.\n==4104819==Hint: address points to the zero page.\n    #0 0x7f74e354f4c4 in std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char>, std::allocator<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (/lib/x86_64-linux-gnu/libstdc++.so.6+0x14f4c4)\n    #1 0x559799ab4785 in main /home/user/clang-sanitizers/main.cpp:11\n    #2 0x7f74e3029d8f  (/lib/x86_64-linux-gnu/libc.so.6+0x29d8f)\n    #3 0x7f74e3029e3f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x29e3f)\n    #4 0x559799ab4504 in _start (/home/user/clang-sanitizers/build/a.out+0x2504)\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV (/lib/x86_64-linux-gnu/libstdc++.so.6+0x14f4c4) in std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char>, std::allocator<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)\n==4104819==ABORTING\n```", "```cpp\nint* create_array(bool condition) {\n  int *p;\n  if (condition) {\n    int x[10];\n    p = x;\n  }\n  *p = 1;\n}\n```", "```cpp\ng++ -fsanitize=address -fsanitize-address-use-after-scope -g your_file.cpp -o your_program\n```", "```cpp\nint main() {\n    int* ptr = new int(10);\n    delete ptr;\n    delete ptr;  // Double-free error\n    return 0;\n}\n```", "```cpp\nmake && ./a.out\nConsolidate compiler generated dependencies of target a.out\n[ 50%] Building CXX object CMakeFiles/a.out.dir/main.cpp.o\n[100%] Linking CXX executable a.out\n[100%] Built target a.out\n=================================================================\n==765374==ERROR: AddressSanitizer: attempting double-free on 0x602000000010 in thread T0:\n    #0 0x7f7ff5eb724f in operator delete(void*, unsigned long) ../../../../src/libsanitizer/asan/asan_new_delete.cpp:172\n    #1 0x55839eca830b in main /home/user/clang-sanitizers/main.cpp:6\n    #2 0x7f7ff5629d8f  (/lib/x86_64-linux-gnu/libc.so.6+0x29d8f)\n    #3 0x7f7ff5629e3f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x29e3f)\n    #4 0x55839eca81c4 in _start (/home/user/clang-sanitizers/build/a.out+0x11c4)\n0x602000000010 is located 0 bytes inside of 4-byte region [0x602000000010,0x602000000014)\nfreed by thread T0 here:\n    #0 0x7f7ff5eb724f in operator delete(void*, unsigned long) ../../../../src/libsanitizer/asan/asan_new_delete.cpp:172\n    #1 0x55839eca82f5 in main /home/user/clang-sanitizers/main.cpp:5\n    #2 0x7f7ff5629d8f  (/lib/x86_64-linux-gnu/libc.so.6+0x29d8f)\npreviously allocated by thread T0 here:\n    #0 0x7f7ff5eb61e7 in operator new(unsigned long) ../../../../src/libsanitizer/asan/asan_new_delete.cpp:99\n    #1 0x55839eca829e in main /home/user/clang-sanitizers/main.cpp:4\n    #2 0x7f7ff5629d8f  (/lib/x86_64-linux-gnu/libc.so.6+0x29d8f)\nSUMMARY: AddressSanitizer: double-free ../../../../src/libsanitizer/asan/asan_new_delete.cpp:172 in operator delete(void*, unsigned long)\n==765374==ABORTING\n```", "```cpp\nint main() {\n    int local_var = 42;\n    int* ptr = &local_var;\n    delete ptr;  // Invalid free error\n    return 0;\n}\n```", "```cpp\nclang++ -fsanitize=address -Wno-free-nonheap-object -g your_file.cpp -o your_program\n```", "```cpp\n=================================================================\n==900629==ERROR: AddressSanitizer: attempting free on address which was not malloc()-ed: 0x7fff390f21d0 in thread T0\n    #0 0x7f30b82b724f in operator delete(void*, unsigned long) ../../../../src/libsanitizer/asan/asan_new_delete.cpp:172\n    #1 0x563f21cd72c7 in main /home/user/clang-sanitizers/main.cpp:4\n    #2 0x7f30b7a29d8f  (/lib/x86_64-linux-gnu/libc.so.6+0x29d8f)\n    #3 0x7f30b7a29e3f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x29e3f)\n    #4 0x563f21cd7124 in _start (/home/user/clang-sanitizers/build/a.out+0x1124)\nAddress 0x7fff390f21d0 is located in stack of thread T0 at offset 32 in frame\n    #0 0x563f21cd71f8 in main /home/user/clang-sanitizers/main.cpp:1\n  This frame has 1 object(s):\n    [32, 36) ‘local_var’ (line 2) <== Memory access at offset 32 is inside this variable\nHINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork\n      (longjmp and C++ exceptions *are* supported)\nSUMMARY: AddressSanitizer: bad-free ../../../../src/libsanitizer/asan/asan_new_delete.cpp:172 in operator delete(void*, unsigned long)\n==900629==ABORTING\n```", "```cpp\n#if defined(__has_feature)\n#  if __has_feature(address_sanitizer)\n// Do something specific for AddressSanitizer\n#  endif\n#endif\n```", "```cpp\nfun:FunctionName  # Suppresses errors from FunctionName\nglobal:GlobalVarName  # Suppresses out-of-bound errors on GlobalVarName\ntype:TypeName  # Suppresses errors for TypeName objects\n```", "```cpp\nint main() {\n    int* leaky_memory = new int[100]; // Memory allocated and never freed\n    leaky_memory      = nullptr;      // Memory leaked\n    (void)leaky_memory;\n    return 0;\n}\n```", "```cpp\n=================================================================\n==1743181==ERROR: LeakSanitizer: detected memory leaks\nDirect leak of 400 byte(s) in 1 object(s) allocated from:\n    #0 0x7fa14b6b6357 in operator new[](unsigned long) ../../../../src/libsanitizer/asan/asan_new_delete.cpp:102\n    #1 0x55888aabd19e in main /home/user/clang-sanitizers/main.cpp:2\n    #2 0x7fa14ae29d8f  (/lib/x86_64-linux-gnu/libc.so.6+0x29d8f)\nSUMMARY: AddressSanitizer: 400 byte(s) leaked in 1 allocation(s).\n```", "```cpp\nclang++ -fsanitize=memory -g -o your_program your_file.cpp\n```", "```cpp\n#include <iostream>\nint main() {\n    int* ptr = new int[10];\n    if (ptr[1]) {\n        std::cout << “xx\\n”;\n    }\n    delete[] ptr;\n    return 0;\n}\n```", "```cpp\n==48607==WARNING: MemorySanitizer: use-of-uninitialized-value\n    #0 0x560a37e0f557 in main /home/user/clang-sanitizers/main.cpp:5:9\n    #1 0x7fa118029d8f  (/lib/x86_64-linux-gnu/libc.so.6+0x29d8f) (BuildId: c289da5071a3399de893d2af81d6a30c62646e1e)\n    #2 0x7fa118029e3f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x29e3f) (BuildId: c289da5071a3399de893d2af81d6a30c62646e1e)\n    #3 0x560a37d87354 in _start (/home/user/clang-sanitizers/build/a.out+0x1e354) (BuildId: 5a727e2c09217ae0a9d72b8a7ec767ce03f4e6ce)\nSUMMARY: MemorySanitizer: use-of-uninitialized-value /home/user/clang-sanitizers/main.cpp:5:9 in main\n```", "```cpp\n    int* ptr = new int[10]{};\n```", "```cpp\n    clang++ -fsanitize=thread -g -o your_program your_file.cpp\n    ```", "```cpp\n#include <iostream>\n#include <thread>\nint shared_counter = 0;\nvoid increment_counter() {\n    for (int i = 0; i < 10000; ++i) {\n        shared_counter++; // Potential data race\n    }\n}\nint main() {\n    std::thread t1(increment_counter);\n    std::thread t2(increment_counter);\n    t1.join();\n    t2.join();\n    std::cout << “Shared counter: “ << shared_counter << std::endl;\n    return 0;\n}\n```", "```cpp\n==================\nWARNING: ThreadSanitizer: data race (pid=2560038)\n  Read of size 4 at 0x555fd304f154 by thread T2:\n    #0 increment_counter() /home/user/clang-sanitizers/main.cpp:8 (a.out+0x13f9)\n    #1 void std::__invoke_impl<void, void (*)()>(std::__invoke_other, void (*&&)()) /usr/include/c++/11/bits/invoke.h:61 (a.out+0x228a)\n    #2 std::__invoke_result<void (*)()>::type std::__invoke<void (*)()>(void (*&&)()) /usr/include/c++/11/bits/invoke.h:96 (a.out+0x21df)\n    #3 void std::thread::_Invoker<std::tuple<void (*)()> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) /usr/include/c++/11/bits/std_thread.h:259 (a.out+0x2134)\n    #4 std::thread::_Invoker<std::tuple<void (*)()> >::operator()() /usr/include/c++/11/bits/std_thread.h:266 (a.out+0x20d6)\n    #5 std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)()> > >::_M_run() /usr/include/c++/11/bits/std_thread.h:211 (a.out+0x2088)\n    #6 <null> <null> (libstdc++.so.6+0xdc252)\n  Previous write of size 4 at 0x555fd304f154 by thread T1:\n    #0 increment_counter() /home/user/clang-sanitizers/main.cpp:8 (a.out+0x1411)\n    #1 void std::__invoke_impl<void, void (*)()>(std::__invoke_other, void (*&&)()) /usr/include/c++/11/bits/invoke.h:61 (a.out+0x228a)\n    #2 std::__invoke_result<void (*)()>::type std::__invoke<void (*)()>(void (*&&)()) /usr/include/c++/11/bits/invoke.h:96 (a.out+0x21df)\n    #3 void std::thread::_Invoker<std::tuple<void (*)()> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) /usr/include/c++/11/bits/std_thread.h:259 (a.out+0x2134)\n    #4 std::thread::_Invoker<std::tuple<void (*)()> >::operator()() /usr/include/c++/11/bits/std_thread.h:266 (a.out+0x20d6)\n    #5 std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)()> > >::_M_run() /usr/include/c++/11/bits/std_thread.h:211 (a.out+0x2088)\n    #6 <null> <null> (libstdc++.so.6+0xdc252)\n  Location is global ‘shared_counter’ of size 4 at 0x555fd304f154 (a.out+0x000000005154)\n  Thread T2 (tid=2560041, running) created by main thread at:\n    #0 pthread_create ../../../../src/libsanitizer/tsan/tsan_interceptors_posix.cpp:969 (libtsan.so.0+0x605b8)\n    #1 std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)()) <null> (libstdc++.so.6+0xdc328)\n    #2 main /home/user/clang-sanitizers/main.cpp:14 (a.out+0x1484)\n  Thread T1 (tid=2560040, finished) created by main thread at:\n    #0 pthread_create ../../../../src/libsanitizer/tsan/tsan_interceptors_posix.cpp:969 (libtsan.so.0+0x605b8)\n    #1 std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)()) <null> (libstdc++.so.6+0xdc328)\n    #2 main /home/user/clang-sanitizers/main.cpp:13 (a.out+0x146e)\nSUMMARY: ThreadSanitizer: data race /home/user/clang-sanitizers/main.cpp:8 in increment_counter()\n==================\nShared counter: 20000\nThreadSanitizer: reported 1 warnings\n```", "```cpp\n#include <iostream>\nint main() {\n    int x = 0;\n    std::cout << 10 / x << std::endl;  // Division by zero, undefined behavior\n    return 0;\n}\n```", "```cpp\n/home/user/clang-sanitizers/main.cpp:5:21: runtime error: division by zero\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior /home/user/clang-sanitizers/main.cpp:5:21 in\n0\n```", "```cpp\nvalgrind --leak-check=full ./your_program\n```", "```cpp\nint main() {\n    int* ptr = new int(10); // Memory allocated but not freed\n    return 0; // Memory leak occurs here\n}\n```", "```cpp\n==12345== Memcheck, a memory error detector\n==12345== 4 bytes in 1 blocks are definitely lost in loss record 1 of 1\n==12345==    at 0x...: operator new(unsigned long) (vg_replace_malloc.c:...)\n==12345==    by 0x...: main (your_file.cpp:2)\n...\n==12345== LEAK SUMMARY:\n==12345==    definitely lost: 4 bytes in 1 blocks\n...\n```", "```cpp\nvalgrind --tool=helgrind ./your_program\n```", "```cpp\n#include <iostream>\n#include <thread>\nint shared_counter = 0;\nvoid increment_counter() {\n    for (int i = 0; i < 10000; ++i) {\n        shared_counter++; // Potential data race\n    }\n}\nint main() {\n    std::thread t1(increment_counter);\n    std::thread t2(increment_counter);\n    t1.join();\n    t2.join();\n    std::cout << “Shared counter: “ << shared_counter << std::endl;\n    return 0;\n}\n```", "```cpp\nvalgrind --tool=helgrind ./a.out\n==178401== Helgrind, a thread error detector\n==178401== Copyright (C) 2007-2017, and GNU GPL’d, by OpenWorks LLP et al.\n==178401== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info\n==178401== Command: ./a.out\n==178401== ---Thread-Announcement------------------------------------------\n==178401==\n==178401== Thread #3 was created\n==178401==    at 0x4CCE9F3: clone (clone.S:76)\n==178401==    by 0x4CCF8EE: __clone_internal (clone-internal.c:83)\n==178401==    by 0x4C3D6D8: create_thread (pthread_create.c:295)\n==178401==    by 0x4C3E1FF: pthread_create@@GLIBC_2.34 (pthread_create.c:828)\n==178401==    by 0x4853767: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)\n==178401==    by 0x4952328: std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)()) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)\n==178401==    by 0x1093F9: std::thread::thread<void (&)(), , void>(void (&)()) (std_thread.h:143)\n==178401==    by 0x1092AF: main (main.cpp:14)\n==178401==\n==178401== ---Thread-Announcement------------------------------------------\n==178401==\n==178401== Thread #2 was created\n==178401== ----------------------------------------------------------------\n==178401==\n==178401== Possible data race during read of size 4 at 0x10C0A0 by thread #3\n==178401== Locks held: none\n==178401==    at 0x109258: increment_counter() (main.cpp:8)\n==178401==    by 0x109866: void std::__invoke_impl<void, void (*)()>(std::__invoke_other, void (*&&)()) (invoke.h:61)\n==178401==    by 0x1097FC: std::__invoke_result<void (*)()>::type std::__invoke<void (*)()>(void (*&&)()) (invoke.h:96)\n==178401==    by 0x1097D4: void std::thread::_Invoker<std::tuple<void (*)()> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (std_thread.h:259)\n==178401==    by 0x1097A4: std::thread::_Invoker<std::tuple<void (*)()> >::operator()() (std_thread.h:266)\n==178401==    by 0x1096F8: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)()> > >::_M_run() (std_thread.h:211)\n==178401==    by 0x4952252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)\n==178401==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)\n==178401==    by 0x4C3DAC2: start_thread (pthread_create.c:442)\n==178401==    by 0x4CCEA03: clone (clone.S:100)\n==178401==\n==178401== This conflicts with a previous write of size 4 by thread #2\n==178401== Locks held: none\n==178401==    at 0x109261: increment_counter() (main.cpp:8)\n==178401==    by 0x109866: void std::__invoke_impl<void, void (*)()>(std::__invoke_other, void (*&&)()) (invoke.h:61)\n==178401==    by 0x1097FC: std::__invoke_result<void (*)()>::type std::__invoke<void (*)()>(void (*&&)()) (invoke.h:96)\n==178401==    by 0x1097D4: void std::thread::_Invoker<std::tuple<void (*)()> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (std_thread.h:259)\n==178401==    by 0x1097A4: std::thread::_Invoker<std::tuple<void (*)()> >::operator()() (std_thread.h:266)\n==178401==    by 0x1096F8: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)()> > >::_M_run() (std_thread.h:211)\n==178401==    by 0x4952252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)\n==178401==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)\n==178401==  Address 0x10c0a0 is 0 bytes inside data symbol “shared_counter”\n==178401==\nShared counter: 20000\n==178401==\n==178401== Use --history-level=approx or =none to gain increased speed, at\n==178401== the cost of reduced accuracy of conflicting-access information\n==178401== For lists of detected and suppressed errors, rerun with: -s\n==178401== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)`\n```"]