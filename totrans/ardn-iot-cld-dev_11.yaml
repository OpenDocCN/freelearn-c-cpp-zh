- en: '11'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '11'
- en: Implementing the Arduino IoT Cloud Scheduler and Over-the-Air Features
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现Arduino IoT Cloud调度器和空中更新功能
- en: The world is full of different and interesting use cases that vary according
    to different circumstances. In the world of full automation, many use cases require
    applications to perform a specific operation at a certain time or frequency, defined
    by an end user. To handle this situation, the **Arduino IoT Cloud** has a **Scheduler**
    feature to let end users configure the execution time and frequency through a
    dashboard, without any modification to code on end devices. Initially, in this
    chapter, you will learn about the Arduino IoT Cloud Scheduler feature and its
    implementation.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 世界充满了各种不同和有趣的用例，这些用例根据不同的情况而变化。在完全自动化的世界中，许多用例需要应用程序在特定时间或频率执行特定操作，这些由最终用户定义。为了处理这种情况，Arduino
    IoT Cloud有一个**调度器**功能，允许最终用户通过仪表板配置执行时间和频率，而无需在最终设备上修改代码。在本章的初始阶段，你将了解Arduino
    IoT Cloud调度器功能和它的实现。
- en: Then, this chapter will cover the **Over-the-Air** (**OTA**) feature, which
    is becoming increasingly popular in remote devices such as mobile nodes, especially
    remote IoT nodes. The OTA feature allows you to broadcast the firmware update
    to IoT nodes, which will update wirelessly without any physical connection. This
    procedure enables the remote maintenance of commercial Arduino-based/ESP-series
    IoT nodes during their life cycle, reducing the related service costs when new
    features and security fixes become available.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，本章将介绍**空中更新**（**OTA**）功能，该功能在远程设备（如移动节点、特别是远程物联网节点）中越来越受欢迎。OTA功能允许您向物联网节点广播固件更新，这些节点将无线更新，无需任何物理连接。此过程使得在商业Arduino-based/ESP系列物联网节点的生命周期内进行远程维护成为可能，当新功能和安全修复可用时，可以降低相关的服务成本。
- en: The Arduino IoT Cloud Scheduler provides the ability to schedule operations
    via a dashboard widget, which helps to execute the operations on devices without
    modifying the code, and a user can simply adjust the time for routine operations.
    OTA helps you to send the latest code and updates to devices over the air without
    any physical connection to a device, which will save operational costs and time.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino IoT Cloud调度器提供通过仪表板小部件安排操作的能力，这有助于在不修改代码的情况下执行设备上的操作，用户可以简单地调整常规操作的执行时间。OTA可以帮助您通过空中发送最新的代码和更新到设备，无需与设备有任何物理连接，这将节省操作成本和时间。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: The importance of the Scheduler in IoT
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调度器在物联网中的重要性
- en: Using the Arduino IoT Cloud Scheduler – an MKR Wi-Fi 1010 illustration
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Arduino IoT Cloud调度器——一个MKR Wi-Fi 1010示例
- en: Initial configuration – Things, network credentials, cloud variables, and code
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始配置——设备、网络凭证、云变量和代码
- en: Dashboard creation and a deep dive into the Scheduler widget
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仪表板创建和对调度器小部件的深入了解
- en: The task at hand – an assignment
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当前任务——一个任务
- en: Exploring OTA updates in IoT
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索物联网中的OTA更新
- en: Leveraging the Arduino IoT Cloud for OTA updates
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用Arduino IoT Cloud进行OTA更新
- en: Technical requirements
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'Before we go any further, first of all, you need to have an Arduino IoT Cloud-compatible
    board. I recommend Arduino **MKR Wi-Fi 1010** with a bunch of 5 mm LEDs, but here
    is the complete list of compatible boards: [https://store-usa.arduino.cc/pages/cloud-compatible-boards](https://store-usa.arduino.cc/pages/cloud-compatible-boards).
    You can choose one according to your requirements.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，首先，你需要有一个与Arduino IoT Cloud兼容的板。我推荐带有一些5毫米LED的Arduino **MKR Wi-Fi 1010**，但这里有完整的兼容板列表：[https://store-usa.arduino.cc/pages/cloud-compatible-boards](https://store-usa.arduino.cc/pages/cloud-compatible-boards)。你可以根据自己的需求选择一个。
- en: Second, you need to have an Arduino IoT Cloud account. If you don’t already
    have one, you can sign up at [https://cloud.arduino.cc/](https://cloud.arduino.cc/)
    and select a plan according to your requirements.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，你需要有一个Arduino IoT Cloud账户。如果你还没有，你可以在[https://cloud.arduino.cc/](https://cloud.arduino.cc/)注册并根据自己的需求选择一个计划。
- en: Third, we need to download and install the **Arduino Create Agent**. Arduino
    has created a very beautiful web-based guide for installation at [https://create.arduino.cc/getting-started/plugin/welcome](https://create.arduino.cc/getting-started/plugin/welcome).
    The code for this chapter is available in the book’s official GitHub repository
    at [https://github.com/PacktPublishing/Arduino-IoT-Cloud-for-Developers](https://github.com/PacktPublishing/Arduino-IoT-Cloud-for-Developers).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 第三，我们需要下载并安装**Arduino Create Agent**。Arduino为安装创建了一个非常漂亮的基于Web的指南，可在[https://create.arduino.cc/getting-started/plugin/welcome](https://create.arduino.cc/getting-started/plugin/welcome)找到。本章的代码可在本书的官方GitHub仓库[https://github.com/PacktPublishing/Arduino-IoT-Cloud-for-Developers](https://github.com/PacktPublishing/Arduino-IoT-Cloud-for-Developers)中找到。
- en: Important note
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'All the Arduino IoT Cloud plans were discussed in detail in [*Chapter 1*](B19752_01.xhtml#_idTextAnchor015).
    You can also visit the following link for updated plan pricing and features: [https://cloud.arduino.cc/plans/](https://cloud.arduino.cc/plans/).
    If you are from an educational institute, then there are plenty of good plans
    for students and faculties. Arduino also offers customized plans to business organizations
    according to their requirements.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 所有Arduino物联网云计划都在[*第一章*](B19752_01.xhtml#_idTextAnchor015)中详细讨论。您也可以访问以下链接以获取最新的计划定价和功能：[https://cloud.arduino.cc/plans/](https://cloud.arduino.cc/plans/)。如果您来自教育机构，那么学生和教师有很多好的计划。Arduino还根据其需求为商业组织提供定制计划。
- en: The importance of the Scheduler in IoT
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调度器在物联网中的重要性
- en: 'Within the realm of IoT and cloud computing, a scheduler refers to a component
    or system that is responsible for managing and controlling the timing and execution
    of tasks, processes, or events. Its primary function is to ensure the smooth and
    efficient operation of various activities within an IoT cloud setup. Here are
    some advantages of employing a scheduler in an IoT cloud environment:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在物联网和云计算领域，调度器指的是负责管理和控制任务、进程或事件的时间安排和执行的组件或系统。其主要功能是确保物联网云设置中各种活动的平稳和高效运行。以下是采用调度器在物联网云环境中的优势：
- en: '**Task coordination**: The scheduler facilitates the orchestration of multiple
    tasks and processes in an IoT cloud by allowing users to define dependencies and
    priorities. This ensures that tasks are executed in the desired sequence, which
    is particularly crucial in complex IoT systems involving interconnected devices
    and services.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**任务协调**：调度器通过允许用户定义依赖关系和优先级，在物联网云中协调多个任务和进程。这确保了任务按照期望的顺序执行，这对于涉及互连设备和服务的复杂物联网系统尤为重要。'
- en: '**Resource optimization**: With the limited computational resources typically
    found in an IoT cloud, a scheduler optimizes its utilization by intelligently
    assigning tasks based on requirements, available resources, and priorities. This
    prevents resource overloading or underutilization, leading to enhanced efficiency
    and cost-effectiveness.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源优化**：在物联网云中，通常有限的计算资源需要通过智能分配任务来优化其利用，这些任务基于需求、可用资源和优先级。这防止了资源过载或低效利用，从而提高了效率和成本效益。'
- en: '**Time synchronization**: Achieving synchronized timing for specific operations
    or events is critical in IoT systems. The scheduler aids in time synchronization
    by coordinating task execution according to precise timing requirements. This
    synchronization guarantees that devices, sensors, and services are triggered or
    activated at the intended moments, enabling accurate data collection, analysis,
    and decision-making.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**时间同步**：在物联网系统中，实现特定操作或事件的时间同步至关重要。调度器通过根据精确的时间要求协调任务执行来帮助实现时间同步。这种同步保证了设备、传感器和服务在预定的时间被触发或激活，从而实现准确的数据收集、分析和决策。'
- en: '**Energy efficiency**: Many IoT devices operate on constrained battery power,
    making energy efficiency a vital concern. The scheduler optimizes task scheduling
    to minimize devices’ active time and maximize sleep or low-power mode, thereby
    conserving energy. This prolongs the battery life of IoT devices, reduces maintenance
    needs, and enhances overall system reliability.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**能源效率**：许多物联网设备在有限的电池功率下运行，因此能源效率是一个重要的考虑因素。调度器通过优化任务调度来最小化设备的活跃时间并最大化睡眠或低功耗模式，从而节约能源。这延长了物联网设备的电池寿命，减少了维护需求，并提高了整体系统可靠性。'
- en: '**Fault tolerance**: IoT systems are susceptible to failures and disruptions
    caused by network issues, device malfunctions, or service unavailability. By monitoring
    task statuses and detecting failures, the scheduler incorporates fault tolerance
    mechanisms. It automatically reschedules failed or interrupted tasks, ensuring
    operational continuity and reliability within the IoT cloud.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容错性**：物联网系统容易受到网络问题、设备故障或服务不可用引起的故障和中断的影响。通过监控任务状态和检测故障，调度器集成了容错机制。它自动重新安排失败或中断的任务，确保物联网云中的操作连续性和可靠性。'
- en: Overall, a scheduler in an IoT cloud environment brings organization, efficiency,
    and reliability by coordinating tasks, optimizing resources, synchronizing time,
    conserving energy, ensuring fault tolerance, and supporting scalability. Its presence
    is instrumental in managing the complexities of IoT systems and maximizing their
    performance.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，在物联网云环境中，调度器通过协调任务、优化资源、同步时间、节约能源、确保容错性和支持可扩展性，带来了组织、效率和可靠性。它的存在对于管理物联网系统的复杂性并最大化其性能至关重要。
- en: In this section, we have discussed in detail what a scheduler is and how we
    can benefit from it in product development. In the following section, we will
    take a look at how the Arduino IoT Cloud Scheduler benefits us in terms of real-world
    scenarios, and we will also learn how to implement the Arduino IoT Cloud Scheduler
    using MKR Wi-Fi 101.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们详细讨论了什么是调度器以及我们如何在产品开发中从中受益。在下一节中，我们将探讨Arduino IoT云调度器在现实场景中的好处，并学习如何使用MKR
    Wi-Fi 101实现Arduino IoT云调度器。
- en: Using the Arduino IoT Cloud Scheduler – an MKR Wi-Fi 1010 illustration
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Arduino IoT云调度器——以MKR Wi-Fi 1010为例
- en: In this section, we will take a look at how the Arduino IoT Cloud Scheduler
    provides different benefits and when and where we require scheduler functionality.
    Later, we will implement a practical example of a Scheduler using MKR Wi-Fi 1010.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨Arduino IoT云调度器如何提供不同的好处，以及何时何地我们需要调度功能。稍后，我们将通过使用MKR Wi-Fi 1010实现一个调度器的实际示例。
- en: The Arduino IoT Cloud Scheduler
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Arduino IoT云调度器
- en: 'The **Arduino IoT Cloud Scheduler** is a feature integrated into the Arduino
    IoT Cloud platform that empowers users to schedule and automate actions and events
    for their connected Arduino devices. It provides a convenient way to define and
    manage the timing of various tasks and functions within IoT projects. Here are
    some key aspects and benefits of the Arduino IoT Cloud Scheduler:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**Arduino IoT云调度器**是集成到Arduino IoT云平台中的一个功能，它赋予用户为他们的连接Arduino设备安排和自动化操作和事件的能力。它提供了一种方便的方式来定义和管理物联网项目中各种任务和功能的时机。以下是Arduino
    IoT云调度器的一些关键方面和好处：'
- en: '**Task scheduling**: The Arduino IoT Cloud Scheduler allows users to schedule
    tasks and events on their Arduino devices. It enables the definition of specific
    timings, intervals, or triggers for actions such as data collection, device control,
    and sensor readings.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**任务调度**：Arduino IoT云调度器允许用户在Arduino设备上安排任务和事件。它使得定义特定的时间、间隔或触发动作（如数据收集、设备控制和传感器读取）成为可能。'
- en: '**Remote control**: By leveraging the Scheduler, users can remotely trigger
    actions on their Arduino devices. This capability enables the control and automation
    of functions from any location, without the need for direct physical access to
    the devices. It enhances flexibility and enables the efficient remote management
    of IoT projects.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**远程控制**：通过利用调度器，用户可以远程触发Arduino设备上的操作。这种能力使得从任何位置控制自动化功能成为可能，无需直接物理访问设备。它增强了灵活性，并使物联网项目的远程管理更加高效。'
- en: '**Event-based triggers**: The Scheduler supports event-based triggers, empowering
    users to automate actions based on specific events or conditions. For instance,
    tasks can be scheduled to execute when a particular sensor value surpasses a defined
    threshold or when an external event is detected.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于事件的触发**：调度器支持基于事件的触发，使用户能够根据特定的事件或条件自动化操作。例如，任务可以安排在特定传感器的值超过定义的阈值或检测到外部事件时执行。'
- en: '**Time zone management**: The Arduino IoT Cloud Scheduler handles time zone
    management, ensuring that tasks are executed according to the desired time zone.
    This functionality is particularly useful when operating across different time
    zones or serving users in diverse regions.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**时区管理**：Arduino IoT云调度器处理时区管理，确保任务根据期望的时区执行。当在不同时区运营或为不同地区的用户提供服务时，此功能特别有用。'
- en: '**Integration with IoT cloud services**: The Scheduler seamlessly integrates
    with other features and services offered by the Arduino IoT Cloud platform. This
    includes data storage, visualization, and notification services. Users can combine
    scheduling with data logging, charting, and alerting to create comprehensive and
    cohesive IoT applications.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**与物联网云服务的集成**：调度器与Arduino物联网云平台提供的其他功能和服务无缝集成。这包括数据存储、可视化和通知服务。用户可以将调度与数据记录、图表和警报相结合，创建全面且连贯的物联网应用。'
- en: '**Flexibility and customization**: The Arduino IoT Cloud Scheduler provides
    a high degree of customization, enabling users to define complex schedules and
    conditions for their tasks. Users can specify the task frequency, duration, and
    intervals, and configure advanced parameters to align with their specific requirements.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**灵活性和定制**：Arduino物联网云调度器提供了高度的可定制性，使用户能够为他们的任务定义复杂的计划和条件。用户可以指定任务频率、持续时间和间隔，并配置高级参数以满足他们的特定需求。'
- en: By harnessing the power of the Arduino IoT Cloud Scheduler, users can automate
    tasks, remotely control devices, and establish time-based or event-driven workflows
    for their Arduino-based IoT projects. This feature simplifies the management and
    coordination of actions across devices, elevating the functionality and efficiency
    of IoT applications.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 通过利用Arduino物联网云平台调度器的力量，用户可以自动化任务，远程控制设备，并为基于Arduino的物联网项目建立基于时间或事件驱动的流程。这一功能简化了跨设备动作的管理和协调，提升了物联网应用的功能性和效率。
- en: In this section, we discussed how the Arduino IoT Cloud Scheduler provides a
    benefit to schedule our tasks. In the next section, we will implement a Scheduler
    using MKR Wi-Fi 1010.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论了Arduino物联网云调度器如何为我们的任务提供调度的好处。在下一节中，我们将使用MKR Wi-Fi 1010实现一个调度器。
- en: An MKR Wi-Fi 1010 example
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MKR Wi-Fi 1010示例
- en: In this chapter, I will not do a complex project to demonstrate how we can use
    the Scheduler. Instead, we will use a simple MKR Wi-Fi 1010 with three 5 mm LEDs,
    and we will set up the system so that it will turn LEDs on or off after a specific
    time interval. This example will simplify the hardware complexity and help you
    understand how the Arduino IoT Cloud Scheduler works. *Figure 11**.1* shows how
    LEDs connect with the MKR Wi-Fi 1010 for this Scheduler example.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我将不会进行复杂的项目来演示我们如何使用调度器。相反，我们将使用一个简单的MKR Wi-Fi 1010和三个5毫米LED，我们将设置系统，使其在特定时间间隔后打开或关闭LED。这个示例将简化硬件复杂性，并帮助您理解Arduino物联网云调度器的工作原理。*图11.1*展示了LED如何连接到MKR
    Wi-Fi 1010以进行此调度器示例。
- en: '![Figure 11.1 – The MKR Wi-Fi 1010 with LEDs](img/B19752_11_01.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图11.1 – 配有LED的MKR Wi-Fi 1010](img/B19752_11_01.jpg)'
- en: Figure 11.1 – The MKR Wi-Fi 1010 with LEDs
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.1 – 配有LED的MKR Wi-Fi 1010
- en: Here, we will just use three LEDs for three different schedulers/timers. We
    used *Pins 8*, *7*, and *6* to attach the LEDs with the MKR Wi-Fi 1010, using
    a 220-Ohm resistance, which will control the power from these pins, and one common
    **ground** (**GND**) goes to all the LEDs via the breadboard.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将仅使用三个LED来为三个不同的调度器/计时器。我们使用*引脚8*、*7*和*6*将LED连接到MKR Wi-Fi 1010，使用220欧姆的电阻，这将控制这些引脚的电源，一个公共**地**（**GND**）通过面包板连接到所有LED。
- en: In this section, we discussed the schematic diagram of our project, where we
    explained which pins are used to connect the LEDs with the MKR Wi-Fi 1010\. In
    the upcoming section, we will set up a Thing and device association with the Thing,
    and cloud variable creation and network configuration will be discussed step by
    step, along with code.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论了我们的项目原理图，其中我们解释了哪些引脚用于将LED连接到MKR Wi-Fi 1010。在下一节中，我们将设置与“物”关联的“物”和设备，以及云变量创建和网络配置将逐步讨论，包括代码。
- en: Initial configuration – Things, network credentials, cloud variables, and code
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初始配置 – “物”、网络凭证、云变量和代码
- en: After setting up the hardware, it’s time to set up a Thing in the Arduino IoT
    Cloud. For this project, we need three cloud variables for the Scheduler, which
    will be linked with dashboard widgets and receive the values from users. Later,
    the device will perform an operation (in our example, it will turn the LEDs on
    and off according to a scheduler time) when the Scheduler is active. *Figure 11**.2*
    gives a complete overview of the **Cloud** **Scheduler** Thing.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置好硬件后，是时候在Arduino物联网云中设置一个“物”了。对于这个项目，我们需要为调度器设置三个云变量，这些变量将与仪表板小部件链接并从用户那里接收值。稍后，当调度器处于活动状态时，设备将执行操作（在我们的例子中，它将根据调度器时间打开和关闭LED）。*图11.2*给出了**云****调度器**“物”的完整概述。
- en: '![Figure 11.2 – The Cloud Scheduler Thing setup](img/B19752_11_02.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![图11.2 – 云调度器事物设置](img/B19752_11_02.jpg)'
- en: Figure 11.2 – The Cloud Scheduler Thing setup
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.2 – 云调度器事物设置
- en: 'Set up a new Thing with the name `CloudScheduler`. Take the following steps
    to create cloud variables, associate a device, set up network configuration, and
    finally, write the code. In *Figure 11**.2*, all the steps are marked with a number
    above red boxes, which relate to the following steps:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 使用名称`CloudScheduler`设置一个新的事物。按照以下步骤创建云变量、关联设备、设置网络配置，最后编写代码。在*图11*.2中，所有步骤都以上方红色方框中的数字标记，这些步骤与以下步骤相关：
- en: Firstly, we need to set up three cloud variables for `CloudScheduler`. The complete
    details regarding cloud variables are available in the next section.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要为`CloudScheduler`设置三个云变量。有关云变量的详细信息将在下一节中提供。
- en: After that, we need to associate the device with the Thing. In the current project,
    we are using Arduino’s MKR Wi-Fi 1010, so the wizard will be the same for Arduino
    boards. The complete details are available in the *Associating a* *device* section.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，我们需要将设备与事物关联。在当前项目中，我们使用Arduino的MKR Wi-Fi 1010，因此对于Arduino板，向导将是相同的。完整的详细信息可在*关联设备*部分找到。
- en: Finally, we need to set up the network configuration for the device. Arduino-compatible
    boards are configured by the Arduino IoT Cloud automatically during the device
    setup wizard, so you just need to provide the Wi-Fi **service set identifier**
    (**SSID**) and password.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要为设备设置网络配置。Arduino兼容的板在设备设置向导期间由Arduino IoT Cloud自动配置，因此你只需要提供Wi-Fi**服务集标识符**（**SSID**）和密码。
- en: Cloud variables
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 云变量
- en: The following table explains all the properties of the variables that we need
    to use during cloud variable creation. For the Scheduler, we will use a custom
    data type, `Schedule`, which we have thanks to Arduino IoT Cloud’s extended group
    of variables. Then, make sure you have the same `declaration` variable as per
    the table; otherwise, you will need to modify the example code according to your
    naming.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格解释了我们创建云变量时需要使用的所有变量属性。对于调度器，我们将使用自定义数据类型`Schedule`，这是由于Arduino IoT Cloud扩展变量组所提供的。然后，确保你有与表格中相同的`声明`变量；否则，你需要根据你的命名修改示例代码。
- en: '| **S#** | **Variable Name** | **Variable Type** | **Declaration** | **Permission**
    | **Update** **Policy** |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| **S#** | **变量名称** | **变量类型** | **声明** | **权限** | **更新策略** |'
- en: '| 1 | `CloudScheduler1` | `Schedule` | `cloudScheduler1` | Read and write |
    On change |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| 1 | `CloudScheduler1` | `Schedule` | `cloudScheduler1` | 读写 | 变更时 |'
- en: '| 2 | `CloudScheduler2` | `Schedule` | `cloudScheduler2` | Read and write |
    On change |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| 2 | `CloudScheduler2` | `Schedule` | `cloudScheduler2` | 读写 | 变更时 |'
- en: '| 3 | `CloudScheduler3` | `Schedule` | `cloudScheduler3` | Read and write |
    On change |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| 3 | `CloudScheduler3` | `Schedule` | `cloudScheduler3` | 读写 | 变更时 |'
- en: Table 11.1 – The cloud variables declaration list
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 表11.1 – 云变量声明列表
- en: Here, I set the permission as *read* and *write* because we will input the date,
    time, and interval from the Arduino dashboard, which will be controlled by the
    end user, and the device will only perform the LED on/off operation when the Scheduler
    is in a state of `true`. **Update Policy** is set to **On change**, as the dashboard
    will send data to the device when there is any change in Scheduler values by the
    user.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我将权限设置为*读取*和*写入*，因为我们将从Arduino仪表板输入日期、时间和间隔，这将由最终用户控制，设备仅在调度器处于`true`状态时执行LED开关操作。**更新策略**设置为**变更时**，因为仪表板将在用户更改调度器值时向设备发送数据。
- en: Associating a device
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关联设备
- en: 'After creating the variable, it’s time to add a device and associate it with
    the Thing:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 创建变量后，是时候添加设备并将其与事物关联了：
- en: Before adding the device, connect the development board to the computer and
    open the **Arduino Create** **Agent** application.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在添加设备之前，将开发板连接到计算机并打开**Arduino Create** **代理**应用程序。
- en: After assigning a name to the Thing, we need to attach the device to it. When
    you click on the **Select Device** button, you will see a popup that shows you
    the available devices and an option to add a new device. In our case, we don’t
    have a device in the portal, so we can just click on **SET UP NEW DEVICE** to
    configure a new device in the account.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为事物分配名称后，我们需要将其设备附加到它上面。当你点击**选择设备**按钮时，你会看到一个弹出窗口，显示可用的设备和添加新设备选项。在我们的案例中，我们在门户中没有设备，因此我们可以直接点击**设置新设备**来在账户中配置新设备。
- en: '![Figure 11.3 – The associated device](img/B19752_11_03.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图11.3 – 关联的设备](img/B19752_11_03.jpg)'
- en: Figure 11.3 – The associated device
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.3 – 关联的设备
- en: Then, you will see two options in the popup. The first option is **Set up an
    Arduino device**, and the second option is **Set up a 3rd Party device**. Here,
    you will see a note under both options that says **Compatible devices**. This
    means you cannot use all types of Arduino devices and third-party devices with
    the Arduino IoT Cloud.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，您将在弹出窗口中看到两个选项。第一个选项是**设置 Arduino 设备**，第二个选项是**设置第三方设备**。在这里，您将在两个选项下方看到一个说明，说明**兼容设备**。这意味着您不能使用所有类型的
    Arduino 设备和第三方设备与 Arduino IoT Cloud 兼容。
- en: '![Figure 11.4 – Choosing the device](img/B19752_11_04.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.4 – 选择设备](img/B19752_11_04.jpg)'
- en: Figure 11.4 – Choosing the device
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.4 – 选择设备
- en: Select one option from the popup according to the available device. For this
    example, we will click on **Set up an Arduino device**, as in this chapter, we
    are using an MKR Wi-Fi 1010 board. Before adding the device, make sure the **Arduino
    Create Agent** is running on your machine.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 根据可用的设备，从弹出窗口中选择一个选项。在本例中，我们将点击**设置 Arduino 设备**，因为在本章中，我们使用的是 MKR Wi-Fi 1010
    板。在添加设备之前，请确保**Arduino Create Agent**已在您的机器上运行。
- en: Important note
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'Here is the link where you can find the Arduino IoT Cloud-compatible boards:
    [https://store-usa.arduino.cc/pages/cloud-compatible-boards](https://store-usa.arduino.cc/pages/cloud-compatible-boards).
    For third-party devices, we have three options, which are ESP8266, ESP32, and
    **LoRaWAN** devices. For other devices, we have API access, which was discussed
    in the second part of [*Chapter 2*](B19752_02.xhtml#_idTextAnchor038).'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是您可以找到与 Arduino IoT Cloud 兼容的板的链接：[https://store-usa.arduino.cc/pages/cloud-compatible-boards](https://store-usa.arduino.cc/pages/cloud-compatible-boards)。对于第三方设备，我们有三种选择，分别是
    ESP8266、ESP32 和 **LoRaWAN** 设备。对于其他设备，我们有 API 访问，这在第二部分的[*第 2 章*](B19752_02.xhtml#_idTextAnchor038)中已讨论。
- en: Now, you will see the **Setup Device** popup, which will start searching for
    your device. Make sure the device is properly connected to the machine.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您将看到**设置设备**弹出窗口，该窗口将开始搜索您的设备。确保设备已正确连接到机器。
- en: '![Figure 11.5 – Setup Device](img/B19752_11_05.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.5 – 设置设备](img/B19752_11_05.jpg)'
- en: Figure 11.5 – Setup Device
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.5 – 设置设备
- en: The wizard will find and list all the connected boards with their name and port
    details. Click on the **CONFIGURE** button to move forward. If the wizard didn’t
    show the device after searching, try to plug it into a different port, and click
    on the **refresh** link located at the bottom.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 向导将找到并列出所有连接的板及其名称和端口详细信息。点击**配置**按钮继续。如果向导在搜索后没有显示设备，请尝试将其插入不同的端口，并点击底部位置的**刷新**链接。
- en: In the next configuration wizard, provide the device name. Spaces and special
    characters are not allowed in the device name. Then, click on the **NEXT** button.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个配置向导中，提供设备名称。设备名称中不允许有空格和特殊字符。然后，点击**下一步**按钮。
- en: '![Figure 11.6 – The device configuration name](img/B19752_11_06.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.6 – 设备配置名称](img/B19752_11_06.jpg)'
- en: Figure 11.6 – The device configuration name
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.6 – 设备配置名称
- en: After that, the wizard will start the device configuration process. This will
    take up to five minutes, but in most cases, it only takes one minute to configure
    the device.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，向导将开始设备配置过程。这可能需要五分钟，但在大多数情况下，配置设备只需要一分钟。
- en: You will then see the **Congratulations! You are all set** message in the next
    popup. Click on the **Done** button, and the device will be attached to your Thing.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个弹出窗口中，您将看到**恭喜！您已设置完毕**的消息。点击**完成**按钮，设备将被附加到您的设备上。
- en: In this section, we associated the MKR Wi-Fi 1010 development board with our
    Thing. In the next section, we will configure the Wi-Fi network configuration
    for the MKR Wi-Fi 1010.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将 MKR Wi-Fi 1010 开发板与我们的设备关联起来。在下一节中，我们将配置 MKR Wi-Fi 1010 的 Wi-Fi 网络设置。
- en: Network configuration
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络配置
- en: After the attachment of the device with the Thing, we can see that the device
    is offline. To get it online, we need to provide the Wi-Fi details.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在设备与设备关联后，我们可以看到设备处于离线状态。要使其上线，我们需要提供 Wi-Fi 详细信息。
- en: '![Figure 11.7 – Network configuration](img/B19752_11_07.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.7 – 网络配置](img/B19752_11_07.jpg)'
- en: Figure 11.7 – Network configuration
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.7 – 网络配置
- en: On the Thing page under the **Network** tab, click on the **CONFIGURE** button.
    You will see the **Configure network** pop-up box with two fields – **Wi-Fi Name**
    and **Password**. Type in the Wi-Fi SSID and password, and click on the **SAVE**
    button.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **网络** 选项卡下的设备页面上，点击 **配置** 按钮。你会看到一个带有两个字段的 **配置网络** 弹出框 - **Wi-Fi 名称** 和
    **密码**。输入 Wi-Fi SSID 和密码，然后点击 **保存** 按钮。
- en: We are done with the device and network configuration; only the coding part
    is left. In the next section, we will look at the code for the device.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了设备和网络配置；只剩下编码部分。在下一节中，我们将查看设备的代码。
- en: Coding
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编码
- en: The code for this chapter is available in the book’s official GitHub repository.
    Download the `Cloud_Scheduler_may22a` code from the repository, and import it
    to your **Arduino** **Web Editor**.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码可在书的官方 GitHub 仓库中找到。从仓库中下载 `Cloud_Scheduler_may22a` 代码，并将其导入到你的 **Arduino**
    **Web 编辑器** 中。
- en: 'You can download the code and put it into your Thing by navigating to the `delay()`
    method, as it will block the `ArduinoCloud.update()` method:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过导航到 `delay()` 方法来下载代码并将其放入你的设备中，因为它将阻塞 `ArduinoCloud.update()` 方法：
- en: '[PRE0]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here, we have very simple code. Firstly, we will define the pins’ `LED1`, `LED2`,
    and `LED3` constants, which will be initialized in the `setup()` method as output,
    using the `pinMode()` method:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们有一个非常简单的代码。首先，我们将定义 `LED1`、`LED2` 和 `LED3` 引脚常量，这些常量将在 `setup()` 方法中使用
    `pinMode()` 方法初始化为输出：
- en: '[PRE1]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then, we have all the code regarding Schedulers in the `loop()` method, which
    will perform an operation when a scheduler/timer is in an active state. In the
    following code, we have a separate `if-else` statement for each `cloudScheduler`
    cloud variable; here, we check whether `cloudScheduler` is active and then turn
    on the LED; otherwise, we turn off the LED. We have `cloudScheduler1`, `cloudScheduler2`,
    and `cloudScheduler3`, plus three `if-else` statements to check their values:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们在 `loop()` 方法中有了关于调度器的所有代码，当调度器/计时器处于活动状态时，它将执行一个操作。在下面的代码中，我们为每个 `cloudScheduler`
    云变量有一个单独的 `if-else` 语句；在这里，我们检查 `cloudScheduler` 是否处于活动状态，然后打开 LED；否则，关闭 LED。我们有
    `cloudScheduler1`、`cloudScheduler2` 和 `cloudScheduler3`，以及三个 `if-else` 语句来检查它们的值：
- en: '[PRE2]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The Scheduler widget is very complex in configuration with lots of options,
    but its code is very simple and straightforward. You just need to verify whether
    the Scheduler state is `true` or `false`, and if it’s `true`, then proceed with
    the task; otherwise, stop the task. So, in the `loop()` method, we have three
    `if-else` statements, which check different cloud Schedulers’/timers’ states.
    If a specific Scheduler is active, then a specific LED will be turned on; otherwise,
    it will be turned off.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 调度器小部件在配置上非常复杂，有很多选项，但它的代码非常简单直接。你只需要验证调度器状态是 `true` 还是 `false`，如果是 `true`，则继续执行任务；否则，停止任务。因此，在
    `loop()` 方法中，我们有三个 `if-else` 语句，它们检查不同的云调度器/计时器的状态。如果特定的调度器处于活动状态，则特定的 LED 将打开；否则，它将关闭。
- en: 'I attached the LED in *Pin #8* to `cloudScheduler1`, the LED in *Pin #7* to
    `cloudScheduler2`, and the LED in *Pin #6* to `cloudScheduler3`. Now, set the
    first widget’s time to 5 seconds for every minute, the second widget to 10 seconds
    for every minute, and 15 seconds for every minute for the third widget. All the
    LEDs will turn on at the same time, but the first LED will be on for 5 seconds,
    the second LED will be on for 10 seconds, and the third will turn off after 15
    seconds. In this example project, we have used three different Schedulers to demonstrate
    how we can use multiple Schedulers/timers to automate our tasks on a single development
    board.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '我将 LED 连接到 *Pin #8* 的 `cloudScheduler1`，将 LED 连接到 *Pin #7* 的 `cloudScheduler2`，将
    LED 连接到 *Pin #6* 的 `cloudScheduler3`。现在，将第一个小部件的时间设置为每分钟 5 秒，第二个小部件为每分钟 10 秒，第三个小部件为每分钟
    15 秒。所有 LED 将同时打开，但第一个 LED 将打开 5 秒，第二个 LED 将打开 10 秒，第三个将在 15 秒后关闭。在这个示例项目中，我们使用了三个不同的调度器来演示我们如何使用多个调度器/计时器来自动化单个开发板上的任务。'
- en: Important note
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: If you used different *naming* in the variable declaration, then update the
    code according to your naming scheme. However, it’s better at first if you follow
    all the steps according to the book and later change the cloud variable names
    and modify your code, respectively.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用了不同的 *命名* 在变量声明中，那么根据你的命名方案更新代码。然而，首先最好按照书中的所有步骤进行，然后再分别更改云变量名称并修改你的代码。
- en: Also, don’t put the code at the end of the `loop()` method, as it will create
    a delay with pulse sensor readings.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，不要将代码放在 `loop()` 方法的末尾，因为它会在脉冲传感器读取时创建延迟。
- en: In this section, we discussed code and how it works with the Arduino IoT Cloud
    Scheduler to turn the LEDs on and off. In the following section, we will set up
    a dashboard, where we will place the Scheduler widget and attach it to our cloud
    variables.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论了代码以及它是如何与Arduino IoT Cloud Scheduler一起工作来打开和关闭LED的。在下一节中，我们将设置仪表板，我们将放置调度器小部件并将其连接到我们的云变量。
- en: Dashboard creation and a deep dive into the Scheduler widget
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 仪表板创建和深入探讨调度器小部件
- en: 'After uploading the code to the device, it’s time to set up a dashboard for
    web and mobile to insert the multiple Scheduler widgets that will be linked to
    the Scheduler variables, for further controls and operations. The following figure
    shows the visualization Scheduler with different timer options:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 将代码上传到设备后，是时候为网页和移动设备设置仪表板，插入将链接到调度器变量的多个调度器小部件，以便进行进一步的控制和操作。以下图显示了具有不同计时器选项的可视化调度器：
- en: '![Figure 11.8 – The Thing dashboard](img/B19752_11_08.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![图11.8 – 事物仪表板](img/B19752_11_08.jpg)'
- en: Figure 11.8 – The Thing dashboard
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.8 – 事物仪表板
- en: We have three Scheduler variables. To visualize all of them, three Scheduler
    widgets will be linked to each cloud variable, respectively. The purpose of the
    three widgets and variables is to demonstrate how we can set different types of
    timers. The first widget demonstrates how to use a timer that will be executed
    every minute for 30 seconds, the second widget demonstrates how to use a timer
    that will be activated every hour for five minutes, and the third widget demonstrates
    that we can set the timer for a long period, such as specific days at a specific
    time. Here, I have set it to be activated on Monday, Wednesday, and Friday for
    five minutes.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有三个调度器变量。为了可视化所有这些变量，将分别将三个调度器小部件链接到每个云变量。这三个小部件和变量的目的是展示我们如何设置不同类型的计时器。第一个小部件演示了如何使用每分钟执行30秒的计时器，第二个小部件演示了如何使用每小时激活五分钟的计时器，第三个小部件演示了我们可以设置长时间计时器，例如在特定时间特定日期。在这里，我将其设置为在星期一、星期三和星期五激活五分钟。
- en: We just set the different widgets with different timer settings. One of the
    example settings of the Scheduler widget is shown in *Figure 11**.9*, and we will
    explore in depth how to set these settings. This control widget has multiple options
    for configuration, so I think it’s necessary to discuss it in detail for proper
    guidance.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只是设置了不同计时器设置的多个小部件。调度器小部件的一个示例设置如*图11.9*所示，我们将深入探讨如何设置这些设置。这个控制小部件有多个配置选项，因此我认为有必要详细讨论它，以便提供适当的指导。
- en: '![Figure 11.9 – The Scheduler widget options](img/B19752_11_09.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![图11.9 – 调度器小部件选项](img/B19752_11_09.jpg)'
- en: Figure 11.9 – The Scheduler widget options
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.9 – 调度器小部件选项
- en: 'When you click on the Scheduler widget, a popup will appear with options, just
    like in the preceding figure. Here, I have divided the screenshot into four different
    numbered sections. From this popup, you can adjust your time settings from seconds
    to years and set the start and end date, or choose to execute without any date
    limitation. Let’s look at each section:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 当你点击调度器小部件时，会出现一个弹出窗口，其中包含选项，就像在前面的图中所示。在这里，我将截图分为四个不同的编号部分。从这个弹出窗口中，你可以从秒到年调整你的时间设置，设置开始和结束日期，或者选择无日期限制执行。让我们看看每个部分：
- en: Here, we have two input controls – one is for the starting date and the other
    is for the starting time, as indicated by the control headings.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，我们有两个输入控制项——一个是起始日期，另一个是起始时间，如控制标题所示。
- en: Next, we have the **Duration** setting, in which we have three drop-down boxes
    – **HOURS**, **MINUTES**, and **SECONDS**. This will define how long the timer
    will be executed on the machine. For example, if you want to perform an operation
    for 30 seconds, then just select **30** seconds and leave the other fields, or
    if you want to perform an operation for 5 minutes, then select **5** minutes and
    leave the other fields, and so on.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们有**持续时间**设置，其中包含三个下拉框——**小时**、**分钟**和**秒**。这将定义计时器在机器上执行的时间长度。例如，如果你想执行30秒的操作，只需选择**30秒**并留出其他字段，或者如果你想执行5分钟的操作，则选择**5分钟**并留出其他字段，依此类推。
- en: Then, we have the **Repeat every** setting, which is only applicable for **Week**,
    **Month**, and **Year**; there is no predefined setting for minutes and hours.
    I have selected **Week**. Under that, the days are shown (by their first letter),
    and there, you can select on which day/days you can perform an operation. There
    are different options for **Month** and **Year**, which will be discussed in a
    moment.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们有“重复间隔”设置，这仅适用于“周”、“月”和“年”；对于分钟和小时没有预设设置。我选择了“周”。在该选项下，显示了日期（通过其首字母），在那里你可以选择可以在哪一天/哪些天执行操作。对于“月”和“年”有不同的选项，稍后将会讨论。
- en: Finally, we have the **End recurrence** setting. Here, we have two options –
    **Never** and **On**. When you click on **On**, you will need to enter the date
    and time when your operation will be stopped. If you want to execute it indefinitely,
    then just select the **Never** option.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们有“结束重复”设置。在这里，我们有两个选项 – “永不”和“开启”。当你点击“开启”时，你需要输入操作停止的日期和时间。如果你想无限期执行，只需选择“永不”选项。
- en: 'For **Year** and **Month** in the **Repeat every** section, we have different
    options in the Scheduler. The following figures show all the details regarding
    both options. First, let’s look at **Month**:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在“重复间隔”部分的“年”和“月”中，调度器有不同的选项。以下图示显示了这两个选项的所有详细信息。首先，让我们看看“月”：
- en: '![Figure 11.10 – The Month option in the Scheduler](img/B19752_11_10.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.10 – 调度器中的“月”选项](img/B19752_11_10.jpg)'
- en: Figure 11.10 – The Month option in the Scheduler
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.10 – 调度器中的“月”选项
- en: 'Here is the **Year** option:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是“年”选项：
- en: '![Figure 11.11 – The Year option in the Scheduler](img/B19752_11_11.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.11 – 调度器中的“年”选项](img/B19752_11_11.jpg)'
- en: Figure 11.11 – The Year option in the Scheduler
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.11 – 调度器中的“年”选项
- en: For **Month**, we have a dropdown that allows us to select the day (such as
    **1st**), while in the case of **Year**, we have two dropdowns – one for the day
    and one for the month (such as **1st** **January**).
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 对于“月”，我们有一个下拉菜单，允许我们选择日期（例如**1st**），而在“年”的情况下，我们有两个下拉菜单 – 一个用于日期，一个用于月份（例如**1st**
    **January**）。
- en: In this section, we set up the dashboard with three different Scheduler widgets
    and assigned them Boolean-type cloud variables, which will be used in our code
    to check the Scheduler state and whether the Scheduler is active or not. In the
    following section, you have an assignment to use the Scheduler according to the
    specified requirements, giving you a proper idea of how you can use the scheduler
    functionality in your projects to enhance your product development.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们设置了包含三个不同调度器小部件的仪表板，并将布尔类型的云变量分配给了它们，这些变量将在我们的代码中用于检查调度器状态以及调度器是否处于活动状态。在下一节中，你将有一个作业任务，根据指定的要求使用调度器，这将给你一个很好的想法，了解你如何在项目中使用调度器功能来增强你的产品开发。
- en: The task at hand – an assignment
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 当前任务 – 一个作业
- en: 'Continuing from the previous project where you connected three LEDs to the
    MKR Wi-Fi 1010 and set up the Arduino IoT Cloud Scheduler, complete the following
    assignment tasks:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 从之前连接三个 LED 到 MKR Wi-Fi 1010 并设置 Arduino IoT Cloud 调度器的前一个项目中继续，完成以下作业任务：
- en: Attach three relays to control any electrical/electronic appliance, such as
    a fan, light, or heater, using the Scheduler.
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用调度器连接三个继电器来控制任何电气/电子设备，例如风扇、灯光或加热器。
- en: Implement the Scheduler to turn your home’s outside/indoor lights on/off.
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现调度器来控制你家的室外/室内灯光的开关。
- en: Attach a buzzer instead of LEDs, and create an alarm device for your room/classroom.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用蜂鸣器代替 LED，为你的房间/教室创建一个警报设备。
- en: Turn on surprise lighting with the Scheduler for a birthday or anniversary.
    Use the same light strip with multiple Schedulers to turn the light strips on/off
    for different occasions.
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用调度器打开惊喜照明，用于生日或周年纪念日。使用多个调度器相同的灯带，在不同的场合打开/关闭灯带。
- en: Control the water solenoid valve for your garden/tunnel farm using the Scheduler
    (this is optional, and if you have a smart agriculture facility).
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用调度器控制你的花园/隧道农场的电磁阀（这是可选的，如果你有智能农业设施）。
- en: In this section, we outlined an assignment that will test your skills with different
    scenarios and help you explore the usage of the Scheduler feature in different
    environments. In the following section, we will start to explore the benefits
    of OTA, the Arduino IoT Cloud's OTA features, supported development boards for
    OTA, and how to use OTA features in the Arduino IoT Cloud. And, of, course you
    will also learn about the pros and cons of the Arduino IoT Cloud OTA.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们概述了一个测试你不同场景技能的作业，帮助你探索在不同环境中使用调度器功能。在下一节中，我们将开始探索OTA的好处、Arduino IoT
    Cloud的OTA功能、支持OTA的开发板以及如何在Arduino IoT Cloud中使用OTA功能。当然，你还将了解Arduino IoT Cloud
    OTA的优缺点。
- en: Exploring OTA updates in IoT
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索物联网中的OTA更新
- en: 'OTA is a term that refers to the wireless distribution of software or firmware
    updates, or other updates to devices. This technology allows updates to be delivered
    and installed on devices without the need for physical connections or manual intervention.
    OTA is widely utilized across various industries, including telecommunications,
    automotive, consumer electronics, and IoT. Here are a few examples of OTA usage:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: OTA是指软件或固件更新或其他更新到设备的无线分发。这项技术允许更新在无需物理连接或手动干预的情况下被发送和安装到设备上。OTA在各个行业中得到广泛应用，包括电信、汽车、消费电子和物联网。以下是OTA使用的几个示例：
- en: '**Mobile devices**: OTA updates are commonly employed to distribute operating
    system updates, security patches, and feature enhancements to smartphones and
    tablets. Users receive notifications, prompting them to download and install the
    updates wirelessly.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**移动设备**：OTA更新通常用于向智能手机和平板电脑分发操作系统更新、安全补丁和功能增强。用户会收到通知，提示他们无线下载和安装更新。'
- en: '**Automotive industry**: Many modern vehicles are equipped with OTA capabilities,
    enabling manufacturers to remotely update the vehicle software, infotainment systems,
    navigation maps, and other features. OTA updates can improve vehicle performance,
    introduce new functionalities, and address security vulnerabilities.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**汽车行业**：许多现代车辆都配备了OTA功能，使制造商能够远程更新车辆软件、信息娱乐系统、导航地图和其他功能。OTA更新可以提高车辆性能、引入新功能并解决安全漏洞。'
- en: '**IoT devices**: IoT devices, such as smart home devices, wearables, and industrial
    sensors, often rely on OTA updates to deliver firmware updates, bug fixes, and
    new features. This enables manufacturers to enhance device performance, address
    vulnerabilities, and introduce new functionalities without the need for physical
    access to the devices.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**物联网设备**：物联网设备，如智能家居设备、可穿戴设备和工业传感器，通常依赖于OTA更新来提供固件更新、错误修复和新功能。这使得制造商能够增强设备性能、解决漏洞并引入新功能，而无需物理访问设备。'
- en: '**Set-top boxes and smart TVs**: OTA updates are utilized to deliver firmware
    updates and software patches to set-top boxes and smart TVs. This ensures that
    these devices remain up to date with the latest features, security enhancements,
    and bug fixes.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**机顶盒和智能电视**：OTA更新被用于向机顶盒和智能电视提供固件更新和软件补丁。这确保了这些设备能够保持最新功能、安全增强和错误修复。'
- en: OTA updates offer numerous benefits, including convenience, cost-effectiveness,
    and the ability to quickly address security vulnerabilities or software issues.
    However, ensuring the integrity and security of OTA updates is crucial to prevent
    unauthorized access or malicious activities that could compromise the devices
    or data.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: OTA更新提供了许多好处，包括便利性、成本效益以及快速解决安全漏洞或软件问题的能力。然而，确保OTA更新的完整性和安全性至关重要，以防止未经授权的访问或恶意活动，这些活动可能会损害设备或数据。
- en: In this section, we explored what OTA is and how it offers benefits in today’s
    world. In the following section, we will discuss in detail the Arduino IoT Cloud
    OTA feature, which includes compatible devices that are supported by the Arduino
    IoT Cloud for OTA, and how to use the OTA feature in the Arduino IoT Cloud to
    send firmware updates to devices.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们探讨了OTA是什么以及它如何在当今世界提供好处。在下一节中，我们将详细讨论Arduino IoT Cloud的OTA功能，包括Arduino
    IoT Cloud支持的兼容设备，以及如何在Arduino IoT Cloud中使用OTA功能向设备发送固件更新。
- en: Leveraging the Arduino IoT Cloud for OTA updates
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用Arduino IoT Cloud进行OTA更新
- en: '**Arduino IoT Cloud OTA** is a feature available in the Arduino IoT Cloud platform,
    designed to facilitate the remote monitoring and control of Arduino-based IoT
    devices. This functionality allows users to wirelessly update the firmware of
    their deployed Arduino IoT devices.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '**Arduino物联网云OTA**是Arduino物联网云平台中的一个功能，旨在简化基于Arduino的物联网设备的远程监控和控制。此功能允许用户无线更新其部署的Arduino物联网设备的固件。'
- en: The Arduino IoT Cloud pros
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Arduino物联网云的优点
- en: 'The Arduino IoT Cloud OTA feature offers the following capabilities:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino物联网云OTA功能提供了以下功能：
- en: '**Firmware updates**: Users can remotely update the firmware of their Arduino
    IoT devices as well as ESP-series devices using Arduino IoT Cloud OTA. This enables
    the deployment of bug fixes, security patches, feature enhancements, and new versions
    of code without the need for physical access to the devices.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**固件更新**：用户可以使用Arduino物联网云OTA远程更新其Arduino物联网设备以及ESP系列设备。这使部署错误修复、安全补丁、功能增强和新版本代码成为可能，而无需物理访问设备。'
- en: '**Code synchronization**: The OTA feature ensures that the code running on
    Arduino/ESP-series IoT devices remains synchronized with the latest version stored
    on the cloud. It eliminates the necessity of manually updating each device individually,
    thereby maintaining consistency across the entire fleet of IoT devices.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码同步**：OTA功能确保Arduino/ESP系列物联网设备上运行的代码与云上存储的最新版本保持同步。它消除了手动逐个更新每个设备的必要性，从而在整个物联网设备群中保持一致性。'
- en: '**OTA configuration**: In addition to firmware updates and code synchronization,
    Arduino IoT Cloud OTA enables users to remotely configure the parameters or settings
    of their Arduino/ESP-series IoT devices. This means device behavior can be modified,
    thresholds can be adjusted, and variables can be changed without the need for
    physical intervention.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OTA配置**：除了固件更新和代码同步之外，Arduino物联网云OTA还允许用户远程配置其Arduino/ESP系列物联网设备的参数或设置。这意味着可以修改设备行为，调整阈值，并更改变量，而无需物理干预。'
- en: '**Security and integrity**: Arduino IoT Cloud OTA ensures the security and
    integrity of firmware updates through authentication and encryption mechanisms.
    This safeguards against unauthorized access or tampering during the transmission
    process, enhancing the security of IoT devices and preventing potential vulnerabilities.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全和完整性**：Arduino物联网云OTA通过身份验证和加密机制确保固件更新的安全和完整性。这保护了在传输过程中的未授权访问或篡改，增强了物联网设备的安全性，并防止了潜在的安全漏洞。'
- en: By providing a convenient and secure method to remotely update firmware and
    configure devices, the Arduino IoT Cloud OTA simplifies the management and maintenance
    of Arduino-based IoT deployments. It enhances efficiency, reduces costs, and enables
    users to keep their IoT devices up to date with the latest features, bug fixes,
    and security enhancements. In the following subsection, we will discuss the cons
    of the Arduino IoT Cloud OTA feature.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 通过提供一种方便且安全的方法来远程更新固件和配置设备，Arduino物联网云OTA简化了基于Arduino的物联网部署的管理和维护。它提高了效率，降低了成本，并使用户能够通过最新的功能、错误修复和安全增强来保持其物联网设备更新。在以下小节中，我们将讨论Arduino物联网云OTA功能的缺点。
- en: Arduino IoT Cloud OTA cons
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Arduino物联网云OTA的缺点
- en: 'The Arduino IoT Cloud OTA feature is a convenient tool to remotely update the
    firmware of your Arduino devices connected to the Arduino IoT Cloud platform.
    However, as with any technology, it has its drawbacks and limitations. Here are
    some cons of the Arduino IoT Cloud OTA feature:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino物联网云OTA功能是用于远程更新连接到Arduino物联网云平台的Arduino设备的固件的便捷工具。然而，与任何技术一样，它也有其缺点和局限性。以下是Arduino物联网云OTA功能的缺点：
- en: '**Limited bandwidth**: OTA updates require data transfer over the internet,
    which can be costly or problematic in areas with limited or expensive data bandwidth.
    Large firmware updates may consume a significant amount of data.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**带宽有限**：OTA更新需要在互联网上传输数据，这可能在带宽有限或昂贵的地区造成成本或问题。大型固件更新可能会消耗大量数据。'
- en: '**Network stability**: Reliable internet connectivity is essential for OTA
    updates. If a device loses connection during an update, it can result in failed
    or corrupt firmware, potentially rendering the device unusable.'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络稳定性**：可靠的互联网连接对于OTA更新至关重要。如果在更新过程中设备断开连接，可能会导致固件更新失败或损坏，从而可能使设备无法使用。'
- en: '**Version control**: Managing different versions of firmware across multiple
    devices can become challenging. Keeping track of which devices are running which
    firmware versions and ensuring compatibility can be time-consuming.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**版本控制**：在多个设备上管理固件的不同版本可能会变得具有挑战性。跟踪哪些设备正在运行哪些固件版本并确保兼容性可能会耗费时间。'
- en: '**Compatibility issues**: OTA updates may not work seamlessly with all types
    of devices and configurations. Ensuring that your hardware supports OTA updates
    and that you have the necessary libraries and code in place can be a complex task.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**兼容性问题**：OTA更新可能无法与所有类型的设备和配置无缝工作。确保您的硬件支持OTA更新，并且您已安装必要的库和代码，这可能是一项复杂的任务。'
- en: '**Latency**: Depending on the size of the firmware update and the speed of
    the internet connection, OTA updates can introduce latency, causing devices to
    be temporarily unavailable during the update process.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**延迟**：根据固件更新的大小和互联网连接的速度，OTA更新可能会引入延迟，导致设备在更新过程中暂时不可用。'
- en: '**Dependency on the Arduino IoT Cloud**: To use the Arduino IoT Cloud OTA feature,
    you must rely on the Arduino IoT Cloud platform. If the platform experiences downtime
    or changes in its services, it can impact your ability to perform OTA updates.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**依赖Arduino IoT Cloud**：要使用Arduino IoT Cloud OTA功能，您必须依赖Arduino IoT Cloud平台。如果平台出现停机或服务变更，可能会影响您执行OTA更新的能力。'
- en: '**Limited rollback options**: In some cases, if an OTA update fails or causes
    issues, rolling back to a previous firmware version can be challenging, especially
    if you didn’t plan for rollback mechanisms in advance.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**回滚选项有限**：在某些情况下，如果OTA更新失败或引起问题，回滚到以前的固件版本可能会很困难，尤其是如果您事先没有计划回滚机制。'
- en: Despite these cons, OTA updates remain a valuable feature for many IoT projects.
    However, it’s essential to carefully assess your project’s specific requirements
    and constraints before implementing OTA updates and to address these challenges
    through proper planning and security measures.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管存在这些缺点，OTA更新仍然是许多物联网项目的宝贵功能。然而，在实施OTA更新之前，仔细评估您项目的具体需求和限制，并通过适当的规划和安全措施解决这些挑战是至关重要的。
- en: In this section, we discussed the different benefits of the Arduino IoT Cloud
    OTA feature as well as its cons. In the following section, we will take a deeper
    look into which hardware development boards are compatible with the Arduino IoT
    Cloud OTA feature, as it is currently not supported by all hardware development
    boards. Therefore, it’s necessary for you to keep this point in mind during the
    product development stage if you need an OTA feature for your product.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论了Arduino IoT Cloud OTA功能的优点以及其缺点。在下一节中，我们将深入了解哪些硬件开发板与Arduino IoT Cloud
    OTA功能兼容，因为目前并非所有硬件开发板都支持该功能。因此，如果您需要在产品开发阶段为您的产品添加OTA功能，这一点是必须牢记在心的。
- en: A list of compatible development hardware for Arduino OTA
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Arduino OTA兼容的开发硬件列表
- en: 'Not all of the official Arduino (or other) development boards are ready for
    the OTA feature, but here are the ones that are compatible and ready. Go to this
    link to check out all the information regarding OTA-compatible development boards:
    https://docs.arduino.cc/arduino-cloud/features/ota-getting-started.'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有官方Arduino（或其他）开发板都准备好支持OTA功能，但以下是一些兼容并准备就绪的。请访问此链接查看有关OTA兼容开发板的所有信息：https://docs.arduino.cc/arduino-cloud/features/ota-getting-started。
- en: 'These are the official Arduino development boards that are ready for OTA:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是准备好进行OTA的官方Arduino开发板：
- en: Arduino MKR Wi-Fi 1010
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino MKR Wi-Fi 1010
- en: Arduino Nano 33 IoT
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino Nano 33 IoT
- en: Arduino Nano RP2040 Connect
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino Nano RP2040 Connect
- en: Portenta H7
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Portenta H7
- en: Portenta Machine Control
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Portenta Machine Control
- en: Nicla Vision
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Nicla Vision
- en: Arduino Opta (PLC)
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino Opta (PLC)
- en: 'These are the ESP32-series development boards that are ready for OTA:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是准备进行OTA更新的ESP32系列开发板：
- en: ESP32-S2-DevKitC
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ESP32-S2-DevKitC
- en: NodeMCU-32-S2
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NodeMCU-32-S2
- en: WeMos LOLIN D32
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WeMos LOLIN D32
- en: ESP32-S3-DevKitC
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ESP32-S3-DevKitC
- en: ESP32-CAM
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ESP32-CAM
- en: NodeMCU-32S
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NodeMCU-32S
- en: Freenove ESP32 WROVER
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Freenove ESP32 WROVER
- en: ESP32-DevKitC-32E
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ESP32-DevKitC-32E
- en: DOIT ESP32 DevKit v1
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DOIT ESP32 DevKit v1
- en: The good thing is that Arduino provides the latest features to ESP32-series
    development boards. These boards are very popular among students/researchers and
    professional developers, due to their cost and availability all around the world.
    I used the **XIAO ESP32-C3 series** development board for various projects and
    tested the OTA service for that board. From my personal experience, the OTA service
    works faster on official Arduino development boards as compared to the ESP32 series,
    but I hope in the future that the Arduino Cloud team will optimize the OTA feature
    for the ESP32 series board for a faster and better experience.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 好事是 Arduino 为 ESP32 系列开发板提供了最新功能。这些板子在学生/研究人员和专业开发者中非常受欢迎，因为它们的成本和全球的可用性。我使用了**XIAO
    ESP32-C3 系列开发板**进行各种项目，并测试了该板的 OTA 服务。根据我的个人经验，与 ESP32 系列相比，官方 Arduino 开发板上的 OTA
    服务运行速度更快，但我希望在未来 Arduino Cloud 团队将为 ESP32 系列板优化 OTA 功能，以提供更快更好的体验。
- en: Important note
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The Arduino IoT Cloud offers the OTA feature to Wi-Fi-enabled devices. This
    means that LoRaWAN is currently not compatible with the OTA feature.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino IoT Cloud 为 Wi-Fi 兼容设备提供了 OTA 功能。这意味着 LoRaWAN 目前与 OTA 功能不兼容。
- en: In this section, we discussed the broad range of compatible boards that support
    the Arduino IoT Cloud OTA feature. In the following section, we will take a look
    at how we can use the OTA feature in the Arduino IoT Cloud to send firmware updates
    via the internet, without any device connection to the host computer.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论了支持 Arduino IoT Cloud OTA 功能的广泛兼容板。在下一节中，我们将探讨如何使用 Arduino IoT Cloud
    中的 OTA 功能通过互联网发送固件更新，而无需任何设备连接到主机电脑。
- en: Implementing the OTA update on the MKR Wi-Fi 1010
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 MKR Wi-Fi 1010 上实现 OTA 更新
- en: 'Firstly, we will explore how we can use OTA, and then we will dive deep into
    how OTA works behind the scenes. We need to navigate to a Thing that uses an OTA-supported
    development board; we will choose a Thing that is already attached to the MKR
    Wi-Fi 1010 device. Navigate to the **Sketch** tab in the Thing. The following
    figure shows the OTA feature and port:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将探讨如何使用 OTA，然后我们将深入了解 OTA 在幕后是如何工作的。我们需要导航到一个使用支持 OTA 的开发板的“物”。我们将选择一个已经连接到
    MKR Wi-Fi 1010 设备的“物”。导航到“物”中的**草图**标签。以下图显示了 OTA 功能和端口：
- en: '![Figure 11.12 – The physical port connection with the OTA update feature](img/B19752_11_12.jpg)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.12 – 带有 OTA 更新功能的物理端口连接](img/B19752_11_12.jpg)'
- en: Figure 11.12 – The physical port connection with the OTA update feature
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.12 – 带有 OTA 更新功能的物理端口连接
- en: My device is connected to my MacBook as well as to the Arduino IoT Cloud via
    Wi-Fi. That’s why you can see two options in the preceding figure for sketch uploading.
    The first one is the **Port** option, which is only available when your development
    board is directly connected to your laptop/computer, while the second option is
    **Over-the-Air**, which is available when your code is configured on your development
    board with network settings and successfully connected to the Arduino IoT Cloud
    over the internet.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我的设备连接到我的 MacBook，同时也通过 Wi-Fi 连接到 Arduino IoT Cloud。这就是为什么在前面的图中可以看到两个草图上传选项的原因。第一个是**端口**选项，仅在您的开发板直接连接到您的笔记本电脑/电脑时才可用，而第二个选项是**空中传输**，当您的代码在开发板上配置了网络设置并成功通过互联网连接到
    Arduino IoT Cloud 时才可用。
- en: Select the **Over-the-Air** option, and click on the **Sketch Uploading** (the
    green arrow icon) button; this will start uploading your updated code to the board
    via the internet without the intervention of a physical connection. However, how
    can you confirm that this works via the internet? Just unplug the development
    board from your computer and power it with any adapter, but make sure your device
    has access to a Wi-Fi router.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 选择**空中传输**选项，然后点击**草图上传**（绿色箭头图标）按钮；这将通过网络开始将您的更新代码上传到板子，而无需物理连接的干预。然而，您如何确认这是通过互联网完成的呢？只需将开发板从您的电脑上拔下，并用任何适配器供电，但请确保您的设备可以访问
    Wi-Fi 路由器。
- en: '![Figure 11.13 – The standalone Over-the-Air update option](img/B19752_11_13.jpg)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.13 – 独立的空中传输更新选项](img/B19752_11_13.jpg)'
- en: Figure 11.13 – The standalone Over-the-Air update option
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.13 – 独立的空中传输更新选项
- en: After disconnecting from the computer and turning on the device via the power
    adapter, you will see only the **Over-the-Air** update option in your **Sketch**
    tab. Just modify your code or add some extra login details, and click on **Sketch
    Uploading** (the green arrow icon), and within a short time, your code will be
    on the development board without any hassle.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在断开与计算机的连接并通过电源适配器打开设备后，您将在您的**Sketch**标签中只看到**空中更新**选项。只需修改您的代码或添加一些额外的登录详细信息，然后点击**Sketch
    Uploading**（绿色箭头图标），在短时间内，您的代码将无缝地出现在开发板上。
- en: Based on my experience, I've often thought we should have an option by which
    we can modify/update the code of remote devices, such as devices for smart agriculture,
    warehouse monitoring, and industrial monitoring, because it’s very difficult to
    travel to remote places to update/modify the code. However, the Arduino IoT Cloud
    OTA feature makes our lives easier overall. With the OTA feature, we can save
    time and cost and provide the correct updates on time to our devices without any
    delay.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我的经验，我常常认为我们应该有一个选项，通过这个选项我们可以修改/更新远程设备的代码，例如智能农业、仓库监控和工业监控设备，因为去偏远地方更新/修改代码非常困难。然而，Arduino
    IoT Cloud的OTA功能使我们的生活总体上变得更加容易。有了OTA功能，我们可以节省时间和成本，并准时为设备提供正确的更新，而不会有任何延迟。
- en: How OTA works
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OTA的工作原理
- en: 'Let’s talk about how OTA works behind the scenes. The Arduino IoT Cloud first
    compiles the code in a cloud environment, according to the selected device, and
    then stores these compiled files in `OTA_REQ` flag is `true`, it will start downloading
    the compiled files from the specified URL. After download completion, the development
    board verifies the downloaded files with a length/CRC check. After download verification,
    the board will start flashing with the latest firmware. The following figure illustrates
    the whole procedure that happens behind the scenes:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来谈谈OTA背后的工作原理。Arduino IoT Cloud首先在云环境中根据所选设备编译代码，然后将这些编译文件存储在`OTA_REQ`标志为`true`时，它将从指定的URL开始下载编译文件。下载完成后，开发板将使用长度/CRC检查验证下载的文件。下载验证后，板将开始使用最新的固件进行闪存。以下图展示了幕后发生的整个流程：
- en: '![Figure 11.14 – The Arduino IoT Cloud OTA behind the scenes](img/B19752_11_14.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![图11.14 – Arduino IoT Cloud OTA背后的工作原理](img/B19752_11_14.jpg)'
- en: Figure 11.14 – The Arduino IoT Cloud OTA behind the scenes
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.14 – Arduino IoT Cloud OTA背后的工作原理
- en: The Arduino IoT Cloud team has simplified the complexity of this process and
    provides only a single-click option for developers for OTA. The purpose of this
    diagram is to give you an overview of how things work, which will hopefully provide
    you with new ideas for your future developments.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino IoT Cloud团队简化了这一过程的复杂性，并为开发者提供了OTA的单击选项。此图的目的是为您提供一个如何工作的概览，这可能会为您的未来开发提供新的想法。
- en: In this section, we learned how to implement the Arduino IoT Cloud OTA feature
    to send firmware OTA. We also discussed how the Arduino IoT Cloud sends firmware
    updates to devices using the Amazon S3 service.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了如何实现Arduino IoT Cloud的OTA功能以发送固件OTA。我们还讨论了Arduino IoT Cloud如何使用Amazon
    S3服务向设备发送固件更新。
- en: Summary
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we explored the Scheduler and how we can use the Arduino IoT
    Cloud to automate tasks that have different patterns or random patterns of operation.
    We used simple LEDs with the MKR Wi-Fi 1010 to demonstrate multiple Scheduler/timer
    operations, which helped you to understand how to use this function in real-world
    projects, such as in smart agriculture and smart industry.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了调度器以及我们如何使用Arduino IoT Cloud来自动化具有不同模式或随机操作模式的任务。我们使用简单的LED和MKR Wi-Fi
    1010来演示多个调度器/定时器操作，这有助于您了解如何在现实世界的项目中使用此功能，例如在智能农业和智能工业中。
- en: In the second part of the chapter, we explored OTA. Firstly, we discussed the
    pros and cons of OTA and how we can save time and costs with it. Then, we used
    OTA-enabled development boards to demonstrate the use of the OTA feature, and
    finally, we explored how OTA works behind the scenes.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的第二部分，我们探讨了OTA。首先，我们讨论了OTA的优缺点以及我们如何利用它节省时间和成本。然后，我们使用OTA启用的发展板演示了OTA功能的使用，最后，我们探讨了OTA背后的工作原理。
- en: In the following chapter, we will implement a healthcare project. You will learn
    how to use a heartbeat sensor as well as the Arduino IoT Cloud webhooks feature,
    which will send data to a third-party service (**Zapier**). We will use Zapier
    to set up a *Zap*, which will receive the heartbeat readings and send an email
    notification to a designated person if the reading is over or under the threshold.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将实现一个医疗保健项目。你将学习如何使用心率传感器以及Arduino物联网云的webhooks功能，这些功能会将数据发送到第三方服务（**Zapier**）。我们将使用Zapier来设置一个*Zap*，该Zap将接收心率读数，如果读数超过或低于阈值，则会向指定人员发送电子邮件通知。
