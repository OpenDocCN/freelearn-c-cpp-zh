["```cpp\n// CREATING AND ALLOCATING MEMORY FOR AN INT VARIABLE i \n\n// Declare a pointer variable i \nint * i; \n\n// Allocates system memory\ni = ( int* )malloc( sizeof( int ) );\n\n// Assign the value 0 into variable i \n*i = 0; \n\n// Use the variable i, ensuring to \n// use dereferencing operator * during use \nprintf( \"i contains %d\", *i ); \n\n// RELEASING MEMORY OCCUPIED BY i TO THE SYSTEM \n\n// When we're done using i, we free the memory \n// allocated for it back to the system. \nfree( i ); \n\n// Set the pointer's reference to address 0 \ni = 0;\n```", "```cpp\nclass Object \n{ \n  Object() \n  { \n    puts( \"Object constructed\" ); \n  } \n  ~Object() \n  { \n    puts( \"Object destructed\" ); \n  } \n}; \n\n// Invokes constructor \nObject * object = new Object(); \n\n// Invokes deconstrctor \ndelete object; \n\n// resets object to a null pointer\nobject = 0;  \n```", "```cpp\n// generates memory leaks galore! \nfor( int i = 0; i < 100; i++ ) \n{\n  int** leak = new int[500];\n}\n```", "```cpp\nUCLASS(BlueprintType, Blueprintable, \n       meta=(ShortTooltip=\"Base class for any Action type\") )\nclass CHAPTER_03_API UAction : public UObject\n{\n  GENERATED_BODY()\n\npublic:\n  UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=Properties)\n  FString Text;\n  UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=Properties)\n  FKey ShortcutKey;\n\n};\n```", "```cpp\n// Create an object\nUAction * action = NewObject<UAction>(GetTransientPackage(), \n                                      UAction::StaticClass() \n                                      /* RF_* flags */ ); \n```", "```cpp\nUObject *o = NewObject< UObject >( ... ); \no->ConditionalBeginDestroy(); \n```", "```cpp\n// Create an object\nUAction * action = NewObject<UAction>(GetTransientPackage(), \n                    UAction::StaticClass() \n                    /* RF_* flags */ ); \n\n// Destroy an object\naction->ConditionalBeginDestroy();\n```", "```cpp\n// C++ Class NOT deriving from UObject \nclass MyClass { }; \nTSharedPtr<MyClass>sharedPtr( new MyClass() ); \n```", "```cpp\nif( ptr.IsValid() ) // Check to see if the pointer is valid \n{ \n} \n```", "```cpp\n{ \n  int x; \n  { \n    int y; \n  } // scope of y ends \n} // scope of x ends \n```", "```cpp\nTScopedPointer<AWarrior> warrior(this ); \n```", "```cpp\nUCLASS() \nclass MYPROJECT_API AWarrior : public AActor \n{ \n  //TArray< FSoundEffect > Greets; // Incorrect \n  UPROPERTY() TArray< FSoundEffect > Greets; // Correct \n}; \n```", "```cpp\nGetWorld()->ForceGarbageCollection( true ); \n```", "```cpp\nvoid f() \n{ \n  // F11 pauses here \n  UE_LOG( LogTemp, Warning, TEXT( \"Log message\" ) ); \n} \nint main() \n{ \n  f(); // Breakpoint here: F10 runs and skips to next line \n} \n```", "```cpp\nUObject *o = 0; // Initialize to an illegal null pointer \no->GetName(); // Try and get the name of the object (has \n bug) \n```"]