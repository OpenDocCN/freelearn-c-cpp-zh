- en: Arduino IDE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I have been programming computers, as a hobby or professionally, for over 37
    years. In that time, I have used many different **Integrated Development Environments**
    (**IDE**) and text editors to write code. I wrote my first Hello World program
    on a teletype that did not use either an IDE or a text editor. When I bought my
    first computer, which was a Commodore VIC-20, I used the BASIC programming language
    in programming mode to write my programs. When you were in programming mode, you
    entered the code line by line and each line went into memory as you entered it,
    there wasn't a nice editor or IDE. I wasn't until I learned to program in the
    C programming language, on an IBM PCjr, that I used my first real IDE. Now I wonder
    how I managed to write anything with one.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn:'
  prefs: []
  type: TYPE_NORMAL
- en: What an Arduino Sketch is
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What the Arduino IDE is
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What the Arduino Web Editor is
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to write your first sketch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Before we look at the Arduino IDE and Web Editor, let's look at what an Arduino
    Sketch is to help us understand why we need these tools.
  prefs: []
  type: TYPE_NORMAL
- en: Arduino Sketch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we program the Arduino, the code is put into a project. These projects
    are called **sketches** and a sketch is stored in a **Sketchbook**. A sketch is
    designed to be as simple and straightforward as possible by abstracting away a
    lot of the technical aspects of programming the Arduino by using the prebuilt
    functions.
  prefs: []
  type: TYPE_NORMAL
- en: The coding language used to program the Arduino is very similar to the C programming
    language. We will be looking at how to program the Arduino in [Chapter 6](9262ba23-0d76-417c-86d9-f4d9fba798f7.xhtml),
    *Programming the Arduino – The Basics* and [Chapter 7](97f86abb-08ca-4f9d-b4dd-c6f49c0949a1.xhtml),
    *Programming the Arduino – Beyond the Basics*. This chapter is to get you familiar
    with what sketches are and to look at the tools we can use.
  prefs: []
  type: TYPE_NORMAL
- en: Before a sketch can be uploaded to an Arduino, the Arduino IDE or Web Editor
    must go through several steps to build the application. The first step to building
    a sketch is to perform some preprocessing, which turns the sketch into a C++ (see-plus-plus)
    program, which is passed to the compiler to turn this human-readable C++ code
    into machine-readable instructions (object files). These object files are then
    linked against the standard Arduino libraries that provide the basic functionality
    for the Arduino. The results of this linking are a single hex file that can be
    uploaded to the Arduino and ran. The nice thing is the Arduino tools perform all
    of this automatically when we tell them to upload the sketch to the Arduino board.
  prefs: []
  type: TYPE_NORMAL
- en: If we were to put a definition on what an Arduino Sketch is, we would say that
    it is the project that contains the human-readable code that can be built and
    uploaded to an Arduino. Now let's look at two tools that we can use to help us
    write and build these sketches, starting with the Arduino IDE.
  prefs: []
  type: TYPE_NORMAL
- en: Arduino IDE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Arduino IDE is an integrated development environment that can be installed
    locally on Windows, macOS and Linux-based computers. The IDE can be downloaded
    from the Arduino software page at this URL: [https://www.arduino.cc/en/Main/Software](https://www.arduino.cc/en/Main/Software).
    At the time this book is written, the latest stable version of the IDE is 1.8.5.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following images show what the IDE will look like when it is first run:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/574f9b92-624b-4a7a-b941-0873ae38282b.png)'
  prefs: []
  type: TYPE_IMG
- en: We will start using the IDE at the end of this chapter where we will build our
    first sketch. We will be using it, as well as the Web Editor extensively throughout
    the rest of this book. For now, let's briefly explore the IDE so we can familiarize
    ourselves with some of its basic functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the IDE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are four areas that make up the main development window of the IDE. The
    following screenshot shows these four areas:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/458f25e0-3724-4689-a769-7c924eb0a9ca.png)'
  prefs: []
  type: TYPE_IMG
- en: The **menu bar** for the IDE functions like menu bars in other applications,
    where you click on one of the options, and a submenu appears with more options.
    We will look at some of the commonly used menu options as we go through this book.
  prefs: []
  type: TYPE_NORMAL
- en: The **command bar** provides quick access to five of the most commonly used
    commands. These commands are, from left to right, verify, upload, new, open and
    save. The verify command will attempt to compile the sketch in order to verify
    that there is nothing wrong with the code. The upload command will attempt to
    build and upload the sketch to the attached Arduino. The new command will create
    a new sketch. The open command will open a sketch. Finally, the save command will
    save the sketch.
  prefs: []
  type: TYPE_NORMAL
- en: '**Note**: In order to upload a sketch, you must have an Arduino connected to
    the computer you are working on and configured in the IDE otherwise you will receive
    an error. We will look at how to do this in the *Configuring the Arduino within
    the IDE* section.'
  prefs: []
  type: TYPE_NORMAL
- en: The **coding area** is where we write the code for the Arduino. You will notice
    that when we start a new sketch, two functions (setup and loop) are automatically
    created in the main tab. We will be working with these functions a lot in this
    book. We will be looking at what these two functions do at the end of this chapter
    when we create our first sketch.
  prefs: []
  type: TYPE_NORMAL
- en: The **status area** is used by the IDE to let us know what is happening when
    the IDE is doing something like compiling, uploading or verifying a sketch.
  prefs: []
  type: TYPE_NORMAL
- en: In order to upload a sketch to an Arduino, we need to connect the Arduino to
    the computer the IDE is running on with a USB cable and configure it in the IDE.
    Configuring the Arduino within the IDE requires us to tell it what type of Arduino
    we are using and what port it is on. Let's see how to do this.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the Arduino within the IDE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To connect an Arduino to the IDE the first thing the IDE needs to know is what
    type of Arduino is being used. To do this we click on the Tools option in the
    menu bar and select the Board option as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2a321819-ad0c-43f2-b76f-2a16522e7e99.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When the Board option is selected the IDE displays a list of compatible boards.
    This list will look similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0ce5a7c9-2143-478e-969f-441a68a16b3a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'From this list, select the board that you are using for your project. Once
    the board is selected, the next thing that the IDE needs to know is what port
    the Arduino is connected too. To select the port, click on the Tools menu option
    from the menu bar and then select the Port option as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/be507e70-4ea6-445e-a5c5-d79ad993628e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When the Port option is selected from this menu, the IDE displays a list of
    the ports it is aware of. This list should look something similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d0516a59-b8ea-4e82-a710-1ced67949fcf.png)'
  prefs: []
  type: TYPE_IMG
- en: You will probably have a different list of ports; however, it is usually obvious
    which port should be selected because it displays the name of the board attached
    to a port if it sees the board. Most of the time the IDE will automatically select
    it the correct port for you.
  prefs: []
  type: TYPE_NORMAL
- en: Once the board and port are selected, the IDE is ready to upload the compiled
    sketch to the board.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have seen how to use the Arduino IDE, let's look at how to set up
    and use the Arduino Web editor.
  prefs: []
  type: TYPE_NORMAL
- en: Arduino web editor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Arduino Web Editor enables us to create and upload sketches within most
    web browsers. Officially the Web Editor is supported with the Chrome, Firefox,
    Safari and Edge browsers with the installation of a plugin.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Web Editor is part of and can be accessed from the Arduino Create project
    here: [https://create.arduino.cc](https://create.arduino.cc)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before you can install the plugin and use the Web Editor, you will need to
    create a free Arduino account. Once we are logged in to our account, the site
    will walk you through installing the plugin. Once the plugin is installed, you
    should see a page similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6204131c-893c-4c80-8f7b-b2a9aee5af78.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's explore the Web Editor to see how to use it.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The four main areas of the Web Editor are shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fd0294c8-2639-4c97-b985-9051defa143b.png)'
  prefs: []
  type: TYPE_IMG
- en: The **menu bar** of the web editor enables us to quickly access certain items
    like examples, libraries, and the serial monitor. We will look at these items
    later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The **command bar** provides quick access to commonly used commands and gives
    us the ability to select the board we are using. The icon with the checkmark will
    verify the sketch while the icon with the arrow compiles and uploads the sketch
    to the Arduino. The icon with the three dots opens up a menu that enables us to
    save, rename, download, and delete the current sketch.
  prefs: []
  type: TYPE_NORMAL
- en: The **coding area** is where we write the code for the Arduino. As with the
    Arduino IDE, you will notice that the `setup()` and `loop()` functions were automatically
    created when a new sketch is started.
  prefs: []
  type: TYPE_NORMAL
- en: The **status area** is used by the IDE to let us know what is happening when
    the IDE is doing something like compiling, uploading or verifying a sketch. Let's
    see how to configure Arduino within the Web Editor so we can upload sketches to
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the Arduino within the IDE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to upload a sketch to an Arduino, we need to connect the Arduino to
    the computer the Web Editor is running on with a USB cable. After the Arduino
    is connected to the computer, we can select the Arduino and port within the Web
    Editor by clicking on the Select Board or Port section. If the Web Editor recognizes
    the Arduino board, you should see the Arduino board and port listed in the drop-down
    menu. The listing will look like this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b0f1b8dd-4053-42e0-a52b-95846080724e.png)'
  prefs: []
  type: TYPE_IMG
- en: If you see the Arduino, select it and you will then be able to upload compiled
    sketches it. The best way to learn the Arduino IDE or Web Editor is to use it
    and we will be using both extensively throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at some of the features of the Arduino IDE and the Web Editor starting
    with the examples that are included.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are numerous examples that are included with the Arduino IDE and the Web
    Editor. These examples are simple sketches that demonstrate the Arduino commands
    and how to use them. These examples range from the very basic sketches that demonstrate
    how to read and write digital I/O to more advance sketches that show how to use
    sensors. While these examples are designed to demonstrate the Arduino commands
    they can also be used as examples of how to write good code for the Arduino.
  prefs: []
  type: TYPE_NORMAL
- en: 'To access the examples within the Arduino IDE, click on the File option in
    the menu bar and then go to the Examples option. You will see a list of categories
    for the examples that look similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8c68930b-dc12-428e-9523-918539689f56.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you go to any of the categories, you will see a list of examples for that
    categories. If you select an example, such as the `DigitalReadSerial` example
    under the Basics category, the code for the example will load in a new window
    and the sketch will look similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a65fbcd5-7aec-4dd7-ad6f-4bf928524c82.png)'
  prefs: []
  type: TYPE_IMG
- en: 'With the Web Editor, to load an example select the Examples option from the
    menu bar. As with the Arduino IDE we will see the same list of example categories.
    This list will look similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1382b4b8-a94d-4b05-8764-e42ab648c6dd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can then select any of the categories to see the list of examples. What
    makes the examples in the Web Editor different from the examples in the Arduino
    IDE is that most of the examples in the Web Editor also include layout (Fritzing)
    and schematic diagrams showing how to create a circuit that can be used with the
    example. For example, if we select the same `DigitalReadSerial` example that we
    select in the Arduino IDE, not only will we see the code for the sketch, but we
    will also see the layout as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d9c96065-38de-4ce3-a6e2-bf18ee45f531.png)'
  prefs: []
  type: TYPE_IMG
- en: The diagrams that are included with the Web Editor are great for beginners because
    they show how to build the circuit without having to fully understand the code
    for the example.
  prefs: []
  type: TYPE_NORMAL
- en: There are numerous external libraries that can be used with the Arduino. Let's
    take a look at what libraries are.
  prefs: []
  type: TYPE_NORMAL
- en: Arduino libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Like most development platforms, the Arduino environment can be extended with
    libraries. These libraries provide extra functionality, that we can use in our
    sketches, such as providing access to specific hardware, manipulating data and
    adding extra features like a task scheduler (Arduino Cron Library). There are
    numerous libraries that are built in to the IDE and Web Editor, but we can also
    download other libraries or build our own.
  prefs: []
  type: TYPE_NORMAL
- en: 'To access the libraries in the Arduino IDE, we select the Sketch option from
    the menu bar and then select the Include Library option. This will show another
    menu that lets you load a library or manage libraries. This menu should look similar
    to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/97593999-d575-4140-a4d2-64385bfd5f87.png)'
  prefs: []
  type: TYPE_IMG
- en: If you select any of the built-in libraries, the header files will automatically
    be included in your sketch. We will learn more about header files in [Chapter
    6](9262ba23-0d76-417c-86d9-f4d9fba798f7.xhtml), *Programming the Arduino – The
    Basics* and [Chapter 7](97f86abb-08ca-4f9d-b4dd-c6f49c0949a1.xhtml), *Programming
    the Arduino – Beyond the Basics*.
  prefs: []
  type: TYPE_NORMAL
- en: Selecting the Manage Libraries option enables us to download and install other
    libraries that are not included with the standard installation of the Arduino
    IDE. When a library is downloaded and installed, it will then appear in the quick
    list of Arduino libraries and can be used just like the built-in libraries. A
    number of these libraries also install example code that can be accessed from
    the examples section of the IDE.
  prefs: []
  type: TYPE_NORMAL
- en: 'To access the libraries in the Web Editor, select the Library option from the
    menu bar and a list of available libraries with a search bar will appear to the
    right of the menu bar. The interface will look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7a4430dc-79e3-4bc3-835d-55b6e8fbed05.png)'
  prefs: []
  type: TYPE_IMG
- en: There are hundreds of libraries included within the Web Editor. This makes accessing
    the libraries easier than with the Arduino IDE because we do not need to install
    them. The Web Editor also makes it easier to share sketches that require libraries.
    When sharing a sketch that was created with the Arduino IDE, the person that receives
    the sketch needs to install the correct versions of the required libraries. This
    can occasionally become complicated and confusing. With the Web Editor, when we
    share a sketch, the Web Editor will ensure that the correct libraries are used
    when the sketch is compiled.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add a library to a sketch, search for the library from within the search
    bar and when the library appears in the list, hover the mouse over it and an INCLUDE
    button will appear as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8a63c252-3d95-4597-8bde-b81eb42d1c2d.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the INCLUDE button and the required headers will appear in the code
    and the library will be included with the sketch.
  prefs: []
  type: TYPE_NORMAL
- en: Before we create our first sketch, let's look at what the serial monitor is.
  prefs: []
  type: TYPE_NORMAL
- en: Serial monitor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The serial monitor sends and/or receive text, usually through the USB cable.
    This enables us to receive debug messages or send text from the keyboard within
    the Web Editor or the Arduino IDE. We will see how to do both of these when we
    create our first sketches at the end of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: To use the serial monitor with the Arduino IDE or with the Web Editor, you must
    first connect an Arduino to the computer and establish communication between the
    Arduino and the IDE or Editor.
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin using the serial monitor within the Arduino IDE, click on the serial
    monitor icon in the upper right-hand corner of the IDE. The following screenshot
    highlights the serial monitor icon:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8941a60b-dbf3-4221-bcf8-41fefd693f00.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The serial monitor will open up in a separate window, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e6d9ef1c-ef4b-4671-b0a1-b5fb578575a3.png)'
  prefs: []
  type: TYPE_IMG
- en: The input section enables us to send text to the Arduino. To do this, type the
    text into the input box and click the Send button or hit enter to send it. The
    text from the Arduino will appear in the output section.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use the serial monitor with the Web Editor, click on the Monitor option
    in the menu bar and the serial monitor will appear to the right of the menu bar.
    The following screenshot shows the serial monitor within the Web Editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/82014a23-b5b1-4619-8393-70d9d595dbf0.png)'
  prefs: []
  type: TYPE_IMG
- en: Just like the serial monitor in the Arduino IDE, to send text to the Arduino
    type in into the input box within the input section and then click on the SEND
    button or press enter to send it. The output from the Arduino will appear in the
    output section.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have a basic understanding of how the Arduino IDE and Web Editor
    works, let's create some sketches.
  prefs: []
  type: TYPE_NORMAL
- en: Hello World
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For our first Sketch, we will create the traditional *Hello World* application
    with the Arduino. This application will output the words "Hello World" to the
    serial monitor; however, before we create this application we need to understand
    what the `setup()` and `loop()` functions do.
  prefs: []
  type: TYPE_NORMAL
- en: The `setup()` function is run once and only once when the application first
    starts. This function enables us to initiate any variables or hardware when the
    application first starts. After the `setup()` function completes, the `loop()`
    function is then called for the first time. When the `loop()` function finishes
    it will be called again and will continue to loop until the Arduino is powered
    down.
  prefs: []
  type: TYPE_NORMAL
- en: Let's demonstrate how these functions work. We will need to start off by creating
    a new sketch in either the Arduino IDE or the Web Editor. To create a new sketch
    with the Arduino IDE we can use the New icon on the command bar or select File
    | New from the menu bar. To create a new sketch with the web IDE, click on the
    Sketchbook option from the menu bar and then click on the NEW SKETCH button.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once a new sketch is created, add the following code to the `setup()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We will then need to connect an Arduino to the computer and establish a connection
    between the Arduino and the IDE or Web Editor as described previously in this
    chapter. We can then run the sketch by using the upload button on the command
    bar for both the Arduino IDE and the Web Editor. Once the code is compiled and
    uploaded to the Arduino you should see the words `Hello World` outputted once
    to the serial monitor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s remove the `Serial.println("Hello World");` line from the `setup()`
    function and put it in the `loop()` function so our code looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We can then upload the sketch and we should see the worlds `Hello World` is
    printed to the serial monitor over and over again. The text will continue to be
    printed until we unplug the Arduino from the computer.
  prefs: []
  type: TYPE_NORMAL
- en: In the last two examples, we used the `Serial.println()` function to output
    text to the serial monitor. This function will output the text and then add a
    newline at the end. We could also use the `Serial.print()` function, which will
    output the text but will not add a newline at the end.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output to the serial monitor should look similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0650e7d7-818e-4d30-b239-7fe472843e6f.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have seen how to output text from the Arduino to the serial console,
    let's see how the Arduino can receive a text from the Serial Monitor by creating
    an echo application.
  prefs: []
  type: TYPE_NORMAL
- en: Echo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An echo application will read the text in from the Serial Monitor and will then
    output it back.
  prefs: []
  type: TYPE_NORMAL
- en: 'The text will be entered into the input field, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2aeeab9a-277a-4979-9943-38b303c32ea2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And the text will be echoed, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/40aa8939-f351-4dba-9fd1-584b657d34f1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will start off by creating a new sketch and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In this code, we start off by defining a variable named `bytesIn` of the byte
    type. Then within the `setup()` function the data rate for the serial data transmission
    is set to 9600 baud.
  prefs: []
  type: TYPE_NORMAL
- en: Within the `loop()` function we use the `Serial.available()` function to see
    if there is any data stored in the serial queue. The `Serial.available()` function
    returns the number of bytes available for reading in the serial receive buffer.
    If there are bytes available to read, the code then uses the `read()` function
    to read the bytes and then uses the `write()` function to write the bytes back
    to the Serial Monitor.
  prefs: []
  type: TYPE_NORMAL
- en: The difference between the `write()` function used in this code and the `println()`
    function used in the previous examples is the `println()` function will print
    the data as human-readable ASCII text while the `write()` function will write
    the data as bytes. In this example, if we used the `println()` function we will
    see the ASCII equivalent of the characters that were entered rather than the characters
    themselves.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we saw how to set up the Arduino IDE and the Web Editor. We
    also learned the basic functionality of both. At the end of this chapter, we saw
    how to use the Serial Monitor to send and receive data to and from the Arduino.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will begin to learn how to program the Arduino.
  prefs: []
  type: TYPE_NORMAL
