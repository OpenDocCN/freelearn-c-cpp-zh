- en: '15'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Code Review
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the preceding chapters of this book, we have systematically explored a range
    of automated solutions designed to enhance the quality of our C++ code. These
    include the adoption of clear naming conventions, the utilization of modern C++
    features, the rigorous implementation of unit and end-to-end testing, the maintenance
    of clean commits and messages, and the effective use of debugging techniques such
    as git bisect, among others. Each of these practices serves as a vital component
    in our toolkit for writing robust, maintainable software.
  prefs: []
  type: TYPE_NORMAL
- en: However, despite the substantial benefits conferred by these automated tools
    and methodologies, they are not infallible. They rely on correct and consistent
    implementation, and without diligent oversight, it’s all too easy for standards
    to slip and errors to creep into our codebase. This is where the critical role
    of code review comes into play. A human eye, capable of interpreting context and
    nuance, is essential in ensuring that all these automated practices are correctly
    and effectively applied.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will delve deep into the practice of code review, an indispensable
    part of the development process that helps safeguard against the oversights that
    no machine can yet fully detect. We’ll discuss how code reviews not only prevent
    potential bugs and enhance code quality but also foster a collaborative culture
    of learning and accountability among developers. Through a comprehensive exploration
    of effective strategies and practical guidelines, we aim to equip you with the
    knowledge to implement robust code reviews that significantly contribute to the
    success and reliability of your C++ projects.
  prefs: []
  type: TYPE_NORMAL
- en: What is a code review and why is it needed?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The practice of code review, as we understand it today, owes its origins to
    Michael Fagan, who developed the formal process of software inspection in the
    mid-1970s. At that time, software engineering was often a solitary pursuit, with
    individual developers acting as lone cowboys who were responsible for writing,
    testing, and reviewing their own code. This method led to inconsistent standards
    across projects and a higher incidence of overlooked errors, as individual biases
    and blind spots went unchecked.
  prefs: []
  type: TYPE_NORMAL
- en: Recognizing the limitations of this solitary approach, Fagan introduced a structured
    method to inspect software systematically. His process was aimed not only at finding
    errors but also at examining the overall design and implementation of software.
    This shift marked a significant evolution in software development, emphasizing
    collaboration, meticulous examination, and shared responsibility. By involving
    multiple reviewers, Fagan’s method brought diverse perspectives to the evaluation
    process, enhancing the scrutiny and overall quality of the software.
  prefs: []
  type: TYPE_NORMAL
- en: Benefits of code reviews
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Code reviews significantly enhance the overall quality of code by ensuring that
    the software’s design is consistent with the project’s architectural standards
    and the best practices of C++. These reviews are crucial for enforcing coding
    standards and conventions, thereby fostering a codebase that is more uniform and
    easier to comprehend for both new and existing team members. Moreover, they aid
    in maintaining high levels of understandability by facilitating discussions about
    complex sections of the code and clarifying the rationale behind specific approaches.
    For instance, consider a scenario where a developer employs unconventional loop
    structures that, although functional, are challenging to understand and maintain.
    During a code review, these issues can be brought to light, and a suggestion to
    refactor the code using standard STL algorithms might be made. This not only simplifies
    the code but also ensures alignment with modern C++ practices, enhancing readability
    and maintainability.
  prefs: []
  type: TYPE_NORMAL
- en: Peer reviews are one of the most effective ways to catch bugs early before they
    make it into production. It is always better to have another pair of eyes on the
    code to look for errors, whether they are logical mistakes or incorrect usage
    of the language. Reviewers can identify logic errors, off-by-one errors, memory
    leaks, and other common C++ pitfalls that might not be immediately apparent to
    the original author. Moreover, conducting a thorough review of test cases in unit
    tests during the code review process is equally vital. This practice ensures that
    the tests cover sufficient scenarios and catch potential bugs at an early stage,
    thereby enhancing the reliability and robustness of the software. For example,
    a developer might forget to free the memory allocated during a function, potentially
    causing a memory leak. A peer reviewing this code might spot this oversight and
    suggest the use of smart pointers to automatically manage the memory lifecycle,
    effectively preventing such issues before the software progresses further in the
    development cycle.
  prefs: []
  type: TYPE_NORMAL
- en: Reviews are invaluable as an educational tool, benefiting both the authors and
    the reviewers by disseminating domain knowledge and enhancing familiarity with
    the codebase throughout the team. This aspect of knowledge transfer is crucial
    in ensuring that all team members are aligned and capable of contributing effectively.
    For instance, a junior developer might initially use raw pointers to manage resources,
    which is a common practice yet prone to errors such as memory leaks and pointer-related
    bugs. During a code review, a more experienced developer can guide the junior
    by introducing them to smart pointers. By explaining the advantages of smart pointers,
    such as automatic memory management and improved safety, the senior developer
    not only helps correct immediate issues but also aids in the junior developer’s
    growth and understanding of modern C++ practices. Additionally, code reviews offer
    a unique opportunity for reviewers to deepen their understanding of specific features
    within the project. As they evaluate the work of their peers, reviewers gain insights
    into new functionalities and complex areas of the application. This enhanced understanding
    equips them with the knowledge necessary to effectively address future bugs or
    implement enhancements in those specific areas. Essentially, through the process
    of reviewing others’ code, reviewers not only contribute to the immediate improvement
    of the project but also prepare themselves to maintain and expand on the project’s
    capabilities in the future.
  prefs: []
  type: TYPE_NORMAL
- en: Mutual responsibility is a key benefit of conducting regular code reviews within
    a team. As team members consistently examine each other’s work, they cultivate
    a strong sense of shared responsibility and accountability. This collective oversight
    encourages every member to maintain high standards and thoroughness in their coding
    efforts. For example, the awareness that their peers will scrutinize their code
    motivates developers to initially write cleaner and more efficient code. This
    proactive approach to coding quality reduces the likelihood of future extensive
    rewrites, streamlining the development process and enhancing overall productivity.
  prefs: []
  type: TYPE_NORMAL
- en: Code reviews frequently catalyze discussions that yield more efficient, elegant,
    or simpler solutions than those initially implemented. This aspect of code reviews
    is particularly valuable as it taps into the collective expertise and experience
    of the team to enhance the overall software design. For instance, consider a developer
    who implements a function to sort a vector inefficiently. During the code review,
    another team member might notice the inefficiency and suggest a more effective
    sorting algorithm or recommend leveraging existing utilities from the standard
    library. Such suggestions not only improve performance but also simplify the code,
    reducing complexity and potential for errors, thus making the software more robust
    and maintainable.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing for code reviews
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before delving into the collaborative process of code reviews, teams must prepare
    adequately to ensure that these reviews are as effective and efficient as possible.
    This preparation not only sets the stage for a smoother review process but also
    minimizes the time spent on avoidable issues, allowing teams to focus on more
    substantive and impactful discussions.
  prefs: []
  type: TYPE_NORMAL
- en: Clear guidelines
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The foundation of an effective code review process is the establishment and
    documentation of clear, specific coding guidelines tailored to C++. These guidelines
    should cover various aspects of coding, including style, practices, and the use
    of language-specific features. By setting these standards, teams create a common
    language that reduces ambiguity and ensures consistency across the codebase.
  prefs: []
  type: TYPE_NORMAL
- en: Incorporating as much automation as possible into these guidelines can significantly
    streamline the review process. Tools such as formatters ensure a consistent coding
    style, while static analysis tools can automatically detect potential errors or
    code smells before human reviewers ever look at the code. Additionally, ensuring
    that all code submissions are accompanied by passing unit tests and, where applicable,
    end-to-end tests can prevent many common software defects from ever reaching the
    review stage. This level of automation not only saves time for reviewers but also
    reduces the potential for disputes over subjective preferences in coding style
    or minor oversights.
  prefs: []
  type: TYPE_NORMAL
- en: Self-review
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another crucial aspect of preparing for code reviews is the practice of self-review.
    Before submitting their code for peer review, developers should thoroughly examine
    their own work. This is where tools such as linters and static analysis come into
    play, helping to catch common issues that can be easily overlooked.
  prefs: []
  type: TYPE_NORMAL
- en: 'Self-review encourages developers to take responsibility for their code’s initial
    quality, reducing the burden on peer reviewers and fostering a culture of accountability.
    It also allows developers to reflect on their work and consider potential improvements
    before involving others, which can lead to higher-quality submissions and more
    productive review sessions. A developer should methodically evaluate their work
    by asking the following questions before submitting their code for peer review.
    This reflective practice helps to refine the code, align it more closely with
    project goals, and prepare the developer for any subsequent discussions during
    the code review process:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Did I need to write code? (Is my change rational?)** Before adding new code,
    consider whether the change is necessary. Evaluate whether the functionality is
    essential and justify the addition, keeping in mind the potential for increasing
    complexity in the codebase.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**What could I do to avoid writing code? (Is there a third-party library or
    tool that I can utilize?)** Always look for opportunities to leverage existing
    solutions. Using well-tested third-party libraries or tools can often achieve
    the desired functionality without adding new code, thereby reducing potential
    bugs and maintenance overhead.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Is my code readable?** Assess the clarity of your code. Good code should
    be self-explanatory to other engineers who might not be familiar with it. Use
    meaningful variable names, maintain a clean structure, and include comments where
    necessary to explain complex logic.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Do other engineers need to understand the logic of my code?** Consider whether
    your code can be understood independently by other developers. It is crucial that
    others can follow the logic without needing extensive explanations, which facilitates
    easier maintenance and integration.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Does my code look similar to the rest of the codebase?** Ensure that your
    code adheres to the established coding styles and patterns in the project. Consistency
    across the codebase helps maintain uniformity, making the software easier to read
    and less prone to errors during integration.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Is my code efficient?** Evaluate the efficiency of your code. It’s important
    to consider resource usage, such as CPU time and memory, especially in performance-critical
    applications. Review your algorithms and data structures to ensure they are optimal
    for the task.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Do my tests cover edge cases?** Confirm that your tests are comprehensive,
    particularly checking that they cover edge cases. Robust tests are crucial for
    ensuring the resilience and reliability of your code under unusual or unexpected
    conditions.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By answering these questions during the self-review process, developers not
    only enhance the quality of the code they write but also streamline the peer review
    process. This thoughtful approach minimizes the likelihood of significant revisions
    during peer reviews and increases the overall effectiveness of the code review
    cycle. This preparation can lead to more informed and constructive discussions
    during code reviews, as developers are already aware of and have addressed many
    potential concerns.
  prefs: []
  type: TYPE_NORMAL
- en: How to pass a code review
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Successfully navigating the code review process is crucial for maintaining the
    quality of the software and fostering a positive and productive team environment.
    Here, we outline essential strategies for developers aiming to ensure their code
    passes a review smoothly and effectively.
  prefs: []
  type: TYPE_NORMAL
- en: Discuss big features with reviewers and code owners before writing code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before embarking on the development of significant features, it is advisable
    to consult with code reviewers and owners. This preliminary discussion should
    focus on the proposed design, implementation approach, and how the feature fits
    into the existing codebase. Engaging in this dialogue early helps align expectations,
    reduces the likelihood of significant revisions later, and ensures that the feature
    integrates seamlessly with other parts of the project.
  prefs: []
  type: TYPE_NORMAL
- en: Go over your code before publishing it
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Perform a thorough review of your own code before submitting it for peer review.
    This self-assessment should cover the logic, style, and adherence to the project’s
    coding standards. Look for any areas of improvement or potential simplification.
    Ensuring that your submission is as refined as possible not only facilitates a
    smoother review process but also demonstrates your diligence and respect for the
    reviewers’ time.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure the code is compliant with the code convention
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Adherence to established code conventions is critical. These conventions, which
    cover everything from naming schemes to layout and procedural practices, ensure
    consistency throughout the codebase. Consistency leads to code that is easier
    to read, understand, and maintain. Before submitting for review, check that your
    code strictly follows these guidelines to avoid any unnecessary back-and-forth
    during the review process.
  prefs: []
  type: TYPE_NORMAL
- en: Code review is a conversation, not an order
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is essential to approach code review as a dialogue rather than a directive.
    Reviewers typically provide comments and suggestions that are meant to initiate
    discussion rather than act as unilateral commands. Especially for junior developers,
    it is important to understand that you are encouraged to engage in these discussions.
    If a suggestion or correction is unclear, seek clarification rather than silently
    making changes. This interaction not only aids your professional development but
    also enhances the collaborative spirit of the review process.
  prefs: []
  type: TYPE_NORMAL
- en: Remember – your code is not you
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A vital lesson I learned from my former boss, Vladi Lyga, is that “*Your code
    is not you*.” Developers often invest significant effort and pride in their code,
    and it can be challenging to receive criticism. However, it’s crucial to remember
    that feedback on your code is not a personal critique of you as a developer or
    individual. The aim is to improve the project and ensure the highest quality outcome,
    and this sometimes requires constructive criticism. Detaching their personal identity
    from their work allows developers to approach feedback more objectively and use
    it as a growth opportunity.
  prefs: []
  type: TYPE_NORMAL
- en: By preparing thoroughly, engaging in open dialogue, and embracing a constructive
    perspective towards feedback, developers can effectively navigate the code review
    process. These practices not only enhance the quality of the code but also contribute
    to a more supportive and collaborative team environment.
  prefs: []
  type: TYPE_NORMAL
- en: How to efficiently dispute during a code review
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Disagreements are a natural part of the code review process. Different perspectives
    can lead to conflicts over approaches, implementations, or interpretations of
    best practices. Handling these disputes efficiently is crucial to maintaining
    a productive review process and a healthy team environment. Here are key strategies
    to manage disagreements effectively during code reviews.
  prefs: []
  type: TYPE_NORMAL
- en: Clear justification for changes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is imperative for reviewers to not only point out areas needing improvement
    but also to clearly explain why changes are necessary. When suggesting a modification,
    a reviewer should provide a rationale that is anchored in best practices, performance
    considerations, or design principles relevant to the project. Including links
    to coding standards, articles, documentation, or other authoritative resources
    can greatly enhance the clarity and persuasiveness of the arguments. This approach
    helps the reviewee understand the reasoning behind the feedback, making it more
    likely for them to see the value of the suggested changes.
  prefs: []
  type: TYPE_NORMAL
- en: Reciprocal explanation from reviewees
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Similarly, if a reviewee disagrees with a comment or suggestion, they should
    also articulate their reasoning clearly. This explanation should detail why their
    approach or solution was chosen, supported by relevant technical justifications,
    documentation, or precedents within the project. By providing a well-reasoned
    argument, the reviewee fosters a more informed discussion, which can lead to a
    better understanding or an improved solution.
  prefs: []
  type: TYPE_NORMAL
- en: Direct communication
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When a dispute involves more than a couple of comments back and forth, it’s
    advisable to shift the conversation from written comments to a direct dialogue.
    This can be through a video call, phone call, or face-to-face meeting, depending
    on what’s feasible. Direct communication can prevent the kind of miscommunication
    and escalation often seen in text-based discussions, which can quickly become
    unproductive and contentious, much like lengthy threads seen on platforms such
    as Reddit.
  prefs: []
  type: TYPE_NORMAL
- en: Involving additional perspectives
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If a resolution cannot be reached between the reviewer and the reviewee, it
    can be beneficial to involve additional perspectives. Bringing in a third engineer,
    a product manager, a QA specialist, or even an architect can provide new insights
    and help mediate the disagreement. These parties may offer alternative solutions,
    compromise approaches, or a decision based on broader project priorities and impacts.
    Their input can be crucial in breaking deadlocks and ensuring that the decision
    is well rounded and aligns with overall project goals.
  prefs: []
  type: TYPE_NORMAL
- en: Efficient dispute resolution during code reviews is vital for keeping the review
    process constructive and focused on enhancing the quality of the codebase. By
    explaining the rationale behind feedback, encouraging direct communication, and
    involving additional perspectives when necessary, teams can resolve disagreements
    effectively and maintain a positive, collaborative environment. This approach
    not only resolves conflicts but also strengthens the team’s ability to work through
    future challenges collaboratively.
  prefs: []
  type: TYPE_NORMAL
- en: How to be a good reviewer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The role of a reviewer in the code review process is crucial not just for ensuring
    the technical quality of code but also for maintaining a constructive, respectful,
    and educational environment. The following are some key practices that define
    a good reviewer.
  prefs: []
  type: TYPE_NORMAL
- en: Initiate the conversation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Start the review process by initiating a friendly conversation with the reviewee.
    This can be a brief message acknowledging the effort they have put into the **pull
    request** (**PR**) and setting a positive tone for the upcoming review. A cordial
    start helps to build rapport with the reviewee, making the subsequent exchange
    more open and collaborative.
  prefs: []
  type: TYPE_NORMAL
- en: Maintain politeness and respect
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Always be polite and respectful in your comments. Remember that the reviewee
    has invested significant effort into their code. Critiques should be constructive,
    focusing on the code and its improvement rather than on the individual. Phrasing
    feedback in the form of questions or suggestions rather than directives can also
    help to keep the tone positive and encouraging.
  prefs: []
  type: TYPE_NORMAL
- en: Review manageable chunks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Limit the amount of code you review at one time to about 400 lines, if possible.
    Reviewing large chunks of code can lead to fatigue, which increases the likelihood
    of missing both minor and critical issues. Breaking down reviews into manageable
    parts not only enhances the effectiveness of the review process but also helps
    to maintain a high level of attention to detail.
  prefs: []
  type: TYPE_NORMAL
- en: Avoid personal bias
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'While reviewing, it’s important to distinguish between code that must be changed
    for objective reasons—such as syntax errors, logical errors, or deviations from
    project standards—and changes that reflect personal coding preferences. For example,
    let us consider the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Some engineers might prefer to rewrite this function the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: While the second version is a bit more concise, the first version is equally
    valid and adheres to the project’s coding standards. If you feel strongly about
    a personal preference that could enhance the code, clearly label it as such. Indicate
    that it is a suggestion based on personal preference and not a mandatory change.
    This clarity helps the reviewee understand which changes are essential for compliance
    with project standards and which are optional enhancements.
  prefs: []
  type: TYPE_NORMAL
- en: Focus on understandability
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the most critical questions to ask yourself as a reviewer is whether
    the code is understandable enough that you, or someone else on the team, could
    fix it in the middle of the night. This question cuts to the heart of code maintainability.
    If the answer is no, it’s important to discuss ways to improve the code’s clarity
    and simplicity. Code that is easily understood is easier to maintain and debug,
    which is crucial for long-term project health.
  prefs: []
  type: TYPE_NORMAL
- en: Being a good reviewer involves much more than just identifying flaws in code.
    It requires initiating and maintaining a supportive dialogue, respecting and acknowledging
    the efforts of your peers, managing your review workload effectively, and providing
    clear, helpful feedback that prioritizes the project’s standards over personal
    preferences. By fostering a positive and productive review environment, you contribute
    not only to the quality of the code but also to the growth and cohesion of your
    development team.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter delved into the essential practices and principles of conducting
    effective code reviews, a critical component of the software development process
    in C++. Through a series of structured sub-chapters, we have explored various
    aspects of the code review process that collectively ensure high-quality, maintainable
    code while fostering a positive team environment.
  prefs: []
  type: TYPE_NORMAL
- en: We began by discussing the *origins of code reviews*, introduced in the 1970s
    by Michael Fagan, highlighting its transformational role in moving software development
    from an isolated task to a collaborative effort that enhances code quality and
    reduces bugs.
  prefs: []
  type: TYPE_NORMAL
- en: In the *Preparing for code reviews* section, we emphasized the importance of
    clear guidelines and self-review. Developers are encouraged to use tools such
    as linters and static analyzers to refine their code before it undergoes peer
    review, ensuring adherence to coding standards and reducing the iterative cycle
    of code revisions.
  prefs: []
  type: TYPE_NORMAL
- en: The *How to pass a code review* section outlined strategies for developers to
    ensure their code is well received during reviews. This includes discussing significant
    changes before coding, understanding code reviews as a constructive dialogue,
    and remembering to detach personal identity from the code to view feedback objectively.
  prefs: []
  type: TYPE_NORMAL
- en: The *How to efficiently dispute during a code review* section addressed handling
    disagreements productively. We discussed the importance of clear justifications
    for changes, using direct communication to avoid misinterpretations, and involving
    additional perspectives when necessary to resolve conflicts and reach a consensus.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, in the *How to be a good reviewer* section, we provided guidance on
    initiating reviews with a positive interaction, reviewing code in manageable portions,
    avoiding bias from personal preferences, and assessing code for its clarity and
    ease of understanding in critical situations.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout this chapter, the underlying theme has been that code reviews are
    not just about critiquing code but about building a supportive community of developers
    who share knowledge, improve continuously, and aim for excellence in their coding
    practices. The goal is to enhance both the technical quality of the software and
    the professional development of the team members involved. By adhering to these
    best practices, teams can achieve more robust, efficient, and error-free code,
    contributing significantly to the success of their C++ projects.
  prefs: []
  type: TYPE_NORMAL
