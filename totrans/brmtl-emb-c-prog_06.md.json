["```cpp\ntypedef struct\n{\n  volatile uint32_t MODER;    /*offset: 0x00      */\n  volatile uint32_t OTYPER;   /*offset: 0x04      */\n  volatile uint32_t OSPEEDR;  /*offset: 0x08      */\n  volatile uint32_t PUPDR;    /*offset: 0x0C      */\n  volatile uint32_t IDR;      /*offset: 0x10      */\n  volatile uint32_t ODR;      /*offset: 0x14      */\n  volatile uint32_t BSRR;     /*offset: 0x18      */\n  volatile uint32_t LCKR;     /*offset: 0x1C      */\n  volatile uint32_t AFRL;     /*offset: 0x20     */\n  volatile uint32_t AFRH;     /*offset: 0x24      */\n} GPIO_TypeDef;\n```", "```cpp\ntypedef struct\n{\n  volatile uint32_t DUMMY[12];\n  volatile uint32_t AHB1ENR;       /*offset: 0x30*/\n} RCC_TypeDef;\n```", "```cpp\n#define     RCC_BASE     0x40023800\n#define     GPIOA_BASE  0x40020000\n#define     RCC         ((RCC_TypeDef*) RCC_BASE)\n#define    GPIOA         ((GPIO_TypeDef*)GPIOA_BASE)\n```", "```cpp\n// 0: Include standard integer types header for fixed-width //integer types\n#include <stdint.h>\n// 1: GPIO_TypeDef structure definition\ntypedef struct\n{\n  volatile uint32_t MODER;    /*offset: 0x00      */\n  volatile uint32_t OTYPER;   /*offset: 0x04      */\n  volatile uint32_t OSPEEDR;  /*offset: 0x08      */\n  volatile uint32_t PUPDR;    /*offset: 0x0C      */\n  volatile uint32_t IDR;      /*offset: 0x10      */\n  volatile uint32_t ODR;      /*offset: 0x14      */\n  volatile uint32_t BSRR;     /*offset: 0x18      */\n  volatile uint32_t LCKR;     /*offset: 0x1C      */\n  volatile uint32_t AFRL;     /*offset: 0x20     */\n  volatile uint32_t AFRH;     /*offset: 0x24      */\n} GPIO_TypeDef;\n// 2: RCC_TypeDef structure definition\ntypedef struct\n{\n  volatile uint32_t DUMMY[12];\n  volatile uint32_t AHB1ENR;       /*offset: 0x30*/\n} RCC_TypeDef;\n// 3: Base address definitions\n#define     RCC_BASE     0x40023800\n#define     GPIOA_BASE   0x40020000\n// 4: Peripheral pointer definitions\n#define RCC            ((RCC_TypeDef*) RCC_BASE)\n#define GPIOA        ((GPIO_TypeDef*)GPIOA_BASE)\n//5: Bit mask for enabling GPIOA (bit 0)\n#define GPIOAEN       (1U<<0)\n//6: Bit mask for GPIOA pin 5\n#define PIN5          (1U<<5)\n//7: Alias for PIN5 representing LED pin\n#define LED_PIN       PIN5\n//  8: Start of main function\nint main(void)\n{\n    //  9: Enable clock access to GPIOA\n     RCC->AHB1ENR |=  GPIOAEN;\n     GPIOA->MODER |= (1U<<10);  //  10: Set bit 10 to 1\n     GPIOA->MODER &= ~(1U<<11); //  11: Set bit 11 to 0\n    //  21: Start of infinite loop\n    while(1)\n    {\n        //  12: Set PA5(LED_PIN) high\n        GPIOA->ODR^= LED_PIN;\n        // 13: Simple delay\n                for(int i=0;i<100000;i++){}\n    }\n}\n```", "```cpp\n//1: Include the stm32f4 header file\n#include \"stm32f4xx.h\"\n//2: Bit mask for enabling GPIOA (bit 0)\n#define GPIOAEN       (1U<<0)\n//3: Bit mask for GPIOA pin 5\n#define PIN5          (1U<<5)\n//4: Alias for PIN5 representing LED pin\n#define LED_PIN       PIN5\nint main(void)\n{\n     //  5: Enable clock access to GPIOA\n     RCC->AHB1ENR |=  GPIOAEN;\n     //  6: Set PA5 to output mode\n     GPIOA->MODER |= (1U<<10);\n     GPIOA->MODER &= ~(1U<<11);\n    while(1)\n    {\n        //  7: Set PA5(LED_PIN) high\n        GPIOA->ODR^= LED_PIN;\n        // 8: Simple delay\n        for(int i=0;i<100000;i++){}\n    }\n}\n```"]