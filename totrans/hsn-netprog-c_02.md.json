["```cpp\ngit clone https://github.com/codeplea/Hands-On-Network-Programming-with-C\ncd Hands-On-Network-Programming-with-C/chap01\n```", "```cpp\ngcc win_list.c -o win_list.exe -liphlpapi -lws2_32\nwin_list\n```", "```cpp\ngcc unix_list.c -o unix_list\n./unix_list\n```", "```cpp\n/*win_init.c*/\n\n#include <stdio.h>\n#include <winsock2.h>\n#pragma comment(lib, \"ws2_32.lib\")\n\nint main() {\n    WSADATA d;\n\n    if (WSAStartup(MAKEWORD(2, 2), &d)) {\n        printf(\"Failed to initialize.\\n\");\n        return -1;\n    }\n\n    WSACleanup();\n    printf(\"Ok.\\n\");\n    return 0;\n}\n```", "```cpp\ngcc win_init.c -o win_init.exe -lws2_32\n```", "```cpp\n/*win_list.c*/\n\n#ifndef _WIN32_WINNT\n#define _WIN32_WINNT 0x0600\n#endif\n\n#include <winsock2.h>\n#include <iphlpapi.h>\n#include <ws2tcpip.h>\n#include <stdio.h>\n#include <stdlib.h>\n```", "```cpp\n/*win_list.c continued*/\n\n#pragma comment(lib, \"ws2_32.lib\")\n#pragma comment(lib, \"iphlpapi.lib\")\n```", "```cpp\n/*win_list.c continued*/\n\nint main() {\n\n    WSADATA d;\n    if (WSAStartup(MAKEWORD(2, 2), &d)) {\n        printf(\"Failed to initialize.\\n\");\n        return -1;\n    }\n```", "```cpp\n/*win_list.c continued*/\n\n    DWORD asize = 20000;\n    PIP_ADAPTER_ADDRESSES adapters;\n    do {\n        adapters = (PIP_ADAPTER_ADDRESSES)malloc(asize);\n\n        if (!adapters) {\n            printf(\"Couldn't allocate %ld bytes for adapters.\\n\", asize);\n            WSACleanup();\n            return -1;\n        }\n\n        int r = GetAdaptersAddresses(AF_UNSPEC, GAA_FLAG_INCLUDE_PREFIX, 0,\n                adapters, &asize);\n        if (r == ERROR_BUFFER_OVERFLOW) {\n            printf(\"GetAdaptersAddresses wants %ld bytes.\\n\", asize);\n            free(adapters);\n        } else if (r == ERROR_SUCCESS) {\n            break;\n        } else {\n            printf(\"Error from GetAdaptersAddresses: %d\\n\", r);\n            free(adapters);\n            WSACleanup();\n            return -1;\n        }\n    } while (!adapters);\n```", "```cpp\n/*win_list.c continued*/\n\n    PIP_ADAPTER_ADDRESSES adapter = adapters;\n    while (adapter) {\n        printf(\"\\nAdapter name: %S\\n\", adapter->FriendlyName);\n\n        PIP_ADAPTER_UNICAST_ADDRESS address = adapter->FirstUnicastAddress;\n        while (address) {\n            printf(\"\\t%s\",\n                    address->Address.lpSockaddr->sa_family == AF_INET ?\n                    \"IPv4\" : \"IPv6\");\n\n            char ap[100];\n\n            getnameinfo(address->Address.lpSockaddr,\n                    address->Address.iSockaddrLength,\n                    ap, sizeof(ap), 0, 0, NI_NUMERICHOST);\n            printf(\"\\t%s\\n\", ap);\n\n            address = address->Next;\n        }\n\n        adapter = adapter->Next;\n    }\n```", "```cpp\n/*win_list.c continued*/\n\n    free(adapters);\n    WSACleanup();\n    return 0;\n}\n```", "```cpp\ngcc win_list.c -o win_list.exe -liphlpapi -lws2_32\nwin_list\n```", "```cpp\n/*unix_list.c*/\n\n#include <sys/socket.h>\n#include <netdb.h>\n#include <ifaddrs.h>\n#include <stdio.h>\n#include <stdlib.h>\n```", "```cpp\n/*unix_list.c continued*/\n\nint main() {\n\n    struct ifaddrs *addresses;\n\n    if (getifaddrs(&addresses) == -1) {\n        printf(\"getifaddrs call failed\\n\");\n        return -1;\n    }\n```", "```cpp\n/*unix_list.c continued*/\n\n    struct ifaddrs *address = addresses;\n    while(address) {\n        int family = address->ifa_addr->sa_family;\n        if (family == AF_INET || family == AF_INET6) {\n\n            printf(\"%s\\t\", address->ifa_name);\n            printf(\"%s\\t\", family == AF_INET ? \"IPv4\" : \"IPv6\");\n\n            char ap[100];\n            const int family_size = family == AF_INET ?\n                sizeof(struct sockaddr_in) : sizeof(struct sockaddr_in6);\n            getnameinfo(address->ifa_addr,\n                    family_size, ap, sizeof(ap), 0, 0, NI_NUMERICHOST);\n            printf(\"\\t%s\\n\", ap);\n\n        }\n        address = address->ifa_next;\n    }\n```", "```cpp\n/*unix_list.c continued*/\n\n    freeifaddrs(addresses);\n    return 0;\n}\n```", "```cpp\ngcc unix_list.c -o unix_list\n./unix_list\n```"]