- en: '1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Setting Up the Environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Game development is becoming more accessible as game engines become more powerful.
    Tools and pipelines that were only available to big companies and wealthy individuals
    are now freely available to everyone with a computer. Anyone can feel the satisfaction
    of creating their own game and having others play it.
  prefs: []
  type: TYPE_NORMAL
- en: This is exactly what we are going to achieve in this book. We will go from knowing
    absolutely nothing about programming or developing games to creating our very
    first game and even a little beyond.
  prefs: []
  type: TYPE_NORMAL
- en: During the first part of this book, we will learn all about setting up Godot
    and programming. This might be a little more abstract, but I’ll try to give clear
    examples and keep you engaged with exercises and experiments you can do for yourself.
  prefs: []
  type: TYPE_NORMAL
- en: The second part of this book will be way more practical as we will dive neck-deep
    into creating our very own video game! We’ll learn how to use the Godot editor
    to create interesting game scenes and scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: In the last part of this book, we’ll take our programming skills to the next
    level and learn all about advanced topics, such as more powerful concepts, programming
    patterns, the filesystem, and much more.
  prefs: []
  type: TYPE_NORMAL
- en: But before we get there, nothing is more satisfying than starting a new project!
    It represents a blank slate with endless possibilities. By the end of this chapter,
    we’ll have created our very own blank slate and written our first lines of code.
    But first, I’d like to take some time to introduce the Godot game engine and open-source
    software in general.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Godot Engine and open-source software
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downloading the engine from the official website
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating our first project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to join the community
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As this book aims to get you from knowing nothing about programming and game
    development to an intermediate level, there are no technical requirements. So,
    instead, I’ll guide you through all (or at least most) of the steps required for
    creating games.
  prefs: []
  type: TYPE_NORMAL
- en: Example project and code
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the example project and code for this book in this book’s GitHub
    repository: [https://github.com/PacktPublishing/Learning-GDScript-by-Developing-a-Game-with-Godot-4/tree/main/chapter01](https://github.com/PacktPublishing/Learning-GDScript-by-Developing-a-Game-with-Godot-4/tree/main/chapter01).'
  prefs: []
  type: TYPE_NORMAL
- en: Godot game engine and open-source software
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’ll be using the Godot game engine, which I presume you already know exists
    as this is a book specifically about that engine. But let me give you some more
    insight into its history and what open-source means.
  prefs: []
  type: TYPE_NORMAL
- en: Some background on the engine
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Godot Engine** is a piece of open-source software that lets people from all
    experience levels and walks of life create games. The project was started in 2007
    by Juan Linietsky and Ariel Manzur as an in-house engine for several Argentinian
    game studios. In late 2014, the engine got open-sourced, giving everyone free
    access to the code. Since then, it has gained lots of traction and is currently
    one of the most used game engines on the market. Many commercial games have been
    released or are under development using the engine. Examples of released games
    are Brotato, Dome Keeper, Case of the Golden Idol, and Cassette Beasts.'
  prefs: []
  type: TYPE_NORMAL
- en: For those of you wondering, yes, the engine is named after the theatrical piece
    *Waiting for Godot*, by Samuel Beckett. This choice of name is because people
    will always be waiting for the next version or new feature, resulting in an endless
    cycle of waiting.
  prefs: []
  type: TYPE_NORMAL
- en: While on the topic of the engine’s name, let’s also get the pronunciation out
    of the way. In short, there is no standard way of pronouncing Godot. Because of
    the association with the play’s title, which is written in French, some people
    say it should be “go-do,” without emphasis on any syllable. But most English speakers
    would say “GOH-doh” and stress the first syllable. Then, there is the stream of
    people that pronounce it “go-DOT,” mainly because it sounds similar to the word
    “robot” and the engine’s logo is a blue robot. But I notice that I say Godot differently
    each time. So, to cut a long story short, pronounce it however you like. Just
    use roughly the same letters.
  prefs: []
  type: TYPE_NORMAL
- en: What is open-source software?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As mentioned earlier, Godot is open-source, meaning the engine’s source code
    is freely available. Because everyone has access, people can alter this code to
    their liking. Once they have tweaked enough parameters or developed a new feature,
    they can ask the creator of the software to include these tweaks or features in
    the original project. The creator will then review what the other person has done,
    alter it a bit if needed, and then add it to the code of the original software.
    This process creates a virtuous circle that results in a win-win situation for
    everyone:'
  prefs: []
  type: TYPE_NORMAL
- en: '*The software’s creator* can grow the code faster because everyone chips in'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*People with technical knowledge* can add the features they miss, making it
    fit their needs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*The end user* gets a much better and more stable end product'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'But not every open-source project is created equal. Each **free open-source
    software** (**FOSS**) comes with its respective license. This license dictates
    how you can or should use the software. Some of these are pretty restrictive,
    but in the case of Godot Engine, we are in luck: we can do anything without significant
    restrictions. We only have to attribute the creators on the credit page of our
    games.'
  prefs: []
  type: TYPE_NORMAL
- en: Alright – we know what Godot Engine is, how to pronounce its name (or not),
    and why FOSS is so awesome. Let’s dive right into preparing our development environment!
  prefs: []
  type: TYPE_NORMAL
- en: Getting and preparing Godot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we can do any programming, we’ll need to set up the development environment.
    That is what we will do in this section, beginning with downloading the engine
    and creating a new project.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading the engine
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Getting the engine is relatively easy and only requires a few steps:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we’ll need to download a copy of the software. We can do this at [https://godotengine.org/download](https://godotengine.org/download).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.1 – The download page of Godot Engine 4.0 for the Windows platform](img/B19358_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.1 – The download page of Godot Engine 4.0 for the Windows platform
  prefs: []
  type: TYPE_NORMAL
- en: Usually, the page will automatically direct you to the download page of the
    operating system you are using to browse the website and you can press the big
    blue button in the middle of the page to download the engine. If it doesn’t, you’ll
    need to select your computer’s platform (Windows, macOS, Linux, and so on) when
    scrolling down the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.2 – Select your computer’s platform if the download page was not
    able to detect it](img/B19358_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.2 – Select your computer’s platform if the download page was not able
    to detect it
  prefs: []
  type: TYPE_NORMAL
- en: 'The download page should also detect whether you’re using a 64- or 32-bit system.
    If it did not do this correctly, then you can find the other versions under the
    **All** **downloads** section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.3 – The All Downloads section, where you can find different versions
    of the engine](img/B19358_01_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.3 – The All Downloads section, where you can find different versions
    of the engine
  prefs: []
  type: TYPE_NORMAL
- en: What we downloaded is a ZIP file. So, unzip it to get to the actual engine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On Windows: Right-click the zip file and select **Extract All...**. Now follow
    the prompt that pops up to choose a location.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'On macOS: Double-click the zip file, the file will be unzipped into a new folder.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'On Linux: Run the following command in the terminal:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Put the extracted files somewhere on your computer where it will be safe, such
    as the desktop, applications, or any other location besides the `Downloads` folder.
    Otherwise, if you are anything like me, you might accidentally remove it in a
    clean-up spree of the `Downloads` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For this book, we will be using version 4.0.0, as it just came out. But any
    version with a 4 at the beginning should work fine. Unfortunately, this is not
    a guarantee. We’ll do our best to keep this book’s content up to date, but open-source
    software can move quickly.
  prefs: []
  type: TYPE_NORMAL
- en: The download size of Godot Engine is tiny, about 30 to 100 MB, depending on
    your platform. This small package is all we need to create awesome games. Compare
    this to Unity’s 10 GB and Unreal Engine’s whopping 34 GB! Of course, these all
    come without any assets, such as visuals or audio.
  prefs: []
  type: TYPE_NORMAL
- en: That’s it for getting the engine. You don’t need to install anything else to
    use it.
  prefs: []
  type: TYPE_NORMAL
- en: Other versions of the engine
  prefs: []
  type: TYPE_NORMAL
- en: Because Godot Engine is open-source, there are also a lot of complete game projects
    that are open-source too. If you ever want to run one of those game projects on
    your machine, make sure you use the correct version of Godot; otherwise, the game
    could crash and weird things might happen. You can find and download all official
    versions of Godot from [https://godotengine.org/download/](https://godotengine.org/download/).
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, let’s go ahead and create our first Godot Engine project, hopefully with
    many others to come in the future!
  prefs: []
  type: TYPE_NORMAL
- en: 'First, open the engine by double-clicking the file we downloaded in the *Downloading
    the engine* section. A screen like this will greet you:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.4 – Creating a new project by pressing the New button](img/B19358_01_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.4 – Creating a new project by pressing the New button
  prefs: []
  type: TYPE_NORMAL
- en: 'Choose **+ New**; a new window will pop up:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.5 – Setting up the new project](img/B19358_01_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.5 – Setting up the new project
  prefs: []
  type: TYPE_NORMAL
- en: Call the project `Hello World`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select a **Project Path** area to put the project. Create a new folder by using
    the **Create Folder** button or use an existing one but note that this folder
    should preferably be empty. Although the folder you select can contain files already,
    starting from a clean directory will keep everything we do more organized.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Compatibility** under the **Renderer** category. The compatibility
    renderer is made to make sure that our game can run on a wide variety of hardware
    and supports older graphics cards and web exports. The Forward+ renderer is used
    for cutting-edge graphics but demands a better graphics card, while the mobile
    renderer is optimized for mobile devices. For what we are doing, the compatibility
    renderer is more than capable enough and it makes sure that we can export to the
    biggest amount of platforms possible.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, press **Create &** **Edit**!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Godot will now set up the basic structure of our project within the selected
    folder and, after a few seconds, show us the editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.6 – The Godot Engine 4.0 editor](img/B19358_01_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.6 – The Godot Engine 4.0 editor
  prefs: []
  type: TYPE_NORMAL
- en: At first sight, this may look quite daunting – little windows everywhere, multiple
    controls here and there, and a giant 3D space in the middle. Don’t worry. By the
    end of this book, you’ll know the ins and outs of almost everything that lies
    before you. You’re in good hands.
  prefs: []
  type: TYPE_NORMAL
- en: Fun fact
  prefs: []
  type: TYPE_NORMAL
- en: The Godot developers used Godot Engine to create the editor itself. Try to wrap
    your brain around that! They did this to easily extend and maintain the editor.
  prefs: []
  type: TYPE_NORMAL
- en: Light mode
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Because of the limitations of printed media, dark screenshots might look grainy
    and unsharp. That is why, from this point on, we’ll switch to the light version
    of Godot. There is no difference but the appearance of the editor.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you also want to follow along in light mode, perform these optional steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to **Editor** | **Editor Settings…** at the top of the screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.7 – The Editor Settings… option in the Editor menu](img/B19358_01_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.7 – The Editor Settings… option in the Editor menu
  prefs: []
  type: TYPE_NORMAL
- en: Find the **Theme** settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the **Light** theme within the **Preset** dropdown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.8 – Selecting the Light theme preset in the Theme settings](img/B19358_01_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.8 – Selecting the Light theme preset in the Theme settings
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, the editor will look like what’s shown in *Figure 1**.9*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.9 – The Godot Engine editor with the Light theme applied](img/B19358_01_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.9 – The Godot Engine editor with the Light theme applied
  prefs: []
  type: TYPE_NORMAL
- en: With that out of the way, let’s get back to creating a game by learning how
    to create a scene.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the main scene
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s continue by setting up our first scene:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the leftmost panel of *Figure 1**.10*, which shows the **Scene** panel,
    select **2D Scene**. This button will set up the scene for a 2D game, as shown
    here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.10 – Selecting 2D Scene in the left panel](img/B19358_01_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.10 – Selecting 2D Scene in the left panel
  prefs: []
  type: TYPE_NORMAL
- en: You’ll see that there is one node in the **Scene** panel called **Node2D** and
    that the 3D space in the middle window got replaced with a 2D plane.
  prefs: []
  type: TYPE_NORMAL
- en: 'Right-click the node called `Main`. This node will be our main node to work
    with for now:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.11 – Renaming the Node2D node to Main](img/B19358_01_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.11 – Renaming the Node2D node to Main
  prefs: []
  type: TYPE_NORMAL
- en: 'Save the scene by going to **Scene** | **Save Scene** or by pressing *Ctrl*/*Cmd*
    + *S*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.12 – Saving the scene](img/B19358_01_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.12 – Saving the scene
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll be asked where we wish to save the scene. Choose the project’s root folder
    and name the file `main.tscn`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.13 – Selecting the root folder to save the scene and naming it main.tscn](img/B19358_01_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.13 – Selecting the root folder to save the scene and naming it main.tscn
  prefs: []
  type: TYPE_NORMAL
- en: That’s all for creating our first scene. What we just added is a node. These
    nodes represent everything in Godot. Images, sounds, menus, special effects –
    everything is a node. You can think of them as game objects, each having a separate
    function in the game. The player could be a node, just like enemies or coins.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, scenes are collections of nodes or collections of game objects.
    For now, you can think of scenes as levels. For a level, you need a player node,
    some enemy nodes, and a bunch of coin nodes; the collection of these is a scene.
    It’s like nodes are the paint and scenes are our canvases.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll come back to nodes and scenes throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: A brief UI overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now would be a great time to review some of the more prominent features of
    the editor’s UI. As we saw earlier, it looks something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.14 – An overview of the editor](img/B19358_01_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.14 – An overview of the editor
  prefs: []
  type: TYPE_NORMAL
- en: 'The prominent elements of the editor are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The **Scene Tree** area shows all the nodes in the current scene. For now, there
    is only one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **FileSystem** area provides access to the files within the project folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The middle window is the **currently active main editor**. For now, we can see
    the 2D editor, which will allow us to place nodes in 2D space within the scene.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Inspector** area can be found entirely to the right and shows the properties
    for the currently selected node. If you open some accordion menus, such as the
    **Transform** section, you will find multiple settings associated with the selected
    node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Nodes by themselves don’t do much. They provide us with specific functionalities,
    such as showing an image, playing a sound, and more, but they still need some
    higher logic to bind them into the actual game. That’s why we can extend their
    functionality and behavior with scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Writing our first script
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A **script** is a piece of code that adds logic to a node, such as moving an
    image or deciding when to play that sound.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll create our first script now. Right-click the `Main` node again and choose
    **Attach Script**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.15 – Attaching a script to the Main node](img/B19358_01_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.15 – Attaching a script to the Main node
  prefs: []
  type: TYPE_NORMAL
- en: 'A pop-up window will appear. Keep everything as-is. The important thing to
    note is that the selected language is **GDScript**, the programming language we’ll
    learn throughout this book. The rest is not very important for now. It even pre-filled
    the script’s name after the node’s name, which will attach this script. Press
    **Create**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.16 – Pressing Create to create the script](img/B19358_01_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.16 – Pressing Create to create the script
  prefs: []
  type: TYPE_NORMAL
- en: 'The middle panel, where the 2D plane used to be, is replaced with a new window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.17 – A fresh script](img/B19358_01_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.17 – A fresh script
  prefs: []
  type: TYPE_NORMAL
- en: This is the **Script** editor. We will spend most of our time here learning
    how to program during the first part of this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you may have noticed, the middle window is context-dependent. It can be
    a **2D**, **3D**, or **Script** editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.18 – The different main windows](img/B19358_01_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.18 – The different main windows
  prefs: []
  type: TYPE_NORMAL
- en: To switch between these different editors, use the buttons at the top of the
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: AssetLib
  prefs: []
  type: TYPE_NORMAL
- en: The last tab, **AssetLib**, is useful for getting pre-made assets from the Asset
    Library of Godot. This library can provide custom nodes, scripts, or any other
    assets for your project directly from within Godot Editor. We won’t cover the
    3D editor or AssetLib, but it is good to know they are there.
  prefs: []
  type: TYPE_NORMAL
- en: All of the assets on **AssetLib** are open-source and thus completely free to
    use! Hurray for FOSS!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have tried to change to the different editors, return to the **Script**
    editor so that we can create our first script and ensure everything is ready.
    The code within the script looks like this for the moment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Again, don’t worry about all the different commands and specific syntax here.
    We will cover everything in due time. For now, it’s enough to know that this is
    a script written in GDScript, the scripting language of Godot.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create the classic `pass # Replace with function body.` to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This line of code will show the text `"Hello, World;"` it will not use a printer
    to print out anything. We can also throw away a bunch of the code we don’t need.
    The whole script should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
