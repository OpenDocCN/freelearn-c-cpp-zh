- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A compiler is one of the most prevailing tools used by programmers. The majority
    of programmers have compilers – or some form of compilation technique – in their
    development flow. A modern compiler not only transforms high-level programming
    languages into low-level machine code, but also plays a key role in optimizing
    the speed, size, or even the memory footprint of the program it compiles. With
    these characteristics, building a production-ready compiler has always been a
    challenging task.
  prefs: []
  type: TYPE_NORMAL
- en: LLVM is a framework for compiler optimization and code generation. It provides
    building blocks that significantly reduce the efforts of developers to create
    high-quality optimizing compilers and programming language tools. One of its most
    famous products is Clang – the C-family language compiler that builds thousands
    of pieces of widely-used software including the Google Chrome browser and iOS
    apps. LLVM is also used in compilers for many different programming languages,
    such as the famous Swift programming language. It is not an exaggeration to say
    that LLVM is one of the hottest topics when it comes to creating a new programming
    language.
  prefs: []
  type: TYPE_NORMAL
- en: With hundreds of libraries and thousands of different APIs, LLVM provides a
    wide range of features, from key functionalities for optimizing a program to more
    general utilities. In this book, we provide a complete and thorough developer
    guide to two of the most important sub-systems in LLVM – Clang and the middle-end.
    We start with introductions to several components and development best practices
    that can benefit your general development experiences with LLVM. Then, we will
    show you how to develop with Clang. More specifically, we will focus on the topics
    that help you augment and customize the functionalities in Clang. In the last
    part of this book, you will learn crucial knowledge about LLVM IR development.
    This includes how to write an LLVM Pass with the latest syntax and mastering processing
    different IR constructions. We also show you several utilities that can greatly
    improve your productivity in LLVM development. Last but not least, we don't assume
    any particular LLVM version in this book – we try to keep up to date and include
    the latest features from the LLVM source tree.
  prefs: []
  type: TYPE_NORMAL
- en: This book provides a handful of code snippets and sample projects in every chapter.
    You are encouraged to download them from the GitHub repository of this book and
    play around with your own customizations.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is for people of all LLVM experience levels, with a basic understanding
    of compilers. If you are a compiler engineer who uses LLVM in your daily work,
    this book provides concise development guidelines and references. If you are an
    academic researcher, this book will help you learn useful LLVM skills and build
    your prototypes and projects in a short time. Programming language enthusiasts
    will also find this book useful when it comes to building a new programming language
    with the help of LLVM.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*Chapter 1*](B14590_01_Final_JC_ePub.xhtml#_idTextAnchor014), *Saving Resources
    When Building LLVM*, gives a brief introduction to the LLVM project, before showing
    you how to build LLVM without draining your CPU, memory resources, and disk space.
    This paves the road to shorter development cycles and smoother experiences for
    later chapters.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 2*](B14590_02_Final_JC_ePub.xhtml#_idTextAnchor029), *Exploring LLVM''s
    Build System Features*, shows you how to write CMake build scripts for both in-tree
    and out-of-tree LLVM development. You will learn crucial skills to leverage LLVM''s
    custom build system features to write more expressive and robust build scripts.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 3*](B14590_03_Final_JC_ePub.xhtml#_idTextAnchor037), *Testing with
    LLVM LIT*, shows you the way to run testing with LLVM''s LIT infrastructure. The
    chapter not only gives you a better understanding of how testing works in LLVM''s
    source tree but also enables you to integrate this intuitive, scalable testing
    infrastructure into any project.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B14590_04_Final_JC_ePub.xhtml#_idTextAnchor052), *TableGen Development*,
    shows you how to write TableGen – a special **Domain Specific Language (DSL)**
    invented by LLVM. We especially focus on using TableGen as a general tool for
    processing structural data, giving you flexible skills to use TableGen outside
    LLVM.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B14590_05_Final_JC_ePub.xhtml#_idTextAnchor067), *Exploring Clang''s
    Architecture*, marks the start of our topics on Clang. This chapter gives you
    an overview of Clang, especially its compilation flow, and presents to you the
    role of individual components in Clang''s compilation flow.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B14590_06_Final_JC_ePub.xhtml#_idTextAnchor078), *Extending the
    Preprocessor*, shows you the architecture of the preprocessor in Clang and, more
    importantly, shows you how to develop a plugin to extend its functionalities without
    modifying any code in the LLVM source tree.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B14590_07_Final_JC_ePub.xhtml#_idTextAnchor093), *Handling AST*,
    shows you how to develop with an **Abstract Syntax Tree (AST)** in Clang. The
    content includes learning important topics to work with an AST''s in-memory representation
    and a tutorial to create a plugin that inserts custom AST processing logic into
    the compilation flow.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B14590_08_Final_JC_ePub.xhtml#_idTextAnchor108), *Working with
    Compiler Flags and Toolchains*, covers the steps to add custom compiler flags
    and toolchains to Clang. Both skills are especially crucial if you want to support
    new features or new platforms in Clang.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B14590_09_Final_JC_ePub.xhtml#_idTextAnchor127), *Working with
    PassManager and AnalysisManager*, marks the start of our discussion on the LLVM
    middle-end. This chapter focuses on writing an LLVM pass – using the latest new
    PassManager syntax – and how to access program analysis data via AnalysisManager.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 10*](B14590_10_Final_JC_ePub.xhtml#_idTextAnchor141), *Processing
    LLVM IR*, is a big chapter containing a variety of core knowledge regarding LLVM
    IR, including the structure of LLVM IR''s in-memory representation and useful
    skills to work with different IR units such as functions, instructions, and loops.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 11*](B14590_11_Final_JC_ePub.xhtml#_idTextAnchor158), *Gearing Up
    with Support Utilities*, introduces some utilities that can improve your productivity
    – such as having better debugging experiences – when working with LLVM IR.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 12*](B14590_12_Final_JC_ePub.xhtml#_idTextAnchor174), *Learning LLVM
    IR Instrumentation*, shows you how instrumentation works on LLVM IR. It covers
    two primary use cases: Sanitizer and **Profile-Guided Optimization (PGO)**. For
    the former, you will learn how to create a custom sanitizer. For the latter, you
    will learn how to leverage PGO data in your LLVM Pass.'
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is designed to bring you the latest features of LLVM, so we encourage
    you to use LLVM after version 12.0, or even the development branch – that is,
    the main branch – throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: We assume that you are working on Linux or Unix systems (including macOS). Tools
    and sample commands in this book are mostly run in the command-line interface,
    but you are free to use any code editors or IDEs to write your code.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/table_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In [*Chapter 1*](B14590_01_Final_JC_ePub.xhtml#_idTextAnchor014)*,* *Saving
    Resources on Building LLVM*, we will provide details on how to build LLVM from
    source.
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are using the digital version of this book, we advise you to type
    the code yourself or access the code via the GitHub repository (link available
    in the next section). Doing so will help you avoid any potential errors related
    to the copying and pasting of code.**'
  prefs: []
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download the example code files for this book from GitHub at [https://github.com/PacktPublishing/LLVM-Techniques-Tips-and-Best-Practices-Clang-and-Middle-End-Libraries](https://github.com/PacktPublishing/LLVM-Techniques-Tips-and-Best-Practices-Clang-and-Middle-End-Libraries).
    In case there's an update to the code, it will be updated on the existing GitHub
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: We also have other code bundles from our rich catalog of books and videos available
    at [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/).
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Download the color images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We also provide a PDF file that has color images of the screenshots/diagrams
    used in this book. You can download it here: [https://static.packt-cdn.com/downloads/9781838824952_ColorImages.pdf](https://static.packt-cdn.com/downloads/9781838824952_ColorImages.pdf).'
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`Code in text`: Indicates code words in text, database table names, folder
    names, filenames, file extensions, pathnames, dummy URLs, user input, and Twitter
    handles. Here is an example: "To include Clang in the build list, please edit
    the value assigned to the `LLVM_ENABLE_PROJECTS` CMake variable."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Bold**: Indicates a new term, an important word, or words that you see onscreen.
    For example, words in menus or dialog boxes appear in the text like this. Here
    is an example: "Select **System info** from the **Administration** panel."'
  prefs: []
  type: TYPE_NORMAL
- en: Tips or important notes
  prefs: []
  type: TYPE_NORMAL
- en: Appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Get in touch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome.
  prefs: []
  type: TYPE_NORMAL
- en: '**General feedback**: If you have questions about any aspect of this book,
    mention the book title in the subject of your message and email us at [customercare@packtpub.com](mailto:customercare@packtpub.com).'
  prefs: []
  type: TYPE_NORMAL
- en: '**Errata**: Although we have taken every care to ensure the accuracy of our
    content, mistakes do happen. If you have found a mistake in this book, we would
    be grateful if you would report this to us. Please visit [www.packtpub.com/support/errata](http://www.packtpub.com/support/errata),
    selecting your book, clicking on the Errata Submission Form link, and entering
    the details.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Piracy**: If you come across any illegal copies of our works in any form
    on the Internet, we would be grateful if you would provide us with the location
    address or website name. Please contact us at [copyright@packt.com](mailto:copyright@packt.com)
    with a link to the material.'
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are interested in becoming an author**: If there is a topic that you
    have expertise in and you are interested in either writing or contributing to
    a book, please visit [authors.packtpub.com](http://authors.packtpub.com).'
  prefs: []
  type: TYPE_NORMAL
- en: Reviews
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Please leave a review. Once you have read and used this book, why not leave
    a review on the site that you purchased it from? Potential readers can then see
    and use your unbiased opinion to make purchase decisions, we at Packt can understand
    what you think about our products, and our authors can see your feedback on their
    book. Thank you!
  prefs: []
  type: TYPE_NORMAL
- en: For more information about Packt, please visit [packt.com](http://packt.com).
  prefs: []
  type: TYPE_NORMAL
