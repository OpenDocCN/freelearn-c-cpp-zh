["```cpp\n@rpc(\"any_peer\", \"unreliable_ordered\")\nfunc update_pos():\n    pass\n@rpc(\"unreliable_order\", \"any_peer\")\nfunc update_pos():\n    pass\n```", "```cpp\n# This wouldn't work\n@rpc(2, \"any_peer\", \"unreliable_ordered\")\nfunc update_pos():\n    pass\n# This would work\n@rpc(\"any_peer\", \"unreliable_ordered\", 2)\nfunc update_pos():\n    pass\n```", "```cpp\n    const PORT = 9999\n    ```", "```cpp\n    @export var database_file_path = \"res://02.sending-and-receiving-data/FakeDatabase.json\"\n    ```", "```cpp\n    var peer = ENetMultiplayerPeer.new()\n    ```", "```cpp\n    var database = {}\n    var logged_users = {}\n    ```", "```cpp\n    func _ready():\n        peer.create_server(PORT)\n    ```", "```cpp\n    func _ready():\n        peer.create_server(PORT)\n        multiplayer.multiplayer_peer = peer\n    ```", "```cpp\n    func _ready():\n        peer.create_server(PORT)\n        multiplayer.multiplayer_peer = peer\n        load_database()\n    ```", "```cpp\n    func load_database(path_to_database_file =\n        database_file_path):\n    ```", "```cpp\n    func load_database(path_to_database_file =\n        database_file_path):\n        var file = FileAccess.open(path_to_database_file,\n            FileAccess.READ)\n    ```", "```cpp\n    func load_database(path_to_database_file =\n        database_file_path):\n        var file = FileAccess.open(path_to_database_file,\n            FileAccess.READ)\n        var file_content = file.get_as_text()\n    ```", "```cpp\n    func load_database(path_to_database_file =\n        database_file_path):\n        var file = FileAccess.open(path_to_database_file,\n            FileAccess.READ)\n        var file_content = file.get_as_text()\n        database = JSON.parse_string(file_content)\n    ```", "```cpp\n    extends Control\n    const PORT = 9999\n    @export var database_file_path = \"res://\n        02.sending-and-receiving-data/FakeDatabase.json\"\n    var peer = ENetMultiplayerPeer.new()\n    var database = {}\n    var logged_users = {}\n    func _ready():\n        peer.create_server(PORT)\n        multiplayer.multiplayer_peer = peer\n        load_database()\n    func load_database(path_to_database_file =\n        database_file_path):\n        var file = FileAccess.open(path_to_database_file,\n            FileAccess.READ)\n        var file_content = file.get_as_text()\n        database = JSON.parse_string(file_content)\n    ```", "```cpp\n    @rpc\n    func add_avatar(avatar_name, texture_path):\n        pass\n    ```", "```cpp\n    @rpc\n    func clear_avatars():\n        pass\n    ```", "```cpp\n    @rpc(\"any_peer\", \"call_remote\")\n    func retrieve_avatar(user, session_token):\n        pass\n    ```", "```cpp\n    @rpc(\"any_peer\", \"call_remote\")\n    func authenticate_player(user, password):\n        pass\n    ```", "```cpp\n    @rpc\n    func authentication_failed(error_message):\n        pass\n    ```", "```cpp\n    @rpc\n    func authentication_succeed(user, session_token):\n        pass\n    ```", "```cpp\n    @rpc\n    func add_avatar(avatar_name, texture_path):\n        pass\n    @rpc\n    func clear_avatars():\n        pass\n    @rpc(\"any_peer\", \"call_remote\")\n    func retrieve_avatar(user, session_token):\n        pass\n    @rpc(\"any_peer\", \"call_remote\")\n    func authenticate_player(user, password):\n        pass\n    @rpc\n    func authentication_failed(error_message):\n        pass\n    @rpc\n    func authentication_succeed(user, session_token):\n        pass\n    ```", "```cpp\n    func authenticate_player(user, password):\n        var peer_id = multiplayer.get_remote_sender_id()\n    ```", "```cpp\n        if not user in database:\n            rpc_id(peer_id, \"authentication_failed\",\n                \"User doesn't exist\")\n    ```", "```cpp\n            elif database[user]['password'] == password:\n                var token = randi()\n    ```", "```cpp\n            logged_users[user] = token\n            rpc_id(peer_id, \"authentication_succeed\",\n                token)\n    ```", "```cpp\n    func authenticate_player(user, password):\n        var peer_id = multiplayer.get_remote_sender_id()\n        if not user in database:\n            rpc_id(peer_id, \"authentication_failed\",\n                \"User doesn't exist\")\n        elif database[user]['password'] == password:\n            var token = randi()\n            logged_users[user] = token\n            rpc_id(peer_id, \"authentication_succeed\", token)\n    ```", "```cpp\n    func send_credentials():\n        var user = user_line_edit.text\n    ```", "```cpp\n        var password = password_line_edit.text\n    ```", "```cpp\n        rpc_id(get_multiplayer_authority(),\n            \"authenticate_player\", user, password)\n    ```", "```cpp\n    func send_credentials():\n        var user = user_line_edit.text\n        var password = password_line_edit.text\n        rpc_id(get_multiplayer_authority(),\n            \"authenticate_player\", user, password)\n    ```", "```cpp\n@rpc\nfunc authentication_succeed(session_token):\n    AuthenticationCredentials.user = user_line_edit.text\n    AuthenticationCredentials.session_token = session_token\n    get_tree().change_scene_to_file(lobby_screen_scene)\n```", "```cpp\n@rpc\nfunc authentication_failed(error_message):\n    error_label.text = error_message\n```", "```cpp\n    @rpc\n    func add_avatar(avatar_name, texture_path):\n        var avatar_card = avatar_card_scene.instantiate()\n    ```", "```cpp\n        avatar_card_container.add_child(avatar_card)\n    ```", "```cpp\n        await(get_tree().process_frame)\n    ```", "```cpp\n        avatar_card.update_data(avatar_name, texture_path)\n    ```", "```cpp\n    @rpc\n    func add_avatar(avatar_name, texture_path):\n        var avatar_card = avatar_card_scene.instantiate()\n        avatar_card_container.add_child(avatar_card)\n        await(get_tree().process_frame)\n        avatar_card.update_data(avatar_name, texture_path)\n    ```", "```cpp\n@rpc\nfunc clear_avatars():\n    for child in avatar_card_container.get_children():\n        child.queue_free()\n```", "```cpp\nfunc _ready():\n    rpc_id(get_multiplayer_authority(), \"retrieve_avatar\",\n        AuthenticationCredentials.user,\n            AuthenticationCredentials.session_token)\n```", "```cpp\n    func retrieve_avatar(user, session_token):\n        if not user in logged_users:\n            return\n    ```", "```cpp\n        if session_token == logged_users[user]:\n    ```", "```cpp\n            rpc(\"clear_avatars\")\n    ```", "```cpp\n            for logged_user in logged_users:\n    ```", "```cpp\n                Var avatar_name = database[logged_user]\n                    ['name']\n                var avatar_texture_path = database\n                    [logged_user]['avatar']\n    ```", "```cpp\n               rpc(\"add_avatar\", avatar_name,\n                   avatar_texture_path)\n    ```", "```cpp\n    @rpc(\"any_peer\", \"call_remote\")\n    func retrieve_avatar(user, session_token):\n        if not user in logged_users:\n            return\n        if session_token == logged_users[user]:\n            rpc(\"clear_avatars\")\n            for logged_user in logged_users:\n                var avatar_name = database\n                    [logged_user]['name']\n                Var avatar_texture_path = database\n                    [logged_user]['avatar']\n                rpc(\"add_avatar\", avatar_name,\n                    avatar_texture_path)\n    ```"]