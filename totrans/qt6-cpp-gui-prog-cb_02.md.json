["```cpp\n    class MainWindow : public QMainWindow {\n        Q_OBJECT\n    public:\n        explicit MainWindow(QWidget *parent = 0);\n        ~MainWindow();\n    private slots:\n        void on_pushButton_clicked();\n    private:\n        Ui::MainWindow *ui;\n    };\n    ```", "```cpp\n    void MainWindow::on_pushButton_clicked()\n    {\n    }\n    ```", "```cpp\n    #include <QMessageBox>\n    ```", "```cpp\n    void MainWindow::on_pushButton_clicked() {\n        QMessageBox::information(this, «Hello», «Button has been clicked!»);\n    }\n    ```", "```cpp\n    #include <QObject>\n    #include <QMainWindow>\n    #include <QMessageBox>\n    class MyClass : public QObject {\n        Q_OBJECT\n    public:\n        explicit MyClass(QObject *parent = nullptr);\n    public slots:\n        void doSomething();\n    };\n    ```", "```cpp\n    #include \"myclass.h\"\n    MyClass::MyClass(QObject *parent) : QObject(parent) {}\n    void MyClass::doSomething() {\n        QMessageBox::information(this, «Hello», «Button has been clicked!»);\n    }\n    ```", "```cpp\n    #ifndef MAINWINDOW_H\n    #define MAINWINDOW_H\n    #include \"myclass.h\"\n    namespace Ui {\n    class MainWindow;\n    }\n    ```", "```cpp\n    signals:\n        void doNow();\n    private slots:\n        void on_pushButton_clicked();\n    ```", "```cpp\n    MainWindow::MainWindow(QWidget *parent) : QMainWindow(parent),\n    ui(new Ui::MainWindow){\n        ui->setupUi(this);\n        MyClass* myclass = new MyClass;\n        connect(this, &MainWindow::doNow, myclass, &MyClass::doSomething);\n    }\n    ```", "```cpp\n    void MainWindow::on_pushButton_clicked() {\n        emit doNow();\n    }\n    ```", "```cpp\nconnect(\n    sender, SIGNAL(valueChanged(QString)),\n    receiver, SLOT(updateValue(QString))\n);\n```", "```cpp\nconnect(\n    sender, &Sender::valueChanged,\n    receiver, &Receiver::updateValue\n);\n```", "```cpp\nconnect(\n    sender, &Sender::valueChanged, myFunction\n);\n```", "```cpp\nQT += network\n```", "```cpp\nfind_package(Qt6 REQUIRED COMPONENTS Network)\ntarget_link_libraries(mytarget PRIVATE Qt6::Network)\n```", "```cpp\n    void on_pushButton_clicked();\n    void on_pushButton_clicked(bool checked);\n    void on_pushButton_pressed();\n    void on_pushButton_released();\n    void on_pushButton_toggled(bool checked);\n    ```", "```cpp\n    void on_comboBox_activated(const QString &arg1);\n    void on_comboBox_activated(int index);\n    void on_comboBox_currentIndexChanged(const QString &arg1);\n    void on_comboBox_currentIndexChanged(int index);\n    void on_comboBox_currentTextChanged(const QString &arg1);\n    void on_comboBox_editTextChanged(const QString &arg1);\n    void on_comboBox_highlighted(const QString &arg1);\n    void on_comboBox_highlighted(int index);\n    ```", "```cpp\n    void on_lineEdit_cursorPositionChanged(int arg1, int arg2);\n    void on_lineEdit_editingFinished();\n    void on_lineEdit_returnPressed();\n    void on_lineEdit_selectionChanged();\n    void on_lineEdit_textChanged(const QString &arg1);\n    void on_lineEdit_textEdited(const QString &arg1);\n    ```", "```cpp\n    void on_spinBox_valueChanged(const QString &arg1);\n    void on_spinBox_valueChanged(int arg1);\n    ```", "```cpp\n    void on_horizontalSlider_actionTriggered(int action);\n    void on_horizontalSlider_rangeChanged(int min, int max);\n    void on_horizontalSlider_sliderMoved(int position);\n    void on_horizontalSlider_sliderPressed();\n    void on_horizontalSlider_sliderReleased();\n    void on_horizontalSlider_valueChanged(int value);\n    ```", "```cpp\n    #ifndef MAINWINDOW_H\n    #define MAINWINDOW_H\n    #include <QMainWindow>\n    #include <QDebug>\n    namespace Ui {\n    class MainWindow;\n    }\n    ```", "```cpp\n    void MainWindow::on_pushButton_clicked() {\n        qDebug() << «Push button clicked»;\n    }\n    void MainWindow::on_pushButton_clicked(bool checked) {\n        qDebug() << «Push button clicked: « << checked;\n    }\n    void MainWindow::on_pushButton_pressed() {\n        qDebug() << «Push button pressed»;\n    }\n    void MainWindow::on_pushButton_released() {\n        qDebug() << «Push button released»;\n    }\n    void MainWindow::on_pushButton_toggled(bool checked) {\n        qDebug() << «Push button toggled: « << checked;\n    }\n    ```", "```cpp\nPush button pressed\nPush button released\nPush button clicked\nPush button clicked: false\n```", "```cpp\n    void MainWindow::on_comboBox_activated(const QString &arg1) {\n        qDebug() << «Combo box activated: « << arg1;\n    }\n    void MainWindow::on_comboBox_activated(int index) {\n        qDebug() << «Combo box activated: « << index;\n    }\n    void MainWindow::on_comboBox_currentIndexChanged(const QString &arg1) {\n        qDebug() << «Combo box current index changed: « << arg1;\n    }\n    void MainWindow::on_comboBox_currentIndexChanged(int index) {\n        qDebug() << «Combo box current index changed: « << index;\n    }\n    ```", "```cpp\n    void MainWindow::on_comboBox_currentTextChanged(const QString &arg1) {\n        qDebug() << «Combo box current text changed: « << arg1;\n    }\n    void MainWindow::on_comboBox_editTextChanged(const QString\n    &arg1) {\n        qDebug() << «Combo box edit text changed: « << arg1;\n    }\n    void MainWindow::on_comboBox_highlighted(const QString &arg1) {\n        qDebug() << «Combo box highlighted: « << arg1;\n    }\n    void MainWindow::on_comboBox_highlighted(int index) {\n        qDebug() << «Combo box highlighted: « << index;\n    }\n    ```", "```cpp\n    Combo box highlighted: 0\n    Combo box highlighted: \"Option One\"\n    Combo box highlighted: 1\n    Combo box highlighted: \"Option Two\"\n    Combo box highlighted: 2\n    Combo box highlighted: \"Option Three\"\n    Combo box current index changed: 2\n    Combo box current index changed: \"Option Three\"\n    Combo box current text changed: \"Option Three\"\n    Combo box activated: 2\n    Combo box activated: \"Option Three\"\n    ```", "```cpp\n    void MainWindow::on_lineEdit_cursorPositionChanged(int arg1, int arg2) {\n        qDebug() << «Line edit cursor position changed: « << arg1 << arg2;\n    }\n    void MainWindow::on_lineEdit_editingFinished() {\n        qDebug() << «Line edit editing finished»;\n    }\n    void MainWindow::on_lineEdit_returnPressed() {\n        qDebug() << «Line edit return pressed»;\n    }\n    ```", "```cpp\n    void MainWindow::on_lineEdit_selectionChanged() {\n        qDebug() << «Line edit selection changed»;\n    }\n    void MainWindow::on_lineEdit_textChanged(const QString &arg1) {\n        qDebug() << «Line edit text changed: « << arg1;\n    }\n    void MainWindow::on_lineEdit_textEdited(const QString &arg1) {\n        qDebug() << «Line edit text edited: « << arg1;\n    }\n    ```", "```cpp\n    Line edit cursor position changed: -1 0\n    Line edit text edited: \"H\"\n    Line edit text changed: \"H\"\n    Line edit cursor position changed: 0 1\n    Line edit text edited: \"He\"\n    Line edit text changed: \"He\"\n    Line edit cursor position changed: 1 2\n    Line edit text edited: \"Hey\"\n    Line edit text changed: \"Hey\"\n    Line edit cursor position changed: 2 3\n    Line edit editing finished\n    ```", "```cpp\n    void MainWindow::on_spinBox_valueChanged(const QString &arg1){\n        qDebug() << «Spin box value changed: « << arg1;\n    }\n    void MainWindow::on_spinBox_valueChanged(int arg1) {\n        qDebug() << «Spin box value changed: « << arg1;\n    }\n    ```", "```cpp\n    Spin box value changed: \"1\"\n    Spin box value changed: 1\n    Spin box value changed: \"2\"\n    Spin box value changed: 2\n    Spin box value changed: \"3\"\n    Spin box value changed: 3\n    Spin box value changed: \"2\"\n    Spin box value changed: 2\n    Spin box value changed: \"20\"\n    Spin box value changed: 20\n    ```", "```cpp\n    void MainWindow::on_horizontalSlider_actionTriggered(int\n    action) {\n        qDebug() << «Slider action triggered» << action;\n    }\n    void MainWindow::on_horizontalSlider_rangeChanged(int min, int max) {\n        qDebug() << «Slider range changed: « << min << max;\n    }\n    void MainWindow::on_horizontalSlider_sliderMoved(int position)\n    {\n        qDebug() << «Slider moved: « << position;\n    }\n    ```", "```cpp\n    void MainWindow::on_horizontalSlider_sliderPressed() {\n        qDebug() << «Slider pressed»;\n    }\n    void MainWindow::on_horizontalSlider_sliderReleased() {\n        qDebug() << «Slider released»;\n    }\n    void MainWindow::on_horizontalSlider_valueChanged(int value) {\n        qDebug() << «Slider value changed: « << value;\n    }\n    ```", "```cpp\n    Slider pressed\n    Slider moved: 1\n    Slider action triggered 7\n    Slider value changed: 1\n    Slider moved: 2\n    Slider action triggered 7\n    Slider value changed: 2\n    Slider moved: 3\n    Slider action triggered 7\n    Slider value changed: 3\n    Slider moved: 4\n    Slider action triggered 7\n    Slider value changed: 4\n    Slider released\n    ```", "```cpp\n    #include <QNetworkAccessManager>\n    #include <QNetworkReply>\n    #include <QDebug>\n    ```", "```cpp\n    int main(int argc, char *argv[]) {\n        QCoreApplication a(argc, argv);\n        QString *html = new QString;\n        qDebug() << \"Start\";\n        QNetworkAccessManager manager;\n        QNetworkRequest req(QUrl(\"http://www.dustyfeet.com\"));\n        QNetworkReply* reply = manager.get(req);\n    ```", "```cpp\n    QObject::connect(reply, &QNetworkReply::readyRead,\n     [reply, html]() {\n             html->append(QString(reply->readAll()));\n         });\n         QObject::connect(reply, &QNetworkReply::downloadProgress, [reply](qint64 bytesReceived, qint64 bytesTotal) {\n             qDebug() << \"Progress: \" << bytesReceived << \"bytes /\" << bytesTotal << \"bytes\";\n         });\n    ```", "```cpp\n    QObject::connect(reply, &QNetworkReply::finished, [=]() {\n            printHTML(*html);\n        });\n        return a.exec();\n    }\n    ```", "```cpp\n    void printHTML(QString html) {\n        qDebug() << \"Done\";\n        qDebug() << html;\n    }\n    ```", "```cpp\n[captured variables](arguments) {\n    lambda code\n}\n```", "```cpp\n[reply, html]() {\n    html->append(QString(reply->readAll()));\n}\n```", "```cpp\nQObject::connect(reply, &QNetworkReply::downloadProgress,\n[reply](qint64 bytesReceived, qint64 bytesTotal) {\n    qDebug() << \"Progress: \" << bytesReceived << \"bytes /\" << bytesTotal << \"bytes\";\n});\n```", "```cpp\n[=]() {\n    printHTML(*html);\n}\n```", "```cpp\n    #include <QDebug>\n    #include <QResizeEvent>\n    #include <QKeyEvent>\n    #include <QMouseEvent>\n    ```", "```cpp\n    public:\n        explicit MainWindow(QWidget *parent = 0);\n        ~MainWindow();\n        void resizeEvent(QResizeEvent *event);\n        void keyPressEvent(QKeyEvent *event);\n        void keyReleaseEvent(QKeyEvent *event);\n        void mouseMoveEvent(QMouseEvent *event);\n        void mousePressEvent(QMouseEvent *event);\n    mainwindow.cpp and add the following code to the class constructor:\n\n    ```", "```cpp\n\n    ```", "```cpp\n    void MainWindow::resizeEvent(QResizeEvent *event) {\n        qDebug() << \"Old size:\" << event->oldSize() << \", New size:\" << event->size();\n    }\n    void MainWindow::keyPressEvent(QKeyEvent *event) {\n        if (event->key() == Qt::Key_Escape) {\n            this->close();\n        }\n        qDebug() << event->text() << \"has been pressed\";\n    }\n    ```", "```cpp\n    void MainWindow::keyReleaseEvent(QKeyEvent *event) {\n        qDebug() << event->text() << \"has been released\";\n    }\n    void MainWindow::mouseMoveEvent(QMouseEvent *event) {\n        qDebug() << \"Position: \" << event->pos();\n    }\n    void MainWindow::mousePressEvent(QMouseEvent *event) {\n        qDebug() << \"Mouse pressed:\" << event->button();\n    }\n    void MainWindow::mouseReleaseEvent(QMouseEvent *event) {\n        qDebug() << \"Mouse released:\" << event->button();\n    }\n    ```", "```cpp\nOld size: QSize(-1, -1) , New size: QSize(400, 300)\nOld size: QSize(400, 300) , New size: QSize(401, 300)\nOld size: QSize(401, 300) , New size: QSize(402, 300)\nPosition: QPoint(465,348)\nPosition: QPoint(438,323)\nPosition: QPoint(433,317)\n\"a\" has been pressed\n\"a\" has been released\n\"r\" has been pressed\n\"r\" has been released\n\"d\" has been pressed\n\"d\" has been released\n\"\\u001B\" has been pressed\n```"]