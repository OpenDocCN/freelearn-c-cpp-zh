- en: Chapter 4. Wi-Fi-controlled Mobile Robot
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章. Wi-Fi控制的移动机器人
- en: 'In this last chapter of the book, we are going to use the Arduino Yún in a
    completely different field: robotics. You will learn how to interface DC motors,
    as well as how to build your own mobile robot with the Arduino Yún as the brain
    of the robot, a distance sensor for the robot, and wireless control using Wi-Fi
    and a simple web interface. You will also be able to get a live display of the
    measurements done by the robot, for example, the distance that is measured in
    front of the robot by the ultrasonic sensor.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的最后一章，我们将使用Arduino Yún在完全不同的领域：机器人技术。你将学习如何接口直流电机，以及如何使用Arduino Yún作为机器人的大脑、距离传感器，以及使用Wi-Fi和简单的Web界面进行无线控制。你还将能够实时查看机器人所做的测量，例如，超声波传感器在机器人前方测量的距离。
- en: Building the mobile robot
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建移动机器人
- en: Arduino boards are widely used in mobile robots because they are easy to interface
    with the different parts of a robot, such as sensors, actuators such as DC motors,
    and other components such as LCD screens. Arduino even released their own robot
    recently so people can experiment on a common robotic platform. These robots are
    usually programmed once and then left alone to perform certain tasks, such as
    moving around without hitting obstacles or picking up objects.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino板在移动机器人中得到了广泛的应用，因为它们很容易与机器人的不同部分进行接口，如传感器、直流电机等执行器，以及其他如LCD屏幕等组件。Arduino甚至最近发布了他们自己的机器人，让人们可以在一个共同的机器人平台上进行实验。这些机器人通常只编程一次，然后独立执行某些任务，例如移动而不撞到障碍物或捡起物体。
- en: In this project, we are going to make things differently. What we want is to
    build a mobile robot that has the Arduino Yún as its "brain" and control it entirely
    via Wi-Fi from a computer or mobile device, such as a smartphone or a tablet.
    To do so, we will program an Arduino sketch for the robot that will receive commands
    and send data back, and program a graphical interface on your computer. This way,
    if you want to build more complex applications in the future, you simply need
    to change the software running on your computer and leave the robot untouched.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将有所不同。我们想要的是构建一个以Arduino Yún作为“大脑”的移动机器人，并通过电脑或移动设备，如智能手机或平板电脑，完全通过Wi-Fi来控制它。为此，我们将为机器人编写一个Arduino草图，该草图将接收命令并回传数据，并在你的电脑上编写一个图形界面。这样，如果你想在将来构建更复杂的应用程序，你只需更改电脑上运行的软件，而无需触碰机器人。
- en: 'We are first going to build the robot using some basic mechanical and electrical
    parts. We will not only show you how to build the robot using a specific kit,
    but also give you a lot of advice on building your own robot using other equivalent
    components. To give you an idea about what we are going to build, the following
    is an image of the assembled robot:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先将使用一些基本的机械和电气部件来构建机器人。我们不仅会向你展示如何使用特定的套件来构建机器人，还会给你很多关于使用其他等效组件来构建你自己的机器人的建议。为了给你一个我们打算构建的机器人的概念，以下是我们组装好的机器人的图片：
- en: '![Building the mobile robot](img/8007_04_01.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![构建移动机器人](img/8007_04_01.jpg)'
- en: At the bottom of the robot, you have most of the mechanical parts, such as the
    chassis, the wheels, the DC motors, and the ultrasonic sensor. You also have the
    battery at the center of the base of the robot. Then, you can see the different
    Arduino boards on top. Starting from the bottom, you have the Arduino Yún board,
    an Arduino Uno board, a motor shield, and a prototyping shield.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在机器人的底部，你大部分的机械部件，如底盘、轮子、直流电机和超声波传感器。你还在机器人的底部中心位置有电池。然后，你可以看到顶部的不同Arduino板。从底部开始，你有Arduino
    Yún板、Arduino Uno板、电机保护罩和一个原型板。
- en: 'Assembling components in this project will be slightly different than before
    because we will actually have two Arduino boards in the project: the Yún, which
    will receive commands directly from the outside world, and an Arduino Uno board,
    which will be connected to the motor shield.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中组装组件将略有不同，因为我们实际上将在项目中使用两个Arduino板：Yún板，它将直接从外部世界接收命令，以及一个Arduino Uno板，它将连接到电机保护罩。
- en: We will then perform the usual test on the individual parts of the robot, such
    as testing the two DC motors of the robot and the ultrasonic distance sensor that
    is located at the front of the robot. To test the motor, we are simply going to
    make them accelerate gradually to see whether or not the command circuit is working
    correctly. The measurements being received from the ultrasonic distance sensor
    will simply be displayed on the serial monitor.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将对机器人的各个部分进行常规测试，例如测试机器人的两个直流电机和位于机器人前端的超声波距离传感器。为了测试电机，我们将简单地让它们逐渐加速，以查看命令电路是否工作正常。从超声波距离传感器接收到的测量值将直接显示在串行监视器上。
- en: The next step is to build the Arduino software that will receive commands from
    the computer and transmit them to the motors that move the robot around. At this
    point, we are also going to code the part that will transmit the distance information
    back to the computer. Because we want to standardize our code and make it usable
    by other projects, we will build this part with inspiration from the REST API
    of the Arduino Yún board that we already used in [Chapter 2](ch02.html "Chapter 2. Creating
    a Remote Energy Monitoring and Control Device"), *Creating a Remote Energy Monitoring
    and Control Device*.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是构建Arduino软件，该软件将从计算机接收命令并将它们传输到移动机器人的电机。在此阶段，我们还将编写将距离信息传输回计算机的部分。因为我们希望标准化我们的代码并使其可用于其他项目，所以我们将从我们在[第2章](ch02.html
    "第2章。创建远程能源监控和控制设备")中使用的Arduino Yún板的REST API中汲取灵感，*创建远程能源监控和控制设备*。
- en: Finally, we are going to build the server-side graphical interface on your computer,
    so you can easily control the robot from your computer or a mobile device and
    receive some data about the robot, such as the readings from the ultrasonic sensor.
    This server-side software will again use HTML to display the interface, JavaScript
    to handle the users' actions, and PHP to talk directly to your Arduino Yún board
    via the `cURL` function.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将在您的计算机上构建服务器端图形界面，这样您就可以轻松地从计算机或移动设备控制机器人，并接收一些关于机器人的数据，例如超声波传感器的读数。此服务器端软件将再次使用HTML来显示界面，JavaScript来处理用户的操作，以及PHP通过`cURL`函数直接与您的Arduino
    Yún板通信。
- en: The required hardware and software components
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 所需的硬件和软件组件
- en: 'You will need several mechanical and electrical components for this project
    apart from the Arduino Yún. The first set of components is for the robot itself.
    You basically need three things: a robot base or chassis that will support all
    the components, two DC motors with wheels so the robot can move around, and at
    least one ultrasonic sensor in front of the robot. We used a mobile robot kit
    from DFRobot ([http://www.dfrobot.com/](http://www.dfrobot.com/)) that you can
    see in the following image:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 除了Arduino Yún之外，您还需要一些机械和电气组件来完成此项目。第一套组件是为机器人本身准备的。您基本上需要三样东西：一个将支持所有组件的机器人底盘或机架，两个带轮子的直流电机，以便机器人可以移动，以及至少一个位于机器人前方的超声波传感器。我们使用了一个来自DFRobot的移动机器人套件([http://www.dfrobot.com/](http://www.dfrobot.com/))，您可以在下面的图片中看到：
- en: '![The required hardware and software components](img/8007_04_02.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![所需的硬件和软件组件](img/8007_04_02.jpg)'
- en: The kit is called the **2 Wheels miniQ Balancing Robot chassis** and costs $32.20
    at the time of writing this book. Of course, you don't need this kit specifically
    to build this project. As long as you have a kit that includes the three kinds
    of components we mentioned before, you are probably good to go on this project.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 该套件被称为**2轮miniQ平衡机器人底盘**，在撰写本书时售价为32.20美元。当然，您不需要这个套件来构建此项目。只要您有一个包含我们之前提到的三种组件的套件，您可能就可以开始这个项目了。
- en: For the motors, note that the circuit we used in the motor shield can handle
    up to 12V DC, so use motors that are made to work at a voltage under 12V. Also,
    use motors that have an integrated speed reducer. This way, you will increase
    the available torque of your motors (to make the robot move more easily).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 对于电机，请注意，我们使用的电机保护器电路可以处理高达12V的直流电压，因此请使用在12V以下电压下工作的电机。此外，请使用具有集成减速器的电机。这样，您将增加电机的可用扭矩（以便机器人更容易移动）。
- en: For the ultrasonic sensor, you have many options available. We used one that
    can be interfaced via the `pulseIn()` function of Arduino, so any sensor that
    works this way should be compatible with the code we will see in the rest of this
    chapter. The reference of this sensor at DFRobot is URM37\. If you plan to use
    other kinds of distance sensors, such as sensors that work with the I2C interface,
    you will have to modify the code accordingly.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 对于超声波传感器，你有许多选择。我们使用了一个可以通过Arduino的`pulseIn()`函数进行接口的传感器，所以任何以这种方式工作的传感器都应该与我们在本章后面看到的代码兼容。这个传感器在DFRobot的参考是URM37。如果你计划使用其他类型的距离传感器，例如使用I2C接口的传感器，你必须相应地修改代码。
- en: Then, you need an Arduino board that will directly interface with the DC motors
    via a motor shield. At this point, you might ask why we are not connecting all
    the components directly to the Arduino Yún without having another Arduino board
    in the middle. It is indeed possible to do with the sensors of the robot, but
    not the motors.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你需要一块Arduino板，它将通过电机保护罩直接与直流电机接口。在这个阶段，你可能会问为什么我们不直接将所有组件连接到Arduino Yún，而不使用中间的另一个Arduino板。确实，使用机器人的传感器是可以做到的，但电机不行。
- en: We can't connect the motors directly to an Arduino board; they usually require
    more current than what the Arduino pins can deliver. This is why we will use a
    motor shield that is specialized in that task. Usually, the Arduino Yún can't
    use these motor shields without being damaged, at least at the time of writing
    this book. This is due to the fact that motor shields are usually designed for
    Arduino Uno boards and the wrong pins on the shield can be connected to the wrong
    pins on the Yún. Of course, it would also be possible to do that with external
    components on a breadboard, but using a shield here really simplifies things.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不能直接将电机连接到Arduino板；它们通常需要的电流比Arduino引脚能提供的要多。这就是为什么我们将使用专门为此任务设计的电机保护罩。通常，Arduino
    Yún在没有损坏的情况下无法使用这些电机保护罩，至少在撰写这本书的时候是这样的。这是因为电机保护罩通常是为Arduino Uno板设计的，保护罩上的错误引脚可能会连接到Yún的错误引脚。当然，你也可以使用面包板上的外部组件来做这件事，但在这里使用保护罩确实简化了事情。
- en: 'This is why we will interface all the components with a standard Arduino board
    and then make the Yún board communicate with the standard Arduino board. We used
    a DFRduino board for this project, which is the name that DFRobot gave this clone
    of the Arduino Uno board. This is as shown in the following image:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 正因如此，我们将使用标准Arduino板将所有组件接口，然后让Yún板与标准Arduino板通信。我们在这个项目中使用了DFRduino板，这是DFRobot为这个Arduino
    Uno板的克隆版所取的名字。如下面的图片所示：
- en: '![The required hardware and software components](img/8007_04_03.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![所需的硬件和软件组件](img/8007_04_03.jpg)'
- en: Of course, any equivalent board will work as well, as long as it's compatible
    with the official Arduino Uno board. You could also use other boards, such as
    an Arduino Leonardo, but our code has not been tested on other boards.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，任何等效的板都可以工作，只要它与官方Arduino Uno板兼容。你也可以使用其他板，例如Arduino Leonardo，但我们的代码在其他板上尚未经过测试。
- en: 'Then, you need a motor shield to interface the two DC motors with the Arduino
    Uno board. We also used a motor shield from DFRobot for this project. The reference
    on the DFRobot website is **1A Motor Shield For Arduino**, as shown in the following
    image:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你需要一个电机保护罩来将两个直流电机与Arduino Uno板接口。我们在这个项目中也使用了DFRobot的电机保护罩。在DFRobot网站上的参考是**Arduino
    1A 电机保护罩**，如下面的图片所示：
- en: '![The required hardware and software components](img/8007_04_04.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![所需的硬件和软件组件](img/8007_04_04.jpg)'
- en: Again, most motor shields will work for this project. You basically need one
    shield that can command at least two motors. The shield also needs to be able
    to handle the motors you want to control in terms of voltage and current. In our
    case, we needed a shield that can handle the two 6V DC motors of the robot, with
    a maximum current of 1A.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，大多数电机保护罩都可以用于这个项目。你基本上需要一个可以控制至少两个电机的保护罩。保护罩还需要能够处理你想要控制的电机，包括电压和电流。在我们的例子中，我们需要一个可以处理机器人两个6V直流电机的保护罩，最大电流为1A。
- en: 'Usually, you can look for motor shields that include the L293D motor driver
    IC. This integrated circuit is a chip dedicated to controlling DC motors. It can
    handle up to two 12V DC motors with 1A of current, which will work for the mobile
    robot we are trying to build here. Of course, if your shield can handle more current
    or voltage, that would work as well. The important point to look for is how to
    set the speed of the robot: the IC I mentioned can directly take a PWM command
    that comes from the Arduino board, so if you want to use the code prescribed in
    this chapter, you will need to use a shield that uses a similar type of command
    to set the motor''s speed.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，您可以寻找包含L293D电机驱动IC的电机保护板。这个集成电路是一个专门用于控制直流电机的芯片。它可以处理高达两个12V直流电机，电流为1A，这对于我们试图构建的移动机器人来说将适用。当然，如果你的保护板可以处理更多的电流或电压，那也可以。重要的是要找到如何设置机器人的速度：我提到的IC可以直接接收来自Arduino板的PWM命令，所以如果您想使用本章中规定的代码，您将需要使用使用类似类型命令设置电机速度的保护板。
- en: 'Finally, we added a simple prototyping shield on top of the robot to make power
    connections easier and so we can add more components in the future, as shown in
    the following image:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们在机器人顶部添加了一个简单的原型板，以便更容易地进行电源连接，并且将来可以添加更多组件，如下面的图片所示：
- en: '![The required hardware and software components](img/8007_04_05.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![所需的硬件和软件组件](img/8007_04_05.jpg)'
- en: Again, you can use any equivalent prototyping shield, for example, the official
    prototype shield from Arduino. It is mainly so you don't have many cables lying
    around, but you can also use it to extend your robot project with more components,
    such as an accelerometer or a gyroscope.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，您可以使用任何等效的原型板，例如Arduino的官方原型板。这主要是为了避免有很多电缆散落在周围，但您也可以用它来扩展您的机器人项目，添加更多组件，例如加速度计或陀螺仪。
- en: You will also need a power source for your robot. As the DC motors can use quite
    a lot of current, we really recommend that you don't use power coming from your
    computer USB port when testing the robot or you will risk damaging it. That's
    why we will always use a battery when working with the motors of the robot. We
    used a 7.2V battery with a DC jack connector, so it can be easily inserted into
    the Arduino Uno board. This battery pack can also be found on the DFRobot website.
    You can also use some AA batteries instead of a battery pack. You will have to
    make sure that the total voltage of these batteries is greater than the nominal
    voltage of your DC motors.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 您还需要为您的机器人提供电源。由于直流电机可能需要相当多的电流，我们强烈建议您在测试机器人时不要使用来自计算机USB端口的电源，否则您可能会损坏它。这就是为什么我们总是使用电池来处理机器人的电机。我们使用了一个带有直流插头连接器的7.2V电池，这样它可以很容易地插入到Arduino
    Uno板上。这个电池组也可以在DFRobot网站上找到。您也可以使用一些AA电池代替电池组。您必须确保这些电池的总电压大于您直流电机的标称电压。
- en: As for the software itself, you don't need anything other than the Arduino IDE
    and a web server installed on your computer.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 至于软件本身，您只需要在您的计算机上安装Arduino IDE和一个网络服务器。
- en: Robot assembly
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 机器人组装
- en: 'It''s now time to assemble the robot. We will show you the steps you need to
    follow on the robot kit we used for this project, but they can be applied to any
    other equivalent robot kit. The first step is to put the battery at the base of
    the robot, as shown in the following image:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是组装机器人的时候了。我们将向您展示在这个项目中使用的机器人套件所需的步骤，但它们可以应用于任何其他等效的机器人套件。第一步是将电池放置在机器人的底部，如下面的图片所示：
- en: '![Robot assembly](img/8007_04_06.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![机器人组装](img/8007_04_06.jpg)'
- en: 'Note that some metal spacers were also used at the base of the robot to maintain
    the battery in place and to provide support for the rest of the components. These
    spacers can also be found on the DFRobot website. Then, you can screw on two more
    spacers and the Arduino Yún board to the top of the chassis, as shown in the following
    image:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，一些金属间隔件也被用于机器人的底部，以保持电池的位置并为其他组件提供支撑。这些间隔件也可以在DFRobot网站上找到。然后，您可以在底盘顶部拧上两个更多的间隔件和Arduino
    Yún板，如下面的图片所示：
- en: '![Robot assembly](img/8007_04_07.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![机器人组装](img/8007_04_07.jpg)'
- en: 'Then, we added the Arduino Uno compatible board on top of the two metallic
    spacers. At this point, you can screw on the Arduino Uno board; all the other
    components will just be plugged into these boards, as shown in the following image:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们在两个金属间隔件上添加了Arduino Uno兼容板。在这个时候，您可以拧上Arduino Uno板；所有其他组件都将直接插入到这些板上，如下面的图片所示：
- en: '![Robot assembly](img/8007_04_08.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![机器人组装](img/8007_04_08.jpg)'
- en: 'Then, you can simply plug the motor shield on top of the Arduino Uno board.
    At this point, you can also connect the cables that come from the DC motors to
    the motor shield screw headers. Be careful with this step; it is quite easy to
    plug the wrong cables from the DC motors. You need to connect each motor on a
    different connector on the motor shield board, as shown in the following image:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以直接将电机保护罩安装在Arduino Uno板上。此时，您还可以将来自直流电机的电缆连接到电机保护罩的螺丝端子。请注意这一步；很容易将直流电机的错误电缆插错。您需要将每个电机连接到电机保护罩板上的不同连接器，如下面的图片所示：
- en: '![Robot assembly](img/8007_04_09.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![机器人组装](img/8007_04_09.jpg)'
- en: 'Finally, you can plug the prototyping shield on top of the robot. At this point,
    we already connected the ultrasonic sensor: ground goes to Arduino ground, VCC
    to Arduino''s 5V pin on the prototype shield, and the signal pin goes into pin
    A0 of the Arduino board. If your ultrasonic sensor works with a digital interface,
    for example, you might want to use different pins. Please read the datasheet of
    your ultrasonic sensor for more information. The following image shows the state
    of the robot at this step:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您可以将原型板安装在机器人上。到这一步，我们已经连接了超声波传感器：地线连接到Arduino的地线，VCC连接到原型板上的Arduino 5V引脚，信号引脚连接到Arduino板的A0引脚。如果您的超声波传感器使用数字接口，例如，您可能需要使用不同的引脚。请阅读您超声波传感器的数据手册以获取更多信息。以下图片显示了这一步骤的机器人状态：
- en: '![Robot assembly](img/8007_04_10.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![机器人组装](img/8007_04_10.jpg)'
- en: Connecting the Arduino Yún and Uno boards
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接Arduino Yún和Uno板
- en: We are not done yet! For now, there are no connections between the Arduino Yún
    and the Arduino Uno board, so the Yún board won't be able to access the DC motors
    and the sensors of the robot. To solve this issue, the first step is to connect
    the power from the Arduino Uno board to the Yún board. This way, when we power
    the project using the battery, the Yún board will be powered as well.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还没有完成！到目前为止，Arduino Yún和Arduino Uno板之间还没有连接，因此Yún板将无法访问直流电机和机器人的传感器。为了解决这个问题，第一步是将Arduino
    Uno板的电源连接到Yún板。这样，当我们使用电池为项目供电时，Yún板也会被供电。
- en: 'To do so, simply connect the ground pins together and plug the Vin pin on the
    Arduino Yún to the 5V rail of the Arduino Uno, as shown in the following image:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要这样做，只需将地线引脚连接在一起，并将Arduino Yún上的Vin引脚连接到Arduino Uno的5V轨，如下面的图片所示：
- en: '![Connecting the Arduino Yún and Uno boards](img/8007_04_11.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![连接Arduino Yún和Uno板](img/8007_04_11.jpg)'
- en: 'To finish connecting the two Arduino boards, we need to connect them so they
    can speak together when the project is under operation. For this, we are going
    to use the I2C interface of the Arduino boards so they can send messages to each
    other. I2C stands for **Inter Integrated Circuit** and is a simple communication
    protocol that was developed for communication between circuits, and is widely
    used in electronics. There are two wires to connect for that purpose: SDA and
    SCL. To do so, simply connect pin 2 of the Yún board to pin A4 of the Uno board,
    and pin 3 of the Yún board to pin A5 of the Uno board, as shown in the following
    image:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成连接两块Arduino板，我们需要将它们连接起来，以便在项目运行时它们可以相互通信。为此，我们将使用Arduino板的I2C接口，这样它们就可以相互发送消息。I2C代表**Inter
    Integrated Circuit**，是一种为电路间通信而开发的简单通信协议，在电子学中得到了广泛应用。为此需要连接两根线：SDA和SCL。要做到这一点，只需将Yún板的2号引脚连接到Uno板的A4号引脚，将Yún板的3号引脚连接到Uno板的A5号引脚，如下面的图片所示：
- en: '![Connecting the Arduino Yún and Uno boards](img/8007_04_12.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![连接Arduino Yún和Uno板](img/8007_04_12.jpg)'
- en: 'The following image summarizes the connection between both boards:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图片总结了两个板之间的连接：
- en: '![Connecting the Arduino Yún and Uno boards](img/8007OS_04_13.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![连接Arduino Yún和Uno板](img/8007OS_04_13.jpg)'
- en: 'Finally, you can power up the project by inserting the DC jack connector of
    the battery into the power connector of the Uno board as shown in the following
    image:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您可以通过将电池的直流插头连接到Uno板上的电源连接器来为项目供电，如下面的图片所示：
- en: '![Connecting the Arduino Yún and Uno boards](img/8007OS_04_14.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![连接Arduino Yún和Uno板](img/8007OS_04_14.jpg)'
- en: 'If everything was done correctly in this step, you should see that both boards
    (the Yún and the Uno) are powered up, with some of their LEDs on. To help you
    build the robot, we also included two pictures of the sides of the robot that
    show you the different connections. The following is an image of a side of the
    robot that shows the power connections to the Yún:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这一步操作都正确无误，你应该会看到两个板（Yún和Uno）都已上电，其中一些LED灯亮着。为了帮助你构建机器人，我们还包含了两个展示机器人不同连接的侧面图片。以下是一张展示机器人侧面电源连接到Yún的图片：
- en: '![Connecting the Arduino Yún and Uno boards](img/8007OS_04_15.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![连接Arduino Yún和Uno板](img/8007OS_04_15.jpg)'
- en: 'The following image shows the connections from the I2C interface to the Yún:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图片显示了从I2C接口到Yún的连接：
- en: '![Connecting the Arduino Yún and Uno boards](img/8007OS_04_16.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![连接Arduino Yún和Uno板](img/8007OS_04_16.jpg)'
- en: Testing the robot's hardware connections
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试机器人的硬件连接
- en: Before building the remote control part of the project, we want to make sure
    that the hardware is wired correctly, especially between the Arduino Uno board
    and the different motors and sensors. This is why we are first going to build
    a simple sketch for the Arduino Uno board to test the different components.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建项目的遥控部分之前，我们想确保硬件连接正确，尤其是在Arduino Uno板和不同的电机及传感器之间。这就是为什么我们首先将为Arduino Uno板构建一个简单的草图来测试不同的组件。
- en: At this point, we are going to turn the motors of the robot on; so make sure
    the robot is standing on a small platform, for example, to prevent it from moving
    around while you are testing your different Arduino sketches with the USB cable
    connected to your computer.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，我们将打开机器人的电机；因此请确保机器人站在一个小平台上，例如，以防你在用USB线连接到电脑测试不同的Arduino草图时，机器人四处移动。
- en: The sketch starts by declaring the pins for the motors, as shown in the following
    code. Note that these pins are specifically for the motor shield we are using;
    please refer to the datasheet of your shield if you are using a different one.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 草图首先声明了电机的引脚，如下面的代码所示。请注意，这些引脚专门用于我们使用的电机保护罩；如果你使用的是不同的保护罩，请参阅你的保护罩数据表。
- en: '[PRE0]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Declare the pin used by the ultrasonic sensor as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下方式声明超声波传感器使用的引脚：
- en: '[PRE1]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We also want to make the speed of the motor vary during operation, so we declare
    the variable as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还希望电机在运行过程中速度变化，所以我们按照以下方式声明变量：
- en: '[PRE2]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In the `setup()` part of the sketch, we need to specify that the motor pins
    will behave as output pins, as shown in the following code:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在草图的`setup()`部分，我们需要指定电机引脚将作为输出引脚，如下面的代码所示：
- en: '[PRE3]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We also need to set a starting speed for the robot. Note that the speed of each
    motor will be set by PWM commands coming from the Arduino, so we have to specify
    a value between 0 (no voltage applied to the motor) and 255 (maximum voltage applied
    to the motor). Also, because of mechanical resistance on the motors, there is
    no linear relation between the value of the PWM command and the speed of the motor.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要为机器人设置一个起始速度。请注意，每个电机的速度将由来自Arduino的PWM命令设置，因此我们必须指定一个介于0（不对电机施加电压）和255（对电机施加最大电压）之间的值。此外，由于电机上的机械阻力，PWM命令的值和电机的速度之间没有线性关系。
- en: We used the value 75 as a starting speed, which is a very slow speed on our
    DC motors. However, depending on your own setup, this value will have a completely
    different effect. At this point, you can also experiment to see what the maximum
    PWM value is that will give you exactly zero speed on your DC motors. Make sure
    that the robot is not on the floor just yet as it would start to move forward
    and possibly damage things. We put it on a small stand so the wheels don't touch
    anything.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用75作为起始速度，这在我们的直流电机上是一个非常慢的速度。然而，根据你的设置，这个值将产生完全不同的效果。在这个阶段，你也可以进行实验，看看最大PWM值是多少，这将使你的直流电机达到正好零速度。请确保机器人还没有放在地板上，因为它会开始向前移动，可能会损坏东西。我们把它放在一个小支架上，这样轮子就不会碰到任何东西。
- en: 'In the `loop()` part, everything is done by the function `send_motor_command`,
    which will be called for both motors. For example:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在`loop()`部分，所有操作都是由`send_motor_command`函数完成的，该函数将用于两个电机。例如：
- en: '[PRE4]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let''s see the details of this function. It starts by writing the speed of
    the motor on the correct pin as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这个函数的细节。它首先按照以下方式将电机的速度写入正确的引脚：
- en: '[PRE5]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Then, we need to set the the direction pin to the correct direction. This is
    done by a simple `digitalWrite` function as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要将方向引脚设置为正确的方向。这是通过一个简单的`digitalWrite`函数完成的，如下所示：
- en: '[PRE6]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Still in the `loop()` function, we call a function to measure the distance
    in front of the robot and print the result on the `Serial` port:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 仍然在`loop()`函数中，我们调用一个函数来测量机器人前面的距离，并将结果打印在`Serial`端口上：
- en: '[PRE7]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Let''s see the details of this function. It starts by getting the raw measurement
    from the sensor using the `pulseIn` function. Basically, the sensor returns a
    pulse whose length is proportional to the measured distance. The length of the
    pulse is measured with the following function of Arduino dedicated for that purpose:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这个函数的详细情况。它首先使用`pulseIn`函数从传感器获取原始测量值。基本上，传感器返回一个长度与测量距离成正比的脉冲。脉冲长度是通过以下Arduino专用函数测量的：
- en: '[PRE8]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Then, we check whether the reading is valid and if it is, we convert it to
    centimeters using the following formula:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们检查读取是否有效，如果是，我们使用以下公式将其转换为厘米：
- en: '[PRE9]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This is returned with the following code:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这是通过以下代码返回的：
- en: '[PRE10]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Finally, we update the speed at every iteration of the loop by increasing it
    by one unit, and we reset it if it reaches 255, as shown in the following code:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们在循环的每次迭代中更新速度，每次增加一个单位，如果它达到255则重置，如下所示：
- en: '[PRE11]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The code for this section is available at the GitHub repository of the book
    and is stored in a file called `robot_test`: [https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter4/robot_test](https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter4/robot_test)'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 该部分的代码可在本书的GitHub仓库中找到，存储在一个名为`robot_test`的文件中：[https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter4/robot_test](https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter4/robot_test)
- en: It's now time to upload the code to the robot. Before doing so, please make
    sure that the robot is powered by the battery. Both motors of the robot should
    gradually accelerate upon reaching the maximum speed and then start again at a
    lower speed.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候将代码上传到机器人上了。在这样做之前，请确保机器人由电池供电。机器人的两个电机应该在达到最大速度时逐渐加速，然后以较低的速度重新开始。
- en: You can also open the serial monitor at this point to check the readings from
    the distance sensor. Try moving your hand or an object in front of the robot;
    you should see the distance changing accordingly on the serial monitor.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在这个时候打开串行监视器来检查距离传感器的读数。尝试将你的手或物体放在机器人前面；你应该在串行监视器上看到距离相应地变化。
- en: Building the Arduino sketch
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建Arduino草图
- en: 'It''s now time to build the final sketch for our project. To be really precise,
    we should say sketches because we will have to develop two of them: one for the
    Uno board and one for the Yún board. You just have to make one simple change to
    the hardware at this point: connect the ultrasonic sensor directly to the Yún
    board by connecting the signal pin to the pin A0 of the Yún board.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候构建我们项目的最终草图了。为了更精确，我们应该说草图，因为我们将不得不开发两个：一个用于Uno板，一个用于Yún板。现在你只需要对硬件进行一个简单的更改：将超声波传感器直接连接到Yún板，将信号引脚连接到Yún板的A0引脚。
- en: 'Let''s first focus on the Arduino Uno sketch. The sketch is inspired by the
    test sketch we wrote before, so it already includes the functions to control the
    two DC motors. To communicate between the two boards, we have to include the Wire
    library that is in charge of handling I2C communications:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先关注Arduino Uno草图。这个草图受到了我们之前编写的测试草图的启发，因此它已经包含了控制两个直流电机的函数。为了在两个板之间进行通信，我们必须包含负责处理I2C通信的Wire库：
- en: '[PRE12]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Then, in the `setup()` part of the sketch, we need to declare that we are connecting
    to the I2C bus and start listening for incoming events. The Uno board will be
    configured as a slave, receiving commands from the Yún board, which will act as
    the master. This is done by the following piece of code:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在草图中的`setup()`部分，我们需要声明我们正在连接到I2C总线并开始监听传入的事件。Arduino板将被配置为从机，接收来自充当主机的Yún板的命令。这是通过以下代码片段完成的：
- en: '[PRE13]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Let''s see the details of this `receiveEvent` part, which is actually a function
    that is passed as an argument to the `onReceive()` function of the Wire library.
    This function will be called whenever an event is received on the I2C bus. What
    this function does is basically read the incoming data from the Yún, which has
    to follow a specific format like you can see in the following example:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这个`receiveEvent`部分的细节，这实际上是一个作为参数传递给Wire库的`onReceive()`函数的函数。每当I2C总线上接收到事件时，这个函数将被调用。这个函数的基本操作是从Yún读取传入的数据，这些数据必须遵循特定的格式，如下面的示例所示：
- en: '[PRE14]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'For example, the first part of the previous message is read back with the following
    code:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，上一条消息的前一部分是通过以下代码读取回的：
- en: '[PRE15]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'These commands that come from the Yún are then applied to the motors as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这些来自Yún的命令随后被应用于电机，如下所示：
- en: '[PRE16]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Let''s now focus on the Yún sketch. This sketch is inspired by the Bridge sketch
    that comes with the Arduino IDE and is based on the REST API of the Arduino Yún.
    To make things easier, we are going to create a new kind of REST call named robot.
    This way, we are going to be able to command the robot by executing calls like
    the following in your browser:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们专注于Yún草图。这个草图灵感来源于Arduino IDE中附带的自带Bridge草图，并基于Arduino Yún的REST API。为了简化操作，我们将创建一种新的REST调用，命名为robot。这样，我们就可以通过在浏览器中执行以下调用来控制机器人：
- en: '[PRE17]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'First, we need to include the correct libraries for the sketch as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要为草图包含正确的库，如下所示：
- en: '[PRE18]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Then, create a web server on the board:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在板上创建一个网络服务器：
- en: '[PRE19]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In the `setup()` function, we also join the I2C bus:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在`setup()`函数中，我们还将I2C总线连接起来：
- en: '[PRE20]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Then, we start the bridge:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们启动桥接：
- en: '[PRE21]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The `setup()` function ends by starting the web server as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`setup()`函数通过以下方式启动网络服务器结束：'
- en: '[PRE22]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Then, the `loop()` function consists of listening to incoming connections as
    follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，`loop()`函数通过以下方式监听传入的连接：
- en: '[PRE23]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The requests that come from these clients can be processed with the following
    command:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 来自这些客户端的请求可以通过以下命令进行处理：
- en: '[PRE24]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'If a client is connected, we process it to check whether or not a robot command
    was received, as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有客户端连接，我们将对其进行处理以检查是否收到了机器人命令，如下所示：
- en: '[PRE25]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'This function processes the REST call to see what we need to do with the motors
    of the robot. For example, let''s consider the case where we want to make the
    robot go forward at full speed. We need to send the following message to the Arduino
    Uno board:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数处理REST调用，以查看我们需要对机器人的电机做些什么。例如，让我们考虑这样一个情况，我们想让机器人以全速向前行驶。我们需要向Arduino Uno板发送以下消息：
- en: '[PRE26]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This is done by the following piece of code:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这是通过以下代码段完成的：
- en: '[PRE27]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'We included three other commands for this simple REST API: `stop` (which obviously
    stops the robot), `turnleft` (which makes the robot turn left at moderate speed),
    `turnright` (which makes the robot turn right), and `getdistance` to return the
    distance coming from the ultrasonic sensor. We also inserted the `measure_distance`
    function in the sketch to read data that comes from the ultrasonic sensor.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为这个简单的REST API添加了三个其他命令：`stop`（显然是停止机器人），`turnleft`（以中等速度使机器人向左转），`turnright`（使机器人向右转），以及`getdistance`以返回超声波传感器的距离。我们还在这个草图中插入了`measure_distance`函数来读取来自超声波传感器的数据。
- en: 'We are now ready to upload the code to the robot. Remember that you have to
    upload two sketches here: one for the Uno board and one for the Yún board. The
    order doesn''t matter that much, just upload the two Arduino sketches successfully
    by carefully ensuring that you are uploading the correct code to the correct board.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经准备好将代码上传到机器人上了。请记住，您必须在这里上传两个草图：一个用于Uno板，另一个用于Yún板。顺序并不那么重要，只需成功上传两个Arduino草图，并仔细确保您上传的是正确的代码到正确的板上。
- en: 'Both sketches are available in the following repository on GitHub: [https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter4/remote_control](https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter4/remote_control).'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 以下GitHub仓库中提供了这两个草图：[https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter4/remote_control](https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter4/remote_control)。
- en: 'You can then test that the Yún board is correctly relaying commands to the
    Uno board. At this point, you can disconnect all cables and power the robot with
    the battery only. Then, go to a web browser and type the following code:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以测试Yún板是否正确地将命令中继到Uno板上。在这个时候，您可以断开所有电缆，只用电池为机器人供电。然后，打开一个网页浏览器并输入以下代码：
- en: '[PRE28]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The robot should instantly start turning to the right. To stop the robot, you
    can simply type the following code:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 机器人应该立即开始向右转。要停止机器人，您可以简单地输入以下代码：
- en: '[PRE29]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'You can also type the following code:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以输入以下代码：
- en: '[PRE30]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: This should print the value of the distance in front of the robot on your web
    browser. If you can see a realistic distance being printed on your web browser,
    it means that the command is working correctly.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该在您的网页浏览器上打印出机器人前面的距离值。如果您在网页浏览器上看到打印出的距离是真实的，这意味着命令正在正确工作。
- en: Building the computer interface
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建计算机界面
- en: We are now going to build an interface so you can control the robot remotely
    from your computer or a mobile device. This is actually quite similar to what
    we did for the relay control project, the main difference being that we also want
    to read some data back from the robot (in the present case the distance measurement
    from the ultrasonic sensor). There will be an HTML file that will host the different
    elements of the interface, some PHP code to communicate with the Yún board, some
    JavaScript to establish the link between HTML and PHP, and finally some CSS to
    give some style to the interface.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将构建一个界面，让您可以从电脑或移动设备远程控制机器人。这实际上与我们为继电器控制项目所做的工作非常相似，主要区别在于我们还想从机器人（在本例中为超声波传感器的距离测量）读取一些数据。将有一个HTML文件来托管界面的不同元素，一些用于与Yún板通信的PHP代码，一些用于在HTML和PHP之间建立链接的JavaScript，以及一些用于给界面添加样式的CSS。
- en: 'The first step is to create the HTML file that will be our access point to
    the robot control. This file basically hosts four buttons that we will use to
    control our robot and a field to continuously display the distance measured by
    the ultrasonic sensor. The buttons are declared inside a form; the following is
    the code for one button:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是创建一个HTML文件，它将成为我们访问机器人控制的入口点。该文件基本上托管了四个按钮，我们将使用这些按钮来控制我们的机器人，并有一个字段来持续显示超声波传感器测量的距离。按钮是在一个表单内声明的；以下是一个按钮的代码：
- en: '[PRE31]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The distance information will be displayed using the following line of code:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 距离信息将通过以下代码行显示：
- en: '[PRE32]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The following field will be updated with some JavaScript:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 以下字段将使用一些JavaScript进行更新：
- en: '[PRE33]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Let's see the content of this PHP file. It basically makes a call to the REST
    API of the Yún board, and returns the answer to be displayed on the interface.
    Again, it will make use of the `curl` function of PHP.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这个PHP文件的内容。它基本上是对Yún板的REST API进行调用，并将返回的答案显示在界面上。同样，它将使用PHP的`curl`函数。
- en: 'It starts by making the `cURL` call to your Yún board with the `getdistance`
    parameter we defined in the sketch before:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 它首先通过`cURL`调用您的Yún板，使用我们在之前的草图定义的`getdistance`参数：
- en: '[PRE34]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'It then prepares the call with the following code:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 然后通过以下代码准备调用：
- en: '[PRE35]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'We get the answer with the following code:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用以下代码获取答案：
- en: '[PRE36]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'We then print it back with the `echo` function of PHP:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用PHP的`echo`函数将其打印出来：
- en: '[PRE37]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The PHP script that commands the motors is quite similar, so we won't detail
    it here.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 控制电机的PHP脚本也非常相似，所以我们在这里不会详细说明。
- en: 'Let''s see the JavaScript file that handles the different buttons of the interface.
    Each button of the interface is basically linked to a JavaScript function that
    sends the correct parameter to the Arduino Yún, via the PHP file. For example,
    the `stop` button calls the following function:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看处理界面不同按钮的JavaScript文件。界面的每个按钮基本上都链接到一个JavaScript函数，该函数将正确的参数发送到Arduino
    Yún，通过PHP文件。例如，`stop`按钮调用以下函数：
- en: '[PRE38]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The same is done with the function to make the robot go full speed forward.
    To make it turn left or right, we can implement a more complex behavior. What
    we usually want is not for the robot to turn continuously by itself, but for example,
    to turn off a quarter of a turn. This is where the approach we took in this project
    becomes powerful. We can do that right on the server side without having to change
    the sketch on the Arduino board.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们使用使机器人全速向前的函数。要使机器人向左或向右转，我们可以实现更复杂的行为。我们通常想要的不是让机器人自己连续转动，而是例如，转动四分之一圈。这就是我们在本项目中采取的方法变得强大的地方。我们可以在服务器端直接这样做，而无需更改Arduino板上的草图。
- en: 'That''s why to turn right for a given amount of time, for example, we will
    implement a series of commands on the server side and then stop. This is done
    by the following code:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了在给定的时间内向右转，例如，我们将在服务器端实现一系列命令，然后停止。这是通过以下代码完成的：
- en: '[PRE39]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The `sleep` function itself is implemented in the same file and works by comparing
    the time that passed since the function was called, as shown in the following
    code:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`sleep`函数本身是在同一文件中实现的，它通过比较自函数被调用以来经过的时间来工作，如下面的代码所示：'
- en: '[PRE40]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Of course, we invite you to play with this sleep function to get the desired
    angle. For example, we set our sleep function such that the robot turns off about
    a quarter of a turn whenever we press the **Turn Right** button.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们邀请您玩转这个睡眠功能，以获得期望的角度。例如，我们设置了睡眠函数，每次我们按下**向右转**按钮时，机器人大约会转动四分之一圈。
- en: 'The code for the interface is available on the GitHub repository of the project:
    [https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter4/remote_control](https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter4/remote_control)'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 界面的代码可在项目的GitHub仓库中找到：[https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter4/remote_control](https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter4/remote_control)
- en: 'Now, it''s time to start the project. Be sure to place all the files at the
    root of your web server and make sure that the web server is running. Then, go
    to the folder of your web server in your browser (usually by typing `localhost`)
    and open the HTML file. The project also contains a CSS sheet to make the interface
    look better. The following is what you should see in your browser:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候开始这个项目了。确保将所有文件放置在您的网络服务器根目录下，并确保网络服务器正在运行。然后，在浏览器中打开您的网络服务器文件夹（通常通过输入`localhost`）并打开HTML文件。该项目还包含一个CSS样式表，用于使界面看起来更好。以下是在您的浏览器中应该看到的内容：
- en: '![Building the computer interface](img/8007OS_04_17.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![构建计算机界面](img/8007OS_04_17.jpg)'
- en: The field that displays the distance reading from the ultrasonic sensor should
    be updated automatically every second, so you can see whether or not this is working
    right away. Try moving your hand or an object in front of the robot and the value
    should change accordingly.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 显示超声波传感器距离读数的字段应该每秒自动更新，这样您可以立即看到它是否工作正常。尝试将您的手或物体放在机器人前面，数值应该相应地改变。
- en: Before making the robot move around, we recommend that you test the different
    buttons while the robot is still on a small stand so it cannot move. Indeed, if
    something is wrongly coded on your server or within the Arduino sketch, your robot
    will not respond anymore and will randomly hit objects in your home.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在让机器人移动之前，我们建议您在机器人仍然站在一个小支架上时测试不同的按钮，这样它就不能移动了。确实，如果您的服务器或Arduino草图中有错误编码，您的机器人将不再响应，并会在您的家中随机撞击物体。
- en: You can now also test the different buttons. You can especially focus on the
    buttons that make the robot turn left or right and adjust the `sleep()` function
    in the PHP code to make them do exactly what you want. Notice that while your
    robot is moving around, the distance detected by the ultrasonic sensor in front
    of the robot is updated accordingly.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在也可以测试不同的按钮。您可以特别关注使机器人向左或向右转动的按钮，并在PHP代码中调整`sleep()`函数，使它们正好做您想要的事情。请注意，当您的机器人移动时，机器人前方超声波传感器检测到的距离会相应更新。
- en: Summary
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'Let''s see what the major takeaways of this chapter are:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看本章的主要收获是什么：
- en: We started the project by building the robot from the different components,
    such as the robot base, the DC motors, the ultrasonic sensor, and the different
    Arduino boards.
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们开始这个项目时，是从不同的组件构建机器人的，例如机器人底盘、直流电机、超声波传感器和不同的Arduino板。
- en: Then, we built a simple sketch to test the DC motors and the ultrasonic distance
    sensor.
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，我们构建了一个简单的草图来测试直流电机和超声波距离传感器。
- en: 'The next step was to build two Arduino sketches to control the robot remotely:
    one for the Arduino Uno board and one for the Yún board.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下一步是构建两个Arduino草图来远程控制机器人：一个用于Arduino Uno板，另一个用于Yún板。
- en: At the end of the project, we built a simple web interface to control the robot
    remotely. The interface is composed of several buttons to make the robot move
    around, and one field that continuously displays the measurement that comes from
    the ultrasonic sensor mounted in front of the robot.
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在项目的最后，我们构建了一个简单的网络界面来远程控制机器人。该界面由几个按钮组成，用于使机器人移动，还有一个字段，持续显示机器人前方安装的超声波传感器的测量值。
- en: Let's now see what else you can do to improve this project. You can, for example,
    use the ultrasonic sensor data to make the robot act accordingly, for instance,
    to avoid hitting into walls.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看看您还能做些什么来改进这个项目。例如，您可以使用超声波传感器数据使机器人相应地行动，例如避免撞墙。
- en: Finally, you can also add many hardware components to the robot. The first thing
    you can do is add more ultrasonic sensors around the robot so you can detect obstacles
    to the sides of the robot as well. You can also imagine adding an accelerometer
    and/or a gyroscope to the robot so you will know exactly where it is going and
    at what speed.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你还可以向机器人添加许多硬件组件。你可以做的第一件事是在机器人周围添加更多的超声波传感器，这样你就可以检测到机器人侧面的障碍物。你也可以想象给机器人添加一个加速度计和/或陀螺仪，这样你就可以确切地知道它要去哪里以及以什么速度行驶。
- en: You can even imagine combining the project with the one from the [Chapter 3](ch03.html
    "Chapter 3. Making Your Own Cloud-connected Camera"), *Making Your Own Cloud-connected
    Camera*, and plug a USB camera to the robot. This way, you can live stream what
    the robot is seeing while you control it with the web interface!
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 你甚至可以想象将这个项目与[第3章](ch03.html "第3章。制作你自己的云连接摄像头")中的项目“制作你自己的云连接摄像头”结合起来，并将一个USB摄像头连接到机器人上。这样，你就可以通过Web界面实时直播机器人所看到的画面，同时控制它！
- en: 'I hope this book gave you a good overview of what the Arduino Yún can add to
    your Arduino projects. Through the four projects in the book, we used the three
    main features of the Arduino Yún: the powerful embedded Linux machine, the onboard
    Wi-Fi connection, and the Temboo libraries to interface the board with web services.
    You can now use what you learned in this book to build your own applications based
    on the Arduino Yún!'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望这本书能给你一个关于Arduino Yún可以为你的Arduino项目添加什么的良好概述。通过书中的四个项目，我们使用了Arduino Yún的三个主要功能：强大的嵌入式Linux机器、板载Wi-Fi连接以及Temboo库来将板子与网络服务接口。现在，你可以利用这本书中学到的知识来构建基于Arduino
    Yún的自己的应用程序！
