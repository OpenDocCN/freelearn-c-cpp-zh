["```cpp\nstd::sort(begin(vec), end(vec));\n```", "```cpp\nstd::sort(std::execution::par, begin(vec), end(vec));\n```", "```cpp\nstd::for_each(std::begin(vec), std::end(vec), [](int val) { /*...*/ });\n```", "```cpp\nstd::for_each(std::execution::par, std::begin(vec), std::end(vec), [](int val) { /*...*/ });\n```", "```cpp\nstd::transform(std::execution::par_unseq, std::begin(vec), std::end(vec), std::begin(output), [](int val) { return val * val; });\n```", "```cpp\n#include <algorithm>\n#include <array>\n#include <iostream>\nconstexpr std::array<int, 6> data = {1, 2, 3, 4, 3, 5};\nconstexpr bool contains(int value) {\n  return std::find(data.begin(), data.end(), value) !=\n         data.end();\n}\nconstexpr size_t countOccurrences(int value) {\n  return std::count(data.begin(), data.end(), value);\n}\nint main() {\n  static_assert(contains(3));\n  static_assert(countOccurrences(3) == 2);\n  std::cout << \"Array contains 3: \" << contains(3) << \"\\n\";\n  std::cout << \"Occurrences of 3: \" << countOccurrences(3)\n            << \"\\n\";\n  return 0;\n}\n```", "```cpp\nArray contains 3: 1\nOccurrences of 3: 2\n```"]