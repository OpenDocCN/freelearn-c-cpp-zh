["```cpp\n    #pragma once\n\n    #include \"CoreMinimal.h\"\n    #include \"GameFramework/Character.h\"\n    #include \"Warrior.generated.h\"\n\n    UCLASS()\n    class CHAPTER_06_API AWarrior : public ACharacter\n    {\n        GENERATED_BODY()\n\n    public:\n        // Sets default values for this character's properties\n        AWarrior();\n\n    protected:\n        // Called when the game starts or when spawned\n        virtual void BeginPlay() override;\n\n    public: \n        // Called every frame\n        virtual void Tick(float DeltaTime) override;\n\n        // Called to bind functionality to input\n        virtual void SetupPlayerInputComponent(class UInputComponent* \n                                            PlayerInputComponent) override;\n\n        // Movement functions\n     void Forward(float amount);\n     void Back(float amount);\n     void Right(float amount);\n     void Left(float amount);\n\n    };\n    ```", "```cpp\n    #include \"Components/InputComponent.h\"\n\n    // ...\n\n    // Called to bind functionality to input\n    void AWarrior::SetupPlayerInputComponent(UInputComponent* PlayerInputComponent)\n    {\n        Super::SetupPlayerInputComponent(PlayerInputComponent);\n\n        check(PlayerInputComponent);\n        PlayerInputComponent->BindAxis(\"Forward\", this, \n                                       &AWarrior::Forward);\n        PlayerInputComponent->BindAxis(\"Back\", this, &AWarrior::Back);\n        PlayerInputComponent->BindAxis(\"Right\", this, &AWarrior::Right);\n        PlayerInputComponent->BindAxis(\"Left\", this, &AWarrior::Left);\n    }\n    ```", "```cpp\n    void AWarrior::Forward(float amount)\n    {\n        // Moves the player forward by an amount in forward \n        // direction\n        AddMovementInput(GetActorForwardVector(), amount);\n    }\n    ```", "```cpp\n    void AWarrior::Back(float amount)\n    {\n        AddMovementInput(-GetActorForwardVector(), amount);\n    }\n\n    void AWarrior::Right(float amount)\n    {\n        AddMovementInput(GetActorRightVector(), amount);\n    }\n\n    void AWarrior::Left(float amount)\n    {\n        AddMovementInput(-GetActorRightVector(), amount);\n    }\n    ```", "```cpp\n    protected:\n        // Called when the game starts or when spawned\n        virtual void BeginPlay() override;\n\n     // The movement from the previous frame\n     FVector2D lastInput;\n    ```", "```cpp\n    // Sets default values\n    AWarrior::AWarrior()\n    {\n        // Set this character to call Tick() every frame. You can turn  \n        // this off to improve performance if you don't need it.\n        PrimaryActorTick.bCanEverTick = true;\n\n        lastInput = FVector2D::ZeroVector;\n    }\n    ```", "```cpp\n    void AWarrior::Forward(float amount)\n    {\n        // We use a += of the amount added so that when the other  \n        // function modifying .Y (::Back()) affects lastInput, it won't   \n        // overwrite with 0's \n        lastInput.Y += amount;\n    }\n\n    void AWarrior::Back(float amount)\n    {\n        // In this case we are using -= since we are moving backwards\n        lastInput.Y -= amount;\n    }\n\n    void AWarrior::Right(float amount)\n    {\n        lastInput.X += amount;\n    }\n\n    void AWarrior::Left(float amount)\n    {\n        lastInput.X -= amount;\n    }\n    ```", "```cpp\n    // Called every frame\n    void AWarrior::Tick(float DeltaSeconds)\n    {\n        Super::Tick(DeltaSeconds);\n\n        float len = lastInput.Size();\n\n     // If the player's input is greater than 1, normalize it\n     if (len > 1.f)\n     {\n     lastInput /= len;\n     }\n\n     AddMovementInput(GetActorForwardVector(), lastInput.Y);\n     AddMovementInput(GetActorRightVector(), lastInput.X);\n\n     // Zero off last input values\n     lastInput = FVector2D(0.f, 0.f);\n    }\n    ```", "```cpp\n    // Called to bind functionality to input\n    void AWarrior::SetupPlayerInputComponent(UInputComponent* PlayerInputComponent)\n    {\n        Super::SetupPlayerInputComponent(PlayerInputComponent);\n\n        check(PlayerInputComponent);\n        PlayerInputComponent->BindAxis(\"Forward\", this, \n                                                       &AWarrior::Forward);\n        PlayerInputComponent->BindAxis(\"Back\", this, &AWarrior::Back);\n        PlayerInputComponent->BindAxis(\"Right\", this, &AWarrior::Right);\n        PlayerInputComponent->BindAxis(\"Left\", this, &AWarrior::Left);\n\n        PlayerInputComponent->BindAction(\"Jump\", IE_Pressed, this, \n                                                          &AWarrior::Jump);\n    }\n    ```", "```cpp\n    GetWorld()->GetFirstPlayerController()->PlayerInput \n    ```", "```cpp\n    UPlayerInput::AddEngineDefinedAxisMapping() \n    UPlayerInput::AddEngineDefinedActionMapping() \n    ```", "```cpp\n    #include \"GameFramework/PlayerInput.h\" \n    ```", "```cpp\n    FInputAxisKeyMapping backKey( \"Back\", EKeys::S, 1.f ); \n    ```", "```cpp\n    FInputActionKeyMapping jump(\"Jump\", EKeys::SpaceBar, 0, 0, 0, 0); \n    ```", "```cpp\n    GetWorld()->GetFirstPlayerController()->PlayerInput\n     ->AddAxisMapping( backKey ); // specific to a controller\n    ```", "```cpp\n    UPlayerInput::AddEngineDefinedActionMapping(jump );\n    ```", "```cpp\n    PlayerInputComponent->BindAxis(\"Back\", this, &AWarrior::Back); \n    PlayerInputComponent->BindAction(\"Jump\", IE_Pressed, this, &AWarrior::Jump \n               );\n    ```", "```cpp\n    UCLASS()\n    class CHAPTER_06_API AChapter_06GameModeBase : public AGameModeBase\n    {\n      GENERATED_BODY()\n\n    public:\n     UFUNCTION(BlueprintCallable, Category = UIFuncs)\n     void ButtonClicked()\n     {\n     UE_LOG(LogTemp, Warning, TEXT(\"UI Button Clicked\"));\n     }\n    };\n    ```", "```cpp\n    PublicDependencyModuleNames.AddRange(new string[] { \"Core\", \"CoreUObject\", \"Engine\", \"InputCore\", \"UMG\", \"Slate\", \"SlateCore\" });\n    ```", "```cpp\n    public:\n        UFUNCTION(BlueprintCallable, Category = UIFuncs)\n        void ButtonClicked()\n        {\n            UE_LOG(LogTemp, Warning, TEXT(\"UI Button Clicked\"));\n        }\n\n     void BeginPlay();\n\n     UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"UI\")\n     TSubclassOf<class UUserWidget> Widget;\n    ```", "```cpp\n    #include \"Chapter_06GameModeBase.h\"\n    #include \"Blueprint/UserWidget.h\"\n\n    void AChapter_06GameModeBase::BeginPlay()\n    {\n        Super::BeginPlay();\n\n        if(Widget)\n        {\n            UUserWidget* Menu = CreateWidget<UUserWidget>(GetWorld(), \n            Widget);\n\n            if(Menu)\n            {\n                Menu->AddToViewport();\n           GetWorld()->GetFirstPlayerController()->bShowMouseCursor = \n           true;\n            }\n\n        }\n\n    }\n    ```", "```cpp\n    #include \"Chapter_06GameModeBase.h\"\n\n    // ...\n\n    // Called to bind functionality to input\n    void AWarrior::SetupPlayerInputComponent(UInputComponent* PlayerInputComponent)\n    {\n        Super::SetupPlayerInputComponent(PlayerInputComponent);\n\n        check(PlayerInputComponent);\n        PlayerInputComponent->BindAxis(\"Forward\", this, \n        &AWarrior::Forward);\n        PlayerInputComponent->BindAxis(\"Back\", this, &AWarrior::Back);\n        PlayerInputComponent->BindAxis(\"Right\", this, &AWarrior::Right);\n        PlayerInputComponent->BindAxis(\"Left\", this, &AWarrior::Left);\n\n        PlayerInputComponent->BindAction(\"Jump\", IE_Pressed, this, \n        &AWarrior::Jump);\n\n        // Example of adding bindings via code instead of the \n        //  editor\n        FInputAxisKeyMapping backKey(\"Back\", EKeys::S, 1.f);\n        FInputActionKeyMapping jump(\"Jump\", EKeys::SpaceBar, 0, 0, \n        0, 0);\n\n        GetWorld()->GetFirstPlayerController()->PlayerInput-\n        >AddAxisMapping(backKey);\n        GetWorld()->GetFirstPlayerController()->PlayerInput-\n        >AddActionMapping(jump);\n\n     // Calling function for HotKey\n     auto GameMode = Cast<AChapter_06GameModeBase>(GetWorld()-\n        >GetAuthGameMode());\n     auto Func = &AChapter_06GameModeBase::ButtonClicked;\n\n     if(GameMode && Func)\n     {\n     PlayerInputComponent->BindAction(\"HotKey_UIButton_Spell\", \n                                             IE_Pressed, GameMode,  \n                                             Func);\n     }\n\n    }\n    ```", "```cpp\n\n    UFUNCTION(BlueprintNativeEvent, Category = Collision)\n    void OnOverlapsBegin(UPrimitiveComponent* Comp,\n                            AActor* OtherActor, \n                            UPrimitiveComponent* OtherComp,\n                            int32 OtherBodyIndex,\n                            bool bFromSweep, \n                            const FHitResult&SweepResult);\n\n    UFUNCTION(BlueprintNativeEvent, Category = Collision)\n    void OnOverlapsEnd(UPrimitiveComponent* Comp,\n                        AActor* OtherActor, \n                        UPrimitiveComponent* OtherComp,\n                        int32 OtherBodyIndex);\n\n    virtual void PostInitializeComponents() override;\n    ```", "```cpp\n        void AWarrior::OnOverlapsBegin_Implementation(\n            UPrimitiveComponent* Comp,\n            AActor* OtherActor, UPrimitiveComponent* OtherComp,\n            int32 OtherBodyIndex,\n            bool bFromSweep, const FHitResult&SweepResult)\n        {\n            UE_LOG(LogTemp, Warning, TEXT(\"Overlaps warrior\n            began\"));\n        }\n\n        void AWarrior::OnOverlapsEnd_Implementation(\n            UPrimitiveComponent* Comp,\n            AActor* OtherActor, UPrimitiveComponent* OtherComp,\n            int32 OtherBodyIndex)\n        {\n            UE_LOG(LogTemp, Warning, TEXT(\"Overlaps warrior\n            ended\"));\n        }\n        ```", "```cpp\n        #include \"Components/CapsuleComponent.h\"\n\n        // ...\n\n        void AWarrior::PostInitializeComponents()\n        {\n            Super::PostInitializeComponents();\n\n            if (RootComponent)\n            {\n                // Attach contact function to all bounding components. \n                GetCapsuleComponent()->OnComponentBeginOverlap.AddDynamic(this, &AWarrior::OnOverlapsBegin);\n                GetCapsuleComponent()->OnComponentEndOverlap.AddDynamic(this, &AWarrior::OnOverlapsEnd);\n            }\n        }\n        ```"]