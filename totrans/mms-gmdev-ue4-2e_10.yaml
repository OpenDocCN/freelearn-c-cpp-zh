- en: Packaging the Game (PC, Mobile)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Getting your game successfully out to an audience is quite possibly the most
    underrated and absolutely necessary skill in being a user of UE4\. In this chapter,
    we will explore a couple of those avenues. Every team and every project will need
    to explore their respective platforms, but the process is fairly similar across
    each, with their own specifics of course. For some it''s definitely more complicated
    to get to an audience than others, but hopefully by the end of this chapter you
    will have a good idea of the expectations to bring a product to just about any
    market. In this chapter we''ll cover:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Packaging the game for the PC
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Android and iOS setup
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When and how to make standalone installed versions of the game
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build and run on Android and iOS
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compare UE4's play vs. package builds
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tips to avoid downtime to builds
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Specific examples and references will be made with, and tested in, the Chapter
    10 GitHub branch, but as usual, the principles and processes described can be
    applied to any project. Additionally, the game will be built for and tested on
    at least two devices: Windows and Visual Studio installed to a Samsung Galaxy
    Note 8 for Android, and macOS and Xcode used to build and install on an iPad Mini
    3 for iOS. While neither of these setups or platforms is required for the lessons
    here, hopefully they provide valuable insight and information for those who do
    need it. And lastly, for any number of freely-available browsers (Chrome primarily
    here on both Mac and PC), an HTML5 build will be created and deployed: [https://github.com/PacktPublishing/Mastering-Game-Development-with-Unreal-Engine-4-Second-Edition/tree/Chapter-10](https://github.com/PacktPublishing/Mastering-Game-Development-with-Unreal-Engine-4-Second-Edition/tree/Chapter-10).'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: 'Engine version used: 4.19.2.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Know your platform(s)
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Of course, packaging a game is very different on every platform you can put
    it on. Building, submitting, and launching a game for iOS is a wholly different
    experience and process from PS4 or PC ,say, via Steam. Obviously the first question
    to ask is, "What is our audience, and which platforms will we deliver on?" The
    great part about UE4 is that of any platform you are likely to put out a game,
    it has a path and it can make a build that runs on that platform. We'll go through
    a few examples here, though Xbox and PS4 are different creatures as they require
    more direct involvement of their hosts (Microsoft and Sony, respectively), whereas
    the platforms here tend to be a little less restrictive.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: It's always good to partner up with someone who has experience in the final
    stages of setting up a project for deployment from a platform. For example, Microsoft
    has for Xbox and other areas Developer Account Managers (DAMs) who partner up
    with medium- and large-sized projects, and this is generally left to a studio's
    production team to establish contacts and facilitate communication with the development
    team. That said, for independent developers, this may sound obvious, but partner
    up if you can with other indie devs who have had success on your platform. The
    communities in these areas are generally quite inclusive and supportive. Everybody
    needs a little help sometimes, and contributing to, and being a part of, such
    relationships is another underrepresented advantage to successful game development.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 与有经验的人在项目部署的最后阶段合作总是好的。例如，微软为Xbox和其他领域设有开发者账户经理（DAMs），他们与中型和大型项目合作，这通常由工作室的生产团队负责建立联系并促进与开发团队的沟通。话虽如此，对于独立开发者来说，这可能听起来很显然，但如果你能与其他在平台上取得成功的独立开发者合作，那就更好了。这些领域的社区通常非常包容和支持。每个人有时都需要一点帮助，而参与并成为这些关系的一部分是游戏开发中另一个被忽视的优势。
- en: Setting up an installable PC version and general settings
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置可安装的PC版本和通用设置
- en: 'Probably the easiest platform for UE4 to package on is the PC (or Mac): you''re
    already running on one, and most likely the work you''ve done and tested in PIE
    will just "work" on PC when you package a build. That said, we''ll explore what
    it takes to prepare to make a version for the most popular mobile platforms of
    Android (an installable `.APK`) and iOS (a similar `.IPA`. Note that for the latter
    (iOS), to actually build and properly test, *unless making a blueprint only game, *requires
    an Apple developer license, which as of this writing costs about $99 for a one-year
    subscription. If this is one of your target platforms, it''s usually best to just
    get that license as early as possible; but for hobbyists and indie developers
    on a budget, please do note that deploying and testing on Android and HTML5 with
    the project presented here works just fine and is free.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 对于UE4来说，最简单的打包平台可能是PC（或Mac）：你已经在上面运行了，而且你很可能在PIE中完成并测试的工作，在打包构建时在PC上“直接”就能工作。尽管如此，我们仍将探讨为最流行的移动平台Android（可安装的`.APK`）和iOS（类似的`.IPA`）制作版本所需准备的工作。请注意，对于后者（iOS），除非制作的是蓝图仅游戏，否则实际上构建和正确测试需要苹果开发者许可证，截至本文撰写时，一年的订阅费用约为99美元。如果你的目标平台之一是它，通常最好是尽早获取该许可证；但对于预算有限的爱好者和独立开发者，请注意，使用本项目在此展示的部署和测试Android和HTML5完全可行且免费。
- en: For specific platform users, please note that a Windows 10 PC and Visual Studio
    were used to build, test, and deploy Android (which won't work from a Mac), and
    to build, test, and deploy iOS, a MacBook Pro with Xcode was used (and won't work
    on a PC without a Mac of some sort, as code changes have been made to our project).
    It is possible to build iOS builds from a PC with a Mac in the network; but this
    was often found to be problematic both in a professional mid-sized studio and
    team, and in home development for this book. If it works easily and reliably for
    you, congratulations, but the steps to set that up will only be presented in the *Further
    reading* section.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 对于特定平台用户，请注意，用于构建、测试和部署Android的是Windows 10 PC和Visual Studio（Mac无法使用），用于构建、测试和部署iOS的是配备Xcode的MacBook
    Pro（没有Mac的某些类型，代码更改已经应用到我们的项目中，将无法在PC上工作）。理论上，可以在网络中用Mac从PC构建iOS构建，但这种情况通常在专业中型工作室和团队中，以及本书的家用开发中都会遇到问题。如果你发现这很容易且可靠，恭喜你，但设置这些步骤的说明将仅在*进一步阅读*部分中提供。
- en: 'Before diving into an Android build, here are some general notes for in this
    case, both mobile platforms discussed here. First, for those curious, the next
    section will specifically address some of the differences between using the Play
    button in the editor on a device/platform combination compared to the packaging
    discussed in the rest of this section, so if that seems missing at this stage,
    just be patient. Here are some general settings for our project for cooking and
    packaging all platforms should simply have set, let''s look at here under Project/Packaging:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入Android构建之前，这里有一些关于本节中讨论的移动平台的通用注意事项。首先，对于那些好奇的人来说，下一节将具体说明在设备/平台组合的编辑器中使用播放按钮与本章其他部分讨论的打包之间的差异，所以如果在这个阶段看起来缺失，请耐心等待。以下是我们的项目在烹饪和打包所有平台时应设置的通用设置，让我们在这里查看项目/打包下的设置：
- en: '![](img/7bb061c5-e14b-41db-b056-4bf4970e34e2.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7bb061c5-e14b-41db-b056-4bf4970e34e2.png)'
- en: 'Since FrozenCove, for example, is only referenced "lightly" by name in the
    level-transition volume of our default map. We add it (and similarly MasteringTestMap)
    to the always-included list above:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，由于FrozenCove在我们的默认地图的关卡过渡音量中仅以轻描淡写的方式提及名称。我们将它（以及类似地MasteringTestMap）添加到上面始终包含的列表中：
- en: '![](img/f60868ec-bb49-459d-9e0f-7847c8450d77.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f60868ec-bb49-459d-9e0f-7847c8450d77.png)'
- en: Additionally, since she can be spawned potentially dynamically without a hard
    reference, we cook in the Countess's Meshes folder (really it's just as an example
    of what you may need to do when you have assets you may load and use that aren't
    hard-referenced in maps directly). If you browse around under each platform's
    options in the platform section of project settings, you'll notice they all have
    splash-screen textures you can set, and many have resolution or orientation options
    that your team can (and should) set as appropriate.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '此外，由于她可以在没有硬引用的情况下动态生成，我们在Countess的Meshes文件夹中处理（实际上它只是作为一个例子，说明当你有资产可能加载并使用但不在地图中直接硬引用时你可能需要做什么）。如果你在项目设置的“平台”部分下浏览每个平台的选项，你会注意到它们都有可以设置的启动画面纹理，许多都有分辨率或方向选项，你的团队可以（并且应该）根据需要设置。 '
- en: Android setup
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android设置
- en: 'Those things handled, we move on to building on for Android. First, go to your
    engine install''s `/Extras/AndroidWorks/Win64` folder and launch the executable
    there. This will automatically take you through what''s needed to successfully
    build a UE4 Android project, and the basic integration for Visual Studio. There
    are several differences between doing local Android builds and release-to-public
    Android builds regarding store keys (or an upload key, which I recommend), and
    what''s helpful to avoid me simply copying all these URLs into Further Reading
    is that Epic integrates links directly to the information you need in the project
    settings for the Android platform, see here:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 处理完这些事情后，我们继续为Android构建。首先，前往你的引擎安装目录下的`/Extras/AndroidWorks/Win64`文件夹并启动可执行文件。这将自动引导你完成成功构建UE4
    Android项目所需的所有步骤，以及Visual Studio的基本集成。在本地Android构建和发布到公共Android构建之间有几个差异，涉及到商店密钥（或上传密钥，我推荐使用），而有助于避免我简单地将所有这些URL复制到“进一步阅读”中的是，Epic直接将链接集成到Android平台项目设置中所需的信息，请参见这里：
- en: '![](img/fa1bb9cc-69ce-4e86-b416-d6ebf920d562.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/fa1bb9cc-69ce-4e86-b416-d6ebf920d562.png)'
- en: 'Those blue links should take you to up-to-date Android pages on those topics.
    There, you can read all about the various methods for singing and submitting your
    build to the Google Play store, and a link to signing up for a Key Store. As that
    process is then specific to a given project and the team''s choices (the links
    give good background I don''t need to repeat here), here are just a couple of
    quick general notes that will lead into the more technical next topic: for those
    who don''t know already, in the Play store, you can restrict your title by excluding
    certain types of hardware, specific phones, or devices, restrict it showing up
    only to users with a certain Android version (which should match the one you set
    here in Epic''s project settings!), and have a great deal of options on their
    end for what specifics your game is presented to, or restricted from. Typically,
    a project manager or other team member dedicated to this will set up those specifics
    on the Play web interface for your project, but from a technical standpoint, it
    is critical to know what those options mean, and how they are compatible with
    the builds you''re generating and uploading. Here is a specific example that was
    obvious to see:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 那些蓝色链接应带您到那些主题的最新Android页面。在那里，您可以阅读有关将构建提交到Google Play商店的各种方法的全部内容，以及一个注册密钥存储的链接。由于该过程是针对特定项目和团队选择的（链接提供了良好的背景，这里不需要重复），以下是一些快速的一般性说明，将引导到更技术性的下一个主题：对于那些还不知道的人来说，在Play商店中，您可以通过排除某些类型的硬件、特定手机或设备来限制您的标题，仅向具有特定Android版本的用户显示（这应该与您在这里Epic项目设置中设置的版本相匹配！），并且在其端有大量选项来决定您的游戏展示给用户的具体内容或限制内容。通常，项目经理或其他专注于此的团队成员将在项目的Play网络界面上设置这些具体细节，但从技术角度来看，了解这些选项的含义以及它们与您生成和上传的构建的兼容性是至关重要的。以下是一个明显的具体示例：
- en: 'One of the most basic loadouts for Android is building with open GL ES2, and
    ETC2 compression, the former in Project Settings (more on that in a moment), the
    latter selected here, with one of those choices being a multi-config you can tune:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Android 最基本的配置之一是使用 OpenGL ES2 和 ETC2 压缩构建，前者在项目设置中（稍后会有更多介绍），后者在此处选择，其中一个选择是可调的多配置：
- en: '![](img/b320ab52-ebbc-4996-bfe6-9a33c6d59e93.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b320ab52-ebbc-4996-bfe6-9a33c6d59e93.png)'
- en: 'Now, ETC2 is a very widely-distributed and supported texture-compression for
    Android, and ES2 is a base-level Open GL ES version on a huge swath of older phones
    and tablets. If built with these two settings, the build will fail when trying
    to compile shaders. If you simply change to a newer compression routine, ASTC,
    you''ll notice things build, but the Countess shows up with the grey-checkered
    default texture. Her material will not fail the build in ASTC, but it also is
    not rendered correctly in ES2\. The problem is easy to track down if you go check
    on one of those materials:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，ETC2 是 Android 上非常广泛分布和支持的纹理压缩，而 ES2 是在大量旧手机和平板电脑上使用的 OpenGL ES 的基础版本。如果你使用这两个设置构建，当尝试编译着色器时构建将失败。如果你简单地改为较新的压缩程序，ASTC，你会注意到构建成功，但Countess将显示默认的灰色格子纹理。在ASTC中，她的材质不会导致构建失败，但在ES2中也无法正确渲染。如果你检查这些材质中的一个，问题就很容易追踪：
- en: '![](img/26f83a74-6aea-4dd9-a72a-d59001019f62.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/26f83a74-6aea-4dd9-a72a-d59001019f62.png)'
- en: 'ES2 is no good here, the most obvious solution is to change to ES3.1 for our
    Android builds, as it recommends:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，ES2 并不是最佳选择，最明显的解决方案是将我们的 Android 构建改为 ES3.1，正如它所推荐的：
- en: '![](img/ffa67a27-8f84-4afd-9c67-b80eb2b3ed0a.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ffa67a27-8f84-4afd-9c67-b80eb2b3ed0a.png)'
- en: 'And in this case, our build builds and packages successfully and the Countess
    looks great on the Galaxy Note 8 used here (but that''s a high-end phone as of
    this writing and rather expensive). So what happens if your team wants the game
    to run on older devices? Well, that''s where the quality switch referenced in
    [Chapter 8](e80319fb-a34f-4648-9d86-0830791ac4d4.xhtml), *Shader Editing and Optimization*
    *Tips* comes in:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们的构建成功构建并打包，Countess 在这里使用的 Galaxy Note 8 上看起来很棒（但截至本文写作时，这是一款高端手机，相当昂贵）。那么，如果你的团队希望游戏在旧设备上运行会发生什么？嗯，这就是第8章中提到的质量开关发挥作用的地方，*着色器编辑和优化*
    *技巧*：
- en: '![](img/b10d76e3-7bfb-477e-b948-c3861c12b403.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b10d76e3-7bfb-477e-b948-c3861c12b403.png)'
- en: If you double-click that node (MF_CharacterEffects), you'll notice we're skipping
    only one specific aspect of the material (death fade); but that's often the case,
    if you make one project that needs to work across a large array of devices and
    capabilities. ES2 builds just skip the problematic feature entirely, and now ETC2/ES2
    builds are successful and run fine, though this did of course require saving several
    materials affected and rebuilding a ton of shaders, yet again, so beware of these
    kinds of risks! Note also, it's perfectly acceptable, and quite common, to have
    separate "SKUs" (think product model) of a game that can be delivered to different
    sets of hardware. A game doesn't have to be made to be tolerant of all possible
    hardware combinations it may be installed to, but it's desirable if you can, especially
    for multiplayer games. If maintaining this tolerance of high- and low-end potential
    platforms becomes unreasonable, set up one SKU for high-end, set up another for
    low-end, and just be ready to double-up (or otherwise multiply) your builds, and
    their testing time, every time you need to release updates.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你双击该节点（MF_CharacterEffects），你会注意到我们只跳过材质的一个特定方面（死亡渐变）；但这通常是情况，如果你制作一个需要在大量设备和功能上工作的项目。ES2
    构建会完全跳过有问题的功能，现在 ETC2/ES2 构建成功并运行良好，尽管这当然需要保存受影响的几个材质并重新构建大量着色器，因此要小心这些风险！注意，拥有可以交付到不同硬件集的独立“SKU”（想想产品型号）是完全可接受的，并且相当常见。一个游戏不需要为可能安装的所有可能的硬件组合制作，但如果你能这样做，特别是对于多人游戏来说，这是理想的。如果维护高端和低端潜在平台的这种兼容性变得不合理，为高端设置一个SKU，为低端设置另一个SKU，并且每次需要发布更新时都准备好加倍（或以其他方式乘以）你的构建及其测试时间。
- en: One last thing, you'll notice that Android has an option to package assets into
    `.apk` – for a very small project this might be ok, but for most projects (including
    even this small one) it's advisable not to use this. This will generate an .obb
    file for the project, which the Play store knows how to handle downloading and
    installing, and makes life much simpler especially if small `.apk` changes are
    needed (such as bug fixes) with no asset changes to the project. People can test
    and run, and you can submit builds much faster if you're not including hundreds
    of MB or 1+ GB of assets in every build and just working with a typical dozen-MB-sized
    `.apk`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一点，你会注意到Android有一个选项可以将资源打包到`.apk`文件中——对于一个非常小的项目来说，这可能可以接受，但对于大多数项目（包括这个小型项目）来说，建议不要使用这个选项。这将生成一个.obb文件，Play商店知道如何处理下载和安装，这在需要更改小`.apk`文件（如错误修复）而没有对项目资源进行更改时尤其方便。人们可以测试和运行，如果你不包含每个构建中数百MB或1+GB的资产，而只是使用典型的数十MB大小的`.apk`，你可以更快地提交构建。
- en: iOS setup
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: iOS设置
- en: 'Similar to Android''s Play Store Key, Apple has a rather arcane, but well-defined,
    process of generating keys and signing its .ipa packages to deploy to your iOS
    devices for testing. In the end, what you''re using should look something like
    this with nice "Valid" sections everywhere, for both a development signing Provisioning
    Profile, and Certificate, as well as various Ad-hoc or other production profile/certificate
    combinations:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 与Android的Play Store Key类似，苹果有一个相当复杂但定义明确的流程来生成密钥并为其.ipa包签名，以便部署到iOS设备进行测试。最终，你所使用的应该看起来像这样，到处都有“有效”的部分，包括开发签名配置文件和证书，以及各种Ad-hoc或其他生产配置文件/证书组合：
- en: '![](img/6a93c848-8b68-4404-b7d3-baef66bd5843.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6a93c848-8b68-4404-b7d3-baef66bd5843.png)'
- en: Links for all of Apple's steps for this are listed here, since Epic does not
    link them directly as it does for Android. Note, you'll need a valid Developer
    Account with Apple for most of these links.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 所有关于苹果公司这一步骤的链接都列在这里，因为Epic没有像Android那样直接提供链接。注意，你需要一个有效的苹果开发者账户才能访问这些链接中的大多数。
- en: 'First, you will need an AppID, make sure that *if* you use something such as
    "com.mastering.*" that in your project settings you don''t set it to "com.mastering"
    or this will not be found, it needs to be "com.mastering.dev" or something for
    the provisioning profile to match your certificate (more on that from Apple in
    a moment): [https://developer.apple.com/account/ios/identifier/bundle](https://developer.apple.com/account/ios/identifier/bundle)'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，你需要一个AppID，确保如果你使用类似于“com.mastering.*”这样的格式，在你的项目设置中不要将其设置为“com.mastering”，否则将无法找到，它需要是“com.mastering.dev”或其他格式，以便与配置文件匹配你的证书（更多关于这一点，请参考苹果公司的说明）：[https://developer.apple.com/account/ios/identifier/bundle](https://developer.apple.com/account/ios/identifier/bundle)
- en: Set up at least one device (such as test iPads or iPhones): [https://developer.apple.com/account/ios/device/ipad](https://developer.apple.com/account/ios/device/ipad)
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 至少设置一个设备（例如测试iPad或iPhone）：[https://developer.apple.com/account/ios/device/ipad](https://developer.apple.com/account/ios/device/ipad)
- en: You will need to get familiar with making a development (you only get one of
    these) and Ad-hoc/Store distribution certificates. It's recommended to get started
    with the development certificate if this is your first time going through the
    process with an Apple build: [https://developer.apple.com/account/ios/certificate/create](https://developer.apple.com/account/ios/certificate/create)
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你需要熟悉制作开发（你只能获得一个）和Ad-hoc/Store分发证书。如果你是第一次使用苹果构建流程，建议从开发证书开始：[https://developer.apple.com/account/ios/certificate/create](https://developer.apple.com/account/ios/certificate/create)
- en: And then similarly, you'll want to get accustomed to making Provisioning Profiles –
    both a single development one for your team typically, and then one or more for
    Ad-hoc/Store distribution again: [https://developer.apple.com/account/ios/profile/](https://developer.apple.com/account/ios/profile/)
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后同样，你将想要熟悉制作配置文件——通常为你的团队制作一个单独的开发配置文件，然后为Ad-hoc/Store分发制作一个或多个：[https://developer.apple.com/account/ios/profile/](https://developer.apple.com/account/ios/profile/)
- en: Download these from the links by clicking on them, and import them into UE4\.
    Hopefully all goes well, but for what it's worth, in years of development, I have
    never seen someone go through this process and have it succeed on the first try.
    Fortunately, there are thousands of others out there who have probably hit the
    same snags you will, and after a bit of searching, solutions can typically be
    found online for whatever issues stop you from having a smooth, successful setup
    here.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击以下链接下载这些内容，并将它们导入UE4。希望一切顺利，但就我所知，在多年的开发中，我从未见过有人第一次尝试这个过程就成功。幸运的是，有成千上万的其他人可能遇到过你将会遇到的相同问题，经过一番搜索，通常可以在网上找到解决任何阻止你在这里顺利、成功设置的问题的解决方案。
- en: How to build, test, and deploy
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何构建、测试和部署
- en: This section should move us rather quickly through proper device testing on
    our mobile (or HTML5 and PC) platforms now that all the setup is taken care of.
    As noted in the *iOS* section, don't get frustrated if things don't immediately
    work correctly, every team has pains getting these things setup and working properly
    initially, but once they are, it's typically a much smoother process to simply
    maintain and modify those build settings and processes going forward. So let's
    get to it!
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在所有设置都已完成，这一部分应该能让我们迅速通过在移动（或HTML5和PC）平台上的正确设备测试。正如在*iOS*部分中提到的，如果事情没有立即正确工作，请不要沮丧，每个团队在最初设置和正确工作这些事情时都会遇到困难，但一旦完成，通常维护和修改这些构建设置和流程的过程会变得更加顺畅。所以，让我们开始吧！
- en: UE4’s play options vs package project
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: UE4的播放选项与打包项目
- en: 'OK, one last interruption before we actually make a few builds and test those
    on their intended platforms: you may be wondering, "What''s the difference between
    just using the Play button in the editor and having it do all the work getting
    it onto my device compared to this packaging business?" Well in a very rough,
    very quick nutshell: the Play button will build, cook, and deploy to a platform
    and does a good job of it, which is very helpful for rapid testing. However, it
    may put files in a different place than your standalone build does when installed,
    and uses some specific settings. For example, needing to be able to "attach" to
    the game from an external debugger for iOS on a Mac. You typically *must* use
    a developer certificate/provisioning profile in your settings when using the Play
    button, and specifically don''t/can''t have that Entitlement setting on a product
    you upload to Apple to deploy to an audience. So once again, apply common sense
    here: if you are just making quick changes and want a simple test on the hardware,
    if the Play button is working for your project and platform, feel free to use
    it. When you''re expecting to actually deliver to a store to deploy, make standalone
    builds and test with those.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，在我们实际进行一些构建并在目标平台上测试之前，还有一个最后的打扰：你可能想知道，“使用编辑器中的播放按钮直接将内容上传到我的设备，与这个打包业务相比，两者之间有什么区别？”嗯，非常粗略、非常简短地说：播放按钮会构建、编译并将内容部署到平台，并且做得相当不错，这对于快速测试非常有帮助。然而，当安装时，它可能将文件放在与你的独立构建不同的位置，并使用一些特定的设置。例如，可能需要能够从Mac上的iOS外部调试器“附加”到游戏。通常*必须*在你的设置中使用开发者证书/配置文件，当使用播放按钮时，并且特别不要/不能在您上传到苹果公司以部署给受众的产品上设置该权限设置。所以，再次强调，这里要运用常识：如果你只是进行快速修改并想在硬件上进行简单测试，如果播放按钮对你的项目和平台有效，请随意使用它。当你期望将内容实际交付给商店进行部署时，请创建独立构建并使用这些进行测试。
- en: When and how to build and test on device
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 何时以及如何在设备上构建和测试
- en: When your team feels they need to start testing on various platforms is really
    dependent on your entire development philosophy and process. Most major studios
    already have these processes in place, and have specific milestone gates to pass,
    some of which will likely specifically require standalone builds on the platform(s)
    the game will be run on, other stages may require a simple demonstration of gameplay
    and art assets, which do not require this. Many independent developers will want
    to simply have the shortest iteration time possible for getting basic concepts
    proven out (much like this book had done up to this section), which is by far
    the most streamlined for simply testing in the editor in PIE on a PC or Mac. However,
    if you're reading this section at all, it means you have a need and interest in
    eventually running on devices, and the best advice here is, if at all possible,
    have those builds working from day one of development, and build, deploy, and
    test regularly. This is another aspect of development often left neglected, or
    dormant, for too long, and then when needed most and used, causes unforeseen problems.
    It's definitely easier to develop day to day without taking the time to make standalone
    builds (or even use the Play button); but the longer a team goes without doing
    these, the greater the risk that when they do, there's a problem, and those problems
    are typically ones that prevent release entirely. So build, deploy, and test as
    often as possible!
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的团队觉得需要在各种平台上开始测试时，这实际上取决于你整个的开发哲学和流程。大多数主要工作室已经建立了这些流程，并且有特定的里程碑关卡需要通过，其中一些可能特别需要游戏将在其上运行的平台（或平台组合）上的独立构建，而其他阶段可能只需要展示游戏玩法和艺术资源，这不需要这样做。许多独立开发者可能只想尽可能缩短迭代时间，以验证基本概念（就像这本书到目前为止所做的那样），这在PC或Mac上使用PIE编辑器进行测试时是最简化的。然而，如果你在阅读这一节，这意味着你最终需要在设备上运行，并且这里最好的建议是，如果可能的话，从开发的第一天开始就使这些构建工作，并定期进行构建、部署和测试。这是开发中经常被忽视或长期处于休眠状态的一个方面，然后在最需要和最使用时，会引发不可预见的问题。当然，不花时间制作独立构建（甚至使用播放按钮）进行日常开发要容易得多；但一个团队不做这些的时间越长，当它们最终做的时候出现问题的风险就越大，这些问题通常是完全阻止发布的问题。所以，尽可能经常地进行构建、部署和测试！
- en: Making standalone builds and installing them
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 制作独立构建并安装它们
- en: 'Windows: As there is really nothing to it, building a PC package is as simple
    as File -> Package Project | Windows | Win32 (or Win64) and similar for Mac builds.
    This gives you an executable and your built assets in folders, and at this stage,
    uploading to a product, such as Steam, for delivery should be very simple. Given
    this, we won''t really spend any time on it; but if you simply want to test the
    building process, this is the fastest, easiest, simplest way to do so. If you
    check under Project Settings | Platforms | Windows, you''ll also notice very few
    options, so without further ado, we''ll move on to packaging Android and iOS.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Windows：由于实际上没有什么复杂的，制作PC包就像 文件 -> 包含项目 | Windows | Win32 （或 Win64）一样简单，对于Mac构建也是如此。这会给你一个可执行文件和你的构建资源文件夹，在这个阶段，上传到产品，如Steam进行交付应该非常简单。鉴于这一点，我们不会在这个问题上花费太多时间；但如果你只是想测试构建过程，这是最快、最简单、最简单的方法。如果你在项目设置
    | 平台 | Windows下检查，你也会注意到选项非常少，所以我们不再赘述，接下来我们将转向Android和iOS的打包。
- en: 'Android: Selecting your preferred texture-compression type under File | Package
    Project | Android (see the picture of the dropdown in the Setup section) will
    generate an .apk file, by default an .obb file, and two .bat files to the folder
    specified when you clicked to start that build. The `.bat` files are very clearly
    labeled: one for uninstalling the project, the other for installing it (note that
    the latter will perform the former to make sure you get a clean install of a project
    with the same AppID each time). Assuming you got your device set up for debugging
    as [https://developer.android.com/studio/run/device ](https://developer.android.com/studio/run/device)and
    can test that it is being seen in a command-line use of "adb devices," then that
    .bat file will automatically install directly to that device (if you have only
    one device present, which is typically the case).'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Android：在“文件”|“包项目”|“Android”下选择你偏好的纹理压缩类型（参见设置部分下拉菜单的图片），这将生成一个.apk文件，默认是一个.obb文件，以及两个.bat文件到你在点击开始构建时指定的文件夹。`.bat`文件标签非常清晰：一个用于卸载项目，另一个用于安装它（注意，后者将执行前者以确保每次都获得具有相同AppID的项目的干净安装）。假设你已经将设备设置为调试模式，如[https://developer.android.com/studio/run/device](https://developer.android.com/studio/run/device)所示，并且可以使用“adb
    devices”命令行测试它是否被识别，那么那个.bat文件将自动直接安装到该设备（如果你只有一个设备，这通常是情况），
- en: 'iOS: Selecting File | Package Project | iOS will generate a .ipa file for you
    in the folder you specified. Typically, this is then simply added to your device
    in XCode''s Devices window with the + button in the Devices and Simulators window.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: iOS：选择“文件”|“包项目”|“iOS”将在你指定的文件夹中为你生成一个.ipa文件。通常，然后只需将其添加到XCode的设备窗口中，使用设备窗口中的+按钮即可。
- en: HTML5 will bundle up all the JavaScript and everything else it uses into a package
    that can be dragged into a browser to launch it. How you deliver this to users
    is up to you from a web-distribution standpoint, and not explored here further.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5会将所有JavaScript以及它使用的其他内容打包成一个可以拖入浏览器中启动的包。你如何从网络分发角度向用户交付这个包取决于你，这里不再进一步探讨。
- en: Once these builds are on the device, they can be run as any other more traditionally
    installed by download from their respective store. Thankfully, both Apple and
    Google give staging areas to do test runs of uploaded builds, also, so the whole
    pipeline for those platforms can be tested fully before then being sent for live
    submission/approval.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦这些构建在设备上，它们就可以像其他传统安装一样运行，通过从各自的商店下载。幸运的是，苹果和谷歌都提供了测试上传构建的临时区域，因此可以在提交/批准之前完全测试这些平台的整个流程。
- en: Avoiding rebuild-hell on platforms near releases
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 避免在发布前附近的平台上的重建地狱
- en: One final note is simply a reminder to use common sense when considering how
    to test. Are your changes ones that might affect graphics on different platforms
    (material edits, complex new shader changes, or making changes to project settings
    that might affect such features)? Then test them on a representative device. Are
    your changes solely gameplay (note that things such as using the filesystem can
    be problematic on different platforms, and at this stage of the GitHub project,
    there is definitely a bug in load/save on devices I can hopefully address soon,
    for example)? It's typically best to iterate these quickly on your development
    platform; but when ultimately done, especially at least overnight, build for your
    actual platform and make sure there are no surprises. On a large project, spending
    an hour to cook assets every time you want to test any small change is foolish,
    but neglecting your actual intended hardware platforms is too.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一点提醒是在考虑如何测试时要使用常识。你的更改是否可能影响不同平台上的图形（如材质编辑、复杂的新着色器更改或更改可能影响此类功能的项目设置）？那么请在代表设备上测试它们。你的更改是否仅限于游戏玩法（请注意，使用文件系统等事物在不同平台上可能会有问题，在GitHub项目的这个阶段，确实存在我希望能尽快解决的加载/保存设备上的错误，例如）？通常最好在开发平台上快速迭代这些更改；但最终完成时，至少要过夜，为实际平台构建，并确保没有意外。在一个大型项目中，每次你想测试任何小的更改时都花费一个小时来处理资产是愚蠢的，但忽视你实际的目标硬件平台则过于粗心。
- en: Keep in mind that there are some very good tools and techniques out there for
    automating a lot of these process and centralizing builds and deployment on a
    single high-powered machine that can then be readily accessed and used by the
    whole team any time. For example, see Jenkins and HockeyApp in the *Further reading*
    section. For a build-automation platform such as Jenkins, setup can often be as
    simple as watching the Output Window as you package via the Unreal Editor, and
    copying each of the execution lines it uses into steps there. If you have a large
    project, large team, or large number of target platforms, this type of automation
    is highly recommended.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，现在有一些非常好的工具和技术可以自动化许多这些流程，并在单个高性能机器上集中构建和部署，这样整个团队都可以随时轻松访问和使用。例如，请参阅“进一步阅读”部分中的
    Jenkins 和 HockeyApp。对于像 Jenkins 这样的构建自动化平台，设置通常可以简单到在通过 Unreal 编辑器打包时观察输出窗口，并将它使用的每条执行行复制到那里的步骤中。如果你有一个大型项目、大型团队或大量目标平台，这种自动化类型非常推荐。
- en: Summary
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: While far from the most glamorous or exciting fields of game development, building
    and deploying is absolutely critical for any project that you want to reach an
    audience outside of your own desk. Writing code and building shaders may be more
    immediately gratifying areas of game development, but if you can't get building
    and releasing on a platform right, it's all for naught. Knowing how to set up
    and maintain these processes is an absolutely critical step in mastering UE4 development.
    But coming up, a return to some of the beautiful visuals UE4 has to offer!
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然离游戏开发中最华丽或最激动人心的领域还远，但构建和部署对于任何希望触及除自己桌面之外受众的项目来说绝对是至关重要的。编写代码和构建着色器可能是游戏开发中更直接令人满意的部分，但如果你不能正确地构建和发布到平台，那么所有努力都将付诸东流。了解如何设置和维护这些流程是掌握
    UE4 开发的绝对关键步骤。但接下来，我们将回到 UE4 提供的一些美丽视觉效果上！
- en: Questions
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Why is determining target platforms early a necessary step for any project?
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么确定目标平台是任何项目的必要步骤？
- en: What is the reason behind adding maps and content folders to the always-cook
    lists?
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么将地图和内容文件夹添加到始终烹饪列表中是有原因的？
- en: What are some risks to adding them?
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加它们可能存在哪些风险？
- en: What is the order between iOS, PC, and Android from least setup complexity to
    highest?
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从最低到最高的设置复杂度顺序是 iOS、PC 和 Android 吗？
- en: What is the advantage to having a single "SKU" for your product? What problems
    are fixed by having multiple?
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 拥有一个单一“SKU”的产品有什么优势？拥有多个 SKU 解决了哪些问题？
- en: What four things are needed in order to have the pieces needed for an iOS build?
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了构建 iOS，需要哪些四个要素？
- en: What are some advantages and disadvantages to fixes, such as quality-level switches,
    in shaders?
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在着色器中，对修复（如质量级别开关）的一些优缺点是什么？
- en: How can build and iteration time be mitigated for a large project?
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何减轻大型项目的构建和迭代时间？
- en: Further reading
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Building iOS from Windows with a Mac on the network:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在网络上的 Mac 上从 Windows 构建iOS：
- en: '[https://docs.unrealengine.com/en-us/Platforms/iOS/Windows](https://docs.unrealengine.com/en-us/Platforms/iOS/Windows)'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.unrealengine.com/en-us/Platforms/iOS/Windows](https://docs.unrealengine.com/en-us/Platforms/iOS/Windows)'
- en: 'Jenkins build-automation platform:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins 构建自动化平台：
- en: '[https://jenkins.io/doc/](https://jenkins.io/doc/)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://jenkins.io/doc/](https://jenkins.io/doc/)'
- en: 'HockyApp device deployment:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: HockeyApp 设备部署：
- en: '[https://hockeyapp.net/](https://hockeyapp.net/)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://hockeyapp.net/](https://hockeyapp.net/)'
