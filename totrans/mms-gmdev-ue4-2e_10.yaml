- en: Packaging the Game (PC, Mobile)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Getting your game successfully out to an audience is quite possibly the most
    underrated and absolutely necessary skill in being a user of UE4\. In this chapter,
    we will explore a couple of those avenues. Every team and every project will need
    to explore their respective platforms, but the process is fairly similar across
    each, with their own specifics of course. For some it''s definitely more complicated
    to get to an audience than others, but hopefully by the end of this chapter you
    will have a good idea of the expectations to bring a product to just about any
    market. In this chapter we''ll cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Packaging the game for the PC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Android and iOS setup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When and how to make standalone installed versions of the game
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build and run on Android and iOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compare UE4's play vs. package builds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tips to avoid downtime to builds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Specific examples and references will be made with, and tested in, the Chapter
    10 GitHub branch, but as usual, the principles and processes described can be
    applied to any project. Additionally, the game will be built for and tested on
    at least two devices: Windows and Visual Studio installed to a Samsung Galaxy
    Note 8 for Android, and macOS and Xcode used to build and install on an iPad Mini
    3 for iOS. While neither of these setups or platforms is required for the lessons
    here, hopefully they provide valuable insight and information for those who do
    need it. And lastly, for any number of freely-available browsers (Chrome primarily
    here on both Mac and PC), an HTML5 build will be created and deployed: [https://github.com/PacktPublishing/Mastering-Game-Development-with-Unreal-Engine-4-Second-Edition/tree/Chapter-10](https://github.com/PacktPublishing/Mastering-Game-Development-with-Unreal-Engine-4-Second-Edition/tree/Chapter-10).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Engine version used: 4.19.2.'
  prefs: []
  type: TYPE_NORMAL
- en: Know your platform(s)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Of course, packaging a game is very different on every platform you can put
    it on. Building, submitting, and launching a game for iOS is a wholly different
    experience and process from PS4 or PC ,say, via Steam. Obviously the first question
    to ask is, "What is our audience, and which platforms will we deliver on?" The
    great part about UE4 is that of any platform you are likely to put out a game,
    it has a path and it can make a build that runs on that platform. We'll go through
    a few examples here, though Xbox and PS4 are different creatures as they require
    more direct involvement of their hosts (Microsoft and Sony, respectively), whereas
    the platforms here tend to be a little less restrictive.
  prefs: []
  type: TYPE_NORMAL
- en: It's always good to partner up with someone who has experience in the final
    stages of setting up a project for deployment from a platform. For example, Microsoft
    has for Xbox and other areas Developer Account Managers (DAMs) who partner up
    with medium- and large-sized projects, and this is generally left to a studio's
    production team to establish contacts and facilitate communication with the development
    team. That said, for independent developers, this may sound obvious, but partner
    up if you can with other indie devs who have had success on your platform. The
    communities in these areas are generally quite inclusive and supportive. Everybody
    needs a little help sometimes, and contributing to, and being a part of, such
    relationships is another underrepresented advantage to successful game development.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up an installable PC version and general settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Probably the easiest platform for UE4 to package on is the PC (or Mac): you''re
    already running on one, and most likely the work you''ve done and tested in PIE
    will just "work" on PC when you package a build. That said, we''ll explore what
    it takes to prepare to make a version for the most popular mobile platforms of
    Android (an installable `.APK`) and iOS (a similar `.IPA`. Note that for the latter
    (iOS), to actually build and properly test, *unless making a blueprint only game, *requires
    an Apple developer license, which as of this writing costs about $99 for a one-year
    subscription. If this is one of your target platforms, it''s usually best to just
    get that license as early as possible; but for hobbyists and indie developers
    on a budget, please do note that deploying and testing on Android and HTML5 with
    the project presented here works just fine and is free.'
  prefs: []
  type: TYPE_NORMAL
- en: For specific platform users, please note that a Windows 10 PC and Visual Studio
    were used to build, test, and deploy Android (which won't work from a Mac), and
    to build, test, and deploy iOS, a MacBook Pro with Xcode was used (and won't work
    on a PC without a Mac of some sort, as code changes have been made to our project).
    It is possible to build iOS builds from a PC with a Mac in the network; but this
    was often found to be problematic both in a professional mid-sized studio and
    team, and in home development for this book. If it works easily and reliably for
    you, congratulations, but the steps to set that up will only be presented in the *Further
    reading* section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before diving into an Android build, here are some general notes for in this
    case, both mobile platforms discussed here. First, for those curious, the next
    section will specifically address some of the differences between using the Play
    button in the editor on a device/platform combination compared to the packaging
    discussed in the rest of this section, so if that seems missing at this stage,
    just be patient. Here are some general settings for our project for cooking and
    packaging all platforms should simply have set, let''s look at here under Project/Packaging:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7bb061c5-e14b-41db-b056-4bf4970e34e2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Since FrozenCove, for example, is only referenced "lightly" by name in the
    level-transition volume of our default map. We add it (and similarly MasteringTestMap)
    to the always-included list above:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f60868ec-bb49-459d-9e0f-7847c8450d77.png)'
  prefs: []
  type: TYPE_IMG
- en: Additionally, since she can be spawned potentially dynamically without a hard
    reference, we cook in the Countess's Meshes folder (really it's just as an example
    of what you may need to do when you have assets you may load and use that aren't
    hard-referenced in maps directly). If you browse around under each platform's
    options in the platform section of project settings, you'll notice they all have
    splash-screen textures you can set, and many have resolution or orientation options
    that your team can (and should) set as appropriate.
  prefs: []
  type: TYPE_NORMAL
- en: Android setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Those things handled, we move on to building on for Android. First, go to your
    engine install''s `/Extras/AndroidWorks/Win64` folder and launch the executable
    there. This will automatically take you through what''s needed to successfully
    build a UE4 Android project, and the basic integration for Visual Studio. There
    are several differences between doing local Android builds and release-to-public
    Android builds regarding store keys (or an upload key, which I recommend), and
    what''s helpful to avoid me simply copying all these URLs into Further Reading
    is that Epic integrates links directly to the information you need in the project
    settings for the Android platform, see here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fa1bb9cc-69ce-4e86-b416-d6ebf920d562.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Those blue links should take you to up-to-date Android pages on those topics.
    There, you can read all about the various methods for singing and submitting your
    build to the Google Play store, and a link to signing up for a Key Store. As that
    process is then specific to a given project and the team''s choices (the links
    give good background I don''t need to repeat here), here are just a couple of
    quick general notes that will lead into the more technical next topic: for those
    who don''t know already, in the Play store, you can restrict your title by excluding
    certain types of hardware, specific phones, or devices, restrict it showing up
    only to users with a certain Android version (which should match the one you set
    here in Epic''s project settings!), and have a great deal of options on their
    end for what specifics your game is presented to, or restricted from. Typically,
    a project manager or other team member dedicated to this will set up those specifics
    on the Play web interface for your project, but from a technical standpoint, it
    is critical to know what those options mean, and how they are compatible with
    the builds you''re generating and uploading. Here is a specific example that was
    obvious to see:'
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the most basic loadouts for Android is building with open GL ES2, and
    ETC2 compression, the former in Project Settings (more on that in a moment), the
    latter selected here, with one of those choices being a multi-config you can tune:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b320ab52-ebbc-4996-bfe6-9a33c6d59e93.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, ETC2 is a very widely-distributed and supported texture-compression for
    Android, and ES2 is a base-level Open GL ES version on a huge swath of older phones
    and tablets. If built with these two settings, the build will fail when trying
    to compile shaders. If you simply change to a newer compression routine, ASTC,
    you''ll notice things build, but the Countess shows up with the grey-checkered
    default texture. Her material will not fail the build in ASTC, but it also is
    not rendered correctly in ES2\. The problem is easy to track down if you go check
    on one of those materials:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/26f83a74-6aea-4dd9-a72a-d59001019f62.png)'
  prefs: []
  type: TYPE_IMG
- en: 'ES2 is no good here, the most obvious solution is to change to ES3.1 for our
    Android builds, as it recommends:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ffa67a27-8f84-4afd-9c67-b80eb2b3ed0a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And in this case, our build builds and packages successfully and the Countess
    looks great on the Galaxy Note 8 used here (but that''s a high-end phone as of
    this writing and rather expensive). So what happens if your team wants the game
    to run on older devices? Well, that''s where the quality switch referenced in
    [Chapter 8](e80319fb-a34f-4648-9d86-0830791ac4d4.xhtml), *Shader Editing and Optimization*
    *Tips* comes in:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b10d76e3-7bfb-477e-b948-c3861c12b403.png)'
  prefs: []
  type: TYPE_IMG
- en: If you double-click that node (MF_CharacterEffects), you'll notice we're skipping
    only one specific aspect of the material (death fade); but that's often the case,
    if you make one project that needs to work across a large array of devices and
    capabilities. ES2 builds just skip the problematic feature entirely, and now ETC2/ES2
    builds are successful and run fine, though this did of course require saving several
    materials affected and rebuilding a ton of shaders, yet again, so beware of these
    kinds of risks! Note also, it's perfectly acceptable, and quite common, to have
    separate "SKUs" (think product model) of a game that can be delivered to different
    sets of hardware. A game doesn't have to be made to be tolerant of all possible
    hardware combinations it may be installed to, but it's desirable if you can, especially
    for multiplayer games. If maintaining this tolerance of high- and low-end potential
    platforms becomes unreasonable, set up one SKU for high-end, set up another for
    low-end, and just be ready to double-up (or otherwise multiply) your builds, and
    their testing time, every time you need to release updates.
  prefs: []
  type: TYPE_NORMAL
- en: One last thing, you'll notice that Android has an option to package assets into
    `.apk` – for a very small project this might be ok, but for most projects (including
    even this small one) it's advisable not to use this. This will generate an .obb
    file for the project, which the Play store knows how to handle downloading and
    installing, and makes life much simpler especially if small `.apk` changes are
    needed (such as bug fixes) with no asset changes to the project. People can test
    and run, and you can submit builds much faster if you're not including hundreds
    of MB or 1+ GB of assets in every build and just working with a typical dozen-MB-sized
    `.apk`.
  prefs: []
  type: TYPE_NORMAL
- en: iOS setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Similar to Android''s Play Store Key, Apple has a rather arcane, but well-defined,
    process of generating keys and signing its .ipa packages to deploy to your iOS
    devices for testing. In the end, what you''re using should look something like
    this with nice "Valid" sections everywhere, for both a development signing Provisioning
    Profile, and Certificate, as well as various Ad-hoc or other production profile/certificate
    combinations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6a93c848-8b68-4404-b7d3-baef66bd5843.png)'
  prefs: []
  type: TYPE_IMG
- en: Links for all of Apple's steps for this are listed here, since Epic does not
    link them directly as it does for Android. Note, you'll need a valid Developer
    Account with Apple for most of these links.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, you will need an AppID, make sure that *if* you use something such as
    "com.mastering.*" that in your project settings you don''t set it to "com.mastering"
    or this will not be found, it needs to be "com.mastering.dev" or something for
    the provisioning profile to match your certificate (more on that from Apple in
    a moment): [https://developer.apple.com/account/ios/identifier/bundle](https://developer.apple.com/account/ios/identifier/bundle)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set up at least one device (such as test iPads or iPhones): [https://developer.apple.com/account/ios/device/ipad](https://developer.apple.com/account/ios/device/ipad)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will need to get familiar with making a development (you only get one of
    these) and Ad-hoc/Store distribution certificates. It's recommended to get started
    with the development certificate if this is your first time going through the
    process with an Apple build: [https://developer.apple.com/account/ios/certificate/create](https://developer.apple.com/account/ios/certificate/create)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: And then similarly, you'll want to get accustomed to making Provisioning Profiles –
    both a single development one for your team typically, and then one or more for
    Ad-hoc/Store distribution again: [https://developer.apple.com/account/ios/profile/](https://developer.apple.com/account/ios/profile/)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download these from the links by clicking on them, and import them into UE4\.
    Hopefully all goes well, but for what it's worth, in years of development, I have
    never seen someone go through this process and have it succeed on the first try.
    Fortunately, there are thousands of others out there who have probably hit the
    same snags you will, and after a bit of searching, solutions can typically be
    found online for whatever issues stop you from having a smooth, successful setup
    here.
  prefs: []
  type: TYPE_NORMAL
- en: How to build, test, and deploy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section should move us rather quickly through proper device testing on
    our mobile (or HTML5 and PC) platforms now that all the setup is taken care of.
    As noted in the *iOS* section, don't get frustrated if things don't immediately
    work correctly, every team has pains getting these things setup and working properly
    initially, but once they are, it's typically a much smoother process to simply
    maintain and modify those build settings and processes going forward. So let's
    get to it!
  prefs: []
  type: TYPE_NORMAL
- en: UE4’s play options vs package project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'OK, one last interruption before we actually make a few builds and test those
    on their intended platforms: you may be wondering, "What''s the difference between
    just using the Play button in the editor and having it do all the work getting
    it onto my device compared to this packaging business?" Well in a very rough,
    very quick nutshell: the Play button will build, cook, and deploy to a platform
    and does a good job of it, which is very helpful for rapid testing. However, it
    may put files in a different place than your standalone build does when installed,
    and uses some specific settings. For example, needing to be able to "attach" to
    the game from an external debugger for iOS on a Mac. You typically *must* use
    a developer certificate/provisioning profile in your settings when using the Play
    button, and specifically don''t/can''t have that Entitlement setting on a product
    you upload to Apple to deploy to an audience. So once again, apply common sense
    here: if you are just making quick changes and want a simple test on the hardware,
    if the Play button is working for your project and platform, feel free to use
    it. When you''re expecting to actually deliver to a store to deploy, make standalone
    builds and test with those.'
  prefs: []
  type: TYPE_NORMAL
- en: When and how to build and test on device
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When your team feels they need to start testing on various platforms is really
    dependent on your entire development philosophy and process. Most major studios
    already have these processes in place, and have specific milestone gates to pass,
    some of which will likely specifically require standalone builds on the platform(s)
    the game will be run on, other stages may require a simple demonstration of gameplay
    and art assets, which do not require this. Many independent developers will want
    to simply have the shortest iteration time possible for getting basic concepts
    proven out (much like this book had done up to this section), which is by far
    the most streamlined for simply testing in the editor in PIE on a PC or Mac. However,
    if you're reading this section at all, it means you have a need and interest in
    eventually running on devices, and the best advice here is, if at all possible,
    have those builds working from day one of development, and build, deploy, and
    test regularly. This is another aspect of development often left neglected, or
    dormant, for too long, and then when needed most and used, causes unforeseen problems.
    It's definitely easier to develop day to day without taking the time to make standalone
    builds (or even use the Play button); but the longer a team goes without doing
    these, the greater the risk that when they do, there's a problem, and those problems
    are typically ones that prevent release entirely. So build, deploy, and test as
    often as possible!
  prefs: []
  type: TYPE_NORMAL
- en: Making standalone builds and installing them
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Windows: As there is really nothing to it, building a PC package is as simple
    as File -> Package Project | Windows | Win32 (or Win64) and similar for Mac builds.
    This gives you an executable and your built assets in folders, and at this stage,
    uploading to a product, such as Steam, for delivery should be very simple. Given
    this, we won''t really spend any time on it; but if you simply want to test the
    building process, this is the fastest, easiest, simplest way to do so. If you
    check under Project Settings | Platforms | Windows, you''ll also notice very few
    options, so without further ado, we''ll move on to packaging Android and iOS.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Android: Selecting your preferred texture-compression type under File | Package
    Project | Android (see the picture of the dropdown in the Setup section) will
    generate an .apk file, by default an .obb file, and two .bat files to the folder
    specified when you clicked to start that build. The `.bat` files are very clearly
    labeled: one for uninstalling the project, the other for installing it (note that
    the latter will perform the former to make sure you get a clean install of a project
    with the same AppID each time). Assuming you got your device set up for debugging
    as [https://developer.android.com/studio/run/device ](https://developer.android.com/studio/run/device)and
    can test that it is being seen in a command-line use of "adb devices," then that
    .bat file will automatically install directly to that device (if you have only
    one device present, which is typically the case).'
  prefs: []
  type: TYPE_NORMAL
- en: 'iOS: Selecting File | Package Project | iOS will generate a .ipa file for you
    in the folder you specified. Typically, this is then simply added to your device
    in XCode''s Devices window with the + button in the Devices and Simulators window.'
  prefs: []
  type: TYPE_NORMAL
- en: HTML5 will bundle up all the JavaScript and everything else it uses into a package
    that can be dragged into a browser to launch it. How you deliver this to users
    is up to you from a web-distribution standpoint, and not explored here further.
  prefs: []
  type: TYPE_NORMAL
- en: Once these builds are on the device, they can be run as any other more traditionally
    installed by download from their respective store. Thankfully, both Apple and
    Google give staging areas to do test runs of uploaded builds, also, so the whole
    pipeline for those platforms can be tested fully before then being sent for live
    submission/approval.
  prefs: []
  type: TYPE_NORMAL
- en: Avoiding rebuild-hell on platforms near releases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One final note is simply a reminder to use common sense when considering how
    to test. Are your changes ones that might affect graphics on different platforms
    (material edits, complex new shader changes, or making changes to project settings
    that might affect such features)? Then test them on a representative device. Are
    your changes solely gameplay (note that things such as using the filesystem can
    be problematic on different platforms, and at this stage of the GitHub project,
    there is definitely a bug in load/save on devices I can hopefully address soon,
    for example)? It's typically best to iterate these quickly on your development
    platform; but when ultimately done, especially at least overnight, build for your
    actual platform and make sure there are no surprises. On a large project, spending
    an hour to cook assets every time you want to test any small change is foolish,
    but neglecting your actual intended hardware platforms is too.
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that there are some very good tools and techniques out there for
    automating a lot of these process and centralizing builds and deployment on a
    single high-powered machine that can then be readily accessed and used by the
    whole team any time. For example, see Jenkins and HockeyApp in the *Further reading*
    section. For a build-automation platform such as Jenkins, setup can often be as
    simple as watching the Output Window as you package via the Unreal Editor, and
    copying each of the execution lines it uses into steps there. If you have a large
    project, large team, or large number of target platforms, this type of automation
    is highly recommended.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While far from the most glamorous or exciting fields of game development, building
    and deploying is absolutely critical for any project that you want to reach an
    audience outside of your own desk. Writing code and building shaders may be more
    immediately gratifying areas of game development, but if you can't get building
    and releasing on a platform right, it's all for naught. Knowing how to set up
    and maintain these processes is an absolutely critical step in mastering UE4 development.
    But coming up, a return to some of the beautiful visuals UE4 has to offer!
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Why is determining target platforms early a necessary step for any project?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the reason behind adding maps and content folders to the always-cook
    lists?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are some risks to adding them?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the order between iOS, PC, and Android from least setup complexity to
    highest?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the advantage to having a single "SKU" for your product? What problems
    are fixed by having multiple?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What four things are needed in order to have the pieces needed for an iOS build?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are some advantages and disadvantages to fixes, such as quality-level switches,
    in shaders?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can build and iteration time be mitigated for a large project?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Building iOS from Windows with a Mac on the network:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.unrealengine.com/en-us/Platforms/iOS/Windows](https://docs.unrealengine.com/en-us/Platforms/iOS/Windows)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Jenkins build-automation platform:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://jenkins.io/doc/](https://jenkins.io/doc/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'HockyApp device deployment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://hockeyapp.net/](https://hockeyapp.net/)'
  prefs: []
  type: TYPE_NORMAL
