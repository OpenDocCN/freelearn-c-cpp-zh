- en: Implementing a Skybox Using a Cubemap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we’ll create a skybox using a cubemap. So, let’s first understand
    what a cubemap is. It is a combination of multiple textures combined into a single
    texture, which is a cube. It is basically a series of six individual 2D textures
    that are mapped to a cube. They usually would have some sort of pattern to them,
    in a way that they actually flow from one side to the other. A skybox is essentially
    a cubemap, but a massive one. The player and the game world is essentially within
    that big cube. It encompasses the entire scene with six images of the game environment;
    if you, as a player, are inside a skybox and you try to look around, it would
    feel like you have a high-resolution world around you. And, if you try to reach
    for the edges of the cube you wouldn't be able to do that, because it's just infinitely
    far away from you. In this chapter, we’ll learn how to implement a skybox using
    a cubemap to create amazing worlds within your game
  prefs: []
  type: TYPE_NORMAL
- en: We’ll start by creating shaders for our Skybox.
  prefs: []
  type: TYPE_NORMAL
- en: You can refer to all the code files for this chapter in the `Chapter06` folder
    on GitHub. The GitHub link can be found in the preface of the book.
  prefs: []
  type: TYPE_NORMAL
- en: Creating shaders for the skybox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As usual, we''ll begin with creating our shaders. We''ll initiate by duplicating
    our shader files, `core.vs`, and `core.frag`, and name those copied files as `skybox.vs`
    and `skybox.frag`. We''ll now carry out some modification on these shader files;
    take a look at the following steps to understand the changes that will be made:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll begin with making modifications to our `skybox.vs` shader. Take a look
    at the following code and implement the following modification in your shader
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Once you have made the changes, save the file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we''ll move on to `Skybox.frag` and carry out the following highlighted
    changes to the code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Save these changes to your shaders.
  prefs: []
  type: TYPE_NORMAL
- en: Now we have modified our shader files to implement the skybox, we'll move on
    to make modifications to our `main.cpp` file and create our skybox.
  prefs: []
  type: TYPE_NORMAL
- en: Modifications to the main.cpp file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the `main.cpp` file, there are a few changes we need to make. Follow the
    steps shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, we need to create a new shader object, so before we define `GLfloat
    cubeVertices[]`, we need to add `Shader skyboxShader()`. And, to that we''ll pass
    the locations of our shader files: `"res/shaders/skybox.vs"` and `"res/shaders/skybox.frag"`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we're going to need some more vertices for the skybox. Luckily, you can
    refer those to the `main.cpp` file present inside the `advanced_opengl` folder.
    Add these vertices to our code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you've got the skybox vertices all set up, you will need to create a vertex
    array object and vertex buffer object for the skybox. So, let's do that right
    now.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After we have defined `glBindVertexArray(0)`, we'll add `GLuint skyboxVAO` and
    `skyboxVBO;`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, we'll add `glGenVertexArrays();` the vertex array is going to take the
    parameter `1` and then a skybox vertex array object, `skyboxVAO`. Next, we're
    going to generate the buffers into the skybox vertex buffer object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: So, we'll add `glGenBuffers();` and to that we'll pass the parameter as `1`
    and `&skyboxVBO`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then add `glBindVertexArray()`, and to that we'll pass `skyboxVAO`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we add `glBindBuffer()`, and for this we'll pass `GL_ARRAY_BUFFER` and
    `skyboxVBO`. It's very similar to what we've already done before in the previous
    chapters, so all of this should be very familiar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add `glBufferData()`, and the first parameter it will take here is `GL_ARRAY_BUFFER`,
    and the size of the skybox vertices array. Next, we need to actually pass in `skyboxVertices`,
    and finally, we're just going to set it to `GL_STATIC_DRAW`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then we''ll add `GLEnableVertexAttribArray()`. We''re going to set this to
    `0`. Next, we''re going to add `glVertexAttribPointer()`. This is going to take
    `0`, `3`, `GL_FLOAT`, `GL_FALSE`, `3 * sizeof( GLfloat)`, `( GLvoid * ) 0`. Take
    a look at the following code to understand the description:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Creating the Texture.h file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, we will actually load the textures, so what we''re going to do is create
    a separate texture file, and we''ll just have a method for loading the textures,
    and also a separate method for loading cube textures. The reason for doing this
    is we''re going to be using this code regularly, and it''s just that we have to
    rewrite these every single time. If we want to do multiple objects, especially,
    we don''t want to rewrite this every single time. Let''s take a look at the following
    steps to create the `Texture.h` file:'
  prefs: []
  type: TYPE_NORMAL
- en: First of all, we'll create an empty header file and name that as `Texture.h`,
    and add that to our project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, in `Texture.h`, we''ll add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Then, we'll add some header files, such as `#define GLEW_STATIC` (if you didn't
    statically link GLEW, then you don't need to put this line here), `#include <GL/glew.h>`,
    and `#include <vector>`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we'll create a class called `TextureLoading` and begin adding all our
    code to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We'll type `public`, and the first method we're going to have is a `static GLuint
    LoadTexture()` and to that we'll pass `GLchar *path`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we'll go to our `main.cpp` file, and we'll cut and paste all the load and
    create textures and texture loading-related code, and paste it into the `LoadTextureMethod`
    that we created in the previous step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, let''s have a look at what we need to change in here; check out the following
    highlighted code to understand the changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we go back to `main.cpp`, and add `#include Texture.h`, then come to the
    location in the code where we want to load textures, and there we''ll add the
    following to load our texture code: `GLuint cubeTexture = TextureLoading::LoadTexture(
    "res/images/container2.png" )` and also update the bind texture code, as highlighted
    here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s run it and check if our `Texture.h` code builds successfully, and
    that it compiles without any errors. You should get the following output on your
    screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3bae1e53-cba6-4a9d-9190-ca6f79006b2c.png)'
  prefs: []
  type: TYPE_IMG
- en: This isn't the cubemap at the moment, as we were just sorting out the texturing,
    but making a separate texture will allow us to easily reuse texture loading.
  prefs: []
  type: TYPE_NORMAL
- en: Adding cube mapping code to Texture.h
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So now, what we actually want to do is essentially the similar process as we
    did with the texture file, but for cube mapping. The code will be very similar,
    so to begin with what we are going to do is duplicate the texture loading code
    and paste below it. Then, we''ll make the following highlighted changes to the
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we added `GLchars` because we don't have one path; remember,
    we're going to have six different paths. Then, we created the `for` loop because
    we wanted to go over our six different images with ease, and also we didn't want
    to repeat the code, which was the whole point of doing what we're doing.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, if we go back to our main file that is in our `main.cpp`, we can actually
    finish off what we were doing. Go to the section where we are loading our texture
    file, and after that code, add the following highlighted code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we added the cubemap texture. The order here does matter,
    so you can't just willy-nilly put it in. If you downloaded other images from a
    website, you might need to rearrange it properly.
  prefs: []
  type: TYPE_NORMAL
- en: Drawing the skybox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, what we need to actually do is, well, draw the skybox, so let''s begin
    by following the steps shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the location in our code where we're done with all the model matrix stuff,
    and we're going to add `glDepthFunc()`; and in there, we need to pass `GL_LEQUAL`.
    This changes the depth function, so the depth test passes when values are equal
    to the depth buffer's content.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we're going to add `skyboxShader.Use()`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, add `view = glmm::mat4()`. And in here, we are going to pass `glm::mat3()`,
    and to that we'll pass `camera.GetViewMatrix()`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, add `glUniformMatrix4fv()`. For this, we will pass the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`glGetUniformLocation( skyboxShader.Program, "view" ), 1, GL_FALSE, glm::value_ptr(
    view )`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We need to do something very similar for the projection matrix as well. So,
    we will add the following code: `glUniformMatrix4fv( glGetUniformLocation( skyboxShader.Program,
    "projection" ), 1, GL_FALSE, glm::value_ptr( projection ) );`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now what we need to do is just add the skybox cube. So, add `glBindVertexArray();`
    function and to that we'll pass `skyboxVAO`, and then add `glBindTexture()`. And
    for the bind texture function, it's going to be `GL_TEXTURE_CUBE_MAP`. Then, add
    the `cubemapTexture` that we call the `LoadCubemap` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, add `glDrawArrays();`. And, the parameters we''ll pass are as follows:
    `GL_TRIANGLES`, `0`, `36`. Again, this is just a cube, so it''s very simple stuff.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, add `glBindVertexArray()`. For that, pass `0`, as we normally would.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we just need to set the `glDepthFunc()` back, and to that we're going to
    pass `GL_LESS`; this just sets it back to default.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'And now, we should be ready to run, so let''s run this and check what output
    we get on the screen. We should get the following scene:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2fb9e2cb-ad73-4ba2-9020-70d1ea3aa7e7.png)'
  prefs: []
  type: TYPE_IMG
- en: It literally does look like we've created a 3D world. If you try moving away,
    you can see the cube getting smaller and smaller. But, everything else is staying
    the same because we're going to be infinitely far away from all of the sides.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we generated a Skybox using a cubemap, and learned to apply
    various textures to it. We also learned how to create the separate texture file
    to load our textures in the code. Also, we learned how to draw the skybox and
    created our game world using it.
  prefs: []
  type: TYPE_NORMAL
- en: 'There''s a bonus chapter for you on Model Loading on the following link: [https://www.packtpub.com/sites/default/files/downloads/ModelLoading.pdf](https://www.packtpub.com/sites/default/files/downloads/ModelLoading.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you'll learn how to setup Assimp (Open Asset Import Library)
    on Windows using CMake for all our Model Loading needs. You'll also get to learn
    how to create mesh class and Model class to handle loading of our model.
  prefs: []
  type: TYPE_NORMAL
