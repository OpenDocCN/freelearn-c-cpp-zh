["```cpp\n#define ABC 5\nint main(int argc, char** argv) {\n  int x = 2;\n  int y = ABC;\n  int z = x + y;\n  return 0;\n}\n```", "```cpp\nint main(int argc, char** argv) {\n  int x = 2;\n  int y = 5;\n  int z = x + y;\n  return 0;\n}\n```", "```cpp\n#define ADD(a, b) a + b\nint main(int argc, char** argv) {\n  int x = 2;\n  int y = 3;\n  int z = ADD(x, y);\n  return 0;\n}\n```", "```cpp\nint main(int argc, char** argv) {\n  int x = 2;\n  int y = 3\n  int z = x + y;\n  return 0;\n}\n```", "```cpp\n#include <stdio.h>\n#define CODE \\\nprintf(\"%d\\n\", i);\nint main(int argc, char** argv) {\n CODE\n return 0;\n}\n```", "```cpp\n$ clang example.c\ncode.c:7:3: error: use of undeclared identifier 'i'\nCODE\n^\ncode.c:4:16: note: expanded from macro 'CODE'\nprintf(\"%d\\n\", i);\n               ^\n1 error generated.\n$\n```", "```cpp\n$ clang -E example.c\n# 1 \"sample.c\"# 1 \"<built-in>\" 1\n# 1 \"<built-in>\" 3\n# 361 \"<built-in>\" 3\n...\n# 412 \"/Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/stdio.h\" 2 3 4\n# 2 \"sample.c\" 2\n...\nint main(int argc, char** argv) {\n printf(\"%d\\n\", i);\n return 0;\n}\n$\n```", "```cpp\n#include <stdio.h>\n#define PRINT(a) printf(\"%d\\n\", a);\n#define LOOP(v, s, e) for (int v = s; v <= e; v++) {\n#define ENDLOOP }\nint main(int argc, char** argv) {\n LOOP(counter, 1, 10)\n PRINT(counter)\n ENDLOOP\n  return 0;\n}\n```", "```cpp\n...\n... content of stdio.h â€¦\n...\nint main(int argc, char** argv) {\n  for (int counter = 1; counter <= 10; counter++) {\n    printf(\"%d\\n\", counter);\n  }\n  return 0;\n}\n```", "```cpp\n#include <stdio.h>\n#include <string.h>\n#define CMD(NAME) \\\n char NAME ## _cmd[256]  = \"\"; \\\n strcpy(NAME ## _cmd, #NAME);\nint main(int argc, char** argv) {\n CMD(copy)\n CMD(paste)\n CMD(cut)\n  char cmd[256];\n  scanf(\"%s\", cmd);\n  if (strcmp(cmd, copy_cmd) == 0) {\n    // ...\n  }\n  if (strcmp(cmd, paste_cmd) == 0) {\n    // ...\n  }\n  if (strcmp(cmd, cut_cmd) == 0) {\n    // ...\n  }\n  return 0;\n}\n```", "```cpp\n...\n... content of stdio.h ...\n...\n... content of string.h ...\n...\nint main(int argc, char** argv) {\n  char copy_cmd[256] = \"\"; strcpy(copy_cmd, \"copy\");\n  char paste_cmd[256] = \"\"; strcpy(paste_cmd, \"paste\");\n  char cut_cmd[256] = \"\"; strcpy(cut_cmd, \"cut\");\n  char cmd[256];\n  scanf(\"%s\", cmd);\n  if (strcmp(cmd, copy_cmd) == 0) {\n  }\n  if (strcmp(cmd, paste_cmd) == 0) {\n  }\n  if (strcmp(cmd, cut_cmd) == 0) {\n  }\n  return 0;\n}\n```", "```cpp\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#define VERSION \"2.3.4\"\n#define LOG_ERROR(format, ...) \\\n fprintf(stderr, format, __VA_ARGS__)\nint main(int argc, char** argv) {\n  if (argc < 3) {\n LOG_ERROR(\"Invalid number of arguments for version %s\\n.\", VERSION);\n    exit(1);\n  }\n  if (strcmp(argv[1], \"-n\") != 0) {\n LOG_ERROR(\"%s is a wrong param at index %d for version %s.\", argv[1], 1, VERSION);\n    exit(1);\n  }\n  // ...\n  return 0;\n}\n```", "```cpp\n...\n... content of stdio.h ...\n...\n... content of stdlib.h ...\n...\n... content of string.h ...\n...\nint main(int argc, char** argv) {\n  if (argc < 3) {\n    fprintf(stderr, \"Invalid number of arguments for version %s\\n.\", \"2.3.4\");\n    exit(1);\n  }\n  if (strcmp(argv[1], \"-n\") != 0) {\n    fprintf(stderr, \"%s is a wrong param at index %d for version %s.\", argv[1], 1, \"2.3.4\");\n    exit(1);\n  }\n  // ...\n  return 0;\n}\n```", "```cpp\n#include <stdio.h>\n#define LOOP_3(X, ...) \\\n printf(\"%s\\n\", #X);\n#define LOOP_2(X, ...) \\\n printf(\"%s\\n\", #X); \\\n LOOP_3(__VA_ARGS__)\n#define LOOP_1(X, ...) \\\n printf(\"%s\\n\", #X); \\\n LOOP_2(__VA_ARGS__)\n#define LOOP(...) \\\n LOOP_1(__VA_ARGS__)\nint main(int argc, char** argv) {\n LOOP(copy paste cut)\n LOOP(copy, paste, cut)\n LOOP(copy, paste, cut, select)\n  return 0;\n}\n```", "```cpp\n...\n... content of stdio.h ...\n...\nint main(int argc, char** argv) {\n  printf(\"%s\\n\", \"copy paste cut\"); printf(\"%s\\n\", \"\"); printf(\"%s\\n\", \"\");\n  printf(\"%s\\n\", \"copy\"); printf(\"%s\\n\", \"paste\"); printf(\"%s\\n\", \"cut\");\n  printf(\"%s\\n\", \"copy\"); printf(\"%s\\n\", \"paste\"); printf(\"%s\\n\", \"cut\");\n  return 0;\n}\n```", "```cpp\n$ gcc ExtremeC_examples_chapter1_6.c\n$ ./a.out\ncopy paste cut\ncopy\npaste\ncut\n$\n```", "```cpp\n#define CONDITION\nint main(int argc, char** argv) {\n#ifdef CONDITION\n  int i = 0;\n  i++;\n#endif\n  int j= 0;\n  return 0;\n}\n```", "```cpp\nint main(int argc, char** argv) {\n  int i = 0;\n  i++;\n  int j= 0;\n  return 0;\n}\n```", "```cpp\nint main(int argc, char** argv) {\n  int j= 0;\n  return 0;\n}\n```", "```cpp\n$ gcc -DCONDITION -E main.c\n```", "```cpp\n#ifndef EXAMPLE_1_8_H\n#define EXAMPLE_1_8_H\nvoid say_hello();\nint read_age();\n#endif\n```", "```cpp\n#pragma once\nvoid say_hello();\nint read_age();\n```", "```cpp\nint main(int argc, char** argv) {\n  int var = 100;\n  int* ptr = 0;\n  ptr = &var;\n  *ptr = 200;\n  return 0;\n}\n```", "```cpp\nchar* ptr = NULL;\n```", "```cpp\nchar* ptr = nullptr;\n```", "```cpp\n#include <stdio.h>\nint main(int argc, char** argv) {\n  int var = 1;\n  int* int_ptr = NULL; // nullify the pointer\n  int_ptr = &var;\n  char* char_ptr = NULL;\n  char_ptr = (char*)&var;\n  printf(\"Before arithmetic: int_ptr: %u, char_ptr: %u\\n\",\n          (unsigned int)int_ptr, (unsigned int)char_ptr);\n  int_ptr++;    // Arithmetic step is usually 4 bytes\n  char_ptr++;   // Arithmetic step in 1 byte\n  printf(\"After arithmetic: int_ptr: %u, char_ptr: %u\\n\",\n          (unsigned int)int_ptr, (unsigned int)char_ptr);\n  return 0;\n}\n```", "```cpp\n$ gcc ExtremeC_examples_chapter1_10.c\n$ ./a.out\nBefore arithmetic: int_ptr: 3932338348, char_ptr: 3932338348\nAfter arithmetic:  int_ptr: 3932338352, char_ptr: 3932338349\n$\n```", "```cpp\n$ ./a.out\nBefore arithmetic: int_ptr: 4009638060, char_ptr: 4009638060\nAfter arithmetic:  int_ptr: 4009638064, char_ptr: 4009638061\n$\n```", "```cpp\n#include <stdio.h>\n#define SIZE 5\nint main(int argc, char** argv) {\n int arr[SIZE];\n arr[0] = 9;\n arr[1] = 22;\n arr[2] = 30;\n arr[3] = 23;\n arr[4] = 18;\n for (int i = 0; i < SIZE; i++) {\n   printf(\"%d\\n\", arr[i]);\n }\n return 0;\n}\n```", "```cpp\n#include <stdio.h>\n#define SIZE 5\nint main(int argc, char** argv) {\n int arr[SIZE];\n arr[0] = 9;\n arr[1] = 22;\n arr[2] = 30;\n arr[3] = 23;\n arr[4] = 18;\n int* ptr = &arr[0];\n for (;;) {\n   printf(\"%d\\n\", *ptr);\n   if (ptr == &arr[SIZE - 1]) {\n     break;\n   }\n   ptr++;\n }\n return 0;\n}\n```", "```cpp\nint* ptr = arr;\n```", "```cpp\nint* ptr = &arr[0];\n```", "```cpp\n#include <stdio.h>\nint main(int argc, char** argv) {\n int var = 9;\n int* ptr = &var;\n void* gptr = ptr;\n printf(\"%d\\n\", *gptr);\n return 0;\n}\n```", "```cpp\n$ gcc ExtremeC_examples_chapter1_13.c\nIn function 'main':warning: dereferencing 'void *' pointer\n  printf(\"%d\\n\", *gptr);\n                 ^~~~~\nerror: invalid use of void expression\n  printf(\"%d\\n\", *gptr);\n$\n```", "```cpp\n$ clang ExtremeC_examples_chapter1_13.c\nerror: argument type 'void' is incomplete\n  printf(\"%d\\n\", *gptr);\n                 ^\n1 error generated.\n$\n```", "```cpp\n#include <stdio.h>\nvoid print_bytes(void* data, size_t length) {\n  char delim = ' ';\n  unsigned char* ptr = data;\n  for (size_t i = 0; i < length; i++) {\n    printf(\"%c 0x%x\", delim, *ptr);\n    delim = ',';\n    ptr++;\n  }\n  printf(\"\\n\");\n}\nint main(int argc, char** argv) {\n int a = 9;\n double b = 18.9;\n print_bytes(&a, sizeof(int));\n print_bytes(&b, sizeof(double));\n return 0;\n}\n```", "```cpp\n#include <stdio.h>\nint* create_an_integer(int default_value) {\n  int var = default_value;\n  return &var;\n}\nint main() {\n  int* ptr = NULL;\n  ptr = create_an_integer(10);\n  printf(\"%d\\n\", *ptr);\n  return 0;\n}\n```", "```cpp\n$ gcc ExtremeC_examples_chapter1_15.c\nIn function 'f':\nwarning: function returns address of local variable [-Wreturn-local-addr]\n   return &var;\n          ^~~~\n$\n```", "```cpp\n$ ./a.out\nSegmentation fault (core dumped)\n$\n```", "```cpp\n#include <stdio.h>\n#include <stdlib.h>\nint* create_an_integer(int default_value) {\n  int* var_ptr = (int*)malloc(sizeof(int));\n  *var_ptr = default_value;\n  return var_ptr;\n}\nint main() {\n  int* ptr = NULL;\n  ptr = create_an_integer(10);\n  printf(\"%d\\n\", *ptr);\n  free(ptr);\n  return 0;\n}\n```", "```cpp\n#include <stdio.h>\nvoid func(int a) {\n  a = 5;\n}\nint main(int argc, char** argv) {\n  int x = 3;\n  printf(\"Before function call: %d\\n\", x);\n  func(x);\n  printf(\"After function call: %d\\n\", x);\n  return 0;\n}\n```", "```cpp\n$ gcc ExtremeC_examples_chapter1_17.c\n$ ./a.out\nBefore function call: 3\nAfter function call: 3\n$\n```", "```cpp\n#include <stdio.h>\nvoid func(int* a) {\n  int b = 9;\n  *a = 5;\n  a = &b;\n}\nint main(int argc, char** argv) {\n  int x = 3;\n  int* xptr = &x;\n  printf(\"Value before call: %d\\n\", x);\n  printf(\"Pointer before function call: %p\\n\", (void*)xptr);\n  func(xptr);\n  printf(\"Value after call: %d\\n\", x);\n  printf(\"Pointer after function call: %p\\n\", (void*)xptr);\n  return 0;\n}\n```", "```cpp\n$ gcc ExtremeC_examples_chapter1_18.c\n$ ./a.out\nThe value before the call: 3\nPointer before function call: 0x7ffee99a88ec\nThe value after the call: 5\nPointer after function call: 0x7ffee99a88ec\n$\n```", "```cpp\n#include <stdio.h>\nint sum(int a, int b) {\n  return a + b;\n}\nint subtract(int a, int b) {\n  return a - b;\n}\nint main() {\n  int (*func_ptr)(int, int);\n  func_ptr = NULL;\n  func_ptr = &sum;\n  int result = func_ptr(5, 4);\n  printf(\"Sum: %d\\n\", result);\n  func_ptr = &subtract;\n  result = func_ptr(5, 4);\n  printf(\"Subtract: %d\\n\", result);\n  return 0;\n}\n```", "```cpp\n$ gcc ExtremeC_examples_chapter1_19.c\n$ ./a.out\nSum: 9\nSubtract: 1\n$\n```", "```cpp\n#include <stdio.h>\ntypedef int bool_t;\ntypedef bool_t (*less_than_func_t)(int, int);\nbool_t less_than(int a, int b) {\n  return a < b ? 1 : 0;\n}\nbool_t less_than_modular(int a, int b) {\n  return (a % 5) < (b % 5) ? 1 : 0;\n}\nint main(int argc, char** argv) {\n  less_than_func_t func_ptr = NULL;\n  func_ptr = &less_than;\n  bool_t result = func_ptr(3, 7);\n  printf(\"%d\\n\", result);\n  func_ptr = &less_than_modular;\n  result = func_ptr(3, 7);\n  printf(\"%d\\n\", result);\n  return 0;\n}\n```", "```cpp\nstruct color_t {\n  int red;\n  int green;\n  int blue;\n};\n```", "```cpp\n#include <stdio.h>\nstruct sample_t {\n  char first;\n  char second;\n  char third;\n  short fourth;\n};\nvoid print_size(struct sample_t* var) {\n  printf(\"Size: %lu bytes\\n\", sizeof(*var));\n}\nvoid print_bytes(struct sample_t* var) {\n  unsigned char* ptr = (unsigned char*)var;\n  for (int i = 0; i < sizeof(*var); i++, ptr++) {\n    printf(\"%d \", (unsigned int)*ptr);\n  }\n  printf(\"\\n\");\n}\nint main(int argc, char** argv) {\n  struct sample_t var;\n  var.first = 'A';\n  var.second = 'B';\n  var.third = 'C';\n  var.fourth = 765;\n  print_size(&var);\n  print_bytes(&var);\n  return 0;\n}\n```", "```cpp\ntypedef struct {\n  char first;\n  char second;\n  char third;\n  short fourth;\n} sample_t;\n```", "```cpp\nsample_t var;\n```", "```cpp\n$ clang ExtremeC_examples_chapter1_21.c\n$ ./a.out\nSize: 6 bytes\n65 66 67 0 253 2\n$\n```", "```cpp\n#include <stdio.h>\nstruct __attribute__((__packed__)) sample_t {\n  char first;\n  char second;\n  char third;\n  short fourth;\n} ;\nvoid print_size(struct sample_t* var) {\n  // ...\n}\nvoid print_bytes(struct sample_t* var) {\n  // ...\n}\nint main(int argc, char** argv) {\n  // ...\n}\n```", "```cpp\n$ clang ExtremeC_examples_chapter1_22.c\n$ ./a.out\nSize: 5 bytes\n65 66 67 253 2\n$\n```", "```cpp\ntypedef struct {\n  int x;\n  int y;\n} point_t;\ntypedef struct {\n  point_t center;\n  int radius;\n} circle_t;\ntypedef struct {\n  point_t start;\n  point_t end;\n} line_t;\n```", "```cpp\n#include <stdio.h>\ntypedef struct {\n  int x;\n  int y;\n} point_t;\ntypedef struct {\n  point_t center;\n  int radius;\n} circle_t;\nint main(int argc, char** argv) {\n  circle_t c;\n  circle_t* p1 = &c;\n  point_t*  p2 = (point_t*)&c;\n  int*      p3 = (int*)&c;\n  printf(\"p1: %p\\n\", (void*)p1);\n  printf(\"p2: %p\\n\", (void*)p2);\n  printf(\"p3: %p\\n\", (void*)p3);\n  return 0;\n}\n```", "```cpp\n$ clang ExtremeC_examples_chapter1_24.c\n$ ./a.out\np1: 0x7ffee846c8e0\np2: 0x7ffee846c8e0\np3: 0x7ffee846c8e0\n$\n```"]