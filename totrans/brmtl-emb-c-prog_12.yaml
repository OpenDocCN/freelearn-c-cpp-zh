- en: '12'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '12'
- en: Serial Peripheral Interface (SPI)
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 串行外设接口（SPI）
- en: In this chapter, we will learn about the **Serial Peripheral Interface** (**SPI**)
    protocol, another important communication protocol widely used in embedded systems.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习**串行外设接口**（**SPI**）协议，这是在嵌入式系统中广泛使用的重要通信协议之一。
- en: We will start by delving into the basics of the SPI protocol, understanding
    its master-slave architecture, data transfer modes, and typical use cases. Next,
    we will examine the key registers of the SPI peripheral in STM32 microcontrollers,
    providing detailed insights into their configuration and usage. Finally, we will
    apply this knowledge to develop a bare-metal SPI driver, demonstrating practical
    implementation and testing.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先深入了解SPI协议的基础，了解其主从架构、数据传输模式和典型用例。接下来，我们将检查STM32微控制器中SPI外设的关键寄存器，提供其配置和使用的详细见解。最后，我们将应用这些知识来开发裸机SPI驱动程序，展示其实际实现和测试。
- en: 'In this chapter, we will cover the following main topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Overview of the SPI protocol
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SPI协议概述
- en: The STM32F4 SPI peripherals
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: STM32F4 SPI外设
- en: Developing the SPI driver
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发SPI驱动程序
- en: By the end of this chapter, you will have a good understanding of the SPI protocol
    and be equipped to develop bare-metal drivers for SPI.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将很好地理解SPI协议，并准备好开发SPI的裸机驱动程序。
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'All code examples for this chapter can be found on GitHub at the following
    link:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的所有代码示例都可以在以下GitHub链接中找到：
- en: '[https://github.com/PacktPublishing/Bare-Metal-Embedded-C-Programming](https://github.com/PacktPublishing/Bare-Metal-Embedded-C-Programming)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Bare-Metal-Embedded-C-Programming](https://github.com/PacktPublishing/Bare-Metal-Embedded-C-Programming)'
- en: Overview of the SPI protocol
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SPI协议概述
- en: Let’s dive into what SPI is, its key features, how it works, and some of the
    nuances that make it so powerful.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解SPI是什么，它的关键特性，它是如何工作的，以及一些使其如此强大的细微差别。
- en: What is SPI?
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是SPI？
- en: SPI is a *synchronous* serial communication protocol developed by Motorola.
    Unlike **Universal Asynchronous Receiver-Transmitter** (**UART**), which is asynchronous,
    SPI *relies on a clock signal* to synchronize data transfer between devices. It’s
    designed for short-distance communication (usually no more than 30 cm), primarily
    between a microcontroller and peripheral devices such as sensors, SD cards, and
    display modules. Let’s see its key features.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: SPI是由摩托罗拉开发的**同步**串行通信协议。与**通用异步收发传输器**（**UART**）不同，UART是异步的，SPI**依赖于时钟信号**来同步设备间的数据传输。它旨在进行短距离通信（通常不超过30厘米），主要在微控制器和外围设备（如传感器、SD卡和显示模块）之间使用。让我们看看其关键特性。
- en: Key features of SPI
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SPI的关键特性
- en: 'SPI stands out due to its efficiency. Here are some of its key features:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 由于其效率高，SPI脱颖而出。以下是一些其关键特性：
- en: '**Full-duplex communication**: SPI supports simultaneous data transmission
    and reception'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**全双工通信**：SPI支持同时进行数据传输和接收'
- en: '**High speed**: SPI can operate at much higher speeds compared to protocols
    such as **Inter-Integrated Circuit** (**I2C**) and UART'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高速**：与**集成电路间**（**I2C**）和UART等协议相比，SPI可以以更高的速度运行'
- en: '**Master-slave architecture**: One master device controls communication, while
    one or more slave devices respond'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主从架构**：一个主设备控制通信，而一个或多个从设备响应'
- en: '**Flexible data length**: Can handle various data lengths, commonly 8 bits,
    but not limited to that'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**灵活的数据长度**：可以处理各种数据长度，通常是8位，但不仅限于这一点'
- en: To be able to connect two SPI devices, we must understand the SPI interface.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要能够连接两个SPI设备，我们必须了解SPI接口。
- en: The SPI interface
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SPI接口
- en: 'SPI uses four primary lines for communication, each with several alternative
    names you might encounter:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: SPI使用四条主要通信线路，每条线路都有几个可能遇到的备选名称：
- en: '**Master In Slave Out (MISO)**: Also known as **Serial Data Out** (**SDO**)
    or **Data Out** (**DOUT**), this line carries data from the slave device to the
    master'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主设备输入从设备输出（MISO）**：也称为**串行数据输出**（**SDO**）或**数据输出**（**DOUT**），这条线路从从设备传输数据到主设备'
- en: '**Master Out Slave In (MOSI)**: Also known as **Serial Data In** (**SDI**)
    or **Data In** (**DIN**), this line carries data from the master device to the
    slave'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主设备输出从设备输入（MOSI）**：也称为**串行数据输入**（**SDI**）或**数据输入**（**DIN**），这条线路从主设备传输数据到从设备'
- en: '**Serial Clock (SCK)**: Also referred to as **SCLK** (or simply **CLK**), this
    is the clock signal generated by the master to synchronize data transfer'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**串行时钟（SCK）**：也称为**SCLK**（或简单地称为**CLK**），这是由主设备生成的时钟信号，用于同步数据传输'
- en: '**Slave Select (SS)**: Also known as **Chip Select** (**CS**) or **Not Slave
    Select**(**NSS**), this line is used by the master to select which slave device
    to communicate with'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**从设备选择（SS）**：也称为**芯片选择（CS**）或**非从设备选择（NSS**），这条线由主设备用于选择与哪个从设备进行通信'
- en: 'When multiple slaves are used, each slave typically has its own SS line, allowing
    the master to control communication with each slave individually. *Figure 12**.1*
    illustrates the SPI connection between a single master and a single slave:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用多个从设备时，每个从设备通常都有自己的SS线，允许主设备单独控制与每个从设备的通信。*图12.1*展示了单个主设备和单个从设备之间的SPI连接：
- en: '![Figure 12.1: The SPI interface](img/B21914_12_1.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图12.1：SPI接口](img/B21914_12_1.jpg)'
- en: 'Figure 12.1: The SPI interface'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.1：SPI接口
- en: '*Figure 12**.2* depicts the SPI setup with a single master controlling multiple
    slaves:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*图12.2*展示了单个主设备控制多个从设备的SPI设置：'
- en: '![Figure 12.2: The SPI interface – multiple slaves](img/B21914_12_2.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![图12.2：SPI接口 – 多个从设备](img/B21914_12_2.jpg)'
- en: 'Figure 12.2: The SPI interface – multiple slaves'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.2：SPI接口 – 多个从设备
- en: When multiple slaves are connected to a single SPI bus, managing the MISO line
    is crucial to avoid communication errors. Since all slaves share this line, non-selected
    slaves could interfere with the signal from the selected slave if not properly
    controlled. To prevent such issues, several techniques are used. One common method
    is **tri-state buffering**, where each slave’s MISO line enters a high-impedance
    (high-Z) state when its CS line is inactive, effectively disconnecting it from
    the bus. This ensures only the selected slave drives the MISO line, preventing
    bus contention. Another approach is the **open-drain configuration** with a pull-up
    resistor, where the MISO line is left floating (high-Z) when transmitting a 1
    and pulled low by the selected slave when transmitting a 0\. This reduces contention
    risks but may result in slower communication speeds due to the time delay introduced
    by the pull-up resistor.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当多个从设备连接到单个SPI总线时，管理MISO线对于避免通信错误至关重要。由于所有从设备都共享这条线，如果未正确控制，非选择的从设备可能会干扰所选从设备的信号。为了防止此类问题，使用了几种技术。一种常见的方法是**三态缓冲**，当从设备的CS线处于非活动状态时，每个从设备的MISO线进入高阻抗（高-Z）状态，从而有效地将其从总线上断开。这确保只有所选从设备驱动MISO线，防止总线冲突。另一种方法是**开漏配置**，带有上拉电阻，当传输1时，MISO线保持浮空（高-Z），而当传输0时，由所选从设备将其拉低。这减少了冲突风险，但可能会由于上拉电阻引入的时间延迟而导致通信速度变慢。
- en: Let’s see how the SPI protocol works.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看SPI协议是如何工作的。
- en: How SPI works
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SPI是如何工作的
- en: 'SPI works on a simple principle: the master generates a clock signal and selects
    a slave to communicate with by *pulling the corresponding SS line low*. Data is
    then exchanged simultaneously between the master and the slave over the MOSI and
    MISO lines.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: SPI的工作原理很简单：主设备生成一个时钟信号，并通过将相应的SS线拉低来选择一个从设备进行通信。然后，数据在主设备和从设备之间通过MOSI和MISO线同时交换。
- en: 'Here’s a step-by-step breakdown:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是逐步分解：
- en: '**Initialization**: The master sets the clock frequency and data format (for
    example, 8-bit data).'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**初始化**：主设备设置时钟频率和数据格式（例如，8位数据）。'
- en: '**Slave selection**: The master pulls the SS line of the target slave low.
    In a multi-slave configuration, where each slave has its own CS line, the master
    first sets all CS lines high (inactive) before sending any initialization messages.
    This ensures that uninitialized slaves don’t mistakenly respond to commands not
    intended for them. Once all CS lines are confirmed high, the master then activates
    the CS line of the desired slave by pulling it low to begin controlled communication.'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**从设备选择**：主设备将目标从设备的SS线拉低。在多从设备配置中，每个从设备都有自己的CS线，主设备在发送任何初始化消息之前首先将所有CS线设置为高（非活动状态）。这确保未初始化的从设备不会错误地响应不是针对它们的命令。一旦所有CS线都确认处于高状态，主设备然后通过将CS线拉低来激活所需从设备的CS线，以开始受控通信。'
- en: '**Data transmission**: The master sends data to the slave on the MOSI line,
    while the slave sends data to the master on the MISO line.'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**数据传输**：主设备通过MOSI线向从设备发送数据，而从设备通过MISO线向主设备发送数据。'
- en: '**Clock synchronization**: The master controls the clock, ensuring data is
    sampled and shifted at the correct times.'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**时钟同步**：主设备控制时钟，确保数据在正确的时间被采样和移位。'
- en: '**Completion**: Once the data transfer is complete, the master pulls the SS
    line high, deselecting the slave.'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**完成**：一旦数据传输完成，主设备将SS线拉高，取消选择从设备。'
- en: To successfully implement an SPI driver, it’s essential to understand key SPI
    configuration parameters. Let’s explore them one by one, starting with **Clock
    Phase** (**CPHA**) and **Clock** **Polarity** (**CPOL**).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要成功实现SPI驱动程序，理解关键的SPI配置参数至关重要。让我们逐一探讨，从**时钟相位**（**CPHA**）和**时钟极性**（**CPOL**）开始。
- en: CPHA and CPOL
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CPHA和CPOL
- en: In SPI communication, the settings for CPHA and CPOL determine the timing and
    characteristics of the clock signal used to synchronize data transfer between
    the master and slave devices. These settings are crucial for ensuring that data
    is correctly sampled and interpreted by both the master and the slave. Here’s
    a detailed look at how CPHA and CPOL affect SPI communication.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在SPI通信中，CPHA和CPOL的设置决定了用于在主从设备之间同步数据传输的时钟信号的时序和特性。这些设置对于确保数据被主从设备正确采样和解释至关重要。以下是关于CPHA和CPOL如何影响SPI通信的详细分析。
- en: CPOL
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CPOL
- en: 'CPOL determines the idle state of the clock signal (SCK). It controls whether
    the clock signal is high or low when no data is being transferred:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: CPOL决定了时钟信号（SCK）的空闲状态。它控制在没有数据传输时，时钟信号是高电平还是低电平：
- en: '**CPOL = 0**: The clock signal is low (0) when idle. This means that the clock
    line remains low between data transmissions.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CPOL = 0**: 当空闲时，时钟信号为低（0）。这意味着在数据传输之间，时钟线保持低电平。'
- en: '**CPOL = 1**: The clock signal is high (1) when idle. This means that the clock
    line remains high between data transmissions.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CPOL = 1**: 当空闲时，时钟信号为高（1）。这意味着在数据传输之间，时钟线保持高电平。'
- en: CPHA
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CPHA
- en: 'CPHA determines when data is sampled and when it is shifted out. It controls
    the edge of the clock signal on which data is read and written:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: CPHA决定了数据何时采样以及何时移出。它控制数据读写的时钟信号的边缘：
- en: '**CPHA = 0**: Data is sampled on the leading edge (first edge) of the clock
    pulse and shifted out on the trailing edge (second edge)'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CPHA = 0**: 数据在时钟脉冲的前沿（第一个边缘）采样，并在后沿（第二个边缘）移出。'
- en: '**CPHA = 1**: Data is shifted out on the leading edge (first edge) of the clock
    pulse and sampled on the trailing edge (second edge)'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CPHA = 1**: 数据在时钟脉冲的前沿（第一个边缘）移出，并在后沿（第二个边缘）采样'
- en: The combination of CPOL and CPHA results in four different SPI modes, each affecting
    the timing of data sampling and shifting.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: CPOL和CPHA的组合产生了四种不同的SPI模式，每种模式都影响数据采样和移位的时序。
- en: Selecting the appropriate SPI mode is crucial for ensuring proper communication
    between the master and slave devices. Both devices must be configured to use the
    same CPOL and CPHA settings to correctly interpret the data being exchanged. The
    choice of mode depends on the specific requirements of the devices and the timing
    constraints of the application. Let’s move on to SPI data modes.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 选择合适的SPI模式对于确保主从设备之间正确通信至关重要。两个设备都必须配置为使用相同的CPOL和CPHA设置，以正确解释交换的数据。模式的选择取决于设备的具体要求和应用的时序约束。让我们继续探讨SPI数据模式。
- en: Data modes
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据模式
- en: SPI is flexible with the data length it can handle. While **8-bit** data transfers
    are common, SPI can be configured to handle different data lengths, such as **16-bit**
    or **32-bit** transfers, depending on the application. The master and slave devices
    need to agree on the data length to ensure accurate communication. The last configuration
    parameter is the SPI speed.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: SPI在处理数据长度方面具有灵活性。虽然**8位**数据传输很常见，但SPI可以根据应用配置为处理不同的数据长度，例如**16位**或**32位**传输。主从设备需要就数据长度达成一致，以确保准确通信。最后一个配置参数是SPI速度。
- en: SPI speed
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SPI速度
- en: 'One of SPI’s significant advantages is its speed. SPI can operate at very high
    frequencies, typically up to several tens of **MHz**, depending on the hardware
    capabilities of the master and slave devices. The actual speed used in an application
    depends on several factors:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: SPI的一个显著优点是其速度。SPI可以在非常高的频率下运行，通常高达几十**MHz**，具体取决于主从设备的硬件能力。实际应用中的速度取决于几个因素：
- en: '**Device capabilities**: The maximum speed supported by both the master and
    the slave'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设备能力**: 主从设备支持的最大速度'
- en: '**Signal integrity**: Higher speeds can lead to signal integrity issues such
    as crosstalk and reflections, especially over longer distances'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**信号完整性**: 较高的速度可能导致信号完整性问题，如串扰和反射，尤其是在较长的距离上'
- en: '**Power consumption**: Higher speeds consume more power, which might be a consideration
    in battery-powered applications'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**功耗**: 较高的速度消耗更多的功率，这可能在电池供电的应用中需要考虑。'
- en: This concludes our overview of the SPI protocol. In the next section, we will
    analyze the SPI peripheral in the STM32F4 microcontroller.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了我们对SPI协议的概述。在下一节中，我们将分析STM32F4微控制器中的SPI外设。
- en: The STM32F4 SPI peripherals
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: STM32F4 SPI外设
- en: 'As with other peripherals, STM32 microcontrollers often include several SPI
    peripherals; the number varies depending on the specific model. The STM32F411
    microcontroller has five SPI peripherals, namely the following:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他外设一样，STM32微控制器通常包含多个SPI外设；具体数量取决于具体型号。STM32F411微控制器有五个SPI外设，具体如下：
- en: SPI1
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SPI1
- en: SPI2
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SPI2
- en: SPI3
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SPI3
- en: SPI4
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SPI4
- en: SPI5
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SPI5
- en: Key features
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关键特性
- en: 'Here are some of the key features:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些关键特性：
- en: '**Full-duplex and half-duplex communication**: Supports simultaneous two-way
    communication (full-duplex) or one-way communication (half-duplex)'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**全双工和半双工通信**：支持同时双向通信（全双工）或单向通信（半双工）'
- en: '**Master/slave configuration**: Each SPI peripheral can be configured as either
    a master or a slave device'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主/从配置**：每个SPI外设都可以配置为主设备或从设备'
- en: '**Flexible data size**: Supports data sizes ranging from 4 to 16 bits'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**灵活的数据大小**：支持从4位到16位的数据大小'
- en: '**High-speed communication**: Capable of operating at speeds up to 42 MHz in
    master mode and up to 21 MHz in slave mode'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高速通信**：在主模式下，能够以高达42 MHz的速度运行，在从模式下，能够以高达21 MHz的速度运行'
- en: '**Direct Memory Access (DMA) support**: DMA support for efficient data transfer
    without CPU intervention'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**直接内存访问（DMA）支持**：支持DMA，无需CPU干预即可高效传输数据'
- en: '**Negative SS (NSS) pin management**: Hardware management of the NSS pin for
    multi-slave configurations'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**负SS（NSS）引脚管理**：用于多从配置的NSS引脚的硬件管理'
- en: '**Cyclic Redundancy Check (CRC) calculation**: Built-in hardware CRC calculation
    for data integrity verification'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**循环冗余校验（CRC）计算**：内置硬件CRC计算以验证数据完整性'
- en: '**Bidirectional mode**: Supports bidirectional data mode, allowing a single
    data line to be used for both sending and receiving data'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**双向模式**：支持双向数据模式，允许单条数据线用于发送和接收数据'
- en: Let’s examine the key registers of this peripheral.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查这个外设的关键寄存器。
- en: Key SPI registers
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关键SPI寄存器
- en: To get SPI up and running on the STM32F411 microcontroller, we need to configure
    several registers that control various aspects of the SPI peripheral. Let’s break
    down the main registers we’ll be working with, starting with the **Control Register**
    **1** register.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 要在STM32F411微控制器上启动SPI，我们需要配置几个控制SPI外设各个方面的寄存器。让我们分解我们将要处理的主要寄存器，从**控制寄存器** **1**
    寄存器开始。
- en: SPI Control Register 1 (SPI_CR1)
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SPI控制寄存器1（SPI_CR1）
- en: 'The `SPI_CR1` register is central to configuring the SPI peripheral. It includes
    settings that define the **SPI mode**, **data format**, **clock settings**, and
    more. Key bits in this register include the following:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`SPI_CR1` 寄存器对于配置SPI外设至关重要。它包括定义**SPI模式**、**数据格式**、**时钟设置**等设置的设置。此寄存器中的关键位包括以下内容：'
- en: '`CPHA` to `0` means data is sampled on the first edge (leading edge), while
    setting it to `1` means data is sampled on the second edge (trailing edge).'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CPHA` 设置为 `0` 表示数据在第一个边缘（前沿）采样，而将其设置为 `1` 表示数据在第二个边缘（后沿）采样。'
- en: '`CPOL` to `0` means the clock is low when idle, and setting it to `1` means
    the clock is high when idle.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CPOL` 设置为 `0` 表示空闲时时钟为低电平，将其设置为 `1` 表示空闲时时钟为高电平。'
- en: '`MSTR` to `1` makes the SPI peripheral a master, while `0` sets it as a slave.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MSTR` 设置为 `1` 使SPI外设成为主设备，而 `0` 将其设置为从设备。'
- en: '**Baud Rate Control (BR[2:0])**: These bits configure the baud rate for SPI
    communication.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**波特率控制（BR[2:0]）**：这些位配置SPI通信的波特率。'
- en: '`SPE` to `1` to activate SPI communication.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `SPE` 设置为 `1` 以激活SPI通信。
- en: '`LSBFIRST` to `0` transmits the `1` transmits the **least significant bit**
    (**LSB**) first.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LSBFIRST` 设置为 `0` 表示首先传输最低有效位（LSB）。'
- en: '**SS Internal (SSI)**: This bit is used in master mode to internally control
    the SS line.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内部SS（SSI）**：此位在主模式下用于内部控制SS线。'
- en: '`1` enables software management of the SS line, allowing the master to control
    it manually.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`1` 启用对SS线的软件管理，允许主设备手动控制。'
- en: Next, we have the SPI Status Register.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们有SPI状态寄存器。
- en: SPI Status Register (SPI_SR)
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SPI状态寄存器（SPI_SR）
- en: 'The `SPI_SR` register provides real-time status updates on the SPI peripheral,
    informing us about various operational states and flags. Key bits in this register
    include the following:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`SPI_SR` 寄存器提供SPI外设的实时状态更新，告知我们各种操作状态和标志。此寄存器中的关键位包括以下内容：'
- en: '**Receive Buffer Not Empty (RXNE)**: This flag indicates that the receive buffer
    contains unread data'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**接收缓冲区非空（RXNE）**：此标志指示接收缓冲区包含未读数据'
- en: '**Transmit Buffer Empty (TXE)**: This flag signals that the transmit buffer
    is empty and ready for new data'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**发送缓冲区为空（TXE）**：此标志表示发送缓冲区为空，准备好接收新数据'
- en: '**CRC Error Flag (CRCERR)**: This flag is set when a CRC error is detected,
    indicating possible data corruption'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CRC错误标志（CRCERR）**：当检测到CRC错误时，此标志被设置，表示可能的数据损坏'
- en: '**Mode Fault (MODF)**: This flag signals a mode fault, often due to incorrect
    master/slave configuration'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模式故障（MODF）**：此标志表示模式故障，通常是由于主/从配置不正确引起的'
- en: '**Overrun Flag (OVR)**: This flag indicates an overrun condition, where the
    receive buffer wasn’t read in time'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**溢出标志（OVR）**：此标志指示溢出条件，即接收缓冲区没有及时读取'
- en: '**Busy Flag (BSY)**: This flag indicates that the SPI peripheral is currently
    engaged in a transmission or reception'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**忙标志（BSY）**：此标志指示SPI外设当前正在传输或接收中'
- en: The last key register is the Data Register.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个关键寄存器是数据寄存器。
- en: SPI Data Register (SPI_DR)
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SPI数据寄存器（SPI_DR）
- en: 'The `SPI_DR` register is the conduit for data transmission and reception. It’s
    where we write data to be sent out and read data that’s been received:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`SPI_DR`寄存器是数据传输和接收的通道。它是我们写入要发送的数据和读取已接收数据的所在地：'
- en: '`SPI_DR` register, data is sent out over the `MOSI` line'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SPI_DR`寄存器，数据通过`MOSI`线发送出去'
- en: '`SPI_DR`, you get the data that was received on the `MISO` line'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SPI_DR`，你从`MISO`线上获取接收到的数据'
- en: With these registers in mind, we’re now ready to develop the SPI driver. Let’s
    jump into that in the next section.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这些寄存器，我们现在可以开发SPI驱动程序。让我们在下一节中跳入那里。
- en: Developing the SPI driver
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发SPI驱动程序
- en: 'Create a copy of your previous project in your IDE and rename this copied project
    to `SPI`. Next, create a new file named `spi.c` in the `Src` folder and another
    file named `spi.h` in the `Inc` folder. Populate your `spi.c` file with the following
    code:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的IDE中创建你之前项目的副本，并将此复制的项目重命名为`SPI`。接下来，在`Src`文件夹中创建一个名为`spi.c`的新文件，在`Inc`文件夹中创建一个名为`spi.h`的新文件。在你的`spi.c`文件中填充以下代码：
- en: '[PRE0]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, we have the function for configuring the SPI parameters:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们有配置SPI参数的函数：
- en: '[PRE1]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here is the function for receiving data:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这是接收数据的函数：
- en: '[PRE2]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Finally, we have the functions for controlling the CS pin:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有控制CS引脚的函数：
- en: '[PRE3]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'And then, the function for deselecting the slave:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，是取消选择从机的函数：
- en: '[PRE4]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Let’s walk through each part of the SPI initialization and communication code.
    We’ll start by looking at the defined macros and then dive into each function.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐一查看SPI初始化和通信代码的每个部分。我们首先查看定义的宏，然后深入到每个函数。
- en: Defined macros
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义宏
- en: 'Let’s break down the meaning of the macros and their functions:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解宏的含义及其功能：
- en: '[PRE5]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Over here, we see the following:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们看到以下内容：
- en: '`SPI1EN`: This is defined as `(1U<<12)`, which sets bit 12\. It’s used to enable
    the clock for the SPI1 peripheral.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SPI1EN`：定义为`(1U<<12)`，这设置了位12。它用于启用SPI1外设的时钟。'
- en: '`GPIOAEN`: This is defined as `(1U<<0)`, which sets bit 0\. This enables the
    clock for `GPIOA`.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GPIOAEN`：定义为`(1U<<0)`，这设置了位0。这启用了`GPIOA`的时钟。'
- en: '`SR_TXE`: This is defined as `(1U<<1)`. This indicates that the transmit buffer
    is empty.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SR_TXE`：定义为`(1U<<1)`。这表示发送缓冲区为空。'
- en: '`SR_RXNE`: This is defined as `(1U<<0)`. This indicates that the receive buffer
    is not empty.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SR_RXNE`：定义为`(1U<<0)`。这表示接收缓冲区不为空。'
- en: '`SR_BSY`: This is defined as `(1U<<7)`. This indicates that the SPI interface
    is busy with a transfer.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SR_BSY`：定义为`(1U<<7)`。这表示SPI接口正在忙于传输。'
- en: Let’s break down the initialization function.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解初始化函数。
- en: GPIO initialization for SPI
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SPI的GPIO初始化
- en: 'Let’s analyze the configuration of the SPI1 GPIO pins:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分析SPI1 GPIO引脚的配置：
- en: '[PRE6]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This line enables the clock for `GPIOA` by setting the appropriate bit in the
    `AHB1` peripheral clock enable register:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码通过在`AHB1`外设时钟使能寄存器中设置适当的位来启用`GPIOA`的时钟：
- en: '[PRE7]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'These lines configure `PA5`, `PA6`, and `PA7` pins to alternate function modes,
    necessary for SPI:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这些行将`PA5`、`PA6`和`PA7`引脚配置为复用功能模式，这对于SPI是必要的：
- en: '[PRE8]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This configures `PA9` as a general-purpose output pin, which will be used for
    SS:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这将`PA9`配置为通用输出引脚，它将被用作SS：
- en: '[PRE9]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: These lines set the alternate function registers to configure `PA5`, `PA6`,
    and `PA7` for `SPI1`.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这些行设置复用功能寄存器以配置`PA5`、`PA6`和`PA7`为`SPI1`。
- en: SPI1 configuration
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SPI1配置
- en: 'Next, we have the code for configuring the SPI parameters:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们有配置SPI参数的代码：
- en: '[PRE10]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This line enables the clock for `SPI1` by setting the appropriate bit in the
    `APB2` peripheral clock enable register:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码通过在 `APB2` 外设时钟使能寄存器中设置适当的位来启用 `SPI1` 的时钟：
- en: '[PRE11]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'These lines configure the SPI clock prescaler to set the baud rate by dividing
    the `APB2` peripheral clock by 4, as SPI1 is connected to the `APB2` bus. The
    baud rate is determined by the `001` results in the peripheral clock being divided
    by 4, which dictates the speed at which data is transferred over the SPI bus:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这些行配置 SPI 时钟预分频器，通过将 `APB2` 外设时钟除以 4 来设置波特率，因为 SPI1 连接到 `APB2` 总线。波特率由 `001`
    结果决定，外设时钟被除以 4，这决定了数据在 SPI 总线上传输的速度：
- en: '[PRE12]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'These lines set the clock polarity and phase to ensure correct data sampling:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 这些行设置时钟极性和相位以确保正确的数据采样：
- en: '[PRE13]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This line ensures that full-duplex mode is enabled for simultaneous transmit
    and receive:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码确保全双工模式被启用，以实现同时发送和接收：
- en: '[PRE14]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This line configures SPI to transmit the MSB first:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码配置 SPI 以先发送 MSB：
- en: '[PRE15]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This line sets `SPI1` to master mode, making it the controller of the SPI bus:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码将 `SPI1` 设置为主模式，使其成为 SPI 总线的控制器：
- en: '[PRE16]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This line configures the SPI data frame size to `8` bits:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码配置 SPI 数据帧大小为 `8` 位：
- en: '[PRE17]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: These lines enable `SS` line.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 这些行启用 `SS` 线。
- en: '[PRE18]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This line enables the SPI peripheral for operation:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码启用 SPI 外设以进行操作：
- en: Let’s move on to the `spi1_transmit()` function.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续到 `spi1_transmit()` 函数。
- en: Transmitting data with SPI
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 SPI 传输数据
- en: 'This snippet deals with transmitting the data:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码处理数据的发送：
- en: '[PRE19]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This loop waits until the transmit buffer is empty before sending the next
    byte:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这个循环等待发送缓冲区为空，然后发送下一个字节：
- en: '[PRE20]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This line sends the current byte of data:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码发送当前字节的数据：
- en: '[PRE21]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This ensures the SPI bus is not busy before continuing:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这确保在继续之前 SPI 总线不忙：
- en: '[PRE22]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: These two lines play a crucial role in managing the SPI communication process.
    After the master transmits data through the SPI Data Register, the same register
    captures the data received from the slave. To ensure incoming data is properly
    processed, we read the Data Register, even if we don’t need the value. This read
    operation automatically clears the OVR flag. It’s also advisable to read the Status
    Register as part of this process.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这两行在管理 SPI 通信过程中起着至关重要的作用。在主设备通过 SPI 数据寄存器发送数据后，相同的寄存器捕获从设备发送的数据。为了确保传入的数据得到适当处理，我们读取数据寄存器，即使我们不需要该值。这个读取操作自动清除
    OVR 标志。在此过程中读取状态寄存器也是建议的。
- en: Next, we have the `spi1_receive()` function.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们有 `spi1_receive()` 函数。
- en: SPI data reception
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SPI 数据接收
- en: 'This deals with receiving the data:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 这处理接收数据：
- en: '[PRE23]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'This line sends dummy data to generate clock pulses:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码发送模拟数据以生成时钟脉冲：
- en: '[PRE24]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'This line waits until data is received:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码等待接收到数据：
- en: '[PRE25]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'This line reads the received data:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码读取接收到的数据：
- en: The last functions are the `cs_enable()` and `cs_disable()` functions.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的函数是 `cs_enable()` 和 `cs_disable()` 函数。
- en: CS management
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CS 管理
- en: 'This line pulls the SS line low to enable the slave device:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码将 SS 线拉低以启用从设备：
- en: '[PRE26]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This line pulls the SS line high to disable the slave device:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码将 SS 线拉高以禁用从设备：
- en: '[PRE27]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Our next task is to populate the `spi.h` file.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们下一个任务是填充 `spi.h` 文件。
- en: The header file
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 头文件
- en: 'Here is the code:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是代码：
- en: '[PRE28]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Over here, we are simply exposing the functions to make them accessible in other
    files.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们只是公开这些函数，以便在其他文件中访问它们。
- en: To effectively test the SPI driver, we need a suitable slave device. In the
    next section, we’ll dive into the **ADXL345 accelerometer**, which we’ll use as
    our slave device to test the SPI driver.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 为了有效地测试 SPI 驱动器，我们需要一个合适的从设备。在下一节中，我们将深入探讨**ADXL345 加速器**，我们将使用它作为我们的从设备来测试
    SPI 驱动器。
- en: Getting to know the ADXL345 accelerometer
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解 ADXL345 加速器
- en: '`ADXL345` is a gem in the world of digital accelerometers, and it’s perfect
    for testing our SPI module. Let’s dive into what makes this device so special
    and how it fits into our embedded system projects.'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '`ADXL345` 是数字加速度计世界中的一颗明珠，非常适合测试我们的 SPI 模块。让我们深入了解是什么让这个设备如此特别，以及它是如何融入我们的嵌入式系统项目的。'
- en: What is ADXL345?
  id: totrans-197
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 什么是 ADXL345？
- en: 'ADXL345 is a small, thin, ultralow power, `13`-bit) measurements with a selectable
    measurement range of **±2 g**, **±4 g**, **±8 g**, or **±****16 g**:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: ADXL345 是一个小巧、轻薄、超低功耗的 `13` 位测量设备，具有可选的测量范围 **±2 g**、**±4 g**、**±8 g** 或 **±16
    g**：
- en: '![Figure 12.3: The ADXL345](img/B21914_12_3.jpg)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.3：ADXL345](img/B21914_12_3.jpg)'
- en: 'Figure 12.3: The ADXL345'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.3：ADXL345
- en: Let’s analyze its key features.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分析其关键特性。
- en: Key features of the ADXL345
  id: totrans-202
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ADXL345 的关键特性
- en: 'Following is a list of the ADXL345’s features:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是ADXL345的功能列表：
- en: '**Ultralow power**: The device consumes as little as 23 µA in measurement mode
    and just 0.1 µA in standby mode, making it ideal for battery-powered applications.'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**超低功耗**：在测量模式下，该设备消耗的电流仅为23 µA，而在待机模式下仅为0.1 µA，使其非常适合电池供电的应用。'
- en: '**User-selectable resolution**: We can choose a resolution from 10 to 13 bits,
    providing a scale factor of 4 mg/LSB across all g ranges.'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户可选分辨率**：我们可以从10位到13位中选择分辨率，提供所有g范围内的4 mg/LSB的比例因子。'
- en: '**Flexible interface**: The ADXL345 supports both SPI (3- and 4-wire) and I2C
    digital interfaces, giving us flexibility in how you integrate it into your system.'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**灵活的接口**：ADXL345支持SPI（3线和4线）和I2C数字接口，使我们能够灵活地将它集成到系统中。'
- en: '**Special sensing functions**: It includes single tap, double tap, and free-fall
    detection, along with activity/inactivity monitoring. These functions can be individually
    mapped to two interrupt output pins, making it highly responsive to physical events.'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**特殊传感功能**：它包括单次轻击、双击和自由落体检测，以及活动/静止监测。这些功能可以单独映射到两个中断输出引脚，使其对物理事件反应极为灵敏。'
- en: '**Wide supply voltage range**: It operates from 2.0 V to 3.6 V, accommodating
    various power configurations.'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**宽电源电压范围**：它从2.0 V到3.6 V运行，适应各种电源配置。'
- en: '**Robust performance**: The ADXL345 can withstand a shock of up to 10,000 g,
    ensuring durability in rugged applications.'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**强大的性能**：ADXL345可以承受高达10,000 g的冲击，确保在恶劣应用中的耐用性。'
- en: Let’s see some of its common applications.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看它的常见应用。
- en: Applications
  id: totrans-211
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 应用
- en: 'Given its robust feature set, the ADXL345 is well suited for a range of applications:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 由于其强大的功能集，ADXL345非常适合各种应用：
- en: '**Industrial equipment**: For machinery monitoring and fault detection'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工业设备**：用于机器监控和故障检测'
- en: '**Aerospace equipment**: In systems where reliability and precision are paramount'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**航空航天设备**：在可靠性和精度至关重要的系统中'
- en: '**Consumer electronics**: Examples are smartphones, gaming devices, and wearable
    technology'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**消费电子产品**：例如智能手机、游戏设备和可穿戴技术'
- en: '**Health and sports**: For tracking motion and activity in health monitoring
    devices'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**健康和运动**：用于在健康监测设备中跟踪运动和活动'
- en: Let’s take a closer look at its sensing function.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地看看其传感功能。
- en: Sensing function
  id: totrans-218
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 传感功能
- en: 'At its core, the ADXL345 measures acceleration along three axes: *x*, *y*,
    and *z*. The data is available in a 16-bit two''s complement format and can be
    accessed via either the SPI or I2C interface.'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在其核心，ADXL345测量沿三个轴的加速度：*x*、*y*和*z*。数据以16位二进制补码格式提供，可以通过SPI或I2C接口访问。
- en: 'The following are its sensing functions:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是其传感功能：
- en: '**Activity and inactivity monitoring**: The accelerometer can detect movement
    or the absence thereof, making it great for sleep monitoring and fitness applications'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**活动和静止监测**：加速度计可以检测运动或其缺失，这使得它在睡眠监测和健身应用中非常出色'
- en: '**Tap detection**: It can recognize single and double taps in any direction,
    which is useful for gesture-based controls'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**轻击检测**：它可以识别任何方向的单次和双次轻击，这对于基于手势的控制非常有用'
- en: '**Free-fall detection**: The device can detect if it’s in free fall, which
    can be used in safety systems to trigger an alert or a response'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自由落体检测**：该设备可以检测是否处于自由落体状态，这可以在安全系统中触发警报或响应'
- en: '*Figure 12**.4* shows the *x*, *y*, and *z* axes:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '*图12.4*显示了*x*、*y*和*z*轴：'
- en: '![Figure 12.4: The x, y, and z axes](img/B21914_12_4.jpg)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![图12.4：x、y和z轴](img/B21914_12_4.jpg)'
- en: 'Figure 12.4: The x, y, and z axes'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.4：x、y和z轴
- en: The ADXL345 also offers various low-power modes to help manage power consumption
    intelligently. These modes allow the device to enter sleep or standby states based
    on our defined thresholds and activity levels.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: ADXL345还提供各种低功耗模式，以帮助智能管理功耗。这些模式允许设备根据我们定义的阈值和活动水平进入睡眠或待机状态。
- en: 'It also includes a 32-level **FIFO buffer**, which helps in storing data temporarily
    to reduce the load on the host processor. This buffer is especially useful in
    applications requiring high data throughput or when the processor is busy with
    other tasks. Lastly, its pinout is straightforward:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 它还包括一个32级**FIFO缓冲区**，这有助于暂时存储数据以减轻主处理器的负载。此缓冲区在需要高数据吞吐量或处理器忙于其他任务的应用中特别有用。最后，其引脚排列简单明了：
- en: '**VDD I/O**: Digital interface supply voltage'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**VDD I/O**：数字接口供电电压'
- en: '**GND**: Ground'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GND**：地'
- en: '**CS**: CS for SPI communication'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CS**：SPI通信的CS'
- en: '**INT1 and INT2**: Interrupt output pins'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**INT1和INT2**：中断输出引脚'
- en: '**SDA/SDI/SDIO**: Serial data line for I2C or SPI input'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SDA/SDI/SDIO**：I2C或SPI输入的串行数据线'
- en: '**SCL/SCLK**: Serial clock line for I2C or SPI'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SCL/SCLK**：I2C或SPI的串行时钟线'
- en: Before we dive into developing the driver for this slave device, let’s first
    explore some key concepts of acceleration measurement.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入开发该从设备驱动程序之前，让我们首先探索一些加速度测量的关键概念。
- en: Understanding key concepts – static acceleration of gravity, tilt-sensing, and
    dynamic acceleration
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解关键概念——重力静态加速度、倾斜感应和动态加速度
- en: When working with accelerometers such as the ADXL345, it’s important to grasp
    some fundamental concepts that underpin their operation and applications. Let’s
    break down what static acceleration of gravity, tilt-sensing, and dynamic acceleration
    mean.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 当与ADXL345等加速度计一起工作时，掌握一些支撑其操作和应用的基本概念非常重要。让我们来分解一下静态重力加速度、倾斜感应和动态加速度的含义。
- en: Static acceleration of gravity
  id: totrans-238
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 重力静态加速度
- en: '**Static acceleration of gravity** refers to the constant acceleration due
    to gravity that acts on an object at rest. This acceleration is always present
    and has a magnitude of approximately **9.8 meters per second squared (m/s²)**
    on the surface of the Earth.'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '**重力静态加速度**指的是作用于静止物体的重力引起的恒定加速度。这种加速度始终存在，在地球表面上的大小约为**9.8米每秒平方（m/s²）**。'
- en: 'In the context of an accelerometer such as the ADXL345, static acceleration
    is used to determine the orientation of the device. When the accelerometer is
    at rest and positioned flat, it measures the static acceleration of gravity along
    the *z* axis, which helps to identify which direction is “down.” This capability
    is crucial for applications such as the following:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在ADXL345等加速度计的背景下，静态加速度用于确定设备的方向。当加速度计处于静止且水平放置时，它测量沿*z*轴的重力静态加速度，这有助于确定哪个方向是“向下”。这一能力对于以下应用至关重要：
- en: '**Orientation detection**: Determining the device’s orientation relative to
    the Earth’s surface'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**方向检测**：确定设备相对于地球表面的方向'
- en: '**Tilt-sensing**: Measuring the tilt angle of the device by observing how gravity’s
    force changes across different axes'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**倾斜感应**：通过观察重力力在不同轴上的变化来测量设备的倾斜角度'
- en: The next important concept is tilt-sensing.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个重要的概念是倾斜感应。
- en: Tilt-sensing
  id: totrans-244
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 倾斜感应
- en: '**Tilt-sensing** is the process of measuring the angle at which an object is
    tilted with respect to the force of gravity. This is achieved by analyzing the
    static acceleration readings from the accelerometer.'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '**倾斜感应**是测量物体相对于重力力的倾斜角度的过程。这是通过分析加速度计的静态加速度读数来实现的。'
- en: 'Imagine holding a tablet. When you tilt it forward, backward, or sideways,
    the accelerometer inside detects changes in the static acceleration along its
    *x*, *y*, and *z* axes. By comparing these changes, the device can calculate the
    tilt angle. Here’s how it works:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下手持平板电脑。当你向前、向后或向侧面倾斜它时，内部的加速度计会检测到其*x*、*y*和*z*轴上的静态加速度变化。通过比较这些变化，设备可以计算出倾斜角度。以下是它是如何工作的：
- en: '**X-axis tilt**: If the device is tilted along the *x* axis, the static acceleration
    detected on the *x* axis will increase or decrease depending on the direction
    of the tilt.'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**X轴倾斜**：如果设备沿*x*轴倾斜，检测到的*x*轴静态加速度将根据倾斜方向增加或减少。'
- en: '**Y-axis tilt**: Similarly, tilting along the *y* axis will cause variations
    in the static acceleration readings on the *y* axis.'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Y轴倾斜**：同样，沿*y*轴倾斜将导致*y*轴静态加速度读数的变动。'
- en: '**Z-axis stability**: The *z* axis usually detects the full force of gravity
    when the device is lying flat. Changes in tilt cause redistributions of this force
    among the *x* and *y* axes.'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Z轴稳定性**：当设备水平放置时，*z*轴通常检测到重力的全部力量。倾斜的变化会导致这种力量在*x*轴和*y*轴之间重新分配。'
- en: 'Tilt-sensing is widely used in applications such as the following:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 倾斜感应在以下应用中得到了广泛使用：
- en: '**Screen orientation**: Automatically adjusting the display from portrait to
    landscape mode'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**屏幕方向**：自动调整显示从纵向到横向模式'
- en: '**Gaming controllers**: Detecting movements and tilts to enhance gameplay'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**游戏控制器**：检测移动和倾斜以增强游戏体验'
- en: '**Industrial equipment**: Monitoring the tilt of machinery or vehicles for
    stability and safety'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工业设备**：监测机械或车辆的倾斜以保障稳定性和安全性'
- en: The final key concept is dynamic acceleration.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的关键概念是动态加速度。
- en: Dynamic acceleration
  id: totrans-255
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 动态加速度
- en: '**Dynamic acceleration** refers to the acceleration that results from motion
    or external forces acting on the device. Unlike static acceleration, which is
    constant, dynamic acceleration varies based on how the device is moving.'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '**动态加速度**是指由设备运动或外部力作用产生的加速度。与恒定的静态加速度不同，动态加速度根据设备如何移动而变化。'
- en: 'For instance, if you shake or move the accelerometer, it measures these changes
    as dynamic acceleration. This type of acceleration is crucial for the following:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你摇晃或移动加速度计，它会将这些变化测量为动态加速度。这种加速度对于以下方面至关重要：
- en: '**Motion detection**: Identifying when the device is moved, which can be used
    in fitness trackers to count steps'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运动检测**：识别设备何时被移动，这可以用于健身追踪器来计数步数'
- en: '**Shock or impact sensing**: Detecting sudden impacts or vibrations, useful
    in crash detection systems or drop tests'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**冲击或振动感应**：检测突然的冲击或振动，在碰撞检测系统或跌落测试中很有用'
- en: '**Vibration monitoring**: Measuring vibrations in industrial machinery to predict
    failures or maintenance needs'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**振动监测**：测量工业机械中的振动，以预测故障或维护需求'
- en: 'Before wrapping up this section, let’s clarify one more concept we introduced
    earlier: “g.”'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 在结束本节之前，让我们再澄清一个我们之前介绍的概念：“g。”
- en: When dealing with accelerometers such as the ADXL345, you often come across
    terms such as ±2 g, ±4 g, ±8 g, or ±16 g. These terms are crucial for understanding
    the measurement capabilities and limits of the device. Let’s break down what g
    means and how these ranges affect the performance and application of an accelerometer.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 当处理如ADXL345这样的加速度计时，你经常会遇到±2 g、±4 g、±8 g或±16 g这样的术语。这些术语对于理解设备的测量能力和限制至关重要。让我们分解一下g的含义以及这些范围如何影响加速度计的性能和应用。
- en: What is g?
  id: totrans-263
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 什么是g？
- en: The term *g* refers to the acceleration due to gravity at the Earth’s surface,
    which is approximately 9.8 **meters per second squared** (**m/s²**). It is used
    as a unit of measurement for acceleration. When we say an accelerometer can measure
    ±2 g, it means it can detect accelerations up to twice the force of gravity in
    either direction along an axis.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 术语*g*指的是地球表面的重力加速度，大约为9.8 **米每秒平方**（**m/s²**）。它被用作加速度的单位。当我们说加速度计可以测量±2 g时，这意味着它可以检测到沿轴方向重力两倍的加速度。
- en: With this clarified, we are now ready to develop the driver for the ADXL345
    device.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这一澄清，我们现在可以开始为ADXL345设备开发驱动程序。
- en: Developing the ADXL345 driver
  id: totrans-266
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开发ADXL345驱动程序
- en: Create a new file named `adxl345.c` in the `Src` folder and another file named
    `adxl345.h` in the `Inc` folder.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Src`文件夹中创建一个名为`adxl345.c`的新文件，在`Inc`文件夹中创建一个名为`adxl345.h`的新文件。
- en: The header file
  id: totrans-268
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 头文件
- en: 'Populate the `adxl345.h` file with this:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下内容填充到`adxl345.h`文件中：
- en: '[PRE29]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '#include "adxl345.h"'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '#include "adxl345.h"'
- en: void adxl_read(uint8_t address, uint8_t * rxdata)
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: void adxl_read(uint8_t address, uint8_t * rxdata)
- en: '{'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: /*Set read operation*/
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: /*设置读操作*/
- en: address |= ADXL345_READ_OPERATION;
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: address |= ADXL345_READ_OPERATION;
- en: /*Enable multi-byte*/
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: /*启用多字节模式*/
- en: address |= ADXL345_MULTI_BYTE_ENABLE;
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: address |= ADXL345_MULTI_BYTE_ENABLE;
- en: /*Pull cs line low to enable slave*/
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: /*将cs线拉低以启用从设备*/
- en: cs_enable();
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: cs_enable();
- en: /*Send address*/
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: /*发送地址*/
- en: spi1_transmit(&address,1);
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: spi1_transmit(&address,1);
- en: /*Read 6 bytes */
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: /*读取6个字节 */
- en: spi1_receive(rxdata,6);
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: spi1_receive(rxdata,6);
- en: /*Pull cs line high to disable slave*/
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: /*将cs线拉高以禁用从设备*/
- en: cs_disable();
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: cs_disable();
- en: '}'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: void adxl_write (uint8_t address, uint8_t value)
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: void adxl_write (uint8_t address, uint8_t value)
- en: '{'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: uint8_t data[2];
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: uint8_t data[2];
- en: /*Enable multi-byte, place address into buffer*/
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: /*启用多字节，将地址放入缓冲区*/
- en: data[0] = address|ADXL345_MULTI_BYTE_ENABLE;
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: data[0] = address|ADXL345_MULTI_BYTE_ENABLE;
- en: /*Place data into buffer*/
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: /*将数据放入缓冲区*/
- en: data[1] = value;
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: data[1] = value;
- en: /*Pull cs line low to enable slave*/
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: /*将cs线拉低以启用从设备*/
- en: cs_enable();
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: cs_enable();
- en: /*Transmit data and address*/
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: /*传输数据和地址*/
- en: spi1_transmit(data, 2);
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: spi1_transmit(data, 2);
- en: /*Pull cs line high to disable slave*/
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: /*将cs线拉高以禁用从设备*/
- en: cs_disable();
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: cs_disable();
- en: '}'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: void adxl_init (void)
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: void adxl_init (void)
- en: '{'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: /*Enable SPI gpio*/
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: /*启用SPI gpio*/
- en: spi_gpio_init();
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: spi_gpio_init();
- en: /*Config SPI*/
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: /*配置SPI*/
- en: spi1_config();
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: spi1_config();
- en: /*Set data format range to +-4g*/
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: /*设置数据格式范围为+-4g*/
- en: adxl_write (ADXL345_REG_DATA_FORMAT, ADXL345_RANGE_4G);
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: adxl_write (ADXL345_REG_DATA_FORMAT, ADXL345_RANGE_4G);
- en: /*Reset all bits*/
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: /*重置所有位*/
- en: adxl_write (ADXL345_REG_POWER_CTL, ADXL345_RESET);
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: adxl_write (ADXL345_REG_POWER_CTL, ADXL345_RESET);
- en: /*Configure power control measure bit*/
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: /*配置电源控制测量位*/
- en: adxl_write (ADXL345_REG_POWER_CTL, ADXL345_MEASURE_BIT);
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: adxl_write (ADXL345_REG_POWER_CTL, ADXL345_MEASURE_BIT);
- en: '}'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE30]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '#include <stdio.h>'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '#include <stdio.h>'
- en: '#include <stdint.h>'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '#include <stdint.h>'
- en: '#include "stm32f4xx.h"'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '#include "stm32f4xx.h"'
- en: '#include "uart.h"'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '#include "uart.h"'
- en: '#include "adxl345.h"'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '#include "adxl345.h"'
- en: //Variables for storing accelerometer data
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: // 用于存储加速度计数据的变量
- en: int16_t accel_x, accel_y, accel_z;
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: int16_t accel_x, accel_y, accel_z;
- en: double accel_x_g, accel_y_g, accel_z_g;
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: double accel_x_g, accel_y_g, accel_z_g;
- en: uint8_t data_buffer[6];
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: uint8_t data_buffer[6];
- en: int main(void)
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: int main(void)
- en: '{'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: uart_init();
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: uart_init();
- en: // Initialize the ADXL345 accelerometer
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: // 初始化ADXL345加速度计
- en: adxl_init();
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: adxl_init();
- en: while (1)
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: while (1)
- en: '{'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: // Read accelerometer data starting from the data start
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: // 从数据起始位置读取加速度计数据
- en: // register
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: // 注册
- en: adxl_read(ADXL345_REG_DATA_START, data_buffer);
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: adxl_read(ADXL345_REG_DATA_START, data_buffer);
- en: // Combine high and low bytes to form the accelerometer data
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: // 将高字节和低字节合并形成加速度计数据
- en: accel_x = (int16_t)((data_buffer[1] << 8) | data_buffer[0]);
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: accel_x = (int16_t)((data_buffer[1] << 8) | data_buffer[0]);
- en: accel_y = (int16_t)((data_buffer[3] << 8) | data_buffer[2]);
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: accel_y = (int16_t)((data_buffer[3] << 8) | data_buffer[2]);
- en: accel_z = (int16_t)((data_buffer[5] << 8) | data_buffer[4]);
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: accel_z = (int16_t)((data_buffer[5] << 8) | data_buffer[4]);
- en: // Convert raw data to g values
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: // 将原始数据转换为g值
- en: accel_x_g = accel_x * 0.0078;
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: accel_x_g = accel_x * 0.0078;
- en: accel_y_g = accel_y * 0.0078;
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: accel_y_g = accel_y * 0.0078;
- en: accel_z_g = accel_z * 0.0078;
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: accel_z_g = accel_z * 0.0078;
- en: //Print values for debugging purposes
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: // 打印值以进行调试目的
- en: 'printf("accel_x : %d accel_y : %d  accel_z : %d\n\'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 'printf("accel_x : %d accel_y : %d  accel_z : %d\n\'
- en: r",accel_x,accel_y,accel_z);
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: r",accel_x,accel_y,accel_z);
- en: '}'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: return 0;
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: return 0;
- en: '}'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE31]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: accel_x = (int16_t)((data_buffer[1] << 8) | data_buffer[0]);
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: accel_x = (int16_t)((data_buffer[1] << 8) | data_buffer[0]);
- en: accel_y = (int16_t)((data_buffer[3] << 8) | data_buffer[2]);
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: accel_y = (int16_t)((data_buffer[3] << 8) | data_buffer[2]);
- en: accel_z = (int16_t)((data_buffer[5] << 8) | data_buffer[4]);
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: accel_z = (int16_t)((data_buffer[5] << 8) | data_buffer[4]);
- en: '[PRE32]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: accel_x_g = accel_x * 0.0078;
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: accel_x_g = accel_x * 0.0078;
- en: accel_y_g = accel_y * 0.0078;
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: accel_y_g = accel_y * 0.0078;
- en: accel_z_g = accel_z * 0.0078;
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: accel_z_g = accel_z * 0.0078;
- en: '[PRE33]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'printf("accel_x : %d accel_y : %d  accel_z : %d\n\r",accel_x,accel_y,accel_z);'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 'printf("accel_x : %d accel_y : %d  accel_z : %d\n\r",accel_x,accel_y,accel_z);'
- en: '[PRE34]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
