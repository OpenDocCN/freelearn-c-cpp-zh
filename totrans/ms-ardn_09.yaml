- en: Environment Sensors
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 环境传感器
- en: In this chapter, we will look at building a really simple weather station using
    the DHT11 temperature/humidity sensor and a raindrop sensor. While the previous
    chapter used the basic digital input, the DHT11 temperature sensor will give us
    the opportunity to use a third-party library, and the raindrop sensor will use
    an analog pin. We will also introduce a couple of handy functions that we can
    use.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨如何使用DHT11温度/湿度传感器和雨滴传感器构建一个真正简单的气象站。虽然上一章使用了基本的数字输入，但DHT11温度传感器将给我们提供使用第三方库的机会，而雨滴传感器将使用模拟引脚。我们还将介绍一些实用的函数，我们可以使用它们。
- en: 'In this chapter, you will learn:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习：
- en: How to add third-party libraries to a sketch
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何将第三方库添加到草图
- en: How to use the `isnan()` function
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用`isnan()`函数
- en: How to use the `map()` function
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用`map()`函数
- en: How to use the DHT11 temperature and humidity sensor
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用DHT11温度和湿度传感器
- en: How to use a rain sensor
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用雨传感器
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: The DHT11 is a low-cost temperature and humidity sensor. This sensor uses a
    thermistor to measure the temperature. The word **thermistor** is a combination
    of thermal (temperature) and resistor because it is a type of resistor where the
    resistance is highly sensitive to temperature even more so than a normal resistor.
    The current temperature can be determined based on the output voltage of the thermistor.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: DHT11是一种低成本的温度和湿度传感器。该传感器使用热敏电阻来测量温度。**热敏电阻**这个词是由热（温度）和电阻组合而成的，因为它是一种电阻，其电阻对温度的敏感性非常高，甚至比普通电阻还要高。可以根据热敏电阻的输出电压确定当前温度。
- en: When working with a thermistor, the first thing we need to do is to determine
    how to calculate the temperature based on the output voltage. With the TMP36 temperature
    sensor that we used with the prototype that was created in [Chapter 4](f0039485-e47c-40c8-9130-fba1e1afd421.xhtml),
    *Basic Prototyping*, we could easily calculate the temperature based on the output
    voltage of the sensor with a basic formula of (*voltage* - *0.5*) * *100.0* because
    it uses a solid-state technique to determine the temperature. This is not the
    case with a thermistor. While a linear approximation, similar to how we calculated
    the temperature with the TMP36 sensor, may work for a small temperature range,
    to get an accurate temperature measurement from a thermistor we need to determine
    a resistance/temperature curve for the device.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当与热敏电阻一起工作时，我们首先需要做的是确定如何根据输出电压计算温度。在[第4章](f0039485-e47c-40c8-9130-fba1e1afd421.xhtml)中我们使用的TMP36温度传感器原型中，我们可以通过一个基本的公式（*电压*
    - *0.5*）* *100.0*轻松地根据传感器的输出电压计算温度，因为这个传感器使用固态技术来确定温度。热敏电阻的情况并非如此。虽然线性近似，类似于我们使用TMP36传感器计算温度的方法，可能适用于较小的温度范围，但要从热敏电阻中获得准确的温度测量，我们需要确定设备的电阻/温度曲线。
- en: 'Luckily there are several libraries for the Arduino that are written to help
    us get an accurate temperature from the DHT11 temperature and humidity sensor.
    In this chapter, we will be using the **Adafruit** library. The DHT11 sensor will
    look similar to the following photograph:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，有几个Arduino库是为了帮助我们从DHT11温度和湿度传感器中获得准确的温度而编写的。在本章中，我们将使用**Adafruit**库。DHT11传感器将看起来类似于以下照片：
- en: '![](img/2f6aec1c-7375-4e1c-9d8d-3c98358db89a.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2f6aec1c-7375-4e1c-9d8d-3c98358db89a.png)'
- en: With most DHT11 sensors, the pins are clearly marked as shown in the preceding
    photograph. The **VCC** pin will connect to the power rail on the breadboard,
    which should be connected to the 5V out pin on the Arduino. The **GND** pin will
    connect to the ground rail on the breadboard, which should be connected to the
    ground out pin on the Arduino. The **DATA** pin will connect to one of the digital
    pins on the Arduino.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大多数DHT11传感器，引脚标记得很清楚，如前一张照片所示。**VCC**引脚将连接到面包板上的电源轨，它应该连接到Arduino的5V输出引脚。**GND**引脚将连接到面包板上的地轨，它应该连接到Arduino的地输出引脚。**DATA**引脚将连接到Arduino的一个数字引脚。
- en: Some DHT temperature sensors come with a pull-up resistor built in, while others
    require an external one. Please look at the documentation for your sensor to verify
    if you need to add an external pull-up resistor or not. In the project for this
    chapter, we will show the external pull up resistor.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 一些DHT温度传感器内置了上拉电阻，而另一些则需要外部上拉电阻。请查阅您的传感器文档，以验证是否需要添加外部上拉电阻。在本章的项目中，我们将展示外部上拉电阻。
- en: For the project in this chapter, we will also be using a generic raindrop sensor.
    This sensor has two parts. The first part is the rain sensor board, which detects
    the rain when the water completes the circuits on the board's printed leads. This
    sensor board acts as a variable resistor where the amount of current increases
    as the board gets wetter. The second part of the raindrop sensor is the electronic
    printed circuit board that will determine the amount water based on the current
    from the sensor board.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章的项目，我们还将使用一个通用的雨滴传感器。这个传感器有两个部分。第一部分是雨传感器板，当水完成板上的印刷引线电路时，它会检测到雨水。这个传感器板充当一个可变电阻，随着板变湿，电流的量增加。雨滴传感器的第二部分是电子印刷电路板，它将根据传感器板的电流确定水的量。
- en: 'The following photograph shows what the raindrop sensor looks like:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 以下照片显示了雨滴传感器的样子：
- en: '![](img/4f39d6d2-01dd-46d1-a38b-83edb1ac4579.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4f39d6d2-01dd-46d1-a38b-83edb1ac4579.png)'
- en: The +/- pins on the printed circuit board connect to the pins on the rain sensor
    board. On the opposite side of the printed circuit board are four pins. The VCC
    and GND pins will connect to the power and ground rails of the breadboard respectively.
    For the project in this chapter, we will use the **A0** analog output pin as the
    output for the sensor. The A0 pin will connect directly to one of the analog in
    pins on the Arduino.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 印刷电路板上的 +/- 引脚连接到雨传感器板上的引脚。印刷电路板的另一侧有四个引脚。VCC 和 GND 引脚将分别连接到面包板的电源和地轨。对于本章的项目，我们将使用
    **A0** 模拟输出引脚作为传感器的输出。A0 引脚将直接连接到 Arduino 上的一个模拟输入引脚。
- en: Components needed
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 需要的组件
- en: 'We will need the following components for this chapter''s project:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要以下组件来完成本章的项目：
- en: One Arduino Uno or compatible board
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 Arduino Uno 或兼容板
- en: One DHT11 temperature/humidity sensor
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 DHT11 温湿度传感器
- en: One MH-RD raindrop sensor
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 MH-RD 雨滴传感器
- en: One 4.7K resistor
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 4.7K 电阻
- en: Jumper wires
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跳线
- en: One breadboard
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个面包板
- en: Circuit diagrams
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 电路图
- en: 'The following diagram shows the Fritzing diagram for this project:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示了本项目的 Fritzing 图：
- en: '![](img/e11121f7-5345-4251-a6f2-39070b5f6843.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e11121f7-5345-4251-a6f2-39070b5f6843.png)'
- en: In this diagram, we can see that the VCC and ground pins on both sensors are
    connected to the power and ground rails on the breadboard. The power and ground
    rails on the breadboard are connected to the 5V out and the ground pins on the
    Arduino.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个图表中，我们可以看到两个传感器的 VCC 和地引脚都连接到面包板上的电源和地轨。面包板上的电源和地轨连接到 Arduino 的 5V 输出和地引脚。
- en: The image of the DHT11 sensor that we showed earlier in this chapter shows a
    DHT11 sensor with three pins; however, the sensor in the Fritzing library has
    four pins. It is safe to ignore the extra pin on the Fritzing diagram.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章前面展示的 DHT11 传感器图像显示了一个带有三个引脚的 DHT11 传感器；然而，Fritzing 库中的传感器有四个引脚。在 Fritzing
    图中忽略额外的引脚是安全的。
- en: This diagram shows that the data pin on the DHT11 sensor is connected to the
    digital 3 pin on the Arduino and it also has a 4.7K pull-up resistor. If the DHT11
    sensor that you are using does not have a built-in pull-up resistor, you will
    need to add this external one that is shown in this diagram. The analog out on
    the rain sensor is connected to the analog 2 input pin on the Arduino.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 此图表显示 DHT11 传感器的数据引脚连接到 Arduino 的数字 3 引脚，并且它还有一个 4.7K 上拉电阻。如果您使用的 DHT11 传感器没有内置上拉电阻，您需要添加此图中所示的外部上拉电阻。雨传感器上的模拟输出连接到
    Arduino 的模拟 2 输入引脚。
- en: Code
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码
- en: 'Before we can start writing code, we will need to load in the DHT11 Adafruit
    library that we will be using to read the temperature and humidity readings. You
    can find the source code for this library on Adafruit''s GitHub page here: [https://github.com/adafruit/DHT-sensor-library](https://github.com/adafruit/DHT-sensor-library).'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始编写代码之前，我们需要加载我们将使用的 DHT11 Adafruit 库来读取温度和湿度读数。您可以在 Adafruit 的 GitHub 页面上找到此库的源代码：[https://github.com/adafruit/DHT-sensor-library](https://github.com/adafruit/DHT-sensor-library)。
- en: '**Note:** You will need to refer to this code for the challenge section of
    this chapter.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：**您需要参考此代码来完成本章的挑战部分。'
- en: 'To install the library, if you are using the Arduino IDE, select the Sketch
    option in the menu bar and select Include Library and then Manage Libraries as
    shown in the following screenshot:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装库，如果您使用 Arduino IDE，请从菜单栏中选择 Sketch 选项，然后选择 Include Library，然后选择 Manage Libraries，如下面的截图所示：
- en: '![](img/a17d8cb4-8cbb-4b1e-bda0-92f49dfe34d5.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a17d8cb4-8cbb-4b1e-bda0-92f49dfe34d5.png)'
- en: 'In the window that opens up, type `dht11` in the search bar and you should
    see a couple different DHT11 sensor libraries. In this chapter, we will be using
    the one from Adafruit (In the following list, the first result). Click on this
    library, and you will see a button all the way to the right to install it as shown
    in the following screenshot:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在打开的窗口中，在搜索栏中输入`dht11`，你应该会看到几个不同的DHT11传感器库。在本章中，我们将使用来自Adafruit的库（在以下列表中，第一个结果）。点击这个库，你会在最右边看到一个安装按钮，如下面的屏幕截图所示：
- en: '![](img/586f38fe-03ac-42df-b738-bbe8810b0925.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/586f38fe-03ac-42df-b738-bbe8810b0925.png)'
- en: 'For the Arduino Web Editor, click on the Libraries option and then type `dht11` in
    the search bar as shown in the following screenshot:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Arduino Web编辑器，点击“库”选项，然后在搜索栏中输入`dht11`，如下面的屏幕截图所示：
- en: '![](img/65656753-9908-4b2c-a3ae-bff5a8ccbe2c.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/65656753-9908-4b2c-a3ae-bff5a8ccbe2c.png)'
- en: 'This probably will not return any results; therefore, we will need to click
    on the LIBRARY MANAGER link, which will bring up the library manager with results
    of the DHT11 search as shown in the following image:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能不会返回任何结果；因此，我们需要点击“库管理器”链接，这将打开库管理器，并显示DHT11搜索的结果，如下面的图片所示：
- en: '![](img/a43509cd-cc26-49d2-8cd3-bd790d88aaef.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a43509cd-cc26-49d2-8cd3-bd790d88aaef.png)'
- en: As the instructions at the top of this window tell us, we need to click on the
    star of the library we wish to include and then click on the DONE button. Unfortunately,
    the library manager in the Web Editor does not tell us who created the library;
    however, if you notice, the names from the three libraries match the library names
    we saw from the Arduino IDE. Therefore, we are able to tell which library is the
    Adafruit library by the title.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如此窗口顶部的说明所述，我们需要点击要包含的库的星号，然后点击“完成”按钮。不幸的是，Web编辑器中的库管理器没有告诉我们是谁创建了库；然而，如果你注意到，三个库的名称与我们在Arduino
    IDE中看到的库名称相匹配。因此，我们可以通过标题来判断哪个是Adafruit库。
- en: 'Now that we have the library installed it is time to start writing the code.
    The first thing we will need to do is to include the header file for the DHT sensor
    library. We can do this by adding the following `include` statement at the top
    of the sketch:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了库，是时候开始编写代码了。我们首先需要做的是包含DHT传感器库的头文件。我们可以通过在代码顶部添加以下`include`语句来实现：
- en: '[PRE0]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, we need to define some macros. We will start off by defining the Arduino
    pins that the DHT11 and the raindrop sensor are connected to:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要定义一些宏。我们将从定义DHT11和雨滴传感器连接到的Arduino引脚开始：
- en: '[PRE1]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This code tells us that the DHT11 sensor is connected to the digital 3 pin
    and the rain sensor is connected to the analog 2 pin. The Adafruit DHT sensor
    library can read both the DHT11 and DHT22 sensors. Therefore, we will need to
    tell the library which sensor type we are using, and we should create a macro
    that contains this type. The following code defines the DHT sensor type:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码告诉我们DHT11传感器连接到数字3引脚，雨传感器连接到模拟2引脚。Adafruit DHT传感器库可以读取DHT11和DHT22传感器。因此，我们需要告诉库我们使用的是哪种传感器类型，并且我们应该创建一个包含此类型的宏。以下代码定义了DHT传感器类型：
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Finally, we will need to create four macros that will help us understand the
    readings from the rain sensor. If you recall, the Analog input pins will map the
    input voltage into integer values ranging from 0 to 1023\. When we read the input
    from the rain sensor, a value of 1023 means that there is no rain while a value
    of 0 means a flood. This makes sense from a purely electronic point of view; however,
    it seems backwards from a logical point of view where a rain sensor should report
    a higher value when there is more rain.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要创建四个宏，这将帮助我们理解雨传感器的读数。如果你还记得，模拟输入引脚将输入电压映射到0到1023的整数值。当我们从雨传感器读取输入时，1023的值表示没有雨，而0的值表示洪水。从纯电子角度来看，这是有意义的；然而，从逻辑角度来看，这似乎是相反的，因为雨传感器应该在雨更多时报告更高的值。
- en: 'We will use the Arduino `map()` function to change this for us. Therefore,
    we will need to define the min/max values for the analog readings and the min/max
    values for what we want to convert the analog values to. We will explain this
    some more when we look at the code for the `map()` function; for now here are
    the macros:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Arduino的`map()`函数来帮我们转换。因此，我们需要定义模拟读数的最大/最小值以及我们想要将模拟值转换到的最大/最小值。我们将在查看`map()`函数的代码时进一步解释这一点；现在，这里有一些宏：
- en: '[PRE3]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now we will want to create an instance of the `DHT` class using the `DHT_PIN`
    and `DHT_TYPE` macros we just defined. The following code will create an instance
    of the `DHT` class:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将想要使用我们刚刚定义的 `DHT_PIN` 和 `DHT_TYPE` 宏来创建 `DHT` 类的一个实例。以下代码将创建 `DHT` 类的一个实例：
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now that we have defined the macros needed and created a global instance of
    the `DHT` class, we need to create the `setup()` function. In the `setup()` function
    we will need to initialize the serial monitor and the `DHT` class. The `begin()`
    method of the `DHT` class is used to initialize the instance of the class. The
    following code shows the `setup()` function:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经定义了所需的宏并创建了 `DHT` 类的全局实例，我们需要创建 `setup()` 函数。在 `setup()` 函数中，我们需要初始化串行监视器和
    `DHT` 类。`DHT` 类的 `begin()` 方法用于初始化类的实例。以下代码显示了 `setup()` 函数：
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now that we have the `setup()` function let''s look at how to read the DHT
    and rain sensors. The remainder of the code in this chapter will go into the `loop()`
    function of our sketch. The following code will read the humidity and temperature
    from the DHT sensor using the Adafruit library:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了 `setup()` 函数，让我们看看如何读取 DHT 和雨量传感器。本章剩余的代码将进入我们的草图中的 `loop()` 函数。以下代码将使用
    Adafruit 库从 DHT 传感器读取湿度和温度：
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This code starts off by calling the `readHumidity()` method of the `DHT` class
    to read the humidity from the DHT sensor. The `readTemperature()` method is then
    called twice, once to read the temperature in Celsius and once to read the temperature
    in Fahrenheit. Notice that when the `readTemperature()` method is called without
    a parameter, we receive the temperature in Celsius and when we pass a Boolean
    parameter of `true` we receive the temperature in Fahrenheit. We could also pass
    a Boolean parameter of `false` to receive the temperature in Celsius.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码首先调用 `DHT` 类的 `readHumidity()` 方法来从 DHT 传感器读取湿度。然后调用 `readTemperature()`
    方法两次，一次读取摄氏度温度，一次读取华氏度温度。请注意，当 `readTemperature()` 方法不带参数调用时，我们接收摄氏度温度；当我们传递布尔参数
    `true` 时，我们接收华氏度温度。我们也可以传递布尔参数 `false` 来接收摄氏度温度。
- en: After the temperature and humidity are read from the sensor, it is good practice
    to verify that the read was successful. To do this, we are using the `isnan()`
    function. The `isnan()` function will return `true` if the value passed in is
    not a number, therefore, the line `if (isnan(humidity) || isnan(celsius) || isnan(Fahrenheit))`
    reads "if humidity is not a number or Celsius is not a number or Fahrenheit is
    not a number then execute the code block". This code block will print an error
    message to the console and then execute a `return` statement to exit this loop.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在从传感器读取温度和湿度之后，验证读取是否成功是一个好习惯。为此，我们使用了 `isnan()` 函数。如果传入的值不是数字，`isnan()` 函数将返回
    `true`，因此，行 `if (isnan(humidity) || isnan(celsius) || isnan(Fahrenheit))` 读取为“如果湿度不是数字或摄氏度不是数字或华氏度不是数字，则执行代码块”。此代码块将打印错误消息到控制台，然后执行
    `return` 语句以退出此循环。
- en: If all of the variables are numbers, we print the humidity and temperatures
    to the serial console and then wait 3 seconds before exiting this loop and starting
    the loop function again.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果所有变量都是数字，我们将湿度温度打印到串行控制台，然后等待 3 秒钟，退出此循环并再次开始循环函数。
- en: 'Now let''s look at how we would read the rain sensor. Put the following code
    between the final `Serial.println()` statement and the `delay()` function call
    of the DHT sensor code:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看看如何读取雨量传感器。将以下代码放在最终的 `Serial.println()` 语句和 DHT 传感器代码中的 `delay()` 函数调用之间：
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In this code, we call the `analogRead()` function to read the analog pin that
    the rain sensor's connected to and use the `isnan()` function to verify that the
    read was successful. After we verify that the `analogRead()` function was performed
    successfully, we call the `map()` function. The `map()` function will re-map a
    value from one range of numbers to a new range of numbers.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在此代码中，我们调用 `analogRead()` 函数来读取雨量传感器连接的模拟引脚，并使用 `isnan()` 函数来验证读取是否成功。在验证 `analogRead()`
    函数成功执行后，我们调用 `map()` 函数。`map()` 函数将重新映射一个值从一个数字范围到新的数字范围。
- en: 'This function has five parameters, which are:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数有五个参数，它们是：
- en: '`value`: The value to map'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`value`：要映射的值'
- en: '`fromLow`: The lower limit of the value''s current range'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fromLow`：值当前范围的下限'
- en: '`fromHigh`: The upper limit of the value''s current range'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fromHigh`：值当前范围的上限'
- en: '`toLow`: The lower limit of the value''s new range'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`toLow`：值的新范围的下限'
- en: '`toHigh`: The upper limit of the value''s new range'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`toHigh`：值新范围的上限'
- en: 'If we take the `map()` function call in the previous code and replace the macros
    with the actual values, the `map()` function would look like this:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将前一段代码中的`map()`函数调用中的宏替换为实际值，`map()`函数将看起来像这样：
- en: '[PRE8]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The value for the rain variable comes from the `analogRead()` function, which
    we know will have a value ranging from `0` to `1023`. Therefore, we set the current
    range to have a lower limit of `0` and an upper limit of `1023`. If you recall
    from earlier in this chapter, a value of 1023 means there is no rain while a value
    of 0 means there is a flood. We will want to reverse this with the new range where
    the higher value will mean more rain and the lower value will mean less rain.
    Therefore, we set the lower limit of the new range to `20` and the upper limit
    to `0`. This will map a value of 1023 from the old range to a value of 0 in the
    new range and a value of 0 in the old range to a value of `20` in the new range.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 雨变量值来自`analogRead()`函数，我们知道它的值将在`0`到`1023`之间。因此，我们将当前范围的下限设置为`0`，上限设置为`1023`。如果你还记得本章前面的内容，1023的值表示没有雨，而0的值表示洪水。我们希望在新范围内反转这个值，其中较高的值表示更多的雨，而较低的值表示较少的雨。因此，我们将新范围的下限设置为`20`，上限设置为`0`。这将把旧范围内的1023值映射到新范围内的0，而旧范围内的0值映射到新范围内的`20`。
- en: With this new range, a high value of `20` means that we have a flood and a low
    value of zero means there is no rain. A middle value from the old range (511 or
    512) would map to the middle value in the new range (10). The `map()` function
    is very useful when we want to change a scale and/or reverse the order as we see
    in this example.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个新范围，`20`的高值表示洪水，而零的低位值表示没有雨。旧范围中的中间值（511或512）将映射到新范围中的中间值（10）。`map()`函数在我们想要改变比例和/或反转顺序时非常有用，就像在这个例子中看到的那样。
- en: After the `map()` function is called we print the results to the serial console.
    Now let's see what happens when we run this project.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用`map()`函数后，我们将结果打印到串行控制台。现在让我们看看运行这个项目会发生什么。
- en: Running the project
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行项目
- en: 'When we run this project, we should see a result similar to the following screenshot:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行这个项目时，我们应该看到以下截图类似的结果：
- en: '![](img/ef74651f-83df-4e2f-87cd-923108d8daef.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ef74651f-83df-4e2f-87cd-923108d8daef.png)'
- en: Now try sprinkling the rain sensor board (the part of the raindrop sensor that
    senses the rain) with water and see how it changes the rain output.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在尝试用水喷洒雨传感器板（雨滴传感器感应雨的部分）并观察它如何改变雨输出。
- en: '**NOTE**: Always use caution when using water around electronic projects. If
    you get your Arduino or other electronic component wet you will damage them. When
    working with AC power with relays, you also run the risk of electrocution.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：在电子项目周围使用水时总是要小心。如果你让你的Arduino或其他电子元件弄湿，你会损坏它们。当使用继电器处理交流电时，你也面临着触电的风险。'
- en: Now let's look at the challenge.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看挑战。
- en: Challenge
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 挑战
- en: For this challenge, use the `DHT` library to compute the heat index. The heat
    index is the discomfort felt as the result of the temperature and humidity combined.
    There are methods within the `DHT` class that will do this for you.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个挑战，使用`DHT`库来计算热指数。热指数是温度和湿度结合引起的不适感。`DHT`类中有方法可以为你完成这个工作。
- en: At the beginning of this chapter, we gave a link to the GitHub repository that
    contained the code for the DHT sensor library. Look at the `DHT.h` file to see
    what methods are in the DHT class.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的开头，我们提供了一个链接到包含DHT传感器库代码的GitHub仓库。查看`DHT.h`文件以了解DHT类中有哪些方法。
- en: Summary
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, we used a third-party library for the first time. This was
    the Adafruit DHT sensor library. We also saw two new functions that we have not
    used before. These functions were the `isnan()` and `map()` functions.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们首次使用了第三方库。这是Adafruit DHT传感器库。我们还看到了两个之前未使用过的新函数。这些函数是`isnan()`和`map()`函数。
- en: In the next chapter, we will look at range and collision detection sensors.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨范围和碰撞检测传感器。
