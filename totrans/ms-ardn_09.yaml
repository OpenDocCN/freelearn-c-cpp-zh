- en: Environment Sensors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will look at building a really simple weather station using
    the DHT11 temperature/humidity sensor and a raindrop sensor. While the previous
    chapter used the basic digital input, the DHT11 temperature sensor will give us
    the opportunity to use a third-party library, and the raindrop sensor will use
    an analog pin. We will also introduce a couple of handy functions that we can
    use.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn:'
  prefs: []
  type: TYPE_NORMAL
- en: How to add third-party libraries to a sketch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use the `isnan()` function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use the `map()` function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use the DHT11 temperature and humidity sensor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use a rain sensor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The DHT11 is a low-cost temperature and humidity sensor. This sensor uses a
    thermistor to measure the temperature. The word **thermistor** is a combination
    of thermal (temperature) and resistor because it is a type of resistor where the
    resistance is highly sensitive to temperature even more so than a normal resistor.
    The current temperature can be determined based on the output voltage of the thermistor.
  prefs: []
  type: TYPE_NORMAL
- en: When working with a thermistor, the first thing we need to do is to determine
    how to calculate the temperature based on the output voltage. With the TMP36 temperature
    sensor that we used with the prototype that was created in [Chapter 4](f0039485-e47c-40c8-9130-fba1e1afd421.xhtml),
    *Basic Prototyping*, we could easily calculate the temperature based on the output
    voltage of the sensor with a basic formula of (*voltage* - *0.5*) * *100.0* because
    it uses a solid-state technique to determine the temperature. This is not the
    case with a thermistor. While a linear approximation, similar to how we calculated
    the temperature with the TMP36 sensor, may work for a small temperature range,
    to get an accurate temperature measurement from a thermistor we need to determine
    a resistance/temperature curve for the device.
  prefs: []
  type: TYPE_NORMAL
- en: 'Luckily there are several libraries for the Arduino that are written to help
    us get an accurate temperature from the DHT11 temperature and humidity sensor.
    In this chapter, we will be using the **Adafruit** library. The DHT11 sensor will
    look similar to the following photograph:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2f6aec1c-7375-4e1c-9d8d-3c98358db89a.png)'
  prefs: []
  type: TYPE_IMG
- en: With most DHT11 sensors, the pins are clearly marked as shown in the preceding
    photograph. The **VCC** pin will connect to the power rail on the breadboard,
    which should be connected to the 5V out pin on the Arduino. The **GND** pin will
    connect to the ground rail on the breadboard, which should be connected to the
    ground out pin on the Arduino. The **DATA** pin will connect to one of the digital
    pins on the Arduino.
  prefs: []
  type: TYPE_NORMAL
- en: Some DHT temperature sensors come with a pull-up resistor built in, while others
    require an external one. Please look at the documentation for your sensor to verify
    if you need to add an external pull-up resistor or not. In the project for this
    chapter, we will show the external pull up resistor.
  prefs: []
  type: TYPE_NORMAL
- en: For the project in this chapter, we will also be using a generic raindrop sensor.
    This sensor has two parts. The first part is the rain sensor board, which detects
    the rain when the water completes the circuits on the board's printed leads. This
    sensor board acts as a variable resistor where the amount of current increases
    as the board gets wetter. The second part of the raindrop sensor is the electronic
    printed circuit board that will determine the amount water based on the current
    from the sensor board.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following photograph shows what the raindrop sensor looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4f39d6d2-01dd-46d1-a38b-83edb1ac4579.png)'
  prefs: []
  type: TYPE_IMG
- en: The +/- pins on the printed circuit board connect to the pins on the rain sensor
    board. On the opposite side of the printed circuit board are four pins. The VCC
    and GND pins will connect to the power and ground rails of the breadboard respectively.
    For the project in this chapter, we will use the **A0** analog output pin as the
    output for the sensor. The A0 pin will connect directly to one of the analog in
    pins on the Arduino.
  prefs: []
  type: TYPE_NORMAL
- en: Components needed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will need the following components for this chapter''s project:'
  prefs: []
  type: TYPE_NORMAL
- en: One Arduino Uno or compatible board
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One DHT11 temperature/humidity sensor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One MH-RD raindrop sensor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One 4.7K resistor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jumper wires
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One breadboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Circuit diagrams
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following diagram shows the Fritzing diagram for this project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e11121f7-5345-4251-a6f2-39070b5f6843.png)'
  prefs: []
  type: TYPE_IMG
- en: In this diagram, we can see that the VCC and ground pins on both sensors are
    connected to the power and ground rails on the breadboard. The power and ground
    rails on the breadboard are connected to the 5V out and the ground pins on the
    Arduino.
  prefs: []
  type: TYPE_NORMAL
- en: The image of the DHT11 sensor that we showed earlier in this chapter shows a
    DHT11 sensor with three pins; however, the sensor in the Fritzing library has
    four pins. It is safe to ignore the extra pin on the Fritzing diagram.
  prefs: []
  type: TYPE_NORMAL
- en: This diagram shows that the data pin on the DHT11 sensor is connected to the
    digital 3 pin on the Arduino and it also has a 4.7K pull-up resistor. If the DHT11
    sensor that you are using does not have a built-in pull-up resistor, you will
    need to add this external one that is shown in this diagram. The analog out on
    the rain sensor is connected to the analog 2 input pin on the Arduino.
  prefs: []
  type: TYPE_NORMAL
- en: Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we can start writing code, we will need to load in the DHT11 Adafruit
    library that we will be using to read the temperature and humidity readings. You
    can find the source code for this library on Adafruit''s GitHub page here: [https://github.com/adafruit/DHT-sensor-library](https://github.com/adafruit/DHT-sensor-library).'
  prefs: []
  type: TYPE_NORMAL
- en: '**Note:** You will need to refer to this code for the challenge section of
    this chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the library, if you are using the Arduino IDE, select the Sketch
    option in the menu bar and select Include Library and then Manage Libraries as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a17d8cb4-8cbb-4b1e-bda0-92f49dfe34d5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the window that opens up, type `dht11` in the search bar and you should
    see a couple different DHT11 sensor libraries. In this chapter, we will be using
    the one from Adafruit (In the following list, the first result). Click on this
    library, and you will see a button all the way to the right to install it as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/586f38fe-03ac-42df-b738-bbe8810b0925.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For the Arduino Web Editor, click on the Libraries option and then type `dht11` in
    the search bar as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/65656753-9908-4b2c-a3ae-bff5a8ccbe2c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This probably will not return any results; therefore, we will need to click
    on the LIBRARY MANAGER link, which will bring up the library manager with results
    of the DHT11 search as shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a43509cd-cc26-49d2-8cd3-bd790d88aaef.png)'
  prefs: []
  type: TYPE_IMG
- en: As the instructions at the top of this window tell us, we need to click on the
    star of the library we wish to include and then click on the DONE button. Unfortunately,
    the library manager in the Web Editor does not tell us who created the library;
    however, if you notice, the names from the three libraries match the library names
    we saw from the Arduino IDE. Therefore, we are able to tell which library is the
    Adafruit library by the title.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have the library installed it is time to start writing the code.
    The first thing we will need to do is to include the header file for the DHT sensor
    library. We can do this by adding the following `include` statement at the top
    of the sketch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we need to define some macros. We will start off by defining the Arduino
    pins that the DHT11 and the raindrop sensor are connected to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This code tells us that the DHT11 sensor is connected to the digital 3 pin
    and the rain sensor is connected to the analog 2 pin. The Adafruit DHT sensor
    library can read both the DHT11 and DHT22 sensors. Therefore, we will need to
    tell the library which sensor type we are using, and we should create a macro
    that contains this type. The following code defines the DHT sensor type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Finally, we will need to create four macros that will help us understand the
    readings from the rain sensor. If you recall, the Analog input pins will map the
    input voltage into integer values ranging from 0 to 1023\. When we read the input
    from the rain sensor, a value of 1023 means that there is no rain while a value
    of 0 means a flood. This makes sense from a purely electronic point of view; however,
    it seems backwards from a logical point of view where a rain sensor should report
    a higher value when there is more rain.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use the Arduino `map()` function to change this for us. Therefore,
    we will need to define the min/max values for the analog readings and the min/max
    values for what we want to convert the analog values to. We will explain this
    some more when we look at the code for the `map()` function; for now here are
    the macros:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we will want to create an instance of the `DHT` class using the `DHT_PIN`
    and `DHT_TYPE` macros we just defined. The following code will create an instance
    of the `DHT` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have defined the macros needed and created a global instance of
    the `DHT` class, we need to create the `setup()` function. In the `setup()` function
    we will need to initialize the serial monitor and the `DHT` class. The `begin()`
    method of the `DHT` class is used to initialize the instance of the class. The
    following code shows the `setup()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have the `setup()` function let''s look at how to read the DHT
    and rain sensors. The remainder of the code in this chapter will go into the `loop()`
    function of our sketch. The following code will read the humidity and temperature
    from the DHT sensor using the Adafruit library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This code starts off by calling the `readHumidity()` method of the `DHT` class
    to read the humidity from the DHT sensor. The `readTemperature()` method is then
    called twice, once to read the temperature in Celsius and once to read the temperature
    in Fahrenheit. Notice that when the `readTemperature()` method is called without
    a parameter, we receive the temperature in Celsius and when we pass a Boolean
    parameter of `true` we receive the temperature in Fahrenheit. We could also pass
    a Boolean parameter of `false` to receive the temperature in Celsius.
  prefs: []
  type: TYPE_NORMAL
- en: After the temperature and humidity are read from the sensor, it is good practice
    to verify that the read was successful. To do this, we are using the `isnan()`
    function. The `isnan()` function will return `true` if the value passed in is
    not a number, therefore, the line `if (isnan(humidity) || isnan(celsius) || isnan(Fahrenheit))`
    reads "if humidity is not a number or Celsius is not a number or Fahrenheit is
    not a number then execute the code block". This code block will print an error
    message to the console and then execute a `return` statement to exit this loop.
  prefs: []
  type: TYPE_NORMAL
- en: If all of the variables are numbers, we print the humidity and temperatures
    to the serial console and then wait 3 seconds before exiting this loop and starting
    the loop function again.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s look at how we would read the rain sensor. Put the following code
    between the final `Serial.println()` statement and the `delay()` function call
    of the DHT sensor code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In this code, we call the `analogRead()` function to read the analog pin that
    the rain sensor's connected to and use the `isnan()` function to verify that the
    read was successful. After we verify that the `analogRead()` function was performed
    successfully, we call the `map()` function. The `map()` function will re-map a
    value from one range of numbers to a new range of numbers.
  prefs: []
  type: TYPE_NORMAL
- en: 'This function has five parameters, which are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`value`: The value to map'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fromLow`: The lower limit of the value''s current range'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fromHigh`: The upper limit of the value''s current range'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`toLow`: The lower limit of the value''s new range'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`toHigh`: The upper limit of the value''s new range'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If we take the `map()` function call in the previous code and replace the macros
    with the actual values, the `map()` function would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The value for the rain variable comes from the `analogRead()` function, which
    we know will have a value ranging from `0` to `1023`. Therefore, we set the current
    range to have a lower limit of `0` and an upper limit of `1023`. If you recall
    from earlier in this chapter, a value of 1023 means there is no rain while a value
    of 0 means there is a flood. We will want to reverse this with the new range where
    the higher value will mean more rain and the lower value will mean less rain.
    Therefore, we set the lower limit of the new range to `20` and the upper limit
    to `0`. This will map a value of 1023 from the old range to a value of 0 in the
    new range and a value of 0 in the old range to a value of `20` in the new range.
  prefs: []
  type: TYPE_NORMAL
- en: With this new range, a high value of `20` means that we have a flood and a low
    value of zero means there is no rain. A middle value from the old range (511 or
    512) would map to the middle value in the new range (10). The `map()` function
    is very useful when we want to change a scale and/or reverse the order as we see
    in this example.
  prefs: []
  type: TYPE_NORMAL
- en: After the `map()` function is called we print the results to the serial console.
    Now let's see what happens when we run this project.
  prefs: []
  type: TYPE_NORMAL
- en: Running the project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we run this project, we should see a result similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ef74651f-83df-4e2f-87cd-923108d8daef.png)'
  prefs: []
  type: TYPE_IMG
- en: Now try sprinkling the rain sensor board (the part of the raindrop sensor that
    senses the rain) with water and see how it changes the rain output.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**: Always use caution when using water around electronic projects. If
    you get your Arduino or other electronic component wet you will damage them. When
    working with AC power with relays, you also run the risk of electrocution.'
  prefs: []
  type: TYPE_NORMAL
- en: Now let's look at the challenge.
  prefs: []
  type: TYPE_NORMAL
- en: Challenge
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this challenge, use the `DHT` library to compute the heat index. The heat
    index is the discomfort felt as the result of the temperature and humidity combined.
    There are methods within the `DHT` class that will do this for you.
  prefs: []
  type: TYPE_NORMAL
- en: At the beginning of this chapter, we gave a link to the GitHub repository that
    contained the code for the DHT sensor library. Look at the `DHT.h` file to see
    what methods are in the DHT class.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we used a third-party library for the first time. This was
    the Adafruit DHT sensor library. We also saw two new functions that we have not
    used before. These functions were the `isnan()` and `map()` functions.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at range and collision detection sensors.
  prefs: []
  type: TYPE_NORMAL
