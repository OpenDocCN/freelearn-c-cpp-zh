["```cpp\n#include <iostream>\n#include <iomanip>\n#include <cstring> // though, we'll prefer std:: string,\n// char [ ] demos the const qualifier easily in cases below\nusing std::cout;     // preferable to: using namespace std;\nusing std::cin;\nusing std::endl;\nusing std::setw;\n// simple const variable declaration and initialization\n// Convention will capitalize those known at compile time\n// (those taking the place of a former macro #define)\nconst int MAX = 50; \n// simple constexpr var. declaration and init. (preferred)\nconstexpr int LARGEST = 50;\nconstexpr int Minimum(int a, int b)  \n// function definition w formal parameters\n{\n    return (a < b)? a : b;   // conditional operator ?: \n}\n```", "```cpp\nint main()\n{\n    int x = 0, y = 0;\n    // Since 'a', 'b' could be calculated at runtime\n    // (such as from values read in), we will use lowercase\n    constexpr int a = 10, b = 15;// both 'a', 'b' are const\n    cout << \"Enter two <int> values: \";\n    cin >> x >> y;\n    // const variable initialized w return val. of a fn.\n    const int min = Minimum(x, y);  \n    cout << \"Minimum is: \" << min << endl;\n    // constexpr initialized with return value of function\n    constexpr int smallest = Minimum(a, b);           \n    cout << \"Smallest of \" << a << \" \" << b << \" is: \" \n         << smallest << endl;\n    char bigName[MAX] = {\"\"};  // const used to size array\n    char largeName[LARGEST] = {\"\"}; // same for constexpr \n    cout << \"Enter two names: \";\n    cin >> setw(MAX) >> bigName >> setw(LARGEST) >>\n           largeName;\n    const int namelen = strlen(bigName);   \n    cout << \"Length of name 1: \" << namelen << endl;\n    cout << \"Length of name 2: \" << strlen(largeName) <<\n             endl;\n    return 0;\n}\n```", "```cpp\nEnter two <int> values: 39 17\nMinimum is: 17\nSmallest of 10 15 is: 10\nEnter two names: Gabby Dorothy\nLength of name 1: 5\nLength of name 2: 7\n```", "```cpp\n#include <iostream>\nusing std::cout;     // preferred to: using namespace std;\nusing std:: endl;\n[[nodiscard]] int Minimum(int, int);   // fn. prototype\n\nint main()\n{\n    int x = 5, y = 89;\n    // function call with actual parameters\n    cout << Minimum(x, y) << endl;     \n    return 0;                          \n}\n[[nodiscard]] int Minimum(int a, int b) // fn. definition\n                                 // with formal parameters \n{\n    return (a < b)? a : b;  \n}\n```", "```cpp\n5\n```", "```cpp\n#include <iostream>\nusing std::cout;    // preferred to: using namespace std;\nusing std::endl;\n// function prototype with optional argument names\n[[nodiscard]] int Minimum(int arg1, int arg2);\n\nint main()\n{\n    int x = 5, y = 89;\n    cout << Minimum(x, y) << endl;      // function call\n    return 0;\n}\n[[nodiscard]] int Minimum(int a, int b) // fn. definition\n{\n    return (a < b)? a : b;  \n}\n```", "```cpp\n5\n```", "```cpp\n#include <iostream>\nusing std::cout;    // preferred to: using namespaces std;\nusing std::endl;\n// fn. prototype with one default value\n[[nodiscard]] int Minimum(int arg1, int arg2 = 100000);  \nint main()\n{\n    int x = 5, y = 89;\n    cout << Minimum(x) << endl; // function call with only\n                             // one argument (uses default)\n    cout << Minimum(x, y) << endl; // no default vals used\n    return 0;\n}\n[[nodiscard]] int Minimum(int a, int b) // fn. definition\n{\n    return (a < b)? a : b;  \n}\n```", "```cpp\n5\n5\n```", "```cpp\n#include <iostream>\nusing std::cout;    // preferred to: using namespace std;\nusing std::endl;\n// standard function prototype\n[[nodiscard]] int Minimum(int, int);   \nvoid Function1(int x)\n{   \n    // local prototype with default value\n    [[nodiscard]] int Minimum(int arg1, int arg2 = 500); \n    cout << Minimum(x) << endl; \n}\nvoid Function2(int x)\n{\n    // local prototype with default value\n    [[nodiscard]] int Minimum(int arg1, int arg2 = 90);  \n    cout << Minimum(x) << endl; \n}\n\n[[nodiscard]] int Minimum(int a, int b) // fn. definition\n{ \n    return (a < b)? a : b;   \n}\nint main()\n{\n    Function1(30);    \n    Function2(450);\n    return 0;\n}\n```", "```cpp\n30\n90\n```", "```cpp\n#include <iostream>\n#include <cmath>\nusing std::cout;    // preferred to: using namespace std;\nusing std::endl;\nconstexpr float PI = 3.14159;\nclass Circle     // simple user defined type declarations\n{\npublic:\n   float radius;\n   float area;\n};\nclass Rectangle\n{\npublic:\n   float length;\n   float width;\n   float area;\n};\nvoid Display(Circle);     // 'overloaded' fn. prototypes\nvoid Display(Rectangle);  // since they differ in signature\n```", "```cpp\nint main()\n{\n    Circle myCircle;\n    Rectangle myRect;\n    Rectangle mySquare;\n    myCircle.radius = 5.0;\n    myCircle.area = PI * pow(myCircle.radius, 2.0);\n    myRect.length = 2.0;\n    myRect.width = 4.0;\n    myRect.area = myRect.length * myRect.width;\n    mySquare.length = 4.0;\n    mySquare.width = 4.0;\n    mySquare.area = mySquare.length * mySquare.width;\n    Display(myCircle);   // invoke: void display(Circle)\n    Display(myRect);     // invoke: void display(Rectangle)\n    Display(mySquare);\n    return 0;\n}\n```", "```cpp\nvoid Display (Circle c)\n{\n   cout << \"Circle with radius \" << c.radius;\n   cout << \" has an area of \" << c.area << endl; \n}\n\nvoid Display (Rectangle r)\n{\n   cout << \"Rectangle with length \" << r.length;\n   cout << \" and width \" << r.width;\n   cout << \" has an area of \" << r.area << endl; \n}\n```", "```cpp\nCircle with radius 5 has an area of 78.5397\nRectangle with length 2 and width 4 has an area of 8\nRectangle with length 4 and width 4 has an area of 16\n```", "```cpp\n#include <iostream>\nusing std::cout;    // preferred to: using namespace std;\nusing std::endl;\nint Maximum(double, double);      // function prototype\n\nint main()\n{\n    int result = 0;\n    int m = 6, n = 10;\n    float x = 5.7, y = 9.89;\n\n    result =  Maximum(x, y); \n    cout << \"Result is: \" << result << endl;\n    cout << \"The maximum is: \" << Maximum(m, n) << endl;\n    return 0;\n}\nint Maximum(double a, double b)  // function definition\n{\n    return (a > b)? a : b;\n}\n```", "```cpp\nResult is: 9\nThe maximum is: 10\n```", "```cpp\n#include <iostream>\nusing std::cout;    // preferred to: using namespace std;\nusing std::endl;\nint Maximum (int, int);   // overloaded function prototypes\nfloat Maximum (float, float); \nint main()\n{\n    char a = 'A', b = 'B';\n    float x = 5.7, y = 9.89;\n    int m = 6, n = 10;\n    cout << \"The max is: \" << Maximum(a, b) << endl;\n    cout << \"The max is: \" << Maximum(x, y) << endl;\n    cout << \"The max is: \" << Maximum(m, n) << endl;\n    // The following (ambiguous) line generates a compiler \n// error - there are two equally good fn. candidates \n    // cout << \"The maximum is: \" << Maximum(a, y) << endl;\n    // We can force a choice by using an explicit typecast\n    cout << \"The max is: \" << \n             Maximum(static_cast<float>(a), y) << endl;\n    return 0;\n}\nint Maximum (int arg1, int arg2)    // function definition\n{\n    return (arg1 > arg2)? arg1 : arg2;\n}\nfloat Maximum (float arg1, float arg2)  // overloaded fn.\n{                                    \n    return (arg1 > arg2)? arg1 : arg2;\n}\n```", "```cpp\nThe maximum is: 66\nThe maximum is: 9.89\nThe maximum is: 10\nThe maximum is: 65\n```"]