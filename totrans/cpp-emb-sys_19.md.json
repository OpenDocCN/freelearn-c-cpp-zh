["```cpp\n#include <cstdio>\n#include “etl/vector.h”\n#include <algorithm>\nclass subscriber {\npublic:\n    virtual void update(float) = 0;\n    virtual ~subscriber() = default;\n};\nclass display : public subscriber {\npublic:\n    void update(float temp) override {\n        printf(“Displaying temperature %.2f \\r\\n”, temp);\n    }\n};\nclass data_sender : public subscriber {\npublic:\n    void update(float temp) override {\n        printf(“Sending temperature %.2f \\r\\n”, temp);\n    }\n};\nclass logger : public subscriber {\npublic:\n    void update(float temp) override {\n        printf(“Logging temperature %.2f \\r\\n”, temp);\n    }\n}; \n```", "```cpp\nclass publisher {\npublic:\n    void register_sub(subscriber * sub) {\n        if(std::find(subs_.begin(), subs_.end(), sub) == subs_.end())\n        {\n            subs_.push_back(sub);\n        }\n    }\n    void unregister(subscriber * sub) {\n        if(auto it = std::find(subs_.begin(), subs_.end(),\n                                  sub); it != subs_.end())\n        {\n            subs_.erase(it);\n        }\n    }\n    void notify(float value) {\n        for(auto sub: subs_) {\n            sub->update(value);\n        }\n    }\nprivate:\n    etl::vector<subscriber*, 8> subs_;\n}; \n```", "```cpp\nint main() {   \n    logger temp_logger;\n    display temp_display;\n    data_sender temp_data_sender;\n    publisher temp_publisher;\n    temp_publisher.register_sub(&temp_logger);\n    temp_publisher.register_sub(&temp_display);\n    temp_publisher.notify(24.02f);\n    temp_publisher.unregister(&temp_logger);\n    temp_publisher.register_sub(&temp_data_sender);\n    temp_publisher.notify(44.02f);\n    return 0;\n} \n```", "```cpp\nLogging temperature 24.02\nDisplaying temperature 24.02 \n```", "```cpp\nDisplaying temperature 44.02\nSending temperature 44.02 \n```", "```cpp\n$ cmake –B build\n$ cmake --build build --target run_in_renode \n```", "```cpp\n#include <cstdio>\nstruct display {\n    static void update(float temp) {\n        printf(“Displaying temperature %.2f \\r\\n”, temp);\n    }\n};\nstruct data_sender {\n    static void update(float temp) {\n        printf(“Sending temperature %.2f \\r\\n”, temp);\n    }\n};\nstruct logger {\n    static void update(float temp) {\n        printf(“Logging temperature %.2f \\r\\n”, temp);\n    }\n};\ntemplate <typename... Subs>\nstruct publisher {\n    static void notify(float temp) {\n        (Subs::update(temp), ...);\n    }\n};\nint main() {\n    using temp_publisher = publisher<display,\n    data_sender,\n    logger>;\n    temp_publisher::notify(23.47);\n    return 0;\n} \n```", "```cpp\n.LC0:\n.ascii “Displaying temperature %.2f \\015\\012\\000”\n.LC1:\n.ascii “Sending temperature %.2f \\015\\012\\000”\n.LC2:\n.ascii “Logging temperature %.2f \\015\\012\\000”\nmain:\npush    {r4, r5, r6, lr}\n        mov r4, #-536870912\nldr r5, .L3\n        mov r2, r4\nmov r3, r5\nldr r0, .L3+4\nbl      printf\n        mov r2, r4\nmov r3, r5\nldr r0, .L3+8\nbl      printf\n        mov r2, r4\nmov r3, r5\nldr r0, .L3+12\nbl      printf\n        mov r0, #0\npop     {r4, r5, r6, lr}\n        bx lr\n.L3:\n.word 1077377105\n.word   .LC0\n        .word   .LC1\n        .word   .LC2 \n```", "```cpp\n$ cmake -B build\n-DMAIN_CPP_FILE_NAME=main_observer_ct_basic.cpp\n$ cmake --build build --target run_in_renode \n```", "```cpp\ntemplate<typename T>\nconcept Updatable = requires (T, float f) {\n    { T::update(f) } -> std::same_as<void>;\n};\ntemplate<typename T>\nconcept Notifiable = requires (T, float f) {\n    { T::notify(f) } -> std::same_as<void>;\n};\ntemplate <typename... Subs>\nstruct publisher {\n    static void notify(float temp) {\n        (call_update_or_notify<Subs>(temp), ...);\n    }\nprivate:\n    template<typename T>\n static void call_update_or_notify(float temp) {\n        if constexpr (Updatable<T>) {\n            T::update(temp);\n        } else if constexpr (Notifiable<T>) {\n            T::notify(temp);\n        }\n        else {\n            static_assert(false, “Type is not Updatable or Notifiable”);\n        }\n    }\n}; \n```", "```cpp\n using temp_publisher = publisher<display, data_sender>;\n    temp_publisher::notify(23.47);\n    using temp_publisher_new = publisher<temp_publisher, logger>;\n    temp_publisher_new::notify(42.42); \n```", "```cpp\nDisplaying temperature 23.47\nSending temperature 23.47\nDisplaying temperature 42.42\nSending temperature 42.42\nLogging temperature 42.42 \n```", "```cpp\n$ cmake -B build -DMAIN_CPP_FILE_NAME=main_observer_ct.cpp\n$ cmake --build build --target run_in_renode \n```"]