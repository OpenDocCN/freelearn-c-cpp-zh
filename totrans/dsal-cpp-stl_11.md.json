["```cpp\nstd::vector<int> numbers = {5, 3, 8, 1, 4};\nstd::sort(numbers.begin(), numbers.end());\n```", "```cpp\nstd::sort(products.begin(), products.end(), [](const Product& a, const Product& b) {\n    return a.name > b.name;\n});\n```", "```cpp\n#include <algorithm>\n#include <iostream>\n#include <vector>\nint main() {\n  std::vector<int> grades = {85, 90, 78, 92,\n                             88, 76, 95, 89};\n  if (std::all_of(grades.begin(), grades.end(),\n                  [](int grade) { return grade > 0; })) {\n    std::cout << \"All students have positive grades.\\n\";\n  } else {\n    std::cout << \"Not all grades are positive.\\n\";\n  }\n  if (std::none_of(grades.begin(), grades.end(),\n                   [](int grade) { return grade < 80; })) {\n    std::cout\n        << \"No student has scored below passing marks.\\n\";\n  } else {\n    std::cout << \"There are students who scored below \"\n                 \"passing marks.\\n\";\n  }\n  if (std::any_of(grades.begin(), grades.end(),\n                  [](int grade) { return grade >= 95; })) {\n    std::cout << \"There's at least one student with an \"\n                 \"'exceptional' grade.\\n\";\n  } else {\n    std::cout\n        << \"No student has an 'exceptional' grade.\\n\";\n  }\n  return 0;\n}\n```", "```cpp\nAll students have positive grades.\nThere are students who scored below passing marks.\nThere's at least one student with an 'exceptional' grade.\n```", "```cpp\n#include <algorithm>\n#include <iostream>\n#include <vector>\nint main() {\n  std::vector<double> prices = {5.99, 10.49, 20.89, 25.55,\n                                30.10};\n  if (std::is_sorted(prices.begin(), prices.end())) {\n    std::cout << \"The product prices are sorted in\"\n                 \"ascending order.\\n\";\n  } else {\n    std::cout << \"The product prices are not sorted.\\n\";\n  }\n  auto partitionPoint = std::partition(\n      prices.begin(), prices.end(),\n      [](double price) { return price < 20.0; });\n  if (std::is_partitioned(\n          prices.begin(), prices.end(),\n          [](double price) { return price < 20.0; })) {\n    std::cout << \"Prices are partitioned with prices less \"\n                 \"than $20 first.\\n\";\n  } else {\n    std::cout << \"Prices are not partitioned based on the \"\n                 \"given criteria.\\n\";\n  }\n  std::vector<double> shuffledPrices = {25.55, 5.99, 30.10,\n                                        10.49, 20.89};\n  // Using std::is_permutation to ascertain if\n  // shuffledPrices is a reordering of prices\n  if (std::is_permutation(prices.begin(), prices.end(),\n                          shuffledPrices.begin())) {\n    std::cout\n        << \"Sequences are permutations of each other.\\n\";\n  } else {\n    std::cout << \"Sequences are not permutations of each \"\n                 \"other.\\n\";\n  }\n  return 0;\n}\n```", "```cpp\nThe product prices are sorted in ascending order.\nPrices are partitioned with prices less than $20 first.\nSequences are permutations of each other.\n```", "```cpp\n#include <algorithm>\n#include <iostream>\n#include <vector>\nint main() {\n  std::vector<int> grades = {85, 90, 78, 92,\n                             88, 76, 95, 89};\n  const auto exact_count =\n      std::count(grades.begin(), grades.end(), 90);\n  std::cout << \"Number of students who scored exactly 90:\"\n            << exact_count << \"\\n\";\n  const auto above_count =\n      std::count_if(grades.begin(), grades.end(),\n                    [](int grade) { return grade > 90; });\n  std::cout << \"Number of students who scored above 90:\"\n            << above_count << \"\\n\";\n  return 0;\n}\n```", "```cpp\nNumber of students who scored exactly 90: 1\nNumber of students who scored above 90: 2\n```", "```cpp\n#include <algorithm>\n#include <iostream>\n#include <list>\nstruct Student {\n  std::string name;\n  int grade{0};\n  Student(std::string n, int g) : name(n), grade(g) {}\n};\nint main() {\n  std::list<Student> students = {\n      {\"Lisa\", 85},   {\"Corbin\", 92}, {\"Aaron\", 87},\n      {\"Daniel\", 92}, {\"Mandy\", 78},  {\"Regan\", 92},\n  };\n  auto first_92 = std::find_if(\n      students.begin(), students.end(),\n      [](const Student &s) { return s.grade == 92; });\n  if (first_92 != students.end()) {\n    std::cout << first_92->name\n              << \"was the first to score 92.\\n\";\n  }\n  std::list<Student> searchFor = {{\"\", 92}};\n  auto last_92 = std::find_end(\n      students.begin(), students.end(), searchFor.begin(),\n      searchFor.end(),\n      [](const Student &s, const Student &value) {\n        return s.grade == value.grade;\n      });\n  if (last_92 != students.end()) {\n    std::cout << last_92->name\n              << \"was the last to score 92.\\n\";\n  }\n  return 0;\n}\n```", "```cpp\nCorbin was the first to score 92.\nRegan was the last to score 92.\n```", "```cpp\n#include <algorithm>\n#include <iostream>\n#include <set>\n#include <string>\nstruct Student {\n  std::string name;\n  int grade{0};\n  bool operator<(const Student &other) const {\n    return grade < other.grade; // Sorting based on grade\n  }\n};\nint main() {\n  std::set<Student> students = {\n      {\"Amanda\", 68},  {\"Claire\", 72}, {\"Aaron\", 85},\n      {\"William\", 85}, {\"April\", 92},  {\"Bryan\", 96},\n      {\"Chelsea\", 98}};\n  Student searchStudent{\"\", 85};\n  const auto lb = std::lower_bound(\n      students.begin(), students.end(), searchStudent);\n  if (lb != students.end() && lb->grade == 85) {\n    std::cout\n        << lb->name\n        << \" is the first student with a grade of 85.\\n\";\n  }\n  const auto ub = std::upper_bound(\n      students.begin(), students.end(), searchStudent);\n  if (ub != students.end()) {\n    std::cout << ub->name\n              << \" is the next student after the last one \"\n                 \"with a grade of 85, with a grade of \"\n              << ub->grade << \".\\n\";\n  }\n  if (std::binary_search(students.begin(), students.end(),\n                         searchStudent)) {\n    std::cout << \"There's at least one student with a \"\n                 \"grade of 85.\\n\";\n  } else {\n    std::cout << \"No student has scored an 85.\\n\";\n  }\n  return 0;\n}\n```", "```cpp\nAaron is the first student with a grade of 85.\nApril is the next student after the last one with a grade of 85, with a grade of 92.\nThere's at least one student with a grade of 85.\n```", "```cpp\n#include <algorithm>\n#include <chrono>\n#include <iomanip>\n#include <iostream>\n#include <list>\nstruct SensorData {\n  int temperature{0};\n  std::chrono::system_clock::time_point timestamp;\n};\nint main() {\n  const auto now = std::chrono::system_clock::now();\n  std::list<SensorData> sensorReadings = {\n      {72, now - std::chrono::hours(10)},\n      {73, now - std::chrono::hours(9)},\n      {75, now - std::chrono::hours(8)},\n      {75, now - std::chrono::hours(7)},\n      {76, now - std::chrono::hours(6)},\n      {78, now - std::chrono::hours(5)},\n      {78, now - std::chrono::hours(4)},\n      {79, now - std::chrono::hours(3)},\n      {80, now - std::chrono::hours(2)},\n      {81, now - std::chrono::hours(1)}};\n  auto it = sensorReadings.begin();\n  while (it != sensorReadings.end()) {\n    it = std::adjacent_find(\n        it, sensorReadings.end(),\n        [](const SensorData &a, const SensorData &b) {\n          return a.temperature == b.temperature;\n        });\n    if (it != sensorReadings.end()) {\n      int duplicateValue = it->temperature;\n      std::cout << \"Found consecutive duplicate readings \"\n                   \"of value: \"\n                << duplicateValue\n                << \" taken at the following times:\\n\";\n      while (it != sensorReadings.end() &&\n             it->temperature == duplicateValue) {\n        const auto time =\n            std::chrono::system_clock::to_time_t(\n                it->timestamp);\n        std::cout << \"\\t\"\n                  << std::put_time(std::localtime(&time),\n                                   \"%Y-%m-%d %H:%M:%S\\n\");\n        ++it;\n      }\n    }\n  }\n  return 0;\n}\n```", "```cpp\nFound consecutive duplicate readings of value: 75 taken at the following times:\n    2099-10-01 03:14:51\n    2099-10-01 04:14:51\nFound consecutive duplicate readings of value: 78 taken at the following times:\n    2099-10-01 06:14:51\n    2099-10-01 07:14:51\n```", "```cpp\n#include <algorithm>\n#include <iostream>\n#include <string>\n#include <vector>\nint main() {\n  std::vector<char> seq1 = {'a', 'b', 'c'};\n  std::vector<char> seq2 = {'a', 'b', 'd'};\n  std::vector<char> seq3 = {'a', 'b', 'c', 'd'};\n  if (std::lexicographical_compare(\n          seq1.begin(), seq1.end(), seq2.begin(),\n          seq2.end())) {\n    std::cout << \"Sequence 1 is lexicographically less\"\n                 \"than Sequence 2\"\n              << \"\\n\";\n  } else {\n    std::cout\n        << \"Sequence 1 is not lexicographically less\"\n           \"than Sequence 2\"\n        << \"\\n\";\n  }\n  if (std::lexicographical_compare(\n          seq1.begin(), seq1.end(), seq3.begin(),\n          seq3.end())) {\n    std::cout << \"Sequence 1 is lexicographically less\"\n                 \"than Sequence 3\"\n              << \"\\n\";\n  } else {\n    std::cout\n        << \"Sequence 1 is not lexicographically less\"\n           \"than Sequence 3\"\n        << \"\\n\";\n  }\n  // For strings\n  std::string str1 = \"apple\";\n  std::string str2 = \"banana\";\n  if (std::lexicographical_compare(\n          str1.begin(), str1.end(), str2.begin(),\n          str2.end())) {\n    std::cout << \"String 1 (apple) is lexicographically \"\n                 \"less than String 2 (banana)\"\n              << \"\\n\";\n  } else {\n    std::cout << \"String 1 (apple) is not \"\n                 \"lexicographically less \"\n                 \"than String 2 (banana)\"\n              << \"\\n\";\n  }\n  return 0;\n}\n```", "```cpp\nSequence 1 is lexicographically less than Sequence 2\nSequence 1 is lexicographically less than Sequence 3\nString 1 (apple) is lexicographically less than String 2 (banana)\n```", "```cpp\n#include <algorithm>\n#include <iostream>\n#include <vector>\nint main() {\n  std::vector<int> scores = {85, 93, 78, 90, 96, 82};\n  const auto max_it =\n      std::max_element(scores.begin(), scores.end());\n  if (max_it != scores.end()) {\n    std::cout << \"The highest score is: \"<< *max_it\n              << \"\\n\";\n  }\n  const auto min_it =\n      std::min_element(scores.begin(), scores.end());\n  if (min_it != scores.end()) {\n    std::cout << \"The lowest score is: \"<< *min_it\n              << \"\\n\";\n  }\n  const auto minmax =\n      std::minmax_element(scores.begin(), scores.end());\n  if (minmax.first != scores.end() &&\n      minmax.second != scores.end()) {\n    std::cout << \"The lowest and highest scores are: \"\n              << *minmax.first << \" and \" << *minmax.second\n              << \", respectively.\\n\";\n  }\n  std::vector<double> productPrices = {99.99, 79.99, 49.99,\n                                       59.99, 89.99};\n  // Find the minimum and maximum prices\n  auto minmaxPrices = std::minmax_element(\n      productPrices.begin(), productPrices.end());\n  if (minmaxPrices.first != productPrices.end() &&\n      minmaxPrices.second != productPrices.end()) {\n    std::cout\n        << \"The cheapest and priciest products cost: $\"\n        << *minmaxPrices.first << \" and $\"\n        << *minmaxPrices.second << \", respectively.\\n\";\n  }\n  return 0;\n}\n```", "```cpp\nThe highest score is: 96\nThe lowest score is: 78\nThe lowest and highest scores are: 78 and 96, respectively.\nThe cheapest and priciest products cost: $49.99 and $99.99, respectively.\n```"]