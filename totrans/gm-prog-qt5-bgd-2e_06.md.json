["```cpp\nQString str = QStringLiteral(\"I'm writing my games using Qt\"); \n```", "```cpp\nQFile file(\"/path/to/file\");\nfile.open(QFile::ReadOnly);\nQByteArray array = file.readAll();\n```", "```cpp\nQString text = QString::fromUtf8(array);\n```", "```cpp\nQString text = \"new file content\\n\";\nQFile file(\"/path/to/file\");\nfile.open(QFile::WriteOnly);\nQByteArray array = text.toUtf8();\nfile.write(array);\n```", "```cpp\nQByteArray big5Encoded = big5EncodedFile.readAll();\nQTextCodec *big5Codec = QTextCodec::codecForName(\"Big5\");\nQString text = big5Codec->toUnicode(big5Encoded);\nQByteArray big5EncodedBack = big5Codec->fromUnicode(text); \n```", "```cpp\nQString str = QStringLiteral(\"abcdefghij\");\nstr.remove(2, 4); // str = \"abghij\" \n```", "```cpp\nQString str = QStringLiteral(\"Abracadabra\");\nstr.remove(QStringLiteral(\"ab\"), Qt::CaseInsensitive);\n// str = \"racadra\"\n```", "```cpp\nQString str1 = QStringLiteral(\"abc\");\nQString str2 = QStringLiteral(\"def\");\nQString str1_2 = str1 + str2;\nQString str2_1 = str2;\nstr2_1.append(str1); \n```", "```cpp\nQString original = QStringLiteral(\"abcdefghij\");\nQString l = original.left(3); // \"abc\"\nQString r = original.right(2); // \"ij\"\nQString m = original.mid(2, 5); // \"cdefg\" \n```", "```cpp\nQString str = \"foo\";\nQChar f = str[0]; // const\nstr[0] = 'g'; // non-const \n```", "```cpp\nQChar f = str.at(0); \n```", "```cpp\nint pos = -1;\nQString str = QStringLiteral(\"Orangutans like bananas.\");\ndo {\n    pos = str.indexOf(\"an\", pos + 1);\n    qDebug() << \"'an' found starts at position\" << pos;\n} while(pos != -1); \n```", "```cpp\nQString record = \"1,4,8,15,16,24,42\";\nQStringList items = record.split(\",\");\nfor(const QString& item: items) {\n    qDebug() << item;\n}\n```", "```cpp\nQStringList fields = { \"1\", \"4\", \"8\", \"15\", \"16\", \"24\", \"42\" };\nQString record = fields.join(\",\"); \n```", "```cpp\nbool ok;\nint v1 = QString(\"42\").toInt(&ok, 10);\n// v1 = 42, ok = true\nlong long v2 = QString(\"0xFFFFFF\").toInt(&ok, 16);\n// v2 = 16777215, ok = true\ndouble v3 = QString(\"not really a number\").toDouble(&ok);\n//v3 = 0.0, ok = false\n```", "```cpp\nQString txt = QString::number(42); // txt = \"42\" \n```", "```cpp\nQString s1 = QString::number(42, 16); // \"2a\"\nQString s2 = QString::number(42.0, 'f', 6); // \"42.000000\"\nQString s3 = QString::number(42.0, 'e', 6); // \"4.200000e+1\"\n```", "```cpp\nQLocale locale = QLocale::system();\nQString text = locale.toString(1.2);\ndouble number = locale.toDouble(QStringLiteral(\"1,2\"));\n```", "```cpp\nconst char* text;\nif (condition) {\n    text = \"translatable1\";\n} else {\n    text = \"translatable2\";\n}\nQString result = tr(text); // not recognized!\n```", "```cpp\nQString result;\nif (condition) {\n    result = tr(\"translatable1\");\n} else {\n    result = tr(\"translatable2\");\n}\n```", "```cpp\nif (condition) {\n    text = QT_TR_NOOP(\"translatable1\");\n} else {\n    text = QT_TR_NOOP(\"translatable2\");\n}\nQString result = tr(text);\n```", "```cpp\n//: The button for sending attachment files\nQPushButton *button = new QPushButton(tr(\"Send\"));\n```", "```cpp\nQString str = \"Copying file \" + QString::number(current)\n            + \" of \" + QString::number(total);\n```", "```cpp\nQString str = tr(\"Copying file %1 of %2\").arg(current).arg(total); \n```", "```cpp\nconst int fieldWidth = 4;\nqDebug() << QStringLiteral(\"%1 | %2\").arg(5, fieldWidth).arg(6, fieldWidth);\nqDebug() << QStringLiteral(\"%1 | %2\").arg(15, fieldWidth).arg(16, fieldWidth);\n// output:\n// \"   5 |    6\"\n// \"  15 |   16\"\n```", "```cpp\nQRegularExpression regex(\"[1-9]\\\\d{0,2}\\\\s*(mg|g|kg)\");\nregex.setPatternOptions(QRegularExpression::CaseInsensitiveOption);\nqDebug() << regex.match(\"100 kg\").hasMatch();       // true\nqDebug() << regex.match(\"I don't know\").hasMatch(); // false\n```", "```cpp\nQRegularExpression regex(\"[1-9]\\\\d{0,2}\\\\s*(mg|g|kg)\",\n     QRegularExpression::CaseInsensitiveOption); \n```", "```cpp\nQRegularExpression regex(\"\\\\A[1-9]\\\\d{0,2}\\\\s*(mg|g|kg)\\\\z\",\n    QRegularExpression::CaseInsensitiveOption); \n```", "```cpp\nint getWeight(const QString &input) {\n    QRegularExpression regex(\"\\\\A([1-9]\\\\d{0,2})\\\\s*(mg|g|kg)\\\\z\");\n    regex.setPatternOptions(QRegularExpression::CaseInsensitiveOption);\n    QRegularExpressionMatch match = regex.match(input);\n    if(match.hasMatch()) {\n        const QString number = match.captured(1);\n        int weight = number.toInt();\n        const QString unit = match.captured(2).toLower();\n        if (unit == \"g\") {\n            weight *= 1000;\n        } else if (unit == \"kg\") {\n            weight *= 1000000 ;\n        }\n        return weight;\n    } else {\n        return -1;\n    }\n}\n```", "```cpp\nQString input = QStringLiteral(\"123 foo 09 1a 3\");\nQRegularExpression regex(\"\\\\b\\\\d+\\\\b\");\nQRegularExpressionMatchIterator i = regex.globalMatch(input);\nwhile (i.hasNext()) {\n    QRegularExpressionMatch match = i.next();\n    qDebug() << match.captured();\n}\n```", "```cpp\nQVector<int> numbers;\nnumbers.append(1);\nnumbers.append(5);\nnumbers.append(7);\nqDebug() << numbers.count(); // 3\nqDebug() << numbers[1];      // 5\n```", "```cpp\nQSet<QString> names;\nnames.insert(\"Alice\");\nnames.insert(\"Bob\");\nqDebug() << names.contains(\"Alice\"); // true\nqDebug() << names.contains(\"John\"); // false\nfor(const QString &name: names) {\n    qDebug() << \"Hello,\" << name;\n}\n```", "```cpp\nQMap<int, QString> map;\nmap[3] = \"three\";\nmap[1] = \"one\";\nmap[2] = \"two\";\nfor(auto i = map.begin(); i != map.end(); ++i) {\n    qDebug() << i.key() << i.value();\n}\n// output:\n// 1 \"one\"\n// 2 \"two\"\n// 3 \"three\"\n```", "```cpp\nstd::vector<int> x { 1, 2, 3};\nstd::vector<int> y = x; // full copy\n```", "```cpp\nQVector<int> x { 1, 2, 3};\nQVector<int> y = x;\n// x and y share one buffer now\ny[0] = 5; // new allocation happens here\n// x and y have different buffers now\n```", "```cpp\n// don't do this!\nQVector<int> x { 1, 2, 3 };\nint *x0 = x.begin();\nQVector<int> y = x;\nx[0] = 42;\nqDebug() << *x0; // output: 1\n```", "```cpp\nQVector<int> x { 1, 2, 3 };\nforeach(const int i, x) {\n    qDebug() << i;\n}\n```", "```cpp\n// don't do this!\nfor(QChar c: QString(\"abc\").replace('a', 'z')) {\n    qDebug() << c;\n}\n```", "```cpp\nQString string = QString(\"abc\").replace('a', 'z');\nfor(QChar c: string) { // correct\n    qDebug() << c;\n}\n```", "```cpp\nQVector<QPair<int, int>> x;\nforeach(const QPair<int, int>& i, x) {\n    //...\n}\n```", "```cpp\nQStringList nameFilters = { QStringLiteral(\"*.jpg\"), QStringLiteral(\"*.jpeg\") };\nQStringList entries = dir.entryList(nameFilters,\n    QDir::Files | QDir::Readable, QDir::Size);\n```", "```cpp\nQStringList lines;\nwhile(!file.atEnd()) {\n    QByteArray line = file.readLine();\n    lines.append(QString::fromUtf8(line));\n} \n```", "```cpp\nQFile f(\"myfile\");\nif(!f.open(QFile::ReadWrite)) {\n    return;\n}\nuchar *addr = f.map(0, f.size());\nif(!addr) {\n    return;\n}\nf.close();\ndoSomeComplexOperationOn(addr);\n```", "```cpp\nclass CaesarCipherDevice : public QIODevice\n{\n    Q_OBJECT\n    Q_PROPERTY(int key READ key WRITE setKey)\npublic:\n    explicit CaesarCipherDevice(QObject *parent = 0)\n        : QIODevice(parent) {\n        m_key = 0;\n        m_baseDevice = 0;\n    }\n    void setBaseDevice(QIODevice *dev) {\n        m_baseDevice = dev;\n    }\n    QIODevice *baseDevice() const {\n        return m_baseDevice;\n    }\n    void setKey(int k) {\n        m_key = k;\n    }\n    inline int key() const {\n        return m_key;\n    }\nprivate:\n    int m_key;\n    QIODevice *m_baseDevice;\n}; \n```", "```cpp\nbool CaesarCipherDevice::open(OpenMode mode) {\n    if(!m_baseDevice) {\n        return false;\n    }\n    if(!m_baseDevice->isOpen()) {\n        return false;\n    }\n    if(m_baseDevice->openMode() != mode) {\n        return false;\n    }\n    return QIODevice::open(mode);\n}\n```", "```cpp\nqint64 CaesarCipherDevice::writeData(const char *data, qint64 len) {\n    QByteArray byteArray;\n    byteArray.resize(len);\n    for(int i = 0; i < len; ++i) {\n        byteArray[i] = data[i] + m_key;\n    }\n    int written = m_baseDevice->write(byteArray);\n    emit bytesWritten(written);\n    return written;\n}\n```", "```cpp\nqint64 CaesarCipherDevice::readData(char *data, qint64 maxlen) {\n    QByteArray baseData = m_baseDevice->read(maxlen);\n    const int size = baseData.size();\n    for(int i = 0; i < size; ++i) {\n        data[i] = baseData[i] - m_key;\n    }\n    return size;\n}\n```", "```cpp\nint main(int argc, char **argv) {\n    QByteArray ba = \"plaintext\";\n    QBuffer buf;\n    buf.open(QIODevice::WriteOnly);\n    CaesarCipherDevice encrypt;\n    encrypt.setKey(3);\n    encrypt.setBaseDevice(&buf);\n    encrypt.open(buf.openMode());\n    encrypt.write(ba);\n    qDebug() << buf.data();\n\n    CaesarCipherDevice decrypt;\n    decrypt.setKey(3);\n    decrypt.setBaseDevice(&buf);\n    buf.open(QIODevice::ReadOnly);\n    decrypt.open(buf.openMode());\n    qDebug() << decrypt.readAll();\n    return 0;\n} \n```", "```cpp\nQFile file(\"output.txt\");\nfile.open(QFile::WriteOnly | QFile::Text);\nQTextStream stream(&file);\nstream << \"Today is \" << QDate::currentDate().toString() << endl;\nQTime t = QTime::currentTime();\nstream << \"Current time is \" << t.hour() << \" h and \" \n       << t.minute() << \"m.\" << endl;\n```", "```cpp\nfor(int i = 0;i < 10; ++i) {\n    int num = qrand() % 100000;  // random number between 0 and 99999\n    stream << dec << num\n           << showbase << hex << uppercasedigits << num << endl;\n} \n```", "```cpp\nstruct Player {\n    QString name;\n    qint64 experience;\n    QPoint position;\n    char direction;\n};\n```", "```cpp\nQFile file(\"players.txt\");\nfile.open(QFile::WriteOnly | QFile::Text);\nQTextStream stream(&file);\nstream << center;\nstream << qSetFieldWidth(16) << \"Player\" << qSetFieldWidth(0) << \" \";\nstream << qSetFieldWidth(10) << \"Experience\" << qSetFieldWidth(0) << \" \";\nstream << qSetFieldWidth(13) << \"Position\" << qSetFieldWidth(0) << \" \";\nstream << \"Direction\" << endl;\n\nfor(const Player &player: players) {\n    stream << left << qSetFieldWidth(16) << player.name\n           << qSetFieldWidth(0) << \" \";\n    stream << right << qSetFieldWidth(10) << player.experience\n           << qSetFieldWidth(0) << \" \";\n    stream << right << qSetFieldWidth(6) << player.position.x()\n           << qSetFieldWidth(0) << \" \";\n    stream << qSetFieldWidth(6) << player.position.y()\n           << qSetFieldWidth(0) << \" \";\n    stream << center << qSetFieldWidth(10);\n\n    switch(player.direction) {\n    case 'n' : stream << \"north\"; break;\n    case 's' : stream << \"south\"; break;\n    case 'e' : stream << \"east\"; break;\n    case 'w' : stream << \"west\"; break;\n    default: stream << \"unknown\"; break;\n    }\n    stream << qSetFieldWidth(0) << endl;\n}\n```", "```cpp\n     Player      Experience   Position    Direction\nGondael               46783     10     -5   north   \nOlrael               123648     -5    103    east   \nNazaal             99372641     48    634   south   \n```", "```cpp\nQTextStream stdoutStream(stdout);\nstdoutStream << \"This text goes to standard output.\" << endl; \n```", "```cpp\nQFile file(\"outfile.dat\");\nfile.open(QFile::WriteOnly | QFile::Truncate);\nQDataStream stream(&file);\ndouble dbl = 3.14159265359;\nQColor color = Qt::red;\nQPoint point(10, -4);\nQStringList stringList { \"foo\", \"bar\" };\nstream << dbl << color << point << stringList; \n```", "```cpp\nstruct Player {\n    QString name;\n    qint64 experience;\n    QPoint position;\n    char direction;\n}; \n```", "```cpp\nQDataStream& operator<<(QDataStream &stream, const Player &p) {\n    stream << p.name;\n    stream << p.experience;\n    stream << p.position;\n    stream << p.direction;\n    return stream;\n} \n```", "```cpp\nQDataStream& operator>>(QDataStream &stream, Player &p) {\n     stream >> p.name;\n     stream >> p.experience;\n     stream >> p.position;\n     stream >> p.direction;\n     return stream;\n} \n```", "```cpp\nPlayer player = /* ... */;\nQDataStream stream(device);\nstream << player;\n```", "```cpp\nPlayer player;\nQDataStream stream(device);\nstream >> player;\n```", "```cpp\nclass InventoryItem {\n    Q_GADGET\npublic:\n    enum class Type {\n        Weapon,\n        Armor,\n        Gem,\n        Book,\n        Other\n    };\n    Q_ENUM(Type)\n\n    Type type;\n    QString subType;\n    int durability;\n\n    static Type typeByName(const QStringRef &r);\n};\n\nclass Player {\npublic:\n    QString name;\n    QString password;\n    int experience;\n    int hitPoints;\n    QVector<InventoryItem> inventory;\n    QString location;\n    QPoint position;\n};\n\nstruct PlayerInfo {\n    QVector<Player> players;\n};\n```", "```cpp\nInventoryItem::Type InventoryItem::typeByName(const QStringRef &r) {\n    QMetaEnum metaEnum = QMetaEnum::fromType<InventoryItem::Type>();\n    QByteArray latin1 = r.toLatin1();\n    int result = metaEnum.keyToValue(latin1.constData());\n    return static_cast<InventoryItem::Type>(result);\n}\n```", "```cpp\n<PlayerInfo>\n    <Player hp=\"40\" exp=\"23456\">\n        <Name>Gandalf</Name>\n        <Password>mithrandir</Password>\n        <Inventory>\n            <InvItem type=\"Weapon\" durability=\"3\">\n                <SubType>Long sword</SubType>\n            </InvItem>\n            <InvItem type=\"Armor\" durability=\"10\">\n                <SubType>Chain mail</SubType>\n            </InvItem>\n        </Inventory>\n        <Location name=\"room1\">\n            <Position x=\"1\" y=\"0\"/>\n        </Location>\n    </Player>\n</PlayerInfo> \n```", "```cpp\nclass PlayerInfoReader {\npublic:\n    PlayerInfoReader(QIODevice *device);\n    PlayerInfo read();\nprivate:\n    QXmlStreamReader reader;\n}; \n```", "```cpp\nPlayerInfoReader(QIODevice *device) {\n    reader.setDevice(device);\n} \n```", "```cpp\nenum class Token {\n    Invalid = -1,\n    PlayerInfo, // root tag\n    Player,     // in PlayerInfo\n    Name, Password, Inventory, Location, // in Player\n    Position,   // in Location\n    InvItem     // in Inventory\n};\n```", "```cpp\nPlayerInfo PlayerInfoReader::read() {\n    if(!reader.readNextStartElement()) {\n        return PlayerInfo();\n    }\n    if (tokenByName(reader.name()) != Token::PlayerInfo) {\n        return PlayerInfo();\n    }\n    PlayerInfo info;\n    while(reader.readNextStartElement()) {\n        if(tokenByName(reader.name()) == Token::Player) {\n            Player p = readPlayer();\n            info.players.append(p);\n        } else {\n            reader.skipCurrentElement();\n        }\n    }\n    return info;\n}\n```", "```cpp\nPlayer p;\nconst QXmlStreamAttributes& playerAttrs = reader.attributes();\np.hitPoints = playerAttrs.value(\"hp\").toString().toInt();\np.experience = playerAttrs.value(\"exp\").toString().toInt();\n```", "```cpp\nwhile(reader.readNextStartElement()) {\n    Token t = tokenByName(reader.name());\n    switch(t) {\n    case Token::Name:\n        p.name = reader.readElementText();\n        break;\n    case Token::Password:\n        p.password = reader.readElementText();\n        break;\n    case Token::Inventory:\n        p.inventory = readInventory();\n        break;\n    //...\n    }\n}\n```", "```cpp\ncase Token::Location:\n    p.location = reader.attributes().value(\"name\").toString();\n    while(reader.readNextStartElement()) {\n        if(tokenByName(reader.name()) == Token::Position) {\n            const QXmlStreamAttributes& attrs = reader.attributes();\n            p.position.setX(attrs.value(\"x\").toString().toInt());\n            p.position.setY(attrs.value(\"y\").toString().toInt());\n            reader.skipCurrentElement();\n        } else {\n            reader.skipCurrentElement();\n        }\n    }\n    break;\n```", "```cpp\nQVector<InventoryItem> PlayerInfoReader::readInventory() {\n    QVector<InventoryItem> inventory;\n    while(reader.readNextStartElement()) {\n        if(tokenByName(reader.name()) != Token::InvItem) {\n            reader.skipCurrentElement();\n            continue;\n        }\n        InventoryItem item;\n        const QXmlStreamAttributes& attrs = reader.attributes();\n        item.durability = attrs.value(\"durability\").toString().toInt();\n        item.type = InventoryItem::typeByName(attrs.value(\"type\"));\n        while(reader.readNextStartElement()) {\n            if(reader.name() == \"SubType\") {\n                item.subType = reader.readElementText();\n            }\n            else {\n                reader.skipCurrentElement();\n            }\n        }\n        inventory << item;\n    }\n    return inventory;\n}\n```", "```cpp\nQFile file(filePath);\nfile.open(QFile::ReadOnly | QFile::Text);\nPlayerInfoReader reader(&file);\nPlayerInfo playerInfo = reader.read();\nif (!playerInfo.players.isEmpty()) {\n    qDebug() << \"Count:\" << playerInfo.players.count();\n    qDebug() << \"Size of inventory:\" <<\n                playerInfo.players.first().inventory.size();\n    qDebug() << \"Inventory item:\"\n             << playerInfo.players.first().inventory[0].type\n             << playerInfo.players.first().inventory[0].subType;\n    qDebug() << \"Room:\" << playerInfo.players.first().location\n             << playerInfo.players.first().position;\n}\n```", "```cpp\nQVariant intValue = 1;\nint x = intValue.toInt();\nQVariant stringValue = \"ok\";\nQString y = stringValue.toString();\n```", "```cpp\nQVariant listValue = QVariantList { 1, \"ok\" };\nfor(QVariant item: listValue.toList()) {\n  qDebug() << item.toInt() << item.toString();\n}\n```", "```cpp\nPlayer player;\nQVariantMap map;\nmap[\"name\"] = player.name;\nmap[\"experience\"] = player.experience;\n//...\nstream << map;\n```", "```cpp\nQVariantMap map;\nstream >> map;\nPlayer player;\nplayer.name = map[\"name\"].toString();\nplayer.experience = map[\"experience\"].toLongLong();\n```", "```cpp\nQSettings settings;\nsettings.setValue(\"level\", 4);\nsettings.setValue(\"playerName\", \"Player1\");\n// ...\nint level = settings.value(\"level\").toInt(); \n```", "```cpp\nint level = settings.value(\"level\", 1).toInt(); \n```", "```cpp\nint main(int argc, char *argv[]) {\n    QApplication app(argc, argv);\n    QCoreApplication::setOrganizationName(\"Packt\");\n    QCoreApplication::setApplicationName(\"Game Programming using Qt\");\n    //...\n}\n```", "```cpp\nsettings.beginGroup(\"server\");\nQString serverIP = settings.value(\"host\").toString();\nint port = settings.value(\"port\").toInt();\nsettings.endGroup();\n```", "```cpp\nQString serverIP = settings.value(\"server/host\").toString();\nint port = settings.value(\"server/port\").toInt(); \n```", "```cpp\nQVariant inventoryItemToVariant(const InventoryItem &item) {\n    QVariantMap map;\n    map[\"type\"]       = InventoryItem::typeToName(item.type);\n    map[\"subtype\"]    = item.subType;\n    map[\"durability\"] = item.durability;\n    return map;\n}\n```", "```cpp\nsettings.setValue(\"myWidget/geometry\", myWidget->saveGeometry());\n//...\nmyWidget->restoreGeometry(\n    settings.value(\"myWidget/geometry\").toByteArray());\n```", "```cpp\nQSettings settings(\"Packt\", \"Game Programming using Qt\"); \n```", "```cpp\nQSettings settings(QSettings::SystemScope, \n    \"Packt\", \"Game Programming using Qt\");\n```", "```cpp\nQSettings::setDefaultFormat(QSettings::IniFormat);\n```", "```cpp\nQSettings settings(\n    QStandardPaths::writableLocation(QStandardPaths::ConfigLocation) +\n        \"/myapp.ini\", \n    QSettings::IniFormat\n); \n```", "```cpp\nbool readCCFile(QIODevice &device, QSettings::SettingsMap &map) {\n    CeasarCipherDevice ccDevice;\n    ccDevice.setBaseDevice(&device);\n    // ...\n    return true;\n}\nbool writeCCFile(QIODevice &device, const QSettings::SettingsMap &map) { \n    // ... \n}\nconst QSettings::Format CCFormat = QSettings::registerFormat(\n    \"ccph\", readCCFile, writeCCFile);\n```", "```cpp\n{\n    \"name\": \"Joe\",\n    \"age\": 14,\n    \"inventory\": [\n        { \"type\": \"gold\", \"amount\": \"144000\" },\n        { \"type\": \"short_sword\", \"material\": \"iron\" }\n    ]\n} \n```", "```cpp\nclass PlayerInfoJson {\npublic:\n    PlayerInfoJson() {}\n    QByteArray playerInfoToJson(const PlayerInfo &pinfo);\n}; \n```", "```cpp\nQByteArray PlayerInfoJson::playerInfoToJson(const PlayerInfo &pinfo)\n{\n    QJsonDocument doc(toJson(pinfo));\n    return doc.toJson();\n}\n```", "```cpp\nQJsonArray PlayerInfoJson::toJson(const PlayerInfo &pinfo) {\n    QJsonArray array;\n    for(const Player &p: pinfo.players) {\n        array << toJson(p);\n    }\n    return array;\n}\n```", "```cpp\nQJsonValue PlayerInfoJson::toJson(const Player &player) {\n    QJsonObject object;\n    object[\"name\"]       = player.name;\n    object[\"password\"]   = player.password;\n    object[\"experience\"] = player.experience;\n    object[\"hitpoints\"]  = player.hitPoints;\n    object[\"location\"]   = player.location;\n    object[\"position\"]   = QJsonObject({ { \"x\", player.position.x() },\n                                         { \"y\", player.position.y() } });\n    object[\"inventory\"]  = toJson(player.inventory);\n    return object;\n}\n```", "```cpp\nQJsonValue PlayerInfoJson::toJson(const QVector<InventoryItem> &items) {\n    QJsonArray array;\n    for(const InventoryItem &item: items) {\n        array << toJson(item);\n    }\n    return array;\n}\n```", "```cpp\nQJsonValue PlayerInfoJson::toJson(const InventoryItem &item) {\n    QJsonObject object;\n    object[\"type\"] = InventoryItem::typeToName(item.type);\n    object[\"subtype\"] = item.subType;\n    object[\"durability\"] = item.durability;\n    return object;\n}\n```", "```cpp\nconst char *InventoryItem::typeToName(InventoryItem::Type value)\n{\n    QMetaEnum metaEnum = QMetaEnum::fromType<InventoryItem::Type>();\n    return metaEnum.valueToKey(static_cast<int>(value));\n}\n```", "```cpp\nPlayerInfo PlayerInfoJson::playerInfoFromJson(const QByteArray &ba) {\n    QJsonDocument doc = QJsonDocument::fromJson(ba);\n    if(!doc.isArray()) {\n        return PlayerInfo();\n    }\n    QJsonArray array = doc.array();\n    PlayerInfo pinfo;\n    for(const QJsonValue &value: array) {\n        pinfo.players << playerFromJson(value.toObject());\n    }\n    return pinfo;\n}\n```", "```cpp\nPlayer PlayerInfoJson::playerFromJson(const QJsonObject &object) {\n    Player player;\n    player.name       = object[\"name\"].toString();\n    player.password   = object[\"password\"].toString();\n    player.experience = object[\"experience\"].toDouble();\n    player.hitPoints  = object[\"hitpoints\"].toDouble();\n    player.location   = object[\"location\"].toString();\n    QJsonObject positionObject = object[\"position\"].toObject();\n    player.position   = QPoint(positionObject[\"x\"].toInt(),\n                               positionObject[\"y\"].toInt());\n    player.inventory  = inventoryFromJson(object[\"inventory\"].toArray());\n    return player;\n}\n```", "```cpp\nQVector<InventoryItem> PlayerInfoJson::inventoryFromJson(\n    const QJsonArray &array) \n{\n    QVector<InventoryItem> inventory;\n    for(const QJsonValue &value: array) {\n      inventory << inventoryItemFromJson(value.toObject());\n    }\n    return inventory;\n}\n```", "```cpp\nInventoryItem PlayerInfoJson::inventoryItemFromJson(\n    const QJsonObject &object) \n{\n    InventoryItem item;\n    item.type = InventoryItem::typeByName(object[\"type\"].toString());\n    item.subType = object[\"subtype\"].toString();\n    item.durability = object[\"durability\"].toDouble();\n    return item;\n}\n```", "```cpp\nInventoryItem::Type InventoryItem::typeByName(const QStringRef &r) {\n return typeByName(r.toLatin1());\n}\nInventoryItem::Type InventoryItem::typeByName(const QString &r) {\n return typeByName(r.toLatin1());\n}\nInventoryItem::Type InventoryItem::typeByName(const QByteArray &latin1) {\n    QMetaEnum metaEnum = QMetaEnum::fromType<InventoryItem::Type>();\n    int result = metaEnum.keyToValue(latin1.constData());\n    return static_cast<InventoryItem::Type>(result);\n}\n```"]