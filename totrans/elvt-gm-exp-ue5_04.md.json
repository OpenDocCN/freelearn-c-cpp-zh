["```cpp\n    virtual void SetupPlayerInputComponent(class UInputComponent*\n    PlayerInputComponent) override;\n    ```", "```cpp\n    UPROPERTY(EditAnywhere, Category = Input)\n    class UInputMappingContext* IC_Character;\n    ```", "```cpp\n        IA_JumpUPROPERTY(EditAnywhere, Category = Input)\n        class UInputAction* IA_Move;\n        UPROPERTY(EditAnywhere, Category = Input)\n        class UInputAction* IA_Jump\n        ```", "```cpp\n    void AMyThirdPersonChar::SetupPlayerInputComponent(class \n    UInputComponent* PlayerInputComponent)\n    {\n    }\n    ```", "```cpp\n    UEnhancedInputComponent* EnhancedPlayerInputComponent =\n    Cast<UEnhancedInputComponent>(PlayerInputComponent);\n    ```", "```cpp\n#include \"EnhancedInputComponent.h\"\n```", "```cpp\n    if (EnhancedPlayerInputComponent != nullptr)\n    {\n     APlayerController* PlayerController =\n     Cast<APlayerController>(GetController());\n    }\n    ```", "```cpp\n    UEnhancedInputLocalPlayerSubsystem* EnhancedSubsystem =\n    ULocalPlayer::GetSubsystem<UEnhancedInputLocalPlayerSubsystem>(PlayerController->GetLocalPlayer());\n    ```", "```cpp\n#include \"EnhancedInputSubsystems.h\"\n```", "```cpp\n        EnhancedSubsystem->AddMappingContext(IC_Character, 1);\n        ```", "```cpp\n    #include \"InputMappingContext.h\"\n    ```", "```cpp\n    if (EnhancedPlayerInputComponent != nullptr)\n    {\n     APlayerController* PlayerController = \n     Cast<APlayerController>(GetController());\n     if (PlayerController != nullptr)\n     {\n      ...\n     }\n     // Continue here\n    }\n    ```", "```cpp\n    EnhancedPlayerInputComponent->BindAction(IA_Move,\n    ETriggerEvent::Triggered, this, &AMyThirdPersonChar\n    ::Move);\n    ```", "```cpp\n#include \"InputAction.h\"\n```", "```cpp\n        EnhancedPlayerInputComponent->BindAction(IA_Jump,\n        ETriggerEvent::Started, this, &ACharacter::Jump);\n        ```", "```cpp\n        EnhancedPlayerInputComponent->BindAction(IA_Jump,\n        ETriggerEvent::Completed, this, &ACharacter::StopJumping);\n        ```", "```cpp\n    void Move(const FInputActionValue& Value);\n    ```", "```cpp\n    #include \"InputActionValue.h\"\n    ```", "```cpp\n    void AMyThirdPersonChar::Move(const FInputActionValue&\n    Value)\n    {\n     FVector2D InputValue = Value.Get<FVector2D>();\n    }\n    ```", "```cpp\n    if (Controller != nullptr && (InputValue.X != 0.0f ||\n    InputValue.Y != 0.0f))\n    ```", "```cpp\nconst FRotator YawRotation(0, Controller->\n  GetControlRotation().Yaw, 0);\n```", "```cpp\n    if (InputValue.X != 0.0f)\n    {\n    }\n    ```", "```cpp\n    const Fvector RightDirection = \n      UkismetMathLibrary::GetRightVector(YawRotation);\n    ```", "```cpp\n    AddMovementInput(RightDirection, InputValue.X);\n    ```", "```cpp\n    #include \"Kismet/KismetMathLibrary.h\"\n    #include \"GameFramework/Controller.h\"\n    ```", "```cpp\n    if (InputValue.X != 0.0f)\n    {\n     ...\n    }\n    if (InputValue.Y != 0.0f)\n    {\n    }\n    ```", "```cpp\n    const FVector ForwardDirection = YawRotation.Vector();\n    ```", "```cpp\nAddMovementInput(ForwardDirection, InputValue.Y);\n```", "```cpp\n    PublicDependencyModuleNames.AddRange(new string[] { \"Core\",\n    \"CoreUObject\", \"Engine\", \"InputCore\", \"EnhancedInput\",\n    \"HeadMountedDisplay\" });\n    ```", "```cpp\n    UPROPERTY(EditAnywhere, Category = Input)\n    class UInputAction* IA_Look;\n    ```", "```cpp\n    void Look(const FInputActionValue& Value);\n    ```", "```cpp\n    EnhancedPlayerInputComponent->BindAction(IA_Look,\n    ETriggerEvent::Triggered, this, &AMyThirdPersonChar::Look);\n    ```", "```cpp\n    void AMyThirdPersonChar::Look(const FInputActionValue& Value)\n    {\n     FVector2D InputValue = Value.Get<FVector2D>();\n    }\n    ```", "```cpp\n    if (InputValue.X != 0.0f)\n    {\n      AddControllerYawInput(InputValue.X);\n    }\n    if (InputValue.Y != 0.0f)\n    {\n      AddControllerPitchInput(InputValue.Y);\n    }\n    ```"]