["```cpp\n    @rpc\n    func add_logged_player(player_name):\n        logged_players_label.text = logged_players_\n            label.text + \"\\n%s\" % player_name\n    ```", "```cpp\n    @rpc(\"authority\", \"call_local\")\n    func start_game():\n        pass\n    ```", "```cpp\n    @rpc(\"authority\", \"call_local\")\n    func start_game():\n        get_tree().change_scene_to_file(quiz_screen_scene)\n    ```", "```cpp\n    func _on_StartButton_pressed():\n        rpc_id(get_multiplayer_authority(), \"start_game\")\n    ```", "```cpp\n    @rpc(\"any_peer\", \"call_remote\")\n    func start_game():\n    ```", "```cpp\n    @rpc(\"any_peer\", \"call_remote\")\n    func start_game():\n    get_tree().change_scene_to_file(quiz_screen_scene_path)\n    ```", "```cpp\n    @rpc(\"any_peer\", \"call_remote\")\n    func start_game():\n        get_tree().change_scene_to_file\n            (quiz_screen_scene_path)\n        rpc(\"start_game\")\n    ```", "```cpp\n    @rpc(\"any_peer\")\n    func answered(user):\n        quiz_panel.rpc(\"update_winner\", database[user]\n            [\"name\"])\n    ```", "```cpp\n    @rpc(\"any_peer\")\n    func answered(user):\n        quiz_panel.rpc(\"update_winner\", database[user]\n            [\"name\"])\n        timer.start(turn_delay_in_seconds)\n        wait_label.rpc(\"wait\", turn_delay_in_seconds)\n    ```", "```cpp\n    @rpc(\"any_peer\")\n    func missed(user):\n        quiz_panel.rpc(\"player_missed\", database[user]\n            [\"name\"])\n        timer.start(turn_delay_in_seconds)\n        wait_label.rpc(\"wait\", turn_delay_in_seconds)\n    ```", "```cpp\n    @rpc(\"call_local\")\n    func update_winner(winner_name):\n    ```", "```cpp\n    @rpc(\"call_local\")\n    func update_winner(winner_name):\n        question_label.text = \"%s won the round!!\" %\n            winner_name\n    ```", "```cpp\n    @rpc(\"call_local\")\n    func update_winner(winner_name):\n        question_label.text = \"%s won the round!!\" %\n            winner_name\n        lock_answers()\n    ```", "```cpp\n    @rpc(\"call_local\")\n    func player_missed(loser_name):\n        question_label.text = \"%s missed the question!!\" %\n            loser_name\n        lock_answers()\n    ```", "```cpp\n    func lock_answers():\n        for answer in answer_container.get_children():\n            answer.disabled = true\n    ```", "```cpp\n    func unlock_answers():\n        for answer in answer_container.get_children():\n            answer.disabled = false\n    ```", "```cpp\n{\n    \"question_01\":\n        {\n            \"text\": \"Which of the following is not a\n                Node?\",\n            \"alternatives\": [\"Sprite2D\", \"Line2D\",\n                \"Area3D\", \"PackedScene\"],\n            \"correct_answer_index\" : 3\n        },\n    \"question_02\":\n        {\n            \"text\": \"Which of the following is an image\n                file?\",\n            \"alternatives\": [\"Bot.png\", \"Landscape.txt\",\n                \"BeautifulTown.json\", \"UglyDuck.md\"],\n            \"correct_answer_index\" : 0\n        },\n    \"question_03\":\n        {\n            \"text\": \"Which of the following is a sound\n                file?\",\n            \"alternatives\": [\"Scream.txt\", \"Blabla.ogg\",\n                \"Laser.gd\", \"Music.svg\"],\n            \"correct_answer_index\": 1\n        }\n}\n```", "```cpp\n    func update_question(new_question_index):\n        var question = available_questions.pop_at\n            (new_question_index)\n    ```", "```cpp\n        if not question == null:\n    ```", "```cpp\n        question_label.text = questions[question]['text']\n    ```", "```cpp\n        correct_answer = questions[question]\n            ['correct_answer_index']\n    ```", "```cpp\n        for i in range(0, 4):\n            var alternative = questions[question]\n                ['alternatives'][i]\n            answer_container.get_child(i).text =\n                alternative\n    ```", "```cpp\n            unlock_answers()\n    ```", "```cpp\n        else:\n            for answer in answer_container.get_children():\n                question_label.text = \"No more questions\"\n    ```", "```cpp\n                lock_answers()\n    ```", "```cpp\n@rpc\nfunc update_question(new_question_index):\n    var question = available_questions.pop_at\n        (new_question_index)\n    if not question == null:\n        question_label.text = questions[question]['text']\n        correct_answer = questions[question]\n            ['correct_answer_index']\n        for i in range(0, 4):\n            var alternative = questions[question]\n                ['alternatives'][i]\n            answer_container.get_child(i).text =\n                alternative\n        unlock_answers()\n    else:\n        for answer in answer_container.get_children():\n            question_label.text = \"No more questions\"\n        lock_answers()\n```", "```cpp\n        var is_answer_correct = answer_index == correct_answer\n    ```", "```cpp\n        answered.emit(is_answer_correct)\n    ```", "```cpp\n    func evaluate_answer(answer_index):\n        var is_answer_correct = answer_index == correct_answer\n        answered.emit(is_answer_correct)\n    ```", "```cpp\n    func _on_quiz_panel_answered(is_answer_correct):\n        if is_answer_correct:\n    ```", "```cpp\n    func _on_quiz_panel_answered(is_answer_correct):\n        if is_answer_correct:\n           rpc_id(\n               get_multiplayer_authority(),\n               \"answered\",\n               AuthenticationCredentials.user\n           )\n    ```", "```cpp\n        else:\n           rpc_id(\n               get_multiplayer_authority(),\n               \"missed\",\n               AuthenticationCredentials.user\n           )\n    ```", "```cpp\nfunc _on_quiz_panel_answered(is_answer_correct):\n    if is_answer_correct:\n       rpc_id(\n           get_multiplayer_authority(),\n           \"answered\",\n           AuthenticationCredentials.user\n       )\n    else:\n       rpc_id(\n           get_multiplayer_authority(),\n           \"missed\",\n           AuthenticationCredentials.user\n       )\n```"]