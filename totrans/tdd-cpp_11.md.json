["```cpp\nint main ()\n{\n    MereMemo::FileOutput appFile(\"application.log\");\n    appFile.maxSize() = 10'000'000;\n    appFile.rolloverCount() = 5;\n    MereMemo::addLogOutput(appFile);\n    MereMemo::addDefaultTag(info);\n    MereMemo::addDefaultTag(green);\n    return MereTDD::runTests(std::cout);\n}\n```", "```cpp\n    MereMemo::FileOutput appFile(\"logs\");\n    appFile.namePattern() = \"application-{}.log\";\n    appFile.maxSize() = 10'000'000;\n    appFile.rolloverCount() = 5;\n    MereMemo::addLogOutput(appFile);\n```", "```cpp\n    MereMemo::StreamOutput consoleStream(std::cout);\n    MereMemo::addLogOutput(consoleStream);\n```", "```cpp\nclass Output\n{\npublic:\n    virtual ~Output () = default;\n    Output (Output const & other) = delete;\n    Output (Output && other) = delete;\n    virtual std::unique_ptr<Output> clone () const = 0;\n    virtual void sendLine (std::string const & line) = 0;\n    Output & operator = (Output const & rhs) = delete;\n    Output & operator = (Output && rhs) = delete;\nprotected:\n    Output () = default;\n};\n```", "```cpp\ninline std::vector<std::unique_ptr<Output>> & getOutputs ()\n{\n    static std::vector<std::unique_ptr<Output>> outputs;\n    return outputs;\n}\ninline void addLogOutput (Output const & output)\n{\n    auto & outputs = getOutputs();\n    outputs.push_back(output.clone());\n}\n```", "```cpp\nclass FileOutput : public Output\n{\npublic:\n    FileOutput (std::string_view dir)\n    : mOutputDir(dir),\n    mFileNamePattern(\"{}\"),\n    mMaxSize(0),\n    mRolloverCount(0)\n    { }\n    FileOutput (FileOutput const & rhs)\n    : mOutputDir(rhs.mOutputDir),\n    mFileNamePattern(rhs.mFileNamePattern),\n    mMaxSize(rhs.mMaxSize),\n    mRolloverCount(rhs.mRolloverCount)\n    { }\n    FileOutput (FileOutput && rhs)\n    : mOutputDir(rhs.mOutputDir),\n    mFileNamePattern(rhs.mFileNamePattern),\n    mMaxSize(rhs.mMaxSize),\n    mRolloverCount(rhs.mRolloverCount),\n    mFile(std::move(rhs.mFile))\n    { }\n    ~FileOutput ()\n    {\n        mFile.close();\n    }\n    std::unique_ptr<Output> clone () const override\n    {\n        return std::unique_ptr<Output>(\n            new FileOutput(*this));\n    }\n    void sendLine (std::string const & line) override\n    {\n        if (not mFile.is_open())\n        {\n            mFile.open(\"application.log\", std::ios::app);\n        }\n        mFile << line << std::endl;\n        mFile.flush();\n    }\nprotected:\n    std::filesystem::path mOutputDir;\n    std::string mFileNamePattern;\n    std::size_t mMaxSize;\n    unsigned int mRolloverCount;\n    std::fstream mFile;\n};\n```", "```cpp\n    MereMemo::FileOutput appFile(\"logs\");\n    appFile.namePattern() = \"application-{}.log\";\n    appFile.maxSize() = 10'000'000;\n    appFile.rolloverCount() = 5;\n    MereMemo::addLogOutput(appFile);\n```", "```cpp\n    MereMemo::FileOutput appFile(\"logs\");\n    //appFile.namePattern() = \"application-{}.log\";\n    //appFile.maxSize() = 10'000'000;\n    //appFile.rolloverCount() = 5;\n    MereMemo::addLogOutput(appFile);\n```", "```cpp\n#include <algorithm>\n#include <chrono>\n#include <ctime>\n#include <filesystem>\n#include <fstream>\n#include <iomanip>\n#include <map>\n#include <memory>\n#include <ostream>\n#include <sstream>\n#include <string>\n#include <string_view>\n#include <vector>\n```", "```cpp\nclass StreamOutput : public Output\n{\npublic:\n    StreamOutput (std::ostream & stream)\n    : mStream(stream)\n    { }\n    StreamOutput (StreamOutput const & rhs)\n    : mStream(rhs.mStream)\n    { }\n    std::unique_ptr<Output> clone () const override\n    {\n        return std::unique_ptr<Output>(\n            new StreamOutput(*this));\n    }\n    void sendLine (std::string const & line) override\n    {\n        mStream << line << std::endl;\n    }\nprotected:\n    std::ostream & mStream;\n};\n```", "```cpp\n    MereMemo::StreamOutput consoleStream(std::cout);\n    MereMemo::addLogOutput(consoleStream);\n```", "```cpp\n    LogStream ()\n    : mProceed(true)\n    { }\n    LogStream (LogStream const & other) = delete;\n    LogStream (LogStream && other)\n    : std::stringstream(std::move(other)),\n    mProceed(other.mProceed)\n    { }\n```", "```cpp\n    ~LogStream ()\n    {\n        if (not mProceed)\n        {\n            return;\n        }\n\n        auto & outputs = getOutputs();\n        for (auto const & output: outputs)\n        {\n            output->sendLine(this->str());\n        }\n    }\n```", "```cpp\nprivate:\n    bool mProceed;\n};\n```", "```cpp\ninline LogStream log (std::vector<Tag const *> tags = {})\n{\n    auto const now = std::chrono::system_clock::now();\n    std::time_t const tmNow =          std::chrono::system_clock::to_time_t(now);\n    auto const ms = duration_cast<std::chrono::milliseconds>(\n        now.time_since_epoch()) % 1000;\n    LogStream ls;\n    ls << std::put_time(std::gmtime(&tmNow),        \"%Y-%m-%dT%H:%M:%S.\")\n        << std::setw(3) << std::setfill('0')         << std::to_string(ms.count());\n```", "```cpp\nRunning 1 test suites\n--------------- Suite: Single Tests\n------- Test: Message can be tagged in log\n2022-07-24T22:32:13.116 color=\"green\" log_level=\"error\" simple 7809\nPassed\n------- Test: log needs no namespace when used with LogLevel\n2022-07-24T22:32:13.118 color=\"green\" log_level=\"error\" no namespace\nPassed\n------- Test: Default tags set in main appear in log\n2022-07-24T22:32:13.118 color=\"green\" log_level=\"info\" default tag 9055\nPassed\n------- Test: Multiple tags can be used in log\n2022-07-24T22:32:13.118 color=\"red\" log_level=\"debug\" size=\"large\" multi tags 7933\nPassed\n------- Test: Tags can be streamed to log\n2022-07-24T22:32:13.118 color=\"green\" log_level=\"info\" count=1 1 type 3247\n2022-07-24T22:32:13.118 color=\"green\" log_level=\"info\" id=123456789012345 2 type 6480\n2022-07-24T22:32:13.118 color=\"green\" log_level=\"info\" scale=1.500000 3 type 6881\n2022-07-24T22:32:13.119 color=\"green\" log_level=\"info\" cache_hit=false 4 type 778\nPassed\n------- Test: Tags can be used to filter messages\n2022-07-24T22:32:13.119 color=\"green\" log_level=\"info\" filter 1521\nPassed\n------- Test: Overridden default tag not used to filter messages\nPassed\n------- Test: Inverted tag can be used to filter messages\nPassed\n------- Test: Tag values can be used to filter messages\n2022-07-24T22:32:13.119 color=\"green\" count=101 log_level=\"info\" values 8461\nPassed\n------- Test: Simple message can be logged\n2022-07-24T22:32:13.120 color=\"green\" log_level=\"info\" simple 9466 with more text.\nPassed\n------- Test: Complicated message can be logged\n2022-07-24T22:32:13.120 color=\"green\" log_level=\"info\" complicated 9198 double=3.14 quoted=\"in quotes\"\nPassed\n-----------------------------------\nTests passed: 11\nTests failed: 0\n```", "```cpp\n2022-07-24T22:32:13.116 color=\"green\" log_level=\"error\" simple 7809\n2022-07-24T22:32:13.118 color=\"green\" log_level=\"error\" no namespace\n2022-07-24T22:32:13.118 color=\"green\" log_level=\"info\" default tag 9055\n2022-07-24T22:32:13.118 color=\"red\" log_level=\"debug\" size=\"large\" multi tags 7933\n2022-07-24T22:32:13.118 color=\"green\" log_level=\"info\" count=1 1 type 3247\n2022-07-24T22:32:13.118 color=\"green\" log_level=\"info\" id=123456789012345 2 type 6480\n2022-07-24T22:32:13.118 color=\"green\" log_level=\"info\" scale=1.500000 3 type 6881\n2022-07-24T22:32:13.119 color=\"green\" log_level=\"info\" cache_hit=false 4 type 778\n2022-07-24T22:32:13.119 color=\"green\" log_level=\"info\" filter 1521\n2022-07-24T22:32:13.119 color=\"green\" count=101 log_level=\"info\" values 8461\n2022-07-24T22:32:13.120 color=\"green\" log_level=\"info\" simple 9466 with more text.\n2022-07-24T22:32:13.120 color=\"green\" log_level=\"info\" complicated 9198 double=3.14 quoted=\"in quotes\"\n```", "```cpp\n#include <fstream>\n#include <iostream>\nint main ()\n{\n    MereMemo::FileOutput appFile(\"logs\");\n    //appFile.namePattern() = \"application-{}.log\";\n    //appFile.maxSize() = 10'000'000;\n    //appFile.rolloverCount() = 5;\n    MereMemo::addLogOutput(appFile);\n    MereMemo::StreamOutput consoleStream(std::cout);\n    MereMemo::addLogOutput(consoleStream);\n    std::fstream streamedFile(\"stream.log\", std::ios::app);\n    MereMemo::StreamOutput fileStream(streamedFile);\n    MereMemo::addLogOutput(fileStream);\n    MereMemo::addDefaultTag(info);\n    MereMemo::addDefaultTag(green);\n    return MereTDD::runTests(std::cout);\n}\n```"]