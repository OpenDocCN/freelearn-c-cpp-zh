["```cpp\nQT       += core gui \nCONFIG   += c++14 \n\ngreaterThan(QT_MAJOR_VERSION, 4): QT += widgets \n\nTARGET = todo \nTEMPLATE = app \n\nSOURCES += main.cpp \\ \n           MainWindow.cpp \n\nHEADERS  += MainWindow.h \\ \n\nFORMS    += MainWindow.ui \\ \n\n```", "```cpp\n#include \"MainWindow.h\" \n#include <QApplication> \n\nint main(int argc, char *argv[]) \n{ \n    QApplication a(argc, argv); \n    MainWindow w; \n    w.show(); \n\n    return a.exec(); \n} \n\n```", "```cpp\n#include <QMainWindow> \n\nnamespace Ui { \nclass MainWindow; \n} \n\nclass MainWindow : public QMainWindow \n{ \n    Q_OBJECT \n\npublic: \n    explicit MainWindow(QWidget *parent = 0); \n    ~MainWindow(); \nprivate: \n    Ui::MainWindow *ui; \n}; \n\n```", "```cpp\n#include \"MainWindow.h\" \n#include \"ui_MainWindow.h\" \n\nMainWindow::MainWindow(QWidget *parent) : \n    QMainWindow(parent), \n    ui(new Ui::MainWindow) \n{ \n    ui->setupUi(this); \n\n```", "```cpp\nMainWindow::~MainWindow() \n{ \n    delete ui; \n} \n\n```", "```cpp\nconnect(sender, &Sender::signalName,  \n    receiver, &Receiver::slotName); \n\n```", "```cpp\nMainWindow::MainWindow(QWidget *parent) : \n    QMainWindow(parent), \n    ui(new Ui::MainWindow) \n{ \n    ui->setupUi(this); \n    connect(ui->addTaskButton, &QPushButton::clicked, \n    QApplication::instance(), &QApplication::quit); \n} \n\n```", "```cpp\nclass MainWindow : public QMainWindow \n{ \n    Q_OBJECT \n\npublic: \n    explicit MainWindow(QWidget *parent = 0); \n    ~MainWindow(); \n\npublic slots: \n    void addTask(); \n\nprivate: \n    Ui::MainWindow *ui; \n}; \n\n```", "```cpp\nvoid MainWindow::addTask() \n{ \n    qDebug() << \"User clicked on the button!\"; \n} \n\n```", "```cpp\n#include <QDebug> \n\nMainWindow::MainWindow(QWidget *parent) : \n    QMainWindow(parent), \n    ui(new Ui::MainWindow) \n{ \n    ui->setupUi(this); \n    connect(ui->addTaskButton, &QPushButton::clicked, \n    this, &MainWindow::addTask); \n} \n\n```", "```cpp\n#ifndef TASK_H \n#define TASK_H \n\n#include <QWidget> \n#include <QString> \n\nnamespace Ui { \nclass Task; \n} \n\nclass Task : public QWidget \n{ \n    Q_OBJECT \n\npublic: \n    explicit Task(const QString& name, QWidget *parent = 0); \n    ~Task(); \n\n    void setName(const QString& name); \n    QString name() const; \n    bool isCompleted() const; \n\nprivate: \n    Ui::Task *ui; \n}; \n\n#endif // TASK_H \n\n```", "```cpp\n#include \"Task.h\" \n#include \"ui_Task.h\" \n\nTask::Task(const QString& name, QWidget *parent) : \n        QWidget(parent), \n        ui(new Ui::Task) \n{ \n    ui->setupUi(this); \n    setName(name); \n} \n\nTask::~Task() \n{ \n    delete ui; \n} \n\nvoid Task::setName(const QString& name) \n{ \n    ui->checkbox->setText(name); \n} \n\nQString Task::name() const \n{ \n    return ui->checkbox->text(); \n} \n\nbool Task::isCompleted() const \n{ \n   return ui->checkbox->isChecked(); \n} \n\n```", "```cpp\n#include <QVector> \n\n#include \"Task.h\" \n\nclass MainWindow : public QMainWindow \n{ \n    // MAINWINDOW_H \n\npublic slots: \n    void addTask(); \n\nprivate: \n    Ui::MainWindow *ui; \n    QVector<Task*> mTasks; \n}; \n\n```", "```cpp\nMainWindow::MainWindow(QWidget *parent) : \n    QMainWindow(parent), \n    ui(new Ui::MainWindow), \n    mTasks() \n{ \n    ui->setupUi(this); \n    connect(ui->addTaskButton, &QPushButton::clicked,  \n    this, &MainWindow::addTask); \n}; \n\n```", "```cpp\nvoid MainWindow::addTask() \n{ \n        qDebug() << \"Adding new task\"; \n        Task* task = new Task(\"Untitled task\"); \n        mTasks.append(task); \n        ui->tasksLayout->addWidget(task); \n} \n\n```", "```cpp\nMainWindow::~MainWindow() \n{ \n    delete ui; \n} \n\n```", "```cpp\n#include <QInputDialog> \n... \nvoid MainWindow::addTask() \n{ \n    bool ok; \n    QString name = QInputDialog::getText(this,  \n        tr(\"Add task\"), \n        tr(\"Task name\"), \n        QLineEdit::Normal, \n        tr(\"Untitled task\"),               &ok); \n    if (ok && !name.isEmpty()) { \n        qDebug() << \"Adding new task\"; \n        Task* task = new Task(name); \n        mTasks.append(task); \n        ui->tasksLayout->addWidget(task); \n    } \n} \n\n```", "```cpp\nQString QinputDialog::getText( \n  QWidget* parent,  \n      const QString& title,  \n      const QString& label,  \n      QLineEdit::EchoMode mode = QLineEdit::Normal,  \n      const QString& text = QString(),  \n      bool* ok = 0, ...)\n```", "```cpp\n// In Task.h \npublic slots: \n    void rename(); \n\n// In Task.cpp \n#include <QInputDialog> \n\nTask::Task(const QString& name, QWidget *parent) : \n       QWidget(parent), \n       ui(new Ui::Task) \n{ \n   ui->setupUi(this); \n   setName(name); \n   connect(ui->editButton, &QPushButton::clicked, this, &Task::rename); \n} \n... \nvoid Task::rename() \n{ \n    bool ok; \n    QString value = QInputDialog::getText(this, tr(\"Edit task\"), \n                                          tr(\"Task name\"), \n                                          QLineEdit::Normal, \n                                          this->name(), &ok); \n    if (ok && !value.isEmpty()) { \n        setName(value); \n    } \n} \n\n```", "```cpp\nclass Task : public QWidget \n{ \n    ... \npublic slots: \n    void rename(); \nsignals: \n    void removed(Task* task); \n   ... \n}; \n\n```", "```cpp\nTask::Task(const QString& name, QWidget *parent) : \n        QWidget(parent), \n        ui(new Ui::Task) \n{ \n    ui->setupUi(this); \n    ... \n    connect(ui->removeButton, &QPushButton::clicked, [this] { \n        emit removed(this); \n    }); \n} \n\n```", "```cpp\n[this] { \n        emit removed(this); \n    }); \n\n```", "```cpp\n[ capture-list ] ( params ) -> ret { body }\n```", "```cpp\nconnect(ui->removeButton, &QPushButton::clicked, [this, &name] { \n        qDebug() << \"Trying to remove\" << name; \n        this->emit removed(this); \n    }); \n\n```", "```cpp\nconnect(ui->removeButton, &QPushButton::clicked, [this, name] { \n        qDebug() << \"Trying to remove\" << name; \n        this->emit removed(this); \n    }); \n\n```", "```cpp\nconnect(ui->removeButton, &QPushButton::clicked, [this, name] { \n    qDebug() << \"Trying to remove\" << \n        [] (const QString& taskName) -> QString { \n            return \"-------- \" + taskName.toUpper(); \n    }(name); \n    this->emit removed(this); \n}); \n\n```", "```cpp\n// in MainWindow.h \npublic slots: \n    void addTask(); \n    void removeTask(Task* task); \n\n// In MainWindow.cpp \nvoid MainWindow::addTask() \n{ \n    ... \n    if (ok && !name.isEmpty()) { \n        qDebug() << \"Adding new task\"; \n        Task* task = new Task(name); \n        connect(task, &Task::removed,  \n       this, &MainWindow::removeTask); \n    ... \n    } \n} \n\nvoid MainWindow::removeTask(Task* task) \n{ \n    mTasks.removeOne(task); \n    ui->tasksLayout->removeWidget(task); \n    task->setParent(0); \n    delete task; \n} \n\n```", "```cpp\nvoid MainWindow::removeTask(Task* task) \n{ \n    mTasks.removeOne(task); \n    ui->tasksLayout->removeWidget(task); \n    // task->setParent(0); \n    // delete task; \n} \n\n```", "```cpp\n// In Task.h \nsignals: \n    void removed(Task* task); \n    void statusChanged(Task* task); \nprivate slots: \n    void checked(bool checked); \n\n// in Task.cpp \nTask::Task(const QString& name, QWidget *parent) : \n        QWidget(parent), \n        ui(new Ui::Task) \n{ \n    ... \n\n    connect(ui->checkbox, &QCheckBox::toggled,  \n    this, &Task::checked); \n} \n\n... \n\nvoid Task::checked(bool checked) \n{ \n    QFont font(ui->checkbox->font()); \n    font.setStrikeOut(checked); \n    ui->checkbox->setFont(font); \n    emit statusChanged(this); \n} \n\n```", "```cpp\n// In MainWindow.h \npublic: \n    void updateStatus(); \npublic slots: \n    void addTask(); \n    void removeTask(Task* task); \n    void taskStatusChanged(Task* task); \n\n// In MainWindow.cpp \nMainWindow::MainWindow(QWidget *parent) : \n    QMainWindow(parent), \n    ui(new Ui::MainWindow), \n    mTasks() \n{ \n    ... \n    updateStatus(); \n    } \n} \n\nvoid MainWindow::addTask() \n{ \n   ... \n   if (ok && !name.isEmpty()) { \n       ... \n       connect(task, &Task::removed, this, \n               &MainWindow::removeTask); \n       connect(task, &Task::statusChanged, this, \n               &MainWindow::taskStatusChanged); \n       mTasks.append(task); \n       ui->tasksLayout->addWidget(task); \n       updateStatus(); \n   } \n} \n\nvoid MainWindow::removeTask(Task* task) \n{ \n   ... \n   delete task; \n   updateStatus(); \n} \n\nvoid MainWindow::taskStatusChanged(Task* /*task*/) \n{ \n    updateStatus(); \n} \n\nvoid MainWindow::updateStatus() \n{ \n    int completedCount = 0; \n    for(auto t : mTasks)  { \n        if (t->isCompleted()) { \n            completedCount++; \n        } \n    } \n    int todoCount = mTasks.size() - completedCount; \n\n    ui->statusLabel->setText( \n        QString(\"Status: %1 todo / %2 completed\") \n                             .arg(todoCount) \n                             .arg(completedCount)); \n} \n\n```", "```cpp\nfor(auto t : mTasks)  { \n    ...  \n} \n\n```", "```cpp\nstd::vector::const_iterator iterator = mTasks.toStdVector() \n                                           .stdTasks.begin(); \n\n// how many neurones did you save? \nauto autoIter = stdTasks.begin(); \n\n```", "```cpp\nauto prettyName = [] (const QString& taskName) -> QString { \n    return \"-------- \" + taskName.toUpper(); \n}; \nconnect(ui->removeButton, &QPushButton::clicked,  \n    [this, name, prettyName] { \n        qDebug() << \"Trying to remove\" << prettyName(name); \n        this->emit removed(this); \n}); \n\n```", "```cpp\nui->statusLabel->setText( \n        QString(\"Status: %1 todo / %2 completed\") \n                             .arg(todoCount) \n                             .arg(completedCount)); \n\n```"]