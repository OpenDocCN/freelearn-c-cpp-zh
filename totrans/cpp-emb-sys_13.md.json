["```cpp\n#include <cstdio>\n#include <array>\n#include <algorithm>\nint main() {\n    std::array<int, 4> arr{5, 3, 4, 1};\n    const auto print_arr = [&arr](const char* message) {\n        printf(\"%s\\r\\n\", message);\n        for(auto elem : arr) {\n            printf(\"%d, \", elem);\n        }\n        printf(\"\\r\\n\");\n    };\n    print_arr(\"Unsorted array:\");\n    std::sort(arr.begin(), arr.end(), [](int a, int b) {\n       return a < b;});\n    print_arr(\"Sorted in ascending order:\");\n    std::sort(arr.begin(), arr.end(), [](int a, int b) {\n       return a > b;});\n    print_arr(\"Sorted in descending order:\");\n    return 0;\n} \n```", "```cpp\nUnsorted array:\n5, 3, 4, 1,\nSorted in ascending order:\n1, 3, 4, 5,\nSorted in descending order:\n5, 4, 3, 1, \n```", "```cpp\n auto greater_than = [](int a, int b) -> bool {\n        return a > b;\n    }; \n```", "```cpp\n#include <cstdio>\n#include <cstdint>\n#include <functional>\nint main() {\n    std::function<void()> fun;\n    fun = []() {\n        printf(\"This is a lambda!\\r\\n\");\n    }; \n    fun();\n    std::uint32_t reg = 0x12345678;\n    fun = [reg]() {\n        printf(\"Reg content 0x%8X\\r\\n\", reg);\n    };\n    reg = 0;\n    fun();\n    return 0;\n} \n```", "```cpp\n#include <cstdio>\n#include <cstdint>\n#include <functional>\nnamespace hal\n{\nclass gpio\n{\npublic:\n    gpio(const std::function<void()> & on_press) {\n        if(on_press) {\n            on_press_ = on_press;\n        }\n    }\n    void execute_interrupt_handler () const {\n        if(on_press_) {\n            on_press_();\n        }\n    }\nprivate:\n    std::function<void()> on_press_ = nullptr;\n};\n}; // namespace hal\nint main () {\n    hal::gpio button1([]() {\n        printf(\"Button1 pressed!\\r\\n\");\n    });\n    // invoke stored lambda\n    button1.execute_interrupt_handler();\n    return 0;\n} \n```", "```cpp\nconst hal::gpio_stm32<hal::port_a> button1(hal::pin::p4, [](){\n printf(\"Button1 pressed!\\r\\n\");\n}); \n```", "```cpp\n    $ cd Chapter10/lambdas\n    $ cmake -B build -DCMAKE_BUILD_TYPE=Debug -DMAIN_CPP_FILE_NAME=main_std_function_command_pattern.cpp\n    $ cmake --build build --target run_in_renode \n    ```", "```cpp\n    gpioPortA.button1 PressAndRelease\n    gpioPortA.button2 PressAndRelease \n    ```", "```cpp\n    Button1 pressed!\n    Button2 pressed! \n    ```", "```cpp\ngpio::gpio(const std::function<void()> & on_press) {\n   on_press_ = on_press;\n   gpio_interrupt_manager::register_interrupt_handler(this)\n} \n```", "```cpp\nextern \"C\" void EXTI4_15_IRQHandler(void) {\n    gpio_interrupt_manager::execute_interrupt_handlers();\n} \n```", "```cpp\nvoid gpio_interrupt_manager::execute_interrupt_handlers() {\n    for(std::size_t i = 0; i < w_idx; i++) {\n        gpio_handlers[i]->execute_interrupt_handler();\n    }\n} \n```", "```cpp\nvoid gpio::execute_interrupt_handler () const {\n    if(is_interrupt_generated()){\n        clear_interrupt_flag();\n        if(on_press_) {\n            on_press_();\n        }\n    }\n} \n```", "```cpp\n#include <cstdio>\n#include <cstdint>\n#include <cstdlib>\n#include <functional>\nvoid *operator new(std::size_t count) {\n  printf(\"%s, size = %ld\\r\\n\", __PRETTY_FUNCTION__, count);\n  return std::malloc(count);\n}\nvoid operator delete(void *ptr) noexcept {\n  printf(\"%s\\r\\n\", __PRETTY_FUNCTION__);\n  std::free(ptr);\n}\nint main () {\n    std::function<void()> func;\n    auto arr = []() {\n        constexpr std::size_t c_array_size = 6;\n        std::array<int, c_array_size> ar{};\n        for(int i = 0; i < ar.size(); i++) {\n            ar[i] = i;\n        }\n        return ar;\n    }();\n    auto array_printer = [arr]() {\n        for(int elem: arr) {\n            printf(\"%d, \", elem);\n        }\n        printf(\"\\r\\n\");\n    };\n    func = array_printer;\n    // invoke stored lambda\nfunc();\n    return 0;\n} \n```", "```cpp\nvoid* operator new(std::size_t), size = 24\n0, 1, 2, 3, 4,\nvoid operator delete(void*) \n```", "```cpp\n func = std::ref(array_printer); \n```", "```cpp\n#include <cstdio>\n#include <functional>\nint main () {\n    void(*fun)(void);\n    fun = []() {\n        printf(\"Lambda!\\r\\n\");\n    };\n    fun();\n    return 0;\n} \n```"]