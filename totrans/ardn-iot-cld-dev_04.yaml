- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '4'
- en: 'Project #1 – a Smarter Setup for Sensing the Environment'
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目#1 - 智能化环境感知设置
- en: This chapter guides you through the reasons why a clean environment is necessary
    for human beings and how to implement air quality, temperature, and humidity monitoring
    by using low-cost **ESP-series boards**, with different open source sensors and
    the **Arduino IoT Cloud**. Moreover, you will learn how to visualize the relevant
    data and use the Arduino IoT Cloud features to expand the functionalities of your
    applications/projects.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将指导您了解为什么清洁的环境对人类来说是必要的，以及如何通过使用低成本**ESP系列板**、不同的开源传感器和**Arduino IoT Cloud**来实现空气质量、温度和湿度监测。此外，您还将学习如何可视化相关数据，并使用Arduino
    IoT Cloud功能来扩展您应用程序/项目的功能。
- en: 'In this chapter, you will gain confidence in how to build real-world solutions
    as we demonstrate **Printed Circuit Board** (**PCB**) design, its implementation,
    and its deployment in the real world. We will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将通过展示**印刷电路板**（**PCB**）设计、其实施和在现实世界中的应用来展示如何构建实际解决方案。我们将涵盖以下主题：
- en: Why is air quality monitoring necessary?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么空气质量监测是必要的？
- en: Hardware components – sensors and development boards
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 硬件组件 - 传感器和开发板
- en: Project architecture
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目架构
- en: Setting up the **Thing**, network credentials, cloud variables, and code
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置**Thing**、网络凭据、云变量和代码
- en: Setting up a dashboard for web and mobile
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置网页和移动端仪表板
- en: What’s next?
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来是什么？
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The following hardware components are required to understand this chapter:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 以下硬件组件是理解本章所必需的：
- en: '**WeMos D1** **MINI ESP8266**'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**WeMos D1** **MINI ESP8266**'
- en: A **DHT11**/**DHT22** sensor/module
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DHT11**/**DHT22**传感器/模块'
- en: The **MQ-135** air quality module
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MQ-135**空气质量模块'
- en: A PCB (a link is available in the *PCB design and assembling hardware* *components*
    section)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PCB（在*PCB设计和组装硬件* *组件*部分有链接）
- en: Female headers
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 女性端子
- en: Jumper cables
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跳线
- en: For coding, we will use the **Arduino Web Editor**, which includes a large collection
    of development boards and sensor libraries, and the **Arduino IoT Cloud** for
    Thing and dashboard setup. To develop hardware and sensor designs, we will need
    **Fritzing** desktop software.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 对于编码，我们将使用**Arduino Web Editor**，它包含大量开发板和传感器库，以及**Arduino IoT Cloud**用于Thing和仪表板设置。为了开发硬件和传感器设计，我们需要**Fritzing**桌面软件。
- en: 'The code for this chapter is available at the book’s official GitHub repository,
    or you can directly download the code by following this link: [https://github.com/PacktPublishing/Arduino-IoT-Cloud-for-Developers/tree/main/Chapter%234%20Project%231%20Sensing%20and%20Monitoring%20the%20Air%20for%20Clean%20Environment](https://github.com/PacktPublishing/Arduino-IoT-Cloud-for-Developers/tree/main/Chapter%234%20Project%231%20Sensing%20and%20Monitoring%20the%20Air%20for%20Clean%20Environment).'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码可在本书的官方GitHub仓库中找到，或者您可以通过以下链接直接下载代码：[https://github.com/PacktPublishing/Arduino-IoT-Cloud-for-Developers/tree/main/Chapter%234%20Project%231%20Sensing%20and%20Monitoring%20the%20Air%20for%20Clean%20Environment](https://github.com/PacktPublishing/Arduino-IoT-Cloud-for-Developers/tree/main/Chapter%234%20Project%231%20Sensing%20and%20Monitoring%20the%20Air%20for%20Clean%20Environment).
- en: Why is air quality monitoring necessary?
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么空气质量监测是必要的？
- en: Air quality monitoring is necessary for human beings because air pollution can
    have significant negative effects on our health and well-being. Poor air quality
    can cause a variety of respiratory and cardiovascular problems, such as asthma,
    chronic bronchitis, lung cancer, and heart disease. It can also exacerbate existing
    health conditions and reduce our ability to fight off infections and illnesses.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 空气质量监测对人类来说是必要的，因为空气污染可能对我们的健康和福祉产生重大的负面影响。糟糕的空气质量可能导致各种呼吸和心血管问题，如哮喘、慢性支气管炎、肺癌和心脏病。它还可能加剧现有的健康问题，并降低我们抵抗感染和疾病的能力。
- en: Air pollution can also impact the environment, including ecosystems, wildlife,
    and plants. Polluted air can lead to **acid rain**, which can damage crops, forests,
    and bodies of water and harm wildlife. It can also lead to the depletion of the
    ozone layer, which protects us from harmful UV radiation.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 空气污染也可能影响环境，包括生态系统、野生动物和植物。受污染的空气可能导致**酸雨**，损害农作物、森林和水源，并危害野生动物。它还可能导致臭氧层的耗尽，这层臭氧层保护我们免受有害的紫外线辐射。
- en: By monitoring air quality, we can identify areas where pollution levels are
    high and take steps to reduce exposure. This can include reducing emissions from
    factories, power plants, and transportation, as well as encouraging the use of
    clean energy and transportation alternatives. By improving air quality, we can
    help to protect our health, support the environment, and promote sustainable development.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 通过监测空气质量，我们可以确定污染水平高的区域，并采取措施减少暴露。这包括减少工厂、发电厂和交通部门的排放，以及鼓励使用清洁能源和交通替代方案。通过改善空气质量，我们可以帮助保护我们的健康，支持环境，并促进可持续发展。
- en: 'Air quality monitoring is necessary to assess the level of pollutants present
    in the air we breathe. It helps to identify the sources of pollution and to track
    changes in air quality over time. There are several reasons why air quality monitoring
    is important:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 空气质量监测是评估我们呼吸的空气中污染物水平所必需的。它有助于确定污染源，并跟踪空气质量随时间的变化。空气质量监测之所以重要，有几个原因：
- en: '**Regulatory compliance**: Many countries have regulations in place to limit
    the amount of pollutants that can be released into the air. Air quality monitoring
    is necessary to ensure that these regulations are followed and to identify areas
    where additional regulations may be necessary.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**合规性要求**：许多国家已经制定了法规，限制可以排放到空气中的污染物数量。空气质量监测是确保这些法规得到遵守并确定可能需要额外法规的区域的必要手段。'
- en: '**Economic concerns**: Poor air quality can have a negative impact on economic
    activity, including reduced productivity, increased healthcare costs, and decreased
    tourism. Monitoring air quality can help to identify areas where pollution levels
    are high and take steps to improve air quality and support economic growth.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**经济关注**：糟糕的空气质量会对经济活动产生负面影响，包括降低生产力、增加医疗保健成本和减少旅游业。监测空气质量可以帮助确定污染水平高的区域，并采取措施改善空气质量以支持经济增长。'
- en: Overall, air quality monitoring is an essential tool to protect public health,
    preserve the environment, and promote sustainable economic development. Now we’ve
    had a theoretical review of air quality monitoring, it’s time to explore the project
    practically. Firstly, we will start with the hardware, where we will explore all
    the required components such as development boards, sensors, design diagrams,
    and PCB design for implementation. Later, we will set up the Thing and cloud variables,
    upload code to the development board, and set up the dashboard for data visualization.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，空气质量监测是保护公共健康、保护环境和促进可持续经济发展的关键工具。现在我们已经对空气质量监测进行了理论回顾，是时候实际探索这个项目了。首先，我们将从硬件开始，探索所有必需的组件，例如开发板、传感器、设计图和PCB设计以供实施。之后，我们将设置设备和云变量，上传代码到开发板，并设置仪表盘以进行数据可视化。
- en: Exploring the hardware requirements
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索硬件需求
- en: 'Before moving forward, we will first look at what types of development boards
    and sensors are required to accomplish the project. We aim to use a board that
    provides Wi-Fi connectivity, is small in size, and is low in cost. If we talk
    about Wi-Fi-enabled development boards, then there are a lot of organizations
    providing them, such as **Arduino**, the **ESP32 series**, and the **ESP8266**
    series. Arduino development boards such as **MKR Wi-Fi 1010** and **MKR Wi-Fi
    1000** are expensive compared to ESP32 and ESP8266\. Now, we have two options:
    we either go with ESP32 or ESP8266 and leave the Arduino development boards. In
    this project, we will be using the WeMos D1 Mini, which is part of the ESP8266
    series. Although the ESP32 series offers similar features, it is equipped with
    **Bluetooth Low Energy** (**BLE**) connectivity, which is not currently compatible
    with this project. Thus, we have opted for the ESP8266 series development boards,
    which are not only compact in size but also more affordable.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续前进之前，我们首先将查看完成项目所需的开发板和传感器的类型。我们的目标是使用提供Wi-Fi连接、体积小且成本低的板子。如果我们谈论具有Wi-Fi功能的开发板，那么有很多组织提供这些板子，例如**Arduino**、**ESP32系列**和**ESP8266系列**。与ESP32和ESP8266相比，Arduino开发板如**MKR
    Wi-Fi 1010**和**MKR Wi-Fi 1000**价格较高。现在，我们有两个选择：我们要么选择ESP32或ESP8266，并放弃Arduino开发板。在这个项目中，我们将使用ESP8266系列的WeMos
    D1 Mini。尽管ESP32系列提供类似的功能，但它配备了**低功耗蓝牙**（**BLE**）连接，目前与本项目不兼容。因此，我们选择了ESP8266系列开发板，这些开发板不仅体积紧凑，而且价格更实惠。
- en: Among the sensors, there is a diverse range of options for measuring temperature,
    humidity, and air quality. However, our primary goal is to provide sensors that
    are affordable and readily available to users worldwide. For temperature and humidity
    measurements, we rely on the widely available and reasonably priced DHT11/DHT22
    sensors. The MQ-135 sensor provides a wide detecting scope, fast response, and
    high sensitivity. It is a stable and long-life, simple drive circuit application.
    These sensors are used in air quality control equipment and are suitable for detecting
    NH3, NOx, alcohol, benzene, smoke, CO2, and more. They are easily obtainable on
    the market and well-suited for small-scale projects.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在传感器中，有各种选项可以测量温度、湿度和空气质量。然而，我们的主要目标是提供对全球用户来说既经济又容易获得的传感器。对于温度和湿度测量，我们依赖于广泛可用且价格合理的DHT11/DHT22传感器。MQ-135传感器提供广泛的检测范围，快速响应和高灵敏度。它是一种稳定且寿命长的简单驱动电路应用。这些传感器用于空气质量控制设备，适用于检测NH3、NOx、酒精、苯、烟雾、CO2等。它们在市场上容易获得，非常适合小型项目。
- en: 'The ESP8266 series has a wide collection of development boards that vary in
    size and pins. In this chapter, I’m using the WeMos D1 Mini development board,
    as it’s very compact compared to other boards and, of course, cheaper in cost,
    and it provides 5V as well as 3.3V pins. The following figure is the complete
    overview of the WeMos D1 Mini board, and demonstrates all the digital/analog Arduino-based
    pin numbers, ground and power pins, and so on:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: ESP8266系列拥有多种大小和引脚数不同的开发板。在本章中，我使用WeMos D1 Mini开发板，因为它与其他板相比非常紧凑，当然，成本也更低，并且它提供5V和3.3V引脚。以下图是WeMos
    D1 Mini板的完整概述，并展示了所有基于Arduino的数字/模拟引脚编号、地线和电源引脚等：
- en: '![Figure 4.1 – WeMos D1 Mini ESP8266](img/B19752_04_01.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图4.1 – WeMos D1 Mini ESP8266](img/B19752_04_01.jpg)'
- en: Figure 4.1 – WeMos D1 Mini ESP8266
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.1 – WeMos D1 Mini ESP8266
- en: WeMos provides multiple pins for digital input/output, but there is only one
    analog pin for input/output operations. If you want to use multiple analog sensors,
    then **analog-to-digital converters** are available. One of the most famous analog-to-digital
    converters is the **ADS1115**/**ADS1015 module**, which provides four analog pins
    that help cater to the requirement of using multiple sensors.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: WeMos提供了多个数字输入/输出引脚，但只有一个模拟引脚用于输入/输出操作。如果您想使用多个模拟传感器，则可以使用**模数转换器**。最著名的模数转换器之一是**ADS1115**/**ADS1015模块**，它提供四个模拟引脚，有助于满足使用多个传感器的需求。
- en: However, for the current project, we need one digital pin for the **DHT11**/**DHT22
    sensor** and one analog pin for the **MQ-135 air quality sensor**. One of the
    best features of the WeMos D1 Mini development board is the 5V power pin, which
    is not available on most ESP8266 series development boards.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，对于当前项目，我们需要一个数字引脚用于**DHT11**/**DHT22传感器**，以及一个模拟引脚用于**MQ-135空气质量传感器**。WeMos
    D1 Mini开发板的一个最佳特性是5V电源引脚，这在大多数ESP8266系列开发板上是不可用的。
- en: 'Next, we will use the DHT11 sensor to sense temperature and humidity, but you
    can also use the DHT22 sensor, depending on your requirements. With regard to
    features, the DHT22 provides a broader range of sensing compared to the DHT11,
    but its cost is higher. The following diagram shows the pinout layout of both
    sensors:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使用DHT11传感器来检测温度和湿度，但根据您的需求，您也可以使用DHT22传感器。就功能而言，DHT22提供的检测范围比DHT11更广，但其成本更高。以下图表显示了两个传感器的引脚布局：
- en: '![Figure 4.2 – The DHT22 and DHT11 pinout layouts](img/B19752_04_02.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图4.2 – DHT22和DHT11引脚布局](img/B19752_04_02.jpg)'
- en: Figure 4.2 – The DHT22 and DHT11 pinout layouts
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.2 – DHT22和DHT11引脚布局
- en: 'Pin #1 is the **voltage common collector** (**VCC**) and works with both 3.3V
    and 5V. Pin #2 is a **data** pin that connects with any digital pin of a development
    board, and Pin #4 is a **ground** (**GND**) pin that connects with the GND pin
    of a development board. There is another pin in the sensor, Pin #3, which is **Not
    Connected** (**NC**) – this pin is not used by us during development.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 引脚#1是**电压共集电极**（**VCC**），与3.3V和5V都兼容。引脚#2是一个**数据**引脚，可以连接到开发板上的任何数字引脚，而引脚#4是一个**地**（**GND**）引脚，可以连接到开发板的GND引脚。传感器中还有一个引脚，即引脚#3，它是**未连接**（**NC**）的
    – 在开发过程中我们不使用这个引脚。
- en: 'The following table explains all the specification differences between DHT22
    and DHT11; the most notable things are the **sensing range** and the **sensing
    period**:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 下表解释了DHT22和DHT11之间的所有规格差异；最值得注意的是**检测范围**和**检测周期**：
- en: '| **Model** | **DHT22** | **DHT11** |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| **型号** | **DHT22** | **DHT11** |'
- en: '| Power supply | 3.3–5V |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| 电源电压 | 3.3–5V |'
- en: '| Output signal | A digital signal via a single bus |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| 输出信号 | 通过单总线输出数字信号 |'
- en: '| Sensing element | Polymer capacitor |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| 感测元件 | 聚合物电容器 |'
- en: '| Sensing range | Humidity: 0–100% RHTemperature: 40~80 Celsius | Humidity:
    20–90% RHTemperature: 0~50 Celsius |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| 感测范围 | 湿度：0–100% RH温度：40~80 摄氏度 | 湿度：20–90% RH温度：0~50 摄氏度 |'
- en: '| Accuracy | Humidity: ± 2% RH (Max ±5% RH)Temperature: <±0.5 Celsius | Humidity:
    ±1% RH (Max ± 5% RH)Temperature: <±2 Celsius |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| 准确度 | 湿度：± 2% RH（最大 ±5% RH）温度：<±0.5 摄氏度 | 湿度：±1% RH（最大 ± 5% RH）温度：<±2 摄氏度
    |'
- en: '| Sensing period | Average 2s | Average 1s |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| 感测周期 | 平均 2 秒 | 平均 1 秒 |'
- en: Table 4.1 – DHT11 vs DHT22 comparison
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 表4.1 – DHT11与DHT22比较
- en: 'Finally, we will look at the main sensor for our project. The MQ-135 sensor
    is used to monitor the air quality of a specific area. It is a low-cost environment-monitoring
    sensor, and it monitors a wide range of parameters, such as smoke, carbon dioxide,
    ammonia, benzene, nitrogen oxides, and alcohol. The MQ-135 senses all these parameters
    and provides the value of air quality in **parts per million** (**ppm**). The
    following figure shows the MQ-135’s shape and its pin layout diagram as well as
    indicators for the LED and regulator:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将查看我们项目的核心传感器。MQ-135传感器用于监测特定区域的空气质量。它是一种低成本的环境监测传感器，它可以监测广泛的参数，如烟雾、二氧化碳、氨、苯、氮氧化物和酒精。MQ-135可以检测所有这些参数，并提供空气质量**百万分之一**（**ppm**）的值。以下图显示了MQ-135的形状及其引脚布局图以及LED和调节器的指示器：
- en: '![Figure 4.3 – MQ-135 sensor and pinout](img/B19752_04_03.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图4.3 – MQ-135传感器和引脚布局](img/B19752_04_03.jpg)'
- en: Figure 4.3 – MQ-135 sensor and pinout
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.3 – MQ-135传感器和引脚布局
- en: 'The MQ-135 sensor module consists of four pins, and each pin is marked with
    a code: **Analog Output** (**AO**), **Digital Output** (**DO**), GND, and VCC.
    The module provides readings on both analog and digital modes, but analog mode
    is best to get values in PPM. The sensor operates better with 5V power, but you
    can still use 3.3V, although I recommend the former. The MQ-135 requires 20 seconds
    of preheating to provide better readings, so make sure to get readings after an
    interval of every 20 seconds, or at least wait 20 seconds for the first-time boot
    of the development board.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: MQ-135传感器模块由四个引脚组成，每个引脚都标有代码：**模拟输出**（**AO**）、**数字输出**（**DO**）、GND和VCC。该模块提供模拟和数字模式下的读数，但模拟模式最适合获取PPM值。该传感器在5V电源下运行效果更好，但您仍然可以使用3.3V，尽管我推荐前者。MQ-135需要20秒的预热才能提供更好的读数，因此请确保每隔20秒读取一次，或者至少在开发板首次启动后等待20秒。
- en: The module also contains a regulator to control the sensitivity of sensors,
    which could be adjusted according to the environment. Different indicator **Surface
    Mount Device** (**SMD**) LEDs are available to verify the module status, which
    includes **Logic Out LED** and **Power LED**.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块还包含一个调节器，用于控制传感器的灵敏度，可以根据环境进行调整。不同的指示**表面贴装器件**（**SMD**）LED可用于验证模块状态，包括**逻辑输出LED**和**电源LED**。
- en: Understanding the project architecture
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解项目架构
- en: In the preceding sections, we discussed the sensors and development board in
    detail. Now, it’s time to cook the recipe. In hardware development, before getting
    to work with sensors and development boards, we need to develop design concepts
    to get a better understanding of how things will be connected. There is a lot
    of software available to design and develop design concepts regarding electronics
    projects, but we will opt for Fritzing.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们详细讨论了传感器和开发板。现在，是时候准备食谱了。在硬件开发中，在开始使用传感器和开发板之前，我们需要开发设计概念，以便更好地理解事物如何连接。有许多软件可用于设计和发展有关电子项目的概念，但我们将选择Fritzing。
- en: In the next subsection, we will talk about the schematics and the design of
    the project, which explains how to connect the pins to the development board.
    In the subsection after that, we will talk about the PCB design and its implementation
    to make a product ready for deployment in the field.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一小节中，我们将讨论项目的电路图和设计，这将解释如何将引脚连接到开发板。在下一小节中，我们将讨论PCB设计和其实施，以便将产品部署到现场。
- en: Schematics and design
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 电路图和设计
- en: 'The purpose of our design is to get a clear understanding of how sensors will
    connect with the development board. It helps engineers develop a prototype on
    a **breadboard** or **Veroboard** by using our design files. The other major benefit
    of designing is that Fritzing builds hardware schematics and the PCB design in
    the background according to your design, which can be adjusted by designers according
    to system requirements. The following design provides a full overview of how you
    can connect sensors to a development board:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们设计的目的是清楚地了解传感器如何与开发板连接。它帮助工程师通过使用我们的设计文件在 **面包板** 或 **Veroboard** 上开发原型。设计的主要好处之一是
    Fritzing 会根据你的设计在后台构建硬件原理图和 PCB 设计，设计师可以根据系统要求进行调整。以下设计提供了如何将传感器连接到开发板的全面概述：
- en: '![Figure 4.4 – An air quality-monitoring system design](img/B19752_04_04.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.4 – 空气质量监测系统设计](img/B19752_04_04.jpg)'
- en: Figure 4.4 – An air quality-monitoring system design
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.4 – 空气质量监测系统设计
- en: For better understanding we have developed the schematics diagram shown in *Figure
    4**.4* as well *Table 4.2* for easy understanding. The pin configuration will
    be discussed in detail in proceeding paragraph.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解，我们开发了如 *图 4**.4* 所示的原理图以及 *表 4.2* 以便于理解。引脚配置将在下一段详细讨论。
- en: '| **We Mos** **D1 mini** | **MQ-135** | **DHT22** |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| **WeMos** **D1 mini** | **MQ-135** | **DHT22** |'
- en: '| 5V | VCC | VCC |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| 5V | VCC | VCC |'
- en: '| GND | GND | GND |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| GND | GND | GND |'
- en: '| A0 | A0 | - |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| A0 | A0 | - |'
- en: '| D1 | - | Data |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| D1 | - | 数据 |'
- en: Table 4.2 – Pin configuration table for sensors
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 表 4.2 – 传感器引脚配置表
- en: According to the design (*Figure 4**.4* and *Table 4.2*), we have a common 5V
    output and GND from the development board to both sensors. The MQ-135 sensor is
    an analog sensor, so we connected its AO pin to the AO pin of the WeMos development
    board, while DHT11/DHT22 are digital sensors, and their Pin 2 is connected to
    the D1 pin of the development board.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 根据设计（*图 4**.4* 和 *表 4.2*），我们从开发板到两个传感器都有共同的 5V 输出和 GND。MQ-135 传感器是一个模拟传感器，因此我们将它的
    AO 引脚连接到 WeMos 开发板的 AO 引脚，而 DHT11/DHT22 是数字传感器，它们的 2 号引脚连接到开发板的 D1 引脚。
- en: PCB design and the assembly of hardware components
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PCB 设计和硬件组件的组装
- en: 'In the preceding subsection, we looked at a design that is ideal for creating
    a prototype using a breadboard or Veroboard, but what if we want to deploy that
    solution in the field? **Fritzing** is a great tool that provides the option to
    design the PCB, but when you develop the design, it automatically creates the
    PCB design in the backend, which is accessible via the **PCB Design** tab. Automatic
    PCB design is just a basic footprint and not suitable for direct production, so
    it’s mandatory to review and rearrange the design according to professional practices.
    The following diagram demonstrates the final PCB design of the project:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的子节中，我们查看了一个非常适合使用面包板或 Veroboard 制作原型设计的方案，但如果我们想在现场部署该解决方案怎么办？**Fritzing**
    是一个很好的工具，它提供了设计 PCB 的选项，但在你开发设计时，它会在后台自动创建 PCB 设计，这可以通过 **PCB 设计** 选项卡访问。自动 PCB
    设计只是一个基本的封装，不适合直接生产，因此必须根据专业实践进行审查和重新排列。以下图表展示了项目的最终 PCB 设计：
- en: '![Figure 4.5 – An air quality-monitoring system PCB design](img/B19752_04_05.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.5 – 空气质量监测系统 PCB 设计](img/B19752_04_05.jpg)'
- en: Figure 4.5 – An air quality-monitoring system PCB design
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.5 – 空气质量监测系统 PCB 设计
- en: It’s easy to develop the PCB; just make sure that the connection line doesn’t
    intersect with other connection lines. There are many different tools available
    for PCB design, such as EasyEDA, CircuitMaker, and Altium, but it is thanks to
    Fritzing that I could create that design so easily.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 开发 PCB 很容易；只需确保连接线不要与其他连接线交叉。有许多不同的 PCB 设计工具可用，如 EasyEDA、CircuitMaker 和 Altium，但多亏了
    Fritzing，我才能如此轻松地创建该设计。
- en: 'After the PCB design, you have two options. First, you can develop the PCB
    by yourself using a DIY method, which is good for learning purposes but not suitable
    for a large-scale product. The second method is to choose a professional organization
    that manufactures the PCB professionally. Many organizations in China provide
    PCB manufacturing and fabrication services, such as **Seeed Studio**, **JLCPCB**,
    and **PCBWay**. I have tried PCBWay and was impressed with their manufacturing
    and shipment delivery time. I have uploaded the PCB design to the PCBWay project
    repository; from there, you can select and order it easily: [https://www.pcbway.com/project/shareproject/Low_cost_Outdoor_Air_Quality_Monitoring_System_0157f1af.html](https://www.pcbway.com/project/shareproject/Low_cost_Outdoor_Air_Quality_Monitoring_System_0157f1af.html).'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: PCB 设计完成后，你有两个选择。首先，你可以使用 DIY 方法自行开发 PCB，这对于学习很有帮助，但不适合大规模产品。第二种方法是选择一个专业机构来专业制造
    PCB。中国有许多组织提供 PCB 制造和加工服务，例如 **Seeed Studio**、**JLCPCB** 和 **PCBWay**。我尝试过 PCBWay，并对他们的制造和交货时间印象深刻。我已经将
    PCB 设计上传到 PCBWay 项目仓库；从那里，你可以轻松选择和订购：[https://www.pcbway.com/project/shareproject/Low_cost_Outdoor_Air_Quality_Monitoring_System_0157f1af.html](https://www.pcbway.com/project/shareproject/Low_cost_Outdoor_Air_Quality_Monitoring_System_0157f1af.html)。
- en: After getting the PCB board, it’s time to solder the female headers for the
    development boards and sensors. Never solder the development board and sensors
    directly on the PCB, as if anything stops working, then it’s easy to detach and
    replace. So finally, here we have a product ready where the sensors and development
    board are soldered on the PCB for final deployment.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在获得 PCB 板后，是时候焊接开发板和传感器的雌性引脚了。永远不要直接在 PCB 上焊接开发板和传感器，因为如果任何东西停止工作，那么很容易拆卸和更换。所以最终，我们有一个产品准备好了，其中传感器和开发板已经焊接在
    PCB 上，以便最终部署。
- en: '![Figure 4.6 – An air-quality monitoring system on the PCB](img/B19752_04_06.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.6 – PCB 上的空气质量监测系统](img/B19752_04_06.jpg)'
- en: Figure 4.6 – An air-quality monitoring system on the PCB
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.6 – PCB 上的空气质量监测系统
- en: After the female headers are soldered onto the PCB, WeMos and the other sensors
    are plugged into the headers, as shown in the preceding diagram. In this section
    and the previous section, we explored what types of sensors and development boards
    will be used in our project, and the latter part of this section discussed design,
    which demonstrates the wiring system for connectivity between sensors and the
    WeMos D1 Mini. Finally, we explored PCB design and assembled all the components
    of the PCB. Next, we need to set up the Thing, code, and dashboard in the Arduino
    IoT Cloud to get ready for the final product.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在将雌性引脚焊接到 PCB 上后，WeMos 和其他传感器被插入到引脚中，如前图所示。在本节和前一节中，我们探讨了项目中将使用哪些类型的传感器和开发板，本节的后半部分讨论了设计，展示了传感器和
    WeMos D1 Mini 之间的连接线路系统。最后，我们探讨了 PCB 设计并组装了 PCB 的所有组件。接下来，我们需要在 Arduino IoT Cloud
    中设置 Thing、代码和仪表盘，为最终产品做好准备。
- en: Setting up the Thing, network credentials, cloud variables, and code
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 Thing、网络凭证、云变量和代码
- en: 'After setting up the hardware, it’s time to set up the Thing in the Arduino
    IoT Cloud. For this project, we need three cloud variables to fetch the monitoring
    parameters from the device, and the Wi-Fi network settings will be different as
    compared to Arduino development boards, due to the ESP series-based development
    board. The following figure provides an overview of the Thing, including **Cloud
    Variables**, **Associating a device**, and **Network** settings with numbers,
    which will be discussed next step by step:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置好硬件后，是时候在 Arduino IoT Cloud 中设置 Thing 了。对于这个项目，我们需要三个云变量来从设备获取监测参数，由于基于 ESP
    系列的开发板，Wi-Fi 网络设置将与 Arduino 开发板不同。以下图提供了 Thing 的概述，包括 **云变量**、**关联设备**和**网络**设置，这些将在下一步逐一讨论：
- en: '![Figure 4.7 – The air quality-monitoring system Thing setup](img/B19752_04_07.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.7 – 空气质量监测系统 Thing 设置](img/B19752_04_07.jpg)'
- en: Figure 4.7 – The air quality-monitoring system Thing setup
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.7 – 空气质量监测系统 Thing 设置
- en: 'Set up a new Thing with the name `Sense the Environment`. Follow the next steps
    to create variables, the associated device, the network configuration, and finally,
    the code:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 使用名称 `Sense the Environment` 创建一个新的 Thing。按照以下步骤创建变量、相关设备、网络配置，最后是代码：
- en: Firstly, we need to set up three cloud variables regarding air quality, humidity,
    and temperature. The complete details regarding cloud variables are available
    in the next subsection.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要设置关于空气质量、湿度和温度的三个云变量。有关云变量的完整详细信息可在下一子节中找到。
- en: After that, we need to associate the device with the Thing. In the current project,
    we will use the WeMos D1 Mini so the wizard will be different from the Arduino
    boards. The complete details are available in the *Associating a* *device* subsection.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，我们需要将设备与实体关联起来。在当前项目中，我们将使用 WeMos D1 Mini，因此向导将与 Arduino 板不同。完整的详细信息可在 *关联设备*
    子节中找到。
- en: Finally, we need to set up the network configuration for the device, but this
    time, we need to provide a security key for ESP series boards to make the connection
    secure. The Arduino-compatible boards are configured by the Arduino IoT Cloud
    automatically during the device setup wizard.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要设置设备的网络配置，但这次，我们需要为 ESP 系列板提供一个安全密钥，以确保连接的安全性。Arduino 兼容的板在设备设置向导期间由
    Arduino IoT Cloud 自动配置。
- en: After the setup of cloud variables, device, and network settings, we will go
    through the code.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设置云变量、设备和网络设置之后，我们将审查代码。
- en: Here, we have given an overview of the Thing and we also discussed the required
    steps that will be carried out to complete the Thing setup.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们概述了实体，并讨论了完成实体设置所需执行的要求步骤。
- en: Cloud variables
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 云变量
- en: The following table explains all the properties of the variable that we need
    to use when we create the cloud variable. An integer is a very famous data type,
    but we will use two new variable types for humidity (`CloudRelativeHumidity`)
    and temperature (`CloudTemperatureSensor`), which measure data in percentage and
    Celsius, respectively. Next, make sure to declare the variables exactly as stated
    in the given table, including case-sensitive names and variable types. If the
    example code does not match your naming, you will need to modify it accordingly.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 下表解释了我们在创建云变量时需要使用的变量的所有属性。整数是一个非常著名的数据类型，但我们将使用两种新的变量类型来测量湿度（`CloudRelativeHumidity`）和温度（`CloudTemperatureSensor`），分别以百分比和摄氏度为单位。接下来，请确保变量的声明与给定表格中的声明完全一致，包括大小写敏感的名称和变量类型。如果示例代码与您的命名不匹配，您需要相应地修改它。
- en: '| **S#** | **Variable name** | **Variable type** | **Declaration** | **Permission**
    | **Update policy** |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| **S#** | **变量名** | **变量类型** | **声明** | **权限** | **更新策略** |'
- en: '| 1 | `AirQuality` | `int` | `airQuality` | Read-only | **On change** |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| 1 | `AirQuality` | `int` | `airQuality` | 只读 | **变更时** |'
- en: '| 2 | `Humidity` | `CloudRelative Humidity` | `humidity` | Read-only | **On
    change** |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| 2 | `Humidity` | `CloudRelative Humidity` | `humidity` | 只读 | **变更时** |'
- en: '| 3 | `Temperature` | `CloudTemperature Sensor` | `temperature` | Read-only
    | **On change** |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| 3 | `Temperature` | `CloudTemperature Sensor` | `temperature` | 只读 | **变更时**
    |'
- en: Table 4.3 – Cloud variables details
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 表 4.3 – 云变量详细信息
- en: Here, we made the **permission** read-only; although we have a read/write option,
    in our project, we only want to receive data from the device instead of a dashboard
    modification. That’s why read-only mode is used to prevent issues in data consistency.
    **Update policy** is set to **On change**, as the device will send the data after
    five minutes, and this option is more appropriate compared to periodic updates.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将 **权限** 设置为只读；尽管我们有读写选项，但在我们的项目中，我们只想从设备接收数据，而不是修改仪表板。这就是为什么使用只读模式来防止数据一致性问题的原因。**更新策略**
    设置为 **变更时**，因为设备将在五分钟后发送数据，这个选项比定期更新更合适。
- en: Associating a device
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关联设备
- en: After creating the variables, it’s time to add a device and associate it with
    the Thing. Before adding the device, connect the development board to the computer
    and open the **Arduino Create Agent** application. The following figure shows
    the different types of third-party boards that are supported by the Arduino IOT
    Cloud, and in that step, we will select the **ESP8266** series board.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建变量后，是时候添加设备并将其与实体关联起来。在添加设备之前，将开发板连接到计算机并打开 **Arduino Create Agent** 应用程序。以下图显示了
    Arduino IOT Cloud 支持的不同类型的第三方板，在那个步骤中，我们将选择 **ESP8266** 系列板。
- en: '![Figure 4.8 – The device selection wizard](img/B19752_04_08.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.8 – 设备选择向导](img/B19752_04_08.jpg)'
- en: Figure 4.8 – The device selection wizard
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.8 – 设备选择向导
- en: 'Please follow these steps to add the device to the Arduino IoT Cloud:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 请按照以下步骤将设备添加到 Arduino IoT Cloud：
- en: Click on the **Select Device** button under the **Associating a device** section
    on the Thing page.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“关联设备”部分下点击**选择设备**按钮。
- en: A popup will appear, where you can see all the devices that are already available.
    If you have already added your WeMos D1 Mini, select it. Otherwise, click on **SET
    UP** **NEW DEVICE**.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将会出现一个弹出窗口，其中您可以查看所有已可用的设备。如果您已经添加了您的WeMos D1 Mini，请选择它。否则，点击**设置****新设备**。
- en: Next, click on the **Third party** **device** option.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，点击**第三方****设备**选项。
- en: Select **ESP8266** and **LOLIN(WEMOS) D1 R2 mini** from the dropdown, and click
    on the **CONTINUE** button.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从下拉菜单中选择**ESP8266**和**LOLIN(WEMOS) D1 R2 mini**，然后点击**继续**按钮。
- en: Provide the device name and click on the **Next** button.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供设备名称并点击**下一步**按钮。
- en: In the final wizard, the device ID and secret key will be displayed. Copy the
    secret key to a safe place, as it will be used during the network configuration.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在最后的向导中，将显示设备ID和密钥。将密钥复制到安全的地方，因为它将在网络配置过程中使用。
- en: After setting up the device and associating it with the Thing, it’s time to
    configure the device network settings. The following sections will cover all the
    steps to configure your device for a Wi-Fi network.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置好设备并将其与“物”关联之后，现在是时候配置设备网络设置了。以下部分将涵盖配置设备以连接Wi-Fi网络的全部步骤。
- en: Network
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络
- en: 'After associating the device with the Thing, it is time to configure the Wi-Fi
    settings for device communication. Fill in the form with **Wi-Fi Name** and **Password**:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在将设备与“物”关联后，现在是时候配置设备通信的Wi-Fi设置了。填写带有**Wi-Fi名称**和**密码**的表格：
- en: '![Figure 4.9 – The network configuration for the Thing](img/B19752_04_09.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![图4.9 – “物”的网络配置](img/B19752_04_09.jpg)'
- en: Figure 4.9 – The network configuration for the Thing
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.9 – “物”的网络配置
- en: In *Figure 4**.9*, you will find a new field for **Secret Key**. Paste the secret
    key that we received from the system during the device association process, which
    is explained in *step 6* in the preceding subsection.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图4*.9中，您将找到一个新的**密钥**字段。粘贴我们在设备关联过程中从系统中收到的密钥，该过程在上一个子节中解释为*步骤6*。
- en: Now, we are done with the device association to the Thing as well as with network
    settings. The next step is to understand and upload the code. The following section
    will guide you through the code.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经完成了设备与“物”的关联以及网络设置。下一步是理解和上传代码。以下部分将指导您通过代码。
- en: Coding
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编码
- en: 'The chapter’s code is available at the book’s official GitHub repository, or
    you can directly download the code by following this link: [https://github.com/PacktPublishing/Arduino-IoT-Cloud-for-Developers/tree/main/Chapter%234%20Project%231%20Sensing%20and%20Monitoring%20the%20Air%20for%20Clean%20Environment/Sense_the_Environment_feb24a](https://github.com/PacktPublishing/Arduino-IoT-Cloud-for-Developers/tree/main/Chapter%234%20Project%231%20Sensing%20and%20Monitoring%20the%20Air%20for%20Clean%20Environment/Sense_the_Environment_feb24a)'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 该章节的代码可在本书的官方GitHub仓库中找到，或者您可以通过以下链接直接下载代码：[https://github.com/PacktPublishing/Arduino-IoT-Cloud-for-Developers/tree/main/Chapter%234%20Project%231%20Sensing%20and%20Monitoring%20the%20Air%20for%20Clean%20Environment/Sense_the_Environment_feb24a](https://github.com/PacktPublishing/Arduino-IoT-Cloud-for-Developers/tree/main/Chapter%234%20Project%231%20Sensing%20and%20Monitoring%20the%20Air%20for%20Clean%20Environment/Sense_the_Environment_feb24a)
- en: You can download the code and put it into your Thing by navigating to the `delay`
    method, as it will block the `ArduinoCloud.update()` method and then call the
    `STHAM` method every five minutes. The following code is demonstrating how to
    fetch Temperature and Humidity values from `dht` object, and for `airQuality`
    we are simply using `analogRead()` method.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过导航到`delay`方法来下载代码并将其放入您的“物”中，因为它将阻塞`ArduinoCloud.update()`方法，然后每五分钟调用一次`STHAM`方法。以下代码演示了如何从`dht`对象中获取温度和湿度值，对于`airQuality`，我们简单地使用`analogRead()`方法。
- en: '[PRE0]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The preceding code snippet was taken from the `STHAM` method; here, we just
    modified the code to show you how we send values to the Arduino IoT Cloud after
    taking values from the sensors.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码片段是从`STHAM`方法中提取的；在这里，我们只是修改了代码，以向您展示我们如何在从传感器获取值后向Arduino IoT Cloud发送值。
- en: In a previous section, we created the cloud variables. Just recall the cloud
    variable declaration and assign the sensor readings to those variables. This cloud
    variable declaration is available in the `thingProperties.h` file. So, when you
    assign the values to these variables, the `ArduinoCloud.update()` method in the
    loop will automatically send data to the cloud.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的部分，我们创建了云变量。只需回忆一下云变量声明，并将传感器读数分配给这些变量。这个云变量声明可以在`thingProperties.h`文件中找到。因此，当你将这些值分配给这些变量时，循环中的`ArduinoCloud.update()`方法将自动将数据发送到云。
- en: Upload the code to the device and verify the connectivity and readings. If you
    want to change the reading time, then just modify the `interval` variable value.
    Make sure you provide the time in milliseconds, where 1 second equals 1,000 milliseconds.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 将代码上传到设备并验证连接性和读数。如果您想更改读数时间，只需修改`interval`变量的值。请确保您提供的时间以毫秒为单位，其中1秒等于1,000毫秒。
- en: Important note
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: If you used different naming in the variable declaration, then update the code
    according to your naming scheme. However, it’s better that you first follow all
    the steps according to the book and later change the cloud variable names and
    modify your code, in that order.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在变量声明中使用了不同的命名，那么根据您的命名方案更新代码。然而，最好您首先按照书中的所有步骤进行，然后再更改云变量名称并修改您的代码，按照这个顺序。
- en: Never try to use `delay` method, which will create a block for the `ArduinoCloud.update()`
    method. Always use milliseconds to calculate the waiting time. Review the `loop()`
    method to understand how we call the method after 5 minutes.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 永远不要尝试使用`delay`方法，这将为`ArduinoCloud.update()`方法创建一个阻塞。始终使用毫秒来计算等待时间。回顾`loop()`方法，了解我们如何在5分钟后调用该方法。
- en: 'The Arduino IoT Cloud only updates the value on the dashboard whenever a variable
    value is changed. For example, if the temperature is 30 and is still the same
    after 5 minutes, then the Arduino IoT Cloud will not record the value, so don’t
    get confused if values don’t change on a graph. This is another benefit of the
    Arduino IoT Cloud: you will not get duplicated data when you export the content.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino IoT Cloud仅在变量值更改时更新仪表板上的值。例如，如果温度是30度，并且5分钟后仍然相同，那么Arduino IoT Cloud将不会记录该值，所以如果图表上的值没有变化，请不要感到困惑。这是Arduino
    IoT Cloud的另一个好处：当您导出内容时，您将不会得到重复的数据。
- en: We have successfully set up the Thing, which includes cloud variables, device
    association, network configuration, and code, and uploaded it to the development
    board. Now, it’s time to explore the dashboard and sensor values visualization
    in the following section.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经成功设置了设备，包括云变量、设备关联、网络配置和代码，并将其上传到开发板。现在，是时候在下一节探索仪表板和传感器值可视化。
- en: Setting up a dashboard for web and mobile
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置网页和移动设备的仪表板
- en: 'After uploading the code to the device, it’s time to set up a dashboard for
    web and mobile to visualize the data with different widgets. Complete details
    about widgets and their usage are available in [*Chapter 3*](B19752_03.xhtml#_idTextAnchor056).
    If you have directly skipped to this chapter, I recommend going back to [*Chapter
    3*](B19752_03.xhtml#_idTextAnchor056) to get a detailed overview of widgets and
    their usage as this will help you to understand how widgets work and their usage
    for different use cases. The following figure demonstrates the visualization of
    readings with different widgets:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在将代码上传到设备后，是时候为网页和移动设备设置仪表板，以便使用不同的小部件可视化数据。有关小部件及其使用的详细信息，请参阅[*第3章*](B19752_03.xhtml#_idTextAnchor056)。如果您直接跳到了这一章，我建议您回到[*第3章*](B19752_03.xhtml#_idTextAnchor056)，以获取小部件及其使用的详细概述，这将有助于您了解小部件的工作原理及其在不同用例中的使用。以下图示展示了使用不同小部件的读数可视化：
- en: '![Figure 4.10 – The Thing dashboard](img/B19752_04_10.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![图4.10 – 设备仪表板](img/B19752_04_10.jpg)'
- en: Figure 4.10 – The Thing dashboard
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.10 – 设备仪表板
- en: We have three different readings, **Temperature**, **Humidity**, and **Air Quality**.
    For each reading, we use different widget controls to demonstrate how they all
    work, but for historical data, graphs are the best widgets.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有三个不同的读数，**温度**、**湿度**和**空气质量**。对于每个读数，我们使用不同的小部件控件来展示它们如何工作，但对于历史数据，图表是最好的小部件。
- en: The **Temperature** reading is visualized by **Gauge**, the **Humidity** reading
    is connected to the **Percentage** widget, and the **Air Quality** reading is
    connected to the **Value** widget. These widgets are only capable of displaying
    current readings of sensors. However, we also want to monitor the historical data,
    and graphs are the best widgets to display live as well as older data. Here, we
    have used three graphs, and each one is connected to a specific cloud variable.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '**温度**读数通过**仪表**进行可视化，**湿度**读数连接到**百分比**小部件，而**空气质量**读数连接到**值**小部件。这些小部件只能显示传感器的当前读数。然而，我们还想监控历史数据，图表是显示实时以及更早数据的最佳小部件。在这里，我们使用了三个图表，每个图表都连接到一个特定的云变量。'
- en: What’s next?
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接下来是什么？
- en: We still have a lot of options available to explore, but now it’s your turn
    to use different sensors and development boards to do some more experiments and
    learn from them. In this chapter, we have only used two sensors, which only offer
    three parameters, but there are a lot of sensors on the market that provide a
    wide variety of functionalities, such as air pressure and measurements for different
    gases.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍然有很多选项可供探索，但现在轮到你使用不同的传感器和开发板进行更多实验并从中学习。在本章中，我们只使用了两个传感器，它们只提供三个参数，但市场上有很多传感器提供广泛的性能，例如空气压力和不同气体的测量。
- en: 'Try out the following sensors to enhance your practical knowledge and compare
    them with other sensors in terms of features, range, and cost:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试以下传感器以增强你的实践知识，并从功能、范围和成本方面与其他传感器进行比较：
- en: The **BMP280** (pressure and temperature) sensor
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**BMP280**（压力和温度）传感器'
- en: The **MH-Z19C/D/E series** sensors for carbon dioxide monitoring
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MH-Z19C/D/E系列**二氧化碳监测传感器'
- en: The **MQ series** sensors, which are designed to sense different specific gases,
    including MQ-2, MQ-3, MQ-4, MQ-5, MQ-7, MQ-8, and MQ-9
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MQ系列**传感器，设计用于检测不同的特定气体，包括MQ-2、MQ-3、MQ-4、MQ-5、MQ-7、MQ-8和MQ-9'
- en: '**Seeed Studio SCD30** (temperature, humidity, and CO2)'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Seeed Studio SCD30**（温度、湿度和CO2）'
- en: '**Gravity**: **Analog Electrochemical Carbon Dioxide Sensor** (0–10,000 PPM)'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Gravity**：**模拟电化学二氧化碳传感器**（0–10,000 PPM）'
- en: Summary
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we explored how to develop a low-cost air quality monitoring
    system using DHT11, MQ-135, and the WeMos D1 Mini development board. We set up
    the Thing, which involved creating cloud variables, associating the device, configuring
    the network, and coding the development board. Later, we created a dashboard to
    visualize the Thing’s sensor readings with different types of widgets, displaying
    the current readings as well as historical data with the help of graphs. Through
    this project, you will get the confidence to set up the Thing practically and
    deploy it in the field using a PCB. You have learned about new types of cloud
    variables for sensor readings and storage, as well as dealing with different types
    of dashboard widgets.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了如何使用DHT11、MQ-135和WeMos D1 Mini开发板开发一个低成本空气质量监控系统。我们设置了“物”，这包括创建云变量、关联设备、配置网络和编写开发板代码。后来，我们创建了一个仪表板，使用不同类型的小部件可视化“物”的传感器读数，借助图表显示当前读数以及历史数据。通过这个项目，你将获得在实际中设置“物”并使用PCB在野外部署的信心。你已经了解了用于传感器读数和存储的新类型云变量，以及处理不同类型的仪表板小部件。
- en: In the next chapter, we will study GSM technology for IoT. We will learn about
    different types of global IoT SIM cards and their usage. This project will also
    demonstrate a Smart Assets tracing example, where we will track the asset with
    a GPS module and send the data to the Arduino IoT Cloud via global IoT SIM cards.
    In the end, you will also learn about new widgets in the Arduino IoT Cloud to
    visualize the location of your assets on the basis of GPS coordinates.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将研究物联网的GSM技术。我们将了解不同类型的全球物联网SIM卡及其使用方法。这个项目还将演示一个智能资产追踪示例，我们将使用GPS模块跟踪资产并将数据通过全球物联网SIM卡发送到Arduino
    IoT云。最后，你还将了解Arduino IoT云中的新小部件，用于基于GPS坐标可视化你的资产位置。
