["```cpp\n#pragma once\n#include \"CoreMinimal.h\"\n#include \"Components/ActorComponent.h\"\n#include \"HealthComponent.generated.h\"\nDECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(\n    FComponentDeadSignature, AController*, causer);\nDECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(\n    FComponentDamagedSignature, AController*, causer,\n    float, damage, float, newHealth);\nUCLASS( ClassGroup=(Custom), meta=(BlueprintSpawnableComponent) )\nclass RTS_AI_API UHealthComponent : public UActorComponent\n{\n    GENERATED_BODY()\npublic:\n    UHealthComponent();\n    UPROPERTY(BlueprintAssignable)\n    FComponentDeadSignature onComponentDead;\n    UPROPERTY(BlueprintAssignable)\n    FComponentDamagedSignature onComponentDamaged;\nprotected:\n    UPROPERTY(BlueprintReadOnly, VisibleAnywhere)\n    float _currentHealth;\n    UPROPERTY(BlueprintReadWrite, EditAnywhere)\n    float _maxHealth;\n    virtual void BeginPlay() override;\n    UFUNCTION()\n    void DamageTaken(AActor* damagedActor, float damage,\n        const UDamageType* damageType, AController*\n        instigator, AActor* causer);\n};\n```", "```cpp\nUHealthComponent::UHealthComponent()\n{\n    _maxHealth = 100.f;\n}\nvoid UHealthComponent::BeginPlay()\n{\nSuper::BeginPlay();\n    GetOwner()->OnTakeAnyDamage.AddDynamic(this,\n        &UHealthComponent::DamageTaken);\n    _currentHealth = _maxHealth;\n}\nvoid UHealthComponent::DamageTaken(AActor* damagedActor,\n    float damage, const UDamageType* damageType,\n    AController* instigator, AActor* causer)\n{\n    _currentHealth=FMath::Max(_currentHealth–damage, 0.f);\n    onComponentDamaged.Broadcast(instigator,damage, _currentHealth);\n    if(_currentHealth <= 0.f)\n    {\n        onComponentDead.Broadcast(instigator);\n    }\n}\n```", "```cpp\nEntity aiPaddle;\nEntity ball;\nVector2D direction;\n// Main game loop\nwhile (looping)\n{\n    Vector2D ballPos = ball.GetPosition();\n    ballPos += direction;\n    ball.SetPosition(ballPos);\n    if (ballPos.y > aiPaddle.GetPosition().y)\n    {\n        aiPaddle.MoveUp();\n    }\n    else\n    {\n        aiPaddle.MoveDown();\n    }\n    // Input, collisions, and rendering...\n}\n```", "```cpp\nEntity entities[];\n//Main game loop\nwhile(looping)\n{\n    for(Entity e : entities)\n    {\n        e.Update();\n    }\n//Collision and rendering…\n}\n```"]