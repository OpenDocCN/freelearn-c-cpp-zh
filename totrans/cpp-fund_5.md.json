["```cpp\n#include <iostream>\n#include <vector>\n// Import the vector library\nint main()\n{\n  std::vector<int> myvector;\n  myvector.push_back(100);\n  // Both front and back of vector contains a value 100\n  myvector.push_back(10);\n  // Now, the back of the vector holds 10 as a value, the front holds 100\n  myvector.front() -= myvector.back();\n  // We subtracted front value with back\nstd::cout << \"Front of the vector: \" << myvector.front() << std::endl;\nstd::cout << \"Back of the vector: \" << myvector.back() << std::endl;\n}\nOutput:\nFront of the vector: 90\nBack of the vector: 10\n```", "```cpp\n#include <vector>\nint main()\n{\n    // initialize the vector with 3 numbers\n    std::vector<int> numbers = {1, 2, 3};\n}\n```", "```cpp\n#include <iostream>\n#include <set>\nint main() {\n    std::set<int> numbers;\n    numbers.insert(10);\n    if (numbers.find(10) != numbers.end()) {\n        std::cout << \"10 is in numbers\" << std::endl;\n    }\n}\n```", "```cpp\n#include <iostream>\n#include <set>\n#include <functional>\nint main() {\n    std::set<int> ascending = {5,3,4,2,1};\n    std::cout << \"Ascending numbers:\";\n    for(int number : ascending) {\n        std::cout << \" \" << number;\n    }\n    std::cout << std::endl;\n\n    std::set<int, std::greater<int>> descending = {5,3,4,2,1};\n    std::cout << \"Descending numbers:\";\n    for(int number : descending) {\n        std::cout << \" \" << number;\n    }\n    std::cout << std::endl;\n}\n```", "```cpp\n#include <iostream>\n#include <string>\n#include <map>\nint main()\n{\n    std::map<int, std::string> map;\n    map.insert(std::make_pair(1, \"some text\"));\n    auto position = map.find(1);\n    if (position != map.end() ) {\n        std::cout << \"Found! The key is \" << position->first << \", the value is \" << position->second << std::endl;\n    }\n}\n```", "```cpp\n#include <iostream>\n#include <map>\nint main()\n{\n    std::map<int, int> map;\n    std::cout << \"We ask for a key which does not exists: it is default inserted: \" << map[10] << std::endl;\n    map.at(10) += 100;\n    std::cout << \"Now the value is present: \" << map.find(10)->second << std::endl;\n}\n```", "```cpp\n    #include <string>\n    #include <map>\n    #include <string>\n    ```", "```cpp\n    balances.insert(std::make_pair(\"Alice\",50));\n    ```", "```cpp\n    auto alicePosition = balances.find(\"Alice\");\n    std::cout << \"Alice balance is: \" << alicePosition->second << std::endl;\n    ```", "```cpp\n    struct RegistrationForm {\n        std::string userName;\n    };\n    ```", "```cpp\n    void processRegistration(RegistrationForm form) {\n        std::cout << \"Processing form for user: \" << form.userName << std::endl;\n    }\n    ```", "```cpp\n    void storeRegistrationForm(std::stack<RegistrationForm>& stack, RegistrationForm form) {\n    }\n    void endOfDayRegistrationProcessing(std::stack<RegistrationForm>& stack) {\n    }\n    ```", "```cpp\n    #include <iostream>\n    #include <string>\n    ```", "```cpp\n    int main()\n    {\n      // Construct a C-string being explicit about the null terminator\n      const char charString[8] = {'C', '+', '+', ' ', '1', '0', '1', '\\0'};\n      // Construct a C-string from a literal string. The compiler automatically adds the \\0 at the end\n      const char * literalString = \"C++ Fundamentals\";\n      // Strings can be constructed from literal strings.\n      std::string strString = literalString;\n    ```", "```cpp\n      const char *charString2 = strString.c_str();\n    ```", "```cpp\n      std::cout << charString << std::endl;\n      std::cout << charString2 << std::endl;\n    }\n    ```", "```cpp\n    Output:\n    C++ 101\n    C++ Fundamentals\n    ```", "```cpp\nstd::string chapter = \"We are learning about strings\";\nstd::cout << \"Length: \" << chapter.length() << \", the second character is \" << chapter[1] << std::endl;\n```", "```cpp\n#include <iostream>\n#include <string>\nint main()\n{\n  std::string str = \"C++ Fundamentals.\";\n  std::cout << str << std::endl;\n  str.erase(5,10);\n  std::cout << \"Erased: \" << str << std::endl;\n  str.clear();\n  std::cout << \"Cleared: \" << str << std::endl;\n}\nOutput:\nC++ Fundamentals.\nErased: C++ Fs.\nCleared: \n```", "```cpp\n#include <iostream>\n#include <string>\nusing namespace std;\nint main()\n{\n  std::string str = \"55\";\n  std::int strInt = std::stoi(str);\n  double strDou = std::stod(str);\n  std::string valToString = std::to_string(strInt);\n\n  std::cout << str << std::endl;\n  std::cout << strInt << std::endl;\n  std::cout << strDou << std::endl;\n  std::cout << valToString << std::endl;\n}\nOutput:\n55\n55\n55\n55\n```", "```cpp\nstd::pair<std::string, int> nameAndAge = std::make_pair(\"John\", 32);\nstd::cout << \"Name: \" << nameAndAge.first << \", age: \" << nameAndAge.second << std::endl;\n```", "```cpp\nstd::cout << \"Name: \" << std::get<0>(nameAndAge) << \", age: \" << std::get<1>(nameAndAge) << std::endl;\n```", "```cpp\n#include <iostream>\n#include <tuple>\n#include <string>\nint main()\n{\n  std::tuple<std::string, int, float> james = std::make_tuple(\"James\", 7, 1.90f);\n  std::cout << \"Name: \" << std::get<0>(james) << \". Agent number: \" << std::get<1>(james) << \". Height: \" << std::get<2>(james) << std::endl;\n}\nOutput:\nName: James. Agent number: 7\\. Height: 1.9\n```", "```cpp\nstd::optional<User> tryGetUserByEmail(Email email);\n```", "```cpp\n#include <iostream>\n#include <optional>\nint main()\n{\n  // We might not know the hour. But if we know it, it's an integer\n  std::optional<int> currentHour;\n  if (not currentHour.has_value()) {\n    std::cout << \"We don't know the time\" << std::endl;   \n  }\n  currentHour = 18;\n  if (currentHour) {\n    std::cout << \"Current hour is: \" << currentHour.value() << std::endl;\n  }\n}\nOutput:\nWe don't know the time\nCurrent hour is: 18\n```", "```cpp\nstd::optional<std::string> maybeUser = std::nullopt;\nif (not maybeUser) {\n  std::cout << \"The user is not present\" << std::endl;\n}\nmaybeUser = std::make_optional<std::string>(\"email@example.com\");\nif (maybeUser) {\n  std::cout << \"The user is: \" << *maybeUser  << std::endl;\n}\n```", "```cpp\n#include <iostream>\n#include <optional>\nint main()\n{\n  std::optional<int> x;\n  std::cout << x.value_or(10) << std::endl;\n  //Will return value of x as 10\n  x = 15;\n  std::cout << x.value_or(10)<< std::endl;\n  //Will return value of x as 15\n}\nOutput:\n10\n15\n```", "```cpp\nUser::User(Email email, std::optional<PhoneNumber> phoneNumber = std::nullopt, std::optional<Address> address = std::nullopt){\n...\n}\n```", "```cpp\n    #include <iostream>\n    #include <variant>\n    ```", "```cpp\n    int main()\n    {\n      std::variant<std::string, int> variant = 42;\n    ```", "```cpp\n      std::cout << get<1>(variant) << std::endl;\n      std::cout << get<int>(variant) << std::endl;\n    ```", "```cpp\nOutput:\n42\n42\n```", "```cpp\n    #include <iostream>\n    #include <string>\n    #include <variant>\n    ```", "```cpp\n    struct Visitor {\n        void operator()(const std::string& value){\n            std::cout << \"a string: \" << value << std::endl;\n        }\n        void operator()(const int& value){\n            std::cout << \"an int: \" << value << std::endl;\n        }\n    };\n    ```", "```cpp\n    int main()\n    {\n        std::variant<std::string, int> variant = 42;\n        Visitor visitor;\n        std::cout << \"The variant contains \";\n        std::visit(visitor, variant);\n        variant = std::string(\"Hello world\");\n        std::cout << \"The variant contains \";\n        std::visit(visitor, variant);\n    }\n    ```", "```cpp\nThe variant contains an int: 42\nThe variant contains a string: Hello world\n```", "```cpp\n    struct AtGate {\n        int gate;\n    };\n    struct Taxi {\n        int lane;\n        int numPassengers;\n    };\n    struct Flying {\n        float speed;\n    };\n    ```", "```cpp\n#include <iostream>\n#include <vector>\nint main()\n{\n    std::vector<int> numbers = {1, 2, 3};\n    for(std::vector<int>::iterator it = numbers.begin(); it != numbers.end(); ++it) {\n        std::cout << \"The number is: \" << *it << std::endl;    \n    }\n}\n```", "```cpp\nfor(int number: numbers) {\n    std::cout << \"The number is: \" << number << std::endl;    \n}\n```", "```cpp\n    #include <iostream>\n    #include <vector>\n    ```", "```cpp\n    int main()\n    {\n        std::vector<int> numbers = {1, 2, 3, 4, 5};\n        auto it = numbers.begin();\n    ```", "```cpp\n        std::cout << *it << std::endl; // dereference: points to 1\n        it++; // increment: now it points to 2\n        std::cout << *it << std::endl;\n        // random access: access the 2th element after the current one\n        std::cout << it[2] << std::endl;\n        --it; // decrement: now it points to 1 again\n        std::cout << *it << std::endl;\n        it += 4; // advance the iterator by 4 positions: now it points to 5\n        std::cout << *it << std::endl;\n        it++; // advance past the last element;\n        std::cout << \"'it' is after the past element: \" << (it == numbers.end()) << std::endl;\n    }\n    ```", "```cpp\n1\n2\n4\n1\n5\n'it' is after the past element: 1\n```", "```cpp\n    #include <iostream>\n    #include <vector>\n    ```", "```cpp\n    int main()\n    {\n        std::vector<int> numbers = {1, 2, 3, 4, 5};\n    ```", "```cpp\n        for(auto rit = numbers.rbegin(); rit != numbers.rend(); ++rit) {\n            std::cout << \"The number is: \" << *rit << std::endl;    \n        }\n    }\n    ```", "```cpp\nThe number is: 5\nThe number is: 4\nThe number is: 3\nThe number is: 2\nThe number is: 1\n```", "```cpp\n    #include <iostream>\n    #include <iterator>\n    ```", "```cpp\n    int main()\n    {\n        std::istream_iterator<int> it = std::istream_iterator<int>(std::cin);\n        std::istream_iterator<int> end;\n        for(; it != end; ++it) {\n            std::cout << \"The number is: \" << *it << std::endl;\n        }\n    }\n    ```", "```cpp\nThe number is: 10\n```", "```cpp\n#include <iostream>\n#include <vector>\n#include <list>\nint main()\n{\n    std::vector<int> vector = {1};\n    auto first_in_vec = vector.begin();\n    std::cout << \"Before vector insert: \" << *first_in_vec << std::endl;\n    vector.push_back(2);\n    // first_number is invalidated! We can no longer use it!\n    std::list<int> list = {1};\n    auto first_in_list = list.begin();\n    list.push_back(2);\n    // first_in_list is not invalidated, we can use it.\n    std::cout << \"After list insert: \" << *first_in_list << std::endl;\n}\nOutput:\nBefore vector insert: 1\nAfter list insert: 1\n```", "```cpp\n    #include <vector>\n    std::vector<int> balances = {10, 34, 64, 97, 56, 43, 50, 89, 32, 5};\n    ```", "```cpp\n    for (auto pos = numbers.begin(); pos != numbers.end(); ++pos)\n    {\n        // to be filled\n    }\n    ```", "```cpp\n    for (auto pos = numbers.begin(); pos != numbers.end(); ++pos)\n    {\n        std::cout << \"Balance: \" << *pos << std::endl;\n    }\n    ```", "```cpp\n[captured variables] (arguments) { body }\n```", "```cpp\n#include <iostream>\nint main()\n{\n    auto sum_numbers = [] (int a, int b) { return a + b; };\n    std::cout << sum_numbers(10, 20) << std::endl;\n}\nOutput:\n30\n```", "```cpp\n#include <iostream>\nint main()\n{\n    int addend = 1;\n    auto sum_numbers = [addend](int b) { return addend + b; };\n    addend = 2;\n    std::cout << sum_numbers(3) << std::endl;\n}\nOutput:\n4\n```", "```cpp\n#include <iostream>\nint main()\n{\n    int multiplier = 1;\n    auto multiply_numbers = [&multiplier](int b) { return multiplier * b; };\n    multiplier = 2;\n    std::cout << multiply_numbers(3) << std::endl;\n}\nOutput:\n6\n```", "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\nint main()\n{\n    std::vector<int> vector = {1, 2, 3, 4};\n    bool allLessThen10 = std::all_of(vector.begin(), vector.end(), [](int value) { return value < 10; });\n    std::cout << \"All are less than 10: \" << allLessThen10 << std::endl;\n    bool someAreEven = std::any_of(vector.begin(), vector.end(), [](int value) { return value % 2 == 0; });\n    std::cout << \"Some are even: \" << someAreEven << std::endl;\n    bool noneIsNegative = std::none_of(vector.begin(), vector.end(), [](int value) { return value < 0; });\n    std::cout << \"None is negative: \" << noneIsNegative << std::endl;\n\n    std::cout << \"Odd numbers: \" << std::count_if(vector.begin(), vector.end(), [](int value) { return value % 2 == 1; }) << std::endl;\n\n    auto position = std::find(vector.begin(), vector.end(), 6);\n    std::cout << \"6 was found: \" << (position != vector.end()) << std::endl;\n}\nOutput:\nAll are less than 10: 1\nSome are even: 1\nNone is negative: 1\nOdd numbers: 2\n6 was found: 0\n```", "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <iterator>\nint main()\n{\n    std::vector<std::string> vector = {\"Hello\", \"C++\", \"Morning\", \"Learning\"};\n    std::vector<std::string> longWords;\n\n    std::copy_if(vector.begin(), vector.end(), std::back_inserter(longWords), [](const std::string& s) { return s.length() > 3; });\n    std::cout << \"Number of longWords: \" << longWords.size() << std::endl;\n\n    std::vector<int> lengths;\n    std::transform(longWords.begin(), longWords.end(), std::back_inserter(lengths), [](const std::string& s) { return s.length(); });\n\n    std::cout << \"Lengths: \";\n    std::for_each(lengths.begin(), lengths.end(), [](int length) { std::cout << length << \" \"; });\n    std::cout << std::endl;\n\n    auto newLast = std::remove_if(lengths.begin(), lengths.end(), [](int length) { return length < 7; });\n    std::cout << \"No element removed yet: \" << lengths.size() << std::endl;\n\n    // erase all the elements between the two iterators\n    lengths.erase(newLast, lengths.end());\n    std::cout << \"Elements are removed now. Content: \";\n    std::for_each(lengths.begin(), lengths.end(), [](int length) { std::cout << length << \" \"; });\n    std::cout << std::endl;\n}\nOutput:\nNumber of longWords: 3\nLengths: 5 7 8 \nNo element removed yet: 3\nElements are removed now. Content: 7 8\n```", "```cpp\n#include <iostream>\n#include <random>\n#include <vector>\n#include <algorithm>\n#include <iterator>\nint main()\n{\n    std::vector<int> vector = {1, 2, 3, 4, 5, 6};\n\n    std::random_device randomDevice;\n    std::mt19937 randomNumberGenerator(randomDevice());\n    std::shuffle(vector.begin(), vector.end(), randomNumberGenerator);\n    std::cout << \"Values: \";\n    std::for_each(vector.begin(), vector.end(), [](int value) { std::cout << value << \" \"; });\n    std::cout << std::endl;\n}\nOutput:\nValues: 5 2 6 4 3 1\n```", "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\nint main()\n{\n    std::vector<int> vector = {5, 2, 6, 4, 3, 1};\n\n    std::sort(vector.begin(), vector.end());\n    std::cout << \"Values: \";\n    std::for_each(vector.begin(), vector.end(), [](int value) { std::cout << value << \" \"; });\n    std::cout << std::endl;\n}\nOutput:\nValues: 1 2 3 4 5 6\n```", "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\nint main()\n{\n    std::vector<int> vector = {1, 2, 3, 4, 5, 6};\n\n    bool found = std::binary_search(vector.begin(), vector.end(), 2);\n    std::cout << \"Found: \" << found << std::endl;\n}\nOutput:\nFound: 1\n```", "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\nint main()\n{\n    std::vector<int> costs = {1, 2, 3};\n\n    int budget = 10;\n    int margin = std::accumulate(costs.begin(), costs.end(), budget, [](int a, int b) { return a - b; });\n    std::cout << \"Margin: \" << margin << std::endl;\n}\nOutput:\nMargin: 4\n```", "```cpp\nstruct UserAccount {\n    int balance;\n    int daysSinceRegistered;\n};\n```", "```cpp\n    #include <iostream>\n    #include <vector>\n    #include <iterator>\n    #include <map>\n    #include <algorithm>\n    ```", "```cpp\n    void computeAnalytics(std::map<std::string, UserAccount>& accounts) {\n        // Balance of accounts newer than 15 days, in descending order\n        std::vector<UserAccount> newAccounts;\n        std::transform(accounts.begin(), accounts.end(), std::back_inserter(newAccounts),\n                     [](const std::pair<std::string, UserAccount>& user) { return user.second; });\n        }   \n    ```", "```cpp\n        auto newEnd = std::remove_if(newAccounts.begin(), newAccounts.end(), [](const UserAccount& account) { return account.daysSinceRegistered > 15; } );\n        newAccounts.erase(newEnd, newAccounts.end());\n    ```", "```cpp\n        std::sort(newAccounts.begin(), newAccounts.end(), [](const UserAccount& lhs, const UserAccount& rhs) { return lhs.balance > rhs.balance; } );\n    Now that the data is sorted, we can print it:\n        for(const UserAccount& account : newAccounts) {\n            std::cout << account.balance << std::endl;\n        }   \n    }\n    ```", "```cpp\n    int main()\n    {\n        std::map<std::string, UserAccount> users = {\n            {\"Alice\", UserAccount{500, 15}},\n            {\"Bob\", UserAccount{1000, 50}},\n            {\"Charlie\", UserAccount{600, 17}},\n            {\"Donald\", UserAccount{1500, 4}}\n        };\n        computeAnalytics(users);\n    }\n    ```"]