["```cpp\n// We need to have this to be able to use non-POSIX stuff\n#define _GNU_SOURCE\n#include <unistd.h>\n// This is not part of POSIX!\n#include <sys/syscall.h>\nint main(int argc, char** argv) {\n  char message[20] = \"Hello World!\\n\";\n  // Invokes the 'write' system call that writes\n  // some bytes into the standard output.\n  syscall(__NR_write, 1, message, 13);\n  return 0;\n}\n```", "```cpp\n$ gcc ExtremeC_examples_chapter11_1.c -o ex11_1.out\n$ ./ex11_1.out\nHello World!\n$\n```", "```cpp\n$ strace ./ex11_1.out\nexecve(\"./ex11_1.out\", [\"./ex11_1.out\"], 0x7ffcb94306b0 /* 22 vars */) = 0\nbrk(NULL)                               = 0x55ebc30fb000\naccess(\"/etc/ld.so.nohwcap\", F_OK)      = -1 ENOENT (No such file or directory)\naccess(\"/etc/ld.so.preload\", R_OK)      = -1 ENOENT (No such file or directory)\nopenat(AT_FDCWD, \"/etc/ld.so.cache\", O_RDONLY|O_CLOEXEC) = 3\n...\n...\narch_prctl(ARCH_SET_FS, 0x7f24aa5624c0) = 0\nmprotect(0x7f24aa339000, 16384, PROT_READ) = 0\nmprotect(0x55ebc1e04000, 4096, PROT_READ) = 0\nmprotect(0x7f24aa56a000, 4096, PROT_READ) = 0\nmunmap(0x7f24aa563000, 26144)           = 0\nwrite(1, \"Hello World!\\n\", 13Hello World!\n)          = 13\nexit_group(0)                           = ?\n+++ exited with 0 +++\n$\n```", "```cpp\n/* Copyright (C) 2001-2018 Free Software Foundation, Inc.\n   This file is part of the GNU C Library.\n...\n   <http://www.gnu.org/licenses/>.  */\n#include <sysdep.h>\n/* Please consult the file sysdeps/unix/sysv/linux/x86-64/sysdep.h for\n   more information about the value -4095 used below.  */\n/* Usage: long syscall (syscall_number, arg1, arg2, arg3, arg4, arg5, arg6)\n   We need to do some arg shifting, the syscall_number will be in\n   rax.  */\n\t.text\nENTRY (syscall)\n    movq %rdi, %rax            /* Syscall number -> rax.  */\n    movq %rsi, %rdi            /* shift arg1 - arg5\\.  */\n    movq %rdx, %rsi\n    movq %rcx, %rdx\n    movq %r8, %r10\n    movq %r9, %r8\n    movq 8(%rsp),%r9           /* arg6 is on the stack.  */\n    syscall                    /* Do the system call.  */\n    cmpq $-4095, %rax          /* Check %rax for error.  */\n    jae SYSCALL_ERROR_LABEL    /* Jump to error handler if error.  */\n    ret                        /* Return to caller.  */\nPSEUDO_END (syscall)\n```", "```cpp\n$ sudo apt-get update\n$ sudo apt-get install -y build-essential autoconf libncurses5-dev libssl-dev bison flex libelf-dev git\n...\n...\n$\n```", "```cpp\n$ git clone https://github.com/torvalds/linux\n$ cd linux\n$ git checkout v5.3\n$\n```", "```cpp\n$ ls\ntotal 760K\ndrwxrwxr-x  33 kamran kamran 4.0K Jan 28  2018 arch\ndrwxrwxr-x   3 kamran kamran 4.0K Oct 16 22:11 block\ndrwxrwxr-x   2 kamran kamran 4.0K Oct 16 22:11 certs\n...\ndrwxrwxr-x 125 kamran kamran  12K Oct 16 22:11 Documentation\ndrwxrwxr-x 132 kamran kamran 4.0K Oct 16 22:11 drivers\n-rw-rw-r--   1 kamran kamran 3.4K Oct 16 22:11 dropped.txt\ndrwxrwxr-x   2 kamran kamran 4.0K Jan 28  2018 firmare\ndrwxrwxr-x  75 kamraln kamran 4.0K Oct 16 22:11 fs\ndrwxrwxr-x  27 kamran kamran 4.0K Jan 28  2018 include\n...\n-rw-rw-r--   1 kamran kamran  287 Jan 28  2018 Kconfig\ndrwxrwxr-x  17 kamran kamran 4.0K Oct 16 22:11 kernel\ndrwxrwxr-x  13 kamran kamran  12K Oct 16 22:11 lib\n-rw-rw-r--   1 kamran kamran 429K Oct 16 22:11 MAINTAINERS\n-rw-rw-r--   1 kamran kamran  61K Oct 16 22:11 Makefile\ndrwxrwxr-x   3 kamran kamran 4.0K Oct 16 22:11 mm\ndrwxrwxr-x  69 kamran kamran 4.0K Jan 28  2018 net\n-rw-rw-r--   1 kamran kamran  722 Jan 28  2018 README\ndrwxrwxr-x  28 kamran kamran 4.0K Jan 28  2018 samples\ndrwxrwxr-x  14 kamran kamran 4.0K Oct 16 22:11 scripts\n...\ndrwxrwxr-x   4 kamran kamran 4.0K Jan 28  2018 virt\ndrwxrwxr-x   5 kamran kamran 4.0K Oct 16 22:11 zfs\n$\n```", "```cpp\n/*\n * syscalls.h - Linux syscall interfaces (non-arch-specific)\n *\n * Copyright (c) 2004 Randy Dunlap\n * Copyright (c) 2004 Open Source Development Labs\n *\n * This file is released under the GPLv2.\n * See the file COPYING for more details.\n */\n#ifndef _LINUX_SYSCALLS_H\n#define _LINUX_SYSCALLS_H\nstruct epoll_event;\nstruct iattr;\nstruct inode;\n...\nasmlinkage long sys_statx(int dfd, const char __user *path, unsigned flags,\n                          unsigned mask, struct statx __user *buffer);\nasmlinkage long sys_hello_world(const char __user *str,\n const size_t str_len,\n char __user *buf,\n size_t buf_len);\n#endif\n```", "```cpp\n$ mkdir hello_world\n$ cd hello_world\n$\n```", "```cpp\n#include <linux/kernel.h>   // For printk\n#include <linux/string.h>   // For strcpy, strcat, strlen\n#include <linux/slab.h>     // For kmalloc, kfree\n#include <linux/uaccess.h>  // For copy_from_user, copy_to_user\n#include <linux/syscalls.h> // For SYSCALL_DEFINE4\n// Definition of the system call\nSYSCALL_DEFINE4(hello_world,\n          const char __user *, str,    // Input name\n          const unsigned int, str_len, // Length of input name\n          char __user *, buf,          // Output buffer\n          unsigned int, buf_len) {     // Length of output buffer\n  // The kernel stack variable supposed to keep the content\n  // of the input buffer\n  char name[64];\n  // The kernel stack variable supposed to keep the final\n  // output message.\n  char message[96];\n  printk(\"System call fired!\\n\");\n  if (str_len >= 64) {\n    printk(\"Too long input string.\\n\");\n    return -1;\n  }\n  // Copy data from user space into kernel space\n  if (copy_from_user(name, str, str_len)) {\n    printk(\"Copy from user space failed.\\n\");\n    return -2;\n  }\n  // Build up the final message\n  strcpy(message, \"Hello \");\n  strcat(message, name);\n  strcat(message, \"!\");\n  // Check if the final message can be fit into the output binary\n  if (strlen(message) >= (buf_len - 1)) {\n    printk(\"Too small output buffer.\\n\");\n    return -3;\n  }\n  // Copy back the message from the kernel space to the user space\n  if (copy_to_user(buf, message, strlen(message) + 1)) {\n    printk(\"Copy to user space failed.\\n\");\n    return -4;\n  }\n  // Print the sent message into the kernel log\n  printk(\"Message: %s\\n\", message);\n  return 0;\n}\n```", "```cpp\n999      64     hello_world             __x64_sys_hello_world\n```", "```cpp\n$ cat arch/x86/entry/syscalls/syscall_64.tbl\n...\n...\n546     x32     preadv2                 __x32_compat_sys_preadv64v2\n547     x32     pwritev2                __x32_compat_sys_pwritev64v2\n999      64     hello_world             __x64_sys_hello_world\n$\n```", "```cpp\nobj-y := sys_hello_world.o\n```", "```cpp\ncore-y  += kernel/certs/mm/fs/ipc/security/crypto/block/\n```", "```cpp\ncore-y  += kernel/certs/mm/fs/hello_world/ipc/security/crypto/block/\n```", "```cpp\n$ make localmodconfig\n...\n...\n#\n# configuration written to .config\n#\n$\n```", "```cpp\n$ make -j4\nSYSHDR  arch/x86/include/generated/asm/unistd_32_ia32.h\nSYSTBL  arch/x86/include/generated/asm/syscalls_32.h\nHOSTCC  scripts/basic/bin2c\nSYSHDR  arch/x86/include/generated/asm/unistd_64_x32.h\n...\n...\nUPD     include/generated/compile.h\nCC      init/main.o\nCC      hello_world/sys_hello_world.o\nCC      arch/x86/crypto/crc32c-intel_glue.o\n...\n...\nLD [M]  net/netfilter/x_tables.ko\nLD [M]  net/netfilter/xt_tcpudp.ko\nLD [M]  net/sched/sch_fq_codel.ko\nLD [M]  sound/ac97_bus.ko\nLD [M]  sound/core/snd-pcm.ko\nLD [M]  sound/core/snd.ko\nLD [M]  sound/core/snd-timer.ko\nLD [M]  sound/pci/ac97/snd-ac97-codec.ko\nLD [M]  sound/pci/snd-intel8x0.ko\nLD [M]  sound/soundcore.ko\n$\n```", "```cpp\n$ sudo make modules_install install\nINSTALL arch/x86/crypto/aes-x86_64.ko\nINSTALL arch/x86/crypto/aesni-intel.ko\nINSTALL arch/x86/crypto/crc32-pclmul.ko\nINSTALL arch/x86/crypto/crct10dif-pclmul.ko\n...\n...\nrun-parts: executing /et/knel/postinst.d/initam-tools 5.3.0+ /boot/vmlinuz-5.3.0+\nupdate-iniras: Generating /boot/initrd.img-5.3.0+\nrun-parts: executing /etc/keneostinst.d/unattende-urades 5.3.0+ /boot/vmlinuz-5.3.0+\n...\n...\nFound initrd image: /boot/initrd.img-4.15.0-36-generic\nFound linux image: /boot/vmlinuz-4.15.0-29-generic\nFound initrd image: /boot/initrd.img-4.15.0-29-generic\ndone.  \n$\n```", "```cpp\n$ uname -r\n4.15.0-36-generic $\n```", "```cpp\n$ sudo reboot\n```", "```cpp\n$ uname -r\n5.3.0+\n$\n```", "```cpp\n// We need to have this to be able to use non-POSIX stuff\n#define _GNU_SOURCE\n#include <stdio.h>\n#include <unistd.h>\n// This is not part of POSIX!\n#include <sys/syscall.h>\nint main(int argc, char** argv) {\n  char str[20] = \"Kam\";\n  char message[64] = \"\";\n  // Call the hello world system call\n  int ret_val = syscall(999, str, 4, message, 64);\n  if (ret_val < 0) {\n    printf(\"[ERR] Ret val: %d\\n\", ret_val);\n    return 1;\n  }\n  printf(\"Message: %s\\n\", message);\n  return 0;\n}\n```", "```cpp\n$ gcc ExtremeC_examples_chapter11_2.c -o ex11_2.out\n$ ./ex11_2.out\nMessage: Hello Kam!\n$\n```", "```cpp\n$ dmesg\n...\n...\n[  112.273783] System call fired!\n[  112.273786] Message: Hello Kam!\n$\n```", "```cpp\n$ strace ./ex11_2.out\n...\n...\nmprotect(0x557266020000, 4096, PROT_READ) = 0\nmprotect(0x7f8dd6d2d000, 4096, PROT_READ) = 0\nmunmap(0x7f8dd6d26000, 27048)           = 0\nsyscall_0x3e7(0x7fffe7d2af30, 0x4, 0x7fffe7d2af50, 0x40, 0x7f8dd6b01d80, 0x7fffe7d2b088) = 0\nfstat(1, {st_mode=S_IFCHR|0620, st_rdev=makedev(136, 0), ...}) = 0\nbrk(NULL)                               = 0x5572674f2000\nbrk(0x557267513000)\n...\n...\nexit_group(0)                           = ?\n+++ exited with 0 +++\n$\n```", "```cpp\nint main(int argc, char** argv) {\n  char name[84] = \"A very very long message! It is really hard to produce a big string!\";\n  char message[64] = \"\";\n  ...\n  return 0;\n}\n```", "```cpp\n$ gcc ExtremeC_examples_chapter11_2.c -o ex11_2.out\n$ ./ex11_2.out\n[ERR] Ret val: -1\n$\n```", "```cpp\n$ strace ./ex11_2.out\n...\n...\nmunmap(0x7f1a900a5000, 27048)           = 0\nsyscall_0x3e7(0x7ffdf74e10f0, 0x54, 0x7ffdf74e1110, 0x40, 0x7f1a8fe80d80, 0x7ffdf74e1248) = -1 (errno 1)\nfstat(1, {st_mode=S_IFCHR|0620, st_rdev=makedev(136, 0), ...}) = 0\nbrk(NULL)                               = 0x5646802e2000\n...\n...\nexit_group(1)                           = ?\n+++ exited with 1 +++\n$\n```", "```cpp\n$ mkdir ex11_3\n$ cd ex11_3\n$\n```", "```cpp\n#include <linux/module.h>\n#include <linux/kernel.h>\n#include <linux/init.h>\n#include <linux/proc_fs.h>\n// The structure pointing to the proc file\nstruct proc_dir_entry *proc_file;\n// The read callback function\nssize_t proc_file_read(struct file *file, char __user *ubuf, size_t count, loff_t *ppos) {\n  int copied = 0;\n  if (*ppos > 0) {\n    return 0;\n  }\n  copied = sprintf(ubuf, \"Hello World From Kernel Module!\\n\");\n  *ppos = copied;\n  return copied;\n}\nstatic const struct file_operations proc_file_fops = {\n .owner = THIS_MODULE,\n .read  = proc_file_read\n};\n// The module initialization callback\nstatic int __init hwkm_init(void) {\n  proc_file = proc_create(\"hwkm\", 0, NULL, &proc_file_fops);\n  if (!proc_file) {\n    return -ENOMEM;\n  }\n  printk(\"Hello World module is loaded.\\n\");\n  return 0;\n}\n// The module exit callback\nstatic void __exit hkwm_exit(void) {\n  proc_remove(proc_file);\n  printk(\"Goodbye World!\\n\");\n}\n// Defining module callbacks\nmodule_init(hwkm_init);\nmodule_exit(hkwm_exit);\n```", "```cpp\nobj-m += hwkm.o\nall:\n    make -C /lib/modules/$(shell uname -r)/build M=$(PWD) modules\nclean:\n    make -C /lib/modules/$(shell uname -r)/build M=$(PWD) clean\n```", "```cpp\n$ make\nmake -C /lib/modules/54.318.0+/build M=/home/kamran/extreme_c/ch11/codes/ex11_3 modules\nmake[1]: Entering directory '/home/kamran/linux'\n  CC [M]  /home/kamran/extreme_c/ch11/codes/ex11_3/hwkm.o\n  Building modules, stage 2.\n  MODPOST 1 modules\nWARNING: modpost: missing MODULE_LICENSE() in /home/kamran/extreme_c/ch11/codes/ex11_3/hwkm.o\nsee include/linux/module.h for more information\n  CC      /home/kamran/extreme_c/ch11/codes/ex11_3/hwkm.mod.o\n  LD [M]  /home/kamran/extreme_c/ch11/codes/ex11_3/hwkm.ko\nmake[1]: Leaving directory '/home/kamran/linux'\n$\n```", "```cpp\n$ ls -l\ntotal 556\n-rw-rw-r-- 1 kamran kamran    154 Oct 19 00:36 Makefile\n-rw-rw-r-- 1 kamran kamran      0 Oct 19 08:15 Module.symvers\n-rw-rw-r-- 1 kamran kamran   1104 Oct 19 08:05 hwkm.c\n-rw-rw-r-- 1 kamran kamran 272280 Oct 19 08:15 hwkm.ko\n-rw-rw-r-- 1 kamran kamran    596 Oct 19 08:15 hwkm.mod.c\n-rw-rw-r-- 1 kamran kamran 104488 Oct 19 08:15 hwkm.mod.o\n-rw-rw-r-- 1 kamran kamran 169272 Oct 19 08:15 hwkm.o\n-rw-rw-r-- 1 kamran kamran     54 Oct 19 08:15 modules.order\n$\n```", "```cpp\n$ sudo insmod hwkm.ko\n$\n```", "```cpp\n$ dmesg\n...\n...\n[ 7411.519575] Hello World module is loaded.\n$\n```", "```cpp\n$ cat /proc/hwkm\nHello World From Kernel Module!\n$ cat /proc/hwkm\nHello World From Kernel Module!\n$\n```", "```cpp\n$ sudo rmmod hwkm\n$\n```", "```cpp\n$ dmesg\n...\n...\n[ 7411.519575] Hello World module is loaded.\n[ 7648.950639] Goodbye World!\n$\n```"]