- en: '*Chapter 13*: COVID-19 Social-Distancing Alert'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When the world celebrated the arrival of the year 2020, a pandemic was arising
    due to a new disease: COVID-19\. With the emergence of this pandemic, all human
    activities were affected to a lesser or greater degree.'
  prefs: []
  type: TYPE_NORMAL
- en: The education sector has been one of the most affected in this sense. All schools
    worldwide temporarily suspended their activities, since the risk of contagion
    in these environments can be very high. After a few months of lockdowns, schools
    around the world gradually began to resume face-to-face activities, following
    rigorous standards of disinfection and protocols to ensure physical distancing
    between students and school staff (Global Education Cluster, 2020).
  prefs: []
  type: TYPE_NORMAL
- en: The recommendation of the **World Health Organization** (**WHO**) for physical
    distancing is to remain at least 1 **meter** (**m**) (3 **feet** (**ft**)) apart
    between people, with 2 m (6 ft) being the most general recommendation to minimize
    the risk of contagion in children (KidsHealth, 2021). This measure is known as
    **social distancing**. Furthermore, technology sometimes acts as a great way to
    enforce these measures.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn how to create a device that uses microcontroller
    technology to enforce social distancing to help children get used to maintaining
    a safe physical distance. When they are not at a safe physical distance, they
    will receive a sound alert from the device. The device you will create can be
    used by children as a wearable device for daily use by putting it in a case and
    using it as a necklace, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.1 – Wearable social-distancing device for children](img/B16413_Figure_13.1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.1 – Wearable social-distancing device for children
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Programming a piezoelectric buzzer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting an ultrasonic sensor to the microcontroller board
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing a program for getting data from the ultrasonic sensor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing the distance meter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By completing this chapter, you will know how to program an electronic measurement
    of distance ranges using an **STM32 Blue Pill board**. You will also learn how
    to play an alarm when the distance is measured as less than 2 m.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: This project is only for demonstration and learning purposes. Please do not
    use it as a primary social-distancing alarm for preventing the risk of COVID-19
    contagion.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The hardware components that will be needed to develop the social-distancing
    alarm are listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: One solderless breadboard.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One Blue Pill microcontroller board.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One ST-LINK/V2 electronic interface is needed for uploading the compiled code
    to the Blue Pill board. Bear in mind that the ST-LINK/V2 interface requires four
    female-to-female jumper wires.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One HC-SR04 ultrasonic sensor.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One buzzer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Male-to-male jumper wires.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Female-to-male jumper wires.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A power source.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cardboard for the case.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As usual, you will require the Arduino **integrated development environment**
    (**IDE**) and the GitHub repository for this chapter, which can be found at [https://github.com/PacktPublishing/DIY-Microcontroller-Projects-for-Hobbyists/tree/master/Chapter13](https://github.com/PacktPublishing/DIY-Microcontroller-Projects-for-Hobbyists/tree/master/Chapter13)
  prefs: []
  type: TYPE_NORMAL
- en: 'The Code in Action video for this chapter can be found here: [https://bit.ly/3gS2FKJ](https://bit.ly/3gS2FKJ)'
  prefs: []
  type: TYPE_NORMAL
- en: Let's begin!
  prefs: []
  type: TYPE_NORMAL
- en: Programming a piezoelectric buzzer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you will learn what a buzzer is, how to interface it with the
    **STM32 Blue Pill**, and how to write a program to build an alert sound.
  prefs: []
  type: TYPE_NORMAL
- en: A **piezoelectric buzzer** is a device that generates tones and beeps. It uses
    a piezoelectric effect, which consists of piezoelectric materials converting mechanical
    stress into electricity and electricity into mechanical vibrations. Piezoelectric
    buzzers contain a crystal with these characteristics, which changes shape when
    voltage is applied to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'As has been common in these chapters, you can find a generic breakout module
    that is pretty straightforward to use, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.2 – Piezoelectric buzzer breakout board](img/B16413_Figure_13.2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.2 – Piezoelectric buzzer breakout board
  prefs: []
  type: TYPE_NORMAL
- en: 'This breakout board connects to the STM32 Blue Pill microcontroller board with
    three pins, outlined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Input/Output** (**I/O**): This pin must be connected to a digital output
    of the microcontroller.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Voltage Common Collector** (**VCC**): Pin to supply power to the sensor (**5
    volts**, or **5V**).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ground** (**GND**): Ground connection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, you will learn how to interface these pins with the Blue Pill microcontroller
    board.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting the components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You will need a solderless breadboard to connect the buzzer to the STM32 Blue
    Pill microcontroller and a wire to connect the components. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: You need to place the STM32 Blue Pill and the buzzer into the solderless breadboard
    and leave space in the solderless breadboard to connect the jumper wires.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the GND pin of the sensor to a GND terminal of the SMT32 Blue Pill.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, you need to connect the VCC pin to the 5V bus of the STM32 Blue Pill.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, connect the I/O pin of the buzzer to pin B12 of the Blue Pill. The
    following screenshot shows all the components connected to the solderless breadboard:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.3 – Piezoelectric buzzer interface to the Blue Pill](img/B16413_Figure_13.3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.3 – Piezoelectric buzzer interface to the Blue Pill
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot represents all the wiring between the STM32 Blue Pill
    and the piezoelectric buzzer and compiles the steps we just went through:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.4 – Circuit for piezoelectric buzzer connection](img/B16413_Figure_13.4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.4 – Circuit for piezoelectric buzzer connection
  prefs: []
  type: TYPE_NORMAL
- en: Up to now, we have explored piezoelectric buzzers and their components and functionality.
    You have also learned how to connect them to an STM32 Blue Pill microcontroller
    board using a solderless breadboard.
  prefs: []
  type: TYPE_NORMAL
- en: Now, you are ready to write a program in the C language to reproduce an audible
    alert in the buzzer. Don't forget to use the `STLink` to upload the script to
    the STM32 Blue Pill microcontroller board.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start developing a program to play an audible alert with the STM32 Blue
    Pill, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get started defining which pin of the STM32 Blue Pill card pins will
    be used to play a sound in the buzzer. Run the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, we will leave the `setup()` part empty. You will not need to initialize
    code for this script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The complete code is in the `loop()` part, as illustrated in the following
    code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We are using two new functions: `tone()` and `noTone()`. Let''s see what their
    functionality is.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`tone()` generates a square wave with a specific frequency from a pin. Its
    syntax is `tone(pin, frequency, duration)`, where the `pin` parameter is the pin
    of the Blue Pill to which the buzzer is connected. `frequency` is the frequency
    of the tone in `unsigned int`. The `duration` parameter is the tone''s duration
    in `unsigned long` type.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`noTone()` stops the generation of the square wave that was started with `tone()`.
    An error will not be generated if a tone has not been previously generated. Its
    syntax is `noTone(pin)`, where `pin` is the pin that is generating the tone.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: So, the preceding code starts a 1,200 Hz tone and holds it for 250 ms with the
    `delay()` function. Later, it stops it and waits 500 ms to generate a new tone
    during 250 ms, now 800 Hz, and stops it again with the same 500-ms pause. These
    steps are repeated as long as the program is running to simulate an alert sound.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The code for this functionality is now complete. You can find the complete sketch
    in the `Chapter13/buzzer` folder in the GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: Let's view how we have advanced our learning. We discovered a component to play
    tones, learned how to connect it to the STM32 Blue Pill microcontroller, and wrote
    the code to play an audible alert.
  prefs: []
  type: TYPE_NORMAL
- en: The skills you have acquired so far in this section will allow you to create
    other electronic systems that require play and audible alerts. Coming up next,
    we will learn about ultrasonic sensors.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting an ultrasonic sensor to the microcontroller board
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before moving ahead, we need to learn about the functionality of the HC-SR04
    ultrasonic sensor, how to interface it with the **STM32 Blue Pill**, and how to
    write a program to measure the distance between the sensor and another object.
  prefs: []
  type: TYPE_NORMAL
- en: This sensor emits an ultrasonic wave. When this wave collides with an object,
    the wave is reflected and received by the sensor. When the reflected signal is
    received, the sensor can calculate the time it took to be reflected, and thus
    the distance of the collision object can be measured.
  prefs: []
  type: TYPE_NORMAL
- en: 'The sensor can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.5 – Ultrasonic sensor](img/B16413_Figure_13.5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.5 – Ultrasonic sensor
  prefs: []
  type: TYPE_NORMAL
- en: 'This sensor board connects to the STM32 Blue Pill microcontroller board with
    four pins, outlined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Trigger**: This pin enables the ultrasonic wave.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Echo**: This pin receives the reflected wave.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**VCC**: The pin to supply power to the sensor (5V).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GND**: Ground connection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, it's time to interface these pins with the Blue Pill microcontroller.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting the components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A solderless breadboard will be required to connect the buzzer to the STM32
    Blue Pill microcontroller and wire to connect the components. Proceed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: You need to place the STM32 Blue Pill and the sensor into the solderless breadboard
    and leave space to connect the jumper wires.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the GND pin of the sensor to a GND terminal of the SMT32 Blue Pill.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, you need to connect the VCC pin to the 5V bus of the STM32 Blue Pill.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, connect the trigger pin of the buzzer to pin C14 and the echo pin
    to the C13 pin of the Blue Pill. The following screenshot shows all the components
    connected to the solderless breadboard:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.6 – Piezoelectric buzzer interface to the Blue Pill](img/B16413_Figure_13.6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.6 – Piezoelectric buzzer interface to the Blue Pill
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot represents all the wiring between the STM32 Blue Pill
    and the ultrasonic sensor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.7 – Circuit for the ultrasonic sensor connection](img/B16413_Figure_13.7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.7 – Circuit for the ultrasonic sensor connection
  prefs: []
  type: TYPE_NORMAL
- en: Up to now, you have learned how to connect a sensor to the STM32 Blue Pill microcontroller
    board using a solderless breadboard.
  prefs: []
  type: TYPE_NORMAL
- en: Now, you will learn how to write a program in the C language to reproduce an
    audible alert in the buzzer. Don't forget to use the `STLink` to upload the script
    to the STM32 Blue Pill microcontroller board.
  prefs: []
  type: TYPE_NORMAL
- en: Writing a program for getting data from the ultrasonic sensor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, you will learn how to write a program to gather data from
    the ultrasonic sensor. Let''s start, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will define which pins of the STM32 Blue Pill card will be used to
    read the sensor data. Also, we will declare two variables to save the duration
    of the sound-wave travel and another for calculating the distance traveled, as
    illustrated in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The selected pins were the PC13 and PC14 pins (labeled C13 and C14 on the Blue
    Pill).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, in the `setup()` function, begin the serial communication. You will set
    the trigger pin as an output pin and the echo pin as an input pin. We need to
    initialize the trigger in the `LOW` value. The code is illustrated in the following
    snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we will code the `loop()` function. We need to start the ultrasonic wave,
    wait 10 **seconds** (**sec**), and turn off the wave. The code is illustrated
    in the following snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The next step is to read the echo pin of the sensor to know the total travel
    time of the wave. We do this with the `pulseIn()` function and store it in the
    variable we declared at the beginning, for this purpose. To calculate the distance,
    we take the value of the return pulse and divide it by 59 to obtain the distance
    in **centimeters** (**cm**), as illustrated in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, you will show the distance value between the sensor and any object
    in front of our device in the serial console, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The code for this functionality is now complete. You can find the complete sketch
    in the `Chapter13/ultrasonic` folder in the GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: At the end of this section, you have learned how to write a program in the C
    language to measure the distance between an object and an ultrasonic sensor connected
    to the STM32.
  prefs: []
  type: TYPE_NORMAL
- en: With these skills, you will be able to develop electronic projects that require
    distance measurement, such as car-reverse-impact prevention.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the distance meter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before testing the distance meter, we will need to wire together the buzzer
    and the ultrasonic sensor to the SMT32 Blue Pill in the solderless breadboard.
    The following screenshot illustrates a complete circuit diagram including the
    STM32, ultrasonic sensor, and buzzer together in the solderless breadboard:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.8 – Full circuit diagram of our social-distancing device](img/B16413_Figure_13.8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.8 – Full circuit diagram of our social-distancing device
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows how everything should be connected in the actual
    system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.9 – The buzzer and ultrasonic sensor connections](img/B16413_Figure_13.9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.9 – The buzzer and ultrasonic sensor connections
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, to complete the connection of the complete social-distancing device, we
    will need to write a new script combining the `Chapter13/buzzer` and `Chapter13/ultrasonic`
    scripts. The new script will be named `Chapter13/distance_meter`. Follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to declare the constants and variables of both scripts and add a new
    script to define the safety distance between the sensor device and another object.
    The code to do this is illustrated in the following snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: For COVID-19 social distancing, we will use 200 cm (2 m).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The `setup()` function remains the same as the ultrasonic script, as illustrated
    in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, in the `loop()` function, we will include a conditional to verify
    if our social-distancing device is physically separated less than 2 m from another
    person (object). If this is the case, play the audible alert. Here is the code
    to do this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, you can measure social distancing, and it can be possible to use our device
    as a necklace in schools to maintain a safe physical distance, *only as a complement
    to the official safety instructions*.
  prefs: []
  type: TYPE_NORMAL
- en: 'To achieve this, we can create a cardboard case and insert our device in it.
    Print the template shown in the following screenshot—you can download this from
    the `Chapter13/cardboard` GitHub folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.10 – A cardboard-case template for our device](img/B16413_Figure_13.10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.10 – A cardboard-case template for our device
  prefs: []
  type: TYPE_NORMAL
- en: 'To better fit our electronic device in the case, it is recommended to change
    the jumper wires used to build the prototype (male-to-male) to male-to-female
    jumper wires and power it with a 5V battery, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.11 – Adapted connections to fit into a cardboard-case template](img/B16413_Figure_13.11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.11 – Adapted connections to fit into a cardboard-case template
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, cut and glue the case and put the device we just created into the
    case to create a wearable device, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.12 – A cardboard-case template for our device](img/B16413_Figure_13.12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.12 – A cardboard-case template for our device
  prefs: []
  type: TYPE_NORMAL
- en: Using this device, you will know whether you are at a safe distance to avoid
    possible COVID-19 infections by droplets.
  prefs: []
  type: TYPE_NORMAL
- en: We have reached the end of [*Chapter 13*](B16413_13_Final_NM_ePub.xhtml#_idTextAnchor173).
    Congratulations!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What did we learn in this project? Firstly, we learned how to connect a piezoelectric
    buzzer to our Blue Pill microcontroller board and code a program to play an audible
    alarm. Then, we wrote a program to measure the distance between our electronic
    device and another object.
  prefs: []
  type: TYPE_NORMAL
- en: We also learned how to combine the two projects to create a social-distancing
    device that can be used to maintain a safe physical distance in this COVID-19
    pandemic—for example, in schools, because children are more distracted and are
    more friendly and sociable.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to remind you that this project is intended for learning purposes
    and should not be used as a primary alarm for preventing the risk of COVID-19
    contagion in any circumstances. This is mainly because, at this time, we know
    that the main risk is airborne.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn to build a 20-second hand-washing timer.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Global Education Cluster. *Safe back to school: a practitioner''s guide*. UNESCO.
    2020:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://healtheducationresources.unesco.org/library/documents/safe-back-school-practitioners-guide](https://healtheducationresources.unesco.org/library/documents/safe-back-school-practitioners-guide)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'KidsHealth. *Coronavirus (COVID-19): Social Distancing With Children*. 2021:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://kidshealth.org/en/parents/coronavirus-social-distancing.html](https://kidshealth.org/en/parents/coronavirus-social-distancing.html)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
