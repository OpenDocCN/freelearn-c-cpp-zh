- en: Chapter 5. Bridging Character Statistics
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。连接角色统计信息
- en: Now that we have a basic framework set up for our pause menu, we will now focus
    on the programming aspect of the pause menu.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经为我们的暂停菜单设置了一个基本框架，我们将现在专注于暂停菜单的编程方面。
- en: 'In this chapter, you will learn how to link character statistics to the pause
    menu, as discussed in [Chapter 4](ch04.html "Chapter 4. Pause Menu Framework"),
    *Pause Menu Framework*. By the end of this chapter, you will be able to link any
    other game statistics you would like to a UMG menu or submenu. We will cover the
    following topics in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何将角色统计信息链接到暂停菜单，正如在第4章[Chapter 4](ch04.html "Chapter 4. Pause Menu
    Framework")中讨论的*暂停菜单框架*。到本章结束时，你将能够将任何其他你希望链接到UMG菜单或子菜单的游戏统计信息链接起来。本章我们将涵盖以下主题：
- en: Getting character data
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取角色数据
- en: Getting player instances
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取玩家实例
- en: Displaying stats
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示状态
- en: Getting character data
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取角色数据
- en: At this point, the pause menu is fully designed and ready for data integration.
    In [Chapter 3](ch03.html "Chapter 3. Exploration and Combat"), *Exploration and
    Combat*, we had developed means to display some player parameters, such as the
    player's name, HP, and MP into CombatUI through binding Text Blocks with the **Game
    Character** variable in order to access character stat values held within **Character
    Info**. We will do this in a very similar fashion, as we did in the previous chapter,
    by first opening the **Pause_Main** widget and clicking on the Text Block that
    we will update with a value.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，暂停菜单已经完全设计完成，并准备好进行数据集成。在第3章[Chapter 3](ch03.html "Chapter 3. Exploration
    and Combat")中，*探索与战斗*，我们开发了一些方法来显示一些玩家参数，例如玩家的名字、HP和MP，通过将文本块与**Game Character**变量绑定到CombatUI，以便访问**Character
    Info**中持有的角色状态值。我们将以与上一章非常相似的方式完成这项工作，首先打开**Pause_Main**小部件，然后点击我们将要更新其值的文本块。
- en: 'In this case, we have already designated locations for all our stat values,
    so we will start with the HP stat that we named **Editable_Soldier_HP**:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们已经为所有状态值指定了位置，因此我们将从名为**Editable_Soldier_HP**的HP状态值开始：
- en: '![Getting character data](img/B04548_05_01.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![获取角色数据](img/B04548_05_01.jpg)'
- en: 'Navigate to **Content** | **Text**, and click on the drop-down menu of **Bind**
    next to the dropbox. Click on **Create Binding** under the drop-down menu:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到**Content** | **Text**，然后点击旁边的下拉菜单中的**Bind**下拉菜单。在下拉菜单中点击**Create Binding**：
- en: '![Getting character data](img/B04548_05_02.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![获取角色数据](img/B04548_05_02.jpg)'
- en: 'Once you have completed this process, a new function called `Get_Editable_Soldier_HP_Text_0`
    will be created, and you will automatically be pulled into the graph of the new
    function. Like in previous binds, the new function will also automatically have
    **FunctionEntry** with its labeled return:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此过程后，将创建一个新的函数`Get_Editable_Soldier_HP_Text_0`，你将自动被拉入新函数的图表。与之前的绑定一样，新函数也将自动具有**FunctionEntry**及其标记的返回值：
- en: '![Getting character data](img/B04548_05_03.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![获取角色数据](img/B04548_05_03.jpg)'
- en: 'We can now create a new **Game Character** reference variable that we will
    again name **Character Target**:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以创建一个新的**Game Character**引用变量，我们再次将其命名为**Character Target**：
- en: '![Getting character data](img/B04548_05_04.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![获取角色数据](img/B04548_05_04.jpg)'
- en: 'Then, we will drag our **Character Target** variable into the `Get_Editable_Soldier_HP_Text_0`
    graph and set it to **Get**:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将**Character Target**变量拖入`Get_Editable_Soldier_HP_Text_0`图表，并将其设置为**Get**：
- en: '![Getting character data](img/B04548_05_05.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![获取角色数据](img/B04548_05_05.jpg)'
- en: 'Next, we will create a new node named **Get HP**, which is located under **Variables**
    | **Character Info**, and link its **Target** pin to the **Character Target**
    variable pin:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个名为**Get HP**的新节点，它位于**Variables** | **Character Info**下，并将它的**Target**引脚链接到**Character
    Target**变量引脚：
- en: '![Getting character data](img/B04548_05_06.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![获取角色数据](img/B04548_05_06.jpg)'
- en: 'Lastly, link the HP stat in the **Get Editable Soldier HP Text 0** node to
    the **Return Value** pin of the **ReturnNode**. This will automatically create
    a **To Text (Int)** conversion node, which is responsible for converting any integer
    into a string. When you are finished, your `Get_Editable_Soldier_HP_Text_0` function
    should look like this:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将**Get Editable Soldier HP Text 0**节点中的HP状态值链接到**ReturnNode**的**Return Value**引脚。这将自动创建一个**To
    Text (Int)**转换节点，该节点负责将任何整数转换为字符串。完成之后，你的`Get_Editable_Soldier_HP_Text_0`函数应该看起来像这样：
- en: '![Getting character data](img/B04548_05_07.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![获取角色数据](img/B04548_05_07.jpg)'
- en: Getting player instances
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取玩家实例
- en: 'If you were to test this now, you would see that a value gets created in our
    pause menu, but the value is **0**. This is not correct because our character
    is supposed to start with 100 HP according to the character''s current stats:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在进行测试，你会看到在我们的暂停菜单中创建了一个值，但这个值是**0**。这是不正确的，因为根据角色的当前属性，我们的角色应该从100 HP开始：
- en: '![Getting player instances](img/B04548_05_08.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![获取玩家实例](img/B04548_05_08.jpg)'
- en: 'The problem occurs because the **Field Player** that accesses the pause menu
    never assigns any of our character data to **Character Target**. We can easily
    set the proper character target in Blueprint, but we won''t be able to assign
    any of the character data without exposing our added party members to Blueprint.
    So, we must first head into `RPGGameInstance.h` and allow the exposure of our
    current game data to a **Game Data** category of Blueprint in the `UProperty`
    parameters:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 问题发生是因为访问暂停菜单的**Field Player**从未将我们的任何角色数据分配给**Character Target**。我们可以在蓝图（Blueprint）中轻松设置正确的角色目标，但如果没有将我们的添加的队伍成员暴露给蓝图，我们将无法分配任何角色数据。因此，我们首先需要进入`RPGGameInstance.h`，并允许我们的当前游戏数据在`UProperty`参数中暴露给蓝图中的**游戏数据**类别：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Your `RPGGameInstance`.`h` file should now look like this:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你的`RPGGameInstance`.`h`文件现在应该看起来像这样：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Once you have saved and compiled your code, you should be able to properly call
    any created and added party members in Blueprint, and so we should have read access
    via the **Field Player** Blueprint.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 保存并编译你的代码后，你应该能够在蓝图（Blueprint）中正确调用任何创建和添加的队伍成员，因此我们应该通过**Field Player**蓝图获得读取访问权限。
- en: 'Now, you can navigate back to the **Field Player** Blueprint and have it get
    **RPGGameInstance** by creating the **Get Game Instance** function node located
    under **Game**:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以导航回**Field Player**蓝图，并通过创建位于**游戏**下的**Get Game Instance**函数节点来获取**RPGGameInstance**：
- en: '![Getting player instances](img/B04548_05_09.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![获取玩家实例](img/B04548_05_09.jpg)'
- en: 'Have the **Return Value** of **Get Game Instance** cast to **RPGGameInstance**,
    which is located under **Utilities** | **Casting** | **RPGGameInstance**. Now
    that you''ve got an instance of the **RPGGameInstance** class, you can have the
    instance refer to the `TArray` of **Party Members**, which holds all your party
    members, by navigating to the category that you have created for it in **GameData**
    under **Variables**:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 将**Get Game Instance**的**返回值**转换为**RPGGameInstance**，它位于**实用工具** | **转换** |
    **RPGGameInstance**。现在你已经得到了**RPGGameInstance**类的实例，你可以通过导航到在**GameData**下的**变量**中为它创建的类别，让这个实例引用包含所有队伍成员的`TArray`的**队伍成员**：
- en: '![Getting player instances](img/B04548_05_11.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![获取玩家实例](img/B04548_05_11.jpg)'
- en: 'Here, we will need to point to the element of the array that holds our soldier
    character''s stats, which is our first element or `0` index of the array, by linking
    the **Party Members** array to a **GET** function, which can be found by going
    to **Utilities** | **Array**:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们需要指向包含我们的士兵角色属性的数组元素，这是我们的第一个元素或数组的`0`索引，通过将**队伍成员**数组链接到一个**GET**函数来实现，该函数可以通过导航到**实用工具**
    | **数组**找到：
- en: '![Getting player instances](img/B04548_05_12.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![获取玩家实例](img/B04548_05_12.jpg)'
- en: Note
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For additional characters, you will need to link another **GET** function to
    **Party Members** and have the **GET** function point to the element of the array
    that will point to any other characters (for instance, if you had a healer that
    is in index 1, your second **GET** function would simply list its index as 1 instead
    of 0 to pull from the healer's stats). For now, we are just going to focus on
    the soldier's stats, but you will want to get stats for every character in your
    party.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 对于额外的角色，你需要将另一个**GET**函数链接到**队伍成员**，并让**GET**函数指向数组中指向任何其他角色的元素（例如，如果你有一个位于索引1的治疗师，你的第二个**GET**函数只需将其索引列为1而不是0，以从治疗师的属性中提取）。现在，我们只是专注于士兵的属性，但你将想要获取队伍中每个角色的属性。
- en: 'Lastly, once we have finished casting **RPGGameInstance**, we will need to
    set the **Character Target**, which we created in the pause menu, to our **Party
    Members**. To do this, right-click on your **Event Graph** to create a new action,
    but uncheck **Context Sensitive** because we are looking for variables that have
    been declared in a different class (`Pause_Main`). If you navigate to **Class**
    | **Pause Main**, you will find **Set Character Target**:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，一旦我们完成了**RPGGameInstance**的施法，我们需要将我们在暂停菜单中创建的**Character Target**设置为我们的**队伍成员**。为此，右键单击你的**事件图**以创建一个新动作，但取消选中**上下文相关**，因为我们正在寻找在另一个类（`Pause_Main`）中声明的变量。如果你导航到**类**
    | **Pause Main**，你会找到**Set Character Target**：
- en: '![Getting player instances](img/B04548_05_13.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![获取玩家实例](img/B04548_05_13.jpg)'
- en: 'Here, simply link **Character Target** to the out pin of your **GET** function:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，只需将 **Character Target** 链接到你的 **GET** 函数的输出引脚：
- en: '![Getting player instances](img/B04548_05_14.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![获取玩家实例](img/B04548_05_14.jpg)'
- en: 'Then, set **Character Target** so that it is triggered after **RPGGameInstance**
    is cast:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，设置 **Character Target** 以在 **RPGGameInstance** 被调用后触发：
- en: '![Getting player instances](img/B04548_05_15.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![获取玩家实例](img/B04548_05_15.jpg)'
- en: Displaying stats
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示属性
- en: 'Now, we will need to pick a good spot to cast **RPGGameInstance**. It would
    be best to cast **RPGGameInstance** after the pause menu has been created, so
    link the out pin of the **Set Show MouseCursor** node to the in pin of the **Cast
    To RPGGameInstance**. Then, link the **Return Value** of the **Create Pause_Main
    Widget** to the **Target** of **Set Character Target**. When you are finished,
    your **EventGraph** under **FieldPlayer** will look like this:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要选择一个合适的位置来调用 **RPGGameInstance**。最好在创建暂停菜单后调用 **RPGGameInstance**，因此将
    **Set Show MouseCursor** 节点的输出引脚链接到 **Cast To RPGGameInstance** 节点的输入引脚。然后，将 **Create
    Pause_Main Widget** 的 **Return Value** 链接到 **Set Character Target** 的 **Target**。当你完成时，你的
    **FieldPlayer** 下的 **EventGraph** 应该看起来像这样：
- en: '![Displaying stats](img/B04548_05_16.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![显示属性](img/B04548_05_16.jpg)'
- en: 'When you are finished, you will see that the HP of the soldier is displayed
    correctly as the current HP:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当你完成时，你会看到士兵的 HP 正确显示为当前 HP：
- en: '![Displaying stats](img/B04548_05_17.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![显示属性](img/B04548_05_17.jpg)'
- en: 'You can now add the remaining soldier stats to Text Blocks in **Pause_Main**
    from the pause menu by binding functions and then have these functions return
    values, such as the character target''s MP and name. When you are finished with
    your soldier character, your **Pause_Main** should look something like this:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以通过绑定函数并将这些函数返回值（如角色目标的 MP 和名称）添加到暂停菜单中的 **Pause_Main** 中的文本块。当你完成你的士兵角色后，你的
    **Pause_Main** 应该看起来像这样：
- en: '![Displaying stats](img/B04548_05_18.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![显示属性](img/B04548_05_18.jpg)'
- en: Note
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We do not yet have levels or experience, we will cover levels and experience
    in a later chapter.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还没有等级或经验，我们将在后面的章节中介绍等级和经验。
- en: If you have any other characters, make sure that you add them as well. As mentioned
    earlier, if you have additional characters in your party, you will need to go
    back to your **FieldPlayer** Event Graph and create another **GET** function that
    will get the indexes of your other party members and assign them to new **Character
    Targets**.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还有其他角色，请确保你也添加它们。如前所述，如果你的队伍中有其他角色，你需要回到你的 **FieldPlayer** 事件图并创建另一个 **GET**
    函数，该函数将获取其他队伍成员的索引并将它们分配给新的 **Character Targets**。
- en: 'Let''s now head back into the **Pause_Inventory** widget and bind character
    stats to their corresponding Text Blocks. Just like in **Pause_Main**, select
    a Text Block that you want to bind; in this case, we will grab the **Text Block**
    to the right of **HP**:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们回到 **Pause_Inventory** 小部件，并将角色属性绑定到相应的文本块。就像在 **Pause_Main** 中一样，选择一个你想要绑定的文本块；在这种情况下，我们将获取
    **HP** 右侧的 **Text Block**：
- en: '![Displaying stats](img/B04548_05_19.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![显示属性](img/B04548_05_19.jpg)'
- en: 'Then, simply create a binding for the Text Block, as you did for other Text
    Blocks. This will, of course, create a binding for a new function that we will
    return the HP status of the **Character Target**. The issue is that the **Character
    Target** that we created in **Pause_Main** is a **Game Character** variable local
    to **Pause_Main**, so we will have to recreate the **Character Target** variable
    in **Pause_Inventory**. Luckily, the steps are the same as they were; we just
    need to add a new variable and name it **Character Target**, and then make its
    type an object reference to **Game Character**:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，简单地为文本块创建一个绑定，就像你为其他文本块所做的那样。这将当然为一个新的函数创建一个绑定，我们将返回 **Character Target**
    的 HP 状态。问题是我们在 **Pause_Main** 中创建的 **Character Target** 是一个局部于 **Pause_Main**
    的 **Game Character** 变量，因此我们不得不在 **Pause_Inventory** 中重新创建 **Character Target**
    变量。幸运的是，步骤是相同的；我们只需要添加一个新的变量并将其命名为 **Character Target**，然后将其类型设置为指向 **Game Character**
    的对象引用：
- en: '![Displaying stats](img/B04548_05_20.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![显示属性](img/B04548_05_20.jpg)'
- en: 'When you are finished, add the **Character Target** variable as a getter, link
    the **Character Target** variable to get the HP of your character, and link that
    value to **Return Value** of your **ReturnNode**, just like you did previously.
    You should have an Event Graph that looks pretty similar to the following screenshot:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当你完成时，添加**Character Target**变量作为getter，将**Character Target**变量链接到获取你角色的HP，并将该值链接到你的**ReturnNode**的**Return
    Value**，就像你之前做的那样。你应该有一个看起来与以下截图非常相似的Event Graph：
- en: '![Displaying stats](img/B04548_05_21.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![显示统计信息](img/B04548_05_21.jpg)'
- en: 'If you were to test the inventory screen at this point, you would see that
    the HP value would be 0, but do not panic, you don''t need to do much critical
    thinking to correct the value now that **FieldPlayer** has a general framework
    for our characters. If you remember, when we cast **RPGGameInstance** after creating
    the **Pause_Main** widget in the **FieldPlayer** class, we pulled our added party
    members from our game instance and set it to **Character Target** in **Pause_Main**.
    We need to perform steps similar to these, but instead of beginning the retrieval
    of party members in **FieldPlayer**, we must do it in the class in which we created
    the **Pause_Inventory**, which was created in **Pause_Main**. So, navigate to
    the Event Graph of the **Pause_Main** widget:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你此时测试库存屏幕，你会看到HP值为0，但不要慌张，现在由于**FieldPlayer**为我们的人物提供了一个通用的框架，你不需要进行太多关键的思考来纠正这个值。如果你记得，当我们创建**FieldPlayer**类中的**Pause_Main**小部件后，我们从游戏实例中拉取了我们添加的团队成员，并将其设置在**Pause_Main**中的**Character
    Target**。我们需要执行类似的步骤，但不是在**FieldPlayer**中开始检索团队成员，而是在创建**Pause_Inventory**的类中执行，该类是在**Pause_Main**中创建的。所以，导航到**Pause_Main**小部件的事件图：
- en: '![Displaying stats](img/B04548_05_22.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![显示统计信息](img/B04548_05_22.jpg)'
- en: 'In the preceding screenshot, we see that we are creating both the **Pause_Inventory**
    and **Pause_Equipment** widgets by clicking on their respective buttons. When
    the screens are created, we remove the current viewport. This is a perfect spot
    to create our **RPGGameInstance**. So, as mentioned in the previous steps, create
    a **Get Game Instance**, which is located under **Game**. Then, set the return
    value to **Cast to RPGGameInstance** by going to **Utilities** | **Casting**,
    which will then reference the **Party Members** array located at **Game Data**
    under **Variables**. Here, you will use the **Get** function by going to **Utilities**
    | **Array**, and link it to the **Party Members** array, pulling index 0\. This
    is what you should have done, and so far, the steps are identical to what you
    did in the **FieldPlayer**:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，我们看到我们通过点击相应的按钮创建了**Pause_Inventory**和**Pause_Equipment**小部件。当屏幕创建完成后，我们移除当前视口。这是一个创建我们的**RPGGameInstance**的完美位置。所以，如前所述，创建一个位于**Game**下的**Get
    Game Instance**。然后，通过转到**Utilities** | **Casting**将返回值设置为**Cast to RPGGameInstance**，这将引用位于**Variables**下的**Game
    Data**中的**Party Members**数组。在这里，你将通过转到**Utilities** | **Array**使用**Get**函数，并将其链接到**Party
    Members**数组，拉取索引0。这就是你应该做的，到目前为止，步骤与你之前在**FieldPlayer**中做的相同：
- en: '![Displaying stats](img/B04548_05_23.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![显示统计信息](img/B04548_05_23.jpg)'
- en: 'The differences set in when you set the **Character Target**. As mentioned
    earlier, we will set the **Character Target** variable of our newly created **Character
    Target** variable to **Pause_Inventory**:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当你设置**Character Target**时，会设置不同的差异。如前所述，我们将设置我们新创建的**Character Target**变量的**Character
    Target**变量为**Pause_Inventory**：
- en: '![Displaying stats](img/B04548_05_24.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![显示统计信息](img/B04548_05_24.jpg)'
- en: 'Once this is done, link the out pin of **Cast To RPGGameInstance** to the in
    pin of **Set Character Target**. Also, link **Get** to **Character Target**:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成，将**Cast To RPGGameInstance**的输出引脚链接到**Set Character Target**的输入引脚。同时，将**Get**链接到**Character
    Target**：
- en: '![Displaying stats](img/B04548_05_25.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![显示统计信息](img/B04548_05_25.jpg)'
- en: 'Lastly, link the out pin of **Add to Viewport** coming from **Pause_Inventory**
    to the in pin of **Cast To RPGGameInstance** to trigger the retrieval of the character
    stats, and link the **Return Value** of the **Create Pause_Inventory Widget**
    to **Target** of **Set Character Target**:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将来自**Pause_Inventory**的**Add to Viewport**的输出引脚链接到**Cast To RPGGameInstance**的输入引脚，以触发角色统计信息的检索，并将**Create
    Pause_Inventory Widget**的**Return Value**链接到**Set Character Target**的**Target**：
- en: '![Displaying stats](img/B04548_05_26.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![显示统计信息](img/B04548_05_26.jpg)'
- en: 'At this point, if you test the inventory screen, you will notice that the HP
    value is being displayed properly:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，如果你测试库存屏幕，你会注意到HP值被正确显示：
- en: '![Displaying stats](img/B04548_05_28.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![显示统计信息](img/B04548_05_28.jpg)'
- en: Now that you know how to create references to party members from **Pause_Main**,
    you can follow the same steps to set each party member as a character target in
    **Pause_Inventory**. But first, we need to complete all of the stat value displays
    in **Pause_Inventory** by creating bindings in each stat's respective Text Block
    and setting the **Return Value** of each Text Block to the value retrieved from
    **Character Target**.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经知道了如何从**Pause_Main**创建对党派成员的引用，你可以遵循相同的步骤将每个党派成员设置为**Pause_Inventory**中的角色目标。但首先，我们需要通过在每个属性的相应文本块中创建绑定并设置每个文本块的**返回值**为从**角色目标**检索到的值来完成**Pause_Inventory**中所有属性值显示。
- en: 'Once you are finished with the soldier in your **Pause_Inventory**, you will
    see something that looks like this:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你在**Pause_Inventory**中的士兵上完成操作，你将看到类似这样的东西：
- en: '![Displaying stats](img/B04548_05_29.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![显示属性](img/B04548_05_29.jpg)'
- en: 'At this point, you can easily navigate back to **Pause_Equipment**, create
    a new **Character Target** variable, then set a **Party Members** to the **Character
    Target** variable on displaying **Pause_Equipment** in **Pause_Main**, just like
    you did in **Pause_Inventory**. The **Inventory** and **Equipment** buttons in
    the **Pause_Main** Event Graph should look something like this when you are done:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你可以轻松地返回到**Pause_Equipment**，创建一个新的**Character Target**变量，然后在**Pause_Main**中显示**Pause_Equipment**时将**Party
    Members**设置为**Character Target**变量，就像你在**Pause_Inventory**中做的那样。当你完成时，**Pause_Main**事件图中的**Inventory**和**Equipment**按钮应该看起来像这样：
- en: '![Displaying stats](img/B04548_05_30.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![显示属性](img/B04548_05_30.jpg)'
- en: 'In the **Pause_Equipment** widget, we can only bind the **AP**, **DP**, **Lk**,
    and **Name** Text Blocks, as we will be leaving the weapons for later. If you
    bind these Text Blocks with the newly created **Character Target** in exactly
    the same way you bound the **Pause_Inventory** Text Blocks, your **Equipment**
    screen will look like this on testing:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在**Pause_Equipment**小部件中，我们只能绑定**AP**、**DP**、**Lk**和**Name**文本块，因为我们将在稍后处理武器。如果你以与绑定**Pause_Inventory**文本块完全相同的方式使用新创建的**Character
    Target**绑定这些文本块，你的**Equipment**屏幕在测试时将看起来像这样：
- en: '![Displaying stats](img/B04548_05_31.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![显示属性](img/B04548_05_31.jpg)'
- en: At this point, we have finished binding character stats to our pause menu screens
    for now.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经完成了将角色属性绑定到我们的暂停菜单屏幕的工作。
- en: Summary
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we added the current character stats to the pause menu. Now
    that we are comfortable with UMG, we will be moving on to communicating with NPCs
    via dialog boxes, along with adding a shop to the game.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将当前的角色属性添加到了暂停菜单。现在我们已经熟悉了UMG，我们将继续通过对话框与NPC进行通信，并添加一个商店到游戏中。
