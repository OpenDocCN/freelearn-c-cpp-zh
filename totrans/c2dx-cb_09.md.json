["```cpp\n    Scene* HelloWorld::createScene()\n    {\n        auto scene = Scene::createWithPhysics();\n        auto layer = HelloWorld::create();\n        scene->addChild(layer);\n    \treturn scene;\n    }\n    ```", "```cpp\n    bool HelloWorld::init()\n    {\n        if ( !Layer::init() )\n        {\n            return false;\n        }\n        Size visibleSize = Director::getInstance()->getVisibleSize();\n        Vec2 origin = Director::getInstance()->getVisibleOrigin();\n\n        auto wall = Node::create();\n        auto wallBody = PhysicsBody::createEdgeBox(visibleSize, \n    PhysicsMaterial(0.1f, 1.0f, 0.0f)); \n        wall->setPhysicsBody(wallBody);\n        wall->setPosition(Vec2(visibleSize.width/2+origin.x, \n    VisibleSize.height/2+origin.y));\n        addChild(wall);\n\n        auto sprite = Sprite::create(\"CloseNormal.png\");\n        sprite->setPosition(visibleSize/2);\n        auto physicsBody = PhysicsBody::createCircle(sprite-\n    >getContentSize().width/2);\n        physicsBody->setDynamic(true); \n        sprite->setPhysicsBody(physicsBody);\n        this->addChild(sprite);\n\n        return true;\n    }\n    ```", "```cpp\nScene* HelloWorld::createScene()\n{\n    auto scene = Scene::createWithPhysics();\n    auto layer = HelloWorld::create();\n    scene->addChild(layer);\n\n    PhysicsWorld* world = scene->getPhysicsWorld();\n    world->setDebugDrawMask(PhysicsWorld::DEBUGDRAW_ALL);\n\n    return scene;\n}\n```", "```cpp\nPhysicsWorld* world = scene->getPhysicsWorld();\nauto gravity = Vec2(0, 98.0f);\nworld->setGravity(gravity);\n```", "```cpp\n    auto contactListener = \n    EventListenerPhysicsContact::create();\n    contactListener->onContactBegin = [](PhysicsContact& contact){\n        CCLOG(\"contact begin\");\n        auto shapeA = contact.getShapeA();\n        auto bodyA = shapeA->getBody();\n\n        auto shapeB = contact.getShapeB();\n        auto bodyB = shapeB->getBody();\n        return true;\n    };\n    this->getEventDispatcher()->addEventListenerWithSceneGraphPriority(contactListener, this);\n    ```", "```cpp\n    auto wallBody = PhysicsBody::createEdgeBox(visibleSize, PhysicsMaterial(0.1f, 1.0f, 0.0f)); \n    wallBody->setContactTestBitmask(1);\n\n    auto physicsBody = PhysicsBody::createCircle(sprite->getContentSize().width/2);\n    physicsBody->setContactTestBitmask(1);\n    ```", "```cpp\ncontactListener->onContactBegin = [](PhysicsContact& contact){\n    CCLOG(\"contact begin\");\n    auto shapeA = contact.getShapeA();\n    auto bodyA = shapeA->getBody();\n\n    auto shapeB = contact.getShapeB();\n    auto bodyB = shapeA->getBody();\n    return true;\n};\n```", "```cpp\ncocos2d::Sprite* makeSprite();\n```", "```cpp\nSprite* HelloWorld::makeSprite()\n{\n    auto sprite = Sprite::create(\"CloseNormal.png\");\n    auto physicsBody = PhysicsBody::createCircle(sprite->getContentSize().width/2);\n    physicsBody->setDynamic(true);\n    physicsBody->setContactTestBitmask(true);\n    sprite->setPhysicsBody(physicsBody);\n    return sprite;\n}\n```", "```cpp\n    void onEnter();\n    cocos2d::DrawNode* _drawNode;\n    cocos2d::PhysicsWorld* _world;\n    ```", "```cpp\n    void HelloWorld::onEnter()\n    {\n        Layer::onEnter();\n\n        Size visibleSize = Director::getInstance()->getVisibleSize();\n        Vec2 origin = Director::getInstance()->getVisibleOrigin();\n\n        _world = Director::getInstance()->getRunningScene()->getPhysicsWorld();\n\n        // wall\n        auto wall = Node::create();\n        auto wallBody = PhysicsBody::createEdgeBox(visibleSize, PhysicsMaterial(0.1f, 1.0f, 0.0f));\n        wallBody->setContactTestBitmask(true);\n        wall->setPhysicsBody(wallBody);\n        wall->setPosition(Vec2(visibleSize.width/2+origin.x, visibleSize.height/2+origin.y));\n        addChild(wall);\n\n        // gear object 1\n        auto sp1 = this->makeSprite();\n        sp1->setPosition(visibleSize/2);\n        this->addChild(sp1);\n        // gear object 2\n       auto sp2 = this->makeSprite();\n        sp2->setPosition(Vec2(visibleSize.width/2+2, visibleSize.height));\n        this->addChild(sp2);\n\n        // joint: gear\n        auto body1 = sp1->getPhysicsBody();\n        auto body2 = sp2->getPhysicsBody();\n        auto pin1 = PhysicsJointPin::construct(body1, wallBody, sp1->getPosition());  \n        _world->addJoint(pin1);\n        auto pin2 = PhysicsJointPin::construct(body2, wallBody, sp2->getPosition());\n        _world->addJoint(pin2);\n        auto joint = PhysicsJointGear::construct(body1, body2, 0.0f, 2.0f);\n        _world->addJoint(joint);\n    }\n    ```", "```cpp\n    bool onTouchBegan(cocos2d::Touch* touch, cocos2d::Event* event);\n    void onTouchMoved(cocos2d::Touch* touch, cocos2d::Event* event);\n    void onTouchEnded(cocos2d::Touch* touch, cocos2d::Event* event);\n    cocos2d::Node* _touchNode;\n    ```", "```cpp\n    auto touchListener = EventListenerTouchOneByOne::create();\n    touchListener->onTouchBegan = CC_CALLBACK_2(HelloWorld::onTouchBegan, this);\n    touchListener->onTouchMoved = CC_CALLBACK_2(HelloWorld::onTouchMoved, this);\n    touchListener->onTouchEnded = CC_CALLBACK_2(HelloWorld::onTouchEnded, this);\n    _eventDispatcher->addEventListenerWithSceneGraphPriority(touchListener, this);\n    ```", "```cpp\n    bool HelloWorld::onTouchBegan(Touch* touch, Event* event)\n    {\n        auto location = touch->getLocation();\n        auto shapes = _world->getShapes(location);\n        if (shapes.size()<=0) {\n            return false;\n    \t}\n        PhysicsShape* shape = shapes.front();\n        PhysicsBody* body = shape->getBody();\n        if (body != nullptr) {\n            _touchNode = Node::create();\n            auto touchBody = PhysicsBody::create(PHYSICS_INFINITY, PHYSICS_INFINITY);\n            _touchNode->setPhysicsBody(touchBody);\n            _touchNode->getPhysicsBody()->setDynamic(false);\n            _touchNode->setPosition(location);\n            this->addChild(_touchNode);\n            PhysicsJointPin* joint = PhysicsJointPin::construct(touchBody, body, location);\n            joint->setMaxForce(5000.0f * body->getMass());\n            _world->addJoint(joint);\n            return true;\n        }\n        return false;\n    }\n\n    void HelloWorld::onTouchMoved(Touch* touch, Event* event)\n    {\n        if (_touchNode!=nullptr) {\n            _touchNode->setPosition(touch->getLocation());\n        }\n    }\n\n    void HelloWorld::onTouchEnded(Touch* touch, Event* event)\n    {\n        if (_touchNode!=nullptr) {\n            _touchNode->removeFromParent();\n            _touchNode = nullptr;\n        }\n    }\n    ```", "```cpp\n    auto pin1 = PhysicsJointPin::construct(body1, wallBody, sp1->getPosition());\n    ```", "```cpp\n    auto joint = PhysicsJointGear::construct(body1, body2, 0.0f, 2.0f);\n    _world->addJoint(joint);\n    ```", "```cpp\n    auto location = touch->getLocation();\n    auto shapes = _world->getShapes(location);\n    if (shapes.size()<=0) {\n        return false;\n    }\n    ```", "```cpp\n    PhysicsShape* shape = shapes.front();\n    PhysicsBody* body = shape->getBody();\n    if (body != nullptr) {\n        _touchNode = Node::create();\n        auto touchBody = PhysicsBody::create(PHYSICS_INFINITY, PHYSICS_INFINITY);\n        _touchNode->setPhysicsBody(touchBody);\n        _touchNode->getPhysicsBody()->setDynamic(false);\n        _touchNode->setPosition(location);\n        this->addChild(_touchNode);\n    ```", "```cpp\n    PhysicsJointPin* joint = PhysicsJointPin::construct(touchBody, body, location);\n    joint->setMaxForce(5000.0f * body->getMass());\n    _world->addJoint(joint);\n    ```", "```cpp\n    void HelloWorld::onTouchMoved(Touch* touch, Event* event)\n    {\n        if (_touchNode!=nullptr) {\n            _touchNode->setPosition(touch->getLocation());\n        }\n    }\n    ```", "```cpp\n    void HelloWorld::onTouchEnded(Touch* touch, Event* event)\n    {\n        if (_touchNode!=nullptr) {\n            _touchNode->removeFromParent();\n            _touchNode = nullptr;\n        }}\n    ```", "```cpp\n- (BOOL) shouldAutorotate {\n    return NO;\n}\n```", "```cpp\nDevice::setAccelerometerEnabled(true);\nauto listener = EventListenerAcceleration::create([=](Acceleration* acc, Event* event){\n    auto gravity = Vec2(acc->x*100.0f, acc->y*100.0f);\n    world->setGravity(gravity);\n});\nthis->getEventDispatcher()->addEventListenerWithSceneGraphPriority(listener, this);\n```", "```cpp\nauto gravity = Vec2(acc->x*100.0f, acc->y*100.0f);\n```"]