["```cpp\nextends Area2D\n@export var speed = 350\nvar velocity = Vector2.ZERO\nvar screensize = Vector2(480, 720)\n```", "```cpp\nfunc _process(delta):\n    velocity = Input.get_vector(\"ui_left\", \"ui_right\",\n        \"ui_up\", \"ui_down\")\n    position += velocity * speed * delta\n```", "```cpp\n    position.x = clamp(position.x, 0, screensize.x)\n    position.y = clamp(position.y, 0, screensize.y)\n```", "```cpp\nif velocity.length() > 0:\n    $AnimatedSprite2D.animation = \"run\"\nelse:\n    $AnimatedSprite2D.animation = \"idle\"\nif velocity.x != 0:\n    $AnimatedSprite2D.flip_h = velocity.x < 0\n```", "```cpp\nfunc start():\n    set_process(true)\n    position = screensize / 2\n    $AnimatedSprite2D.animation = \"idle\"\n```", "```cpp\nfunc die():\n    $AnimatedSprite2D.animation = \"hurt\"\n    set_process(false)\n```", "```cpp\nsignal pickup\nsignal hurt\n```", "```cpp\nfunc _on_area_entered(area):\n    if area.is_in_group(\"coins\"):\n        area.pickup()\n        pickup.emit()\n    if area.is_in_group(\"obstacles\"):\n        hurt.emit()\n        die()\n```", "```cpp\nextends Area2D\nsignal pickup\nsignal hurt\n@export var speed = 350\nvar velocity = Vector2.ZERO\nvar screensize = Vector2(480, 720)\nfunc _process(delta):\n    # Get a vector representing the player's input\n    # Then move and clamp the position inside the screen\n    velocity = Input.get_vector(\"ui_left\", \"ui_right\",\n        \"ui_up\", \"ui_down\")\n    position += velocity * speed * delta\n    position.x = clamp(position.x, 0, screensize.x)\n    position.y = clamp(position.y, 0, screensize.y)\n    # Choose which animation to play\n    if velocity.length() > 0:\n        $AnimatedSprite2D.animation = \"run\"\n    else:\n        $AnimatedSprite2D.animation = \"idle\"\n    if velocity.x != 0:\n        $AnimatedSprite2D.flip_h = velocity.x < 0\nfunc start():\n    # This function resets the player for a new game\n    set_process(true)\n    position = screensize / 2\n    $AnimatedSprite2D.animation = \"idle\"\nfunc die():\n    # We call this function when the player dies\n    $AnimatedSprite2D.animation = \"hurt\"\n    set_process(false)\nfunc _on_area_entered(area):\n    # When we hit an object, decide what to do\n    if area.is_in_group(\"coins\"):\n        area.pickup()\n        pickup.emit()\n    if area.is_in_group(\"obstacles\"):\n        hurt.emit()\n        die()\n```", "```cpp\nextends Area2D\nvar screensize = Vector2.ZERO\nfunc pickup():\n    queue_free()\n```", "```cpp\nextends Node\n@export var coin_scene : PackedScene\n@export var playtime = 30\nvar level = 1\nvar score = 0\nvar time_left = 0\nvar screensize = Vector2.ZERO\nvar playing = false\n```", "```cpp\nfunc _ready():\n    screensize = get_viewport().get_visible_rect().size\n    $Player.screensize = screensize\n    $Player.hide()\n```", "```cpp\nfunc new_game():\n    playing = true\n    level = 1\n    score = 0\n    time_left = playtime\n    $Player.start()\n    $Player.show()\n    $GameTimer.start()\n    spawn_coins()\n```", "```cpp\nfunc spawn_coins():\n    for i in level + 4:\n        var c = coin_scene.instantiate()\n        add_child(c)\n        c.screensize = screensize\n        c.position = Vector2(randi_range(0, screensize.x),\n            randi_range(0, screensize.y))\n```", "```cpp\nfunc _process(delta):\n    if playing and\n    get_tree().get_nodes_in_group(\"coins\").size() == 0:\n        level += 1\n        time_left += 5\n        spawn_coins()\n```", "```cpp\nextends CanvasLayer\nsignal start_game\nfunc update_score(value):\n    $MarginContainer/Score.text = str(value)\nfunc update_timer(value):\n    $MarginContainer/Time.text = str(value)\n```", "```cpp\nfunc show_message(text):\n    $Message.text = text\n    $Message.show()\n    $Timer.start()\n```", "```cpp\nfunc _on_timer_timeout():\n    $Message.hide()\n```", "```cpp\nfunc _on_start_button_pressed():\n    $StartButton.hide()\n    $Message.hide()\n    start_game.emit()\n```", "```cpp\nfunc show_game_over():\n    show_message(\"Game Over\")\n    await $Timer.timeout\n    $StartButton.show()\n    $Message.text = \"Coin Dash!\"\n    $Message.show()\n```", "```cpp\nfunc _on_game_timer_timeout():\n    time_left -= 1\n    $HUD.update_timer(time_left)\n    if time_left <= 0:\n        game_over()\n```", "```cpp\nfunc _on_player_hurt():\n    game_over()\nfunc _on_player_pickup():\n    score += 1\n    $HUD.update_score(score)\n```", "```cpp\nfunc game_over():\n    playing = false\n    $GameTimer.stop()\n    get_tree().call_group(\"coins\", \"queue_free\")\n    $HUD.show_game_over()\n    $Player.die()\n```", "```cpp\nfunc _on_hud_start_game():\n    new_game()\n```", "```cpp\n$HUD.update_score(score)\n$HUD.update_timer(time_left)\n```", "```cpp\nfunc pickup():\n    $CollisionShape2d.set_deferred(\"disabled\", true)\n    var tw = create_tween().set_parallel().\n        set_trans(Tween.TRANS_QUAD)\n    tw.tween_property(self, \"scale\", scale * 3, 0.3)\n    tw.tween_property(self, \"modulate:a\", 0.0, 0.3)\n    await tw.finished\n    queue_free()\n```", "```cpp\nfunc _on_lifetime_timout():\n    queue_free()\n```", "```cpp\nfunc _on_powerup_timer_timeout():\n    var p = powerup_scene.instantiate()\n    add_child(p)\n    p.screensize = screensize\n    p.position = Vector2(randi_range(0, screensize.x),\n        randi_range(0, screensize.y))\n```", "```cpp\n@export var powerup_scene : PackedScene\n```", "```cpp\nfunc _on_area_entered(area):\n    if area.is_in_group(\"coins\"):\n        area.pickup()\n        pickup.emit(\"coin\")\n    if area.is_in_group(\"powerups\"):\n        area.pickup()\n        pickup.emit(\"powerup\")\n    if area.is_in_group(\"obstacles\"):\n        hurt.emit()\n        die()\n```", "```cpp\nfunc _on_player_pickup(type):\n    match type:\n        \"coin\":\n            $CoinSound.play()\n            score += 1\n            $HUD.update_score(score)\n        \"powerup\":\n            $PowerupSound.play()\n            time_left += 5\n            $HUD.update_timer(time_left)\n```", "```cpp\nfunc _ready():\n    $Timer.start(randf_range(3, 8))\n```", "```cpp\nfunc _on_timer_timeout():\n    $AnimatedSprite2d.frame = 0\n    $AnimatedSprite2d.play()\n```", "```cpp\nfunc _on_area_entered(area):\n    if area.is_in_group(\"obstacles\"):\n        position = Vector2(randi_range(0, screensize.x),\n            randi_range(0, screensize.y))\n```"]