["```cpp\nint x = 5;\nint a = x;\nfloat y = 9.87; \nfloat y2 = 10.76f;  // optional 'f' suffix on float literal\nfloat b = y;\ndouble yy = 123456.78;\ndouble c = yy;\nchar z = 'Z';\nchar d = z;\nbool test = true;\nbool e = test;\nbool f = !test;\n```", "```cpp\nchar name[10] = \"Dorothy\"; // size is larger than needed\nfloat grades[20];  // array is not initialized; caution!\ngrades[0] = 4.0;  // assign a value to one element of array\nfloat scores[] = {3.3, 4.3, 4.0, 3.7}; // initialized array\n```", "```cpp\n// size of array can be calculated by initializer\nchar book1[] = \"C++ Programming\"; \nchar book2[25];  // this string is uninitialized; caution!\n// use caution as to not overflow destination (book2)\nstrcpy(book2, \"OO Programming with C++\"); \nstrcmp(book1, book2);\nlength = strlen(book2);\nstring book3 = \"Advanced C++ Programming\";  // safer usage\nstring book4(\"OOP with C++\"); // alt. way to init. string\nstring book5(book4); // create book5 using book4 as a basis\n```", "```cpp\n#include <iostream>\nusing namespace std;  // we'll limit the namespace shortly\nint main()\n{\n    char name[20];  // caution, uninitialized array of char\n    int age = 0;\n    cout << \"Please enter a name and an age: \";\n    cin >> name >> age; // caution, may overflow name var.\n    cout << \"Hello \" << name;\n    cout << \". You are \" << age << \" years old.\" << endl;\n    return 0;\n}\n```", "```cpp\n#include <iostream>\n#include <iomanip>\nusing namespace std;   // we'll limit the namespace shortly\nint main()\n{\n    char name[20];     // caution; uninitialized array\n    float gpa = 0.0;   // grade point average\n    cout << \"Please enter a name and a gpa: \"; \n    cin >> setw(20) >> name >> gpa;  // won't overflow name\n    cout << \"Hello \" << name << flush;\n    cout << \". GPA is: \" << setprecision(3) << gpa << endl;\n    return 0;\n}\n```", "```cpp\n#include <iostream>\nusing namespace std;   // we'll limit the namespace shortly\nint main()\n{\n    int x = 0;\n    cout << \"Enter an integer: \";\n    cin >> x;\n    if (x == 0) \n        cout << \"x is 0\" << endl;\n    else if (x < 0)\n        cout << \"x is negative\" << endl;\n    else\n    {\n        cout << \"x is positive\";\n        cout << \"and ten times x is: \" << x * 10 << endl;\n    }  \n    return 0;\n}\n```", "```cpp\n#include <iostream>\nusing namespace std;   // we'll limit the namespace shortly\nint main()\n{\n    int i = 0;\n    while (i < 10)\n    {\n        cout << i << endl;\n        i++;\n    }\n    i = 0;\n    do \n    {\n        cout << i << endl;\n        i++;\n    } while (i < 10);\n    return 0;\n}\n```", "```cpp\n#include <iostream>\nusing namespace std;   // we'll limit the namespace shortly\nint main()\n{\n    // though we'll prefer to declare i within the loop\n    // construct, let's understand scope in both scenarios\n    int i; \n    for (i = 0; i < 10; i++) \n        cout << i << endl;\n    for (int j = 0; j < 10; j++)   // preferred declaration\n        cout << j << endl;      // of loop control variable\n    return 0;\n}\n```", "```cpp\n#include <iostream>\nusing namespace std;   // we'll limit the namespace shortly\nint main()\n{\n    for (int i = 0; i < 10; i++) \n    {\n        cout << i << endl;\n        for (int j = 0; j < 10; j++)\n            cout << j << endl;\n        cout << \"\\n\";\n    }\n    return 0;\n}\n```", "```cpp\nscore += 5;\nscore++;\nif (score == 100)\n    cout << \"You have a perfect score!\" << endl;\nelse\n    cout << \"Your score is: \" << score << endl;\n// equivalent to if - else above, but using ?: operator\n(score == 100)? cout << \"You have a perfect score\" << endl:\n                cout << \"Your score is: \" << score << endl; \n```", "```cpp\n<return type> FunctionName (<argumentType argument1, …>)\n{\n    expression 1…N;\n    <return value/expression;>\n}\n```", "```cpp\n#include <iostream>\nusing namespace std;   // we'll limit the namespace shortly\nint Minimum(int a, int b)\n{\n    if (a < b)\n        return a;\n    else\n        return b;\n}\nint main()\n{\n    int x = 0, y = 0;\n    cout << \"Enter two integers: \";\n    cin >> x >> y;\n    cout << \"The minimum is: \" << Minimum(x, y) << endl;\n    return 0;\n}\n```", "```cpp\n#include <iostream>\nusing namespace std;   // we'll limit the namespace shortly\nstruct student\n{\n    string name;\n    float semesterGrades[5];\n    float gpa;\n};\nint main()\n{\n    student s1;\n    s1.name = \"George Katz\";\n    s1.semesterGrades[0] = 3.0;\n    s1.semesterGrades[1] = 4.0;\n    s1.gpa = 3.5;\n    cout << s1.name << \" has GPA: \" << s1.gpa << endl;\n    return 0;        \n}\n```", "```cpp\ntypedef float dollars; \nusing money = float;\n```", "```cpp\n#include <iostream>\nusing namespace std;   // we'll limit the namespace shortly\nclass Student\n{\npublic:\n    string name;\n    float semesterGrades[5];\n    float gpa;\n};\nint main()\n{\n    Student s1;\n    s1.name = \"George Katz\";\n    s1.semesterGrades[0] = 3.0;\n    s1.semesterGrades[1] = 4.0;\n    s1.gpa = 3.5;\n    cout << s1.name << \" has GPA: \" << s1.gpa << endl;\n    return 0;      \n}\n```", "```cpp\n#include <iostream>\nusing namespace std;   // we'll limit the namespace shortly\n// traditional enumerated types\nenum day {Sunday, Monday, Tuesday, Wednesday, Thursday,\n          Friday, Saturday};\nenum workDay {Mon = 1, Tues, Wed, Thurs, Fri};\n// strongly-typed enumerated types can be a struct or class\nenum struct WinterHoliday {Diwali, Hanukkah, ThreeKings,\n  WinterSolstice, StLucia, StNicholas, Christmas, Kwanzaa};\nenum class Holiday : short int {NewYear = 1, MLK, Memorial,\n  Independence, Labor, Thanksgiving};\nint main()\n{\n    day birthday = Monday;\n    workDay payday = Fri;\n    WinterHoliday myTradition = WinterHoliday::StNicholas;\n    Holiday favorite = Holiday::NewYear;\n    cout << \"Birthday is \" << birthday << endl;\n    cout << \"Payday is \" << payday << endl;\n    cout << \"Traditional Winter holiday is \" << \n             static_cast<int> (myTradition) << endl;\n    cout << \"Favorite holiday is \" << \n             static_cast<short int> (favorite) << endl;\n    return 0;      \n}\n```", "```cpp\n#include <iostream>\n// using namespace std; // Do not open entire std namespace\nusing std::cout;   // Instead, activate individual elements\nusing std::endl;   // within the namespace as needed\nnamespace DataTypes\n{\n    int total;\n    class LinkList\n    {  // full class definition … \n    };\n    class Stack\n    {  // full class definition …\n    };\n};\nnamespace AbstractDataTypes\n{\n    class Stack\n    {  // full class definition …\n    };\n    class Queue\n    {  // full class description …\n    };\n};\n// Add entries to the AbstractDataTypes namespace\nnamespace AbstractDataTypes   \n{\n    int total;\n    class Tree\n    {  // full class definition …\n    };\n};\nint main()\n{\n    using namespace AbstractDataTypes; //activate namespace\n    using DataTypes::LinkList;    // activate only LinkList \n    LinkList list1;     // LinkList is found in DataTypes\n    Stack stack1;    // Stack is found in AbstractDataTypes\n    total = 5;       // total from active AbstractDataTypes\n    DataTypes::total = 85;// specify non-active mbr., total\n    cout << \"total \" << total << \"\\n\";\n    cout << \"DataTypes::total \" << DataTypes::total;\n    cout << endl;\n    return 0;        \n}\n```"]