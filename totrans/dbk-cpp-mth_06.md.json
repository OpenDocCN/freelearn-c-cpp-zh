["```cpp\nint doSomeWork(int value1, int value2, int value3, int value4) {\nint array[3];\narray[0] = value1;\narray[1] = value2;\narray[3] = value3;\narray[4] = value4;\nreturn array[0] + array[1] + array[3] + array[4];\n}\n```", "```cpp\nint pointerBounds() {\n    int *aPointerToInt;\n    void *aPointerToVoid;\n    aPointerToVoid = new int();\n    aPointerToInt = (int*)aPointerToVoid;\n    *aPointerToInt = 234;\n    aPointerToInt = (int*)((char*)aPointerToVoid + sizeof(int));\n    *aPointerToInt = 2423;\n    int value = *aPointerToInt;\n    delete aPointerToVoid;\n    return value;\n}\nTEST_CASE(\"try pointer bounds\"){\nint result = pointerBounds();\nCHECK_EQ(2423, result);\n}\n```", "```cpp\nint danglingPointer() {\n    int *aPointerToInt = new int(234);\n    delete aPointerToInt;\n    return *aPointerToInt;\n}\nTEST_CASE(\"Try dangling pointer\"){\nint result = danglingPointer();\nCHECK_EQ(234, result);\n}\n```", "```cpp\ntest.cpp:8: ERROR: CHECK_EQ( 234, result ) is NOT correct!\n  values: CHECK_EQ( 234, 721392248 )\n```", "```cpp\ntest.cpp:8: ERROR: CHECK_EQ( 234, result ) is NOT correct!\n  values: CHECK_EQ( 234, 1757279720 )\ntest.cpp:8: ERROR: CHECK_EQ( 234, result ) is NOT correct!\n  values: CHECK_EQ( 234, -1936531037 )\n```", "```cpp\nint doSomeWork(int value1, int value2, int value3, int value4) {\nvector<int> values;\nvalues[0] = value1;\nvalues[1] = value2;\nvalues[3] = value3;\nvalues[4] = value4;\nreturn values[0] + values[1] + values[3] + values[4];\n}\nTEST_CASE(\"try vector bounds\"){\nint result = doSomeWork(1, 234, 543, 23423);\nCHECK_EQ(1 + 234 + 543 + 23423, result);\n}\n```", "```cpp\nTEST CASE:  try vector bounds\ntest.cpp:5: FATAL ERROR: test case CRASHED: SIGSEGV - Segmentation violation signal\n```", "```cpp\nint doSomeWork(int value1, int value2, int value3, int value4) {\nvector<int> values;\nvalues.reserve(5);\nvalues[0] = value1;\nvalues[1] = value2;\nvalues[3] = value3;\nvalues[4] = value4;\nreturn values[0] + values[1] + values[3] + values[4];\n}\n```", "```cpp\nint doSomeWork(int value1, int value2, int value3, int value4) {\nvector<int> values{value1, value2, 0, value3, value4};\nreturn values[0] + values[1] + values[3] + values[4];\n}\n```", "```cpp\nint doSomeWork(int value1, int value2, int value3, int value4) {\nvector<int> values;\nvalues.push_back(value1);\nvalues.push_back(value2);\nvalues.push_back(0);\nvalues.push_back(value3);\nvalues.push_back(value4);\nreturn values[0] + values[1] + values[3] + values[4];\n}\n```", "```cpp\nint pointerBounds() {\nint *aPointerToInt;\nvoid *aPointerToVoid;\naPointerToVoid = new int();\naPointerToInt = (int*)aPointerToVoid;\n*aPointerToInt = 234;\naPointerToInt = (int*)((char*)aPointerToVoid + sizeof(int));\n*aPointerToInt = 2423;\nint value = *aPointerToInt;\ndelete aPointerToVoid;\nreturn value;\n}\n```", "```cpp\nint danglingPointer() {\n    int *aPointerToInt = new int(234);\n    delete aPointerToInt;\n    return *aPointerToInt;\n}\n```", "```cpp\nint danglingPointer() {\n    unique_ptr<int> aPointerToInt = make_unique<int>(234);\n    return *aPointerToInt;\n}\n```", "```cpp\nint doSomeWork(int value1, int value2, int value3, int value4) {\n    vector<int> values;\n    values[0] = value1;\n    values[1] = value2;\n    values[3] = value3;\n    values[4] = value4;\n    return values[0] + values[1] + values[3] + values[4];\n}\n```"]