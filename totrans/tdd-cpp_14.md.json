["```cpp\nSimpleService project root folder\n    MereTDD folder\n        Test.h\n    MereMemo folder\n        Log.h\n    SimpleService folder\n        tests folder\n            main.cpp\n            Message.cpp\n            SetupTeardown.cpp\n            SetupTeardown.h\n        LogTags.h\n        Service.cpp\n        Service.h\n```", "```cpp\n#include <MereTDD/Test.h>\n#include <iostream>\nint main ()\n{\n    return MereTDD::runTests(std::cout);\n}\n```", "```cpp\n#include \"../Service.h\"\n#include <MereTDD/Test.h>\nusing namespace MereTDD;\nTEST(\"Request can be sent and response received\")\n{\n    std::string user = \"123\";\n    std::string path = \"\";\n    std::string request = \"Hello\";\n    std::string expectedResponse = \"Hi, \" + user;\n    SimpleService::Service service;\n    service.start();\n    std::string response = service.handleRequest(\n        user, path, request);\n    CONFIRM_THAT(response, Equals(expectedResponse));\n}\n```", "```cpp\n#include \"../Service.h\"\n#include \"SetupTeardown.h\"\n#include <MereTDD/Test.h>\nusing namespace MereTDD;\nTEST_SUITE(\"Request can be sent and response received\", \"Service 1\")\n{\n    std::string user = \"123\";\n    std::string path = \"\";\n    std::string request = \"Hello\";\n    std::string expectedResponse = \"Hi, \" + user;\n    std::string response = gService1.service().handleRequest(\n        user, path, request);\n    CONFIRM_THAT(response, Equals(expectedResponse));\n}\n```", "```cpp\n#ifndef SIMPLESERVICE_TESTS_SUITES_H\n#define SIMPLESERVICE_TESTS_SUITES_H\n#include \"../Service.h\"\n#include <MereMemo/Log.h>\n#include <MereTDD/Test.h>\nclass ServiceSetup\n{\npublic:\n    void setup ()\n    {\n        mService.start();\n    }\n    void teardown ()\n    {\n    }\n    SimpleService::Service & service ()\n    {\n        return mService;\n    }\nprivate:\n    SimpleService::Service mService;\n};\nextern MereTDD::TestSuiteSetupAndTeardown<ServiceSetup>\ngService1;\n#endif // SIMPLESERVICE_TESTS_SUITES_H\n```", "```cpp\n#include \"SetupTeardown.h\"\nMereTDD::TestSuiteSetupAndTeardown<ServiceSetup>\ngService1(\"Greeting Service\", \"Service 1\");\n```", "```cpp\n#ifndef SIMPLESERVICE_SERVICE_H\n#define SIMPLESERVICE_SERVICE_H\n#include <string>\nnamespace SimpleService\n{\nclass Service\n{\npublic:\n    void start ();\n    std::string handleRequest (std::string const & user,\n        std::string const & path,\n        std::string const & request);\n};\n} // namespace SimpleService\n#endif // SIMPLESERVICE_SERVICE_H\n```", "```cpp\n#include \"Service.h\"\n#include \"LogTags.h\"\n#include <MereMemo/Log.h>\nvoid SimpleService::Service::start ()\n{\n    MereMemo::FileOutput appFile(\"logs\");\n    MereMemo::addLogOutput(appFile);\n    MereMemo::log(info) << \"Service is starting.\";\n}\nstd::string SimpleService::Service::handleRequest (\n    std::string const & user,\n    std::string const & path,\n    std::string const & request)\n{\n    MereMemo::log(debug, User(user), LogPath(path))\n        << \"Received: \" << Request(request);\n    std::string response;\n    if (request == \"Hello\")\n    {\n        response = \"Hi, \" + user;\n    }\n    else\n    {\n        response = \"Unrecognized request.\";\n    }\n    MereMemo::log(debug, User(user), LogPath(path))\n        << \"Sending: \" << Response(response);\n    return response;\n}\n```", "```cpp\n#ifndef SIMPLESERVICE_LOGTAGS_H\n#define SIMPLESERVICE_LOGTAGS_H\n#include <MereMemo/Log.h>\nnamespace SimpleService\n{\ninline MereMemo::LogLevel error(\"error\");\ninline MereMemo::LogLevel info(\"info\");\ninline MereMemo::LogLevel debug(\"debug\");\nclass User : public MereMemo::StringTagType<User>\n{\npublic:\n    static constexpr char key[] = \"user\";\n    User (std::string const & value,\n        MereMemo::TagOperation operation =\n            MereMemo::TagOperation::None)\n    : StringTagType(value, operation)\n    { }\n};\nclass LogPath : public MereMemo::StringTagType<LogPath>\n{\npublic:\n    static constexpr char key[] = \"logpath\";\n    LogPath (std::string const & value,\n        MereMemo::TagOperation operation =\n            MereMemo::TagOperation::None)\n    : StringTagType(value, operation)\n    { }\n};\nclass Request : public MereMemo::StringTagType<Request>\n{\npublic:\n    static constexpr char key[] = \"request\";\n    Request (std::string const & value,\n        MereMemo::TagOperation operation =\n            MereMemo::TagOperation::None)\n    : StringTagType(value, operation)\n    { }\n};\nclass Response : public MereMemo::StringTagType<Response>\n{\npublic:\n    static constexpr char key[] = \"response\";\n    Response (std::string const & value,\n        MereMemo::TagOperation operation =\n            MereMemo::TagOperation::None)\n    : StringTagType(value, operation)\n    { }\n};\n} // namespace SimpleService\n#endif // SIMPLESERVICE_LOGTAGS_H\n```", "```cpp\nRunning 1 test suites\n--------------- Suite: Service 1\n------- Setup: Service 1\nPassed\n------- Test: Message can be sent and received\nPassed\n------- Teardown: Service 1\nPassed\n-----------------------------------\nTests passed: 3\nTests failed: 0\n```", "```cpp\n2022-08-14T05:58:13.543 log_level=\"info\" Service is starting.\n2022-08-14T05:58:13.545 log_level=\"debug\" logpath=\"\" user=\"123\" Received: request=\"Hello\"\n2022-08-14T05:58:13.545 log_level=\"debug\" logpath=\"\" user=\"123\" Sending: response=\"Hi, 123\"\n```"]