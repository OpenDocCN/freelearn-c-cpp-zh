["```cpp\nint main(int argc, char *argv[])\n{\n    QApplication a(argc, argv);\n    QGraphicsScene scene;\n    QGraphicsRectItem *rectItem = \n        new QGraphicsRectItem(QRectF(0, 0, 100, 50));\n    scene.addItem(rectItem);\n    QGraphicsEllipseItem *circleItem =\n        new QGraphicsEllipseItem(QRect(0, 50, 25, 25));\n    scene.addItem(circleItem);\n    QGraphicsSimpleTextItem *textItem =\n        new QGraphicsSimpleTextItem(QObject::tr(\"Demo\"));\n    scene.addItem(textItem);\n    QGraphicsView view(&scene);\n    view.show();\n    return a.exec();\n}\n```", "```cpp\nscene.addLine(-100, 0, 100, 0);\nscene.addLine(0, -100, 0, 100);\nQGraphicsRectItem* rectItem = scene.addRect(50, 50, 50, 50);\n```", "```cpp\nQGraphicsRectItem* rectItem = scene.addRect(50, 50, 50, 50);\nrectItem->setRotation(45);\n```", "```cpp\nQGraphicsRectItem* rectItem = scene.addRect(50, 50, 50, 50);\nrectItem->setTransformOriginPoint(75, 75);\nrectItem->setRotation(45);\n```", "```cpp\nQGraphicsRectItem* rectItem = scene.addRect(50, 50, 50, 50);\nrectItem->setTransformOriginPoint(75, 75);\nQTransform transform;\ntransform.rotate(45);\nrectItem->setTransform(transform);\n```", "```cpp\nQGraphicsRectItem* rectItem = scene.addRect(-25, -25, 50, 50);\nrectItem->setPos(75, 75);\n```", "```cpp\nQGraphicsRectItem* rectItem = scene.addRect(-25, -25, 50, 50);\nrectItem->setPos(75, 75);\nrectItem->setRotation(45);\n```", "```cpp\nQGraphicsRectItem *createComplexItem(\n    qreal width, qreal height, qreal radius) \n{\n    QRectF rect(-width / 2, -height / 2, width, height);\n    QGraphicsRectItem *parent = new QGraphicsRectItem(rect);\n    QRectF circleBoundary(-radius, -radius, 2 * radius, 2 * radius);\n    for(int i = 0; i < 4; i++) {\n        QGraphicsEllipseItem *child =\n            new QGraphicsEllipseItem(circleBoundary, parent);\n        child->setBrush(Qt::black);\n        QPointF pos;\n        switch(i) {\n        case 0:\n            pos = rect.topLeft();\n            break;\n        case 1:\n            pos = rect.bottomLeft();\n            break;\n        case 2:\n            pos = rect.topRight();\n            break;\n        case 3:\n            pos = rect.bottomRight();\n            break;\n        }\n        child->setPos(pos);\n    }\n    return parent;\n}\n```", "```cpp\nQGraphicsRectItem *item1 = createComplexItem(100, 60, 8);\nscene.addItem(item1);\n\nQGraphicsRectItem *item2 = createComplexItem(100, 60, 8);\nscene.addItem(item2);\nitem2->setPos(200, 0);\nitem2->setRotation(20);\n```", "```cpp\nview.setRenderHint(QPainter::Antialiasing);\n```", "```cpp\nQRectF rect(-width / 2, -height / 2, width, height);\nrect.translate(0.5, 0.5);\nQGraphicsRectItem *parent = new QGraphicsRectItem(rect);\n```", "```cpp\nQLinearGradient gradient(0, 0, width, height);\ngradient.setColorAt(0,   Qt::yellow);\ngradient.setColorAt(0.5, Qt::red);\ngradient.setColorAt(1.0, Qt::magenta);\nQBrush brush = gradient; \n```", "```cpp\nitem1->setFlag(QGraphicsItem::ItemIsFocusable, true);\nitem2->setFlag(QGraphicsItem::ItemIsFocusable, true);\n```", "```cpp\nitem1->setFocus();\n```", "```cpp\nstatic const int SIZE = 100;\nstatic const int MARGIN = 10;\nstatic const int FIGURE_COUNT = 5;\nstatic const int LINE_COUNT = 500;\nfor(int figureNum = 0; figureNum < FIGURE_COUNT; ++figureNum) {\n    QPainterPath path;\n    path.moveTo(0, 0);\n    for(int i = 0; i < LINE_COUNT; ++i) {\n        path.lineTo(qrand() % SIZE, qrand() % SIZE);\n    }\n    QGraphicsPathItem *item = scene.addPath(path);\n    item->setPos(figureNum * (SIZE + MARGIN), 0);\n}\n```", "```cpp\nQGraphicsEllipseItem *item1 = scene.addEllipse(0, 0, 100, 50);\nitem1->setBrush(Qt::red);\nQGraphicsEllipseItem *item2 = scene.addEllipse(50, 0, 100, 50);\nitem2->setBrush(Qt::green);\nQGraphicsEllipseItem *item3 = scene.addEllipse(0, 25, 100, 50);\nitem3->setBrush(Qt::blue);\nQGraphicsEllipseItem *item4 = scene.addEllipse(50, 25, 100, 50);\nitem4->setBrush(Qt::gray);\n```", "```cpp\nitem2->setZValue(1);\n```", "```cpp\nQPen pen = parent->pen();\npen.setCosmetic(true);\nparent->setPen(pen);\n```", "```cpp\nchild->setPos(pos);\nQGraphicsSimpleTextItem *text =\n    new QGraphicsSimpleTextItem(QString::number(i), child);\ntext->setBrush(Qt::green);\ntext->setPos(-text->boundingRect().width() / 2,\n             -text->boundingRect().height() / 2);\n```", "```cpp\ntext->setFlag(QGraphicsItem::ItemIgnoresTransformations);\n```", "```cpp\nQGraphicsSimpleTextItem *text =\n        new QGraphicsSimpleTextItem(QString::number(i));\nQRectF textRect = text->boundingRect();\ntextRect.translate(-textRect.center());\nQGraphicsRectItem *rectItem = new QGraphicsRectItem(textRect, child);\nrectItem->setPen(QPen(Qt::green));\nrectItem->setFlag(QGraphicsItem::ItemIgnoresTransformations);\ntext->setParentItem(rectItem);\ntext->setPos(textRect.topLeft());\ntext->setBrush(Qt::green);\n```", "```cpp\nQTransform transform;\ntransform.translate(-text->boundingRect().width() / 2,\n                    -text->boundingRect().height() / 2);\ntext->setTransform(transform);\n```", "```cpp\nQGraphicsItem *foundItem = scene.itemAt(scenePos, QTransform());\n```", "```cpp\nQRect rect = scene.sceneRect().toAlignedRect();\nQImage image(rect.size(), QImage::Format_ARGB32);\nimage.fill(Qt::transparent);\nQPainter painter(&image);\nscene.render(&painter);\nimage.save(\"scene.png\");\n```", "```cpp\nsetRenderHint(QPainter::Antialiasing);\nsetScene(new QGraphicsScene);\n```", "```cpp\ndelete scene();\n```", "```cpp\nstatic const float DX = 1;\nstatic const float MAX_X = 50;\n```", "```cpp\nQRectF SineItem::boundingRect() const\n{\n    return QRectF(0, -1, MAX_X, 2);\n}\n```", "```cpp\nvoid SineItem::paint(QPainter *painter, \n    const QStyleOptionGraphicsItem *option, QWidget *widget)\n{\n    QPen pen;\n    pen.setCosmetic(true);\n    painter->setPen(pen);\n    const int steps = qRound(MAX_X / DX);\n    QPointF previousPoint(0, sin(0));\n    for(int i = 1; i < steps; ++i) {\n        const float x = DX * i;\n        QPointF point(x, sin(x));\n        painter->drawLine(previousPoint, point);\n        previousPoint = point;\n    }\n    Q_UNUSED(option)\n    Q_UNUSED(widget)\n}\n```", "```cpp\nSineItem *item = new SineItem();\nscene()->addItem(item);\n```", "```cpp\nvoid View::wheelEvent(QWheelEvent *event)\n{\n    QGraphicsView::wheelEvent(event);\n    if (event->isAccepted()) {\n        return;\n    }\n    const qreal factor = 1.1;\n    if (event->angleDelta().y() > 0) {\n        scale(factor, factor);\n    } else {\n        scale(1 / factor, 1 / factor);\n    }\n    event->accept();\n}\n```", "```cpp\nconst qreal detail = QStyleOptionGraphicsItem::levelOfDetailFromTransform(\n    painter->worldTransform());\nconst qreal dx = 1 / detail;\n```", "```cpp\nSineItem *item = new SineItem();\nitem->setFlag(QGraphicsItem::ItemIsSelectable);\n```", "```cpp\nif (option->state & QStyle::State_Selected) {\n    pen.setColor(Qt::green);\n}\npainter->setPen(pen);\n```", "```cpp\nif (option->state.testFlag(QStyle::State_Selected)) {  \n```", "```cpp\nvoid SineItem::mousePressEvent(QGraphicsSceneMouseEvent *event)\n{\n    if (event->button() & Qt::LeftButton) {\n        float x = event->pos().x();\n        QPointF point(x, sin(x));\n        static const float r = 0.3;\n        QGraphicsEllipseItem *ellipse =\n                new QGraphicsEllipseItem(-r, -r, 2 * r, 2 * r, this);\n        ellipse->setPen(Qt::NoPen);\n        ellipse->setBrush(QBrush(Qt::red));\n        ellipse->setPos(point);\n        event->accept();\n    } else {\n        event->ignore();\n    }\n}\n```", "```cpp\nvoid View::mousePressEvent(QMouseEvent *event)\n{\n    QGraphicsView::mousePressEvent(event);\n    if (event->isAccepted()) {\n        return;\n    }\n    switch (event->button()) {\n        case Qt::LeftButton: {\n            SineItem *item = new SineItem();\n            item->setPos(mapToScene(event->pos()));\n            scene()->addItem(item);\n            event->accept();\n            break;\n        }\n        case Qt::RightButton: {\n            QGraphicsItem *item = itemAt(event->pos());\n            if (item) {\n                delete item;\n            }\n            event->accept();\n            break;\n        }\n        default:\n            break;\n    }\n}\n```", "```cpp\nfloat SineItem::maxX()\n{\n    return m_maxX;\n}\n\nvoid SineItem::setMaxX(float value)\n{\n    if (m_maxX == value) {\n        return;\n    }\n    prepareGeometryChange();\n    m_maxX = value;\n}\n```", "```cpp\nQSpinBox *box = new QSpinBox;\nQGraphicsProxyWidget *proxyItem = new QGraphicsProxyWidget;\nproxyItem->setWidget(box);\nscene()->addItem(proxyItem);\nproxyItem->setScale(2);\nproxyItem->setRotation(45); \n```", "```cpp\nQGraphicsProxyWidget *edit = scene()->addWidget(\n  new QLineEdit(tr(\"Some Text\")));\nQGraphicsProxyWidget *button = scene()->addWidget(\n  new QPushButton(tr(\"Click me!\")));\nQGraphicsLinearLayout *layout = new QGraphicsLinearLayout;\nlayout->addItem(edit);\nlayout->addItem(button);\nQGraphicsWidget *graphicsWidget = new QGraphicsWidget;\ngraphicsWidget->setLayout(layout);\nscene()->addItem(graphicsWidget); \n```", "```cpp\nQGraphicsProxyWidget *proxy = new QGraphicsProxyWidget(0);\nproxy->setWidget(new QLineEdit(QObject::tr(\"Some Text\")));\nscene()->addItem(proxy); \n```", "```cpp\nQGraphicsView view;\nview.setViewport(new QOpenGLWidget()); \n```"]