["```cpp\nauto start = std::chrono::high_resolution_clock::now();\n// processing to profile\nauto end = std::chrono::high_resolution_clock::now();\nauto duration = std::chrono::duration_cast<std::chrono::milliseconds>(end - start);\nstd::cout < duration.count() << \" milliseconds\\n\";\n```", "```cpp\n/**\n *  @brief Highest-resolution clock\n *\n *  This is the clock \"with the shortest tick period.\" Alias to\n *  std::system_clock until higher-than-nanosecond definitions\n *  become feasible.\n *  @ingroup chrono\n*/\nusing high_resolution_clock = system_clock;\n```", "```cpp\n#include <algorithm>\n#include <chrono>\n#include <iostream>\n#include <random>\n#include <utility>\nint uniform_random_number(int min, int max) {\n    static std::random_device rd;\n    static std::mt19937 gen(rd());\n    std::uniform_int_distribution dis(min, max);\n    return dis(gen);\n}\nstd::vector<int> random_vector(std::size_t n, int32_t min_val, int32_t max_val) {\n    std::vector<int> rv(n);\n    std::ranges::generate(rv, [&] {\n            return uniform_random_number(min_val, max_val);\n        });\n    return rv;\n}\nusing namespace std::chrono;\nint main() {\n    constexpr uint32_t elements = 100000000;\n    int32_t minval = 1;\n    int32_t maxval = 1000000000;\n    auto rv1 = random_vector(elements, minval, maxval);\n    auto rv2 = rv1;\n    auto start = high_resolution_clock::now();\n    std::ranges::sort(rv1);\n    auto end = high_resolution_clock::now();\n    auto duration = duration_cast<milliseconds>(end - start);\n    std::cout << \"Time to std::sort \"\n              << elements << \" elements with values in [\"\n              << minval << \",\" << maxval << \"] \"\n              << duration.count() << \" milliseconds\\n\";\n    start = high_resolution_clock::now();\n    std::ranges::stable_sort(rv2);\n    end = high_resolution_clock::now();\n    duration = duration_cast<milliseconds>(end - start);\n    std::cout << \"Time to std::stable_sort \"\n              << elements << \" elements with values in [\"\n              << minval << \",\" << maxval << \"] \"\n              << duration.count() << \" milliseconds\\n\";\n    return 0;\n}\n```", "```cpp\nTime to std::sort 100000000 elements with values in [1,1000000000] 6019 milliseconds\nTime to std::stable_sort 100000000 elements with values in [1,1000000000] 7342 milliseconds\n```", "```cpp\ngit clone https://github.com/google/benchmark.git\ncd benchmark\ngit clone https://github.com/google/googletest.git\n```", "```cpp\nmkdir build\ncd build\n```", "```cpp\ncmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBRARIES=ON -DCMAKE_INSTALL_PREFIX=/usr/lib/x86_64-linux-gnu/\n```", "```cpp\nmake -j16\nsudo make install\n```", "```cpp\n#include <benchmark/benchmark.h>\n#include <algorithm>\n#include <chrono>\n#include <iostream>\n#include <random>\n#include <thread>\nvoid BM_vector_push_back(benchmark::State& state) {\n    for (auto _ : state) {\n        std::vector<int> vec;\n        for (int i = 0; i < state.range(0); i++) {\n            vec.push_back(i);\n        }\n    }\n}\nvoid BM_vector_emplace_back(benchmark::State& state) {\n    for (auto _ : state) {\n        std::vector<int> vec;\n        for (int i = 0; i < state.range(0); i++) {\n            vec.emplace_back(i);\n        }\n    }\n}\nvoid BM_vector_insert(benchmark::State& state) {\n    for (auto _ : state) {\n        std::vector<int> vec;\n        for (int i = 0; i < state.range(0); i++) {\n            vec.insert(vec.begin(), i);\n        }\n    }\n}\nBENCHMARK(BM_vector_push_back)->Range(1, 1000);\nBENCHMARK(BM_vector_emplace_back)->Range(1, 1000);\nBENCHMARK(BM_vector_insert)->Range(1, 1000);\nint main(int argc, char** argv) {\n    benchmark::Initialize(&argc, argv);\n    benchmark::RunSpecifiedBenchmarks();\n    return 0;\n}\n```", "```cpp\n#include <benchmark/benchmark.h>\n```", "```cpp\nvoid benchmark_function(benchmark::State& state);\n```", "```cpp\nBENCHMARK(BM_vector_push_back)->Range(1, 1000);\n```", "```cpp\n2024-10-17T05:02:37+01:00\nRunning ./13x02-benchmark_vector\nRun on (64 X 3600 MHz CPU s)\nCPU Caches:\n  L1 Data 32 KiB (x32)\n  L1 Instruction 32 KiB (x32)\n  L2 Unified 512 KiB (x32)\n  L3 Unified 32768 KiB (x4)\nLoad Average: 0.00, 0.02, 0.16\n----------------------------------------------------------------------\nBenchmark                            Time             CPU   Iterations\n----------------------------------------------------------------------\nBM_vector_push_back/1             10.5 ns         10.5 ns     63107997\nBM_vector_push_back/8             52.0 ns         52.0 ns     13450361\nBM_vector_push_back/64             116 ns          116 ns      6021740\nBM_vector_push_back/512            385 ns          385 ns      1819732\nBM_vector_push_back/1000           641 ns          641 ns      1093474\nBM_vector_emplace_back/1          10.8 ns         10.8 ns     64570848\nBM_vector_emplace_back/8          53.3 ns         53.3 ns     13139191\nBM_vector_emplace_back/64          108 ns          108 ns      6469997\nBM_vector_emplace_back/512         364 ns          364 ns      1924992\nBM_vector_emplace_back/1000        616 ns          616 ns      1138392\nBM_vector_insert/1                10.6 ns         10.6 ns     65966159\nBM_vector_insert/8                58.6 ns         58.6 ns     11933446\nBM_vector_insert/64                461 ns          461 ns      1485319\nBM_vector_insert/512              7249 ns         7249 ns        96756\nBM_vector_insert/1000            23352 ns        23348 ns        29742\n```", "```cpp\nLoad Average: 0.00, 0.02, 0.16\n```", "```cpp\nBM_vector_push_back/64             116 ns          116 ns      6021740\n```", "```cpp\n#include <benchmark/benchmark.h>\n#include <algorithm>\n#include <chrono>\n#include <iostream>\n#include <random>\n#include <thread>\nstd::vector<int> rv1, rv2;\nint uniform_random_number(int min, int max) {\n    static std::random_device rd;\n    static std::mt19937 gen(rd());\n    std::uniform_int_distribution dis(min, max);\n    return dis(gen);\n}\nstd::vector<int> random_vector(std::size_t n, int32_t min_val, int32_t max_val) {\n    std::vector<int> rv(n);\n    std::ranges::generate(rv, [&] {\n        return uniform_random_number(min_val, max_val);\n    });\n    return rv;\n}\nstatic void BM_vector_sort(benchmark::State& state, std::vector<int>& vec) {\n    for (auto _ : state) {\n        std::ranges::sort(vec);\n    }\n}\nstatic void BM_vector_stable_sort(benchmark::State& state, std::vector<int>& vec) {\n    for (auto _ : state) {\n        std::ranges::stable_sort(vec);\n    }\n}\nBENCHMARK_CAPTURE(BM_vector_sort, vector, rv1)->Iterations(1)->Unit(benchmark::kMillisecond);\nBENCHMARK_CAPTURE(BM_vector_stable_sort, vector, rv2)->Iterations(1)->Unit(benchmark::kMillisecond);\nint main(int argc, char** argv) {\n    constexpr uint32_t elements = 100000000;\n    int32_t minval = 1;\n    int32_t maxval = 1000000000;\n    rv1 = random_vector(elements, minval, maxval);\n    rv2 = rv1;\n    benchmark::Initialize(&argc, argv);\n    benchmark::RunSpecifiedBenchmarks();\n    return 0;\n}\n```", "```cpp\nBENCHMARK_CAPTURE(BM_vector_sort, vector, rv1)->Iterations(1)->Unit(benchmark::kMillisecond);\n```", "```cpp\n-------------------------------------------------------------------------\nBenchmark                          Time         CPU   Iterations\n-------------------------------------------------------------------------\nBM_vector_sort                     5877 ms      5876 ms            1\nBM_vector_stable_sort.             7172 ms      7171 ms            1\n```", "```cpp\n#include <benchmark/benchmark.h>\n#include <algorithm>\n#include <chrono>\n#include <iostream>\n#include <random>\n#include <thread>\nstatic void BM_create_terminate_thread(benchmark::State& state) {\n    for (auto _ : state) {\n        std::thread thread([]{ return -1; });\n        thread.join();\n    }\n}\nBENCHMARK(BM_create_terminate_thread)->Iterations(2000);\nint main(int argc, char** argv) {\n    benchmark::Initialize(&argc, argv);\n    benchmark::RunSpecifiedBenchmarks();\n    return 0;\n}\n```", "```cpp\n---------------------------------------------------------------\n----------\nBenchmark                        Time             CPU\nIterations\n---------------------------------------------------------------\n----------\nBM_create_terminate_thread.       32424 ns        21216 ns     2000\n```", "```cpp\nperf record --call-graph dwarf ./13x07-thread_contention\n```", "```cpp\n perf script > out.perf\n```", "```cpp\ngprof2dot -f perf out.perf -o callgraph.dot\n```", "```cpp\npip install gprof2dot\n```", "```cpp\nsudo apt-get install graphviz\n```", "```cpp\ndot -Tpng callgraph.dot -o callgraph.png\n```", "```cpp\ngit clone https://github.com/brendangregg/FlameGraph.git\n```", "```cpp\nFlameGraph/stackcollapse-perf.pl out.perf > out.folded\n```", "```cpp\nFlamegraph/flamegraph.pl out.folded > flamegraph.svg\n```", "```cpp\nperf stat -e instructions,cycles ./13x05-sort_perf\n```", "```cpp\nPerformance counter stats for './13x05-sort_perf':\n    30,993,024,309      instructions                     #     1.03   \n             insn per cycle\n    30,197,863,655      cycles\n       6.657835162 seconds time elapsed\n       6.502372000 seconds user\n       0.155008000 seconds sys\n```", "```cpp\nperf list\n```", "```cpp\nperf stat -e branches ./13x05-sort_perf\n```", "```cpp\nPerformance counter stats for './13x05-sort_perf':\n     5,246,138,882      branches\n       6.712285274 seconds time elapsed\n       6.551799000 seconds user\n       0.159970000 seconds sys\n```", "```cpp\nperf stat -e all_data_cache_accesses ./13x05-sort_perf\n```", "```cpp\nPerformance counter stats for './13x05-sort_perf':\n    21,286,061,764      all_data_cache_accesses\n       6.718844368 seconds time elapsed\n       6.561416000 seconds user\n       0.157009000 seconds sys\n```", "```cpp\nperf stat -e cpu-migrations ./13x07-thread_contention\n```", "```cpp\nPerformance counter stats for './13x08-thread_contention':\n                45      cpu-migrations\n      50.476706194 seconds time elapsed\n      57.333880000 seconds user\n     262.123060000 seconds sys\n```", "```cpp\nperf stat -e context-switches ./13x07-thread_contention\n```", "```cpp\nPerformance counter stats for './13x08-thread_contention':\n        13,867,866      cs\n      47.618283562 seconds time elapsed\n      52.931213000 seconds user\n     247.033479000 seconds sys\n```", "```cpp\n#include <chrono>\n#include <iostream>\n#include <random>\n#include <thread>\n#include <vector>\nstruct result_data {\n    unsigned long result { 0 };\n};\nstruct alignas(64) aligned_result_data {\n    unsigned long result { 0 };\n};\nvoid set_affinity(int core) {\n    if (core < 0) {\n        return;\n    }\n    cpu_set_t cpuset;\n    CPU_ZERO(&cpuset);\n    CPU_SET(core, &cpuset);\n    if (pthread_setaffinity_np(pthread_self(), sizeof(cpu_set_t), &cpuset) != 0) {\n        perror(\"pthread_setaffinity_np\");\n        exit(EXIT_FAILURE);\n    }\n}\ntemplate <typename T>\nauto random_sum(T& data, const std::size_t seed, const unsigned long iterations, const int core) {\n    set_affinity(core);\n    std::mt19937 gen(seed);\n    std::uniform_int_distribution dist(1, 5);\n    for (unsigned long i = 0; i < iterations; ++i) {\n        data.result += dist(gen);\n    }\n}\nusing namespace std::chrono;\nvoid sum_random_unaligned(int num_threads, uint32_t iterations) {\n    auto* data = new(static_cast<std::align_val_t>(64)) result_data[num_threads];\n    auto start = high_resolution_clock::now();\n    std::vector<std::thread> threads;\n    for (std::size_t i = 0; i < num_threads; ++i) {\n        set_affinity(i);\n        threads.emplace_back(random_sum<result_data>, std::ref(data[i]), i, iterations, i);\n    }\n    for (auto& thread : threads) {\n        thread.join();\n    }\n    auto end = high_resolution_clock::now();\n    auto duration = std::chrono::duration_cast<milliseconds>(end - start);\n    std::cout << \"Non-aligned data: \" << duration.count() << \" milliseconds\" << std::endl;\n    operator delete[] (data, static_cast<std::align_val_t>(64));\n}\nvoid sum_random_aligned(int num_threads, uint32_t iterations) {\n    auto* aligned_data = new(static_cast<std::align_val_t>(64)) aligned_result_data[num_threads];\n    auto start = high_resolution_clock::now();\n    std::vector<std::thread> threads;\n    for (std::size_t i = 0; i < num_threads; ++i) {\n        set_affinity(i);\n        threads.emplace_back(random_sum<aligned_result_data>, std::ref(aligned_data[i]), i, iterations, i);\n    }\n    for (auto& thread : threads) {\n        thread.join();\n    }\n    auto end = high_resolution_clock::now();\n    auto duration = std::chrono::duration_cast<milliseconds>(end - start);\n    std::cout << \"Aligned data: \" << duration.count() << \" milliseconds\" << std::endl;\n    operator delete[] (aligned_data, static_cast<std::align_val_t>(64));\n}\nint main() {\n    constexpr unsigned long iterations{ 100000000 };\n    constexpr unsigned int num_threads = 8;\n    sum_random_unaligned(8, iterations);\n    sum_random_aligned(8, iterations);\n    return 0;\n}\n```", "```cpp\nNon-aligned data: 4403 milliseconds\nAligned data: 160 milliseconds\n```", "```cpp\nstruct result_data {\n    unsigned long result { 0 };\n};\n```", "```cpp\nstruct alignas(64) aligned_result_data {\n    unsigned long result { 0 };\n};\n```", "```cpp\nperf stat -e cache-references,cache-misses ./13x07-false_sharing\n```", "```cpp\nPerformance counter stats for './13x07-false_sharing':\n       251,277,877      cache-references\n       242,797,999      cache-misses\n                        # 96.63% of all cache refs\n```", "```cpp\nPerformance counter stats for './13x07-false_sharing':\n           851,506      cache-references\n           231,703      cache-misses\n                        # 27.21% of all cache refs\n```", "```cpp\nstd::atomic<std::size_t> head_ { 0 };\nstd::atomic<std::size_t> tail_ { 0 };\n```", "```cpp\nalignas(64) std::atomic<std::size_t> head_ { 0 };\nalignas(64) std::atomic<std::size_t> tail_ { 0 };\n```", "```cpp\nperf stat -e cache-references,cache-misses ./13x09-spsc_lock_free_queue\n```", "```cpp\n101559149 ops/sec\n Performance counter stats for ‹./13x09-spsp_lock_free_queue›:\n       532,295,487      cache-references\n       219,861,054      cache-misses                     #   41.30% of all cache refs\n       9.848523651 seconds time elapsed\n```", "```cpp\nbool push(const T &item) {\n    std::size_t tail = tail_.load(std::memory_order_relaxed);\n    std::size_t next_tail = (tail + 1) & (capacity_ - 1);\n    if (next_tail == cache_head_) {\n        cache_head_ = head_.load(std::memory_order_acquire);\n        if (next_tail == cache_head_) {\n            return false;\n        }\n    }\n    buffer_[tail] = item;\n    tail_.store(next_tail, std::memory_order_release);\n    return true;\n}\n```", "```cpp\n    std::size_t tail = tail_.load(std::memory_order_relaxed);\n    ```", "```cpp\n    std::size_t next_tail = (tail + 1) & (capacity_ - 1);\n    ```", "```cpp\n        if (next_tail == cache_head_) {\n    ```", "```cpp\n    head_.load(std::memory_order_acquire);\n            if (next_tail == cache_head_) {\n                return false;\n            }\n    ```", "```cpp\n    buffer_[tail] = item;\n        tail_.store(next_tail, std::memory_order_release);\n        return true;\n    ```", "```cpp\n162493489 ops/sec\n Performance counter stats for ‹./13x09-spsp_lock_free_queue›:\n       474,296,947      cache-references\n       148,898,301      cache-misses                     #   31.39% of all cache refs\n       6.156437788 seconds time elapsed\n      12.309295000 seconds user\n       0.000999000 seconds sys\n```"]