["```cpp\nUFUNCTION(NetMulticast, Reliable)\nvoid SprintStart_Client();\nUFUNCTION(NetMulticast, Reliable)\nvoid SprintEnd_Client();\n```", "```cpp\nSprintStart_Client();\n```", "```cpp\nSprintEnd_Client();\n```", "```cpp\nvoid AUS_Character::SprintStart_Client_Implementation()\n{\n if (GetCharacterStats())\n {\n  GetCharacterMovement()->MaxWalkSpeed = GetCharacterStats()->SprintSpeed;\n }\n}\nvoid AUS_Character::SprintEnd_Client_Implementation()\n{\n if (GetCharacterStats())\n {\n  GetCharacterMovement()->MaxWalkSpeed = GetCharacterStats()->WalkSpeed;\n }\n}\n```", "```cpp\nWeapon->SetIsReplicated(true);\n```", "```cpp\nUPROPERTY(EditDefaultsOnly, BlueprintReadOnly, Category=\"Projectile\", meta=(AllowPrivateAccess = \"true\"))\nUAnimMontage* ThrowAnimation;\n```", "```cpp\nUFUNCTION(NetMulticast, Unreliable)\nvoid Throw_Client();\n```", "```cpp\nvoid UUS_WeaponProjectileComponent::Throw_Client_Implementation()\n{\n const auto Character = Cast<AUS_Character>(GetOwner());\n if (ThrowAnimation != nullptr)\n {\n  if (const auto AnimInstance = Character->GetMesh()->GetAnimInstance(); AnimInstance != nullptr)\n  {\n   AnimInstance->Montage_Play(ThrowAnimation, 1.f);\n  }\n }\n}\n```", "```cpp\nif (ProjectileClass)\n{\n Throw_Client();\n FTimerHandle TimerHandle;\n GetWorld()->GetTimerManager().SetTimer(TimerHandle, [&]()\n {\n  const auto Character = Cast<AUS_Character>(GetOwner());\n  const auto ProjectileSpawnLocation = GetComponentLocation();\n  const auto ProjectileSpawnRotation = GetComponentRotation();\n  auto ProjectileSpawnParams = FActorSpawnParameters();\n  ProjectileSpawnParams.Owner = GetOwner();\n  ProjectileSpawnParams.Instigator = Character;\n  GetWorld()->SpawnActor<AUS_BaseWeaponProjectile>(ProjectileClass, ProjectileSpawnLocation, ProjectileSpawnRotation, ProjectileSpawnParams);\n }, .4f, false);\n}\n```"]