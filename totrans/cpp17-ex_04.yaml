- en: Library Management System with Pointers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will continue to study a system for the management of a
    library. Similar to [Chapter 3](6814bf19-e75b-4083-8447-892dd8416f49.xhtml), *Building
    a Library Management System*, we have three classes—`Book`, `Customer`, and `Library`.
    However, there is one large difference: we do not work with identity numbers.
    Instead, we work with pointers; each `Book` object holds a pointer to the customer
    (an object of the `Customer` class) that has borrowed the book as well as a list
    of pointers to the customers that have reserved the book. In the same way, each
    customer holds sets of pointers for the books (objects of the `Book` class) they
    have borrowed and reserved.'
  prefs: []
  type: TYPE_NORMAL
- en: However, this approach gives rise to a problem; we cannot store the values of
    pointers directly in the file. Instead, when we save the file we need to convert
    from pointers to indexes in the book and customer lists, and when we load the
    file we need to transform the indexes back to pointers. This process is called
    **marshmallowing**.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to dive deeper into the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Just as in [Chapter 3](6814bf19-e75b-4083-8447-892dd8416f49.xhtml), *Building
    a Library Management System*, we will work with classes for books and customers
    that constitute a small database. However, in this chapter, we will work directly
    with pointers instead of integer numbers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As we work with pointers instead of integer numbers, the file handling becomes
    more complicated. We need to perform a process called marshmallowing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, we will work with the generic standard C++ classes, `set` and `list`.
    However, in this chapter they hold pointers to book and customer objects instead
    of objects.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Book class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Similar to the system of the previous chapter, we have three classes: `Book`,
    `Customer`, and `Library`. The `Book` class keeps track of a book, where each
    book has an author and a title. The `Customer` class keeps track of a customer,
    where each customer has a name and an address. The `Library` class keeps track
    of the library operations, such as borrowing, returning, and reserving. Finally,
    the `main` function simply creates an object of the `Library` class.'
  prefs: []
  type: TYPE_NORMAL
- en: The `Book` class is similar to the `Book` class of [Chapter 3](6814bf19-e75b-4083-8447-892dd8416f49.xhtml),
    *Building a Library Management System*. The only real difference is that there
    are no identity numbers, only pointers.
  prefs: []
  type: TYPE_NORMAL
- en: '**Book.h:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We do not have a method returning the identity number of the book, since the
    books in this chapter do not use identity numbers.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `borrowedPtr` method returns the address of the customer who has borrowed
    the book, or `nullptr` if the book is not borrowed at the moment. It comes in
    two versions, where the first version returns a reference to a pointer to a `Customer`
    object. In that way, we can assign a new value of the pointer to the customer.
    The second version is constant, which means that we can call it on constant objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note that we do not have a `borrowed` method in this chapter. We do not need
    it since `borrowerPtr` returns `nullptr` if the book is not borrowed at the moment.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, `reservationPtrList` returns a list of customer pointers instead
    of integer values. It comes in two versions, where the first version returns a
    reference to the list. In that way, we can add and remove pointers from the list.
    The second version is constant and returns a constant list, which means it can
    be called on constant `Book` objects and returns a list that cannot be changed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The output stream operator works in the same way as in [Chapter 3](6814bf19-e75b-4083-8447-892dd8416f49.xhtml),
    *Building a Library Management System*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The `m_author` and `m_title` fields are strings similar to [Chapter 3](6814bf19-e75b-4083-8447-892dd8416f49.xhtml),
    *Building a Library Management System*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'However, we have omitted the `m_bookId` field, since we do not use identity
    numbers in this chapter. We have also replaced the `m_borrowedId` and `m_customerId`
    fields with `m_borrowerPtr`, which is initialized to `nullptr` since the book
    is not borrowed from the beginning:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The `m_reservationPtrList` field holds a list of pointers to the customers
    that have reserved the book, rather than a list of integer identity numbers of
    [Chapter 3](6814bf19-e75b-4083-8447-892dd8416f49.xhtml), *Building a Library Manageme**nt
    System*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '**Book.cpp:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The default constructor is similar to the constructor of [Chapter 3](6814bf19-e75b-4083-8447-892dd8416f49.xhtml),
    *Building a Library Management System*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The second constructor is also similar to the constructor of [Chapter 3](6814bf19-e75b-4083-8447-892dd8416f49.xhtml),
    *Building a Library Management System*. However, there is no `m_bookId` field
    to initialize:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Reading and writing the book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `read` and `write` methods have been shortened in this chapter. They only
    read and write the author and title of the book. The potential loan and reservation
    lists are read and written by the `save` and `write` methods of the `Library`
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Borrowing and reserving the book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When a customer reserves a book, the pointer to the `Customer` object is added
    to the reservation pointer list of the book. The size of the list is returned
    for the customer to be notified of their position in the reservation list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'When a customer returns a book, we simply set `m_borrowerPtr` to `nullptr`,
    which indicates that the book is no longer borrowed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The `removeReservation` method simply removes the customer pointer from the
    reservation list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Displaying the book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The output stream operator writes the title and author, the customer that has
    borrowed the book (if any), and the customers that have reserved the book (if
    any):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'If the book is borrowed, we write the borrower to the stream:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'If the reservation list of the book is not empty, we iterate through it, and
    for each reservation, we write the customer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The Customer class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Customer` class of this chapter is similar to the `Customer` class of [Chapter
    3](6814bf19-e75b-4083-8447-892dd8416f49.xhtml), *Building a Library Management
    System*. Again, in this case, the difference is that we work with pointers instead
    of integer identity numbers.
  prefs: []
  type: TYPE_NORMAL
- en: '**Customer.h:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The `borrowBook`, `returnBook`, `reserveBook`, and `unreserveBook` take a pointer
    to a `Book` object as the parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The `loadPtrSet` and `reservationPtrSet` methods return sets of `Book` pointers,
    rather than sets of integer identity numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The output stream operator is unchanged, compared to [Chapter 3](6814bf19-e75b-4083-8447-892dd8416f49.xhtml),
    *Building a Library Managemen**t System*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The `m_name` and `m_address` fields store the name and address of the customer,
    just as in [Chapter 3](6814bf19-e75b-4083-8447-892dd8416f49.xhtml), *Building
    a Library Mana**gement System*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The `m_loanPtrSet` and `m_reservationPtrSet` fields hold pointers to `Book`
    objects, rather than integer identity numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '**Customer.cpp:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The constructors are similar to the constructors of [Chapter 3](6814bf19-e75b-4083-8447-892dd8416f49.xhtml),
    *Building a Library Management System*. The first constructor does nothing and
    is called when the customer list is loaded from a file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The second constructor initializes the name and address of the customer. However,
    compared to the constructor of [Chapter 3](6814bf19-e75b-4083-8447-892dd8416f49.xhtml),
    *Building a Library Management System*, there is no `m_customerId` field to initialize:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Reading and writing the customer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Similar to the preceding `Book` case, the `read` and `write` methods have been
    shortened. They only read and write the name and address. The loan and reservation
    sets are read and written in the `Library` class, shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Borrowing and reserving a book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `borrowBook` method adds the book pointer to the loan set and removes it
    from the reservation set in case it was reserved:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The `reserveBook` method simply adds the book pointer to the reservation list,
    and `returnBook` and `unreserveBook` remove the book pointer from the loan and
    reservation sets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Displaying the customer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The output stream operator works in the same way as in [Chapter 3](6814bf19-e75b-4083-8447-892dd8416f49.xhtml),
    *Building a Library Management System*. It writes the name and address of the
    customer, as well as the sets of borrowed and reserved books (if any):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'If the loan list of the customer is not empty, we iterate through it, and for
    each loan, we write the book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'In the same way, if the reservation list of the customer is not empty, we iterate
    through it, and for each reservation, we write the book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: The Library class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `Library` class is quite similar to its counterpart in  [Chapter 3](6814bf19-e75b-4083-8447-892dd8416f49.xhtml), *Building
    a Library Management System*. However, we have added lookup `methods` to transform
    between pointers and list indexes when saving and loading the library information
    to a file:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Library.h:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The destructor deallocates all the dynamically allocated memory of this application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The `lookupBook` and `lookupCustomer` methods return pointers to `Book` and
    `Customer` objects. If the book or customer does not exist, `nullptr` is returned:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'The `lookupBookIndex` and `lookupCustomerIndex` methods take a pointer, search
    the book and customer lists after the object pointed at, and return its index
    in the lists:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The `lookupBookPtr` and `lookupCustomerPtr` methods take an index and return
    a pointer to the object at the position in the book and customer lists:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'The `save` and `write` methods save and load the library information from a
    file. However, they are more complicated than their counterparts in [Chapter 3](6814bf19-e75b-4083-8447-892dd8416f49.xhtml),
    *Building a Library Management System*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'The `m_bookPtrList` and `m_customerPtrList` fields hold pointers to `Book`
    and `Customer` objects, rather than the objects themselves, as in  [Chapter 3](https://cdp.packtpub.com/c___by_example/wp-admin/post.php?post=47&action=edit#post_43), *Building
    a Library Management System*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '**Library.cpp:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'The constructor is identical to the constructor of  [Chapter 3](https://cdp.packtpub.com/c___by_example/wp-admin/post.php?post=47&action=edit#post_43), *Building
    a Library Management System*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Looking up books and customers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `lookupBook` method of this chapter searches for the `Book` object with
    the author and title, in a way similar to [Chapter 3](https://cdp.packtpub.com/c___by_example/wp-admin/post.php?post=47&action=edit#post_43), *Building
    a Library Management System*. However, if it finds a `Book` object that matches
    the author and title, it does not copy the information to a given object. Instead,
    it simply returns a pointer to the object. If it does not find the `Book` object,
    `nullptr` is returned:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'In the same way, `lookupCustomer` tries to find a `Customer` object that matches
    the name and address. If it finds the object, its pointer is returned. If it does
    not find it, `nullptr` is returned:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Adding a book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `addBook` method prompts the user for the author and the title:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'When checking if the book already exists, we call `lookupBook`. If the book
    exists, a pointer to the `Book` object is returned. If the book does not exist,
    `nullptr` is returned. Therefore, we test whether the return value does not equal
    `nullptr`. If it does not equal `nullptr`, the book already exists and an error
    message is displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'When adding the book, we dynamically create a new `Book` object with the `new`
    operator. We use the standard C++ `assert` macro to check that the book pointer
    is not null. If it is null, the execution will be aborted with an error message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Deleting a book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `deleteBook` method deletes a book from the library by prompting the user
    about the author and title of the book. If the book exists, we return, unreserve,
    and delete it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'We obtain a pointer to the `Book` object by calling `lookupBook`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'If the pointer is `nullptr`, the book does not exist and an error message is
    displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'We check whether the book has been borrowed by looking up the borrower:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'If the pointer returned by `borrowerPtr` is not `nullptr`, we return the book
    by calling `returnBook` of the borrower. In that way, the book is no longer registered
    as borrowed by the customer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Moreover, we need to check whether the book has been reserved by any other
    customer. We do so by obtaining the reservation list of the book and, for every
    customer in the list, we unreserve the book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that we do not check whether the book has actually been reserved by the
    customer, we simply unreserve the book. Also note that we do not need to put back
    any object to the list, since we work with pointers to objects and do not copy
    objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'When removing the book, we remove the book pointer from the book pointer list,
    and then deallocate the `Book` object. It may seem strange that we first display
    the message and then delete the book pointer. However, it has to be in that order.
    After we have deleted the object, we can do nothing with it. We cannot delete
    the object and then write it, it would cause memory errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Listing the books
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When listing the books, we first check whether the list is empty. If it is
    empty, we simply write `"No books."`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'However, if the list is not empty, we iterate through the book pointer list
    and, for each book pointer, dereference the pointer and write the information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Adding a customer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `addCustomer` method prompts the user for the name and address of the customer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'If a customer with the name and address already exists, an error message is
    displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'When adding the customer, we dynamically create a new `Customer` object that
    we add to the customer object pointer list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Deleting a customer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When deleting a customer, we look them up and display an error message if they
    do not exist:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'If the customer with the given name and address does not exist, an error message
    is displayed. Consider the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'If the customer has borrowed at least one book, they cannot be deleted, and
    an error message is displayed, which is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'However, if the customer has not borrowed any books, the customer is first
    removed from the reservation list of every book in the library, shown in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Then the customer is removed from the customer list, and the `Customer` object
    is deallocated by the `delete` operator. Again, note that we first must write
    the customer information, and then delete its object. The other way around would
    not have worked since we cannot inspect a deleted object. That would have caused
    memory errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Listing the customers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When listing the customer, we go through the customer list and, for each customer,
    dereference the `Customer` object pointer and write the information of the object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: Borrowing a book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When borrowing a book, we start by prompting the user for the author and title,
    which is shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'We look up the book and if the book does not exist, an error message is displayed,
    which is shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'If the book has already been borrowed by another customer, it cannot be borrowed
    again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'We prompt the user for the name and address of the customer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'If there is no customer with the given name and address, an error message is
    displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we add the book to the customer''s loan set and we mark the customer
    as the borrower of the book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Reserving a book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The reservation process is similar to the preceding borrowing process. We prompt
    the user for the author and title of the book, as well as the name and address
    of the customer, which is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'If the book does not exist, an error message is displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'If the book has not been borrowed, it is not possible to reserve it. Instead,
    we encourage the user to borrow the book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'We prompt the user for the name and address of the customer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'If the customer does not exist, an error message is displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'If the customer has already borrowed the book, they cannot also reserve the
    book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we add the customer to the reservation list of the book and we add
    the book to the reservation set of the customer. Note that there is a list of
    reservation customers for the book, while there is a set of reserved books for
    the customer. The reason for this is that when a book is returned, the first customer
    in the reservation list borrows the book. There are no such restrictions when
    it comes to a set of reservations for a customer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'We notify the customer of its position on the reservation list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: Returning a book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When returning a book, we prompt the user for its author and title. However,
    we do not ask for the customer who has borrowed the book. That information is
    already stored in the `Book` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'If the book with the given author and title does not exist, an error message
    is displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'If the customer with the given name and address does not exist, an error message
    is displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'When we have returned the book, we need to find out whether any customer has
    reserved it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'If there is at least one customer in the reservation list of the book, we obtain
    that customer, remove them from the reservation list of the book, mark the customer
    as the borrower of the book, and add the book to the loan set of the customer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: Looking up books and customers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When saving and loading the library information from a file, we need to transform
    between pointers to `Book` and `Customer` objects and indexes in the book and
    customer lists. The `lookupIndex` method takes a pointer to a `Book` object and
    returns its index in the book list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'If we reach this point, the execution is aborted with an error message by the
    `assert` macro. However, we should not reach this point, since the `Book` pointer
    should be in the book pointer list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'The `lookupBookPtr` method performs the opposite task. It finds the `Book`
    object pointer at the position given by `bookIndex` in the book pointer list.
    The `assert` macro aborts the execution with an error message if the index is
    outside the scope of the list. However, that should not happen since all indexes
    shall be within the scope:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'The `lookupCustomerIndex` method gives the index of the `Customer` pointer
    in the customer pointer list, in the same way as shown in the preceding `lookupBookIndex`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'The `lookupCustomerPtr` method looks up the index of the `Customer` pointer
    in the customer pointer list in the same way as shown in the preceding `lookupBookPtr` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: Marshmallowing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `save` and `load` methods of the `Library` class of this chapter are a
    bit more complicated than their counterparts in [Chapter 3](6814bf19-e75b-4083-8447-892dd8416f49.xhtml),
    *Building a Library Management System*. The reason for this is that we cannot
    save pointers directly, since a pointer holds a memory address that can be changed
    between executions. Instead, we need to save their indexes to the file. The process
    of transforming pointers to indexes and indexes to pointers is called **marshmallowing**.
    When saving the library, we divide the saving process into several steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Saving the book list:  At this point, we save the author and title only.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving the customer list:  At this point, we save the name and address only.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For each book: Save the borrower (if the book is borrowed) and the (possibly
    empty) reservation list. We save the customer list indexes, rather than the pointers
    to the customers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For each customer, we save the loan and reservation sets. We save the book list
    indexes, rather than the pointers to the books.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving the library information to a file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `Save` method opens the file and, if it was successfully opened, reads
    the books and customers of the library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: Writing the book objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We save the book objects. We only save the author and title of the books by
    calling `write` for each `Book` object. We do not save the potential borrower
    and reservation list at this point.
  prefs: []
  type: TYPE_NORMAL
- en: 'We start by writing the number of books in the list to the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we write the information of each book to the file by calling `write` on
    each `Book` object pointer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: Writing the customer objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We save the customer objects. Similar to the preceding book case, we only save
    the name and address of the customers by calling `write` for each `Customer` object.
    We do not save sets of borrowed and reserved books at this point.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the same way, as in the preceding book case, we start by writing the number
    of customers on the list to the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we write the information of each customer to the file by calling the `write`
    method on each `Customer` object pointer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: Writing the borrower index
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For each `Book` object, if the book is borrowed we look up and save the index
    of the `Customer`, rather than the pointer to the object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: 'For each book, we start by checking if it has been borrowed. If it has been
    borrowed, we write the value `true` to the file, to indicate that it is borrowed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we look up the index of the customer that has borrowed the book in the
    customer pointer list and write the index to the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: 'If the book is not borrowed, we just write the value `false` to the file, to
    indicate that the book has not been borrowed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: Writing the reservation indexes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As a book can be reserved for more than one customer, we iterate through the
    list of reservations and save the index of each customer in the reservation list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: 'For each book, we start by writing the number of reservations of the book to
    the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we iterate through the reservation list and, for each reservation, we
    look up and write the index of each customer that reserved the book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: Writing the loan book indexes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For each customer, we save the indexes of the books they have borrowed. First,
    we save the size of the loan list and then the book indexes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: 'For each customer, we start by writing the number of loans to the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we iterate through the loan set and, for each loan, we look up and write
    the index of each book to the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: Writing the reservation book indexes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the same way, for each customer, we save the indexes of the books they have
    reserved. First, we save the size of the reservation list and then the indexes
    of the books they reserved:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: 'For each customer, we start by writing the number of reserved books to the
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we iterate through the reservation set and, for each reservation, we look
    up and write the index of each book to the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: Loading the library information from a file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When loading the file, we proceed in the same manner as when we saved the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: Reading the book objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We read the size of the book list, and then the books themselves. Remember
    that we have so far read the author and title of the books only:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: 'We start by reading the number of books:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we read the books themselves. For each book, we dynamically allocate a
    `Book` object, read its information by calling `read` on the pointer, and add
    the pointer to the book pointer list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: Reading the customer objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the same way, we read the size of the customer list and then the customers
    themselves. Up until this point, we read the name and address of the customers
    only:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: 'We start by reading the number of customers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we read the customers themselves. For each customer, we dynamically allocate
    a `Customer` object, read its information by calling `read` on the pointer, and
    add the pointer to the book pointer list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: Reading the borrower index
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For each book, we read the customers that have borrowed it (if any) and the
    list of customers that have reserved the book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: 'If `borrowed` is `true`, the book has been borrowed. In that case, we read
    the index of the customer. We then look up the pointer of the `Customer` object,
    which we add to the reservation list of the book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: 'If `borrowed` is `false`, the book has not been borrowed. In that case, we
    set the pointer to the customer that has borrowed the book to `nullptr`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: Reading the reservation indexes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For each book, we also read the reservation list. First, we read the size of
    the list and then the customer indexes themselves:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: 'We start by reading the number of reservations of the book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: 'For each reservation, we read the index of the customer and call `lookupCustomerPtr`
    to obtain the pointer to the `Customer` object, which we add to the reservation
    pointer list of the book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: Reading the loan book indexes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For each customer, we read the set of borrowed books:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: 'We start by reading the size of the loan list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: 'For each loan, we read the index of the book and call `lookupBookPtr` to obtain
    the pointer to the `Book` object, which we add to the loan pointer list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: Reading the reservation book indexes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the same way, for each customer, we read the set of reserved books:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: 'We start by reading the size of the reservation list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: 'For each reservation, we read the index of the book and call `lookupBookPtr`
    to obtain the pointer to the `Book` object, which we add to the reservation pointer
    list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: Deallocating memory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Since we have added dynamically allocated `Book` and `Customer` objects to
    the lists, we need to deallocate them at the end of the execution. The destructor
    iterates through the book and customer pointer lists and deallocates all the book
    and customer pointers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: The main function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Similar to [Chapter 3](6814bf19-e75b-4083-8447-892dd8416f49.xhtml), *Building
    a Library Management System*, the `main` function simply creates a `Library` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Main.cpp**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we built a library management system similar to the system
    of [Chapter 3](6814bf19-e75b-4083-8447-892dd8416f49.xhtml), *Building a Library
    Management System*. However, we omitted all integer identity numbers and replaced
    them with pointers. This gives us the advantage that we can store loans and reservations
    more directly, but it also makes it harder for us to save and load them into a
    file.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 5](411aae8c-9215-4315-8a2e-882bf028834c.xhtml), *Qt Graphical Applications*,
    we will look at graphical applications.
  prefs: []
  type: TYPE_NORMAL
