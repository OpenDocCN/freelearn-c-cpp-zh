- en: Finalizing Your Game
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 完成您的游戏
- en: In the previous chapter, we looked at how to create the game; in this chapter,
    we will finish the **Gameloop** so that you can play the game. The objective of
    the game is to make sure that none of the enemies are able to make it to the left
    of the screen. If they do, it is game over.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们探讨了如何创建游戏；在本章中，我们将完成**Gameloop**，以便您可以玩游戏。游戏的目标是确保没有敌人能够到达屏幕的左侧。如果他们做到了，游戏就结束了。
- en: We will add a scoring system so that the player knows how much they have scored
    in a round. For each enemy that is shot down, the player will get one point. We
    will also add text to the game in order to display the title of the game, the
    player's score, and a small tutorial that shows you how to play the game.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将添加一个计分系统，以便玩家知道他们在回合中获得了多少分数。对于每个被击落的敌人，玩家将获得一分。我们还将向游戏中添加文本，以显示游戏的标题、玩家的分数以及一个小教程，展示如何玩游戏。
- en: At the end of this chapter, we will embellish the game. We will add audio that
    will be used as background music, as well as sound effects for when the player
    shoots the rocket and when the player's rockets hit the enemy. We will also add
    some animation to the player so that the character looks more lively.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，我们将装饰游戏。我们将添加用作背景音乐的音频，以及玩家射击火箭和玩家火箭击中敌人的音效。我们还将为玩家添加一些动画，使角色看起来更加生动。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下主题：
- en: Finishing the Gameloop and adding scoring
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完成Gameloop并添加计分
- en: Adding text
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加文本
- en: Adding audio
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加音频
- en: Adding player animations
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加玩家动画
- en: So, let's begin!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们开始吧！
- en: Finishing the Gameloop and adding scoring
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 完成Gameloop并添加计分
- en: 'The following steps will show you how to finish the Gameloop and add scoring
    to the game code:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将向您展示如何完成Gameloop并添加计分到游戏代码中：
- en: 'Add two new variables to the `source.cpp` file: one of the `int` type, called
    `score`, and one of the `bool` type, called `gameover`. Initialize the score to
    `0` and `gameover` to `true`:'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`source.cpp`文件中添加两个新变量：一个`int`类型的，命名为`score`，另一个`bool`类型的，命名为`gameover`。将`score`初始化为`0`，将`gameover`初始化为`true`：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create a new function called `reset()`. We will use this to reset the variables.
    Create a prototype for the reset function at the top of the `source.cpp` file:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`reset()`的新函数。我们将使用它来重置变量。在`source.cpp`文件顶部创建重置函数的原型：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'At the bottom of the `source.cpp` file, after where we created the `checkCollision`
    function, add the reset function itself so that when the game resets, all the
    values are also reset. To do this, use the following code:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在`source.cpp`文件的底部，在我们创建了`checkCollision`函数之后，添加重置函数本身，以便在游戏重置时，所有值也会重置。为此，使用以下代码：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If the game is over, pressing the down arrow key once will restart the game.
    Once the game starts again, the `reset()` function will be called. In the `reset()`
    function, we need to set `score`, `currentTime`, and `prevTime` to `0`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果游戏结束，按下向下箭头键一次将重新启动游戏。游戏再次开始后，将调用`reset()`函数。在`reset()`函数中，我们需要将`score`、`currentTime`和`prevTime`设置为`0`。
- en: When the game resets, remove any instantiated enemy and rocket objects by deleting
    and thus freeing the memory. This also clears the vectors that were holding a
    reference to the now-deleted objects. Now that we've set up the variables and
    the reset function, let's use them in the game to reset the values when we restart
    the game.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当游戏重置时，通过删除并释放内存来移除任何已实例化的敌人和火箭对象。这也清除了持有现在已删除对象引用的向量。现在我们已经设置了变量和重置函数，让我们在游戏中使用它们来在重新启动游戏时重置值。
- en: 'In the `UpdateInput` function, in the `while` loop, where we check whether
    the down arrow key on the keyboard was pressed, we will add an `if` condition
    to check whether the game is over. If it is over, we''ll set the `gameover` bool
    to `false` so that the game is ready to start, and we''ll reset the variables
    by calling the `reset` function, as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在`UpdateInput`函数中，在`while`循环中，检查键盘上的向下箭头键是否被按下，我们将添加一个`if`条件来检查游戏是否结束。如果游戏结束，我们将`gameover`布尔值设置为`false`，以便游戏可以开始，并且我们将通过调用`reset`函数重置变量，如下所示：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here, `shoot()` is moved into an `else` statement so that the player can only
    shoot if the game is running.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`shoot()`被移动到`else`语句中，以便玩家只能在游戏运行时射击。
- en: Next, we will set the `gameover` condition to `true` when an enemy goes beyond
    the left-hand side of the screen.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，当敌人超出屏幕的左侧时，我们将设置`gameover`条件为`true`。
- en: When we update the enemies, the enemy will be deleted when it disappears from
    the screen, and we will also set the `gameover` condition to `true`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们更新敌人时，敌人从屏幕消失时将被删除，并且我们将游戏结束条件设置为`true`。
- en: 'Add the following code for updating the enemies to the `update()` function:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下更新敌人的代码添加到`update()`函数中：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here, we want to update the game if `gameover` is `false`. In the `main` function,
    before we update the game, we will add a check to find out whether the game is
    over. If the game is over, we will not update the game. To do this, use the following
    code:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，我们希望在`gameover`为`false`时更新游戏。在`main`函数中，在我们更新游戏之前，我们将添加一个检查以确定游戏是否结束。如果游戏结束，我们不会更新游戏。为此，使用以下代码：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We will also increase the score when the rocket collides with an enemy. This
    means that, in the `update()` function, when we delete the rocket and enemy after
    the intersection, we will also update the score:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当火箭与敌人碰撞时，我们将增加分数。这意味着在`update()`函数中，当我们删除交叉后的火箭和敌人时，我们还将更新分数：
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: When you run the game, start the game by pressing the down arrow key. When one
    of the enemies goes past the left-side of the screen, the game will end. When
    you press the down arrow key again, the game will restart.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行游戏时，通过按下向下箭头键开始游戏。当其中一个敌人穿过屏幕的左侧时，游戏将结束。当你再次按下向下箭头键时，游戏将重新开始。
- en: The gameloop is now complete, but we still can't see the score. To do this,
    let's add some text to the game.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏循环现在已完成，但我们仍然看不到分数。为此，让我们向游戏中添加一些文本。
- en: Adding text
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加文本
- en: 'These steps will guide you through how to add text to the game:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤将指导你如何向游戏中添加文本：
- en: 'Create an `sf::Font` called `headingFont` so that we can load the font and
    then use it to display the name of the game. At the top of the screen, where we
    created all the variables, create the `headingFont` variable, as follows:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`headingFont`的`sf::Font`，以便我们可以加载字体然后使用它来显示游戏名称。在屏幕顶部创建所有变量的地方，创建`headingFont`变量，如下所示：
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the `init()` function, right after we loaded `bgSprite`, load the font using
    the `loadFromFile` function:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`init()`函数中，在我们加载`bgSprite`之后，我们将使用`loadFromFile`函数加载字体：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Since we will need a font to be loaded in from the system, we have to place
    the font in the `fonts` directory, which can be found under the `Assets` directory.
    Make sure you place the font file there. The font we will be using for the heading
    is the `SnackerComic.ttf` file. I have also included the `arial.ttf` file, which
    we will use to display the score, so make sure you add that as well.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们需要从系统中加载字体，我们必须将字体放在`fonts`目录中，该目录位于`Assets`目录下。确保你将字体文件放在那里。我们将用于标题的字体是`SnackerComic.ttf`文件。我还包括了`arial.ttf`文件，我们将使用它来显示分数，所以请确保你也添加它。
- en: 'Create the `headingText` variable using the `sf::Text` type so that we can
    display the heading of the game. Do this at the start of the code:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`sf::Text`类型创建`headingText`变量，以便我们可以显示游戏的标题。在代码的开始处执行此操作：
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In the `init()` function, after loading `headingFont`, we will add the code
    to create the heading for the game:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`init()`函数中，在加载`headingFont`之后，我们将添加创建游戏标题的代码：
- en: '[PRE10]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We need to set the font for the heading text using the `setFont` function. In
    `setFont`, pass the `headingFont` variable that we just created.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要使用`setFont`函数设置标题文本的字体。在`setFont`中传入我们刚刚创建的`headingFont`变量。
- en: We need to tell `headingText` what needs to be displayed. For that, we will
    use the `setString` function and pass in the `TinyBazooka` string since that is
    the name of the game we just made. Pretty cool name, huh?
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要告诉`headingText`需要显示的内容。为此，我们将使用`setString`函数并传入`TinyBazooka`字符串，因为这是我们刚刚制作的游戏的名称。名字很酷，不是吗？
- en: Let's set the size of the font itself. To do this, we will use the `setCharacterSize`
    function and pass in `84` as the size in pixels so that it is clearly visible.
    Now, we can set the color to red using the `setFillColor` function.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们设置字体本身的大小。为此，我们将使用`setCharacterSize`函数并传入`84`作为像素大小，以便它清晰可见。现在，我们可以使用`setFillColor`函数将颜色设置为红色。
- en: 'We want the heading to be centered on the viewport, so we will get the bounds
    of the text and set its origin to the `center` of the viewport in the *x* and
    *y* directions. Set the position of the text so that it''s at the center of the
    x-direction and `0.10` of the height from the top along the *y-*direction:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们希望标题在视口中居中，因此我们将获取文本的边界并将它的原点设置在视口的`center`位置，在*x*和*y*方向上。设置文本的位置，使其位于x方向的中心以及沿*y-*方向从顶部起`0.10`的高度处：
- en: '[PRE11]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To display the text, call `window.draw` and pass `headingText` into it. We
    also want the text to be drawn when the game is over. To do this, add an `if`
    statement, which checks whether the game is over:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要显示文本，调用 `window.draw` 并将 `headingText` 传递给它。我们还想在游戏结束时绘制文本。为此，添加一个 `if` 语句，检查游戏是否结束：
- en: '[PRE12]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Run the game. You will see the name of the game displayed at the top:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行游戏。你将看到游戏名称显示在顶部：
- en: '![](img/510dff6d-749c-4ea1-b678-2633b15c2de8.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/510dff6d-749c-4ea1-b678-2633b15c2de8.png)'
- en: 'We still can''t see the score, so let''s add a `Font` variable and a `Text`
    variable and call them `scoreFont` and `scoreText`, respectively. In the `scoreFont`
    variable, load the `arial.ttf` font and set the text for the score using the `scoreText`
    variable:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们仍然看不到分数，所以让我们添加一个 `Font` 变量和一个 `Text` 变量，分别命名为 `scoreFont` 和 `scoreText`。在
    `scoreFont` 变量中，加载 `arial.ttf` 字体，并使用 `scoreText` 变量设置分数的文本：
- en: '[PRE13]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Load the `ScoreFont` string and then set the `ScoreText` string:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载 `ScoreFont` 字符串，然后设置 `ScoreText` 字符串：
- en: '[PRE14]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Here, we set the `scoreText` string to a score of `0`, which we will change
    once the score increases. Set the size of the font to `45`.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将 `scoreText` 字符串设置为 `0` 分，一旦分数增加，我们将更改它。设置字体大小为 `45`。
- en: Set the score so that it's in the same position as `headingText` since it will
    only be displayed when the game is over. When the game is running, `scoreText`
    will be displayed.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 将分数设置为与 `headingText` 相同的位置，因为它只会在游戏结束时显示。当游戏运行时，`scoreText` 将显示。
- en: 'In the `update` function, where we update the score, update `scoreText`:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `update` 函数中，更新分数时更新 `scoreText`：
- en: '[PRE15]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'For convenience, we created a new string called `finalScore`. Here, we set
    the `"Score: "` string and concatenated it with the score, which is an int that''s
    been converted into a string by the `toString` property of the string class. Then,
    we used the `setString` function of `sf::Text` to set the string. We had to get
    the new bounds of the text since the text would have changed. Set the origin,
    center, and position of the updated text.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '为了方便，我们创建了一个新的字符串，名为 `finalScore`。在这里，我们将 `"Score: "` 字符串与分数连接起来，分数是一个通过字符串类的
    `toString` 属性转换为字符串的 int。然后，我们使用 `sf::Text` 的 `setString` 函数设置字符串。由于文本会发生变化，我们必须获取新的文本边界。设置更新文本的原点、中心和位置。'
- en: 'In the `draw` function, create a new `else` statement. If the game is not over,
    draw `scoreText`:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `draw` 函数中，创建一个新的 `else` 语句。如果游戏没有结束，绘制 `scoreText`：
- en: '[PRE16]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Reset the `scoreText` in the `reset()` function:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `reset()` 函数中重置 `scoreText`：
- en: '[PRE17]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: When you run the game now, the score will continue to update. The values will
    reset when you restart the game.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行游戏时，分数将不断更新。当你重新启动游戏时，值将重置。
- en: 'The scoring system looks as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 得分系统如下所示：
- en: '![](img/90966be4-23ea-4a5e-a791-edfeb143c100.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/90966be4-23ea-4a5e-a791-edfeb143c100.png)'
- en: 'Add a tutorial so that the player knows what to do when the game starts. Create
    a new `sf::Text` called `tutorialText`:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个教程，让玩家知道游戏开始时该做什么。创建一个新的 `sf::Text`，名为 `tutorialText`：
- en: '[PRE18]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Initialize the text after `scoreText` in the `init()` function:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `init()` 函数中初始化 `scoreText` 后面的文本：
- en: '[PRE19]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We only want to show the tutorial at the start of the game, along with the
    heading text. Add the following code to the `draw` function:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们只想在游戏开始时显示教程，以及标题文本。将以下代码添加到 `draw` 函数中：
- en: '[PRE20]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now, when you start the game, the player will see that the game will start
    if they press the down arrow key. They will also know that, when the game is running,
    they can press the down arrow key to shoot a rocket and use the up arrow key to
    jump. The following screenshot shows this on screen text:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当你开始游戏时，玩家将看到如果他们按下向下箭头键，游戏将开始。他们也会知道，当游戏运行时，他们可以按下向下箭头键发射火箭，并使用向上箭头键跳跃。以下屏幕截图显示了屏幕上的文本：
- en: '![](img/2cde74d7-42db-418a-8c2f-633fc5ce9313.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2cde74d7-42db-418a-8c2f-633fc5ce9313.png)'
- en: Adding audio
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加音频
- en: Let's add some audio to the game to make it a little more interesting. This
    will also provide audio feedback to the player to tell them whether the rocket
    was fired or an enemy was hit.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加一些音频到游戏中，使其更有趣。这也会为玩家提供音频反馈，告诉他们火箭是否被发射或敌人是否被击中。
- en: SFML supports `.wav` or `.ogg` files, but it doesn't support `.mp3` files. For
    this project, all the files will be in the `.ogg` file format as it is good for
    compression and is also cross-platform compatible. To start, place the audio files
    in the `Audio` directory in the `Assets` folder of the system. With the audio
    files in place, we can start playing the audio files.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: SFML支持`.wav`或`.ogg`文件，但它不支持`.mp3`文件。对于这个项目，所有文件都将使用`.ogg`文件格式，因为它适合压缩，并且也是跨平台兼容的。首先，将音频文件放置在系统`Assets`文件夹中的`Audio`目录下。音频文件就绪后，我们可以开始播放音频文件。
- en: 'Audio files can be of two types:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 音频文件有两种类型：
- en: The background music, which is of a longer duration and a much higher quality
    than other files in the game. These files are played using the `sf::Music` class.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 背景音乐，其持续时间比游戏中的其他文件长得多，质量也高得多。这些文件使用`sf::Music`类播放。
- en: Other sound files, such as sound effects – which are smaller in size and sometimes
    of lower quality – are played using the `sf::Sound` class. To play the files,
    you also need an `sf::SoundBuffer` class, which is used to store the file and
    play it later.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他声音文件，如音效——通常体积较小，有时质量较低——使用`sf::Sound`类播放。要播放文件，你还需要一个`sf::SoundBuffer`类，它用于存储文件并在以后播放。
- en: 'To add audio to the game, follow these steps:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 要将音频添加到游戏中，请按照以下步骤操作：
- en: 'Let''s play the background music file, `bgMusic.ogg`. Audio files use the `Audio.hpp`
    header, which needs to be included at the top of the `main.cpp` file. This can
    be done as follows:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们播放背景音乐文件`bgMusic.ogg`。音频文件使用`Audio.hpp`头文件，需要在`main.cpp`文件的顶部包含它。可以这样做：
- en: '[PRE21]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'At the top of the `main.cpp` file, create a new instance of `sf::Music` and
    call it `bgMusic`:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main.cpp`文件的顶部创建一个新的`sf::Music`实例，并将其命名为`bgMusic`：
- en: '[PRE22]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'In the `init()` function, add the following lines to open the `bgMusic.ogg`
    file and play the `bgMusic` file:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`init()`函数中，添加以下行以打开`bgMusic.ogg`文件并播放`bgMusic`文件：
- en: '[PRE23]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Run the game. You will hear the background music playing as soon as the game
    starts.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行游戏。游戏开始时，你会立即听到背景音乐播放。
- en: 'To add the sound files that are for the rockets being fired and the enemies
    being hit, we need two sound buffers to store both of the effects and two sound
    files to play the sound files. Create two variables of the `sf::SoundBuffer` type
    called `fireBuffer` and `hitBuffer`:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要添加发射火箭和敌人被击中的声音文件，我们需要两个声音缓冲区来存储这两种效果，以及两个声音文件来播放声音。创建两个名为`fireBuffer`和`hitBuffer`的`sf::SoundBuffer`类型的变量：
- en: '[PRE24]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now, create two `sf::Sound` variables called `fireSound` and `hitSound`. Both
    can be initialized by being passed into their respective buffers, as follows:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，创建两个名为`fireSound`和`hitSound`的`sf::Sound`变量。它们可以通过传递给各自的缓冲区来初始化，如下所示：
- en: '[PRE25]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'In the `init` function, initialize the buffers first, as follows:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`init`函数中，首先初始化缓冲区，如下所示：
- en: '[PRE26]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'When the rocket intersects with the enemy, we will play the `hitSound` effect:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当火箭与敌人相交时，我们将播放`hitSound`效果：
- en: '[PRE27]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'In the `shoot` function, we will play the `fireSound` file, as follows:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`shoot`函数中，我们将播放`fireSound`文件，如下所示：
- en: '[PRE28]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Now, when you play the game, you will hear a sound effect when you shoot the
    rocket and when the rocket hits the enemy.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当你玩游戏时，你会在发射火箭和火箭击中敌人时听到声音效果。
- en: Adding player animations
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加玩家动画
- en: The game has now reached its final stages of development. Let's add some animation
    to the game to make it really come alive. To animate 2D sprites, we need a sprite
    sheet. We can use other techniques to add 2D animations, such as skeletal animation,
    but sprite sheet-based 2D animations are faster to make. Hence, we will use sprite
    sheets to add animations to the main character.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏现在已经进入开发阶段的最后阶段。让我们给游戏添加一些动画，让它真正活跃起来。要动画化2D精灵，我们需要一个精灵表。我们可以使用其他技术来添加2D动画，例如骨骼动画，但基于精灵表的2D动画制作起来更快。因此，我们将使用精灵表来为主角添加动画。
- en: A sprite sheet is an image file; however, instead of just one single image,
    it contains a collection of images in a sequence so that we can loop them to create
    the animation. Each image in the sequence is called a frame.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 精灵表是一张图像文件；然而，它包含的不是单个图像，而是一系列图像的集合，这样我们就可以循环播放它们来创建动画。序列中的每一张图像被称为帧。
- en: 'Here is the sprite sheet we are going to be using to animate the player:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我们将要用来动画化玩家的精灵表：
- en: '![](img/c8e99ebf-26f3-4887-85a1-922b90f08c71.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c8e99ebf-26f3-4887-85a1-922b90f08c71.png)'
- en: Looking from left to right, we can see that each frame is slightly different
    from the last. The main things that are being animated here are the jet pack of
    the player character and the player character's eyes (so that the character looks
    like it's blinking). Each picture will be shown as an animation frame when the
    game runs, just like in a flip-book animation, where one image is quickly replaced
    with another image to create the effect of animation.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 从左到右看，我们可以看到每个帧都与上一个略有不同。这里正在动画化的主要事物是玩家角色的喷气背包和玩家角色的眼睛（这样角色看起来就像是在眨眼）。当游戏运行时，每张图片将作为动画帧显示，就像在翻页动画中，一张图片迅速被另一张图片替换，以产生动画效果。
- en: 'SFML makes it really easy to animate 2D characters since we can choose which
    frame to display in the `update` function. Let''s start animating the character:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: SFML 使得动画 2D 角色变得非常简单，因为我们可以在 `update` 函数中选择要显示的帧。让我们开始动画角色：
- en: 'Add the sprite sheet file to the `Assets/graphics` folder. We need to make
    some changes to the `Hero.h` and `Hero.cpp` files. Let''s look at the changes
    for the `Hero.h` file first:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将精灵图集文件添加到 `Assets/graphics` 文件夹。我们需要对 `Hero.h` 和 `Hero.cpp` 文件进行一些修改。让我们首先看看
    `Hero.h` 文件的修改：
- en: '[PRE29]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: We need to add two more parameters to the `init` function. The first is an int
    called `frameCount`, which is the number of frames in the animation. In our case,
    there are four frames in the hero sprite sheet. The other parameter is a float,
    called `animDuration`, which basically sets how long you want the animation to
    be played. This will determine the speed of the animation.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要向 `init` 函数添加两个额外的参数。第一个是一个名为 `frameCount` 的整数，它是动画中的帧数。在我们的例子中，英雄精灵图集中有四帧。另一个参数是一个浮点数，称为
    `animDuration`，它基本上设置了动画播放的时长。这将决定动画的速度。
- en: We will also create some variables. The first two variables we'll create, `m_frameCount`
    and `m_animDuration`, will be used for storing `frameCount` and `animDuration`
    locally. We will also create a float called `m_elapsedTime`, which will keep track
    of how long the game has been running, and a `vector2` int called `m_spriteSize`,
    which will store the size of each frame.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将创建一些变量。我们将创建的前两个变量，`m_frameCount` 和 `m_animDuration`，将用于在本地存储 `frameCount`
    和 `animDuration`。我们还将创建一个名为 `m_elapsedTime` 的浮点数，它将跟踪游戏运行了多长时间，以及一个名为 `m_spriteSize`
    的 `vector2` 整数，它将存储每个帧的大小。
- en: 'Let''s move on to the `Hero.cpp` file and see what changes are needed there.
    Here is the modified `init` function:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们继续到 `Hero.cpp` 文件，看看需要哪些修改。以下是修改后的 `init` 函数：
- en: '[PRE30]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: In the `init` function, we set `m_frameCount` and `m_animationDuration` locally.
    We need to hardcode the value of the width (as `92`) and height (as `126`) of
    each frame. If you are loading in your own images, these values will be different.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `init` 函数中，我们设置 `m_frameCount` 和 `m_animationDuration` 本地。我们需要将每个帧的宽度（作为 `92`）和高度（作为
    `126`）的值硬编码。如果您正在加载自己的图像，这些值将不同。
- en: After calling `setTexture`, we will call the `setTextureRect` function of the
    `Sprite` class to set which part of the sprite sheet we want to display. Start
    at the origin of the sprite and get the first frame of the sprite sheet by passing
    the width and height of `spriteSHere, we passed the new heroAnim.png file instead
    of theize`.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用 `setTexture` 之后，我们将调用 `Sprite` 类的 `setTextureRect` 函数来设置我们想要显示的精灵图集部分。从精灵的原点开始，通过传递
    `spriteSheet` 的宽度和高度来获取精灵图集的第一帧。我们传递了新的 heroAnim.png 文件而不是 `size`。
- en: Set the position and origin, which is equal to the center of the width and height
    of `spriteSize`.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 设置位置和原点，等于 `spriteSize` 的宽度和高度的中间。
- en: 'Let''s make some changes to the `update` function, which is where the major
    magic happens:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们对 `update` 函数进行一些修改，这是主要魔法发生的地方：
- en: '[PRE31]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: In the `update` function, increase the elapsed time by the delta time. Then,
    calculate the current animation frame number.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `update` 函数中，通过 delta 时间增加已过时间。然后，计算当前动画帧号。
- en: Update the part of the sprite sheet to be shown by calling `setTextureRect`
    and move the origin of the frame to the `x-axis`, which depends on `animFrame`,
    by multiplying it by the width of the frame. The height of the new frame doesn't
    change, so we set it to 0\. The width and height of the frame remain the same,
    so we pass in the size of the frame itself.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调用 `setTextureRect` 更新要显示的精灵图集部分，并将帧的原点移动到 `x` 轴上，这取决于 `animFrame`，通过乘以帧的宽度来实现。新帧的高度不变，所以我们将其设置为
    0。帧的宽度和高度保持不变，因此我们传递帧本身的尺寸。
- en: The rest of the functions in `Hero.cpp` remain as they are, and no changes need
    to be made to them.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`Hero.cpp`中的其余功能保持不变，不需要对它们进行任何更改。'
- en: 'Go back to `main.cpp` so that we can change how we call `hero.init`. In the
    `init` function, make the required change:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回`main.cpp`，以便我们可以更改调用`hero.init`的方式。在`init`函数中，进行必要的更改：
- en: '[PRE32]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Here, we passed the new `heroAnim.png` file instead of the single-frame `.png` file
    we loaded previously. Set the number of frames to `4` and set `animDuration` to
    `1.0f`.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们传递了新的`heroAnim.png`文件，而不是之前加载的单帧`.png`文件。将帧数设置为`4`并将`animDuration`设置为`1.0f`。
- en: 'Run the game. You will see that the player character is now animated and blinks
    every four frames:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行游戏。你会看到玩家角色现在被动画化，每四帧闪烁一次：
- en: '![](img/f1c30d01-f217-40d9-b723-41e6206f010f.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f1c30d01-f217-40d9-b723-41e6206f010f.png)'
- en: Summary
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we completed the gameloop and added the `gameover` condition.
    We added scoring so that the player knows how many points they have scored. We
    also added text so that the name of the game is displayed, the player's score
    is displayed, and a tutorial is displayed that tells the user how to play the
    game. Then, we learned how to place these elements in the center of the viewport.
    Finally, we added sound effects and animations to make our game come to life.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们完成了游戏循环并添加了`gameover`条件。我们添加了得分，以便玩家知道他们获得了多少分。我们还添加了文本，以便显示游戏名称、玩家的得分以及一个教程，告诉用户如何玩游戏。然后，我们学习了如何将这些元素放置在视口的中心。最后，我们添加了音效和动画，使我们的游戏栩栩如生。
- en: In the next chapter, we will look at how to render 3D and 2D objects in a scene.
    Instead of using a framework, we will start creating a basic engine and begin
    our journey of understanding the basics of rendering.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨如何在场景中渲染3D和2D对象。我们将不使用框架，而是开始创建一个基本引擎，并开始了解渲染基础之旅。
