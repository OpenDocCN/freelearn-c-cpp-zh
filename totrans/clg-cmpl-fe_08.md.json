["```cpp\n1 int max(int a, int b) { \n\n2   if (a > b) \n\n3     return a; \n\n4   return b; \n\n5 }\n```", "```cpp\n$ ./clang-tools-extra/clang-tidy/add_new_check.py misc cyclomaticcomplexity\n```", "```cpp\n27 private: \n\n28   unsigned calculateCyclomaticComplexity(const CFG *cfg);\n```", "```cpp\n17 void CyclomaticcomplexityCheck::registerMatchers(MatchFinder *Finder) { \n\n18   Finder->addMatcher(functionDecl().bind(\"func\"), this); \n\n19 }\n```", "```cpp\n21 void CyclomaticcomplexityCheck::check(const MatchFinder::MatchResult &Result) { \n\n22   const auto *Func = Result.Nodes.getNodeAs<FunctionDecl>(\"func\"); \n\n23   if (!Func || !Func->hasBody()) return; \n\n24  \n\n25   std::unique_ptr<CFG> cfg = \n\n26       CFG::buildCFG(Func, Func->getBody(), Result.Context, CFG::BuildOptions()); \n\n27   if (!cfg) return; \n\n28  \n\n29   unsigned Threshold = Options.get(\"Threshold\", 5); \n\n30   unsigned complexity = calculateCyclomaticComplexity(cfg.get()); \n\n31   if (complexity > Threshold) { \n\n32     diag(Func->getLocation(), \"function %0 has high cyclomatic complexity (%1)\") \n\n33         << Func << complexity; \n\n34   } \n\n35 }\n```", "```cpp\n37 unsigned CyclomaticcomplexityCheck::calculateCyclomaticComplexity( \n\n38     const CFG *cfg) { \n\n39   unsigned edges = 0; \n\n40   unsigned nodes = 0; \n\n41  \n\n42   for (const auto *block : *cfg) { \n\n43     edges += block->succ_size(); \n\n44     ++nodes; \n\n45   } \n\n46  \n\n47   return edges - nodes + 2;  // Simplified formula \n\n48 }\n```", "```cpp\n$ ninja install-clang-tidy\n```", "```cpp\n1$ <...>/llvm-project/install/bin/clang-tidy                         \\ \n\n2   -checks=\"-*,misc-cyclomaticcomplexity\"                            \\ \n\n3   -config=\"{CheckOptions:                                           \\ \n\n4             [{key: misc-cyclomaticcomplexity.Threshold, value: ’1’}]}\" \\ \n\n5   max.cpp                                                          \\ \n\n6   -- -std=c++17\n```", "```cpp\nmax.cpp:1:5: warning: function ’max’ has high cyclomatic complexity (2) ...\nint max(int a, int b) {\n    ^\n```", "```cpp\n1$ lldb <...>/llvm-project/install/bin/clang-tidy --                   \\ \n\n2   -checks=\"-*,misc-cyclomaticcomplexity\"                              \\ \n\n3   -config=\"{CheckOptions:                                             \\ \n\n4              [{key: misc-cyclomaticcomplexity.Threshold, value: ’1’}]}\" \\ \n\n5   max.cpp                                                             \\ \n\n6   -- -std=c++17 -Wno-all\n```", "```cpp\n$ lldb <...>/llvm-project/install/bin/clang-tidy --                   \\ \n\n  -checks=\"-*,misc-cyclomaticcomplexity\"                              \\ \n\n  -config=\"{CheckOptions:                                             \\ \n\n             [{key: misc-cyclomaticcomplexity.Threshold, value: ’1’}]}\" \\ \n\n  max.cpp                                                             \\ \n\n  -- -std=c++17 -Wno-all \n\n... \n\n(lldb) b CFGBuilder::createBlock \n\nBreakpoint 1: where = ...CFGBuilder::createBlock(bool) const ...\n```", "```cpp\n1(lldb) r \n\n2 ... \n\n3     frame #0: ...CFGBuilder::createBlock... \n\n4    1690 /// createBlock - Used to lazily create blocks that are connected \n\n5    1691 ///  to the current (global) successor. \n\n6    1692 CFGBlock *CFGBuilder::createBlock(bool add_successor) { \n\n7 -> 1693   CFGBlock *B = cfg->createBlock(); \n\n8    1694   if (add_successor && Succ) \n\n9    1695     addSuccessor(B, Succ); \n\n10    1696   return B; \n\n11  \n\n12 (lldb) c \n\n13 ... \n\n14 (lldb) c \n\n15 ... \n\n16 (lldb) c \n\n17 ... \n\n18 (lldb) c \n\n19 ... \n\n20 (lldb) c \n\n21 ... \n\n221  warning generated. \n\n23 max.cpp:1:5: warning: function ’max’ has high cyclomatic complexity (2) [misc-cyclomaticcomplexity] \n\n24 int max(int a, int b) { \n\n25     ^ \n\n26 Process ... exited with status = 0 (0x00000000)\n```", "```cpp\n1std::unique_ptr<CFG> CFGBuilder::buildCFG(const Decl *D, Stmt *Statement) { \n\n2   ... \n\n3   // Create an empty block that will serve as the exit block for the CFG. \n\n4   Succ = createBlock(); \n\n5   assert(Succ == &cfg->getExit()); \n\n6   Block = nullptr;  // the EXIT block is empty.  ... \n\n7   ... \n\n8   // Visit the statements and create the CFG. \n\n9   CFGBlock *B = Visit(Statement, ...); \n\n10   ... \n\n11   // Create an empty entry block that has no predecessors. \n\n12   cfg->setEntry(createBlock()); \n\n13   ... \n\n14   return std::move(cfg); \n\n15 }\n```", "```cpp\n1CFGBlock *CFGBuilder::Visit(Stmt * S, ...) { \n\n2   ... \n\n3   switch (S->getStmtClass()) { \n\n4     ... \n\n5     case Stmt::CompoundStmtClass: \n\n6       return VisitCompoundStmt(cast<CompoundStmt>(S), ...); \n\n7     ... \n\n8     case Stmt::IfStmtClass: \n\n9       return VisitIfStmt(cast<IfStmt>(S)); \n\n10     ... \n\n11     case Stmt::ReturnStmtClass: \n\n12     ... \n\n13       return VisitReturnStmt(S); \n\n14     ... \n\n15   } \n\n16 }\n```", "```cpp\n1CFGBlock *CFGBuilder::VisitCompoundStmt(CompoundStmt *C, ...) { \n\n2   ... \n\n3   CFGBlock *LastBlock = Block; \n\n4  \n\n5   for (Stmt *S : llvm::reverse(C->body())) { \n\n6    // If we hit a segment of code just containing ’;’ (NullStmts), we can \n\n7    // get a null block back.  In such cases, just use the LastBlock \n\n8    CFGBlock *newBlock = Visit(S, ...); \n\n9  \n\n10    if (newBlock) \n\n11      LastBlock = newBlock; \n\n12  \n\n13    if (badCFG) \n\n14      return nullptr; \n\n15    ... \n\n16   } \n\n17  \n\n18   return LastBlock; \n\n19 }\n```", "```cpp\n1CFGBlock *CFGBuilder::VisitIfStmt(IfStmt *I) { \n\n2   ... \n\n3   // Process the true branch. \n\n4   CFGBlock *ThenBlock; \n\n5   { \n\n6     Stmt *Then = I->getThen(); \n\n7     ... \n\n8     ThenBlock = Visit(Then, ...); \n\n9     ... \n\n10   } \n\n11  \n\n12   // Specially handle \"if (expr1 || ...)\" and \"if (expr1 && ...)\" \n\n13   // ... \n\n14   if (Cond && Cond->isLogicalOp()) \n\n15     ... \n\n16   else { \n\n17     // Now create a new block containing the if statement. \n\n18     Block = createBlock(false); \n\n19     ... \n\n20   } \n\n21   ... \n\n22 }\n```", "```cpp\n1CFGBlock *CFGBuilder::VisitReturnStmt(Stmt *S) { \n\n2   // Create the new block. \n\n3   Block = createBlock(false); \n\n4   ... \n\n5   // Visit children \n\n6   if (ReturnStmt *RS = dyn_cast<ReturnStmt>(S)) { \n\n7     if (Expr *O = RS->getRetValue()) \n\n8       return Visit(O, ...); \n\n9     return Block; \n\n10   } \n\n11   ... \n\n12 }\n```"]