["```cpp\n#include <list>\nusing std::list;\nint main()\n{   \n    list<Student> studentBody;   // create a list\n    Student s1(\"Jul\", \"Li\", 'M', \"Ms.\", 3.8, \"C++\",\n               \"117PSU\");\n    // Note: simple heap instance below, later you can opt\n    // for a smart pointer to ease allocation/deallocation\n    Student *s2 = new Student(\"Deb\", \"King\", 'H', \"Dr.\", \n                              3.8, \"C++\", \"544UD\");\n    // Add Students to the studentBody list. \n    studentBody.push_back(s1);\n    studentBody.push_back(*s2);\n    // The next 3 instances are anonymous objects in main()\n    studentBody.push_back(Student(\"Hana\", \"Sato\", 'U', \n                          \"Dr.\", 3.8, \"C++\", \"178PSU\"));\n    studentBody.push_back(Student(\"Sara\", \"Kato\", 'B',\n                          \"Dr.\", 3.9, \"C++\", \"272PSU\"));\n    studentBody.push_back(Student(\"Giselle\", \"LeBrun\", 'R',\n                          \"Ms.\", 3.4, \"C++\", \"299TU\"));\n    while (!studentBody.empty())\n    {\n       studentBody.front().Print();\n       studentBody.pop_front();\n    }\n    delete s2;  // delete any heap instances\n    return 0;\n}\n```", "```cpp\nMs. Jul M. Li with id: 117PSU GPA:  3.8 Course: C++\nDr. Deb H. King with id: 544UD GPA:  3.8 Course: C++\nDr. Hana U. Sato with id: 178PSU GPA:  3.8 Course: C++\nDr. Sara B. Kato with id: 272PSU GPA:  3.9 Course: C++\nMs. Giselle R. LeBrun with id: 299TU GPA:  3.4 Course: C++\n```", "```cpp\n#include <list>\n#include <iterator>\nusing std::list;\nusing std::iterator;\nbool operator<(const Student &s1, const Student &s2)\n{   // overloaded operator< -- required to use list::sort()\n    return s1.GetGpa() < s2.GetGpa();\n}\nint main()\n{\n    list<Student> studentBody;  \n    Student s1(\"Jul\", \"Li\", 'M', \"Ms.\", 3.8, \"C++\",\n               \"117PSU\");\n    // Add Students to the studentBody list.\n    studentBody.push_back(s1);\n    // The next Student instances are anonymous objects\n    studentBody.push_back(Student(\"Hana\", \"Sato\", 'U',\n                          \"Dr.\", 3.8, \"C++\", \"178PSU\"));\n    studentBody.push_back(Student(\"Sara\", \"Kato\", 'B',\n                          \"Dr.\", 3.9, \"C++\", \"272PSU\"));\n    studentBody.push_back(Student(\"Giselle\", \"LeBrun\", 'R',\n                          \"Ms.\", 3.4, \"C++\", \"299TU\"));\n    studentBody.sort();  // sort() will rely on operator< \n    // Though we'll generally prefer range-for loops, let's\n    // understand and demo using an iterator for looping.\n    // Create a list iterator; set to first item in list.\n    // We'll next simplify iterator notation with 'auto'.\n    list <Student>::iterator listIter =studentBody.begin();\n    while (listIter != studentBody.end())\n    {\n        Student &temp = *listIter;\n        temp.EarnPhD();\n        ++listIter;    // prefer pre-inc (less expensive)\n    } \n    // Simplify iterator declaration using 'auto'\n    auto autoIter = studentBody.begin();\n    while (autoIter != studentBody.end())\n    {\n        (*autoIter).Print();  \n        ++autoIter;\n    }\n    return 0;\n}\n```", "```cpp\nDr. Giselle R. LeBrun with id: 299TU GPA:  3.4 Course: C++\nDr. Jul M. Li with id: 117PSU GPA:  3.8 Course: C++\nDr. Hana U. Sato with id: 178PSU GPA:  3.8 Course: C++\nDr. Sara B. Kato with id: 272PSU GPA:  3.9 Course: C++\n```", "```cpp\n#include <vector>\nusing std::vector;\nint main()\n{   // instantiate two vectors\n    vector<Student> studentBody1, studentBody2; \n    // add 3 Students, which are anonymous objects \n    studentBody1.push_back(Student(\"Hana\", \"Sato\", 'U',\n\"Dr.\", 3.8, \"C++\", \"178PSU\"));\n    studentBody1.push_back(Student(\"Sara\", \"Kato\", 'B',\n                           \"Dr.\", 3.9, \"C++\", \"272PSU\"));\n    studentBody1.push_back(Student(\"Giselle\", \"LeBrun\",\n                         'R', \"Ms.\", 3.4, \"C++\", \"299TU\"));\n    // Compare this loop to next loop using an iterator and\n    // also to the preferred range-for loop further beyond\n    for (int i = 0; i < studentBody1.size(); i++)   \n        studentBody1[i].Print();   // print first vector\n    studentBody2 = studentBody1;   // assign one to another\n    if (studentBody1 == studentBody2)\n        cout << \"Vectors are the same\" << endl;\n    // Notice: auto keyword simplifies iterator declaration\n    for (auto iter = studentBody2.begin();\n              iter != studentBody2.end(); iter++)\n        (*iter).EarnPhD();\n   // Preferred range-for loop (and auto to simplify type)\n    for (const auto &student : studentBody2)\n        student.Print();\n    if (!studentBody1.empty())   // clear first vector \n        studentBody1.clear();\n    return 0;\n}\n```", "```cpp\nDr. Hana U. Sato with id: 178PSU GPA:  3.8 Course: C++\nDr. Sara B. Kato with id: 272PSU GPA:  3.9 Course: C++\nMs. Giselle R. LeBrun with id: 299TU GPA:  3.4 Course: C++\nVectors are the same\nEveryone to earn a PhD\nDr. Hana U. Sato with id: 178PSU GPA:  3.8 Course: C++\nDr. Sara B. Kato with id: 272PSU GPA:  3.9 Course: C++\nDr. Giselle R. LeBrun with id: 299TU GPA:  3.4 Course: C++\n```", "```cpp\n#include <deque> \nusing std::deque;\nint main()\n{\n    deque<Student> studentBody;   // create a deque\n    Student s1(\"Tim\", \"Lim\", 'O', \"Mr.\", 3.2, \"C++\",\n               \"111UD\");\n    // the remainder of the Students are anonymous objects\n    studentBody.push_back(Student(\"Hana\", \"Sato\", 'U',\n                          \"Dr.\",3.8, \"C++\", \"178PSU\"));\n    studentBody.push_back(Student(\"Sara\", \"Kato\", 'B',\n                          \"Dr.\", 3.9, \"C++\", \"272PSU\"));\n    studentBody.push_front(Student(\"Giselle\", \"LeBrun\",\n                          'R',\"Ms.\", 3.4, \"C++\", \"299TU\"));\n    // insert one past the beginning \n    studentBody.insert(std::next(studentBody.begin()), \n    Student(\"Anne\", \"Brennan\", 'B', \"Ms.\", 3.9, \"C++\",\n            \"299CU\"));\n    studentBody[0] = s1;  // replace 0th element; \n                          // no bounds checking!\n    while (!studentBody.empty())\n    {\n        studentBody.front().Print();\n        studentBody.pop_front();\n    }\n    return 0;\n}\n```", "```cpp\nMr. Tim O. Lim with id: 111UD GPA:  3.2 Course: C++\nMs. Anne B. Brennan with id: 299CU GPA:  3.9 Course: C++\nDr. Hana U. Sato with id: 178PSU GPA:  3.8 Course: C++\nDr. Sara B. Kato with id: 272PSU GPA:  3.9 Course: C++\n```", "```cpp\n#include <stack>   // template class preamble\nusing std::stack;\nint main()\n{\n    stack<Student> studentBody;   // create a stack\n    // add Students to the stack (anonymous objects)\n    studentBody.push(Student(\"Hana\", \"Sato\", 'U', \"Dr.\",\n                             3.8, \"C++\", \"178PSU\"));\n    studentBody.push(Student(\"Sara\", \"Kato\", 'B', \"Dr.\",\n                             3.9, \"C++\", \"272PSU\"));\n    studentBody.push(Student(\"Giselle\", \"LeBrun\", 'R',\n                             \"Ms.\", 3.4, \"C++\", \"299TU\"));\n    while (!studentBody.empty())\n    {\n        studentBody.top().Print();\n        studentBody.pop();\n    }\n    return 0;\n}\n```", "```cpp\nMs. Giselle R. LeBrun with id: 299TU GPA:  3.4 Course: C++\nDr. Sara B. Kato with id: 272PSU GPA:  3.9 Course: C++\nDr. Hana U. Sato with id: 178PSU GPA:  3.8 Course: C++\n```", "```cpp\n#include <queue>  \nusing std::queue;\nint main()\n{\n    queue<Student> studentBody;  // create a queue\n    // add Students to the queue (anonymous objects)\n    studentBody.push(Student(\"Hana\", \"Sato\", 'U', \"Dr.\",\n                             3.8, \"C++\", \"178PSU\"));\n    studentBody.push(Student(\"Sara\", \"Kato\", 'B' \"Dr.\",\n3.9, \"C++\", \"272PSU\"));\n    studentBody.push(Student(\"Giselle\", \"LeBrun\", 'R',\n                             \"Ms.\", 3.4, \"C++\", \"299TU\"));\n    while (!studentBody.empty())\n    {\n        studentBody.front().Print();\n        studentBody.pop();\n    }\n    return 0;\n}\n```", "```cpp\nDr. Hana U. Sato with id: 178PSU GPA:  3.8 Course: C++\nDr. Sara B. Kato with id: 272PSU GPA:  3.9 Course: C++\nMs. Giselle R. LeBrun with id: 299TU GPA:  3.4 Course: C++\n```", "```cpp\n#include <map>\nusing std::map;\nusing std::pair;\nbool operator<(const Student &s1, const Student &s2)\n{   // We need to overload operator< to compare Students\n    return s1.GetGpa() < s2.GetGpa();\n}\nint main()\n{\n    Student s1(\"Hana\", \"Lo\", 'U', \"Dr.\", 3.8, \"C++\",\n               \"178UD\");\n    Student s2(\"Ali\", \"Li\", 'B', \"Dr.\", 3.9, \"C++\",\n               \"272UD\");\n    Student s3(\"Rui\", \"Qi\", 'R', \"Ms.\", 3.4, \"C++\",\n               \"299TU\");\n    Student s4(\"Jiang\", \"Wu\", 'C', \"Ms.\", 3.8, \"C++\",\n               \"887TU\");\n    // create three pairings of ids to Students\n    pair<string, Student> studentPair1\n                                (s1.GetStudentId(), s1);\n    pair<string, Student> studentPair2\n                                (s2.GetStudentId(), s2);\n    pair<string, Student> studentPair3\n                                (s3.GetStudentId(), s3);\n    // Create map of Students w string keys\n    map<string, Student> studentBody;\n    studentBody.insert(studentPair1);  // insert 3 pairs\n    studentBody.insert(studentPair2);\n    studentBody.insert(studentPair3);\n    // insert using virtual indices per map\n    studentBody[s4.GetStudentId()] = s4; \n    // Iterate through set with map iterator – let's \n    // compare to range-for and auto usage just below\n    map<string, Student>::iterator mapIter;\n    mapIter = studentBody.begin();\n    while (mapIter != studentBody.end())\n    {   \n        // set temp to current item in map iterator\n        pair<string, Student> temp = *mapIter;\n        Student &tempS = temp.second;  // get 2nd element\n        // access using mapIter\n        cout << temp.first << \" \";\n        cout << temp.second.GetFirstName();  \n        // or access using temporary Student, tempS  \n        cout << \" \" << tempS.GetLastName() << endl;\n        ++mapIter;\n    }\n    // Now, let's iterate through our map using a range-for\n    // loop and using 'auto' to simplify the declaration\n    // (this decomposes the pair to 'id' and 'student')\n    for (auto &[id, student] : studentBody)\n        cout << id << \" \" << student.GetFirstName() << \" \" \n             << student.GetLastName() << endl;\n    return 0;\n}\n```", "```cpp\n178UD Hana Lo\n272UD Ali Li\n299TU Rui Qi\n887TU Jiang Wu\n178UD Hana Lo\n272UD Ali Li\n299TU Rui Qi\n887TU Jiang Wu\n```", "```cpp\n#include <map>\nusing std::map;\nusing std::pair;\nstruct comparison   // This struct represents a 'functor'\n{                   // that is, a 'function object'\n    bool operator() (const string &key1, \n                     const string &key2) const\n    {   \n        int ans = key1.compare(key2);\n        if (ans >= 0) return true;  // return a boolean\n        else return false;  \n    }\n    // default constructor and destructor are adequate\n};\nint main()\n{\n    Student s1(\"Hana\", \"Sato\", 'U', \"Dr.\", 3.8, \"C++\", \n               \"178PSU\");\n    Student s2(\"Sara\", \"Kato\", 'B', \"Dr.\", 3.9, \"C++\",\n               \"272PSU\");\n    Student s3(\"Jill\", \"Long\", 'R', \"Dr.\", 3.7, \"C++\",\n               \"234PSU\");\n    // Now, map is maintained in sorted (decreasing) order\n    // per ‹comparison› functor using operator()\n    map<string, Student, comparison> studentBody;\n    map<string, Student, comparison>::iterator mapIter;\n    // The remainder of the program is similar to prior\n}   // map program. See online code for complete example.\n```"]