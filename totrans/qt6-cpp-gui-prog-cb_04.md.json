["```cpp\n    #include <QMainWindow>\n    #include <QPainter>\n    ```", "```cpp\n    public:\n    explicit MainWindow(QWidget *parent = 0);\n    ~MainWindow();\n    mainwindow.cpp file and define the paintEvent() event handler:\n\n    ```", "```cpp\n\n    ```", "```cpp\n    QPainter textPainter;\n    textPainter.begin(this);\n    textPainter.setFont(QFont(\"Times\", 14, QFont::Bold));\n    textPainter.drawText(QPoint(20, 30), \"Testing\");\n    textPainter.end();\n    ```", "```cpp\n    QPainter linePainter;\n    linePainter.begin(this);\n    linePainter.drawLine(QPoint(50, 60), QPoint(100, 100));\n    linePainter.end();\n    ```", "```cpp\n    QPainter rectPainter;\n    rectPainter.begin(this);\n    rectPainter.setBrush(Qt::BDiagPattern);\n    rectPainter.drawRect(QRect(40, 120, 80, 30));\n    rectPainter.end();\n    ```", "```cpp\n    QPen ellipsePen;\n    ellipsePen.setColor(Qt::red);\n    ellipsePen.setStyle(Qt::DashDotLine);\n    QPainter ellipsePainter;\n    ellipsePainter.begin(this);\n    ellipsePainter.setPen(ellipsePen);\n    ellipsePainter.drawEllipse(QPoint(80, 200), 50, 20);\n    ellipsePainter.end();\n    ```", "```cpp\n    QPainterPath rectPath;\n    rectPath.addRect(QRect(150, 20, 100, 50));\n    QPainter pathPainter;\n    pathPainter.begin(this);\n    pathPainter.setPen(QPen(Qt::red, 1, Qt::DashDotLine,\n    Qt::FlatCap, Qt::MiterJoin));\n    pathPainter.setBrush(Qt::yellow);\n    pathPainter.drawPath(rectPath);\n    pathPainter.end();\n    ```", "```cpp\n    QPainterPath ellipsePath;\n    ellipsePath.addEllipse(QPoint(200, 120), 50, 20);\n    QPainter ellipsePathPainter;\n    ellipsePathPainter.begin(this);\n    ellipsePathPainter.setPen(QPen(QColor(79, 106, 25), 5,\n    Qt::SolidLine, Qt::FlatCap, Qt::MiterJoin));\n    ellipsePathPainter.setBrush(QColor(122, 163, 39));\n    ellipsePathPainter.drawPath(ellipsePath);\n    ellipsePathPainter.end();\n    ```", "```cpp\n    QImage image;\n    image.load(\"tux.png\");\n    QPainter imagePainter(this);\n    imagePainter.begin(this);\n    imagePainter.drawImage(QPoint(100, 150), image);\n    imagePainter.end();\n    ```", "```cpp\nQPainter linePainter(this);\n```", "```cpp\n    void MainWindow::on_actionSave_as_SVG_triggered() {}\n    ```", "```cpp\n    #include <QtSvg/QSvgGenerator>\n    #include <QFileDialog>\n    ```", "```cpp\n    QT += core gui paintAll() within the mainwindow.h file, as shown in the following code:\n\n    ```", "```cpp\n    void MainWindow::paintAll(QSvgGenerator *generator) {\n        QPainter painter;\n         if (engine)\n             painter.begin(engine);\n         else\n             painter.begin(this);\n         painter.setFont(QFont(\"Times\", 14, QFont::Bold));\n         painter.drawText(QPoint(20, 30), \"Testing\");\n         painter.drawLine(QPoint(50, 60), QPoint(100, 100));\n         painter.setBrush(Qt::BDiagPattern);\n         painter.drawRect(QRect(40, 120, 80, 30));\n    ```", "```cpp\n\n    ```", "```cpp\n        QPen ellipsePen;\n        ellipsePen.setColor(Qt::red);\n    ellipsePen.setStyle(Qt::DashDotLine);\n        painter.setPen(ellipsePen);\n        painter.drawEllipse(QPoint(80, 200), 50, 20);\n        QPainterPath rectPath;\n        rectPath.addRect(QRect(150, 20, 100, 50));\n        painter.setPen(QPen(Qt::red, 1, Qt::DashDotLine, Qt::FlatCap, Qt::MiterJoin));\n        painter.setBrush(Qt::yellow);\n        painter.drawPath(rectPath);\n    ```", "```cpp\n        QPainterPath ellipsePath;\n        ellipsePath.addEllipse(QPoint(200, 120), 50, 20);\n        painter.setPen(QPen(QColor(79, 106, 25), 5, Qt::SolidLine, Qt::FlatCap, Qt::MiterJoin));\n        painter.setBrush(QColor(122, 163, 39));\n        painter.drawPath(ellipsePath);\n        QImage image;\n        image.load(\"tux.png\");\n        painter.drawImage(QPoint(100, 150), image);\n        painter.end();\n    }\n    ```", "```cpp\n    void MainWindow::paintEvent(QPaintEvent *event) {\n        paintAll();\n    }\n    ```", "```cpp\n    void MainWindow::on_actionSave_as_SVG_triggered() {\n        QString filePath = QFileDialog::getSaveFileName(this, «Save SVG», «», «SVG files (*.svg)»);\n        if (filePath == \"\")\n            return;\n    }\n    ```", "```cpp\n    void MainWindow::on_actionSave_as_SVG_triggered() {\n        QString filePath = QFileDialog::getSaveFileName(this, \"Save\n    SVG\", \"\", \"SVG files (*.svg)\");\n        if (filePath == \"\")\n            return;\n        QSvgGenerator generator;\n        generator.setFileName(filePath);\n        generator.setSize(QSize(this->width(), this->height()));\n        generator.setViewBox(QRect(0, 0, this->width(), this->height()));\n        generator.setTitle(\"SVG Example\");\n        generator.setDescription(\"This SVG file is generated by Qt.\");\n        paintAll(&generator);\n    }\n    ```", "```cpp\nif (engine)\n    painter.begin(engine);\nelse\n    painter.begin(this);\n```", "```cpp\n    #include <QTime>\n    #include <QTimer>\n    #include <QPainter>\n    ```", "```cpp\n    public:\n        explicit MainWindow(QWidget *parent = 0);\n        ~MainWindow();\n        mainwindow.cpp file, create three arrays to store the shapes of the hour hand, minute hand, and second hand, where each of the arrays contains three sets of coordinates:\n\n    ```", "```cpp\n\n    ```", "```cpp\n    int side = qMin(width(), height());\n    QPainter painter(this);\n    painter.setRenderHint(QPainter::Antialiasing);\n    painter.translate(width() / 2, height() / 2);\n    painter.scale(side / 250.0, side / 250.0);\n    ```", "```cpp\n    for (int i = 0; i < 60; ++i) {\n        if ((i % 5) != 0)\n            painter.drawLine(92, 0, 96, 0);\n        else\n            painter.drawLine(86, 0, 96, 0);\n        painter.rotate(6.0);\n    }\n    ```", "```cpp\n    QTime time = QTime::currentTime();\n    // Draw hour hand\n    painter.save();\n    painter.rotate((time.hour() * 360) / 12);\n    painter.setPen(Qt::NoPen);\n    painter.setBrush(Qt::black);\n    painter.drawConvexPolygon(hourHand, 3);\n    painter.restore();\n    ```", "```cpp\n    // Draw minute hand\n    painter.save();\n    painter.rotate((time.minute() * 360) / 60);\n    painter.setPen(Qt::NoPen);\n    painter.setBrush(Qt::black);\n    painter.drawConvexPolygon(minuteHand, 3);\n    painter.restore();\n    ```", "```cpp\n    // Draw second hand\n    painter.save();\n    painter.rotate((time.second() * 360) / 60);\n    painter.setPen(Qt::NoPen);\n    painter.setBrush(Qt::black);\n    painter.drawConvexPolygon(secondHand, 3);\n    painter.restore();\n    ```", "```cpp\n    MainWindow::MainWindow(QWidget *parent) : QMainWindow(parent),\n    ui(new Ui::MainWindow) {\n        ui->setupUi(this);\n        QTimer* timer = new QTimer(this);\n        timer->start(1000);\n        connect(timer, QTimer::timeout, this, MainWindow::update);\n    }\n    ```", "```cpp\n    #include <QPainter>\n    ```", "```cpp\n    virtual void paintEvent(QPaintEvent* event);\n    ```", "```cpp\n    void MainWindow::paintEvent(QPaintEvent* event) {\n        QImage image;\n        image.load(\"checker.png\");\n        QImage image2;\n        image2.load(\"tux.png\");\n        QImage image3;\n        image3.load(\"butterfly.png\");\n    }\n    ```", "```cpp\n    QPainter painter(this);\n    painter.drawImage(QPoint(10, 10), image);\n    painter.drawImage(QPoint(10, 10), image2);\n    painter.drawImage(QPoint(300, 10), image);\n    painter.drawImage(QPoint(300, 40), image3);\n    ```", "```cpp\n    QPainter painter(this);\n    painter.setCompositionMode(QPainter::CompositionMode_Difference);\n    painter.drawImage(QPoint(10, 10), image);\n    painter.setCompositionMode(QPainter::CompositionMode_Multiply);\n    painter.drawImage(QPoint(10, 10), image2);\n    painter.setCompositionMode(QPainter::CompositionMode_Xor);\n    painter.drawImage(QPoint(300, 10), image);\n    painter.setCompositionMode(QPainter::CompositionMode_SoftLight);\n    painter.drawImage(QPoint(300, 40), image3);\n    ```", "```cpp\n    font: 26pt \"MS Gothic\";\n    ```", "```cpp\n    #include <QGraphicsBlurEffect>\n    #include <QGraphicsDropShadowEffect>\n    #include <QGraphicsColorizeEffect>\n    #include <QGraphicsOpacityEffect>\n    ```", "```cpp\n    MainWindow::MainWindow(QWidget *parent) : QMainWindow(parent),\n    ui(new Ui::MainWindow) {\n    ui->setupUi(this);\n    QGraphicsDropShadowEffect* shadow = new QGraphicsDropShadowEffect();\n    shadow->setXOffset(4);\n    shadow->setYOffset(4);\n    ui->label->setGraphicsEffect(shadow);\n    }\n    ```", "```cpp\n    QGraphicsColorizeEffect* colorize = new\n    QGraphicsColorizeEffect();\n    colorize->setColor(QColor(255, 0, 0));\n    ui->butterfly->setGraphicsEffect(colorize);\n    ```", "```cpp\n    QGraphicsBlurEffect* blur = new QGraphicsBlurEffect();\n    blur->setBlurRadius(12);\n    ui->label2->setGraphicsEffect(blur);\n    ```", "```cpp\n    QGraphicsOpacityEffect* alpha = new QGraphicsOpacityEffect();\n    alpha->setOpacity(0.2);\n    ui->penguin->setGraphicsEffect(alpha);\n    ```", "```cpp\n    #include <QPainter>\n    #include <QMouseEvent>\n    #include <QFileDialog>\n    ```", "```cpp\n    private:\n        Ui::MainWindow *ui;\n        QImage image;\n        bool drawing;\n        QPoint lastPoint;\n        int brushSize;\n    QWidget class. These functions will be triggered by Qt when the respective event happens. We will override these functions and tell Qt what to do when these events get called:\n\n    ```", "```cpp\n    MainWindow::MainWindow(QWidget *parent) : QMainWindow(parent),\n    ui(new Ui::MainWindow) {\n        ui->setupUi(this);\n        image = QImage(this->size(), QImage::Format_RGB32);\n    image.fill(Qt::white);\n        drawing = false;\n        brushColor = Qt::black;\n        brushSize = 2;\n    }\n    ```", "```cpp\n\n    ```", "```cpp\n    void MainWindow::mousePressEvent(QMouseEvent *event) {\n        if (event->button() == Qt::LeftButton) {\n            drawing = true;\n            lastPoint = event->pos();\n        }\n    }\n    ```", "```cpp\n    void MainWindow::mouseMoveEvent(QMouseEvent *event) {\n        if ((event->buttons() & Qt::LeftButton) && drawing) {\n            QPainter painter(&image);\n            painter.setPen(QPen(brushColor, brushSize, Qt::SolidLine, Qt::RoundCap, Qt::RoundJoin));\n            painter.drawLine(lastPoint, event->pos());\n    lastPoint = event->pos();\n             this->update();\n        }\n    }\n    ```", "```cpp\n    void MainWindow::mouseReleaseEvent(QMouseEvent *event) {\n        if (event->button() == Qt::LeftButton) {\n            drawing = false;\n        }\n    }\n    ```", "```cpp\n    void MainWindow::paintEvent(QPaintEvent *event) {\n        QPainter canvasPainter(this);\n        canvasPainter.drawImage(this->rect(), image, image.rect());\n    }\n    ```", "```cpp\n    private slots:\n        void on_actionSave_triggered();\n        void on_actionClear_triggered();\n        void on_action2px_triggered();\n        void on_action5px_triggered();\n        void on_action10px_triggered();\n        void on_actionBlack_triggered();\n        void on_actionWhite_triggered();\n        void on_actionRed_triggered();\n        void on_actionGreen_triggered();\n        void on_actionBlue_triggered();\n    ```", "```cpp\n    void MainWindow::on_actionSave_triggered() {\n        QString filePath = QFileDialog::getSaveFileName(this, «Save Image», «», «PNG (*.png);;JPEG (*.jpg *.jpeg);;All files\n    (*.*)»);\n        if (filePath == \"\")\n    return;\n        image.save(filePath);\n    }\n    void MainWindow::on_actionClear_triggered() {\n        image.fill(Qt::white);\n        this->update();\n    }\n    ```", "```cpp\n    void MainWindow::on_action2px_triggered() {\n        brushSize = 2;\n    }\n    void MainWindow::on_action5px_triggered() {\n        brushSize = 5;\n    }\n    void MainWindow::on_action10px_triggered() {\n        brushSize = 10;\n    }\n    void MainWindow::on_actionBlack_triggered() {\n        brushColor = Qt::black;\n    }\n    ```", "```cpp\n    void MainWindow::on_actionWhite_triggered() {\n        brushColor = Qt::white;\n    }\n    void MainWindow::on_actionRed_triggered() {\n        brushColor = Qt::red;\n    }\n    void MainWindow::on_actionGreen_triggered() {\n        brushColor = Qt::green;\n    }\n    void MainWindow::on_actionBlue_triggered() {\n        brushColor = Qt::blue;\n    }\n    ```", "```cpp\n    import QtQuick\n    import QtQuick.Window\n    Window {\n        id: myWindow\n        visible: true\n        width: 640\n        height: 480\n        title: qsTr(\"Hello World\")\n    }\n    ```", "```cpp\n    Window {\n        id: myWindow\n        visible: true\n        width: 640\n        height: 480\n        Canvas {\n            id: myCanvas\n            width: myWindow.width\n            height: myWindow.height\n        }\n    }\n    ```", "```cpp\n    Canvas {\n        id: myCanvas\n        width: myWindow.width\n        height: myWindow.height\n        onPaint: {\n            var context = getContext('2d')\n    context.fillStyle = 'white'\n            context.fillRect(0, 0, width, height)\n            context.lineWidth = 2\n            context.strokeStyle = 'black'\n    ```", "```cpp\n    // Draw cross\n    context.beginPath()\n    context.moveTo(50, 50)\n    context.lineTo(100, 100)\n    context.closePath()\n    context.stroke()\n    context.beginPath()\n    context.moveTo(100, 50)\n    context.lineTo(50, 100)\n    context.closePath()\n    context.stroke()\n    }\n    }\n    ```", "```cpp\n    // Draw tick\n    context.beginPath()\n    context.moveTo(150, 90)\n    context.lineTo(158, 100)\n    context.closePath()\n    context.stroke()\n    context.beginPath()\n    context.moveTo(180, 100)\n    context.lineTo(210, 50)\n    context.closePath()\n    context.stroke()\n    ```", "```cpp\n    // Draw triangle\n    context.lineWidth = 4\n    context.strokeStyle = \"red\"\n    context.fillStyle = \"salmon\"\n    context.beginPath()\n    context.moveTo(50,150)\n    context.lineTo(150,150)\n    context.lineTo(50,250)\n    context.closePath()\n    context.fill()\n    context.stroke()\n    ```", "```cpp\n    // Draw circle\n    context.lineWidth = 4\n    context.strokeStyle = \"blue\"\n    context.fillStyle = \"steelblue\"\n    var pi = 3.141592653589793\n    context.beginPath()\n    context.arc(220, 200, 60, 0, pi, true)\n    context.closePath()\n    context.fill()\n    context.stroke()\n    ```", "```cpp\n    context.beginPath()\n    context.arc(220, 280, 60, 0, 2 * pi, true)\n    context.closePath()\n    context.fill()\n    context.stroke()\n    ```", "```cpp\n    // Draw image\n    context.drawImage(\"tux.png\", 280, 10, 150, 174)\n    ```", "```cpp\n    onImageLoaded: requestPaint();\n    onPaint: {\n        // The code we added previously\n    }\n    ```"]