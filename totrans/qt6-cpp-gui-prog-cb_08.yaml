- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Threading Basics –Asynchronous Programming
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most modern software runs its processes in parallel and offloads tasks to different
    threads to take advantage of modern CPU multicore architecture. This way, software
    can be more efficient by running multiple processes simultaneously without affecting
    performance. In this chapter, we will learn how to make use of **threads** to
    boost our Qt 6 application’s performance and efficiency.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following recipes:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Using threads
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QObject` and `QThread`'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data protection and sharing data between threads
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with `QRunnable` processes
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The technical requirements for this chapter include Qt 6.6.1 and Qt Creator
    12.0.2\. All the code used in this chapter can be downloaded from the following
    GitHub repository: [https://github.com/PacktPublishing/QT6-C-GUI-Programming-Cookbook---Third-Edition-/tree/main/Chapter08](https://github.com/PacktPublishing/QT6-C-GUI-Programming-Cookbook---Third-Edition-/tree/main/Chapter08).'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Using threads
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Qt 6 provides multiple methods to create and use threads. You can choose between
    high-level methods and low-level ones. High-level methods are much easier to get
    started but are limited in what you can do with them. Conversely, low-level methods
    are more flexible but not beginner-friendly. In this recipe, we will learn how
    to use one of the high-level methods to easily create a multithreading Qt 6 application.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s learn how to create multithreading applications by following these steps:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `main.cpp`. Then, add the following headers at the top of the file:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, create a function called `printText()` before the `main()` function:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'After that, add the following code to the `main()` function:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If you build and run the program now, you should see that `A` gets printed
    first before `B`. Note that their thread IDs are all the same. This is because
    we are running the `printText()` functions in the main thread:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To separate them into different threads, let’s use a high-level class provided
    by Qt 6 called `QFuture`. Comment out the two `printText()` functions in `main()`
    and use the following code instead:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If you build and run the program again, you should see something like the following
    being printed out on the debug window, which means that the three `printText()`
    functions now run in parallel:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We can also use the `QFutureWatcher` class to notify a `QObject` class through
    a signals and slots mechanism. The `QFutureWatcher` class allows us to monitor
    `QFuture` using signals and slots:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'After that, open up `mainwindow.h` and declare the slot function:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The `mySlot()` function looks like this in `mainwindow.cpp`:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If you build and run the program again, this time, you will see results like
    this:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: How it works…
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By default, there is a main thread (also known as a GUI thread) in any Qt 6
    application. Other threads that you create are called the **worker threads**.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: GUI-related classes, such as `QWidget` and `QPixmap`, can only exist in the
    main thread, so you must be extra careful when dealing with these classes.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '`QFuture` is a high-level class that deals with **asynchronous computation**.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: We use the `QFutureWatcher` class to let `QFuture` interact with signals and
    slots. You can even use this to display the progress of the operation on a progress
    bar.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: QObject and QThread
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, we want to explore some other methods so that we can use threads in Qt
    6 applications. Qt 6 provides a class called `QThread`, which gives you more control
    over how you create and execute a thread. A `QThread` object begins to execute
    its event loops in a thread by calling the `run()` function. In this example,
    we will learn how to make the `QObject` class work together asynchronously through
    the `Qthread` class.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s get started by performing the following steps:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new Qt widget application project. Then, go to **File** | **New File
    or Project...** and create a **C++** **Class** file:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.1 – Create a new C++ class](img/B20976_08_001.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
- en: Figure 8.1 – Create a new C++ class
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: 'After that, name the new class `MyWorker` and make it inherit from the `QObject`
    class. Don’t forget to include the `QObject` class by default as well:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.2 – Define the MyWorker C++ class](img/B20976_08_002.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
- en: Figure 8.2 – Define the MyWorker C++ class
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have created the `MyWorker` class, open up `myworker.h` and add the
    following headers at the top:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'After that, add the following signals and slot functions to the file as well:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Next, open up `myworker.cpp` and implement the `process()` function:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'After that, open up `mainwindow.h` and add the following headers at the top:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Then, declare a slot function, as shown in the following code:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Once you’re done, open up `mainwindow.cpp` and implement the `handResults()`
    function:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Lastly, we will add the following code to the class constructor of the `MainWindow`
    class:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Build and run the program now. You should see that the main window pops out
    and does nothing for a couple of seconds before a line of message is printed on
    the debug window:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The result was calculated in a separate thread, which is why the main window
    can display smoothly and can even be moved around by a mouse during the calculation.
    To see the difference when running the calculation on the main thread, let’s comment
    out some of the code and call the `process()` function directly:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Build and run the project now. This time, the main window will only appear on
    the screen once the calculation has been done. This is because the calculation
    was blocking the main thread (or GUI thread) and prevented the main window from
    being displayed.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`QThread` is an alternative method to run a process asynchronously, besides
    using the `QFuture` class. It gives us more control compared with `QFuture`, which
    we will demonstrate in the following recipe.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Do note that the `QObject` class that gets moved to the working thread cannot
    have any parent, as Qt is designed in such a way that an entire object tree must
    exist in the same thread. Therefore, all of the children of a `QObject` class
    will also be moved to the working thread when you call `moveToThread()`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: Use a signals and slots mechanism if you want your working thread to communicate
    with the main thread. We use the started signal that’s provided by the `QThread`
    class to inform our working object to start the calculation, since the working
    thread has already been created.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: Then, when the calculation has been completed, we emit the `showResult` and
    `doneProcess` signals to inform the thread to quit, while passing the final result
    to the main thread for it to be printed.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we also use the signals and slots mechanism to safely delete both the
    working thread and working object when everything is done.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: Data protection and sharing data between threads
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Even though multithreading makes processes run asynchronously, there will be
    times when threads must stop and wait for other threads. This usually happens
    when both threads modify the same variable simultaneously. It is common to force
    threads to wait for one another to protect shared resources, such as data. Qt
    6 also provides both low-level methods and high-level mechanisms to synchronize
    threads.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will continue to use the code from the previous example project, since we
    have already established a working program with multithreading:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up `myworker.h` and add the following header:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Then, we will add two new variables and make some changes to the class constructor:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'After that, open up `myworker.cpp` and change the class constructor to look
    like the following code. We no longer require the parent input, since the object
    will not have a parent:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We will also change the `process()` function to look like this:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Once you’re done, open up `mainwindow.cpp` and make some changes to the code:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'After that, we will set the `myInputNumber` variable of the worker object to
    `myNumber`. Note that we are referencing its pointer instead of the value:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Repeat the previous step twice more to set `workerObject2`, `workerThread2`,
    `workerObject3`, and `workerThread3`:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Finally, we will start running those threads by calling `start()`:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'If you build and run the program now, you should see a consistent result, no
    matter how many times you run it:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'We get results every time we run the program because the mutex lock ensures
    that only one of the threads can modify the data while other threads await their
    completion. To see the difference without mutex locking, let’s comment out the
    code:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Build and run the program again. This time, you will get a very different result
    when you run the program. For example, I’ve obtained the following results when
    running it on three occasions:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This happens because the `myNumber` data is manipulated by all the threads simultaneously
    in a random order, due to the nature of parallel computation. By locking the mutex,
    we make sure that the data can only be modified by a single thread and, hence,
    eliminate this issue.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Qt 6 provides two classes, namely `QMutex` and `QReadWriteLock`, for data protection
    when multiple threads access and modify the same data. We only used `QMutex` in
    the previous example, but both classes are very similar in nature. The only difference
    is that `QReadWriteLock` allows data to be read simultaneously by other threads
    while the data is written. Unlike `QMutex`, it separates the read and write states,
    but only one can occur at a time (either lock for read or lock for write), and
    not both. For complex functions and statements, use the high-level `QMutexLocker`
    class instead of `QMutex` for simplifying the code and easier debugging.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: The downside of this method is that all of the other threads will stand idle
    while the data is modified by a single thread. It is best not to share data with
    multiple threads unless there is no other way to do so, as it will halt the other
    threads and defeat the object of parallel computation.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: Working with QRunnable processes
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to use another type of high-level method to
    easily create a multithreading Qt 6 application. We will use the `QRunnable` and
    `QThreadPool` classes in this recipe.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new Qt widget application project and then a new C++ class called `MyProcess`,
    which inherits the `QRunnable` class.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, open up `myprocess.h` and add the following headers:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Then, declare the `run()` function, as follows:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'After that, open up `myprocess.cpp` and define the `run()` function:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Once you’re done, add the following headers to `mainwindow.h`:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'After that, we will implement the class constructor by adding the following
    code:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Now, build and run the project. You should see that the processes are successfully
    run in different threads where the active thread count is four.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `QThreadPool` class automatically deactivates threads when its last process
    has been executed. Let’s try and prove that by pausing the program for three seconds
    and printing out the active thread count again:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Build and run the program again. This time, you should see that the active thread
    count is four, and then, after three seconds, the active thread count becomes
    zero. This is because all of the processes have been executed.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `QRunnable` class works hand in hand with the `QThreadPool` class, which
    manages a collection of threads. The `QThreadPool` class automatically manages
    and recycles individual `QThreads` objects to avoid creating and destroying threads
    too frequently, which helps in reducing computing costs.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: To use `QThreadPool`, you must sub-class the `QRunnable` object and implement
    the virtual function called `run()`. By default, `QThreadPool` will automatically
    delete the `QRunnable` object when the last thread exits the `run` function. You
    can change this behavior by calling `setAutoDelete()` to change the `autoDelete`
    variable to `false`.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 `QThreadPool`，您必须对 `QRunnable` 对象进行子类化并实现名为 `run()` 的虚拟函数。默认情况下，`QThreadPool`
    将在最后一个线程退出 `run` 函数时自动删除 `QRunnable` 对象。您可以通过调用 `setAutoDelete()` 来改变 `autoDelete`
    变量设置为 `false` 来改变这种行为。
- en: By default, threads that are unused for more than 30 seconds will expire. You
    can change this duration by calling `setExpiryTimeout()` before the thread runs.
    Otherwise, there will be no effect on the timeout setting.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，超过 30 秒未被使用的线程将过期。您可以在线程运行之前调用 `setExpiryTimeout()` 来改变这个持续时间。否则，超时设置将不会产生任何效果。
- en: You can also set the maximum number of threads that can be used by calling `setMaxThreadCount()`.
    To get the total number of currently active threads, simply call `activeThreadCount()`.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以通过调用 `setMaxThreadCount()` 来设置可使用的最大线程数。要获取当前活动线程的总数，只需调用 `activeThreadCount()`。
