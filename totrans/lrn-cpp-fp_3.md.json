["```cpp\n    /* mutable_1.cpp */\n    #include <iostream>\n\n    using namespace std;\n\n    auto main() -> int\n    {\n      cout << \"[mutable_1.cpp]\" << endl;\n\n      // Initializing an int variable\n      int mutableVar = 100;\n      cout << \"Initial mutableVar = \" << mutableVar;\n      cout << endl;\n\n      // Manipulating mutableVar\n      for(int i = 0; i <= 10; ++i)\n        mutableVar = mutableVar + i;\n\n      // Displaying mutableVar value\n      cout << \"After manipulating mutableVar = \" << mutableVar;\n      cout << endl;\n\n      return 0;\n    }\n\n```", "```cpp\n    /* immutable_1.cpp */\n    #include <iostream>\n\n    using namespace std;\n\n    auto main() -> int\n    {\n      cout << \"[immutable_1.cpp]\" << endl;\n\n      // Initializing an int variable\n      int mutableVar = 100;\n      cout << \"Initial mutableVar = \" << mutableVar;\n      cout << endl;\n\n      // Manipulating mutableVar using immutable approach\n      int mutableVar0 = mutableVar + 0;\n int mutableVar1 = mutableVar0 + 1;\n int mutableVar2 = mutableVar1 + 2;\n int mutableVar3 = mutableVar2 + 3;\n int mutableVar4 = mutableVar3 + 4;\n int mutableVar5 = mutableVar4 + 5;\n int mutableVar6 = mutableVar5 + 6;\n int mutableVar7 = mutableVar6 + 7;\n int mutableVar8 = mutableVar7 + 8;\n int mutableVar9 = mutableVar8 + 9;\n int mutableVar10 = mutableVar9 + 10;\n\n      // Displaying mutableVar value in mutable variable\n      cout << \"After manipulating mutableVar = \" << mutableVar10;\n      cout << endl;\n\n      return 0;\n    }\n\n```", "```cpp\n    /* immutable_2.cpp */\n    #include <iostream>\n\n    using namespace std;\n\n    void Modify(string name)\n    {\n      name = \"Alexis Andrews\";\n    }\n\n    auto main() -> int\n    {\n      cout << \"[immutable_2.cpp]\" << endl;\n\n      // Initializing a string variable\n      string n = \"Frankie Kaur\";\n      cout << \"Initial name = \" << n;\n      cout << endl;\n\n      // Invoking Modify() function\n      // to modify the n variable\n      Modify(n);\n\n      // Displaying n value\n      cout << \"After manipulating = \" << n;\n      cout << endl;\n\n      return 0;\n    }\n\n```", "```cpp\n    /* mutable_2.cpp */\n    #include <iostream>\n\n    using namespace std;\n\n    void Modify(string &name)\n    {\n      name = \"Alexis Andrews\";\n    }\n\n    auto main() -> int\n    {\n      cout << \"[mutable_2.cpp]\" << endl;\n\n      // Initializing a string variable\n      string n = \"Frankie Kaur\";\n      cout << \"Initial name = \" << n;\n      cout << endl;\n\n      // Invoking Modify() function\n      // to modify the n variable\n      Modify(n);\n\n      // Displaying n value\n      cout << \"After manipulating = \" << n;\n      cout << endl;\n\n      return 0;\n    }\n\n```", "```cpp\n     /* mutable_2a.cpp */\n     #include <iostream>\n\n     using namespace std;\n\n class Name\n {\n       public:\n string str;\n };\n\n     void Modify(Name &name)\n     {\n       name.str = \"Alexis Andrews\";\n     }\n\n     auto main() -> int\n     {\n       cout << \"[mutable_2a.cpp]\" << endl;\n\n       // Initializing a string variable\n       Name n = {\"Frankie Kaur\"};\n       cout << \"Initial name = \" << n.str;\n       cout << endl;\n\n       // Invoking Modify() function\n       // to modify the n variable\n       Modify(n);\n\n       // Displaying n value\n       cout << \"After manipulating = \" << n.str;\n       cout << endl;\n\n       return 0;\n    }\n\n```", "```cpp\n    /* const.cpp */\n    #include <iostream>\n\n    using namespace std;\n\n    // My Age class will store an age value\n    class MyAge\n    {\n       public:\n         const int age;\n         MyAge(const int initAge = 20) :\n          age(initAge)\n         {\n         }\n     };\n\n    auto main() -> int\n    {\n      cout << \"[const.cpp]\" << endl;\n\n      // Initializing several MyAge variables\n      MyAge AgeNow, AgeLater(8);\n\n      // Displaying age property in AgeNow instance\n      cout << \"My current age is \";\n      cout << AgeNow.age << endl;\n\n      // Displaying age property in AgeLater instance\n      cout << \"My age in eight years later is \";\n      cout << AgeLater.age << endl;\n\n      return 0;\n    }\n\n```", "```cpp\n    /* const_error.cpp */\n    #include <iostream>\n\n    using namespace std;\n\n    // My Age class will store an age value\n    class MyAge\n    {\n       public:\n         const int age;\n         MyAge(const int initAge = 20) :\n          age(initAge)\n        {\n        }\n    };\n\n    auto main() -> int\n    {\n      cout << \"[const_error.cpp]\" << endl;\n\n      // Initializing several MyAge variables\n      MyAge AgeNow, AgeLater(8);\n\n      // Displaying age property in AgeNow instance\n      cout << \"My current age is \";\n      cout << AgeNow.age << endl;\n\n      // Displaying age property in AgeLater instance\n      cout << \"My age in eight years later is \";\n      cout << AgeLater.age << endl;\n\n      // Trying to assign age property\n      // in AgeLater instance\n      // However, the compiler will refuse it\n      AgeLater.age = 10;\n\n      return 0;\n    }\n\n```", "```cpp\n    /* first_class_pure_immutable.cpp */\n    #include <iostream>\n\n    using namespace std;\n\n    // MyValue class stores the value\n    class MyValue\n    {\n      public:\n        const int value;\n        MyValue(int v) : value(v)\n       {\n       }\n    };\n\n    // MyFunction class stores the methods\n    class MyFunction\n    {\n      public:\n        const int x, y;\n\n        MyFunction(int _x, int _y) :\n        x(_x), y(_y)\n       {\n       }\n\n      MyValue addition() const\n      {\n        return MyValue(x + y);\n      }\n\n      MyValue subtraction() const\n     {\n        return MyValue(x - y);\n      }\n\n     MyValue multiplication() const\n     {\n        return MyValue(x * y);\n     }\n\n     MyValue division() const\n     {\n        return MyValue(x / y);\n     }\n   };\n\n    auto main() -> int\n    {\n      cout << \"[first_class_pure_immutable.cpp]\" << endl;\n\n      // Setting the initial value\n      // for MyFunction class constructor\n      int a = 100;\n      int b = 10;\n\n      // Displaying initial value\n      cout << \"Initial value\" << endl;\n      cout << \"a = \" << a << endl;\n      cout << \"b = \" << b << endl;\n      cout << endl;\n\n      // Constructing the MyFunction class\n      MyFunction func(a, b);\n\n      // Generating wrapper for each function\n      // in the MyFunction class\n      // so it will be the first-class function\n      auto callableAdd = mem_fn(&MyFunction::addition);\n      auto callableSub = mem_fn(&MyFunction::subtraction);\n      auto callableMul = mem_fn(&MyFunction::multiplication);\n      auto callableDiv = mem_fn(&MyFunction::division);\n\n      // Invoking the functions\n      auto value1 = callableAdd(func);\n      auto value2 = callableSub(func);\n      auto value3 = callableMul(func);\n      auto value4 = callableDiv(func);\n\n      // Displaying result\n      cout << \"The result\" << endl;\n      cout << \"addition = \" << value1.value << endl;\n      cout << \"subtraction = \" << value2.value << endl;\n      cout << \"multiplication = \" << value3.value << endl;\n      cout << \"division = \" << value4.value << endl;\n\n      return 0;\n    }\n\n```", "```cpp\n    /* mutableemployee.h */\n    #ifndef __MUTABLEEMPLOYEE_H__\n    #define __MUTABLEEMPLOYEE_H__\n\n    #include <string>\n\n    class MutableEmployee\n    {\n      private:\n        int m_id;\n        std::string m_firstName;\n        std::string m_lastName;\n        double m_salary;\n\n     public:\n       MutableEmployee(\n         int id,\n         const std::string& firstName,\n         const std::string& lastName,\n         const double& salary);\n       MutableEmployee();\n\n       void SetId(const int id);\n       void SetFirstName(\n        const std::string& FirstName);\n       void SetLastName(\n        const std::string& LastName);\n       void SetSalary(\n        const double& Salary);\n\n       int Id() const {return m_id;}\n       std::string FirstName() const {return m_firstName;}\n       std::string LastName() const {return m_lastName;}\n       double Salary() const {return m_salary;}\n     };\n\n    #endif // End of __MUTABLEEMPLOYEE_H__\n\n```", "```cpp\n    /* mutableemployee.cpp */\n    #include \"mutableemployee.h\"\n\n    using namespace std;\n\n    MutableEmployee::MutableEmployee() :\n      m_id(0),\n      m_salary(0.0)\n    {\n    }\n\n    MutableEmployee::MutableEmployee(\n      int id,\n      const string& firstName,\n      const string& lastName,\n      const double& salary) :\n        m_id(id),\n        m_firstName(firstName),\n        m_lastName(lastName),\n        m_salary(salary)\n    {\n    }\n\n    void MutableEmployee::SetId(const int id)\n    {\n      m_id = id;\n    }\n\n    void MutableEmployee::SetFirstName(\n      const std::string& FirstName) {\n        m_firstName = FirstName;\n      }\n\n    void MutableEmployee::SetLastName(\n      const std::string& LastName) {\n        m_lastName = LastName;\n      }\n\n   void MutableEmployee::SetSalary(\n      const double& Salary) {\n        m_salary = Salary;\n      }\n\n```", "```cpp\n    /* mutable_3.cpp */\n    #include <iostream>\n    #include \"../mutableemployee/mutableemployee.h\"\n\n    using namespace std;\n\n    auto main() -> int\n    {\n      cout << \"[mutable_3.cpp]\" << endl;\n\n      // Initializing several variables\n      string first = \"Frankie\";\n      string last = \"Kaur\";\n      double d = 1500.0;\n\n      // Creating an instance of MutableEmployee\n      MutableEmployee me(0, first, last, d);\n\n      // Displaying initial value\n      cout << \"Content of MutableEmployee instance\" << endl;\n      cout << \"ID : \" << me.Id() << endl;\n      cout << \"Name : \" << me.FirstName();\n      cout << \" \" << me.LastName() << endl;\n      cout << \"Salary : \" << me.Salary() << endl << endl;\n\n      // Mutating the instance of MutableEmployee\n      me.SetId(1);\n      me.SetFirstName(\"Alexis\");\n      me.SetLastName(\"Andrews\");\n      me.SetSalary(2100.0);\n\n      // Displaying mutate value\n      cout << \"Content of MutableEmployee after mutating\" << endl;\n      cout << \"ID : \" << me.Id() << endl;\n      cout << \"Name : \" << me.FirstName();\n      cout << \" \" << me.LastName() << endl;\n      cout << \"Salary : \" << me.Salary() << endl;\n\n      return 0;\n    }\n\n```", "```cpp\n    /* immutableemployee.h */\n    #ifndef __IMMUTABLEEMPLOYEE_H__\n    #define __IMMUTABLEEMPLOYEE_H__\n\n    #include <string>\n\n    class ImmutableEmployee\n    {\n      private:\n        int m_id;\n        std::string m_firstName;\n        std::string m_lastName;\n        double m_salary;\n\n     public:\n       ImmutableEmployee(\n         const int id,\n         const std::string& firstName,\n         const std::string& lastName,\n         const double& _salary);\n       ImmutableEmployee();\n\n       const int Id() const {\n          return m_id;\n       }\n\n       const std::string& FirstName() const {\n         return m_firstName;\n       }\n\n       const std::string& LastName() const {\n         return m_lastName;\n       }\n\n       const double Salary() const {\n        return m_salary;\n       }\n    };\n\n    #endif // End of __IMMUTABLEEMPLOYEE_H__\n\n```", "```cpp\n    /* immutableemployee.cpp */\n    #include \"immutableemployee.h\"\n\n    using namespace std;\n\n    ImmutableEmployee::ImmutableEmployee() :\n      m_id(0),\n      m_salary(0.0)\n      {\n      }\n\n    ImmutableEmployee::ImmutableEmployee(\n      const int id,\n      const string& firstName,\n      const string& lastName,\n      const double& salary) :\n        m_id(id),\n        m_firstName(firstName),\n        m_lastName(lastName),\n        m_salary(salary)\n      {\n      }\n\n```", "```cpp\n    /* immutableemployee.h */\n    #ifndef __IMMUTABLEEMPLOYEE_H__\n    #define __IMMUTABLEEMPLOYEE_H__\n\n    #include <string>\n\n    class ImmutableEmployee\n    {\n      private:\n       int m_id;\n       std::string m_firstName;\n       std::string m_lastName;\n       double m_salary;\n\n      public:\n        ImmutableEmployee(\n          const int id,\n          const std::string& firstName,\n          const std::string& lastName,\n          const double& _salary);\n        ImmutableEmployee();\n        ~ImmutableEmployee();\n\n        const int Id() const {\n          return m_id;\n        }\n\n        const std::string& FirstName() const {\n          return m_firstName;\n        }\n\n        const std::string& LastName() const {\n          return m_lastName;\n         }\n\n        const double Salary() const {\n          return m_salary;\n         }\n\n        const ImmutableEmployee SetId(\n          const int id) const {\n            return ImmutableEmployee(\n              id, m_firstName, m_lastName, m_salary);\n          }\n\n       const ImmutableEmployee SetFirstName(\n          const std::string& firstName) const {\n            return ImmutableEmployee(\n              m_id, firstName, m_lastName, m_salary);\n          }\n\n       const ImmutableEmployee SetLastName(\n          const std::string& lastName) const {\n            return ImmutableEmployee(\n              m_id, m_firstName, lastName, m_salary);\n          }\n\n       const ImmutableEmployee SetSalary(\n          const double& salary) const {\n            return ImmutableEmployee(\n              m_id, m_firstName, m_lastName, salary);\n          }\n      };\n\n    #endif // End of __IMMUTABLEEMPLOYEE_H__\n\n```", "```cpp\n    /* immutable_3.cpp */\n    #include <iostream>\n    #include \"../immutableemployee/immutableemployee.h\"\n\n    using namespace std;\n\n    auto main() -> int\n    {\n      cout << \"[immutable_3.cpp]\" << endl;\n\n      // Initializing several variables\n      string first = \"Frankie\";\n      string last = \"Kaur\";\n      double d = 1500.0;\n\n      // Creating the instance of ImmutableEmployee\n      ImmutableEmployee me(0, first, last, d);\n\n      // Displaying initial value\n      cout << \"Content of ImmutableEmployee instance\" << endl;\n      cout << \"ID : \" << me.Id() << endl;\n      cout << \"Name : \" << me.FirstName()\n      << \" \" << me.LastName() << endl;\n      cout << \"Salary : \" << me.Salary() << endl << endl;\n\n      // Modifying the initial value\n      ImmutableEmployee me2 = me.SetId(1);\n      ImmutableEmployee me3 = me2.SetFirstName(\"Alexis\");\n      ImmutableEmployee me4 = me3.SetLastName(\"Andrews\");\n      ImmutableEmployee me5 = me4.SetSalary(2100.0);\n\n      // Displaying the new value\n      cout << \"Content of ImmutableEmployee after modifying\" << endl;\n      cout << \"ID : \" << me5.Id() << endl;\n      cout << \"Name : \" << me5.FirstName()\n      << \" \" << me5.LastName() << endl;\n      cout << \"Salary : \" << me5.Salary() << endl;\n\n      return 0;\n    }\n\n```"]