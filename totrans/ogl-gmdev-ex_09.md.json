["```cpp\nvoid DrawCube()\n{\n  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);\n  glTranslatef(0.0f, 0.0f, -7.0f);\n  glRotatef(fRotate, 1.0f, 1.0f, 1.0f);\n  glBegin(GL_QUADS);\n  glColor3f(0.0f, 1.0f, 0.0f);\n  glVertex3f(1.0f, 1.0f, -1.0f); glVertex3f(-1.0f, 1.0f, -1.0f);\n  glVertex3f(-1.0f, 1.0f, 1.0f); glVertex3f(1.0f, 1.0f, 1.0f);\n  glColor3f(1.0f, 0.5f, 0.0f);\n  glVertex3f(1.0f, -1.0f, 1.0f); glVertex3f(-1.0f, -1.0f, 1.0f);\n  glVertex3f(-1.0f, -1.0f, -1.0f); glVertex3f(1.0f, -1.0f, -1.0f);\n  glColor3f(1.0f, 0.0f, 0.0f);\n  glVertex3f(1.0f, 1.0f, 1.0f); glVertex3f(-1.0f, 1.0f, 1.0f);\n  glVertex3f(-1.0f, -1.0f, 1.0f); glVertex3f(1.0f, -1.0f, 1.0f);\n  glColor3f(1.0f, 1.0f, 0.0f);\n  glVertex3f(1.0f, -1.0f, -1.0f); glVertex3f(-1.0f, -1.0f, -1.0f);\n  glVertex3f(-1.0f, 1.0f, -1.0f); glVertex3f(1.0f, 1.0f, -1.0f);\n  glColor3f(0.0f, 0.0f, 1.0f);\n  glVertex3f(-1.0f, 1.0f, 1.0f); glVertex3f(-1.0f, 1.0f, -1.0f);\n  glVertex3f(-1.0f, -1.0f, -1.0f); glVertex3f(-1.0f, -1.0f, 1.0f);\n  glColor3f(1.0f, 0.0f, 1.0f);\n  glVertex3f(1.0f, 1.0f, -1.0f); glVertex3f(1.0f, 1.0f, 1.0f);\n  glVertex3f(1.0f, -1.0f, 1.0f); glVertex3f(1.0f, -1.0f, -1.0f);\n  glEnd();\n  fRotate -= 0.05f;\n\n}\n```", "```cpp\nglBegin(GL_TRIANGLES);\n  glVertex3f( 0.0f, 1.0f, 0.0f);\n  glVertex3f(-1.0f,-1.0f, 0.0f);\n  glVertex3f( 1.0f,-1.0f, 0.0f);\nglEnd();\n```", "```cpp\nglBegin(GL_QUADS); \n  glVertex3f(-1.0f, 1.0f, 0.0f);\n  glVertex3f( 1.0f, 1.0f, 0.0f);\n  glVertex3f( 1.0f,-1.0f, 0.0f);\n  glVertex3f(-1.0f,-1.0f, 0.0f);\nglEnd();\n```", "```cpp\nint DrawGlPyramid(GLvoid)\n{\nglClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);\nglLoadIdentity();\nglTranslatef(-1.5f,0.0f,-6.0f);\nglBegin(GL_TRIANGLES); \nglColor3f(1.0f,0.0f,0.0f); \nglVertex3f( 0.0f, 1.0f, 0.0f);\nglColor3f(0.0f,1.0f,0.0f); \nglVertex3f(-1.0f,-1.0f, 1.0f);\nglColor3f(0.0f,0.0f,1.0f);\nglVertex3f( 1.0f,-1.0f, 1.0f); \nglColor3f(1.0f,0.0f,0.0f); \nglVertex3f( 0.0f, 1.0f, 0.0f);\nglColor3f(0.0f,0.0f,1.0f);\nglVertex3f( 1.0f,-1.0f, 1.0f);\nglColor3f(0.0f,1.0f,0.0f);\nglVertex3f( 1.0f,-1.0f, -1.0f); \nglColor3f(1.0f,0.0f,0.0f);\nglVertex3f( 0.0f, 1.0f, 0.0f);\nglColor3f(0.0f,1.0f,0.0f);\nglVertex3f( 1.0f,-1.0f, -1.0f);\nglColor3f(0.0f,0.0f,1.0f);\nglVertex3f(-1.0f,-1.0f, -1.0f); \nglColor3f(1.0f,0.0f,0.0f);\nglVertex3f( 0.0f, 1.0f, 0.0f);\nglColor3f(0.0f,0.0f,1.0f);\nglVertex3f(-1.0f,-1.0f,-1.0f);\nglColor3f(0.0f,1.0f,0.0f);\nglVertex3f(-1.0f,-1.0f, 1.0f);\nglEnd();\n}\n```", "```cpp\n#include #include #include enum Primitive\n{\n Triangles = 0,\n Quads = 1\n};\n\nstruct Vec2\n{\n Vec2()\n {\n  x = 0.0f;\n  y = 0.0f;\n }\n Vec2(const float p_x, const float p_y)\n {\n  x = p_x;\n  y = p_y;\n }\n\n float x;\n float y;\n};\n\nstruct Vec3\n{\n Vec3()\n {\n  x = 0.0f;\n  y = 0.0f;\n  z = 0.0f;\n }\n Vec3(const float p_x, const float p_y, const float p_z)\n {\n  x = p_x;\n  y = p_y;\n  z = p_z;\n }\n\n float x;\n float y;\n float z;\n};\n\nconst bool LoadObj(\n const char * filepath, \n std::vectortemp_vertices;\n std::vectortemp_normals;\n FILE * file = fopen(filepath, \"r\");\n if (file == NULL)\n {\n  return false;\n }\n bool finished = false;\n while (!finished)\n {\n  char line[128];\n  int check = fscanf(file, \"%s\", line);\n  if (check == EOF)\n  {\n   finished = true;\n  }\n  else\n  {\n   if (strcmp(line, \"v\") == 0)\n   {\n    Vec3 vertex;\n    fscanf(file, \"%f %f %f\\n\",  vertices.size(); i++)\n {\n  unsigned int vertexIndex = vertices[i];\n  unsigned int normalIndex = normals[i];\n  Vec3 vertex = temp_vertices[vertexIndex - 1];\n  Vec3 normal = temp_normals[normalIndex - 1];\n  o_vertices.push_back(vertex);\n  o_normals.push_back(normal);\n }\n return true;\n}\n\nBefore you can compile the code you will need a to add a pre-processor definition. Open the project properties, and navigate to the C/C++ branch of the Configuration Properties. Add _CRT_SECURE_NO_WARNINGS to the Preprocessor Definitions.\n```"]