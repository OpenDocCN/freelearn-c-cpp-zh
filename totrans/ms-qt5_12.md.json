["```cpp\nQT += core gui multimedia widgets \nCONFIG += c++14 \n\nTARGET = drum-machine \nTEMPLATE = app \n\ninclude(../drum-machine-src.pri) \n\nSOURCES += main.cpp \n\n```", "```cpp\nQT += core gui multimedia widgets testlib \nCONFIG += c++14 console \n\nTARGET = drum-machine-test \nTEMPLATE = app \n\ninclude(../drum-machine-src.pri) \n\nDRUM_MACHINE_PATH = ../drum-machine \nINCLUDEPATH += $$DRUM_MACHINE_PATH \nDEPENDPATH += $$DRUM_MACHINE_PATH \n\nSOURCES += main.cpp \n\n```", "```cpp\n#include \"Serializable.h\" \n\nclass DummySerializable : public Serializable \n{ \npublic: \n    DummySerializable(); \n\n    QVariant toVariant() const override; \n    void fromVariant(const QVariant& variant) override; \n\n    int myInt = 0; \n    double myDouble = 0.0; \n    QString myString = \"\"; \n    bool myBool = false; \n}; \n\n```", "```cpp\n#include \"DummySerializable.h\" \n\nDummySerializable::DummySerializable() : \n    Serializable() \n{ \n} \n\nQVariant DummySerializable::toVariant() const \n{ \n    QVariantMap map; \n    map.insert(\"myInt\", myInt); \n    map.insert(\"myDouble\", myDouble); \n    map.insert(\"myString\", myString); \n    map.insert(\"myBool\", myBool); \n    return map; \n} \n\nvoid DummySerializable::fromVariant(const QVariant& variant) \n{ \n    QVariantMap map = variant.toMap(); \n    myInt = map.value(\"myInt\").toInt(); \n    myDouble = map.value(\"myDouble\").toDouble(); \n    myString = map.value(\"myString\").toString(); \n    myBool = map.value(\"myBool\").toBool(); \n} \n\n```", "```cpp\n#include <QtTest/QTest> \n\n#include \"JsonSerializer.h\" \n\nclass TestJsonSerializer : public QObject \n{ \n    Q_OBJECT \n\npublic: \n    TestJsonSerializer(QObject* parent = nullptr); \n\nprivate slots: \n    void cleanup(); \n    void saveDummy(); \n    void loadDummy(); \n\nprivate: \n    QString loadFileContent(); \n\nprivate: \n    JsonSerializer mSerializer; \n}; \n\n```", "```cpp\n#include \"DummySerializable.h\" \n\nconst QString FILENAME = \"test.json\"; \nconst QString DUMMY_FILE_CONTENT = \"{\\n    \"myBool\": true,\\n    \"myDouble\": 5.2,\\n    \"myInt\": 1,\\n    \"myString\": \"hello\"\\n}\\n\"; \n\nTestJsonSerializer::TestJsonSerializer(QObject* parent) : \n    QObject(parent), \n    mSerializer() \n{ \n} \n\n```", "```cpp\nvoid TestJsonSerializer::saveDummy() \n{ \n    DummySerializable dummy; \n    dummy.myInt = 1; \n    dummy.myDouble = 5.2; \n    dummy.myString = \"hello\"; \n    dummy.myBool = true; \n\n    mSerializer.save(dummy, FILENAME); \n\n    QString data = loadFileContent(); \n    QVERIFY(data == DUMMY_FILE_CONTENT); \n} \n\n```", "```cpp\nPASS   : TestJsonSerializer::saveDummy() \n\n```", "```cpp\nFAIL!  : TestJsonSerializer::saveDummy()  \n'data == DUMMY_FILE_CONTENT' returned FALSE. () \nLoc: [../../ch12-drum-machine-test/drum-machine-test/TestJsonSerializer.cpp(31)] \n\n```", "```cpp\nQString TestJsonSerializer::loadFileContent() \n{ \n    QFile file(FILENAME); \n    file.open(QFile::ReadOnly); \n    QString content = file.readAll(); \n    file.close(); \n    return content; \n} \n\n```", "```cpp\nvoid TestJsonSerializer::loadDummy() \n{ \n    QFile file(FILENAME); \n    file.open(QFile::WriteOnly | QIODevice::Text); \n    QTextStream out(&file); \n    out << DUMMY_FILE_CONTENT; \n    file.close(); \n\n    DummySerializable dummy; \n    mSerializer.load(dummy, FILENAME); \n\n    QCOMPARE(dummy.myInt, 1); \n    QCOMPARE(dummy.myDouble, 5.2); \n    QCOMPARE(dummy.myString, QString(\"hello\")); \n    QCOMPARE(dummy.myBool, true); \n} \n\n```", "```cpp\nQCOMPARE(actual_value, expected_value); \n\n```", "```cpp\nFAIL!  : TestJsonSerializer::loadDummy() Compared values are not the same \n   Actual   (dummy.myInt): 0 \n   Expected (1)          : 1 \nLoc: [../../ch12-drum-machine-test/drum-machine-test/TestJsonSerializer.cpp(45)] \n\n```", "```cpp\nvoid TestJsonSerializer::cleanup() \n{ \n    QFile(FILENAME).remove(); \n} \n\n```", "```cpp\nQTEST_MAIN(TestJsonSerializer) \n\n```", "```cpp\nQTEST_MAIN(TestJsonSerializer) \n#include \"testjsonserializer\" \n\n```", "```cpp\n$ ./drum-machine-test\n********* Start testing of TestJsonSerializer *********\nConfig: Using QtTest library 5.7.0, Qt 5.7.0 (x86_64-little_endian-lp64 shared (dynamic) release build; by GCC 4.9.1 20140922 (Red Hat 4.9.1-10))\nPASS   : TestJsonSerializer::initTestCase()\nPASS   : TestJsonSerializer::saveDummy()\nPASS   : TestJsonSerializer::loadDummy()\nPASS   : TestJsonSerializer::cleanupTestCase()\nTotals: 4 passed, 0 failed, 0 skipped, 0 blacklisted, 1ms\n********* Finished testing of TestJsonSerializer *********\n\n```", "```cpp\n$ ./drum-machine-test -help\n\n```", "```cpp\n$ ./drum-machine-test saveDummy\n\n```", "```cpp\n$ ./drum-machine-test -v2 loadDummy\n********* Start testing of TestJsonSerializer *********\nConfig: Using QtTest library 5.7.0, Qt 5.7.0 (x86_64-little_endian-lp64 shared (dynamic) release build; by GCC 4.9.1 20140922 (Red Hat 4.9.1-10))\nINFO   : TestJsonSerializer::initTestCase() entering\nPASS   : TestJsonSerializer::initTestCase()\nINFO   : TestJsonSerializer::loadDummy() entering\nINFO   : TestJsonSerializer::loadDummy() QCOMPARE(dummy.myInt, 1)\n Loc: [../../ch12-drum-machine-test/drum-machine-test/TestJsonSerializer.cpp(45)]\nINFO   : TestJsonSerializer::loadDummy() QCOMPARE(dummy.myDouble, 5.2)\n Loc: [../../ch12-drum-machine-test/drum-machine-test/TestJsonSerializer.cpp(46)]\nINFO   : TestJsonSerializer::loadDummy() QCOMPARE(dummy.myString, QString(\"hello\"))\n Loc: [../../ch12-drum-machine-test/drum-machine-test/TestJsonSerializer.cpp(47)]\nINFO   : TestJsonSerializer::loadDummy() QCOMPARE(dummy.myBool, true)\n Loc: [../../ch12-drum-machine-test/drum-machine-test/TestJsonSerializer.cpp(48)]\nPASS   : TestJsonSerializer::loadDummy()\nINFO   : TestJsonSerializer::cleanupTestCase() entering\nPASS   : TestJsonSerializer::cleanupTestCase()\nTotals: 3 passed, 0 failed, 0 skipped, 0 blacklisted, 1ms\n********* Finished testing of TestJsonSerializer *********\n\n```", "```cpp\n$ ./drum-machine-test -o <filename>,<format>\n\n```", "```cpp\n$ ./drum-machine-test -o test-report.xml,xml\n\n```", "```cpp\n#include \"TestJsonSerializer.h\" \n\nint main(int argc, char *argv[]) \n{ \n    TestJsonSerializer test; \n    QStringList arguments = QCoreApplication::arguments(); \n    return QTest::qExec(&test, arguments); \n} \n\n```", "```cpp\nint main(int argc, char *argv[]) \n{ \n    int status = 0; \n    TestFoo testFoo; \n    TestBar testBar; \n    status |= QTest::qExec(&testFoo); \n    status |= QTest::qExec(&testBar); \n    return status; \n} \n\n```", "```cpp\n$ ./drum-machine-test -select foo fooTestFunction\n\n```", "```cpp\nQApplication app(argc, argv); \nQStringList arguments = QCoreApplication::arguments(); \n\nmap<QString, unique_ptr<QObject>> tests; \ntests.emplace(\"jsonserializer\", \n    make_unique<TestJsonSerializer>()); \ntests.emplace(\"foo\", make_unique<TestFoo>()); \ntests.emplace(\"bar\", make_unique<TestBar>()); \n\n```", "```cpp\ntests[\"bar\"] = make_unique<TestBar>(); \n\n```", "```cpp\nif (arguments.size() >= 3 && arguments[1] == \"-select\") { \n    QString testName = arguments[2]; \n    auto iter = tests.begin(); \n    while(iter != tests.end()) { \n        if (iter->first != testName) { \n            iter = tests.erase(iter); \n        } else { \n            ++iter; \n        } \n    } \n    arguments.removeOne(\"-select\"); \n    arguments.removeOne(testName); \n} \n\n```", "```cpp\nint status = 0; \nfor(auto& test : tests) { \n    status |= QTest::qExec(test.second.get(), arguments); \n} \n\nreturn status; \n\n```", "```cpp\nclass TestTrack : public QObject \n{ \n    Q_OBJECT \npublic: \n    explicit TestTrack(QObject *parent = 0); \n\nprivate slots: \n    void addSoundEvent_data(); \n    void addSoundEvent(); \n}; \n\n```", "```cpp\nvoid TestTrack::addSoundEvent_data() \n{ \n    QTest::addColumn<int>(\"trackState\"); \n    QTest::addColumn<int>(\"soundEventCount\"); \n\n    QTest::newRow(\"STOPPED\")  \n                << static_cast<int>(Track::State::STOPPED)  \n                << 0; \n    QTest::newRow(\"PLAYING\")  \n                << static_cast<int>(Track::State::PLAYING)  \n                << 0; \n    QTest::newRow(\"RECORDING\")  \n                << static_cast<int>(Track::State::RECORDING)  \n                << 1; \n} \n\n```", "```cpp\nvoid TestTrack::addSoundEvent() \n{ \n    QFETCH(int, trackState); \n    QFETCH(int, soundEventCount); \n\n    Track track; \n    switch (static_cast<Track::State>(trackState)) { \n        case Track::State::STOPPED: \n            track.stop(); \n            break; \n        case Track::State::PLAYING: \n            track.play(); \n            break; \n        case Track::State::RECORDING: \n            track.record(); \n            break; \n        default: \n            break; \n    } \n\n    track.addSoundEvent(0); \n    track.stop(); \n\n    QCOMPARE(track.soundEvents().size(),  \n             static_cast<size_t>(soundEventCount)); \n} \n\n```", "```cpp\n#include \"TestJsonSerializer.h\" \n#include \"TestTrack.h\" \n\n... \n\nint main(int argc, char *argv[]) \n{ \n    ... \n    map<QString, unique_ptr<QObject>> tests; \n    tests.emplace(\"jsonserializer\",  \n                  make_unique<TestJsonSerializer>()); \n    tests.emplace(\"track\",  \n                  make_unique<TestTrack>()); \n    ... \n} \n\n```", "```cpp\nPASS   : TestTrack::addSoundEvent(STOPPED)\nPASS   : TestTrack::addSoundEvent(PLAYING)\nPASS   : TestTrack::addSoundEvent(RECORDING)\n\n```", "```cpp\n$ ./drum-machine-test <testfunction>:<dataset entry>\n\n```", "```cpp\n$ ./drum-machine-test -select track addSoundEvent:RECORDING\n\n```", "```cpp\nclass TestJsonSerializer : public QObject \n{ \n    ... \n\nprivate slots: \n    void cleanup(); \n    void saveDummy(); \n    void loadDummy(); \n\n    void saveTrack_data(); \n    ... \n}; \n\nvoid TestJsonSerializer::saveTrack_data() \n{ \n    QTest::addColumn<int>(\"soundEventCount\"); \n\n    QTest::newRow(\"1\") << 1; \n    QTest::newRow(\"100\") << 100; \n    QTest::newRow(\"1000\") << 1000; \n} \n\n```", "```cpp\nclass TestJsonSerializer : public QObject \n{ \n    ... \n    void saveTrack_data(); \n    void saveTrack(); \n    ... \n}; \n\nvoid TestJsonSerializer::saveTrack() \n{ \n    QFETCH(int, soundEventCount); \n    Track track; \n    track.record(); \n    for (int i = 0; i < soundEventCount; ++i) { \n        track.addSoundEvent(i % 4); \n    } \n    track.stop(); \n\n    QBENCHMARK { \n        mSerializer.save(track, FILENAME); \n    } \n} \n\n```", "```cpp\nQBENCHMARK { \n    // instructions to benchmark \n} \n\n```", "```cpp\nPASS   : TestJsonSerializer::saveTrack(1) \nRESULT : TestJsonSerializer::saveTrack():\"1\": \n     0.041 msecs per iteration (total: 84, iterations: 2048) \nPASS   : TestJsonSerializer::saveTrack(100) \nRESULT : TestJsonSerializer::saveTrack():\"100\": \n     0.23 msecs per iteration (total: 59, iterations: 256) \nPASS   : TestJsonSerializer::saveTrack(1000) \nRESULT : TestJsonSerializer::saveTrack():\"1000\": \n     2.0 msecs per iteration (total: 66, iterations: 32) \n\n```", "```cpp\n$ ./drum-machine-test -tickcounter\n...\nRESULT : TestJsonSerializer::saveTrack():\"1\":\n 88,062 CPU cycles per iteration (total: 88,062, iterations: 1)\nPASS   : TestJsonSerializer::saveTrack(100)\nRESULT : TestJsonSerializer::saveTrack():\"100\":\n 868,706 CPU cycles per iteration (total: 868,706, iterations: 1)\nPASS   : TestJsonSerializer::saveTrack(1000)\nRESULT : TestJsonSerializer::saveTrack():\"1000\":\n 7,839,871 CPU cycles per iteration (total: 7,839,871, iterations: 1)\n...\n\n```", "```cpp\n#include <QTest> \n\n#include \"MainWindow.h\" \n\nclass TestGui : public QObject \n{ \n    Q_OBJECT \npublic: \n    TestGui(QObject* parent = 0); \n\nprivate: \n    MainWindow mMainWindow; \n}; \n\n```", "```cpp\n#include <QtTest/QtTest> \n\nTestGui::TestGui(QObject* parent) : \n    QObject(parent), \n    mMainWindow() \n{ \n    QTestEventLoop::instance().enterLoop(1); \n} \n\n```", "```cpp\n// In TestGui.h \nclass TestGui : public QObject \n{ \n    ... \nprivate slots: \n    void controlButtonState(); \n    ... \n}; \n\n// In TestGui.cpp \n#include <QtTest/QtTest> \n#include <QPushButton> \n... \nvoid TestGui::controlButtonState() \n{ \n    QPushButton* stopButton =  \n        mMainWindow.findChild<QPushButton*>(\"stopButton\"); \n    QPushButton* playButton =  \n        mMainWindow.findChild<QPushButton*>(\"playButton\"); \n    QPushButton* recordButton =  \n        mMainWindow.findChild<QPushButton*>(\"recordButton\"); \n\n    QTest::mouseClick(recordButton, Qt::LeftButton); \n\n    QCOMPARE(stopButton->isEnabled(), true); \n    QCOMPARE(playButton->isEnabled(), false); \n    QCOMPARE(recordButton->isEnabled(), false); \n} \n\n```", "```cpp\n#include <QTest> \n\n#include \"MainWindow.h\" \n\n// In TestGui.h \nclass TestGui : public QObject \n{ \n    ... \n    void controlButtonState(); \n    void playSound(); \n    ... \n}; \n\n// In TestGui.cpp \n#include <QPushButton> \n#include <QtTest/QtTest> \n#include \"SoundEffectWidget.h\" \n... \nvoid TestGui::playSound() \n{ \n    SoundEffectWidget widget; \n    QSignalSpy spy(&widget, &SoundEffectWidget::soundPlayed); \n    widget.setId(2); \n    widget.play(); \n\n    QCOMPARE(spy.count(), 1); \n    QList<QVariant> arguments = spy.takeFirst(); \n    QCOMPARE(arguments.at(0).toInt(), 2); \n} \n\n```"]