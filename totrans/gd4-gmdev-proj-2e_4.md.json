["```cpp\nextends CharacterBody2D\nvelocity = Vector2(250, 250)\nfunc _physics_process(delta):\n    var collision = move_and_collide(velocity * delta)\n    if collision:\n        velocity = velocity.bounce(collision.get_normal())\n```", "```cpp\nextends CharacterBody2D\n@export var gravity = 750\n@export var run_speed = 150\n@export var jump_speed = -300\nenum {IDLE, RUN, JUMP, HURT, DEAD}\nvar state = IDLE\nfunc _ready():\n    change_state(IDLE)\nfunc change_state(new_state):\n    state = new_state\n    match state:\n        IDLE:\n            $AnimationPlayer.play(\"idle\")\n        RUN:\n            $AnimationPlayer.play(\"run\")\n        HURT:\n            $AnimationPlayer.play(\"hurt\")\n        JUMP:\n            $AnimationPlayer.play(\"jump_up\")\n        DEAD:\n            hide()\n```", "```cpp\nfunc get_input():\n    var right = Input.is_action_pressed(\"right\")\n    var left = Input.is_action_pressed(\"left\")\n    var jump = Input.is_action_just_pressed(\"jump\")\n    # movement occurs in all states\n    velocity.x = 0\n    if right:\n        velocity.x += run_speed\n        $Sprite2D.flip_h = false\n    if left:\n        velocity.x -= run_speed\n        $Sprite2D.flip_h = true\n    # only allow jumping when on the ground\n    if jump and is_on_floor():\n        change_state(JUMP)\n        velocity.y = jump_speed\n    # IDLE transitions to RUN when moving\n    if state == IDLE and velocity.x != 0:\n        change_state(RUN)\n    # RUN transitions to IDLE when standing still\n    if state == RUN and velocity.x == 0:\n        change_state(IDLE)\n    # transition to JUMP when in the air\n    if state in [IDLE, RUN] and !is_on_floor():\n        change_state(JUMP)\n```", "```cpp\nfunc _physics_process(delta):\n    velocity.y += gravity * delta\n    get_input()\n    move_and_slide()\n```", "```cpp\nif state == JUMP and is_on_floor():\n    change_state(IDLE)\n```", "```cpp\nif state == JUMP and velocity.y > 0:\n    $AnimationPlayer.play(\"jump_down\")\n```", "```cpp\nfunc reset(_position):\n    position = _position\n    show()\n    change_state(IDLE)\n```", "```cpp\nsignal life_changed\nsignal died\nvar life = 3: set = set_life\nfunc set_life(value):\n    life = value\n    life_changed.emit(life)\n    if life <= 0:\n        change_state(DEAD)\n```", "```cpp\nfunc hurt():\n    if state != HURT:\n        change_state(HURT)\n```", "```cpp\nHURT:\n    $AnimationPlayer.play(\"hurt\")\n    velocity.y = -200\n    velocity.x = -100 * sign(velocity.x)\n    life -= 1\n    await get_tree().create_timer(0.5).timeout\n    change_state(IDLE)\nDEAD:\n    died.emit()\n    hide()\n```", "```cpp\nif state == HURT:\n    return\n```", "```cpp\nextends Area2D\nsignal picked_up\nvar textures = {\n    \"cherry\": \"res://assets/sprites/cherry.png\",\n    \"gem\": \"res://assets/sprites/gem.png\"\n}\nfunc init(type, _position):\n    $Sprite2D.texture = load(textures[type])\n    position = _position\n```", "```cpp\nfunc _on_item_body_entered(body):\n    picked_up.emit()\n    queue_free()\n```", "```cpp\nextends Node2D\nfunc _ready():\n    $Items.hide()\n    $Player.reset($SpawnPoint.position)\n```", "```cpp\nfunc _ready():\n    $Items.hide()\n    $Player.reset($SpawnPoint.position)\n    set_camera_limits()\nfunc set_camera_limits():\n    var map_size = $World.get_used_rect()\n    var cell_size = $World.tile_set.tile_size\n    $Player/Camera2D.limit_left = (map_size.position.x - 5)\n        * cell_size.x\n    $Player/Camera2D.limit_right = (map_size.end.x + 5) *\n        cell_size.x\n```", "```cpp\nsignal score_changed\nvar item_scene = load(\"res://items/item.tscn\")\nvar score = 0: set = set_score\nfunc spawn_items():\n    var item_cells = $Items.get_used_cells(0)\n    for cell in item_cells:\n        var data = $Items.get_cell_tile_data(0, cell)\n        var type = data.get_custom_data(\"type\")\n        var item = item_scene.instantiate()\n        add_child(item)\n        item.init(type, $Items.map_to_local(cell))\n        item.picked_up.connect(self._on_item_picked_up)\nfunc _on_item_picked_up():\n    score += 1\nfunc set_score(value):\n    score = value\n    score_changed.emit(score)\n```", "```cpp\nif state == HURT:\n    return\nfor i in get_slide_collision_count():\n    var collision = get_slide_collision(i)\n    if collision.get_collider().is_in_group(\"danger\"):\n        hurt()\n```", "```cpp\nextends CharacterBody2D\n@export var speed = 50\n@export var gravity = 900\nvar facing = 1\nfunc _physics_process(delta):\n    velocity.y += gravity * delta\n    velocity.x = facing * speed\n    $Sprite2D.flip_h = velocity.x > 0\n    move_and_slide()\n    for i in get_slide_collision_count():\n        var collision = get_slide_collision(i)\n        if collision.get_collider().name == \"Player\":\n            collision.get_collider().hurt()\n        if collision.get_normal().x != 0:\n            facing = sign(collision.get_normal().x)\n            velocity.y = -100\n    if position.y > 10000:\n        queue_free()\n```", "```cpp\nfunc take_damage():\n    $AnimationPlayer.play(\"death\")\n    $CollisionShape2D.set_deferred(\"disabled\", true)\n    set_physics_process(false)\n```", "```cpp\nfunc _on_animation_player_animation_finished(anim_name):\n    if anim_name == \"death\":\n        queue_free()\n```", "```cpp\nfor i in get_slide_collision_count():\n    var collision = get_slide_collision(i)\n    if collision.get_collider().is_in_group(\"danger\"):\n        hurt()\n    if collision.get_collider().is_in_group(\"enemies\"):\n        if position.y < collision.get_collider().position.y:\n            collision.get_collider().take_damage()\n            velocity.y = -200\n        else:\n            hurt()\n```", "```cpp\nextends CharacterBody2D\nsignal life_changed\nsignal died\n@export var gravity = 750\n@export var run_speed = 150\n@export var jump_speed = -300\nenum {IDLE, RUN, JUMP, HURT, DEAD}\nvar state = IDLE\nvar life = 3: set = set_life\nfunc _ready():\n    change_state(IDLE)\nfunc change_state(new_state):\n    state = new_state\n    match state:\n        IDLE:\n            $AnimationPlayer.play(\"idle\")\n        RUN:\n            $AnimationPlayer.play(\"run\")\n        HURT:\n            $AnimationPlayer.play(\"hurt\")\n            velocity.y = -200\n            velocity.x = -100 * sign(velocity.x)\n            life -= 1\n            await get_tree().create_timer(0.5).timeout\n            change_state(IDLE)\n        JUMP:\n            $AnimationPlayer.play(\"jump_up\")\n        DEAD:\n            died.emit()\n            hide()\nfunc get_input():\n    if state == HURT:\n        return\n    var right = Input.is_action_pressed(\"right\")\n    var left = Input.is_action_pressed(\"left\")\n    var jump = Input.is_action_just_pressed(\"jump\")\n    # movement occurs in all states\n    velocity.x = 0\n    if right:\n        velocity.x += run_speed\n        $Sprite2D.flip_h = false\n    if left:\n        velocity.x -= run_speed\n        $Sprite2D.flip_h = true\n    # only allow jumping when on the ground\n    if jump and is_on_floor():\n        change_state(JUMP)\n        velocity.y = jump_speed\n    # IDLE transitions to RUN when moving\n    if state == IDLE and velocity.x != 0:\n        change_state(RUN)\n    # RUN transitions to IDLE when standing still\n    if state == RUN and velocity.x == 0:\n        change_state(IDLE)\n    # transition to JUMP when in the air\n    if state in [IDLE, RUN] and !is_on_floor():\n        change_state(JUMP)\nfunc _physics_process(delta):\n    velocity.y += gravity * delta\n    get_input()\n    move_and_slide()\n    if state == HURT:\n        return\n    for i in get_slide_collision_count():\n        var collision = get_slide_collision(i)\n        if collision.get_collider().is_in_group(\"danger\"):\n            hurt()\n        if collision.get_collider().is_in_group(\"enemies\"):\n            if position.y <\n            collision.get_collider().position.y:\n                collision.get_collider().take_damage()\n                velocity.y = -200\n            else:\n                hurt()\n    if state == JUMP and is_on_floor():\n        change_state(IDLE)\n    if state == JUMP and velocity.y > 0:\n        $AnimationPlayer.play(\"jump_down\")\nfunc reset(_position):\n    position = _position\n    show()\n    change_state(IDLE)\n    life = 3\nfunc set_life(value):\n    life = value\n    life_changed.emit(life)\n    if life <= 0:\n        change_state(DEAD)\nfunc hurt():\n    if state != HURT:\n        change_state(HURT)\n```", "```cpp\nextends MarginContainer\n@onready var life_counter = $HBoxContainer/LifeCounter.get_children()\nfunc update_life(value):\n    for heart in life_counter.size():\n        life_counter[heart].visible = value > heart\nfunc update_score(value):\n    $HBoxContainer/Score.text = str(value)\n```", "```cpp\n$Player.life_changed.connect($CanvasLayer/HUD.update_life)\nscore_changed.connect($CanvasLayer/HUD.update_score)\n```", "```cpp\nextends Node\nvar num_levels = 2\nvar current_level = 0\nvar game_scene = \"res://main.tscn\"\nvar title_screen = \"res://ui/title.tscn\"\nfunc restart():\n    current_level = 0\n    get_tree().change_scene_to_file(title_screen)\nfunc next_level():\n    current_level += 1\n    if current_level <= num_levels:\n        get_tree().change_scene_to_file(game_scene)\n```", "```cpp\nextends Node\nfunc _ready():\n    var level_num = str(GameState.current_level).pad_zeros(2)\n    var path = \"res://levels/level_%s.tscn\" % level_num\n    var level = load(path).instantiate()\n    add_child(level)\n```", "```cpp\nextends Control\nfunc _input(event):\n    if event.is_action_pressed(\"ui_select\"):\n        GameState.next_level()\n```", "```cpp\nfunc _on_player_died():\n    GameState.restart()\n```", "```cpp\nvar door_scene = load(\"res://items/door.tscn\")\n```", "```cpp\nfunc spawn_items():\n    var item_cells = $Items.get_used_cells(0)\n    for cell in item_cells:\n        var data = $Items.get_cell_tile_data(0, cell)\n        var type = data.get_custom_data(\"type\")\n        if type == \"door\":\n            var door = door_scene.instantiate()\n            add_child(door)\n            door.position = $Items.map_to_local(cell)\n            door.body_entered.connect(_on_door_entered)\n        else:\n            var item = item_scene.instantiate()\n            add_child(item)\n            item.init(type, $Items.map_to_local(cell))\n            item.picked_up.connect(self._on_item_picked_up)\n```", "```cpp\nfunc _on_door_entered(body):\n    GameState.next_level()\n```", "```cpp\n@export var max_jumps = 2\n@export var double_jump_factor = 1.5\nvar jump_count = 0\n```", "```cpp\nJUMP:\n    $AnimationPlayer.play(\"jump_up\")\n    jump_count = 1\n```", "```cpp\nif jump and state == JUMP and jump_count < max_jumps and jump_count > 0:\n    $JumpSound.play()\n    $AnimationPlayer.play(\"jump_up\")\n    velocity.y = jump_speed / double_jump_factor\n    jump_count += 1\n```", "```cpp\nif state == JUMP and is_on_floor():\n    change_state(IDLE)\n    jump_count = 0\n```", "```cpp\nif state == JUMP and is_on_floor():\n    change_state(IDLE)\n    $Dust.emitting = true\n```", "```cpp\n@export var climb_speed = 50\nvar is_on_ladder = false\n```", "```cpp\nCLIMB:\n    $AnimationPlayer.play(\"climb\")\n```", "```cpp\nvar up = Input.is_action_pressed(\"climb\")\nvar down = Input.is_action_pressed(\"crouch\")\nif up and state != CLIMB and is_on_ladder:\n    change_state(CLIMB)\nif state == CLIMB:\n    if up:\n        velocity.y = -climb_speed\n        $AnimationPlayer.play(\"climb\")\n    elif down:\n        velocity.y = climb_speed\n        $AnimationPlayer.play(\"climb\")\n    else:\n        velocity.y = 0\n        $AnimationPlayer.stop()\nif state == CLIMB and not is_on_ladder:\n    change_state(IDLE)\n```", "```cpp\nif state != CLIMB:\n    velocity.y += gravity * delta\n```", "```cpp\nfunc _on_ladders_body_entered(body):\n    body.is_on_ladder = true\nfunc _on_ladders_body_exited(body):\n    body.is_on_ladder = false\n```", "```cpp\nfunc create_ladders():\n    var cells = $World.get_used_cells(0)\n    for cell in cells:\n        var data = $World.get_cell_tile_data(0, cell)\n        if data.get_custom_data(\"special\") == \"ladder\":\n            var c = CollisionShape2D.new()\n            $Ladders.add_child(c)\n            c.position = $World.map_to_local(cell)\n            var s = RectangleShape2D.new()\n            s.size = Vector2(8, 16)\n            c.shape = s\n```", "```cpp\n@export var offset = Vector2(320, 0)\n@export var duration = 10.0\n```", "```cpp\nfunc _ready():\n    var tween = create_tween().set_process_mode(\n        Tween.TWEEN_PROCESS_PHYSICS)\n    tween.set_loops().set_parallel(false)\n    tween.tween_property($TileMap, \"position\", offset,\n        duration / 2.0).from_current()\n    tween.tween_property($TileMap, \"position\",\n        Vector2.ZERO, duration / 2.0)\n```"]