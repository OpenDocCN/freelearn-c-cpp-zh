["```cpp\n#include \"fmod.hpp\"\n```", "```cpp\nFMOD::System* audiomgr;\n```", "```cpp\nbool InitFmod()\n{\n  FMOD_RESULT result;\n  result = FMOD::System_Create(&audiomgr);\n  if (result != FMOD_OK)\n  {\n    return false;\n  }\n  result = audiomgr->init(50, FMOD_INIT_NORMAL, NULL);\n  if (result != FMOD_OK)\n  {\n    return false;\n  }\n  return true;\n}\n```", "```cpp\nvoid GameLoop(const float p_deltatTime)\n{\n  if (m_gameState == GameState::GS_Splash)\n  {\n    InitFmod();\n    BuildFont();\n    LoadTextures();\n    m_gameState = GameState::GS_Loading;\n  }\n  Update(p_deltatTime);\n  Render();\n}\n```", "```cpp\nFMOD::Sound* sfxWater;\nFMOD::Sound* sfxOilcan;\nFMOD::Sound* sfxJump; \nFMOD::Sound* sfxMovement;\nFMOD::Channel* chMovement;\n```", "```cpp\nconst bool LoadAudio()\n{\n  FMOD_RESULT result;\n  result = audiomgr-> createSound (\"resources/oil.wav\", FMOD_DEFAULT, 0, &sfxOilcan);\n  result = audiomgr-> createSound (\"resources/water.wav\", FMOD_DEFAULT, 0, &sfxWater);\n  result = audiomgr-> createSound (\"resources/jump.wav\", FMOD_DEFAULT, 0, &sfxJump);\n  result = audiomgr->createSound(\"resources/movement.wav\", FMOD_LOOP_NORMAL | FMOD_2D | FMOD_HARDWARE, 0, &sfxMovement);\n  result = audiomgr->playSound(FMOD_CHANNEL_FREE, sfxMovement, true, &chMovement);\nreturn true; }\n```", "```cpp\nvoid GameLoop(const float p_deltatTime)\n{\n  if (m_gameState == GameState::GS_Splash)\n  {\n    InitFmod();\n LoadAudio();\n    BuildFont();\n    LoadTextures();\n    m_gameState = GameState::GS_Loading;\n  }\n  Update(p_deltatTime);\n  Render();\n}\n```", "```cpp\ncase Input::Command::CM_STOP:\nplayer->SetVelocity(0.0f);\nbackground->SetVelocity(0.0f);\nchMovement->setPaused(true);\nbreak;\n\ncase Input::Command::CM_LEFT:\nif (player == robot_right)\n{\n  robot_right->IsActive(false);\n  robot_right->IsVisible(false);\n  robot_left->SetPosition(robot_right->GetPosition());\n  robot_left->SetValue(robot_right->GetValue());\n}\nplayer = robot_left;\nplayer->IsActive(true);\nplayer->IsVisible(true);\nplayer->SetVelocity(-50.0f);\nbackground->SetVelocity(50.0f);\nchMovement->setPaused(false);\nbreak;\n\ncase Input::Command::CM_RIGHT:\nif (player == robot_left)\n{\n  robot_left->IsActive(false);\n  robot_left->IsVisible(false);\n  robot_right->SetPosition(robot_left->GetPosition());\n  robot_right->SetValue(robot_left->GetValue());\n}\nplayer = robot_right;\nplayer->IsActive(true);\nplayer->IsVisible(true);\nplayer->SetVelocity(50.0f);\nbackground->SetVelocity(-50.0f);\nchMovement->setPaused(false);\nbreak;\n```", "```cpp\nvoid CheckCollisions()\n{\n  if (player->IntersectsCircle(pickup))\n  {\n FMOD::Channel* channel;\n audiomgr->playSound(FMOD_CHANNEL_FREE, sfxOilcan, false, &channel);\n    pickup->IsVisible(false);\n    pickup->IsActive(false);\n    player->SetValue(player->GetValue() + pickup->GetValue());\n    pickupSpawnTimer = 0.0f;\n    pickupsReceived++;\n  }\n\n  if (player->IntersectsRect(enemy))\n  {\n FMOD::Channel* channel;\n audiomgr->playSound(FMOD_CHANNEL_FREE, sfxWater, false, &channel);\n    enemy->IsVisible(false);\n    enemy->IsActive(false);\n    player->SetValue(player->GetValue() + enemy->GetValue());\n    enemySpawnTimer = 0.0f;\n  }\n}\n```", "```cpp\ncase Input::Command::CM_UP:\n{\n  FMOD::Channel* channel;\n audiomgr->playSound(FMOD_CHANNEL_FREE, sfxJump, false, &channel);\n  player->Jump(Sprite::SpriteState::UP);\n}\nbreak;\n\ncase Input::Command::CM_DOWN:\n{\n  FMOD::Channel* channel;\n audiomgr->playSound(FMOD_CHANNEL_FREE, sfxJump, false, &channel);\n  player->Jump(Sprite::SpriteState::DOWN);\n}\nbreak;\n```", "```cpp\nFMOD::Sound* sfxButton;\n```", "```cpp\nresult = audiomgr->createSound(\"resources/button.wav\", FMOD_DEFAULT, 0, &sfxButton);\n```", "```cpp\ncase Input::Command::CM_UI:\nFMOD::Channel* channel;\nif (pauseButton->IsClicked())\n{\n audiomgr->playSound(FMOD_CHANNEL_FREE, sfxButton, false, &channel);\n  pauseButton->IsClicked(false);\n  pauseButton->IsVisible(false);\n  pauseButton->IsActive(false);\n\n  resumeButton->IsClicked(false);\n  resumeButton->IsVisible(true);\n  resumeButton->IsActive(true);\n  m_gameState = GS_Paused;\n}\n\nif (resumeButton->IsClicked())\n{\n audiomgr->playSound(FMOD_CHANNEL_FREE, sfxButton, false, &channel);\n  resumeButton->IsClicked(false);\n  resumeButton->IsVisible(false);\n  resumeButton->IsActive(false);\n\n  pauseButton->IsClicked(false);\n  pauseButton->IsVisible(true);\n  pauseButton->IsActive(true);\n  m_gameState = GS_Running;\n}\n\nif (playButton->IsClicked())\n{\n audiomgr->playSound(FMOD_CHANNEL_FREE, sfxButton, false, &channel);\n  playButton->IsClicked(false);\n  exitButton->IsActive(false);\n  playButton->IsActive(false);\n  creditsButton->IsActive(false);\n  m_gameState = GameState::GS_Running;\n}\n\nif (creditsButton->IsClicked())\n{\n audiomgr->playSound(FMOD_CHANNEL_FREE, sfxButton, false, &channel);\n  creditsButton->IsClicked(false);\n  exitButton->IsActive(false);\n  playButton->IsActive(false);\n  creditsButton->IsActive(false);\n  m_gameState = GameState::GS_Credits;\n}\n\nif (exitButton->IsClicked())\n{\n audiomgr->playSound(FMOD_CHANNEL_FREE, sfxButton, false, &channel);\n  playButton->IsClicked(false);\n  exitButton->IsActive(false);\n  playButton->IsActive(false);\n  creditsButton->IsActive(false);\n  PostQuitMessage(0);\n}\n\nif (menuButton->IsClicked())\n{\n audiomgr->playSound(FMOD_CHANNEL_FREE, sfxButton, false, &channel);\n  menuButton->IsClicked(false);\n  menuButton->IsActive(false);\n  m_gameState = GameState::GS_Menu;\n}\n\nif (continueButton->IsClicked())\n{\n audiomgr->playSound(FMOD_CHANNEL_FREE, sfxButton, false, &channel);\n  continueButton->IsClicked(false);\n  continueButton->IsActive(false);\n  m_gameState = GameState::GS_Running;\n}\n\nif (replayButton->IsClicked())\n{\n audiomgr->playSound(FMOD_CHANNEL_FREE, sfxButton, false, &channel);\n  replayButton->IsClicked(false);\n  replayButton->IsActive(false);\n  exitButton->IsActive(false);\n  RestartGame();\n  m_gameState = GameState::GS_Running;\n}\nbreak;\n```", "```cpp\nFMOD::Sound* musBackground;\n```", "```cpp\nresult = audiomgr->createSound(\"resources/jollybot.mp3\", FMOD_LOOP_NORMAL | FMOD_2D | FMOD_HARDWARE, 0, &musBackground);\nFMOD::Channel* channel;\nresult = audiomgr->playSound(FMOD_CHANNEL_FREE, musBackground, false, &channel);\n```", "```cpp\nSprite::~Sprite()\n{\n  for (int i = 0; i < m_textureIndex; i++)\n  {\n    glDeleteTextures(1, &m_textures[i]);\n  }\n  delete[] m_textures;\n  m_textures = NULL;\n}\n```", "```cpp\ndelete robot_left;\ndelete robot_right;\ndelete robot_right_strip;\ndelete robot_left_strip;\ndelete background;\ndelete pickup;\ndelete enemy;\ndelete pauseButton;\ndelete resumeButton;\ndelete splashScreen;\ndelete menuScreen;\ndelete creditsScreen;\ndelete playButton;\ndelete creditsButton;\ndelete exitButton;\ndelete menuButton;\ndelete nextLevelScreen;\ndelete continueButton;\ndelete gameOverScreen;\ndelete replayButton;\n```", "```cpp\nInput::~Input()\n{\n  delete[] m_uiElements;\n m_uiElements = NULL;\n}\n```", "```cpp\ndelete inputManager;\n```", "```cpp\nKillFont();\n```", "```cpp\nsfxWater->release();\nsfxOilcan->release();\nsfxJump->release();\nsfxMovement->release();\nsfxButton->release();\nmusBackground->release();\naudiomgr->release(); \n```"]