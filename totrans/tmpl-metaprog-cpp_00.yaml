- en: Preface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The C++ programming language is one of the most widely used in the world and
    it has been so for decades. Its success isn’t due just to the performance it provides
    or maybe to its ease of use, which many would argue against, but probably to its
    versatility. C++ is a general-purpose, multi-paradigm programming language that
    blends together procedural, functional, and generic programming.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: '**Generic programming** is a paradigm of writing code such as that entities
    such as functions and classes are written in terms of types that are specified
    later. These generic entities are instantiated only when needed for specific types
    that are specified as arguments. These generic entities are known as templates
    in C++.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: '**Metaprogramming** is the programming technique of using templates (and constexpr
    functions in C++) to generate code at compile-time that is then merged with the
    rest of the source code for compiling a final program. Metaprogramming implies
    that at least an input or an output is a type.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Templates in C++ have a reputation of being *pretty horrendous*, as described
    in the C++ Core Guideless (a document of dos and don’ts maintained by Bjarne Stroustrup
    and Herb Sutter). However, they make generic libraries possible such as the C++
    Standard Library that C++ developers use all the time. Whether you’re writing
    templates yourself or just using templates written by others (such as standard
    containers or algorithms), templates are most likely part of your daily code.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: This book is intended to provide a good understanding of all the spectrum of
    templates available in C++ (from their basic syntax to concepts in C++20). This
    will be the focus of the first two parts of the book. The third and final part
    will help you put the newly acquired knowledge into practice to perform metaprogramming
    with templates.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for?
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is for beginner-to-intermediate C++ developers who want to learn about
    template metaprogramming as well as advanced C++ developers looking to get up
    to speed with the new C++20 features related to templates and the various idioms
    and patterns. Basic C++ coding experience is necessary to get started with this
    book.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*Chapter 1*](B18367_01_ePub.xhtml#_idTextAnchor015), *Introduction to Templates*,
    provides an introduction to the concept of template metaprogramming in C++, with
    several simple examples, and a discussion on why we need templates and what are
    the pros and cons of using templates.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 2*](B18367_02_ePub.xhtml#_idTextAnchor024), *Template Fundamentals*,
    explores all forms of templates in C++: function templates, class templates, variable
    templates, and alias templates. For each of these, we discuss the syntax and the
    details of how they work. Furthermore, the key concepts of template instantiation
    and specialization are addressed here.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 3*](B18367_03_ePub.xhtml#_idTextAnchor051), *Variadic Templates*,
    is dedicated entirely to variadic templates which are templates that have a variable
    number of template parameters. We discuss in detail variadic function templates,
    variadic class templates, variadic alias templates, and variadic variable templates,
    parameter packs and how they are expanded, as well as fold expressions that help
    us simplify the writing of variadic templates.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B18367_04_ePub.xhtml#_idTextAnchor064), *Advanced Template Concepts*,
    groups a series of advanced template concepts such as dependent names and name
    lookup, template argument deduction, template recursion, perfect forwarding, generic
    and template lambdas. By understanding these topics, readers will be able to greatly
    expand the variety of templates they can read or write.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B18367_05_ePub.xhtml#_idTextAnchor080), *Type Traits and Conditional
    Compilation*, is dedicated to type traits. The reader will learn about type traits,
    what traits the standard library provides, and how they can be used to solve different
    problems.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B18367_06_ePub.xhtml#_idTextAnchor099), *Concepts and Constraints*,
    presents the new C++20 mechanism for defining requirements for template arguments
    with concepts and constraints. You will learn about the various ways to specify
    constraints. Moreover, we provide an overview of the content of the C++20 standard
    concepts library.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B18367_07_ePub.xhtml#_idTextAnchor123), *Patterns and Idioms*,
    explores a series of unrelated advanced topics of using the knowledge learned
    so far into implementing various patterns. We explore the concepts of static polymorphism,
    type erasure, tag dispatching, and patterns such as the curiously recursive template
    pattern, expression templates, mixins, and typelists.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B18367_08_ePub.xhtml#_idTextAnchor179), *Ranges and Algorithms*,
    is dedicated to understanding containers, iterators, and algorithms, which are
    the core components of the standard template library. You will learn here how
    to write a generic container and an iterator type for it as well as a general-purpose
    algorithm.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B18367_09_ePub.xhtml#_idTextAnchor188), *The Ranges Library*,
    explores the new C++20 Ranges library with its key features such as ranges, range
    adaptors, and constrained algorithms. These enable us to write simpler code for
    working with ranges. Furthermore, you will also learn here how to write your own
    range adaptor.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '*Appendix* is a short epilog that provides a summary of the book.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '*Assignment Answers* contains all the answers to the questions from all the
    chapters.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To get started with this book, you need to have some basic knowledge of the
    C++ programming language. You need to know the syntax and fundamentals about classes,
    functions, operators, function overloading, inheritance, virtual functions, and
    more. However, no knowledge of templates is required, as this book will teach
    you everything from scratch.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: 'All the code samples in this book are cross-platform. That means you can use
    any compiler to build and run them. However, although many snippets work with
    a C++11 compiler, there are also snippets that require a C++17 or C++20 compliant
    compiler. Therefore, we recommend you use a compiler version that supports C++20
    so you can run all the samples. The samples in this book have been tested with
    **MSVC 19.30** (**Visual Studio 2022**), **GCC 12.1/13**, and **Clang 13/14**.
    If you don’t have such a C++20 compliant compiler on your machine, you can try
    one online. We recommend one of the following:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: Compiler Explorer ([https://godbolt.org/](https://godbolt.org/))
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wandbox ([https://wandbox.org/](https://wandbox.org/))
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: C++ Insights ([https://cppinsights.io/](https://cppinsights.io/))
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The C++ Insights online tools will be referred several times in the book for
    analyzing the code generated by the compiler.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: You should refer to the page, [https://en.cppreference.com/w/cpp/compiler_support](https://en.cppreference.com/w/cpp/compiler_support),
    if you want to check compilers support for different versions of the C++ standard.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are using the digital version of this book, we advise you to type
    the code yourself or access the code from the book’s GitHub repository (a link
    is available in the next section). Doing so will help you avoid any potential
    errors related to the copying and pasting of code.**'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: Mentions and further readings
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Throughout the book, we are referring multiple times to the C++ standard. This
    document is copy-righted by the **International Organization for Standardization**.
    The official C++ standard document can be purchased from here: [https://www.iso.org/standard/79358.html](https://www.iso.org/standard/79358.html).
    However, multiple drafts of the C++ standard as well as the sources used to generate
    them are freely available on GitHub at [https://github.com/cplusplus/draft](https://github.com/cplusplus/draft).
    You cand find additional information about the C++ standard at [https://isocpp.org/std/the-standard](https://isocpp.org/std/the-standard).'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: A great online resource for C++ developers is the **C++ Reference** website,
    available at [https://en.cppreference.com/](https://en.cppreference.com/). This
    provides exhaustive documentation of the C++ language directly derived from the
    C++ standard. Content from the C++ Reference is quoted several times in the book.
    The C++ Reference content is licensed under CC-BY-SA license, [https://en.cppreference.com/w/Cppreference:Copyright/CC-BY-SA](https://en.cppreference.com/w/Cppreference:Copyright/CC-BY-SA).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: At the end of each chapter, you will find a section called *Further reading*.
    This section contains a list of readings used as a bibliography and recommended
    for deepening your knowledge of the presented topics.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: Download the example code files
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download the example code files for this book from GitHub at [https://github.com/PacktPublishing/Template-Metaprogramming-with-CPP](https://github.com/PacktPublishing/Template-Metaprogramming-with-CPP).
    If there’s an update to the code, it will be updated in the GitHub repository.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: We also have other code bundles from our rich catalog of books and videos available
    at [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/).
    Check them out!
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Download the color images
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We also provide a PDF file that has color images of the screenshots and diagrams
    used in this book. You can download it here: [https://packt.link/Un8j5](https://packt.link/Un8j5).'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '`Code in text`: Indicates code words in text, database table names, folder
    names, filenames, file extensions, pathnames, dummy URLs, user input, and Twitter
    handles. Here is an example: “This problem can be fixed by making `init` a dependent
    name.”'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Any command-line input or output is written as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**Bold**: Indicates a new term, an important word, or words that you see onscreen.
    For instance, words in menus or dialog boxes appear in **bold**. Here is an example:
    “The capacity is 8, the size is 0, and the **head** and **tail** both point to
    index **0**.”'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: Tips or important notes
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: Appear like this.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: Get in touch
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '**General feedback**: If you have questions about any aspect of this book,
    email us at [customercare@packtpub.com](mailto:customercare@packtpub.com) and
    mention the book title in the subject of your message.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '**Errata**: Although we have taken every care to ensure the accuracy of our
    content, mistakes do happen. If you have found a mistake in this book, we would
    be grateful if you would report this to us. Please visit [www.packtpub.com/support/errata](http://www.packtpub.com/support/errata)
    and fill in the form.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '**Piracy**: If you come across any illegal copies of our works in any form
    on the internet, we would be grateful if you would provide us with the location
    address or website name. Please contact us at [copyright@packt.com](mailto:copyright@packt.com)
    with a link to the material.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are interested in becoming an author**: If there is a topic that you
    have expertise in and you are interested in either writing or contributing to
    a book, please visit [authors.packtpub.com](http://authors.packtpub.com).'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: Share Your Thoughts
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you’ve read *Template Metaprogramming with C++*, we’d love to hear your
    thoughts! Please [click here to go straight to the Amazon review page](https://packt.link/r/1803243457)
    for this book and share your feedback.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: Your review is important to us and the tech community and will help us make
    sure we’re delivering excellent quality content.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 您的评论对我们和科技社区都非常重要，并将帮助我们确保我们提供高质量的内容。
