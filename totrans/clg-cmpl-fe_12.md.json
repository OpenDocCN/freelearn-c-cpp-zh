["```cpp\n$ cd /home/user/project/src/lib\n$ clang -Wall -I../headers ProjectLib.cpp -o ProjectLib.o\n```", "```cpp\n1[ \n\n2    { \n\n3        \"directory\": \"/home/user/project/src/lib\", \n\n4        \"command\": \"clang -Wall -I../headers ProjectLib.cpp -o ProjectLib.o\", \n\n5        \"file\": \"ProjectLib.cpp\", \n\n6        \"output\": \"ProjectLib.o\" \n\n7    } \n\n8 ]\n```", "```cpp\n1[ \n\n2    { \n\n3        \"directory\": \"/home/user/project/src/lib\", \n\n4        \"arguments\": [ \n\n5            \"clang\", \n\n6            \"-Wall\", \n\n7            \"-I../headers\", \n\n8            \"ProjectLib.cpp\", \n\n9            \"-o\", \n\n10            \"ProjectLib.o\" \n\n11        ], \n\n12        \"file\": \"ProjectLib.cpp\", \n\n13        \"output\": \"ProjectLib.o\" \n\n14    } \n\n15 ]\n```", "```cpp\n# Generate a CompilationDatabase (compile_commands.json file) for our build, \n\n# for use by clang_complete, YouCompleteMe, etc. \n\nset(CMAKE_EXPORT_COMPILE_COMMANDS 1)\n```", "```cpp\n$ ninja -t compdb > compile_commands.json\n```", "```cpp\n-p <build-path> is used to read a compile command database\n```", "```cpp\n$ ./install/bin/clang-tidy clang/lib/Parse/Parser.cpp -p ./build/\n```", "```cpp\n$ clangd --help\n...\n--compile-commands-dir=<string> - Specify a path to look for\ncompile_commands.json.If the path is invalid, clangd will search\n```", "```cpp\nin the current directory and parent paths of each source file.\n...\n```"]