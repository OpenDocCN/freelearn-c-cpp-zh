["```cpp\nConcurrent System {\n    Shared State {\n      Counter : Integer = 0\n    }\n\n    Task T1 {\n      A : Integer\n        1.1\\. A = Counter\n        1.2\\. A = A + 1\n        1.2\\. Counter = A\n    }\n    Task T2 {\n      B : Integer\n        2.1\\. B = Counter\n        2.2\\. B = B + 1\n        2.2\\. Counter = B\n    }\n    Task T3 {\n      A : Integer\n        3.1\\. A = Counter\n        3.2\\. A = A + 1\n        3.2\\. Counter = A\n    }\n}\n```", "```cpp\n  Task Scheduler |    Task T1   |    Task T2   |  Task T3\n---------------------------------------------------------\n  Context Switch |              |              |\n                 |  A = Counter |              | \n                 |  A = A + 1   |              | \n                 |  Counter = A |              | \n  Context Switch |              |              |\n                 |              |  B = Counter |\n                 |              |  B = B + 1   |\n  Context Switch |              |              |\n                 |              |              |  A = Counter\n  Context Switch |              |              |\n                 |              |  Counter = B |\n  Context Switch |              |              |\n                 |              |              |  A = A + 1\n                 |              |              |  Counter = A\n```", "```cpp\nConcurrent System {\n    Shared State {\n      char *ptr = NULL; // A shared char pointer which is\n                        // supposed to point to a memory\n                        // address in the Heap space. It\n                        // becomes null by default.\n    }\n    Task P {\n        1.1\\. ptr = (char*)malloc(10 * sizeof(char));\n        1.2\\. strcpy(ptr, \"Hello!\");\n        1.3\\. printf(\"%s\\n\", ptr);\n    }\n    Task Q {\n        2.1\\. free(ptr);\n        2.2\\. ptr = NULL;\n    }\n}\n```", "```cpp\nConcurrent System {\n  Shared State {\n    X : Integer = 0\n  }\n  Task P {\n      1.1\\. X = 1\n  }\n  Task Q {\n      2.1\\. print X\n  }\n}\n```", "```cpp\nConcurrent System {\n  Shared State {\n  }\n  Task P {\n      1.1\\. print 3\n  }\n  Task Q {\n      2.1\\. print 1\n  }\n  Task R {\n      3.1\\. print 2\n  }\n}\n```", "```cpp\nConcurrent System {\n  Shared State {\n    X : Integer = 2\n  }\n  Task P {\n    A : Integer\n      1.1\\. A = X\n      1.2\\. A = A + 1\n      1.3\\. X = A\n  }\n  Task Q {\n    B : Integer\n      2.1\\. B = X\n      2.2\\. B = B + 3\n      2.3\\. X = B\n  }\n}\n```", "```cpp\nConcurrent System {\n  Shared State {\n    X : Integer (read-only) = 5\n  }\n  Task P {\n    A : Integer\n      1.1\\. A = X\n      1.2\\. A = A + 1\n      1.2\\. print A\n  }\n  Task Q {\n      2.1\\. print X\n  }\n  Task R {\n    B : Integer\n      3.1\\. B = X + 1\n      3.2\\. B = B + 1\n      3.3\\. print B\n  }\n}\n```", "```cpp\nConcurrent System {\n  Task P {\n    1.1\\. print 'A'\n  }\n  Task Q {\n    2.1\\. print 'B'\n  }\n}\n```", "```cpp\nConcurrent System {\n  Shared State {\n    Done : Boolean = False\n  }\n  Task P {\n    1.1\\. print 'A'\n    1.2\\. Done = True\n  }\n  Task Q {\n    2.1\\. While Not Done Do Nothing\n    2.2\\. print 'B'\n  }\n}\n```", "```cpp\nConcurrent System {\n  Task P {\n      1.1\\. print 'A'\n      1.2\\. Notify Task Q\n  }\n  Task Q {\n      2.1\\. Go To Sleep Mode\n      2.2\\. print 'B'\n  }\n}\n```", "```cpp\n1.1 print 'A'\n1.2\\. Notify Task Q\n2.1\\. Go To Sleep Mode\n2.2\\. print 'B'\n```", "```cpp\nConcurrent System {\n  Shared State {\n    Done : Boolean = False\n  }\n  Task P {\n      1.1\\. print 'A'\n      1.2\\. Done = True\n      1.3\\. Notify Task Q\n  }\n  Task Q {\n      2.1\\. While Not Done {\n      2.2\\.     Go To Sleep Mode If Done is False (Atomic)\n      2.3\\. }\n      2.4\\. print 'B'\n  }\n}\n```", "```cpp\nConcurrent System {\n  Shared State {\n    S : Semaphore which allows only 1 task at a time\n    Counter: Integer = 0\n  }\n  Task P {\n    A : Local Integer\n      1.1\\. EnterCriticalSection(S)\n      1.2\\. A = Counter\n      1.3\\. A = A + 1\n      1.4\\. Counter = A\n      1.5\\. LeaveCriticalSection(S)\n  }\n  Task Q {\n    B : Local Integer\n      2.1\\. EnterCriticalSection(S)\n      2.2\\. B = Counter\n      2.3\\. B = B + 2\n      2.4\\. Counter = B\n      2.5\\. LeaveCriticalSection(S)\n  }\n}\n```", "```cpp\nConcurrent System {\n  Shared State {\n    S : Semaphore which allows only 1 task at a time\n    Counter: Integer = 0\n  }\n  Task P {\n    A : Local Integer\n      1.1\\. Lock(S)\n      1.2\\. A = Counter\n      1.3\\. A = A + 1\n      1.4\\. Counter = A\n      1.5\\. Unlock(S)\n  }\n  Task Q {\n    B : Local Integer\n      2.1\\. Lock(S)\n      2.2\\. B = Counter\n      2.3\\. B = B + 2\n      2.4\\. Counter = B\n      2.5\\. Unlock(S)\n  }\n}\n```", "```cpp\nConcurrent System {\n  Shared State {\n    Done : Boolean = False\n  }\n  Task P {\n      1.1\\. print 'A'\n      1.2\\. Done = True\n      1.3\\. Notify Task Q\n  }\n  Task Q {\n      2.1\\. While Not Done {\n      2.2\\.     Go To Sleep Mode If Done is False (Atomic)\n      2.3\\. }\n      2.4\\. print 'B'\n  }\n}\n```", "```cpp\nConcurrent System {\n  Shared State {\n      Done : Boolean = False\n  }\n  Task P {\n      1.1\\. print 'A'\n      1.2\\. Done = True\n      1.3\\. Memory Barrier\n      1.4\\. Notify Task Q\n  }\n  Task Q {\n      2.1\\. Do {\n      2.2\\.     Memory Barrier\n      2.3\\.     Go To Sleep Mode If Done is False (Atomic)\n      2.4\\. } While Not Done\n      2.5\\. print 'B'\n  }\n}\n```", "```cpp\nConcurrent System {\n  Shared State {\n      Done : Boolean = False\n      M : Mutex\n  }\n  Task P {\n      1.1\\. print 'A'\n      1.2\\. Lock(M)\n      1.3\\. Done = True\n      1.4\\. Unlock(M)\n      1.5\\. Notify Task Q\n  }\n  Task Q {\n      2.1\\. Lock(M)\n      2.2\\. While Not Done {\n      2.3\\.     Go To Sleep Mode And Unlock(M) (Atomic)\n      2.4\\.     Lock(M)\n      2.5\\. }\n      2.6\\. Unlock(M)\n      2.7\\. print 'B'\n  }\n}\n```", "```cpp\nConcurrent System {\n  Shared State {\n      Done : Boolean = False\n      M : Mutex\n  }\n  Task P {\n      1.1\\. print 'A'\n      1.2\\. SpinLock(M)\n      1.2\\. Done = True\n      1.3\\. SpinUnlock(M)\n  }\n  Task Q {\n      2.1  SpinLock(M)\n      2.2\\. While Not Done {\n      2.3\\.   SpinUnlock(M)\n      2.4\\.   SpinLock(M)\n      2.5\\. }\n      2.6\\. SpinUnlock(M)\n      2.4\\. print 'B'\n  }\n}\n```", "```cpp\nConcurrent System {\n  Shared State {\n      Done : Boolean = False\n      CV   : Condition Variable\n      M    : Mutex\n  }\n  Task P {\n        1.1\\. print 'A'\n        1.2\\. Lock(M)\n        1.3\\. Done = True\n        1.4\\. Notify(CV)\n        1.5\\. Unlock(M)\n  }\n  Task Q {\n        2.1\\. Lock(M)\n        2.2\\. While Not Done {\n        2.3\\.     Sleep(M, CV)\n        2.4\\. }\n        2.5\\. Unlock(M)\n        2.6\\. print 'B'\n  }\n}\n```"]