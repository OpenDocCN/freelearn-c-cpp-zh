- en: Volumetric Lightmaps, Fog, and Precomputing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'UE4 offers a massive amount of the most cutting edge graphics features developers
    could hope for. The good news is, for many games on many platforms, with a good
    set of level designers, this will be handled largely automatically. However, being
    ignorant of how the systems work in general can have two major drawbacks for a
    team: not taking advantage of the built-in advanced engine techniques, or you
    may encounter build time or build size problems and not know where to begin addressing
    them. While the actual techniques and physics of the lighting available in Unreal
    could fill books by itself (and does!), our theme of being informed on options
    and use will be our focus again in this chapter. By the end, confidence in how
    to best use lighting and how to troubleshoot any problems that arise from it will
    be assured, to help make a modern beautiful game and guide a team to best practices.
    This chapter covers:'
  prefs: []
  type: TYPE_NORMAL
- en: Volumetric lightmaps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Atmosphereic and folumetric fog
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lightmass (settings and previewing tools)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Profiling lightmaps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As is typical, this chapter will use examples from the `Chapter 11` branch
    of our project on GitHub, but the concepts and techniques are valid in any project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Mastering-Game-Development-with-Unreal-Engine-4-Second-Edition/tree/Chapter-11](https://github.com/PacktPublishing/Mastering-Game-Development-with-Unreal-Engine-4-Second-Edition/tree/Chapter-11)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Engine version used: 4.19.2.'
  prefs: []
  type: TYPE_NORMAL
- en: Volumetric lightmaps, lightmass, and fog
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will briefly go through the three topics listed in the
    heading, which are often confusing to new or casual game makers:'
  prefs: []
  type: TYPE_NORMAL
- en: Volumetric lightmaps are a precomputed volume-based set of colors that can be
    quickly used to determine the bounced lighting in any given area of your map.
    For those who are familiar with pre-4.18 UE4, this was done via the Indirect Lighting
    Cache, but that was a fixed sample size. The new lightmaps use more dynamic sampling
    for added detail. These are different from a plain lightmap, which is color that
    is directly baked into a scene and applied to objects typically as a blended texture. Another
    way to think of volumetric lightmaps is as a quick look-up table of complex color
    information in samples of space.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Lightmass is the system name in Unreal that determines your lighting properties,
    including how (and whether) volumetric lightmaps are computed. To prevent lighting
    times from being extreme, typically you will add one or more Lightmass Importance
    Volumes (an actual basic Unreal volume type), to tell the engine and editor where
    you care about these computations. With as many ways and times light and volume
    are combined, it's no wonder it can be hard to follow.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Atmospheric Fog is a visual effect simulating sunlight (or other light) traveling
    through the atmosphere of a planet. This is set via an Atmospheric Fog object
    in the map, as well as the settings on lights set to affect it. And related, but
    unique, is Volumetric Fog is a visual effect where fog appears to fill a volume
    in a specified region and is appropriately affected by lighting. While it is another
    use of the word *volume* in this section, it's defined in Unreal globally via
    an Exponential Height Fog object in the map, or in a local region via particles.
    And, like Atmospheric Fog, it is also defined largely by the lights set to affect
    it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding volumetric lightmaps with lightmass volumes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As noted in the previous section, when adding a Lightmass Importance Volume,
    the area inside that volume will by default generate volumetric lightmaps. Our
    FrozenCove map gives an excellent overview of these things. Let''s first examine
    the volume and its placement in the level:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e79727b7-feee-4e24-8b50-7c3de9da49a8.png)'
  prefs: []
  type: TYPE_IMG
- en: Panning back out of the actual cove/cave playable area, you can see this volume
    encompasses that playable area entirely, but not much else. This is exactly the
    practice you should try to employ to keep lighting build times down, to reduce
    the overall number (and thus memory) of saved out lightmaps, and yet give the
    player the best visual experience in the areas they will most directly view and
    interact with. Panning around from that height, you can see there is actually
    quite a bit of modeled-out geometry in these surrounding rocky crags. Their lighting
    contribution to the player's scene, though, is not relevant, and other than maybe
    a lucky long shot with our gun that we added in our game, no dynamic objects are
    ever intended to be seen closely in these areas.
  prefs: []
  type: TYPE_NORMAL
- en: 'Why are these things important? Let''s take just a quick overview of what pre-built
    lighting gets us in this example, and what good these lightmaps do us. First and
    foremost is Diffuse Interreflection. This is the technical term for the main use
    of Lightmass: taking a very detailed model of how light bounces off of objects
    and precomputing it into a form usable at runtime. Lightmass does this in two
    distinct ways: firstly by building lightmaps cooked or baked for all the static
    objects in your scene that are then rendered directly with the geometry at runtime;
    and secondly as volumetric lightmaps, the quick look-up table of samples of this
    bounced color for dynamic moving objects at runtime. Without going too deeply
    into the computations involved, let''s focus on the reasoning this is important:
    some time spent precomputing this information when doing builds of your game generates
    a *much* more realistic and visually pleasing scene for your audience at a minimal
    performance cost at runtime. This interreflection concept, where color bleeds
    from one object to another near it, may seem a bit extraneous, but take a little
    time and look up some examples where it is applied and not applied to the same
    scene, and your brain will immediately choose the scene where it is used as the
    more realistic and higher-quality rendering. Similarly, Lightmass will compute
    all manner of shadows, Ambient Occlusion (a technique for shadowing light in nooks
    and crannies), and much, much more. In the second section of this chapter we''ll
    dig into a lot more of the specifics of Lightmass'' settings and how to best take
    advantage of them. This section was about the most basic way to get Lightmass
    added to your game (by adding the importance volume) and why adding that importance
    volume is, well, important!'
  prefs: []
  type: TYPE_NORMAL
- en: Using Atmospheric Fog
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Epic has done a lot of work over the years (specifically updated in 4.16) on
    making more complex fog techniques more accessible to developers, and at this
    stage they are relatively easy to add, at least compared to days past. In our
    cove map example, first we'll examine its use of the Atmospheric Fog object placed
    within it, as well as its sky and the sky's corresponding directional light properties.
    For games desiring a sort of low-lying fog effect, where at low altitudes in the
    game the fog becomes more thick and pronounced, please do see the next sub-section
    on *Exponential Height Fog (Volumetric Fog)*. For readers who would like to use
    localized Volumetric Fog to enhance (or even obscure) an area, have special properties
    for a localized region, and/or moving/changing dynamic volume fog, the next sub-section
    will briefly go over this topic as well, and both sections have links in the *Further
    reading* section.
  prefs: []
  type: TYPE_NORMAL
- en: 'But, now on to our example here. While it may not have been immediately noticed
    when jumping in this level, if you remove the effect or exaggerate it (we''ll
    do the later in two shots here) you can easily see what a difference it makes
    when looking near the sun out of our cave:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/de5e24e9-4e14-4297-81b8-1c64986af428.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Hopefully the haze around the rocks at the top is clear enough, and if you
    look at the rest of the scene, the area where you can see the sky is noticeably
    brightened when the sun comes into view, as it is here. Let''s look at the settings
    that generate this. First is the sky sphere, here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9cfd8e8b-44d2-441f-9c54-e6e740990203.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Note specifically that it has a Directional Light Actor specified. If we follow
    that to the one we see there on screen, here are its properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5fc347ad-72de-4761-a656-56963000d6a3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And of course, central to these properties is the Atmosphere / Fog Sun Light
    box, which lets our Atmospheric Fog properties know this is the source of the
    sun when creating its volume fog:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ad564405-c3ad-4c6d-9b64-140fe98821e8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And lastly, let''s show how modifying some of these settings on the Atmospheric
    Fog object (which is found by the Exponential Height Fog object in the Modes pane
    on the left):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/daf00844-517b-4322-b646-9015d6b48e39.png)'
  prefs: []
  type: TYPE_IMG
- en: And now it's extreme and you can't miss it! I highly recommend just experimenting
    with all of these settings. There is so much to explore here, and it's good fun
    to see just how all the different parameters affect the outcome in real time.
    Unlike with many of the Lightmass effects and settings, Atmospheric Fog does not
    require a build (via the Build button at the top) to update and is very easy and
    fast to play with.
  prefs: []
  type: TYPE_NORMAL
- en: Using Volumetric Fog
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Volumetric Fog is a great visual effect that currently is very specifically
    designed for areas a player may be walking in a relatively flat map, or areas
    they may be looking up from or down to with some elevation changes. Given the
    difficulty of computation, it''s currently not otherwise supported (for example,
    varying based on camera view-angle), but it is still a very powerful tool and
    great system to be comfortable with explaining its significance to a team. To
    start, once more let''s take a look at what is already in FrozenCove, and then
    we''ll modify it a bit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ef2db160-b835-463a-a03c-8fbd15680052.png)'
  prefs: []
  type: TYPE_IMG
- en: 'These settings give a nice subtle fog that only begins fairly distant from
    the placement of the height fog object. So, once again for demonstration purposes,
    we''ll make it a bit more extreme (and the more observant will notice the particles
    in the foreground that we''ll discuss next):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5038ee62-5ec7-4cf5-a7f8-80a47996c3b0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The level uses traditional particles, which we discussed previously due to
    their blending performance cost, to simulate snow-banks; but as you''ll see, we
    could do this with a Volumetric Fog particle emitter too, which you can view in
    the map now. However, for this emitter to work, we need to switch the height fog''s
    Volumetric Fog setting to be true (currently the box is unchecked). Note that
    while we''ll discuss later how to optimize a bit of your Lightmass output if necessary.
    If you use Volumetric Fog this way you should remain cognizant of the potential
    performance costs and use the techniques from [Chapter 8](e80319fb-a34f-4648-9d86-0830791ac4d4.xhtml), *Shader
    Editing and Optimization Tips*. So let''s take a look at a material we can add
    to a particle system to get dynamic changing and colored Volumetric Fog:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f3046009-34db-4438-9a79-125b0d8493f8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, with this material as-is, added to the emitter in the scene, you get a
    rather hard-to-miss blue (which was the original intent), here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/675055e6-c6ba-493f-b3b5-b3a73517ea16.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It turns out, if you disconnect the emissive color, this is a much more subtle
    effect, matching the fog''s natural color. This is what is in the GitHub project
    presently:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/265e74ab-cff8-4eb0-b641-a72eee7dc5ce.png)'
  prefs: []
  type: TYPE_IMG
- en: Volumetric Fog both local and global can really make or break the immersion
    of a scene, so while the whole point here is to be confident using them, it's
    a big help to have some experienced environmental artists around to make sure
    they're not *overused* in a scene aesthetically, in addition to possible performance
    costs already discussed.
  prefs: []
  type: TYPE_NORMAL
- en: Lightmass tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that the basics are out of the way and we''ve seen the power of Volumetric
    Fog and a bit of how it combines with lighting in general, it''s time to get into
    a bit more detail with Lightmass itself. There are myriad objects, variables,
    and endless combinations of the two that can be explored, but to stay focused
    on our technical confidence, we''ll focus on a few key areas here:'
  prefs: []
  type: TYPE_NORMAL
- en: Diffuse Interreflection settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The dynamic Indirect Lighting Lightmap and how to visualize and tune it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ambient Occlusion and its benefits and drawbacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additional factors that can impact lighting build times
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quality Modes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lightmaps, where to find them, and how to profile your usage of them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Our second sub-section here will deal exclusively with lightmaps, so for our
    first section, we'll examine a solid subset of Lightmass' defining properties,
    as well as the impact of Quality Modes.
  prefs: []
  type: TYPE_NORMAL
- en: Learning Lightmass settings and previewing tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, let''s take a look at the global Lightmass settings, found in World
    Settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8db4aae3-79d1-4c93-b32c-685138cffd15.png)'
  prefs: []
  type: TYPE_IMG
- en: The first five options affect indirect lighting the most. If your lighting times
    are very large, setting the static lighting level to greater than 1 can drastically
    reduce your lighting build times by scaling the sampling size. If lighting build
    times for various levels or a whole game are becoming a problem, and your game
    and team can live with the quality reduction in lighting accuracy, try this first.
    The number of bounces can similarly have a significant impact. The purpose of
    indirect lighting is to simulate the real world where a fraction of photons (the
    particles of light our eyes perceive) are deflected or refracted from objects,
    while some are absorbed. The number of bounces means as each point in space is
    calculated, an amount of bounced lighting must also be calculated. Naturally,
    the more bounces, the more work (but also more realistic accuracy). The next three
    are a bit more esoteric, but feel free to simply mouse over them to see what they
    entail. Light smoothing, for example, can be a big help in very specific types
    of maps, but as stated, the cost to indirect shadow detail needs to be weighed.
    Unfortunately, unlike a lot of the fog settings we previously discussed, all of
    these will need to be built to be fully appreciated for the changes they make,
    which can be quite time consuming. Theoretically, if a game has a set style, a
    few experiments can be done early on, preferred values chosen, and then those
    are simply locked in for the duration of the project.
  prefs: []
  type: TYPE_NORMAL
- en: 'To visualize lighting effects, be sure to check out Detail Lighting, Lighting
    Only, and Reflections under the view options of your viewport:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9a16f063-bb86-432a-96ab-6ea956a1c5fe.png)'
  prefs: []
  type: TYPE_IMG
- en: 'However, of most interest here probably is the volumetric Lightmass, which
    can be previewed via a viewport''s Show | Visualize | Volumetric Lightmap, like
    so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4be9594f-fa72-4fcd-9209-a60bf98e9468.png)'
  prefs: []
  type: TYPE_IMG
- en: These directional lighting samples will be used to move objects at runtime and
    also for static meshes when moved around before building static lighting again.
    For experienced UE4 developers, don't forget, since 4.18 this is the default,
    and a generally better accepted model than the old lighting cache. A detailed
    description about the changes is in the *Further reading* section.
  prefs: []
  type: TYPE_NORMAL
- en: Quickly touching on Ambient Occlusion (which is actually turned off in FrozenCove),
    think of it as darkening areas. Concave surfaces block the light bounces in real
    life. While it adds realism, and adds essentially zero build time to lighting
    if you're already doing at least one indirect lighting bounce, keep in mind it
    is modeled on a top-down light to simplify the calculations. So in a sense it's
    similarly limited to Exponential Height Fog in that if your game is not a fundamentally
    flat game (for example, a player moving on a similar surface to the Earth, like
    most of us do), it can lose its realism and value. It is, however, easy enough
    to turn off in the Use Ambient Occlusion setting under your world's Lightmass
    settings. As with many Lightmass options, it's often best to simply try building
    lighting with it on, wandering the level, and maybe taking some specific screenshots,
    then turning it off and repeating this to see if it is of use. You can preview
    what work is done here in your viewport in its View Mode | Buffer Visualization
    | Ambient Occlusion.
  prefs: []
  type: TYPE_NORMAL
- en: If you find yourself having lighting build time problems, and have adjusted
    some of the parameters that can impact those build times, it's worth noting that
    lighting builds use the Swarm Agent system, which can farm the computations out
    to multiple computers on a network. More on this is also listed in the *Further
    reading* section. Note also that for many games, purely dynamic lighting is good
    enough, and much of Lightmass can be turned off for things such as mobile games
    that require a modest level of dynamic lighting detail but don't benefit from
    the memory cost and build time of baked/cooked lighting. As always, know your
    project and its needs, and be ready to do some early experiments and make those
    calls with your artists on the best options. If eliminating cooked lighting allows
    your artists to add more detailed textures to environments or characters, this
    may be a trade-off they're happy to make depending on your game's resolution and
    other settings, so don't be afraid to experiment and discuss!
  prefs: []
  type: TYPE_NORMAL
- en: 'And lastly, know your lighting quality levels. They can be selected from the
    drop-down of the Build button like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/62f7365a-4973-44f9-9809-c3aeee1db97d.png)'
  prefs: []
  type: TYPE_IMG
- en: These are really just a high-to-low of build-time versus quality-level at a
    very high level. If you want to switch in a hurry between these, by all means,
    this should be your first choice for quality versus time.
  prefs: []
  type: TYPE_NORMAL
- en: Profiling lightmaps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As noted, Lightmass will automatically make lightmaps in all the areas enclosed
    in an importance volume. But what does that mean for your project''s memory? You
    can always check the built data size for a quick estimate (hint: most of this
    will be your lightmaps, and maybe a chunk for nav-mesh, and a few smaller necessities
    internal to the level). For example, look in our project''s `Conent/InfinithBladeIceLands/Maps`
    folder and you''ll see frozen cove''s built data `.ubulk` file, about 100 MB.
    This is typical for what we have in our map. However, if you would like some more
    detail, click the down arrow (more options) in the lightmass world settings, and
    under that you''ll find a Lightmaps fly-out like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c7756117-2d2b-4df0-857a-13f00e815b72.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And double-clicking on one of those will give you a lot more detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/deb49844-fa85-4d70-8875-3e209ae1b305.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here you can see compression, size (resolution and memory), and of course,
    change many of these settings. Individual meshes can change their lightmap resolution
    in the static mesh editor under their mesh settings. In addition, you can view
    the texel density of these lightmaps in your viewport via View Mode | Optimization
    Viewmodes | Lightmap Density, as can be seen here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/aa90c0a2-d8e4-4a93-bebb-ceade6c22554.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is so much here to explore, it is important not to get overwhelmed. At
    this point, any major questions a team or project may have should be generally
    answerable. That said, if you finds yourself arguing with artists about visual
    quality, or arguing with the whole team about build times, the tools should be
    now in your hands to explore options, tune, tweak, and come to the optimal solution.
    Lighting in UE4 is amazing and complex, but thankfully, it's not critical to understand
    the *how* of the entire system, but simply command a mastery of the *what* and
    *why* to make the right decisions. In the next chapter, we'll have a bit more
    relaxed time showing off some more cool visual tricks UE4 can do with in-scene
    videos!
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is the function of volumetric lightmaps?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How would you describe the features Lightmass encompasses by default?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between Atmosphereic Fog and Volumetric Fog?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you make a localized instance of Volumetric Fog?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you have slow lighting build times, what is the simplest way to alter quality
    versus time?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the limitations of Exponential Height Maps and Ambient Occlusion?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Where can you find the general size of lightmap data when it's built?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between a traditional lightmap and a volumetric lightmap?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Exponential Height Fog:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.unrealengine.com/en-us/Engine/Actors/FogEffects/HeightFog](https://docs.unrealengine.com/en-us/Engine/Actors/FogEffects/HeightFog)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Volumetric Fog (Local Fog via Particles):'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.unrealengine.com/en-us/Engine/Rendering/LightingAndShadows/VolumetricFog](https://docs.unrealengine.com/en-us/Engine/Rendering/LightingAndShadows/VolumetricFog)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Indirect Lightmap vs. Lighting Cache:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.unrealengine.com/en-US/Engine/Rendering/LightingAndShadows/VolumetricLightmaps](https://docs.unrealengine.com/en-US/Engine/Rendering/LightingAndShadows/VolumetricLightmaps)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Swarm Agents in Unreal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.unrealengine.com/en-us/Engine/Rendering/LightingAndShadows/Lightmass/Unreal-Swarm-Overview](https://docs.unrealengine.com/en-us/Engine/Rendering/LightingAndShadows/Lightmass/Unreal-Swarm-Overview)'
  prefs: []
  type: TYPE_NORMAL
