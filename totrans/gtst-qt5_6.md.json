["```cpp\n use contact_db;\n   CREATE TABLE IF NOT EXISTS contacts (\n   id INT AUTO_INCREMENT,\n   last_name VARCHAR(255) NOT NULL,\n   first_name VARCHAR(255) NOT NULL,\n   phone_number VARCHAR(255) NOT NULL,\n   PRIMARY KEY (id)\n)  ENGINE=INNODB;\n```", "```cpp\n#include <QApplication>\n#include <QtSql>\n#include <QDebug>\n/*\n use contact_db;\n   CREATE TABLE IF NOT EXISTS contacts (\n   id INT AUTO_INCREMENT,\n   last_name VARCHAR(255) NOT NULL,\n   first_name VARCHAR(255) NOT NULL,\n   phone_number VARCHAR(255) NOT NULL,\n   PRIMARY KEY (id)\n)  ENGINE=INNODB;\n*/\nint main(int argc, char *argv[]) {\n   // Setup db connection\n   QSqlDatabase db_conn =\n           QSqlDatabase::addDatabase(\"QMYSQL\", \"contact_db\");\n   db_conn.setHostName(\"127.0.0.1\");\n   db_conn.setDatabaseName(\"contact_db\");\n   db_conn.setUserName(\"root\");\n   db_conn.setPassword(\"\");\n   db_conn.setPort(3306);\n   // Error checks\n   if (!db_conn.open()) {\n       qDebug() << db_conn.lastError();\n       return 1;\n   } else {\n       qDebug() << \"Database connection established !\";\n   }\n}\n```", "```cpp\ndb_conn.setHostName(\"127.0.0.1\");\ndb_conn.setDatabaseName(\"contact_db\");\ndb_conn.setUserName(\"root\");\ndb_conn.setPassword(\"\");\ndb_conn.setPort(3306);\n```", "```cpp\n// Error checks\nif (!db_conn.open()) {\n   qDebug() << db_conn.lastError();\n   return 1;\n} else {\n   qDebug() << \"Database connection established !\";\n}\n```", "```cpp\n% qmake -project\n```", "```cpp\nQT += widgets sql\n```", "```cpp\n% qmake\n% make\n% ./program_executable\n```", "```cpp\nQSqlQuery statement(\"SELECT * FROM contacts\", db_conn);\nQSqlRecord record = statement.record();\nwhile (statement.next()){\n   QString firstName = statement.value(record.indexOf(\"first_name\")).toString();\n   QString lastName = statement.value(record.indexOf(\"last_name\")).toString();\n   QString phoneNumber = statement.value(record.indexOf(\"phone_number\")).toString();\n   qDebug() << firstName << \" - \" << lastName << \" - \" << phoneNumber;\n}\n```", "```cpp\n// Insert new contacts\nQSqlQuery insert_statement(db_conn);\ninsert_statement.prepare(\"INSERT INTO contacts (last_name, first_name, phone_number)\"\n                        \"VALUES (?, ?, ?)\");\ninsert_statement.addBindValue(\"Sidle\");\ninsert_statement.addBindValue(\"Sara\");\ninsert_statement.addBindValue(\"+14495849555\");\ninsert_statement.exec();\n```", "```cpp\ninsert_statement.prepare(\"INSERT INTO contacts (last_name, first_name, phone_number)\"\n                        \"VALUES (?, ?, ?)\");\ninsert_statement.bindValue(2, \"+144758849555\");\ninsert_statement.bindValue(1, \"Brass\");\ninsert_statement.bindValue(0, \"Jim\");\ninsert_statement.exec();\n```", "```cpp\ninsert_statement.prepare(\"INSERT INTO contacts (last_name, first_name, phone_number)\"\n                        \"VALUES (:last_name, :first_name, :phone_number)\");\ninsert_statement.bindValue(\":last_name\", \"Brown\");\ninsert_statement.bindValue(\":first_name\", \"Warrick\");\ninsert_statement.bindValue(\":phone_number\", \"+7494588594\");\ninsert_statement.exec();\n```", "```cpp\n// Delete a record\nQSqlQuery delete_statement(db_conn);\ndelete_statement.exec(\"DELETE FROM contacts WHERE first_name = 'Warrick'\");\nqDebug() << \"Number of rows affected: \" << delete_statement.numRowsAffected();\n```", "```cpp\n// Update a record\nQSqlQuery update_statement(db_conn);\nupdate_statement.exec(\"UPDATE contacts SET first_name='Jude' WHERE id=1 \");\nqDebug() << \"Number of rows affected: \" << update_statement.numRowsAffected();\n```", "```cpp\n#include <QApplication>\n#include <QtSql>\n#include <QDebug>\nint main(int argc, char *argv[]) {\n   // Setup db connection\n   QSqlDatabase db_conn =\n           QSqlDatabase::addDatabase(\"QMYSQL\", \"contact_db\");\n   db_conn.setHostName(\"127.0.0.1\");\n   db_conn.setDatabaseName(\"contact_db\");\n   db_conn.setUserName(\"root\");\n   db_conn.setPassword(\"\");\n   db_conn.setPort(3306);\n   // Error checks\n   if (!db_conn.open()) {\n       qDebug() << db_conn.lastError();\n       return 1;\n   } else {\n       qDebug() << \"Database connection established !\";\n   }\n   // Create table\n   QString table_definition = \"use contact_db;\\n\"\n                           \"    CREATE TABLE IF NOT EXISTS contacts (\\n\"\n                           \"    id INT AUTO_INCREMENT,\\n\"\n                           \"    last_name VARCHAR(255) NOT NULL,\\n\"\n                           \"    first_name VARCHAR(255) NOT NULL,\\n\"\n                           \"    phone_number VARCHAR(255) NOT NULL,\\n\"\n                           \"    PRIMARY KEY (id)\\n\"\n                           \")  ENGINE=INNODB;\";\n   QSqlQuery table_creator(table_definition, db_conn);\n   // Issue SELECT statement\n   QSqlQuery statement(\"SELECT * FROM contacts\", db_conn);\n   QSqlRecord record = statement.record();\n   while (statement.next()){\n       QString firstName = \n       statement.value(record.indexOf(\"first_name\")).toString();\n       QString lastName =\n       statement.value(record.indexOf(\"last_name\")).toString();\n       QString phoneNumber = \n       statement.value(record.indexOf(\"phone_number\")).toString();\n       qDebug() << firstName << \" - \" << lastName << \" - \" << \n       phoneNumber;\n   }\n   // Insert new contacts\n   QSqlQuery insert_statement(db_conn);\n   insert_statement.prepare(\"INSERT INTO contacts (last_name, \n   first_name, phone_number)\"\n                            \"VALUES (?, ?, ?)\");\n   insert_statement.addBindValue(\"Sidle\");\n   insert_statement.addBindValue(\"Sara\");\n   insert_statement.addBindValue(\"+14495849555\");\n   insert_statement.exec();\n   //QSqlQuery insert_statement(db_conn);\n   insert_statement.prepare(\"INSERT INTO contacts (last_name, \n   first_name, phone_number)\"\n                            \"VALUES (?, ?, ?)\");\n   insert_statement.bindValue(2, \"+144758849555\");\n   insert_statement.bindValue(1, \"Brass\");\n   insert_statement.bindValue(0, \"Jim\");\n   insert_statement.exec();\n   insert_statement.prepare(\"INSERT INTO contacts (last_name, \n   first_name, phone_number)\"\n                            \"VALUES (:last_name, :first_name,\n                            :phone_number)\");\n   insert_statement.bindValue(\":last_name\", \"Brown\");\n   insert_statement.bindValue(\":first_name\", \"Warrick\");\n   insert_statement.bindValue(\":phone_number\", \"+7494588594\");\n   insert_statement.exec();\n   // Delete a record\n   QSqlQuery delete_statement(db_conn);\n   delete_statement.exec(\"DELETE FROM contacts WHERE first_name = \n   'Warrick'\");\n   qDebug() << \"Number of rows affected: \" << \n   delete_statement.numRowsAffected();\n   // Update a record\n   QSqlQuery update_statement(db_conn);\n   update_statement.exec(\"UPDATE contacts SET first_name='Jude' WHERE \n   id=1 \");\n   qDebug() << \"Number of rows affected: \" << \n   update_statement.numRowsAffected();\n}\n```", "```cpp\n./dbBasics.app/Contents/MacOS/dbBasics\nDatabase connection established !\n\"Jude\"  -  \"Sidle\"  -  \"+14495849555\"\n\"Brass\"  -  \"Jim\"  -  \"+144758849555\"\nNumber of rows affected:  1\nNumber of rows affected:  0\n```", "```cpp\n#include <QtSql>\n#include <QDebug>\n/*\nint main(int argc, char *argv[])\n{\n   // Setup db connection\n   QSqlDatabase db_conn =\n           QSqlDatabase::addDatabase(\"QMYSQL\", \"contact_db\");\n   db_conn.setHostName(\"127.0.0.1\");\n   db_conn.setDatabaseName(\"contact_db\");\n   db_conn.setUserName(\"root\");\n   db_conn.setPassword(\"\");\n   db_conn.setPort(3306);\n   // Error checks\n   if (!db_conn.open()) {\n       qDebug() << db_conn.lastError(); return 1;\n   }\n   // Use Database model\n   QSqlTableModel *contactsTableModel = new QSqlTableModel(0, db_conn);\n   contactsTableModel->setTable(\"contacts\");\n   contactsTableModel->select();\n   for (int i = 0; i < contactsTableModel->rowCount(); ++i) {\n       QSqlRecord record = contactsTableModel->record(i);\n       QString id = record.value(\"id\").toString();\n       QString last_name = record.value(\"last_name\").toString();\n       QString first_name = record.value(\"first_name\").toString();\n       QString phone_number = record.value(\"phone_number\").toString();\n       qDebug() << id  << \" : \" << first_name << \" : \" << last_name << \" : \" << phone_number;\n   }\n   // Insert Row\n   int row = contactsTableModel->rowCount();\n   contactsTableModel->insertRows(row, 1);\n   contactsTableModel->setData(contactsTableModel->index(row, 1), \"Stokes\");\n   contactsTableModel->setData(contactsTableModel->index(row, 2), \"Nick\");\n   contactsTableModel->setData(contactsTableModel->index(row, 3), \"+443569948\");\n   contactsTableModel->submitAll();\n   // Custom filter\n   qDebug() << \"\\nCustom filter: \\n\";\n   contactsTableModel->setFilter(\"id=12 AND last_name like'Stokes'\");\n   contactsTableModel->select();\n   for (int i = 0; i < contactsTableModel->rowCount(); ++i) {\n       QSqlRecord record = contactsTableModel->record(i);\n       QString id = record.value(\"id\").toString();\n       QString last_name = record.value(\"last_name\").toString();\n       QString first_name = record.value(\"first_name\").toString();\n       QString phone_number = record.value(\"phone_number\").toString();\n       qDebug() << id  << \" : \" << first_name << \" : \" << last_name << \" : \" << phone_number;\n   }\n}\n```", "```cpp\nfor (int i = 0; i < contactsTableModel->rowCount(); ++i) {\n   QSqlRecord record = contactsTableModel->record(i);\n   QString id = record.value(\"id\").toString();\n   QString last_name = record.value(\"last_name\").toString();\n   QString first_name = record.value(\"first_name\").toString();\n   QString phone_number = record.value(\"phone_number\").toString();\n   qDebug() << id  << \" : \" << first_name << \" : \" << last_name << \" : \" << phone_number;\n}\n```", "```cpp\n// Insert Row\nint row = contactsTableModel->rowCount();\ncontactsTableModel->insertRows(row, 1);\ncontactsTableModel->setData(contactsTableModel->index(row, 1), \"Stokes\");\ncontactsTableModel->setData(contactsTableModel->index(row, 2), \"Nick\");\ncontactsTableModel->setData(contactsTableModel->index(row, 3), \"+443569948\");\ncontactsTableModel->submitAll();\n```", "```cpp\n// Custom filter\nqDebug() << \"\\nCustom filter: \\n\";\ncontactsTableModel->setFilter(\"id=12 AND last_name like 'Stokes'\");\ncontactsTableModel->select();\n```", "```cpp\n% qmake -project\n```", "```cpp\nQT += sql widgets\n```", "```cpp\n% qmake\n% make\n% ./executable_file\n```", "```cpp\n#include <QApplication>\n#include <QtSql>\n#include <QVBoxLayout>\n#include <QPushButton>\n#include <QDebug>\n#include <Qt>\n#include <QTableView>\n#include <QHeaderView>\nint main(int argc, char *argv[])\n{\n   QApplication app(argc, argv);\n   // Setup db connection\n   QSqlDatabase db_conn =\n           QSqlDatabase::addDatabase(\"QMYSQL\", \"contact_db\");\n   db_conn.setHostName(\"127.0.0.1\");\n   db_conn.setDatabaseName(\"contact_db\");\n   db_conn.setUserName(\"root\");\n   db_conn.setPassword(\"\");\n   db_conn.setPort(3306);\n   // Error checks\n   if (!db_conn.open()) {\n       qDebug() << db_conn.lastError(); return 1;\n   }\n```", "```cpp\nenum {\n   ID = 0,\n   LastName = 1,\n   FirstName = 2,\n   PhoneNumber = 3,\n};\nQSqlTableModel *contactsTableModel = new QSqlTableModel(0, db_conn);\ncontactsTableModel->setTable(\"contacts\");\ncontactsTableModel->select();\ncontactsTableModel->setHeaderData(ID, Qt::Horizontal, QObject::tr(\"ID\"));\ncontactsTableModel->setHeaderData(LastName, Qt::Horizontal, QObject::tr(\"Last Name\"));\ncontactsTableModel->setHeaderData(FirstName, Qt::Horizontal, QObject::tr(\"First Name\"));\ncontactsTableModel->setHeaderData(PhoneNumber, Qt::Horizontal, QObject::tr(\"Phone Number\"));\ncontactsTableModel->setEditStrategy(\n       QSqlTableModel::OnManualSubmit);\n```", "```cpp\ncontactsTableModel->setEditStrategy(\n       QSqlTableModel::OnManualSubmit);\n```", "```cpp\n//contactsTableModel->setEditStrategy(\n//        QSqlTableModel::OnRowChange);\n```", "```cpp\n//contactsTableModel->setEditStrategy(\n//        QSqlTableModel::OnRowChange);\n// continue from here ...\nQTableView *contactsTableView = new QTableView();\ncontactsTableView->setModel(contactsTableModel);\ncontactsTableView->setSelectionMode(QAbstractItemView::SingleSelection);\ncontactsTableView->setSelectionBehavior(QAbstractItemView::SelectRows);\nQHeaderView *header = contactsTableView->horizontalHeader();\nheader->setStretchLastSection(true);\n```", "```cpp\nQHeaderView *header = contactsTableView->horizontalHeader();\nheader->setStretchLastSection(true);\n```", "```cpp\nQWidget window;\nQVBoxLayout *layout = new QVBoxLayout();\nQPushButton *saveToDbPushButton = new QPushButton(\"Save Changes\");\nlayout->addWidget(contactsTableView);\nlayout->addWidget(saveToDbPushButton);\n```", "```cpp\n   QObject::connect(saveToDbPushButton, SIGNAL(clicked()), contactsTableModel, SLOT(submitAll()));\n window.setLayout(layout);\n window.show();\n return app.exec();\n}\n```", "```cpp\n% qmake -project\n```", "```cpp\nQT += widgets sql\n```", "```cpp\n% qmake\n% make\n% ./name_of_executable\n```"]