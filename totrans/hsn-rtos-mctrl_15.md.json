["```cpp\nDRIVERS\\STM32F7XX_HAL_DRIVER\\\n|--Inc\n|    |stm32f7xx_ll_usb.h\n|--Src\n     |stm32f7xx_ll_usb.c\n```", "```cpp\nMIDDLEWARE\\ST\\\n|--STM32_USB_Device_Library\n    |----Class\n    | |----CDC\n    |     |----Inc\n    |         | usbd_cdc.h\n    | ----Src\n    | usbd_cdc.c\n    |----Core\n        |----Inc\n        |    usbd_core.h\n        |     usbd_ctlreq.h\n        |     usbd_def.h\n        |     usbd_ioreq.h\n        |----Src\n               usbd_core.c\n               usbd_ctlreq.c\n               usbd_ioreq.c\n```", "```cpp\nBSP\\\n    Nucleo_F767ZI_Init.c\n    Nucleo_F767ZI_Init.h\n    usbd_cdc_if.c\n    usbd_cdc_if.h\n    usbd_conf.c\n    usbd_conf.h\n    usbd_desc.c\n    usbd_desc.h\n    usb_device.c\n    usb_device.h\n```", "```cpp\nint main(void)\n{\n  HWInit();=\n MX_USB_DEVICE_Init();\n```", "```cpp\nvoid usbPrintOutTask( void* NotUsed)\n{\n  while(1)\n  {\n    SEGGER_SYSVIEW_PrintfHost(\"print test over USB\");\n CDC_Transmit_FS((uint8_t*)\"test\\n\", 5);\n    SEGGER_SYSVIEW_PrintfHost(\"print message over USB\");\n CDC_Transmit_FS((uint8_t*)\"message\\n\", 8);\n    vTaskDelay(100);\n  }\n}\n```", "```cpp\n  uint8_t result = USBD_OK;\n  /* USER CODE BEGIN 7 */\n USBD_CDC_HandleTypeDef *hcdc =\n (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData\n\n if (hcdc->TxState != 0){\n return USBD_BUSY;\n }\n  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);\n  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);\n  /* USER CODE END 7 */\n  return result;\n```", "```cpp\nint count = 10;\nwhile(count > 0){\n    count--;\n      if(CDC_Transmit_FS((uint8_t*)\"test\\n\", 5) == USBD_OK)\n        break;\n      else\n        vTaskDelay(2);\n}\n```", "```cpp\ntypedef struct\n{\n  uint32_t data[CDC_DATA_HS_MAX_PACKET_SIZE / 4U]; /* Force 32bits\n                                                      alignment */\n  uint8_t CmdOpCode;\n  uint8_t CmdLength;\n  uint8_t *RxBuffer;\n  uint8_t *TxBuffer;\n  uint32_t RxLength;\n  uint32_t TxLength;\n  //adding a function pointer for an optional call back function\n //when transmission is complete\n void (*TxCallBack)( void );\n  __IO uint32_t TxState;\n  __IO uint32_t RxState;\n}\nUSBD_CDC_HandleTypeDef;\n```", "```cpp\n    }\n    else\n    {\n      hcdc->TxState = 0U;\n      if(hcdc->TxCallBack != NULL)\n {\n hcdc->TxCallBack();\n }\n    }\n    return USBD_OK;\n  }\n```", "```cpp\nint32_t TransmitUsbDataLossy(uint8_t const* Buff, uint16_t Len)\n{\n  int32_t numBytesCopied = xStreamBufferSendFromISR( txStream, Buff, Len,\n                                                                   NULL);\n  return numBytesCopied;\n}\n```", "```cpp\nint32_t TransmitUsbData(uint8_t const* Buff, uint16_t Len)\n{\n  int32_t numBytesCopied = xStreamBufferSend( txStream, Buff, Len, 1);\n  if(numBytesCopied != Len)\n  {\n    numBytesCopied += xStreamBufferSend( txStream, Buff+numBytesCopied,\n                                                Len-numBytesCopied, 1);\n  }\n  return numBytesCopied;\n}\n```", "```cpp\nvoid VirtualCommInit( void )\n{\n  BaseType_t retVal;\n  MX_USB_DEVICE_Init();\n  txStream = xStreamBufferCreate( txBuffLen, 1);\n  assert_param( txStream != NULL);\n  retVal = xTaskCreate(usbTask, \"usbTask\", 1024, NULL,\n             configMAX_PRIORITIES, &usbTaskHandle);\n  assert_param(retVal == pdPASS);\n}\n```", "```cpp\n  USBD_CDC_HandleTypeDef *hcdc = NULL;\n\n  while(hcdc == NULL)\n  {\n    hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;\n    vTaskDelay(10);\n  }\n```", "```cpp\n  if (hcdc->TxState == 0)\n  {\n    xTaskNotify( usbTaskHandle, 1, eSetValueWithOverwrite);\n  }\n  ulTaskNotifyTake( pdTRUE, portMAX_DELAY );\n```", "```cpp\nhcdc->TxCallBack = usbTxComplete;\n```", "```cpp\nvoid usbTxComplete( void )\n{\n  portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;\n  xTaskNotifyFromISR( usbTaskHandle, 1, eSetValueWithOverwrite,\n                                    &xHigherPriorityTaskWoken);\n  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);\n}\n```", "```cpp\nwhile(1)\n  {\n    SEGGER_SYSVIEW_PrintfHost(\"waiting for txStream\");\n    uint8_t numBytes = xStreamBufferReceive( txStream, usbTxBuff,\n                                       txBuffLen, portMAX_DELAY);\n    if(numBytes > 0)\n    {\n      SEGGER_SYSVIEW_PrintfHost(\"pulled %d bytes from txStream\",\n                                                      numBytes);\n      USBD_CDC_SetTxBuffer(&hUsbDeviceFS, usbTxBuff, numBytes);\n      USBD_CDC_TransmitPacket(&hUsbDeviceFS);\n      ulTaskNotifyTake( pdTRUE, portMAX_DELAY );\n      SEGGER_SYSVIEW_PrintfHost(\"tx complete\");\n    }\n  }\n\n```", "```cpp\nint main(void)\n{\n  HWInit();\n VirtualCommInit();\n```", "```cpp\nvoid usbPrintOutTask( void* NotUsed)\n{\n  const uint8_t testString[] = \"test\\n\";\n  const uint8_t messageString[] = \"message\\n\";\n\n  while(1)\n  {\n    SEGGER_SYSVIEW_PrintfHost(\"add \\\"test\\\" to txStream\");\n    TransmitUsbDataLossy(testString, sizeof(testString));\n    SEGGER_SYSVIEW_PrintfHost(\"add \\\"message\\\" to txStream\");\n    TransmitUsbDataLossy(messageString, sizeof(messageString));\n    vTaskDelay(2);\n  }\n}\n```", "```cpp\nvoid VirtualCommInit( void )\n{\n  MX_USB_DEVICE_Init();\n txStream = xStreamBufferCreate( txBuffLen, 500);\n```", "```cpp\nuint8_t numBytes = xStreamBufferReceive( txStream, usbTxBuff,\n                                             txBuffLen, 100);\n```", "```cpp\n#define txBuffLen 2048\nuint8_t vcom_usbTxBuff[txBuffLen];\nStreamBufferHandle_t vcom_txStream = NULL;\nTaskHandle_t vcom_usbTaskHandle = NULL;\nSemaphoreHandle_t vcom_mutexPtr = NULL;\n```", "```cpp\nvcom_mutexPtr = xSemaphoreCreateMutex();\nassert_param(vcom_mutexPtr != NULL);\n```", "```cpp\nint32_t TransmitUsbData(uint8_t const* Buff, uint16_t Len, int32_t DelayMs)\n```", "```cpp\nconst uint32_t delayTicks = DelayMs / portTICK_PERIOD_MS;\nconst uint32_t startingTime = xTaskGetTickCount();\nuint32_t endingTime = startingTime + delayTicks;\n```", "```cpp\n  if(xSemaphoreTake(vcom_mutexPtr, delayTicks ) == pdPASS)\n  {\n    uint32_t remainingTime = endingTime - xTaskGetTickCount();\n    numBytesCopied = xStreamBufferSend( vcom_txStream, Buff, Len,\n remainingTime);\n\n    if(numBytesCopied != Len)\n    {\n      remainingTime = endingTime - xTaskGetTickCount();\n      numBytesCopied += xStreamBufferSend(  vcom_txStream, \n                                            Buff+numBytesCopied, \n                                            Len-numBytesCopied,\n remainingTime);\n    }\n\n    xSemaphoreGive(vcom_mutexPtr);\n  }\n```", "```cpp\nvoid usbPrintOutTask( void* Number)\n{\n#define TESTSIZE 10\n  char testString[TESTSIZE];\n  memset(testString, 0, TESTSIZE);\n  snprintf(testString, TESTSIZE, \"task %i\\n\", (int) Number);\n  while(1)\n {\n TransmitUsbData((uint8_t*)testString, sizeof(testString), 100);\n vTaskDelay(2);\n }\n}\n\n```", "```cpp\nretVal = xTaskCreate(   usbPrintOutTask, \"usbprint1\", \n                        STACK_SIZE, (void*)1, tskIDLE_PRIORITY + 2, \n                        NULL);\nassert_param( retVal == pdPASS);\nretVal = xTaskCreate(    usbPrintOutTask, \"usbprint2\", \n                         STACK_SIZE, (void*)2, tskIDLE_PRIORITY + \n                         2, \n                         NULL);\nassert_param( retVal == pdPASS);\n```"]