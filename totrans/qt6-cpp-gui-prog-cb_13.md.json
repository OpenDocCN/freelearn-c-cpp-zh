["```cpp\n    QT += core gui mainwindow.ui and remove the menuBar, mainToolBar, and statusBar objects, as we don’t need those in this project:\n    ```", "```cpp\n    #include <QtWebEngineWidgets/QtWebEngineWidgets>\n    ```", "```cpp\n    public:\n        explicit MainWindow(QWidget *parent = 0);\n        ~MainWindow();\n        loading() to mainwindow.h:\n\n    ```", "```cpp\n\n    ```", "```cpp\n    private:\n        Ui::MainWindow *ui;\n        QWebEngineView* webview;\n    ```", "```cpp\n    MainWindow::MainWindow(QWidget *parent) :\n        QMainWindow(parent),\n        ui(new Ui::MainWindow)\n    {\n        ui->setupUi(this);\n        webview = new QWebEngineView;\n        ui->horizontalLayout_2->addWidget(webview);\n        connect(webview, &QWebEngineView::loadProgress, this,\n    &MainWindow::loading);\n    }\n    ```", "```cpp\n    void MainWindow::loadUrl() {\n        QUrl url = QUrl(ui->address->text());\n        url.setScheme(\"http\");\n        webview->page()->load(url);\n    }\n    ```", "```cpp\n    void MainWindow::on_goButton_clicked() {\n        loadUrl();\n    }\n    MainWindow::on_address_returnPressed() {\n        loadUrl();\n    }\n    ```", "```cpp\n    void MainWindow::on_backButton_clicked() {\n        webview->back();\n    }\n    void MainWindow::on_forwardButton_clicked() {\n        webview->forward();\n    }\n    ```", "```cpp\n    void MainWindow::loading(int progress) {\n        ui->progressBar->setValue(progress);\n    }\n    ```", "```cpp\n    <Img src=\"img/googlelogo_color_272x92dp.png\"></img>\n    <h1>Hello World!</h1>\n    <h3>This is our custom HTML page.</h3>\n    <script>alert(\"Hello!\");</script>\n    ```", "```cpp\n    #include <QMainWindow>\n    #include <QtWebEngineWidgets/QtWebEngineWidgets>\n    #include <QDebug>\n    mainwindow.h:\n\n    ```", "```cpp\n    MainWindow::MainWindow(QWidget *parent) :\n        QMainWindow(parent),\n        ui(new Ui::MainWindow)\n    {\n        ui->setupUi(this);\n        webview = new QWebEngineView;\n        ui->horizontalLayout_2->addWidget(webview);\n       //webview->page()->settings()->setAttribute(QWebEngineSettings::JavascriptEnabled, false);\n       //webview->page()->settings()->setAttribute(QWebEngineSettings::AutoLoadImages, false);\n       //QString fontFamily = webview->page()->settings()->fontFamily(QWebEngineSettings::SerifFont);\n        QString fontFamily = webview->page()->settings()->fontFamily(QWebEngineSettings::SansSerifFont);\n        int fontSize = webview->page()->settings()->fontSize(QWebEngineSettings::MinimumFontSize);\n        QFont myFont = QFont(fontFamily, fontSize);\n        webview:\n\n    ```", "```cpp\n\n    ```", "```cpp\n\n    ```", "```cpp\n    void MainWindow::loadUrl() {\n        QUrl url = QUrl(ui->address->text());\n        url.setScheme(\"http\");\n        webview->page()->load(url);\n    }\n    ```", "```cpp\n    void MainWindow::on_goButton_clicked() {\n        loadUrl();\n    }\n    void MainWindow::on_address_returnPressed() {\n        loadUrl();\n    }\n    void MainWindow::on_backButton_clicked() {\n        webview->back();\n    }\n    void MainWindow::on_forwardButton_clicked() {\n        webview->forward();\n    }\n    ```", "```cpp\n    void MainWindow::startLoading() {\n        ui->progressBar->show();\n    }\n    void MainWindow::loading(int progress) {\n        ui->progressBar->setValue(progress);\n    }\n    void MainWindow::loaded(bool ok) {\n        ui->progressBar->hide();\n    }\n    ```", "```cpp\n    void MainWindow::on_loadHtml_clicked() {\n        webview->setHtml(ui->source->toPlainText());\n    }\n    ```", "```cpp\n    QT += core gui webenginewidgets\n    ```", "```cpp\n    #include <QtWebEngineWidgets/QWebEngineView>\n    ```", "```cpp\n    MainWindow::MainWindow(QWidget *parent) :\n        QMainWindow(parent),\n        ui(new Ui::MainWindow)\n    {\n        ui->setupUi(this);\n        QWebEngineView* webview = new QWebEngineView;\n        QUrl url = QUrl(\"qrc:/map.html\");\n        webview->page()->load(url);\n        ui->verticalLayout->addWidget(webview);\n    }\n    ```", "```cpp\n    <!DOCTYPE html>\n    <html>\n      <head>\n      </head>\n      <body ondragstart=\"return false\">\n      </body>\n    </html>\n    ```", "```cpp\n      <body ondragstart=\"return false\">\n        <div id=\"map-canvas\" />\n      </body>\n    ```", "```cpp\n        <meta name=\"viewport\" content=\"initial-scale=1.0, userscalable=no\" />\n        <style type=\"text/css\">\n        html { height: 100% }\n        body { height: 100%; margin: 0; padding: 0 }\n        #map-canvas { height: 100% }\n        </style>\n        <script type=\"text/javascript\" src=\"img/js?key=YOUR_KEY_HERE&libraries=drawing\"></script>\n    ```", "```cpp\n        <script type=\"text/javascript\">\n            var map;\n            function initialize() {\n    // Add map\n                var mapOptions =\n                {\n                    center: new google.maps.LatLng(40.705311, -74.2581939), zoom: 6\n                };\n                map = new google.maps.Map(document.getElementById(\"mapcanvas\"),mapOptions);\n    // Add event listener\n                google.maps.event.addListener(map, 'zoom_changed',\n       function() {\n           //alert(map.getZoom());\n                });\n    ```", "```cpp\n    // Add marker\n                var marker = new google.maps.Marker({\n                    position: new google.maps.LatLng(40.705311, -74.2581939),\n                    map: map,\n                    title: \"Marker A\",\n    });\n                google.maps.event.addListener (marker, 'click', function()\n                {\n                    map.panTo(marker.getPosition());\n                });\n                marker.setMap(map);\n    ```", "```cpp\n    // Add polyline\n                var points = [ new google.maps.LatLng(39.8543, -73.2183), new google.maps.LatLng(41.705311, -75.2581939), new google.maps.LatLng(40.62388, -75.5483) ];\n                var polyOptions = {\n                path: points,\n                strokeColor: '#FF0000',\n                strokeOpacity: 1.0,\n                strokeWeight: 2\n                };\n                historyPolyline = new google.maps.Polyline(polyOptions);\n                historyPolyline.setMap(map);\n    ```", "```cpp\n    // Add polygon\n                var points = [ new google.maps.LatLng(37.314166, -75.432), new google.maps.LatLng(40.2653, -74.4325), new google.maps.LatLng(38.8288, -76.5483) ];\n                    var polygon = new google.maps.Polygon({\n                    paths: points,\n                    fillColor: '#000000',\n                    fillOpacity: 0.2,\n                    strokeWeight: 3,\n                    strokeColor: '#fff000',\n                });\n                polygon.setMap(map);\n    ```", "```cpp\n    // Setup drawing manager\n                var drawingManager = new google.maps.drawing.DrawingManager();\n                drawingManager.setMap(map);\n            }\n            google.maps.event.addDomListener(window, 'load', initialize);\n        </script>\n    ```", "```cpp\n    QT += core gui mainwindow.ui and delete the mainToolBar, menuBar, and statusBar objects, as we don’t need any of these in this example program.\n    ```", "```cpp\n    font: 75 26pt \"MS Shell Dlg 2\";\n    ```", "```cpp\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <script src=\"img/qwebchannel.js\"></script>\n        <script src=\"img/jquery.min.js\"></script>\n        <script src=\"img/bootstrap.js\"></script>\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"css/bootstrap.css\">\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"css/fontawesome.css\">\n    </head>\n    <body>\n    </body>\n    </html>\n    ```", "```cpp\n    <script>\n        $(document).ready(function()\n        {\n            new QWebChannel(qt.webChannelTransport,\n    function(channel)\n            {\n                mainWindow = channel.objects.mainWindow;\n            });\n            $(\"#login\").click(function(e) {\n                e.preventDefault();\n                var user = $(\"#username\").val();\n                var pass = $(\"#password\").val();\n                mainWindow.showLoginInfo(user, pass);\n            });\n    ```", "```cpp\n            $(\"#changeText\").click(function(e)\n            {\n                e.preventDefault();\n                mainWindow.changeQtText(\"Good bye!\");\n            });\n        });\n    </script>\n    ```", "```cpp\n        <div class=\"container-fluid\">\n            <form id=\"example-form\" action=\"#\" class=\"container-fluid\">\n                <div class=\"form-group\">\n                    <div class=\"col-md-12\"><h3>Call C++ Function from Javascript</h3></div>\n                    <div class=\"col-md-12\">\n                    <div class=\"alert alert-info\" role=\"alert\"><i class=\"fa fa-info-circle\"></i>\n                <span id=\"infotext\">Click \"Login\" to send username and password variables to C++. Click \"Change Cpp Text\" to change the text label on Qt GUI.</span>\n                </div>\n                </div>\n    ```", "```cpp\n                <div class=\"col-md-12\"><label>Username:</label><input id=\"username\" type=\"text\"><p />\n                </div>\n                <div class=\"col-md-12\">\n                <label>Password:</label> <input id=\"password\" type=\"password\"><p />\n                </div>\n                <div class=\"col-md-12\">\n                <button id=\"login\" class=\"btn btn-success\" type=\"button\"><i class=\"fa fa-check\"></i> Login</button>\n                <button id=\"changeText\" class=\"btn btn-primary\" type=\"button\">\n                <i class=\"fa fa-pencil\"></i> Change Cpp Text</button>\n                </div>\n            </div>\n        </form>\n    </div>\n    ```", "```cpp\n    public:\n        explicit MainWindow(QWidget *parent = 0);\n        ~MainWindow();\n        Q_INVOKABLE void changeQtText(QString newText);\n        mainwindow.cpp and add the following headers to the top of the source code:\n\n    ```", "```cpp\n\n    ```", "```cpp\n    MainWindow::MainWindow(QWidget *parent) :\n        QMainWindow(parent),\n        ui(new Ui::MainWindow)\n    {\n        qputenv(\"QTWEBENGINE_REMOTE_DEBUGGING\", \"1234\");\n        ui->setupUi(this);\n        QWebEngineView* webview = new QWebEngineView();\n        ui->verticalLayout->addWidget(webview);\n        QWebChannel* webChannel = new QWebChannel();\n        webChannel->registerObject(\"mainWindow\", this);\n        webview->page()->setWebChannel(webChannel);\n        webview->page()->load(QUrl(\"qrc:///html/test.html\"));\n    }\n    ```", "```cpp\n    void MainWindow::changeQtText(QString newText) {\n        ui->label->setText(newText);\n    }\n    void MainWindow::showLoginInfo(QString user, QString pass) {\n        QMessageBox::information(this, \"Login info\", \"Username is \" + user + \" and password is \" + pass);\n    }\n    ```", "```cpp\n<script src=\"img/qwebchannel.js\"></script>\n```", "```cpp\nQWebChannel* webChannel = new QWebChannel();\nwebChannel->registerObject(\"mainWindow\", this);\nwebview->page()->setWebChannel(webChannel);\n```", "```cpp\nnew QWebChannel(qt.webChannelTransport, function(channel) {\nmainWindow = channel.objects.mainWindow;\n});\n```", "```cpp\nqputenv(\"QTWEBENGINE_REMOTE_DEBUGGING\", \"1234\");\n```", "```cpp\nQ_INVOKABLE void changeQtText(QString newText);\n```", "```cpp\n    #include <QtWebEngineWidgets/QWebEngineView>\n    #include <QtWebChannel/QWebChannel>\n    #include <QMessageBox>\n    ```", "```cpp\n    public:\n        explicit MainWindow(QWidget *parent = 0);\n        ~MainWindow();\n        mainwindow.cpp and add the following code to the MainWindow constructor:\n\n    ```", "```cpp\n\n    ```", "```cpp\n    void MainWindow::on_changeHtmlTextButton_clicked() {\n        webview->page()->runJavaScript(\"changeHtmlText('Text has been replaced by C++!');\");\n    }\n    void MainWindow::on_playUIAnimationButton_clicked() {\n        webview->page()->runJavaScript(\"startAnim();\");\n    }\n    ```", "```cpp\n    <!DOCTYPE html>\n    <html>\n      <head>\n        <script src=\"img/qwebchannel.js\"></script>\n        <script src=\"img/jquery.min.js\"></script>\n        <script src=\"img/bootstrap.js\"></script>\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"css/bootstrap.css\">\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"css/fontawesome.css\">\n      </head>\n    <body>\n    </body>\n    </html>\n    ```", "```cpp\n        <script>\n          $(document).ready(function()\n          {\n            $(\"#tux\").css({ opacity:0, width:\"0%\", height:\"0%\" });\n            $(\"#listgroup\").hide();\n            $(\"#listgroup2\").hide();\n            new QWebChannel(qt.webChannelTransport,\n      function(channel)\n            {\n              mainWindow = channel.objects.mainWindow;\n            });\n          });\n          function changeHtmlText(newText)\n          {\n            $(\"#infotext\").html(newText);\n          }\n    ```", "```cpp\n          function startAnim() {\n          // Reset\n            $(\"#tux\").css({ opacity:0, width:\"0%\", height:\"0%\" });\n            $(\"#listgroup\").hide();\n            $(\"#listgroup2\").hide();\n            $(\"#tux\").animate({ opacity:1.0, width:\"100%\",\n    height:\"100%\" }, 1000, function()\n            {\n    // tux animation complete\n              $(\"#listgroup\").slideDown(1000, function() {\n              // listgroup animation complete\n                $(\"#listgroup2\").fadeIn(1500);\n              });\n            });\n        }\n    </script>\n    ```", "```cpp\n      <div class=\"container-fluid\">\n        <form id=\"example-form\" action=\"#\" class=\"container-fluid\">\n          <div class=\"form-group\">\n          <div class=\"col-md-12\"><h3>Call Javascript Function from C++</h3></div>\n          <div class=\"col-md-12\">\n          <div class=\"alert alert-info\" role=\"alert\"><i class=\"fa fa-info-circle\"></i> <span id=\"infotext\"> Change this text using C++.</span></div>\n          </div>\n          <div class=\"col-md-2\">\n            <img id=\"tux\" src=\"img/tux.png\"></img>\n          </div>\n    ```", "```cpp\n          <div class=\"col-md-5\">\n            <ul id=\"listgroup\" class=\"list-group\">\n            <li class=\"list-group-item\">Cras justoodio</li>\n            <li class=\"list-group-item\">Dapibus acfacilisis in</li>\n            <li class=\"list-group-item\">Morbi leorisus</li>\n            <li class=\"list-group-item\">Porta acconsectetur ac</li>\n            <li class=\"list-group-item\">Vestibulum ateros</li>\n            </ul>\n          </div>\n          <div id=\"listgroup2\" class=\"col-md-5\">\n            <a href=\"#\" class=\"list-group-item active\">\n            <h4 class=\"list-group-item-heading\">Item heading</h4>\n            <p class=\"list-group-item-text\">Cras justo odio</p>\n            </a>\n    ```", "```cpp\n            <a href=\"#\" class=\"list-group-item\">\n              <h4 class=\"list-group-item-heading\">Item heading</h4>\n              <p class=\"list-group-item-text\">Dapibus ac facilisis in</p>\n            </a>\n            <a href=\"#\" class=\"list-group-item\">\n              <h4 class=\"list-group-item-heading\">Item heading</h4>\n              <p class=\"list-group-item-text\">Morbi leo risus</p>\n            </a>\n          </div>\n        </div>\n      </form>\n    </div>\n    ```"]