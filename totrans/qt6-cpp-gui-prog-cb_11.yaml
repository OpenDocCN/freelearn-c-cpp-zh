- en: '11'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Conversion Library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Data kept within our computer environment is encoded in a variety of ways. Sometimes,
    it can be used directly for a certain purpose; other times, it needs to be converted
    into another format in order to fit the context of the task. The process of converting
    data from one format into another also varies depending on the source format as
    well as the target format.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, the process can be very complex, especially when dealing with data
    that is feature-rich and sensitive, such as image or video conversion. Even a
    small error during the conversion process may render a file unusable.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Converting data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Converting images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Converting videos
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Converting currency
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The technical requirements for this chapter include Qt 6.6.1 MinGW-64-bit and
    Qt Creator 12.0.2\. All the code used in this chapter can be downloaded from the
    following GitHub repository: [https://github.com/PacktPublishing/QT6-C-GUI-Programming-Cookbook---Third-Edition-/tree/main/Chapter11](https://github.com/PacktPublishing/QT6-C-GUI-Programming-Cookbook---Third-Edition-/tree/main/Chapter11).'
  prefs: []
  type: TYPE_NORMAL
- en: Converting data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Qt provides a set of classes and functions for easily converting between different
    types of data. This makes Qt more than just a GUI library; it is a complete platform
    for software development. The `QVariant` class, which we will use in the following
    example, makes Qt even more flexible and powerful compared to the similar conversion
    functionalities provided by the C++ standard library.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s learn how to convert various data types in Qt by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open **Qt Creator** and create a new **Qt Console Application** project by
    going to **File** | **New Project…**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.1 – Create a Qt Console Application project](img/B20976_11_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.1 – Create a Qt Console Application project
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `main.cpp` and add the following headers to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: int numberA = 2;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: QString numberB = "5";
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: qDebug() << "1) " << "2 + 5 =" << numberA + numberB.toInt();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Convert the number back into a string:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let’s see how to round down a value using `qFloor()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Using `qCeil()`, we are able to round down a number to the smallest integral
    value not smaller than its initial value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a date-time variable by converting it from a piece of date-time data
    written in the string format:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Convert the date-time variable back into a string with our custom format:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Call the `QString::toUpper()` function to convert a string variable into all
    capital letters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Calling `QString::toLower()` will convert the string completely into lowercase:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `QVariant` class provided by Qt is a very powerful data type that can be
    easily converted to other types without any effort from the programmer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This demonstrates how a single `QVariant` variable can be simultaneously converted
    to multiple data types without any effort from the programmer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The full source code in `main.cpp` will now look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After that, let’s add code to convert a string into a number, and vice versa:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Write the code to convert floating-point numbers to their nearest succeeding
    or preceding integer number, respectively:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Convert a string into the date-time format, and vice versa:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Continue to add code to convert strings into uppercase or lowercase characters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Convert the `QVariant` data type into other types:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Convert the `QVariant` data type into `QDateTime` and `QString`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Compile and run the project, and you should see something like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.2 – Printing the conversion results on the application output window](img/B20976_11_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.2 – Printing the conversion results on the application output window
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All the data types provided by Qt, such as `QString`, `QDateTime`, and `QVariant`,
    contain functions that make conversion to other types easy and straightforward.
    Qt also provides its own object conversion function, `qobject_cast()`, which doesn’t
    rely on the standard library. It is also more compatible with Qt and works well
    to convert between Qt’s widget types and data types.
  prefs: []
  type: TYPE_NORMAL
- en: Qt also provides you with the `QtMath` class, which helps you to manipulate
    number variables, such as rounding up a floating-point number or converting an
    angle from degrees to radians. `QVariant` is a special class that can be used
    to store data of all kinds of types, such as `int`, `float`, `char`, and `string`.
    It can automatically determine the data type by examining the value stored in
    the variable. You can also easily convert the data into any of the types supported
    by the `QVariant` class by just calling a single function, such as `toFloat()`,
    `toInt()`, `toBool()`, `toChar()`, or `toString()`.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Be aware that each of these conversions takes computing power. Even though modern
    computers are extremely fast at handling these operations, you should be careful
    not to overdo it with a large quantity at once. If you’re converting a large set
    of variables for complex calculations, it might slow down your computer significantly,
    so try to convert variables only when necessary.
  prefs: []
  type: TYPE_NORMAL
- en: Converting images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will learn how to build a simple image converter that converts
    an image from one format into another. Qt supports reading and writing different
    types of image formats, and this support comes in the form of external DLL files
    due to licensing issues.
  prefs: []
  type: TYPE_NORMAL
- en: However, you don’t have to worry about that because as long as you include those
    DLL files in your project, it will work seamlessly across different formats. There
    are certain formats that only support reading and not writing, and some that support
    both.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You can check out the full details about converting images at [http://doc.qt.io/qt-6/qtimageformats-index.html](http://doc.qt.io/qt-6/qtimageformats-index.html).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Qt’s built-in image libraries make image conversion really simple:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Qt Creator and create a new **Qt Widgets** **Application** project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `mainwindow.ui` and add a line edit and push button to the canvas to select
    image files, a combo box to select the desired file format, and another push button
    to start the conversion process:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.3 – Lay out the UI as shown here](img/B20976_11_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.3 – Lay out the UI as shown here
  prefs: []
  type: TYPE_NORMAL
- en: 'Double-click the combobox, and a window will then appear where you can edit
    the box. We will add three items to the combobox list by clicking the `PNG`, `JPEG`,
    and `BMP`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.4 – Adding three options to the combobox](img/B20976_11_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.4 – Adding three options to the combobox
  prefs: []
  type: TYPE_NORMAL
- en: 'Right-click on one of the push buttons, select **Go to slot…**, and then click
    the **OK** button. A slot function will be automatically added to your source
    files. Repeat this step for the other push button as well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.5 – Select the clicked() signal and press OK](img/B20976_11_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.5 – Select the clicked() signal and press OK
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s move over to the source code. Open `mainwindow.h` and add the following
    header:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: void MainWindow::on_browseButton_clicked() {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: QString fileName = QFileDialog::getOpenFileName(this, "Open Image", "", "Image
    Files (*.png *.jpg *.bmp)");
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ui->filePath->setText(fileName);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define what will happen when the **Convert** button is clicked:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check which format is used:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check whether the image has been converted:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Display the message boxes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Build and run the program now, and we should get a pretty simple image converter
    that looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.6 – Browse an image, select a format, and press the Convert button](img/B20976_11_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.6 – Browse an image, select a format, and press the Convert button
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The previous example uses the native `QImage` class from Qt, which contains
    functions that can access pixel data and manipulate it. It is also used to load
    an image file and extract its data through different decompression methods, depending
    on the format of the image.
  prefs: []
  type: TYPE_NORMAL
- en: Once the data is extracted, you can do anything you want with it, such as display
    the image on screen, manipulate its color information, resize the image, or compress
    it with another format and save it as a file.
  prefs: []
  type: TYPE_NORMAL
- en: We used `QFileInfo` to separate the filename from the extension so that we could
    amend the extension name with the new format selected by the user from the combobox.
    This way, we can save the newly converted image in the same folder as the original
    image and automatically give it the same filename as well, except in a different
    format.
  prefs: []
  type: TYPE_NORMAL
- en: As long as you’re trying to convert the image to a format supported by Qt, you
    just need to call `QImage::save()`. Internally, Qt will figure out the rest for
    you and output the image to the chosen format. In the `QImage::save()` function,
    there is a parameter that sets the image quality and another that sets the format.
    In this example, we just set both as the default values, which saves the image
    at the highest quality and lets Qt figure out the format by checking the extension
    stated in the output filename.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can also convert an image into a PDF using the `QPdfWriter` class provided
    by Qt. Essentially, you paint the selected image to the layout of a newly created
    PDF document and set its resolution accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For more information about the `QPdfWriter` class, visit [http://doc.qt.io/qt-6/qpdfwriter.html](http://doc.qt.io/qt-6/qpdfwriter.html).
  prefs: []
  type: TYPE_NORMAL
- en: Converting videos
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will create a simple video converter using Qt and `QProcess`
    class provided by Qt.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s make a simple video converter with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download `FFmpeg` (a static package) from [http://ffmpeg.zeranoe.com/builds](http://ffmpeg.zeranoe.com/builds)
    and extract the contents to your preferred location – for example, `C:/FFmpeg/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open Qt Creator and create a new **Qt Widgets Application** project by going
    to **File** | **New Project...**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `mainwindow.ui` – we’re going to work on the program’s user interface.
    Its UI is very similar to the previous example, except that we add an extra text-edit
    widget to the canvas, just under the combobox:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.7 – Design your video converter’s UI like this](img/B20976_11_007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.7 – Design your video converter’s UI like this
  prefs: []
  type: TYPE_NORMAL
- en: 'Double-click the combobox, and then a window will appear to edit the box. We
    will add three items to the combobox list by clicking the `AVI`, `MP4`, and `MOV`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.8 – Adding three video formats to the combobox](img/B20976_11_008.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.8 – Adding three video formats to the combobox
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on one of the push buttons, select **Go to slot…**, and then click
    the **OK** button. A slot function will then be automatically added to your source
    files. Repeat this step for the other push button as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `mainwindow.h` and add the following headers to the top:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'public:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: explicit MainWindow(QWidget *parent = 0);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ~MainWindow();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: QProcess* process;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: QString outputText;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: QString fileName;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: QString outputFileName;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add three extra slot functions under the two functions that Qt created for
    us previously in the *Converting* *images* recipe:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open `mainwindow.cpp` and add the following code to the class constructor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define what will happen when the **Browse** button is clicked, which in this
    case is opening up the file dialog to allow us to choose the video file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define what will happen if the `FFmpeg`, which will then handle the conversion
    process externally:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check for the file’s format – specifically, whether it’s `.avi`, `.mp4`, or
    `.mov`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the conversion using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Display the message boxes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Tell the program what to do when the conversion process has started:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Write the slot function that gets called during the conversion process whenever
    `FFmpeg` returns an output to the program:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the slot function that gets called when the entire conversion process
    has been completed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Build and run the project, and you should get a simple, yet workable, video
    converter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.9 – Your own video converter powered by FFmpeg and Qt](img/B20976_11_009.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.9 – Your own video converter powered by FFmpeg and Qt
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `QProcess` class provided by Qt is used to start external programs and communicate
    with them. In this case, we started `ffmpeg.exe`, located in `C:/FFmpeg/bin/`,
    as a process and started communicating with it. We also sent it a set of arguments
    to tell it what to do when it started. The arguments we used in this example are
    relatively basic – we only told `FFmpeg` the path to the source image and the
    output filename.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For more information regarding the argument settings available in `FFmpeg`,
    check out [www.ffmpeg.org/ffmpeg.html](http://www.ffmpeg.org/ffmpeg.html).
  prefs: []
  type: TYPE_NORMAL
- en: '`FFmpeg` does more than just convert video files. You can also use it to convert
    audio files and images.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For more information regarding all the formats supported by `FFmpeg`, check
    out [https://www.ffmpeg.org/general.html#File-Formats](https://www.ffmpeg.org/general.html#File-Formats).
  prefs: []
  type: TYPE_NORMAL
- en: Other than that, you can also play a video or audio file by running `ffplay.exe`,
    located in `C:/FFmpeg/bin`, or print out the information of the video or audio
    file in a human-readable fashion by running `ffprobe.exe`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Check out `FFmpeg's` full documentation at [https://www.ffmpeg.org/about.html](https://www.ffmpeg.org/about.html).
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are lots of things you can do using this method. You’re not limited to
    what Qt provides, and you can break out of such limitations by carefully selecting
    a third-party program that provides what you need. One such example is making
    your own antivirus GUI by utilizing the command-line-only antivirus scanners available
    on the market, such as **Avira ScanCL**, **Panda Antivirus Command Line Scanner**,
    **SAV32CLI**, and **ClamAV**. You can build your own GUI using Qt and essentially
    send commands to the antivirus process to tell it what to do.
  prefs: []
  type: TYPE_NORMAL
- en: Converting currency
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this example, we will learn how to create a simple currency converter using
    Qt, with the help of an external service provider called **Fixer.io**.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Make yourself a currency converter by following these simple steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Qt Creator and create a new **Qt Widgets Application** project from **File**
    | **New Project...**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the project file (`.pro`) and add the network module to our project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add three horizontal layouts, a horizontal line, and a push button to the canvas.
    Left-click on the canvas, and continue by clicking the `Convert`. The UI should
    look something like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.10 – Place three vertical layouts above the Convert button](img/B20976_11_010.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.10 – Place three vertical layouts above the Convert button
  prefs: []
  type: TYPE_NORMAL
- en: 'Add two labels to the top layout, and set the text of the left one to `From:`,
    followed by the right one to `To:`. Add two `1`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.11 – Add labels and Line Edit widgets to the layouts](img/B20976_11_011.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.11 – Add labels and Line Edit widgets to the layouts
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the line edit on the right and enable the **readOnly** checkbox located
    in the **Property** pane:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.12 – Enable the readOnly property for the second line edit](img/B20976_11_012.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.12 – Enable the readOnly property for the second line edit
  prefs: []
  type: TYPE_NORMAL
- en: 'Set the cursor property to **Forbidden** so that users know it’s not editable
    when hovering the mouse over the widget:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.13 – Display the Forbidden cursor to let users know it’s disabled](img/B20976_11_013.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.13 – Display the Forbidden cursor to let users know it’s disabled
  prefs: []
  type: TYPE_NORMAL
- en: 'Add two comboboxes to the third layout located at the bottom. We will leave
    them empty for now:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.14 – Add two comboboxes to the final layout](img/B20976_11_014.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.14 – Add two comboboxes to the final layout
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the `clicked()` signal as the selection and click `mainwindow.h`
    and `mainwindow.cpp`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `mainwindow.h` and make sure the following headers are added to the top
    of the source file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'private slots:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: void on_convertButton_clicked();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: void finished(QNetworkReply* reply);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add two variables under the `private` label:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `mainwindow.cpp` file. Add several currency short code to both comboboxes
    in the class constructor. Set a validator to the `finished()` signal to our `finished()`
    slot function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We continue from the previous code and insert the currency short forms into
    the comboboxes. Then, we declare a new network access manager and connect its
    finished signal to our custom slot function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define what will happen if the **Convert** button is clicked by the user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the request by calling `get()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define what will happen when the `finished()` signal is triggered:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Continue to write the code from the preceding code, as shown in the following
    snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Compile and run the project, and then you should get a simple currency converter
    that looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.15 – A usable currency converter is complete](img/B20976_11_015.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.15 – A usable currency converter is complete
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Similar to the previous example we saw, which uses an external program to achieve
    a specific task, this time we used an external service provider that provided
    us with an open **Application Programming Interface** (**API**) that is free for
    all and easy to use.
  prefs: []
  type: TYPE_NORMAL
- en: This way, we don’t have to think about the method used to retrieve the latest
    currency rate. Instead, the service provider has already done the job for us;
    we just have to send a polite request for it. Then, we wait for the response from
    their server and process the data according to our intended purposes.
  prefs: []
  type: TYPE_NORMAL
- en: There are quite a few different service providers you can choose from, besides
    Fixer.io ([http://fixer.io](http://fixer.io)). Some are free but come without
    any advanced features; some provide you with a premium price. Some of these alternatives
    are **Open Exchange Rates** ([https://openexchangerates.org](https://openexchangerates.org)),
    the **currencylayer API** ([https://currencylayer.com](https://currencylayer.com)),
    the **Currency API** ([https://currency-api.appspot.com](https://currency-api.appspot.com)),
    the **XE Currency Data API** ([http://www.xe.com/xecurrencydata](http://www.xe.com/xecurrencydata)),
    and **jsonrates** ([http://jsonrates.com](http://jsonrates.com)).
  prefs: []
  type: TYPE_NORMAL
- en: In the previous code, you should have noticed an access key being passed to
    the Fixer.io API, which is a free access key I registered for this tutorial. If
    you use it for your own project, you should create an account at Fixer.io.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Besides currency exchange rates, you can use this method to execute more advanced
    tasks that are perhaps too complicated to do by yourself, or are simply impossible
    to access unless you use the services provided by specialists, such as programmable
    **Short Message Service** (**SMS**) and voice services, web analytics and statistics
    generation, and online payment gateways. Most of these services are not free,
    but you can easily achieve those functions in minutes without even setting up
    the server infrastructure and backend system; it’s definitely the cheapest and
    fastest way to get your product up and running without much hassle.
  prefs: []
  type: TYPE_NORMAL
