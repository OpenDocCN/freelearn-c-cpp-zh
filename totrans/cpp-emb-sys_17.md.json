["```cpp\n#include <cstdint>\n#include <span>\nnamespace hal\n{\nclass uart\n{\n  public:\n    virtual void init(std::uint32_t baudrate) = 0;\n    virtual void write(std::span<const char> data) = 0;\n};\n}; // namespace hal \n```", "```cpp\n#include <span>\n#include <cstdint>\n#include <uart.hpp>\n#include <stm32f0xx_hal.h>\n#include <stm32f072xb.h>\nnamespace hal\n{\nclass uart_stm32 : public uart\n{\n  public:\n    uart_stm32(USART_TypeDef *inst);\n    void init(std::uint32_t baudrate = c_baudrate_default);\n    void write(std::span<const char> data) override;\n  private:\n    UART_HandleTypeDef huart_;\n    USART_TypeDef *instance_;\n    std::uint32_t baudrate_;\n    `static` constexpr std::uint32_t c_baudrate_default = 115200;\n};\n}; // namespace hal \n```", "```cpp\nhal::uart_stm32::uart_stm32(USART_TypeDef *inst): instance_(inst)\n{\n} \n```", "```cpp\nvoid hal::uart_stm32::init(std::uint32_t baudrate)\n{\n    huart_.Instance = instance_;\n    huart_.Init.BaudRate = baudrate;\n    huart_.Init.WordLength = UART_WORDLENGTH_8B;\n    huart_.Init.StopBits = UART_STOPBITS_1;\n    huart_.Init.Parity = UART_PARITY_NONE;\n    huart_.Init.Mode = UART_MODE_TX_RX;\n    huart_.Init.HwFlowCtl = UART_HWCONTROL_NONE;\n    huart_.Init.OverSampling = UART_OVERSAMPLING_16;\n    huart_.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;\n    huart_.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;\n    huart_.MspInitCallback = nullptr;\n    HAL_UART_Init(&huart_);\n} \n```", "```cpp\nvoid hal::uart_stm32::write(std::span<const char> data)\n{\n    // we must cast away constness due to ST HAL’s API\nchar * data_ptr = const_cast<char *>(data.data());\n    HAL_UART_Transmit(&huart_,\n                     reinterpret_cast<uint8_t *(data_ptr),\n                     data.size(),\n                     HAL_MAX_DELAY);\n} \n```", "```cpp\nclass gsm_lib{\n    public:\n        gsm_lib(hal::uart &u) : uart_(u) {}\n        // other methods\nprivate:\n        hal::uart &uart_;\n}; \n```", "```cpp\n`struct` uart_c_hal {\n    uart_c_hal() = delete;\n    static inline HAL_StatusTypeDef init(UART_HandleTypeDef *huart)\n    {\n        return HAL_UART_Init(huart);\n    }\n    static inline HAL_StatusTypeDef transmit(UART_HandleTypeDef *huart,\nuint8_t *pData,\nuint16_t Size,\nuint32_t Timeout)\n    {\n        return HAL_UART_Transmit(huart, pData, Size, Timeout);\n    }\n}; \n```", "```cpp\ntemplate <typename HalUart>\nclass uart_stm32 : public uart\n{\n  public:\n    uart_stm32(USART_TypeDef *inst) : instance_(inst) {}\n    void init(std::uint32_t baudrate = c_baudrate_default) override {\n      huart_.Instance = instance_;\n      huart_.Init.BaudRate = baudrate;\n      // ...\n// init huart_ `struct`\n      HalUart::init(&huart_);\n    }\n    void write(std::span<const char> data) override {\n      // we must cast away costness due to ST HAL’s API\nchar * data_ptr = const_cast<char *>(data.data());\n      HalUart::transmit(&huart_,\n  reinterpret_cast<uint8_t *(data_ptr),\n         data.size(),\n   HAL_MAX_DELAY);\n    }\n  private:\n    UART_HandleTypeDef huart_;\n    USART_TypeDef *instance_;\n    std::uint32_t baudrate_;\n    static constexpr std::uint32_t c_baudrate_default = 115200;\n}; \n```", "```cpp\nuart_stm32<uart_c_hal> uart(USART2);\nuart.init();\ngsm_lib gsm(uart); \n```", "```cpp\nlfs_t lfs;\nconst lfs_config * lfs_ramfs_cfg = get_ramfs_lfs_config();\nlfs_format(&lfs, lfs_ramfs_cfg);\nlfs_mount(&lfs, lfs_ramfs_cfg); \n```", "```cpp\nlfs_file_t file;\nif(lfs_file_open(&lfs, &file, “song.txt”, LFS_O_WRONLY | LFS_O_CREAT) >= 0)\n{\n const char * file_content = “These are some lyrics!”;\n lfs_file_write(&lfs,\n &file,\n reinterpret_cast<const void *>(file_content),\n strlen(file_content));\n    lfs_file_close(&lfs, &file);\n} \n```", "```cpp\nif(lfs_file_open(&lfs, &file, “song.txt”, LFS_O_RDONLY)>= 0) {\n    std::array<char, 64> buff = {0};\n lfs_file_read(&lfs,\n               &file,\n               reinterpret_cast<void *>(buff.data()),\n               buff.size() - 1);\n    printf(“This is content from the file\\r\\n%s\\r\\n”, buff.data());\n    lfs_file_close(&lfs, &file);\n} \n```", "```cpp\n$ cd Chapter13/lfs_raii\n$ cmake -B build\n$ cmake --build build --target run_in_renode \n```", "```cpp\nnamespace fs{\n`struct` lfs {\n    lfs() = delete;\n    static inline lfs_t fs_lfs;\n    static void init() {\n        const lfs_config * lfs_ramfs_cfg = get_ramfs_lfs_config();\n        lfs_format(&fs_lfs, lfs_ramfs_cfg);\n        lfs_mount(&fs_lfs, lfs_ramfs_cfg);\n    }   \n};\n}; \n```", "```cpp\nnamespace fs{\nclass file {\npublic:\n    file(const char * filename, int flags = LFS_O_RDONLY);\n    ~file();\n    [[nodiscard]] bool is_open() const;\n    int read(std::span<char> buff);\n    void write(std::span<const char> buff);\nprivate:\n    bool is_open_ = false;\n    lfs_file_t file_;\n};\n}; \n```", "```cpp\nfile(const char * filename, int flags = LFS_O_RDONLY) {\n if(lfs_file_open(&lfs::fs_lfs, &file_, filename, flags) >= 0) {\n is_open_ = true;\n }\n} \n```", "```cpp\n~file() {\nif(is_open_) {\n        printf(“Closing file in destructor.\\r\\n”);\n        lfs_file_close(&lfs::fs_lfs, &file_);\n }\n} \n```", "```cpp\nint read(std::span<char> buff) {\nreturn lfs_file_read(&lfs::fs_lfs,\n &file_,\n                     reinterpret_cast<void *>(buff.data()),\n buff.size() - 1);\n}\nint write(std::span<const char> buff) {\nreturn lfs_file_write(&lfs::fs_lfs,\n &file_,\n                      reinterpret_cast<const void *>(buff.data()),\n buff.size());\n} \n```", "```cpp\nfs::lfs::init();\n{\n    fs::file song_file(“song.txt”, LFS_O_WRONLY | LFS_O_CREAT);\n if(song_file.is_open()) {\n song_file.write(“These are some lyrics!”);\n // destructor is called on song_file object\n // ensuring the file is closed\n} \n```", "```cpp\nfs::file song_file(“song.txt”);\nstd::array<char, 64> buff = {0};\nif(song_file.is_open()) {\n song_file.read(buff);\n printf(“This is content from the file\\r\\n%s\\r\\n”,\n buff.data());\n} \n```", "```cpp\n$ cd Chapter13/lfs_raii\n$ cmake -B build -DMAIN_CPP_FILE_NAME=main_lfs_raii.cpp\n$ cmake --build build --target run_in_renode \n```"]