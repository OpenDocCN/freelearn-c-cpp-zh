["```cpp\nimport QtQuick 2.5 \nimport QtQuick.Window 2.2 \n\nWindow { \n    visible: true \n    width: 640; height: 480 \n\n    // A nice red rectangle \n    Rectangle { \n        width: 200; height: 200 \n        color: \"red\" \n    } \n} \n\n```", "```cpp\nimport <moduleName> <moduleVersion> \n\n```", "```cpp\n<ObjectType> { \n    <PropertyName>: <PropertyValue> \n} \n\n```", "```cpp\nimport QtQuick 2.5 \nimport QtQuick.Window 2.2 \n\nWindow { \n    visible: true \n    width: 640; height: 480 \n\n    Rectangle { \n        width: 200; height: 200 \n        color: \"red\" \n    } \n\n    Rectangle { \n        width: 200; height: 200 \n        color: \"green\" \n        x: 100; y: 100 \n\n        Rectangle { \n            width: 50; height: 50 \n            color: \"blue\" \n            x: 100; y: 100 \n        } \n    } \n} \n\n```", "```cpp\nimport QtQuick 2.5 \n\nimport QtQuick 2.5 \n\nRectangle { \n    color: \"gray\" \n    height: 50 \n\n    Rectangle { \n        id: purpleRectangle \n        width: 50; height: parent.height \n        color: \"purple\" \n        radius: 10 \n    } \n\n    Text { \n        anchors.left: purpleRectangle.right \n        anchors.right: parent.right \n        text: \"Dominate the Mobile UI\" \n        font.pointSize: 30 \n    } \n} \n\n```", "```cpp\nWindow { \n    ... \n    MyToolbar { \n        width: parent.width \n    } \n} \n\n```", "```cpp\nimport QtQuick 2.5 \nimport QtQuick.Window 2.2 \nimport QtQuick.Layouts 1.3 \n\nWindow { \n    visible: true \n    width: 640; height: 480 \n\n    MyToolbar { \n        id: myToolbar \n        width: parent.width \n    } \n\n    RowLayout { \n        anchors.top: myToolbar.bottom \n        anchors.left: parent.left \n        anchors.right: parent.right \n        anchors.bottom: parent.bottom \n\n        Rectangle { width: 200; height: 200; color: \"red\" } \n        Rectangle { width: 200; height: 200 color: \"green\" } \n        Rectangle { width: 50; height: 50; color: \"blue\" } \n    } \n} \n\n```", "```cpp\nimport QtQuick 2.5 \n\nRectangle { \n\n    property color iconColor: \"purple\" \n    property alias title: label.text \n\n    color: \"gray\" \n    height: 50 \n\n    Rectangle { \n        id: purpleRectangle \n        width: 50; height: parent.height \n        color: iconColor \n        radius: 10 \n    } \n\n    Text { \n        id: label \n        anchors.left: purpleRectangle.right \n        anchors.right: parent.right \n        text: \"Dominate the Mobile UI\" \n        font.pointSize: 30 \n    } \n} \n\n```", "```cpp\nimport QtQuick 2.5 \nimport QtQuick.Window 2.2 \nimport QtQuick.Layouts 1.3 \n\nWindow { \n    visible: true \n    width: 640; height: 480 \n\n    MyToolbar { \n        id: myToolbar \n        width: parent.width \n\n        title: \"Dominate Qt Quick\" \n        iconColor: \"yellow\" \n    } \n   ... \n} \n\n```", "```cpp\n#include <QGuiApplication> \n#include <QQmlApplicationEngine> \n\nint main(int argc, char *argv[]) \n{ \n    QGuiApplication app(argc, argv); \n\n    QQmlApplicationEngine engine; \n    engine.load(QUrl(QStringLiteral(\"qrc:/main.qml\"))); \n\n    return app.exec(); \n} \n\n```", "```cpp\nimport QtQuick 2.5 \nimport QtQuick.Controls 1.4 \n\nApplicationWindow { \n    visible: true \n    width: 640 \n    height: 480 \n    title: qsTr(\"Hello World\") \n\n    menuBar: MenuBar { \n        Menu { \n            title: qsTr(\"File\") \n            MenuItem { \n                text: qsTr(\"&Open\") \n                onTriggered: console.log(\"Open action triggered\"); \n            } \n            MenuItem { \n                text: qsTr(\"Exit\") \n                onTriggered: Qt.quit(); \n            } \n        } \n    } \n\n    Label { \n        text: qsTr(\"Hello World\") \n        anchors.centerIn: parent \n    } \n} \n\n```", "```cpp\nTEMPLATE = app \n\nQT += qml quick sql svg \n\nCONFIG += c++11 \n\nSOURCES += main.cpp \n\nRESOURCES += gallery.qrc \n\nLIBS += -L$$OUT_PWD/../gallery-core/ -lgallery-core \nINCLUDEPATH += $$PWD/../gallery-core \nDEPENDPATH += $$PWD/../gallery-core \n\ncontains(ANDROID_TARGET_ARCH,x86) { \n    ANDROID_EXTRA_LIBS = \\ \n        $$[QT_INSTALL_LIBS]/libQt5Sql.so \n} \n\n```", "```cpp\n#include <QGuiApplication> \n#include <QQmlApplicationEngine> \n#include <QQmlContext> \n#include <QQuickView> \n\n#include \"AlbumModel.h\" \n#include \"PictureModel.h\" \n\nint main(int argc, char *argv[]) \n{ \n    QGuiApplication app(argc, argv); \n\n    AlbumModel albumModel; \n    PictureModel pictureModel(albumModel); \n\n    QQmlApplicationEngine engine; \n\n    QQmlContext* context = engine.rootContext(); \n    context->setContextProperty(\"albumModel\", &albumModel); \n    context->setContextProperty(\"pictureModel\", &pictureModel); \n\n    engine.load(QUrl(QStringLiteral(\"qrc:/qml/main.qml\"))); \n\n    return app.exec(); \n} \n\n```", "```cpp\nimport QtQuick 2.6 \nimport QtQuick.Controls 2.0 \n\nApplicationWindow { \n\n    readonly property alias pageStack: stackView \n\n    id: app \n    visible: true \n    width: 768 \n    height: 1280 \n\n    StackView { \n        id: stackView \n        anchors.fill: parent \n        initialItem: AlbumListPage {} \n    } \n\n    onClosing: { \n        if (Qt.platform.os == \"android\") { \n            if (stackView.depth > 1) { \n                close.accepted = false \n                stackView.pop() \n            } \n        } \n    } \n} \n\n```", "```cpp\nimport QtQuick 2.0 \nimport QtQuick.Layouts 1.3 \n\nimport QtQuick.Controls 2.0 \n\nPage { \n\n    header: ToolBar { \n        Label { \n            Layout.fillWidth: true \n            text: \"Albums\" \n            font.pointSize: 30 \n        } \n    } \n... \n} \n\n```", "```cpp\nListView { \n    id: albumList \n    model: albumModel \n    spacing: 5 \n    anchors.fill: parent \n\n    delegate: Rectangle { \n        width: parent.width \n        height: 120 \n        color: \"#d0d1d2\" \n\n        Text { \n            text: name \n            font.pointSize: 16 \n            color: \"#000000\" \n            anchors.verticalCenter: parent.verticalCenter \n        } \n    } \n} \n\n```", "```cpp\nQHash<int, QByteArray> AlbumModel::roleNames() const \n{ \n    QHash<int, QByteArray> roles; \n    roles[Roles::IdRole] = \"id\"; \n    roles[Roles::NameRole] = \"name\"; \n    return roles; \n} \n\n```", "```cpp\nListView { \n    ... \n    delegate: Rectangle { \n        ... \n        MouseArea { \n            anchors.fill: parent \n            onClicked: { \n                albumList.currentIndex = index \n                pictureModel.setAlbumId(id) \n                pageStack.push(\"qrc:/qml/AlbumPage.qml\", \n                       { albumName: name, albumRowIndex: index }) \n            } \n        } \n    } \n} \n\n```", "```cpp\nclass GALLERYCORESHARED_EXPORT PictureModel : public QAbstractListModel \n{ \n    Q_OBJECT \npublic: \n   ... \n    Q_INVOKABLE void setAlbumId(int albumId); \n   ... \n}; \n\n```", "```cpp\npragma Singleton \nimport QtQuick 2.0 \n\nQtObject { \n    property color text: \"#000000\" \n\n    property color windowBackground: \"#eff0f1\" \n    property color toolbarBackground: \"#eff0f1\" \n    property color pageBackground: \"#fcfcfc\" \n    property color buttonBackground: \"#d0d1d2\" \n\n    property color itemHighlight: \"#3daee9\" \n} \n\n```", "```cpp\nsingleton Style 1.0 Style.qml \n\n```", "```cpp\nimport QtQuick 2.0 \nimport QtQuick.Controls 2.0 \n\nimport \".\" \n\nToolBar { \n     background: Rectangle { \n         color: Style.toolbarBackground \n     } \n\n} \n\n```", "```cpp\nimport QtQuick 2.0 \n\nimport QtQuick.Layouts 1.3 \nimport Qt.labs.controls 1.0 \nimport QtQuick.Controls 2.0 \nimport \".\" \n\nPage { \n\n    property alias toolbarButtons: buttonsLoader.sourceComponent \n    property alias toolbarTitle: titleLabel.text \n\n    header: ToolBarTheme { \n        RowLayout { \n            anchors.fill: parent \n            ToolButton { \n                background: Image { \n                    source: \"qrc:/res/icons/back.svg\" \n                } \n                onClicked: { \n                    if (stackView.depth > 1) { \n                        stackView.pop() \n                    } \n                } \n            } \n\n            Label { \n                id: titleLabel \n                Layout.fillWidth: true \n                color: Style.text \n                elide: Text.ElideRight \n                font.pointSize: 30 \n            } \n\n            Loader { \n                Layout.alignment: Qt.AlignRight \n                id: buttonsLoader \n            } \n        } \n    } \n\n    Rectangle { \n        color: Style.pageBackground \n        anchors.fill: parent \n    } \n} \n\n```", "```cpp\nimport QtQuick 2.6 \nimport QtQuick.Controls 2.0 \nimport \".\" \n\nPageTheme { \n\n    toolbarTitle: \"Albums\" \n\n    ListView { \n        id: albumList \n        model: albumModel \n        spacing: 5 \n        anchors.fill: parent \n\n        delegate: Rectangle { \n            width: parent.width \n            height: 120 \n            color: Style.buttonBackground \n\n            Text { \n                text: name \n                font.pointSize: 16 \n                color: Style.text \n                anchors.verticalCenter: parent.verticalCenter \n            } \n            ... \n        } \n    } \n} \n\n```", "```cpp\nDatabaseManager& DatabaseManager::instance() \n{ \n    return singleton; \n} \n\nDatabaseManager::DatabaseManager(const QString& path) : \n    mDatabase(new QSqlDatabase(QSqlDatabase::addDatabase(\"QSQLITE\"))), \n    albumDao(*mDatabase), \n    pictureDao(*mDatabase) \n{ \n    mDatabase->setDatabaseName(path); \n    ... \n} \n\n```", "```cpp\nDatabaseManager& DatabaseManager::instance() \n{ \n#if defined(Q_OS_ANDROID) || defined(Q_OS_IOS) \n    QFile assetDbFile(\":/database/\" + DATABASE_FILENAME); \n    QString destinationDbFile = QStandardPaths::writableLocation( \n                            QStandardPaths::AppLocalDataLocation) \n                    .append(\"/\" + DATABASE_FILENAME); \n\n        if (!QFile::exists(destinationDbFile)) { \n            assetDbFile.copy(destinationDbFile); \n            Qfile::setPermissions(destinationDbFile, \n                            QFile::WriteOwner | QFile::ReadOwner); \n        } \n    } \n    static DatabaseManager singleton(destinationDbFile); \n#else \n    static DatabaseManager singleton; \n#endif \n    return singleton; \n} \n\n```", "```cpp\n// In AlbumModel.h \n... \nQModelIndex addAlbum(const Album& album); \nQ_INVOKABLE void addAlbumFromName(const QString& name); \n... \n\n// In AlbumModel.cpp \nvoid AlbumModel::addAlbumFromName(const QString& name) \n{ \n    addAlbum(Album(name)); \n} \n\n```", "```cpp\nimport QtQuick 2.6 \nimport QtQuick.Layouts 1.3 \nimport Qt.labs.controls 1.0 \nimport QtQuick.Dialogs 1.2 \nimport QtQuick.Window 2.2 \nimport \".\" \n\nDialog { \n\n    property string label: \"New item\" \n    property string hint: \"\" \n    property alias editText : editTextItem \n\n    standardButtons: StandardButton.Ok | StandardButton.Cancel \n    onVisibleChanged: { \n        editTextItem.focus = true \n        editTextItem.selectAll() \n    } \n    onButtonClicked: { \n        Qt.inputMethod.hide(); \n    } \n    Rectangle { \n\n        implicitWidth: parent.width \n        implicitHeight: 100 \n\n        ColumnLayout { \n            Text { \n                id: labelItem \n                text: label \n                color: Style.text \n            } \n\n            TextInput { \n                id: editTextItem \n                inputMethodHints: Qt.ImhPreferUppercase \n                text: hint \n                color: Style.text \n            } \n        } \n    } \n} \n\n```", "```cpp\nPageTheme { \n\n    toolbarTitle: \"Albums\" \n    toolbarButtons: ToolButton { \n        background: Image { \n            source: \"qrc:/res/icons/album-add.svg\" \n        } \n        onClicked: { \n            newAlbumDialog.open() \n        } \n    } \n\n    InputDialog { \n        id: newAlbumDialog \n        title: \"New album\" \n        label: \"Album name:\" \n        hint: \"My Album\" \n\n        onAccepted: { \n            albumModel.addAlbumFromName(editText.text) \n        } \n    } \n\n```", "```cpp\n#include <QQuickImageProvider> \n\nclass PictureModel; \n\nclass PictureImageProvider : public QQuickImageProvider \n{ \npublic: \n\n    PictureImageProvider(PictureModel* pictureModel); \n\n    QPixmap requestPixmap(const QString& id, QSize* size,  \n            const QSize& requestedSize) override; \n\nprivate: \n    PictureModel* mPictureModel; \n}; \n\n```", "```cpp\nImage { source: \"image://pictures/\" + index } \n\n```", "```cpp\n#include \"PictureModel.h\" \n\nPictureImageProvider::PictureImageProvider(PictureModel* pictureModel) : \n    QQuickImageProvider(QQuickImageProvider::Pixmap), \n    mPictureModel(pictureModel) \n{ \n} \n\nQPixmap PictureImageProvider::requestPixmap(const QString& id, QSize* /*size*/, const QSize& /*requestedSize*/) \n{ \n    QStringList query = id.split('/'); \n    if (!mPictureModel || query.size() < 2) { \n        return QPixmap(); \n    } \n\n    int row = query[0].toInt(); \n    QString pictureSize = query[1]; \n\n    QUrl fileUrl = mPictureModel->data(mPictureModel->index(row, 0),       PictureModel::Roles::UrlRole).toUrl(); \n    return ?? // Patience, the mystery will be soon unraveled \n} \n\n```", "```cpp\n// In PictureImageProvider.h \n\n#include <QQuickImageProvider> \n#include <QCache> \n\n... \npublic: \n    static const QSize THUMBNAIL_SIZE; \n\n    QPixmap requestPixmap(const QString& id, QSize* size, const QSize& requestedSize) override; \n\n    QPixmap* pictureFromCache(const QString& filepath, const QString& pictureSize); \n\nprivate: \n    PictureModel* mPictureModel; \n    QCache<QString, QPixmap> mPicturesCache; \n}; \n\n// In PictureImageProvider.cpp \nconst QString PICTURE_SIZE_FULL = \"full\"; \nconst QString PICTURE_SIZE_THUMBNAIL = \"thumbnail\"; \nconst QSize PictureImageProvider::THUMBNAIL_SIZE = QSize(350, 350); \n\nQPixmap PictureImageProvider::requestPixmap(const QString& id, QSize* /*size*/, const QSize& /*requestedSize*/) \n{ \n    ... \n    return *pictureFromCache(fileUrl.toLocalFile(), pictureSize); \n} \n\nQPixmap* PictureImageProvider::pictureFromCache(const QString& filepath, const QString& pictureSize) \n{ \n    QString key = QStringList{ pictureSize, filepath } \n                    .join(\"-\"); \n\n        QPixmap* cachePicture = nullptr; \n    if (!mPicturesCache.contains(pictureSize)) { \n        QPixmap originalPicture(filepath); \n        if (pictureSize == PICTURE_SIZE_THUMBNAIL) { \n            cachePicture = new QPixmap(originalPicture \n                                  .scaled(THUMBNAIL_SIZE, \n                                          Qt::KeepAspectRatio, \n                                          Qt::SmoothTransformation)); \n        } else if (pictureSize == PICTURE_SIZE_FULL) { \n            cachePicture = new QPixmap(originalPicture); \n        } \n        mPicturesCache.insert(key, cachePicture); \n    } else { \n        cachePicture = mPicturesCache[pictureSize]; \n    } \n\n    return cachePicture; \n} \n\n```", "```cpp\n#include \"AlbumModel.h\" \n#include \"PictureModel.h\" \n#include \"PictureImageProvider.h\" \n\nint main(int argc, char *argv[]) \n{ \n    QGuiApplication app(argc, argv); \n    ... \n\n    QQmlContext* context = engine.rootContext(); \n    context->setContextProperty(\"thumbnailSize\", PictureImageProvider::THUMBNAIL_SIZE.width()); \n    context->setContextProperty(\"albumModel\", &albumModel); \n    context->setContextProperty(\"pictureModel\", &pictureModel); \n\n    engine.addImageProvider(\"pictures\", new \n                            PictureImageProvider(&pictureModel)); \n    ... \n} \n\n```", "```cpp\nimport QtQuick 2.6 \nimport QtQuick.Layouts 1.3 \nimport QtQuick.Controls 2.0 \nimport \".\" \n\nPageTheme { \n\n    property string albumName \n    property int albumRowIndex \n\n    toolbarTitle: albumName \n\n    GridView { \n        id: thumbnailList \n        model: pictureModel \n        anchors.fill: parent \n        anchors.leftMargin: 10 \n        anchors.rightMargin: 10 \n        cellWidth : thumbnailSize \n        cellHeight: thumbnailSize \n\n        delegate: Rectangle { \n            width: thumbnailList.cellWidth - 10 \n            height: thumbnailList.cellHeight - 10 \n            color: \"transparent\" \n\n            Image { \n                id: thumbnail \n                anchors.fill: parent \n                fillMode: Image.PreserveAspectFit \n                cache: false \n                source: \"image://pictures/\" + index + \"/thumbnail\" \n            } \n        } \n    } \n} \n\n```", "```cpp\nimport QtQuick 2.6 \nimport QtQuick.Layouts 1.3 \nimport QtQuick.Controls 2.0 \nimport QtQuick.Dialogs 1.2 \nimport \".\" \n\nPageTheme { \n\n    property string albumName \n    property int albumRowIndex \n\n    toolbarTitle: albumName \n    toolbarButtons: RowLayout { \n        ToolButton { \n            background: Image { \n                source: \"qrc:/res/icons/photo-add.svg\" \n            } \n            onClicked: { \n                dialog.open() \n            } \n        } \n    } \n\n    FileDialog { \n        id: dialog \n        title: \"Open file\" \n        folder: shortcuts.pictures \n        onAccepted: { \n            var pictureUrl = dialog.fileUrl \n            pictureModel.addPictureFromUrl(pictureUrl) \n            dialog.close() \n        } \n    } \n\n    GridView { \n        ... \n} \n\n```", "```cpp\nimport QtQuick 2.0 \nimport QtQuick.Layouts 1.3 \nimport QtQuick.Controls 2.0 \nimport \".\" \n\nPageTheme { \n\n    property string pictureName \n    property int pictureIndex \n\n    toolbarTitle: pictureName \n\n    ListView { \n        id: pictureListView \n        model: pictureModel \n        anchors.fill: parent \n        spacing: 5 \n        orientation: Qt.Horizontal \n        snapMode: ListView.SnapOneItem \n        currentIndex: pictureIndex \n\n        Component.onCompleted: { \n            positionViewAtIndex(currentIndex, \n                                ListView.SnapPosition) \n        } \n\n        delegate: Rectangle { \n            property int itemIndex: index \n            property string itemName: name \n\n            width: ListView.view.width == 0 ? \n                   parent.width : ListView.view.width \n            height: pictureListView.height \n            color: \"transparent\" \n\n            Image { \n                fillMode: Image.PreserveAspectFit \n                cache: false \n                width: parent.width \n                height: parent.height \n                source: \"image://pictures/\" + index + \"/full\" \n            } \n        } \n    } \n} \n\n```", "```cpp\nComponent.onCompleted: { \n    positionViewAtIndex(currentIndex, ListView.SnapPosition) \n} \n\n```", "```cpp\nonMovementEnded: { \n    currentIndex = itemAt(contentX, contentY).itemIndex \n} \n\nonCurrentItemChanged: { \n    toolbarTitleLabel.text = currentItem.itemName \n} \n\n```", "```cpp\nMouseArea { \n    anchors.fill: parent \n    onClicked: { \n        thumbnailList.currentIndex = index \n        pageStack.push(\"qrc:/qml/PicturePage.qml\",  \n    { pictureName: name, pictureIndex: index }) \n    } \n} \n\n```"]