["```cpp\nextends CharacterBody3D\n@export var pitch_speed = 1.1\n@export var roll_speed = 2.5\n@export var level_speed = 4.0\nvar roll_input = 0\nvar pitch_input = 0\n```", "```cpp\nfunc get_input(delta):\n    pitch_input = Input.get_axis(\"pitch_down\", \"pitch_up\")\n    roll_input = Input.get_axis(\"roll_left\", \"roll_right\")\n```", "```cpp\nfunc _physics_process(delta):\n    get_input(delta)\n    rotation.x = lerpf(rotation.x, pitch_input,\n        pitch_speed * delta)\n    rotation.x = clamp(rotation.x, deg_to_rad(-45),\n        deg_to_rad(45))\n```", "```cpp\n$cartoon_plane.rotation.z = lerpf($cartoon_plane.rotation.z, roll_input, roll_speed * delta)\n```", "```cpp\n@export var forward_speed = 25\nvar max_altitude = 20\n```", "```cpp\nif position.y >= max_altitude and pitch_input > 0:\n    position.y = max_altitude\n    pitch_input = 0\n```", "```cpp\nvelocity = -transform.basis.z * forward_speed\n```", "```cpp\nvelocity += transform.basis.x * $cartoon_plane.rotation.z / deg_to_rad(45) * forward_speed / 2.0\nmove_and_slide()\n```", "```cpp\nextends Area3D\nfunc _ready():\n    $Label3D.hide()\n```", "```cpp\nfunc _on_body_entered(body):\n    $CollisionShape3D/MeshInstance3D.hide()\n    var d = global_position.distance_to(body.global_position)\n    if d < 2.0:\n        $Label3D.text = \"200\"\n        $Label3D.modulate = Color(1, 1, 0)\n    elif d > 3.5:\n        $Label3D.text = \"50\"\n    else:\n        $Label3D.text = \"100\"\n    $Label3D.show()\n```", "```cpp\nvar tween = create_tween().set_parallel()\ntween.tween_property($Label3D, \"position\",\n    Vector3(0, 10, 0), 1.0)\ntween.tween_property($Label3D, \"modulate:a\", 0.0, 0.5)\n```", "```cpp\nfunc _process(delta):\n    $CollisionShape3D/MeshInstance3D.rotate_y(deg_to_rad(50) * delta)\n```", "```cpp\nfunc _on_visible_on_screen_notifier_3d_screen_exited():\n    queue_free()\n```", "```cpp\nextends Node3D\nvar buildings = [\n    preload(\"res://buildings/building_1.tscn\"),\n    preload(\"res://buildings/building_2.tscn\"),\n    preload(\"res://buildings/building_3.tscn\"),\n    preload(\"res://buildings/building_4.tscn\"),\n    preload(\"res://buildings/building_5.tscn\"),\n]\nvar ring = preload(\"res://ring.tscn\")\nvar level = 0\n```", "```cpp\nfunc _ready():\n    add_buildings()\n    add_center_buildings()\n    add_rings()\n```", "```cpp\nfunc add_buildings():\n    for side in [-1, 1]:\n        var zpos = -10\n        for i in 18:\n            if randf() > 0.75:\n                zpos -= randi_range(5, 10)\n                continue\n            var nb = buildings[randi_range(0,\n                buildings.size()-1)].instantiate()\n            add_child(nb)\n            nb.transform.origin.z = zpos\n            nb.transform.origin.x = 20 * side\n            zpos -= nb.get_node(\"MeshInstance3D\").mesh.get_aabb().size.z\n```", "```cpp\nfunc add_center_buildings():\n    if level > 0:\n        for z in range(0, -200, -20):\n            if randf() > 0.8:\n                var nb = buildings[0].instantiate()\n                add_child(nb)\n                nb.position.z = z\n                nb.position.x += 8\n                nb.rotation.y = PI / 2\n```", "```cpp\nfunc add_rings():\n    for z in range(0, -200, -10):\n        if randf() > 0.76:\n            var nr = ring.instantiate()\n            nr.position.z = z\n            nr.position.y = randf_range(3, 17)\n            add_child(nr)\n```", "```cpp\nextends Camera3D\n@export var target_path : NodePath\n@export var offset = Vector3.ZERO\nvar target = null\nfunc _ready():\n    if target_path:\n        target = get_node(target_path)\n        position = target.position + offset\n        look_at(target.position)\nfunc _physics_process(_delta):\n    if !target:\n        return\n    position = target.position + offset\n```", "```cpp\nextends Node3D\nvar chunk = preload(\"res://chunk.tscn\")\nvar num_chunks = 1\nvar chunk_size = 200\nvar max_position = -100\n```", "```cpp\nfunc _process(delta):\n    if $Plane.position.z  < max_position:\n        num_chunks += 1\n        var new_chunk = chunk.instantiate()\n        new_chunk.position.z = max_position – chunk_size / 2\n        new_chunk.level = num_chunks / 4\n        add_child(new_chunk)\n        max_position -= chunk_size\n```", "```cpp\nvar move_x = false\nvar move_y = false\nvar move_amount = 2.5\nvar move_speed = 2.0\n```", "```cpp\nfunc _ready():\n    $Label3D.hide()\n    var tween = create_tween().set_loops()\n        .set_trans(Tween.TRANS_SINE)\n    tween.stop()\n    if move_y:\n        tween.tween_property($CollisionShape3D,\n            \"position:y\", -move_amount, move_speed)\n        tween.tween_property($CollisionShape3D,\n            \"position:y\", move_amount, move_speed)\n        tween.play()\n    if move_x:\n        tween.tween_property($CollisionShape3D,\n            \"position:x\", -move_amount, move_speed)\n        tween.tween_property($CollisionShape3D,\n            \"position:x\", move_amount, move_speed)\n        tween.play()\n```", "```cpp\nfunc add_rings():\n    for z in range(0, -200, -10):\n        var n = randf()\n        if n > 0.76:\n            var nr = ring.instantiate()\n            nr.position.z = z\n            nr.position.y = randf_range(3, 17)\n            match level:\n                0: pass\n                1:\n                    nr.move_y = true\n                2:\n                    nr.position.x = randf_range(-10, 10)\n                    nr.move_y = true\n                3:\n                    nr.position.x = randf_range(-10, 10)\n                    nr.move_x = true\n            add_child(nr)\n```", "```cpp\nsignal dead\n```", "```cpp\nif get_slide_collision_count() > 0:\n    die()\n```", "```cpp\nfunc die():\n    set_physics_process(false)\n    $cartoon_plane.hide()\n    $Explosion.show()\n    $Explosion.play(\"default\")\n    await $Explosion.animation_finished\n    $Explosion.hide()\n    dead.emit()\n    get_tree().reload_current_scene()\n```", "```cpp\nsignal score_changed\nsignal fuel_changed\n```", "```cpp\n@export var fuel_burn = 1.0\nvar max_fuel = 10.0\nvar fuel = 10.0:\n    set = set_fuel\nvar score = 0:\n    set = set_score\n```", "```cpp\nfunc set_fuel(value):\n    fuel = min(value, max_fuel)\n    fuel_changed.emit(fuel)\n    if fuel <= 0:\n        die()\nfunc set_score(value):\n    score = value\n    score_changed.emit(score)\n```", "```cpp\nfuel -= fuel_burn * delta\n```", "```cpp\nif d < 2.0:\n    $Label3D.text = \"200\"\n    $Label3D.modulate = Color(1, 1, 0)\n    body.fuel = 10\n    body.score += 200\nelif d > 3.5:\n    $Label3D.text = \"50\"\n    body.fuel += 1\n    body.score += 50\nelse:\n    $Label3D.text = \"100\"\n    body.fuel += 2.5\n    body.score += 100\n```", "```cpp\nextends CanvasLayer\nfunc update_fuel(value):\n    $FuelBar.value = value\nfunc update_score(value):\n    $Score.text = str(value)\n```", "```cpp\nextends Control\nfunc _on_texture_button_pressed():\n    get_tree().change_scene_to_file(\"res://main.tscn\")\n```", "```cpp\nvar title_screen = \"res://title_screen.tscn\"\nfunc _on_plane_dead():\n    get_tree(). change_scene_to_file(title_screen)\n```", "```cpp\nextends Node\nvar high_score = 0\nvar score_file = \"user://hs.dat\"\n```", "```cpp\nfunc _ready():\n    load_score()\nfunc load_score():\n    if FileAccess.file_exists(score_file):\n        var file = FileAccess.open(score_file,\n            FileAccess.READ)\n        high_score = file.get_var()\n    else:\n        high_score = 0\nfunc save_score():\n    var file = FileAccess.open(score_file, FileAccess.WRITE)\n    file.store_var(high_score)\n```", "```cpp\nfunc _ready():\n    $Label2.text = \"High Score: \" + str(Global.high_score)\n```", "```cpp\nif score > Global.high_score:\n    Global.high_score = score\n    Global.save_score()\n```"]