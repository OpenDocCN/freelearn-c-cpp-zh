["```cpp\n    QT += core server.h and add the following headers to it:\n\n    ```", "```cpp\n\n    ```", "```cpp\n    public:\n          server(QObject *parent = nullptr);\n          void startServer();\n    server class:\n\n    ```", "```cpp\n\n    ```", "```cpp\n    private:\n         QTcpServer* chatServer;\n         QVector<QTcpSocket*>* allClients;\n    ```", "```cpp\n    void server::startServer() {\n         allClients = new QVector<QTcpSocket*>;\n         chatServer = new QTcpServer();\n         chatServer->setMaxPendingConnections(10);\n         connect(chatServer, &QTcpServer::newConnection,      this, &server::newClientConnection);\n    if (chatServer->listen(QHostAddress::Any, 8001))\n         qDebug() << \"Server has started. Listening to port     8001.\";\n    else\n         qDebug() << \"Server failed to start. Error: \" +   chatServer->errorString();\n    }\n    ```", "```cpp\n    void server::sendMessageToClients(QString message) {\n    if (allClients->size() > 0) {\n         for (int i = 0; i < allClients->size(); i++) {\n         if (allClients->at(i)->isOpen() && allClients-   >at(i)->isWritable()) {\n         allClients->at(i)->write(message.toUtf8());\n    }\n    }}}\n    ```", "```cpp\n    void server::newClientConnection() {\n         QTcpSocket* client = chatServer->nextPendingConnection();\n         QString ipAddress = client->peerAddress().toString();\n         int port = client->peerPort();\n         connect(client, &QTcpSocket::disconnected, this, &server::socketDisconnected);\n         connect(client, &QTcpSocket::readyRead,this, &server::socketReadReady);\n         connect(client, &QTcpSocket::stateChanged, this, &server::socketStateChanged);\n         allClients->push_back(client);\n         qDebug() << \"Socket connected from \" + ipAddress + \":\" + QString::number(port);\n    }\n    ```", "```cpp\n    void server::socketDisconnected() {\n         QTcpSocket* client = qobject_cast<QTcpSocket*>(QObject::sender());\n         QString socketIpAddress = client->peerAddress().toString();\n         int port = client->peerPort();\n         qDebug() << \"Socket disconnected from \" + socketIpAddress + \":\" + QString::number(port);\n    }\n    ```", "```cpp\n    void server::socketReadReady() {\n         QTcpSocket* client = qobject_cast<QTcpSocket*>(QObject::sender());\n         QString socketIpAddress = client->peerAddress().toString();\n         int port = client->peerPort();\n         QString data = QString(client->readAll());\n         qDebug() << \"Message: \" + data + \" (\" + socketIpAddress + \":\" + QString::number(port) + \")\";\n         sendMessageToClients(data);\n    }\n    ```", "```cpp\n    void server::socketStateChanged(QAbstractSocket::SocketState state) {\n         QTcpSocket* client = qobject_cast<QTcpSocket*>(QObject::sender());\n         QString socketIpAddress = client->peerAddress().toString();\n         int port = client->peerPort();\n         qDebug() << \"Socket state changed (\" + socketIpAddress + \":\" + QString::number(port) + \"): \" + desc;\n    }\n    ```", "```cpp\n         QString desc;\n         if (state == QAbstractSocket::UnconnectedState)\n               desc = \"The socket is not connected.\";\n         else if (state == QAbstractSocket::HostLookupState)\n               desc = \"The socket is performing a host name lookup.\";\n         else if (state == QAbstractSocket::ConnectingState)\n               desc = \"The socket has started establishing a connection.\";\n         else if (state == QAbstractSocket::ConnectedState)\n               desc = \"A connection is established.\";\n         else if (state == QAbstractSocket::BoundState)\n               desc = \"The socket is bound to an address and port.\";\n         else if (state == QAbstractSocket::ClosingState)\n               desc = \"The socket is about to close (data may still be waiting to be written).\";\n         else if (state == QAbstractSocket::ListeningState)\n               desc = \"For internal use only.\";\n    ```", "```cpp\n    #include <QCoreApplication>\n    #include \"server.h\"\n         int main(int argc, char *argv[]) {\n         QCoreApplication a(argc, argv);\n         server* myServer = new server();\n         myServer->startServer();\n         return a.exec();\n    }\n    ```", "```cpp\n    void on_connectButton_clicked();\n    void on_sendButton_clicked();\n    ```", "```cpp\n    #include <QDebug>\n    #include <QTcpSocket>\n    ```", "```cpp\n    public:\n         explicit MainWindow(QWidget *parent = 0);\n         ~MainWindow();\n         void printMessage(QString message);\n    private slots:\n         void on_connectButton_clicked();\n         void on_sendButton_clicked();\n         void socketConnected();\n         void socketDisconnected();\n         void socketReadyRead();\n    ```", "```cpp\n    private:\n         Ui::MainWindow *ui;\n         bool connectedToHost;\n         mainwindow.cpp and define the printMessage() function, as shown in the following example:\n\n    ```", "```cpp\n\n    ```", "```cpp\n    void MainWindow::on_connectButton_clicked() {\n         if (!connectedToHost) {\n               socket = new QTcpSocket();\n               connect(socket, &QTcpSocket::connected, this, &MainWindow::socketConnected);\n               connect(socket, &QTcpSocket::disconnected, this, &MainWindow::socketDisconnected);\n               connect(socket, &QTcpSocket::readyRead, this, &MainWindow::socketReadyRead);\n               socket->connectToHost(\"127.0.0.1\", 8001);\n         }\n         else {\n               QString name = ui->nameInput->text();\n               socket->write(\"<font color=\\\"Orange\\\">\" + name.toUtf8() + \" has left the chat room.</font>\");\n               socket->disconnectFromHost();\n         }\n    }\n    ```", "```cpp\n    void MainWindow::on_sendButton_clicked() {\n         QString name = ui->nameInput->text();\n         QString message = ui->messageInput->text();\n         socket->write(\"<font color=\\\"Blue\\\">\" + name.toUtf8() + \"</font>: \" + message.toUtf8());\n         ui->messageInput->clear();\n    }\n    ```", "```cpp\n    void MainWindow::socketConnected() {\n         qDebug() << \"Connected to server.\";\n         printMessage(\"<font color=\\\"Green\\\">Connected to server.</font>\");\n         QString name = ui->nameInput->text();\n         socket->write(\"<font color=\\\"Purple\\\">\" + name.toUtf8() + \" has joined the chat room.</font>\");\n         ui->connectButton->setText(\"Disconnect\");\n         connectedToHost = true;\n    }\n    ```", "```cpp\n    void MainWindow::socketDisconnected() {\n         qDebug() << \"Disconnected from server.\";\n         printMessage(\"<font color=\\\"Red\\\">Disconnected from server.</font>\");\n         ui->connectButton->setText(\"Connect\");\n         connectedToHost = false;\n    }\n    ```", "```cpp\n    void MainWindow::socketReadyRead() {\n         printMessage(socket->readAll());\n    }\n    ```", "```cpp\n    private slots:\n         void on_openButton_clicked();\n         void on_uploadButton_clicked();\n         itemDoubleClicked(QListWidgetItem*) option and click OK, as shown in the following screenshot:\n    ```", "```cpp\n    private slots:\n         void on_openButton_clicked();\n         void on_uploadButton_clicked();\n         void on_setFolderButton_clicked();\n         void on_fileList_itemDoubleClicked(QListWidgetItem *item);\n         void serverConnected(const QHostAddress &address, int port);\n         void serverReply(int code, const QString &parameters);\n         FtpDataChannel.\n    ```", "```cpp\n    #ifndef FTPDATACHANNEL_H\n    #define FTPDATACHANNEL_H\n    #include <QtCore/qobject.h>\n    #include <QtNetwork/qtcpserver.h>\n    #include <QtNetwork/qtcpsocket.h>\n    #include <memory>\n    class FtpDataChannel : public QObject{\n        Q_OBJECT\n    public:\n        explicit FtpDataChannel(QObject *parent = nullptr);\n        void listen(const QHostAddress &address = QHostAddress::Any);\n        void sendData(const QByteArray &data);\n        void close();\n        QString portspec() const;\n        QTcpServer m_server;\n        std::unique_ptr<QTcpSocket> m_socket;\n    signals:\n        void dataReceived(const QByteArray &data);\n    };\n    #endif\n    ```", "```cpp\n    #include \"ftpdatachannel.h\"\n    FtpDataChannel::FtpDataChannel(QObject *parent) : QObject(parent){\n        connect(&m_server, &QTcpServer::newConnection, this, [this](){\n            m_socket.reset(m_server.nextPendingConnection());\n            connect(m_socket.get(), &QTcpSocket::readyRead, this, [this](){\n                emit dataReceived(m_socket->readAll());\n            });\n            connect(m_socket.get(), &QTcpSocket::bytesWritten, this, [this](qint64 bytes){\n                qDebug() << bytes;\n                close();\n            });\n        });\n    }\n    ```", "```cpp\n    void FtpDataChannel::listen(const QHostAddress &address){\n        m_server.listen(address);\n    }\n    void FtpDataChannel::sendData(const QByteArray &data){\n        if (m_socket)\n            m_socket->write(QByteArray(data).replace(\"\\n\", \"\\r\\n\"));\n    }\n    void FtpDataChannel::close(){\n        if (m_socket)\n            m_socket->disconnectFromHost();\n    }\n    ```", "```cpp\n    QString FtpDataChannel::portspec() const{\n        QString portSpec;\n        quint32 ipv4 = m_server.serverAddress().toIPv4Address();\n        quint16 port = m_server.serverPort();\n        portSpec += QString::number((ipv4 & 0xff000000) >> 24);\n        portSpec += ',' + QString::number((ipv4 & 0x00ff0000) >> 16);\n        portSpec += ',' + QString::number((ipv4 & 0x0000ff00) >> 8);\n        portSpec += ',' + QString::number(ipv4 & 0x000000ff);\n        portSpec += ',' + QString::number((port & 0xff00) >> 8);\n        portSpec += ',' + QString::number(port &0x00ff);\n        return portSpec;\n    }\n    ```", "```cpp\n    #ifndef FTPCONTROLCHANNEL_H\n    #define FTPCONTROLCHANNEL_H\n    #include <QtNetwork/qhostaddress.h>\n    #include <QtNetwork/qtcpsocket.h>\n    #include <QtCore/qobject.h>\n    class FtpControlChannel : public QObject{\n        Q_OBJECT\n    public:\n        explicit FtpControlChannel(QObject *parent = nullptr);\n        void connectToServer(const QString &server);\n        void command(const QByteArray &command, const QByteArray &params);\n    public slots:\n        void error(QAbstractSocket::SocketError);\n    signals:\n        void opened(const QHostAddress &localAddress, int localPort);\n        void closed();\n        void info(const QByteArray &info);\n        void reply(int code, const QByteArray &parameters);\n        void invalidReply(const QByteArray &reply);\n    private:\n        void onReadyRead();\n        QTcpSocket m_socket;\n        QByteArray m_buffer;\n    };\n    #endif // FTPCONTROLCHANNEL_H\n    ```", "```cpp\n    #include \"ftpcontrolchannel.h\"\n    #include <QtCore/qcoreapplication.h>\n    FtpControlChannel::FtpControlChannel(QObject *parent) : QObject(parent){\n        connect(&m_socket, &QIODevice::readyRead,\n                this, &FtpControlChannel::onReadyRead);\n        connect(&m_socket, &QAbstractSocket::disconnected,\n                this, &FtpControlChannel::closed);\n        connect(&m_socket, &QAbstractSocket::connected, this, [this]() {\n            emit opened(m_socket.localAddress(), m_socket.localPort());\n        });\n        connect(&m_socket, &QAbstractSocket::errorOccurred,\n                this, &FtpControlChannel::error);\n    }\n    ```", "```cpp\n    void FtpControlChannel::connectToServer(const QString &server){\n        m_socket.connectToHost(server, 21);\n    }\n    void FtpControlChannel::command(const QByteArray &command, const QByteArray &params){\n        QByteArray sendData = command;\n        if (!params.isEmpty())\n            sendData += \" \" + params;\n        m_socket.write(sendData + \"\\r\\n\");\n    }\n    ```", "```cpp\n    void FtpControlChannel::onReadyRead(){\n        m_buffer.append(m_socket.readAll());\n        int rn = -1;\n        while ((rn = m_buffer.indexOf(\"\\r\\n\")) != -1) {\n            QByteArray received = m_buffer.mid(0, rn);\n            m_buffer = m_buffer.mid(rn + 2);\n            int space = received.indexOf(' ');\n            if (space != -1) {\n                int code = received.mid(0, space).toInt();\n                if (code == 0) {\n                    qDebug() << \"Info received: \" << received.mid(space + 1);\n                    emit info(received.mid(space + 1));\n                } else {\n                    qDebug() << \"Reply received: \" << received.mid(space + 1);\n                    emit reply(code, received.mid(space + 1));\n                }\n            } else {\n                emit invalidReply(received);\n            }\n        }\n    }\n    void FtpControlChannel::error(QAbstractSocket::SocketError error){\n        qWarning() << \"Socket error:\" << error;\n        QCoreApplication::exit();\n    }\n    ```", "```cpp\n    #include <QDebug>\n    #include <QNetworkAccessManager>\n    #include <QNetworkRequest>\n    #include <QNetworkReply>\n    #include <QFile>\n    #include <QFileInfo>\n    #include <QFileDialog>\n    #include <QListWidgetItem>\n    #include <QMessageBox>\n    #include <QThread>\n    #include \"ftpcontrolchannel.h\"\n    #include \"ftpdatachannel.h\"\n    ```", "```cpp\n    public:\n         explicit MainWindow(QWidget *parent = 0);\n         ~MainWindow();\n         void getFileList();\n    ```", "```cpp\n    private:\n         Ui::MainWindow *ui;\n         FtpDataChannel* dataChannel;\n         FtpControlChannel* controlChannel;\n         QString ftpAddress;\n         QString username;\n         QString password;\n         QStringList fileList;\n         QString uploadFileName;\n         QString downloadFileName;\n    ```", "```cpp\n    MainWindow::MainWindow(QWidget *parent) : QMainWindow(parent), ui(new Ui::MainWindow) {\n         ui->setupUi(this);\n         dataChannel = new FtpDataChannel(this);\n         connect(dataChannel, &FtpDataChannel::dataReceived, this, &MainWindow::dataReceived);\n         connect(controlChannel, &FtpControlChannel::reply, this, &MainWindow::serverReply);\n         connect(controlChannel, &FtpControlChannel::opened, this, &MainWindow::serverConnected);\n         controlChannel = new FtpControlChannel(this);\n         ftpAddress = \"127.0.0.1/\";\n         username = \"myuser\";\n         password = \"123456\";\n         controlChannel->connectToServer(ftpAddress);\n    }\n    ```", "```cpp\n    void MainWindow::getFileList() {\n    controlChannel->command(\"PORT\", dataChannel->portspec().toUtf8());\n        controlChannel->command(\"MLSD\", \"\");}\n    ```", "```cpp\n    void MainWindow::on_openButton_clicked() {\n         QString fileName = QFileDialog::getOpenFileName(this, \"Select File\", qApp->applicationDirPath());\n         ui->uploadFileInput->setText(fileName);\n    }\n    ```", "```cpp\n    void MainWindow::on_uploadButton_clicked() {\n         QFile* file = new QFile(ui->uploadFileInput->text());\n         QFileInfo fileInfo(*file);\n         uploadFileName = fileInfo.fileName();\n         controlChannel->command(\"PORT\", dataChannel->portspec().toUtf8());\n         controlChannel->command(\"STOR\", uploadFileName.toUtf8());\n    }\n    ```", "```cpp\n    void MainWindow::on_setFolderButton_clicked() {\n         QString folder = QFileDialog::getExistingDirectory(this, tr(\"Open Directory\"), qApp->applicationDirPath(), QFileDialog::ShowDirsOnly);\n         ui->downloadPath->setText(folder);\n    }\n    ```", "```cpp\n    void MainWindow::on_fileList_itemDoubleClicked(QListWidgetItem *item) {\n         downloadFileName = item->text();\n         QString folder = ui->downloadPath->text();\n         if (folder != \"\" && QDir(folder).exists()) {\n               controlChannel->command(\"PORT\", dataChannel->portspec().toUtf8());\n                           controlChannel->command(\"RETR\", downloadFileName.toUtf8());\n         }\n         else {\n               QMessageBox::warning(this, \"Invalid Path\", \"Please set the download path before download.\");\n    }}\n    ```", "```cpp\n    void MainWindow::serverConnected(const QHostAddress &address, int port){\n        qDebug() << \"Listening to:\" << address << port;\n        dataChannel->listen(address);\n        controlChannel->command(\"USER\", username.toUtf8());\n        controlChannel->command(\"PASS\", password.toUtf8());\n        getFileList();\n    }\n    ```", "```cpp\n    void MainWindow::serverReply(int code, const QString &parameters){\n        if (code == 150 && uploadFileName != \"\"){\n            QFile* file = new QFile(ui->uploadFileInput->text());\n            QFileInfo fileInfo(*file);\n            uploadFileName = fileInfo.fileName();\n            if (file->open(QIODevice::ReadOnly)){\n                QThread::msleep(1000);\n                QByteArray data = file->readAll();\n                dataChannel->sendData(data + \"\\n\\r\");\n                qDebug() << data;\n            } else {\n                QMessageBox::warning(this, \"Invalid File\", \"Failed to open file for upload.\");\n            }\n        }\n        if (code == 226 && uploadFileName != \"\"){\n            uploadFileName = \"\";\n            QMessageBox::warning(this, \"Upload Success\", \"File successfully uploaded.\");\n        }\n    }\n    ```", "```cpp\n    void MainWindow::dataReceived(const QByteArray &data){\n        if (data.startsWith(\"type=file\")){\n            ui->fileList->clear();\n            QStringList fileList = QString(data).split(\"\\r\\n\");\n            if (fileList.length() > 0){\n                for (int i = 0; i < fileList.length(); ++i){\n                    if (fileList.at(i) != \"\"){\n                        QStringList fileInfo = fileList.at(i).split(\";\");\n                        QString fileName = fileInfo.at(4).simplified();\n                        ui->fileList->addItem(fileName);\n                    }\n                 }\n            }\n        } else {\n            QString folder = ui->downloadPath->text();\n            QFile file(folder + \"/\" + downloadFileName);\n            file.open(QIODevice::WriteOnly);\n            file.write((data));\n            file.close();\n            QMessageBox::information(this, \"Success\", \"File successfully downloaded.\");\n        }\n    }\n    ```"]