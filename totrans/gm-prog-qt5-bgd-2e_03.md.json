["```cpp\n#include \"mainwindow.h\"\n#include <QApplication>\nint main(int argc, char *argv[])\n{\n    QApplication a(argc, argv);\n    MainWindow w;\n    w.show();\n    return a.exec();\n}\n```", "```cpp\nQT += core gui\ngreaterThan(QT_MAJOR_VERSION, 4): QT += widgets\nTARGET = tictactoe\nTEMPLATE = app\nSOURCES += main.cpp mainwindow.cpp\nHEADERS += mainwindow.h\nFORMS   += mainwindow.ui\n```", "```cpp\nCONFIG += c++11\n```", "```cpp\nsignals:\n    void valueChanged(int newValue);\n```", "```cpp\nvoid MyClass::setValue(int newValue) {\n    m_value = newValue;\n    emit valueChanged(newValue);\n}\n```", "```cpp\nconnect(button,   &QPushButton::clicked,\n        lineEdit, &QLineEdit::clear);\n```", "```cpp\nconnect(button, &QPushButton::clicked, someFunction); \n```", "```cpp\nconnect(pushButton, &QPushButton::clicked, []()\n{\n    qDebug() << \"clicked!\";\n});\n```", "```cpp\nconnect(pushButton, &QPushButton::clicked, [label]()\n{\n    label->setText(\"button was clicked\");\n});\n```", "```cpp\nclass Functor {\npublic:\n    Functor(const QString &name) : m_name(name) {}\n void operator()(bool toggled) const {\n qDebug() << m_name << \": button state changed to\" << toggled;\n }\nprivate:\n    QString m_name;\n};\n\nint main(int argc, char *argv[])\n{\n    QApplication a(argc, argv);\n    QPushButton *button = new QPushButton();\n    button->setCheckable(true);\n QObject::connect(button, &QPushButton::toggled,\n Functor(\"my functor\"));\n    button->show();\n    return a.exec();\n}\n```", "```cpp\nconnect(spinBox, SIGNAL(valueChanged(int)),\n        dial,    SLOT(setValue(int)));\n```", "```cpp\nconnect(spinBox,\n        static_cast<void (QSpinBox::*)(int)>(&QSpinBox::valueChanged), \n        ...);\n```", "```cpp\nsignals:\n    void valueChanged(int value, QPrivateSignal);\n```", "```cpp\nclass MainWindow : public QMainWindow\n{\n    Q_OBJECT\npublic:\n    explicit MainWindow(QWidget *parent = nullptr);\n    ~MainWindow();\nprivate slots:\n void startNewGame();\n}\n```", "```cpp\nvoid MainWindow::startNewGame()\n{\n qDebug() << \"button clicked!\";\n}\n```", "```cpp\nui->setupUi(this);\nconnect(ui->startNewGame, &QPushButton::clicked,\n this, &MainWindow::startNewGame);\n```", "```cpp\nvoid MainWindow::startNewGame()\n{\n    ui->player1Name->setText(tr(\"Alice\"));\n    ui->player2Name->setText(tr(\"Bob\"));\n}\n```", "```cpp\n#ifndef TICTACTOEWIDGET_H\n#define TICTACTOEWIDGET_H\n#include <QWidget>\nclass TicTacToeWidget : public QWidget\n{\n    Q_OBJECT\npublic:\n    TicTacToeWidget(QWidget *parent = nullptr);\n    ~TicTacToeWidget();\nprivate:\n    QVector<QPushButton*> m_board;\n};\n#endif // TICTACTOEWIDGET_H \n```", "```cpp\nQGridLayout *gridLayout = new QGridLayout(this);\n```", "```cpp\nfor(int row = 0; row < 3; ++row) {\n    for(int column = 0; column < 3; ++column) {\n        QPushButton *button = new QPushButton(\" \");\n        gridLayout->addWidget(button, row, column);\n        m_board.append(button);\n    }\n} \n```", "```cpp\nvoid TicTacToeWidget::someSlot() {\n    QPushButton *button = static_cast<QPushButton*>(sender());\n    int buttonIndex = m_board.indexOf(button);\n    // ...\n} \n```", "```cpp\nQGridLayout *gridLayout = new QGridLayout(this);\nQSignalMapper *mapper = new QSignalMapper(this);\nfor(int row = 0; row < 3; ++row) {\n    for(int column = 0; column < 3; ++column) {\n        QPushButton *button = new QPushButton(\" \");\n        gridLayout->addWidget(button, row, column);\n        m_board.append(button);\n        mapper->setMapping(button, m_board.count() - 1);\n        connect(button, SIGNAL(clicked()), mapper, SLOT(map()));\n    }\n}\nconnect(mapper, SIGNAL(mapped(int)),\n        this,   SLOT(handleButtonClick(int)));\n```", "```cpp\nenum class Player {\n    Invalid, Player1, Player2, Draw\n};\nQ_ENUM(Player)\n```", "```cpp\nPlayer m_currentPlayer; \n```", "```cpp\nm_currentPlayer = Player::Invalid;\n```", "```cpp\nPlayer currentPlayer() const \n{ \n    return m_currentPlayer; \n}\nvoid setCurrentPlayer(Player p)\n{\n    if(m_currentPlayer == p) {\n        return;\n    }\n    m_currentPlayer = p;\n    emit currentPlayerChanged(p);\n} \n```", "```cpp\nsignals:\n    void currentPlayerChanged(Player);\n    void gameOver(Player); \n```", "```cpp\nprivate slots:\n    void handleButtonClick(int index);\n```", "```cpp\nvoid TicTacToeWidget::handleButtonClick(int index)\n{\n    if (m_currentPlayer == Player::Invalid) {\n        return; // game is not started\n    }\n    if(index < 0 || index >= m_board.size()) {\n        return; // out of bounds check\n    }\n    QPushButton *button = m_board[index];\n    if(button->text() != \" \") return; // invalid move\n    button->setText(currentPlayer() == Player::Player1 ? \"X\" : \"O\");\n    Player winner = checkWinCondition();\n    if(winner == Player::Invalid) {\n        setCurrentPlayer(currentPlayer() == Player::Player1 ?\n                         Player::Player2 : Player::Player1);\n        return;\n    } else {\n        emit gameOver(winner);\n    }\n}\n```", "```cpp\nvoid TicTacToeWidget::initNewGame() {\n    for(QPushButton *button: m_board) {\n        button->setText(\" \");\n    }\n    setCurrentPlayer(Player::Player1);\n}\n```", "```cpp\nvoid MainWindow::startNewGame()\n{\n    ui->player1Name->setText(tr(\"Alice\"));\n    ui->player2Name->setText(tr(\"Bob\"));\n    ui->gameBoard->initNewGame();\n}\n```", "```cpp\nui->setupUi(this);\nconnect(ui->gameBoard, &TicTacToeWidget::currentPlayerChanged,\n        this, &MainWindow::updateNameLabels);\n```", "```cpp\nprivate:\n    void setLabelBold(QLabel *label, bool isBold);\nprivate slots:\n    void updateNameLabels();\n```", "```cpp\nvoid MainWindow::setLabelBold(QLabel *label, bool isBold)\n{\n    QFont f = label->font();\n    f.setBold(isBold);\n    label->setFont(f);\n}\n\nvoid MainWindow::updateNameLabels()\n{\n    setLabelBold(ui->player1Name,\n        ui->gameBoard->currentPlayer() == \n            TicTacToeWidget::Player::Player1);\n    setLabelBold(ui->player2Name,\n        ui->gameBoard->currentPlayer() == \n            TicTacToeWidget::Player::Player2);\n}\n```", "```cpp\nvoid MainWindow::handleGameOver(TicTacToeWidget::Player winner) {\n    QString message;\n    if(winner == TicTacToeWidget::Player::Draw) {\n        message = tr(\"Game ended with a draw.\");\n    } else {\n        QString winnerName = winner == TicTacToeWidget::Player::Player1 ?\n                    ui->player1Name->text() : ui->player2Name->text();\n        message = tr(\"%1 wins\").arg(winnerName);\n    }\n    QMessageBox::information(this, tr(\"Info\"), message);\n}\n```", "```cpp\nvoid setPlayer1Name(const QString &p1name);\nvoid setPlayer2Name(const QString &p2name); \n```", "```cpp\nvoid ConfigurationDialog::setPlayer1Name(const QString &p1name)\n{\n    ui->player1Name->setText(p1name);\n}\nvoid ConfigurationDialog::setPlayer2Name(const QString &p2name)\n{\n    ui->player2Name->setText(p2name);\n} \n```", "```cpp\nQString player1Name() const;\nQString player2Name() const;\n```", "```cpp\nQString ConfigurationDialog::player1Name() const\n{\n    return ui->player1Name->text();\n}\nQString ConfigurationDialog::player2Name() const\n{\n    return ui->player2Name->text();\n}\n```", "```cpp\nConfigurationDialog dialog(this);\nif(dialog.exec() == QDialog::Rejected) {\n    return; // do nothing if dialog rejected\n}\nui->player1Name->setText(dialog.player1Name());\nui->player2Name->setText(dialog.player2Name());\nui->gameBoard->initNewGame();\n```", "```cpp\nQPushButton *button = new QPushButton(\" \");\nbutton->setSizePolicy(QSizePolicy::Preferred,\n                      QSizePolicy::Preferred);\n```", "```cpp\nvoid ConfigurationDialog::updateOKButtonState()\n{\n    QPushButton *okButton = ui->buttonBox->button(QDialogButtonBox::Ok);\n    okButton->setEnabled(!ui->player1Name->text().isEmpty() &&\n                         !ui->player2Name->text().isEmpty());\n}\n```", "```cpp\nui->setupUi(this);\nconnect(ui->player1Name, &QLineEdit::textChanged,\n this, &ConfigurationDialog::updateOKButtonState);\nconnect(ui->player2Name, &QLineEdit::textChanged,\n this, &ConfigurationDialog::updateOKButtonState);\nupdateOKButtonState();\n```", "```cpp\nconnect(ui->startNewGame, &QAction::triggered,\n        this, &MainWindow::startNewGame);\n```", "```cpp\nconnect(ui->quit, &QAction::triggered,\n        qApp,     &QApplication::quit);\n```"]