["```cpp\nextends Area2D\n\nexport (int) var speed\n\nvar tile_size = 64\nvar can_move = true\nvar facing = 'right'\nvar moves = {'right': Vector2(1, 0),\n             'left': Vector2(-1, 0),\n             'up': Vector2(0, -1),\n             'down': Vector2(0, 1)}\nonready var raycasts = {'right': $RayCastRight,\n                        'left': $RayCastLeft,\n                        'up': $RayCastUp,\n                        'down': $RayCastDown}\n```", "```cpp\nfunc move(dir):\n    $AnimationPlayer.playback_speed = speed\n    facing = dir\n    if raycasts[facing].is_colliding():\n        return\n\n    can_move = false\n    $AnimationPlayer.play(facing)\n    $MoveTween.interpolate_property(self, \"position\", position,\n                position + moves[facing] * tile_size,\n                1.0 / speed, Tween.TRANS_SINE, Tween.EASE_IN_OUT)\n    $MoveTween.start()\n    return true\n```", "```cpp\nfunc _on_MoveTween_tween_completed( object, key ):\n    can_move = true\n```", "```cpp\n\nextends \"res://character/Character.gd\"\n\nsignal moved\n\nfunc _process(delta):\n    if can_move:\n        for dir in moves.keys():\n            if Input.is_action_pressed(dir):\n                if move(dir):\n                    emit_signal('moved')\n```", "```cpp\nsignal dead\nsignal grabbed_key\nsignal win\n```", "```cpp\nfunc _on_Player_area_entered( area ):\n    if area.is_in_group('enemies'):\n        emit_signal('dead')\n    if area.has_method('pickup'):\n        area.pickup()\n    if area.type == 'key_red':\n        emit_signal('grabbed_key')\n    if area.type == 'star':\n        emit_signal('win')\n```", "```cpp\nextends \"res://character/Character.gd\"\n\nfunc _ready():\n    can_move = false\n    facing = moves.keys()[randi() % 4]\n    yield(get_tree().create_timer(0.5), 'timeout')\n    can_move = true\n\nfunc _process(delta):\n    if can_move:\n         if not move(facing) or randi() % 10 > 5:\n             facing = moves.keys()[randi() % 4] \n```", "```cpp\nextends Area2D\n\nvar textures = {'coin': 'res://assets/coin.png',\n                'key_red': 'res://assets/keyRed.png',\n                'star': 'res://assets/star.png'}\nvar type\n\nfunc _ready():\n    $Tween.interpolate_property($Sprite, 'scale', Vector2(1, 1),\n        Vector2(3, 3), 0.5, Tween.TRANS_QUAD, Tween.EASE_IN_OUT)\n    $Tween.interpolate_property($Sprite, 'modulate',\n        Color(1, 1, 1, 1), Color(1, 1, 1, 0), 0.5,\n        Tween.TRANS_QUAD, Tween.EASE_IN_OUT)\n\nfunc init(_type, pos):\n    $Sprite.texture = load(textures[_type])\n    type = _type\n    position = pos\n\nfunc pickup():\n    $CollisionShape2D.disabled = true\n    $Tween.start()\n```", "```cpp\nfunc _on_Tween_tween_completed( object, key ):\n     queue_free()\n```", "```cpp\nextends Node2D\n\nexport (PackedScene) var Enemy\nexport (PackedScene) var Pickup\n\nonready var items = $Items\nvar doors = []\n```", "```cpp\nfunc _ready():\n    randomize()\n    $Items.hide()\n    set_camera_limits()\n    var door_id = $Walls.tile_set.find_tile_by_name('door_red')\n    for cell in $Walls.get_used_cells_by_id(door_id):\n        doors.append(cell)\n    spawn_items()\n    $Player.connect('dead', self, 'game_over')\n    $Player.connect('grabbed_key', self, '_on_Player_grabbed_key')\n    $Player.connect('win', self, '_on_Player_win')\n```", "```cpp\nfunc set_camera_limits():\n    var map_size = $Ground.get_used_rect()\n    var cell_size = $Ground.cell_size\n    $Player/Camera2D.limit_left = map_size.position.x * cell_size.x\n    $Player/Camera2D.limit_top = map_size.position.y * cell_size.y\n    $Player/Camera2D.limit_right = map_size.end.x * cell_size.x\n    $Player/Camera2D.limit_bottom = map_size.end.y * cell_size.y\n```", "```cpp\nfunc spawn_items():\n    for cell in items.get_used_cells():\n        var id = items.get_cellv(cell)\n        var type = items.tile_set.tile_get_name(id)\n        var pos = items.map_to_world(cell) + items.cell_size/2\n        match type:\n            'slime_spawn':\n                var s = Enemy.instance()\n                s.position = pos\n                s.tile_size = items.cell_size\n                add_child(s)\n            'player_spawn':\n                $Player.position = pos\n                $Player.tile_size = items.cell_size\n            'coin', 'key_red', 'star':\n                var p = Pickup.instance()\n                p.init(type, pos)\n                add_child(p)\n```", "```cpp\nfunc game_over():\n    pass\n\nfunc _on_Player_win():\n    pass\n\n```", "```cpp\nfunc _on_Player_grabbed_key():\n    for cell in doors:\n        $Walls.set_cellv(cell, -1)\n```", "```cpp\nextends Node\n\nvar levels = ['res://levels/Level1.tscn',\n              'res://levels/Level2.tscn']\nvar current_level\n\nvar start_screen = 'res://ui/StartScreen.tscn'\nvar end_screen = 'res://ui/EndScreen.tscn'\n\nfunc new_game():\n    current_level = -1\n    next_level()\n\nfunc game_over():\n    get_tree().change_scene(end_screen)\n\nfunc next_level():\n    current_level += 1\n    if current_level >= Global.levels.size():\n        # no more levels to load :(\n        game_over()\n    else:\n        get_tree().change_scene(levels[current_level])\n```", "```cpp\nextends Control\n\nfunc _input(event):\n    if event.is_action_pressed('ui_select'):\n        Global.new_game()\n```", "```cpp\nextends Control\n\nfunc _on_Timer_timeout():\n    get_tree().change_scene(Global.start_screen)\n```", "```cpp\nfunc _on_Player_win():\n    Global.next_level()\n\nfunc game_over():\n    Global.game_over()\n```", "```cpp\nfunc pickup():\n    match type:\n        'coin':\n            emit_signal('coin_pickup', 1)\n    $CollisionShape2D.disabled = true\n    $Tween.start()\n```", "```cpp\nextends CanvasLayer\n\nfunc _ready():\n    $MarginContainer/ScoreLabel.text = str(Global.score)\n\nfunc update_score(value):\n    Global.score += value\n    $MarginContainer/ScoreLabel.text = str(Global.score)\n```", "```cpp\n    'coin', 'key_red', 'star':\n        var p = Pickup.instance()\n        p.init(type, pos)\n        add_child(p)\n        p.connect('coin_pickup', $HUD, 'update_score')\n```", "```cpp\nvar highscore = 0\nvar score_file = \"user://highscore.txt\"\n\nfunc setup():\n    var f = File.new()\n    if f.file_exists(score_file):\n        f.open(score_file, File.READ)\n        var content = f.get_as_text()\n        highscore = int(content)\n        f.close()\n```", "```cpp\nfunc game_over():\n    if score > highscore:\n        highscore = score\n        save_score()\n    get_tree().change_scene(end_screen)\n\nfunc save_score():\n    var f = File.new()\n    f.open(score_file, File.WRITE)\n    f.store_string(str(highscore))\n    f.close()\n```", "```cpp\nfunc _ready():\n    setup()\n```", "```cpp\nfunc _ready():\n    $ScoreNotice.text = \"High Score: \" + str(Global.highscore)\n```", "```cpp\nif area.is_in_group('enemies'):\n    area.hide()\n    set_process(false)\n    $CollisionShape2D.disabled = true\n    $AnimationPlayer.play(\"die\")\n    yield($AnimationPlayer, 'animation_finished')\n    emit_signal('dead')\n```", "```cpp\nfunc _ready():\n    $Sprite.scale = Vector2(1, 1)\n```", "```cpp\nmatch type:\n    'coin':\n        emit_signal('coin_pickup', 1)\n        $CoinPickup.play()\n    'key_red':\n        $KeyPickup.play()\n```", "```cpp\n    if area.type == 'star':\n        $Win.play()\n        $CollisionShape2D.disabled = true\n        yield($Win, \"finished\")\n        emit_signal('win')\n```", "```cpp\n\nif area.is_in_group('enemies'):\n    area.hide()\n    $CollisionShape2D.disabled = true\n    set_process(false)\n    $Lose.play()\n    $AnimationPlayer.play(\"die\")\n    yield($Lose, 'finished')\n    emit_signal('dead')\n```"]