["```cpp\ngit clone https://github.com/codeplea/Hands-On-Network-Programming-with-C\ncd Hands-On-Network-Programming-with-C/chap08\n```", "```cpp\n/*chap08.h*/\n\n#if defined(_WIN32)\n#ifndef _WIN32_WINNT\n#define _WIN32_WINNT 0x0600\n#endif\n#include <winsock2.h>\n#include <ws2tcpip.h>\n#pragma comment(lib, \"ws2_32.lib\")\n\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <netdb.h>\n#include <unistd.h>\n#include <errno.h>\n\n#endif\n```", "```cpp\n/*chap08.h continued*/\n\n#if defined(_WIN32)\n#define ISVALIDSOCKET(s) ((s) != INVALID_SOCKET)\n#define CLOSESOCKET(s) closesocket(s)\n#define GETSOCKETERRNO() (WSAGetLastError())\n\n#else\n#define ISVALIDSOCKET(s) ((s) >= 0)\n#define CLOSESOCKET(s) close(s)\n#define SOCKET int\n#define GETSOCKETERRNO() (errno)\n#endif\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n```", "```cpp\nnslookup -type=mx gmail.com\n```", "```cpp\ndig mx gmail.com\n```", "```cpp\nS: 220 mail.example.com SMTP server ready\nC: HELO mail.example.net\nS: 250 Hello mail.example.net [192.0.2.67]\nC: MAIL FROM:<alice@example.net>\nS: 250 OK\nC: RCPT TO:<bob@example.com>\nS: 250 Accepted\nC: DATA\nS: 354 Enter message, ending with \".\" on a line by itself\nC: Subject: Re: The Cake\nC: Date: Fri, 03 May 2019 02:31:20 +0000\nC:\nC: Do NOT forget to bring the cake!\nC: .\nS: 250 OK\nC: QUIT\nS: 221 closing connection\n```", "```cpp\nC: MAIL FROM:<alice@example.net>\nS: 250 OK\nC: RCPT TO:<not-a-real-user@example.com>\nS: 550-The account you tried to deliver to does not\nS: 550-exist. Please double-check the recipient's\nS: 550 address for typos and try again.\n```", "```cpp\nFrom: Alice Doe <alice@example.net>\nTo: Bob Doe <bob@example.com>\nSubject: Re: The Cake\nDate: Fri, 03 May 2019 02:31:20 +0000\n\nHi Bob,\n\nDo NOT forget to bring the cake!\n\nBest,\nAlice\n```", "```cpp\n/*smtp_send.c*/\n\n#include \"chap08.h\"\n#include <ctype.h>\n#include <stdarg.h>\n```", "```cpp\n/*smtp_send.c continued*/\n\n#define MAXINPUT 512\n#define MAXRESPONSE 1024\n```", "```cpp\n/*smtp_send.c continued*/\n\nvoid get_input(const char *prompt, char *buffer)\n{\n    printf(\"%s\", prompt);\n\n    buffer[0] = 0;\n    fgets(buffer, MAXINPUT, stdin);\n    const int read = strlen(buffer);\n    if (read > 0)\n        buffer[read-1] = 0;\n}\n```", "```cpp\n/*smtp_send.c continued*/\n\nvoid send_format(SOCKET server, const char *text, ...) {\n    char buffer[1024];\n    va_list args;\n    va_start(args, text);\n    vsprintf(buffer, text, args);\n    va_end(args);\n\n    send(server, buffer, strlen(buffer), 0);\n\n    printf(\"C: %s\", buffer);\n}\n```", "```cpp\n/*response 1*/\n\n250 Message received!\n/*response 2*/\n\n250-Message\n250 received!\n```", "```cpp\n/*smtp_send.c continued*/\n\nint parse_response(const char *response) {\n    const char *k = response;\n    if (!k[0] || !k[1] || !k[2]) return 0;\n    for (; k[3]; ++k) {\n        if (k == response || k[-1] == '\\n') {\n            if (isdigit(k[0]) && isdigit(k[1]) && isdigit(k[2])) {\n                if (k[3] != '-') {\n                    if (strstr(k, \"\\r\\n\")) {\n                        return strtol(k, 0, 10);\n                    }\n                }\n            }\n        }\n    }\n    return 0;\n}\n```", "```cpp\n/*smtp_send.c continued*/\n\nvoid wait_on_response(SOCKET server, int expecting) {\n    char response[MAXRESPONSE+1];\n    char *p = response;\n    char *end = response + MAXRESPONSE;\n\n    int code = 0;\n```", "```cpp\n/*smtp_send.c continued*/\n\n    do {\n        int bytes_received = recv(server, p, end - p, 0);\n        if (bytes_received < 1) {\n            fprintf(stderr, \"Connection dropped.\\n\");\n            exit(1);\n        }\n\n        p += bytes_received;\n        *p = 0;\n\n        if (p == end) {\n            fprintf(stderr, \"Server response too large:\\n\");\n            fprintf(stderr, \"%s\", response);\n            exit(1);\n        }\n\n        code = parse_response(response);\n\n    } while (code == 0);\n```", "```cpp\n/*smtp_send.c continued*/\n\n    if (code != expecting) {\n        fprintf(stderr, \"Error from server:\\n\");\n        fprintf(stderr, \"%s\", response);\n        exit(1);\n    }\n\n    printf(\"S: %s\", response);\n}\n```", "```cpp\n/*smtp_send.c continued*/\n\nSOCKET connect_to_host(const char *hostname, const char *port) {\n    printf(\"Configuring remote address...\\n\");\n    struct addrinfo hints;\n    memset(&hints, 0, sizeof(hints));\n    hints.ai_socktype = SOCK_STREAM;\n    struct addrinfo *peer_address;\n    if (getaddrinfo(hostname, port, &hints, &peer_address)) {\n        fprintf(stderr, \"getaddrinfo() failed. (%d)\\n\", GETSOCKETERRNO());\n        exit(1);\n    }\n\n    printf(\"Remote address is: \");\n    char address_buffer[100];\n    char service_buffer[100];\n    getnameinfo(peer_address->ai_addr, peer_address->ai_addrlen,\n            address_buffer, sizeof(address_buffer),\n            service_buffer, sizeof(service_buffer),\n            NI_NUMERICHOST);\n    printf(\"%s %s\\n\", address_buffer, service_buffer);\n```", "```cpp\n/*smtp_send.c continued*/\n\n    printf(\"Creating socket...\\n\");\n    SOCKET server;\n    server = socket(peer_address->ai_family,\n            peer_address->ai_socktype, peer_address->ai_protocol);\n    if (!ISVALIDSOCKET(server)) {\n        fprintf(stderr, \"socket() failed. (%d)\\n\", GETSOCKETERRNO());\n        exit(1);\n    }\n```", "```cpp\n/*smtp_send.c continued*/\n\n    printf(\"Connecting...\\n\");\n    if (connect(server,\n                peer_address->ai_addr, peer_address->ai_addrlen)) {\n        fprintf(stderr, \"connect() failed. (%d)\\n\", GETSOCKETERRNO());\n        exit(1);\n    }\n    freeaddrinfo(peer_address);\n\n    printf(\"Connected.\\n\\n\");\n\n    return server;\n}\n```", "```cpp\n/*smtp_send.c continued*/\n\nint main() {\n\n#if defined(_WIN32)\n    WSADATA d;\n    if (WSAStartup(MAKEWORD(2, 2), &d)) {\n        fprintf(stderr, \"Failed to initialize.\\n\");\n        return 1;\n    }\n#endif\n```", "```cpp\n    /*smtp_send.c continued*/\n\n    char hostname[MAXINPUT];\n    get_input(\"mail server: \", hostname);\n\n    printf(\"Connecting to host: %s:25\\n\", hostname);\n\n    SOCKET server = connect_to_host(hostname, \"25\");\n```", "```cpp\n/*smtp_send.c continued*/\n\n    wait_on_response(server, 220);\n```", "```cpp\n/*smtp_send.c continued*/\n\n    send_format(server, \"HELO HONPWC\\r\\n\");\n    wait_on_response(server, 250);\n```", "```cpp\n/*smtp_send.c continued*/\n\n    char sender[MAXINPUT];\n    get_input(\"from: \", sender);\n    send_format(server, \"MAIL FROM:<%s>\\r\\n\", sender);\n    wait_on_response(server, 250);\n\n    char recipient[MAXINPUT];\n    get_input(\"to: \", recipient);\n    send_format(server, \"RCPT TO:<%s>\\r\\n\", recipient);\n    wait_on_response(server, 250);\n```", "```cpp\n/*smtp_send.c continued*/\n\n    send_format(server, \"DATA\\r\\n\");\n    wait_on_response(server, 354);\n```", "```cpp\n/*smtp_send.c continued*/\n\n    char subject[MAXINPUT];\n    get_input(\"subject: \", subject);\n\n    send_format(server, \"From:<%s>\\r\\n\", sender);\n    send_format(server, \"To:<%s>\\r\\n\", recipient);\n    send_format(server, \"Subject:%s\\r\\n\", subject);\n```", "```cpp\n/*smtp_send.c continued*/\n\n    time_t timer;\n    time(&timer);\n\n    struct tm *timeinfo;\n    timeinfo = gmtime(&timer);\n\n    char date[128];\n    strftime(date, 128, \"%a, %d %b %Y %H:%M:%S +0000\", timeinfo);\n\n    send_format(server, \"Date:%s\\r\\n\", date);\n```", "```cpp\n/*smtp_send.c continued*/\n\n    send_format(server, \"\\r\\n\");\n```", "```cpp\n/*smtp_send.c continued*/\n\n    printf(\"Enter your email text, end with \\\".\\\" on a line by itself.\\n\");\n\n    while (1) {\n        char body[MAXINPUT];\n        get_input(\"> \", body);\n        send_format(server, \"%s\\r\\n\", body);\n        if (strcmp(body, \".\") == 0) {\n            break;\n        }\n    }\n```", "```cpp\n/*smtp_send.c continued*/\n\n    wait_on_response(server, 250);\n\n    send_format(server, \"QUIT\\r\\n\");\n    wait_on_response(server, 221);\n```", "```cpp\n/*smtp_send.c continued*/\n\n    printf(\"\\nClosing socket...\\n\");\n    CLOSESOCKET(server);\n\n#if defined(_WIN32)\n    WSACleanup();\n#endif\n\n    printf(\"Finished.\\n\");\n    return 0;\n}\n```", "```cpp\ngcc smtp_send.c -o smtp_send.exe -lws2_32\nsmtp_send.exe\n```", "```cpp\ngcc smtp_send.c -o smtp_send\n./smtp_send\n```", "```cpp\n/*email.txt*/\n\nmail-server.example.net\nbob@example.com\nalice@example.net\nRe: The Cake\nHi Alice,\n\nWhat about the cake then?\n\nBob\n.\n```", "```cpp\ncat email.txt | ./smtp_send\n```", "```cpp\nFrom: Alice Doe <alice@example.net>\nTo: Bob Doe <bob@example.com>\nSubject: Re: The Cake\nDate: Fri, 03 May 2019 02:31:20 +0000\nContent-Type: text/plain\n\nHi Bob,\n\nDo NOT forget to bring the cake!\n\nBest,\nAlice\n```", "```cpp\nFrom: Alice Doe <alice@example.net>\nTo: Bob Doe <bob@example.com>\nSubject: Re: The Cake\nDate: Fri, 03 May 2019 02:31:20 +0000\nContent-Type: text/html\n\nHi Bob,<br>\n<br>\nDo <strong>NOT</strong> forget to bring the cake!<br>\n<br>\nBest,<br>\nAlice<br>\n```", "```cpp\nFrom: Alice Doe <alice@example.net>\nTo: Bob Doe <bob@example.com>\nSubject: Re: The Cake\nDate: Fri, 03 May 2019 02:31:20 +0000\nMIME-Version: 1.0\nContent-Type: multipart/alternative; boundary=\"SEPARATOR\"\n\nThis is a message with multiple parts in MIME format.\n--SEPARATOR\nContent-Type: text/plain\n\nHi Bob,\n\nDo NOT forget to bring the cake!\n\nBest,\nAlice\n--SEPARATOR\nContent-Type: text/html\n\nHi Bob,<br>\n<br>\nDo <strong>NOT</strong> forget to bring the cake!<br>\n<br>\nBest,<br>\nAlice<br>\n--SEPARATOR--\n```", "```cpp\nFrom: Alice Doe <alice@example.net>\nTo: Bob Doe <bob@example.com>\nSubject: Re: The Cake\nDate: Fri, 03 May 2019 02:31:20 +0000\nMIME-Version: 1.0\nContent-Type: multipart/alternative; boundary=\"SEPARATOR\"\n\nThis is a message with multiple parts in MIME format.\n--SEPARATOR\nContent-Type: text/plain\n\nHi Bob,\n\nPlease see the attached text file.\n\nBest,\nAlice\n--SEPARATOR\nContent-Disposition: attachment; filename=my_file.txt;\n  modification-date=\"Fri, 03 May 2019 02:26:51 +0000\";\nContent-Type: application/octet-stream\nContent-Transfer-Encoding: base64\n\nVGhpcyBpcyBhIHNpbXBsZSB0ZXh0IG1lc3NhZ2Uu\n--SEPARATOR--\n```", "```cpp\n550-5.7.1 [192.0.2.67] The IP you're using to send mail is not authorized\n550-5.7.1 to send email directly to our servers. Please use the SMTP\n550-5.7.1 relay at your service provider instead. Learn more at\n550 5.7.1  https://support.google.com/mail/?p=NotAuthorizedError\n```"]