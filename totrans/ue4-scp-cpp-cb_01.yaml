- en: UE4 Development Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will outline some basic recipes for getting started in
    **Unreal Engine 4** (**UE4**) game development, and the basic tools that we will
    use for creating the code that makes our game. This will include the following
    recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Visual Studio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and building your first C++ project in Visual Studio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing the code font and color in Visual Studio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extension – changing the color theme in Visual Studio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Formatting your code (Autocomplete settings) in Visual Studio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shortcut keys in Visual Studio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extended mouse usage in Visual Studio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UE4 – installation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UE4 – first project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UE4 – creating your first level
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UE4 – hot reloading
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UE4 – logging with UE_LOG
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UE4 – making an FString from FStrings and other variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating a game is an elaborate task that will require a combination of **assets**
    and **code**. To create assets and code, we'll need some pretty advanced tools,
    including **art tools**, **sound tools**, **level-editing tools**, and **code-editing
    tools**. In this chapter, we'll discuss finding suitable tools for asset creation
    and coding. Assets include any visual artwork (2D sprites, 3D models), audio (music
    and sound effects), and game levels. Code is the text (usually C++) that instructs
    the computer on how to tie these assets together to make a game world and level,
    and how to make that game world *play*. There are dozens of very good tools for
    each task; we will explore a couple of each, and make some recommendations. Game
    editing tools, especially, are hefty programs that require a powerful CPU and
    lots of memory, and very good, ideal GPUs for good performance. Protecting your
    assets and work is also a necessary practice. We'll explore and describe source
    control, which is how you back up your work on a remote server. An introduction
    to UE4 programming is also included, and we will also explore basic logging functions
    and library use. Significant planning is also required to get these tasks done,
    so we'll use a task planner software package to do so.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As listed on UE4's FAQs page, it is recommend to have a a desktop PC with Windows
    7 64-bit or a Mac with macOS X 10.9.2 or later, 8 GB of RAM, a quad-core Intel
    or AMD processor, and a DX11-compatible video card. UE4 will run on desktops and
    laptops below these recommendations, but performance may be limited.
  prefs: []
  type: TYPE_NORMAL
- en: For those using a Mac computer, Visual Studio for Mac currently does not support
    C++. You'll need to use a different IDE, such as Visual Studio Code or Xcode,
    instead.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Visual Studio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Visual Studio is an essential package for code editing when editing the C++
    code for your UE4 game.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We're going to set up a C++ coding environment to build our UE4 applications.
    We'll download Visual Studio 2017, install it, and set it up for UE4 C++ coding.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Begin by visiting [https://www.visualstudio.com/en-us/products/visual-studio-community-vs.aspx](https://www.visualstudio.com/en-us/products/visual-studio-community-vs.aspx).
    Click on Download VS Community 2017\. This downloads the ~1,250 KB loader/installer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/37a4e26f-1a6c-4d42-89cc-6616e08dada8.png)'
  prefs: []
  type: TYPE_IMG
- en: You can compare editions of Visual Studio at [https://visualstudio.microsoft.com/vs/compare/](https://visualstudio.microsoft.com/vs/compare/).
    The Community Edition of Visual Studio is fully adequate for UE4 development purposes
    in this book, that is, as long as you're an individual developer, doing academic
    research, or have fewer than six people on your team.
  prefs: []
  type: TYPE_NORMAL
- en: Launch the installer, and continue through the installer until you get to the
    window where you select the components of Visual Studio 2017 that you want to
    add to your PC. Keep in mind that the more features you select, the larger your
    installation will be.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Support for C++ is now an optional part of Visual Studio and isn''t installed
    by default, so we have to select that we want it installed. Under the Workloads
    section, scroll down to the Mobile and Gaming heading and check the Game development
    with C++ option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9046c623-4635-47df-a26a-ffa4bf6af989.png)'
  prefs: []
  type: TYPE_IMG
- en: It is possible to download the Unreal Engine installer at this point as well
    by selecting it under the Optional section in the Installation details menu, but
    we will be getting the latest version of the Epic Games launcher and Unreal Engine
    directly from Epic Games in a separate recipe later on in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: After you have selected the tools you'd like to add on to Visual Studio, click
    the Install button. The installer tool will download the required components and
    continue setup. After finishing installation, the installer may ask you to restart
    your computer. Go ahead and do so.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After you download and install Visual Studio 2017, launch it. You will be presented
    with a Sign in dialog box:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bd3b8bc4-3e7c-40dd-b5bd-4481abe3eb71.png)'
  prefs: []
  type: TYPE_IMG
- en: You can Sign in with your Microsoft account (the one you use to sign into Windows
    10) or Sign up for a new account. After you've signed in or signed up, you will
    be able to sign into Visual Studio itself. It may seem odd to sign into a desktop
    code editing program, but your sign-in will be used for source control commits
    to your repositories. On first signing into Visual Studio, you can select (one
    time only) a unique URL for your source code repositories, as hosted on Visualstudio.com
    ([https://visualstudio.microsoft.com/](https://visualstudio.microsoft.com/)).
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Visual Studio is an excellent editor, and you will have a fantastic time coding
    within it. In the next recipe, we'll discuss how to create and compile our own
    code.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on the Visual Studio setup process for C++ and UE4, check
    out [https://docs.unrealengine.com/en-us/Programming/Development/VisualStudioSetup ](https://docs.unrealengine.com/en-us/Programming/Development/VisualStudioSetup)
  prefs: []
  type: TYPE_NORMAL
- en: Creating and building your first C++ project in Visual Studio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to compile and run code from Visual Studio, it must be done from within
    a project.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will identify how to create an actual executable running
    program from Visual Studio. We will do so by creating a project in Visual Studio
    to host, organize, and compile the code.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In Visual Studio, each group of code is contained within something called a
    **Project**. A project is a buildable conglomerate of code and assets that produce
    either an executable (`.exe` runnable) or a library (`.lib` or `.dll`). A group
    of projects can be collected into something called a **Solution**. Let''s start
    by constructing a Visual Studio solution and a project for a console application,
    followed by constructing a UE4 sample project and solution:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Visual Studio and go to File | New | Project....
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will see a dialog, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f5817a52-3ab0-4606-9bb6-df5dce1f49df.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select Visual C++ in the pane on the left-hand side. In the middle pane, hit
    Windows Console Application. Name your project in the lower box, and then hit
    OK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0dd0f699-2838-4353-88f7-5554a3c10f6d.png)'
  prefs: []
  type: TYPE_IMG
- en: Once the application wizard completes, you will have created your first project.
    Both a solution and a project will be created.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see these, you need Solution Explorer. To ensure that Solution Explorer
    is showing, go to View | Solution Explorer (or press *Ctrl* + *Alt* + *L*). Solution
    Explorer is a window that usually appears docked on the right-hand side of the
    main editor window, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b282bb55-46b4-440a-855e-e9d29b9244e9.png)'
  prefs: []
  type: TYPE_IMG
- en: Solution Explorer location
  prefs: []
  type: TYPE_NORMAL
- en: It is possible to arrange your layout however you like inside Visual Studio.
    If you ever want to go back to the default layout, you can go to Window | Reset
    Window Layout.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Solution Explorer also displays all the files that are part of the project.
    This default solution already contains a few files, and we can add and remove
    new files in this section from here. As your project grows, more and more files
    are going to be added to your project. In the `Source Files` folder, you''ll also
    notice a file created called `FirstProject.cpp`, which will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Press *Ctrl* + *Shift* + *B* to build the project, then *Ctrl* + *F5* to run
    the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your executable will be created, and you will see a small black window with
    the results of your program''s run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/62f00ac5-ad2c-4a20-b0f8-4e86e9f0b720.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building an executable involves translating your C++ code from text language into
    a binary file. Running the file runs your game program, which is just the code
    text that occurs in the `main()` function between `{` and `}`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Build configurations are **styles** of build that we will discuss here. There
    are at least two important build configurations you should know about: Debug and
    Release. The Build configuration that''s currently selected is at the top of the
    editor, just below the toolbar in the default position:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2ddb187d-8c1a-44de-9e79-8d898d32b9cb.png)'
  prefs: []
  type: TYPE_IMG
- en: Location of the currently selected Build Configuration
  prefs: []
  type: TYPE_NORMAL
- en: Depending on which configuration you select, different compiler options are
    used. A Debug configuration typically includes extensive debug information in
    the build, as well as the ability to turn off optimizations to speed up compilation.
    Release builds are often optimized (either for size or for speed) and take a bit
    longer to build; they result in smaller or faster executables. Stepping through
    a file's behavior by moving through with the debugger line by line is often better
    in the Debug mode than the Release mode.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the code font and color in Visual Studio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Customizing the font and color in Visual Studio is not just about flexibility.
    Due to monitor resolutions being too high or low, it may become a necessity!
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Visual Studio is a highly customizable code editing tool. You might find the
    default fonts too small for your screen. This is easily adjustable by holding
    down the *Ctrl* key and using the mouse wheel to increase or decrease the size,
    but you may want to change the default value. Or, perhaps you may want to have
    more control, as you may want to change your code''s font size and color. You
    may also want to completely customize the coloration of keywords and the text
    background colors. The Fonts and Colors dialog box, which we''ll show you how
    to use in this section, allows you to completely customize every aspect of the
    code editor''s font and color:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9fed72ff-060d-4d5b-b45d-333297d2206d.png)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'From within Visual Studio, go to Tools | Options...:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6f99dc57-eb9b-45c8-9fca-d63960ee12be.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select Environment | Fonts and Colors from the dialog that appears. It will
    look like what''s shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3d185848-6e47-47d1-8426-757578c298cb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Play around with the font and font size of Text Editor/Plain Text. Click OK
    on the dialog, and see the results in the code-text editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6faf956d-11d4-48b2-aa8d-88c5de098c59.png)'
  prefs: []
  type: TYPE_IMG
- en: Modified font and colors
  prefs: []
  type: TYPE_NORMAL
- en: Text Editor/Plain Text describes the font and size that's used for all code
    text within the regular code editor. If you change the size of the font, the size
    changes for any text that's entered into the coding window (for all languages,
    including C, C++, C#, and others).
  prefs: []
  type: TYPE_NORMAL
- en: 'To return to what the menu has by default based on your theme, click on the
    Use Defaults button to the right of the Show Settings for: option.'
  prefs: []
  type: TYPE_NORMAL
- en: The color (foreground and background) is completely customizable for each item.
    Try this for the Text Editor/Keyword setting (affects all languages), or for items
    specific to C++, such as Text Editor/C++ Functions. Click OK, and you will see
    the changed color of the item reflected in the code editor.
  prefs: []
  type: TYPE_NORMAL
- en: 'You may also want to configure the font size of the Output Window, under the Show
    settings for: option, so click on the drop-down and select Output Window, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0b498932-bbab-428c-a5e4-b73af88ea458.png)'
  prefs: []
  type: TYPE_IMG
- en: The Output Window is the little window at the bottom of the editor that displays
    build results and compiler errors.
  prefs: []
  type: TYPE_NORMAL
- en: You can't save-out (export) or bring in (import) your changes to the Fonts and
    Colors dialog. But you can use something called the **Visual Studio Theme Editor
    Extension**. To learn more, refer to the *Extension – changing the color theme
    in Visual Studio* recipe of this chapter, to learn how to export and import customized
    color themes.
  prefs: []
  type: TYPE_NORMAL
- en: For this reason, you may want to avoid changing font colors from this dialog.
    You must use this dialog to change the font and font size, however, for any setting
    (at the time of writing).
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Fonts and Colors dialog simply changes the appearance of code in the text
    editor as well as for other windows, such as the output window. It is very useful
    for making your coding environment more comfortable.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you have customized your settings, you'll find that you may want to save
    your customized Fonts and Colors settings for others to use, or to put into another
    installation of Visual Studio, which you have on another machine. Unfortunately,
    by default, you won't be able to save-out your customized Fonts and Colors settings.
    You will need something called the Visual Studio Theme Editor extension to do
    so. We will explore this in the next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Extension – changing the color theme in Visual Studio* recipe describes
    how to import and export color themes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extension – changing the color theme in Visual Studio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By default, you cannot save the changes you make to the font colors and background
    settings that you make in the Fonts and Colors dialog. To fix this issue, Visual
    Studio has a feature called **Themes**. If you go to Tools | Options | Environment
    | General, you can change the theme to one of the three pre-installed stock themes
    (Light, Blue, and Dark):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e3eb472a-0844-4c28-b74e-7050f3746912.png)'
  prefs: []
  type: TYPE_IMG
- en: A different theme completely changes the look of Visual Studio, from the colors
    of the title bars to the background color of the text editor window.
  prefs: []
  type: TYPE_NORMAL
- en: You can also customize the theme of Visual Studio completely, but you'll need
    an extension to do so. Extensions are little programs that can be installed into
    Visual Studio to modify its behavior.
  prefs: []
  type: TYPE_NORMAL
- en: By default, your customized color settings cannot be saved or reloaded into
    another Visual Studio installation without the extension. With the extension,
    you will also be able to save your own color theme to share with others. You can
    also load the color settings made by another person or by yourself into a fresh
    copy of Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Go to Tools | Extensions and Updates....
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the dialog that appears, choose Online in the panel on the left-hand side.
    Start typing `Theme Editor` into the search box on the right. The Color Theme
    Editor for Visual Studio option will pop up in your search results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fc1673f3-3e23-441c-aaf6-635c81ae6419.png)'
  prefs: []
  type: TYPE_IMG
- en: Click the small Download button in the top right-hand corner of the entry. Click
    through the installation dialog prompts, allowing the plugin to install. You'll
    then notice on the bottom of the window that it is scheduled for installation
    but will wait until Visual Studio is closed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Close the window and Visual Studio, saving our project. After our program has
    closed, the VSIX Installer window will come up to confirm that you want to install
    the software. Click on the Modify button and it should start:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9184e6c8-dad1-453f-8209-5a3552d6534c.png)'
  prefs: []
  type: TYPE_IMG
- en: Alternatively, visit [https://marketplace.visualstudio.com/items?itemName=VisualStudioPlatformTeam.VisualStudio2017ColorThemeEditor](https://marketplace.visualstudio.com/items?itemName=VisualStudioPlatformTeam.VisualStudio2017ColorThemeEditor)
    and download/install the extension by double-clicking the `.vsix` file that comes
    from your browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once it has finished installing, open up Visual Studio again and open our project.
    One of the quickest ways to do so is from the Recent section on the Start Page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b036144a-38e0-430e-ab2a-fd94b29ba47c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After restarting, go to Tools | Customize Colors to open the Color Themes editor
    page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cbc7ab5a-8f95-4872-8093-4f174f8cb083.png)'
  prefs: []
  type: TYPE_IMG
- en: The Color Themes editor page
  prefs: []
  type: TYPE_NORMAL
- en: 'From the Color Themes dialog that appears, click on the little palette-shaped
    icon on the upper-right corner of the theme that you want to use as your base
    or starting theme (I''ve clicked on the palette for the Light theme here, as you
    can see in the following screenshot):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/996f768b-84ae-4716-9349-9435b34e7093.png)'
  prefs: []
  type: TYPE_IMG
- en: A copy of the theme will appear in the Custom Themes section in the lower part
    of the Color Themes window. Click on Edit Theme to modify the theme that is the
    middle button that appears when you hover over the custom theme. When you are
    editing the theme, you can change everything from the font text color to the C++
    keyword color.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The main area you are interested in is the C++ Text Editor section. To gain
    access to all the C++ Text Editor options, be sure to select the Show All Elements
    option at the top of the Theme Editor window, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f40eaa8c-bf51-43c6-8b50-91fc07effd69.png)'
  prefs: []
  type: TYPE_IMG
- en: Be sure to select the Show All Elements option in the Theme Editor window to
    show text editor settings specific to C++. Otherwise, you'll be left with only
    Chrome/GUI-type modifications being possible.
  prefs: []
  type: TYPE_NORMAL
- en: Note that, while most of the settings you are interested in will be under Text
    Editor | C/C++, some will not have the C++ subheading. For example, the setting
    for the main/plain text inside the editor window (for all languages) is under
    Text Editor | Plain Text (without the C++ subheading).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the theme to use from Tools | Options | Environment | General. Any new
    themes you have created will appear automatically in the drop-down menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once we load the plugin, it integrates into Visual Studio quite nicely. Exporting
    and uploading your themes to share with others is quite easy too.
  prefs: []
  type: TYPE_NORMAL
- en: 'Adding a theme to your Visual Studio installs it as an extension in Tools |
    Extensions and Updates.... To remove a theme, simply Uninstall its extension:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a451719f-e357-414b-b8a3-b1486650a68b.png)'
  prefs: []
  type: TYPE_IMG
- en: Formatting your code (Autocomplete settings) in Visual Studio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Code-writing formatting with Visual Studio is a pleasure. In this recipe, we'll
    discuss how to control the way Visual Studio lays out the text of your code.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Code has to be formatted correctly. You and your co-programmers will be able
    to better understand, grok, and keep your code bug-free if it is consistently
    formatted. This is why Visual Studio includes a number of auto-formatting tools
    inside the editor.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Go to Tools | Options. Once there, go to the Text Editor | C/C++ section and
    select it. This dialog displays a window that allows you to toggle Automatic brace
    completion:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0a3d0243-2005-425b-bb93-59942d70d2e0.png)'
  prefs: []
  type: TYPE_IMG
- en: Automatic brace completion is a feature where, when you type `{`, a corresponding
    `}` is automatically typed for you. This feature may irk you if you don't like
    the text editor inserting characters for you unexpectedly.
  prefs: []
  type: TYPE_NORMAL
- en: 'You generally want Auto list members on, as that displays a nice dialog with
    the complete names of data members listed for you as soon as you start typing.
    This makes it easy to remember variable names, so you don''t have to memorize
    them:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e3522db1-0b15-45a1-8cc7-81eca020029a.png)'
  prefs: []
  type: TYPE_IMG
- en: If you press *Ctrl* + spacebar inside the code editor at any time, the auto
    list pops up.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some more autocomplete behavior options are located under Text Editor | C/C++
    | Formatting:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2c6cb741-3ca4-45de-97e3-360e54abf7d8.png)'
  prefs: []
  type: TYPE_IMG
- en: I recommend using all of the options at first and then disabling them only if
    they interrupt your workflow.
  prefs: []
  type: TYPE_NORMAL
- en: You can also autoformat a section of text by highlighting a section of text
    and selecting Edit | Advanced | Format Selection (*Ctrl* + *K*, *Ctrl* + *F*).
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The default autocomplete and autoformat behaviors may irk you. You need to converse
    with your team on how you want your code to be formatted (spaces or tab indents,
    size of indent, and so on), and then configure your Visual Studio settings accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: Shortcut keys in Visual Studio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of shortcut keys that will make coding and project navigation
    much faster and more efficient for you. In this recipe, we will describe how to
    use some of the common shortcut keys that will really enhance your coding speed.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To get started, you will need to have Visual Studio installed and a project
    opened to look at the features.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are some very useful keyboard shortcuts for you to try:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on one part of the code, then click somewhere else, at least 10 lines
    of code away. Now, press *Ctrl* + *-* [navigate backwards]. Navigation through
    different pages of source code (the last place you were at, and the place you
    are at now) is done by pressing *Ctrl* + *-* and *Ctrl* + *Shift* + *-*, respectively:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/96a3c744-7446-4066-830d-27b17f03f485.png)'
  prefs: []
  type: TYPE_IMG
- en: Note that the being mentioned is the one near the 0 key on your keyboard and
    will not work with the on the numpad.
  prefs: []
  type: TYPE_NORMAL
- en: Warping around in the text editor using *Ctrl* + *-*. The cursor will jump back
    to the last location it was in that is more than 10 lines of code away, even if
    the last location was in a separate file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Say, for example, you''re editing code in one place, and you want to go back
    to the place you''ve just been (or go back to the section in the code you came
    from). Simply press *Ctrl* + *-*, and that will warp you back to the location
    in the code you were at last. To warp forward to the location you were at before,
    press *Ctrl* + *-*, press *Ctrl* + *Shift* + *-*. To warp back, the previous location
    should be more than 10 lines away, or in a different file. These correspond to
    the forward and back menu buttons in the toolbar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1aa31481-9a3e-432c-85d1-0c97fe27f9c9.png)'
  prefs: []
  type: TYPE_IMG
- en: The back and forward navigation buttons in the toolbar correspond to the *Ctrl* + *-* and *Ctrl* + *Shift* + *-* shortcuts,
    respectively.
  prefs: []
  type: TYPE_NORMAL
- en: Press *Ctrl* + *W* to highlight a single word.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press and hold *Ctrl* + *Shift* + right arrow (or left arrow) (not *Shift* +
    right arrow) just to move to the right and left of the cursor, selecting entire
    words.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *Ctrl* + *C* to copy text, *Ctrl* + *X* to cut text, and *Ctrl* + *V*
    to paste text.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Clipboard ring**: The clipboard ring is a kind of a reference to the fact
    that Visual Studio maintains a stack of the last copy operations. By pressing
    *Ctrl* + *C*, you push the text that you are copying into an effective stack.
    Pressing *Ctrl* + *C* a second time on different text pushes that text into the
    **Clipboard Stack**. For example, in the following diagram, we pressed *Ctrl*
    + *C* on the word *cyclic* first, then *Ctrl* + *C* on the word *paste* afterward.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As you know, pressing *Ctrl* + *V* pastes the top item in the stack. Pressing
    *Ctrl* + *Shift* + Insert accesses a very long history of all the items ever copied
    in that session, that is, items underneath the top item in the stack. After you
    exhaust the list of items, the list wraps back to the top item in the stack. This
    is an odd feature, but you may find it useful occasionally.
  prefs: []
  type: TYPE_NORMAL
- en: '*Ctrl* + *M* collapses a code section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a1e7ab10-2a4e-476f-aea2-bad7a5238d99.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Keyboard shortcuts allow you to speed up work in the code editor by reducing
    the number of mouse- reaches that you have to perform in a coding session.
  prefs: []
  type: TYPE_NORMAL
- en: Extended mouse usage in Visual Studio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The mouse is a pretty handy tool for selecting text. In this section, we'll
    highlight how to use the mouse in an advanced way so that you can make quick edits
    to your code's text.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Hold down the *Ctrl* key while clicking to select an entire word:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b134cd1a-6c42-4cdb-9844-f985d795ca6b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Hold down the *Alt* key to select a box of text (*Alt* + left-click + drag):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/af625ed1-7100-4629-abf0-58296eec61cf.png)'
  prefs: []
  type: TYPE_IMG
- en: You can then either cut, copy, or overwrite the box-shaped text area; in the
    latter case, the characters you type will be repeated in all selected rows.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mouse-clicking alone can be tedious, but with the help of *Ctrl* + *Alt*, it
    becomes quite cool.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Unreal Engine 4 (UE4)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of steps to follow to install and configure UE4 properly.
    In this recipe, we'll walk through the correct installation and setup of the engine.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: UE4 takes up quite a few GB of space, so you should have at least 20 GB or so
    free for the installation on the target drive. Note that every project is also
    at least 1 GB as well, so you will need more space on your computer (or an additional
    hard drive) for more projects you wish to create.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Visit [unrealengine.com](http://unrealengine.com) in your web browser of choice:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a07cf0f4-b721-4595-bbfc-7bf0ee31012e.png)'
  prefs: []
  type: TYPE_IMG
- en: On the top-right corner of the screen, click on the Download button. You'll
    then be asked to create an Epic Games account. If you already have one, you can
    scroll down to the bottom of the screen and click the Sign in option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the installer for the Epic Games Launcher program by double-clicking the
    `EpicGamesLauncherInstaller-x.x.x-xxx.msi` installer. Install it in the default
    location.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the Epic Games Launcher program is installed, open it by double-clicking
    its icon, which can be found on your desktop or in the Start menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b86be0b9-a313-4123-877c-1f19a9822343.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You''ll need to sign in with the same login information you created or used
    earlier, and then you''ll arrive at the main page of the launcher:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4023b8b0-08f1-4f99-9246-496d24b1f573.png)'
  prefs: []
  type: TYPE_IMG
- en: There are a lot of available options, but we want to click on the Unreal Engine option
    on the top-left of the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Browse the start page and take a look around. Eventually, you will need to
    install an engine. Click on the large orange Install Engine button on the screen, as
    shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9d0f21d6-0123-41ae-858e-ad95880947c4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A pop-up dialog will ask you to agree to an End Licence Agreement. Afterwards,
    you''ll be asked to choose an install location. Then, click the Install button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/11f35862-2ecb-4091-9f29-d93439fa6c83.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The launcher will start downloading the engine. It is about 7 GB, so it may
    take a while. Once finished, your screen should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b8badf1d-a24a-4cc1-afb6-64fc40097366.png)'
  prefs: []
  type: TYPE_IMG
- en: After the engine has installed, the Install Engine button will change to a Launch
    Engine button.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Epic Games Launcher is the program that you need to start up the engine
    itself. It keeps a copy of all your projects and libraries in the Library tab.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you learn more about working in UE4, you should check out some of the free
    library packages in the Library | Vault section. For that, click the Library item
    on the left-hand side and scroll down until you see Vault, underneath My Projects.
  prefs: []
  type: TYPE_NORMAL
- en: Creating your first project in UE4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Setting up a project within UE4 takes a number of steps. It is important to
    get your options correct so that you can have the setup that you like, so carefully
    follow this recipe when constructing your first project.
  prefs: []
  type: TYPE_NORMAL
- en: Each project that you create within UE4 takes up at least 1 GB of space or so,
    so you should decide whether you want your created projects on the same target
    drive or on an external or separate HDD.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From the Epic Games Launcher, click on the Launch Unreal Engine 4.21.2 button
    on the left side of the screen. Once you are inside the engine, an option to create
    a new project or load an existing one will present itself.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that depending on when you are reading this book, the version number could
    be different, but the steps should be the same, if not incredibly similar.
  prefs: []
  type: TYPE_NORMAL
- en: Select the New Project tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Decide whether you will be using C++ to code your project, or blueprints exclusively:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you're using blueprints exclusively, make your selection of a template to
    use from the Blueprint tab.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you're using C++ in addition to blueprints to construct your project, select
    the project template to construct your project based on the C++ tab.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you''re not sure what template to base your code on, Basic Code is an excellent
    starting point for any C++ project (or Blank for a blueprint-exclusive (Unreal''s
    built-in visual scripting language) project):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/8c76e0d5-e09d-4688-8bdb-ef37d110325c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For the purpose of this book, we will always be using a C++ project:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at the three icons that appear beneath the template listing. There
    are three options here to configure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can choose to target desktop or mobile applications.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You have an option to alter the quality settings (the picture of a plant with
    the sun above it), but you probably don't need to alter these. The quality settings
    are reconfigurable under Engine | Engine Scalability Settings anyway.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The last option is whether to include Starter Content with the project or not.
    You can probably use the Starter Content package in your project. It has some
    excellent materials and textures available within it that are invaluable for a
    beginner, but as you start creating your own advanced projects, you will likely
    no longer need it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you don't like the Starter Content package, try the packages in the UE4 Marketplace.
    There is some excellent free content there, including the GameTextures Material
    Pack.
  prefs: []
  type: TYPE_NORMAL
- en: Select the drive and folder in which you will save your project. Keep in mind
    that each project is roughly 1 GB in size, and you will need at least that much
    space on the destination drive.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name your project. Preferably, name it something unique and specific to what
    you are planning on creating.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hit Create. Both the UE4 Editor and Visual Studio 2017 windows should pop up,
    enabling you to edit your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the future, keep in mind that you can open the Visual Studio 2017 Solution
    using one of two methods. The first is using your local file explorer. Navigate
    to the root of where your project is stored and double-click on the `ProjectName.sln` file.
    The second way is from UE4: click on File | Open Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: Creating your first level in UE4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating levels in UE4 is easy and facilitated by a great all-around UI. In
    this recipe, we'll outline basic editor usage and describe how to construct your
    first level once you have your first project launched.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Complete the previous recipe, *Creating your first project in UE4*. Once you
    have a project constructed, we can proceed with creating a level.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The default level that gets set up when you start a new project will contain
    some default geometry and scenery if the starter content was included when creating
    the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5b58e8d6-dc21-4be9-8731-78ad44f0dc90.png)'
  prefs: []
  type: TYPE_IMG
- en: The MinimalDefault level and interface of Unreal Engine 4
  prefs: []
  type: TYPE_NORMAL
- en: You don't need to start with this starter stuff, however. If you don't want
    to build from it, you can delete it, or create a new level.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a new level, click File | New Level...:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/541267b6-e0c5-487a-8a9c-f336a90aa967.png)'
  prefs: []
  type: TYPE_IMG
- en: From here, you can select to create a level with a background sky (Default),
    or without a background sky (Empty Level).
  prefs: []
  type: TYPE_NORMAL
- en: If you choose to create a level without a background sky, keep in mind that
    you must add a **light** to it to see the geometry you add to it.
  prefs: []
  type: TYPE_NORMAL
- en: If you loaded the Starter Content on your project's creation (or some other
    content), then you can use the Content Browser to pull content into your level.
    Simply drag and drop instances of your content from the Content Browser into the
    level and save it, and then play the game by hitting the Play button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add some geometry to your level using the Modes panel (Window | Modes). Be
    sure to click on the left-most button with the picture of a light bulb and cube
    on it to access the placeable geometry:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f8217cff-4439-44a1-971d-bb86f4078fc8.png)'
  prefs: []
  type: TYPE_IMG
- en: By default, the Basic option is selected, which contains general geometry and
    other common features that are needed in Unreal. You can also add lights via the Modes tab
    by clicking on the Lights subtab on the left-hand side of the Modes tab. These
    can be added to a level by dragging and dropping as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Modes panel contains two useful items for level construction: some sample
    geometry to add (cubes and spheres and the like), as well as a panel full of lights.
    Try these out and experiment to begin laying out your level.'
  prefs: []
  type: TYPE_NORMAL
- en: If you are interested in learning more about building levels inside Unreal Engine,
    check out [https://docs.unrealengine.com/en-us/Engine/QuickStart](https://docs.unrealengine.com/en-us/Engine/QuickStart)
  prefs: []
  type: TYPE_NORMAL
- en: UE4 – hot reloading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you created a new Unreal Engine 4 C++ project, you saw that both Visual
    Studio and Unreal Engine 4 opened up. In this recipe, we will go through an example
    of modifying a script in Visual Studio and then compiling the code to see the
    changes.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To see the effects of changing one of the classes, we have to actually be using
    the class. Unreal automatically creates one of these classes for us by default
    (`AChapter01_GameModeBase`), so for this simple example, we will make use of it.
  prefs: []
  type: TYPE_NORMAL
- en: Note that everywhere you see `Chapter01` in the recipes in this chapter, I am
    referring to the project name, and if yours is named differently, you may see
    different text.
  prefs: []
  type: TYPE_NORMAL
- en: From the Unreal Editor, go to Edit | Project Settings. Select the Maps & Modes
    option under the Project section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Under Default GameMode, select Chapter01_GameMode:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b887caf3-0c76-4c00-9d58-39b1f6e90ea3.png)'
  prefs: []
  type: TYPE_IMG
- en: Note that the class name is `AChapter01_GameModeBase` in code, while in Unreal's
    menus it doesn't have the `A`. This is because Unreal's naming convention for
    classes always adds an `A` to classes that inherit from the `Actor` class. We
    will discuss this in greater detail later on in this book.
  prefs: []
  type: TYPE_NORMAL
- en: A **game mode** is a class that will contain the rules of your game type.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on game modes, check out [https://docs.unrealengine.com/en-US/Gameplay/Framework/GameMode](https://docs.unrealengine.com/en-US/Gameplay/Framework/GameMode).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Inside Visual Studio under the Solution Explorer, you will see a number of
    pre-created files. Open the `Games/Chapter_01/Source/Chapter_01` folder and you
    should see the `Chapter01GameModeBase.h` and `.cpp` files. Double-click on the
    `.h` file to open it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3ca35114-5579-492a-9b4b-52303519acca.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Add the following code (in bold) to the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, open the `.cpp` file and update it to have the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This code currently doesn't do anything, but it gives us the ability to add
    changes to it later on in the future recipes of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Save both files and return to the Unreal editor. From the editor, click on
    the Compile button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/53f00d56-68f2-41e8-a43b-030fcb92d3d0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If all goes well, you should see a menu appear on the bottom-right of the screen,
    and after a period of time, you should see it say Compile Complete!:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ee3d438b-4321-4a7a-a7fb-df1646911ac8.png)'
  prefs: []
  type: TYPE_IMG
- en: It is also possible to compile your code in Visual Studio by right-clicking
    on the project from the Solution Explorer and selecting Build. Upon completion,
    when we go back to the Unreal editor, it should automatically load the changes
    that were made.
  prefs: []
  type: TYPE_NORMAL
- en: It is important for us to remember to compile our code any time we make changes
    to our code files. Otherwise, we will not be able to see those changes reflected
    in our project.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on compiling your own code for Unreal Engine 4, check out [https://docs.unrealengine.com/en-US/Programming/QuickStart](https://docs.unrealengine.com/en-US/Programming/QuickStart).
  prefs: []
  type: TYPE_NORMAL
- en: UE4 – logging with UE_LOG
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Logging** is extremely important for outputting internal game data. Using
    log tools lets you print information into a handy little Output Log window in
    the UE4 editor.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When coding, we may sometimes want to send some debug information out to the
    UE log window. This is possible using the `UE_LOG` macro. A **macro** is a fragment
    of code that has been given a name. Whenever the name is used in code, it is replaced
    by the contents of the macro at compile time. Log messages are an extremely important
    and convenient way to keep track of information in your program as you are developing
    it.
  prefs: []
  type: TYPE_NORMAL
- en: You should have a code file to complete this recipe. If this is your first time
    coding in Unreal, you should complete the previous recipe before continuing with
    this one.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In your code, enter a line of code using the following form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'For instance, if you wanted to add this to the script in the previous recipe,
    it may look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Turn on the Output Log inside the UE4 editor by going to Window | Developer
    Tools | Output Log to see your log messages printed in that window as your program
    is running:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5be2810d-c8aa-404c-be08-ac2cd59cebed.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you play your game by clicking on the Play button from the top toolbar,
    you should notice our text being displayed in yellow on the log:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1542e346-58e3-4c3c-839c-7a40d883d68f.png)'
  prefs: []
  type: TYPE_IMG
- en: To make your output easier to see, you can clear the Output Log at any time
    by right-clicking on it within the window and selecting Clear Log.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `UE_LOG` macro accepts a minimum of three parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: The `Log` category (we used `LogTemp` here to denote a log message in a temporary
    log)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Log level (we used a warning here to denote a log message, printed in yellow
    warning text)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A string for the actual text of the log message itself
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do not forget the `TEXT()` macro around your log message text, as it will convert
    the text into a format that is usable by `UE_LOG`. For those more familiar with
    coding, the `TEXT()` macro promotes the enclosed text to Unicode (it prepends
    an `L`) when the compiler is set to run with Unicode on.
  prefs: []
  type: TYPE_NORMAL
- en: '`UE_LOG` also accepts a variable number of arguments, just like `printf()`
    from the C programming language:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: There will be an asterisk `*` just before the `FString` variable when using
    `UE_LOG` to dereference the `FString` to a regular C-style `TCHAR` pointer. This
    means that it is converting the pointer into the actual value it is pointing at.
  prefs: []
  type: TYPE_NORMAL
- en: '`TCHAR` is usually defined as a variable type where, if Unicode is being used
    in the compile, the `TCHAR` resolves to the built-in data type, `wchar_t` . If
    Unicode is off (the `_UNICODE` compiler switch is not defined), then `TCHAR` resolves
    to simply the standard `char` type.'
  prefs: []
  type: TYPE_NORMAL
- en: For more information on TCHAR and working with strings in general with C++,
    check out [https://docs.microsoft.com/en-us/windows/desktop/learnwin32/working-with-strings#tchars](https://docs.microsoft.com/en-us/windows/desktop/learnwin32/working-with-strings#tchars).
  prefs: []
  type: TYPE_NORMAL
- en: Don't forget to clear your log messages after you no longer need them from the
    source! Otherwise, your console may become bloated with messages and make it difficult
    to find things you are looking for.
  prefs: []
  type: TYPE_NORMAL
- en: UE4 – making an FString from FStrings and other variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When coding in UE4, you often want to construct a string from variables. This
    is pretty easy using the `FString::Printf` or `FString::Format` function.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this, you should have an existing project into which you can enter some
    UE4 C++ code. Putting variables into a string is possible via **printing**. It
    may be counter intuitive to print into a string, but you can't just concatenate
    variables together and hope that they will automatically convert into strings,
    as in some languages, such as JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, we will see how to print in two different ways. First, we will
    be using `FString::Printf()`:'
  prefs: []
  type: TYPE_NORMAL
- en: Consider the variables you'd like to be printed into your string. Note what
    each variable type is.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open and take a look at a reference page of the `printf` format specifiers,
    such as [http://en.cppreference.com/w/cpp/io/c/fprintf](http://en.cppreference.com/w/cpp/io/c/fprintf).
    For each variable you want to print, node what the specifier is. For example,
    `%s` for a formatted string.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Try code such as the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Notice how the preceding code block uses the format specifiers precisely like
    the traditional `printf` function does. In the preceding example, we used `%s`
    to place a string in the formatted string, and `%d` to place an integer in the
    formatted string. Different format specifiers exist for different types of variables,
    and you should look them up on a site such as `cppreference.com`.
  prefs: []
  type: TYPE_NORMAL
- en: It is also possible to print a string using `FString::Format()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Write code in the following form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'With `FString::Format()`, instead of using correct format specifiers, we use
    simple integers and a `TArray` of `FStringFormatArg` instead. `FstringFormatArg`
    helps `FString::Format()` deduce the type of variable to put in the string. Refer
    to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d32f957e-4bc9-4527-b98d-5a65f69fd593.png)'
  prefs: []
  type: TYPE_IMG
- en: No matter which method you use, upon calling `UE_LOG` and you will get the same
    output.
  prefs: []
  type: TYPE_NORMAL
