- en: UE4 Development Tools
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: UE4 开发工具
- en: 'In this chapter, we will outline some basic recipes for getting started in
    **Unreal Engine 4** (**UE4**) game development, and the basic tools that we will
    use for creating the code that makes our game. This will include the following
    recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将概述一些基本的入门配方，用于开始使用 **Unreal Engine 4**（**UE4**）进行游戏开发，以及我们将用于创建游戏代码的基本工具。这包括以下配方：
- en: Installing Visual Studio
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Visual Studio
- en: Creating and building your first C++ project in Visual Studio
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Visual Studio 中创建和构建您的第一个 C++ 项目
- en: Changing the code font and color in Visual Studio
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Visual Studio 中更改代码字体和颜色
- en: Extension – changing the color theme in Visual Studio
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展 – 在 Visual Studio 中更改颜色主题
- en: Formatting your code (Autocomplete settings) in Visual Studio
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Visual Studio 中格式化您的代码（自动完成设置）
- en: Shortcut keys in Visual Studio
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio 中的快捷键
- en: Extended mouse usage in Visual Studio
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio 中扩展鼠标使用
- en: UE4 – installation
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UE4 – 安装
- en: UE4 – first project
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UE4 – 第一个项目
- en: UE4 – creating your first level
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UE4 – 创建您的第一个关卡
- en: UE4 – hot reloading
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UE4 – 热重载
- en: UE4 – logging with UE_LOG
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UE4 – 使用 UE_LOG 进行日志记录
- en: UE4 – making an FString from FStrings and other variables
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UE4 – 从 FStrings 和其他变量创建 FString
- en: Introduction
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Creating a game is an elaborate task that will require a combination of **assets**
    and **code**. To create assets and code, we'll need some pretty advanced tools,
    including **art tools**, **sound tools**, **level-editing tools**, and **code-editing
    tools**. In this chapter, we'll discuss finding suitable tools for asset creation
    and coding. Assets include any visual artwork (2D sprites, 3D models), audio (music
    and sound effects), and game levels. Code is the text (usually C++) that instructs
    the computer on how to tie these assets together to make a game world and level,
    and how to make that game world *play*. There are dozens of very good tools for
    each task; we will explore a couple of each, and make some recommendations. Game
    editing tools, especially, are hefty programs that require a powerful CPU and
    lots of memory, and very good, ideal GPUs for good performance. Protecting your
    assets and work is also a necessary practice. We'll explore and describe source
    control, which is how you back up your work on a remote server. An introduction
    to UE4 programming is also included, and we will also explore basic logging functions
    and library use. Significant planning is also required to get these tasks done,
    so we'll use a task planner software package to do so.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个游戏是一项复杂的任务，需要**资源**和**代码**的结合。为了创建资源和代码，我们需要一些相当高级的工具，包括**艺术工具**、**声音工具**、**关卡编辑工具**和**代码编辑工具**。在本章中，我们将讨论寻找适合资源创建和编码的工具。资源包括任何视觉艺术作品（2D
    精灵、3D 模型）、音频（音乐和音效）和游戏关卡。代码是指导计算机如何将这些资源组合在一起以创建游戏世界和关卡，以及如何使该游戏世界**运行**的文本（通常是
    C++）。每个任务都有数十个非常好的工具；我们将探索其中的一些，并提出一些建议。游戏编辑工具尤其庞大，需要强大的 CPU 和大量的内存，以及非常好的、理想的
    GPU 以获得良好的性能。保护您的资源和工作是必要的实践。我们将探讨并描述源代码控制，这是您在远程服务器上备份工作的方法。还包括 UE4 编程的简介，我们还将探讨基本日志功能和使用库。完成这些任务还需要进行大量的规划，因此我们将使用任务规划软件包来完成。
- en: Technical requirements
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: As listed on UE4's FAQs page, it is recommend to have a a desktop PC with Windows
    7 64-bit or a Mac with macOS X 10.9.2 or later, 8 GB of RAM, a quad-core Intel
    or AMD processor, and a DX11-compatible video card. UE4 will run on desktops and
    laptops below these recommendations, but performance may be limited.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如 UE4 的常见问题解答页面所示，建议使用具有 Windows 7 64 位或更高版本的 macOS X 10.9.2 或更高版本的桌面 PC，8 GB
    的 RAM，四核 Intel 或 AMD 处理器，以及兼容 DX11 的显卡。UE4 可以在低于这些推荐配置的桌面和笔记本电脑上运行，但性能可能有限。
- en: For those using a Mac computer, Visual Studio for Mac currently does not support
    C++. You'll need to use a different IDE, such as Visual Studio Code or Xcode,
    instead.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 对于使用 Mac 电脑的用户，Visual Studio for Mac 目前不支持 C++。您需要使用不同的 IDE，例如 Visual Studio
    Code 或 Xcode。
- en: Installing Visual Studio
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Visual Studio
- en: Visual Studio is an essential package for code editing when editing the C++
    code for your UE4 game.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio 是编辑 UE4 游戏的 C++ 代码时进行代码编辑的必备软件包。
- en: Getting ready
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: We're going to set up a C++ coding environment to build our UE4 applications.
    We'll download Visual Studio 2017, install it, and set it up for UE4 C++ coding.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将设置一个 C++ 编码环境来构建我们的 UE4 应用程序。我们将下载 Visual Studio 2017，安装它，并为其设置 UE4 C++ 编码。
- en: How to do it...
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Begin by visiting [https://www.visualstudio.com/en-us/products/visual-studio-community-vs.aspx](https://www.visualstudio.com/en-us/products/visual-studio-community-vs.aspx).
    Click on Download VS Community 2017\. This downloads the ~1,250 KB loader/installer:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，访问[https://www.visualstudio.com/en-us/products/visual-studio-community-vs.aspx](https://www.visualstudio.com/en-us/products/visual-studio-community-vs.aspx)。点击下载VS
    Community 2017。这将下载约1,250 KB的加载器/安装程序：
- en: '![](img/37a4e26f-1a6c-4d42-89cc-6616e08dada8.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/37a4e26f-1a6c-4d42-89cc-6616e08dada8.png)'
- en: You can compare editions of Visual Studio at [https://visualstudio.microsoft.com/vs/compare/](https://visualstudio.microsoft.com/vs/compare/).
    The Community Edition of Visual Studio is fully adequate for UE4 development purposes
    in this book, that is, as long as you're an individual developer, doing academic
    research, or have fewer than six people on your team.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://visualstudio.microsoft.com/vs/compare/](https://visualstudio.microsoft.com/vs/compare/)比较Visual
    Studio的不同版本。本书中，Visual Studio的社区版对于UE4开发来说是完全足够的，也就是说，只要您是个人开发者，进行学术研究，或者您的团队中人数少于六人。
- en: Launch the installer, and continue through the installer until you get to the
    window where you select the components of Visual Studio 2017 that you want to
    add to your PC. Keep in mind that the more features you select, the larger your
    installation will be.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动安装程序，继续通过安装程序，直到您到达选择要添加到您的PC上的Visual Studio 2017组件的窗口。请记住，您选择的特性越多，您的安装就会越大。
- en: 'Support for C++ is now an optional part of Visual Studio and isn''t installed
    by default, so we have to select that we want it installed. Under the Workloads
    section, scroll down to the Mobile and Gaming heading and check the Game development
    with C++ option:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: C++的支持现在是Visual Studio的可选部分，默认情况下不会安装，因此我们必须选择我们想要安装它。在“工作负载”部分，向下滚动到“移动和游戏”标题并勾选“使用C++进行游戏开发”选项：
- en: '![](img/9046c623-4635-47df-a26a-ffa4bf6af989.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/9046c623-4635-47df-a26a-ffa4bf6af989.png)'
- en: It is possible to download the Unreal Engine installer at this point as well
    by selecting it under the Optional section in the Installation details menu, but
    we will be getting the latest version of the Epic Games launcher and Unreal Engine
    directly from Epic Games in a separate recipe later on in this chapter.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在此阶段，您也可以通过在安装详情菜单的“可选”部分选择它来下载Unreal Engine安装程序，但我们将在此章节的稍后部分通过Epic Games直接获取最新的Epic
    Games启动器和Unreal Engine。
- en: After you have selected the tools you'd like to add on to Visual Studio, click
    the Install button. The installer tool will download the required components and
    continue setup. After finishing installation, the installer may ask you to restart
    your computer. Go ahead and do so.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您选择了想要添加到Visual Studio的工具后，点击“安装”按钮。安装工具将下载所需的组件并继续设置。安装完成后，安装程序可能会要求您重新启动计算机。请继续这样做。
- en: 'After you download and install Visual Studio 2017, launch it. You will be presented
    with a Sign in dialog box:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载并安装Visual Studio 2017后，启动它。您将看到一个登录对话框：
- en: '![](img/bd3b8bc4-3e7c-40dd-b5bd-4481abe3eb71.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/bd3b8bc4-3e7c-40dd-b5bd-4481abe3eb71.png)'
- en: You can Sign in with your Microsoft account (the one you use to sign into Windows
    10) or Sign up for a new account. After you've signed in or signed up, you will
    be able to sign into Visual Studio itself. It may seem odd to sign into a desktop
    code editing program, but your sign-in will be used for source control commits
    to your repositories. On first signing into Visual Studio, you can select (one
    time only) a unique URL for your source code repositories, as hosted on Visualstudio.com
    ([https://visualstudio.microsoft.com/](https://visualstudio.microsoft.com/)).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用您的微软账户（您用于登录Windows 10的账户）登录，或者注册一个新账户。登录或注册后，您将能够登录Visual Studio本身。在桌面代码编辑程序中登录可能看起来有些奇怪，但您的登录将用于对您的代码库进行源代码控制提交。在首次登录Visual
    Studio时，您可以（仅限一次）选择一个独特的URL作为您的源代码仓库，这些仓库托管在Visualstudio.com（[https://visualstudio.microsoft.com/](https://visualstudio.microsoft.com/)）。
- en: How it works...
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Visual Studio is an excellent editor, and you will have a fantastic time coding
    within it. In the next recipe, we'll discuss how to create and compile our own
    code.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio是一个出色的编辑器，您将在其中编码时拥有极好的体验。在下一个菜谱中，我们将讨论如何创建和编译我们自己的代码。
- en: For more information on the Visual Studio setup process for C++ and UE4, check
    out [https://docs.unrealengine.com/en-us/Programming/Development/VisualStudioSetup ](https://docs.unrealengine.com/en-us/Programming/Development/VisualStudioSetup)
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 关于Visual Studio设置过程中C++和UE4的更多信息，请查看[https://docs.unrealengine.com/en-us/Programming/Development/VisualStudioSetup](https://docs.unrealengine.com/en-us/Programming/Development/VisualStudioSetup)
- en: Creating and building your first C++ project in Visual Studio
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Visual Studio 中创建和构建你的第一个 C++ 项目
- en: In order to compile and run code from Visual Studio, it must be done from within
    a project.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从 Visual Studio 编译和运行代码，必须在项目内部进行。
- en: Getting ready
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this recipe, we will identify how to create an actual executable running
    program from Visual Studio. We will do so by creating a project in Visual Studio
    to host, organize, and compile the code.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将确定如何从 Visual Studio 创建一个实际的可执行运行程序。我们将通过在 Visual Studio 中创建一个项目来做到这一点，以托管、组织和编译代码。
- en: How to do it...
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In Visual Studio, each group of code is contained within something called a
    **Project**. A project is a buildable conglomerate of code and assets that produce
    either an executable (`.exe` runnable) or a library (`.lib` or `.dll`). A group
    of projects can be collected into something called a **Solution**. Let''s start
    by constructing a Visual Studio solution and a project for a console application,
    followed by constructing a UE4 sample project and solution:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Visual Studio 中，每一组代码都被包含在称为 **项目** 的东西中。项目是一组可构建的代码和资源的集合，可以生成可执行文件（`.exe`
    可运行）或库（`.lib` 或 `.dll`）。一组项目可以收集到称为 **解决方案** 的东西中。让我们先构建一个 Visual Studio 解决方案和一个控制台应用程序项目，然后构建一个
    UE4 示例项目和解决方案：
- en: Open Visual Studio and go to File | New | Project....
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Visual Studio 并转到文件 | 新建 | 项目...
- en: 'You will see a dialog, as follows:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将看到一个对话框，如下所示：
- en: '![](img/f5817a52-3ab0-4606-9bb6-df5dce1f49df.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f5817a52-3ab0-4606-9bb6-df5dce1f49df.png)'
- en: 'Select Visual C++ in the pane on the left-hand side. In the middle pane, hit
    Windows Console Application. Name your project in the lower box, and then hit
    OK:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧的面板中选择 Visual C++。在中间面板中，点击 Windows 控制台应用程序。在下面的框中命名你的项目，然后点击确定：
- en: '![](img/0dd0f699-2838-4353-88f7-5554a3c10f6d.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0dd0f699-2838-4353-88f7-5554a3c10f6d.png)'
- en: Once the application wizard completes, you will have created your first project.
    Both a solution and a project will be created.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦应用程序向导完成，你将创建你的第一个项目。将创建一个解决方案和一个项目。
- en: 'To see these, you need Solution Explorer. To ensure that Solution Explorer
    is showing, go to View | Solution Explorer (or press *Ctrl* + *Alt* + *L*). Solution
    Explorer is a window that usually appears docked on the right-hand side of the
    main editor window, as shown in the following screenshot:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看这些，你需要解决方案资源管理器。为了确保解决方案资源管理器正在显示，请转到视图 | 解决方案资源管理器（或按 *Ctrl* + *Alt* + *L*）。解决方案资源管理器是一个通常出现在主编辑器窗口右侧的窗口，如下面的截图所示：
- en: '![](img/b282bb55-46b4-440a-855e-e9d29b9244e9.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b282bb55-46b4-440a-855e-e9d29b9244e9.png)'
- en: Solution Explorer location
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案资源管理器位置
- en: It is possible to arrange your layout however you like inside Visual Studio.
    If you ever want to go back to the default layout, you can go to Window | Reset
    Window Layout.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 Visual Studio 内部随意安排你的布局。如果你想要回到默认布局，你可以转到窗口 | 重置窗口布局。
- en: 'The Solution Explorer also displays all the files that are part of the project.
    This default solution already contains a few files, and we can add and remove
    new files in this section from here. As your project grows, more and more files
    are going to be added to your project. In the `Source Files` folder, you''ll also
    notice a file created called `FirstProject.cpp`, which will look as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案资源管理器还显示项目中的所有文件。这个默认解决方案已经包含了一些文件，我们可以在这一节中添加和删除新文件。随着项目的增长，越来越多的文件将被添加到项目中。在
    `源文件` 文件夹中，你还会注意到一个名为 `FirstProject.cpp` 的文件，其外观如下：
- en: '[PRE0]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Press *Ctrl* + *Shift* + *B* to build the project, then *Ctrl* + *F5* to run
    the project.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *Ctrl* + *Shift* + *B* 构建项目，然后按 *Ctrl* + *F5* 运行项目。
- en: 'Your executable will be created, and you will see a small black window with
    the results of your program''s run:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的可执行文件将被创建，你将看到一个带有程序运行结果的黑色小窗口：
- en: '![](img/62f00ac5-ad2c-4a20-b0f8-4e86e9f0b720.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/62f00ac5-ad2c-4a20-b0f8-4e86e9f0b720.png)'
- en: How it works...
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Building an executable involves translating your C++ code from text language into
    a binary file. Running the file runs your game program, which is just the code
    text that occurs in the `main()` function between `{` and `}`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 构建可执行文件涉及将你的 C++ 代码从文本语言转换为二进制文件。运行该文件将运行你的游戏程序，这仅仅是出现在 `main()` 函数 `{` 和 `}`
    之间的代码文本。
- en: There's more...
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'Build configurations are **styles** of build that we will discuss here. There
    are at least two important build configurations you should know about: Debug and
    Release. The Build configuration that''s currently selected is at the top of the
    editor, just below the toolbar in the default position:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 构建配置是我们在这里将要讨论的构建**样式**。您应该至少了解两种重要的构建配置：调试和发布。当前选定的构建配置位于编辑器的顶部，位于工具栏下方默认位置：
- en: '![](img/2ddb187d-8c1a-44de-9e79-8d898d32b9cb.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2ddb187d-8c1a-44de-9e79-8d898d32b9cb.png)'
- en: Location of the currently selected Build Configuration
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当前所选构建配置的位置
- en: Depending on which configuration you select, different compiler options are
    used. A Debug configuration typically includes extensive debug information in
    the build, as well as the ability to turn off optimizations to speed up compilation.
    Release builds are often optimized (either for size or for speed) and take a bit
    longer to build; they result in smaller or faster executables. Stepping through
    a file's behavior by moving through with the debugger line by line is often better
    in the Debug mode than the Release mode.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您选择的配置，将使用不同的编译器选项。调试配置通常在构建中包含大量的调试信息，以及关闭优化的能力以加快编译速度。发布构建通常是优化过的（要么是针对大小，要么是针对速度），构建时间会稍长一些；它们的结果是更小或更快的可执行文件。通过调试器逐行移动来逐步执行文件的行为在调试模式下通常比在发布模式下更好。
- en: Changing the code font and color in Visual Studio
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Visual Studio 中更改代码字体和颜色
- en: Customizing the font and color in Visual Studio is not just about flexibility.
    Due to monitor resolutions being too high or low, it may become a necessity!
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Visual Studio 中自定义字体和颜色不仅关乎灵活性。由于显示器分辨率过高或过低，这可能会成为一种必要性！
- en: Getting ready
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Visual Studio is a highly customizable code editing tool. You might find the
    default fonts too small for your screen. This is easily adjustable by holding
    down the *Ctrl* key and using the mouse wheel to increase or decrease the size,
    but you may want to change the default value. Or, perhaps you may want to have
    more control, as you may want to change your code''s font size and color. You
    may also want to completely customize the coloration of keywords and the text
    background colors. The Fonts and Colors dialog box, which we''ll show you how
    to use in this section, allows you to completely customize every aspect of the
    code editor''s font and color:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio 是一款高度可定制的代码编辑工具。您可能会发现默认字体对您的屏幕来说太小了。这可以通过按住 *Ctrl* 键并使用鼠标滚轮来增加或减小字体大小轻松调整，但您可能想要更改默认值。或者，也许您想要有更多的控制权，比如您可能想要更改代码的字体大小和颜色。您还可能想要完全自定义关键字和文本背景颜色。本节中将向您展示如何使用“字体和颜色”对话框，它允许您完全自定义代码编辑器字体和颜色的各个方面：
- en: '![](img/9fed72ff-060d-4d5b-b45d-333297d2206d.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/9fed72ff-060d-4d5b-b45d-333297d2206d.png)'
- en: How to do it...
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'From within Visual Studio, go to Tools | Options...:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Visual Studio 中，转到“工具 | 选项...”：
- en: '![](img/6f99dc57-eb9b-45c8-9fca-d63960ee12be.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6f99dc57-eb9b-45c8-9fca-d63960ee12be.png)'
- en: 'Select Environment | Fonts and Colors from the dialog that appears. It will
    look like what''s shown in the following screenshot:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从出现的对话框中选择“环境 | 字体和颜色”。它看起来就像以下截图所示：
- en: '![](img/3d185848-6e47-47d1-8426-757578c298cb.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3d185848-6e47-47d1-8426-757578c298cb.png)'
- en: 'Play around with the font and font size of Text Editor/Plain Text. Click OK
    on the dialog, and see the results in the code-text editor:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本编辑器/纯文本中尝试调整字体和字体大小。点击对话框中的“确定”，然后在代码文本编辑器中查看结果：
- en: '![](img/6faf956d-11d4-48b2-aa8d-88c5de098c59.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6faf956d-11d4-48b2-aa8d-88c5de098c59.png)'
- en: Modified font and colors
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 修改后的字体和颜色
- en: Text Editor/Plain Text describes the font and size that's used for all code
    text within the regular code editor. If you change the size of the font, the size
    changes for any text that's entered into the coding window (for all languages,
    including C, C++, C#, and others).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 文本编辑器/纯文本描述了在常规代码编辑器中用于所有代码文本的字体和大小。如果您更改字体大小，则编码窗口中输入的任何文本的大小都会改变（包括 C、C++、C#
    等所有语言）。
- en: 'To return to what the menu has by default based on your theme, click on the
    Use Defaults button to the right of the Show Settings for: option.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 要返回基于您主题的默认菜单，请点击“显示设置”选项右侧的“使用默认值”按钮。
- en: The color (foreground and background) is completely customizable for each item.
    Try this for the Text Editor/Keyword setting (affects all languages), or for items
    specific to C++, such as Text Editor/C++ Functions. Click OK, and you will see
    the changed color of the item reflected in the code editor.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 每个项目的颜色（前景和背景）都是完全可定制的。尝试为文本编辑器/关键字设置（影响所有语言）或为特定于 C++ 的项目，如文本编辑器/C++ 函数进行此操作。点击“确定”，你将在代码编辑器中看到项目颜色的变化。
- en: 'You may also want to configure the font size of the Output Window, under the Show
    settings for: option, so click on the drop-down and select Output Window, as shown
    in the following screenshot:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可能想要配置输出窗口的字体大小，在“显示设置”选项下进行配置，因此点击下拉菜单并选择“输出窗口”，如图下截图所示：
- en: '![](img/0b498932-bbab-428c-a5e4-b73af88ea458.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0b498932-bbab-428c-a5e4-b73af88ea458.png)'
- en: The Output Window is the little window at the bottom of the editor that displays
    build results and compiler errors.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 输出窗口是位于编辑器底部的小窗口，用于显示构建结果和编译错误。
- en: You can't save-out (export) or bring in (import) your changes to the Fonts and
    Colors dialog. But you can use something called the **Visual Studio Theme Editor
    Extension**. To learn more, refer to the *Extension – changing the color theme
    in Visual Studio* recipe of this chapter, to learn how to export and import customized
    color themes.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 你不能保存（导出）或导入你的字体和颜色对话框中的更改。但你可以使用名为 **Visual Studio 主题编辑器扩展** 的工具。要了解更多信息，请参考本章的
    *扩展 - 在 Visual Studio 中更改颜色主题* 菜谱，了解如何导出和导入自定义颜色主题。
- en: For this reason, you may want to avoid changing font colors from this dialog.
    You must use this dialog to change the font and font size, however, for any setting
    (at the time of writing).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你可能想要避免从该对话框更改字体颜色。然而，你必须使用此对话框来更改字体和字体大小，对于任何设置（在撰写本文时）。
- en: How it works...
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The Fonts and Colors dialog simply changes the appearance of code in the text
    editor as well as for other windows, such as the output window. It is very useful
    for making your coding environment more comfortable.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 字体和颜色对话框只是简单地更改文本编辑器以及其他窗口（如输出窗口）中代码的外观。这对于使你的编码环境更加舒适非常有用。
- en: There's more...
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多内容...
- en: Once you have customized your settings, you'll find that you may want to save
    your customized Fonts and Colors settings for others to use, or to put into another
    installation of Visual Studio, which you have on another machine. Unfortunately,
    by default, you won't be able to save-out your customized Fonts and Colors settings.
    You will need something called the Visual Studio Theme Editor extension to do
    so. We will explore this in the next recipe.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你已自定义了你的设置，你会发现你可能想要保存你的自定义字体和颜色设置供他人使用，或者将其放入另一个安装的 Visual Studio 中，这个 Visual
    Studio 你在另一台机器上。不幸的是，默认情况下，你将无法保存你的自定义字体和颜色设置。你需要一个名为 Visual Studio 主题编辑器扩展的工具来做到这一点。我们将在下一个菜谱中探讨这个问题。
- en: See also
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *Extension – changing the color theme in Visual Studio* recipe describes
    how to import and export color themes
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*扩展 - 在 Visual Studio 中更改颜色主题* 菜谱描述了如何导入和导出颜色主题'
- en: Extension – changing the color theme in Visual Studio
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展 - 在 Visual Studio 中更改颜色主题
- en: 'By default, you cannot save the changes you make to the font colors and background
    settings that you make in the Fonts and Colors dialog. To fix this issue, Visual
    Studio has a feature called **Themes**. If you go to Tools | Options | Environment
    | General, you can change the theme to one of the three pre-installed stock themes
    (Light, Blue, and Dark):'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，你不能保存你在字体和颜色对话框中做出的字体颜色和背景设置的改变。为了解决这个问题，Visual Studio 有一个名为 **主题** 的功能。如果你转到“工具”|“选项”|“环境”|“常规”，你可以将主题更改为三个预安装的库存主题之一（浅色、蓝色和深色）：
- en: '![](img/e3eb472a-0844-4c28-b74e-7050f3746912.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e3eb472a-0844-4c28-b74e-7050f3746912.png)'
- en: A different theme completely changes the look of Visual Studio, from the colors
    of the title bars to the background color of the text editor window.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的主题可以完全改变 Visual Studio 的外观，从标题栏的颜色到文本编辑器窗口的背景颜色。
- en: You can also customize the theme of Visual Studio completely, but you'll need
    an extension to do so. Extensions are little programs that can be installed into
    Visual Studio to modify its behavior.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以完全自定义 Visual Studio 的主题，但你需要一个扩展来实现这一点。扩展是一些小程序，可以安装到 Visual Studio 中以修改其行为。
- en: By default, your customized color settings cannot be saved or reloaded into
    another Visual Studio installation without the extension. With the extension,
    you will also be able to save your own color theme to share with others. You can
    also load the color settings made by another person or by yourself into a fresh
    copy of Visual Studio.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，没有扩展，你的自定义颜色设置无法保存或重新加载到另一个 Visual Studio 安装中。有了扩展，你还可以将你自己的颜色主题保存下来与他人分享。你也可以将其他人或你自己制作的颜色设置加载到一个新的
    Visual Studio 复制中。
- en: How to do it...
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Go to Tools | Extensions and Updates....
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往工具 | 扩展和更新...
- en: 'From the dialog that appears, choose Online in the panel on the left-hand side.
    Start typing `Theme Editor` into the search box on the right. The Color Theme
    Editor for Visual Studio option will pop up in your search results:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从出现的对话框中，在左侧面板中选择在线。在右侧的搜索框中开始输入“主题编辑器”。Visual Studio 的颜色主题编辑器选项将在你的搜索结果中弹出：
- en: '![](img/fc1673f3-3e23-441c-aaf6-635c81ae6419.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/fc1673f3-3e23-441c-aaf6-635c81ae6419.png)'
- en: Click the small Download button in the top right-hand corner of the entry. Click
    through the installation dialog prompts, allowing the plugin to install. You'll
    then notice on the bottom of the window that it is scheduled for installation
    but will wait until Visual Studio is closed.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击条目右上角的下载按钮。点击通过安装对话框提示，允许插件安装。然后你会在窗口底部注意到它已安排安装，但会等待 Visual Studio 关闭。
- en: 'Close the window and Visual Studio, saving our project. After our program has
    closed, the VSIX Installer window will come up to confirm that you want to install
    the software. Click on the Modify button and it should start:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭窗口和 Visual Studio，保存我们的项目。在我们程序关闭后，VSIX 安装程序窗口将出现以确认你想要安装软件。点击修改按钮，它应该开始：
- en: '![](img/9184e6c8-dad1-453f-8209-5a3552d6534c.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/9184e6c8-dad1-453f-8209-5a3552d6534c.png)'
- en: Alternatively, visit [https://marketplace.visualstudio.com/items?itemName=VisualStudioPlatformTeam.VisualStudio2017ColorThemeEditor](https://marketplace.visualstudio.com/items?itemName=VisualStudioPlatformTeam.VisualStudio2017ColorThemeEditor)
    and download/install the extension by double-clicking the `.vsix` file that comes
    from your browser.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，访问 [https://marketplace.visualstudio.com/items?itemName=VisualStudioPlatformTeam.VisualStudio2017ColorThemeEditor](https://marketplace.visualstudio.com/items?itemName=VisualStudioPlatformTeam.VisualStudio2017ColorThemeEditor)
    并通过双击浏览器中提供的 `.vsix` 文件下载/安装扩展。
- en: 'Once it has finished installing, open up Visual Studio again and open our project.
    One of the quickest ways to do so is from the Recent section on the Start Page:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，再次打开 Visual Studio 并打开我们的项目。这样做最快的方法是从启动页的最近部分：
- en: '![](img/b036144a-38e0-430e-ab2a-fd94b29ba47c.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b036144a-38e0-430e-ab2a-fd94b29ba47c.png)'
- en: 'After restarting, go to Tools | Customize Colors to open the Color Themes editor
    page:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重启后，转到工具 | 自定义颜色以打开颜色主题编辑器页面：
- en: '![](img/cbc7ab5a-8f95-4872-8093-4f174f8cb083.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/cbc7ab5a-8f95-4872-8093-4f174f8cb083.png)'
- en: The Color Themes editor page
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 颜色主题编辑器页面
- en: 'From the Color Themes dialog that appears, click on the little palette-shaped
    icon on the upper-right corner of the theme that you want to use as your base
    or starting theme (I''ve clicked on the palette for the Light theme here, as you
    can see in the following screenshot):'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从出现的颜色主题对话框中，点击你想要用作基础或起始主题的主题右上角的那个小调色板形状的图标（我在这里点击了浅色主题的调色板，如以下截图所示）：
- en: '![](img/996f768b-84ae-4716-9349-9435b34e7093.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/996f768b-84ae-4716-9349-9435b34e7093.png)'
- en: A copy of the theme will appear in the Custom Themes section in the lower part
    of the Color Themes window. Click on Edit Theme to modify the theme that is the
    middle button that appears when you hover over the custom theme. When you are
    editing the theme, you can change everything from the font text color to the C++
    keyword color.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 主题的副本将出现在颜色主题窗口下方的自定义主题部分。点击编辑主题以修改当你悬停在自定义主题上时出现的中间按钮的主题。当你编辑主题时，你可以从字体文本颜色到
    C++ 关键词颜色更改一切。
- en: 'The main area you are interested in is the C++ Text Editor section. To gain
    access to all the C++ Text Editor options, be sure to select the Show All Elements
    option at the top of the Theme Editor window, as shown in the following screenshot:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你感兴趣的主要区域是 C++ 文本编辑器部分。要访问所有 C++ 文本编辑器选项，请确保在主题编辑器窗口的顶部选择“显示所有元素”选项，如下面的截图所示：
- en: '![](img/f40eaa8c-bf51-43c6-8b50-91fc07effd69.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f40eaa8c-bf51-43c6-8b50-91fc07effd69.png)'
- en: Be sure to select the Show All Elements option in the Theme Editor window to
    show text editor settings specific to C++. Otherwise, you'll be left with only
    Chrome/GUI-type modifications being possible.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 确保在主题编辑器窗口中选择“显示所有元素”选项，以显示针对 C++ 的特定文本编辑器设置。否则，你将只能进行 Chrome/GUI 类型的修改。
- en: Note that, while most of the settings you are interested in will be under Text
    Editor | C/C++, some will not have the C++ subheading. For example, the setting
    for the main/plain text inside the editor window (for all languages) is under
    Text Editor | Plain Text (without the C++ subheading).
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意，虽然你感兴趣的大多数设置将在“文本编辑器”|“C/C++”下，但一些设置可能没有“C++”子标题。例如，编辑器窗口内主/纯文本的设置（适用于所有语言）在“文本编辑器”|“纯文本”（没有“C++”子标题）下。
- en: Select the theme to use from Tools | Options | Environment | General. Any new
    themes you have created will appear automatically in the drop-down menu.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从“工具”|“选项”|“环境”|“常规”中选择要使用的主题。你创建的任何新主题都会自动出现在下拉菜单中。
- en: How it works...
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Once we load the plugin, it integrates into Visual Studio quite nicely. Exporting
    and uploading your themes to share with others is quite easy too.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们加载了插件，它就会很好地集成到 Visual Studio 中。导出和上传你的主题与他人分享也非常简单。
- en: 'Adding a theme to your Visual Studio installs it as an extension in Tools |
    Extensions and Updates.... To remove a theme, simply Uninstall its extension:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 将主题添加到 Visual Studio 中，它将在“工具”|“扩展和更新...”中作为扩展安装。要删除主题，只需卸载其扩展：
- en: '![](img/a451719f-e357-414b-b8a3-b1486650a68b.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a451719f-e357-414b-b8a3-b1486650a68b.png)'
- en: Formatting your code (Autocomplete settings) in Visual Studio
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Visual Studio 中格式化代码（自动完成设置）
- en: Code-writing formatting with Visual Studio is a pleasure. In this recipe, we'll
    discuss how to control the way Visual Studio lays out the text of your code.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Visual Studio 编写代码的格式化是一种乐趣。在这个菜谱中，我们将讨论如何控制 Visual Studio 展示代码文本的方式。
- en: Getting ready
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Code has to be formatted correctly. You and your co-programmers will be able
    to better understand, grok, and keep your code bug-free if it is consistently
    formatted. This is why Visual Studio includes a number of auto-formatting tools
    inside the editor.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 代码必须格式正确。如果你的代码格式一致，你和你的合作程序员将能够更好地理解、掌握并保持代码无错误。这就是为什么 Visual Studio 在编辑器内包含了许多自动格式化工具。
- en: How to do it...
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Go to Tools | Options. Once there, go to the Text Editor | C/C++ section and
    select it. This dialog displays a window that allows you to toggle Automatic brace
    completion:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往“工具”|“选项”。一旦到达那里，转到“文本编辑器”|“C/C++”部分并选择它。此对话框显示一个窗口，允许你切换自动括号完成：
- en: '![](img/0a3d0243-2005-425b-bb93-59942d70d2e0.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0a3d0243-2005-425b-bb93-59942d70d2e0.png)'
- en: Automatic brace completion is a feature where, when you type `{`, a corresponding
    `}` is automatically typed for you. This feature may irk you if you don't like
    the text editor inserting characters for you unexpectedly.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 自动括号完成是一个功能，当你输入 `{` 时，会自动为你输入相应的 `}`。如果你不喜欢文本编辑器意外地插入字符，这个功能可能会让你感到烦恼。
- en: 'You generally want Auto list members on, as that displays a nice dialog with
    the complete names of data members listed for you as soon as you start typing.
    This makes it easy to remember variable names, so you don''t have to memorize
    them:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 你通常希望自动列出成员开启，因为这样会在你开始输入时立即显示一个包含完整数据成员名称的对话框。这使得记住变量名变得容易，因此你不必记住它们：
- en: '![](img/e3522db1-0b15-45a1-8cc7-81eca020029a.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e3522db1-0b15-45a1-8cc7-81eca020029a.png)'
- en: If you press *Ctrl* + spacebar inside the code editor at any time, the auto
    list pops up.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在任何时间在代码编辑器中按下 *Ctrl* + 空格键，自动列表就会弹出。
- en: 'Some more autocomplete behavior options are located under Text Editor | C/C++
    | Formatting:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一些更多的自动完成行为选项位于“文本编辑器”|“C/C++”|“格式化”下：
- en: '![](img/2c6cb741-3ca4-45de-97e3-360e54abf7d8.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c6cb741-3ca4-45de-97e3-360e54abf7d8.png)'
- en: I recommend using all of the options at first and then disabling them only if
    they interrupt your workflow.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议最初使用所有选项，然后仅当它们干扰你的工作流程时才禁用它们。
- en: You can also autoformat a section of text by highlighting a section of text
    and selecting Edit | Advanced | Format Selection (*Ctrl* + *K*, *Ctrl* + *F*).
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过选择“编辑”|“高级”|“格式化选择”（*Ctrl* + *K*，*Ctrl* + *F*）来通过突出显示文本的一部分来自动格式化文本的一部分。
- en: How it works...
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The default autocomplete and autoformat behaviors may irk you. You need to converse
    with your team on how you want your code to be formatted (spaces or tab indents,
    size of indent, and so on), and then configure your Visual Studio settings accordingly.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的自动完成和自动格式化行为可能会让你感到烦恼。你需要与你的团队讨论你希望代码如何格式化（空格或制表符缩进，缩进大小等），然后相应地配置你的 Visual
    Studio 设置。
- en: Shortcut keys in Visual Studio
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Visual Studio 中的快捷键
- en: There are a number of shortcut keys that will make coding and project navigation
    much faster and more efficient for you. In this recipe, we will describe how to
    use some of the common shortcut keys that will really enhance your coding speed.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多快捷键可以使你的编码和项目导航更快、更高效。在这个菜谱中，我们将描述如何使用一些常见的快捷键，这些快捷键将真正提高你的编码速度。
- en: Getting ready
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: To get started, you will need to have Visual Studio installed and a project
    opened to look at the features.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用，你需要安装 Visual Studio 并打开一个项目来查看其功能。
- en: How to do it...
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'The following are some very useful keyboard shortcuts for you to try:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些非常实用的键盘快捷键，你可以尝试使用：
- en: 'Click on one part of the code, then click somewhere else, at least 10 lines
    of code away. Now, press *Ctrl* + *-* [navigate backwards]. Navigation through
    different pages of source code (the last place you were at, and the place you
    are at now) is done by pressing *Ctrl* + *-* and *Ctrl* + *Shift* + *-*, respectively:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击代码的一部分，然后点击至少 10 行代码以外的某个地方。现在，按 *Ctrl* + *-* [向后导航]。通过按 *Ctrl* + *-* 和 *Ctrl*
    + *Shift* + *-* 分别在源代码的不同页面之间导航（你最后所在的位置，以及你现在所在的位置）：
- en: '![](img/96a3c744-7446-4066-830d-27b17f03f485.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](img/96a3c744-7446-4066-830d-27b17f03f485.png)'
- en: Note that the being mentioned is the one near the 0 key on your keyboard and
    will not work with the on the numpad.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这里提到的键是键盘上靠近 0 键的那个键，并且与数字键盘上的键不兼容。
- en: Warping around in the text editor using *Ctrl* + *-*. The cursor will jump back
    to the last location it was in that is more than 10 lines of code away, even if
    the last location was in a separate file.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 *Ctrl* + *-* 在文本编辑器中跳转。光标将跳回到最后的位置，该位置距离超过 10 行代码，即使最后的位置是在不同的文件中。
- en: 'Say, for example, you''re editing code in one place, and you want to go back
    to the place you''ve just been (or go back to the section in the code you came
    from). Simply press *Ctrl* + *-*, and that will warp you back to the location
    in the code you were at last. To warp forward to the location you were at before,
    press *Ctrl* + *-*, press *Ctrl* + *Shift* + *-*. To warp back, the previous location
    should be more than 10 lines away, or in a different file. These correspond to
    the forward and back menu buttons in the toolbar:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你在一个地方编辑代码，并想回到你刚刚所在的地方（或者回到你来自的代码部分），只需按 *Ctrl* + *-*，这样就会把你带回到你最后所在的位置。要向前跳转到你之前所在的位置，按
    *Ctrl* + *-*，然后按 *Ctrl* + *Shift* + *-*。要返回，前一个位置应该超过 10 行，或者在不同的文件中。这对应于工具栏中的前进和后退菜单按钮：
- en: '![](img/1aa31481-9a3e-432c-85d1-0c97fe27f9c9.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1aa31481-9a3e-432c-85d1-0c97fe27f9c9.png)'
- en: The back and forward navigation buttons in the toolbar correspond to the *Ctrl* + *-* and *Ctrl* + *Shift* + *-* shortcuts,
    respectively.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 工具栏中的后退和前进导航按钮分别对应于 *Ctrl* + *-* 和 *Ctrl* + *Shift* + *-* 快捷键。
- en: Press *Ctrl* + *W* to highlight a single word.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *Ctrl* + *W* 突出一个单词。
- en: Press and hold *Ctrl* + *Shift* + right arrow (or left arrow) (not *Shift* +
    right arrow) just to move to the right and left of the cursor, selecting entire
    words.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按住 *Ctrl* + *Shift* + 向右箭头（或向左箭头）（不是 *Shift* + 向右箭头）仅用于移动到光标的左右，选择整个单词。
- en: Press *Ctrl* + *C* to copy text, *Ctrl* + *X* to cut text, and *Ctrl* + *V*
    to paste text.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *Ctrl* + *C* 复制文本，*Ctrl* + *X* 剪切文本，*Ctrl* + *V* 粘贴文本。
- en: '**Clipboard ring**: The clipboard ring is a kind of a reference to the fact
    that Visual Studio maintains a stack of the last copy operations. By pressing
    *Ctrl* + *C*, you push the text that you are copying into an effective stack.
    Pressing *Ctrl* + *C* a second time on different text pushes that text into the
    **Clipboard Stack**. For example, in the following diagram, we pressed *Ctrl*
    + *C* on the word *cyclic* first, then *Ctrl* + *C* on the word *paste* afterward.'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**剪贴板循环**：剪贴板循环是一种对事实的参考，即 Visual Studio 维护一个最近复制操作的堆栈。通过按 *Ctrl* + *C*，你将你正在复制的文本推入一个有效的堆栈。在另一段文本上第二次按
    *Ctrl* + *C* 将该文本推入 **剪贴板堆栈**。例如，在以下图中，我们首先按 *Ctrl* + *C* 在单词 *cyclic* 上，然后之后按
    *Ctrl* + *C* 在单词 *paste* 上。'
- en: As you know, pressing *Ctrl* + *V* pastes the top item in the stack. Pressing
    *Ctrl* + *Shift* + Insert accesses a very long history of all the items ever copied
    in that session, that is, items underneath the top item in the stack. After you
    exhaust the list of items, the list wraps back to the top item in the stack. This
    is an odd feature, but you may find it useful occasionally.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所知，按下 *Ctrl* + *V* 会粘贴堆栈顶部的项目。按下 *Ctrl* + *Shift* + Insert 会访问该会话中所有已复制项目的非常长的历史记录，即堆栈顶部以下的项目。在你用尽项目列表后，列表会回绕到堆栈顶部的项目。这是一个奇特的功能，但你可能会偶尔发现它很有用。
- en: '*Ctrl* + *M* collapses a code section:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*Ctrl* + *M* 会折叠代码部分：'
- en: '![](img/a1e7ab10-2a4e-476f-aea2-bad7a5238d99.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a1e7ab10-2a4e-476f-aea2-bad7a5238d99.png)'
- en: How it works...
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Keyboard shortcuts allow you to speed up work in the code editor by reducing
    the number of mouse- reaches that you have to perform in a coding session.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 键盘快捷键可以通过减少编码会话中必须执行的鼠标点击次数来加快代码编辑器中的工作速度。
- en: Extended mouse usage in Visual Studio
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Visual Studio中的扩展鼠标使用
- en: The mouse is a pretty handy tool for selecting text. In this section, we'll
    highlight how to use the mouse in an advanced way so that you can make quick edits
    to your code's text.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 鼠标是一个相当方便的工具，用于选择文本。在本节中，我们将强调如何以高级方式使用鼠标，以便你可以快速编辑代码文本。
- en: How to do it...
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Hold down the *Ctrl* key while clicking to select an entire word:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按住 *Ctrl* 键同时点击以选择整个单词：
- en: '![](img/b134cd1a-6c42-4cdb-9844-f985d795ca6b.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b134cd1a-6c42-4cdb-9844-f985d795ca6b.png)'
- en: 'Hold down the *Alt* key to select a box of text (*Alt* + left-click + drag):'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按住 *Alt* 键以选择文本框（*Alt* + 左键点击 + 拖动）：
- en: '![](img/af625ed1-7100-4629-abf0-58296eec61cf.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/af625ed1-7100-4629-abf0-58296eec61cf.png)'
- en: You can then either cut, copy, or overwrite the box-shaped text area; in the
    latter case, the characters you type will be repeated in all selected rows.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以随后剪切、复制或覆盖矩形文本区域；在后一种情况下，你输入的字符将在所有选定的行中重复。
- en: How it works...
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Mouse-clicking alone can be tedious, but with the help of *Ctrl* + *Alt*, it
    becomes quite cool.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 单击鼠标本身可能会很繁琐，但有了 *Ctrl* + *Alt* 的帮助，它变得相当酷。
- en: Installing Unreal Engine 4 (UE4)
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Unreal Engine 4 (UE4)
- en: There are a number of steps to follow to install and configure UE4 properly.
    In this recipe, we'll walk through the correct installation and setup of the engine.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 要正确安装和配置UE4，需要遵循一系列步骤。在这个菜谱中，我们将介绍正确的安装和设置引擎的方法。
- en: Getting ready
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: UE4 takes up quite a few GB of space, so you should have at least 20 GB or so
    free for the installation on the target drive. Note that every project is also
    at least 1 GB as well, so you will need more space on your computer (or an additional
    hard drive) for more projects you wish to create.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: UE4需要占用相当多的空间，所以你应该在目标驱动器上至少有20 GB左右的空闲空间。请注意，每个项目至少也需要1 GB的空间，所以如果你希望创建更多的项目，你需要在你的电脑上（或额外的硬盘）上预留更多的空间。
- en: How to do it...
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Visit [unrealengine.com](http://unrealengine.com) in your web browser of choice:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你选择的网页浏览器中访问 [unrealengine.com](http://unrealengine.com)：
- en: '![](img/a07cf0f4-b721-4595-bbfc-7bf0ee31012e.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a07cf0f4-b721-4595-bbfc-7bf0ee31012e.png)'
- en: On the top-right corner of the screen, click on the Download button. You'll
    then be asked to create an Epic Games account. If you already have one, you can
    scroll down to the bottom of the screen and click the Sign in option.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在屏幕的右上角，点击下载按钮。然后系统会要求你创建一个Epic Games账户。如果你已经有了账户，你可以滚动到屏幕底部并点击登录选项。
- en: Run the installer for the Epic Games Launcher program by double-clicking the
    `EpicGamesLauncherInstaller-x.x.x-xxx.msi` installer. Install it in the default
    location.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过双击 `EpicGamesLauncherInstaller-x.x.x-xxx.msi` 安装程序来运行Epic Games Launcher程序的安装程序。将其安装在默认位置。
- en: 'Once the Epic Games Launcher program is installed, open it by double-clicking
    its icon, which can be found on your desktop or in the Start menu:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Epic Games Launcher程序安装完成后，通过双击其图标打开它，该图标可以在你的桌面上或开始菜单中找到：
- en: '![](img/b86be0b9-a313-4123-877c-1f19a9822343.png)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b86be0b9-a313-4123-877c-1f19a9822343.png)'
- en: 'You''ll need to sign in with the same login information you created or used
    earlier, and then you''ll arrive at the main page of the launcher:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你需要使用你之前创建或使用的相同登录信息进行登录，然后你会到达启动器的主页：
- en: '![](img/4023b8b0-08f1-4f99-9246-496d24b1f573.png)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4023b8b0-08f1-4f99-9246-496d24b1f573.png)'
- en: There are a lot of available options, but we want to click on the Unreal Engine option
    on the top-left of the screen.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有很多可用的选项，但我们需要点击屏幕左上角的Unreal Engine选项。
- en: 'Browse the start page and take a look around. Eventually, you will need to
    install an engine. Click on the large orange Install Engine button on the screen, as
    shown in the following screenshot:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览起始页面，四处看看。最终，您将需要安装一个引擎。点击屏幕上的大号橙色安装引擎按钮，如图所示：
- en: '![](img/9d0f21d6-0123-41ae-858e-ad95880947c4.png)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/9d0f21d6-0123-41ae-858e-ad95880947c4.png)'
- en: 'A pop-up dialog will ask you to agree to an End Licence Agreement. Afterwards,
    you''ll be asked to choose an install location. Then, click the Install button:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将弹出一个对话框，要求您同意最终许可协议。之后，您将被要求选择安装位置。然后，点击安装按钮：
- en: '![](img/11f35862-2ecb-4091-9f29-d93439fa6c83.png)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/11f35862-2ecb-4091-9f29-d93439fa6c83.png)'
- en: 'The launcher will start downloading the engine. It is about 7 GB, so it may
    take a while. Once finished, your screen should look something like this:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 启动器将开始下载引擎。它大约有7 GB，所以可能需要一段时间。完成后，您的屏幕应该看起来像这样：
- en: '![](img/b8badf1d-a24a-4cc1-afb6-64fc40097366.png)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b8badf1d-a24a-4cc1-afb6-64fc40097366.png)'
- en: After the engine has installed, the Install Engine button will change to a Launch
    Engine button.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在引擎安装完成后，安装引擎按钮将更改为启动引擎按钮。
- en: How it works...
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The Epic Games Launcher is the program that you need to start up the engine
    itself. It keeps a copy of all your projects and libraries in the Library tab.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: Epic Games启动器是您启动引擎本身的程序。它将所有项目库的副本保存在“库”选项卡中。
- en: There's more...
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多...
- en: As you learn more about working in UE4, you should check out some of the free
    library packages in the Library | Vault section. For that, click the Library item
    on the left-hand side and scroll down until you see Vault, underneath My Projects.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 随着您对在UE4中工作的了解越来越多，您应该查看“库 | 保险库”部分中的某些免费库包。为此，请点击左侧的“库”项，并向下滚动，直到您在“我的项目”下看到保险库。
- en: Creating your first project in UE4
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在UE4中创建您的第一个项目
- en: Setting up a project within UE4 takes a number of steps. It is important to
    get your options correct so that you can have the setup that you like, so carefully
    follow this recipe when constructing your first project.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在UE4中设置项目需要多个步骤。确保您的选项正确，以便您可以拥有您喜欢的设置，因此在构建第一个项目时仔细遵循此配方。
- en: Each project that you create within UE4 takes up at least 1 GB of space or so,
    so you should decide whether you want your created projects on the same target
    drive or on an external or separate HDD.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在UE4中创建的每个项目至少占用约1 GB的空间，因此您应该决定是否希望您的项目位于同一目标驱动器上，或者位于外部或单独的硬盘驱动器上。
- en: How to do it...
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: From the Epic Games Launcher, click on the Launch Unreal Engine 4.21.2 button
    on the left side of the screen. Once you are inside the engine, an option to create
    a new project or load an existing one will present itself.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Epic Games启动器中，点击屏幕左侧的启动Unreal Engine 4.21.2按钮。一旦您进入引擎，就会提供一个创建新项目或加载现有项目的选项。
- en: Note that depending on when you are reading this book, the version number could
    be different, but the steps should be the same, if not incredibly similar.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，根据您阅读这本书的时间，版本号可能不同，但如果不是极其相似，步骤应该是相同的。
- en: Select the New Project tab.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择“新建项目”选项卡。
- en: 'Decide whether you will be using C++ to code your project, or blueprints exclusively:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 决定您是否将使用C++来编写项目代码，或者仅使用蓝图：
- en: If you're using blueprints exclusively, make your selection of a template to
    use from the Blueprint tab.
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您仅使用蓝图，请从蓝图选项卡中选择要使用的模板。
- en: If you're using C++ in addition to blueprints to construct your project, select
    the project template to construct your project based on the C++ tab.
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您除了蓝图之外还使用C++来构建项目，请选择基于C++选项卡的项目模板来构建项目。
- en: 'If you''re not sure what template to base your code on, Basic Code is an excellent
    starting point for any C++ project (or Blank for a blueprint-exclusive (Unreal''s
    built-in visual scripting language) project):'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您不确定基于哪个模板编写代码，基本代码是任何C++项目的绝佳起点（或者对于仅使用蓝图的项目（Unreal的内置可视化脚本语言）来说，空白是一个不错的选择）：
- en: '![](img/8c76e0d5-e09d-4688-8bdb-ef37d110325c.png)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8c76e0d5-e09d-4688-8bdb-ef37d110325c.png)'
- en: 'For the purpose of this book, we will always be using a C++ project:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 为了这本书的目的，我们将始终使用C++项目：
- en: 'Take a look at the three icons that appear beneath the template listing. There
    are three options here to configure:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看模板列表下方出现的三个图标。这里有三种选项可以配置：
- en: You can choose to target desktop or mobile applications.
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以选择针对桌面或移动应用程序。
- en: You have an option to alter the quality settings (the picture of a plant with
    the sun above it), but you probably don't need to alter these. The quality settings
    are reconfigurable under Engine | Engine Scalability Settings anyway.
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以选择更改质量设置（太阳在植物上的图片），但你可能不需要更改这些设置。无论如何，质量设置都可以在引擎 | 引擎可伸缩性设置下重新配置。
- en: The last option is whether to include Starter Content with the project or not.
    You can probably use the Starter Content package in your project. It has some
    excellent materials and textures available within it that are invaluable for a
    beginner, but as you start creating your own advanced projects, you will likely
    no longer need it.
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后一个选项是是否将启动内容包含在项目中。你可能可以在你的项目中使用启动内容包。它包含一些对初学者非常有价值的优秀材料和纹理，但随着你开始创建自己的高级项目，你可能会不再需要它。
- en: If you don't like the Starter Content package, try the packages in the UE4 Marketplace.
    There is some excellent free content there, including the GameTextures Material
    Pack.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不喜欢启动内容包，可以尝试UE4市场中的包。那里有一些优秀的内容，包括游戏纹理材质包。
- en: Select the drive and folder in which you will save your project. Keep in mind
    that each project is roughly 1 GB in size, and you will need at least that much
    space on the destination drive.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择你将保存项目的驱动器和文件夹。请记住，每个项目大约有1GB的大小，你将在目标驱动器上需要至少这么多空间。
- en: Name your project. Preferably, name it something unique and specific to what
    you are planning on creating.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为你的项目命名。最好给它起一个独特且具体于你计划创建的内容的名字。
- en: Hit Create. Both the UE4 Editor and Visual Studio 2017 windows should pop up,
    enabling you to edit your project.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击创建。UE4编辑器和Visual Studio 2017窗口应该会弹出，使你可以编辑你的项目。
- en: In the future, keep in mind that you can open the Visual Studio 2017 Solution
    using one of two methods. The first is using your local file explorer. Navigate
    to the root of where your project is stored and double-click on the `ProjectName.sln` file.
    The second way is from UE4: click on File | Open Visual Studio.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在未来，请记住，你可以使用两种方法之一打开Visual Studio 2017解决方案。第一种是使用你的本地文件资源管理器。导航到你的项目存储的根目录，双击`ProjectName.sln`文件。第二种方法是从UE4：点击文件
    | 打开Visual Studio。
- en: Creating your first level in UE4
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在UE4中创建你的第一个层级
- en: Creating levels in UE4 is easy and facilitated by a great all-around UI. In
    this recipe, we'll outline basic editor usage and describe how to construct your
    first level once you have your first project launched.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在UE4中创建层级非常简单，得益于一个功能强大的全面UI。在这个菜谱中，我们将概述基本编辑器使用方法，并描述一旦你启动了第一个项目，如何构建你的第一个层级。
- en: Getting ready
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Complete the previous recipe, *Creating your first project in UE4*. Once you
    have a project constructed, we can proceed with creating a level.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 完成之前的菜谱，*在UE4中创建你的第一个项目*。一旦你构建了一个项目，我们就可以继续创建层级。
- en: How to do it...
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'The default level that gets set up when you start a new project will contain
    some default geometry and scenery if the starter content was included when creating
    the project:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你开始一个新项目时，默认设置的层级将包含一些默认几何和场景，如果创建项目时包含了启动内容：
- en: '![](img/5b58e8d6-dc21-4be9-8731-78ad44f0dc90.png)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5b58e8d6-dc21-4be9-8731-78ad44f0dc90.png)'
- en: The MinimalDefault level and interface of Unreal Engine 4
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 最小默认层级和Unreal Engine 4界面
- en: You don't need to start with this starter stuff, however. If you don't want
    to build from it, you can delete it, or create a new level.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要从这些启动内容开始。如果你不想从它开始构建，你可以删除它，或者创建一个新的层级。
- en: 'To create a new level, click File | New Level...:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建一个新的层级，点击文件 | 新建层级...：
- en: '![](img/541267b6-e0c5-487a-8a9c-f336a90aa967.png)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![](img/541267b6-e0c5-487a-8a9c-f336a90aa967.png)'
- en: From here, you can select to create a level with a background sky (Default),
    or without a background sky (Empty Level).
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，你可以选择创建带有背景天空（默认）或没有背景天空（空层级）的层级。
- en: If you choose to create a level without a background sky, keep in mind that
    you must add a **light** to it to see the geometry you add to it.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你选择创建一个没有背景天空的层级，请记住，你必须添加一个**灯光**才能看到你添加到其中的几何形状。
- en: If you loaded the Starter Content on your project's creation (or some other
    content), then you can use the Content Browser to pull content into your level.
    Simply drag and drop instances of your content from the Content Browser into the
    level and save it, and then play the game by hitting the Play button.
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你在你项目的创建过程中加载了启动内容（或某些其他内容），那么你可以使用内容浏览器将内容拖放到你的层级中。只需将内容浏览器中的内容实例拖放到层级中，然后保存，并按播放按钮玩游戏。
- en: 'Add some geometry to your level using the Modes panel (Window | Modes). Be
    sure to click on the left-most button with the picture of a light bulb and cube
    on it to access the placeable geometry:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用模式面板（窗口 | 模式）向您的关卡添加一些几何形状。务必点击最左边的带有灯泡和立方体图片的按钮，以访问可放置的几何形状：
- en: '![](img/f8217cff-4439-44a1-971d-bb86f4078fc8.png)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f8217cff-4439-44a1-971d-bb86f4078fc8.png)'
- en: By default, the Basic option is selected, which contains general geometry and
    other common features that are needed in Unreal. You can also add lights via the Modes tab
    by clicking on the Lights subtab on the left-hand side of the Modes tab. These
    can be added to a level by dragging and dropping as well.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，选择了基本选项，其中包含在虚幻中需要的通用几何形状和其他常见功能。您还可以通过点击模式标签左侧的灯光子标签通过模式选项卡添加灯光。这些可以通过拖放添加到关卡中。
- en: 'The Modes panel contains two useful items for level construction: some sample
    geometry to add (cubes and spheres and the like), as well as a panel full of lights.
    Try these out and experiment to begin laying out your level.'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 模式面板包含两个用于关卡构建的有用项目：一些要添加的示例几何形状（立方体、球体等），以及一个充满灯光的面板。尝试这些并实验以开始布置您的关卡。
- en: If you are interested in learning more about building levels inside Unreal Engine,
    check out [https://docs.unrealengine.com/en-us/Engine/QuickStart](https://docs.unrealengine.com/en-us/Engine/QuickStart)
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想了解更多关于在虚幻引擎内部构建关卡的信息，请查看[https://docs.unrealengine.com/en-us/Engine/QuickStart](https://docs.unrealengine.com/en-us/Engine/QuickStart)。
- en: UE4 – hot reloading
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: UE4 – 热重载
- en: When you created a new Unreal Engine 4 C++ project, you saw that both Visual
    Studio and Unreal Engine 4 opened up. In this recipe, we will go through an example
    of modifying a script in Visual Studio and then compiling the code to see the
    changes.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 当您创建一个新的虚幻引擎4 C++项目时，您会看到Visual Studio和虚幻引擎4都打开了。在这个食谱中，我们将通过修改Visual Studio中的脚本并编译代码以查看更改的示例。
- en: Getting ready
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: To see the effects of changing one of the classes, we have to actually be using
    the class. Unreal automatically creates one of these classes for us by default
    (`AChapter01_GameModeBase`), so for this simple example, we will make use of it.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看更改其中一个类的影响，我们必须实际使用该类。虚幻引擎默认为我们创建了一个这样的类（`AChapter01_GameModeBase`），因此在这个简单的例子中，我们将使用它。
- en: Note that everywhere you see `Chapter01` in the recipes in this chapter, I am
    referring to the project name, and if yours is named differently, you may see
    different text.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在本章的食谱中，您在任何地方看到`Chapter01`，我指的是项目名称，如果您的项目名称不同，您可能会看到不同的文本。
- en: From the Unreal Editor, go to Edit | Project Settings. Select the Maps & Modes
    option under the Project section.
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从虚幻编辑器转到编辑 | 项目设置。在项目部分下选择地图和模式选项。
- en: 'Under Default GameMode, select Chapter01_GameMode:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在默认游戏模式下，选择Chapter01_GameMode：
- en: '![](img/b887caf3-0c76-4c00-9d58-39b1f6e90ea3.png)'
  id: totrans-247
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b887caf3-0c76-4c00-9d58-39b1f6e90ea3.png)'
- en: Note that the class name is `AChapter01_GameModeBase` in code, while in Unreal's
    menus it doesn't have the `A`. This is because Unreal's naming convention for
    classes always adds an `A` to classes that inherit from the `Actor` class. We
    will discuss this in greater detail later on in this book.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在代码中类名为`AChapter01_GameModeBase`，而在虚幻引擎的菜单中它没有`A`。这是因为虚幻引擎为继承自`Actor`类的类添加了`A`作为命名约定。我们将在本书后面的部分详细讨论这一点。
- en: A **game mode** is a class that will contain the rules of your game type.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '**游戏模式**是一个包含您游戏类型规则的类。'
- en: For more information on game modes, check out [https://docs.unrealengine.com/en-US/Gameplay/Framework/GameMode](https://docs.unrealengine.com/en-US/Gameplay/Framework/GameMode).
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 想要了解更多关于游戏模式的信息，请查看[https://docs.unrealengine.com/en-US/Gameplay/Framework/GameMode](https://docs.unrealengine.com/en-US/Gameplay/Framework/GameMode)。
- en: How to do it...
  id: totrans-251
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Inside Visual Studio under the Solution Explorer, you will see a number of
    pre-created files. Open the `Games/Chapter_01/Source/Chapter_01` folder and you
    should see the `Chapter01GameModeBase.h` and `.cpp` files. Double-click on the
    `.h` file to open it:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio的解决方案资源管理器下，您将看到许多预创建的文件。打开`Games/Chapter_01/Source/Chapter_01`文件夹，您应该会看到`Chapter01GameModeBase.h`和`.cpp`文件。双击`.h`文件以打开它：
- en: '![](img/3ca35114-5579-492a-9b4b-52303519acca.png)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3ca35114-5579-492a-9b4b-52303519acca.png)'
- en: 'Add the following code (in bold) to the file:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下（加粗）代码添加到文件中：
- en: '[PRE1]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next, open the `.cpp` file and update it to have the following:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开`.cpp`文件并更新它以包含以下内容：
- en: '[PRE2]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This code currently doesn't do anything, but it gives us the ability to add
    changes to it later on in the future recipes of this chapter.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码目前没有任何作用，但它为我们提供了在未来的章节食谱中稍后添加更改的能力。
- en: 'Save both files and return to the Unreal editor. From the editor, click on
    the Compile button:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存两个文件并返回到Unreal编辑器。从编辑器，点击编译按钮：
- en: '![](img/53f00d56-68f2-41e8-a43b-030fcb92d3d0.png)'
  id: totrans-260
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/53f00d56-68f2-41e8-a43b-030fcb92d3d0.png)'
- en: 'If all goes well, you should see a menu appear on the bottom-right of the screen,
    and after a period of time, you should see it say Compile Complete!:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，你应该在屏幕的右下角看到一个菜单出现，经过一段时间后，你应该看到它显示Compile Complete!：
- en: '![](img/ee3d438b-4321-4a7a-a7fb-df1646911ac8.png)'
  id: totrans-262
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ee3d438b-4321-4a7a-a7fb-df1646911ac8.png)'
- en: It is also possible to compile your code in Visual Studio by right-clicking
    on the project from the Solution Explorer and selecting Build. Upon completion,
    when we go back to the Unreal editor, it should automatically load the changes
    that were made.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过在解决方案资源管理器中右键单击项目来在Visual Studio中编译你的代码，并选择Build。完成后，当我们回到Unreal编辑器时，它应该自动加载所做的更改。
- en: It is important for us to remember to compile our code any time we make changes
    to our code files. Otherwise, we will not be able to see those changes reflected
    in our project.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们修改代码文件时，记住编译我们的代码非常重要。否则，我们将无法看到这些更改在我们的项目中反映出来。
- en: For more information on compiling your own code for Unreal Engine 4, check out [https://docs.unrealengine.com/en-US/Programming/QuickStart](https://docs.unrealengine.com/en-US/Programming/QuickStart).
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 关于如何为Unreal Engine 4编译自己的代码的更多信息，请查看[https://docs.unrealengine.com/en-US/Programming/QuickStart](https://docs.unrealengine.com/en-US/Programming/QuickStart)。
- en: UE4 – logging with UE_LOG
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: UE4 – 使用UE_LOG进行日志记录
- en: '**Logging** is extremely important for outputting internal game data. Using
    log tools lets you print information into a handy little Output Log window in
    the UE4 editor.'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '**日志记录**对于输出内部游戏数据非常重要。使用日志工具可以让你在UE4编辑器中的方便的小输出日志窗口中打印信息。'
- en: Getting ready
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: When coding, we may sometimes want to send some debug information out to the
    UE log window. This is possible using the `UE_LOG` macro. A **macro** is a fragment
    of code that has been given a name. Whenever the name is used in code, it is replaced
    by the contents of the macro at compile time. Log messages are an extremely important
    and convenient way to keep track of information in your program as you are developing
    it.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 当编码时，我们有时可能希望将一些调试信息发送到UE日志窗口。这可以通过使用`UE_LOG`宏来实现。**宏**是一段被赋予名称的代码片段。每当在代码中使用该名称时，在编译时都会用宏的内容替换它。日志消息是在开发程序时跟踪信息的一种极其重要且方便的方式。
- en: You should have a code file to complete this recipe. If this is your first time
    coding in Unreal, you should complete the previous recipe before continuing with
    this one.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该有一个代码文件来完成这个食谱。如果你是第一次在Unreal中编码，你应该在继续这个食谱之前完成上一个食谱。
- en: How to do it...
  id: totrans-271
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'In your code, enter a line of code using the following form:'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的代码中，输入一行代码，使用以下形式：
- en: '[PRE3]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'For instance, if you wanted to add this to the script in the previous recipe,
    it may look like this:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你想将此内容添加到上一个食谱中的脚本中，它可能看起来像这样：
- en: '[PRE4]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Turn on the Output Log inside the UE4 editor by going to Window | Developer
    Tools | Output Log to see your log messages printed in that window as your program
    is running:'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在UE4编辑器中，通过转到Window | Developer Tools | Output Log来打开输出日志，以查看程序运行时在该窗口中打印的日志消息：
- en: '![](img/5be2810d-c8aa-404c-be08-ac2cd59cebed.png)'
  id: totrans-277
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5be2810d-c8aa-404c-be08-ac2cd59cebed.png)'
- en: 'If you play your game by clicking on the Play button from the top toolbar,
    you should notice our text being displayed in yellow on the log:'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你通过点击顶部工具栏中的播放按钮来玩游戏，你应该注意到我们的文本在日志中以黄色显示：
- en: '![](img/1542e346-58e3-4c3c-839c-7a40d883d68f.png)'
  id: totrans-279
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1542e346-58e3-4c3c-839c-7a40d883d68f.png)'
- en: To make your output easier to see, you can clear the Output Log at any time
    by right-clicking on it within the window and selecting Clear Log.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使你的输出更容易看到，你可以在任何时候通过在窗口内右键单击输出日志并选择Clear Log来清除输出日志。
- en: How it works...
  id: totrans-281
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The `UE_LOG` macro accepts a minimum of three parameters:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '`UE_LOG`宏接受至少三个参数：'
- en: The `Log` category (we used `LogTemp` here to denote a log message in a temporary
    log)
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Log`类别（我们在这里使用`LogTemp`来表示临时日志中的日志消息）'
- en: The Log level (we used a warning here to denote a log message, printed in yellow
    warning text)
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日志级别（我们在这里使用警告来表示日志消息，以黄色警告文本打印）
- en: A string for the actual text of the log message itself
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日志消息的实际文本字符串
- en: Do not forget the `TEXT()` macro around your log message text, as it will convert
    the text into a format that is usable by `UE_LOG`. For those more familiar with
    coding, the `TEXT()` macro promotes the enclosed text to Unicode (it prepends
    an `L`) when the compiler is set to run with Unicode on.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记在你的日志消息文本周围使用 `TEXT()` 宏，因为它会将文本转换为 `UE_LOG` 可用的格式。对于那些更熟悉编码的人来说，`TEXT()`
    宏在编译器设置为在 Unicode 上运行时将包含的文本提升为 Unicode（在前面添加一个 `L`）。
- en: '`UE_LOG` also accepts a variable number of arguments, just like `printf()`
    from the C programming language:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '`UE_LOG` 也接受可变数量的参数，就像 C 编程语言中的 `printf()` 一样：'
- en: '[PRE5]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: There will be an asterisk `*` just before the `FString` variable when using
    `UE_LOG` to dereference the `FString` to a regular C-style `TCHAR` pointer. This
    means that it is converting the pointer into the actual value it is pointing at.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 `UE_LOG` 来解引用 `FString` 到常规的 C 风格 `TCHAR` 指针时，变量前将会有一个星号 `*`。这意味着它正在将指针转换成它所指向的实际值。
- en: '`TCHAR` is usually defined as a variable type where, if Unicode is being used
    in the compile, the `TCHAR` resolves to the built-in data type, `wchar_t` . If
    Unicode is off (the `_UNICODE` compiler switch is not defined), then `TCHAR` resolves
    to simply the standard `char` type.'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '`TCHAR` 通常定义为一种变量类型，如果编译时使用 Unicode，则 `TCHAR` 解析为内置数据类型 `wchar_t`。如果 Unicode
    关闭（`_UNICODE` 编译器开关未定义），则 `TCHAR` 解析为标准的 `char` 类型。'
- en: For more information on TCHAR and working with strings in general with C++,
    check out [https://docs.microsoft.com/en-us/windows/desktop/learnwin32/working-with-strings#tchars](https://docs.microsoft.com/en-us/windows/desktop/learnwin32/working-with-strings#tchars).
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于 `TCHAR` 和使用 C++ 处理字符串的信息，请查看[https://docs.microsoft.com/en-us/windows/desktop/learnwin32/working-with-strings#tchars](https://docs.microsoft.com/en-us/windows/desktop/learnwin32/working-with-strings#tchars)。
- en: Don't forget to clear your log messages after you no longer need them from the
    source! Otherwise, your console may become bloated with messages and make it difficult
    to find things you are looking for.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 在你不再需要它们时，不要忘记清除你的日志消息！否则，你的控制台可能会因为消息而变得臃肿，难以找到你想要的东西。
- en: UE4 – making an FString from FStrings and other variables
  id: totrans-293
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: UE4 – 从 FStrings 和其他变量创建 FString
- en: When coding in UE4, you often want to construct a string from variables. This
    is pretty easy using the `FString::Printf` or `FString::Format` function.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 在 UE4 中编码时，你经常想要从变量中构建一个字符串。使用 `FString::Printf` 或 `FString::Format` 函数来做这件事相当简单。
- en: Getting ready
  id: totrans-295
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this, you should have an existing project into which you can enter some
    UE4 C++ code. Putting variables into a string is possible via **printing**. It
    may be counter intuitive to print into a string, but you can't just concatenate
    variables together and hope that they will automatically convert into strings,
    as in some languages, such as JavaScript.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个，你应该有一个现有的项目，你可以在其中输入一些 UE4 C++ 代码。将变量放入字符串中是通过**打印**来实现的。将变量打印到字符串中可能不太直观，但你不能简单地将变量连接起来并希望它们会自动转换为字符串，就像在某些语言（如
    JavaScript）中那样。
- en: How to do it...
  id: totrans-297
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'In this recipe, we will see how to print in two different ways. First, we will
    be using `FString::Printf()`:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将看到如何以两种不同的方式打印。首先，我们将使用 `FString::Printf()`：
- en: Consider the variables you'd like to be printed into your string. Note what
    each variable type is.
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 考虑你想要打印到字符串中的变量。注意每个变量类型是什么。
- en: Open and take a look at a reference page of the `printf` format specifiers,
    such as [http://en.cppreference.com/w/cpp/io/c/fprintf](http://en.cppreference.com/w/cpp/io/c/fprintf).
    For each variable you want to print, node what the specifier is. For example,
    `%s` for a formatted string.
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开并查看 `printf` 格式说明符的参考页面，例如 [http://en.cppreference.com/w/cpp/io/c/fprintf](http://en.cppreference.com/w/cpp/io/c/fprintf)。对于你想要打印的每个变量，注意其说明符。例如，`%s`
    用于格式化的字符串。
- en: 'Try code such as the following:'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试以下代码：
- en: '[PRE6]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Notice how the preceding code block uses the format specifiers precisely like
    the traditional `printf` function does. In the preceding example, we used `%s`
    to place a string in the formatted string, and `%d` to place an integer in the
    formatted string. Different format specifiers exist for different types of variables,
    and you should look them up on a site such as `cppreference.com`.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 注意前面的代码块是如何精确地使用格式说明符，就像传统的 `printf` 函数一样。在上面的例子中，我们使用了 `%s` 来在格式化的字符串中放置一个字符串，并使用
    `%d` 来在格式化的字符串中放置一个整数。不同类型的变量有不同的格式说明符，你应该在 `cppreference.com` 等网站上查找它们。
- en: It is also possible to print a string using `FString::Format()`.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以使用 `FString::Format()` 来打印一个字符串。
- en: 'Write code in the following form:'
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按以下形式编写代码：
- en: '[PRE7]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'With `FString::Format()`, instead of using correct format specifiers, we use
    simple integers and a `TArray` of `FStringFormatArg` instead. `FstringFormatArg`
    helps `FString::Format()` deduce the type of variable to put in the string. Refer
    to the following screenshot:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `FString::Format()` 时，我们不是使用正确的格式说明符，而是使用简单的整数和一个 `TArray` 的 `FStringFormatArg`。`FstringFormatArg`
    帮助 `FString::Format()` 推断要放入字符串中的变量的类型。请参考以下截图：
- en: '![](img/d32f957e-4bc9-4527-b98d-5a65f69fd593.png)'
  id: totrans-308
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d32f957e-4bc9-4527-b98d-5a65f69fd593.png)'
- en: No matter which method you use, upon calling `UE_LOG` and you will get the same
    output.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你使用哪种方法，在调用 `UE_LOG` 之后，你都会得到相同的输出。
