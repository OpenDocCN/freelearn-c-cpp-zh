- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Low Level Virtual Machine** (**LLVM**), is a collection of modular and reusable
    compiler and toolchain technologies used to develop compilers and compiler tools,
    such as linters and refactoring tools. LLVM is written in C++ and can be considered
    a good example of a well-structured project that uses interesting techniques aimed
    at making it reusable and efficient. The project can also be considered an excellent
    example of compiler architecture; diving into it will give you a sense of how
    compilers are organized and how they function. This should help to understand
    usage patterns and apply them accordingly.'
  prefs: []
  type: TYPE_NORMAL
- en: One of the key components of LLVM is the C/C++ compiler known as Clang. This
    compiler is widely used across various companies and has been designated as the
    default compiler for certain development environments, notably for macOS development.
    Clang will be the primary focus of our investigation in this book, with particular
    attention to its frontend—the part that is closest to the C/C++ programming language.
    Specifically, the book will include examples demonstrating how the C++ standard
    is implemented within the compiler.
  prefs: []
  type: TYPE_NORMAL
- en: A pivotal aspect of LLVM’s design is its modularity, which facilitates the creation
    of custom tools that exploit the compiler’s comprehensive capabilities. A notable
    example covered in the book is the Clang-Tidy linter framework, designed to identify
    undesirable code patterns and recommend corrections. Although it includes several
    hundred checks, you may not find one specific to your project’s needs. However,
    the book will provide you with the foundation necessary to develop such a check
    from the beginning.
  prefs: []
  type: TYPE_NORMAL
- en: LLVM is an actively evolving project with two major releases each year. At the
    time the book was written, the latest stable release was version 17\. Meanwhile,
    a release candidate for version 18 was introduced in January 2024, with its official
    release anticipated to coincide with the publication of the book. The book’s content
    has been verified against the latest compiler version, 18, ensuring it provides
    insights based on the most current compiler implementation available.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The book is written for C++ engineers who don’t have prior knowledge of compilers
    but wish to gain this knowledge and apply it to their daily activities. It provides
    an overview of the Clang compiler frontend, an essential yet often underestimated
    part of LLVM. This section of the compiler, along with a collection of powerful
    tools, enables programmers to enhance code quality and the overall development
    process. For example, Clang-Tidy offers more than 500 different lint checks that
    detect anti-patterns in code (such as use after move) and help maintain code style
    and standards. Another notable tool is Clang-Format, which allows specifying various
    formatting rules suitable for your project. These tools can also be considered
    an integral part of the development process. For instance, the language server
    (Clangd) is a critical service providing navigation and refactoring support for
    your IDE.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding compiler internals might be crucial for anyone wanting to create
    and use such tools. The book provides the necessary foundation to begin this journey,
    covering basic LLVM architecture and offering a detailed description of Clang
    internals. It includes examples from LLVM source code and custom tools that extend
    the basic functionality provided by the compiler. Additionally, the book addresses
    compilation databases and various performance optimizations that can enhance the
    build speed of your projects. This knowledge should help C++ developers correctly
    apply the compiler to their work activities.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[*Chapter** 1*](B19722_01.xhtml#x1-150001)*, Environment Setup*, describes
    the basic steps required to set up the environment for future experiments with
    Clang, suitable for Unix-based systems such as Linux and Darwin (macOS). In addition,
    readers will learn how to download, configure, and build LLVM source code. We
    will also create a simple Clang Tool to verify the syntax of the provided source
    code.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter** 2*](B19722_02.xhtml#x1-330002)*, Clang Architecture*, examines
    the internal architecture of the Clang compiler. Starting with the basic concept
    of a compiler, we will explore how it is implemented in Clang. We will look at
    various parts of the compiler, including the driver, preprocessor (lexer), and
    parser. We will also examine examples that show how the C++ standard is implemented
    in Clang.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter** 3*](B19722_03.xhtml#x1-530003)*, Clang AST*, talks about **Clang
    Abstract Syntax Tree (AST)**, which is the basic data structure produced by the
    parser. We will explore how the AST is organized in Clang and how it can be traversed.
    We will also delve into AST Matchers — a powerful tool provided by Clang for locating
    specific AST nodes.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter** 4*](B19722_04.xhtml#x1-680004)*, Basic Libraries and Tools*, explores
    basic LLVM libraries and tools, including the LLVM **Abstract Data Type (ADT)**
    library, used across all LLVM code. We will investigate TableGen, a **Domain-Specific**
    **Language (DSL)** used to generate C++ code in various parts of LLVM. Additionally,
    we will explore **LLVM Integrated Tester (LIT)** tool used for creating powerful
    end-to-end tests. Using the knowledge gained, we will create a simple Clang plugin
    to estimate source code complexity.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter** 5*](B19722_05.xhtml#x1-990005)*, Clang-Tidy Linter Framework*,
    covers Clang-Tidy, a linter framework based on Clang AST, and creates a simple
    Clang-Tidy check. We will also discuss how compilation errors affect the AST and
    the results provided by different Clang Tools, such as Clang-Tidy.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter** 6*](B19722_06.xhtml#x1-1170006)*, Advanced Code Analysis*, goes
    further and considers another advanced data structure used for code analysis:
    **Control Flow Graphs** **(CFG)**. We will investigate typical cases for its application
    and create a simple Clang-Tidy check that utilizes this data structure.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter** 7*](B19722_07.xhtml#x1-1320007)*, Refactoring Tools*, Clang provides
    advanced tools for code modification and refactoring. We will explore different
    ways to create a custom refactoring tool, including one based on the Clang-Tidy
    linter framework. We will also explore Clang-Format, an extremely fast utility
    for automatic code formatting.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter** 8*](B19722_08.xhtml#x1-1520008)*, IDE Support and Clangd*, presents
    Clangd - a Language Server used in various IDEs, such as **Visual Studio Code
    (VS Code)**, to provide intelligent support, including navigation and code modification.
    Clangd exemplifies the utility of the powerful modular architecture of LLVM. It
    utilizes various Clang tools, such as Clang-Tidy and Clang-Format, to enhance
    the development experience in VS Code. Compiler performance is crucial for this
    tool, and we will explore several techniques Clangd employs to improve its performance,
    thereby offering the best experience to developers.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Appendix 1: Compilation Database*, describes the Compilation Database—a method
    for providing complex compilation commands to different Clang Tools. This functionality
    is crucial for integrating Clang Tools such as Clangd and Clang-Tidy into real
    C/C++ projects.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Appendix 2: Build Speed Optimizations*, covers several compiler performance
    optimizations that can be used to enhance compiler performance. We will cover
    Clang precompiled headers and Clang modules, which represent a serialized AST
    that can be loaded much faster than building it from scratch.'
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You will need to have an understanding of C++, especially C++17, which is used
    for LLVM and throughout the examples in the book. The provided examples are assumed
    to be run on a Unix-like operating system, with Linux and Darwin (Mac OS) being
    considered the operating system requirements for the book. We will use Git to
    clone the LLVM source tree and start working on it. Some tools also need to be
    installed, such as CMake and Ninja, which will be actively used to build the examples
    and the LLVM source code.
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are using the digital version of this book, we advise you to** **type
    the code yourself or access the code from the book’s GitHub** **repository (a
    link is available in the next section). Doing so will** **help you avoid any potential
    errors related to the copying and** **pasting of code.**'
  prefs: []
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The code bundle for the book is also hosted on GitHub at [https://github.com/PacktPublishing/Clang-Compiler-Frontend-Packt](https://github.com/PacktPublishing/Clang-Compiler-Frontend-Packt).
    In case there’s an update to the code, it will be updated on the existing GitHub
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: We also have other code bundles from our rich catalog of books and videos available
    at [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/).
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`CodeInText`: Indicates code words in text, database table names, folder names,
    filenames, file extensions, pathnames, dummy URLs, and user input. Here is an
    example: ”The first two parameters specify the declaration `(clang::Decl)` and
    the statement for the declaration `(clang::Stmt)`.”'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We use `<...>` as a placeholder for the folder where the LLVM source code was
    cloned.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some code examples will be representing input of shells. You can recognize
    them by specific prompt characters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`(``lldb``)` for interactive LLDB shell'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$` for Bash shell (macOS and Linux)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`>` for interactive shell provided by different Clang Tools, such as Clang-Query'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Warnings or important notes appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Get in touch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome.
  prefs: []
  type: TYPE_NORMAL
- en: '**General feedback**: If you have questions about any aspect of this book,
    mention the book title in the subject of your message and email us at [customercare@packtpub.com](mailto:customercare@packtpub.com).'
  prefs: []
  type: TYPE_NORMAL
- en: '**Errata**: Although we have taken every care to ensure the accuracy of our
    content, mistakes do happen. If you have found a mistake in this book, we would
    be grateful if you would report this to us. Please visit [https://www.packtpub.com/support/errata](https://www.packtpub.com/support/errata),
    selecting your book, clicking on the Errata Submission Form link, and entering
    the details.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Piracy**: If you come across any illegal copies of our works in any form
    on the Internet, we would be grateful if you would provide us with the location
    address or website name. Please contact us at [copyright@packt.com](mailto:copyright@packt.com)
    with a link to the material.'
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are interested in becoming an author**: If there is a topic that you
    have expertise in and you are interested in either writing or contributing to
    a book, please visit [https://partnerships.packt.com/contributors/](https://partnerships.packt.com/contributors/).'
  prefs: []
  type: TYPE_NORMAL
- en: Share your thoughts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once you’ve read *Clang Compiler Frontend*, we’d love to hear your thoughts!
    Please [click here to go straight to the Amazon review page](https://packt.link/r/1837630984)
    for this book and share your feedback.
  prefs: []
  type: TYPE_NORMAL
- en: Your review is important to us and the tech community and will help us make
    sure we’re delivering excellent quality content.
  prefs: []
  type: TYPE_NORMAL
- en: Download a free PDF copy of this book
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Thanks for purchasing this book!
  prefs: []
  type: TYPE_NORMAL
- en: Do you like to read on the go but are unable to carry your print books everywhere?
    Is your eBook purchase not compatible with the device of your choice?
  prefs: []
  type: TYPE_NORMAL
- en: Don’t worry, now with every Packt book you get a DRM-free PDF version of that
    book at no cost.
  prefs: []
  type: TYPE_NORMAL
- en: Read anywhere, any place, on any device. Search, copy, and paste code from your
    favorite technical books directly into your application.
  prefs: []
  type: TYPE_NORMAL
- en: The perks don’t stop there, you can get exclusive access to discounts, newsletters,
    and great free content in your inbox daily.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these simple steps to get the benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Scan the QR code or visit the link below:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![PIC](img/free_ebook_qr.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '[https://download.packt.com/free-ebook/9781837630981](https://download.packt.com/free-ebook/9781837630981)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Submit your proof of purchase.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That’s it! We’ll send your free PDF and other benefits to your email directly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
