- en: Fun with Sound
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Adding sound to your robotic project can be the difference between a good robot
    and an awesome robot. Just think about how cute R2-D2, from the movie *Star Wars*,
    would have been if he did not make any sound. We can use sound for more than just
    robots. For example, we may want to add a loud alarm if a motion sensor detects
    motion or maybe we just want to play a melody when the temperature is just right
    outside.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn:'
  prefs: []
  type: TYPE_NORMAL
- en: How to connect a piezo buzzer to the Arduino
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to connect a speaker to the Arduino
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use the `tone()` function to generate a sound
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to play music with the Arduino
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will be doing several projects that can use either a **piezo
    buzzer** or a small 8-ohm speaker. By using both the buzzer and the speaker, you
    will be able to hear the difference between the two to help determine which is
    right for our project.
  prefs: []
  type: TYPE_NORMAL
- en: A piezo buzzer is compact, reliable and very inexpensive. They are easier to
    mount and use than a normal speaker in most electronic projects. These buzzers
    can emit a wide range of sounds, from soft hums to loud alerts.
  prefs: []
  type: TYPE_NORMAL
- en: A piezo buzzer, sometimes known as a piezo speaker, creates sounds a little
    differently than a normal speaker. The working component of these buzzers is a
    thin disc of piezoelectric material usually bonded to a metal diaphragm. As the
    voltage is applied to the piezoelectric material, it deforms. This causes the
    metal diaphragm to bend forward or backward. This deformation happens very rapidly,
    causing the ceramic/metal bending element to vibrate at the frequency of the applied
    voltage, which produces the audible sound.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following photograph shows what a piezo buzzer looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dbeb2ce2-5221-4c97-a829-662b7cd10b06.png)'
  prefs: []
  type: TYPE_IMG
- en: The shorter pin should be connected to ground while the longer pin should be
    connected to power.
  prefs: []
  type: TYPE_NORMAL
- en: The 8 ohm speaker is a typical speaker that contains an electromagnet, which
    is a metal coil that creates a magnetic field when electricity is applied. By
    reversing the direction of the coil, the poles of the magnet reverse. This electromagnet
    is placed in front of a normal magnet where the poles cannot be reversed. The
    current direction that is applied to the electromagnet is changed rapidly, causing
    the magnets to attract and repel each other creating sound from a cone that is
    connected to the electromagnet.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows what an 8 ohm speaker could look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/03dc3298-c9cf-4ef0-bf6f-7e48dc2926c4.png)'
  prefs: []
  type: TYPE_IMG
- en: Now let's look at the components needed for this project.
  prefs: []
  type: TYPE_NORMAL
- en: Components needed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will need the following components for this chapter''s project:'
  prefs: []
  type: TYPE_NORMAL
- en: One Arduino Uno or compatible board
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One piezo buzzer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One 8 ohm speaker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jumper wires
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One breadboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Circuit diagrams
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here is the circuit diagram that we will use for all code samples in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fed1957f-9b99-4436-9a35-4edff0df9096.png)'
  prefs: []
  type: TYPE_IMG
- en: This diagram shows that the ground pins on both the speaker and piezo buzzer
    are connected to the ground rail on the breadboard. The power pin on the piezo
    buzzer is connected to pin 8 on the Arduino, and the power wire on the speaker
    is connected to pin 7 on the Arduino.
  prefs: []
  type: TYPE_NORMAL
- en: Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's start off by using the `tone()` function.
  prefs: []
  type: TYPE_NORMAL
- en: Using the tone function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For the first few examples in this chapter, we will be using the Arduino `tone()`
    function. This function comes in two varieties. The first variety takes two arguments,
    where the first is the pin number that the buzzer or speaker is connected to and
    the second is the frequency in hertz to play the sound at. The function looks
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When this function is used with only two parameters, the sound is played indefinitely.
    The following code shows how we could use this function to play a note using the
    previous circuit diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: With this code, the `tone()` function is used within the `setup()` function
    to play at 1000 Hz. We can set the sound pin to either the piezo buzzer or the
    speaker pin depending on which one you wish to play the sound. We would use this
    version of the `tone()` function if we wanted to play a sound continuously until
    some user interaction happens. An example of this would be playing an alert sound
    until the user acknowledged it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second variety of this function takes a third argument, which is the duration
    in milliseconds to play the sound. This function looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This version of the `tone()` function can be used like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This code is exactly like the previous code except the sound is only played
    for one second. We would use this version of the tone function if we wanted to
    play short notes with specific durations. An example of this would be playing
    a song, which we will see in the next example.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we can play a song with the Arduino, we need to define what frequency
    to play for different notes. The list of frequencies is quite large and can be
    downloaded with the downloadable code for this book. The file with the frequencies
    is called `pitches.h`, and the frequencies are defined like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s look at how we can use these frequencies to play a song. The first
    thing we will need to do is to create a pitches header tab, named `pitches.h`,
    which will contain the frequencies and then include it in the main tab with the
    following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we need to define the notes or melody that makes up the song. These notes
    will be stored in an array named `melody`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Each note in the song should play for a certain duration. We can create another
    array that contains the duration of each note, and we will call that array `tempo`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We will be using the `tone()` function to create the notes. With this function,
    we will not need to set up anything in the `setup()` function. The following code
    can be put in the `loop()` function to play the song defined by the `melody` and
    `tempo` arrays:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This code starts off by calculating the number of notes in the `melody` array
    by dividing the size of the `melody` array by the size of the first element in
    the array. We use this logic to calculate the number of elements in an array because
    the `sizeof(melody)` code returns the number of bytes occupied by the array and
    the `sizeof(melody[0])` returns the number of bytes occupied by the first element
    in the array. It takes two bytes to store a single integer, and there are 26 notes
    in the melody array. Therefore, the `size of (melody)` code will return `52`,
    and the `sizeof(melody[0])` code will return `2`.
  prefs: []
  type: TYPE_NORMAL
- en: A `for` loop is used to loop through the `melody` and `temp` arrays. Within
    the `for` loop, the note duration is calculated by taking one second and dividing
    it by the note type (the elements in the `tempo` array) where a quarter note is
    equal to 1000 divided by 4 and an eighth note is equal to 1000 divided by 8.
  prefs: []
  type: TYPE_NORMAL
- en: The `tone` function is used to play the note from the `melody` array for the
    calculated duration. The `tone` function will not cause the application to pause
    while the note is playing. Therefore, we need to create our own pause. We will
    also want to pause slightly longer than the duration of the note to have a slight
    pause between the notes. For this, we multiply the note duration by 1.2 and then
    use the `delay()` function. After the `for` loop has completed, there is another
    delay for three seconds before starting over.
  prefs: []
  type: TYPE_NORMAL
- en: This last example shows how we can play a song using the `tone()` function with
    two arrays, one for the notes and one for the tempo. Now let's look at how we
    can use a library that will enable us to play music that is in the **RTTTL** (**Ring
    Tone Text Transfer Language**) format. The RTTTL format was developed by Nokia
    to transfer ringtones to cellphones.
  prefs: []
  type: TYPE_NORMAL
- en: Playing a ringtone in the RTTTL format
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Arduino library manager does not have a library that we can download to
    play RTTTL files at this time. Therefore, we will need to download and manually
    install a library. We will be using Arduino-rtttl-player that can be downloaded
    here: [https://github.com/ponty/arduino-rtttl-player](https://github.com/ponty/arduino-rtttl-player).
    We will need to create a ZIP file of the library to load it into the IDE. If you
    do not have access to a utility that can zip up the files, the downloadable code
    for this book contains the library already zipped.'
  prefs: []
  type: TYPE_NORMAL
- en: When we create the ZIP file to load into the Arduino IDE, we do not want to
    zip up everything that is downloaded from the GitHub repository because the Arduino
    IDE will not recognize the ZIP file as a library file. We only want to zip up
    the directory that contains the code for the library, and in the case of the Arduino-rtttl-player
    library that would be the `rtttl` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'After we download the library and create a ZIP file that contains the `rtttl`
    folder from the library, we will want to load the library into the Arduino IDE.
    To do this, we will want to select Sketch | Include Library | Add .ZIP Library...
    from the main menu as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f6dd9a78-0b9c-4988-b77d-41675508590a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After you select the Add .ZIP Library option, you will be presented with a
    file picker where you can browse to the location of the ZIP file you created and
    select it. If the library was successfully imported, you will see a message in
    the message bar as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8b417a3f-5d50-47be-8f1d-a96c837a8267.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we are ready to play an RTTTL melody. The first thing we need to do is
    to include the library with the project by adding the following `include` statement
    to the sketch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We will want to include both the piezo buzzer and the speaker as we did in
    the earlier projects with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We will need to define the song to play. There are plenty of RTTTL codes on
    the internet. To find some, do a search for `rtttl songs` and you should see plenty
    of RTTTL codes for a wide variety of songs. For this example, we will play the
    *Star Wars* theme. The following code contains the RTTTL code for this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'To play this song, add the following code to the `setup()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: We use the `begin` function from the Arduino-rtttl-player library to initiate
    the library, and define what pin the speaker is connected to and then the `play`
    function to play the song. The second parameter in the `play` function is the
    octave. The higher the octave is set to the higher pitch the song will play at.
    I usually leave this at zero.
  prefs: []
  type: TYPE_NORMAL
- en: When this code is run, you should recognize the *Star Wars* theme.
  prefs: []
  type: TYPE_NORMAL
- en: Challenge
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the challenge, we will stay with the *Star Wars* theme. Let's say that we
    wanted to build a robot that looks like R2-D2 from *Star Wars*. One of the features
    that we would put in would be to have it sound like R2-D2\. How would you make
    the robot sound like R2-D2?
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we saw how to connect both a speaker and a piezo buzzer to
    an Arduino. We then learned how to use the `tone()` function to create sounds
    and also play a song. We also saw how we could install and use a third-party library
    so we could play RTTTL files.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at how we can use LCD displays to display
    messages.
  prefs: []
  type: TYPE_NORMAL
