- en: Getting Audio in Your Game
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在游戏中获取音频
- en: Introduction
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: 'Audio is an often-overlooked component of games that is often only noticed
    when it is done poorly. While not as prominent as graphics and gameplay tend to
    be, given how it can ruin an experience or enhance it, it''s definitely best to
    aim for the latter.  Think about an action or horror film with the volume muted,
    and you get a feel for how important of an impact audio can have!  In this chapter
    we''ll cover:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 音频是游戏中经常被忽视的组件，通常只有在做得不好时才会被注意到。虽然不像图形和游戏玩法那样突出，但考虑到它可能会破坏体验或增强体验，所以最好追求后者。 想想一个动作或恐怖电影，当音量被静音时，你就能感受到音频有多么重要！ 在本章中，我们将涵盖：
- en: Fundamental components of UE4 audio
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UE4音频的基本组件
- en: Triggering audio from an animation
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从动画触发音频
- en: Material-based audio (including unique impact sounds for projectiles and various
    player foot-falls)
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于材质的音频（包括弹丸和玩家各种脚步声的独特冲击声）
- en: Environmental FX (reverb by a volume)
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 环境FX（通过音量实现的混响）
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter will extensively use the audio resources from the countess character
    assets added back in Chapter 5, *Adding Enemies!*, but with similar assets the
    lessons can be followed without these specifically.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将广泛使用第5章“添加敌人！”中添加的伯爵角色资产中的音频资源，但使用类似资产也可以跟随这些课程，无需这些特定的资源。
- en: 'The GitHub chapter will begin here:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub章节从这里开始：
- en: '[https://github.com/PacktPublishing/Mastering-Game-Development-with-Unreal-Engine-4-Second-Edition/tree/Chapter-7](https://github.com/PacktPublishing/Mastering-Game-Development-with-Unreal-Engine-4-Second-Edition/tree/Chapter-7)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Mastering-Game-Development-with-Unreal-Engine-4-Second-Edition/tree/Chapter-7](https://github.com/PacktPublishing/Mastering-Game-Development-with-Unreal-Engine-4-Second-Edition/tree/Chapter-7)'
- en: 'Engine version used: 4.19.2.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 使用的引擎版本：4.19.2。
- en: Basic sounds and triggering by animation
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过动画的基本声音和触发
- en: We already have, as is obvious to dedicated followers of the book, exactly one
    sound in our game, it's found here and has been there since Chapter 1, *Making
    a C++ Project for a First-Person Shooter*, with our FPS template (though it was
    moved from `AMasteringCharacter` to `AMasteringWeapon` in Chapter 2, *Inventory
    and Weapons for the Player:*
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 正如本书的忠实读者所明显的那样，我们已经在游戏中添加了一个声音，它在这里，并且从第1章“为第一人称射击制作C++项目”以来就一直在这里，我们的FPS模板（尽管在第2章“玩家的库存和武器：”中从`AMasteringCharacter`移动到了`AMasteringWeapon`）。
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'That is a great example of the most basic way to play a sound, and from C++
    no less, but we''ll try to branch out in a few new areas in this section and add
    material-based sounds in the one that follows. We''ll also be adding a professional-looking
    level from Epic to demonstrate some of these concepts. You can find it from Epic
    here (Infinity Blade: Ice Lands; we''ll use the Ice Cove in its pack):'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个播放声音最基本的方式的绝佳示例，而且是从C++开始的，但我们将尝试在本节中拓展几个新领域，并在下一节中添加基于材质的声音。我们还将添加一个来自Epic的专业级别，以展示这些概念。您可以从Epic这里找到它（无尽之刃：冰地；我们将使用其包中的冰湾）：
- en: '![](img/70671b45-4996-416e-8aac-9b046531a28a.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/70671b45-4996-416e-8aac-9b046531a28a.png)'
- en: It's a similar size (close to 2 GB) as the countess content was, so if you're
    keeping up with the GitHub project, it might be best to start downloading it now.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 它的大小（接近2 GB）与伯爵内容的大小相似，所以如果您正在跟进GitHub项目，现在开始下载可能最好。
- en: An important note here for GitHub users! The project as of this map being uploaded
    sets maps to use GitHub LFS (large file system), and if you're unfamiliar, you
    will now need to not just do a pull from GitHub going forward, but then also a
    `pull lfs content`. You'll notice the problem if Unreal says the map files are
    in the wrong format on startup. More information on Git LFS is in additional reading.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 对于GitHub用户的一个重要提示！截至本地图上传时，项目设置为使用GitHub LFS（大型文件系统），如果您不熟悉，您现在不仅需要从GitHub进行拉取，还需要执行`pull
    lfs content`。您会在启动时注意到如果虚幻表示地图文件格式错误的问题。关于Git LFS的更多信息请参考附加阅读。
- en: Sounds, cues, channels, dialog, FX volumes, and more!
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 声音、提示、通道、对话、FX音量等！
- en: UE4 offers a huge array of audio-based classes that can be as simple as `USoundBase`,
    or incredibly complex combinations of branching dialog and specially applied FX.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: UE4提供了一系列基于音频的类，这些类可以从简单的`USoundBase`到复杂的分支对话和特殊应用的FX组合。
- en: 'Let''s first just walk through the major classes to make sure it''s clear what
    capabilities already exist. If you just right-click to add an asset and hover
    on the sound fly-out, you''ll see a list like this:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先浏览一下主要类，以确保清楚已经存在哪些功能。如果您只是右键单击添加资产并在声音飞出菜单上悬停，您将看到如下列表：
- en: '![](img/94d6b6ba-4045-465d-9740-7e7bd4ea5ed6.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/94d6b6ba-4045-465d-9740-7e7bd4ea5ed6.png)'
- en: This by itself can be intimidating, so let's just make a quick overview of each
    of them and their purpose before we start some more practical examples.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这本身可能会让人感到害怕，所以在我们开始一些更实际的例子之前，让我们快速概述每个效果及其目的。
- en: 'Sound Wave: This is the most basic level of a sound in the game. While it is
    not in the Sounds drop-down menu, this is how sounds are brought into the game
    from the Import button rather than Sounds. You take a raw sound (a .wav file,
    for example), import it into your project, and have a Sound Wave. These can take
    various properties, or be used to make Sound Cues and take further properties.
    A summary of all the items to follow can be made like this: all further sound
    design or audio engineering is really dependent on your game''s complexity and
    needs. Sound Waves, though, are your most basic starting point and are required
    for any audio to be played in UE4.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 声音波：这是游戏中声音的最基本级别。虽然它不在“声音”下拉菜单中，但这是通过导入按钮而不是“声音”将声音带入游戏的方式。您将原始声音（例如.wav文件）导入到您的项目中，并得到一个声音波。这些可以具有各种属性，或用于制作声音提示并进一步设置属性。所有后续项目的一个总结可以像这样：所有进一步的声音设计或音频工程实际上都取决于您游戏的复杂性和需求。然而，声音波是您最基本的起点，并且对于在UE4中播放任何音频都是必需的。
- en: 'Dialog Voice: These simply specify a speaker type and a speaker gender. Think
    of the voice as its name: who is speaking, and what type of voice do they use?'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 对话声音：这些只是指定说话者类型和说话者性别。将声音视为其名称：谁在说话，他们使用什么类型的嗓音？
- en: 'Dialog Wave: These are basically an indicator of how one speaker should interact
    with another speaker, defined through DialogContext objects that you can add from
    one speaker to another, as well as add on-screen spoken text and subtitle overrides
    (as well as flagging the content as mature). A quick version of this will be demonstrated
    with our countess performing a taunt in combat in the next section. The dialog
    system is great for simple dialog between a couple of interactable characters
    (the player being one or several), but this really only works well for basic interactions.
    If that is all that is needed by the design of your game, this is a perfectly
    good option and should be utilized. More general information on the dialog system
    is linked in the *Further reading* section.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 对话波：这些基本上是指示一个说话者应该如何与另一个说话者互动的指标，通过DialogContext对象定义，您可以从一个说话者添加到另一个说话者，以及添加屏幕上的口语文本和字幕覆盖（以及标记内容为成熟）。在下一节中，我们将通过我们的女伯爵在战斗中进行挑衅的演示来快速展示这一版本。对话系统非常适合两个可交互角色之间的简单对话（玩家可以是其中一个或几个），但这实际上只适用于基本的交互。如果游戏设计只需要这些，这是一个完美的选择，应该被利用。关于对话系统的更多信息可以在*进一步阅读*部分找到。
- en: 'Reverb Effect: Reverb effects really should be utilized by sound designers,
    but their function is to add effects based on the environment to the sounds played
    and heard. They can be used to make a bit of an echo in a cave environment, for
    example, or the interior of a vehicle, to add a professional and realistic audio
    effect to your sounds. These are attached to audio volumes in your world that
    tell the environment how your sound should be heard.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 反射效果：反射效果应该由声音设计师利用，但它们的功能是向播放和听到的声音添加基于环境的效果。例如，它们可以用来在洞穴环境中产生一点回声，或者在车辆的内部，为您的声音添加专业和真实的声音效果。这些效果附加到您世界中的音频音量上，告诉环境您的声音应该如何被听到。
- en: 'Sound Attenuation: Similar to the Reverb Effect, you can define various attenuation
    settings. Environmental sounds (which we will address further) can reference one
    of these objects, or typically be specified individually. Attenuation is really
    the drop-off properties of a sound: spatially based on the listener''s location,
    how does the sound drop off? For example, in an area with winding corridors, you''ll
    want sound to drop off more quickly the further away it is to reflect the loss
    of amplitude as the sound travels to the listener. Once again, audio engineers
    and sound designers are typically very familiar with the concepts here and can
    apply them to great effect to make atmospheric effects on the sounds being played
    (a creepy noise from a distance away may play very quietly, but when near the
    player, is much louder).'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 声音衰减：与混响效果类似，您可以定义各种衰减设置。环境声音（我们将在后面进一步讨论）可以引用这些对象之一，或者通常可以单独指定。衰减实际上是声音的衰减属性：基于听者的位置，声音如何衰减？例如，在一个有蜿蜒走廊的区域，您会希望声音衰减得更快，以反映声音传播到听者时振幅的损失。再次强调，音频工程师和声音设计师通常非常熟悉这些概念，并且可以将它们应用于产生声音的气氛效果（来自远处的令人毛骨悚然的声音可能播放得很小声，但当靠近玩家时，声音会变得很大）。
- en: 'Sound Class: This is another nice way to organize your sound types based on
    how they are meant to be heard and are applied on top of all other properties.
    Sounds can be set, for example, to ignore reverb, ignore attenuation (set them
    as a UISound!), or otherwise alter properties such as their stereo (left/right
    channel) output, and be applied in a hierarchy through other sound classes.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 声音类别：这是根据声音的预期听感和应用方式来组织声音类型的一种不错的方法，并且它覆盖了所有其他属性。例如，声音可以被设置为忽略混响、忽略衰减（将其设置为UISound！），或者更改其他属性，如它们的立体声（左右声道）输出，并通过其他声音类别应用于层次结构中。
- en: 'Sound Concurrency: Before this object was added, it was possible to limit a
    sound by Max Count and other properties that will be found as we work. So, for
    example, you don''t have 20 footstep sounds from NPCs playing at the same time,
    you limit it to 6 even if 20 NPCs are simultaneously walking. Sound Concurrency
    objects give finer control over this based on the sound''s player. So, for the
    previous example, perhaps you want all attack sounds from a certain type of enemy
    to be played, but you only want a limited set from another type of enemy to be
    heard at any given time. As with many previous descriptions, this is a great tool
    for audio designers to have available, but it is really only needed in games or
    areas of games where sounds can become overwhelming to the player and some should
    have definite priority over others. These can then be specified like other properties
    to a Sound Wave object.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 声音并发：在此对象添加之前，可以通过最大计数和其他属性来限制声音，这些属性将在我们工作时找到。例如，您不会有20个NPC同时播放脚步声，即使有20个NPC同时行走，您也会将其限制为6个。声音并发对象基于声音的播放者提供更精细的控制。例如，对于前面的例子，您可能希望播放特定类型敌人的所有攻击声音，但只想在任意时刻听到来自另一种类型敌人的有限集。与许多之前的描述一样，这是音频设计师可以使用的伟大工具，但它仅在游戏或游戏区域中真正需要，在这些区域中，声音可能会对玩家造成压倒性影响，并且某些声音应该具有明确的优先级。这些可以像其他属性一样指定给声音波对象。
- en: 'Sound Cue: These are a bit like a blueprint for playing sounds. You can combine
    effects and local modifiers to an output. Think of these like taking an actual
    sound input (a gunshot, a bit of spoken dialog, and so on) and specifying in great
    detail how it should be combined for the final output. Many of these options at
    this point surely seem like they have a lot of overlap, but consider many of them
    as *ways to modify any sound*, and this one as *ways we modify a specific sound*.
    Sound Cues can often be quite simple and just take your input and put it to an
    output, though of course, that output itself can still be modified by global environmental
    FX set (or, again, set for just this sound).'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 声音提示：这些有点像播放声音的蓝图。您可以将效果和局部修改器组合到输出中。想象一下，这些就像实际的声音输入（枪声、对话片段等）并详细指定它应该如何组合成最终输出。许多这些选项在此阶段可能看起来有很多重叠，但请考虑它们作为*修改任何声音的方式*，而这一项则是*我们修改特定声音的方式*。声音提示通常很简单，只是将输入直接输出，当然，这个输出本身仍然可以通过全局环境效果设置（或者，再次强调，只为这个声音设置）进行修改。
- en: Sound Mix: Sound mixes can be pushed and popped and applied on top of each other
    as well, but control more global settings such as  pitch, EQ (high-end to low-end
    filtering), and how volume should be applied to, for example, the center-channel
    in 5.1 or other surround sound options for advanced mixing.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 音频混音：音频混音可以相互推送和弹出，并可以叠加使用，但控制更全局的设置，例如音高、均衡器（从高频到低频的过滤）以及如何将音量应用于例如5.1声道中的中心通道或其他高级混音选项。
- en: Triggering sounds from animation
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从动画触发声音
- en: 'By far the most common usage case in games is audio triggered as animations
    are played. We''ll set up several events like this for our countess NPC and, in
    the next section, some footsetps based on materials for our player (even though
    our player character model has no feet!). To get started, let''s open our ABP_Countess
    animation blueprint and look again at her attack state:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在游戏中，最常见的使用情况是在播放动画时触发音频。我们将为我们的女伯爵NPC设置几个此类事件，在下一节中，为我们的玩家设置基于材料的脚步声（尽管我们的玩家角色模型没有脚！）。要开始，让我们打开我们的ABP_Countess动画蓝图，再次查看她的攻击状态：
- en: '![](img/69010545-250e-42d8-852d-573c8e9204d0.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/69010545-250e-42d8-852d-573c8e9204d0.png)'
- en: 'We''ll now work on Primary_Attack_A_Normal with an event to make her attack
    not so eerily silent. Double-click the attack anim. node and, like we did earlier
    for the try-to-hit event, we''ll add another event to her animation a bit earlier:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将使用一个事件来处理Primary_Attack_A_Normal，使她的攻击不那么令人毛骨悚然。双击攻击动画节点，就像我们之前为尝试击中事件所做的那样，我们将在她的动画中稍早添加另一个事件：
- en: '![](img/43834613-483b-482e-be03-754eae19946f.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/43834613-483b-482e-be03-754eae19946f.png)'
- en: 'At the bottom on the timeline, we can scrub the little red bar to where we
    want, then up in the Notifies timeline, right-click and add a Play Sound notify.
    Then over on the right, filter to and pick a Countess_Effort_Attack sound that
    we like. Now, two notes: the sound cues set up for her are invalid because the
    project doesn''t have the whole set of characters from the game, and they rely
    on dialog players mentioned in the previous section. So they won''t play any sound.
    Second note: the sound wave objects all work individually, of course, but if we
    wanted to mix them up, we could make a normal animation notify like we did for
    the attack-hit previously, set up some blueprint logic to pick a sound wave at
    random, and play that. For now, we''ve picked attack_01, so we now have her making
    noise in the game and can test it in our levels.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在时间轴底部，我们可以将小红条拖动到我们想要的位置，然后在“通知”时间轴中，右键单击并添加一个播放声音通知。然后，在右侧，过滤并选择我们喜欢的Countess_Effort_Attack声音。现在，有两个注意事项：为她设置的声音提示无效，因为项目没有游戏中的全部角色集，并且它们依赖于上一节中提到的对话玩家。所以它们不会播放任何声音。第二个注意事项：声音波对象当然可以单独工作，但如果我们想混合它们，我们可以像之前为攻击击中事件所做的那样，创建一个正常的动画通知，设置一些蓝图逻辑以随机选择一个声音波，并播放它。现在，我们选择了attack_01，所以现在她在游戏中制造噪音，我们可以在我们的关卡中测试它。
- en: 'For those following along, there is some cleanup in the project at this point:
    renaming to better reflect our assets'' current state of things and bringing some
    of our other classes up to date. If you''re syncing at this point, you may also
    notice the Infinity Blade weapons now have their own projectiles that look like
    their actual weapons and gives them a bit more of a thrown weapon feel and helps
    differentiate each further for future work.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 对于跟随教程的人来说，在这个阶段项目有一些清理工作：重命名以更好地反映我们资产当前的状态，并将我们的一些其他类更新到最新。如果你现在正在同步，你可能会注意到《无尽之刃》武器现在有自己的投射物，看起来就像它们的实际武器，并赋予它们更多投掷武器的手感，有助于在未来的工作中进一步区分它们。
- en: If you're curious how the static meshes for the projectiles were made, open
    the skeletal mesh actor for the mesh of any of these weapons we've made, and at
    the top is a Make Static Mesh button on the main toolbar. It's very convenient
    when you don't want to import a separate model or don't have access to the original
    assets but need a static mesh version, like here.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你好奇这些投射物的静态网格是如何制作的，打开我们制作的任何这些武器的骨骼网格演员，在主工具栏顶部有一个“制作静态网格”按钮。当你不想导入单独的模型或没有访问原始资产但需要静态网格版本时，这非常方便，就像这里一样。
- en: 'If you play the game at this point, you''ll notice our countess'' attack noise
    gets very repetitive and it all still feels a bit basic. Given the huge number
    of awesome assets this character contains, we''ll now randomize her attacks, give
    each attack its own sound (we could also just randomize the sound each time the
    same attack is played, however), and give her an occasional taunt piece of dialog
    directed at our player. Let''s start by opening up our ABP_Countess animation
    blueprint. In here, in the Attacking state, we''ll change from playing a single
    animation to playing via a random sequence player. As you can see on the right,
    you can then add as many animation sequences as you like, weight their relative
    chance to be picked, turn on shuffle mode, set looping, all kinds of great stuff:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在这个时候玩游戏，你会注意到我们的伯爵夫人的攻击声音变得非常重复，而且整体感觉还是有点基础。鉴于这个角色包含的大量精彩资产，我们现在将随机化她的攻击，为每个攻击分配其自己的声音（我们也可以在每次播放相同的攻击时随机化声音），并且给她一些偶尔针对玩家的嘲讽对话。让我们从打开我们的ABP_Countess动画蓝图开始。在这里，在攻击状态中，我们将从播放单个动画改为通过随机序列播放器播放。如右图所示，你可以添加你喜欢的任意数量的动画序列，设置它们被选中的相对概率，开启随机模式，设置循环播放，等等：
- en: '![](img/41741f3e-a8a2-420a-9ff5-c0634fcec7ac.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/41741f3e-a8a2-420a-9ff5-c0634fcec7ac.png)'
- en: 'However, once we do this, we can''t count on the play time of a given animation
    as our exit transition anymore and need a new way to transition out of this state.
    We need a new variable on the bottom-left: TargetOutOfRange. This is used here
    to get us out of this continuing attacking sequence and into moving to chase the
    player (or run back home if we take too long), like normal:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，一旦我们这样做，就不能再依赖特定动画的播放时间作为我们的退出过渡了，我们需要一种新的方式来从这个状态退出。我们需要在左下角添加一个新的变量：TargetOutOfRange。这个变量在这里用来让我们从持续攻击序列中退出，并移动去追逐玩家（或者如果我们花费的时间太长，就跑回家），就像正常一样：
- en: '![](img/4fa5e7d8-ddbb-490f-af13-d030f5816c96.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4fa5e7d8-ddbb-490f-af13-d030f5816c96.png)'
- en: 'Setting that requires us to modify the attack behavior tree task, adding this
    function at the end when our MoveTo succeeds:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这需要我们修改攻击行为树任务，在MoveTo成功后添加此函数：
- en: '![](img/433de898-50af-4402-b3db-9971edef03c9.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/433de898-50af-4402-b3db-9971edef03c9.png)'
- en: The function called there is rather simple and so is omitted here. It just does
    all of our casing from pawn, getting the animation blueprint, and then setting
    its out of range variable to whatever was passed in. And as can be seen in the
    GitHub project, that variable is marked true every time we enter our move to behavior
    task, so it is only set to false on each pass through the function where our AI
    MoveTo succeeds (which is every pass unless the player moves out of the acceptance
    radius). As an added bonus, you can see in the last of the three animation sequences
    used that the sound cue chosen here has three dialog entries and picks one randomly.
    So we have three random attacks, and the third one set up here picks from three
    random sounds each time it is used. A perfect example of our options.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 被调用的函数相当简单，所以这里省略了。它只是从pawn进行所有case处理，获取动画蓝图，然后将其超出范围变量设置为传入的值。正如GitHub项目中所见，每次我们进入移动到行为任务时，这个变量都会被标记为true，所以只有在我们的AI
    MoveTo成功（除非玩家移出接受半径）的每次函数调用中才会将其设置为false。作为额外的奖励，你可以在使用的三个动画序列中的最后一个看到，这里选择的声音提示有三个对话条目，并随机选择一个。所以，我们有三个随机攻击，每次使用时第三个攻击都会从三个随机声音中选择。这是我们选项的一个完美例子。
- en: 'And lastly, we''ll make a quick taunt that plays some percentage of the time.
    Note that it can play multiple times in a row as-is, but there are plenty of tools
    available to prevent this. To get her to play a taunt 10% of the time, this dialog
    setup is added at the end of the attack behavior task (and note that a DialogVoice
    with default settings was added for our stealth character):'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将快速制作一个嘲讽，有部分概率会播放。注意，它可以连续播放多次，但有很多工具可以防止这种情况。为了让伯爵夫人有10%的概率播放嘲讽，我们在攻击行为任务的末尾添加了这个对话设置（并且请注意，为我们的潜行角色添加了一个具有默认设置的DialogVoice）：
- en: '![](img/4e4ccab0-bbec-425c-87c6-b8e2430d92ab.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4e4ccab0-bbec-425c-87c6-b8e2430d92ab.png)'
- en: 'Note that whichever dialog wave is chosen (in this case Countess_Emote_Taunt_010_Dialogue)
    you need to open it and ensure that the speaker is set to the right type (I am
    using the not Vamp versions) and add the stealth character (specified in the array
    in the bottom-left) as a listener. And there we have it: random attacks, new sounds,
    random dialog, and a random taunt!'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，无论选择哪个对话波形（在这种情况下是Countess_Emote_Taunt_010_Dialogue），你都需要打开它，并确保说话者设置为正确的类型（我使用的是非Vamp版本），并添加潜行角色（在左下角的数组中指定）作为听众。就这样：随机的攻击，新的声音，随机的对话，和随机的嘲讽！
- en: Environments and sound
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 环境和声音
- en: Our sounds to this point are indifferent to where or why they are played. We'll
    quickly now add a sound for a couple of types of things our projectile can hit,
    as well as some footstep sounds for the player just to prove our physics material
    approach is working. Unlike some of the amazing visual assets made freely available
    in the Unreal Marketplace, it's a bit tougher to find similarly freely shared
    libraries of common sounds, but we'll use what we have to make the most of it
    and realize that in a full-production game, many sounds will be built by dedicated
    sound designers, or hopefully some budget is at least set aside to purchase existing
    commercial libraries.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的声音对它们播放的位置或原因并不敏感。现在我们将迅速为几种我们的投射物可能击中的物体类型添加声音，以及一些玩家的脚步声，只是为了证明我们的物理材料方法正在起作用。与在Unreal
    Marketplace中免费提供的某些惊人的视觉资产相比，找到类似地免费共享的常见声音库要困难一些，但我们会充分利用我们所拥有的资源，并意识到在一个完整制作的游戏中，许多声音将由专门的声音设计师制作，或者至少希望有预算来购买现有的商业库。
- en: Hitting different surfaces
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 击中不同的表面
- en: Hitting objects with our projectiles is the easiest sound to quickly set up,
    but then, we need new functionality on our projectile class to make sure each
    one knows what sound to play as they hit each type of surface. This can be quite
    a bit of work to maintain as the number of surface types (physical materials)
    and projectiles with unique sounds begin to multiply, but this is also the kind
    of detail-oriented work that sets apart a commercially successful game from the
    less professional demos or indie titles that don't take the time to add these
    touches.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们的投射物击中物体是最容易快速设置的声音，但随后，我们需要在我们的投射物类中添加新的功能，以确保每个投射物在击中每种表面时都知道播放什么声音。随着表面类型（物理材料）和具有独特声音的投射物数量的增加，维护这项工作可能会变得相当繁重，但这也是一种细致入微的工作，它将商业成功的游戏与不那么专业的演示或独立游戏区分开来，后者没有花时间添加这些细节。
- en: 'We''ll start with the absolute basics that we need to address in the project:
    setting up material types. For the work here, we''re just going to set up two
    types, but of course, you could then follow this pattern and create as many as
    desired for every type. First, open up the project settings, and under Engine/Physics,
    we''ll add snow and stone like so:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从项目中需要解决的最基本的问题开始：设置材质类型。在这里的工作中，我们只将设置两种类型，但当然，你可以遵循这个模式，为每种类型创建尽可能多的类型。首先，打开项目设置，在Engine/Physics下，我们将添加雪和石头，如下所示：
- en: '![](img/980b9d6c-1cfa-4e7a-bc71-71e1f80088cb.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/980b9d6c-1cfa-4e7a-bc71-71e1f80088cb.png)'
- en: 'In the FirstPerson/Audio section, I added several sound cues, but they''re
    just FX-modified versions of sounds already in the project since, as noted, there
    are no specific obvious free downloads in the Unreal Marketplace:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在FirstPerson/Audio部分，我添加了几个声音提示，但它们只是项目中已有的声音的FX修改版本，因为正如所注，在Unreal Marketplace中没有具体的明显免费下载：
- en: '![](img/140c78be-40fb-4b71-bcac-33aa1d051cd9.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/140c78be-40fb-4b71-bcac-33aa1d051cd9.png)'
- en: 'Important note! If at this stage (or any point going forward) these sounds
    are bothersome (they became so to me!), please go to GitHub and cherry-pick commit
    7ff24f7 from this chapter (which will be used going forward in all subsequent
    versions) for some relatively good percussion sounds for all the impacts in this
    chapter. Having a synthesizer and pulling in some .wav samples is a big advantage,
    but remember: in any case where you''re not 100% sure, you must check any licensing
    on any assets like this. Even hardware you own generating sounds can have some
    set of licensing in commercial products if used directly!'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示！如果在当前阶段（或任何未来的阶段）这些声音令人烦恼（它们对我而言就是这样！），请前往GitHub，并从本章（将用于所有后续版本）中 cherry-pick
    7ff24f7 次提交（其中包含本章中所有冲击的相对较好的打击声）。拥有合成器和引入一些.wav样本是一个很大的优势，但请记住：在任何情况下，如果你不确定，你必须检查任何此类资产上的许可。即使是生成声音的硬件，如果直接使用，也可能在商业产品中包含一些许可！
- en: 'Next, for projectiles we will need a way of matching material types and a surface
    that was hit. For now, we''ll make a struct in our projectile header. We''ll add
    these two properties:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，对于投射物，我们需要一种方法来匹配材质类型和被击中的表面。目前，我们将在投射物头文件中创建一个结构体。我们将添加这两个属性：
- en: '[PRE1]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'And, of course, our projectiles will need an array of these:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们的投射物还需要这些的数组：
- en: '[PRE2]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'As noted, when the complexity of physics surface types and projectiles gets
    greater and greater, maintaining a system such as this can get out of hand. And
    with even the small set here, if decisions made early can mean building in changes
    as you progress, instead of retro-fitting changes onto a huge number of individual
    assets, you''re always better off making these decisions as early as possible.
    The level of complexity currently is manageable, but if it were multiplied to
    a significantly larger number, the work about to be done would be pretty miserable,
    and the chances for mistakes multiplies. In such a case, I''d recommend perhaps
    making a DataTable in Unreal and tracking large changes in a .csv spreadsheet
    or the like. More information on that is provided in the *Further reading* section.
    For now, though, let''s go to each of our projectiles and begin setting default
    surfaces to default impact noise, thrown projectiles'' snow to thrown-snow impacts,
    and so on:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 正如所述，当物理表面类型和投射物的复杂性越来越大时，维持这样一个系统可能会变得难以控制。即使在这里的小集合中，如果早期做出的决策意味着在进展过程中进行更改，而不是将更改反装到大量单个资产上，那么尽早做出这些决策总是更好的。目前的复杂度是可管理的，但如果它增加到显著更大的数量，即将要做的工作将会非常痛苦，错误的可能性也会增加。在这种情况下，我建议也许可以在Unreal中创建一个DataTable，并在.csv电子表格或类似文件中跟踪大型更改。关于这方面的更多信息可以在*进一步阅读*部分找到。不过，现在，让我们逐一查看我们的投射物，并开始设置默认表面为默认冲击噪音，抛射物体的雪变为抛射雪冲击，等等：
- en: '![](img/ef8fe372-77e1-4c50-b5b2-99e6d8a858db.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ef8fe372-77e1-4c50-b5b2-99e6d8a858db.png)'
- en: 'Once all of this is set up, then it''s just a matter of a bit of code in the
    `OnHit` function for projectiles:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦所有这些都设置好了，那么就只是投射物`OnHit`函数中的一点代码问题：
- en: '[PRE3]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Unfortunately, our `FHitResult` is for us the projectile in this case. Also
    note the hardcoded minimum velocity: this is to prevent spamming the game with
    a huge number of very small bounces towards the end of the projectile''s velocity/lifetime,
    but you could of course handle this in a number of other or more flexible ways.
    If you are in the future looking to play a sound from that perspective, there
    is a great accessor to make getting the surface type trivial here:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，在我们的案例中，`FHitResult`就是投射物。此外，请注意硬编码的最小速度：这是为了防止在投射物速度/寿命的末尾向游戏中发送大量非常小的弹跳，但你当然可以用许多其他或更灵活的方式处理这个问题。如果你未来想要从那个角度播放声音，这里有一个很好的访问器，可以让你轻松获取表面类型：
- en: '[PRE4]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The most obvious facing surface in the default map has been set to a stone type,
    for testing, and now the different surfaces and different projectiles can be shown,
    changing their impact sounds! The next section will work briefly in our new (finally
    visual high quality) map for footfalls and setting reverb based on a sound volume.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 默认地图中最明显的面对表面已被设置为石质类型，用于测试，现在可以展示不同的表面和不同的投射物，并改变它们的冲击声音！下一节将简要介绍我们新的（终于视觉高质量的）地图，用于脚步声和基于声音音量的混响设置。
- en: Player footfalls and environment FX
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 玩家脚步声和环境音效
- en: Now our player finally gets some footstep sounds of their own. Again, we'll
    work with what we've got, but we can hopefully find a few types to at least prove
    out the system so helping teammates in future work should come easily. The footfall
    work can be done almost identically to the projectile hits, but we'll trigger
    it from specific moments in the player's (albeit very limited) moving animation.
    These will simply trigger a ray-cast, we'll get the material, and once we have
    it, the work will make footsteps work everywhere we go.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在玩家终于得到了他们自己的脚步声。再次，我们将使用我们已有的，但我们可以希望找到几种类型来至少证明系统的可行性，这样在未来的工作中帮助队友应该会容易得多。脚步声的工作几乎可以与投射物碰撞的工作完全相同，但我们将在玩家的（尽管非常有限）移动动画中的特定时刻触发它。这些将简单地触发射线投射，我们将获取材质，一旦我们有了它，工作将使脚步声在我们所到之处都能工作。
- en: 'First, MasteringCharacter needs the same struct as our projectile just got.
    In general, assuming more things will use this shared functionality, I''d move
    the struct and some of this behavior into an actor component but as it''s not
    super informative for our lesson here, we''ll just forgive ourselves a little
    bit of copy/paste for now, first from the top of our .h file:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，MasteringCharacter需要与我们的projectile刚刚得到的相同的struct。一般来说，假设更多的事情将使用这个共享功能，我会将struct和一些这种行为移动到actor组件中，但鉴于它对我们这里的课程不是特别有信息量，我们现在就原谅自己一点复制粘贴吧，首先从我们的.h文件顶部开始：
- en: '[PRE5]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next, we''ll do this in our .cpp file:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们在.cpp文件中这样做：
- en: '[PRE6]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Snippet
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 代码片段
- en: '[PRE7]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Notice that we'll do our own raytrace to see what's below us and use that for
    the results of what and where to play. Note also that in my experience, even though
    we are getting a hit on a static mesh with a physical material, we still have
    to manually dig it out as even specifying in the query to return a physical material
    always comes back as `nullptr` in the hit result.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们将自己进行光线追踪以查看我们下面的情况，并使用这些结果来确定在哪里和玩什么。注意，根据我的经验，即使我们在静态网格上与物理材质发生碰撞，我们仍然需要手动挖掘它，因为即使在查询中指定返回物理材质，碰撞结果总是返回`nullptr`。
- en: 'To trigger these, we need a new event in the minimalist first-person running
    animation:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 要触发这些，我们需要在简约的第一人称跑步动画中添加一个新的事件：
- en: '![](img/bf4d1848-1143-4072-b772-cc7a5c49b5d5.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/bf4d1848-1143-4072-b772-cc7a5c49b5d5.png)'
- en: 'And we''ll add a call to our pawn''s new function from FirstPerson_AnimBP:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将从FirstPerson_AnimBP中调用我们的pawn的新函数：
- en: '![](img/3630402e-7f10-45ca-ab3f-6bf3b4aba1bd.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3630402e-7f10-45ca-ab3f-6bf3b4aba1bd.png)'
- en: Similarly, new footstep sound cues were added in the editor and added to the
    array on our stealth character, just like with the weapons. Now we have some weird-sounding
    footstep noises!
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，编辑器中添加了新的脚步声提示，并将其添加到我们的隐形角色数组中，就像武器一样。现在我们有一些奇怪的脚步声！
- en: Opening the FrozenCove level finally, we'll select several surfaces that look
    like stone or ice and you can easily jump to their materials from there. You can
    also see there is an existing stone physical material from the level as downloaded
    in InfinityBladeIceLands/Environments/SurfaceTypes.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 终于打开了FrozenCove关卡，我们将选择几个看起来像石头或冰的表面，你可以轻松地从那里跳到它们的材质。你还可以看到，在InfinityBladeIceLands/Environments/SurfaceTypes中下载的关卡中已经存在一个石头的物理材质。
- en: 'Click the materials of those static meshes to open them and we''ll set several
    of their physical materials:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 点击那些静态网格的材质以打开它们，我们将设置它们的一些物理材质：
- en: '![](img/98978714-5891-4670-a926-881ad342e0a9.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/98978714-5891-4670-a926-881ad342e0a9.png)'
- en: To do this fully, we'll make a new snow physical material duplicating the stone
    one (which is effectively set to stone as surface type 2, but should be explicitly
    set to stone now that we added it by name to our project), name it PhysicalMaterial_Snow,
    and we'll set the new one to snow surface type of course in its properties. The
    whole list of materials changed can be seen in GitHub, but some examples are (all
    under InfinityBladeIceLands/Environments/Ice) Ice_Fortress/Materials/M_Ice_FortFloor_1_SnowPaint and Ice_Castle/Materials/M_IceT3_Fort_Floor_05.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 要完全做到这一点，我们将创建一个新的雪物理材质，复制石头材质（实际上设置为表面类型2，但既然我们已经通过名称将其添加到我们的项目中，现在应该明确设置为石头），命名为PhysicalMaterial_Snow，并在其属性中将其设置为雪表面类型。整个材质列表的变化可以在GitHub上看到，但一些例子是（所有在InfinityBladeIceLands/Environments/Ice下）Ice_Fortress/Materials/M_Ice_FortFloor_1_SnowPaint和Ice_Castle/Materials/M_IceT3_Fort_Floor_05。
- en: 'And finally, we right-click and add a new Sounds/Reverb object in InfinityBladeIceLands/Effects,
    named here WallReverb, and it''s been given some pretty extreme parameters to
    make its presence obvious when used. And how is it used? Simple! In the level,
    on the left in the basic types, under Volumes is AudioVolume, in this case added
    to the whole corridor on the left from where the player starts:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们右键单击并在InfinityBladeIceLands/Effects中添加一个名为WallReverb的新Sounds/Reverb对象，并给它一些相当极端的参数，以便在使用时很明显。它是如何使用的？简单！在关卡中，在左侧的基本类型下，在Volumes中是AudioVolume，在这种情况下，添加到从玩家开始的全长走廊的左侧：
- en: '![](img/5e0a549c-ff3f-44ab-9b84-e79069f3c76a.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5e0a549c-ff3f-44ab-9b84-e79069f3c76a.png)'
- en: Set its reverb object to the one we just created, and you can't miss the change
    when moving in there and making any sounds. There are a huge number of possibilities
    with this sort of work to explore, and if you're immediately curious, it is definitely
    possible to allow whole classes of sounds to ignore effects (and some, if set
    to the UI type, already do by default).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 将其混响对象设置为刚刚创建的那个，当你进入那里并发出任何声音时，你一定能感觉到变化。这种类型的工作有大量的可能性可以探索，如果你立刻感到好奇，绝对可以允许整个类别的声音忽略效果（而且如果设置为UI类型，默认情况下已经这样做了）。
- en: Summary
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'While audio is often left as an afterthought to games, the work done here should
    hopefully show just how much is possible in UE4 and why it''s important. Getting
    sounds right and being able to tell your designers and other team members how
    to do these things (or even that they''re readily possible!) is a huge advantage
    over many less experienced teams trying to make a similar game. Don''t be left
    out in the cold on this one: your audience will thank you!'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然音频通常被游戏视为事后考虑的事情，但这里所做的工作应该有望展示在UE4中可以做到多少，以及为什么它很重要。正确处理声音并能够告诉你的设计师和其他团队成员如何做这些事情（或者甚至表明这些事情是容易实现的！）对于许多试图制作类似游戏的、经验较少的团队来说是一个巨大的优势。不要在这方面被冷落：你的观众会感谢你的！
- en: Questions
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is the absolutely simplest way to quickly play a sound during gameplay?
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在游戏过程中快速播放声音的绝对最简单的方法是什么？
- en: What are the major components of the dialog system?
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对话系统的主要组成部分是什么？
- en: Which situations will the dialog system suffice in, and where will it require
    a managing system on top of it?
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对话系统在哪些情况下足够使用，而在哪些情况下则需要在其之上再添加一个管理系统？
- en: How do we play a simple sound from an animation?
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何从动画中播放一个简单的声音？
- en: What is the preferred route to play more complex and varied sounds from animations?
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 播放更复杂和多样化的动画声音的推荐途径是什么？
- en: How do we find the material hit in a collision, and why is it never as obvious
    as it appears it should be?
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何在碰撞中找到被击中的材质，以及为什么它永远不会像它看起来那么明显？
- en: Where are surface types defined, and where are they then applied from in game?
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 表面类型在哪里定义，它们在游戏中是从哪里应用的？
- en: How can a level or sound designer quickly set up areas in a level to differentiate
    the audio properties there?
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 级别或声音设计师如何快速设置级别中的区域以区分那里的音频属性？
- en: Further reading
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Git LFS:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Git LFS：
- en: '[https://help.github.com/articles/installing-git-large-file-storage/](https://help.github.com/articles/installing-git-large-file-storage/)'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://help.github.com/articles/installing-git-large-file-storage/](https://help.github.com/articles/installing-git-large-file-storage/)'
- en: 'Unreal Dialog system:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Unreal Dialog系统：
- en: '[https://docs.unrealengine.com/en-us/Engine/Audio/Dialogue](https://docs.unrealengine.com/en-us/Engine/Audio/Dialogue)'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.unrealengine.com/en-us/Engine/Audio/Dialogue](https://docs.unrealengine.com/en-us/Engine/Audio/Dialogue)'
- en: 'Ambient sounds:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 环境声音：
- en: '[https://docs.unrealengine.com/en-us/Engine/Audio/SoundActors](https://docs.unrealengine.com/en-us/Engine/Audio/SoundActors)'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.unrealengine.com/en-us/Engine/Audio/SoundActors](https://docs.unrealengine.com/en-us/Engine/Audio/SoundActors)'
- en: 'DataTables driven and maintained via .csv:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 通过.csv驱动的DataTable维护：
- en: '[https://docs.unrealengine.com/en-us/Gameplay/DataDriven](https://docs.unrealengine.com/en-us/Gameplay/DataDriven)'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.unrealengine.com/en-us/Gameplay/DataDriven](https://docs.unrealengine.com/en-us/Gameplay/DataDriven)'
