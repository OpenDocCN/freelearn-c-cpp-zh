["```cpp\n    // The sound the dodgeball will make when it bounces off of a \n      surface\n    UPROPERTY(EditAnywhere, Category = Sound)\n    class USoundBase* BounceSound;\n    ```", "```cpp\n    #include \"Kismet/GameplayStatics.h\"\n    ```", "```cpp\nif (BounceSound != nullptr && NormalImpulse.Size() > 600.0f)\n{\n  UGameplayStatics::PlaySoundAtLocation(this, BounceSound, \n  GetActorLocation(), 1.0f, FMath::RandRange(0.7f, 1.3f));\n}\n```", "```cpp\n    // The sound attenuation of the previous sound\n    UPROPERTY(EditAnywhere, Category = Sound)\n    class USoundAttenuation* BounceSoundAttenuation;\n    ```", "```cpp\n        UGameplayStatics::PlaySoundAtLocation(this, BounceSound, \n          GetActorLocation(), 1.0f, 1.0f, 0.0f, \n          BounceSoundAttenuation);\n        ```", "```cpp\n    UPROPERTY(VisibleAnywhere, BlueprintReadOnly)\n    class UAudioComponent* AudioComponent;\n    ```", "```cpp\n    #include \"Components/AudioComponent.h\"\n    ```", "```cpp\n    PrimaryActorTick.bCanEverTick = false;\n    ```", "```cpp\n    AudioComponent = \n      CreateDefaultSubobject<UAudioComponent>(TEXT(\"Music \n      Component\"));\n    ```", "```cpp\n// The particle system the dodgeball will spawn when it hits \n  the player\nUPROPERTY(EditAnywhere, Category = Particles)\nclass UParticleSystem* HitParticles;\n```", "```cpp\n    if (HitParticles != nullptr)\n    {\n      UGameplayStatics::SpawnEmitterAtLocation(GetWorld(), \n      HitParticles, GetActorTransform());\n    }\n    ```"]