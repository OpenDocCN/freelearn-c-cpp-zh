["```cpp\n#include \"cinder/params/Params.h\"\n```", "```cpp\n    float mObjSize;\n    Quatf mObjOrientation;\n    Vec3f mLightDirection;\n    ColorA mColor;\n    ```", "```cpp\n    params::InterfaceGl mParams;\n    ```", "```cpp\n    mParams = params::InterfaceGl(\"Parameters\", Vec2i(200,400));\n    ```", "```cpp\n    mParams.addParam( \"Cube Size\", &mObjSize, \"min=0.1 max=20.5 step=0.5 keyIncr=z keyDecr=Z\" );\n    mParams.addParam( \"Cube Rotation\", &mObjOrientation ); // Quatf type\n    mParams.addParam( \"Cube Color\", &mColor, \"\" ); // ColorA\n    mParams.addSeparator(); // add horizontal line separating controls\n    mParams.addParam( \"Light Direction\", &mLightDirection, \"\" ); // Vec3f\n    mParams.addParam( \"String \", &mString, \"\" ); // string\n    ```", "```cpp\n    params::InterfaceGl::draw();\n    ```", "```cpp\nmParams.addButton(\"Start\", std::bind(&MainApp::start, this));\n```", "```cpp\n#include \"AntTweakBar.h\"\n```", "```cpp\nTwDefine(\"Parameters position='100 200' \");\n```", "```cpp\nstring mHostIP;\nint mHostPort;\n```", "```cpp\n    #include \"cinder/Utilities.h\"\n    #include \"cinder/Xml.h\"\n    ```", "```cpp\n    void MainApp::loadConfig() \n    {\n      try {\n        XmlTree doc( loadFile( getAppPath() / fs::path(\"config.xml\") ) );\n        XmlTree &generalNode = doc.getChild( \"general\" );\n\n        mHostIP = generalNode.getChild(\"hostIP\").getValue();\n        mHostPort = generalNode.getChild(\"hostPort\").getValue<int>();\n\n      } catch(Exception e) {\n        console() << \"ERROR: loading/reading configuration file.\" << endl;\n      }\n    }\n\n    void MainApp::saveConfig() \n    {\n      std::string beginXmlStr( \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\" );\n      XmlTree doc( beginXmlStr );\n\n      XmlTree generalNode;\n      generalNode.setTag(\"general\");\n      generalNode.push_back( XmlTree(\"hostIP\", mHostIP) );\n      generalNode.push_back( XmlTree(\"hostPort\", toString(mHostPort)) );\n      doc.push_back(generalNode);\n\n      doc.write(writeFile( getAppPath() / fs::path(\"config.xml\")) );\n    }\n    ```", "```cpp\n    // setup default values\n    mHostIP = \"127.0.0.1\";\n    mHostPort = 1234;\n\n    loadConfig();\n    ```", "```cpp\n    void MainApp::shutdown()\n    {\n      saveConfig();\n    }\n    ```", "```cpp\n    void shutdown();\n    ```", "```cpp\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<general>\n<hostIP>127.0.0.1</hostIP>\n<hostPort>1234</hostPort>\n</general>\n```", "```cpp\nColorA mColor;\n```", "```cpp\n    #include \"cinder/params/Params.h\"\n    #include \"cinder/ImageIo.h\"\n    #include \"cinder/Utilities.h\"\n    #include \"cinder/Xml.h\"\n    ```", "```cpp\n    void MainApp::loadParameters(std::string filename)\n    {\n      try {\n        XmlTree doc( loadFile( fs::path(filename) ) );\n        XmlTree &generalNode = doc.getChild( \"general\" );\n\n            mColor.r = generalNode.getChild(\"ColorR\").getValue<float>();\n            mColor.g = generalNode.getChild(\"ColorG\").getValue<float>();\n            mColor.b = generalNode.getChild(\"ColorB\").getValue<float>();\n\n      } catch(XmlTree::Exception e) {\n        console() << \"ERROR: loading/reading configuration file.\" << e.what() << std::endl;\n      }\n    }\n\n    void MainApp::saveParameters(std::string filename)\n    {\n      std::string beginXmlStr( \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\" );\n      XmlTree doc( beginXmlStr );\n\n      XmlTree generalNode;\n      generalNode.setTag(\"general\");\n      generalNode.push_back(XmlTree(\"ColorR\", toString(mColor.r)));\n      generalNode.push_back(XmlTree(\"ColorG\", toString(mColor.g)));\n      generalNode.push_back(XmlTree(\"ColorB\", toString(mColor.b)));\n\n      doc.push_back(generalNode);\n\n      doc.write( writeFile( getAppPath() / fs::path(\"..\") / fs::path(filename) ) );\n    }\n    ```", "```cpp\n    bool mMakeSnapshot;\n    ```", "```cpp\n    mMakeSnapshot = false;\n    ```", "```cpp\n    if(mMakeSnapshot) {\n      mMakeSnapshot = false;\n\n      double timestamp = getElapsedSeconds();\n      std::string timestampStr = toString(timestamp);\n\n      writeImage(getAppPath() / fs::path(\"..\") / fs::path(\"snapshot_\" + timestampStr + \".png\"), copyWindowSurface());\n      saveParameters(\"snapshot_\" + timestampStr + \".xml\");\n    }\n    ```", "```cpp\n    mParams.addButton( \"Make snapshot\", std::bind( &MainApp::makeSnapshotClick, this ) );\n    ```", "```cpp\n    void MainApp::makeSnapshotClick()\n    {\n        mMakeSnapshot = true;\n    }\n    ```", "```cpp\n    void MainApp::fileDrop( FileDropEvent event )\n    {\n        std::string filepath = event.getFile( event.getNumFiles() - 1 ).generic_string();\n        loadParameters(filepath);\n    }\n    ```", "```cpp\ngl::drawColorCube(Vec3f::zero(), Vec3f(4.f, 4.f, 4.f));\n```", "```cpp\n    #include \"cinder/MayaCamUI.h\"\n    ```", "```cpp\n    CameraPersp  mCam;\n    MayaCamUI    mMayaCam;\n    ```", "```cpp\n    mCam.setPerspective(45.0f, getWindowAspectRatio(), 0.1, 10000);\n    mMayaCam.setCurrentCam(mCam);\n    ```", "```cpp\n    void MainApp::resize( ResizeEvent event )\n    {\n        mCam = mMayaCam.getCamera();\n        mCam.setAspectRatio(getWindowAspectRatio());\n        mMayaCam.setCurrentCam(mCam);\n    }\n\n    void MainApp::mouseDown( MouseEvent event )\n    {\n      mMayaCam.mouseDown( event.getPos() );\n    }\n\n    void MainApp::mouseDrag( MouseEvent event )\n    {\n      mMayaCam.mouseDrag( event.getPos(), event.isLeftDown(), event.isMiddleDown(), event.isRightDown() );\n    }\n    ```", "```cpp\n    gl::setMatrices(mMayaCam.getCamera());\n    ```", "```cpp\n    CameraPersp     mSceneCam;\n    int             mCurrentCamera;\n    ```", "```cpp\n    mCurrentCamera = 0;\n\n    mSceneCam.setEyePoint(Vec3f(0.f, 5.f, 10.f));\n    mSceneCam.setViewDirection(Vec3f(0.f, 0.f, -1.f) );\n    mSceneCam.setPerspective(45.0f, getWindowAspectRatio(), 0.1, 20);\n    ```", "```cpp\n    mSceneCam.setAspectRatio(getWindowAspectRatio());\n    ```", "```cpp\n    void MainApp::keyDown( KeyEvent event )\n    {\n        if(event.getChar() == '1') {\n            mCurrentCamera = 0;    \n        } else if(event.getChar() == '2') {\n            mCurrentCamera = 1;         \n        }\n    }\n    ```", "```cpp\n    void MainApp::drawGrid(float size, float step)\n    {\n      gl::color( Color(0.7f, 0.7f, 0.7f) );\n\n        //draw grid\n        for(float i=-size;i<=size;i+=step) {\n        gl::drawLine(Vec3f(i, 0.f, -size), Vec3f(i, 0.f, size));\n        gl::drawLine(Vec3f(-size, 0.f, i), Vec3f(size, 0.f, i));\n      }\n\n        // draw bold center lines\n        glLineWidth(2.f);\n        gl::color(Color::white());\n        gl::drawLine(Vec3f(0.f, 0.f, -size), Vec3f(0.f, 0.f, size));\n        gl::drawLine(Vec3f(-size, 0.f, 0.f), Vec3f(size, 0.f, 0.f));\n\n        glLineWidth(1.f);\n    }\n    ```", "```cpp\n    void MainApp::draw()\n    {\n      gl::enable(GL_CULL_FACE);\n      gl::enableDepthRead();\n      gl::enableDepthWrite();\n      gl::clear( Color( 0.1f, 0.1f, 0.1f ) );\n\n      if(mCurrentCamera == 0) {\n            gl::setMatrices(mMayaCam.getCamera());\n\n            // draw grid\n            drawGrid(100.0f, 10.0f);\n\n            // draw coordinate guide\n            gl::pushMatrices();\n            gl::translate(0.f, 0.4f, 0.f);\n            gl::drawCoordinateFrame(5.0f, 1.5f, 0.3f);\n            gl::popMatrices();\n\n            // draw scene camera frustum\n            gl::color(Color::white());\n            gl::drawFrustum(mSceneCam);\n\n            // draw vector guide\n            gl::color(Color(1.f,0.f,0.f));\n            gl::drawVector(Vec3f(-3.f, 7.f, -6.f), \n            Vec3f(3.f, 10.f, -9.f), 1.5f, 0.3);\n\n        } else {\n            gl::setMatrices(mSceneCam);\n        }\n\n        // draw some 3D object\n        gl::rotate(30);\n        gl::drawColorCube(Vec3f(0.f, 5.f, -5.f), \n        Vec3f(2.f, 2.f, 2.f));\n    }\n    ```", "```cpp\n$(CINDER_PATH)/blocks/osc/lib/macosx/osc.a\n```", "```cpp\n    #include \"OSCSender.h\"\n    ```", "```cpp\n    osc::Sender mOSCSender;\n    std::string mDestinationHost;\n    int         mDestinationPort;\n\n    Vec2f       mObjPosition;\n    ```", "```cpp\n    mDestinationHost = \"localhost\";\n    mDestinationPort = 3000;\n    mOSCSender.setup(mDestinationHost, mDestinationPort);\n    ```", "```cpp\n    mObjPosition = Vec2f(getWindowWidth()*0.5f,\n                         getWindowHeight()*0.5f);\n    ```", "```cpp\n    void MainApp::mouseDrag(MouseEvent event)\n    {\n        mObjPosition.x = event.getX();\n        mObjPosition.y = event.getY();\n\n      osc::Message msg;\n      msg.setAddress(\"/obj/position\");\n      msg.addFloatArg(mObjPosition.x);\n      msg.addFloatArg(mObjPosition.y);\n      msg.setRemoteEndpoint(mDestinationHost, mDestinationPort);\n      mOSCSender.sendMessage(msg);\n    }\n    ```", "```cpp\n    void MainApp::draw()\n    {\n      gl::clear(Color(0.1f, 0.1f, 0.1f));\n        gl::color(Color::white());\n        gl::drawStrokedCircle(mObjPosition, 50.f);\n    }\n    ```", "```cpp\n    #include \"OSCListener.h\"\n    ```", "```cpp\n    osc::Listener  mOSCListener;\n    Vec2f          mObjPosition;\n    ```", "```cpp\n    mOSCListener.setup(3000);\n    ```", "```cpp\n    mObjPosition = Vec2f(getWindowWidth()*0.5f,\n                         getWindowHeight()*0.5f);\n    ```", "```cpp\n    void MainApp::update()\n    {\n        while (mOSCListener.hasWaitingMessages()) {\n            osc::Message msg;\n            mOSCListener.getNextMessage(&msg);\n\n            if(msg.getAddress() == \"/obj/position\" &&\n               msg.getNumArgs() == 2 &&\n               msg.getArgType(0) == osc::TYPE_FLOAT &&\n               msg.getArgType(1) == osc::TYPE_FLOAT)\n            {\n                mObjPosition.x = msg.getArgAsFloat(0);\n                mObjPosition.y = msg.getArgAsFloat(1);\n            }\n        }\n    }\n    ```", "```cpp\n    void MainApp::draw()\n    {\n      gl::clear( Color( 0.1f, 0.1f, 0.1f ) );\n      gl::color(Color::white());\n      gl::drawSolidCircle(mObjPosition, 50.f);\n    }\n    ```"]