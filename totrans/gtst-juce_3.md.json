["```cpp\nint64 big = literal64bit (0x1234567890);\n```", "```cpp\n#include \"../JuceLibraryCode/JuceHeader.h\"\n\nint main (int argc, char* argv[])\n{\n  Logger *log = Logger::getCurrentLogger();\n  String message (\"Hello world!\");     \n  log->writeToLog (message);\n\n  return 0;\n}\n```", "```cpp\nJUCE v2.1.2\nHello world!\n\n```", "```cpp\nint main (int argc, char* argv[])\n{\n  Logger *log = Logger::getCurrentLogger();\n  String hello (\"Hello\");\n  String space (\" \");\n  String world (\"world!\");\n  String message = hello + space + world;\n\n  log->writeToLog (message);\n\n  return 0;\n}\n```", "```cpp\nint main (int argc, char* argv[])\n{\n  Logger *log = Logger::getCurrentLogger();\n  String hello (\"Hello\");\n  String space (\" \");\n  String world (\"world!\");\n  String message;\n\n  message << hello;\n  message << space;\n  message << world;\n\n  log->writeToLog (message);\n\n  return 0;\n}\n```", "```cpp\nint main (int argc, char* argv[])\n{\n  Logger *log = Logger::getCurrentLogger();\n  String message;\n\n  message << \"Hello\" << \" \" << \"world!\";\n\n  log->writeToLog (message);\n\n  return 0;\n}\n```", "```cpp\nint main (int argc, char* argv[])\n{\n  Logger *log = Logger::getCurrentLogger();\n  String string1 (\"Hello\");\n  String string2 = string1;\n\n  string1 << \" world!\";\n\n  log->writeToLog (\"string1: \" + string1);\n  log->writeToLog (\"string2: \" + string2);\n\n  return 0;\n}\n```", "```cpp\nstring1: Hello world!\nstring2: Hello\n\n```", "```cpp\nString intString (1234);    // string will be \"1234\"\nString floatString (1.25f); // string will be \"1.25\"\nString doubleString (2.5);  // string will be \"2.5\" \n```", "```cpp\nTime now = Time::getCurrentTime();\n```", "```cpp\nint64 now = Time::currentTimeMillis();\n```", "```cpp\nuint32 now = Time::getMillisecondCounter();\n```", "```cpp\nint main (int argc, char* argv[])\n{\n  Logger *log = Logger::getCurrentLogger();\n\n  Time time (Time::getCurrentTime());\n\n  bool includeDate = true;\n  bool includeTime = true;\n  bool includeSeconds = true;\n  bool use24HourClock = true;\n\n  String timeStr (time.toString (includeDate, includeTime,\n                                 includeSeconds, use24HourClock));\n\n  log->writeToLog (\"the time is: \" + timeStr);\n\n  return 0;\n}\n```", "```cpp\nthe time is: 7 Jul 2013 15:05:55\n\n```", "```cpp\nint main (int argc, char* argv[])\n{\n  Logger *log = Logger::getCurrentLogger();\n\n  Time time (Time::getCurrentTime());\n\n  String timeStr;\n\n  bool threeLetterMonthName = true;\n\n  timeStr << time.getDayOfMonth() << \" \";\n  timeStr << time.getMonthName (threeLetterMonthName) << \" \";\n  timeStr << time.getYear() << \" \";\n  timeStr << time.getHours() << \":\";\n  timeStr << time.getMinutes() << \":\";\n  timeStr << time.getSeconds();\n\n  log->writeToLog (\"the time is: \" + timeStr);\n\n  return 0;\n}\n```", "```cpp\nint main (int argc, char* argv[])\n{\n  Logger *log = Logger::getCurrentLogger();\n\n  Time time (Time::getCurrentTime());\n  RelativeTime oneHour (RelativeTime::hours (1));\n\n  Time oneHourAgo (time - oneHour);\n  Time inOneHour (time + oneHour);\n  Time inTwoHours (inOneHour + oneHour);\n\n  log->writeToLog (\"the time is:\" +\n                   time.toString (true, true, true, true));\n  log->writeToLog (\"one hour ago was:\" +\n                   oneHourAgo.toString (true, true, true, true));\n  log->writeToLog (\"in one hour it will be:\" +\n                   inOneHour.toString (true, true, true, true));\n  log->writeToLog (\"in two hours it will be:\" +\n                   inTwoHours.toString (true, true, true, true));\n\n  return 0;\n}\n```", "```cpp\nthe time is:             7 Jul 2013 15:42:27\none hour ago was:        7 Jul 2013 14:42:27\nin one hour it will be:  7 Jul 2013 16:42:27\nin two hours it will be: 7 Jul 2013 17:42:27\n\n```", "```cpp\nint main (int argc, char* argv[])\n{\n  Logger *log = Logger::getCurrentLogger();\n\n  Time now (Time::getCurrentTime());\n  Time trigger (now + RelativeTime (5.0));\n\n  log->writeToLog (\"the time is now:      \" +\n                   now.toString (true, true, true, true));\n\n  while (Time::getCurrentTime() < trigger) {\n    Thread::sleep (10);\n    log->writeToLog (\"waiting...\");\n  }\n\n  log->writeToLog (\"the time has reached: \" +\n                   trigger.toString (true, true, true, true));\n\n  return 0;\n}\n```", "```cpp\nint main (int argc, char* argv[])\n{\n  Logger *log = Logger::getCurrentLogger();\n\n  uint32 now = Time::getMillisecondCounter();\n  uint32 trigger = now + 5000;\n\n  log->writeToLog (\"the time is now: \" +\n                   String (now) + \"ms\");\n\n  while (Time::getMillisecondCounter() < trigger) {\n    Thread::sleep (10);\n    log->writeToLog (\"waiting...\");\n  }\n\n  log->writeToLog (\"the time has reached: \" +\n                   String (trigger) + \"ms\");\n\n  return 0;\n}\n```", "```cpp\nint main (int argc, char* argv[])\n{\n  Logger *log = Logger::getCurrentLogger();\n\n  double start = Time::getMillisecondCounterHiRes();\n\n  log->writeToLog (\"the time is now: \" +\n                   String (start) + \"ms\");\n\n  float value = 0.f;\n  const int N = 10000;\n\n  for (int i = 0; i < N; ++i)\n    value += 0.1f;\n\n  double duration = Time::getMillisecondCounterHiRes() - start;\n\n  log->writeToLog (\"the time taken to perform \" + String (N) +\n                   \" additions was: \" + String (duration) + \"ms\");\n\n  return 0;\n}\n```", "```cpp\nthe time is now: 267150354ms\nthe time taken to perform 10000 additions was: 0.0649539828ms\n\n```", "```cpp\nint main (int argc, char* argv[])\n{\n  Logger *log = Logger::getCurrentLogger();\n\n  String text (\"The quick brown fox jumps over the lazy dog.\");\n  File file (\"./chapter03_01_test.txt\");\n  file.replaceWithText (text);\n  String fileText = file.loadFileAsString();\n\n  log->writeToLog (\"fileText: \" + fileText);\n\n  return 0;\n}\n```", "```cpp\nint main (int argc, char* argv[])\n{\n  Logger *log = Logger::getCurrentLogger();\n\n  String text (\"The quick brown fox jumps over the lazy dog.\");\n  File exe (File::getSpecialLocation(\n            File::currentExecutableFile));\n  File exeDir (exe.getParentDirectory());\n  File file (exeDir.getChildFile (\"chapter03_01_test.txt\"));\n  file.replaceWithText (text);\n  String fileText = file.loadFileAsString();\n\n  log->writeToLog (\"fileText: \" + fileText);\n\n  return 0;\n}\n```", "```cpp\n...\n  File file (File::getSpecialLocation(\n             File::currentExecutableFile)\n             .getParentDirectory()\n             .getChildFile (\"chapter03_01_test.txt\"));\n...\n```", "```cpp\nint main (int argc, char* argv[])\n{\n  Logger *log = Logger::getCurrentLogger();\n\n  File file (File::getSpecialLocation(File::currentExecutableFile)\n             .getParentDirectory()\n             .getChildFile(\"chapter03_01_test.txt\"));\n\n  bool fileExists = file.exists();\n\n  if (!fileExists) {\n    log->writeToLog (\"file \" +\n                     file.getFileName() +\n                     \" does not exist\");\n    return -1;\n  }\n\n  Time creationTime = file.getCreationTime();\n  Time modTime = file.getLastModificationTime();\n  int64 size = file.getSize();\n\n  log->writeToLog (\"file \" +\n                   file.getFileName() + \" info:\");\n  log->writeToLog (\"created: \" +\n                   creationTime.toString(true, true, true, true));\n  log->writeToLog (\"modified:\" +\n                   modTime.toString(true, true, true, true));\n  log->writeToLog (\"size:\" +\n                   String(size) + \" bytes\");\n\n  return 0;\n}\n```", "```cpp\nfile chapter03_01_test.txt info:\ncreated: 8 Jul 2013 17:08:25\nmodified: 8 Jul 2013 17:08:25\nsize: 44 bytes\n\n```", "```cpp\nint main (int argc, char* argv[])\n{\n  Logger *log = Logger::getCurrentLogger();\n\n  File file (File::getSpecialLocation(\n              File::currentExecutableFile)\n                .getParentDirectory()\n                .getChildFile (\"chapter03_01_test.txt\"));\n  log->writeToLog (\"file path: \" + file.getFullPathName());\n\n  return 0;\n}\n```", "```cpp\nint main (int argc, char* argv[])\n{\n  Logger *log = Logger::getCurrentLogger();\n\n  File root (File::getSpecialLocation (File::userDesktopDirectory)\n             .getChildFile (\"Chapter03_01_tests\"));\n  File dir1 (root.getChildFile (\"1\"));\n  File dir2 (root.getChildFile (\"2\"));\n  File dir1a (dir1.getChildFile (\"a\"));\n  File dir2b (dir2.getChildFile (\"b\"));\n\n  Result result (Result::ok());\n\n  result = dir1a.createDirectory();\n\n  if (!result.wasOk()) {\n    log->writeToLog (\"Creating dir 1/a failed\");\n    return -1;\n  }\n\n  result = dir2b.createDirectory();\n\n  if (!result.wasOk()) {\n    log->writeToLog (\"Creating dir 2/b failed\");\n    return -1;\n  }\n\n  File rel = dir1a.getChildFile (\"../../2/b\");\n\n  log->writeToLog (\"root: \" + root.getFullPathName());\n  log->writeToLog (\"dir1: \" + dir1.getRelativePathFrom (root));\n  log->writeToLog (\"dir2: \" + dir2.getRelativePathFrom (root));\n  log->writeToLog (\"dir1a: \" + dir1a.getRelativePathFrom (root));\n  log->writeToLog (\"dir2b: \" + dir2b.getRelativePathFrom (root));\n  log->writeToLog (\"rel: \" + rel.getRelativePathFrom (root));\n\n  return 0;\n}\n```", "```cpp\nroot: /Users/martinrobinson/Desktop/Chapter03_01_tests\ndir1: 1\ndir2: 2\ndir1a: 1/a\ndir2b: 2/b\nrel: 2/b\n\n```", "```cpp\nint main (int argc, char* argv[])\n{\n  Logger *log = Logger::getCurrentLogger();\n\n  Array<int> array;\n\n  for (int i = 0; i < 5; ++i)\n    array.add (i * 1000);\n\n  for (int i = 0; i < array.size(); ++i) {\n    int value = array[i];\n    log->writeToLog (\"array[\" + String (i) + \"]= \" + String (value));\n  }\n\n  return 0;\n}\n```", "```cpp\narray[0]= 0\narray[1]= 1000\narray[2]= 2000\narray[3]= 3000\narray[4]= 4000\n\n```", "```cpp\n...\n  for (int i = 0; i < array.size(); ++i) {\n int value = array.getUnchecked (i);\n    log->writeToLog(\"array[\" + String (i) + \"] = \" + \n                    String (value));\n  }\n...\n```", "```cpp\nint main (int argc, char* argv[])\n{\n  Logger *log = Logger::getCurrentLogger();\n\n  File file =\n    File::getSpecialLocation (File::userDocumentsDirectory);\n\n  Array<File> childFiles;\n\n  bool searchRecursively = false;\n  file.findChildFiles (childFiles,\n                       File::findFilesAndDirectories,\n                       searchRecursively);\n\n  for (int i = 0; i < childFiles.size(); ++i)\n    log->writeToLog (childFiles[i].getFullPathName());\n\n  return 0;\n}\n```", "```cpp\nint main (int argc, char* argv[])\n{\n  Logger *log = Logger::getCurrentLogger();\n\n  StringArray strings;\n  bool preserveQuoted = true;\n  strings.addTokens(\"one two three four five six\",\n                     preserveQuoted);\n\n  for (int i = 0; i < strings.size(); ++i) {\n    log->writeToLog (\"strings[\" + String (i) + \"]=\" +\n                     strings[i]);\n  }\n\n  return 0;\n}\n```", "```cpp\nsetResizable (true, true);\n```", "```cpp\n#ifndef __MAINCOMPONENT_H__\n#define __MAINCOMPONENT_H__\n\n#include \"../JuceLibraryCode/JuceHeader.h\"\n\nclass MainContentComponent : public Component\n{\npublic:\n  MainContentComponent();\n  ~MainContentComponent();\n\n  void resized();\n\nprivate:\n  Array<TextButton*> buttons;\n};\n\n#endif\n```", "```cpp\n#include \"MainComponent.h\"\n\nMainContentComponent::MainContentComponent()\n{\n  for (int i = 0; i < 10; ++i)\n  {\n    String buttonName;\n    buttonName << \"Button \" << String (i);\n    TextButton* button = new TextButton (buttonName);\n    buttons.add (button);\n    addAndMakeVisible (button);\n  }\n\n  setSize (500, 400);\n}\n\nMainContentComponent::~MainContentComponent()\n{\n}\n\nvoid MainContentComponent::resized()\n{\n  Rectangle<int> rect (10, 10, getWidth() - 20, getHeight() - 20);\n\n  int buttonHeight = rect.getHeight() / buttons.size();\n\n  for (int i = 0; i < buttons.size(); ++i) {\n    buttons[i]->setBounds (rect.getX(),\n                           i * buttonHeight + rect.getY(),\n                           rect.getWidth(),\n                           buttonHeight);\n  }\n}\n```", "```cpp\n*** Leaked objects detected: 10 instance(s) of class TextButton\nJUCE Assertion failure in juce_LeakedObjectDetector.h:95\n\n```", "```cpp\nMainContentComponent::~MainContentComponent()\n{\n  for (int i = 0; i < buttons.size(); ++i)\n    delete buttons[i];\n}\n```", "```cpp\n...\nprivate:\n OwnedArray<TextButton> buttons;\n};\n```", "```cpp\n...\nMainContentComponent::~MainContentComponent()\n{\n}\n... \n```", "```cpp\n#ifndef __MAINCOMPONENT_H__\n#define __MAINCOMPONENT_H__\n\n#include \"../JuceLibraryCode/JuceHeader.h\"\n\nclass MainContentComponent :  public Component,\n                              public Button::Listener\n{\npublic:\nMainContentComponent();\n\nvoid resized();\nvoid buttonClicked (Button* button);\n\nprivate:\nOwnedArray<Button> buttons;\nLabel label;\n};\n\n#endif\n```", "```cpp\n#include \"MainComponent.h\"\n\nMainContentComponent::MainContentComponent()\n{\n  for (int i = 0; i < 10; ++i) {\n    String buttonName;\n    buttonName << \"Button \" << String (i);\n    TextButton* button = new TextButton (buttonName);\n    button->addListener (this);\n    buttons.add (button);\n    addAndMakeVisible (button);\n  }\n\n  addAndMakeVisible (&label);\n  label.setJustificationType (Justification::centred);\n  label.setText (\"no buttons clicked\", dontSendNotification);\n\n  setSize (500, 400);\n}\n\nvoid MainContentComponent::resized()\n{\n  Rectangle<int> rect (10, 10, \n                       getWidth() / 2 - 20, getHeight() - 20);\n\n  int buttonHeight = rect.getHeight() / buttons.size();\n\n  for (int i = 0; i < buttons.size(); ++i) {\n    buttons[i]->setBounds (rect.getX(),\n                           i * buttonHeight + rect.getY(),\n                           rect.getWidth(),\n                           buttonHeight);\n  }\n\n  label.setBounds (rect.getRight(),\n                   rect.getY(),\n                   getWidth() - rect.getWidth() - 10,\n                   20);\n}\n\nvoid MainContentComponent::buttonClicked (Button* button)\n{\n  String labelText;\n  nt buttonIndex = buttons.indexOf (button);\n  labelText << \"Button clicked: \" << String (buttonIndex);\n  label.setText (labelText, dontSendNotification);\n}\n```", "```cpp\n#ifndef __MAINCOMPONENT_H__\n#define __MAINCOMPONENT_H__\n\n#include \"../JuceLibraryCode/JuceHeader.h\"\n\nclass MainContentComponent :  public Component,\n                              public Slider::Listener,\n                              public Label::Listener\n{\npublic:\n  MainContentComponent();\n\n  void resized();\n  void sliderValueChanged (Slider* slider);\n  void labelTextChanged (Label* label);\n\nprivate:\n  OwnedArray<Slider> sliders;\n  OwnedArray<Label> labels;\n};\n\n#endif\n```", "```cpp\n#include \"MainComponent.h\"\n\nMainContentComponent::MainContentComponent()\n{\n  for (int i = 0; i < 10; ++i) {\n    String indexString (i);\n    String sliderName (\"slider\" + indexString);\n    Slider* slider = new Slider (sliderName);\n    slider->setTextBoxStyle (Slider::NoTextBox, false, 0, 0);\n    slider->addListener (this);\n    sliders.add (slider);\n    addAndMakeVisible (slider);\n\n    String labelName (\"label\" + indexString);\n    Label* label = new Label (labelName,\n                              String (slider->getValue()));\n    label->setEditable (true);\n    label->addListener (this);\n    labels.add (label);\n    addAndMakeVisible (label);\n  }\n\n  setSize (500, 400);\n}\n\nvoid MainContentComponent::resized()\n{\n  Rectangle<int> slidersRect (10, 10,\n                              getWidth() / 2 - 20, \n                              getHeight() - 20);\n  Rectangle<int> labelsRect (slidersRect.getRight(), 10,\n                             getWidth() / 2 - 20, \n                             getHeight() - 20);\n\n  int cellHeight = slidersRect.getHeight() / sliders.size();\n\n  for (int i = 0; i < sliders.size(); ++i) {\n    sliders[i]->setBounds (slidersRect.getX(),\n                           i * cellHeight + slidersRect.getY(),\n                           slidersRect.getWidth(),\n                           cellHeight);\n    labels[i]->setBounds (labelsRect.getX(),\n                          i * cellHeight + labelsRect.getY(),\n                          labelsRect.getWidth(),\n                          cellHeight);\n  }\n}\n```", "```cpp\nvoid MainContentComponent::sliderValueChanged (Slider* slider)\n{\n  int index = sliders.indexOf (slider);\n  labels[index]->setText (String (slider->getValue()), \n                          sendNotification);\n}\n\nvoid MainContentComponent::labelTextChanged (Label* label)\n{\n  int index = labels.indexOf (label);\n  sliders[index]->setValue (label->getText().getDoubleValue());\n}\n```", "```cpp\n#ifndef __MAINCOMPONENT_H__\n#define __MAINCOMPONENT_H__\n\n#include \"../JuceLibraryCode/JuceHeader.h\"\n\nclass MainContentComponent :  public Component,\n                              public Button::Listener,\n                              public Slider::Listener\n{\npublic:\n  MainContentComponent();\n  void resized();\n\n  void buttonClicked (Button* button);\n  void sliderValueChanged (Slider* slider);\n\nprivate:\n ScopedPointer<Button> button1;\n ScopedPointer<Slider> slider1;\n ScopedPointer<Label> label1;\n};\n\n#endif\n```", "```cpp\n#include \"MainComponent.h\"\n\nMainContentComponent::MainContentComponent()\n{\n button1 = new TextButton (\"Zero Slider\");\n slider1 = new Slider (Slider::LinearHorizontal, \n Slider::NoTextBox);\n label1 = new Label();\n  slider1->setRange (0.0, 100.0);\n  slider1->addListener (this);\n  button1->addListener (this);\n  slider1->setValue (100.0, sendNotification);\n\n  addAndMakeVisible (button1);\n  addAndMakeVisible (slider1);\n  addAndMakeVisible (label1);\n  setSize (200, 100);\n}\n\nvoid MainContentComponent::resized()\n{\n  button1->setBoundsRelative (0.05, 0.05, 0.90, 0.25);\n  slider1->setBoundsRelative (0.05, 0.35, 0.90, 0.25);\n  label1->setBoundsRelative (0.05, 0.65, 0.90, 0.25);\n}\n\nvoid MainContentComponent::buttonClicked (Button* button)\n{\n if (button1 == button)\n    slider1->setValue (0.0, sendNotification);\n}\n\nvoid MainContentComponent::sliderValueChanged (Slider* slider)\n{\n if (slider1 == slider)\n    label1->setText (String (slider1->getValue()), \n                     sendNotification);\n}\n```"]