- en: Chapter 2. Hello, Small World!
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 2 章。Hello, Small World!
- en: 'This chapter introduces Small Windows by presenting the following two small
    applications:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章通过展示以下两个小型应用程序来介绍 Small Windows：
- en: The first application writes "Hello, Small Windows!" in a window
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个应用程序在窗口中写入 "Hello, Small Windows!"
- en: The second application handles circles of different colors in a document window
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个应用程序在文档窗口中处理不同颜色的圆圈
- en: Hello, Small Windows!
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Hello, Small Windows!
- en: In *The C Programming Language* by Brian Kernighan and Dennis Richie, the hello-world
    example was introduced. It was a small program that wrote "hello, world" on the
    screen. In this section, we shall write a similar program for Small Windows.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Brian Kernighan 和 Dennis Ritchie 的《C 程序设计语言》中，介绍了 hello-world 示例。它是一个小程序，在屏幕上写入
    "hello, world"。在本节中，我们将为 Small Windows 编写一个类似的程序。
- en: 'In regular C++, the execution of the application starts with the `main` function.
    In Small Windows, however, `main` is hidden in the framework and has been replaced
    by `MainWindow`, whose task is to define the application name and create the main
    window object. The following `argumentList` parameter corresponds to `argc` and
    `argv` in main. The `commandShow` parameter forwards the system''s request regarding
    the window''s appearance:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在常规 C++ 中，应用程序的执行从 `main` 函数开始。然而，在 Small Windows 中，`main` 被框架隐藏，并被 `MainWindow`
    替换，其任务是定义应用程序名称并创建主窗口对象。以下 `argumentList` 参数对应于 `main` 中的 `argc` 和 `argv`。`commandShow`
    参数将系统对窗口外观的请求传递：
- en: '**MainWindow.cpp**'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**MainWindow.cpp**'
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In C++, there are to two character types, `char` and `wchar_t`, where `char`
    holds a regular character of 1 byte and `wchar_t` holds a wide character of larger
    size, usually 2 bytes. There is also the `string` class, which holds a string
    of `char` values, and the `wstring` class, which holds a string of `wchar_t` values.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在 C++ 中，有两种字符类型，`char` 和 `wchar_t`，其中 `char` 存储一个 1 字节的常规字符，而 `wchar_t` 存储一个较大尺寸的宽字符，通常为
    2 字节。还有一个 `string` 类，它存储 `char` 值的字符串，以及 `wstring` 类，它存储 `wchar_t` 值的字符串。
- en: However, in Windows, there is also the generic character type `TCHAR`, which
    is `char` or `wchar_t`, depending on system settings. There is also the `String`
    class, which holds a string of `TCHAR` values. Moreover, `TEXT` is a macro that
    translates a character value to `TCHAR` and a text value to an array of `TCHAR`
    values.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在 Windows 中，还有一个通用的字符类型 `TCHAR`，它取决于系统设置，可以是 `char` 或 `wchar_t`。还有一个 `String`
    类，它存储 `TCHAR` 值的字符串。此外，`TEXT` 是一个宏，它将字符值转换为 `TCHAR`，将文本值转换为 `TCHAR` 值的数组。
- en: 'To sum it up, the following table shows character types and string classes:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，以下表格显示了字符类型和字符串类：
- en: '| **Regular character** | **Wide character** | **Generic character** |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| **常规字符** | **宽字符** | **通用字符** |'
- en: '| char | wchar_t | TCHAR |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| char | wchar_t | TCHAR |'
- en: '| string | wstring | String |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| 字符串 | w字符串 | 字符串 |'
- en: In the applications of this book, we always use the `TCHAR` type, the `String`
    class, and the `TEXT` macro. The only exception to that rule is clipboard handling
    in [Chapter 13](ch13.html "Chapter 13. The Registry, Clipboard, Standard Dialogs,
    and Print Preview"), *The Registry, Clipboard, Standard Dialogs, and Print Preview*.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的应用程序中，我们始终使用 `TCHAR` 类型、`String` 类和 `TEXT` 宏。唯一例外是 [第 13 章](ch13.html "第
    13 章。注册表、剪贴板、标准对话框和打印预览") 中的剪贴板处理，*注册表、剪贴板、标准对话框和打印预览*。
- en: 'Our version of the hello-world program writes "Hello, Small Windows!" in the
    center of the client area. The client area of the window is that part of the window
    where it is possible to draw graphical objects. In the following window, the client
    area is the white area:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们版本的 hello-world 程序在客户区域的中心写入 "Hello, Small Windows!"。窗口的客户区域是窗口中可以绘制图形对象的部分。在以下窗口中，客户区域是白色区域：
- en: '![Hello, Small Windows!](img/image_02_001.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![Hello, Small Windows!](img/image_02_001.jpg)'
- en: 'The `HelloWindow` class extends the Small Windows `Window` class. It holds
    a constructor and the `Draw` method. The constructor calls the `Window` constructor
    with suitable information regarding the appearance of the window. The `Draw` method
    is called every time the client area of the window needs to be redrawn:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`HelloWindow` 类扩展了小型窗口 `Window` 类。它包含一个构造函数和 `Draw` 方法。构造函数使用有关窗口外观的合适信息调用
    `Window` 构造函数。每当窗口的客户区域需要重绘时，都会调用 `Draw` 方法：'
- en: '**HelloWindow.h**'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**HelloWindow.h**'
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The constructor of `HelloWindow` calls the constructor of `Window` with the
    following parameters:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`HelloWindow` 的构造函数使用以下参数调用 `Window` 的构造函数：'
- en: The first parameter of the `HelloWindow` constructor is the coordinate system.
    `LogicalWithScroll` indicates that each logical unit is one hundredth of a millimeter,
    regardless of the physical resolution of the screen. The current scroll bar settings
    are taken into consideration.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HelloWindow`构造函数的第一个参数是坐标系。`LogicalWithScroll`表示每个逻辑单位是一百分之一毫米，无论屏幕的物理分辨率如何。当前滚动条设置将被考虑。'
- en: The second parameter of the `Window` constructor is the preferred size of the
    window. It indicates that a default size should be used.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Window`构造函数的第二个参数是窗口的首选大小。它表示应使用默认大小。'
- en: The third parameter is a pointer to the parent window. It is null since the
    window has no parent window.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三个参数是指向父窗口的指针。由于窗口没有父窗口，因此它是null。
- en: The fourth and fifth parameters set the window's style, in this case overlapped
    windows.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第四和第五个参数设置窗口的样式，在这种情况下是重叠窗口。
- en: The last parameter is `windowShow`, given by the surrounding system to `MainWindow`,
    which decides the window's initial appearance (minimized, normal, or maximized).
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后一个参数是`windowShow`，由周围系统提供给`MainWindow`，它决定了窗口的初始外观（最小化、正常或最大化）。
- en: Finally, the constructor sets the header of the window by calling the `Window`
    class's `SetHeader` method.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，构造函数通过调用`Window`类的`SetHeader`方法来设置窗口的标题。
- en: '**HelloWindow.cpp**'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**HelloWindow.cpp**'
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `OnDraw` method is called every time the client area of the window needs
    to be redrawn. It obtains the size of the client area and draws the text in its
    center with black text on a white background. The `SystemFont` parameter will
    make the text appear in the default system font.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 每当窗口的客户区域需要重绘时，都会调用`OnDraw`方法。它获取客户区域的大小，并在白色背景上以黑色文本在其中心绘制文本。`SystemFont`参数将使文本以默认系统字体显示。
- en: 'The Small Windows `Color` class holds the constants `Black` and `White`. The
    `Point` class holds a two-dimensional point. The `Size` class holds `width` and
    `height`. The `Rect` class holds a rectangle; more specifically, it holds the
    four corners of a rectangle:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 小窗口的`Color`类包含常量`Black`和`White`。`Point`类包含一个二维点。`Size`类包含`width`和`height`。`Rect`类包含一个矩形；更具体地说，它包含矩形的四个角：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The circle application
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 圆的应用程序
- en: 'In this section, we look into a simple circle application. As the name implies,
    it enables the user to handle circles in a graphical application. The user can
    add a new circle by pressing the left mouse button. The user can also move an
    existing circle by dragging it. Moreover, the user can change the color of a circle
    as well as save and open the document:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨一个简单的圆应用。正如其名所示，它允许用户在图形应用程序中处理圆。用户可以通过按下鼠标左键来添加一个新的圆。用户还可以通过拖动来移动现有的圆。此外，用户还可以更改圆的颜色，以及保存和打开文档：
- en: '![The circle application](img/image_02_002.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![圆的应用程序](img/image_02_002.jpg)'
- en: The main window
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 主窗口
- en: 'As we will see throughout this book, the `MainWindow` function always does
    the same thing: it sets the application name and creates the main window of the
    application. The name is used by the **Save** and **Open** standard dialogs, the
    **About** menu item, and the registry.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们将在整本书中看到的那样，`MainWindow`函数始终执行相同的事情：它设置应用程序名称并创建应用程序的主窗口。该名称被**保存**和**打开**标准对话框、**关于**菜单项和注册表使用。
- en: 'The difference between the main window and other windows of the application
    is that, when the user closes the main window, the application exits. Moreover,
    when the user selects the **Exit** menu item, the main window is closed, and its
    destructor is called:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 主窗口与其他应用程序窗口之间的区别在于，当用户关闭主窗口时，应用程序退出。此外，当用户选择**退出**菜单项时，主窗口被关闭，并调用其析构函数：
- en: '**MainWindow.cpp**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**MainWindow.cpp**'
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The CircleDocument class
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`CircleDocument`类'
- en: The `CircleDocument` class extends the Small Windows `StandardDocument` class,
    which, in turn, extends the `Document` and `Window` classes. In fact, the `StandardDocument`
    class constitutes a framework, that is, a base class with a set of virtual methods
    with functionality that we can override and further specify.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`CircleDocument`类扩展了Small Windows的`StandardDocument`类，而`StandardDocument`类又反过来扩展了`Document`和`Window`类。实际上，`StandardDocument`类构成了一个框架，即一个具有一组虚拟方法的功能基类，我们可以覆盖并进一步指定这些方法。'
- en: The `OnMouseDown` and `OnMouseUp` methods are overridden from the `Window` class
    and are called when the user presses or releases one of the mouse buttons. The
    `OnMouseMove` method is called when the user moves the mouse. The `OnDraw` method
    is also overridden from the `Window` class and is called every time the window
    needs to be redrawn.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`OnMouseDown` 和 `OnMouseUp` 方法是从 `Window` 类继承的，当用户按下或释放鼠标按钮时会被调用。`OnMouseMove`
    方法在用户移动鼠标时被调用。`OnDraw` 方法也是从 `Window` 类继承的，每次窗口需要重绘时都会被调用。'
- en: 'The `ClearDocument`, `ReadDocumentFromStream`, and `WriteDocumentToStream`
    methods are overridden from the `Standard­Document` class and are called when
    the user creates a new file, opens a file, or saves a file:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`ClearDocument`、`ReadDocumentFromStream` 和 `WriteDocumentToStream` 方法是从 `Standard­Document`
    类继承的，当用户创建新文件、打开文件或保存文件时会被调用：'
- en: '**CircleDocument.h**'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**CircleDocument.h**'
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `DEFINE_BOOL_LISTENER` and `DEFINE_VOID_LISTENER` macros define **listeners**
    which are methods without parameters that are called when the user selects a menu
    item. The only difference between the macros is the return type of the defined
    methods: `bool` or `void`.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`DEFINE_BOOL_LISTENER` 和 `DEFINE_VOID_LISTENER` 宏定义了**监听器**，这些是没有参数的方法，当用户选择菜单项时会被调用。这两个宏之间的唯一区别是定义的方法的返回类型：`bool`
    或 `void`。'
- en: In the applications of this book, we use the common standard whereby listeners
    called in response to user actions are prefixed with `On`, for instance, `OnRed`,
    as shown in the following code snippet. The methods that decide whether the menu
    item should be enabled are suffixed with `Enable`, and the methods that decide
    whether the menu item should be marked with a check mark or a radio button are
    suffixed with `Check` or `Radio`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的应用中，我们使用常见的标准，即响应用户操作而调用的监听器以 `On` 为前缀，例如，`OnRed`，如下面的代码片段所示。决定菜单项是否应该启用的方法以
    `Enable` 为后缀，而决定菜单项是否应该用勾选标记或单选按钮标记的方法以 `Check` 或 `Radio` 为后缀。
- en: 'In the following application, we define menu items for the red, green, and
    blue colors. We also define a menu item for the color standard dialog:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下应用程序中，我们为红色、绿色和蓝色定义了菜单项。我们还定义了一个颜色标准对话框的菜单项：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'When the user has chosen one of the colors, red, green, or blue, its corresponding
    menu item is checked with a radio button. The `RedRadio`, `GreenRadio`, and `BlueRadio`
    parameters are called before the menu items become visible and return a Boolean
    value indicating whether the menu item should be marked with a radio button:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户选择了一种颜色，红色、绿色或蓝色时，相应的菜单项会用单选按钮进行勾选。`RedRadio`、`GreenRadio` 和 `BlueRadio`
    参数在菜单项变得可见之前被调用，并返回一个布尔值，指示菜单项是否应该用单选按钮标记：
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The circle radius is always 500 units, which corresponds to 5 mm:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 圆的半径始终为 500 单位，相当于 5 毫米：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The `circleList` field holds the circles, where the topmost circle is located
    at the beginning of the list. The `nextColor` field holds the color of the next
    circle to be added by the user. It is initialized to minus 0ne to indicate that
    no circle is being moved at the beginning. The `moveIndex` and `movePoint` fields
    are used by the `OnMouseDown` and `OnMouseMove` methods to keep track of the circle
    being moved by the user:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`circleList` 字段存储圆，其中最顶部的圆位于列表的开头。`nextColor` 字段存储用户将要添加的下一个圆的颜色。它被初始化为负一，以表示开始时没有圆在移动。`moveIndex`
    和 `movePoint` 字段被 `OnMouseDown` 和 `OnMouseMove` 方法用来跟踪用户正在移动的圆：'
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In the `StandardDocument` constructor call, the first two parameters are `LogicalWithScroll`
    and `USLetterPortrait`. They indicate that the logical size is hundredths of millimeters
    and that the client area holds the logical size of a US letter: *215.9*279.4 millimeters
    (8.5*11 inches)*. If the window is resized so that the client area becomes smaller
    than a US letter, scroll bars are added to the window.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `StandardDocument` 构造函数调用中，前两个参数是 `LogicalWithScroll` 和 `USLetterPortrait`。它们表示逻辑大小是毫米的百分之一，客户端区域包含一个
    US 信封的逻辑大小：*215.9*279.4 毫米（8.5*11 英寸）*。如果窗口被调整大小，使得客户端区域小于一个 US 信封，则会在窗口中添加滚动条。
- en: 'The third parameter sets the file information used by the standard save and
    open dialogs; the text description is set to `Circle Files` and the file suffix
    is set to `cle`. The `nullptr` parameter indicates that the window does not have
    a parent window. The `OverlappedWindow` constant parameter indicates that the
    window should overlap other windows, and the `windowShow` parameter is the window''s
    initial appearance passed on from the surrounding system by the `MainWindow` class:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个参数设置了标准保存和打开对话框使用的文件信息；文本描述设置为`Circle Files`，文件后缀设置为`cle`。`nullptr`参数表示窗口没有父窗口。`OverlappedWindow`常量参数表示窗口应与其他窗口重叠，而`windowShow`参数是通过`MainWindow`类从周围系统传递给窗口的初始外观：
- en: '**CircleDocument.cpp**'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**CircleDocument.cpp**'
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `StandardDocument` class adds the standard **File**, **Edit**, and **Help**
    menus to the window menu bar. The **File** menu holds the **New**, **Open**, **Save**,
    **Save As**, **Page Setup**, **Print Preview**, and **Exit** items. **Page Setup**
    and **Print Preview** are optional. The seventh parameter of the `StandardDocument`
    constructor (the default value is `false`) indicates their presence. The **Edit**
    menu holds the **Cut**, **Copy**, **Paste**, and **Delete** items. They are disabled
    by default; we will not use them in this application. The **Help** menu holds
    the **About** item, and the application name set in `MainWindow` is used to display
    a message box with a standard message **Circle, version 1.0**.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`StandardDocument`类将标准的**文件**、**编辑**和**帮助**菜单添加到窗口菜单栏。**文件**菜单包含**新建**、**打开**、**保存**、**另存为**、**页面设置**、**打印预览**和**退出**项。**页面设置**和**打印预览**是可选的。`StandardDocument`构造函数的第七个参数（默认值为`false`）表示它们的存在。**编辑**菜单包含**剪切**、**复制**、**粘贴**和**删除**项。它们默认是禁用的；我们不会在这个应用程序中使用它们。**帮助**菜单包含**关于**项，`MainWindow`中设置的应用程序名称用于显示包含标准消息**Circle,
    version 1.0**的消息框。'
- en: We add the standard **File** and **Edit** menus to the menu bar. Then we add
    the **Color** menu, which is the application-specific menu of this application.
    Finally, we add the standard **Help** menu and set the menu bar of the document.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将标准的**文件**和**编辑**菜单添加到菜单栏。然后我们添加了**颜色**菜单，这是该应用程序的应用特定菜单。最后，我们添加了标准的**帮助**菜单并设置了文档的菜单栏。
- en: The **Color** menu holds the menu items used to set the circle colors. The `OnRed`,
    `OnGreen`, and `OnBlue` methods are called when the user selects the menu item,
    and the `RedRadio`, `GreenRadio`, and `BlueRadio` methods are called before the
    user selects the **Color** menu in order to decide if the items should be marked
    with a radio button. The `OnColorDialog` method opens a standard color dialog.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**颜色**菜单包含用于设置圆颜色的菜单项。当用户选择菜单项时，会调用`OnRed`、`OnGreen`和`OnBlue`方法，而在用户选择**颜色**菜单之前，会调用`RedRadio`、`GreenRadio`和`BlueRadio`方法以决定是否用单选按钮标记项。`OnColorDialog`方法打开一个标准颜色对话框。'
- en: 'In the `&Red\tCtrl+R` text in the following code snippet, the **ampersand**
    (**&**) indicates that the menu item has a **mnemonic**; that is, the letter R
    will be underlined and it is possible to select the menu item by pressing **R**
    after the menu has been opened. The **tabulator character** (**\t**) indicates
    that the second part of the text defines an **accelerator**; that is, the text
    `Ctrl+R` will occur right-justified in the menu item and the item can be selected
    by pressing Ctrl+R:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码片段中的`&Red\tCtrl+R`文本中，**和号**（**&**）表示菜单项有一个**快捷键**；即字母R将被下划线标记，并且可以在菜单打开后通过按R来选择菜单项。**制表符字符**（**\t**）表示文本的第二部分定义了一个**快捷键**；即文本`Ctrl+R`将在菜单项中右对齐，并且可以通过按Ctrl+R来选择该项：
- en: '[PRE11]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `false` parameter to `StandardFileMenu` indicates that we do not want to
    include the file menu items.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`StandardFileMenu`的`false`参数表示我们不希望包含文件菜单项。'
- en: '[PRE12]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The `AddItem` method in the `Menu` class also takes two more parameters for
    enabling the menu item and setting a checkbox. However, we do not use them in
    this application. Therefore, we send null pointers:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`Menu`类中的`AddItem`方法还接受两个额外的参数，用于启用菜单项和设置复选框。然而，我们在这个应用程序中不使用它们。因此，我们发送空指针：'
- en: '[PRE13]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Finally, we read the current color (the color of the next circle to be added)
    from the registry; red is the default color in case there is no color stored in
    the registry:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们从注册表中读取当前颜色（即将添加的下一个圆的颜色）；如果没有在注册表中存储颜色，则默认颜色为红色：
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The destructor saves the current color in the registry. In this application,
    we do not need to perform the destructor''s normal tasks such as deallocating
    memory or closing files:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 析构函数将当前颜色保存到注册表中。在这个应用程序中，我们不需要执行析构函数的正常任务，例如释放内存或关闭文件：
- en: '[PRE15]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The `ClearDocument` method is called when the user selects the **New** menu
    item. In this case, we just clear the circle list. Every other action, such as
    redrawing the window or changing its title, is taken care of by the `StandardDocument`
    class:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户选择**新建**菜单项时，会调用`ClearDocument`方法。在这种情况下，我们只需清除圆列表。其他任何操作，如重绘窗口或更改其标题，都由`StandardDocument`类处理：
- en: '[PRE16]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The `WriteDocumentToStream` method is called by the `StandardDocument` class
    when the user saves a file (by selecting **Save** or **Save As**). It writes the
    number of circles (the size of the circle list) to the output stream and calls
    the `WriteCircle` method for each circle in order to write their states to the
    stream:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户通过选择**保存**或**另存为**来保存文件时，`StandardDocument`类会调用`WriteDocumentToStream`方法。它将圆的数量（圆列表的大小）写入输出流，并为每个圆调用`WriteCircle`方法，以便将它们的状态写入流：
- en: '[PRE17]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The `ReadDocumentFromStream` method is called by the `StandardDocument` method
    when the user opens a file by selecting the **Open** menu item. It reads the number
    of circles (the size of the circle list) and for each circle it creates a new
    object of the `Circle` class, calls the `ReadCircle` method in order to read the
    state of the circle, and adds the circle object to the `circleList` method:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户通过选择**打开**菜单项打开文件时，`StandardDocument`方法会调用`ReadDocumentFromStream`方法。它读取圆的数量（圆列表的大小），并为每个圆创建一个新的`Circle`类对象，调用`ReadCircle`方法以读取圆的状态，并将圆对象添加到`circleList`方法：
- en: '[PRE18]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The `OnMouseDown` method is called when the user presses one of the mouse buttons.
    First we need to check that they have pressed the left mouse button. If they have,
    we loop through the circle list and call the `IsClick` method for each circle
    in order to decide whether they have clicked on a circle. Note that the topmost
    circle is located at the beginning of the list; therefore, we loop from the beginning
    of the list. If we find a clicked circle, we break the loop.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户按下鼠标按钮时，会调用`OnMouseDown`方法。首先我们需要检查他们是否按下了左键。如果按下了，我们就遍历圆列表，并为列表中的每个圆调用`IsClick`方法，以确定他们是否点击了圆。请注意，最上面的圆位于列表的开头；因此，我们从列表的开头开始循环。如果我们找到一个被点击的圆，我们就退出循环。
- en: 'If the user has clicked on a circle, we store its index `moveIndex` and the
    current mouse position in `movePoint`. Both values are needed by that `OnMouseMove`
    method that will be called when the user moves the mouse:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户点击了一个圆，我们将其索引`moveIndex`和当前鼠标位置存储在`movePoint`中。这两个值都需要在用户移动鼠标时调用的`OnMouseMove`方法中使用：
- en: '[PRE19]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: However, if the user has not clicked on a circle, we add a new circle. A circle
    is defined by its center position (`mousePoint`), radius (`CircleRadius`), and
    color (`nextColor`).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果用户没有点击圆，我们会添加一个新的圆。圆由其中心位置（`mousePoint`）、半径（`CircleRadius`）和颜色（`nextColor`）定义。
- en: An invalidated area is a part of the client area that needs to be redrawn. Remember
    that in Windows, we normally do not draw figures directly. Instead, we call the
    `Invalidate` method to tell the system that an area needs to be redrawn and force
    the actual redrawing by calling the `UpdateWindow` method, which eventually results
    in a call to the `OnDraw` method. The invalidated area is always a rectangle.
    The `Invalidate` method has a second parameter (the default value is `true`) indicating
    that the invalidated area should be cleared.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 无效区域是需要重绘的客户区域的一部分。记住，在Windows中，我们通常不会直接绘制图形。相反，我们调用`Invalidate`方法来告诉系统某个区域需要重绘，并通过调用`UpdateWindow`方法强制实际重绘，这最终会导致调用`OnDraw`方法。无效区域始终是矩形。`Invalidate`方法有一个第二个参数（默认值为`true`），表示无效区域应该被清除。
- en: Technically, it is painted in the window's client color, which in this case
    is white. In this way, the previous location of the circle is cleared and the
    circle is drawn at its new location.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 技术上，它被涂在窗口的客户颜色上，在这种情况下是白色。这样，圆的先前位置就会被清除，并在新的位置绘制圆。
- en: 'The `SetDirty` method tells the framework that the document has been altered
    (the document has become *dirty*), which causes the **Save** menu item to be enabled
    and the user to be warned if he/she tries to close the window without saving it:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`SetDirty`方法告诉框架文档已被修改（文档已变为*脏的*），这会导致**保存**菜单项被启用，并且如果用户尝试在不保存的情况下关闭窗口，会警告用户：'
- en: '[PRE20]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The `OnMouseMove` method is called every time the user moves the mouse with
    at least one mouse button pressed. We first need to check whether the user is
    pressing the left mouse button and is clicking on a circle (whether the `moveIndex`
    method does not equal `-1`). If the user is, we calculate the distance from the
    previous mouse event (`OnMouseDown` or `OnMouseMove`) by comparing the previous
    and the current mouse position using the `mousePoint` method. We update the circle
    position, invalidate both the old and new area, forcing a redrawing of the invalidated
    areas with the `UpdateWindow` method, and set the dirty flag:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 每当用户按下至少一个鼠标按钮移动鼠标时，都会调用`OnMouseMove`方法。我们首先需要检查用户是否按下了左鼠标按钮并且点击了一个圆（即`moveIndex`方法不等于`-1`）。如果是，我们通过使用`mousePoint`方法比较前一个鼠标事件（`OnMouseDown`或`OnMouseMove`）的先前和当前鼠标位置来计算与前一个鼠标事件之间的距离。我们更新圆的位置，使旧的和新的区域无效，并使用`UpdateWindow`方法强制重绘无效区域，并设置脏标志：
- en: '[PRE21]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Strictly speaking, the `OnMouseUp` method could be excluded since the `moveIndex`
    method is set to minus one in the `OnMouseDown` method, which is always called
    before the `OnMouseMove` method. However, it has been included for the sake of
    completeness:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 严格来说，`OnMouseUp`方法可以被排除，因为`moveIndex`方法在`OnMouseDown`方法中被设置为负一，而`OnMouseDown`方法总是在`OnMouseMove`方法之前被调用。然而，它已经被包含在内，为了完整性：
- en: '[PRE22]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The `OnDraw` method is called every time the window needs to be (partly or completely)
    redrawn. The call can be initialized by the system as a response to an event (for
    instance, the window has been resized) or by an earlier call to the `UpdateWindow`
    method. The `Graphics` reference parameter has been created by the framework and
    can be considered as a toolbox for drawing lines, painting areas, and writing
    text. However, in this application, we do not write text.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 每当窗口需要（部分或全部）重绘时，都会调用`OnDraw`方法。这个调用可以由系统初始化，作为对事件的响应（例如，窗口已调整大小）或者由对`UpdateWindow`方法的早期调用。`Graphics`引用参数是由框架创建的，可以被视为绘制线条、填充区域和写入文本的工具箱。然而，在这个应用程序中，我们不写入文本。
- en: We iterate through the circle list and, for each circle, call the `Draw` method.
    Note that we do not care about which circles are to be physically redrawn. We
    simple redraw all circles. However, only the circles located in an area that has
    been invalidated by a previous call to the `Invalidate` method will be physically
    redrawn.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们遍历圆列表，并对每个圆调用`Draw`方法。请注意，我们并不关心哪些圆需要实际重绘。我们只是重绘所有圆。然而，只有位于之前调用`Invalidate`方法使区域无效的圆才会实际重绘。
- en: 'The `Draw` method has a second parameter indicating the draw mode, which can
    be `Paint` or `Print`. The `Paint` method indicates that the `OnDraw` method is
    called by the `OnPaint` method in the `Window` class and that the painting is
    performed in the window''s client area. The `Print` method indicates that the
    `OnDraw` method is called by the `OnPrint` method and that the painting is sent
    to a printer. However, in this application, we do not use that parameter:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`Draw`方法有一个表示绘制模式的第二个参数，可以是`Paint`或`Print`。`Paint`方法表示`OnDraw`方法是由`Window`类中的`OnPaint`方法调用的，并且绘制是在窗口的客户区域中执行的。`Print`方法表示`OnDraw`方法是由`OnPrint`方法调用的，并且绘制被发送到打印机。然而，在这个应用程序中，我们不使用该参数：'
- en: '[PRE23]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The `RedRadio`, `GreenRadio`, and `BlueRadio` methods are called before the
    menu items are shown, and the items will be marked with a radio button if they
    return `true`. The `Red`, `Green`, and `Blue` constants are defined in the `Color`
    class:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在显示菜单项之前，会调用`RedRadio`、`GreenRadio`和`BlueRadio`方法，如果它们返回`true`，则项目将带有单选按钮。`Red`、`Green`和`Blue`常量在`Color`类中定义：
- en: '[PRE24]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The `OnRed`, `OnGreen`, and `OnBlue` methods are called when the user selects
    the corresponding menu item. They all set the `nextColor` field to an appropriate
    value:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户选择相应的菜单项时，会调用`OnRed`、`OnGreen`和`OnBlue`方法。它们都将`nextColor`字段设置为一个适当的值：
- en: '[PRE25]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The `OnColorDialog` method is called when the user selects the **Color** dialog
    menu item and displays the standard color dialog. If the user chooses a new color,
    the `nextcolor` method will be given the chosen color value:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户选择**颜色**对话框菜单项时，会调用`OnColorDialog`方法，并显示标准颜色对话框。如果用户选择了一种新颜色，`nextcolor`方法将获得所选的颜色值：
- en: '[PRE26]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The Circle class
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Circle类
- en: '`Circle` is a class holding the information about a single circle. The default
    constructor is used when reading a circle from a file. The second constructor
    is used when creating a new circle. The `IsClick` method returns `true` if the
    given point is located inside the circle (to check whether the user has clicked
    in the circle), the `Area` method returns the circle''s surrounding rectangle
    (for invalidation), and the `Draw` method is called to redraw the circle:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`Circle`是一个包含单个圆信息的类。当从文件中读取圆时使用默认构造函数。当创建一个新的圆时使用第二个构造函数。`IsClick`方法如果给定的点位于圆内（检查用户是否点击了圆），则返回`true`，`Area`方法返回圆的周围矩形（用于无效化），并且调用`Draw`方法来重新绘制圆：'
- en: '**Circle.h**'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**Circle.h**'
- en: '[PRE27]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'As mentioned in the previous section, a circle is defined by its center position
    (`center`), radius (`radius`), and color (`color`):'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，圆由其中心位置（`center`）、半径（`radius`）和颜色（`color`）定义：
- en: '[PRE28]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The default constructor does not need to initialize the fields since it is
    called when the user opens a file and the values are read from the file. The second
    constructor, however, initializes the center point, radius, and color of the circle:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 默认构造函数不需要初始化字段，因为它是在用户打开文件时调用的，值是从文件中读取的。然而，第二个构造函数初始化圆的中心点、半径和颜色：
- en: '**Circle.cpp**'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**Circle.cpp**'
- en: '[PRE29]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The `WriteCircle` method writes the color, center point, and radius to the
    stream. Since `radius` is a regular integer, we simply use the C standard function
    `write`, while `Color` and `Point` have their own methods to write their values
    to a stream. In the `ReadCircle` method, we read the color, center point, and
    radius from the stream in a similar manner:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`WriteCircle`方法将颜色、中心点和半径写入流。由于`radius`是一个常规整数，我们简单地使用C标准函数`write`，而`Color`和`Point`有自己的方法将它们的值写入流。在`ReadCircle`方法中，我们以类似的方式从流中读取颜色、中心点和半径：'
- en: '[PRE30]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The `IsClick` method uses Pythagoras'' theorem to calculate the distance between
    the given point and the circle''s center point and returns `true` if the point
    is located inside the circle (if the distance is less than or equal to the circle
    radius):'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`IsClick`方法使用毕达哥拉斯定理计算给定点与圆的中心点之间的距离，如果点位于圆内（如果距离小于或等于圆半径），则返回`true`：'
- en: '![The Circle class](img/image_02_003.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![The Circle class](img/image_02_003.jpg)'
- en: '[PRE31]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The top-left corner of the resulting rectangle is the center point minus the
    radius and the bottom-right corner is the center point plus the radius:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 结果矩形的左上角是中心点减去半径，而右下角是中心点加上半径：
- en: '[PRE32]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We use the `FillEllipse` method (there is no `FillCircle` method) of the Small
    Windows `Graphics` class to draw the circle. The circle''s border is always black,
    while its interior color is given by the `color` field:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用Small Windows `Graphics`类的`FillEllipse`方法（没有`FillCircle`方法）来绘制圆。圆的边框总是黑色，而其内部颜色由`color`字段给出：
- en: '[PRE33]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Summary
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, you looked into two applications in Small Windows: a simple
    hello-world application and a slightly more advanced circle application, which
    introduced the framework. You also looked into menus, circle drawing, and mouse
    handling.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你探讨了Small Windows中的两个应用：一个简单的hello-world应用和一个稍微复杂一点的圆应用，该应用介绍了框架。你还了解了菜单、圆的绘制和鼠标处理。
- en: In [Chapter 3](ch03.html "Chapter 3. Building a Tetris Application"), *Building
    a Tetris Application*, we will develop a classic Tetris game.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第3章](ch03.html "第3章。构建俄罗斯方块应用")中，我们将开发一个经典的俄罗斯方块游戏。
