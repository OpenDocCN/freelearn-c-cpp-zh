["```cpp\n// Adds an element to the vector, ensuring basic exception\n// safety\nvoid safePushBack(std::vector<int> &vec, int value) {\n  try {\n    // Attempt to add value to the vector\n    vec.push_back(value);\n  } catch (const std::exception &e) {\n    // Handle any exception thrown by push_back\n    std::cerr << \"Exception caught: \" << e.what() << \"\\n\";\n    // No additional action needed, vec is already in its\n    // original state\n  }\n}\n```", "```cpp\ntemplate <typename T> class CustomArray {\npublic:\n  explicit CustomArray(size_t size)\n      : size(size), data(std::make_unique<T[]>(size)) {\n    // Initialize with default values, assuming T can be\n    // default constructed safely std::fill provides strong\n    // guarantee\n    std::fill(data.get(), data.get() + size, T());\n  }\n  // Copy constructor\n  CustomArray(const CustomArray &other)\n      : size(other.size),\n        data(std::make_unique<T[]>(other.size)) {\n    safeCopy(data.get(), other.data.get(), size);\n  }\n  // Move constructor - noexcept for strong guarantee\n  // during container reallocation\n  CustomArray(CustomArray &&other) noexcept\n      : size(other.size), data(std::move(other.data)) {\n    other.size = 0;\n  }\n  void safeCopy(T *destination, T *source, size_t size) {\n    // std::copy provides strong guarantee\n    std::copy(source, source + size, destination);\n  }\n```", "```cpp\n  // Copy assignment operator\n  CustomArray &operator=(const CustomArray &other) {\n    if (this != &other) {\n      std::unique_ptr<T[]> newData(\n          std::make_unique<T[]>(other.size));\n      safeCopy(newData.get(), other.data.get(),\n               other.size);\n      size = other.size;\n      data = std::move(\n          newData); // Commit point, only change state here\n    }\n    return *this;\n  }\n  // Move assignment operator - noexcept for strong\n  // guarantee during container reallocation\n  CustomArray &operator=(CustomArray &&other) noexcept {\n    if (this != &other) {\n      data = std::move(other.data);\n      size = other.size;\n      other.size = 0;\n    }\n    return *this;\n  }\n```", "```cpp\nint main() {\n  try {\n    // CustomArray managing an array of 5 integers\n    CustomArray<int> arr(5);\n    // ... Use the array\n  } catch (const std::exception &e) {\n    std::cerr << \"An exception occurred: \" << e.what()\n              << '\\n';\n    // CustomArray destructor will clean up resources if an\n    // exception occurs\n  }\n  return 0;\n}\n```", "```cpp\nstd::vector<int> data{1, 2, 3, 4, 5};\nstd::for_each(data.begin(), data.end(), [](int& value) noexcept {\n    value *= 2;\n});\n```"]