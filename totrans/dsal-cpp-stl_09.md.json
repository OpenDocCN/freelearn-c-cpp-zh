["```cpp\n#include <iostream>\n#include <sstream>\n#include <stack>\n#include <string>\ndouble evaluateRPN(const std::string &expression) {\n  std::stack<double> s;\n  std::istringstream iss(expression);\n  std::string token;\n  while (iss >> token) {\n    if (token == \"+\" || token == \"-\" || token == \"*\" ||\n        token == \"/\") {\n      if (s.size() < 2) {\n        throw std::runtime_error(\"Invalid RPN expression\");\n      }\n      double b = s.top();\n      s.pop();\n      double a = s.top();\n      s.pop();\n      if (token == \"+\") {\n        s.push(a + b);\n      } else if (token == \"-\") {\n        s.push(a - b);\n      } else if (token == \"*\") {\n        s.push(a * b);\n      } else if (token == \"/\") {\n        if (b == 0.0) {\n          throw std::runtime_error(\"Division by zero\");\n        }\n        s.push(a / b);\n      }\n    } else {\n      s.push(std::stod(token));\n    }\n  }\n  if (s.size() != 1) {\n    throw std::runtime_error(\"Invalid RPN expression\");\n  }\n  return s.top();\n}\nint main() {\n  try {\n    // Evaluate RPN expressions\n    std::cout << \"46 2 + = \" << evaluateRPN(\"46 2 +\")\n              << \"\\n\"; // 48\n    std::cout << \"5 1 2 + 4 * + 3 - = \"\n              << evaluateRPN(\"5 1 2 + 4 * + 3 -\")\n              << \"\\n\"; // 14\n    std::cout << \"3 4 5 * - = \" << evaluateRPN(\"3 4 5 * -\")\n              << \"\\n\"; // -17\n  } catch (const std::exception &e) {\n    std::cerr << \"Error: \" << e.what() << \"\\n\";\n  }\n  return 0;\n}\n```", "```cpp\n46 2 + = 48\n5 1 2 + 4 * + 3 - = 14\n3 4 5 * - = -17\n```", "```cpp\n#include <iostream>\n#include <queue>\n#include <vector>\nclass Graph {\npublic:\n  Graph(int vertices) : numVertices(vertices) {\n    adjList.resize(vertices);\n  }\n  void addEdge(int v, int w) {\n    adjList[v].push_back(w);\n    adjList[w].push_back(v);\n  }\n  void BFS(int startVertex) {\n    std::vector<bool> visited(numVertices, false);\n    std::queue<int> q;\n    visited[startVertex] = true;\n    q.push(startVertex);\n    while (!q.empty()) {\n      int currentVertex = q.front();\n      std::cout << currentVertex << \" \";\n      q.pop();\n      for (int neighbor : adjList[currentVertex]) {\n        if (!visited[neighbor]) {\n          visited[neighbor] = true;\n          q.push(neighbor);\n        }\n      }\n    }\n  }\nprivate:\n  int numVertices{0};\n  std::vector<std::vector<int>> adjList;\n};\nint main() {\n  Graph g(6);\n  g.addEdge(0, 1);\n  g.addEdge(0, 2);\n  g.addEdge(1, 3);\n  g.addEdge(1, 4);\n  g.addEdge(2, 4);\n  g.addEdge(3, 4);\n  g.addEdge(3, 5);\n  std::cout << \"BFS starting from vertex 0: \";\n  g.BFS(0); // Output: 0 1 2 3 4 5\n  return 0;\n}\n```", "```cpp\nBFS starting from vertex 0: 0 1 2 3 4 5\n```", "```cpp\n#include <climits>\n#include <iostream>\n#include <list>\n#include <queue>\n#include <vector>\nclass WeightedGraph {\npublic:\n  WeightedGraph(int vertices) : numVertices(vertices) {\n    adjList.resize(vertices);\n  }\n  void addEdge(int u, int v, int weight) {\n    adjList[u].push_back({v, weight});\n    adjList[v].push_back({u, weight});\n  }\n  void dijkstra(int startVertex) {\n    std::priority_queue<std::pair<int, int>,\n                        std::vector<std::pair<int, int>>,\n                        std::greater<std::pair<int, int>>>\n        pq;\n    std::vector<int> distances(numVertices, INT_MAX);\n    pq.push({0, startVertex});\n    distances[startVertex] = 0;\n    while (!pq.empty()) {\n      int currentVertex = pq.top().second;\n      pq.pop();\n      for (auto &neighbor : adjList[currentVertex]) {\n        int vertex = neighbor.first;\n        int weight = neighbor.second;\n        if (distances[vertex] >\n            distances[currentVertex] + weight) {\n          distances[vertex] =\n              distances[currentVertex] + weight;\n          pq.push({distances[vertex], vertex});\n        }\n      }\n    }\n    std::cout << \"Distances from vertex \" << startVertex\n              << \":\\n\";\n    for (int i = 0; i < numVertices; ++i) {\n      std::cout << i << \" -> \" << distances[i] << '\\n';\n    }\n  }\nprivate:\n  int numVertices{0};\n  std::vector<std::list<std::pair<int, int>>> adjList;\n};\nint main() {\n  WeightedGraph g(5);\n  g.addEdge(0, 1, 9);\n  g.addEdge(0, 2, 6);\n  g.addEdge(0, 3, 5);\n  g.addEdge(1, 3, 2);\n  g.addEdge(2, 4, 1);\n  g.addEdge(3, 4, 2);\n  g.dijkstra(0);\n  return 0;\n}\n```", "```cpp\nDistances from vertex 0:\n0 -> 0\n1 -> 7\n2 -> 6\n3 -> 5\n4 -> 7\n```"]