- en: '1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Introduction to Godot 4.0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Whether it’s a career goal or a recreational hobby, game development is a fun
    and rewarding endeavor. There’s never been a better time to get started in game
    development. Modern programming languages and tools have made it easier than ever
    to build high-quality games and distribute them to the world. If you’re reading
    this book, then you’ve set your feet on the path to making the game(s) of your
    dreams.
  prefs: []
  type: TYPE_NORMAL
- en: This book is an introduction to the Godot Game Engine and its new 4.0 version,
    which was released in 2023\. Godot 4.0 has a large number of new features and
    capabilities that make it a strong alternative to expensive commercial game engines.
    For beginners, it offers a friendly way to learn game development fundamentals.
    For more experienced developers, Godot is a powerful, customizable, and *open*
    toolkit for bringing your visions to life.
  prefs: []
  type: TYPE_NORMAL
- en: This book takes a project-based approach that will introduce you to the fundamentals
    of the engine. It consists of five game projects that are designed to help you
    achieve a sound understanding of game development concepts and how they’re applied
    in Godot. Along the way, you will learn how Godot works and absorb important techniques
    that you can apply to your own projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’ll cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: General advice for getting started
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is a game engine?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is Godot?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downloading Godot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overview of the Godot UI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nodes and scenes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scripting in Godot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: General advice
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section contains some general advice to readers, based on the author’s
    experience as a teacher and lecturer. Keep these tips in mind as you work through
    the book, especially if you’re very new to programming.
  prefs: []
  type: TYPE_NORMAL
- en: Try to follow the projects in the book in order. Later chapters may build on
    topics that were introduced in earlier chapters, where they are explained in more
    detail. When you encounter something that you don’t remember, go back and review
    that topic in the earlier chapter. No one is timing you, and there’s no prize
    for finishing the book quickly.
  prefs: []
  type: TYPE_NORMAL
- en: There is a lot of material to absorb here. Don’t feel discouraged if you don’t
    get it at first. The goal is not to become an expert in game development overnight
    – that’s just not possible. Just like with any other skill – carpentry or a musical
    instrument, for example – it takes years of practice and study to develop proficiency.
    Repetition is the key to learning complex topics; the more you work with Godot’s
    features, the more familiar and easier they will start to seem. Try repeating
    one of the earlier chapters after you reach the end. You’ll be surprised at how
    much more you’ll understand compared to the first time you read it.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you’re reading this as an e-book, resist the temptation to copy and paste
    the code. Typing the code yourself will engage your brain more actively. It’s
    similar to how taking notes during a lecture helps you learn better than just
    listening, even if you never look back at the notes. If you’re a slow typist,
    it will also help you work on your typing speed. In a nutshell: you’re a programmer,
    so get used to typing code!'
  prefs: []
  type: TYPE_NORMAL
- en: One of the biggest mistakes that new game developers make is taking on a bigger
    project than they can handle. It is very important to keep the scope of your project
    as small as possible when starting out. You will be much more successful (and
    learn more) if you finish two or three small games than if you have a large, incomplete
    project that has grown beyond your ability to manage.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll notice that the five games in the book follow this strategy very strictly.
    They are all small in scope, both for practical reasons – to fit reasonably into
    book-sized lessons – but also to remain focused on practicing the basics. As you
    build the game, you will likely find yourself thinking of additional features
    and gameplay elements right away. *What if the spaceship had upgrades?* *What
    if the character could do* *wall jumps?*
  prefs: []
  type: TYPE_NORMAL
- en: Ideas are great, but if you haven’t finished the basic project yet, write them
    down and save them for later. Don’t let yourself be sidetracked by one “cool idea”
    after another. Developers call this *feature creep*, meaning a list of features
    that never stops growing, and it’s a trap that has led to many an unfinished project.
    Don’t fall victim to it.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, don’t forget to take a break now and again. You shouldn’t try and power
    through the whole book, or even one project, in just a few sittings. After each
    new concept, and especially after each chapter, give yourself time to absorb the
    new information before you dive into the next one. You’ll find that you not only
    retain more information, but you’ll probably enjoy the process more.
  prefs: []
  type: TYPE_NORMAL
- en: The secret to learning effectively
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here’s the secret to getting the most out of these projects and increasing
    your skills in a way that makes them stick: at the end of each chapter, once you’ve
    finished building the game project, immediately delete it and start over. This
    time, try and re-create it without looking at the book. If you get stuck, just
    look at that part in the chapter, and then close the book again. If you really
    feel confident, try adding your own spin to the game – change some parts of the
    gameplay or add a new twist.'
  prefs: []
  type: TYPE_NORMAL
- en: If you do this multiple times with each of the games, you’ll be amazed at how
    less often you’ll need to check the book. If you can make the projects in this
    book on your own without help, then you’re surely ready to branch out and take
    on your original concepts.
  prefs: []
  type: TYPE_NORMAL
- en: Keep these tips in mind as you read through the following sections. In the next
    section, you’ll learn what a game engine is and why game developers might want
    to choose to use one.
  prefs: []
  type: TYPE_NORMAL
- en: What is a game engine?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Game development is complex and involves a wide variety of knowledge and skills.
    To build a modern game, you need a great deal of underlying technology before
    you can make the actual game itself. Imagine that you had to build your computer
    and write your own operating system before you could even start programming. Game
    development would be a lot like that if you truly had to start from scratch and
    make everything that you need.
  prefs: []
  type: TYPE_NORMAL
- en: There are also a number of common needs that every game has. For example, no
    matter what the game is, it’s going to need to draw things on the screen. If the
    code to do that has already been written, it makes more sense to reuse it than
    to create it all over again for every game. That’s where game frameworks and engines
    come in.
  prefs: []
  type: TYPE_NORMAL
- en: A **game framework** is a set of libraries with helper code that assists in
    building the foundational parts of a game. It doesn’t necessarily provide all
    the pieces, and you may still have to write a great deal of code to tie everything
    together. Because of this, building a game with a game framework can take more
    time than one built with a full game engine.
  prefs: []
  type: TYPE_NORMAL
- en: A **game engine** is a collection of tools and technologies designed to ease
    the process of game-making by removing the need to reinvent the wheel for each
    new game project. It provides a collection of commonly needed functionality that
    often would require a significant investment in time and effort to develop.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some of the main features a typical game engine will provide:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Rendering (2D and 3D)**: Rendering is the process of displaying the game
    on the player’s screen. A good rendering pipeline must take into account modern
    GPU support, high-resolution displays, and effects such as lighting, perspective,
    and viewports, all while maintaining a very high framerate.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Physics**: While a very common requirement, building a robust and accurate
    physics engine is a monumental task. Most games require some sort of collision
    detection and response system, and many need physics simulations, but few developers
    want to take on the task of writing one - especially if they have never tried
    to do so before!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Platform support**: In today’s market, most developers want to be able to
    release their games on multiple platforms, such as desktops, consoles, mobile,
    and/or the web. A game engine provides a unified exporting process to publish
    games on multiple platforms without needing to rewrite game code or support multiple
    versions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Common development environment**: By using the same unified interface to
    make multiple games, the developer doesn’t have to re-learn a new workflow every
    time they start a new project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition to these, there will be tools to assist with features such as networking,
    easing the process of managing images and sound, animations, debugging, and many
    more. Often, game engines will include the ability to import content from other
    tools, such as those used to create animations or 3D models.
  prefs: []
  type: TYPE_NORMAL
- en: Using a game engine allows the developer to focus on building their game rather
    than creating the underlying framework needed to make it work. For small or independent
    developers, this can mean the difference between releasing a game after one year
    of development instead of three, or even never at all.
  prefs: []
  type: TYPE_NORMAL
- en: There are dozens of popular game engines on the market today, such as Unity,
    Unreal Engine, and GameMaker Studio, just to name a few. An important fact to
    be aware of is that the majority of popular game engines are commercial products.
    They may or may not require any financial investment to get started, but they
    will require some kind of licensing and/or royalty payments if your game makes
    money. Whatever engine you choose, you need to carefully read the user agreement
    and make sure you understand what you are and are not allowed to do with the engine,
    and what hidden costs, if any, you may be responsible for.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, some engines are non-commercial and *open source*, such as
    the Godot game engine, which is what this book is all about.
  prefs: []
  type: TYPE_NORMAL
- en: What is Godot?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Godot is a fully featured modern game engine, providing all of the features
    described in the previous section and more. It is also completely free and open
    source, released under the very permissive MIT license. This means there are no
    fees, no hidden costs, and no royalties to pay on your game’s revenue. Everything
    you make with Godot 100% belongs to you, which is not the case with many commercial
    game engines that require an ongoing contractual relationship. For many developers,
    this is very appealing.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re not familiar with the concept of open source, community-driven development,
    this may seem strange to you. However, much like the Linux kernel, Firefox browser,
    and many other very well-known pieces of software, Godot is not developed by a
    company as a commercial product. Instead, a dedicated community of passionate
    developers donates their time and expertise to building the engine, testing and
    fixing bugs, producing documentation, and more.
  prefs: []
  type: TYPE_NORMAL
- en: As a game developer, the benefits of using Godot are many. Because it is unencumbered
    by commercial licensing, you have complete control over exactly how and where
    your game is distributed. Many commercial game engines restrict the types of projects
    you can make or require a much more expensive license to build games in certain
    categories, such as gambling.
  prefs: []
  type: TYPE_NORMAL
- en: Godot’s open source nature also means there is a level of transparency that
    doesn’t exist with commercial game engines. For example, if you find that a particular
    engine feature doesn’t quite meet your needs, you are free to modify the engine
    itself and add the new features you need, with no permission required. This can
    also be very helpful when debugging a large project because you have full access
    to the engine’s internal workings.
  prefs: []
  type: TYPE_NORMAL
- en: It also means that you can directly contribute to Godot’s future. See *additional
    topics* in [*Chapter 7*](B19289_07.xhtml#_idTextAnchor207) for more information
    about how you can get involved with Godot development.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have an understanding of what Godot is and how it can help you
    build a game, it’s time to get started. In the next section, you’ll see how to
    download Godot and set it up for use on your own computer.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading Godot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download the latest version of Godot by visiting [https://godotengine.org/](https://godotengine.org/)
    and clicking **Download Latest**. This book is written for version 4.0\. If the
    version you download has another number at the end (such as 4.0.3), that’s fine
    – this just means that it includes updates to version 4.0 that fix bugs or other
    issues.
  prefs: []
  type: TYPE_NORMAL
- en: On the download page, you will also see a standard version and a .NET version.
    The .NET version is specially built to be used with the C# programming language.
    Don’t download this one unless you plan to use C# with Godot. The projects in
    this book do not use C#.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.1: The Godot download page](img/B19289_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.1: The Godot download page'
  prefs: []
  type: TYPE_NORMAL
- en: Unzip the downloaded file, and you’ll have the Godot application. Optionally,
    you can drag it to your `Programs` or `Applications` folder, if you have one.
    Double-click the application to launch it and you’ll see Godot’s **Project Manager**
    window, which you’ll learn about in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Alternate installation methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are a few other ways to get Godot on your computer besides downloading
    it from the Godot website. Note that there is no difference in functionality when
    installed this way. The following are merely alternatives for downloading the
    application:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Steam**: If you have an account on Steam, you can install Godot via the Steam
    desktop application. Search for Godot in the Steam store and follow the instructions
    to install it. You can launch Godot from the Steam application:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 1.2: The Godot engine on Steam](img/B19289_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.2: The Godot engine on Steam'
  prefs: []
  type: TYPE_NORMAL
- en: '**Itch.io**: You can also download Godot from the popular itch.io website.
    Itch is a marketplace for independent game developers and creators. Search for
    Godot and download it from the provided links.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Package Managers**: If you’re using one of the following operating system
    package managers, you can install Godot via its normal installation process. See
    the documentation for your package manager for details. Godot is available in
    these package managers:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Homebrew (macOS)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Scoop (Windows)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Snap (Linux)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Android and web versions
  prefs: []
  type: TYPE_NORMAL
- en: You will also see downloads available for Godot versions that run on Android
    and in your web browser. At the time of this writing, these versions are listed
    as “experimental” and may not be stable or fully functional. It is recommended
    that you use the desktop version of Godot, especially while you’re learning.
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations, you have successfully installed Godot on your computer. In
    the next section, you will see an overview of Godot’s editor interface – the purposes
    of the various windows and buttons you’ll use when working with the editor.
  prefs: []
  type: TYPE_NORMAL
- en: Overview of the Godot UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Like most game engines, Godot has a unified development environment. This means
    that you use the same interface to work on all of the aspects of your game – code,
    visuals, audio, and so on. This section is an introduction to the interface and
    its parts. Take note of the terminology used here; it will be used throughout
    this book when referring to actions you’ll take in the editor window.
  prefs: []
  type: TYPE_NORMAL
- en: Project Manager
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **Project Manager** window is the first window you’ll see when you open
    Godot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.3: Project Manager](img/B19289_01_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.3: Project Manager'
  prefs: []
  type: TYPE_NORMAL
- en: Opening Godot for the first time
  prefs: []
  type: TYPE_NORMAL
- en: The first time you open Godot, you won’t have any projects yet. You’ll see a
    pop-up window asking if you want to *explore official example projects in the
    Asset Library*. Select **Cancel**, and you’ll see the **Project Manager** as it
    appears in the preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this window, you can see a list of your existing Godot projects. You can
    choose an existing project and click **Run** to play the game or **Edit** to work
    on it in the Godot editor. You can also create a new project by clicking **New
    Project**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.4: New project settings](img/B19289_01_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.4: New project settings'
  prefs: []
  type: TYPE_NORMAL
- en: Here, you can give the project a name and create a folder to store it in. Note
    the warning message – a Godot project is stored as a separate folder on the computer.
    All the files that the project uses must be located in this folder. This makes
    it convenient to share Godot projects because you only need to zip the project
    folder and you can be confident that another Godot user will be able to open it
    and not be missing any necessary data.
  prefs: []
  type: TYPE_NORMAL
- en: Renderer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When creating a new project, you also have the choice of **Renderer**. The three
    options represent the balance between advanced, high-performance graphics that
    require a modern desktop GPU, and compatibility with less-capable platforms such
    as mobile and older desktops. You can change this option later if you need, so
    it’s OK to leave it as the default setting. If you later decide to build games
    for the mobile platform, the Godot documentation has a great deal of information
    regarding performance and rendering options. See [*Chapter 7*](B19289_07.xhtml#_idTextAnchor207)
    for links and more information.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing filenames
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When you’re naming your new project, there are a few simple rules you should
    try and follow that may save you some trouble in the future. Give your project
    a name that describes what it is – *Wizard Battle Arena* is a much better project
    name than *Game #2*. In the future, you’ll never be able to remember which game
    number two was, so be as descriptive as possible.'
  prefs: []
  type: TYPE_NORMAL
- en: You should also think about how you name your project folder and the files in
    it. Some operating systems are case-sensitive and distinguish between `My_Game`
    and `my_game`, while others do not. This can lead to problems if you move your
    project from one computer to another. For this reason, many programmers develop
    a standardized naming scheme for their projects, such as not using spaces in filenames
    and using `_` between words. Regardless of what naming scheme you adopt, the most
    important thing is to be consistent.
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve created the project folder, the `test_project`.
  prefs: []
  type: TYPE_NORMAL
- en: Console window
  prefs: []
  type: TYPE_NORMAL
- en: If you’re using a version of the Windows operating system, you’ll also see a
    console window open when you run Godot. In this window, you can see warnings and
    errors produced by the engine and/or your project. This window doesn’t appear
    on macOS or Linux, but you can see the console output if you launch the application
    from the command line using a Terminal program
  prefs: []
  type: TYPE_NORMAL
- en: Editor window
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following figure is a screenshot of the main Godot editor window. This
    is where you will spend most of your time when building projects in Godot. The
    editor interface is divided into several sections, each offering different functionality.
    The specific terminology for each section is described after *Figure 1**.5*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.5: The Godot editor window](img/B19289_01_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.5: The Godot editor window'
  prefs: []
  type: TYPE_NORMAL
- en: The main portion of the editor window is the *Viewport*. This is where you’ll
    see the parts of your game as you’re working on them.
  prefs: []
  type: TYPE_NORMAL
- en: In the top center of the window is a list of the *Workspaces* you can switch
    between when working on different parts of your game. You can switch between **2D**
    and **3D** mode, as well as **Script** mode, where you’ll edit your game’s code.
    **AssetLib** is a place where you can download add-ons and example projects contributed
    by the Godot community. See [*Chapter 7*](B19289_07.xhtml#_idTextAnchor207) for
    more information about using the asset library.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 1**.6* shows the *toolbar* for the current workspace you’re using.
    The icons here will change based on what kind of object you’re working with:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.6: Toolbar icons](img/B19289_01_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.6: Toolbar icons'
  prefs: []
  type: TYPE_NORMAL
- en: 'The buttons in the upper-right *playtest* area are for launching the game and
    interacting with it when it’s running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.7: Playtest buttons](img/B19289_01_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.7: Playtest buttons'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the left and right sides are the *Docks* or *Tabs* you can use to view and
    select game items and set their properties. On the bottom of the left-hand dock,
    you’ll find the `res://` path, which is the project’s root folder. For example,
    a file path might look like this: `res://player/player.tscn`. This refers to a
    file in the `player` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.8: The FileSystem tab](img/B19289_01_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.8: The FileSystem tab'
  prefs: []
  type: TYPE_NORMAL
- en: 'At the top of the left-hand dock is the **Scene** tab, which shows the current
    scene you are working on in the viewport (more about scenes after *Figure 1**.9*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.9: The Scene tab](img/B19289_01_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.9: The Scene tab'
  prefs: []
  type: TYPE_NORMAL
- en: On the right-hand side, you’ll find a box labeled **Inspector**, where you can
    see and adjust the properties of your game objects.
  prefs: []
  type: TYPE_NORMAL
- en: As you work through the game projects in this book, you’ll learn about the functionality
    of these items and become familiar with navigating the editor interface.
  prefs: []
  type: TYPE_NORMAL
- en: After reading this section, you should feel comfortable with the layout of the
    Godot editor window and the names of the elements you’ll be seeing throughout
    the book. You’re one step closer to finishing this introduction and getting started
    on a game. First, though, did you notice those items in *Figure 1**.9*? Those
    are called nodes, and you’ll find out what they’re all about in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Learning about nodes and scenes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Nodes** are the basic building blocks for creating games in Godot. A node
    is an object that can give you a variety of specialized game functions. A given
    type of node might display an image, play an animation, or represent a 3D model.
    The node contains a collection of properties, allowing you to customize its behavior.
    Which nodes you add to your project depends on what functionality you need. It’s
    a modular system designed to give you flexibility in building your game objects.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The nodes you add are organized into a *tree* structure. In a tree, nodes are
    added as *children* of other nodes. A particular node can have any number of children,
    but only one *parent* node. When a group of nodes is collected into a tree, it
    is called a *scene*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.10: Nodes arranged in a tree](img/B19289_01_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.10: Nodes arranged in a tree'
  prefs: []
  type: TYPE_NORMAL
- en: '**Scenes** in Godot are typically used to create and organize the various game
    objects in your project. You might have a player scene that contains all the nodes
    and scripts that make the player’s character work. Then, you might create another
    scene that defines the game’s map: the obstacles and items that the player must
    navigate through. You can then combine these various scenes into the final game.'
  prefs: []
  type: TYPE_NORMAL
- en: While nodes come with a variety of properties and functions, any node’s behavior
    and capabilities can be extended by attaching a *script* to the node. This allows
    you to write code that makes the node do more than it can do in its default state.
    For example, you can add a `Sprite2D` node to display an image, but if you want
    that image to move or disappear when clicked, you’ll need to add a script to create
    that behavior.
  prefs: []
  type: TYPE_NORMAL
- en: Nodes are powerful tools, and understanding them is the key to effectively building
    game objects in Godot. However, on their own, they can only do so much. It’s still
    up to you to provide the game logic – the rules that objects in your game will
    follow. In the next section, you can see how that’s done by writing code using
    Godot’s scripting language.
  prefs: []
  type: TYPE_NORMAL
- en: Scripting in Godot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Godot provides two official languages for scripting nodes: **GDScript** and
    **C#**. GDScript is the dedicated built-in language, providing the tightest integration
    with the engine, and is the most straightforward to use. For those that are already
    familiar or proficient with C#, you can download a version that supports that
    language.'
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the two supported languages, Godot itself is written in C++,
    and you can get even more performance and control by extending the engine’s functionality
    directly. See *Additional topics* in [*Chapter 7*](B19289_07.xhtml#_idTextAnchor207)
    for information on using other languages and extending the engine.
  prefs: []
  type: TYPE_NORMAL
- en: All the games in this book will use GDScript. For the majority of projects,
    GDScript is the best choice of language. It is tightly integrated with Godot’s
    **Application Programming Interface** (**API**) and is designed for rapid development.
  prefs: []
  type: TYPE_NORMAL
- en: About GDScript
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: GDScript’s syntax is very closely modeled on the Python language. If you are
    familiar with Python already, you will find GDScript very familiar. If you are
    comfortable with another dynamic language, such as JavaScript, you should find
    it relatively easy to learn. Python is very often recommended as a good beginner
    language, and GDScript shares that user-friendliness.
  prefs: []
  type: TYPE_NORMAL
- en: This book assumes you have at least some programming experience already. If
    you’ve never coded before, you may find it a little more difficult. Learning a
    game engine is a large task on its own; learning to code at the same time means
    you’ve taken on a major challenge. If you find yourself struggling with the code
    in this book, you may find that working through an introductory programming lesson
    in a language such as Python or Javascript will help you grasp the basics.
  prefs: []
  type: TYPE_NORMAL
- en: Like Python, GDScript is a dynamically typed language, meaning you do not need
    to declare a variable’s type when creating it, and it uses whitespace (indentation)
    to denote code blocks. Overall, the advantage of using GDScript for your game’s
    logic is that, due to its tight integration with the engine, you write less code,
    which means faster development and fewer mistakes to fix.
  prefs: []
  type: TYPE_NORMAL
- en: 'To give you an idea of what GDScript looks like, here is a small script that
    causes a sprite to move from left to right across the screen at a given speed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: If you’ve used other high-level languages such as Python before, this will look
    very familiar, but don’t worry if this code doesn’t make much sense to you yet.
    In the following chapters, you’ll be writing lots of code, which will be accompanied
    by explanations of how it all works.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you were introduced to the concept of a game engine in general
    and to Godot in particular. Most importantly, you downloaded Godot and launched
    it!
  prefs: []
  type: TYPE_NORMAL
- en: You learned some important vocabulary that will be used throughout this book
    when referring to various parts of the Godot editor window. You also learned about
    the concepts of nodes and scenes, which are the fundamental building blocks of
    Godot.
  prefs: []
  type: TYPE_NORMAL
- en: You also received some advice on how to approach the projects in this book and
    game development in general. If you ever find yourself getting frustrated as you
    are working through this book, go back and reread the *General advice* section.
    There’s a lot to learn, and it’s OK if it doesn’t all make sense the first time.
    You’ll make five different games throughout this book, and each one will help
    you understand things a little bit more.
  prefs: []
  type: TYPE_NORMAL
- en: You’re ready to move on to the next chapter, where you’ll start building your
    first game in Godot.
  prefs: []
  type: TYPE_NORMAL
