["```cpp\ntypedef struct {\n  char first_name[32];\n  char last_name[32];\n  unsigned int birth_year;\n} person_t;\ntypedef struct {\n  char first_name[32];\n  char last_name[32];\n  unsigned int birth_year;\n char student_number[16]; // Extra attribute\n unsigned int passed_credits; // Extra attribute\n} student_t;\n```", "```cpp\ntypedef struct {\n  char first_name[32];\n  char last_name[32];\n  unsigned int birth_year;\n} person_t;\ntypedef struct {\n person_t person;\n  char student_number[16]; // Extra attribute\n  unsigned int passed_credits; // Extra attribute\n} student_t;\n```", "```cpp\n#include <stdio.h>\ntypedef struct {\n  char first_name[32];\n  char last_name[32];\n  unsigned int birth_year;\n} person_t;\ntypedef struct {\n  person_t person;\n  char student_number[16]; // Extra attribute\n  unsigned int passed_credits; // Extra attribute\n} student_t;\nint main(int argc, char** argv) {\n  student_t s;\n student_t* s_ptr = &s;\n person_t* p_ptr = (person_t*)&s;\n  printf(\"Student pointer points to %p\\n\", (void*)s_ptr);\n  printf(\"Person pointer points to %p\\n\", (void*)p_ptr);\n  return 0;\n}\n```", "```cpp\n$ gcc ExtremeC_examples_chapter8_1.c -o ex8_1.out\n$ ./ex8_1.out\nStudent pointer points to 0x7ffeecd41810\nPerson pointer points to 0x7ffeecd41810\n$\n```", "```cpp\nstruct person_t;\ntypedef struct {\n struct person_t person; // Generates an error! \n  char student_number[16]; // Extra attribute\n  unsigned int passed_credits; // Extra attribute\n} student_t;\n```", "```cpp\n#ifndef EXTREME_C_EXAMPLES_CHAPTER_8_2_PERSON_H\n#define EXTREME_C_EXAMPLES_CHAPTER_8_2_PERSON_H\n// Forward declaration\nstruct person_t;\n// Memory allocator\nstruct person_t* person_new();\n// Constructor\nvoid person_ctor(struct person_t*,\n                 const char*  /* first name */,\n                 const char*  /* last name */,\n                 unsigned int /* birth year */);\n// Destructor\nvoid person_dtor(struct person_t*);\n// Behavior functions\nvoid person_get_first_name(struct person_t*, char*);\nvoid person_get_last_name(struct person_t*, char*);\nunsigned int person_get_birth_year(struct person_t*);\n#endif\n```", "```cpp\n#ifndef EXTREME_C_EXAMPLES_CHAPTER_8_2_PERSON_P_H\n#define EXTREME_C_EXAMPLES_CHAPTER_8_2_PERSON_P_H\n// Private definition\ntypedef struct {\n  char first_name[32];\n  char last_name[32];\n  unsigned int birth_year;\n} person_t;\n#endif\n```", "```cpp\n#include <stdlib.h>\n#include <string.h>\n// person_t is defined in the following header file.\n#include \"ExtremeC_examples_chapter8_2_person_p.h\"\n// Memory allocator\nperson_t* person_new() {\n  return (person_t*)malloc(sizeof(person_t));\n}\n// Constructor\nvoid person_ctor(person_t* person,\n                 const char* first_name,\n                 const char* last_name,\n                 unsigned int birth_year) {\n  strcpy(person->first_name, first_name);\n  strcpy(person->last_name, last_name);\n  person->birth_year = birth_year;\n}\n// Destructor\nvoid person_dtor(person_t* person) {\n  // Nothing to do\n}\n// Behavior functions\nvoid person_get_first_name(person_t* person, char* buffer) {\n  strcpy(buffer, person->first_name);\n}\nvoid person_get_last_name(person_t* person, char* buffer) {\n  strcpy(buffer, person->last_name);\n}\nunsigned int person_get_birth_year(person_t* person) {\n  return person->birth_year;\n}\n```", "```cpp\n#ifndef EXTREME_C_EXAMPLES_CHAPTER_8_2_STUDENT_H\n#define EXTREME_C_EXAMPLES_CHAPTER_8_2_STUDENT_H\n//Forward declaration\nstruct student_t;\n// Memory allocator\nstruct student_t* student_new();\n// Constructor\nvoid student_ctor(struct student_t*,\n                  const char*  /* first name */,\n                  const char*  /* last name */,\n                  unsigned int /* birth year */,\n                  const char*  /* student number */,\n                  unsigned int /* passed credits */);\n// Destructor\nvoid student_dtor(struct student_t*);\n// Behavior functions\nvoid student_get_student_number(struct student_t*, char*);\nunsigned int student_get_passed_credits(struct student_t*);\n#endif\n```", "```cpp\n#include <stdlib.h>\n#include <string.h>\n#include \"ExtremeC_examples_chapter8_2_person.h\"\n// person_t is defined in the following header\n// file and we need it here.\n#include \"ExtremeC_examples_chapter8_2_person_p.h\"\n//Forward declaration\ntypedef struct {\n  // Here, we inherit all attributes from the person class and\n  // also we can use all of its behavior functions because of\n  // this nesting.\n person_t person;\n  char* student_number;\n  unsigned int passed_credits;\n} student_t;\n// Memory allocator\nstudent_t* student_new() {\n  return (student_t*)malloc(sizeof(student_t));\n}\n// Constructor\nvoid student_ctor(student_t* student,\n                  const char* first_name,\n                  const char* last_name,\n                  unsigned int birth_year,\n                  const char* student_number,\n                  unsigned int passed_credits) {\n  // Call the constructor of the parent class\n person_ctor((struct person_t*)student,\n first_name, last_name, birth_year);\n  student->student_number = (char*)malloc(16 * sizeof(char));\n  strcpy(student->student_number, student_number);\n  student->passed_credits = passed_credits;\n}\n// Destructor\nvoid student_dtor(student_t* student) {\n  // We need to destruct the child object first.\n  free(student->student_number);\n  // Then, we need to call the destructor function\n  // of the parent class\n person_dtor((struct person_t*)student);\n}\n// Behavior functions\nvoid student_get_student_number(student_t* student,\n                                char* buffer) {\n  strcpy(buffer, student->student_number);\n}\nunsigned int student_get_passed_credits(student_t* student) {\n  return student->passed_credits;\n}\n```", "```cpp\n#include <stdio.h>\n#include <stdlib.h>\n#include \"ExtremeC_examples_chapter8_2_person.h\"\n#include \"ExtremeC_examples_chapter8_2_student.h\"\nint main(int argc, char** argv) {\n  // Create and construct the student object\n  struct student_t* student = student_new();\n  student_ctor(student, \"John\", \"Doe\",\n          1987, \"TA5667\", 134);\n  // Now, we use person's behavior functions to\n  // read person's attributes from the student object\n  char buffer[32];\n  // Upcasting to a pointer of parent type\n struct person_t* person_ptr = (struct person_t*)student;\n  person_get_first_name(person_ptr, buffer);\n  printf(\"First name: %s\\n\", buffer);\n  person_get_last_name(person_ptr, buffer);\n  printf(\"Last name: %s\\n\", buffer);\n  printf(\"Birth year: %d\\n\", person_get_birth_year(person_ptr)); \n  // Now, we read the attributes specific to the student object.\n  student_get_student_number(student, buffer);\n  printf(\"Student number: %s\\n\", buffer);\n  printf(\"Passed credits: %d\\n\",\n          student_get_passed_credits(student));\n  // Destruct and free the student object\n  student_dtor(student);\n  free(student);\n  return 0;\n}\n```", "```cpp\n$ gcc -c ExtremeC_examples_chapter8_2_person.c -o person.o\n$ gcc -c ExtremeC_examples_chapter8_2_student.c -o student.o\n$ gcc -c ExtremeC_examples_chapter8_2_main.c -o main.o\n$ gcc person.o student.o main.o -o ex8_2.out\n$ ./ex8_2.out\nFirst name: John\nLast name: Doe\nBirth year: 1987\nStudent number: TA5667\nPassed credits: 134\n$\n```", "```cpp\n#ifndef EXTREME_C_EXAMPLES_CHAPTER_8_3_STUDENT_H\n#define EXTREME_C_EXAMPLES_CHAPTER_8_3_STUDENT_H\n//Forward declaration\nstruct student_t;\n// Memory allocator\nstruct student_t* student_new();\n// Constructor\nvoid student_ctor(struct student_t*,\n                  const char*  /* first name */,\n                  const char*  /* last name */,\n                  unsigned int /* birth year */,\n                  const char*  /* student number */,\n                  unsigned int /* passed credits */);\n// Destructor\nvoid student_dtor(struct student_t*);\n// Behavior functions\nvoid student_get_first_name(struct student_t*, char*);\nvoid student_get_last_name(struct student_t*, char*);\nunsigned int student_get_birth_year(struct student_t*);\nvoid student_get_student_number(struct student_t*, char*);\nunsigned int student_get_passed_credits(struct student_t*);\n#endif\n```", "```cpp\n#include <stdlib.h>\n#include <string.h>\n// Private definition\ntypedef struct {\n  char first_name[32];\n  char last_name[32];\n  unsigned int birth_year;\n} person_t;\n// Memory allocator\nperson_t* person_new() {\n  return (person_t*)malloc(sizeof(person_t));\n}\n// Constructor\nvoid person_ctor(person_t* person,\n                 const char* first_name,\n                 const char* last_name,\n                 unsigned int birth_year) {\n  strcpy(person->first_name, first_name);\n  strcpy(person->last_name, last_name);\n  person->birth_year = birth_year;\n}\n// Destructor\nvoid person_dtor(person_t* person) {\n  // Nothing to do\n}\n// Behavior functions\nvoid person_get_first_name(person_t* person, char* buffer) {\n  strcpy(buffer, person->first_name);\n}\nvoid person_get_last_name(person_t* person, char* buffer) {\n  strcpy(buffer, person->last_name);\n}\nunsigned int person_get_birth_year(person_t* person) {\n  return person->birth_year;\n}\n```", "```cpp\n#include <stdlib.h>\n#include <string.h>\n// Public interface of the person class\n#include \"ExtremeC_examples_chapter8_3_person.h\"\n//Forward declaration\ntypedef struct {\n  char* student_number;\n  unsigned int passed_credits;\n  // We have to have a pointer here since the type\n  // person_t is incomplete.\n struct person_t* person;\n} student_t;\n// Memory allocator\nstudent_t* student_new() {\n  return (student_t*)malloc(sizeof(student_t));\n}\n// Constructor\nvoid student_ctor(student_t* student,\n                  const char* first_name,\n                  const char* last_name,\n                  unsigned int birth_year,\n                  const char* student_number,\n                  unsigned int passed_credits) {\n  // Allocate memory for the parent object\n student->person = person_new();\n person_ctor(student->person, first_name,\n last_name, birth_year);\n  student->student_number = (char*)malloc(16 * sizeof(char));\n  strcpy(student->student_number, student_number);\n  student->passed_credits = passed_credits;\n}\n// Destructor\nvoid student_dtor(student_t* student) {\n  // We need to destruct the child object first.\n  free(student->student_number);\n  // Then, we need to call the destructor function\n  // of the parent class\n person_dtor(student->person);\n  // And we need to free the parent object's allocated memory\n free(student->person);\n}\n// Behavior functions\nvoid student_get_first_name(student_t* student, char* buffer) {\n  // We have to use person's behavior function\n  person_get_first_name(student->person, buffer);\n}\nvoid student_get_last_name(student_t* student, char* buffer) {\n  // We have to use person's behavior function\n  person_get_last_name(student->person, buffer);\n}\nunsigned int student_get_birth_year(student_t* student) {\n  // We have to use person's behavior function\n  return person_get_birth_year(student->person);\n}\nvoid student_get_student_number(student_t* student,\n                                char* buffer) {\n  strcpy(buffer, student->student_number);\n}\nunsigned int student_get_passed_credits(student_t* student) {\n  return student->passed_credits;\n}\n```", "```cpp\n#include <stdio.h>\n#include <stdlib.h>\n#include \"ExtremeC_examples_chapter8_3_student.h\"\nint main(int argc, char** argv) {\n  // Create and construct the student object\n  struct student_t* student = student_new();\n  student_ctor(student, \"John\", \"Doe\",\n          1987, \"TA5667\", 134);\n  // We have to use student's behavior functions because the\n  // student pointer is not a person pointer and we cannot\n  // access to private parent pointer in the student object.\n  char buffer[32];\n  student_get_first_name(student, buffer);\n  printf(\"First name: %s\\n\", buffer);\n  student_get_last_name(student, buffer);\n  printf(\"Last name: %s\\n\", buffer);\n  printf(\"Birth year: %d\\n\", student_get_birth_year(student));\n  student_get_student_number(student, buffer);\n  printf(\"Student number: %s\\n\", buffer);\n  printf(\"Passed credits: %d\\n\",\n          student_get_passed_credits(student));\n  // Destruct and free the student object\n  student_dtor(student);\n  free(student);\n  return 0;\n}\n```", "```cpp\n$ gcc -c ExtremeC_examples_chapter8_3_person.c -o person.o\n$ gcc -c ExtremeC_examples_chapter8_3_student.c -o student.o\n$ gcc -c ExtremeC_examples_chapter8_3_main.c -o main.o\n$ gcc person.o student.o main.o -o ex8_3.out\n$ ./ex8_3.out\nFirst name: John\nLast name: Doe\nBirth year: 1987\nStudent number: TA5667\nPassed credits: 134\n$\n```", "```cpp\nstruct animal_t* animal = animal_malloc();\nanimal_ctor(animal);\nstruct cat_t* cat = cat_malloc();\ncat_ctor(cat);\nstruct duck_t* duck = duck_malloc();\nduck_ctor(duck);\n```", "```cpp\n// This is not a polymorphism\nanimal_sound(animal);\ncat_sound(cat);\nduck_sound(duck);\n```", "```cpp\nAnimal: Beeeep\nCat: Meow\nDuck: Quack\n```", "```cpp\n// This is a polymorphism\nanimal_sound(animal);\nanimal_sound((struct animal_t*)cat);\nanimal_sound((struct animal_t*)duck);\n```", "```cpp\nAnimal: Beeeep\nCat: Meow\nDuck: Quake\n```", "```cpp\ntypedef struct {\n  ...} animal_t;\ntypedef struct {\n  animal_t animal;\n  ...\n} cat_t;\ntypedef struct {\n  animal_t animal;\n  ...\n} duck_t;\n```", "```cpp\nvoid animal_sound(animal_t* ptr) {\n  printf(\"Animal: Beeeep\");\n}\n// This could be a polymorphism, but it is NOT!\nanimal_sound(animal);\nanimal_sound((struct animal_t*)cat);\nanimal_sound((struct animal_t*)duck);\n```", "```cpp\nAnimal: Beeeep\nAnimal: Beeeep\nAnimal: Beeeep\n```", "```cpp\n#ifndef EXTREME_C_EXAMPLES_CHAPTER_8_4_ANIMAL_H\n#define EXTREME_C_EXAMPLES_CHAPTER_8_4_ANIMAL_H\n// Forward declaration\nstruct animal_t;\n// Memory allocator\nstruct animal_t* animal_new();\n// Constructor\nvoid animal_ctor(struct animal_t*);\n// Destructor\nvoid animal_dtor(struct animal_t*);\n// Behavior functions\nvoid animal_get_name(struct animal_t*, char*);\nvoid animal_sound(struct animal_t*);\n#endif\n```", "```cpp\n#ifndef EXTREME_C_EXAMPLES_CHAPTER_8_4_ANIMAL_P_H\n#define EXTREME_C_EXAMPLES_CHAPTER_8_4_ANIMAL_P_H\n// The function pointer type needed to point to\n// different morphs of animal_sound\ntypedef void (*sound_func_t)(void*);\n// Forward declaration\ntypedef struct {\n  char* name;\n  // This member is a pointer to the function which\n  // performs the actual sound behavior\n sound_func_t sound_func;\n} animal_t;\n#endif\n```", "```cpp\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include \"ExtremeC_examples_chapter8_4_animal_p.h\"\n// Default definition of the animal_sound at the parent level\nvoid __animal_sound(void* this_ptr) {\n animal_t* animal = (animal_t*)this_ptr;\n printf(\"%s: Beeeep\\n\", animal->name);\n}\n// Memory allocator\nanimal_t* animal_new() {\n  return (animal_t*)malloc(sizeof(animal_t));\n}\n// Constructor\nvoid animal_ctor(animal_t* animal) {\n  animal->name = (char*)malloc(10 * sizeof(char));\n  strcpy(animal->name, \"Animal\");\n  // Set the function pointer to point to the default definition\n animal->sound_func = __animal_sound;\n}\n// Destructor\nvoid animal_dtor(animal_t* animal) {\n  free(animal->name);\n}\n// Behavior functions\nvoid animal_get_name(animal_t* animal, char* buffer) {\n  strcpy(buffer, animal->name);\n}\nvoid animal_sound(animal_t* animal) {\n  // Call the function which is pointed by the function pointer.\n animal->sound_func(animal);\n}\n```", "```cpp\n#ifndef EXTREME_C_EXAMPLES_CHAPTER_8_4_CAT_H\n#define EXTREME_C_EXAMPLES_CHAPTER_8_4_CAT_H\n// Forward declaration\nstruct cat_t;\n// Memory allocator\nstruct cat_t* cat_new();\n// Constructor\nvoid cat_ctor(struct cat_t*);\n// Destructor\nvoid cat_dtor(struct cat_t*);\n// All behavior functions are inherited from the animal class.\n#endif\n```", "```cpp\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include \"ExtremeC_examples_chapter8_4_animal.h\"\n#include \"ExtremeC_examples_chapter8_4_animal_p.h\"\ntypedef struct {\n  animal_t animal;\n} cat_t;\n// Define a new behavior for the cat's sound\nvoid __cat_sound(void* ptr) {\n animal_t* animal = (animal_t*)ptr;\n printf(\"%s: Meow\\n\", animal->name);\n}\n// Memory allocator\ncat_t* cat_new() {\n  return (cat_t*)malloc(sizeof(cat_t));\n}\n// Constructor\nvoid cat_ctor(cat_t* cat) {\n  animal_ctor((struct animal_t*)cat);\n  strcpy(cat->animal.name, \"Cat\");\n  // Point to the new behavior function. Overriding\n  // is actually happening here.\n cat->animal.sound_func = __cat_sound;\n}\n// Destructor\nvoid cat_dtor(cat_t* cat) {\n  animal_dtor((struct animal_t*)cat);\n}\n```", "```cpp\n#ifndef EXTREME_C_EXAMPLES_CHAPTER_8_4_DUCK_H\n#define EXTREME_C_EXAMPLES_CHAPTER_8_4_DUCK_H\n// Forward declaration\nstruct duck_t;\n// Memory allocator\nstruct duck_t* duck_new();\n// Constructor\nvoid duck_ctor(struct duck_t*);\n// Destructor\nvoid duck_dtor(struct duck_t*);\n// All behavior functions are inherited from the animal class.\n#endif\n```", "```cpp\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include \"ExtremeC_examples_chapter8_4_animal.h\"\n#include \"ExtremeC_examples_chapter8_4_animal_p.h\"\ntypedef struct {\n  animal_t animal;\n} duck_t;\n// Define a new behavior for the duck's sound\nvoid __duck_sound(void* ptr) {\n animal_t* animal = (animal_t*)ptr;\n printf(\"%s: Quacks\\n\", animal->name);\n}\n// Memory allocator\nduck_t* duck_new() {\n  return (duck_t*)malloc(sizeof(duck_t));\n}\n// Constructor\nvoid duck_ctor(duck_t* duck) {\n  animal_ctor((struct animal_t*)duck);\n  strcpy(duck->animal.name, \"Duck\");\n  // Point to the new behavior function. Overriding\n  // is actually happening here.\n duck->animal.sound_func = __duck_sound;\n}\n// Destructor\nvoid duck_dtor(duck_t* duck) {\n  animal_dtor((struct animal_t*)duck);\n}\n```", "```cpp\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n// Only public interfaces\n#include \"ExtremeC_examples_chapter8_4_animal.h\"\n#include \"ExtremeC_examples_chapter8_4_cat.h\"\n#include \"ExtremeC_examples_chapter8_4_duck.h\"\nint main(int argc, char** argv) {\n  struct animal_t* animal = animal_new();\n  struct cat_t* cat = cat_new();\n  struct duck_t* duck = duck_new();\n  animal_ctor(animal);\n  cat_ctor(cat);\n  duck_ctor(duck);\n animal_sound(animal);\n animal_sound((struct animal_t*)cat);\n animal_sound((struct animal_t*)duck);\n  animal_dtor(animal);\n  cat_dtor(cat);\n  duck_dtor(duck);\n  free(duck);\n  free(cat);\n  free(animal);\n  return 0;\n}\n```", "```cpp\n$ gcc -c ExtremeC_examples_chapter8_4_animal.c -o animal.o\n$ gcc -c ExtremeC_examples_chapter8_4_cat.c -o cat.o\n$ gcc -c ExtremeC_examples_chapter8_4_duck.c -o duck.o\n$ gcc -c ExtremeC_examples_chapter8_4_main.c -o main.o\n$ gcc animal.o cat.o duck.o main.o -o ex8_4.out\n$ ./ex8_4.out\nAnimal: Beeeep\nCat: Meow\nDuck: Quake\n$\n```"]