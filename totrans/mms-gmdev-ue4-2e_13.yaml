- en: Virtual Reality and Augmented Reality in UE4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Two of the newest and most exciting additions to UE4 are its Virtual Reality
    (VR) and **Augmented Reality** (**AR**) integrations. While VR has been around
    for some time, AR was first fully functioning without any need for merging a custom
    branch or using experimental components mid-summer 2018 in version 4.20\. While
    there is a huge world of both to explore, we''ll keep to the focus of this book
    of building awareness and confidence in Unreal''s systems in this chapter by building
    projects for both and working through some real world additions to them to learn
    what is involved. So get ready to explore the newest and arguably coolest new
    platforms in the Unreal world! Our final chapter here covers:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating and modifying a VR project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparation for and deployment to an Android GearVR headset
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding new motion-based controls to the project
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and modifying an AR project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparation for and deployment to an Android phone
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Porting our projectiles from the main project into our new AR game!
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To keep focus on the tech of these new platforms, they will both be created
    as new standalone projects as noted above. While it is entirely possible to port
    our existing Mastering project to support VR and even AR, as noted numerous times
    in this book: major decisions like that are best made at the start of a project
    so they can be initially proven out, and then maintained throughout development.
    That said, in the AR project, we''ll port over some of our work from the previous
    project to get a feel for how that goes also, giving a good test of how portable
    that work was when created. The two respective projects are in these branches
    in GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: 'VR:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Mastering-Game-Development-with-Unreal-Engine-4-Second-Edition/tree/Chapter-13-VR](https://github.com/PacktPublishing/Mastering-Game-Development-with-Unreal-Engine-4-Second-Edition/tree/Chapter-13-VR)'
  prefs: []
  type: TYPE_NORMAL
- en: 'AR:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Mastering-Game-Development-with-Unreal-Engine-4-Second-Edition/tree/Chapter-13-AR](https://github.com/PacktPublishing/Mastering-Game-Development-with-Unreal-Engine-4-Second-Edition/tree/Chapter-13-AR)'
  prefs: []
  type: TYPE_NORMAL
- en: In addition, for the AR component, given the GearVR platform used, Google's
    ARCore app was also installed on my Galaxy Note 8 for Unreal integration without
    the previous large headache installing custom Google APIs. In this area (AR),
    4.20 is a dream compared to previous integrations, both for iOS and especially
    Android, so it is highly recommended (though not specifically required) to update
    to at least 4.20 for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Engine version used: 4.20.2.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: for those using Mac and iOS platforms, while I don''t specifically cover
    those here, these are mainly blueprint project templates and the process will
    not vary too much, so feel free to go through the blueprint code & code-migration
    and other points in this chapter, while substituting in "Finder" for "Explorer"
    and "XCode" for "Visual Studio" and "iPad/iPhone" for "Android," the only parts
    that might be most difficult were already covered in [Chapter 10](5fc16cd9-a5d9-4181-8373-0ad5775cc688.xhtml), *Packaging
    the Game (PC, Mobile).*'
  prefs: []
  type: TYPE_NORMAL
- en: Making a VR project and adding new controls
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: VR as I'm sure readers at this stage well know involves the user wearing a headset
    and the game or app presenting them with a 3D world they can explore immersed
    completely inside that view.
  prefs: []
  type: TYPE_NORMAL
- en: Making the initial VR project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For those who have been with me the whole journey of this book, there will
    be a bit of review from [Chapter 1](dfc11944-e8b6-45b1-8997-5f1a59d0f8ac.xhtml), *Making
    a C++ Project for a First-Person Shooter*. It shouldn''t be too much, though;
    but for those who wanted to skip straight to here, we won''t skip any major steps.
    So first launch the Engine without a project specified, as noted in `Chapter 1`
    this can be done from your engine install directory itself, or hopefully those
    here since that chapter already have a shortcut built for it. When the Unreal
    Project Browser comes up, click the New Project tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/63f49102-9d4a-4692-a4e2-3ac9c7e34a4c.png)'
  prefs: []
  type: TYPE_IMG
- en: And select the Blueprint tab's VR Project template, we'll set the content level
    to Mobile / Tablet, and remove Starter Content (though I generally recommend keeping
    this in for prototyping as it gives some fun objects to play with, but does take
    up a fair deal of extra space). Of course you're welcome to name it whatever you
    like, but to match GitHub's files, go with the above, MasteringVR. After clicking
    the create button, it should automatically open up in the editor and for several
    platforms (PS4-VR, Oculus Rift, etc., the "wired" headsets) it is ready to deploy
    and test immediately.
  prefs: []
  type: TYPE_NORMAL
- en: For those who have been through the whole book, you'll also know I generally
    prefer to work in C++ for speed and debugging purposes, however, these templates
    currently exist for only as Blueprint templates. Now, that said, it's easy enough
    to add a C++ class and start compiling the project yourself, as will be done in
    the AR project. *However*, do note that this adds considerable time to your build
    iterations. In my case, 5-10 minutes *per use* of the Launch button in the editor,
    as each time it will recompile and re-sign your `.apk`. For those looking closely
    at GitHub, you'll notice at one point I was going to add code to a pawn class
    in a .cpp, but after noticing this issue, reverted back to full blueprint. If
    you stick to blueprint only as we will for this VR section, that iteration time
    can be less than a minute (total!) so consider wisely before you commit to C++
    in projects like these where you are constantly having to deploy to hardware.
  prefs: []
  type: TYPE_NORMAL
- en: 'And keep in mind: the first time you build and deploy for a platform, it will
    need to compile all of the engine shaders and cook your content. After that first
    build, iteration times are as I describe above; but that first launch will be
    a bit slow and painful.'
  prefs: []
  type: TYPE_NORMAL
- en: Building and deploying for GearVR
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Even with the handy VR project template, there are still a number of steps to
    get things working on the GearVR platform for those following my lead here and
    using a Samsung Android device.
  prefs: []
  type: TYPE_NORMAL
- en: 'I''m a big fan of this platform for a number of reasons. First: no wires! The
    wired headsets are more powerful and bring some extra capabilities with them,
    but also that feeling you''re tethered to a PC or PS4 all the time which I find
    distracting. Second: accessibility. While the store and platform are Samsung''s
    and not Google''s like other Android apps, a huge number of people own the S7
    and on up line which all perform in my opinion very well in GearVR apps. Hopefully
    it catches on and maybe even Samsung and Google integrate their stores at some
    point; but for any with the option of trying these projects on such devices, I
    have had very good results.'
  prefs: []
  type: TYPE_NORMAL
- en: 'So first, for any Android-based app, you need to go to Project Settings ->
    Platforms -> Android and click the Configure Now button at the top:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4a3b46ba-0a30-49cc-9eea-9ff7a656caa2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After that, just below in its settings we need a few more things set:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dd395905-d445-40c3-a046-c1cfd78657c0.png)'
  prefs: []
  type: TYPE_IMG
- en: Namely we need to set the SDK versions to 19 and Epic recommends setting the
    KitKat+ full screen immersive settings to true (though I didn't find this necessary
    in testing).
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, scrolling down in the same section to Advanced APK Settings, we need
    one more checkbox checked:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fd1ed507-5001-43eb-9fec-bf18b1b2bbe9.png)'
  prefs: []
  type: TYPE_IMG
- en: Configure the AndroidManifest for deployment to Oculus Mobile is strictly needed,
    and for those extra observant, I went ahead and turned on OpenGL ES3.1 as any
    device that can use a GearVR headset (Galaxy S6+) will support it anyway and there's
    no reason to limit your shader options nor force yourself to recompile all those
    shaders later.
  prefs: []
  type: TYPE_NORMAL
- en: Note also, I tried enabling Vulkan as I am a fan of its hardware acceleration
    platform, but got a crash on startup with this basic project, so, at least for
    the moment, save yourself some trouble and leave it unchecked.
  prefs: []
  type: TYPE_NORMAL
- en: 'And two final minor notes. First, if you are going to launch from the editor
    as I typically do for iterating, set your startup map to the MotionControllerMap
    as here, not the StartupMap default:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e85af292-3fa8-442e-8ae3-a7ed5631d058.png)'
  prefs: []
  type: TYPE_IMG
- en: For whatever reason, the GearVR controller doesn't activate in the StartupMap,
    but works as we desire in the MotionControllerMap just fine (which is the default
    game map anyway if you make a standalone .apk and install and run that). Note,
    you may have to click the tumbstick a couple of times before things show up properly,
    even here, it seems.
  prefs: []
  type: TYPE_NORMAL
- en: 'And lastly, you''ll need to follow these directions to get a signing key from
    Oculus, but it''s a much simpler process than most of those in the building and
    deploying chapter we had earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://dashboard.oculus.com/tools/osig-generator/](https://dashboard.oculus.com/tools/osig-generator/)'
  prefs: []
  type: TYPE_NORMAL
- en: If you don't have that key in the folder it specifies, your app will crash on
    startup for being unsigned.
  prefs: []
  type: TYPE_NORMAL
- en: Now we can quickly make changes and view those in less than a minute on our
    GearVR headset!
  prefs: []
  type: TYPE_NORMAL
- en: For those wanting to use the HMD (Head Mounted Display) pad itself, there's
    a great guide from Epic in Further Reading at the end.
  prefs: []
  type: TYPE_NORMAL
- en: Adding HMD controls
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we're playing in the level and can teleport around with the thumbstick
    and if you can get close-enough to the blue boxes you can grab them and throw
    them using the trigger on the controller, it might be nice to move around in the
    level a bit without having to use the teleport exclusively. One way we could even
    free up the entire thumbstick for other uses is to make motion based on your head's
    orientation, using the HMD (Head Mounted Display) orientation itself as a means
    of conveying input.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, this means the player can''t really look up and down anymore freely
    without moving; but we''ll put in a fix for that too. Let''s get the player moving
    around via blueprint first using some simple logic based on the camera orientation.
    To do this, we''ll do the work in the MotionControllerPawn (found in Content/VirtualRealityBP/Blueprints
    in the content browser). For this to actually work, however, we''ll need to convert
    the pawn to a character. So as we''ve done in the past, open the blueprint, go
    to File | Reparent Blueprint, and pick Character. Now, the default character has
    quite a tall capsule, and our previous pawn expected its origin to be on the ground,
    so let''s just make its capsule small, doesn''t have to be too tiny for this to
    all work ok, 34cm, its original radius, seems fine for the height too:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0550ef53-2091-4404-8df9-4c7af1aa6f90.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next we''ll add a new blueprint function and drag a pin off of the sequence
    node in event tick to call it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bdc12e7a-c3bb-47dc-887d-16d23d96ac22.png)'
  prefs: []
  type: TYPE_IMG
- en: In that function, we'll add some simple logic to move the player based on camera
    orientation.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2b786955-108c-4449-b726-632e8701dfa9.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see at the start, the portion I mentioned earlier where we can disable
    the movement is done whenever any controller is trying to grab or teleport (and
    also we stop if the tilt is less than 10 degrees either way). This way the player
    can fully look around while doing those actions, but when not, tilting forward
    and back will move the player forward & backward, while turning of course changes
    direction still. If desired, you could easily add strafing left and right by using
    the same logic with the roll of the camera, and a sideways movement vector.
  prefs: []
  type: TYPE_NORMAL
- en: With this addition, I actually find grabbing those boxes and throwing them around
    much easier than just by teleporting!
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8d95f99e-2d76-47ab-9838-3df06c11a822.png)'
  prefs: []
  type: TYPE_IMG
- en: In case you're curious about the screenshot above (which was from device running
    VR), I simply added an Execute Console Command node to blueprint that was triggered
    when I pulled the trigger on the controller, and it executed "HighResShot 1920x1280"
    (but of course you can make that resolution anything you want) and then retrieved
    them from the phone when it was plugged in from: `\Phone\UE4Game\MasteringVR\Saved\Screenshots\Android`.
  prefs: []
  type: TYPE_NORMAL
- en: Making an AR project and porting our projectiles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AR is a field that has gained huge popularity over the past year, so it is great
    to see UE4 finally have a very solid and simple integration path and project template.
    For those new to it, Augmented Reality is rather different from VR as it does
    not take the user out of the real world and into a separate one, but rather integrates
    with the real world through a device which is either worn like the Microsoft's
    HoloLens, or the newly announced Magic Leap goggles, or held such as many current
    smartphones and tablets. AR takes real-world surroundings and integrates them
    to the app or game so the user can combine real world objects with in-game interactions.
    We'll get this started with its new project and then pull some code and assets
    from previous work into this branch to show that process now.
  prefs: []
  type: TYPE_NORMAL
- en: Making the initial AR project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So much like in our first chapter and directly above in the VR section, this
    will be a bit of review; but since it's a project starting from scratch, it's
    always best to go through each step (so be ready for the Unreal Project Browser
    one more time!) So launching the engine without a project once more, gets us to
    the browser, where under the New Project and Blueprint tabs, you'll now find Handheld
    AR as a template, select that, we set the content to Mobile / Tablet again and
    no Starter Content (unless you want it of course).
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1421e8fe-5a96-4825-a500-1ba1e2585a6e.png)'
  prefs: []
  type: TYPE_IMG
- en: And as usual, this should now be opened up in your editor so we can begin work
    right away!
  prefs: []
  type: TYPE_NORMAL
- en: Android deployment specifics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There was much less to do here than in the VR section, but the same critical
    start has to be made, configuring for Android:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d4a7eb91-088a-40b2-be92-98aa8a6b70dd.png)'
  prefs: []
  type: TYPE_IMG
- en: Like in VR or again, any Android project, be sure to head to Project Settings
    | Platforms | Android, and click the Configure Now button. As you can see below
    that in this template, it has already done other work we had to do for VR like
    setting APK versions for you.
  prefs: []
  type: TYPE_NORMAL
- en: In truth, this was all that was needed to get the basic AR game running on my
    device, from there you can tap to add some shapes to the world and use the debug
    menus to get a feel for what work UE4 AR is doing and visualize how well it is
    doing it.
  prefs: []
  type: TYPE_NORMAL
- en: Porting our projectiles and firing them in AR
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we''ll make things more interesting by pulling our projectiles from the
    earlier project in to this AR demo in all their glory. First, though, we''ll need
    to add the source files to the proper folder and then generate project files.
    To do this, I''ve made two copies of the project on my local hard drive (which
    makes GitHub a bit tricky to handle as they''re both branches in the same repository);
    but to keep things simple, I''ll work locally with a copy of this branch (simply
    cut & paste to a new folder):'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Mastering-Game-Development-with-Unreal-Engine-4-Second-Edition/tree/Chapter-13-AR](https://github.com/PacktPublishing/Mastering-Game-Development-with-Unreal-Engine-4-Second-Edition/tree/Chapter-13-AR)'
  prefs: []
  type: TYPE_NORMAL
- en: 'And have `chapter 12`''s branch here in my normal GitHub local drive location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Mastering-Game-Development-with-Unreal-Engine-4-Second-Edition/tree/Chapter-12](https://github.com/PacktPublishing/Mastering-Game-Development-with-Unreal-Engine-4-Second-Edition/tree/Chapter-12)'
  prefs: []
  type: TYPE_NORMAL
- en: This way I can cherry-pick items from `chapter 12` into the AR project. In the
    end, it's a bit complicated, but I'll simply delete my local `chapter 12` files
    and folders when done, *except* the `.git` hidden folder for git's information,
    then move (or rename) the local AR to that location and switch branches back to
    the AR project and check in those specific changes. Git can be tricky in cases
    like this, but right now we're just trying to have some fun in an AR environment
    and see what we can do, so let's get to it!
  prefs: []
  type: TYPE_NORMAL
- en: Copying the source files as noted was the first step, just simply take `chapter
    12`'s `MasteringProjectile.h` and `.cpp` files, and move them in to the `MasteringAR/Source`
    folder. Once that's done, we can right click on the `MasteringAR.uproj` file and
    generate project files with our UE4 version, or use a batch file as we have in
    the past to make sure we have VS 2017 files. Now we can build and run the editor
    as normal and deploy the project as well. Keep in mind, though, as a C++ project
    now, iteration times will increase significantly between runs on the device as
    it will compile code each time it deploys; but that's what we need to do here
    to get our projectiles firing with all their code of course we built over previous
    chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'In full disclosure: I actually had to, from the UE4 AR project here, name it
    Mastering.uproject, add a new C++ class of MasteringProjectile (based on the Actor
    class), and then copy-paste the code from the main project into this one for the
    migrated assets to find their parent class properly. In the past, the copy-paste
    file-version above has worked fine, but in case anyone has trouble, try this one
    as a last resort as I did.'
  prefs: []
  type: TYPE_NORMAL
- en: A bit unfortunately, we actually need to launch the `chapter 12` project to
    migrate the assets from there, to our AR project. So open it in the editor and
    we'll browse to the projectiles section of our blueprints and right click on one
    of them. You'll see this pop-up and under Asset Actions is Migrate.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8d521690-14e9-4354-a715-93f27d73fac0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The next thing that will pop-up is a list, basically, of all the dependencies
    that Unreal is telling you it will copy, just click ok:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b1d0f31d-1318-4e97-aa41-7fabef4fb792.png)'
  prefs: []
  type: TYPE_IMG
- en: Now we just need to point to our Content folder in the AR project's Content
    folder, and those projectiles and all their asset dependencies (the special FX
    we did in [Chapter 12](3555f7d2-c20d-48b4-97ba-748a9bd16a13.xhtml), *In-Scene
    Video and Visual Effects*, and so on, will all be brought with it). Migrating
    assets like this is a huge time saver between projects that share them, so I'm
    glad to finally get a chance to share its use here.
  prefs: []
  type: TYPE_NORMAL
- en: 'With that done, we can get back to the AR project in the editor once more,
    make an array of our projectiles, and spawn those instead of the test geometry
    the project starts with:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9b382b44-c29e-4ff7-b584-245a71c0f466.png)'
  prefs: []
  type: TYPE_IMG
- en: And that's it, now we have our core project's projectiles spawning in the AR
    world with special FX and all!
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c31bfa0f-55f0-4ed7-b936-a4556f943032.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Through this journey, we've gone from the most basic starting point in UE4 to
    building and modifying some of its latest and greatest technologies. There's nothing
    quite as satisfying as seeing your work on your target platform and knowing it's
    only a matter of time before the rest of the world gets to share in it too. VR
    and AR are exciting new areas and UE4 is a leader in their development we are
    lucky to have. Having the know-how to get these technologies up and running and
    the myriad of new projects and games they bring to possible makes this a very
    exciting time, and can allow us to feel we're truly mastering UE4!
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What advantages and disadvantages does including starting content in a new project
    entail?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When making a VR or AR project, what is the primary reason to keep it blueprint
    only as long as possible?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What step is necessary to getting every Android project to build and deploy?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are some advantages and disadvantages to the GearVR platform over the current
    PC/Console versions?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When adding movement via the HMD, what problems could it cause a user? How was
    it mitigated?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which basic Android settings for the AR template are already set that we had
    to set for the VR template?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When converting from blueprint only to a C++ project, what two steps are taken?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How are assets migrated from one project to another with full dependencies?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'GearVR HMD touchpad in UE4:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.unrealengine.com/en-us/Platforms/GearVR/HowTo/HMDTouchPad](https://docs.unrealengine.com/en-us/Platforms/GearVR/HowTo/HMDTouchPad)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Google''s supported Android AR devices:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developers.google.com/ar/discover/supported-devices](https://developers.google.com/ar/discover/supported-devices)'
  prefs: []
  type: TYPE_NORMAL
