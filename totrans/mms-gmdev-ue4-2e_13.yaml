- en: Virtual Reality and Augmented Reality in UE4
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: UE4中的虚拟现实和增强现实
- en: Introduction
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: 'Two of the newest and most exciting additions to UE4 are its Virtual Reality
    (VR) and **Augmented Reality** (**AR**) integrations. While VR has been around
    for some time, AR was first fully functioning without any need for merging a custom
    branch or using experimental components mid-summer 2018 in version 4.20\. While
    there is a huge world of both to explore, we''ll keep to the focus of this book
    of building awareness and confidence in Unreal''s systems in this chapter by building
    projects for both and working through some real world additions to them to learn
    what is involved. So get ready to explore the newest and arguably coolest new
    platforms in the Unreal world! Our final chapter here covers:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: UE4中最新且最激动人心的两个新增功能是其虚拟现实（VR）和**增强现实**（**AR**）集成。虽然VR已经存在了一段时间，但AR在2018年夏季4.20版本中首次完全功能化，无需合并自定义分支或使用实验性组件。尽管两者都有巨大的世界可以探索，但我们将专注于本书的主题，通过构建项目并对其中的实际应用进行一些添加，来建立对Unreal系统意识和信心的构建。所以，准备好探索Unreal世界中最新且可能是最酷的新平台！我们这里的最后一章涵盖了：
- en: Creating and modifying a VR project
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和修改VR项目
- en: Preparation for and deployment to an Android GearVR headset
  id: totrans-4
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备部署到Android GearVR头戴式设备
- en: Adding new motion-based controls to the project
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向项目中添加基于运动的新控制功能
- en: Creating and modifying an AR project
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和修改AR项目
- en: Preparation for and deployment to an Android phone
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备部署到Android手机
- en: Porting our projectiles from the main project into our new AR game!
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将我们的弹丸从主项目移植到我们的新AR游戏中！
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To keep focus on the tech of these new platforms, they will both be created
    as new standalone projects as noted above. While it is entirely possible to port
    our existing Mastering project to support VR and even AR, as noted numerous times
    in this book: major decisions like that are best made at the start of a project
    so they can be initially proven out, and then maintained throughout development.
    That said, in the AR project, we''ll port over some of our work from the previous
    project to get a feel for how that goes also, giving a good test of how portable
    that work was when created. The two respective projects are in these branches
    in GitHub:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了专注于这些新平台的技术，它们都将创建为新的独立项目，如上所述。虽然将现有的Mastering项目移植以支持VR甚至AR是完全可能的，正如本书多次提到的：像这样的重大决策最好在项目开始时做出，以便最初进行验证，并在整个开发过程中维护。话虽如此，在AR项目中，我们将从先前的项目中移植一些工作，以了解这个过程，同时也对创建的工作的可移植性进行了一次良好的测试。这两个相应的项目位于GitHub的以下分支中：
- en: 'VR:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: VR：
- en: '[https://github.com/PacktPublishing/Mastering-Game-Development-with-Unreal-Engine-4-Second-Edition/tree/Chapter-13-VR](https://github.com/PacktPublishing/Mastering-Game-Development-with-Unreal-Engine-4-Second-Edition/tree/Chapter-13-VR)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Mastering-Game-Development-with-Unreal-Engine-4-Second-Edition/tree/Chapter-13-VR](https://github.com/PacktPublishing/Mastering-Game-Development-with-Unreal-Engine-4-Second-Edition/tree/Chapter-13-VR)'
- en: 'AR:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: AR：
- en: '[https://github.com/PacktPublishing/Mastering-Game-Development-with-Unreal-Engine-4-Second-Edition/tree/Chapter-13-AR](https://github.com/PacktPublishing/Mastering-Game-Development-with-Unreal-Engine-4-Second-Edition/tree/Chapter-13-AR)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Mastering-Game-Development-with-Unreal-Engine-4-Second-Edition/tree/Chapter-13-AR](https://github.com/PacktPublishing/Mastering-Game-Development-with-Unreal-Engine-4-Second-Edition/tree/Chapter-13-AR)'
- en: In addition, for the AR component, given the GearVR platform used, Google's
    ARCore app was also installed on my Galaxy Note 8 for Unreal integration without
    the previous large headache installing custom Google APIs. In this area (AR),
    4.20 is a dream compared to previous integrations, both for iOS and especially
    Android, so it is highly recommended (though not specifically required) to update
    to at least 4.20 for this chapter.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，对于AR组件，鉴于使用的GearVR平台，还在我的Galaxy Note 8上安装了Google的ARCore应用，以便在不安装自定义Google
    API的情况下进行Unreal集成，避免了之前安装时的巨大头痛。在这个领域（AR），4.20与之前的集成相比是一个梦想，尤其是在iOS和Android上，因此强烈建议（尽管不是具体要求）至少更新到4.20以适应本章内容。
- en: 'Engine version used: 4.20.2.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 使用的引擎版本：4.20.2。
- en: 'Note: for those using Mac and iOS platforms, while I don''t specifically cover
    those here, these are mainly blueprint project templates and the process will
    not vary too much, so feel free to go through the blueprint code & code-migration
    and other points in this chapter, while substituting in "Finder" for "Explorer"
    and "XCode" for "Visual Studio" and "iPad/iPhone" for "Android," the only parts
    that might be most difficult were already covered in [Chapter 10](5fc16cd9-a5d9-4181-8373-0ad5775cc688.xhtml), *Packaging
    the Game (PC, Mobile).*'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：对于使用Mac和iOS平台的人来说，虽然在这里我没有特别涵盖这些平台，但这些主要是蓝图项目模板，过程不会有太大的变化，所以请随意浏览本章中的蓝图代码、代码迁移以及其他要点，同时将“Finder”替换为“资源管理器”，“XCode”替换为“Visual
    Studio”，“iPad/iPhone”替换为“Android”。唯一可能最困难的部分已经在第10章中介绍过了，即*打包游戏（PC、移动设备）。*
- en: Making a VR project and adding new controls
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 制作VR项目并添加新控制
- en: VR as I'm sure readers at this stage well know involves the user wearing a headset
    and the game or app presenting them with a 3D world they can explore immersed
    completely inside that view.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如我肯定读者们在这个阶段已经非常清楚的那样，VR涉及用户佩戴头戴式设备，游戏或应用向他们展示一个他们可以完全沉浸其中的3D世界。
- en: Making the initial VR project
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 制作初始VR项目
- en: 'For those who have been with me the whole journey of this book, there will
    be a bit of review from [Chapter 1](dfc11944-e8b6-45b1-8997-5f1a59d0f8ac.xhtml), *Making
    a C++ Project for a First-Person Shooter*. It shouldn''t be too much, though;
    but for those who wanted to skip straight to here, we won''t skip any major steps.
    So first launch the Engine without a project specified, as noted in `Chapter 1`
    this can be done from your engine install directory itself, or hopefully those
    here since that chapter already have a shortcut built for it. When the Unreal
    Project Browser comes up, click the New Project tab:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些一直陪伴我完成这本书全程的读者，我们将从第1章[制作一个第一人称射击游戏的C++项目](dfc11944-e8b6-45b1-8997-5f1a59d0f8ac.xhtml)进行简要回顾。不过，内容不会太多；但对于那些想直接跳到这里的读者，我们不会跳过任何主要步骤。所以首先启动引擎，不要指定项目，正如第1章中提到的，这可以从您的引擎安装目录本身完成，或者希望这里已经有了为它创建的快捷方式。当Unreal项目浏览器出现时，点击“新建项目”标签：
- en: '![](img/63f49102-9d4a-4692-a4e2-3ac9c7e34a4c.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/63f49102-9d4a-4692-a4e2-3ac9c7e34a4c.png)'
- en: And select the Blueprint tab's VR Project template, we'll set the content level
    to Mobile / Tablet, and remove Starter Content (though I generally recommend keeping
    this in for prototyping as it gives some fun objects to play with, but does take
    up a fair deal of extra space). Of course you're welcome to name it whatever you
    like, but to match GitHub's files, go with the above, MasteringVR. After clicking
    the create button, it should automatically open up in the editor and for several
    platforms (PS4-VR, Oculus Rift, etc., the "wired" headsets) it is ready to deploy
    and test immediately.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 然后选择蓝图标签页的“VR项目”模板，我们将内容级别设置为“移动/平板”，并移除“入门内容”（尽管我通常建议在原型设计时保留它，因为它提供了一些有趣的物体来玩耍，但确实会占用相当多的额外空间）。当然，你可以随意命名它，但为了与GitHub的文件匹配，使用上面的名称，MasteringVR。点击创建按钮后，它应该会自动在编辑器中打开，并且对于多个平台（PS4-VR、Oculus
    Rift等，“有线”头戴式设备）来说，它已经准备好部署和测试了。
- en: For those who have been through the whole book, you'll also know I generally
    prefer to work in C++ for speed and debugging purposes, however, these templates
    currently exist for only as Blueprint templates. Now, that said, it's easy enough
    to add a C++ class and start compiling the project yourself, as will be done in
    the AR project. *However*, do note that this adds considerable time to your build
    iterations. In my case, 5-10 minutes *per use* of the Launch button in the editor,
    as each time it will recompile and re-sign your `.apk`. For those looking closely
    at GitHub, you'll notice at one point I was going to add code to a pawn class
    in a .cpp, but after noticing this issue, reverted back to full blueprint. If
    you stick to blueprint only as we will for this VR section, that iteration time
    can be less than a minute (total!) so consider wisely before you commit to C++
    in projects like these where you are constantly having to deploy to hardware.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些已经通读全书的人来说，你们也会知道我通常更喜欢用 C++ 来工作，因为这样可以提高速度和便于调试，然而，这些模板目前仅作为蓝图模板存在。现在，话虽如此，添加一个
    C++ 类并开始自己编译项目还是相当容易的，就像在 AR 项目中将要做的那样。*但是*，请注意，这会增加你的构建迭代时间。以我的情况为例，每次在编辑器中使用启动按钮，大约需要
    5-10 分钟*每次使用*，因为每次它都会重新编译并重新签名你的 `.apk`。对于那些仔细查看 GitHub 的人来说，你们会注意到我一度打算在 .cpp
    文件中的一个 pawn 类中添加代码，但注意到这个问题后，又回到了完整的蓝图。如果你像我们在这个 VR 部分一样只坚持使用蓝图，那么迭代时间可以少于一分钟（总共！）所以在你决定在像这样的项目中使用
    C++ 之前，请三思而后行。
- en: 'And keep in mind: the first time you build and deploy for a platform, it will
    need to compile all of the engine shaders and cook your content. After that first
    build, iteration times are as I describe above; but that first launch will be
    a bit slow and painful.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住：第一次为平台构建和部署时，需要编译所有引擎着色器和烹饪你的内容。第一次构建之后，迭代时间将如我上面所述；但第一次启动将会慢一些，也比较痛苦。
- en: Building and deploying for GearVR
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为 GearVR 构建和部署
- en: Even with the handy VR project template, there are still a number of steps to
    get things working on the GearVR platform for those following my lead here and
    using a Samsung Android device.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 即使有了方便的 VR 项目模板，对于那些跟随我的脚步并使用三星 Android 设备的人来说，要在 GearVR 平台上运行仍然需要许多步骤。
- en: 'I''m a big fan of this platform for a number of reasons. First: no wires! The
    wired headsets are more powerful and bring some extra capabilities with them,
    but also that feeling you''re tethered to a PC or PS4 all the time which I find
    distracting. Second: accessibility. While the store and platform are Samsung''s
    and not Google''s like other Android apps, a huge number of people own the S7
    and on up line which all perform in my opinion very well in GearVR apps. Hopefully
    it catches on and maybe even Samsung and Google integrate their stores at some
    point; but for any with the option of trying these projects on such devices, I
    have had very good results.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我有很多原因喜欢这个平台。首先：没有线缆！有线耳机更强大，并带来一些额外的功能，但同时也让人感觉总是被连接到 PC 或 PS4，这让我觉得分心。第二：可访问性。虽然商店和平台是三星的，而不是像其他
    Android 应用那样是谷歌的，但很多人拥有 S7 及以上型号的手机，我认为它们在 GearVR 应用中的表现都非常好。希望它能够流行起来，也许三星和谷歌将来会在某个时刻整合他们的商店；但对于任何有选择在这样设备上尝试这些项目的人来说，我取得了非常好的效果。
- en: 'So first, for any Android-based app, you need to go to Project Settings ->
    Platforms -> Android and click the Configure Now button at the top:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，首先，对于任何基于 Android 的应用，你需要转到项目设置 -> 平台 -> Android，然后点击顶部的“立即配置”按钮：
- en: '![](img/4a3b46ba-0a30-49cc-9eea-9ff7a656caa2.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4a3b46ba-0a30-49cc-9eea-9ff7a656caa2.png)'
- en: 'After that, just below in its settings we need a few more things set:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，在其设置中我们还需要设置一些其他内容：
- en: '![](img/dd395905-d445-40c3-a046-c1cfd78657c0.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/dd395905-d445-40c3-a046-c1cfd78657c0.png)'
- en: Namely we need to set the SDK versions to 19 and Epic recommends setting the
    KitKat+ full screen immersive settings to true (though I didn't find this necessary
    in testing).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，我们需要将 SDK 版本设置为 19，Epic 建议将 KitKat+ 全屏沉浸式设置为 true（尽管我在测试中并没有发现这有必要）。
- en: 'Next, scrolling down in the same section to Advanced APK Settings, we need
    one more checkbox checked:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在同一部分向下滚动到高级 APK 设置，我们需要再勾选一个复选框：
- en: '![](img/fd1ed507-5001-43eb-9fec-bf18b1b2bbe9.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/fd1ed507-5001-43eb-9fec-bf18b1b2bbe9.png)'
- en: Configure the AndroidManifest for deployment to Oculus Mobile is strictly needed,
    and for those extra observant, I went ahead and turned on OpenGL ES3.1 as any
    device that can use a GearVR headset (Galaxy S6+) will support it anyway and there's
    no reason to limit your shader options nor force yourself to recompile all those
    shaders later.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 配置AndroidManifest以部署到Oculus Mobile是严格必要的，对于那些观察力敏锐的人，我提前打开了OpenGL ES3.1，因为任何可以使用GearVR头显（Galaxy
    S6+）的设备都将支持它，而且没有理由限制你的着色器选项，也不必强迫自己在以后重新编译所有那些着色器。
- en: Note also, I tried enabling Vulkan as I am a fan of its hardware acceleration
    platform, but got a crash on startup with this basic project, so, at least for
    the moment, save yourself some trouble and leave it unchecked.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我也尝试启用Vulkan，因为我喜欢它的硬件加速平台，但在这个基本项目中启动时出现了崩溃，所以，至少目前，为了避免麻烦，请将其保持未选中。
- en: 'And two final minor notes. First, if you are going to launch from the editor
    as I typically do for iterating, set your startup map to the MotionControllerMap
    as here, not the StartupMap default:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是两个最后的注意事项。首先，如果你打算像通常迭代时那样从编辑器启动，请将启动地图设置为MotionControllerMap，就像这里所示，而不是默认的StartupMap：
- en: '![](img/e85af292-3fa8-442e-8ae3-a7ed5631d058.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e85af292-3fa8-442e-8ae3-a7ed5631d058.png)'
- en: For whatever reason, the GearVR controller doesn't activate in the StartupMap,
    but works as we desire in the MotionControllerMap just fine (which is the default
    game map anyway if you make a standalone .apk and install and run that). Note,
    you may have to click the tumbstick a couple of times before things show up properly,
    even here, it seems.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 由于某种原因，GearVR控制器在StartupMap中不会激活，但在MotionControllerMap中运行得很好（如果你制作一个独立的.apk文件并安装运行，它本来就是默认的游戏地图）。注意，你可能需要点击摇杆几次，才能使事物正确显示，即使在这里也是如此。
- en: 'And lastly, you''ll need to follow these directions to get a signing key from
    Oculus, but it''s a much simpler process than most of those in the building and
    deploying chapter we had earlier:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你需要按照这些说明从Oculus获取签名密钥，但这个过程比我们之前在构建和部署章节中提到的那些过程要简单得多：
- en: '[https://dashboard.oculus.com/tools/osig-generator/](https://dashboard.oculus.com/tools/osig-generator/)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://dashboard.oculus.com/tools/osig-generator/](https://dashboard.oculus.com/tools/osig-generator/)'
- en: If you don't have that key in the folder it specifies, your app will crash on
    startup for being unsigned.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有在指定的文件夹中找到该密钥，你的应用在启动时将因为未签名而崩溃。
- en: Now we can quickly make changes and view those in less than a minute on our
    GearVR headset!
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以在GearVR头显上快速进行更改，并在不到一分钟内查看这些更改！
- en: For those wanting to use the HMD (Head Mounted Display) pad itself, there's
    a great guide from Epic in Further Reading at the end.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 对于想要使用HMD（头戴式显示器）手柄本身的人来说，Epic在“进一步阅读”部分提供了一个很好的指南。
- en: Adding HMD controls
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加HMD控制
- en: Now that we're playing in the level and can teleport around with the thumbstick
    and if you can get close-enough to the blue boxes you can grab them and throw
    them using the trigger on the controller, it might be nice to move around in the
    level a bit without having to use the teleport exclusively. One way we could even
    free up the entire thumbstick for other uses is to make motion based on your head's
    orientation, using the HMD (Head Mounted Display) orientation itself as a means
    of conveying input.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以在该级别中游玩，并可以使用摇杆进行传送，如果你能靠近蓝色盒子，你可以抓住它们并使用控制器上的扳机将它们扔掉，那么在没有必须专门使用传送的情况下在级别中移动可能是个不错的选择。我们甚至可以通过根据你的头部方向进行运动来释放整个摇杆，使用HMD（头戴式显示器）的方向本身作为传达输入的手段。
- en: 'However, this means the player can''t really look up and down anymore freely
    without moving; but we''ll put in a fix for that too. Let''s get the player moving
    around via blueprint first using some simple logic based on the camera orientation.
    To do this, we''ll do the work in the MotionControllerPawn (found in Content/VirtualRealityBP/Blueprints
    in the content browser). For this to actually work, however, we''ll need to convert
    the pawn to a character. So as we''ve done in the past, open the blueprint, go
    to File | Reparent Blueprint, and pick Character. Now, the default character has
    quite a tall capsule, and our previous pawn expected its origin to be on the ground,
    so let''s just make its capsule small, doesn''t have to be too tiny for this to
    all work ok, 34cm, its original radius, seems fine for the height too:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这意味着玩家现在不能自由地上下看而不移动；但我们会为这个问题也添加一个修复方案。让我们首先使用基于相机方向的简单逻辑通过蓝图让玩家移动起来。为此，我们将在MotionControllerPawn（在内容浏览器中的Content/VirtualRealityBP/Blueprints中找到）中做这项工作。然而，为了真正实现这一点，我们需要将这个兵种转换为角色。所以就像我们过去做的那样，打开蓝图，转到文件
    | 重新父类蓝图，并选择角色。现在，默认角色有一个相当高的胶囊，我们之前的兵种期望其原点在地面，所以让我们只将其胶囊做得小一些，不需要太小，34cm，它原来的半径，对于高度来说似乎也合适：
- en: '![](img/0550ef53-2091-4404-8df9-4c7af1aa6f90.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0550ef53-2091-4404-8df9-4c7af1aa6f90.png)'
- en: 'Next we''ll add a new blueprint function and drag a pin off of the sequence
    node in event tick to call it:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们将添加一个新的蓝图功能，并在事件计时中从序列节点拖出一个引脚来调用它：
- en: '![](img/bdc12e7a-c3bb-47dc-887d-16d23d96ac22.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/bdc12e7a-c3bb-47dc-887d-16d23d96ac22.png)'
- en: In that function, we'll add some simple logic to move the player based on camera
    orientation.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在那个函数中，我们将添加一些简单的逻辑，根据相机方向移动玩家。
- en: '![](img/2b786955-108c-4449-b726-632e8701dfa9.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2b786955-108c-4449-b726-632e8701dfa9.png)'
- en: As you can see at the start, the portion I mentioned earlier where we can disable
    the movement is done whenever any controller is trying to grab or teleport (and
    also we stop if the tilt is less than 10 degrees either way). This way the player
    can fully look around while doing those actions, but when not, tilting forward
    and back will move the player forward & backward, while turning of course changes
    direction still. If desired, you could easily add strafing left and right by using
    the same logic with the roll of the camera, and a sideways movement vector.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在开始时看到的，我之前提到的可以禁用移动的部分，是在任何控制器试图抓取或传送（以及如果倾斜角度小于10度，我们也会停止）时完成的。这样玩家在执行这些动作时可以完全环顾四周，但如果不这样做，前后倾斜将使玩家前后移动，而转向当然会改变方向。如果需要，您可以通过使用相机的翻滚逻辑和侧向移动向量，轻松地添加左右侧滑。
- en: With this addition, I actually find grabbing those boxes and throwing them around
    much easier than just by teleporting!
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 加上这个功能后，我发现抓取那些箱子并扔来扔去比仅仅通过传送要容易得多！
- en: '![](img/8d95f99e-2d76-47ab-9838-3df06c11a822.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8d95f99e-2d76-47ab-9838-3df06c11a822.png)'
- en: In case you're curious about the screenshot above (which was from device running
    VR), I simply added an Execute Console Command node to blueprint that was triggered
    when I pulled the trigger on the controller, and it executed "HighResShot 1920x1280"
    (but of course you can make that resolution anything you want) and then retrieved
    them from the phone when it was plugged in from: `\Phone\UE4Game\MasteringVR\Saved\Screenshots\Android`.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对上面的截图（来自运行VR的设备）感到好奇，我只是在蓝图里添加了一个执行控制台命令的节点，当我在控制器上拉动扳机时触发，并执行了"HighResShot
    1920x1280"（但当然，您可以将分辨率设置为任何您想要的）然后从：`\Phone\UE4Game\MasteringVR\Saved\Screenshots\Android`中检索它们。
- en: Making an AR project and porting our projectiles
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 制作一个AR项目并将我们的投射物移植过来
- en: AR is a field that has gained huge popularity over the past year, so it is great
    to see UE4 finally have a very solid and simple integration path and project template.
    For those new to it, Augmented Reality is rather different from VR as it does
    not take the user out of the real world and into a separate one, but rather integrates
    with the real world through a device which is either worn like the Microsoft's
    HoloLens, or the newly announced Magic Leap goggles, or held such as many current
    smartphones and tablets. AR takes real-world surroundings and integrates them
    to the app or game so the user can combine real world objects with in-game interactions.
    We'll get this started with its new project and then pull some code and assets
    from previous work into this branch to show that process now.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: AR在过去一年中已经成为一个非常受欢迎的领域，因此看到UE4最终拥有一个非常稳固和简单的集成路径和项目模板真是太好了。对于初学者来说，增强现实与VR有很大不同，因为它不会将用户从现实世界带到另一个世界，而是通过一个设备与真实世界结合，这个设备可以是像微软的HoloLens这样的可穿戴设备，或者是新宣布的Magic
    Leap眼镜，或者是像许多当前智能手机和平板电脑这样的手持设备。AR将真实世界的环境整合到应用或游戏中，使用户能够将现实世界物体与游戏中的交互结合起来。我们将从这个新项目中开始，然后从之前的工作中拉取一些代码和资源到这个分支中，以展示这个过程。
- en: Making the initial AR project
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建初始AR项目
- en: So much like in our first chapter and directly above in the VR section, this
    will be a bit of review; but since it's a project starting from scratch, it's
    always best to go through each step (so be ready for the Unreal Project Browser
    one more time!) So launching the engine without a project once more, gets us to
    the browser, where under the New Project and Blueprint tabs, you'll now find Handheld
    AR as a template, select that, we set the content to Mobile / Tablet again and
    no Starter Content (unless you want it of course).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们在第一章和VR部分直接上面所做的那样，这将会是一部分复习；但是，由于这是一个从头开始的项目，最好还是走完每一个步骤（所以准备好再次使用虚幻项目浏览器！）所以再次在没有项目的情况下启动引擎，我们来到了浏览器，在“新建项目”和“蓝图”标签下，你现在会找到一个名为“手持AR”的模板，选择它，我们将内容设置为移动/平板电脑，并且不包含起始内容（除非你想要的话）。
- en: '![](img/1421e8fe-5a96-4825-a500-1ba1e2585a6e.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1421e8fe-5a96-4825-a500-1ba1e2585a6e.png)'
- en: And as usual, this should now be opened up in your editor so we can begin work
    right away!
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如同往常，现在应该在你的编辑器中打开它，这样我们就可以立即开始工作了！
- en: Android deployment specifics
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安卓部署的具体细节
- en: 'There was much less to do here than in the VR section, but the same critical
    start has to be made, configuring for Android:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里要做的事情比VR部分要少得多，但必须开始同样的关键步骤，为安卓进行配置：
- en: '![](img/d4a7eb91-088a-40b2-be92-98aa8a6b70dd.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d4a7eb91-088a-40b2-be92-98aa8a6b70dd.png)'
- en: Like in VR or again, any Android project, be sure to head to Project Settings
    | Platforms | Android, and click the Configure Now button. As you can see below
    that in this template, it has already done other work we had to do for VR like
    setting APK versions for you.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在VR中或者再次，任何安卓项目中，确保你前往“项目设置”|“平台”|“安卓”，并点击“立即配置”按钮。正如你下面可以看到的，在这个模板中，它已经为我们完成了之前为VR所做的其他工作，比如为你设置APK版本。
- en: In truth, this was all that was needed to get the basic AR game running on my
    device, from there you can tap to add some shapes to the world and use the debug
    menus to get a feel for what work UE4 AR is doing and visualize how well it is
    doing it.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，这就是在我设备上运行基本AR游戏所需的所有内容，从那里你可以点击添加一些形状到世界中，并使用调试菜单来感受UE4 AR正在做什么，以及可视化它做得有多好。
- en: Porting our projectiles and firing them in AR
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将我们的投射物移植到AR中并发射它们
- en: 'Now we''ll make things more interesting by pulling our projectiles from the
    earlier project in to this AR demo in all their glory. First, though, we''ll need
    to add the source files to the proper folder and then generate project files.
    To do this, I''ve made two copies of the project on my local hard drive (which
    makes GitHub a bit tricky to handle as they''re both branches in the same repository);
    but to keep things simple, I''ll work locally with a copy of this branch (simply
    cut & paste to a new folder):'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将通过将我们的投射物从早期项目中拉入这个AR演示中，使事情变得更加有趣。首先，我们需要将源文件添加到正确的文件夹中，然后生成项目文件。为此，我在我的本地硬盘上创建了项目的两个副本（这使得GitHub处理起来有些棘手，因为它们都在同一个存储库中的分支）；但为了简化事情，我将在这个分支的副本上本地工作（简单地剪切并粘贴到一个新文件夹中）：
- en: '[https://github.com/PacktPublishing/Mastering-Game-Development-with-Unreal-Engine-4-Second-Edition/tree/Chapter-13-AR](https://github.com/PacktPublishing/Mastering-Game-Development-with-Unreal-Engine-4-Second-Edition/tree/Chapter-13-AR)'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Mastering-Game-Development-with-Unreal-Engine-4-Second-Edition/tree/Chapter-13-AR](https://github.com/PacktPublishing/Mastering-Game-Development-with-Unreal-Engine-4-Second-Edition/tree/Chapter-13-AR)'
- en: 'And have `chapter 12`''s branch here in my normal GitHub local drive location:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 并且将`第12章`的分支放在我的GitHub本地驱动器常规位置：
- en: '[https://github.com/PacktPublishing/Mastering-Game-Development-with-Unreal-Engine-4-Second-Edition/tree/Chapter-12](https://github.com/PacktPublishing/Mastering-Game-Development-with-Unreal-Engine-4-Second-Edition/tree/Chapter-12)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Mastering-Game-Development-with-Unreal-Engine-4-Second-Edition/tree/Chapter-12](https://github.com/PacktPublishing/Mastering-Game-Development-with-Unreal-Engine-4-Second-Edition/tree/Chapter-12)'
- en: This way I can cherry-pick items from `chapter 12` into the AR project. In the
    end, it's a bit complicated, but I'll simply delete my local `chapter 12` files
    and folders when done, *except* the `.git` hidden folder for git's information,
    then move (or rename) the local AR to that location and switch branches back to
    the AR project and check in those specific changes. Git can be tricky in cases
    like this, but right now we're just trying to have some fun in an AR environment
    and see what we can do, so let's get to it!
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这样我就可以从`第12章`中挑选项目到AR项目中。最后，这有点复杂，但完成时，我会简单地删除我的本地`第12章`文件和文件夹，*除了* git信息用的`.git`隐藏文件夹，然后将本地AR移动（或重命名）到那个位置，并切换分支回到AR项目，并提交那些特定的更改。在这种情况下，Git可能会很棘手，但我们现在只是想在AR环境中找点乐子，看看我们能做什么，所以让我们开始吧！
- en: Copying the source files as noted was the first step, just simply take `chapter
    12`'s `MasteringProjectile.h` and `.cpp` files, and move them in to the `MasteringAR/Source`
    folder. Once that's done, we can right click on the `MasteringAR.uproj` file and
    generate project files with our UE4 version, or use a batch file as we have in
    the past to make sure we have VS 2017 files. Now we can build and run the editor
    as normal and deploy the project as well. Keep in mind, though, as a C++ project
    now, iteration times will increase significantly between runs on the device as
    it will compile code each time it deploys; but that's what we need to do here
    to get our projectiles firing with all their code of course we built over previous
    chapters.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如注释所示，复制源文件是第一步，只需简单地将`第12章`的`MasteringProjectile.h`和`.cpp`文件移动到`MasteringAR/Source`文件夹中。完成之后，我们可以右键点击`MasteringAR.uproj`文件，并使用我们的UE4版本生成项目文件，或者像过去一样使用批处理文件来确保我们有VS
    2017文件。现在我们可以像平常一样构建和运行编辑器，并部署项目。但请注意，作为一个C++项目，运行时的迭代时间将在设备上显著增加，因为每次部署都会编译代码；但这是我们在这里需要做的，以确保我们的项目能够发射出我们在前几章中构建的所有代码。
- en: 'In full disclosure: I actually had to, from the UE4 AR project here, name it
    Mastering.uproject, add a new C++ class of MasteringProjectile (based on the Actor
    class), and then copy-paste the code from the main project into this one for the
    migrated assets to find their parent class properly. In the past, the copy-paste
    file-version above has worked fine, but in case anyone has trouble, try this one
    as a last resort as I did.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 完全坦白说：我实际上不得不从这里的UE4 AR项目中，将其命名为Mastering.uproject，添加一个新的C++类MasteringProjectile（基于Actor类），然后将主项目中的代码复制粘贴到这个项目中，以便迁移的资产能够正确找到其父类。过去，上面的复制粘贴文件版本一直工作得很好，但以防万一有人遇到麻烦，请尝试这个作为最后的手段，就像我一样。
- en: A bit unfortunately, we actually need to launch the `chapter 12` project to
    migrate the assets from there, to our AR project. So open it in the editor and
    we'll browse to the projectiles section of our blueprints and right click on one
    of them. You'll see this pop-up and under Asset Actions is Migrate.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 有点不幸的是，我们实际上需要启动`第12章`项目，以便将资产从那里迁移到我们的AR项目中。所以，在编辑器中打开它，然后浏览到我们的蓝图的项目部分，右键点击其中一个。你会看到一个弹出窗口，在资产操作中是迁移。
- en: '![](img/8d521690-14e9-4354-a715-93f27d73fac0.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8d521690-14e9-4354-a715-93f27d73fac0.png)'
- en: 'The next thing that will pop-up is a list, basically, of all the dependencies
    that Unreal is telling you it will copy, just click ok:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个弹出的是列表，基本上是Unreal告诉你要复制的所有依赖项，只需点击确定：
- en: '![](img/b1d0f31d-1318-4e97-aa41-7fabef4fb792.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b1d0f31d-1318-4e97-aa41-7fabef4fb792.png)'
- en: Now we just need to point to our Content folder in the AR project's Content
    folder, and those projectiles and all their asset dependencies (the special FX
    we did in [Chapter 12](3555f7d2-c20d-48b4-97ba-748a9bd16a13.xhtml), *In-Scene
    Video and Visual Effects*, and so on, will all be brought with it). Migrating
    assets like this is a huge time saver between projects that share them, so I'm
    glad to finally get a chance to share its use here.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们只需要将AR项目的Content文件夹中的内容文件夹指向我们的Content文件夹，那些弹射物以及它们所有的资产依赖（我们在[第12章](3555f7d2-c20d-48b4-97ba-748a9bd16a13.xhtml)，*场景视频和视觉效果*等所做的特殊FX）都将随之而来。在共享这些资产的项目之间迁移资产可以节省大量时间，所以我很高兴终于有机会在这里分享它的使用。
- en: 'With that done, we can get back to the AR project in the editor once more,
    make an array of our projectiles, and spawn those instead of the test geometry
    the project starts with:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些后，我们就可以再次回到编辑器中的AR项目，创建我们的弹射物数组，并用它们代替项目开始时的测试几何形状：
- en: '![](img/9b382b44-c29e-4ff7-b584-245a71c0f466.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9b382b44-c29e-4ff7-b584-245a71c0f466.png)'
- en: And that's it, now we have our core project's projectiles spawning in the AR
    world with special FX and all!
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样，现在我们的核心项目的弹射物已经在AR世界中生成，带有特殊的FX效果！
- en: '![](img/c31bfa0f-55f0-4ed7-b936-a4556f943032.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c31bfa0f-55f0-4ed7-b936-a4556f943032.png)'
- en: Summary
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Through this journey, we've gone from the most basic starting point in UE4 to
    building and modifying some of its latest and greatest technologies. There's nothing
    quite as satisfying as seeing your work on your target platform and knowing it's
    only a matter of time before the rest of the world gets to share in it too. VR
    and AR are exciting new areas and UE4 is a leader in their development we are
    lucky to have. Having the know-how to get these technologies up and running and
    the myriad of new projects and games they bring to possible makes this a very
    exciting time, and can allow us to feel we're truly mastering UE4!
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在这次旅程中，我们从UE4最基础的起点开始，到构建和修改其最新和最伟大的技术。没有什么比看到你在目标平台上的工作，并知道不久的将来全世界都能分享它，更令人满足的了。VR和AR是令人兴奋的新领域，UE4是它们发展的领导者，我们很幸运拥有它。拥有让这些技术运行起来的知识，以及它们带来的无数新项目和游戏，这使得这是一个非常激动人心的时刻，并使我们真正掌握UE4成为可能！
- en: Questions
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What advantages and disadvantages does including starting content in a new project
    entail?
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新项目中包含起始内容有哪些优缺点？
- en: When making a VR or AR project, what is the primary reason to keep it blueprint
    only as long as possible?
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在制作VR或AR项目时，为什么尽可能长时间地保持仅蓝图是主要原因？
- en: What step is necessary to getting every Android project to build and deploy?
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使每个Android项目都能构建和部署，必须采取哪一步？
- en: What are some advantages and disadvantages to the GearVR platform over the current
    PC/Console versions?
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与当前的PC/Console版本相比，GearVR平台有哪些优缺点？
- en: When adding movement via the HMD, what problems could it cause a user? How was
    it mitigated?
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当通过HMD添加移动时，可能会给用户带来什么问题？它是如何缓解的？
- en: Which basic Android settings for the AR template are already set that we had
    to set for the VR template?
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于AR模板，哪些基本的Android设置已经设置好，我们不需要为VR模板设置？
- en: When converting from blueprint only to a C++ project, what two steps are taken?
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当从蓝图仅转换为C++项目时，采取了哪两个步骤？
- en: How are assets migrated from one project to another with full dependencies?
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何将具有完整依赖关系的资产从一个项目迁移到另一个项目？
- en: Further reading
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'GearVR HMD touchpad in UE4:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: UE4中的GearVR HMD触摸板：
- en: '[https://docs.unrealengine.com/en-us/Platforms/GearVR/HowTo/HMDTouchPad](https://docs.unrealengine.com/en-us/Platforms/GearVR/HowTo/HMDTouchPad)'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.unrealengine.com/en-us/Platforms/GearVR/HowTo/HMDTouchPad](https://docs.unrealengine.com/en-us/Platforms/GearVR/HowTo/HMDTouchPad)'
- en: 'Google''s supported Android AR devices:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Google支持的Android AR设备：
- en: '[https://developers.google.com/ar/discover/supported-devices](https://developers.google.com/ar/discover/supported-devices)'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://developers.google.com/ar/discover/supported-devices](https://developers.google.com/ar/discover/supported-devices)'
