- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: About this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *C++20 STL Cookbook* provides recipes to help you get the most out of the
    C++ STL (Standard Template Library), including new features introduced with C++20\.
  prefs: []
  type: TYPE_NORMAL
- en: C++ is a rich and powerful language. Built upon C, with syntactic extensions
    for type safety, generic programming, and object-oriented programming, C++ is
    essentially a low-level language. The STL provides a broad set of higher-level
    classes, functions, and algorithms to make your programming job easier, more effective,
    and less prone to error.
  prefs: []
  type: TYPE_NORMAL
- en: I've often said that C++ is five languages cobbled into one. The formal specification
    includes 1) the entire *C language*, 2) C's cryptic-yet-powerful *macro preprocessor*,
    3) a feature-rich *class/object* model, 4) a *generic programming* model called
    *templates*, and finally, built upon C++ classes and templates, 5) the *STL*.
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisite knowledge
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This book presumes that you have a basic understanding of C++, including syntax,
    structure, data types, classes and objects, templates, and the STL.
  prefs: []
  type: TYPE_NORMAL
- en: The recipes and examples in this book presume that you understand the need to
    `#include` certain headers to use library functions. The recipes don't usually
    list all the necessary headers, preferring to focus on the techniques at hand.
    You're encouraged to download the example code, which has all the necessary `#include`
    directives and other front matter.
  prefs: []
  type: TYPE_NORMAL
- en: 'You may download the example code from GitHub: [https://github.com/PacktPublishing/CPP-20-STL-Cookbook](https://github.com/PacktPublishing/CPP-20-STL-Cookbook).'
  prefs: []
  type: TYPE_NORMAL
- en: 'These assumptions mean that when you see a piece of code like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You should already know that you''ll need to put this code in a `main()` function,
    you''ll need to `#include` the `<iostream>` header, and `cout` is an object in
    the `std::` namespace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The STL's power is derived from templates *(a brief primer)*
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Templates* are how C++ does *generic programming*, code that''s independent
    of type while retaining type safety. C++ templates allow you to use tokens as
    placeholders for types and classes, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'A template may be used for classes and/or functions. In this template function,
    the `T` represents a *generic type*, which allows this code to be used in the
    context of any compatible class or type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This invokes the template function with an `int` type. This same code can be
    used with any type or class that supports the `+` operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the compiler sees a *template invocation*, like `add_em_up<int>(a, b)`,
    it creates a *specialization*. This is what makes the code type safe. When you
    invoke `add_em_up()` with an `int` type, the specialization will look something
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The specialization takes the template and replaces all instances of the `T`
    placeholder with the type from the invocation, in this case, `int`. The compiler
    creates a separate specialization of the template each time it's invoked with
    a different type.
  prefs: []
  type: TYPE_NORMAL
- en: STL *containers*, like `vector`, `stack`, or `map`, along with their *iterators*
    and other supporting functions and algorithms, are built with templates so they
    can be used generically while maintaining type safety. This is what makes the
    STL so flexible. Templates are the *T* in the STL.
  prefs: []
  type: TYPE_NORMAL
- en: This book uses the C++20 standard
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The C++ language is standardized by the International Organization for Standardization
    (ISO) on a roughly three-year cycle. The current standard is called C++20 (which
    was preceded by C++17, C++14, and C++11 before that). C++20 was approved in September
    2020\.
  prefs: []
  type: TYPE_NORMAL
- en: C++20 adds many important features to the language and the STL. New features
    like *format*, *modules*, *ranges*, and more will have significant impact on the
    way we use the STL.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are also convenience changes. For example, if you want to remove every
    matching element of a `vector`, you may have been using the *erase-remove idiom*
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Starting with C++20 you can use the new `std::erase` function and do all of
    that in one simple, optimized function call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: C++20 has many improvements, both subtle and substantial. In this book, we will
    cover much of it, especially what's relevant to the STL.
  prefs: []
  type: TYPE_NORMAL
- en: Braced initialization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You may notice that the recipes in this book often use *braced initialization*
    in place of the more familiar *copy initialization*.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The `=` operator pulls double-duty as both an assignment and a copy operator.
    It's common, familiar, and it works, so we've all been using it forever.
  prefs: []
  type: TYPE_NORMAL
- en: The downside of the `=` operator is that it's also a copy constructor, which
    often means *implicit narrowing conversion*. This is both inefficient and can
    lead to unintended type conversions, which can be difficult to debug.
  prefs: []
  type: TYPE_NORMAL
- en: Braced initialization uses the list initialization operator `{}` (introduced
    in C++11) to avoid those side effects. It's a good habit to get into and you'll
    see it a lot in this book.
  prefs: []
  type: TYPE_NORMAL
- en: It's also worth noting that the special case of `T{}` is guaranteed to be zero-initialized.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The empty brace zero initialization offers a useful shortcut for initializing
    new variables.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hiding the std:: namespace'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In most instances, the exercises in this book will hide the `std::` namespace.
    This is mostly for page space and readability considerations. We all know that
    most STL identifiers are in the `std::` namespace. I will normally use some form
    of the `using` declaration to avoid cluttering the examples with repetitive prefixes.
    For example, when using `cout` you can presume I''ve included a `using` declaration
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: I usually *will not show* the `using` declaration in the recipe listings. This
    allows us to focus on the purpose of the example.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is poor practice to import the entire `std::` namespace in your code. You
    should *avoid* a `using namespace` declaration like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The `std::` namespace includes thousands of identifiers and there's no good
    reason to clutter your namespace with them. The potential for collisions is not
    trivial, and can be hard to track down. When you want to use a name without the
    `std::` prefix, the preferred method is to import a single name at a time, as
    above.
  prefs: []
  type: TYPE_NORMAL
- en: To further avoid namespace collisions, I often use a separate namespace for
    classes that will be re-used. I tend to use `namespace bw` for my personal namespace.
    You may use something else that works for you.
  prefs: []
  type: TYPE_NORMAL
- en: Type aliases with using
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This book uses the `using` directive for type aliases instead of `typedef`.
  prefs: []
  type: TYPE_NORMAL
- en: 'STL classes and types can be verbose at times. A templated iterator class,
    for example, may look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Long type names are not just hard to type, they are prone to error.
  prefs: []
  type: TYPE_NORMAL
- en: 'One common technique is to abbreviate long type names with `typedef`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This declares an alias for our unwieldy iterator type. `typedef` is inherited
    from C and its syntax reflects that.
  prefs: []
  type: TYPE_NORMAL
- en: 'Beginning with C+11, the `using` keyword may be used to create a type alias:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'In most circumstances, a `using` alias is equivalent to `typedef`. The most
    significant difference is that a `using` alias may be templated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: For these reasons, and for the sake of clarity, this book prefers the `using`
    directive for type aliases.
  prefs: []
  type: TYPE_NORMAL
- en: Abbreviated function templates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Beginning with C++20, an *abbreviated function template* may be specified without
    the template header. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The `auto` type in a parameter list works like an anonymous template `typename`.
    It is equivalent to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Though new in C++20, abbreviated function templates have been supported by the
    major compilers for some time already. This book will use abbreviated function
    templates in many of the examples.
  prefs: []
  type: TYPE_NORMAL
- en: The C++20 format() function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Until C++20 we've had a choice of using legacy `printf()` or the STL `cout`
    for formatting text. Both have serious flaws but we've used them because they
    work. Beginning with C++20, the `format()` function provides text formatting inspired
    by Python 3's formatter.
  prefs: []
  type: TYPE_NORMAL
- en: This course uses the new STL `format()` function liberally. Please see [*Chaper
    1*](B18267_01_ePub.xhtml#_idTextAnchor027), *New C++20 Features*, for a more comprehensive
    description.
  prefs: []
  type: TYPE_NORMAL
- en: Use the STL to solve real-world problems
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The recipes in this book use the STL to provide real-world solutions to real-world
    problems. They have been designed to rely exclusively on the STL and C++ standard
    libraries, with no external libraries. This should make it easy for you to experiment
    and learn without the distractions of installing and configuring third-party code.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's go have some fun with the STL. *Happy learning!*
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is for *intermediate to advanced* C++ programmers who want to get
    more out of the C++20 Standard Template Library. Basic knowledge of coding and
    C++ concepts are necessary to get the most out of this book.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*Chaper 1*](B18267_01_ePub.xhtml#_idTextAnchor027), *New C++20 Features*,
    introduces the new STL features in C++20\. It aims to familiarize you with the
    new language features so you may use them with the STL.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 2*](B18267_02_ePub.xhtml#_idTextAnchor057), *General STL Features*,
    discusses modern STL features added in recent C++ versions.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 3*](B18267_03_ePub.xhtml#_idTextAnchor076), *STL Containers*, covers
    the STL''s comprehensive library of containers.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B18267_04_ePub.xhtml#_idTextAnchor122), *Compatible Iterators*,
    shows how to use and create STL-compatible iterators.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B18267_05_ePub.xhtml#_idTextAnchor155), *Lambda Expressions*,
    covers the use of lambdas with STL functions and algorithms.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B18267_06_ePub.xhtml#_idTextAnchor181), *STL Algorithms*, provides
    recipes for using and creating STL-compatible algorithms.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B18267_07_ePub.xhtml#_idTextAnchor212), *Strings, Stream, and
    Formatting*, describes the STL string and formatter classes.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B18267_08_ePub.xhtml#_idTextAnchor250), *Utility Classes*, covers
    STL utilities for date-and-time, smart pointers, optionals, and more.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B18267_09_ePub.xhtml#_idTextAnchor291), *Concurrency and Parallelism*,
    describes support for concurrency, including threads, async, atomic types, and
    more.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 10*](B18267_10_ePub.xhtml#_idTextAnchor324), *Using the File System*,
    covers the `std::filesystem` classes and how to put them to use with the latest
    advancements that came out with C++20.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 11*](B18267_11_ePub.xhtml#_idTextAnchor347), *A Few More Ideas*,
    provides a few more solutions, including a trie class, string split, and more.
    This provides advanced examples on how to put the STL to use for real-world problems.'
  prefs: []
  type: TYPE_NORMAL
- en: The recipes in this book use the GCC compiler
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Unless otherwise noted, most of the recipes in this book have been developed
    and tested using the GCC compiler, version 11.2, the latest stable version as
    of this writing.
  prefs: []
  type: TYPE_NORMAL
- en: As I write this, C++20 is still new and is not fully implemented on any available
    compiler. Of the three major compilers, *GCC* (GNU), *MSVC* (Microsoft), and *Clang*
    (Apple), the MSVC compiler is furthest along in implementing the new standard.
    Occasionally, we may run into a feature that is implemented on MSVC or another
    compiler, but not on GCC, in which case I will note which compiler I used. If
    a feature is not yet implemented on any available compiler, I will explain that
    I was unable to test it.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18267_Preface_01.png)'
  prefs: []
  type: TYPE_IMG
- en: I strongly recommend that you install GCC to follow along with the recipes in
    this book. GCC is freely available under the GNU General Public License (GPL).
    The easiest way to get the latest version of GCC is to install *Debian Linux*
    (also GPL) and use `apt` with the `testing` repository.
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are using the digital version of this book, we suggest you type the
    code yourself or download the code from the GitHub repository (link in the next
    section). This will avoid errors due to copying and pasting formatted code from
    the e-book.**'
  prefs: []
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can download the example code files for this book from GitHub at https://github.com/PacktPublishing/CPP-20-STL-Cookbook.
    In the event of updates and errata, code will be updated on the GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: We also have other code bundles from our rich catalog of books and videos available
    at [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/).
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`Code in text`: Indicates code words in text, database table names, folder
    names, file names, file extensions, path names, dummy URLs, user input, and Twitter
    handles. Here is an example: "The `insert()` method takes an `initializer_list`
    and calls the private function `_insert()`:"'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '**Bold**: Indicates a new term, an important word, or words that you see onscreen.
    For example, words in menus or dialog boxes appear in the text like this. Here
    is an example: "Select **System info** from the **Administration** panel."'
  prefs: []
  type: TYPE_NORMAL
- en: Tips or important notes
  prefs: []
  type: TYPE_NORMAL
- en: Appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Sections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, you will find several headings that appear frequently (*How to
    do it...*, *How it works...*, *There's more...*, and *See also…*).
  prefs: []
  type: TYPE_NORMAL
- en: 'To give clear instructions on how to complete a recipe, use these sections
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section contains the steps required to follow the recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section usually consists of a detailed explanation of what happened in
    the previous section.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section consists of additional information about the recipe in order to
    make you more knowledgeable about the recipe.
  prefs: []
  type: TYPE_NORMAL
- en: See also…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section provides helpful links to other useful information for the recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Get in touch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome.
  prefs: []
  type: TYPE_NORMAL
- en: '**General feedback**: If you have questions about any aspect of this book,
    mention the book title in the subject of your message and email us at [customercare@packtpub.com](http://customercare@packtpub.com).'
  prefs: []
  type: TYPE_NORMAL
- en: '**Errata**: Although we have taken every care to ensure the accuracy of our
    content, mistakes do happen. If you have found a mistake in this book, we would
    be grateful if you would report this to us. Please visit [www.packtpub.com/support/errata](http://www.packtpub.com/support/errata),
    selecting your book, clicking on the Errata Submission Form link, and entering
    the details.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Piracy**: If you come across any illegal copies of our works in any form
    on the Internet, we would be grateful if you would provide us with the location
    address or website name. Please contact us at [copyright@packt.com](http://copyright@packt.com)
    with a link to the material.'
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are interested in becoming an author**: If there is a topic that you
    have expertise in and you are interested in either writing or contributing to
    a book, please visit [authors.packtpub.com](http://authors.packtpub.com).'
  prefs: []
  type: TYPE_NORMAL
- en: Share Your Thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you've read *C++20 STL Cookbook*, we'd love to hear your thoughts! [Please
    click here to go straight to the Amazon review page](https://packt.link/r/1803248718)
    for this book and share your feedback.
  prefs: []
  type: TYPE_NORMAL
- en: Your review is important to us and the tech community and will help us make
    sure we're delivering excellent quality content.
  prefs: []
  type: TYPE_NORMAL
- en: Preface
  prefs: []
  type: TYPE_NORMAL
