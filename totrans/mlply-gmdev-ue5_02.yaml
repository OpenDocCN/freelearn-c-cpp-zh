- en: '2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Understanding Networking Basics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Having a strong knowledge of networking is the foundation of any successful
    multiplayer game development, as it provides a basic understanding of how the
    different components that make up a network work. Networking can be divided into
    three main areas: logical architecture, protocols and standards, and physical
    infrastructure.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As it’s important for anyone interested in networked games to have at least
    some basic understanding of these concepts, the primary goal of this chapter is
    to introduce you to these components and the main issues that may pop up during
    multiplayer application development. By the end of the chapter, you will also
    get a grip on how the Unreal Engine multiplayer framework is organized in order
    to be prepared for the next step: creating your first multiplayer game prototype.'
  prefs: []
  type: TYPE_NORMAL
- en: 'So, in this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What is computer networking?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing network protocols
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding network issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing the Unreal Engine multiplayer system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are no technical requirements to follow in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: What is computer networking?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We live in a world where we are constantly communicating with each other through
    computers, smartphones, smart homes, and a plethora of different devices. Computer
    networks are the backbone of modern technology.
  prefs: []
  type: TYPE_NORMAL
- en: Most people probably don’t even care about device communication and how it works;
    the most important thing is that... well, it works. But what exactly does *network*
    mean? And most importantly, as multiplayer game developers, what do we need to
    know about network systems?
  prefs: []
  type: TYPE_NORMAL
- en: '**Computer networking** involves two or more (most of the time, a lot more!)
    devices that are connected together with the common goal of sharing data and resources
    as fast and as reliably as possible.'
  prefs: []
  type: TYPE_NORMAL
- en: A network can use cables (wired) or radio waves (wireless) and can cover a self-enclosed
    area or be available at a greater scale. Even if all these technologies share
    the same purpose, their structure and capabilities will vary significantly.
  prefs: []
  type: TYPE_NORMAL
- en: Once devices are physically connected, they must establish a “contract” in order
    to communicate securely; without such a contract, data could be sent to the wrong
    person and put important information at risk.
  prefs: []
  type: TYPE_NORMAL
- en: After the contract is established, each device can send data to another one
    using a “digital envelope” that identifies the sender and the receiver. This ensures
    that the data is only received by the intended recipient.
  prefs: []
  type: TYPE_NORMAL
- en: Dispatching data over the network can be very complex, especially when dealing
    with large files (think about an email with a 150 MB 3D model as an attachment
    and you’ll probably get the idea!). As a consequence, data must be “fragmented”
    into small pieces by the sender and, once it arrives at its destination, it will
    be re-packaged by the receiver, ready to be used.
  prefs: []
  type: TYPE_NORMAL
- en: 'This brings us to the last stage: losing information. Despite the advancements
    in technology, data loss is still a possibility in our imperfect world. Data can
    be corrupted or lost during transfer; therefore, it is important to take measures
    to ensure the safety of data and prevent such losses.'
  prefs: []
  type: TYPE_NORMAL
- en: If things sound difficult, that's because they are! But don’t be afraid, that’s
    exactly how I felt when I started learning about this type of technology; as you
    make your way through this book, you will find that many of the topics have been
    handled by the UE multiplayer system, leaving you free to explore higher level
    topics.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you will learn how a network, or a group of networks, is
    organized from a structural and operational perspective.
  prefs: []
  type: TYPE_NORMAL
- en: Types of computer networks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you already know, a computer network provides a way for multiple devices
    to communicate by sharing information with each other. Some well-known examples
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Sending emails
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Streaming videos
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '...and guess what? Playing online games!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: But how are these devices connected? There are several different types of computer
    networks available that have different capabilities and purposes; depending on
    your needs (and your budget!), you’ll have to find a solution that will grant
    you reliability and trustworthiness.
  prefs: []
  type: TYPE_NORMAL
- en: Local Area Networks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Local Area Networks** (**LANs**) are probably the most common type of computer
    network. A LAN usually consists of a telecommunication network that connects devices
    that are situated at a close distance (usually no more than 1 kilometer). This
    type of network usually takes advantage of the fast connection over short distances
    granted by Ethernet cables.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A LAN can be of two types:'
  prefs: []
  type: TYPE_NORMAL
- en: A client/server LAN, where several devices (i.e., the clients) are connected
    to a centralized computer (i.e., the server)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A peer-to-peer LAN, where each device shares the network functionalities equally
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Figure 2**.1* illustrates a typical small-sized LAN where devices are connected
    through Wi-Fi or Ethernet cables.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1 – A LAN setup](img/Figure_02_01_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.1 – A LAN setup
  prefs: []
  type: TYPE_NORMAL
- en: One of the main advantages of a LAN over a **Wide Area Network** (**WAN**) is
    the lower level of maintenance and reduced implementation costs. Also, since a
    LAN is limited to a relatively small distance and to a limited number of connected
    devices, it ensures a higher level of security.
  prefs: []
  type: TYPE_NORMAL
- en: Some good examples where LANs are used are academic campuses (sometimes called
    **Campus Area Networks**), hospitals, or offices with multiple departments.
  prefs: []
  type: TYPE_NORMAL
- en: A LAN can become a **Wireless Local Area Network** (**WLAN**) when connections
    between devices are only made wirelessly, and it is typically used in homes or
    public spaces (for example, libraries, airports, and cafes) where devices must
    connect without the need for physical cables.
  prefs: []
  type: TYPE_NORMAL
- en: Wide Area Networks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The primary difference between a LAN and a WAN is that a WAN covers a much larger
    area and is essentially a collection of LANs connected together.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly for the LAN, a WAN can be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: A client/server WAN, where multiple devices are connected to a central computer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A peer-to-peer WAN, where each device shares an equal responsibility in the
    network functionalities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As there is usually a loss in speed over long distances, a WAN is typically
    slower than a LAN. However, the main advantage of a WAN is the capability to be
    publicly owned: a good example is the internet, where no entity has full ownership.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 2**.2* shows several LANs connected together through a WAN:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.2 – A WAN setup](img/Figure_02_02_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.2 – A WAN setup
  prefs: []
  type: TYPE_NORMAL
- en: A **Metropolitan Area Network** (**MAN**) is a smaller WAN usually managed by
    cities, regions, or governments; it typically includes a high-speed backbone network,
    which connects multiple LANs. As an example, it may connect multiple campuses
    belonging to the same academic institution (and that’s how it works where I am
    teaching right now!).
  prefs: []
  type: TYPE_NORMAL
- en: Virtual Private Networks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A **Virtual Private Network** (**VPN**) is a secure connection over the internet
    from a device to a network. By using secure encryption, data sent over a VPN is
    protected, preventing unauthorized tracking, protecting privacy, and bypassing
    geo-restrictions.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 2**.3* shows an example where a device connected to a LAN is communicating
    over the internet with another device through a VPN.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.3 – A VPN example](img/Figure_02_03_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.3 – A VPN example
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you have been introduced to the fundamental principles of computer
    networking. You have explored how computer networks are structured and organized.
    In the following section, you will delve deeper into these topics to understand
    how devices communicate using rules and protocols, and how these rules guarantee
    the reliability and accuracy of the data that is exchanged.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing network protocols
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To manage communication between two or more computers, we need some rules that
    will dictate how data is sent and received, as well as security measures that
    need to be taken to ensure reliability. These rules are called **protocols**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Putting it simply, a protocol is like an international language: everyone needs
    to know the same words to communicate with one another. More specifically, a **network
    protocol** is a set of directives that rules how to *format*, *transmit*, and
    *receive* data so that devices in the same network can interact.'
  prefs: []
  type: TYPE_NORMAL
- en: But before transmitting data over the network, it should be carefully packaged
    and structured so that the receiver can recognize and reassemble it.
  prefs: []
  type: TYPE_NORMAL
- en: Packet switching
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Packet switching** refers to the method of sending data to a network in the
    form of small portions (or **packets**). This process involves dividing data into
    small segments and adding an extra portion of information about the packet’s content,
    origin, and destination. This extra information is called a **header** and is
    typically placed at the front of each packet. In some cases, the packet may also
    include additional information at its end, referred to as a **footer**.'
  prefs: []
  type: TYPE_NORMAL
- en: These packets are then sent over the network and reassembled at their destination.
    Along the way, they are processed by intermediate nodes, which can store incoming
    data and forward it to the next node closer to the final receiver.
  prefs: []
  type: TYPE_NORMAL
- en: Some of the advantages of using packet switching include efficiency in terms
    of bandwidth and reliability as the receiver can detect missing packages. Another
    advantage is cost-effectiveness due to relatively cheap implementation.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, *Figure 2**.4* shows a **Transmission Control Protocol** (**TCP**)
    packet composed of its header and data sections:'
  prefs: []
  type: TYPE_NORMAL
- en: The header is made of blocks of bits, each one with its own meaning (as an example,
    the *header length* tells the header data offset in order to specify where actual
    data will start in the sequence)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The data can be of varying lengths and holds the actual content included in
    the packet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 2.4 – A TCP packet](img/Figure_02_04_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.4 – A TCP packet
  prefs: []
  type: TYPE_NORMAL
- en: The collection of protocols that rule how data should be packaged and forwarded
    through the network is now known as the **Internet Protocol Suite** or the **TCP/IP
    suite**.
  prefs: []
  type: TYPE_NORMAL
- en: TCP/IP suite
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The TCP/IP suite is made of different logical levels, or **layers**, that are
    stacked one above the other. These include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The application layer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The transport layer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The internet layer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The data link layer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Figure 2**.5* shows the layers of the TCP/IP suite with some of the most commonly
    used protocols, along with the physical layer, which we will discuss later in
    this section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.5 – TCP/IP layers](img/Figure_02_05_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.5 – TCP/IP layers
  prefs: []
  type: TYPE_NORMAL
- en: Each layer has an important role to play in supporting the needs of the one
    above it. As an example, this may involve accepting a block of data from the layer
    above, processing it according to the current layer’s protocols, and then sending
    it to the layer below.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s take a look at each of these layers now.
  prefs: []
  type: TYPE_NORMAL
- en: The application layer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **application layer** provides the interface for communication between applications
    running on different machines on the network. It stands at the very top of the
    TCP/IP suite and allows the sharing of data through the use of protocols, such
    as the **File Transfer Protocol** (**FTP**) and the **HyperText Transfer Protocol**
    (**HTTP**), which are used to upload files to the internet and download web pages
    on your favorite browser.
  prefs: []
  type: TYPE_NORMAL
- en: The transport layer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **transport layer** is responsible for providing reliable data delivery
    and flow control and provides services that allow applications to communicate
    securely over the network.
  prefs: []
  type: TYPE_NORMAL
- en: While TCP is commonly used for its reliability, there are situations where other
    protocols are preferred for their speed, such as the **User Data Protocol** (**UDP**),
    which won’t ensure packet delivery but will be faster as it doesn’t require the
    overheads associated with establishing and maintaining a connection.
  prefs: []
  type: TYPE_NORMAL
- en: This layer is typically responsible for detecting issues and verifying data
    integrity; one way is through **checksums**, or sequences of numbers and letters
    used to check data for errors.
  prefs: []
  type: TYPE_NORMAL
- en: The internet layer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **internet layer** (or, more generically, the **network layer** in the TCP/IP
    suite) is responsible for providing the means to route data between different
    networks and ensure that packets are delivered correctly. This layer also provides
    various services such as addressing, routing, congestion control, and flow control.
  prefs: []
  type: TYPE_NORMAL
- en: The internet layer is responsible for providing a logical addressing system
    that allows hosts to be easily replaced, groups of hosts to be organized into
    subnets, and distant subnets to be able to communicate with one another.
  prefs: []
  type: TYPE_NORMAL
- en: The most common protocol used to implement these features is **Internet Protocol
    Version 4** (**IPv4**), which is a 32-bit address that identifies a device on
    a network. The most recent release, **Internet Protocol Version 6** (**IPv6**),
    is based on a 128-bit address and is designed to replace IPv4, as that one is
    running out of available addresses.
  prefs: []
  type: TYPE_NORMAL
- en: The data link layer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **data link layer** is responsible for providing a method for communication
    between physically connected hosts. This means this layer must provide a method
    through which a source host can package up information and transmit it through
    the physical layer.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 2**.6* depicts a typical communication flow between two devices, a
    client and a server, and the data passing through the different layers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.6 – The communication between a client and a server](img/Figure_02_06_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.6 – The communication between a client and a server
  prefs: []
  type: TYPE_NORMAL
- en: The physical layer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Underneath all of the previous layers is the **physical layer**, which is responsible
    for actually sending raw data (bits) over a physical medium, such as a cable,
    an optical fiber, a Wi-Fi connection, or even a Bluetooth communication.
  prefs: []
  type: TYPE_NORMAL
- en: This layer defines how signals are sent and received, as well as how these signals
    are modulated and demodulated into usable digital information.
  prefs: []
  type: TYPE_NORMAL
- en: Though we have discussed the physical layer here, it is not actually included
    in the TCP/IP suite, which is why it is slightly separated from the other layers
    shown in *Figure 2**.5*.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you know how data is packaged and how the TCP/IP suite is organized,
    you will learn about the main problems and pitfalls that can happen over the network
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding network issues
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With so much data involved and moving around physical media, there is a significant
    risk of running into serious issues. As such, it is important to be aware of these
    potential problems and how to best avoid them or limit their impact.
  prefs: []
  type: TYPE_NORMAL
- en: Security
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first issue to consider when dealing with computer networking is **security**.
    Without proper security protocols in place, it’s possible for malicious people
    to gain access to sensitive information.
  prefs: []
  type: TYPE_NORMAL
- en: Getting your credit card information stolen while in-app purchasing the latest
    skin for your character or your login credentials stolen from your Steam account
    is something you definitely don’t want to experience!
  prefs: []
  type: TYPE_NORMAL
- en: Packet loss
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Packet loss** occurs when data packets sent from one device to another are
    lost or corrupted and is a major issue that can cause significant disruption to
    any network. This type of disruption can lead to a slow or even complete breakdown
    in communication, resulting in a negative gaming experience for players.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider, for instance, if your perfect shoot at a berserker opponent who is
    trying to leap at you is lost over the network: you would be in a great deal of
    trouble at that moment!'
  prefs: []
  type: TYPE_NORMAL
- en: Latency
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Latency** in computer networking is represented by the time it takes for
    a data packet to travel from one designated point to its destination and is usually
    measured in milliseconds. This can be caused by a variety of factors, such as
    slow internet connections, outdated hardware, or congested networks.'
  prefs: []
  type: TYPE_NORMAL
- en: In a multiplayer game, latency should be kept as low as possible as it can have
    a significant impact on the performance of the game you are playing. As an example,
    in a first-person shooter game where fast reflexes are essential, having your
    character killed due to a slow connection can ruin all the fun!
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: While dealing with security and data loss are not topics discussed in this book,
    you’ll learn about latency and how to handle it in *Part 4* of this book. However,
    if you are interested in delving deeper into the topics of network security and
    data loss, Packt offers an extensive collection of books on the subject.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have a basic grip on the main issues when managing data over the
    network, it’s time to move into Unreal Engine and get an introduction to how this
    software handles networking.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the Unreal Engine multiplayer system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we already saw in the previous sections, in a networked system, it is essential
    to consider what data is sent and how it is sent, as this can drastically influence
    the performance and overall experience of the game.
  prefs: []
  type: TYPE_NORMAL
- en: Unreal Engine features a powerful networking framework, which is used in some
    of the most popular online games in the world. This section provides an overview
    of the concepts that power the Unreal Engine multiplayer framework, as well as
    their usage in multiplayer gameplay.
  prefs: []
  type: TYPE_NORMAL
- en: Network modes and server types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In Unreal Engine, a computer’s relationship to a multiplayer session is referred
    to as a **network mode**. An Unreal game can be set as one of the following network
    modes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Client**: In this mode, the computer will act as a client, connecting to
    a server in a network multiplayer session.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Standalone**: This mode is strictly used for non-networked games (single
    players or local multiplayer) and will not accept any connections from remote
    clients.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dedicated Server**: In this mode, the computer will run as a server hosting
    a network multiplayer session and will accept connections from remote clients.
    As a dedicated server, everything will be optimized for persistent and secure
    management, so will ignore any player-oriented features, such as graphics, audio,
    or input.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Listen Server**: In this mode, the computer will run as a server accepting
    remote clients, but also local players. This means it will sacrifice some performance,
    but will allow a computer to act both as a server and as a client. This mode can
    be thought of as a combination of the client and dedicated server modes, allowing
    you to participate in a game as a client while simultaneously hosting the network.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Listen servers have gained popularity due to their ease of setup and ability
    to provide both casual and competitive multiplayer gaming in a LAN. As players
    hosting the session will be playing directly on the server, they will usually
    have an advantage over the other players. However, as servers are also run as
    clients, they are not suitable for highly competitive games or games with a large
    amount of data involved. Additionally, listen servers, which allow a client to
    host a game and have other clients join to play, create potential vulnerabilities
    for all clients on the network. This is because the client hosting the network
    may engage in malicious actions, such as cheating or granting themselves an unfair
    advantage over other players.
  prefs: []
  type: TYPE_NORMAL
- en: The replication system
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In UE, the process of reproducing game state information between the server
    and clients is called **replication**. The replication system allows for high-level
    abstraction and low-level customization, making it simpler to manage any scenarios
    that may arise when creating an Unreal Engine project intended for multiple users
    at once.
  prefs: []
  type: TYPE_NORMAL
- en: If replication is enabled on an Actor, all instances of the game running on
    different machines will be synchronized. On the other hand, if replication is
    disabled, the Actor will only update its functions on the machine where it was
    spawned.
  prefs: []
  type: TYPE_NORMAL
- en: Some of the most common elements that you will probably replicate during a multiplayer
    game development may be creation/destruction, movement, variables, and components.
  prefs: []
  type: TYPE_NORMAL
- en: There are, however, other elements that should not be replicated at all as they
    will be running separately on the client, such as skeletal and static meshes,
    materials, particle systems, and sound emitters. Usually, the server does not
    need to know about these kinds of things, considering the nature of these elements
    (i.e., purely aesthetical).
  prefs: []
  type: TYPE_NORMAL
- en: Network role
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When playing a game online with multiple players, it is important to understand
    which device is in control of each Actor. This is determined by the network role
    of the Actor itself.
  prefs: []
  type: TYPE_NORMAL
- en: The device with an **authoritative** Actor role is the one that has control
    of the Actor’s state, and it is responsible for replicating information about
    the Actor to other players in real time.
  prefs: []
  type: TYPE_NORMAL
- en: A copy of the same Actor located on a remote machine that is not authoritative
    is defined as a **remote proxy** and will receive all replicated information from
    the authoritative one.
  prefs: []
  type: TYPE_NORMAL
- en: In UE, the authority is typically held by the server, meaning that information
    is usually *from* the server *to* the clients. This model is known as **server-authoritative**.
  prefs: []
  type: TYPE_NORMAL
- en: Pawns and PlayerControllers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you may already know, in UE, a Pawn (or, more often, a Character) can be
    owned by a PlayerController. This is also true for multiplayer games, where a
    PlayerController is created for each connected player.
  prefs: []
  type: TYPE_NORMAL
- en: During gameplay, any Actor that has been assigned to a particular Pawn is automatically
    associated with that Pawn’s owning client. As an example, a Pawn may possess an
    item such as a rifle or a sword Actor, and this item will be held owned by the
    same connection that owns the Pawn.
  prefs: []
  type: TYPE_NORMAL
- en: Relevance and priority
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To determine whether it is beneficial to replicate an Actor during a multiplayer
    game, **relevance** is taken into account. Actors that are deemed not relevant
    will be excluded during replication. This method is used to reduce the amount
    of data that is sent over the network, thereby increasing the efficiency of data
    replication.
  prefs: []
  type: TYPE_NORMAL
- en: When bandwidth is limited, the most important Actors are selected first when
    replicating data. Each Actor has an assigned **priority** value, which is used
    to determine the order of replication.
  prefs: []
  type: TYPE_NORMAL
- en: Remote Procedure Calls
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: During a multiplayer session, a function can be replicated through a **Remote
    Procedure Call** (**RPC**). RPCs can be invoked from any machine connected to
    the network, but their implementation will take place on a particular machine
    that is part of the network session.
  prefs: []
  type: TYPE_NORMAL
- en: An RPC can be sent from the server, the client, or to multiple clients (**multicast**).
    An RPC can either be guaranteed to reach its destination (**reliable**) or not
    (**unreliable**).
  prefs: []
  type: TYPE_NORMAL
- en: In this section, I provided some of the key definitions regarding the UE multiplayer
    system. The information here may seem quite dense and things may seem a bit overwhelming.
    But don’t be afraid – you just finished the second chapter and the entire book
    is available to help you learn it all!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about the fundamental concepts of computer networking
    and the key players involved in successful network communication. Additionally,
    you were introduced to the Internet Protocol and the layers that make up the TCP/IP
    suite with the main issues that may arise during a network connection. Finally,
    you were presented with the Unreal multiplayer system and the key features offered
    by the framework.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will start to gain practical experience with UE by
    building a prototype of a multiplayer game and testing its features on your computer.
  prefs: []
  type: TYPE_NORMAL
- en: Credits
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The diagrams in this chapter were created with the help of *Made Lineal* icons
    from Flaticon ([https://www.flaticon.com/](https://www.flaticon.com/)).
  prefs: []
  type: TYPE_NORMAL
