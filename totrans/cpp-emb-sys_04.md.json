["```cpp\narm-none-eabi-g++ -E main.cpp \n```", "```cpp\n#include <array>\nint sum(const std::array<int, 4> &arr) {\n    int ret;\n    for(int elem: arr) {\n        ret += elem;\n    }\n    return ret;\n} \n```", "```cpp\n#include <array>\n#include <cstdio>\n#include \"gtest/gtest.h\"\ntemplate <class T, std::size_t N> struct ring_buffer {\n  std::array<T, N> arr;\n  std::size_t write_idx = 0;\n  std::size_t read_idx = 0;\n  std::size_t count = 0;\n  void push(T t) {\n    arr.at(write_idx) = t;\n    write_idx = (write_idx + 1) % N;\n    if (count < N) {\n      count++;\n    } else {\n      read_idx = (read_idx + 1) % N;\n    }\n  }\n  T pop() {\n    if (count == 0) {\n      return T{};\n    }\n    T value = arr.at(read_idx);\n    read_idx = (read_idx + 1) % N;\n    --count;\n    return value;\n  }\n  bool is_empty() const {\n      return count == 0;\n  }\n  std::size_t get_count() const {\n      return count;\n  }\n};\nTEST(RingBufferInt, PushPop) {\n    ring_buffer<int, 2> rb;\n    rb.push(1);\n    rb.push(2);\n    EXPECT_EQ(rb.pop(), 1);\n    EXPECT_EQ(rb.pop(), 2);\n}\nTEST(RingBufferInt, GetCount) {\n    ring_buffer<int, 20> rb;\n    for(int i = 0; i < 50; i++) {\n        rb.push(i);\n    }\n    EXPECT_EQ(rb.get_count(), 20);\n    for(int i = 0; i < 10; i++) {\n        rb.pop();\n    }\n    EXPECT_EQ(rb.get_count(), 10);\n}\nint main() {\n  testing::InitGoogleTest();\n  return RUN_ALL_TESTS();\n} \n```"]