["```cpp\nvoid AController::Possess(APawn* InPawn)\n```", "```cpp\nvoid AController::UnPossess()\n```", "```cpp\nCell Size: 5.0f\nAgent Height: 192.0f\n```", "```cpp\n    protected:\n      // Called when the game starts or when spawned\n      virtual void BeginPlay() override;\n    public:\n      // Called every frame\n      virtual void Tick(float DeltaTime) override;\n    ```", "```cpp\n    // Called when the game starts or when spawned\n    void APlayerProjectile::BeginPlay()\n    {\n      Super::BeginPlay();\n    }\n    // Called every frame\n    void APlayerProjectile::Tick(float DeltaTime)\n    {\n      Super::Tick(DeltaTime);\n    }\n    ```", "```cpp\n    public:\n      //Sphere collision component\n      UPROPERTY(VisibleDefaultsOnly, Category = \n      Projectile)\n      class USphereComponent* CollisionComp;\n\n    private:\n      //Projectile movement component\n      UPROPERTY(VisibleAnywhere, BlueprintReadOnly, \n      Category = Movement, meta = \n      (AllowPrivateAccess = \"true\"))\n      class UProjectileMovementComponent* \n      ProjectileMovement;\n      //Static mesh component\n      UPROPERTY(EditAnywhere, Category = Projectile)\n      class UStaticMeshComponent* MeshComp;\n    ```", "```cpp\n    UFUNCTION()\n    void OnHit(UPrimitiveComponent* HitComp, AActor* OtherActor, \n      UPrimitiveComponent* OtherComp, FVector \n      NormalImpulse, const FHitResult& \n      Hit);\n    ```", "```cpp\n    void APlayerProjectile::OnHit(UPrimitiveComponent* HitComp, AActor* \n      OtherActor, UPrimitiveComponent* OtherComp, FVector \n      NormalImpulse, const \n      FHitResult& Hit)\n    {\n    }\n    ```", "```cpp\n    #include \"GameFramework/ProjectileMovementComponent.h\"\n    #include \"Components/SphereComponent.h\"\n    #include \"Components/StaticMeshComponent.h\"\n    ```", "```cpp\n    PrimaryActorTick.bCanEverTick = true;\n    ```", "```cpp\n    CollisionComp = CreateDefaultSubobject\n      <USphereComponent>(TEXT(\"SphereComp\"));\n    CollisionComp->InitSphereRadius(15.0f);\n    CollisionComp->BodyInstance.SetCollisionProfileName(\"BlockAll\");\n    CollisionComp->OnComponentHit.AddDynamic(this, &APlayerProjectile::OnHit);\n    ```", "```cpp\nvoid APlayerProjectile::OnHit(UPrimitiveComponent* HitComp, AActor* \n  OtherActor, UPrimitiveComponent* OtherComp, FVector \n  NormalImpulse, const \n  FHitResult& Hit)\n{\n}\n```", "```cpp\n    // Set as root component\n    RootComponent = CollisionComp;\n    ```", "```cpp\n    // Use a ProjectileMovementComponent to govern this projectile's movement\n    ProjectileMovement = \n      CreateDefaultSubobject<\n      UProjectileMovementComponent>(\n      TEXT(\"ProjectileComp\"))\n      ;\n    ProjectileMovement->UpdatedComponent = CollisionComp;\n    ProjectileMovement->ProjectileGravityScale = 0.0f;\n    ProjectileMovement->InitialSpeed = 800.0f;\n    ProjectileMovement->MaxSpeed = 800.0f;\n    ```", "```cpp\n    MeshComp = \n    CreateDefaultSubobject<UStaticMeshComponent>(TEXT(\"MeshComp\"));\n    MeshComp->AttachToComponent(RootComponent, \n      FAttachmentTransformRules::KeepWorldTransform);\n    ```", "```cpp\n    InitialLifeSpan = 3.0f;\n    ```", "```cpp\n    Location:(X=0.000000,Y=0.000000,Z=-10.000000)\n    Scale: (X=0.200000,Y=0.200000,Z=0.200000)\n    ```"]