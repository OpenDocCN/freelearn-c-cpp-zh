["```cpp\nchar *gets ( char *str);\n```", "```cpp\nchar *fgets(char *str, int numb, FILE *src);\n```", "```cpp\nfpurge(stdin)\n```", "```cpp\nint sprintf(char *str, const char *format, ...)\n```", "```cpp\nint snprintf(char *str, size_t numb, const char *format, ...);\n```", "```cpp\nchar* strcpy(char* dest, const char* src);\n```", "```cpp\nchar * strncpy ( char * dest, const char *src, size_t numb);\n```", "```cpp\n//getsproblem.c\n\n#include <stdio.h>\n\nstruct users {\n  char name[10];\n  int orderid;\n};\nint main(void) {\n  struct users user1, user2;\n  printf(\"Enter order number \");\n  scanf(\"%d\", & user1.orderid);\n  fpurge(stdin);\n  printf(\"Enter first user name \");\n  gets(user1.name);\n  printf(\"Enter order number \");\n  scanf(\"%d\", & user2.orderid);\n  fpurge(stdin);\n  printf(\"Enter second user name \");\n  gets(user2.name);\n  printf(\"Information of first user - Name %s, Order number %d\\n\", \n   user1.name, user1.orderid);\n  printf(\"Information of second user - Name %s, Order number %d\\n\", \n   user2.name, user2.orderid);\n}\n```", "```cpp\n//getssolved.c\n\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nstruct users {\n  char name[10];\n  int orderid;\n};\n\nint main(void) {\n  struct users user1;\n  int n;\n  printf(\"Enter order number \");\n  scanf(\"%d\", & user1.orderid);\n  fpurge(stdin);\n  printf(\"Enter user name \");\n  fgets(user1.name, sizeof(user1.name), stdin);\n  n = strlen(user1.name) - 1;\n  if (user1.name[n] == '\\n')\n    user1.name[n] = '\\0';\n  printf(\"Information of the user is - Name %s, Order number %d\\n\", \n   user1.name, user1.orderid);\n}\n```", "```cpp\n//strcpyproblem.c\n\n#include <stdio.h>\n#include <string.h>\n\nstruct users {\n  char name[10];\n  int orderid;\n};\n\nint main(void) {\n  struct users user1;\n  char userid[] = \"administrator\";\n  user1.orderid = 101;\n  strcpy(user1.name, userid);\n  printf(\"Information of the user - Name %s, Order number %d\\n\", \n   user1.name, user1.orderid);\n}\n```", "```cpp\n//strcpysolved.c\n\n#include <stdio.h>\n#include <string.h>\n\nstruct users {\n  char name[10];\n  int orderid;\n};\n\nint main(void) {\n  int strsize;\n  struct users user1;\n  char userid[] = \"administrator\";\n  user1.orderid = 101;\n  strsize = sizeof(user1.name);\n  strncpy(user1.name, userid, strsize);\n  if (user1.name[strsize - 1] != '\\0')\n    user1.name[strsize - 1] = '\\0';\n  printf(\"Information of the user - Name %s, Order number %d\\n\", \n   user1.name, user1.orderid);\n}\n```", "```cpp\n//sprintfproblem.c\n\n#include <stdio.h>\n\nstruct users {\n  char name[10];\n  int orderid;\n};\n\nint main(void) {\n  struct users user1;\n  user1.orderid = 101;\n  sprintf(user1.name, \"%s\", \"bintuharwani\");\n  printf(\"Information of the user - Name %s, Order number \n   %d\\n\", user1.name, user1.orderid);\n}\n```", "```cpp\n//sprintfsolved.c\n\n#include <stdio.h>\n\nstruct users {\n  char name[10];\n  int orderid;\n};\n\nint main(void) {\n  struct users user1;\n  user1.orderid = 101;\n  snprintf(user1.name, sizeof(user1.name), \"%s\", \"bintuharwani\");\n  printf(\"Information of the user - Name %s, Order number \n   %d\\n\", user1.name, user1.orderid);\n}\n```", "```cpp\n//fileproblem.c\n\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <unistd.h>\n\n#define BUFFSIZE 255\n\nvoid main(int argc, char * argv[]) {\n  FILE * fp;\n  char str[BUFFSIZE];\n  if (symlink(\"file2.txt\", \"file1.txt\") != 0) {\n    perror(\"symlink() error\");\n    unlink(\"file2.txt\");\n    exit(1);\n  } else {\n    fp = fopen(\"file1.txt\", \"w\");\n    if (fp == NULL) {\n      perror(\"An error occurred in creating the file\\n\");\n      exit(1);\n    }\n    printf(\"Enter content for the file\\n\");\n    gets(str);\n    while (strcmp(str, \"stop\") != 0) {\n      fputs(str, fp);\n      gets(str);\n    }\n  }\n  fclose(fp);\n}\n```", "```cpp\n//filesolved.c\n\n#include <stdio.h>\n#include <string.h>\n#include <fcntl.h>\n#include <stdlib.h>\n#include <unistd.h>\n\n#define BUFFSIZE 255\n\nvoid main(int argc, char * argv[]) {\n  int ifp;\n  FILE * fp;\n  char str[BUFFSIZE];\n  if (symlink(\"file2.txt\", \"file1.txt\") != 0) {\n    perror(\"symlink() error\");\n    unlink(\"file2.txt\");\n    exit(1);\n  } else {\n    unlink(\"file1.txt\");\n    ifp = open(\"file1.txt\", O_WRONLY | O_CREAT | O_EXCL, 0600);\n    if (ifp == -1) {\n      perror(\"An error occurred in creating the file\\n\");\n      exit(1);\n    }\n    fp = fdopen(ifp, \"w\");\n    if (fp == NULL) {\n      perror(\"Could not be linked to the stream\\n\");\n      exit(1);\n    }\n    printf(\"Enter content for the file\\n\");\n    gets(str);\n    while (strcmp(str, \"stop\") != 0) {\n      fputs(str, fp);\n      gets(str);\n    }\n  }\n  fclose(fp);\n}\n```"]