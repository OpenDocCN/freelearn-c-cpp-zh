["```cpp\n    \"<UE5 Install Folder>\\Engine\\Binaries\\Win64\\UnrealEditor.exe\" \n    \"<UProject Location>\" <Map Name> -server -game -log\n    ```", "```cpp\n\"C:\\Program Files\\Epic \nGames\\UE_5.0\\Engine\\Binaries\\Win64\\UnrealEditor.exe\" \n\"D:\\TestProject\\TestProject.uproject\" TestMap -server -game -log\n```", "```cpp\n    \"<UE5 Install Folder>\\Engine\\Binaries\\Win64\\UnrealEditor.exe\" \n    \"<UProject Location>\" <Map Name>?Listen -game\n    ```", "```cpp\n\"C:\\Program Files\\Epic \nGames\\UE_5.0\\Engine\\Binaries\\Win64\\UnrealEditor.exe\" \n\"D:\\TestProject\\TestProject.uproject\" TestMap?Listen -game\n```", "```cpp\n    \"<Project Name>.exe\" <Map Name>?Listen -game\n    ```", "```cpp\n\"D:\\Packaged\\TestProject\\TestProject.exe\" TestMap?Listen –game\n```", "```cpp\n    open <Server IP Address>\n    ```", "```cpp\nopen 194.56.23.4\n```", "```cpp\n    PlayerController->ConsoleCommand(\"open <Server IP Address>\");\n    ```", "```cpp\nPlayerController->ConsoleCommand(\"open 194.56.23.4\");\n```", "```cpp\n    \"<UE5 Install Folder>\\Engine\\Binaries\\Win64\\UnrealEditor.exe\" \n    \"<UProject Location>\" <Server IP Address> -game\n    ```", "```cpp\n\"C:\\Program Files\\Epic Games\\UE_5.0\\Engine\\Binaries\\Win64\\UnrealEditor.exe\" \"D:\\TestProject\\TestProject.uproject\" 194.56.23.4 -game\n```", "```cpp\n    \"<Project Name>.exe\" <Server IP Address>\n    ```", "```cpp\n\"D:\\Packaged\\TestProject\\TestProject.exe\" 194.56.23.4\n```", "```cpp\n    \"<Packaged Path>\\Windows\\TestMultiplayer.exe\" \n      ThirdPersonMap?Listen -server\n    ```", "```cpp\nclass UNetConnection* APawn::GetNetConnection() const\n{\n  // If we have a controller, then use its net connection\n  if ( Controller )\n  {\n    return Controller->GetNetConnection();\n  }\n  return Super::GetNetConnection();\n}\n```", "```cpp\nUNetConnection* AActor::GetNetConnection() const\n{\n  return Owner ? Owner->GetNetConnection() : nullptr;\n}\n```", "```cpp\nENetRole MyLocalRole = GetLocalRole();\nENetRole MyRemoteRole = GetRemoteRole();\nFString String;\nif(MyLocalRole == ROLE_Authority)\n{\n  if(MyRemoteRole == ROLE_AutonomousProxy)\n  {\n    String = \"This version of the actor is the authority \n    and it's being controlled by a player on its client\";\n  }\n  else if(MyRemoteRole == ROLE_SimulatedProxy)\n  {\n    String = \"This version of the actor is the authority \n    but it's not being controlled by a player on its \n    client\";\n  }\n}\nelse String = \"This version of the actor isn't the authority\";\nGEngine->AddOnScreenDebugMessage(-1, 0.0f, FColor::Red, String);\n```", "```cpp\n    #define ROLE_TO_STRING(Value) FindObject<UEnum>(ANY_PACKAGE, TEXT(\"ENetRole\"), true)->GetNameStringByIndex(static_cast<int32>(Value))\n    ```", "```cpp\n    UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = \"Ownership Test Actor\")\n    UStaticMeshComponent* Mesh;\n    UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = \"Ownership Test Actor\")\n    float OwnershipRadius = 400.0f;\n    ```", "```cpp\n    #include \"OwnershipRoles.h\"\n    #include \"OwnershipRolesCharacter.h\"\n    #include \"Kismet/GameplayStatics.h\"\n    ```", "```cpp\n    Mesh = CreateDefaultSubobject<UStaticMeshComponent>(\"Mesh\");\n    RootComponent = Mesh;\n    ```", "```cpp\n    bReplicates = true;\n    ```", "```cpp\n    DrawDebugSphere(GetWorld(), GetActorLocation(), OwnershipRadius, 32, FColor::Yellow);\n    ```", "```cpp\n    if (HasAuthority())\n    {\n      AActor* NextOwner = nullptr;\n      float MinDistance = OwnershipRadius;\n      TArray<AActor*> Actors;\n      UGameplayStatics::GetAllActorsOfClass(this,\n        AOwnershipRolesCharacter::StaticClass(), Actors);\n      for (AActor* Actor : Actors)\n      {\n        const float Distance = GetDistanceTo(Actor);\n        if (Distance <= MinDistance)\n        {\n          MinDistance = Distance;\n          NextOwner = Actor;\n        }\n      }\n      if (GetOwner() != NextOwner)\n      {\n        SetOwner(NextOwner);\n      }\n    }\n    ```", "```cpp\n    const FString LocalRoleString = ROLE_TO_STRING(GetLocalRole());\n    const FString RemoteRoleString = ROLE_TO_STRING(GetRemoteRole());\n    const FString OwnerString = GetOwner() != nullptr ? GetOwner()->GetName() : TEXT(\"No Owner\");\n    const FString ConnectionString = GetNetConnection() != nullptr ? TEXT(\"Valid Connection\") : TEXT(\"Invalid Connection\");\n    ```", "```cpp\n    const Fstring Values = Fstring::Printf(TEXT(\"LocalRole = %s\\nRemoteRole = %s\\nOwner = %s\\nConnection = %s\"), \n      *LocalRoleString, *RemoteRoleString, *OwnerString, \n      *ConnectionString);\n    DrawDebugString(GetWorld(), GetActorLocation(), Values, nullptr, Fcolor::White, 0.0f, true);\n    ```", "```cpp\n    virtual void Tick(float DeltaTime) override;\n    ```", "```cpp\n    #include \"OwnershipRoles.h\"\n    ```", "```cpp\n    void AOwnershipRolesCharacter::Tick(float DeltaTime)\n    {\n      Super::Tick(DeltaTime);\n    }\n    ```", "```cpp\n    const FString LocalRoleString = ROLE_TO_STRING(GetLocalRole());\n    const FString RemoteRoleString = ROLE_TO_STRING(GetRemoteRole());\n    const FString OwnerString = GetOwner() != nullptr ? GetOwner()- >GetName() : TEXT(\"No Owner\");\n    const FString ConnectionString = GetNetConnection() != nullptr ? \n      TEXT(\"Valid Connection\") : TEXT(\"Invalid \n      Connection\");\n    ```", "```cpp\n    const FString Values = FString::Printf(TEXT(\"LocalRole = \n      %s\\nRemoteRole = %s\\nOwner = %s\\nConnection = %s\"), \n      *LocalRoleString, *RemoteRoleString, *OwnerString, \n      *ConnectionString);\n    DrawDebugString(GetWorld(), GetActorLocation(), Values, nullptr, FColor::White, 0.0f, true);\n    ```", "```cpp\nUPROPERTY(Replicated) \nfloat Health = 100.0f; \n```", "```cpp\nUPROPERTY(ReplicatedUsing=OnRep_Health) \nfloat Health = 100.0f;\nUFUNCTION() \nvoid OnRep_Health()\n{\n  UpdateHUD(); \n}\n```", "```cpp\nDOREPLIFETIME(<Class Name>, <Replicated Variable Name>); \n```", "```cpp\nvoid AVariableReplicationActor::GetLifetimeReplicatedProps(TArray< \n  FLifetimeProperty >& OutLifetimeProps) const\n{\n  Super::GetLifetimeReplicatedProps(OutLifetimeProps);\n  DOREPLIFETIME(AVariableReplicationActor, Health);\n}\n```", "```cpp\nDOREPLIFETIME_CONDITION(<Class Name>, <Replicated Variable Name>, <Condition>); \n```", "```cpp\nvoid AVariableReplicationActor::GetLifetimeReplicatedProps(TArray< \n  FLifetimeProperty >& OutLifetimeProps) const\n{\n  Super::GetLifetimeReplicatedProps(OutLifetimeProps);\n  DOREPLIFETIME_CONDITION(AVariableReplicationActor, \n  Health, COND_OwnerOnly);\n}\n```", "```cpp\n    UPROPERTY(Replicated) \n    float A = 100.0f; \n    UPROPERTY(ReplicatedUsing = OnRepNotify_B) \n    int32 B; \n    ```", "```cpp\n    virtual void Tick(float DeltaTime) override;\n    ```", "```cpp\n    UFUNCTION() \n    void OnRepNotify_B(); \n    ```", "```cpp\n    #include \"Net/UnrealNetwork.h\"\n    ```", "```cpp\n    void AVariableReplicationCharacter::GetLifetimeReplicatedProps (TArray<FLifetimeProperty >& OutLifetimeProps) const\n    {\n      Super::GetLifetimeReplicatedProps(OutLifetimeProps);\n    }\n    ```", "```cpp\n    DOREPLIFETIME(AVariableReplicationCharacter, A);\n    ```", "```cpp\n    DOREPLIFETIME_CONDITION(AVariableReplicationCharacter, B, COND_OwnerOnly);\n    ```", "```cpp\n    void AVariableReplicationCharacter::Tick(float DeltaTime) \n    {\n      Super::Tick(DeltaTime);\n    }\n    ```", "```cpp\n    if (HasAuthority()) \n    { \n      A++; \n      B++; \n    } \n    ```", "```cpp\n    const FString Values = FString::Printf(TEXT(\"A = %.2f    B = %d\"), A, B); \n    DrawDebugString(GetWorld(), GetActorLocation(), Values, nullptr, FColor::White, 0.0f, true);\n    ```", "```cpp\n    void AVariableReplicationCharacter::OnRepNotify_B() \n    {\n      const FString String = FString::Printf(TEXT(\"B was \n      changed by the server and is now %d!\"), B); \n      GEngine->AddOnScreenDebugMessage(-1, 0.0f, \n      FColor::Red,String); \n    }\n    ```"]