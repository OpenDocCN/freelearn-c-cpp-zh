["```cpp\nQGeoSatelliteInfoSource *source = QGeoSatelliteInfoSource::createDefaultSource(this);\n```", "```cpp\nQStringList geoSources = QGeoSatelliteInfoSource::availableSources();\nQGeoSatelliteInfoSource *source = QGeoSatelliteInfoSource::createSource(geoSources.at(0),this);\n```", "```cpp\nconnect(source, QOverload<QGeoSatelliteInfoSource::Error>::\n    of(&QGeoSatelliteInfoSource::error), \n    this, &SomeClass::error);\n```", "```cpp\nconnect(source, SIGNAL(satellitesInViewUpdated(QList<QGeoSatelliteInfo>)),\n    this, SLOT(satellitesInViewUpdated(QList<QGeoSatelliteInfo>)));\n```", "```cpp\nvoid SomeClass::satellitesInViewUpdated(const QList<QGeoSatelliteInfo> &infos)\n{\n    if (infos.count() > 0)\n        qWarning() << \"Number of satellites in view:\" << infos.count();\n\n    foreach (const QGeoSatelliteInfo &info, infos) {\n        qWarning() << \"    \"\n            << \"satelliteIdentifier\" << info.satelliteIdentifier()\n            << \"signalStrength\" << info.signalStrength()\n            << (info.hasAttribute(QGeoSatelliteInfo::Elevation) ?  \"Elevation \"\n+ QString::number(info.attribute(QGeoSatelliteInfo::Elevation)) : \"\")\n            << (info.hasAttribute(QGeoSatelliteInfo::Elevation) ?  \"Azimuth \" +\nQString::number(info.attribute(QGeoSatelliteInfo::Azimuth)) : \"\");\n    }\n}\n```", "```cpp\nQGeoPositionInfoSource *geoSource = QGeoPositionInfoSource::createDefaultSource(this);\n```", "```cpp\nconnect(geoSource, &QGeoPositionInfoSource::positionUpdated,\n    this, &MainWindow::positionUpdated);\n```", "```cpp\n geoSource->startUpdates();\n```", "```cpp\nif (positionInfo.hasAttribute(QGeoPositionInfo::MagneticVariation)\n    qreal magneticVariation = positionInfo.attribute(QGeoPositionInfo::MagneticVariation);\n```", "```cpp\nQGeoCoordinate coords = positionInfo.coordinate();\nQString(\"Latitude %1\\n\").arg(coords.latitude());\nQString(\"Longitude %1\\n\").arg(coords.longitude()); \n\n​if (coords.type() == QGeoCoordinate::Coordinate3D)\n    QString(\"Altitude %1\\n\").arg(coords.altitude())\n```", "```cpp\n    PositionSource {\n        id: positionSource\n        updateInterval: 1000\n        active: true\n```", "```cpp\n        onPositionChanged: {\n            var coord = positionSource.position.coordinate;\n            console.log(\"Coordinate:\", coord.longitude, coord.latitude);\n            latitudeLabel.text = \"Latitude: \" + coord.latitude;\n            longitudeLabel.text = \"Longitude: \" + coord.longitude;\n            if (positionSource.position.altitudeValid)\n                altitudeLabel.text = \"Altitude: \" + coord.altitude;\n      }\n }\n```", "```cpp\nimport QtLocation 5.12\nimport QtPositioning 5.12\n```", "```cpp\n    Map {\n        anchors.fill: parent\n        plugin: Plugin {\n            name: \"osm\" \n        }\n        center: QtPositioning.coordinate(-28.0, 153.4)\n        zoomLevel: 10\n    }\n```", "```cpp\n        MapCircle {\n             center {\n                 latitude: -28.0\n                 longitude: 153.4\n             }\n             radius: 5000.0\n             border.color: 'red'\n             border.width: 3\n             opacity: 0.5\n         }\n```", "```cpp\nPluginParameter {\n    name: 'osm.mapping.highdpi_tiles'\n    value: true\n}\n```", "```cpp\nPluginParameter { name: \"osm.useragent\"; value: \"Mobile and Embedded Development with Qt5\"; }\n```", "```cpp\n        RouteQuery {\n            id: routeQuery\n        }\n        RouteModel {\n            id: routeModel\n            plugin : map.plugin\n            query: routeQuery\n        }\n```", "```cpp\n        MapItemView {\n            id: mapView\n            model: routeModel\n            delegate: routeDelegate\n        }\n        Component {\n            id: routeDelegate\n            MapRoute {\n                id: route\n                route: routeData\n                line.color: \"#46a2da\"\n                line.width: 5\n                smooth: true\n                opacity: 0.8\n            }\n        }\n```", "```cpp\n​property variant startCoordinate: QtPositioning.coordinate(-28.0, 153.4)\nproperty variant endCoordinate: QtPositioning.coordinate(-27.579744, 153.100175)\n```", "```cpp\nComponent.onCompleted: {\n    routeQuery.clearWaypoints();\n    routeQuery.addWaypoint(startCoordinate)\n    routeQuery.addWaypoint(endCoordinate)\n    routeQuery.travelModes = RouteQuery.CarTravel\n    routeQuery.routeOptimizations = RouteQuery.FastestRoute\n    routeModel.update();\n }\n```", "```cpp\nPlaceSearchModel {\n    id: searchModel\n    plugin: mapPlugin\n    searchTerm: \"coffee\"\n    searchArea: QtPositioning.circle(startCoordinate)\n    Component.onCompleted: update()\n}\n```", "```cpp\nMapItemView {\n    id: searchView\n    model: searchModel\n    delegate: MapQuickItem {\n        coordinate: place.location.coordinate\n        anchorPoint.x: image.width * 0.5\n        anchorPoint.y: image.height\n        sourceItem: Column {\n            Image { id: image; source: \"map-pin.png\" }\n            Text { text: title; font.bold: true; color: \"red\"}\n        }\n    }\n}\n```"]