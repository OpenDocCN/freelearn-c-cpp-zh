["```cpp\nQLowEnergyAdvertisingData *leAdd = new QLowEnergyAdvertisingData;\n```", "```cpp\nleAdd->setDiscoverability(\nQLowEnergyAdvertisingData::DiscoverabilityGeneral);\n```", "```cpp\nleAdd->setLocalName(\"SensorServer\");\n```", "```cpp\nQList<QBluetoothUuid> servicesList \n<< QBluetoothUuid::EnvironmentalSensing;\nleAdd->setServices(servicesList);\n```", "```cpp\nQLowEnergyCharacteristicData chData;\nchData.setUuid(QBluetoothUuid::TemperatureMeasurement);\nchData.setValue(QByteArray(2,0));\nchData.setProperties(QLowEnergyCharacteristic::Notify);\nconst QLowEnergyDescriptorData descriptorData(QBluetoothUuid::ClientCharacteristicConfiguration, QByteArray(2, 0));\nchData.addDescriptor(descriptorData);\n```", "```cpp\nQLowEnergyServiceData serviceData;\nserviceData.setUuid(QBluetoothUuid::Temperature);\nserviceData.setType(QLowEnergyServiceData::ServiceTypePrimary);\nserviceData.addCharacteristic(chData);\n```", "```cpp\nQLowEnergyCharacteristic characteristic = service->characteristic(QLowEnergyCharacteristic::TemperatureMeasurement);\nquint8 temperature = 35;\n\nQByteArray currentTempValue;\nvalue.append(char(0));\nvalue.append(char(temperature));\nservice->writeCharacteristic(characteristic, currentTempValue);\n```", "```cpp\ncontroller->startAdvertising(QLowEnergyAdvertisingParameters(), leAdd, leAdd);\n```", "```cpp\nQBluetoothDeviceDiscoveryAgent *discoveryAgent = new QBluetoothDeviceDiscoveryAgent(this); connect(discoveryAgent, SIGNAL(deviceDiscovered(QBluetoothDeviceInfo)),\n          this, SLOT(newDevice(QBluetoothDeviceInfo)));\ndiscoveryAgent->start(QBluetoothDeviceDiscoveryAgent::LowEnergyMethod));\n```", "```cpp\nconnect(discoveryAgent, QOverload<QBluetoothDeviceDiscoveryAgent::Error>::of(&QBluetoothDeviceDiscoveryAgent::error), this, &SomeClass::deviceDiscoveryError);\n```", "```cpp\nSomeClass::newDevice(const QBluetoothDeviceInfo &info)\n{\n    QBluetoothLocalDevice::Pairing pairingStatus = localDevice->pairingStatus(info.address()); \n    if (pairingStatus == QBluetoothLocalDevice::Unpaired) {\n        QMessageBox msgBox; \n        msgBox.setText(\"Bluetooth Pairing.\"); \n        msgBox.setInformativeText(\"Do you want to pair with device: \" + item->data(Qt::UserRole).toString()); \n        msgBox.setStandardButtons(QMessageBox::Ok | QMessageBox::Cancel); \n        msgBox.setDefaultButton(QMessageBox::Cancel); \n        int ret = msgBox.exec(); \n        if (ret == QMessageBox::Ok) { \n            qDebug() << Q_FUNC_INFO << \"Pairing...\"; \n            localDevice->requestPairing(address, QBluetoothLocalDevice::Paired); \n     } \n\n    }\n}\n```", "```cpp\n        if (ret == QMessageBox::Ok) { \n\n            connect(localDevice, &QBluetoothLocalDevice::pairingDisplayPinCode, this, &MainWindow::displayPin);     \n            connect(localDevice, &QBluetoothLocalDevice::pairingDisplayConfirmation, this, &MainWindow::displayConfirmation);     \n            connect(localDevice, &QBluetoothLocalDevice::pairingFinished, this, &MainWindow::pairingFinished);     \n            connect(localDevice, &QBluetoothLocalDevice::error, this, &MainWindow::pairingError);\n\n            localDevice->requestPairing(address, QBluetoothLocalDevice::Paired); \n        }\n```", "```cpp\nSomeClass::displayConfirmation(const QBluetoothAddress &address, const QString &pin)\n{\n    QMessageBox msgBox; \n    msgBox.setText(\"Confirm pin\"); \n    msgBox.setInformativeText(\"Confirm the pin is the same as on the device.\");\n    msgBox.setStandardButtons(QMessageBox::Ok | QMessageBox::Cancel);\n    msgBox.setDefaultButton(QMessageBox::Cancel);\n    int ret = msgBox.exec(); \n    if (ret == QMessageBox::Ok) {\n        localDevice->pairingConfirmed(true);\n     } else {\n        localDevice->pairingConfirmed(false);\n    }\n}\n```", "```cpp\nSomeClass::displayPin(const QBluetoothAddress &address, const QString &pin) {\n{\n    QMessageBox msgBox; \n    msgBox.setText(pin);\n    msgBox.setInformativeText(\"Enter pin on remote device\"); \n    msgBox.setStandardButtons(QMessageBox::Ok); \n    msgBox.exec(); \n}\n```", "```cpp\n   localDevice->setHostMode(QBluetoothLocalDevice::HostDiscoverable);\n```", "```cpp\nSomeClass::newDevice(const QBluetoothDeviceInfo &device) \n{\n    QLowEnergyController *controller = new QLowEnergyController(device.address());\n    connect(controller, &QLowEnergyController::connected, this, &SomeClass::controllerConnected);\n\n    controller->connectToDevice();\n}\n\nSomeClass::controllerConnected()\n{\n    QLowEnergyController *controller = qobject_cast<QLowEnergyController *>(sender());\n    if (controller) {\n        connect(controller, &QLowEnergyController::serviceDiscovered, this, &SomeClass::newServiceFound);\n        controller->discoverServices();\n}\n```", "```cpp\nSomeClass::newServiceFound(const QBluetoothUuid &gatt)\n{\n    QLowEnergyController *controller = qobject_cast<QLowEnergyController *>(sender());\n    QLowEnergyService *myLEService = controller->createServiceObject(gatt, this);\n}\n```", "```cpp\n   QLowEnergyService *myLEService = controller->createServiceObject(gatt, this);\n    connect(myLEService, &QLowEnergyService::stateChanged, this, &SomeClass::serviceStateChanged);\n    myLEService->discoverDetails();\n```", "```cpp\nvoid SomeClass::serviceStateChanged(QLowEnergyService::ServiceState state))\n{\n    if (state != QLowEnergyService::ServiceDiscovered)\n        return;\n    QLowEnergyService *myLEService = qobject_cast<QLowEnergyService *>(sender());\n    QList <QLowEnergyCharacteristic> characteristics = myLEService->characteristics();\n\n}\n```", "```cpp\nQLowEnergyCharacteristic *movementCharacteristic = myLEService->characteristic(someUuid);\nmyLEService->writeCharacteristic(movementCharacteristic, QLowEnergyCharacteristic::Read);\n```", "```cpp\nfor ( const QLowEnergyCharacteristic character :  characteristics) {\n    QLowEnergyDescriptor descriptor = character.descriptor(QBluetoothUuid::ClientCharacteristicConfiguration);\n    connect(myLEService, &QLowEnergyService::characteristicChanged, this, &SomeClass::characteristicUpdated);\n    myLEService->writeDescriptor(descriptor, QByteArrayLiteral(\"\\x01\\x00\"));\n}\n```", "```cpp\nmyLEService->writeDescriptor(descriptor, QLowEnergyCharacteristic::Notify));\n```", "```cpp\nvoid SomeClass::characteristicUpdated(const QLowEnergyCharacteristic &ch, const QByteArray &value)\n{\n    qWarning() << ch.name() << \"value changed!\" << value;\n}\n```", "```cpp\nQT += bluetooth\n```", "```cpp\nimport QtBluetooth 5.12\n```", "```cpp\nBluetoothDiscoveryModel {\n    id: discoveryModel\n    discoveryMode: BluetoothDiscoveryModel.DeviceDiscovery\n    onDeviceDiscovered: {\n        if (/*device == \"01:01:01:01:01:01\" && */ discoveryMode == BluetoothDiscoveryModel.DeviceDiscovery) {\n            discoveryModel.running = false\n            discoveryModel.discoveryMode = BluetoothDiscoveryModel.FullServiceDiscovery\n            discoveryModel.remoteAddress = device\n            discoveryModel.running = true     \n        }\n    }   \n}\n```", "```cpp\nListView {\n    id: mainList\n    anchors.top: busy.bottom\n    anchors.fill: parent\n    model: discoveryModel   \n}\n```", "```cpp\ndelegate: Rectangle {\n    id: btDelegate\n    width: parent.width\n    height: column.height + 10\n    focus: true\n    Column {\n        id: column\n        anchors.horizontalCenter: parent.horizontalCenter\n        Text {\n            id: btText\n            text: deviceName ? deviceName : name\n            font.pointSize: 14\n        }\n    }\n}\n```", "```cpp\nBusyIndicator {\n    id: busy\n    width: mainWindow.width *.6\n    anchors.horizontalCenter: parent.horizontalCenter\n    anchors.top: mainWindow.top\n    height: mainWindow.height / 8\n    running: discoveryModel.running\n}\n```", "```cpp\n\nBluetoothSocket {\n    id: btSocket\n}\n```", "```cpp\n\nonServiceDiscovered {\n    if (service.serviceName == \"Magical Service\")\n       btSocket.setService(service)\n\n}\n```", "```cpp\nonSocketStateChanged: {\n switch (socketState) {\n case BluetoothSocket.Unconnected:\n case BluetoothSocket.NoServiceSet:\n break;\n case BluetoothSocket.Connected:\n console.log(\"Connected\");\n break;\n case BluetoothSocket.Connecting:\n console.log(\"Connecting...\");\n break;\n case BluetoothSocket.ServiceLookup:\n console.log(\"Looking up Service\");\n break;\n case BluetoothSocket.Closing:\n console.log(\"Closing connection\");\n break;\n case BluetoothSocket.Listening:\n console.log(\"Listening for incoming connections\");\n break;\n case BluetoothSocket.Bound:\n console.log(\"Bound to local address\")\n break;\n }\n }\n```", "```cpp\nbtSocket.connected = true\n```", "```cpp\nbtSocket.stringData = \"Message Ok\"\n```"]