- en: '7'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Enabling Communication between Different Devices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter is dedicated to **thing-to-thing communication** (**TTC**), which
    is a very important concept and requirement in the field of the **Internet of
    Things** (**IoT**). You can also call it **Device-to-Device** (**D2D**) communication.
    D2D communication plays a vital role in complex systems where one device’s operations
    are totally dependent on another device. For example, say you want to control
    your room’s AC according to outdoor weather conditions; here, D2D communication
    plays a vital role by sending the outdoor temperature to the room’s AC controller
    device so it knows whether it needs to cool or heat the room according to the
    weather outside.
  prefs: []
  type: TYPE_NORMAL
- en: Arduino IoT Cloud provides a cloud variable synchronization feature across multiple
    things, as well as for dashboards, which helps us to build complex systems easily.
    This chapter explains the usage of the synchronization feature for the implementation
    of cloud **graphical user interfaces** (**GUIs**) and D2D communication purposes.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to sync a cloud variable across things using
    the GUI without writing any complex code. This chapter will help you set up communication
    between things with just a couple of clicks without writing any lengthy code.
    It will also help you to develop solutions that are totally dependent upon other
    device’s sensor data. You will also learn how to create a single dashboard for
    multiple things so you can display their readings in one place, which helps the
    user monitor everything from one display without navigating to other dashboards.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What is D2D communication in the IoT cloud?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The benefits of Arduino IoT Cloud thing-to-thing communication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hardware components – sensors and development boards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Project architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a Thing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementation of GUIs using synchronized cloud variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Limitations of cloud variable/property synchronization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What next?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are required to complete this chapter’s exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: Complete [*Chapter 4*](B19752_04.xhtml#_idTextAnchor085) of this book
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MKR Wi-Fi 1010
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1x 5 mm red LED and 1x 5 mm green LED
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A breadboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jumper cables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will use the **Arduino Web Editor** for coding, which includes a large collection
    of development boards and sensor libraries, and **Arduino IoT Cloud** for thing
    and dashboard setup. The chapter code is available in the official book GitHub
    repository by following this link: [https://github.com/PacktPublishing/Arduino-IoT-Cloud-for-Developers](https://github.com/PacktPublishing/Arduino-IoT-Cloud-for-Developers).'
  prefs: []
  type: TYPE_NORMAL
- en: What is D2D communication in the IoT cloud?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: D2D communication in the context of IoT and the IoT cloud refers to the ability
    of IoT devices to directly exchange data or information with each other without
    relying on a central server or cloud-based service as an intermediary. This form
    of communication is also known as **Peer-to-Peer** (**P2P**) communication among
    IoT devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some key points to understand about D2D communication in the IoT cloud:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Direct communication**: In traditional IoT architectures, devices send data
    to a cloud platform, where it is processed and potentially shared with other devices.
    D2D communication allows devices to talk to each other directly, bypassing the
    cloud when necessary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Low latency**: D2D communication can reduce latency because data doesn’t
    have to travel to a remote server and back. This is crucial in applications where
    real-time or near-real-time responses are required, such as in industrial automation
    or connected vehicles.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Efficiency**: By enabling devices to communicate directly, it can reduce
    the load on cloud servers and bandwidth usage, making the IoT system more efficient
    and cost-effective.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Offline operation**: D2D communication can work even when devices are not
    connected to the internet or the cloud. This can be especially useful in scenarios
    where intermittent connectivity is common, such as in remote areas or emergency
    situations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security**: Implementing direct communication between devices requires robust
    security measures to protect data and ensure the authenticity of messages. Encryption
    and authentication mechanisms are essential to prevent unauthorized access.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Use cases**: D2D communication can be used in various IoT applications. For
    example, in a smart home, IoT devices such as thermostats and lights can communicate
    directly to coordinate actions without needing to send data to a central server.
    In agriculture, sensors on farm equipment can communicate directly to optimize
    tasks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Protocols**: Various communication protocols can facilitate D2D communication
    in IoT, including **Message Queuing Telemetry Transport** (**MQTT**), **Constrained
    Application Protocol** (**CoAP**), Bluetooth, and **Zigbee**. The choice of protocol
    depends on factors such as range, data volume, and power consumption.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Challenges**: While D2D communication provides many benefits, it also presents
    challenges, such as ensuring interoperability between devices from different manufacturers
    and managing the complexities of decentralized communication.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In summary, D2D communication in IoT cloud environments allows IoT devices to
    communicate directly with each other, which provides benefits such as reduced
    latency, improved efficiency, and offline operation. However, it also requires
    careful planning and security measures to ensure the reliability and integrity
    of the communication network.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we explored the benefits and challenges of D2D communication,
    which is very important in IoT infrastructure and solution development. In the
    next section, we will explore what type of option Arduino IoT Cloud is providing
    for TTC.
  prefs: []
  type: TYPE_NORMAL
- en: The benefits of Arduino IoT Cloud thing-to-thing communication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Arduino IoT Cloud is a platform that’s designed to simplify the development
    and management of IoT projects using Arduino boards and other compatible hardware.
    When it comes to TTC in the context of Arduino IoT Cloud, there are several benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ease of integration**: Arduino IoT Cloud provides a user-friendly interface
    for connecting and configuring IoT devices, making it easier to establish communication
    between devices. Users can quickly set up and manage the connections between their
    Arduino boards and other IoT devices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Remote control**: You can use TTC to control one Arduino device from another.
    For example, you could use one Arduino device to control a light bulb in another
    room.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scalability**: Arduino IoT Cloud allows you to scale your IoT projects easily.
    You can add new devices to your network and configure their communication parameters
    without extensive programming, making it suitable for both small-scale and large-scale
    IoT deployments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reduced latency**: Direct communication between IoT devices within the same
    network can significantly reduce latency compared to sending data to an external
    cloud server and back. This is crucial for real-time applications, where low latency
    is essential.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Energy efficiency**: Arduino IoT Cloud allows you to optimize the power consumption
    of your devices by controlling when and how they communicate with each other.
    This can extend the battery life of battery-powered IoT devices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Customizable logic**: You can program custom logic for TTC to suit your specific
    project requirements. This flexibility enables you to implement complex behaviors
    and automation in your IoT system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security**: Arduino IoT Cloud provides security features to help protect
    the communication between your devices, including encryption and authentication
    mechanisms. This ensures that data exchanged between devices remains secure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cost efficiency**: By reducing the reliance on external cloud services and
    minimizing data transfer costs, Arduino IoT Cloud can be a cost-effective solution
    for IoT projects, especially when dealing with a large number of devices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Compatibility**: Arduino IoT Cloud supports a wide range of Arduino boards
    and compatible hardware, making it accessible to a broad user base. This compatibility
    simplifies the process of implementing TTC for Arduino-based IoT projects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In summary, Arduino IoT Cloud simplifies TTC in IoT projects, providing features
    such as ease of integration, scalability, reduced latency, energy efficiency,
    offline operation, customization, security, cost efficiency, and broad hardware
    compatibility. These features make it a valuable platform for developing and managing
    IoT systems that rely on direct communication between devices.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we have discussed the benefits of Arduino IoT Cloud TTC. In
    the next section, we will explore what hardware components we require to do this
    chapter’s exercise.
  prefs: []
  type: TYPE_NORMAL
- en: Hardware components – sensors and development boards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we are going to explore how to sync cloud variables across
    multiple Arduino IoT Cloud things. So, here we will use the same thing, including
    a development board and sensors, that was used in [*Chapter 4*](B19752_04.xhtml#_idTextAnchor085).
    For this chapter’s demonstration, we are going to use Arduino MKR Wi-Fi 1010 along
    with two 5 mm LEDs, a red one and a green one. The complete project is summarized
    in *Figure 7**.1.*
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.1 – Project architecture](img/B19752_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.1 – Project architecture
  prefs: []
  type: TYPE_NORMAL
- en: As shown in *Figure 7**.1*, we use one WeMos D1 mini development board, which
    is based on ESP8266, and the whole project is demonstrated in [*Chapter 4*](B19752_04.xhtml#_idTextAnchor085).
    The purpose of using different types of boards in this chapter is to demonstrate
    how easy it is to sync the cloud variables across different types of development
    boards. In the next section, we will talk in detail about project architecture.
  prefs: []
  type: TYPE_NORMAL
- en: Project architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will discuss how cloud variable synchronization works. As
    shown in *Figure 7**.1*, we have taken the project from [*Chapter 4*](B19752_04.xhtml#_idTextAnchor085).
    In that project, we set up a device that monitors outdoor temperature, humidity,
    and air quality. Now, we want to share the outdoor temperature with our indoor
    device, which is the MKR Wi-Fi 1010\. To make things easier, we just used LEDs
    with MKR Wi-Fi 1010, which is shown in *Figure 7**.2*. Our indoor device will
    turn on the red LED if the temperature exceeds the specified threshold and turn
    on the green LED if it comes down below a specified threshold. You can also use
    relays instead of LEDs to control the heating and cooling system of your room.
  prefs: []
  type: TYPE_NORMAL
- en: We already have one complete thing in Arduino IoT Cloud that is working, but
    now we need to create another thing for MKR Wi-Fi 1010 named **Indoor MKR Wi-Fi
    1010** with a bunch of cloud variables. We will then sync the temperature cloud
    variable of the Indoor MKR Wi-Fi 1010 thing with the Sense the Environment thing,
    which was created in [*Chapter 4*](B19752_04.xhtml#_idTextAnchor085).
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding sections, we discussed the module and development board in
    detail. Now, it’s time to begin the exercise. In hardware development, before
    we start working with sensors and development boards, we need to develop design
    concepts to get a better understanding of how things will connect. There is a
    lot of software available for designing and developing design concepts for an
    electronics project, but in this case, we will use **Fritzing**.
  prefs: []
  type: TYPE_NORMAL
- en: In the following subsection, we will talk about the schematics of a project
    while explaining how to connect pins with a development board.
  prefs: []
  type: TYPE_NORMAL
- en: Schematics design and assembly
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The purpose of schematic design is to get a clear understanding of how sensors/LEDs
    will connect with a development board. This helps engineers to develop a prototype
    on a breadboard or a **Veroboard**. *Figure 7**.2* shows a schematic diagram of
    how LEDs are connected to the MKR Wi-Fi 1010 development board.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.2 – MKR Wi-Fi 1010 and LEDs schematic diagram](img/B19752_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.2 – MKR Wi-Fi 1010 and LEDs schematic diagram
  prefs: []
  type: TYPE_NORMAL
- en: 'In *Figure 7**.2*, we have one common ground from MKR Wi-Fi 1010, which is
    shared with both LEDs using a yellow line. The red LED is connected to MKR Wi-Fi
    1010 by using *Pin #6* and the green LED is using *Pin #7* of the MKR Wi-Fi 1010
    development board.'
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we have discussed how cloud sync works and how we connect the
    LEDs with MKR Wi-Fi 1010\. In the next section, we will set up the Thing for MKR
    Wi-Fi 1010 as well as device association and network configuration; and, most
    importantly, we will create the cloud variables and sync them with other things.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a Thing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After setting up the hardware, it’s time to set up a thing in Arduino IoT Cloud.
    For this project, we need three cloud variables. Later on, we will associate MKR
    Wi-Fi 1010 with our thing. Next, we will perform the Wi-Fi network configuration.
    *Figure 7**.3* shows a complete overview of the Thing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.3 – Indoor device MKR Wi-Fi 1010 thing setup](img/B19752_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.3 – Indoor device MKR Wi-Fi 1010 thing setup
  prefs: []
  type: TYPE_NORMAL
- en: 'Set up a new thing called `Indoor Device MKR Wi-Fi 1010`. In *Figure 7**.3*,
    the following steps are marked with red boxes. Follow these steps to create variables,
    associate a device, configure the network, and, finally, write the code:'
  prefs: []
  type: TYPE_NORMAL
- en: Firstly, we need to set up three cloud variables for the green LED, the red
    LED, and temperature (which will be synced with another thing cloud variable).
    A more detailed discussion of cloud variables is in the upcoming section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After that, we need to associate the device with the Thing. In the current project,
    we are using MKR Wi-Fi 1010\. More details are available in the *Associating a
    device* subsection of this chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After attaching the device, we need to make the device network-ready by providing
    an SSID and a password for the Wi-Fi network. Just click on the **Configure**
    button (if the network is empty, then you will see the **Configure** button. Otherwise,
    you will see the **Change** button) and you will see the popup for network settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have discussed the process of setting up a thing, and all these steps will
    be explained in detail in the proceeding subsections. We will start with the *Cloud
    variables* subsection, where we will create cloud variables for our thing as well
    as synchronize them.
  prefs: []
  type: TYPE_NORMAL
- en: Cloud variables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following table describes all the properties of the cloud variables that
    we need to configure. For this project, we need three cloud variables, as listed
    in *Table 7.1*. Next, make sure each variable matches the **Declaration** in the
    table; otherwise, you need to modify the example code according to your naming.
  prefs: []
  type: TYPE_NORMAL
- en: When we created the cloud variables, we made the permission read-only for all
    variables except `Temperature` because we need this cloud variable to sync with
    the `Temperature` cloud variable of the Sense the Environment thing in [*Chapter
    4*](B19752_04.xhtml#_idTextAnchor085). That’s why this variable’s permissions
    are set to **Read & Write**. **Update Policy** is set to **On change** for all
    variables.
  prefs: []
  type: TYPE_NORMAL
- en: '| **S#** | **Variable Name** | **Variable Type** | **Declaration** | **Permission**
    | **Update** **Policy** |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | `GreenLed` | Boolean | `greenLed` | Read Only | On change |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | `RedLed` | Boolean | `redLed` | Read Only | On change |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | `Temperature` | Temperature sensor | `Temperature` | Read & Write | On
    change |'
  prefs: []
  type: TYPE_TB
- en: Table 7.1 – Cloud variables list for things
  prefs: []
  type: TYPE_NORMAL
- en: Use *Table 7.1* to create the `GreenLed` and `RedLed` cloud variables. The creation
    of the `Temperature` cloud variable will be discussed step by step; we are going
    to sync this cloud variable with the Thing cloud variable from [*Chapter 4*](B19752_04.xhtml#_idTextAnchor085).
    *Figure 7**.4* shows the first step of creating the `Temperature` cloud variable.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.4 – Temperature cloud variable step 1](img/B19752_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.4 – Temperature cloud variable step 1
  prefs: []
  type: TYPE_NORMAL
- en: In this step, we will assign a name to the cloud variable, which is shown in
    *Figure 7**.4*. Next, we will click on **Sync with other Things**. This will open
    a new popup, which is shown in *Figure 7**.5*.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.5 – Temperature cloud variable step 2](img/B19752_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.5 – Temperature cloud variable step 2
  prefs: []
  type: TYPE_NORMAL
- en: In this popup, you will find a complete list of cloud variables across all the
    things that are available in your Arduino IoT Cloud. To prevent complexity and
    errors, select a specific thing. We selected the **Sense the Environment** thing
    from the dropdown, which is marked by a red box in *Figure 7**.5*. After selecting
    the Thing from drop down, you will only see the associated cloud variable of that
    thing in popup. Click on the **Temperature** cloud variable checkbox and then
    click on the **SYNCHRONIZE VARIABLES** button. *Figure 7**.6* shows the final
    popup, where you will find the final status of the cloud variable sync status.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.6 – Temperature cloud variable step 3](img/B19752_07_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.6 – Temperature cloud variable step 3
  prefs: []
  type: TYPE_NORMAL
- en: In *Figure 7**.6*, you will see the status of the cloud variable sync status,
    which is marked by a red box. Remember that for sync variables, you must choose
    **Read & Write** permission or it will not work properly. Then save the cloud
    variable, and we are good to go. After going through these steps, you should have
    an idea of how easy it is to sync cloud variables across multiple things within
    seconds by just using a simple interface.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Remember that for sync variables, you must choose the **Read & Write** permission
    or it will not work properly.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we discussed the types of cloud variables that are required
    for this project. We listed three cloud variables of different types and also
    discussed in detail how to sync the cloud variable from one thing to another thing.
    Next, we are going to associate the MKR Wi-Fi 1010 with the Thing.
  prefs: []
  type: TYPE_NORMAL
- en: Associating a device
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After creating the variables, it’s time to add the device and associate it
    with the Thing:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before adding the device, connect the development board to the computer and
    open the **Arduino Create Agent** application. *Figure 7**.7* shows a popup where
    we have two options: either select the existing device for association or set
    up the new device if it is not available in the list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.7 – Associate device – select device](img/B19752_07_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.7 – Associate device – select device
  prefs: []
  type: TYPE_NORMAL
- en: In our case, we already have different devices in the portal, but we want to
    add a new MKR Wi-Fi 1010\. Just click on **SET UP NEW DEVICE** to configure a
    new device in the account.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you will see the three options in the popup. The first option is **Arduino
    board** and the second option is **Third party device**. The third option is **Any
    Device**, which is for non-compatible devices. It means you can use any type of
    Arduino device, as well as third-party devices with Arduino IoT Cloud, which supports
    Python, MicroPython, and JavaScript.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.8 – Choosing a development device](img/B19752_07_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.8 – Choosing a development device
  prefs: []
  type: TYPE_NORMAL
- en: Select the right option from the popup for your project. For this example, click
    on **Arduino board** because in this chapter, we are using an MKR Wi-Fi 1010 board.
    Before adding the device, make sure **Arduino Create Agent** is running on your
    machine. *Figure 7**.9* shows that Arduino IoT Cloud detected the MKR Wi-Fi 1010
    device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.9 – Device found](img/B19752_07_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.9 – Device found
  prefs: []
  type: TYPE_NORMAL
- en: When the popup displays that it has found the device, just click on the **CONFIGURE**
    button, which will take you to the next configuration step, where you will provide
    the name of the device, and later, another popup will perform some configuration
    on your development board and associate the development board with Arduino IoT
    Cloud. Once this is done, a successful device association message will be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: When the device is configured successfully, you will see a popup saying congratulations.
    Just click on the **DONE** button and your device will be associated with your
    thing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this section, we associated the MKR Wi-Fi 1010 device with our thing, and
    in the upcoming sections, we will talk about the network and code.
  prefs: []
  type: TYPE_NORMAL
- en: Network
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After attaching the device to the Thing, we can see that the device is offline.
    To bring it online, we need to provide Wi-Fi details. The following screenshot
    shows the network configuration popup, which only consists of two fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.10 – Network configuration](img/B19752_07_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.10 – Network configuration
  prefs: []
  type: TYPE_NORMAL
- en: On the Thing page, shown in *Figure 7**.10*, on the **Network** tab, click on
    the **CONFIGURE** button, which will take you to the **Configure network** popup
    with two fields, **Wi-Fi Name** and **Password**. Type the Wi-Fi SSID and password,
    and then click on the **SAVE** button.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we have configured the network for our device, which is MKR
    Wi-Fi 1010\. In the next subsection, we will create the cloud variable.
  prefs: []
  type: TYPE_NORMAL
- en: Coding
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This chapter’s code is available in the official GitHub repository for the book.
    Download `Indoor_Device_MKR_Wi-Fi_1010_sep07a.zip` and import it into your Arduino
    Web Editor.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download the code and put it into your thing by navigating to the `RLED`
    and `GLED` in the following snippet and assigned them pin numbers `6` and `7`,
    respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we initialize all the required pins and methods in the `setup()` method.
    Specifically, we are changing the modes of the pins to output by using the `pinMode()`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The next important method is `onTemperatureChange()`. Whenever the value of
    the `Temperature` cloud variable changes on the Sense the Environment thing, it
    will be automatically synced with the `Temperature` cloud variable of the Indoor
    Device MKR Wi-Fi 1010 thing. Then, when the value changes, this method will be
    called:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code snippet, we have defined the manual threshold for `temperature`.
    If the `temperature` value is greater than 30 degrees Celsius, then assign `redLed`
    the `true` value and `greenLed` the `false` value; otherwise, assign `redLed`
    with `false` and `greenLed` with `true`. At the end of the method, we are controlling
    the LEDs according to the `redLed` and `greenLed` values. Here, you can use relays
    instead of LEDs to control the heating and cooling system of your indoor environment.
  prefs: []
  type: TYPE_NORMAL
- en: Upload the code to the device and you will see that either the red or green
    LED will be turned on, depending on the temperature. After successfully uploading
    data to the cloud, it’s time to set up a beautiful dashboard for web and mobile
    for the users. This time, we will create a dashboard that will show the values
    of two things’ cloud variables.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: If you used different *naming* in the variable declaration, then update the
    code according to your naming scheme. But it’s better if you first follow all
    the steps according to the book and later change the cloud variable names and
    modify your code.
  prefs: []
  type: TYPE_NORMAL
- en: Never try to use the `delay()` method, which will create a block for the `ArduinoCloud.update()`
    method. Also, don’t put the code in an end-of-loop method as it will create a
    delay in the pulse sensor readings.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we have explored the code, and we are using the `Temperature`
    cloud variable, which is synced with the `Temperature` cloud variable in [*Chapter
    4*](B19752_04.xhtml#_idTextAnchor085), and we are turning on and off the LEDs
    according to temperature value. In the next section, we will explore how to display
    the cloud variables of multiple things on a single dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: Implementation of GUI using synchronized cloud variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After uploading the code to the device, it’s time to set up a dashboard for
    web and mobile to visualize the data with different widgets. *Figure 7**.11* demonstrates
    the visualization of readings with different widgets.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.11 – Thing dashboard](img/B19752_07_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.11 – Thing dashboard
  prefs: []
  type: TYPE_NORMAL
- en: We have three different readings, **Temperature**, **Humidity**, and **Air Quality**,
    from the Sense the Environment thing and two readings, **RedLED** and **GreenLED**,
    from the Indoor Device MKR Wi-Fi 1010 thing. As the temperature from the Indoor
    Device MKR Wi-Fi 1010 thing is synced with the Sense the Environment thing, we
    are only displaying one temperature value here. For every reading, we use different
    widget controls to demonstrate how they all work. But for the LED status, we used
    an LED widget control.
  prefs: []
  type: TYPE_NORMAL
- en: The main thing to note about this dashboard is that we are using values from
    two different things but the same dashboard to visualize the values. This example
    demonstrates that we can display the values from multiple things on a single dashboard.
    *Figure 7**.12* shows how easy it is to link any cloud variable to a widget control.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.12 – Linking a cloud variable to a widget control](img/B19752_07_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.12 – Linking a cloud variable to a widget control
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 7**.12* shows how to link the **RedLed** cloud variable from **Indoor
    Device MKR Wi-Fi 1010** to a widget. But, as you can see, you can select any cloud
    variable from any thing and link it with the widget control. So, we can see how
    the Arduino IoT Cloud dashboard allows us to create a single dashboard for multiple
    things easily.'
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we discussed how to set up a dashboard that contains widgets
    attached to multiple things. In the next section, we will discuss limits and cloud
    variable synchronization in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Limitations of cloud variable/property synchronization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Arduino IoT Cloud offers a platform for IoT device management and communication,
    including TTC between devices. While it provides valuable features for connecting
    and managing IoT devices, there are some drawbacks to consider:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Latency**: TTC can introduce latency, which is the delay between when a change
    is made to a variable on one device and when it is reflected on the other device.
    This can be a problem for applications that require very low latency, such as
    controlling a robot in real time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Offline device challenges**: Devices that are temporarily offline may miss
    important messages or updates from other devices. Ensuring that devices can catch
    up on missed communications when they reconnect to the network can be complex
    to implement.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dependency on internet connectivity**: Arduino IoT Cloud relies on an internet
    connection for communication between devices. If the internet connection goes
    down, the devices may lose their ability to communicate with each other.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Limited functionality**: TTC is not as flexible as some other IoT communication
    protocols. For example, you cannot use TTC to send arbitrary data between devices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dependency on the cloud**: TTC relies on Arduino IoT Cloud to function. This
    means that if the cloud is unavailable, your TTC connections will not work.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When considering Arduino IoT Cloud for TTC in your IoT project, it’s essential
    to weigh these drawbacks against the platform’s benefits and assess whether it
    aligns with your specific project requirements and constraints. Additionally,
    exploring alternative IoT platforms and communication solutions may be necessary
    to ensure the best fit for your needs.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we have discussed in detail the limitations of Arduino IoT
    Cloud TTC. In the next section, we will explore how you can use TTC for different
    types of cloud variables.
  prefs: []
  type: TYPE_NORMAL
- en: What next?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We still have a lot of options available to explore, but now it’s your turn
    to use different sensors and development boards to do some more experiments and
    learn from them. In this chapter, we have only used one `Temperature` cloud variable
    synced between two things, but you can try using this feature to sync multiple
    cloud variables with multiple things. Next, create a dashboard for multiple things
    to visualize all the values in one place. We configured simple LEDs to turn on
    and off according to the temperature, but you can also use relays to control the
    heating/cooling system of your indoor home/office and warehouse environment, or
    you can create an alarm in case of a temperature increase using this TTC feature.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we explored D2D communication and the benefits of Arduino IoT
    Cloud for thing-to-thing communication. We discussed how to develop a solution
    for thing-to-thing communication. We also explored how easy it is to sync the
    cloud variable with other things just using a GUI. We set up a dashboard, where
    we linked the widget controls with multiple thing cloud variables. Finally, we
    discussed the limits of Arduino IoT Cloud thing-to-thing communication in detail.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to explore how to use the Arduino IoT Cloud
    SDK. This chapter is for developers who are eager to learn how to use Arduino
    IoT Cloud programmatically and develop custom solutions using Arduino IoT Cloud
    or integrate Arduino IoT Cloud with third-party platforms.
  prefs: []
  type: TYPE_NORMAL
