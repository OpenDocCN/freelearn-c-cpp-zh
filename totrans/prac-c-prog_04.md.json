["```cpp\n#define Qty 10\n```", "```cpp\nprintf(\"Enter price of a book \");\nscanf(\"%f\", &price);\n```", "```cpp\ntotalAmount=Qty*price; \n```", "```cpp\nafterDisc=totalAmount - (totalAmount*discount)/100; \n```", "```cpp\n#ifdef FestivalOffer\n afterFDisc=afterDisc-(totalAmount*FestivalOffer)/100;\n #else\n afterFDisc=afterDisc;\n #endif\n```", "```cpp\n#if defined (DiscountCoupon)\n printf(\"You are also eligible for a discount coupon of $ %d\\n\", DiscountCoupon);\n #endif\n```", "```cpp\n#ifndef Kindle\n #define Kindle 1\n #endif\n printf(\"You can use the Kindle version of the book for %d \n         month(s)\\n\", Kindle);\n```", "```cpp\n// condcompile.c\n#include <stdio.h>\n#define Qty 10\n#define FestivalOffer 2\n#define DiscountCoupon 5\n#define Kindle 2\n\nint main() \n{ \n    int discount;\n    float price, totalAmount, afterDisc, afterFDisc; \n    printf(\"Enter price of a book \"); \n    scanf(\"%f\", &price); \n    #if Qty >= 10 \n        discount=15; \n    #elif Qty >=5 \n        discount=10; \n    #else \n        discount=5; \n    #endif \n    totalAmount=Qty*price; \n    afterDisc=totalAmount - (totalAmount*discount)/100; \n    #ifdef FestivalOffer \n        afterFDisc=afterDisc-(totalAmount*FestivalOffer)/100; \n    #else \n        afterFDisc=afterDisc; \n    #endif \n    printf(\"Quantity = %d, Price is $ %.2f, total amount for the \n            books is $ %.2f\\n\", Qty, price, totalAmount); \n    printf(\"Discount is %d%% and the total amount after \n            discount is $ %.2f\\n\", discount, afterDisc); \n    #ifdef FestivalOffer \n        printf(\"Festival discount is %d%%, the total amount \n                after festival discount is $ %.2f\\n\", \n                FestivalOffer, afterFDisc); \n    #endif \n    #if defined (DiscountCoupon) \n        printf(\"You are also eligible for a discount \n                coupon of $ %d\\n\", DiscountCoupon); \n    #endif \n    #ifndef Kindle \n        #define Kindle 1 \n    #endif \n    printf(\"You can use the Kindle version of the book \n           for %d month(s)\\n\", Kindle); \n    return 0; \n}\n```", "```cpp\n#define FestivalOffer 2 \n#define Kindle 2\n```", "```cpp\n#include <stdio.h>\n#define qty 10 \n\nint main()\n{\n     #ifdef qty\n         amount =qty * rate; \n         #undef qty\n     #endif \n return 0;\n}\n```", "```cpp\nprintf(\"How many passengers ? \");\nscanf(\"%d\",&noOfPassengers);\n```", "```cpp\nassert(noOfPassengers > 0 && \"Number of passengers should \n           be a positive integer\"); \n```", "```cpp\n printf(\"Flight from: \");\n while((c= getchar()) != '\\n' && c != EOF);\n gets(fl_from);\n printf(\"Flight to: \");\n gets(fl_to);\n printf(\"Date of journey \");\n scanf(\"%s\", dateofJourney);\n```", "```cpp\n printf(\"Number of passengers %d\\n\", noOfPassengers);\n printf(\"Flight from: %s\\n\", fl_from);\n printf(\"Flight to: %s\\n\", fl_to);\n printf(\"Date of journey: %s\\n\", dateofJourney);\n```", "```cpp\n// assertdemoprog.c\n#include <stdio.h> \n#include <assert.h> \n\nint main(void) \n{ \n    int c, noOfPassengers; \n    char fl_from[30], fl_to[30], dateofJourney[12]; \n    printf(\"How many passengers ? \"); \n    scanf(\"%d\",&noOfPassengers); \n    assert(noOfPassengers > 0 && \"Number of passengers should \n                                  be a positive integer\"); \n    printf(\"Flight from: \"); \n    while((c= getchar()) != '\\n' && c != EOF); \n        gets(fl_from); \n        printf(\"Flight to: \"); \n        gets(fl_to); \n        printf(\"Date of journey \"); \n        scanf(\"%s\", dateofJourney); \n        printf(\"The information entered is:\\n\"); \n        printf(\"Number of passengers %d\\n\", noOfPassengers); \n        printf(\"Flight from: %s\\n\", fl_from); \n        printf(\"Flight to: %s\\n\", fl_to);\n        printf(\"Date of journey: %s\\n\", dateofJourney); \n        return 0; \n}\n```", "```cpp\nint arr[]={3,9,1,6,2};\n```", "```cpp\nptr=arr; \n```", "```cpp\naverage=findaverage(ptr, count); \n```", "```cpp\nassert(Ptr != NULL && \"Pointer is not pointing to any array\"); \n```", "```cpp\nfor(i=0;i<Count;i++)\n {\n   sum+=*Ptr;\n   Ptr++;\n }\nAverage=(float)sum/Count;\n```", "```cpp\n// assertprog.c\n#include <stdio.h> \n#include <assert.h> \n\nfloat findaverage(int *Ptr, int Count); \n\nint main() \n{ \n    int arr[]={3,9,1,6,2};\n    float average; \n    int *ptr=NULL,count; \n    ptr=arr; \n    count=5; \n    average=findaverage(ptr, count); \n    printf(\"Average of values is %f\\n\", average); \n    return(0); \n} \n\nfloat findaverage(int *Ptr, int Count)\n{\n    int sum,i;\n    float Average; \n    assert(Ptr != NULL && \"Pointer is not pointing to any array\"); \n    sum=0; \n    for(i=0;i<Count;i++) \n    { \n        sum+=*Ptr; \n        Ptr++; \n    } \n    Average=(float)sum/Count; \n    return(Average); \n}\n```", "```cpp\nptr=arr;\n```", "```cpp\nstruct customers\n {\n int orderid;\n char customer_name[20];\n float amount;\n };\n```", "```cpp\nstatic_assert(sizeof(struct customers) == 28, \"The structure is consuming unexpected number of bytes\"); \n```", "```cpp\nstatic_assert(sizeof(struct customers) == 28, \"The structure is consuming unexpected number of bytes\"); \n```", "```cpp\n// compileassert.c\n#include <stdio.h> \n#include <assert.h> \n\nstruct customers \n{ \n    int orderid;\n    char customer_name[20]; \n    float amount; \n}; \n\nstatic_assert(sizeof(struct customers) == 28, \"The structure is consuming unexpected number of bytes\"); \n\nint main(void) \n{ \n    printf(\"sizeof(int) %d\\n\",sizeof(int)); \n    printf(\"sizeof(float) %d\\n\",sizeof(float)); \n    printf(\"sizeof(char) %d\\n\",sizeof(char)); \n    printf(\"sizeof(struct customers) %d\\n\",sizeof(struct customers)); \n    return 0; \n}\n```", "```cpp\n#define pizzaprice(a, b) a##b \n```", "```cpp\n#define convertIntoStr(str) #str \n```", "```cpp\nfloat smallnormal=5;\n float mediumnormal=7;\n float largenormal=10;\n float smallextra=7;\n float mediumextra=9;\n float largeextra=12;\n char pizzasize[30];\n char topping[20];\n```", "```cpp\nprintf(\"What size pizza you want? small/medium/large: \");\nscanf(\"%s\", pizzasize);\n```", "```cpp\nprintf(\"Normal or with extra cheese? normal/extra: \");\n scanf(\"%s\",topping);\n```", "```cpp\nif(strcmp(topping, \"normal\")==0)\n {...........\n}\n if(strcmp(topping, \"extra\")==0)\n {......................\n}\n```", "```cpp\nif(strcmp(pizzasize, \"small\")==0)\n .........\n else\n if(strcmp(pizzasize, \"medium\")==0)\n..............\nelse\n.....................\n```", "```cpp\npizzaprice(small, extra));\n```", "```cpp\nprintf(\"The prize for %s size pizza with %s toppings is $%.2f \\n\", pizzasize, topping, pizzaprice(small, extra));\n```", "```cpp\n// preconcat.c\n#include <stdio.h> \n#include <string.h> \n\n#define pizzaprice(a, b) a##b \n#define convertIntoStr(str) #str \n\nint main() \n{ \n    float smallnormal=5; \n    float mediumnormal=7; \n    float largenormal=10; \n    float smallextra=7; \n    float mediumextra=9; \n    float largeextra=12; \n    char pizzasize[30]; \n    char topping[20]; \n\n    printf(\"What size pizza you want? small/medium/large: \"); \n    scanf(\"%s\", pizzasize); \n    printf(\"Normal or with extra cheese? normal/extra: \"); \n    scanf(\"%s\",topping); \n    if(strcmp(topping, \"normal\")==0) \n    { \n        if(strcmp(pizzasize, \"small\")==0)\n            printf(\"The prize for %s size pizza with %s toppings is \n                    $%.2f \\n\", pizzasize, topping, \n                    pizzaprice(small, normal));\n         else \n             if(strcmp(pizzasize, \"medium\")==0)\n                  printf(\"The prize for %s size pizza with %s \n                          toppings is $%.2f \\n\", pizzasize, topping, \n                          pizzaprice(medium, normal)); \n              else\n                  printf(\"The prize for %s size pizza with %s \n                          toppings is $%.2f \\n\", pizzasize, topping, \n                          pizzaprice(large, normal)); \n    }\n    if(strcmp(topping, \"extra\")==0) \n    { \n        if(strcmp(pizzasize, \"small\")==0)\n            printf(\"The prize for %s size pizza with %s toppings \n                    is $%.2f \\n\", pizzasize, topping, \n                    pizzaprice(small, extra)); \n        else \n            if(strcmp(pizzasize, \"medium\")==0) \n                printf(\"The prize for %s size pizza with %s toppings \n                        is $%.2f \\n\", pizzasize, topping, \n                        pizzaprice(medium, extra));\n            else \n                printf(\"The prize for %s size pizza with %s toppings \n                        is $%.2f \\n\", pizzasize, topping, \n                        pizzaprice(large, extra)); \n    }\n    printf(convertIntoStr(Thanks for visiting us)); \n    return 0; \n}\n```"]