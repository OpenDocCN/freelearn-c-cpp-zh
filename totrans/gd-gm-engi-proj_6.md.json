["```cpp\nextends CanvasLayer\n\nvar bar_red = preload(\"res://assets/bar_red.png\")\nvar bar_green = preload(\"res://assets/bar_green.png\")\nvar bar_yellow = preload(\"res://assets/bar_yellow.png\")\n\nfunc update_shots(value):\n    $Margin/Container/Shots.text = 'Shots: %s' % value\n\nfunc update_powerbar(value):\n    $Margin/Container/PowerBar.texture_progress = bar_green\n    if value > 70:\n        $Margin/Container/PowerBar.texture_progress = bar_red\n    elif value > 40:\n        $Margin/Container/PowerBar.texture_progress = bar_yellow\n    $Margin/Container/PowerBar.value = value\n```", "```cpp\nextends Node\n\nvar shots = 0\nvar state\nvar power = 0\nvar power_change = 1\nvar power_speed = 100\nvar angle_change = 1\nvar angle_speed = 1.1\nenum {SET_ANGLE, SET_POWER, SHOOT, WIN}\n```", "```cpp\nfunc _ready():\n    $Arrow.hide()\n    $Ball.transform.origin = $Tee.transform.origin\n    change_state(SET_ANGLE)\n```", "```cpp\nfunc change_state(new_state):\n    state = new_state\n    match state:\n        SET_ANGLE:\n            $Arrow.transform.origin = $Ball.transform.origin\n            $Arrow.show()\n        SET_POWER:\n            pass\n        SHOOT:\n            $Arrow.hide()\n            $Ball.shoot($Arrow.rotation.y, power)\n            shots += 1\n            $UI.update_shots(shots)\n        WIN:\n            $Ball.hide()\n            $Arrow.hide()\n```", "```cpp\nfunc _input(event):\n    if event.is_action_pressed('click'):\n        match state:\n            SET_ANGLE:\n                change_state(SET_POWER)\n            SET_POWER:\n                change_state(SHOOT)\n```", "```cpp\nfunc _process(delta):\n    match state:\n        SET_ANGLE:\n            animate_angle(delta)\n        SET_POWER:\n            animate_power_bar(delta)\n        SHOOT:\n            pass\n```", "```cpp\nfunc animate_power_bar(delta):\n    power += power_speed * power_change * delta\n    if power >= 100:\n        power_change = -1\n    if power <= 0:\n        power_change = 1\n    $UI.update_powerbar(power)\n\nfunc animate_angle(delta):\n    $Arrow.rotation.y += angle_speed * angle_change * delta\n    if $Arrow.rotation.y > PI/2:\n        angle_change = -1\n    if $Arrow.rotation.y < -PI/2:\n        angle_change = 1\n```", "```cpp\nextends RigidBody\n\nsignal stopped\n\nfunc shoot(angle, power):\n    var force = Vector3(0, 0, -1).rotated(Vector3(0, 1, 0), angle)\n    apply_impulse(Vector3(), force * power / 5)\n\nfunc _integrate_forces(state):\n    if state.linear_velocity.length() < 0.1:\n        emit_signal(\"stopped\")\n        state.linear_velocity = Vector3()\n```", "```cpp\nfunc _on_Hole_body_entered(body):\n    print(\"Win!\")\n    change_state(WIN)\n```", "```cpp\nfunc set_start_angle():\n    var hole_pos = Vector2($Hole.transform.origin.z, $Hole.transform.origin.x)\n    var ball_pos = Vector2($Ball.transform.origin.z, $Ball.transform.origin.x)\n    hole_dir = (ball_pos - hole_pos).angle()\n    $Arrow.rotation.y = hole_dir\n```", "```cpp\nfunc animate_angle(delta):\n    $Arrow.rotation.y += angle_speed * angle_change * delta\n    if $Arrow.rotation.y > hole_dir + PI/2:\n        angle_change = -1\n    if $Arrow.rotation.y < hole_dir - PI/2:\n        angle_change = 1\n```", "```cpp\nSET_ANGLE:\n    $Arrow.transform.origin = $Ball.transform.origin\n    $Arrow.show()\n    set_start_angle()\n```", "```cpp\nfunc _input(event):\n    if event is InputEventMouseMotion:\n        if state == SET_ANGLE:\n            $Arrow.rotation.y -= event.relative.x / 150\n```", "```cpp\nfunc _on_Cam2Area_body_entered(body):\n    $Camera2.current = true\n```", "```cpp\n\nextends Spatial\n\nvar cam_speed = PI/2\nvar zoom_speed = 0.1\nvar zoom = 0.5\n\nfunc _input(event):\n    if event.is_action_pressed('cam_zoom_in'):\n        zoom -= zoom_speed\n    if event.is_action_pressed('cam_zoom_out'):\n        zoom += zoom_speed\n\nfunc _process(delta):\n    zoom = clamp(zoom, 0.1, 2)\n    scale = Vector3(1, 1, 1) * zoom\n    if Input.is_action_pressed('cam_left'):\n        rotate_y(-cam_speed * delta)\n    if Input.is_action_pressed('cam_right'):\n        rotate_y(cam_speed * delta)\n    if Input.is_action_pressed('cam_up'):\n        $GimbalIn.rotate_x(-cam_speed * delta)\n    if Input.is_action_pressed('cam_down'):\n        $GimbalIn.rotate_x(cam_speed * delta)\n    $GimbalIn.rotation.x = clamp($GimbalIn.rotation.x, -PI/2, -0.2)\n```", "```cpp\n$GimbalOut.transform.origin = $Ball.transform.origin\n```"]