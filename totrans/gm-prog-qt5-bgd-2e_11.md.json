["```cpp\n#include <QGuiApplication>\n#include <QQmlApplicationEngine>\n\nint main(int argc, char *argv[])\n{\n    QGuiApplication app(argc, argv);\n    QQmlApplicationEngine engine;\n    engine.load(QUrl(QStringLiteral(\"qrc:/main.qml\")));\n    if (engine.rootObjects().isEmpty())\n        return -1;\n    return app.exec();\n}\n```", "```cpp\nimport QtQuick 2.9\nimport QtQuick.Window 2.2\n\nWindow {\n    visible: true\n    width: 640\n    height: 480\n    title: qsTr(\"Hello World\")\n}\n```", "```cpp\nimport QtQuick 2.9\nimport QtQuick.Window 2.2\nimport QtQuick.Controls 2.2\nWindow {\n    visible: true\n    width: 640\n    height: 480\n    title: qsTr(\"Hello World\")\n TextField {\n text: \"Edit me\"\n anchors {\n top: parent.top\n left: parent.left\n }\n }\n Label {\n text: \"Hello world\"\n anchors {\n bottom: parent.bottom\n left: parent.left\n }\n }\n}\n```", "```cpp\nLabel {\n    // this code does not work\n    fontFamily: \"Helvetica\"\n    fontSize: 12\n    fontItalic: true \n}\n```", "```cpp\nLabel {\n    font {\n        family: \"Helvetica\"\n        pointSize: 12\n        italic: true \n    }\n}\n```", "```cpp\nLabel {\n    font.pointSize: 12\n}\n```", "```cpp\nanchors.top: otherObject.bottom\n```", "```cpp\nanchors.fill: parent\n```", "```cpp\nanchors {\n    bottom: parent.bottom\n    left: parent.left\n}\n```", "```cpp\nTextField {\n    id: textField\n    text: \"Edit me\"\n    anchors {\n        top: parent.top\n        left: parent.left\n    }\n}\nLabel {\n    text: \"Hello world\"\n    anchors {\n        top: textField.bottom\n topMargin: 20\n        left: parent.left\n    }\n}\n```", "```cpp\nLabel {\n    text: \"a\" + \"b\"\n    //...\n}\n```", "```cpp\nLabel {\n    text: \"Your input: \" + textField.text\n    //...\n}\n```", "```cpp\ntext: {\n    var x = textField.text;\n    return \"(\" + x + \")\";\n}\n```", "```cpp\nLabel {\n    function calculateText() {\n        var x = textField.text;\n        return \"(\" + x + \")\";\n    }\n    text: calculateText()\n    //...\n}\n```", "```cpp\nLabel {\n    function colorByTime() {\n        var d = new Date();\n        var seconds = d.getSeconds();\n        if(seconds < 15) return \"red\";\n        if(seconds < 30) return \"green\";\n        if(seconds < 45) return \"blue\";\n        return \"purple\";\n    }\n    color: colorByTime()\n    //...\n}\n```", "```cpp\nimport QtQuick 2.4\nCalculatorForm {\n}\n```", "```cpp\nimport QtQuick 2.9\nimport QtQuick.Window 2.2\nimport QtQuick.Controls 2.2\nWindow {\n    visible: true\n    width: 640\n    height: 480\n    title: qsTr(\"Calculator\")\n\n Calculator {\n anchors.fill: parent\n }\n}\n```", "```cpp\nTextField {\n    id: a\n    text: qsTr(\"0\")\n    anchors.horizontalCenter: parent.horizontalCenter\n    anchors.top: parent.top\n    anchors.topMargin: 20\n}\n```", "```cpp\nCalculatorForm {\n    result.text: {\n        var value1 = parseFloat(argument1.text);\n        var value2 = parseFloat(argument2.text);\n        if(operationMultiply.checked) {\n            return value1 * value2;\n        } else {\n            return value1 + value2;\n        }\n    }\n}\n```", "```cpp\nreset.onClicked: {\n    argument1.text = \"0\";\n    argument2.text = \"0\";\n    operationAdd.checked = true;\n}\n```", "```cpp\nQ_INVOKABLE double factorial(int argument);\n```", "```cpp\ndouble AdvancedCalculator::factorial(int argument) {\n    if (argument < 0) {\n        return std::numeric_limits<double>::quiet_NaN();\n    }\n    if (argument > 180) {\n      return std::numeric_limits<double>::infinity();\n    }\n    double r = 1.0;\n    for(int i = 2; i <= argument; ++i) {\n        r *= i;\n    }\n    return r;\n}\n```", "```cpp\nengine.globalObject().setProperty(\"advancedCalculator\",\n    engine.newQObject(new AdvancedCalculator));\nreturn app.exec();\n```", "```cpp\nresult.text: {\n    var value1 = parseFloat(argument1.text);\n    var value2 = parseFloat(argument2.text);\n    if(operationMultiply.checked) {\n        return value1 * value2;\n } else if (operationFactorial.checked) {\n return advancedCalculator.factorial(value1);\n    } else {\n        return value1 + value2;\n    }\n}\n```", "```cpp\nqmlRegisterSingletonType(\"CalculatorApp\", 1, 0, \"AdvancedCalculator\",\n        [](QQmlEngine *engine, QJSEngine *scriptEngine) -> QJSValue {\n    Q_UNUSED(scriptEngine);\n    return engine->newQObject(new AdvancedCalculator);\n});\nQQmlApplicationEngine engine;\n```", "```cpp\nimport CalculatorApp 1.0\n```", "```cpp\nreturn AdvancedCalculator.factorial(value1);\n```", "```cpp\nButton {\n    id: reset\n    objectName: \"buttonReset\"\n    //...\n}\n```", "```cpp\nif (engine.rootObjects().count() == 1) {\n    QObject *window = engine.rootObjects()[0];\n    QObject *resetButton = window->findChild<QObject*>(\"buttonReset\");\n    if (resetButton) {\n        resetButton->setProperty(\"highlighted\", true);\n    }\n}\n```", "```cpp\nQQmlComponent component(&engine);\ncomponent.setData(\n    \"import QtQuick 2.6\\n\"\n    \"import QtQuick.Controls 2.2\\n\"\n    \"import QtQuick.Window 2.2\\n\"\n    \"Window { Button { text: \\\"C++ button\\\" } }\", QUrl());\nQObject* object = component.create();\nobject->setProperty(\"visible\", true);\n```", "```cpp\nQMetaObject::invokeMethod(object, \"showMaximized\");\n```", "```cpp\nCalculator {\n    anchors.fill: parent\n    objectName: \"calculator\"\n}\n```", "```cpp\nQQmlComponent component(&engine);\ncomponent.setData(\n    \"import QtQuick 2.6\\n\"\n    \"import QtQuick.Controls 2.2\\n\"\n    \"Button { text: \\\"C++ button2\\\" }\", QUrl());\nQObject *object = component.create();\nQObject *calculator = window->findChild<QObject*>(\"calculator\");\nobject->setProperty(\"parent\", QVariant::fromValue(calculator));\n```", "```cpp\nQQmlComponent component(&engine,\n    QUrl::fromLocalFile(\"ComplexObject.qml\"));\nQQmlIncubator incubator;\ncomponent.create(incubator);\nwhile(!incubator.isError() && !incubator.isReady()) {\n    QCoreApplication::processEvents();\n}\nQObject *object = incubator.isReady() ? incubator.object() : 0;\n```", "```cpp\nstates: [\n    State {\n        name: \"single_argument\"\n        PropertyChanges {\n            target: b\n            opacity: 0\n        }\n    }\n]\n```", "```cpp\nCalculatorForm {\n state: {\n if (operationFactorial.checked) {\n return \"single_argument\";\n } else {\n return \"\";\n }\n }\n    //...\n}\n```", "```cpp\nCalculatorForm {\n    //...\n    transitions: Transition {\n        PropertyAnimation {\n            property: \"opacity\"\n            duration: 300\n        }\n    }\n}\n```"]