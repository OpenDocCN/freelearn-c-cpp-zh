["```cpp\nextends Area2D\n\n# class member variables go here, for example:\n# var a = 2\n# var b = \"textvar\"\n\nfunc _ready():\n # Called every time the node is added to the scene.\n # Initialization here\n pass\n\n#func _process(delta):\n# # Called every frame. Delta is time since last frame.\n# # Update game logic here.\n# pass\n```", "```cpp\nextends Area2D\n\nexport (int) var speed\nvar velocity = Vector2()\nvar screensize = Vector2(480, 720)\n```", "```cpp\nfunc get_input():\n    velocity = Vector2()\n    if Input.is_action_pressed(\"ui_left\"):\n        velocity.x -= 1\n    if Input.is_action_pressed(\"ui_right\"):\n        velocity.x += 1\n    if Input.is_action_pressed(\"ui_up\"):\n        velocity.y -= 1\n    if Input.is_action_pressed(\"ui_down\"):\n        velocity.y += 1\n    if velocity.length() > 0:\n        velocity = velocity.normalized() * speed\n```", "```cpp\nfunc _process(delta):\n    get_input()\n\n    position += velocity * delta\n    position.x = clamp(position.x, 0, screensize.x)\n    position.y = clamp(position.y, 0, screensize.y)\n```", "```cpp\n    if velocity.length() > 0:\n        $AnimatedSprite.animation = \"run\"\n        $AnimatedSprite.flip_h = velocity.x < 0\n    else:\n        $AnimatedSprite.animation = \"idle\"\n```", "```cpp\nif velocity.x < 0:\n    $AnimatedSprite.flip_h = true\nelse:\n    $AnimatedSprite.flip_h = false     \n```", "```cpp\nfunc start(pos):\n    set_process(true)\n    position = pos\n    $AnimatedSprite.animation = \"idle\"\n```", "```cpp\nfunc die():\n    $AnimatedSprite.animation = \"hurt\"\n    set_process(false)\n```", "```cpp\nsignal pickup\nsignal hurt\n```", "```cpp\nfunc _on_Player_area_entered( area ):\n    if area.is_in_group(\"coins\"):\n        area.pickup()\n        emit_signal(\"pickup\")\n    if area.is_in_group(\"obstacles\"):\n        emit_signal(\"hurt\")\n        die()\n```", "```cpp\nextends Area2D\n\nsignal pickup\nsignal hurt\n\nexport (int) var speed\nvar velocity = Vector2()\nvar screensize = Vector2(480, 720)\n\nfunc get_input():\n    velocity = Vector2()\n    if Input.is_action_pressed(\"ui_left\"):\n        velocity.x -= 1\n    if Input.is_action_pressed(\"ui_right\"):\n        velocity.x += 1\n    if Input.is_action_pressed(\"ui_up\"):\n        velocity.y -= 1\n    if Input.is_action_pressed(\"ui_down\"):\n        velocity.y += 1\n    if velocity.length() > 0:\n        velocity = velocity.normalized() * speed\n\nfunc _process(delta):\n    get_input()\n    position += velocity * delta\n    position.x = clamp(position.x, 0, screensize.x)\n    position.y = clamp(position.y, 0, screensize.y)\n\n    if velocity.length() > 0:\n        $AnimatedSprite.animation = \"run\"\n        $AnimatedSprite.flip_h = velocity.x < 0\n    else:\n        $AnimatedSprite.animation = \"idle\"\n\nfunc start(pos):\n    set_process(true)\n    position = pos\n    $AnimatedSprite.animation = \"idle\"\n\nfunc die():\n    $AnimatedSprite.animation = \"hurt\"\n    set_process(false)\n\nfunc _on_Player_area_entered( area ):\n    if area.is_in_group(\"coins\"):\n        area.pickup()\n        emit_signal(\"pickup\")\n    if area.is_in_group(\"obstacles\"):\n        emit_signal(\"hurt\")\n        die()\n```", "```cpp\nextends Area2D\n\nfunc pickup():\n    queue_free()\n```", "```cpp\nextends Node\n\nexport (PackedScene) var Coin\nexport (int) var playtime\n\nvar level\nvar score\nvar time_left\nvar screensize\nvar playing = false\n```", "```cpp\nfunc _ready():\n    randomize()\n    screensize = get_viewport().get_visible_rect().size\n    $Player.screensize = screensize\n    $Player.hide()\n```", "```cpp\nfunc new_game():\n    playing = true\n    level = 1\n    score = 0\n    time_left = playtime\n    $Player.start($PlayerStart.position)\n    $Player.show()\n    $GameTimer.start()\n    spawn_coins()\n```", "```cpp\nfunc spawn_coins():\n    for i in range(4 + level):\n        var c = Coin.instance()\n        $CoinContainer.add_child(c)\n        c.screensize = screensize\n        c.position = Vector2(rand_range(0, screensize.x),\n        rand_range(0, screensize.y))\n```", "```cpp\nfunc _process(delta):\n    if playing and $CoinContainer.get_child_count() == 0:\n        level += 1\n        time_left += 5\n        spawn_coins()\n```", "```cpp\nextends CanvasLayer\n\nsignal start_game\n\nfunc update_score(value):\n    $MarginContainer/ScoreLabel.text = str(value)\n\nfunc update_timer(value):\n    $MarginContainer/TimeLabel.txt = str(value)\n```", "```cpp\nfunc show_message(text):\n    $MessageLabel.text = text\n    $MessageLabel.show()\n    $MessageTimer.start()\n```", "```cpp\nfunc _on_MessageTimer_timeout():\n    $MessageLabel.hide()\n```", "```cpp\nfunc _on_StartButton_pressed():\n    $StartButton.hide()\n    $MessageLabel.hide()\n    emit_signal(\"start_game\")\n```", "```cpp\nfunc show_game_over():\n    show_message(\"Game Over\")\n    yield($MessageTimer, \"timeout\")\n    $StartButton.show()\n    $MessageLabel.text = \"Coin Dash!\"\n    $MessageLabel.show()\n```", "```cpp\nfunc _on_GameTimer_timeout():\n    time_left -= 1\n    $HUD.update_timer(time_left)\n    if time_left <= 0:\n        game_over()\n```", "```cpp\nfunc _on_Player_pickup():\n    score += 1\n    $HUD.update_score(score)\n\nfunc _on_Player_hurt():\n    game_over()\n```", "```cpp\nfunc game_over():\n    playing = false\n    $GameTimer.stop()\n    for coin in $CoinContainer.get_children():\n        coin.queue_free()\n    $HUD.show_game_over()\n    $Player.die()\n```", "```cpp\n$HUD.update_score(score)\n$HUD.update_timer(time_left)\n```", "```cpp\n$Tween.interpolate_property($AnimatedSprite, 'scale',\n                            $AnimatedSprite.scale,\n                            $AnimatedSprite.scale * 3, 0.3,\n                            Tween.TRANS_QUAD,\n                            Tween.EASE_IN_OUT)\n```", "```cpp\nfunc pickup():\n    monitoring = false\n    $Tween.start() \n```", "```cpp\nfunc _on_Tween_tween_completed(object, key):\n    queue_free()\n```", "```cpp\n$Tween.interpolate_property($AnimatedSprite, 'modulate', \n                            Color(1, 1, 1, 1),\n                            Color(1, 1, 1, 0), 0.3,\n                            Tween.TRANS_QUAD,\n                            Tween.EASE_IN_OUT)\n```", "```cpp\nfunc _on_Lifetime_timeout():\n    queue_free()\n```", "```cpp\nfunc _on_PowerupTimer_timeout():\n    var p = Powerup.instance()\n    add_child(p)\n    p.screensize = screensize\n    p.position = Vector2(rand_range(0, screensize.x),\n                         rand_range(0, screensize.y))\n```", "```cpp\nexport (PackedScene) var Powerup\n```", "```cpp\n$PowerupTimer.wait_time = rand_range(5, 10)\n$PowerupTimer.start()\n```", "```cpp\nfunc _on_Player_area_entered( area ):\n    if area.is_in_group(\"coins\"):\n        area.pickup()\n        emit_signal(\"pickup\", \"coin\")\n    if area.is_in_group(\"powerups\"):\n        area.pickup()\n        emit_signal(\"pickup\", \"powerup\")\n    if area.is_in_group(\"obstacles\"):\n        emit_signal(\"hurt\")\n        die()\n```", "```cpp\nfunc _on_Player_pickup(type):\n    match type:\n        \"coin\":\n            score += 1\n            $CoinSound.play()\n            $HUD.update_score(score)\n        \"powerup\":\n            time_left += 5\n            $PowerupSound.play()\n            $HUD.update_timer(time_left)\n```", "```cpp\n$Timer.wait_time = rand_range(3, 8)\n$Timer.start()\n```", "```cpp\nfunc _on_Timer_timeout():\n    $AnimatedSprite.frame = 0\n    $AnimatedSprite.play()\n```", "```cpp\nfunc _on_Coin_area_entered( area ):\n    if area.is_in_group(\"obstacles\"):\n        position = Vector2(rand_range(0, screensize.x), rand_range(0, screensize.y))\n```"]