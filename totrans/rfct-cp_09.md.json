["```cpp\nBasedOnStyle: Google\n```", "```cpp\n---\nBasedOnStyle: Google\n# Indentation\nIndentWidth: 4\nTabWidth: 4\nUseTab: Never\n# Braces\nBreakBeforeBraces: Custom\nBraceWrapping:\n  AfterClass: true\n  AfterControlStatement: false\n  AfterEnum: true\n  AfterFunction: true\n  AfterNamespace: true\n  AfterStruct: true\n  AfterUnion: true\n  BeforeCatch: false\n  BeforeElse: false\n# Alignment\nAlignAfterOpenBracket: Align\nAlignConsecutiveAssignments: true\nAlignConsecutiveDeclarations: true\nAlignOperands: true\nAlignTrailingComments: true\n# Spaces and empty lines\nSpaceBeforeParens: ControlStatements\nSpaceInEmptyParentheses: false\nSpacesInCStyleCastParentheses: false\nSpacesInContainerLiterals: true\nSpacesInSquareBrackets: false\nMaxEmptyLinesToKeep: 2\n# Column limit\nColumnLimit: 80\n```", "```cpp\nint main() {\n    // clang-format off\n    int  variableNameNotFormatted=42;\n    // clang-format on\n    int properlyFormattedVariable = 43;\n}\n```", "```cpp\n# Find clang-format\nfind_program(CLANG_FORMAT_EXECUTABLE NAMES clang-format)\n```", "```cpp\n# Gather all source files from the root directory recursively\nfile(GLOB_RECURSE ALL_SOURCE_FILES\n    *.cpp\n    *.cc\n    *.c++\n    *.c\n    *.C\n    *.h\n    *.hpp\n    *.hxx\n)\n```", "```cpp\n# Exclude files in the build directory\nlist(FILTER ALL_SOURCE_FILES EXCLUDE REGEX “^${CMAKE_BINARY_DIR}.*”)\n```", "```cpp\n# Create custom target to run clang-format\nif(CLANG_FORMAT_EXECUTABLE)\n    add_custom_target(\n        clang-format\n        COMMAND ${CLANG_FORMAT_EXECUTABLE} -i -style=file ${ALL_SOURCE_FILES}\n        COMMENT “Running clang-format”\n    )\nelse()\n    message(“clang-format not found! Target ‘clang-format’ will not be available.”)\nendif()\n```", "```cpp\n#include <iostream>\nclass Sender {\npublic:\n    void send(const std::string& message) {\n        std::cout << “Sending: “ << message << std::endl;\n    }\n};\nclass Receiver {\npublic:\n    void receive(const std::string& message) {\n        std::cout << “Receiving: “ << message << std::endl;\n    }\n};\nclass Mediator {\npublic:\n    Mediator(Sender sender, Receiver receiver)\n        : sender_{std::move(sender)}, receiver_{std::move(receiver)} {}\n    void send(const std::string& message) {\n        sender_.send(message);\n    }\n    void receive(const std::string& message) {\n        receiver_.receive(message);\n    }\nprivate:\n    Sender sender_;\n    Receiver receiver_;\n};\n```", "```cpp\nmake check-clang-format\n[100%] Checking code format with clang-format\n/home/user/clang-format/clang_format.cpp:4:2: error: code should be clang-formatted [-Wclang-format-violations]\n{\n ^\n/home/user/clang-format/clang_format.cpp:6:42: error: code should be clang-formatted [-Wclang-format-violations]\n    void send(const std::string& message){\n                                         ^\n/home/user/clang-format/clang_format.cpp:7:18: error: code should be clang-formatted [-Wclang-format-violations]\n        std::cout<< “Sending: “ <<message<< std::endl;\n                 ^\n/home/user/clang-format/clang_format.cpp:7:35: error: code should be clang-formatted [-Wclang-format-violations]\n        std::cout<< “Sending: “ <<message<< std::endl;\n                                  ^\n/home/user/clang-format/clang_format.cpp:7:42: error: code should be clang-formatted [-Wclang-format-violations]\n        std::cout<< “Sending: “ <<message<< std::endl;\n                                         ^\n/home/user/clang-format/clang_format.cpp:11:6: error: code should be clang-formatted [-Wclang-format-violations]\nclass\n     ^\n/home/user/clang-format/clang_format.cpp:12:9: error: code should be clang-formatted [-Wclang-format-violations]\nReceiver {\n        ^\n/home/user/clang-format/clang_format.cpp:12:11: error: code should be clang-formatted [-Wclang-format-violations]\nReceiver {\n          ^\n/home/user/clang-format/clang_format.cpp:14:36: error: code should be clang-formatted [-Wclang-format-violations]\n    void receive(const std::string&message){\n                                   ^\n/home/user/clang-format/clang_format.cpp:14:44: error: code should be clang-formatted [-Wclang-format-violations]\n    void receive(const std::string&message){\n                                           ^\n/home/user/clang-format/clang_format.cpp:14:45: error: code should be clang-formatted [-Wclang-format-violations]\n    void receive(const std::string&message){\n                                            ^\n/home/user/clang-format/clang_format.cpp:16:6: error: code should be clang-formatted [-Wclang-format-violations]\n    }};\n     ^\n/home/user/clang-format/clang_format.cpp:18:15: error: code should be clang-formatted [-Wclang-format-violations]\nclass Mediator{\n              ^\n/home/user/clang-format/clang_format.cpp:18:16: error: code should be clang-formatted [-Wclang-format-violations]\nclass Mediator{\n               ^\n/home/user/clang-format/clang_format.cpp:20:28: error: code should be clang-formatted [-Wclang-format-violations]\n    Mediator(Sender sender,Receiver receiver)\n                           ^\n/home/user/clang-format/clang_format.cpp:21:69: error: code should be clang-formatted [-Wclang-format-violations]\n        : sender_{std::move(sender)}, receiver_{std::move(receiver)} {}\n                                                                    ^\n/home/user/clang-format/clang_format.cpp:21:71: error: code should be clang-formatted [-Wclang-format-violations]\n        : sender_{std::move(sender)}, receiver_{std::move(receiver)} {}\n                                                                      ^\n/home/user/clang-format/clang_format.cpp:22:44: error: code should be clang-formatted [-Wclang-format-violations]\n    void send(const std::string& message) {sender_.send(message);}\n                                           ^\n/home/user/clang-format/clang_format.cpp:22:66: error: code should be clang-formatted [-Wclang-format-violations]\n    void send(const std::string& message) {sender_.send(message);}\n                                                                 ^\n/home/user/clang-format/clang_format.cpp:24:47: error: code should be clang-formatted [-Wclang-format-violations]\n    void receive(const std::string& message) {\n                                              ^\n/home/user/clang-format/clang_format.cpp:25:36: error: code should be clang-formatted [-Wclang-format-violations]\n        receiver_.receive(message);\n                                   ^\n/home/user/clang-format/clang_format.cpp:26:6: error: code should be clang-formatted [-Wclang-format-violations]\n    }\n     ^\n/home/user/clang-format/clang_format.cpp:28:11: error: code should be clang-formatted [-Wclang-format-violations]\n    Sender sender_;\n          ^\nmake[3]: *** [CMakeFiles/check-clang-format.dir/build.make:71: CMakeFiles/check-clang-format] Error 1\nmake[2]: *** [CMakeFiles/Makefile2:139: CMakeFiles/check-clang-format.dir/all] Error 2\nmake[1]: *** [CMakeFiles/Makefile2:146: CMakeFiles/check-clang-format.dir/rule] Error 2\nmake: *** [Makefile:150: check-clang-format] Error 2\n```", "```cpp\n#include <iostream>\nclass Sender\n{\n   public:\n    void send(const std::string& message)\n    {\n        std::cout << “Sending: “ << message << std::endl;\n    }\n};\nclass Receiver\n{\n   public:\n    void receive(const std::string& message)\n    {\n        std::cout << “Receiving: “ << message << std::endl;\n    }\n};\nclass Mediator\n{\n   public:\n    Mediator(Sender sender, Receiver receiver)\n        : sender_{std::move(sender)}, receiver_{std::move(receiver)}\n    {\n    }\n    void send(const std::string& message) { sender_.send(message); }\n    void receive(const std::string& message) { receiver_.receive(message); }\n   private:\n    Sender   sender_;\n    Receiver receiver_;\n};\n```", "```cpp\n# Create custom target to check clang-format\nif(CLANG_FORMAT_EXECUTABLE)\n    add_custom_target(\n        check-clang-format\n        COMMAND ${CLANG_FORMAT_EXECUTABLE} -style=file -Werror --dry-run ${ALL_SOURCE_FILES}\n        COMMENT “Checking code format with clang-format”\n    )\nelse()\n    message(“clang-format not found! Target ‘check-clang-format’ will not be available.”)\nendif()\n```", "```cpp\nint main() {\n  return 0;\n}\n```", "```cpp\nmake check-clang-format\n-- Configuring done\n-- Generating done\n-- Build files have been written to: /home/user/clang-format-tidy/build\n[100%] Checking code format with clang-format\n/home/user/clang-format-tidy/main.cpp:2:13: error: code should be clang-formatted [-Wclang-format-violations]\nint main() {\n            ^\nmake[3]: *** [CMakeFiles/check-clang-format.dir/build.make:71: CMakeFiles/check-clang-format] Error 1\nmake[2]: *** [CMakeFiles/Makefile2:137: CMakeFiles/check-clang-format.dir/all] Error 2\nmake[1]: *** [CMakeFiles/Makefile2:144: CMakeFiles/check-clang-format.dir/rule] Error 2\nmake: *** [Makefile:150: check-clang-format] Error 2\n```", "```cpp\n---\nChecks:          ‘readability-identifier-naming’\nFormatStyle:     file\nCheckOptions:\n  - key: readability-identifier-naming.NamespaceCase\n    value: ‘lower_case’\n  - key: readability-identifier-naming.InlineNamespaceCase\n    value: ‘lower_case’\n  - key: readability-identifier-naming.EnumCase\n    value: ‘CamelCase’\n  - key: readability-identifier-naming.EnumConstantCase\n    value: ‘UPPER_CASE’\n  - key: readability-identifier-naming.ClassCase\n    value: ‘CamelCase’\n  - key: readability-identifier-naming.StructCase\n    value: ‘CamelCase’\n  - key: readability-identifier-naming.ClassMethodCase\n    value: ‘lower_case’\n  - key: readability-identifier-naming.FunctionCase\n    value: ‘lower_case’\n  - key: readability-identifier-naming.VariableCase\n    value: ‘lower_case’\n  - key: readability-identifier-naming.GlobalVariableCase\n    value: ‘lower_case’\n  - key: readability-identifier-naming.StaticConstantCase\n    value: ‘UPPER_CASE’\n  - key: readability-identifier-naming.PublicMemberCase\n    value: ‘lower_case’\n  - key: readability-identifier-naming.ProtectedMemberCase\n    value: ‘lower_case’\n  - key: readability-identifier-naming.PrivateMemberCase\n    value: ‘lower_case’\n  - key: readability-identifier-naming.PrivateMemberSuffix\n    value: ‘_’\n  - key: readability-identifier-naming.ClassMemberCase\n    value: ‘lower_case’\n```", "```cpp\n# Generate compilation database in the build directory\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n# Find clang-tidy\nfind_program(CLANG_TIDY_EXECUTABLE NAMES clang-tidy)\n# Gather all source files from the root directory recursively\nfile(GLOB_RECURSE ALL_SOURCE_FILES\n    *.cpp\n    *.cc\n    *.c++\n    *.c\n    *.C\n    *.h\n    *.hpp\n    *.hxx\n)\n# Exclude files in the build directory\nlist(FILTER ALL_SOURCE_FILES EXCLUDE REGEX “^${CMAKE_BINARY_DIR}.*”)\n# Create custom target to run clang-tidy\nif(CLANG_TIDY_EXECUTABLE)\n    add_custom_target(\n        clang-tidy\n        COMMAND ${CLANG_TIDY_EXECUTABLE} -p=${CMAKE_BINARY_DIR} ${ALL_SOURCE_FILES}\n        COMMENT “Running clang-tidy”\n    )\nelse()\n    message(“clang-tidy not found! Target ‘clang-tidy’ will not be available.”)\nendif()\n# Create custom target to check clang-tidy\nif(CLANG_TIDY_EXECUTABLE)\n    add_custom_target(\n        check-clang-tidy\n        COMMAND ${CLANG_TIDY_EXECUTABLE} -p=${CMAKE_BINARY_DIR} --warnings-as-errors=* ${ALL_SOURCE_FILES}\n        COMMENT “Checking code quality with clang-tidy”\n    )\nelse()\n    message(“clang-tidy not found! Target ‘check-clang-tidy’ will not be available.”)\nendif()\n```", "```cpp\n#include <string>\n#include <vector>\nnamespace Filesystem { // CamelCase instead of lower_case\nenum class Permissions : uint8_t { READ, WRITE, execute };\nstruct User {\n    std::string name_; // redundant suffix _ for public member\n    int Id = 0;        // CamelCase instead of lower_case\n    Permissions permissions;\n};\nclass file { // lower_case instead of CamelCase\npublic:\n    file(int id, const std::string &file_name,\n         const std::vector<User> access_list)\n        : id{id}, FileName_{file_name}, access_list_{access_list} {}\n    int GetId() const // CamelCase instead of lower_case\n    {\n        return id;\n    }\n    auto &getName() const // camelBack instead of lower_case\n    {\n        return FileName_;\n    }\n    const std::vector<User> &access_list() const { return access_list_; }\nprivate:\n    int id;                // missing suffix _\n    std::string FileName_; // CamelCase instead of lower_case\n    std::vector<User> access_list_;\n};\n} // namespace Filesystem\nint main() {\n    auto user        = Filesystem::User{};\n    user.name_       = “user”;\n    user.permissions = Filesystem::Permissions::execute;\n    auto file = Filesystem::file{0, “~/home/user/file”, {user}};\n    return 0;\n}\n```", "```cpp\nmake check-clang-tidy\n[100%] Checking code quality with clang-tidy\n9 warnings generated.\n/home/user/clang-format-tidy/main.cpp:4:11: error: invalid case style for namespace ‘Filesystem’ [readability-identifier-naming,-warnings-as-errors]\n    4 | namespace Filesystem { // CamelCase instead of lower_case\n      |           ^~~~~~~~~~\n      |           filesystem\n/home/user/clang-format-tidy/main.cpp:6:49: error: invalid case style for enum constant ‘execute’ [readability-identifier-naming,-warnings-as-errors]\n    6 | enum class Permissions : uint8_t { READ, WRITE, execute };\n      |                                                 ^~~~~~~\n      |                                                 EXECUTE\n/home/user/clang-format-tidy/main.cpp:9:17: error: invalid case style for public member ‘name_’ [readability-identifier-naming,-warnings-as-errors]\n    9 |     std::string name_; // redundant suffix _ for public member\n      |                 ^~~~~\n      |                 name\n/home/user/clang-format-tidy/main.cpp:10:9: error: invalid case style for public member ‘Id’ [readability-identifier-naming,-warnings-as-errors]\n   10 |     int Id = 0;        // CamelCase instead of lower_case\n      |         ^~\n      |         id\n/home/user/clang-format-tidy/main.cpp:14:7: error: invalid case style for class ‘file’ [readability-identifier-naming,-warnings-as-errors]\n   14 | class file { // lower_case instead of CamelCase\n      |       ^~~~\n      |       File\n   15 | public:\n   16 |     file(int id, const std::string &file_name,\n      |     ~~~~\n      |     File\n/home/user/clang-format-tidy/main.cpp:20:9: error: invalid case style for function ‘GetId’ [readability-identifier-naming,-warnings-as-errors]\n   20 |     int GetId() const // CamelCase instead of lower_case\n      |         ^~~~~\n      |         get_id\n9 warnings treated as errors\n```", "```cpp\n#include <string>\n#include <vector>\nnamespace filesystem { // CamelCase instead of lower_case\nenum class Permissions : uint8_t { READ, WRITE, EXECUTE };\nstruct User {\n    std::string name; // redundant suffix _ for public member\n    int id = 0;       // CamelCase instead of lower_case\n    Permissions permissions;\n};\nclass File { // lower_case instead of CamelCase\npublic:\n    File(int id, const std::string &file_name,\n         const std::vector<User> access_list)\n        : id_{id}, file_name_{file_name}, access_list_{access_list} {}\n    int get_id() const // CamelCase instead of lower_case\n    {\n        return id_;\n    }\n    auto &get_name() const // camelBack instead of lower_case\n    {\n        return file_name_;\n    }\n    const std::vector<User> &access_list() const { return access_list_; }\nprivate:\n    int id_;                // missing suffix _\n    std::string file_name_; // CamelCase instead of lower_case\n    std::vector<User> access_list_;\n};\n} // namespace filesystem\nint main() {\n    auto user        = filesystem::User{};\n    user.name        = “user”;\n    user.permissions = filesystem::Permissions::EXECUTE;\n    auto file = filesystem::File{0, “~/home/user/file”, {user}};\n    return 0;\n}\n```", "```cpp\n    auto user = Filesystem::User{\n    ```", "```cpp\n        .name_ = “user”, .permissions = Filesystem::Permissions::execute};\n    ```"]