- en: '14'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Congratulations!
  prefs: []
  type: TYPE_NORMAL
- en: You have built a point-and-click adventure game that utilizes 3D assets, incorporates
    camera and character controllers that respond to player inputs, triggers visual
    and sound effects for feedback, follows player progress, and loads a new level.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will cover a topic that is usually covered when you come to the
    finish line. We will show you how to export your game so that you can share it
    with the rest of the world. That being said, we’ll also discuss reasons why you
    might want to export more frequently than just waiting until the end.
  prefs: []
  type: TYPE_NORMAL
- en: After that, we’ll be fully done with the technical parts of the engine. Hence,
    we’ll present a few pieces of advice, more like guidelines you can follow in your
    development cycle to be efficient either before you start your projects or during
    them.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, you will look at a few game genres for which you can use Godot Engine.
    Every game engine is usually built around at least one strong and a few core needs.
    That being said, most engines worth their salt also support the most expected
    features. You’ll see how some of the knowledge you have gained throughout the
    book could be expanded upon in new areas.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is going to be a relatively short and, most definitely, less technical
    chapter. Nevertheless, we still have the following topics to tackle:'
  prefs: []
  type: TYPE_NORMAL
- en: Exporting your game
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Offering different gameplay experiences
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discovering different genres
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you’ll have learned how to export your creation,
    evaluate different options you can offer to your players, and – finally – find
    a list of genres you can consider using Godot Engine for.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There won’t be any new resources in this chapter. If you prefer, you can continue
    your own work from the previous chapter or peruse the content we keep in this
    book’s repository at [https://github.com/PacktPublishing/Game-Development-with-Blender-and-Godot](https://github.com/PacktPublishing/Game-Development-with-Blender-and-Godot).
  prefs: []
  type: TYPE_NORMAL
- en: Exporting your game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, you have a game. What now? You can keep running the game in the editor,
    as you’ve been doing all along. At some point, though, you’ll most likely want
    to show it to your friends and family or even deploy it somewhere public for everybody
    to look at it. This section will teach you how to export your game so that you
    can share your creation with the rest of the world.
  prefs: []
  type: TYPE_NORMAL
- en: 'Although we’ll only cover how to do it for Windows, Godot Engine is also capable
    of exporting your game to the following platforms:'
  prefs: []
  type: TYPE_NORMAL
- en: Android
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: macOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Universal Windows Platform** (**UWP**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Although exporting is usually a simple process, it would be wise to check the
    documentation since updates that platforms receive sometimes change the steps
    you must take. You can find the most comprehensive list of instructions here:
    [https://docs.godotengine.org/en/3.4/tutorials/export/](https://docs.godotengine.org/en/3.4/tutorials/export/).'
  prefs: []
  type: TYPE_NORMAL
- en: What about consoles?
  prefs: []
  type: TYPE_NORMAL
- en: Consoles are not part of the aforementioned list because they lie in a somewhat
    gray area due to licensing. As a developer, you need to be in touch with a console
    producer and sign agreements to have access to their tools and kits. In essence,
    although there is still some technical aspect to this, it also has some moving
    parts in the legal department.
  prefs: []
  type: TYPE_NORMAL
- en: Before we start tackling Windows-specific export settings, we need to add or
    change a few things in our project.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing your project for export
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By default, Godot doesn’t launch your games in **Fullscreen** mode even though
    it’s something most games use. While in the end, we will make our game cover the
    whole screen, it’s worth discussing a few other options you will see when you
    open **Project Settings**. More specifically, you’ll see two features when you
    visit the **Window** section under the **Display** group, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Resizable**: This option makes your game screen resizable, just as you would
    be able to resize any other application that’s not in **Fullscreen** mode. This
    is on right off the bat, so turn it off.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Borderless**: When your game is not running in **Fullscreen** mode, it will
    have to have borders defined by your operating system. Having this option on will
    remove those borders and the header of the window. By the way, most modern desktop
    applications—such as Slack, Discord, and likewise—use this feature these days.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We suggest you turn on the **Fullscreen** option and the other two that we
    just talked about off. After that, this is what our **Project Settings** screen
    looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.1 – The project settings we are using before we export our game
    ](img/Figure_14.1_B17473.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.1 – The project settings we are using before we export our game
  prefs: []
  type: TYPE_NORMAL
- en: So far, we’ve focused only on building the game itself without worrying about
    the intro, game settings, or credits screens. These can be constructed just like
    any other Godot scene. Then, once you figure out the flow between these scenes,
    you can use the `change_scene` function to transition to the one the player is
    asking for. Alternatively, you can keep some of these screens as hidden scenes
    inside the `Game.tscn` file and turn their visibility on as requested.
  prefs: []
  type: TYPE_NORMAL
- en: Since our game will now run in **Fullscreen** mode, you won’t be able to terminate
    it by using the operating system’s buttons. In Windows, pressing the *Alt* + *F4*
    key combination will exit the window. We need to provide a far better way for
    the player to quit the game.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a mechanism for turning the game off
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Movies end with the production companies’ logos and actors’ names on a theater
    screen. Unless you are really intent on looking at the credits, you will consider
    this moment as your cue to get up and leave the theater. Either this way or if
    you want to terminate your movie experience early on at any moment you want, you
    have the freedom to leave the premises.
  prefs: []
  type: TYPE_NORMAL
- en: A similar situation would happen with the click of a button if you were consuming
    a movie with a video player on your computer. When we run our little game in **Fullscreen**
    mode, since there won’t be any button around to click, this is something you have
    to present to your players in different forms.
  prefs: []
  type: TYPE_NORMAL
- en: This is usually done by pressing *Esc* on the keyboard to reveal a screen—sometimes
    blocking the game screen and sometimes as an overlay—so that the player can either
    go into the game’s settings or load a different game session and obviously quit
    the game.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will implement only the *Esc* press part in this section and treat it as
    the player’s desire to quit. To that end, we suggest you open the `Game.gd` script
    and add the following lines of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You might have been expecting to see *Esc* in that `if` block. It’s there but
    as an **identifier**. If you go to **Project Settings** and bring up the **Input
    Map** tab, you will see a list of shortcuts that are mapped to easily comprehensible
    names. The following screenshot shows a portion of **Input Map**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.2 – The Input Map tab is part of Project Settings ](img/Figure_14.2_B17473.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.2 – The Input Map tab is part of Project Settings
  prefs: []
  type: TYPE_NORMAL
- en: If you’re building games that allow your players to use multiple input devices,
    then configuring **Input Map** will be tremendously helpful. For example, you
    could set it so that a game controller or a joystick’s button press means the
    same thing if the player wishes to exert the same behavior with a keyboard. It’s
    a neat way of consolidating different inputs under one name you can easily follow
    in your code.
  prefs: []
  type: TYPE_NORMAL
- en: We took care of screen sizes and letting the player quit the game, so we should
    be all set for exporting our game.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Windows export settings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Godot’s download size is extremely small compared to other game engines. One
    of the reasons for this is that it doesn’t come loaded with export packages. Platform
    requirements sometimes change and Godot’s specific functionalities must conform
    to their guidelines, so it makes sense to download and get updates on export packages
    as you go.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we’ve never exported a game, there is no export package in our setup.
    To get one, press the **Editor** button in the top menu to access the **Manage
    Export Templates** setting. When you bring it up, you will see an interface with
    which you can download and install the right package for the version you are using.
    The following screenshot shows the current state of export templates:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.3 – This screen will help us download export templates ](img/Figure_14.3_B17473.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.3 – This screen will help us download export templates
  prefs: []
  type: TYPE_NORMAL
- en: 'You should press the **Download and Install** button and wait. Once that’s
    done, you could press the **Close** button in that interface. Next in our export
    efforts is to work with the **Export** settings, so follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Press the **Project** button in the top menu and select **Export** among the
    options.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press the **Add** button and choose **Windows Desktop** among the options.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill out the `Build` folder outside the project files, so we defined it as `../Build/Clara.exe`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press the **Export Project** button in the bottom part of the **Export** interface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Turn off the **Export With Debug** option near the bottom. Confirm your file
    path and press **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Before we move on to explaining things, here is a visual representation of
    some of the steps you had to take for exporting:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.4 – Some of the export settings for Windows ](img/Figure_14.4_B17473.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.4 – Some of the export settings for Windows
  prefs: []
  type: TYPE_NORMAL
- en: These steps, assuming your Windows is running on a 64-bit machine, will export
    your game to the folder you defined. When you run the executable, you should be
    playing the game just as you were while you were developing it in Godot. Pressing
    *Esc* will terminate the program and take you back to the operating system.
  prefs: []
  type: TYPE_NORMAL
- en: You might have noticed an extra file with a PCK extension besides `Clara.exe`.
    If you want to keep those two together, you can turn on the **Embed PCK** option
    in the **Export** settings, yet keeping things separate might be a good idea too.
    Godot keeps your game’s resources in a separate package file and uses it when
    you run the executable.
  prefs: []
  type: TYPE_NORMAL
- en: Why or when would this be useful? If you want to enhance your game with more
    content, you can create only content packages and instruct the game executable
    to pull them in. Your next DLC might be just around the corner, and this is a
    useful mechanism toward that goal.
  prefs: []
  type: TYPE_NORMAL
- en: Not only do you have a finished game, but you can also ship it! Exciting, indeed.
    Although we have provided mostly technical instructions, we feel it would also
    be valuable to share a few words about different gameplay experiences you can
    offer to your players.
  prefs: []
  type: TYPE_NORMAL
- en: Offering different gameplay experiences
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, it’s OK to use prototype assets or another artist’s creations so
    that you can focus on fun. We are saying this with a word of caution because we’ll
    always advise you to be sure of the license of the assets you are using. That
    being said, the topic we want to discuss is what you do with the assets once you
    have access to them.
  prefs: []
  type: TYPE_NORMAL
- en: The `Models` folder contains extra assets that we didn’t use throughout the
    book. When you were constructing the first level in [*Chapter 9*](B17473_09.xhtml#_idTextAnchor146),
    *Designing the Level*, we mentioned that you could use some of those other assets.
    Maybe you did and had to follow the instructions in later chapters based on your
    own conditions, especially with input detection, pathfinding, and likewise.
  prefs: []
  type: TYPE_NORMAL
- en: At some point, as with right now in the last pages of this book, you might find
    yourself at a loss for coming up with what more to add to your game.
  prefs: []
  type: TYPE_NORMAL
- en: Having an iterative creation process
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some people find it much more empowering to have visual assets laid right in
    front of them. The creative juices start flowing when they look at different objects’
    size-and-shape relationships. Then, there are others who find this inconvenient
    and getting in the way of drawing out a proper plan. If they figure out what needs
    to be done, they can start altering assets or looking for new ones. Finally, a
    mix of both of these approaches might work.
  prefs: []
  type: TYPE_NORMAL
- en: In the end—specifically, if you want to go commercial with your work—you’ve
    got to keep the player in the center of your workflow. Quick iterations followed
    by early and frequent playtesting might be what you need. The ramifications of
    some of your choices mixed with players’ expectations from the game might create
    a lot of stress, so be aware of this. We’ll give you an example by using the assets
    and layout of the second level.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are currently two bookcases on that level: an upright one and a knocked-down
    one. This is a relatively cheap and effective storytelling method. Why is one
    bookcase on the floor? Perhaps there was a calamity, but we don’t know. Is it
    going to be moved out of the way? If you, as a developer, want it or the playtesting
    shows it’s a strong request, then you have to spend more time in Blender or Godot
    to come up with an animation plan for the bookcase. Clara will most likely need
    another action that shows her lifting up and moving the bookcase. If she shouldn’t
    because it’s unlikely that she can lift up such a heavy object, then you either
    need a tool or a companion that can help her.'
  prefs: []
  type: TYPE_NORMAL
- en: One simple change or request, and you will be inundated with a series of tasks.
    Unfortunately, not all these changes will be visual either. You’ll have to account
    for the programming parts where you have to keep the state of the bookcase still
    on the floor or moved out of the way.
  prefs: []
  type: TYPE_NORMAL
- en: Ultimately, as the creator, you’ve got to ask yourself where this effort might
    be leading. If you could take this idea to have Clara access another level or
    a secret used in the game—in other words, mix it with something that already exists
    as a mechanic—you can replicate it with the minimum number of steps; it might
    be worth it.
  prefs: []
  type: TYPE_NORMAL
- en: So, it’s always a trade-off. As much as you should honor fun and your players’
    requests, you should approach it carefully and also consider what works best for
    you.
  prefs: []
  type: TYPE_NORMAL
- en: As we are wrapping up our book, let us discuss which other things you can do
    with Godot.
  prefs: []
  type: TYPE_NORMAL
- en: Discovering different genres
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Even though Godot Engine is known for creating quality 2D games and other well-known
    engines are preferred for building 3D games, you have seen that Godot is actually
    quite capable of building a 3D game. This is going to change for the better when
    Godot 4 comes out.
  prefs: []
  type: TYPE_NORMAL
- en: 'Until then, what else can you do with Godot? You can build any kind of game
    with it, to be honest. There has also been a recent trend to build desktop applications
    using Godot Engine. However, we will consider these cases as extraordinary and
    instead focus on some more commonly known genres that employ 3D features, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Simulation and strategy games: When you used raycasting to detect user input,
    it was done so that Clara could move to a particular spot with pathfinding. In
    a simulation or strategy game, either on a grid or free-move structure, your selected
    unit or units could move to their designated destination in a similar way. You
    could even combine a turn-based feature on top of this where you keep track of
    which side’s units have already moved.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Racing games: Godot already has a **VehicleBody** node to simulate the behavior
    of a car. Isn’t that nice! By appropriately placing a **Camera** node inside a
    **MeshInstance** node and combining the mechanics of a **VehicleBody** node, you
    could be building the next awesome racing game. Start your engine, Godot Engine,
    and vroom!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'First-person shooters: A classic example that could definitely be built with
    Godot Engine. You’ll be using raycasting a lot in this type of game where you
    detect whether bullets connect with objects. If they do, maybe a good mix of technical
    and creative problems lies ahead of you. Should bullets penetrate or destroy every
    object the same way?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Role-playing games: This is similar to First-person shooters, so it could be
    done. In this genre, you generally have a lengthy narrative to present to your
    player. Also, you’ve got to keep track of where the player is in the story and
    whether they have met some of the conditions to reveal the following parts of
    the story or the outcome of a puzzle. We haven’t discovered this in this book,
    but it would be wise to check out `Resource` as a useful Godot mechanism to facilitate
    content-heavy games.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Multiplayer/Co-op: This is not a genre by itself, since any genre can be made
    multiplayer or co-op. However, there are some games where the experience won’t
    be the same without networking, so we had to mention this separately. Godot has
    networking parts you can use to connect to third-party services or have two computers
    in the same network connect to each other.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are some of the genres that can most definitely be made with Godot. You
    can also include some other genres such as puzzles or sports games, or any other
    subgenre that uses 3D assets.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we are concluding our book in this chapter, your game project is also coming
    to an end. Hence, we opened it by showing you the necessary steps for exporting
    your game. Even though it might seem like you’d tackle this phase once your game
    is built, as was mentioned in the *Iterative creation process* section, it might
    be wise to export your game often and share it with others for frequent feedback.
  prefs: []
  type: TYPE_NORMAL
- en: The rest of the chapter was dedicated to discussing different approaches you
    can take in your game development efforts, best practices, general guidelines,
    and—finally—getting to know different genres you can target.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve come a long way in your game development journey. It started with Blender
    in the first five chapters and continued with a few transitional chapters until
    you fully switched to building a game with Godot Engine. Hopefully, you now have
    a much better opinion about how things work in both applications. Also, if you
    have some prior experience, we hope that this book has increased your confidence
    level in some areas.
  prefs: []
  type: TYPE_NORMAL
- en: As we are leaving you, we wish you the very best in your future efforts, and
    may your code compile the first time!
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You might have noticed that the exported game is using Godot’s icon. It would
    be nice to have your own custom icon. There are several moving parts to this,
    but it’s possible. The instructions are listed at [https://docs.godotengine.org/en/3.4/tutorials/export/changing_application_icon_for_windows.xhtml](https://docs.godotengine.org/en/3.4/tutorials/export/changing_application_icon_for_windows.xhtml).
  prefs: []
  type: TYPE_NORMAL
- en: 'If you would like to deploy your game for feedback purposes instead of sending
    files over emails or chat applications, you can use the following platforms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://itch.io](https://itch.io)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://gotm.io](https://gotm.io)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The latter URL is especially useful in our situation because that platform also
    hosts Godot game jams. For PC games, Steam is a big marketplace, but the aforementioned
    places might work faster than signing up and going through the application process
    on Steam.
  prefs: []
  type: TYPE_NORMAL
