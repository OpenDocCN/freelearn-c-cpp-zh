["```cpp\n#include <iostream>\n#include <iomanip>\nusing std::cout;\nusing std::endl;\nusing std::setprecision;\nusing std::string;\nusing std::to_string;\nclass Id final  // the contained 'part'\n{        // this class is not intended to be extended \nprivate:\n    string idNumber;\npublic:\n    Id() = default;\n    Id(const string &id): idNumber(id) { }\n    // We get default copy constructor, destructor\n    // without including without including prototype\n    // Id(const Id &id) = default;\n    // ~Id() = default;\n    const string &GetId() const { return idNumber; }\n};\n```", "```cpp\nclass Person\n{\nprivate:\n    string firstName;\n    string lastName;\n    char middleInitial = '\\0';   // in-class initialization\n    string title;  // Mr., Ms., Mrs., Miss, Dr., etc.\nprotected:\n    void ModifyTitle(const string &);\npublic:\n    Person() = default;   // default constructor\n    Person(const string &, const string &, char, \n           const string &);\n    // We get default copy constructor w/o prototype \n    // Person(const Person &) = default;  // copy ctor.\n    // But, we need prototype destructor to add 'virtual' \n    virtual ~Person() = default;  // virtual destructor\n    const string &GetFirstName() const \n        { return firstName; }\n    const string &GetLastName() const { return lastName; }\n    const string &GetTitle() const { return title; }\n    char GetMiddleInitial() const { return middleInitial; }\n    // virtual functions\n    virtual void Print() const;   \n    virtual void IsA() const;\n    virtual void Greeting(const string &) const;\n};\n//  Assume the member functions for Person exist here\n//  (they are the same as in previous chapters)\n```", "```cpp\nclass Student: public Person  // 'whole' object\n{\nprivate:\n    float gpa = 0.0;    // in-class initialization\n    string currentCourse;\n    static int numStudents;  \n    Id studentId;  // is composed of a 'part'\npublic:    \n    Student();  // default constructor\n    Student(const string &, const string &, char, \n            const string &, float, const string &, \n            const string &);\n    Student(const Student &);  // copy constructor\n    ~Student() override;  // destructor\n    // various member functions (many are inline)\n    void EarnPhD() { ModifyTitle(\"Dr.\"); } \n    float GetGpa() const { return gpa; }         \n    const string &GetCurrentCourse() const\n        { return currentCourse; }\n    void SetCurrentCourse(const string &); // proto. only\n    void Print() const override;\n    void IsA() const override \n        { cout << \"Student\" << endl; }\n    static int GetNumberStudents() { return numStudents; }\n    // Access function for embedded Id object\n    const string &GetStudentId() const;   // prototype only\n};\nint Student::numStudents = 0;  // static data member\ninline void Student::SetCurrentCourse(const string &c)\n{\n    currentCourse = c;\n}\n```", "```cpp\nStudent::Student(): studentId(to_string(numStudents + 100) \n                                         + \"Id\") \n{\n    numStudents++;   // increment static counter\n}\nStudent::Student(const string &fn, const string &ln, \n                 char mi, const string &t, float avg, \n                 const string &course, const string &id):  \n                 Person(fn, ln, mi, t), gpa(avg),\n                 currentCourse(course), studentId(id)\n{\n    numStudents++;\n}\nStudent::Student(const Student &s): Person(s),\n                gpa(s.gpa), currentCourse(s.currentCourse),\n                studentId(s.studentId)\n{\n    numStudents++;\n}\nStudent::~Student()   // destructor definition\n{\n    numStudents--;    // decrement static counter\n    // embedded object studentId will also be destructed\n}\nvoid Student::Print() const\n{\n    cout << GetTitle() << \" \" << GetFirstName() << \" \";\n    cout << GetMiddleInitial() << \". \" << GetLastName();\n    cout << \" with id: \" << studentId.GetId() << \" GPA: \";\n    cout << setprecision(3) <<  \" \" << gpa;\n    cout << \" Course: \" << currentCourse << endl;\n}    \nconst string &GetStudentId() const \n{   \n    return studentId.GetId();   \n} \n```", "```cpp\nint main()\n{\n    Student s1(\"Cyrus\", \"Bond\", 'I', \"Mr.\", 3.65, \"C++\",\n               \"6996CU\");\n    Student s2(\"Anne\", \"Brennan\", 'M', \"Ms.\", 3.95, \"C++\",\n               \"909EU\");\n    cout << s1.GetFirstName() << \" \" << s1.GetLastName();\n    cout << \" has id #: \" << s1.GetStudentId() << endl;\n    cout << s2.GetFirstName() << \" \" << s2.GetLastName();\n    cout << \" has id #: \" << s2.GetStudentId() << endl;\n    return 0;\n}\n```", "```cpp\nCyrus Bond has id #: 6996CU\nAnne Brennan has id #: 909EU \n```", "```cpp\n#include <iostream>\n#include <iomanip>\nusing std::cout;\nusing std::endl;\nusing std::setprecision;\nusing std::string;\nusing std::to_string;\n// classes Id and Person are omitted here to save space.\n// They will be as shown in previous example: Chp10-Ex1.cpp\nclass Student; // forward declaration\nclass University\n{\nprivate:\n    string name;\n    static constexpr int MAX = 25; // max students allowed\n    // Notice: each studentBody element is set to a nullptr \n    // using in-class initialization \n    Student *studentBody[MAX] = { }; // Association to\n                                     // many students\n    int currentNumStudents = 0;  // in-class initialization\npublic:\n    University();\n    University(const string &);\n    University(const University &) = delete; // no copies\n    ~University();\n    void EnrollStudent(Student *);\n    const string &GetName() const { return name; }\n    void PrintStudents() const;\n};\n```", "```cpp\n// Remember, currentNumStudents will be set w in-class init\n// and name, as a string member object, will be init to \n// empty. And studentBody (array of ptrs) will also set w\n// in-class initialization.\nUniversity::University()\n{\n    // in-lieu of in-class init, we could alternatively set\n    // studentBody[i] to nullptr iteratively in a loop:\n    // (the student body will start out empty)   \n    // for (int i = 0; i < MAX; i++) \n    //    studentBody[i] = nullptr; \n}\nUniversity::University(const string &n): name(n)\n{   \n    // see default constructor for alt init of studentBody\n}\nUniversity::~University()\n{\n    // The University will not delete the students\n    for (int i = 0; i < MAX; i++)   // only null out \n       studentBody[i] = nullptr;    // their link\n}                      \nvoid University::EnrollStudent(Student *s)\n{\n    // set an open slot in the studentBody to point to the\n    // Student passed in as an input parameter\n    studentBody[currentNumStudents++] = s;\n}\nvoid University::PrintStudents()const\n{\n    cout << name << \" has the following students:\" << endl;\n    // Simple loop to process set of students, however we\n    // will soon see safer, more modern ways to iterate \n    // over partial arrays w/o writing explicit 'for' loops\n    for (int i = 0; i < currentNumStudents; i++)\n    {\n       cout << \"\\t\" << studentBody[i]->GetFirstName();\n       cout << \" \" << studentBody[i]->GetLastName();\n       cout << endl;\n    }\n}\n```", "```cpp\nclass Student: public Person  \n{\nprivate:\n    // data members\n    float gpa = 0.0;  // in-class initialization\n    string currentCourse;\n    static int numStudents;\n    Id studentId;  // part, Student Has-A studentId\n    University *univ = nullptr;  // Assoc. to Univ object\npublic:                          \n    // member function prototypes\n    Student();  // default constructor\n    Student(const string &, const string &, char, \n            const string &, float, const string &, \n            const string &, University *);\n    Student(const Student &);  // copy constructor\n    ~Student() override;  // destructor\n    void EarnPhD() { ModifyTitle(\"Dr.\"); }\n    float GetGpa() const { return gpa; }\n    const string &GetCurrentCourse() const \n        { return currentCourse; }\n    void SetCurrentCourse(const string &); // proto. only\n    void Print() const override;\n    void IsA() const override \n        { cout << \"Student\" << endl; }\n    static int GetNumberStudents() { return numStudents; }\n    // Access functions for aggregate/associated objects\n    const string &GetStudentId() const \n        { return studentId.GetId(); }\n    const string &GetUniversity() const \n        { return univ->GetName(); }\n};\nint Student::numStudents = 0;  // def. of static data mbr.\ninline void Student::SetCurrentCourse(const string &c)\n{\n    currentCourse = c;\n}\n```", "```cpp\nStudent::Student(): studentId(to_string(numStudents + 100) \n                                        + \"Id\")\n{\n    // no current University association (set to nullptr \n    // with in-class initialization)\n    numStudents++;\n}\nStudent::Student(const string &fn, const string &ln, \n          char mi, const string &t, float avg, \n          const string &course, const string &id, \n          University *univ): Person(fn, ln, mi, t), \n          gpa(avg), currentCourse(course), studentId(id)\n{\n    // establish link to University, then back link\n    // note: forward link could also be set in the\n    // member initialization list\n    this->univ = univ;  // required use of ‹this›\n    univ->EnrollStudent(this);  // another required 'this'\n    numStudents++;\n}\nStudent::Student(const Student &s): Person(s), \n          gpa(s.gpa), currentCourse(s.currentCourse),\n          studentId(s.studentId)\n{\n    // Notice, these three lines of code are the same as \n    // in the alternate constructor – we could instead make\n    // a private helper method with this otherwise \n    // duplicative code as a means to simplify code \n    // maintenance. \n    this->univ = s.univ;    \n    univ->EnrollStudent(this);\n    numStudents++;\n}\nStudent::~Student()  // destructor\n{\n    numStudents--;\n    univ = nullptr;  // a Student does not delete its Univ\n    // embedded object studentId will also be destructed\n}\nvoid Student::Print() const\n{\n    cout << GetTitle() << \" \" << GetFirstName() << \" \";\n    cout << GetMiddleInitial() << \". \" << GetLastName();\n    cout << \" with id: \" << studentId.GetId() << \" GPA: \";\n    cout << setprecision(3) <<  \" \" << gpa;\n    cout << \" Course: \" << currentCourse << endl;\n}\n```", "```cpp\nint main()\n{\n    University u1(\"The George Washington University\");\n    Student s1(\"Gabby\", \"Doone\", 'A', \"Miss\", 3.85, \"C++\",\n               \"4225GWU\", &u1);\n    Student s2(\"Giselle\", \"LeBrun\", 'A', \"Ms.\", 3.45,\n               \"C++\", \"1227GWU\", &u1);\n    Student s3(\"Eve\", \"Kendall\", 'B', \"Ms.\", 3.71, \"C++\",\n               \"5542GWU\", &u1);\n    cout << s1.GetFirstName() << \" \" << s1.GetLastName();\n    cout << \" attends \" << s1.GetUniversity() << endl;\n    cout << s2.GetFirstName() << \" \" << s2.GetLastName();\n    cout << \" attends \" << s2.GetUniversity() << endl;\n    cout << s3.GetFirstName() << \" \" << s3.GetLastName();\n    cout << \" attends \" << s3.GetUniversity() << endl;\n    u1.PrintStudents();\n    return 0;\n}\n```", "```cpp\nGabby Doone attends The George Washington University\nGiselle LeBrun attends The George Washington University\nEve Kendall attends The George Washington University\nThe George Washington University has the following students:\n        Gabby Doone\n        Giselle LeBrun\n        Eve Kendall\n```"]