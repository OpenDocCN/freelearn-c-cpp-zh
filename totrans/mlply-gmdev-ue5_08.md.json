["```cpp\nPublicDependencyModuleNames.AddRange(new string[] { \"Core\", \"CoreUObject\", \"Engine\", \"InputCore\", \"EnhancedInput\" });\n```", "```cpp\nPublicDependencyModuleNames.AddRange(new string[] { \"Core\", \"CoreUObject\", \"Engine\", \"InputCore\", \"EnhancedInput\", \"NavigationSystem\" });\n```", "```cpp\nUPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = \"Minion Perception\", meta = (AllowPrivateAccess = \"true\"))\nTObjectPtr<class UPawnSensingComponent> PawnSense;\nUPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = \"Minion Perception\", meta = (AllowPrivateAccess = \"true\"))\nTObjectPtr<class USphereComponent> Collision;\nUPROPERTY()\nFVector PatrolLocation;\n```", "```cpp\nUPROPERTY(EditDefaultsOnly, BlueprintReadOnly, Category=\"Minion AI\")\nfloat PatrolSpeed = 150.0f;\nUPROPERTY(EditDefaultsOnly, BlueprintReadOnly, Category=\"Minion AI\")\nfloat ChaseSpeed = 350.0f;\nUPROPERTY(EditDefaultsOnly, BlueprintReadOnly, Category=\"Minion AI\")\nfloat PatrolRadius = 50000.0f;\n```", "```cpp\nUFUNCTION(BlueprintCallable, Category=\"Minion AI\")\nvoid SetNextPatrolLocation();\nUFUNCTION(BlueprintCallable, Category=\"Minion AI\")\nvoid Chase(APawn* Pawn);\nvirtual void PostInitializeComponents() override;\nFORCEINLINE UPawnSensingComponent* GetPawnSense() const { return PawnSense; }\nFORCEINLINE USphereComponent* GetCollision() const { return Collision; }\n```", "```cpp\nUFUNCTION()\nvoid OnPawnDetected(APawn* Pawn);\nUFUNCTION()\nvoid OnBeginOverlap(AActor* OverlappedActor, AActor* OtherActor);\n```", "```cpp\n#include \"AIController.h\"\n#include \"NavigationSystem.h\"\n#include \"US_Character.h\"\n#include \"Components/CapsuleComponent.h\"\n#include \"GameFramework/CharacterMovementComponent.h\"\n#include \"Perception/PawnSensingComponent.h\"\n#include \"Blueprint/AIBlueprintHelperLibrary.h\"\n#include \"Components/SphereComponent.h\"\n```", "```cpp\nbUseControllerRotationPitch = false;\nbUseControllerRotationYaw = false;\nbUseControllerRotationRoll = false;\nAutoPossessAI = EAutoPossessAI::PlacedInWorldOrSpawned;\nAIControllerClass = AAIController::StaticClass();\nPawnSense = CreateDefaultSubobject<UPawnSensingComponent>(TEXT(\"PawnSense\"));\nPawnSense->SensingInterval = .8f;\nPawnSense->SetPeripheralVisionAngle(45.f);\nPawnSense->SightRadius = 1500.f;\nPawnSense->HearingThreshold = 400.f;\nPawnSense->LOSHearingThreshold = 800.f;\nCollision = CreateDefaultSubobject<USphereComponent>(TEXT(\"Collision\"));\nCollision->SetSphereRadius(100);\nCollision->SetupAttachment(RootComponent);\nGetCapsuleComponent()->InitCapsuleSize(60.f, 96.0f);\nGetCapsuleComponent()->SetGenerateOverlapEvents(true);\nGetMesh()->SetRelativeLocation(FVector(0.f, 0.f, -91.f));\nstatic ConstructorHelpers::FObjectFinder<USkeletalMesh> SkeletalMeshAsset(TEXT(\"/Game/KayKit/Skeletons/skeleton_minion\"));\nif (SkeletalMeshAsset.Succeeded())\n{\n GetMesh()->SetSkeletalMesh(SkeletalMeshAsset.Object);\n}\nGetCharacterMovement()->bOrientRotationToMovement = true;\nGetCharacterMovement()->RotationRate = FRotator(0.0f, 500.0f, 0.0f);\nGetCharacterMovement()->MaxWalkSpeed = 200.f;\nGetCharacterMovement()->MinAnalogWalkSpeed = 20.f;\nGetCharacterMovement()->BrakingDecelerationWalking = 2000.f;\n```", "```cpp\nSetNextPatrolLocation();\n```", "```cpp\nvoid AUS_Minion::PostInitializeComponents()\n{\n Super::PostInitializeComponents();\nif(GetLocalRole() != ROLE_Authority) return;\n OnActorBeginOverlap.AddDynamic(this, &AUS_Minion::OnBeginOverlap);\n GetPawnSense()->OnSeePawn.AddDynamic(this, &AUS_Minion::OnPawnDetected);\n}\n```", "```cpp\nvoid AUS_Minion::OnPawnDetected(APawn* Pawn)\n{\n if (!Pawn->IsA<AUS_Character>()) return;\n GEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::Red, TEXT(\"Character detected!\"));\n if (GetCharacterMovement()->MaxWalkSpeed != ChaseSpeed)\n {\n  Chase(Pawn);\n }\n}\n```", "```cpp\nvoid AUS_Minion::OnBeginOverlap(AActor* OverlappedActor, AActor* OtherActor)\n{\n if (!OtherActor->IsA<AUS_Character>()) return;\n GEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::Yellow, TEXT(\"Character captured!\"));\n}\n```", "```cpp\nvoid AUS_Minion::SetNextPatrolLocation()\n{\n if(GetLocalRole() != ROLE_Authority) return;\n GetCharacterMovement()->MaxWalkSpeed = PatrolSpeed;\n const auto LocationFound = UNavigationSystemV1::K2_GetRandomReachablePointInRadius(\n     this, GetActorLocation(), PatrolLocation, PatrolRadius);\n if(LocationFound)\n {\n  UAIBlueprintHelperLibrary::SimpleMoveToLocation(GetController(), PatrolLocation);\n }\n}\nvoid AUS_Minion::Chase(APawn* Pawn)\n{\n if(GetLocalRole() != ROLE_Authority) return;\n GetCharacterMovement()->MaxWalkSpeed = ChaseSpeed;\n UAIBlueprintHelperLibrary::SimpleMoveToActor(GetController(), Pawn);\n DrawDebugSphere(GetWorld(), Pawn->GetActorLocation(), 25.f, 12, FColor::Red, true, 10.f, 0, 2.f);\n}\n```", "```cpp\nif(GetLocalRole() != ROLE_Authority) return;\nif(GetMovementComponent()->GetMaxSpeed() == ChaseSpeed) return;\nif((GetActorLocation() - PatrolLocation).Size() < 500.f)\n{\n SetNextPatrolLocation();\n}\n```", "```cpp\nUPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = \"Spawn System\", meta = (AllowPrivateAccess = \"true\"))\nTObjectPtr<class UBoxComponent> SpawnArea;\nUPROPERTY()\nFTimerHandle SpawnTimerHandle;\n```", "```cpp\nUPROPERTY(EditAnywhere, BlueprintReadOnly, Category=\"Spawn System\")\nTArray<TSubclassOf<class AUS_Minion>> SpawnableMinions;\nUPROPERTY(EditAnywhere, BlueprintReadOnly, Category=\"Spawn System\")\nfloat SpawnDelay = 10.0f;\nUPROPERTY(EditAnywhere, BlueprintReadOnly, Category=\"Spawn System\")\nint32 NumMinionsAtStart = 5;\n```", "```cpp\nUFUNCTION()\nvoid Spawn();\n```", "```cpp\n#include \"US_Minion.h\"\n#include \"Components/BoxComponent.h\"\n```", "```cpp\nSpawnArea = CreateDefaultSubobject<UBoxComponent>(TEXT(\"Spawn Area\"));\nSpawnArea->SetupAttachment(RootComponent);\nSpawnArea->SetBoxExtent(FVector(1000.0f, 1000.0f, 100.0f));\n```", "```cpp\nif(SpawnableMinions.IsEmpty()) return;\nif(GetLocalRole() != ROLE_Authority) return;\nfor (int32 i = 0; i < NumMinionsAtStart; i++)\n{\n Spawn();\n}\nGetWorldTimerManager().SetTimer(SpawnTimerHandle, this, &AUS_MinionSpawner::Spawn, SpawnDelay, true, SpawnDelay);\n```", "```cpp\nvoid AUS_MinionSpawner::Spawn()\n{\n FActorSpawnParameters SpawnParams;\n SpawnParams.SpawnCollisionHandlingOverride =\n ESpawnActorCollisionHandlingMethod::AdjustIfPossibleButDont SpawnIfColliding;\n auto Minion =\n  SpawnableMinions[FMath::RandRange(0, SpawnableMinions.Num() - 1)];\n const auto Rotation =\n  FRotator(0.0f, FMath::RandRange(0.0f, 360.0f), 0.0f);\n const auto Location =\n  SpawnArea->GetComponentLocation() +\n   FVector(\n    FMath::RandRange(-SpawnArea->GetScaledBoxExtent().X,SpawnArea->GetScaledBoxExtent().X),\n    FMath::RandRange(-SpawnArea->GetScaledBoxExtent().Y, SpawnArea->GetScaledBoxExtent().Y),\n    0.0f);\n GetWorld()->SpawnActor<AUS_Minion>(Minion, Location, Rotation, SpawnParams);\n}\n```"]