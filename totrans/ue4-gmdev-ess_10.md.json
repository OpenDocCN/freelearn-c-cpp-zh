["```cpp\nUPROPERTY( EditAnywhere, BlueprintReadWrite, Category = \"My Character\", meta = (AllowPrivateAccess = \"true\") )\nfloat Health;\n```", "```cpp\nHealth = 100.f; // .f is optional. If it's confusing you can replace it with 100.0\n```", "```cpp\nvirtual float TakeDamage( float Damage, struct FDamageEvent const& DamageEvent, AController* EventInstigator, AActor* DamageCauser ) override;\n```", "```cpp\nfloat APACKT_CPPCharacter::TakeDamage(float Damage, struct FDamageEvent const& DamageEvent, AController* EventInstigator, AActor* DamageCauser)\n{\n // Super key word is used here to call the actual TakeDamage function from the parent class which returns a float value.We then assign this value to ActualDamage which is a float type.\n const float ActualDamage = Super::TakeDamage(Damage, DamageEvent, EventInstigator, DamageCauser);\n // Check if we have health\n if (Health > 0.0)\n {\n  // Reduce health by the damage received\n  Health = Health - ActualDamage;\n  // return the actual damage received\n  return ActualDamage;\n }\n // Player has no health. So return 0.0\n return 0.0;\n}\n```", "```cpp\nFTimerHandle TimerHandle_HealthRegen;\n```", "```cpp\n/* After taking damage, Regenerate Health will be called after this much seconds. */\nUPROPERTY( EditAnywhere, Category = \"My Character\" )\nfloat InitialDelay;\n\n/* Time to regenerate health. */\nUPROPERTY( EditAnywhere, Category = \"My Character\" )\nfloat RegenDelay;\n```", "```cpp\nUPROPERTY( EditAnywhere, BlueprintReadWrite, Category = \"My Character\", meta = (AllowPrivateAccess = \"true\") )\nfloat RegenerateAmount;\n```", "```cpp\nvoid RegenerateHealth();\n```", "```cpp\nvoid APACKT_CPPCharacter::RegenerateHealth()\n{\n}\n```", "```cpp\nvoid APACKT_CPPCharacter::RegenerateHealth()\n{\n    if (Health >= GetClass()->GetDefaultObject<ABaseCharacter>()->Health)\n    {\n        Health = GetClass()->GetDefaultObject<ABaseCharacter>()->Health;\n    }\n    else\n    {\n        Health += RegenerateAmount;\n        FTimerHandle TimerHandle_ReRunRegenerateHealth;\n        GetWorldTimerManager().SetTimer( TimerHandle_ ReRunRegenerateHealth, this, &APACKT_CPPCharacter::RegenerateHealth, RegenDelay );\n    }\n}\n```", "```cpp\nfloat APACKT_CPPCharacter::TakeDamage( float Damage, struct FDamageEvent const& DamageEvent, AController* EventInstigator, AActor* DamageCauser )\n{\n// Get the actual damage applied\n const float ActualDamage = Super::TakeDamage(Damage, DamageEvent, EventInstigator, DamageCauser);\n\n if (Health <= 0.0)\n {\n  // Player has no health. So return 0.0\n  return 0.0;\n }\n\n // Reduce health by the damage received\n Health = Health - ActualDamage;\n\n //Is the health reduced to 0 for the first time?\n if (Health <= 0.0)\n {\n  // Clear existing timer\n  GetWorldTimerManager().ClearTimer(TimerHandle_HealthRegen);\n  return 0.0;\n }\n\n // Set a timer to call Regenerate Health function, if it is not running already\n if (!GetWorldTimerManager().IsTimerActive(TimerHandle_HealthRegen))\n {\n  GetWorldTimerManager().SetTimer(TimerHandle_HealthRegen, this, &APACKT_CPPCharacter::RegenerateHealth, InitialDelay);\n }\n\n // return the actual damage received\n return ActualDamage;\n}\n```", "```cpp\nUFUNCTION(BlueprintImplementableEvent, Category = \"My Character\")\nvoid PlayerHealthIsZero();\n```", "```cpp\nfloat APACKT_CPPCharacter::TakeDamage( float Damage, struct FDamageEvent const& DamageEvent, AController* EventInstigator, AActor* DamageCauser )\n{\n// Get the actual damage applied\n const float ActualDamage = Super::TakeDamage(Damage, DamageEvent, EventInstigator, DamageCauser);\n\n if (Health <= 0.0)\n {\n  // Player has no health. So return 0.0\n  return 0.0;\n }\n\n // Reduce health by the damage received\n Health = Health - ActualDamage;\n\n //Is the health reduced to 0 for the first time?\n if (Health <= 0.0)\n {\n  // Clear existing timer\n  GetWorldTimerManager().ClearTimer(TimerHandle_HealthRegen);\n\n  // Call the BLueprint event\n  PlayerHealthIsZero();\n\n  return 0.0;\n }\n\n // Set a timer to call Regenerate Health function, if it is not running already\n if (!GetWorldTimerManager().IsTimerActive(TimerHandle_HealthRegen))\n {\n  GetWorldTimerManager().SetTimer(TimerHandle_HealthRegen, this, &APACKT_CPPCharacter::RegenerateHealth, InitialDelay);\n }\n\n // return the actual damage received\n return ActualDamage; }\n```"]