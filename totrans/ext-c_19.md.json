["```cpp\n Signal      Standard   Action   Comment ───────────────────────────────────────────────────────────\nSIGABRT      P1990      Core    Abort signal from abort(3)SIGALRM      P1990      Term    Timer signal from alarm(2)SIGBUS       P2001      Core    Bus error (bad memory access)SIGCHLD      P1990      Ign     Child stopped or terminated SIGCLD         -        Ign     A synonym for SIGCHLD SIGCONT      P1990      Cont    Continue if stopped SIGEMT         -        Term    Emulator trap SIGFPE       P1990      Core    Floating-point exception SIGHUP       P1990      Term    Hangup detected on controlling terminal                                 or death of controlling process SIGILL       P1990      Core    Illegal Instruction SIGINFO        -                A synonym for SIGPWR SIGINT       P1990      Term    Interrupt from keyboard SIGIO          -        Term    I/O now possible (4.2BSD)SIGIOT         -        Core    IOT trap. A synonym for SIGABRT SIGKILL      P1990      Term    Kill signal SIGLOST        -        Term    File lock lost (unused)SIGPIPE      P1990      Term    Broken pipe: write to pipe with no                                 readers; see pipe(7)SIGPOLL      P2001      Term    Pollable event (Sys V).                                Synonym for SIGIO SIGPROF      P2001      Term    Profiling timer expired SIGPWR         -        Term    Power failure (System V)SIGQUIT      P1990      Core    Quit from keyboard SIGSEGV      P1990      Core    Invalid memory reference SIGSTKFLT      -        Term    Stack fault on coprocessor (unused)SIGSTOP      P1990      Stop    Stop process SIGTSTP      P1990      Stop    Stop typed at terminal SIGSYS       P2001      Core    Bad system call (SVr4);                                see also seccomp(2)SIGTERM      P1990      Term    Termination signal SIGTRAP      P2001      Core    Trace/breakpoint trap SIGTTIN      P1990      Stop    Terminal input for background process SIGTTOU      P1990      Stop    Terminal output for background process SIGUNUSED      -        Core    Synonymous with SIGSYS SIGURG       P2001      Ign     Urgent condition on socket (4.2BSD)SIGUSR1      P1990      Term    User-defined signal 1 SIGUSR2      P1990      Term    User-defined signal 2 SIGVTALRM    P2001      Term    Virtual alarm clock (4.2BSD)SIGXCPU      P2001      Core    CPU time limit exceeded (4.2BSD);                                see setrlimit(2)SIGXFSZ      P2001      Core    File size limit exceeded (4.2BSD);                                see setrlimit(2)SIGWINCH       -        Ign     Window resize signal (4.3BSD, Sun)\n```", "```cpp\n#include <stdio.h>\n#include <stdlib.h>\n#include <signal.h>\nvoid handle_user_signals(int signal) {\n  switch (signal) {\n    case SIGUSR1:\n      printf(\"SIGUSR1 received!\\n\");\n      break;\n    case SIGUSR2:\n      printf(\"SIGUSR2 received!\\n\");\n      break;\n    default:\n      printf(\"Unsupported signal is received!\\n\");\n  }\n}\nvoid handle_sigint(int signal) {\n  printf(\"Interrupt signal is received!\\n\");\n}\nvoid handle_sigkill(int signal) {\n  printf(\"Kill signal is received! Bye.\\n\");\n  exit(0);\n}\nint main(int argc, char** argv) {\n  signal(SIGUSR1, handle_user_signals);\n  signal(SIGUSR2, handle_user_signals);\n  signal(SIGINT, handle_sigint);\n  signal(SIGKILL, handle_sigkill);\n  while (1);\n  return 0;\n}\n```", "```cpp\n$ gcc ExtremeC_examples_chapter19_1.c -o ex19_1.out\n$ ./ex19_1.out &\n[1] 4598\n$\n```", "```cpp\n$ kill -SIGUSR2 4598\nSIGUSR2 received!\n$ kill -SIGUSR1 4598\nSIGUSR2 received!\n$ kill -SIGINT 4598\nInterrupt signal is received!\n$ kill -SIGKILL 4598\n$\n[1]+  Stopped         ./ex19_1.out\n$\n```", "```cpp\n#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <string.h>\n#include <sys/types.h>\nint main(int argc, char** argv) {\n  int fds[2];\n  pipe(fds);\n  int childpid = fork();\n  if (childpid == -1) {\n    fprintf(stderr, \"fork error!\\n\");\n    exit(1);\n  }\n  if (childpid == 0) {\n    // Child closes the read file descriptor\n    close(fds[0]);\n    char str[] = \"Hello Daddy!\";\n    // Child writes to the write file descriptor\n    fprintf(stdout, \"CHILD: Waiting for 2 seconds ...\\n\");\n    sleep(2);\n    fprintf(stdout, \"CHILD: Writing to daddy ...\\n\");\n    write(fds[1], str, strlen(str) + 1);\n  } else {\n    // Parent closes the write file descriptor\n    close(fds[1]);\n    char buff[32];\n    // Parent reads from the read file descriptor\n    fprintf(stdout, \"PARENT: Reading from child ...\\n\");\n    int num_of_read_bytes = read(fds[0], buff, 32);\n    fprintf(stdout, \"PARENT: Received from child: %s\\n\", buff);\n  }\n  return 0;\n}\n```", "```cpp\n$ gcc ExtremeC_examples_chapter19_2.c -o ex19_2.out\n$ ./ex19_2.out\nPARENT: Reading from child ...\nCHILD: Waiting for 2 seconds ...\nCHILD: Writing to daddy ...\nPARENT: Received from child: Hello Daddy!\n$\n```", "```cpp\n#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <string.h>\n#include <mqueue.h>\nint main(int argc, char** argv) {\n  // The message queue handler\n  mqd_t mq;\n  struct mq_attr attr;\n  attr.mq_flags = 0;\n  attr.mq_maxmsg = 10;\n  attr.mq_msgsize = 32;\n  attr.mq_curmsgs = 0;\n  int childpid = fork();\n  if (childpid == -1) {\n    fprintf(stderr, \"fork error!\\n\");\n    exit(1);\n  }\n  if (childpid == 0) {\n    // Child waits while the parent is creating the queue\n    sleep(1);\n    mqd_t mq = mq_open(\"/mq0\", O_WRONLY);\n    char str[] = \"Hello Daddy!\";\n    // Child writes to the write file descriptor\n    fprintf(stdout, \"CHILD: Waiting for 2 seconds ...\\n\");\n    sleep(2);\n    fprintf(stdout, \"CHILD: Writing to daddy ...\\n\");\n    mq_send(mq, str, strlen(str) + 1, 0);\n    mq_close(mq);\n  } else {\n    mqd_t mq = mq_open(\"/mq0\", O_RDONLY | O_CREAT, 0644, &attr);\n    char buff[32];\n    fprintf(stdout, \"PARENT: Reading from child ...\\n\");\n    int num_of_read_bytes = mq_receive(mq, buff, 32, NULL);\n    fprintf(stdout, \"PARENT: Received from child: %s\\n\", buff);\n    mq_close(mq);\n    mq_unlink(\"/mq0\");\n  }\n  return 0;\n}\n```", "```cpp\n$ gcc ExtremeC_examples_chapter19_3.c -lrt -o ex19_3.out\n$\n```", "```cpp\n$ ./ex19_3.out\nPARENT: Reading from child ...\nCHILD: Waiting for 2 seconds ...\nCHILD: Writing to daddy ...\nPARENT: Received from child: Hello Daddy!\n$\n```", "```cpp\n$ ping 8.8.8.8\nPING 8.8.8.8 (8.8.8.8): 56 data bytes\n64 bytes from 8.8.8.8: icmp_seq=0 ttl=123 time=12.190 ms\n64 bytes from 8.8.8.8: icmp_seq=1 ttl=123 time=25.254 ms\n64 bytes from 8.8.8.8: icmp_seq=2 ttl=123 time=15.478 ms\n64 bytes from 8.8.8.8: icmp_seq=3 ttl=123 time=22.287 ms\n64 bytes from 8.8.8.8: icmp_seq=4 ttl=123 time=21.029 ms\n64 bytes from 8.8.8.8: icmp_seq=5 ttl=123 time=28.806 ms\n64 bytes from 8.8.8.8: icmp_seq=6 ttl=123 time=20.324 ms\n^C\n--- 8.8.8.8 ping statistics ---\n7 packets transmitted, 7 packets received, 0.0% packet loss\nround-trip min/avg/max/stddev = 12.190/20.767/28.806/5.194 ms\n$\n```"]