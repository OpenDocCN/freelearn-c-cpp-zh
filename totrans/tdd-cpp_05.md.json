["```cpp\nTEST(\"Test bool confirms\")\n{\n    bool result = isNegative(0);\n    CONFIRM_FALSE(result);\n    result = isNegative(-1);\n    CONFIRM_TRUE(result);\n}\n```", "```cpp\nbool isNegative (int value)\n{\n    return value < 0;\n}\n```", "```cpp\n#define CONFIRM_FALSE( actual ) \\\nif (actual) \\\n{ \\\n    throw MereTDD::BoolConfirmException(false, __LINE__); \\\n}\n#define CONFIRM_TRUE( actual ) \\\nif (not actual) \\\n{ \\\n    throw MereTDD::BoolConfirmException(true, __LINE__); \\\n}\n```", "```cpp\ninline void confirm (\n    bool expected,\n    bool actual,\n    int line)\n{\n    if (actual != expected)\n    {\n        throw BoolConfirmException(expected, line);\n    }\n}\n```", "```cpp\n#define CONFIRM_FALSE( actual ) \\\n    MereTDD::confirm(false, actual, __LINE__)\n#define CONFIRM_TRUE( actual ) \\\n    MereTDD:: confirm(true, actual, __LINE__)\n```", "```cpp\nTEST(\"Test int confirms\")\n{\n    int result = multiplyBy2(0);\n    CONFIRM(0, result);\n    result = multiplyBy2(1);\n    CONFIRM(2, result);\n    result = multiplyBy2(-1);\n    CONFIRM(-2, result);\n}\n```", "```cpp\nint multiplyBy2 (int value)\n{\n    return value * 2;\n}\n```", "```cpp\n#define CONFIRM_FALSE( actual ) \\\n    MereTDD::confirm(false, actual, __LINE__)\n#define CONFIRM_TRUE( actual ) \\\n    MereTDD:: confirm(true, actual, __LINE__)\n#define CONFIRM( expected, actual ) \\\n    MereTDD::confirm(expected, actual, __LINE__)\n```", "```cpp\ninline void confirm (\n    int expected,\n    int actual,\n    int line)\n{\n    if (actual != expected)\n    {\n        throw ActualConfirmException(expected, actual, line);\n    }\n}\n```", "```cpp\nclass ActualConfirmException : public ConfirmException\n{\npublic:\n    ActualConfirmException (int expected, int actual, int line)\n    : mExpected(std::to_string(expected)),\n      mActual(std::to_string(actual)),\n      mLine(line)\n    {\n        formatReason();\n    }\nprivate:\n    void formatReason ()\n    {\n        mReason =  \"Confirm failed on line \";\n        mReason += std::to_string(mLine) + \"\\n\";\n        mReason += \"    Expected: \" + mExpected + \"\\n\";\n        mReason += \"    Actual  : \" + mActual;\n    }\n    std::string mExpected;\n    std::string mActual;\n    int mLine;\n};\n```", "```cpp\n---------------\nTest bool confirms\nPassed\n---------------\nTest int confirms\nPassed\n---------------\n```", "```cpp\nTEST(\"Test bool confirm failure\")\n{\n    bool result = isNegative(0);\n    CONFIRM_TRUE(result);\n}\nTEST(\"Test int confirm failure\")\n{\n    int result = multiplyBy2(1);\n    CONFIRM(0, result);\n}\n```", "```cpp\n---------------\nTest bool confirm failure\nFailed\nConfirm failed on line 41\n    Expected: true\n---------------\nTest int confirm failure\nFailed\nConfirm failed on line 47\n    Expected: 0\n    Actual  : 2\n---------------\n```", "```cpp\nclass ConfirmException\n{\npublic:\n    ConfirmException (int line)\n    : mLine(line)\n    { }\n    virtual ~ConfirmException () = default;\n    std::string_view reason () const\n    {\n        return mReason;\n    }\n    int line () const\n    {\n        return mLine;\n    }\nprotected:\n    std::string mReason;\n    int mLine;\n};\n```", "```cpp\n        try\n        {\n            test->runEx();\n        }\n        catch (ConfirmException const & ex)\n        {\n            test->setFailed(ex.reason(), ex.line());\n        }\n```", "```cpp\n    std::string mName;\n    bool mPassed;\n    std::string mReason;\n    std::string mExpectedReason;\n    int mConfirmLocation;\n};\n```", "```cpp\n    TestBase (std::string_view name)\n    : mName(name), mPassed(true), mConfirmLocation(-1)\n    { }\n```", "```cpp\n    void setFailed (std::string_view reason,          int confirmLocation = -1)\n    {\n        mPassed = false;\n        mReason = reason;\n        mConfirmLocation = confirmLocation;\n    }\n```", "```cpp\n    int confirmLocation () const\n    {\n        return mConfirmLocation;\n    }\n```", "```cpp\n        else\n        {\n            ++numFailed;\n            if (test->confirmLocation() != -1)\n            {\n                output << \"Failed confirm on line \"\n                    << test->confirmLocation() << \"\\n\";\n            }\n            else\n            {\n                output << \"Failed\\n\";\n            }\n            output << test->reason()\n                << std::endl;\n        }\n```", "```cpp\n    BoolConfirmException (bool expected, int line)\n    : ConfirmException(line)\n    {\n        mReason += \"    Expected: \";\n        mReason += expected ? \"true\" : \"false\";\n    }\n```", "```cpp\nclass ActualConfirmException : public ConfirmException\n{\npublic:\n    ActualConfirmException (int expected, int actual, int line)\n    : ConfirmException(line),\n      mExpected(std::to_string(expected)),\n      mActual(std::to_string(actual))\n    {\n        formatReason();\n    }\nprivate:\n    void formatReason ()\n    {\n        mReason += \"    Expected: \" + mExpected + \"\\n\";\n        mReason += \"    Actual  : \" + mActual;\n    }\n    std::string mExpected;\n    std::string mActual;\n};\n```", "```cpp\n---------------\nTest bool confirm failure\nFailed confirm on line 41\n    Expected: true\n---------------\nTest int confirm failure\nFailed confirm on line 47\n    Expected: 0\n    Actual  : 2\n---------------\n```", "```cpp\nTEST(\"Test bool confirm failure\")\n{\n    std::string reason = \"    Expected: true\";\n    setExpectedFailureReason(reason);\n    bool result = isNegative(0);\n    CONFIRM_TRUE(result);\n}\nTEST(\"Test int confirm failure\")\n{\n    std::string reason = \"    Expected: 0\\n\";\n    reason += \"    Actual  : 2\";\n    setExpectedFailureReason(reason);\n    int result = multiplyBy2(1);\n    CONFIRM(0, result);\n}\n```", "```cpp\n---------------\nTest bool confirm failure\nExpected failure\n    Expected: true\n---------------\nTest int confirm failure\nExpected failure\n    Expected: 0\n    Actual  : 2\n---------------\n```", "```cpp\nTEST(\"Test long comfirms\")\n{\n    long result = multiplyBy2(0L);\n    CONFIRM(0L, result);\n    result = multiplyBy2(1L);\n    CONFIRM(2L, result);\n    result = multiplyBy2(-1L);\n    CONFIRM(-2L, result);\n}\n```", "```cpp\nlong multiplyBy2 (long value)\n{\n    return value * 2L;\n}\n```", "```cpp\ntemplate <typename T>\nvoid confirm (\n    T const & expected,\n    T const & actual,\n    int line)\n{\n    if (actual != expected)\n    {\n        throw ActualConfirmException(\n            std::to_string(expected),\n            std::to_string(actual),\n            line);\n    }\n}\n```", "```cpp\n    ActualConfirmException (\n        std::string_view expected,\n        std::string_view actual,\n        int line)\n    : ConfirmException(line),\n      mExpected(expected),\n      mActual(actual)\n    {\n        formatReason();\n    }\n```", "```cpp\nTEST(\"Test long confirm failure\")\n{\n    std::string reason = \"    Expected: 0\\n\";\n    reason += \"    Actual  : 2\";\n    setExpectedFailureReason(reason);\n    long result = multiplyBy2(1L);\n    CONFIRM(0L, result);\n}\n```", "```cpp\n---------------\nTest long confirm failure\nExpected failure\n    Expected: 0\n    Actual  : 2\n---------------\n```", "```cpp\nTEST(\"Test long long confirms\")\n{\n    long long result = multiplyBy2(0LL);\n    CONFIRM(0LL, result);\n    result = multiplyBy2(10'000'000'000LL);\n    CONFIRM(20'000'000'000LL, result);\n    result = multiplyBy2(-10'000'000'000LL);\n    CONFIRM(-20'000'000'000LL, result);\n}\n```", "```cpp\n---------------\nTest long long confirms\nPassed\n---------------\n```", "```cpp\nTEST(\"Test long long confirm failure\")\n{\n    std::string reason = \"    Expected: 10000000000\\n\";\n    reason += \"    Actual  : 20000000000\";\n    setExpectedFailureReason(reason);\n    long long result = multiplyBy2(10'000'000'000LL);\n    CONFIRM(10'000'000'000LL, result);\n}\n```", "```cpp\n---------------\nTest long long confirm failure\nExpected failure\n    Expected: 10000000000\n    Actual  : 20000000000\n---------------\n```", "```cpp\nTEST(\"Test string confirms\")\n{\n    std::string result = \"abc\";\n    std::string expected = \"abc\";\n    CONFIRM(expected, result);\n}\n```", "```cpp\ninline void confirm (\n    std::string_view expected,\n    std::string_view actual,\n    int line)\n{\n    if (actual != expected)\n    {\n        throw ActualConfirmException(\n            expected,\n            actual,\n            line);\n    }\n}\n```", "```cpp\ninline void confirm (\n    std::string const & expected,\n    std::string const & actual,\n    int line)\n{\n    confirm(\n        std::string_view(expected),\n        std::string_view(actual),\n        line);\n}\n```", "```cpp\nTEST(\"Test string confirm failure\")\n{\n    std::string reason = \"    Expected: def\\n\";\n    reason += \"    Actual  : abc\";\n    setExpectedFailureReason(reason);\n    std::string result = \"abc\";\n    std::string expected = \"def\";\n    CONFIRM(expected, result);\n}\n```", "```cpp\n---------------\nTest string confirm failure\nExpected failure\n    Expected: def\n    Actual  : abc\n---------------\n```", "```cpp\nTEST(\"Test bool pointer confirms\")\n{\n    bool result1 = true;\n    bool result2 = false;\n    bool * pResult1 = &result1;\n    bool * pResult2 = &result2;\n    CONFIRM_TRUE(pResult1);\n    CONFIRM_FALSE(pResult2);\n}\n```", "```cpp\n---------------\nTest bool pointer confirms\nFailed confirm on line 86\n    Expected: false\n---------------\n```", "```cpp\n#define CONFIRM_FALSE( actual ) \\\n    confirm(false, actual, __LINE__)\n```", "```cpp\nTEST(\"Test bool pointer dereference confirms\")\n{\n    bool result1 = true;\n    bool result2 = false;\n    bool * pResult1 = &result1;\n    bool * pResult2 = &result2;\n    CONFIRM_TRUE(*pResult1);\n    CONFIRM_FALSE(*pResult2);\n}\n```", "```cpp\nTEST(\"Test string and string literal confirms\")\n{\n    std::string result = \"abc\";\n    CONFIRM(\"abc\", result);\n}\n```", "```cpp\nTEST(\"Test float confirms\")\n{\n    float f1 = 0.1f;\n    float f2 = 0.2f;\n    float sum = f1 + f2;\n    float expected = 0.3f;\n    CONFIRM(expected, sum);\n}\n```", "```cpp\nTEST(\"Test double confirms\")\n{\n    double d1 = 0.1;\n    double d2 = 0.2;\n    double sum = d1 + d2;\n    double expected = 0.3;\n    CONFIRM(expected, sum);\n}\n```", "```cpp\n---------------\nTest double confirms\nFailed confirm on line 122\n    Expected: 0.300000\n    Actual  : 0.300000\n---------------\n```", "```cpp\nTEST(\"Test long double confirms\")\n{\n    long double ld1 = 0.1;\n    long double ld2 = 0.2;\n    long double sum = ld1 + ld2;\n    long double expected = 0.3;\n    CONFIRM(expected, sum);\n}\n```", "```cpp\ninline void confirm (\n    float expected,\n    float actual,\n    int line)\n{\n    if (actual < (expected - 0.0001f) ||\n        actual > (expected + 0.0001f))\n    {\n        throw ActualConfirmException(\n            std::to_string(expected),\n            std::to_string(actual),\n            line);\n    }\n}\n```", "```cpp\ninline void confirm (\n    double expected,\n    double actual,\n    int line)\n{\n    if (actual < (expected - 0.000001) ||\n        actual > (expected + 0.000001))\n    {\n        throw ActualConfirmException(\n            std::to_string(expected),\n            std::to_string(actual),\n            line);\n    }\n}\n```", "```cpp\ninline void confirm (\n    long double expected,\n    long double actual,\n    int line)\n{\n    if (actual < (expected - 0.000001) ||\n        actual > (expected + 0.000001))\n    {\n        throw ActualConfirmException(\n            std::to_string(expected),\n            std::to_string(actual),\n            line);\n    }\n}\n```", "```cpp\nTEST(\"Test int confirms\")\n{\n    int result = multiplyBy2(0);\n    CONFIRM(0, result);\n    result = multiplyBy2(1);\n    CONFIRM(2, result);\n    result = multiplyBy2(-1);\n    CONFIRM(-2, result);\n}\n```", "```cpp\nTEST(\"Test int confirms\")\n{\n    CONFIRM(0, multiplyBy2(0));\n    CONFIRM(2, multiplyBy2(1));\n    CONFIRM(-2, multiplyBy2(-1));\n}\n```", "```cpp\nTEST(\"Test int confirms\")\n{\n    int result1 = multiplyBy2(0);\n    int result2 = multiplyBy2(1);\n    int result3 = multiplyBy2(-1);\n    CONFIRM(0, result1);\n    CONFIRM(2, result2);\n    CONFIRM(-2, result3);\n}\n```"]