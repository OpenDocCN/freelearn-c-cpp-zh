["```cpp\n#include <iostream>\nint main() {\n  int *cArray = new int[5];\n  for (int i = 0; i < 5; ++i) { cArray[i] = i + 1; }\n  for (int i = 0; i < 5; ++i) {\n    std::cout << cArray[i] << \" \";\n  }\n  std::cout << \"\\n\";\n  const int newSize = 7;\n  int *newCArray = new int[newSize];\n  for (int i = 0; i < 5; ++i) { newCArray[i] = cArray[i]; }\n  delete[] cArray;\n  cArray = newCArray;\n  for (int i = 0; i < newSize; ++i) {\n    std::cout << cArray[i] << \" \";\n  }\n  std::cout << \"\\n\";\n  int arraySize = newSize;\n  std::cout << \"Size of cArray: \" << arraySize << \"\\n\";\n  delete[] cArray;\n  return 0;\n}\n```", "```cpp\n1 2 3 4 5\n1 2 3 4 5 0 0\nSize of cArray: 7\n```", "```cpp\n#include <iostream>\n#include <vector>\nint main() {\n  std::vector<int> stlVector = {1, 2, 3, 4, 5};\n  for (const int val : stlVector) {\n    std::cout << val << \" \";\n  }\n  std::cout << \"\\n\";\n  stlVector.resize(7);\n  for (const int val : stlVector) {\n    std::cout << val << \" \";\n  }\n  std::cout << \"\\n\";\n  std::cout << \"Size of stlVector: \" << stlVector.size()\n            << \"\\n\";\n  return 0;\n}\n```", "```cpp\n1 2 3 4 5\n1 2 3 4 5 0 0\nSize of stlVector: 7\n```", "```cpp\n#include <iostream>\nint main() {\n  int *cArray = new int[5];\n  for (int i = 0; i < 5; ++i) { cArray[i] = i + 1; }\n  int *temp = new int[10];\n  for (int i = 0; i < 5; ++i) { temp[i] = cArray[i]; }\n  delete[] cArray; // Important: free the old memory\n  cArray = temp;\n  for (int i = 5; i < 10; ++i) { cArray[i] = i + 1; }\n  for (int i = 0; i < 10; ++i) {\n    std::cout << cArray[i] << \" \";\n  }\n  std::cout << \"\\n\";\n  delete[] cArray;\n  return 0;\n}\n```", "```cpp\n1 2 3 4 5 6 7 8 9 10\n```", "```cpp\n#include <iostream>\n#include <vector>\nint main() {\n  std::vector<int> myVector(5);\n  for (int i = 0; i < 5; ++i) { myVector[i] = i + 1; }\n  for (int i = 5; i < 10; ++i) {\n    myVector.push_back(i + 1);\n  }\n  for (int val : myVector) { std::cout << val << \" \"; }\n  std::cout << \"\\n\";\n  return 0;\n}\n```", "```cpp\n1 2 3 4 5 6 7 8 9 10\n```", "```cpp\nstd::vector<int> vec;\n```", "```cpp\nstd::vector<int> vec(10);\n```", "```cpp\nstd::vector<int> vec(10, 5);\n```", "```cpp\nstd::vector<int> vec = {1, 2, 3, 4, 5};\n```", "```cpp\n// Method 1: Declare a vector and then add elements using\n// push_back (Add integers from 0 to 4)\nstd::vector<int> vec1;\nfor (int i = 0; i < 5; ++i) { vec1.push_back(i); }\n// Method 2: Initialize a vector with a specific size and\n// default value (5 elements with the value 10)\nstd::vector<int> vec2(5, 10);\n// Method 3: List initialization with braced initializers\n// Initialize with a list of integers\nstd::vector<int> vec3 = {1, 2, 3, 4, 5};\n// Method 4: Initialize a vector using the fill\n// constructor Default-initializes the five elements (with\n// zeros)\nstd::vector<int> vec4(5);\n// Method 5: Using std::generate with a lambda function\nstd::vector<int> vec5(5);\nint value = 0;\nstd::generate(vec5.begin(), vec5.end(),\n              [&value]() { return value++; });\n```", "```cpp\nstd::vector<int> vec1 = {1, 2, 3, 4, 5};\nstd::vector<int> vec2(vec1);\n```", "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\nclass Person {\npublic:\n  Person() = default;\n  Person(std::string_view n, int a) : name(n), age(a) {}\n  void display() const {\n    std::cout << \"Name: \" << name << \", Age: \" << age\n              << \"\\n\";\n  }\nprivate:\n  std::string name;\n  int age{0};\n};\nint main() {\n  std::vector<Person> people;\n  people.push_back(Person(\"Lisa\", 30));\n  people.push_back(Person(\"Corbin\", 25));\n  people.resize(3);\n  people[2] = Person(\"Aaron\", 28);\n  for (const auto &person : people) { person.display(); }\n  return 0;\n}\n```", "```cpp\nName: Lisa, Age: 30\nName: Corbin, Age: 25\nName: Aaron, Age: 28\n```", "```cpp\n#include <iostream>\n#include <vector>\nint main() {\n  std::vector<int> numbers = {10, 20, 30, 40, 50};\n  const auto secondElement = numbers[1];\n  std::cout << \"The second element is: \" << secondElement\n            << \"\\n\";\n  // Beware: The following line can cause undefined\n  // behavior!\n  const auto outOfBoundsElement = numbers[10];\n  std::cout << \"Accessing an out-of-bounds index: \"\n            << outOfBoundsElement << \"\\n\";\n  return 0;\n}\n```", "```cpp\nThe second element is: 20\nAccessing an out-of-bounds index: 0\n```", "```cpp\n#include <iostream>\n#include <vector>\nint main() {\n  std::vector<int> numbers = {10, 20, 30, 40, 50};\n  try {\n    const auto secondElement = numbers.at(1);\n    std::cout << \"The second element is: \" << secondElement\n              << \"\\n\";\n  } catch (const std::out_of_range &e) {\n    std::cerr << \"Error: \" << e.what() << \"\\n\";\n  }\n  try {\n    const auto outOfBoundsElement = numbers.at(10);\n    std::cout << \"Accessing an out-of-bounds index: \"\n              << outOfBoundsElement << \"\\n\";\n  } catch (const std::out_of_range &e) {\n    std::cerr << \"Error: \" << e.what() << \"\\n\";\n  }\n  return 0;\n}\n```", "```cpp\n#include <iostream>\n#include <vector>\nint main() {\n  std::vector<int> numbers = {10, 20, 30, 40, 50};\n  const auto firstElement = numbers.front();\n  std::cout << \"The first element is: \" << firstElement\n            << \"\\n\";\n  const auto lastElement = numbers.back();\n  std::cout << \"The last element is: \" << lastElement\n            << \"\\n\";\n  return 0;\n}\n```", "```cpp\nThe first element is: 10\nThe last element is: 50\n```", "```cpp\n#include <iostream>\n#include <vector>\nint main() {\n  std::vector<int> data = {1, 2, 3, 4, 5};\n  const auto elementCount = data.size();\n  std::cout << \"Vector contains \" << elementCount\n            << \" elements.\\n\";\n  return 0;\n}\n```", "```cpp\n#include <iostream>\n#include <vector>\nint main() {\n  std::vector<int> scores;\n  std::cout << \"Initial size of scores: \" << scores.size()\n            << \"\\n\";\n  scores.push_back(95);\n  std::cout << \"Size after adding one score:\"\n            << scores.size() << \"\\n\";\n  std::cout << \"Recently added score: \" << scores[0]\n            << \"\\n\";\n  return 0;\n}\n```", "```cpp\n#include <iostream>\n#include <vector>\nint main() {\n  std::vector<int> scores = {90, 92, 97};\n  std::cout << \"Initial scores: \";\n  for (int score : scores) { std::cout << \" \" << score; }\n  std::cout << \"\\n\";\n  scores.push_back(95);\n  std::cout << \"Scores after adding 95 to the end: \";\n  for (int score : scores) { std::cout << \" \" << score; }\n  std::cout << \"\\n\";\n  scores.insert(scores.begin() + 2, 85);\n  std::cout << \"Scores after inserting 85 at the third \"\n               \"position:\";\n  for (int score : scores) { std::cout << \" \" << score; }\n  std::cout << \"\\n\";\n  return 0;\n}\n```", "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\nclass Person {\npublic:\n  Person(const std::string &firstName,\n         const std::string &lastName)\n      : fullName(firstName + \" \" + lastName) {}\n  const std::string &getName() const { return fullName; }\nprivate:\n  std::string fullName;\n};\nint main() {\n  std::vector<Person> people;\n  people.emplace_back(\"John\", \"Doe\");\n  people.emplace(people.begin(), \"Jane\", \"Doe\");\n  for (const auto &person : people) {\n    std::cout << person.getName() << \"\\n\";\n  }\n  return 0;\n}\n```", "```cpp\nstd::vector<int> numbers = {1, 0, 3, 0, 5};\nauto end = std::remove(numbers.begin(), numbers.end(), 0);\nnumbers.erase(end, numbers.end());\n```", "```cpp\nstd::vector<int> numbers = {1, 0, 3, 0, 5};\nstd::erase(numbers, 0);\n```", "```cpp\nstd::vector<int> numbers = {1, 2, 3, 4, 5};\nstd::erase_if(numbers, [](int x){ return x % 2 == 0; });\n```", "```cpp\n#include <iostream>\n#include <vector>\nint main() {\n  std::vector<int> numbers;\n  std::cout << \"Initial size: \" << numbers.size() << \"\\n\";\n  std::cout << \"Initial capacity: \" << numbers.capacity()\n            << \"\\n\";\n  for (auto i = 1; i <= 10; ++i) { numbers.push_back(i); }\n  std::cout << \"Size after adding 10 elements: \"\n            << numbers.size() << \"\\n\";\n  std::cout << \"Capacity after adding 10 elements: \"\n            << numbers.capacity() << \"\\n\";\n  for (auto i = 11; i <= 20; ++i) { numbers.push_back(i); }\n  std::cout << \"Size after adding 20 elements: \"\n            << numbers.size() << \"\\n\";\n  std::cout << \"Capacity after adding 20 elements: \"\n            << numbers.capacity() << \"\\n\";\n  for (auto i = 0; i < 5; ++i) { numbers.pop_back(); }\n  std::cout << \"Size after removing 5 elements: \"\n            << numbers.size() << \"\\n\";\n  std::cout << \"Capacity after removing 5 elements: \"\n            << numbers.capacity() << \"\\n\";\n  return 0;\n}\n```", "```cpp\nInitial size: 0\nInitial capacity: 0\nSize after adding 10 elements: 10\nCapacity after adding 10 elements: 16\nSize after adding 20 elements: 20\nCapacity after adding 20 elements: 32\nSize after removing 5 elements: 15\nCapacity after removing 5 elements: 32\n```", "```cpp\n#include <iostream>\n#include <vector>\nint main() {\n  std::vector<int> numbers = {1, 2, 3, 4, 5};\n  std::cout << \"Original numbers: \";\n  for (const auto num : numbers) {\n    std::cout << num << \" \";\n  }\n  std::cout << \"\\n\";\n  numbers.clear();\n  std::cout << \"After using clear(): \";\n  // This loop will produce no output.\n  for (const auto num : numbers) {\n    std::cout << num << \" \";\n  }\n  std::cout << \"\\n\";\n  std::cout << \"Size of vector after clear(): \"\n            << numbers.size() << \"\\n\";\n  return 0;\n}\n```", "```cpp\nOriginal numbers: 1 2 3 4 5\nAfter using clear():\nSize of vector after clear(): 0\n```"]