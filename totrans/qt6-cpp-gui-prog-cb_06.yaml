- en: '6'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Transitioning from Qt 5 to Qt 6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will learn about the changes that have been made in **Qt
    6** and how you can upgrade your existing Qt 5 project to Qt 6\. Unlike previous
    updates, Qt 6 is almost a complete rewrite of the entire Qt code base from the
    ground up, including all the underlying classes. Such major changes may break
    your existing Qt 5 project if you simply switch over to Qt 6.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Changes in C++ classes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using **Clazy checks** for Clang and C++
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changes in QML types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The technical requirements for this chapter include Qt 6.6.1 MinGW 64-bit,
    Qt 5.15.2 MinGW 64-bit, and Qt Creator 12.0.2\. All the code used in this chapter
    can be downloaded from the following GitHub repository: [https://github.com/PacktPublishing/QT6-C-GUI-Programming-Cookbook---Third-Edition-/tree/main/Chapter06](https://github.com/PacktPublishing/QT6-C-GUI-Programming-Cookbook---Third-Edition-/tree/main/Chapter06).'
  prefs: []
  type: TYPE_NORMAL
- en: Changes in C++ classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn what the changes in Qt6’s C++ classes are.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to learn about C++ classes in Qt6:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new **Qt Console Application** by going to **File** | **New Project**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will open up the `main.cpp` file and add the following headers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After that, add the following code for demonstrating the `QLinkedList` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: // QRegExp
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: QRegExp rx("\\d+");
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: QString text = "Jacky has 3 carrots, 15 apples, 9 oranges and 12 grapes.";
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: QStringList myList;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: int pos = 0;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: while ((pos = rx.indexIn(text, pos)) != -1)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: // Separate all numbers from the sentence
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: myList << rx.cap(0);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: pos += rx.matchedLength();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: qDebug() << "QRegExp:" << myList;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We then follow by adding the following code at the bottom of the preceding
    code to demonstrate the `QStringView` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Not only that, but we are also adding the following code to demonstrate the
    `QTextCodec` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, add the following code, which demonstrates how to convert hexadecimal
    code to a character using the `QTextEncoder` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let’s also add the following code to demonstrate how to convert a line of text
    from Shift JIS format to Unicode by using the `QTextDecoder` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now that we’re done with the code, let’s try and compile the project using
    Qt 5 for now and see what will happen. Your program should compile just fine and
    give you the following results in the output window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let’s change to Qt 6 and compile the project again, you should get errors
    like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open up your project file (`.pro`) and add the following code at the top:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Finally, compile the project again with Qt 6\. You should be able to run it
    this time. `core5compat` is just a temporary solution for transitioning from Qt
    5 to Qt 6\. You may change to use `std::list` to replace `QLinkedList` since it
    will be deprecated in the future.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We don’t need any GUIs since we are just testing out some of the C++ classes,
    so the `QDebug` class to print out the results in the output window.
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding example, we used some of the classes that have been deprecated
    in Qt 6, namely `QLinkedList`, `QRegExp`, `QStringView`, `QTextCodec`, `QTextEncoder`,
    and `QTextDecoder`. These are just some of the common classes that we will encounter
    when using Qt, which have been rewritten in Qt 6\. If you are porting your project
    from Qt 5 to 6, the best way is to add the `Core5Compat` module to your project
    so that Qt 5 classes can continue to run under Qt 6\. The `Core5Compat` module
    is a temporary measure for supporting Qt 5 classes under Qt 6 projects so that
    Qt programmers can safely move their projects to Qt 6 and take their time to slowly
    port their code over to Qt 6 classes.
  prefs: []
  type: TYPE_NORMAL
- en: The `Core5Compat` module will stop working when you move to Qt 7, so it’s not
    recommended to keep using the deprecated classes for too long.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Qt 6, a lot of the core functionality has been rewritten from scratch to
    keep the library up to date with the modern computing architecture and workflow.
    Thus, Qt 6 is considered a transitional phase where some classes have been completed
    and some have not.
  prefs: []
  type: TYPE_NORMAL
- en: In order for it to work, Qt developers introduced the `Core5Compat` module to
    make it easier for Qt programmers to keep their projects going while slowly transitioning
    over to the new classes. You can check out what the replacements for these classes
    are from the official online documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, Qt 6 is now leveraging on C++ 17\. It’s highly recommended for your
    project to adhere to C++ 17 standards so that your code can work nicely with Qt
    6.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many other C++ classes that have been deprecated or are being rewritten
    in Qt 6; please refer to this link to check the full list of C++ classes that
    have been changed or deprecated in Qt 6: [https://doc.qt.io/qt-6/obsoleteclasses.html](https://doc.qt.io/qt-6/obsoleteclasses.html).
    You may also add the `QT_DISABLE_DEPRECATED_UP_TO` macro to your Qt project to
    disable the use of deprecated C++ APIs in your project. For example, adding `DEFINES
    += QT_DISABLE_DEPRECATED_UP_TO=0x050F00` to your profile will disable all C++
    APIs deprecated in Qt 5.15.'
  prefs: []
  type: TYPE_NORMAL
- en: Using Clazy checks for Clang and C++
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will learn how to use the Clazy checks from the Clang toolset
    to automatically display warnings when obsolete Qt 5 classes and functions are
    detected in your Qt project.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s get started by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: We will use the same project from the preceding example. Then, proceed to open
    up the preferences window by going to **Edit** | **Preferences…**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After that, go to the **Analyzer** page and click on the button beside **Diagnostic
    configuration**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.1 – Open up the Diagnostic configuration window](img/B20976_06_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.1 – Open up the Diagnostic configuration window
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the **Default Clang-Tidy and Clazy checks** option at the top and click
    the **Copy…** button, as shown in *Figure 6**.2*. Give it a name and click **OK**.
    The new option will now appear under the **Custom** category:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.2 - Click on the Copy button](img/B20976_06_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.2 - Click on the Copy button
  prefs: []
  type: TYPE_NORMAL
- en: Then, open the `qt6-deprecated-api-fixes`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`qt6-header-fixes`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`qt6-qhash-signature`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`qt6-fwd-fixes`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`missing-qobject-macro`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once you’re done, close the preference window and go to **Analyze** | **Clang-Tidy
    and Clazy...**. The **Files to Analyze** window will pop up with all the source
    files being displayed on the window. We will just stick to the default option
    and proceed by clicking the **Analyze** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.3 – Choose All Files and press the Analyze button](img/B20976_06_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.3 – Choose All Files and press the Analyze button
  prefs: []
  type: TYPE_NORMAL
- en: 'After the Clang-Tidy and Clazy tools finish analyzing the project, you should
    see the results displayed on a separate panel under the Qt Creator. It will show
    you the lines of code that have been deprecated in Qt 6 and give you suggestions
    on what to replace them with:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.4 – Results from the analysis](img/B20976_06_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.4 – Results from the analysis
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Tidy and Clazy tool came with Clang packages so there is no need to install
    it separately. It is a powerful tool that can be used to check for many things,
    such as using deprecated functions in your code, placing a container inside a
    loop, marking a non-void slot as constant, registering QML type that starts with
    lowercase, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: It’s a tool that helps you to inspect and improve the quality of your code with
    ease. It should be widely promoted and used more frequently by Qt programmers.
  prefs: []
  type: TYPE_NORMAL
- en: Changes in QML types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will learn what changes have been made in Qt 6 compared
    to Qt 5.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s get started by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new **Qt Quick Application** by going to **File** | **New Project**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Qt 6.2** option for **Minimum required Qt version** when defining
    project details.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.5 – Select Qt 6.2 as Minimum required Qt version](img/B20976_06_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.5 – Select Qt 6.2 as Minimum required Qt version
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have created the project, open up `main.qml` and add these properties
    to the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Rectangle {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'id: rect'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'x: 100'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'y: 100'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'width: 100'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'height: 100'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'color: myColor'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After that, we’re going to add another `Image` object below the rectangle:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, we create a new resource file for our project by going to **File** | **New
    File…** and selecting **Qt Resource File** under the **Qt** template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.6 – Create a new Qt Resource File](img/B20976_06_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.6 – Create a new Qt Resource File
  prefs: []
  type: TYPE_NORMAL
- en: Then, create a folder called `images` in the resource file and add `tux.png`
    into the `images` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.7 – Add tux.png to the images folder](img/B20976_06_007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.7 – Add tux.png to the images folder
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and run the project now, and you should similar results as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.8 – The Hello World demo in Qt Quick 6](img/B20976_06_008.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.8 – The Hello World demo in Qt Quick 6
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Qt 6 introduces many changes to Qt Quick as well but they are mostly underlying
    functions that do not affect much of the QML language and objects. Therefore,
    there are not many changes you need to make to your QML scripts when transitioning
    from Qt 5 to Qt 6\. However, there are still some minor changes to how the project
    is structured and slight differences in the code.
  prefs: []
  type: TYPE_NORMAL
- en: One of the most obvious differences is that QML scripts are now listed under
    the `QML` category under the project structure instead of under `Resources` like
    how it used to be in Qt 5.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.9 – QML files have their own category now](img/B20976_06_009.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.9 – QML files have their own category now
  prefs: []
  type: TYPE_NORMAL
- en: 'Hence, when we load the `main.qml` file in the `main.cpp` C++ source code,
    we will use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'There are slight differences compared to how we did it in Qt 5:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The `u` preceding the string creates a 16-bit string literal and the `_qs` after
    the string converts it to a `QString`. These operators are similar to the `QStringLiteral`
    macro used in Qt 5 but are easier to convert to the exact string format you want
    while complying with the C++ 17 coding style.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another big difference in Qt 6 is that the `main.qml` from the preceding example
    to see the differences:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: As you can see from the highlighted part in the preceding code block, the version
    number is now optional when importing a Qt Quick module. Qt will pick the latest
    version available by default.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s look at the properties we declared in the example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Even though the preceding code will run fine, it’s recommended to use Qt functions
    such as `Qt.color()` and `Qt.resolvedUrl()` to return properties with the correct
    types, instead of just passing a string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Another small difference that you may or may not notice is the way Qt treats
    relative paths. Previously in Qt 5, we would write relative path as `./images`,
    which will return as `qrc:/images`. In Qt 6, however, `./images` will return as
    `qrc:/[project_name]/images/tux.png`, which is not correct. We must use `/images`
    without the preceding dot instead.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For more information regarding the full changes of Qt Quick in Qt 6, please
    visit [https://doc.qt.io/qt-6/qtquickcontrols-changes-qt6.html](https://doc.qt.io/qt-6/qtquickcontrols-changes-qt6.html).
  prefs: []
  type: TYPE_NORMAL
