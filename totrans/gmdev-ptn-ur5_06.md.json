["```cpp\n#include \"CoreMinimal.h\"\n#include \"UObject/Interface.h\"\n#include \"<class name>.generated.h\"\nUINTERFACE(MinimalAPI)\nclass U<class name> : public UInterface\n{\n    GENERATED_BODY()\n};\nclass <module name>_API I<class name>\n{\n    GENERATED_BODY()\npublic:\n}\n```", "```cpp\nif(IInterface* cachedRef = Cast<IInterface>(actorRef))\n{ cachedRef->Function(arg1); }\n```", "```cpp\nIInterface::Execute_Function(actorRef, arg1);\n```", "```cpp\n#include \"CoreMinimal.h\"\n#include \"UObject/Interface.h\"\n#include \"flammable.generated.h\"\nUINTERFACE(MinimalAPI)\nclass UFlammable : public UInterface\n{\n    GENERATED_BODY()\n};\nclass EXAMPLE_API IFlammable\n{\n    GENERATED_BODY()\npublic:\n    virtual void Ignite();\n}\n```", "```cpp\n#include \"flammable.h\"\nUCLASS()\nclass Example_API ATree : public AActor, public IFlammable\n{\n    //other code\npublic:\n    void Ignite() override;\n}\n```", "```cpp\nif(UKismetSystemLibrary::DoesImplementInterface(otherActor,     UFlammable::StaticClass()))\n{\n    IFlammable::Execute_Ignite(otherActor);\n}\n```", "```cpp\nDECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FHealthDeadSignature, AController*, instigator);\n```", "```cpp\nDECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(FHealthDamagedSignature, float, newHealth, float, maxHealth, float, healthChange);\n```", "```cpp\nUCLASS(ClassGroup=(Custom), meta=(BlueprintSpawnableComponent))\nclass <module name>_API UHealthComponent : public UActorComponent\n{\n    GENERATED_BODY()\npublic:\n    UHealthComponent();\n    UPROPERTY(BlueprintAssignable)\n    FHealthDeadSignature OnHealthDead;\n    UPROPERTY(BlueprintAssignable)\n    FHealthDamagedSignature OnHealthDamaged;\nprotected:\n    UPROPERTY(EditAnywhere, BlueprintReadWrite)\n    float _MaxHealth;\n    UPROPERTY(VisibleAnywhere, BlueprintReadOnly)\n    float _CurrentHealth;\n    virtual void BeginPlay() override;\nprivate:\n    UFUNCTION()\n    void DamageTaken(AActor* damagedActor, float damage,\n        const UDamageType* dmgType, AController* instigator,\n        AActor* causer);\n};\n```", "```cpp\nUHealthComponent::UHealthComponent()\n{\n    _MaxHealth = 100.f;\n}\nvoid UHealthComponent::BeginPlay()\n{\n    Super::BeginPlay();\n    _CurrentHealth = _MaxHealth;\n    GetOwner()->OnTakeAnyDamage.AddDynamic         (this, &UHealthComponent::DamageTaken);\n}\n```", "```cpp\nUHealthComponent::DamageTaken(AActor* damagedActor,\n    float damage, const UDamageType* dmgType,\n    AController* instigator, AActor* causer)\n{\n    float change = FMath::Min(damage, _CurrentHealth);\n    _CurrentHealth -= change;\n    OnHealthDamaged.Broadcast(_CurrentHealth, _MaxHealth,\n    change);\n    if(_CurrentHealth == 0.f)\n    {\n        OnHealthDead.Broadcast(instigator);\n}\n}\n```"]