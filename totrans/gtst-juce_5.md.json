["```cpp\nvar anInt = 1;\nvar aDouble = 1.2345;\nvar aString = \"Hello world!\";\n```", "```cpp\n// Slider\nSlider slider;\nslider.getValueObject().setValue (10.0); \n// instead of:\n//  slider.setValue (10);\n\n// Label\nLabel label;\nlabel.getTextValue().setValue (\"Hello\");\n// instead of: \n//  label.setText (\"Hello\", sendNotification);\n\n```", "```cpp\n#ifndef __MAINCOMPONENT_H__\n#define __MAINCOMPONENT_H__\n\n#include \"../JuceLibraryCode/JuceHeader.h\"\n\nclass MainContentComponent : public Component\n{\npublic:\n  MainContentComponent();\n  void resized();\n\nprivate:\n  Value value;\n  Slider slider;\n  Label label;\n};\n\n#endif  // __MAINCOMPONENT_H__\n```", "```cpp\n#include \"MainComponent.h\"\n\nMainContentComponent::MainContentComponent()\n: value (1.0),\n  slider (Slider::LinearHorizontal, Slider::NoTextBox)\n{\n  label.setEditable (true);\n  slider.getValueObject().referTo (value);\n  label.getTextValue().referTo (value);\n\n  addAndMakeVisible (&slider);\n  addAndMakeVisible (&label);\n\n  setSize (500, 400);\n}\n\nvoid MainContentComponent::resized()\n{\n  slider.setBounds (10, 10, getWidth() - 20, 20);\n  label.setBounds (10, 40, getWidth() - 20, 20);\n}\n```", "```cpp\n#ifndef __MAINCOMPONENT_H__\n#define __MAINCOMPONENT_H__\n\n#include \"../JuceLibraryCode/JuceHeader.h\"\n#include \"EntryForm.h\"\n\nclass MainContentComponent : public Component\n{\npublic:\n  MainContentComponent();\n  void resized();\n\nprivate:\n  EntryForm form;\n};\n#endif\n```", "```cpp\n#include \"MainComponent.h\"\n\nMainContentComponent::MainContentComponent()\n{\n  addAndMakeVisible (&form);\n  setSize (form.getWidth(), form.getHeight());\n}\n\nvoid MainContentComponent::resized()\n{\n  form.setBounds (0, 0, getWidth(), getHeight());\n}\n```", "```cpp\n//[UserVariables]   -- You can add your own custom variables..\nValueTree personData;\n\nstatic const Identifier personId;\nstatic const Identifier firstNameId;\nstatic const Identifier lastNameId;\nstatic const Identifier ageId;\nstatic const Identifier addressId;\nstatic const Identifier line1Id;\nstatic const Identifier line2Id;\nstatic const Identifier line3Id;\n//[/UserVariables]\n```", "```cpp\n//[MiscUserCode] You can add your own definitions ...\nconst Identifier EntryForm::personId = \"person\";\nconst Identifier EntryForm::firstNameId = \"firstName\";\nconst Identifier EntryForm::lastNameId = \"lastName\";\nconst Identifier EntryForm::ageId = \"age\";\nconst Identifier EntryForm::addressId = \"address\";\nconst Identifier EntryForm::line1Id = \"line1\";\nconst Identifier EntryForm::line2Id = \"line2\";\nconst Identifier EntryForm::line3Id = \"line3\";\n//[/MiscUserCode]\n```", "```cpp\n//[Constructor] You can add your own custom stuff here..\npersonData = ValueTree (personId);\npersonData.setProperty (firstNameId, String::empty, nullptr);\npersonData.setProperty (lastNameId, String::empty, nullptr);\npersonData.setProperty (ageId, String::empty, nullptr);\n\nValueTree addressData = ValueTree (addressId);\naddressData.setProperty (line1Id, String::empty, nullptr);\naddressData.setProperty (line2Id, String::empty, nullptr);\naddressData.setProperty (line3Id, String::empty, nullptr);\npersonData.addChild (addressData, -1, nullptr);\n//[/Constructor]\n```", "```cpp\n//[UserLabelCode_firstNameField] -- add your label text handling..\npersonData.setProperty (firstNameId, \n                        labelThatHasChanged->getText(), nullptr);\n//[/UserLabelCode_firstNameField]\n...\n//[UserLabelCode_lastNameField] -- add your label text handling..\npersonData.setProperty (lastNameId, \n                        labelThatHasChanged->getText(), nullptr);\n//[/UserLabelCode_lastNameField]\n...\n//[UserLabelCode_ageField] -- add your label text handling..\npersonData.setProperty (ageId, \n                        labelThatHasChanged->getText(), nullptr);\n//[/UserLabelCode_ageField]\n...\n//[UserLabelCode_line1Field] -- add your label text handling..\nValueTree addressData (personData.getChildWithName (addressId));\naddressData.setProperty (line1Id, \n                        labelThatHasChanged->getText(), nullptr);\n//[/UserLabelCode_line1Field]\n...\n//[UserLabelCode_line2Field] -- add your label text handling..\nValueTree addressData (personData.getChildWithName (addressId));\naddressData.setProperty (line2Id, \n                        labelThatHasChanged->getText(), nullptr);\n//[/UserLabelCode_line2Field]\n...\n//[UserLabelCode_line3Field] -- add your label text handling..\nValueTree addressData (personData.getChildWithName (addressId));\naddressData.setProperty (line3Id, \n                         labelThatHasChanged->getText(), nullptr);\n//[/UserLabelCode_line3Field]\n```", "```cpp\npublic Component, public ValueTree::Listener\n```", "```cpp\n//[UserMethods]     -- You can add your own custom methods ...\nvoid valueTreePropertyChanged (ValueTree& tree,\n                               const Identifier& property);\nvoid valueTreeChildAdded (ValueTree& parentTree,\n                          ValueTree& child)       { }\nvoid valueTreeChildRemoved (ValueTree& parentTree,\n                            ValueTree& child)     { }\nvoid valueTreeChildOrderChanged (ValueTree& tree) { }\nvoid valueTreeParentChanged (ValueTree& tree)     { }\nvoid valueTreeRedirected (ValueTree& tree)        { }\n//[/UserMethods]\n```", "```cpp\n//[UserVariables]   -- You can add your own custom variables...\nUndoManager undoManager;\n...\n```", "```cpp\nvoid EntryForm::valueTreePropertyChanged \n  (ValueTree& tree, const Identifier& property)\n{\n  if (property == firstNameId) {\n    firstNameField->setText (tree.getProperty (property),\n                             dontSendNotification);\n  } else if (property == lastNameId) {\n      lastNameField->setText (tree.getProperty (property),\n                              dontSendNotification);\n  } else if (property == ageId) {\n      ageField->setText (tree.getProperty (property),\n                         dontSendNotification);\n  } else if (property == line1Id) {\n      line1Field->setText (tree.getProperty (property),\n                           dontSendNotification);\n  } else if (property == line2Id) {\n      line2Field->setText (tree.getProperty (property),\n                           dontSendNotification);\n  } else if (property == line3Id) {\n      line3Field->setText (tree.getProperty (property),\n                           dontSendNotification);\n  }\n}\n```", "```cpp\n...\npersonData.addListener (this);\n//[/Constructor]\n```", "```cpp\n//[UserLabelCode_firstNameField] -- add your label text handling..\npersonData.setProperty (firstNameId,\n                        labelThatHasChanged->getText(), \n                        &undoManager);\n//[/UserLabelCode_firstNameField]\n```", "```cpp\n//[UserlabelTextChanged_Pre]\nundoManager.beginNewTransaction();\n//[/UserlabelTextChanged_Pre]\n```", "```cpp\n//[UserButtonCode_undoButton] -- add your button handler..\nundoManager.undo();\n//[/UserButtonCode_undoButton]\n```", "```cpp\n//[UserButtonCode_saveButton] -- add your button handler...\nFileChooser chooser (\"Save person data\",\n                     File::nonexistent,\n                     \"*.xml\");\n\nif (chooser.browseForFileToSave (true)) {\n  File file (chooser.getResult());\n\n  if (file.existsAsFile())\n      file.moveToTrash();\n\n  FileOutputStream stream (file);\n\n  ScopedPointer<XmlElement> xml = personData.createXml();\n  xml->writeToStream (stream, String::empty);\n}\n//[/UserButtonCode_saveButton]\n```", "```cpp\n//[UserButtonCode_openButton] -- add your button handler...\nFileChooser chooser (\"Open person data\",\n                     File::nonexistent,\n                     \"*.xml\");\n\nif (chooser.browseForFileToOpen()) {\n  Logger* log = Logger::getCurrentLogger();\n  File file (chooser.getResult());\n\n  XmlDocument xmlDoc (file);\n  ScopedPointer<XmlElement> xml = xmlDoc.getDocumentElement();\n\n  if (xml == nullptr) {\n    log->writeToLog (\"XML error\");\n    return;\n  }\n\n  ValueTree newPerson (ValueTree::fromXml (*xml));\n\n  if (newPerson.getType() != personId) {\n    log->writeToLog (\"Invalid person XML\");\n    return;\n  }\n\n  undoManager.beginNewTransaction();\n  personData.copyPropertiesFrom (newPerson, &undoManager);\n\n  ValueTree newAddress (newPerson.getChildWithName (addressId));\n  ValueTree addressData (personData.getChildWithName (addressId));\n  addressData.copyPropertiesFrom (newAddress, &undoManager);\n}\n//[/UserButtonCode_openButton]\n```", "```cpp\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<person firstName=\"Joe\" lastName=\"Bloggs\" age=\"25\">\n  <address line1=\"1 The Lines\" line2=\"Loop\" line3=\"Codeland\"/>\n</person>\n```", "```cpp\n#ifndef __MAINCOMPONENT_H__\n#define __MAINCOMPONENT_H__\n\n#include \"../JuceLibraryCode/JuceHeader.h\"\n\nclass MainContentComponent : public Component,\n                             public Button::Listener,\n                             public Thread\n{\npublic:\n  MainContentComponent();\n  ~MainContentComponent();\n\n  void resized();\n  void buttonClicked (Button* button);\n  void run();\n\nprivate:\n  TextButton startThreadButton;\n  TextButton stopThreadButton;\n  Label counterLabel;\n  int counter;\n};\n#endif  // __MAINCOMPONENT_H__\n```", "```cpp\n#include \"MainComponent.h\"\n\nMainContentComponent::MainContentComponent()\n: Thread (\"Counter Thread\"),\n  startThreadButton (\"Start Thread\"),\n  stopThreadButton (\"Stop Thread\"),\n  counter (0)\n{\n  addAndMakeVisible (&startThreadButton);\n  addAndMakeVisible (&stopThreadButton);\n  addAndMakeVisible (&counterLabel);\n\n  startThreadButton.addListener (this);\n  stopThreadButton.addListener (this);\n\n  setSize (500, 400);\n}\n\nMainContentComponent::~MainContentComponent()\n{\n  stopThread (3000);\n}\n\nvoid MainContentComponent::resized()\n{\n  startThreadButton.setBounds (10, 10, getWidth() - 20, 20);\n  stopThreadButton.setBounds (10, 40, getWidth() - 20, 20);\n  counterLabel.setBounds (10, 70, getWidth() - 20, 20);\n}\n\nvoid MainContentComponent::buttonClicked (Button* button)\n{\n  if (&startThreadButton == button) \n    startThread();\n  else if (&stopThreadButton == button) \n    stopThread (3000);\n}\n```", "```cpp\nvoid MainContentComponent::run()\n{\n  while (!threadShouldExit()) {\n counterLabel.setText (String (counter++), \n dontSendNotification);\n  }\n}\n```", "```cpp\nvoid MainContentComponent::run()\n{\n  while (!threadShouldExit()) {\n    const MessageManagerLock lock (Thread::getCurrentThread());\n\n    if (lock.lockWasGained()) {\n      counterLabel.setText (String (counter++),\n                            dontSendNotification);\n    }\n  }\n}\n```", "```cpp\n#ifndef __MAINCOMPONENT_H__\n#define __MAINCOMPONENT_H__\n\n#include \"../JuceLibraryCode/JuceHeader.h\"\n\nclass MainContentComponent   : public Component\n{\npublic:\n  MainContentComponent();\n  ~MainContentComponent();\n\n  void resized();\n\nprivate:\n  Label label;\n  Slider slider;\n  ApplicationProperties appProperties;\n};\n\n#endif  // __MAINCOMPONENT_H__\n```", "```cpp\n#include \"MainComponent.h\"\n\nMainContentComponent::MainContentComponent()\n{\n  label.setEditable(true);\n  addAndMakeVisible(&label);\n  addAndMakeVisible(&slider);\n\n  setSize (500, 400);\n\n  PropertiesFile::Options options;\n  options.applicationName = ProjectInfo::projectName;\n  options.folderName = ProjectInfo::projectName;\n  options.filenameSuffix = \"settings\";\n  options.osxLibrarySubFolder = \"Application Support\";\n  appProperties.setStorageParameters (options);\n\n  PropertiesFile* props = appProperties.getUserSettings();\n\n  label.setText (props->getValue (\"label\", \"<empty>\"),\n                 dontSendNotification);\n  slider.setValue (props->getDoubleValue (\"slider\", 0.0));\n}\n\nMainContentComponent::~MainContentComponent()\n{\n  PropertiesFile* props = appProperties.getUserSettings();\n  props->setValue (\"label\", label.getText());\n  props->setValue (\"slider\", slider.getValue());\n}\n\nvoid MainContentComponent::resized()\n{\n  label.setBounds (10, 10, getWidth() - 20, 20);\n  slider.setBounds (10, 40, getWidth() - 20, 20);\n}\n```", "```cpp\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<PROPERTIES>\n  <VALUE name=\"label\" val=\"hello\"/>\n  <VALUE name=\"slider\" val=\"1.62303665\"/>\n</PROPERTIES>\n```", "```cpp\n **~/Library/Application Support/Chapter05_04** \n```", "```cpp\n**C:\\\\Documents and Settings\\USERNAME\\Application Data\\Chapter05_04** \n```", "```cpp\n...\nclass MainContentComponent   : public Component,\n public MenuBarModel\n{\n...\n```", "```cpp\nStringArray getMenuBarNames();\nPopupMenu getMenuForIndex (int index, const String& name);\nvoid menuItemSelected (int menuID, int index);\n```", "```cpp\n...\n  enum MenuIDs {\n    LabelClear = 1000,\n    SliderMin,\n    SliderMax\n  };\n...\n```", "```cpp\n...\nprivate:\n  Label label;\n  Slider slider;\n MenuBarComponent menuBar;\n  ApplicationProperties appProperties;\n};\n```", "```cpp\n...\nMainContentComponent::MainContentComponent()\n: menuBar (this)\n{\n addAndMakeVisible (&menuBar);\n  label.setEditable (true);\n...\n\n```", "```cpp\nvoid MainContentComponent::resized()\n{\n menuBar.setBounds (0, 0, getWidth(), 20);\n  label.setBounds (10, 30, getWidth() - 20, 20);\n  slider.setBounds (10, 60, getWidth() - 20, 20);\n}\n```", "```cpp\nStringArray MainContentComponent::getMenuBarNames()\n{\n  const char* menuNames[] = { \"Label\", \"Slider\", 0 };\n  return StringArray (menuNames);\n}\n```", "```cpp\nPopupMenu MainContentComponent::getMenuForIndex \n  (int index, const String& name)\n{\n  PopupMenu menu;\n\n  if (name == \"Label\")\n  {\n    menu.addItem (LabelClear, \"Clear\");\n  } else if (name == \"Slider\") {\n    menu.addItem (SliderMin, \"Set to minimum\");\n    menu.addItem (SliderMax, \"Set to maximum\");\n  }\n\n  return menu;\n}\n```", "```cpp\nvoid MainContentComponent::menuItemSelected (int menuID, \n                                             int index)\n{\n  switch (menuID) {\n    case LabelClear:\n      label.setText (String::empty, dontSendNotification);\n      break;\n    case SliderMin:\n      slider.setValue (slider.getMinimum());\n      break;\n    case SliderMax:\n      slider.setValue (slider.getMaximum());\n      break;\n  }\n}\n```"]