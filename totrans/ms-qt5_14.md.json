["```cpp\nbool boolean = true; \nint integer = 5; \nchar character = 'A'; \nint* integerPointer = &integer; \n\nqDebug() << \"boolean is:\" << boolean; \nqDebug() << \"integer is:\" << integer; \nqDebug() << \"character is:\" << character; \nqDebug() << \"integerPointer is:\" << integerPointer; \nqDebug() << \"*integerPointer is:\" << *integerPointer; \nqDebug() << \"done!\"; \n\n```", "```cpp\nboolean is: true \ninteger is: 5 \ncharacter is: A \nintegerPointer is: 0x7ffe601153ac \n*integerPointer is: 5 \n\n```", "```cpp\nboolean is: false \ninteger is: 9 \ncharacter is: D \nintegerPointer is: 0x7fff849203dc \n*integerPointer is: 9 \ndone! \n\n```", "```cpp\nqDebug() << \"first number is\" << qrand() % 10; \nqDebug() << \"second number is\" << qrand() % 10; \n\n```", "```cpp\nqsrand(3); \nqDebug() << \"first number is\" << qrand() % 10; \nqDebug() << \"second number is\" << qrand() % 10; \n\n```", "```cpp\nqsrand(QDateTime::currentDateTime().toTime_t()); \nqDebug() << \"first number is\" << qrand() % 10; \nqDebug() << \"second number is\" << qrand() % 10; \n\n```", "```cpp\nwarning: unused parameter 'myVariable' [-Wunused-parameter] \n\n```", "```cpp\nvoid myFunction(QString name, QString /*myVariable*/) \n\n```", "```cpp\nvoid myFunction(QString name, QString myVariable) \n{ \n    Q_UNUSED(myVariable) \n    ... \n} \n\n```", "```cpp\n#define Q_UNUSED(x) (void)x; \n\n```", "```cpp\nqDebug() << \"Object content:\" << myObject.toString() \n\n```", "```cpp\nQDate today = QDate::currentDate(); \nqDebug() << today; \n// Output: QDate(\"2016-10-03\") \n\n```", "```cpp\nstruct Person { \n    QString name; \n    int age; \n}; \n\n```", "```cpp\n#include <QDebug> \n\nstruct Person { \n    ... \n}; \n\nQDebug operator<<(QDebug debug, const Person& person) \n{ \n    QDebugStateSaver saver(debug); \n    debug.nospace() << \"(\" \n                    << \"name: \" << person.name << \", \" \n                    << \"age: \" << person.age \n                    << \")\"; \n    return debug; \n} \n\n```", "```cpp\nPerson person = { \"Lenna\", 64 }; \nqDebug() << \"Person info\" << person; \n\n```", "```cpp\n#include <QApplication> \n#include <QDebug> \n... \nint main(int argc, char *argv[]) \n{ \n    qSetMessagePattern(\"[%{time yyyy-MM-dd hh:mm:ss}] [%{type}] \n        %{function} %{message}\"); \n    qInfo() << \"Application starting...\"; \n\n    QApplication a(argc, argv); \n    ... \n    return a.exec(); \n} \n\n```", "```cpp\n[2016-10-03 10:22:40] [info] qMain Application starting... \n\n```", "```cpp\n#include <QFile> \n#include <QTextStream> \n\nvoid messageHander(QtMsgType type,  \n                   const QMessageLogContext& context,  \n                   const QString& message) { \n    QString levelText; \n    switch (type) { \n        case QtDebugMsg: \n            levelText = \"Debug\"; \n            break; \n        case QtInfoMsg: \n            levelText = \"Info\"; \n            break; \n        case QtWarningMsg: \n            levelText = \"Warning\"; \n            break; \n        case QtCriticalMsg: \n            levelText = \"Critical\"; \n            break; \n        case QtFatalMsg: \n            levelText = \"Fatal\"; \n            break; \n    } \n    QString text = QString(\"[%1] %2\") \n                        .arg(levelText) \n                        .arg(message); \n    QFile file(\"app.log\"); \n    file.open(QIODevice::WriteOnly | QIODevice::Append); \n    QTextStream textStream(&file); \n    textStream << text << endl; \n} \n\n```", "```cpp\nint main(int argc, char *argv[]) \n{ \n    QCoreApplication a(argc, argv); \n    qInstallMessageHandler(messageHander); \n    ... \n} \n\n```", "```cpp\nQCoreApplication app(argc, argv); \n\nQCoreApplication::setApplicationName(\"ch14-hat-tips\"); \nQCoreApplication::setApplicationVersion(\"1.0.0\"); \n\nQCommandLineParser parser; \nparser.setApplicationDescription(\"CLI helper\"); \nparser.addHelpOption(); \nparser.addVersionOption(); \n\nparser.addOptions({ \n    {\"debug\", \n        \"Enable the debug mode.\"}, \n\n    {{\"f\", \"file\"}, \n        \"Write the logs into <file>.\", \n        \"logfile\"}, \n\n    {{\"l\", \"level\"}, \n        \"Restrict the logs to level <level>. Default is 'fatal'.\", \n        \"level\", \n        \"fatal\"}, \n}); \n\nparser.process(app); \n\nqDebug() << \"debug mode:\" << parser.isSet(\"debug\"); \nqDebug() << \"file:\" << parser.value(\"file\"); \nqDebug() << \"level:\" << parser.value(\"level\"); \n\n```", "```cpp\n$ ./ch14-hat-tips --help \nUsage: ./ch14-hat-tips [options] \nHelper of the command-line interface \n\nOptions: \n  -h, --help            Displays this help. \n  -v, --version         Displays version information. \n  --debug               Enable the debug mode. \n  -f, --file <logfile>  Write the logs into <file>. \n  -l, --level <level>   Restrict the logs to level <level>. Default is 'fatal'. \n\n```", "```cpp\n$ ./ch14-hat-tips --debug -f log.txt --level info \ndebug mode:  true \nfile:  \"log.txt\" \nlevel:  \"info\" \n\n```", "```cpp\n#include <QObject> \n#include <QNetworkAccessManager> \n#include <QNetworkReply> \n\nclass HttpRequest : public QObject \n{ \n    Q_OBJECT \npublic: \n    HttpRequest(QObject* parent = 0); \n\n    void executeGet(); \n\nprivate slots: \n    void replyFinished(QNetworkReply* reply); \n\nprivate: \n    QNetworkAccessManager mAccessManager; \n}; \n\n```", "```cpp\nHttpRequest::HttpRequest(QObject* parent) : \n    QObject(parent), \n    mAccessManager() \n{ \n    connect(&mAccessManager, &QNetworkAccessManager::finished, \n            this, &HttpRequest::replyFinished); \n} \n\n```", "```cpp\n// Request \nvoid HttpRequest::executeGet() \n{ \n    QNetworkRequest request(QUrl(\"http://httpbin.org/ip\")); \n    mAccessManager.get(QNetworkRequest(request)); \n} \n\n// Response \nvoid HttpRequest::replyFinished(QNetworkReply* reply) \n{ \n    int statusCode = reply->attribute(QNetworkRequest::HttpStatusCodeAttribute).toInt(); \n    qDebug() << \"Reponse network error\" << reply->error(); \n    qDebug() << \"Reponse HTTP status code\" << statusCode; \n    qDebug() << \"Reply content:\" << reply->readAll(); \n    reply->deleteLater(); \n} \n\n```", "```cpp\n{ \n  \"origin\": \"1.2.3.4\" \n} \n\n```", "```cpp\nvoid HttpRequest::executePost() \n{ \n    QNetworkRequest request(QUrl(\"http://httpbin.org/post\")); \n    request.setHeader(QNetworkRequest::ContentTypeHeader, \n                      \"application/x-www-form-urlencoded\"); \n    QUrlQuery urlQuery; \n    urlQuery.addQueryItem(\"book\", \"Mastering Qt 5\"); \n\n    QUrl params; \n    params.setQuery(urlQuery); \n\n    QNetworkReply* reply = mAccessManager.post( \n                           request, params.toEncoded()); \n    connect(reply, &QNetworkReply::readyRead,  \n        [reply] () { \n        qDebug() << \"Ready to read from reply\"; \n    }); \n    connect(reply, &QNetworkReply::sslErrors,  \n            [this] (QList<QSslError> errors) { \n        qWarning() << \"SSL errors\" << errors; \n    }); \n} \n\n```", "```cpp\nReady to read from reply \nReponse network error QNetworkReply::NetworkError(NoError) \nReponse HTTP status code 200 \n\n```", "```cpp\nvoid HttpRequest::executeBlockingGet() \n{ \n    QNetworkAccessManager localManager; \n    QEventLoop eventLoop; \n    QObject::connect( \n        &localManager, &QNetworkAccessManager::finished,  \n        &eventLoop, &QEventLoop::quit); \n\n    QNetworkRequest request( \n                QUrl(\"http://httpbin.org/user-agent\")); \n    request.setHeader(QNetworkRequest::UserAgentHeader,  \n                      \"MasteringQt5Browser 1.0\"); \n\n    QNetworkReply* reply = localManager.get(request); \n    eventLoop.exec(); \n\n    qDebug() << \"Blocking GET result:\" << reply->readAll(); \n    reply->deleteLater(); \n} \n\n```"]