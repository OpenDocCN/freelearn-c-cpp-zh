["```cpp\ngit clone https://github.com/codeplea/Hands-On-Network-Programming-with-C\ncd Hands-On-Network-Programming-with-C/chap11\n```", "```cpp\n/*chap11.h*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#include <libssh/libssh.h>\n```", "```cpp\n/*ssh_version.c*/\n\n#include \"chap11.h\"\n\nint main()\n{\n    printf(\"libssh version: %s\\n\", ssh_version(0));\n    return 0;\n}\n```", "```cpp\ngcc ssh_version.c -o ssh_version.exe -lssh\nssh_version\n```", "```cpp\ngcc ssh_version.c -o ssh_version -lssh\n./ssh_version\n```", "```cpp\n/*ssh_connect.c*/\n\n#include \"chap11.h\"\n\nint main(int argc, char *argv[])\n{\n    const char *hostname = 0;\n    int port = 22;\n    if (argc < 2) {\n        fprintf(stderr, \"Usage: ssh_connect hostname port\\n\");\n        return 1;\n    }\n    hostname = argv[1];\n    if (argc > 2) port = atol(argv[2]);\n```", "```cpp\n/*ssh_connect.c continued*/\n\n    ssh_session ssh = ssh_new();\n    if (!ssh) {\n        fprintf(stderr, \"ssh_new() failed.\\n\");\n        return 1;\n    }\n```", "```cpp\n/*ssh_connect.c continued*/\n\n    ssh_options_set(ssh, SSH_OPTIONS_HOST, hostname);\n    ssh_options_set(ssh, SSH_OPTIONS_PORT, &port);\n```", "```cpp\n/*ssh_connect.c continued*/\n\n    int verbosity = SSH_LOG_PROTOCOL;\n    ssh_options_set(ssh, SSH_OPTIONS_LOG_VERBOSITY, &verbosity);\n```", "```cpp\n/*ssh_connect.c continued*/\n\n    int ret = ssh_connect(ssh);\n    if (ret != SSH_OK) {\n        fprintf(stderr, \"ssh_connect() failed.\\n%s\\n\", ssh_get_error(ssh));\n        return -1;\n    }\n```", "```cpp\n/*ssh_connect.c continued*/\n\n    printf(\"Connected to %s on port %d.\\n\", hostname, port);\n```", "```cpp\n/*ssh_connect.c continued*/\n\n    printf(\"Banner:\\n%s\\n\", ssh_get_serverbanner(ssh));\n```", "```cpp\n/*ssh_connect.c continued*/\n\n    ssh_disconnect(ssh);\n    ssh_free(ssh);\n\n    return 0;\n}\n```", "```cpp\ngcc ssh_connect.c -o ssh_connect.exe -lssh\n```", "```cpp\ngcc ssh_connect.c -o ssh_connect -lssh\n```", "```cpp\n/*ssh_auth.c excerpt*/\n\n    ssh_key key;\n    if (ssh_get_server_publickey(ssh, &key) != SSH_OK) {\n        fprintf(stderr, \"ssh_get_server_publickey() failed.\\n%s\\n\",\n                ssh_get_error(ssh));\n        return -1;\n    }\n```", "```cpp\n/*ssh_auth.c excerpt*/\n\n    unsigned char *hash;\n    size_t hash_len;\n    if (ssh_get_publickey_hash(key, SSH_PUBLICKEY_HASH_SHA1,\n                &hash, &hash_len) != SSH_OK) {\n        fprintf(stderr, \"ssh_get_publickey_hash() failed.\\n%s\\n\",\n                ssh_get_error(ssh));\n        return -1;\n    }\n\n    printf(\"Host public key hash:\\n\");\n    ssh_print_hash(SSH_PUBLICKEY_HASH_SHA1, hash, hash_len);\n```", "```cpp\nHost public key hash:\nSHA1:E348CMNeCGGec/bQqEX7aocDTfI\n```", "```cpp\n/*ssh_auth.c excerpt*/\n\n    ssh_clean_pubkey_hash(&hash);\n    ssh_key_free(key);\n```", "```cpp\n/*ssh_auth.c excerpt*/\n\n    enum ssh_known_hosts_e known = ssh_session_is_known_server(ssh);\n    switch (known) {\n        case SSH_KNOWN_HOSTS_OK: printf(\"Host Known.\\n\"); break;\n\n        case SSH_KNOWN_HOSTS_CHANGED: printf(\"Host Changed.\\n\"); break;\n        case SSH_KNOWN_HOSTS_OTHER: printf(\"Host Other.\\n\"); break;\n        case SSH_KNOWN_HOSTS_UNKNOWN: printf(\"Host Unknown.\\n\"); break;\n        case SSH_KNOWN_HOSTS_NOT_FOUND: printf(\"No host file.\\n\"); break;\n\n        case SSH_KNOWN_HOSTS_ERROR:\n            printf(\"Host error. %s\\n\", ssh_get_error(ssh)); return 1;\n\n        default: printf(\"Error. Known: %d\\n\", known); return 1;\n    }\n```", "```cpp\n/*ssh_auth.c excerpt*/\n\n    if (known == SSH_KNOWN_HOSTS_CHANGED ||\n            known == SSH_KNOWN_HOSTS_OTHER ||\n            known == SSH_KNOWN_HOSTS_UNKNOWN ||\n            known == SSH_KNOWN_HOSTS_NOT_FOUND) {\n        printf(\"Do you want to accept and remember this host? Y/N\\n\");\n        char answer[10];\n        fgets(answer, sizeof(answer), stdin);\n        if (answer[0] != 'Y' && answer[0] != 'y') {\n            return 0;\n        }\n\n        ssh_session_update_known_hosts(ssh);\n    }\n```", "```cpp\nssh_options_set(ssh, SSH_OPTIONS_USER, \"alice\");\n```", "```cpp\n/*ssh_auth.c excerpt*/\n\n    printf(\"Password: \");\n    char password[128];\n    fgets(password, sizeof(password), stdin);\n    password[strlen(password)-1] = 0;\n\n    if (ssh_userauth_password(ssh, 0, password) != SSH_AUTH_SUCCESS) {\n        fprintf(stderr, \"ssh_userauth_password() failed.\\n%s\\n\",\n                ssh_get_error(ssh));\n        return 0;\n    } else {\n        printf(\"Authentication successful!\\n\");\n    }\n```", "```cpp\ngcc ssh_auth.c -o ssh_auth.exe -lssh\nssh_auth example.com 22 alice\n```", "```cpp\ngcc ssh_auth.c -o ssh_auth -lssh\n./ssh_auth example.com 22 alice\n```", "```cpp\n/*ssh_command.c excerpt*/\n\n    ssh_channel channel = ssh_channel_new(ssh);\n    if (!channel) {\n        fprintf(stderr, \"ssh_channel_new() failed.\\n\");\n        return 0;\n    }\n```", "```cpp\n/*ssh_command.c excerpt*/\n\n    if (ssh_channel_open_session(channel) != SSH_OK) {\n        fprintf(stderr, \"ssh_channel_open_session() failed.\\n\");\n        return 0;\n    }\n```", "```cpp\n/*ssh_command.c excerpt*/\n\n    printf(\"Remote command to execute: \");\n    char command[128];\n    fgets(command, sizeof(command), stdin);\n    command[strlen(command)-1] = 0;\n\n    if (ssh_channel_request_exec(channel, command) != SSH_OK) {\n        fprintf(stderr, \"ssh_channel_open_session() failed.\\n\");\n        return 1;\n    }\n```", "```cpp\n/*ssh_command.c excerpt*/\n\n    char output[1024];\n    int bytes_received;\n    while ((bytes_received =\n                ssh_channel_read(channel, output, sizeof(output), 0))) {\n        if (bytes_received < 0) {\n            fprintf(stderr, \"ssh_channel_read() failed.\\n\");\n            return 1;\n        }\n        printf(\"%.*s\", bytes_received, output);\n    }\n```", "```cpp\n/*ssh_command.c excerpt*/\n\n    ssh_channel_send_eof(channel);\n    ssh_channel_close(channel);\n    ssh_channel_free(channel);\n```", "```cpp\ngcc ssh_command.c -o ssh_command.exe -lssh\n```", "```cpp\ngcc ssh_command.c -o ssh_command -lssh\n```", "```cpp\n/*ssh_download.c excerpt*/\n\n    printf(\"Remote file to download: \");\n    char filename[128];\n    fgets(filename, sizeof(filename), stdin);\n    filename[strlen(filename)-1] = 0;\n```", "```cpp\n/*ssh_download.c excerpt*/\n\n    ssh_scp scp = ssh_scp_new(ssh, SSH_SCP_READ, filename);\n    if (!scp) {\n        fprintf(stderr, \"ssh_scp_new() failed.\\n%s\\n\",\n                ssh_get_error(ssh));\n        return 1;\n    }\n```", "```cpp\n/*ssh_download.c excerpt*/\n\n    if (ssh_scp_init(scp) != SSH_OK) {\n        fprintf(stderr, \"ssh_scp_init() failed.\\n%s\\n\",\n                ssh_get_error(ssh));\n        return 1;\n    }\n```", "```cpp\n/*ssh_download.c excerpt*/\n\n    if (ssh_scp_pull_request(scp) != SSH_SCP_REQUEST_NEWFILE) {\n        fprintf(stderr, \"ssh_scp_pull_request() failed.\\n%s\\n\",\n                ssh_get_error(ssh));\n        return 1;\n    }\n```", "```cpp\n/*ssh_download.c excerpt*/\n\n    int fsize = ssh_scp_request_get_size(scp);\n    char *fname = strdup(ssh_scp_request_get_filename(scp));\n    int fpermission = ssh_scp_request_get_permissions(scp);\n\n    printf(\"Downloading file %s (%d bytes, permissions 0%o\\n\",\n            fname, fsize, fpermission);\n    free(fname);\n```", "```cpp\n/*ssh_download.c excerpt*/\n\n    char *buffer = malloc(fsize);\n    if (!buffer) {\n        fprintf(stderr, \"malloc() failed.\\n\");\n        return 1;\n    }\n```", "```cpp\n/*ssh_download.c excerpt*/\n\n    ssh_scp_accept_request(scp);\n    if (ssh_scp_read(scp, buffer, fsize) == SSH_ERROR) {\n        fprintf(stderr, \"ssh_scp_read() failed.\\n%s\\n\",\n                ssh_get_error(ssh));\n        return 1;\n    }\n```", "```cpp\n/*ssh_download.c excerpt*/\n\n    printf(\"Received %s:\\n\", filename);\n    printf(\"%.*s\\n\", fsize, buffer);\n    free(buffer);\n```", "```cpp\n/*ssh_download.c excerpt*/\n\n    if (ssh_scp_pull_request(scp) != SSH_SCP_REQUEST_EOF) {\n        fprintf(stderr, \"ssh_scp_pull_request() unexpected.\\n%s\\n\",\n                ssh_get_error(ssh));\n        return 1;\n    }\n```", "```cpp\n/*ssh_download.c excerpt*/\n\n    ssh_scp_close(scp);\n    ssh_scp_free(scp);\n```", "```cpp\ngcc ssh_download.c -o ssh_download.exe -lssh\n```", "```cpp\ngcc ssh_download.c -o ssh_download -lssh\n```"]