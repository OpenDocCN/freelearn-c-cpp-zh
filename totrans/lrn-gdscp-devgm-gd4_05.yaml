- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '5'
- en: How and Why to Keep Your Code Clean
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何以及为什么保持代码整洁
- en: In *Chapters 1* to *4*, we learned all the basics of programming and are about
    to dive deep into developing our very own game.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *第 1* 到 *4* 章，我们学习了编程的所有基础知识，即将深入开发我们自己的游戏。
- en: But before we do so, we must realize that the code base for games can grow very
    large. This means that the code and systems we write one day can be buried under
    other code and systems. As a result, returning to our earlier work can be a hassle
    because we forget how or why we coded certain things in a certain way.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 但在我们这样做之前，我们必须意识到游戏代码库可以变得非常大。这意味着我们今天编写的代码和系统可能会被其他代码和系统埋没。因此，返回到我们之前的工作可能会很麻烦，因为我们忘记了我们为什么以及如何以某种方式编写某些代码。
- en: That is why now is the ideal moment to stand still and think about how to keep
    our code clean and understandable even months after writing it. Most of the things
    in this chapter were learned through making mistakes myself and having to find
    a solution in books and articles.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 正因如此，现在是停下来思考如何保持我们的代码即使在编写后数月仍然干净和可理解的理想时刻。本章中的大多数内容都是通过我自己犯错误并在书籍和文章中寻找解决方案学到的。
- en: Although most of the tips can feel like critical thinking and will bring you
    to the same point (which they probably will), it always helps to voice them and
    explain why programmers employ them.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管大多数技巧可能感觉像是一种批判性思维，并将你带到同一个点（它们可能确实如此），但总是说出它们并解释为什么程序员会采用它们总是有帮助的。
- en: Holding them in the back of your mind while programming will give you a big
    step up from other starting programmers.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在编程时将其牢记在心，这将使你比其他初学者程序员迈出更大的步伐。
- en: 'In this chapter, we will cover the following main topics:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要内容：
- en: Naming things (again)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 再次讨论命名问题
- en: Writing good functions
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写好的函数
- en: Why use private variables and functions
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么使用私有变量和函数
- en: Don’t repeat yourself (DRY)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要重复自己 (DRY)
- en: Defensive programming
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 防御性编程
- en: Coding style guides
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编码风格指南
- en: Technical requirements
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'Check out the `chapter05` folder in the repository of code examples if you
    get stuck anywhere. You can find the repository here: [https://github.com/PacktPublishing/Learning-GDScript-by-Developing-a-Game-with-Godot-4/tree/main/chapter05](https://github.com/PacktPublishing/Learning-GDScript-by-Developing-a-Game-with-Godot-4/tree/main/chapter05).'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在代码示例仓库中的任何地方遇到困难，请查看 `chapter05` 文件夹。你可以在这里找到仓库：[https://github.com/PacktPublishing/Learning-GDScript-by-Developing-a-Game-with-Godot-4/tree/main/chapter05](https://github.com/PacktPublishing/Learning-GDScript-by-Developing-a-Game-with-Godot-4/tree/main/chapter05)。
- en: Back to naming things
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回到命名问题
- en: Let’s have another look at how to name variables, functions, and classes. Picking
    the right name for any of these is very important as it will make understanding
    the code way easier.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次看看如何命名变量、函数和类。为这些中的任何一个选择正确的名称非常重要，因为它会使理解代码变得容易得多。
- en: Naming conventions
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 命名约定
- en: 'As we saw in *Chapters 3* and *4*, variable, function, and class names have
    different constraints. We used specific rules to name each. These ways are called
    **naming conventions**. They give a term to how we want to constrain the formation
    of names. The three main naming conventions that are recommended in the GDScript
    style guide are as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在 *第 3* 和 *4* 章中看到的，变量、函数和类名有不同的约束。我们使用了特定的规则来命名每个。这些方法被称为 **命名约定**。它们为我们想要约束名称形成的方式提供了一个术语。GDScript
    风格指南中推荐的三种主要命名约定如下：
- en: '`player_health`, `movement_speed`, and `weekly_highscore`.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`player_health`, `movement_speed`, 和 `weekly_highscore`.'
- en: '`BUTTON_SIZE`, `PI`, and `TEAM_A_COLOR`.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BUTTON_SIZE`, `PI`, 和 `TEAM_A_COLOR`.'
- en: '`BackgroundColor`, `PlayerWeapon`, and `GameStartTimer`.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BackgroundColor`, `PlayerWeapon`, 和 `GameStartTimer`.'
- en: 'There are a bunch of other, more exotic conventions, like the following: **kebab-case**,
    **camelCase**, **flatcase**, and so on. But these are not used in GDScript.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多其他更独特的约定，如下所示：**kebab-case**, **camelCase**, **flatcase** 等。但在 GDScript
    中并不使用这些。
- en: General naming tips
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 命名的一般技巧
- en: 'Now, let me be clear: naming things is not easy. It is, in fact, one of the
    hardest things in programming. So, if you have the naming right, you’ll always
    be able to return to any code quickly.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我明确一点：命名事物并不容易。实际上，这是编程中最困难的事情之一。所以，如果你命名正确，你将始终能够快速返回到任何代码。
- en: Here are some tips to make you a naming master.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些技巧可以帮助你成为命名大师。
- en: Use meaningful and descriptive names
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用有意义的描述性名称
- en: In the early days, programmers had to work with computers that didn’t have a
    lot of computational power and memory, and they also prided themselves in creating
    the shortest script to solve a problem. This resulted in code where variables
    were given one or two-letter names such as `a` or `c5`. Optimizing a piece of
    code to be as short as possible is very satisfying. However, these pieces of code
    are very incomprehensible. Even the person who wrote the script is not able to
    read it anymore after some time has passed.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在早期，程序员必须与计算能力和内存都不多的计算机一起工作，他们还以创建最短的脚本来解决问题而自豪。这导致了变量被赋予一个或两个字母的名称，如`a`或`c5`。将代码优化得尽可能短是非常令人满意的。然而，这些代码片段非常难以理解。即使是编写脚本的人，在过了一段时间后也无法再阅读它。
- en: That is why descriptive variable names are a big plus. Sure, they take a few
    extra seconds to type out, but that is nothing compared to spending minutes or
    even hours figuring out why a variable exists and how it should be used; and,
    anyway, autocomplete will always help us out.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么描述性变量名是一个很大的加分项。当然，它们需要多花几秒钟来输入，但这与花费几分钟甚至几个小时来弄清楚变量为什么存在以及应该如何使用相比，微不足道；而且，自动完成功能总是会帮助我们。
- en: Some people even go as far as to say that short variable names result in a better-performing
    game. This is not true at all. A programming language will tokenize the variables
    in the code, making any variable name perform equally fast, no matter how long.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 甚至有些人说，短的变量名会导致游戏性能更好。这根本不是真的。编程语言会在代码中将变量标记化，使得任何变量名执行速度都一样快，无论其长度如何。
- en: 'The trick is making a variable’s, method’s, or class’s name meaningful and
    descriptive. To do this, you can ask yourself these questions for the different
    types:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 技巧是使变量、方法或类的名称具有意义和描述性。为此，你可以针对不同类型提出以下问题：
- en: '**Variables**:'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**变量**：'
- en: What kind of data will the variable contain?
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量将包含什么类型的数据？
- en: How should this data be used?
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这类数据应该如何使用？
- en: '**Functions**:'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**函数**：'
- en: What does the function do?
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数做什么？
- en: What data does the function return?
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数返回什么数据？
- en: What kind of parameters does the function require to work?
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数需要什么类型的参数才能工作？
- en: '**Classes**:'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类**：'
- en: What will the class be used for?
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个类将用于什么？
- en: What data is the class responsible for?
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个类负责哪些数据？
- en: Using these questions will guide your decision making while coming up with names
    for variables, functions, and classes.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些问题将指导你在为变量、函数和类命名时的决策。
- en: Avoid filler words
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 避免使用填充词
- en: 'Although long descriptive names are the way to go, we also don’t want to obscure
    the name with filler or unnecessary words such as the following:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然长描述性名称是最佳选择，但我们也不希望用填充词或不必要的词（如下所示）来模糊名称：
- en: The
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: The
- en: A
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: A
- en: Object
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象
- en: Such words just bog down the name and make it unnecessarily long while providing
    no extra meaning.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这些词只是让名称变得冗长，而没有任何额外的意义。
- en: Keep names pronounceable
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 保持名称可发音
- en: Good code should be easily readable. This means that you should be able to read
    it like a book and it should make sense without you having to look at the content
    of the function or the data type of the variables.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 好的代码应该是易于阅读的。这意味着你应该能够像读一本书一样阅读它，而且它应该在你不需要查看函数的内容或变量的数据类型时就有意义。
- en: This also means that we should keep names pronounceable. Use complete words
    or very common abbreviations if we decide to abbreviate one.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这也意味着我们应该保持名称的可发音性。如果我们决定缩写，可以使用完整的单词或非常常见的缩写。
- en: Be consistent
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 保持一致性
- en: 'Now, for the most important tip: be consistent in your naming. This way, you
    can count on your own style of naming and make assumptions about the variables,
    functions, and classes you write. If you break any of the rules, at least break
    them consistently, and don’t just do something different every time.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，最重要的提示是：在命名上保持一致性。这样，你可以依赖自己的命名风格，并对你编写的变量、函数和类做出假设。如果你违反了任何规则，至少要一致地违反，不要每次都做不同的事情。
- en: Public and private class members
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 公共和私有类成员
- en: In [*Chapter 4*](B19358_04.xhtml#_idTextAnchor164), we learned that **abstraction**
    and **encapsulation** are two key components of **object-oriented programming**.
    This means that code outside of a class should not need to worry about how that
    class gets results. For all the outside world is concerned, it could be magic
    or, even worse, manual labor.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第 4 章*](B19358_04.xhtml#_idTextAnchor164)中，我们了解到**抽象**和**封装**是**面向对象编程**的两个关键组成部分。这意味着类外的代码不需要担心该类如何得到结果。对于外界来说，它可能是魔法，甚至更糟，是手工劳动。
- en: 'To signify that a particular variable or method is meant for internal use by
    the class alone, GDScript took over the convention popularized in Python: putting
    an underscore before the name of that variable or function.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 为了表示某个特定的变量或方法仅由类本身内部使用，GDScript采用了在Python中流行的约定：在该变量或函数名称前加上下划线。
- en: '![Figure 5.1 – The auto-complete still suggests private variables](img/B19358_05_01.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.1 – 自动完成仍建议私有变量](img/B19358_05_01.jpg)'
- en: Figure 5.1 – The auto-complete still suggests private variables
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.1 – 自动完成仍建议私有变量
- en: However, as shown in *Figure 5**.1*, you’ll notice that the auto-complete still
    suggests private class members. It is still very important to indicate which members
    of the class are private and should not be accessed. This will help you or any
    other programmer coming after you by using the class itself.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如*图 5**.1*所示，你会注意到自动完成仍然建议私有类成员。指明哪些类成员是私有的且不应被访问仍然非常重要。这将帮助你或任何其他使用该类的程序员。
- en: Make short functions
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写简短函数
- en: The more a function tries to do, the more code there is within that function
    and the harder it is to understand what it is doing. So, to keep functions easily
    understandable, a great rule of thumb is to keep the number of lines under 20\.
    This lets you quickly understand what is happening and how to use the function
    effectively.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 函数尝试做的事情越多，该函数内部的代码就越多，理解它所做的事情就越困难。因此，为了使函数易于理解，一个很好的经验法则是将行数保持在20行以下。这样你可以快速理解正在发生的事情以及如何有效地使用该函数。
- en: Of course, you can call different functions. Splitting long functions into multiple
    smaller ones with a good descriptive name will save you many hours of figuring
    out what code does.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你可以调用不同的函数。将长函数拆分成多个具有良好描述性的小函数，将节省你许多时间来弄清楚代码的功能。
- en: DRY
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DRY
- en: There are two acronyms that almost every programming student will have heard
    of. The first is DRY. This acronym urges us to write a piece of code only once
    and then reuse it as much as possible. If we create small, generic functions,
    we can prevent copy-pasting the same few lines over our whole code base.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎每个编程学生都会听说两个缩写。第一个是DRY。这个缩写敦促我们只写一次代码，然后尽可能多地重用它。如果我们创建小的通用函数，我们就可以防止在整个代码库中复制粘贴相同的几行代码。
- en: But I should also warn you not to overdo it. Sometimes, it is okay to have a
    little bit of duplicate code that is better tailored to a particular scenario
    than to hack multiple scenarios into one piece of code. Use your best judgment.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 但我也应该警告你不要过度使用。有时，有一点点适合特定场景的重复代码是可以接受的，而不是将多个场景强行塞入一段代码中。使用你的最佳判断。
- en: Do one thing (KISS)
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 做一件事（KISS）
- en: 'The second acronym everyone knows about is **KISS**, which stands for **keep
    it simple, stupid**. This could be interpreted in two ways:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 每个人都知道的第二个缩写是**KISS**，代表**keep it simple, stupid**。这可以有两种解释：
- en: Keep the solution to the bare minimum, which means you don’t solve problems
    that do not exist yet. This way, you don’t develop features that are not needed
    and don’t spend time creating something nobody will use.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将解决方案保持至最简，这意味着你不解决尚未存在的问题。这样，你不会开发不需要的功能，也不会浪费时间创建无人使用的东西。
- en: Don’t make your code complex. Complex code is notoriously hard to maintain and
    understand. That is why it’s better to keep any solution simple, so you always
    know what is happening.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要让你的代码复杂。复杂的代码众所周知难以维护和理解。这就是为什么最好保持任何解决方案简单，这样你总是知道正在发生什么。
- en: Simple code is always easier to read, comprehend, and maintain. So, keep it
    simple, stupid!
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 简单的代码总是更容易阅读、理解和维护。所以，保持简单，傻瓜！
- en: Defensive programming
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 防御性编程
- en: The last principle I want to show you is **defensive programming**. In this
    paradigm, you try to play it safe by checking as many things and edge cases in
    code as possible. In a function, for example, you can check at the start of the
    function whether the parameters are correct. This way, you will prevent a lot
    of crashes in the long run.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我想要展示的最后一个原则是**防御性编程**。在这个范例中，您通过尽可能检查代码中的各种事项和边缘情况来确保安全。例如，在一个函数中，您可以在函数开始时检查参数是否正确。这样，您将防止在长期运行中发生很多崩溃。
- en: 'For example, if you have a function that should return the item within an inventory
    at a certain index, you could write it non-defensively and defensively like this:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您有一个函数应该返回库存中某个索引处的项目，您可以非防御性地和防御性地这样编写：
- en: '[PRE0]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The second version of the function is defensive because it checks first if the
    index of the item we want is within the range of the inventory. We do this because
    if the index is outside of this range, we crash the game.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 函数的第二版是防御性的，因为它首先检查我们想要的项目索引是否在库存的范围之内。我们这样做是因为如果索引超出这个范围，游戏就会崩溃。
- en: Programming style guides
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编程风格指南
- en: Lastly, I would like to go over what programming style guides are. These are
    guides that tell you how to structure your code. These guides never say anything
    about the content of the code but more about how to style it.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我想介绍一下编程风格指南是什么。这些指南会告诉您如何组织您的代码。这些指南从不涉及代码的内容，而是更多地关于如何进行样式化。
- en: You can compare these guides to the style of this book. I could put all the
    sentences in one long line without styling, headers, or images. But in the end,
    this would make the content very hard to comprehend.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将这些指南与本书的风格进行比较。我可以将所有句子放在一行中，不进行样式化、标题或图像。但最终，这会使内容非常难以理解。
- en: Next to making code more readable, these style guides also get whole teams of
    coders on one line, so each person’s code looks more alike and people don’t have
    to keep switching between different coding styles when trying to comprehend the
    code base of a project.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使代码更易于阅读之外，这些风格指南还使整个团队的编码风格保持一致，因此每个人的代码看起来更相似，人们在尝试理解项目的代码库时不需要在不同编码风格之间切换。
- en: 'Most companies have their internal style guide, and yes, there is an official
    GDScript style guide! You can read it over here: [https://docs.godotengine.org/en/stable/tutorials/scripting/gdscript/gdscript_styleguide.html](https://docs.godotengine.org/en/stable/tutorials/scripting/gdscript/gdscript_styleguide.html).'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数公司都有自己的内部风格指南，是的，确实有一个官方的 GDScript 风格指南！您可以在这里阅读：[https://docs.godotengine.org/en/stable/tutorials/scripting/gdscript/gdscript_styleguide.html](https://docs.godotengine.org/en/stable/tutorials/scripting/gdscript/gdscript_styleguide.html)。
- en: I don’t recommend you read the whole thing and try to apply it all at once.
    Instead, you could read some snippets here and there and once you have those guidelines
    down, read some more and try to fit these in your own coding style.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我不推荐您一次性阅读整个指南并尝试一次性应用所有内容。相反，您可以在这里和那里阅读一些片段，一旦您掌握了这些指南，再阅读更多，并尝试将其融入您自己的编码风格中。
- en: Don’t get mistaken. Even with these style guides, there is still room for a
    personal touch while coding. These guides will just be within a framework that
    makes your code nicer and easier to understand for other programmers working within
    the same programming language and framework.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 不要误解。即使有这些风格指南，在编码时仍然可以保留个人风格。这些指南将只是在一个框架内，使您的代码更美观，更容易被使用相同编程语言和框架的其他程序员理解。
- en: 'For the rest of this chapter, I would like to review some of the tips from
    the official GDScript style guide. Namely, the following few:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的剩余部分，我想回顾一下官方 GDScript 风格指南中的一些提示。特别是以下几点：
- en: White spacing
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 空白
- en: Blank lines
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 空行
- en: Line length
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 行长度
- en: So let’s dive right into these style recommendations of the Godot Engine developers
    themselves.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们直接深入到 Godot 引擎开发者自己的这些风格建议中。
- en: White spacing
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 空白
- en: 'Except for indentation, which we discussed in [*Chapter 2*](B19358_02.xhtml#_idTextAnchor044),
    GDScript doesn’t care about white space within lines of code. The next two lines
    are functionally the same:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 除了我们在[*第二章*](B19358_02.xhtml#_idTextAnchor044)中讨论的缩进之外，GDScript 不关心代码行内的空白。下面两行在功能上是相同的：
- en: '[PRE1]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: However, the second line is way more readable for humans because each part has
    room to breathe. That is why it’s essential to always use a space between numbers,
    function calls, and operators. This way, a line doesn’t just become a jumble of
    characters.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，第二行对人类来说更易读，因为每个部分都有足够的空间呼吸。这就是为什么始终在数字、函数调用和运算符之间使用空格是至关重要的。这样，一行代码就不会仅仅变成字符的混乱。
- en: 'In arrays, we also want to add a space between elements to clearly show that
    each is a separate entity:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在数组中，我们还想在元素之间添加空格，以清楚地显示每个元素都是一个单独的实体：
- en: '[PRE2]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The opposite can also be true. Inserting unnecessary spaces could obscure certain
    operators, for example, accessing a key in a dictionary:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 反过来也可能成立。插入不必要的空格可能会掩盖某些运算符，例如，访问字典中的键：
- en: '[PRE3]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the preceding example, it is more apparent that the square brackets are there
    to access a key from the dictionary and not to define an array.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，很明显方括号是用来从字典中访问键，而不是用来定义数组。
- en: 'Two other examples where no space shows a clear relation between the elements
    are the function name and its parameter list:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下两个例子中，没有空格显示了元素之间的明确关系：函数名及其参数列表：
- en: '[PRE4]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Also, we can see this when accessing a member variable or function from an
    object:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还可以在访问对象中的成员变量或函数时看到这一点：
- en: '[PRE5]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In general, it is very important to use white space within a line of code to
    show when things are separate entities or belong together. This will improve readability
    tremendously.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在代码行中使用空白空间来显示事物是分离的实体还是属于一起，这一点非常重要。这将极大地提高可读性。
- en: Blank lines
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 空白行
- en: 'The other kind of white space we can use to make code more readable is blank
    lines. A blank line is simply a line that contains nothing. The style guide suggests
    using two blank lines to separate functions and class definitions. This way, it
    is clear which pieces of text belong together as a function:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用另一种空白空间来使代码更易读，那就是空白行。空白行简单地就是一行什么都没有的行。风格指南建议使用两个空白行来分隔函数和类定义。这样，就可以清楚地知道哪些文本属于同一个函数：
- en: '[PRE6]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In addition to separating functions and classes with two blank lines, the guide
    advises us to use one blank line to separate lines of code that are logically
    grouped. For example, if we have code that calculates the damage from an attack
    and then applies that damage to all enemies, we can nicely group this logic into
    the following:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 除了用两个空白行分隔函数和类之外，指南还建议我们使用一个空白行来分隔逻辑上分组的一行代码。例如，如果我们有计算攻击造成的损害并将其应用到所有敌人身上的代码，我们可以将这个逻辑很好地组合如下：
- en: Determining the damage
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定损害
- en: Calculating the total damage
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算总损害
- en: Applying the damage to all enemies
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用到所有敌人的损害
- en: 'We can see this in the following code:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在以下代码中看到这一点：
- en: '[PRE7]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You will see me sin against the blank lines guide rules here and there throughout
    the book. I do this mainly to make the code more compact to fit the pages, but
    that doesn’t make the rule less important!
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 你会在本书的各个地方看到我违反空白行指南规则。我这样做主要是为了让代码更紧凑，以便适应页面，但这并不意味着规则不那么重要！
- en: Line length
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 行长度
- en: In the early days, computer monitors were tiny. They often couldn’t hold more
    than 70 to 90 characters in one line of text before it scrolled off the end or
    wrapped around. That is why code was best written in lines with, at most, this
    length. Nowadays, my ultra-wide computer monitor can hold over 500 characters
    on one line without a problem. Well, not a technical problem anyway. Working with
    text this wide makes it very hard to read for humans!
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在早期，计算机显示器很小。它们通常在一行文本滚动到末尾或换行之前，无法容纳70到90个字符。这就是为什么代码最好写成最多这个长度的行。如今，我的超宽计算机显示器可以一行显示超过500个字符而不会出现问题。好吧，至少不是技术问题。处理这么宽的文本对人类来说非常难以阅读！
- en: This is why people still restrict their line lengths while programming, to keep
    everything nice and easy to read. While, of course, not everyone agrees on the
    perfect line length, the GDScript defaults are 80 characters as a soft limit and
    `100` as a hard limit.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么人们在编程时仍然会限制行长度，以保持一切整洁且易于阅读。当然，并不是每个人都同意完美的行长度，GDScript的默认值是80个字符作为软限制，`100`个字符作为硬限制。
- en: 'It is advised to keep your lines under this amount of characters. If you do
    run into them, you can always subdivide your line by storing intermediate results
    in separate variables. For example, the next snippet of code checks if the player’s
    health is between `0` and `100` and whether the player has a potion in their inventory:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 建议将您的行长度控制在以下数量。如果您确实遇到了这种情况，您可以通过将中间结果存储在单独的变量中来始终细分您的行。例如，下面的代码片段检查玩家的健康值是否在
    `0` 到 `100` 之间，以及玩家是否在其存货中有药水：
- en: '[PRE8]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'It’s not technically too long, but to show how we can lower the line length
    and even make the condition in the `if` statement more readable, let’s rewrite
    this snippet as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术上讲，这并不算太长，但为了展示我们如何可以缩短行长度，甚至使 `if` 语句中的条件更加易读，让我们将此代码片段重写如下：
- en: '[PRE9]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As you can see, there are no extra-long lines now and the `if` statement is
    way more readable.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，现在没有多余的行，`if` 语句的易读性也大大提高。
- en: Utilizing the documentation
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用文档
- en: Sometimes, it is hard to anticipate how the built-in classes, functions, or
    variables of the Godot Engine work. Luckily, the engine has great documentation
    that explains everything in great detail.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，很难预测 Godot 引擎的内置类、函数或变量的工作方式。幸运的是，该引擎拥有详尽的文档，详细解释了所有内容。
- en: Accessing a class’s documentation
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问类的文档
- en: We can always access the documentation of any internal class by simply using
    *Ctrl* + clicking on the name of the class. This will take you to the specific
    documentation page of that class.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过简单地使用 *Ctrl* + 点击类的名称来访问任何内部类的文档。这将带您到该类的特定文档页面。
- en: '![Figure 5.2 – Ctrl + clicking on an internal class name, such as the Array
    class](img/B19358_05_02.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.2 – 在内部类名上 Ctrl + 点击，例如 Array 类](img/B19358_05_02.jpg)'
- en: Figure 5.2 – Ctrl + clicking on an internal class name, such as the Array class
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.2 – 在内部类名上 Ctrl + 点击，例如 Array 类
- en: As shown in *Figure 5**.3*, the documentation page starts with a simple description
    of what the class is used for and sometimes this part gives usage examples.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如 *图 5.3* 所示，文档页面以对类用途的简单描述开始，有时这部分会给出使用示例。
- en: '![Figure 5.3 – The documentation page for the Array class](img/B19358_05_03.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.3 – Array 类的文档页面](img/B19358_05_03.jpg)'
- en: Figure 5.3 – The documentation page for the Array class
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.3 – Array 类的文档页面
- en: Then follows an overview of the class’s member functions, variables, signals,
    and operators. We’ll see more about signals in [*Chapter 9*](B19358_09.xhtml#_idTextAnchor590).
    Note that you can easily click on the function or variable names to directly go
    to their explanation.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 然后是类的成员函数、变量、信号和运算符的概述。我们将在 [*第 9 章*](B19358_09.xhtml#_idTextAnchor590) 中了解更多关于信号的内容。请注意，您可以轻松地点击函数或变量名称直接转到它们的解释。
- en: Important note
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Remember that functions can also be called methods and variables can be called
    properties. This is because functions bound to a class are called methods and
    variables bound to a class properties.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，函数也可以称为方法，变量也可以称为属性。这是因为绑定到类的函数被称为方法，绑定到类的变量被称为属性。
- en: After the overview section, there is a detailed description of each function
    and variable. For the functions, we get an explanation of what the function does,
    what parameters the function takes, and what data type gets returned.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在概述部分之后，对每个函数和变量都有详细的描述。对于函数，我们得到关于函数做什么，函数接受哪些参数，以及返回什么数据类型的解释。
- en: '![Figure 5.4 – The documentation section for a function](img/B19358_05_04.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.4 – 函数的文档部分](img/B19358_05_04.jpg)'
- en: Figure 5.4 – The documentation section for a function
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.4 – 函数的文档部分
- en: For variables, we also get a description of what this variable is used for and
    what data type the value should be.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 对于变量，我们也会得到关于这个变量用途和值的数据类型的描述。
- en: '![Figure 5.5 – The documentation section for a variable](img/B19358_05_05.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.5 – 变量的文档部分](img/B19358_05_05.jpg)'
- en: Figure 5.5 – The documentation section for a variable
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.5 – 变量的文档部分
- en: This way of accessing the documentation works very well if we want to get a
    general feel for what a class does.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要对类的功能有一个大致的了解，这种方式访问文档非常有效。
- en: Directly accessing a function or variable’s documentation
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 直接访问函数或变量的文档
- en: To directly go to the documentation of a function or variable, you just have
    to press *Ctrl* + click that function or variable and you’ll go directly to the
    relevant section.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 要直接转到函数或变量的文档，您只需按 *Ctrl* + 点击该函数或变量，您就会直接转到相关部分。
- en: '![Figure 5.6 – Holding Ctrl + clicking on a function or variable will bring
    you to the right section in the documentation directly](img/B19358_05_06.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.6 – 按住 Ctrl + 点击函数或变量将直接带您到文档中的正确部分](img/B19358_05_06.jpg)'
- en: Figure 5.6 – Holding Ctrl + clicking on a function or variable will bring you
    to the right section in the documentation directly
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.6 – 按住 Ctrl + 点击函数或变量将直接带您到文档中的正确部分
- en: After clicking the link, we directly get to the section from *Figure 5**.4*.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 点击链接后，我们直接进入 *图 5**.4* 的部分。
- en: Going to the definition of a function or variable
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 跳转到函数或变量的定义
- en: 'This shortcut also works with our own code: if you hold *Ctrl* + click on Windows
    or Linux or *option* + click on Mac a function or variable that we defined somewhere,
    the editor will show where this function or variable was defined in the code.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这个快捷键也适用于我们自己的代码：如果您在 Windows 或 Linux 上按住 *Ctrl* + 点击或在 Mac 上按 *option* + 点击，那么编辑器将显示我们定义的函数或变量在代码中的位置。
- en: As an experiment, try using this shortcut on the different functions we defined
    on the `Enemy` classes we created in [*Chapter 4*](B19358_04.xhtml#_idTextAnchor164).
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 作为实验，尝试使用这个快捷键在我们在 [*第 4 章*](B19358_04.xhtml#_idTextAnchor164) 中创建的 `Enemy`
    类定义的不同函数上。
- en: Searching the documentation
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 搜索文档
- en: 'You can also search all the classes, functions, and variables. Simply follow
    these steps:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以搜索所有类、函数和变量。只需按照以下步骤操作：
- en: Press *F1* and a search bar will pop up.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *F1* 键，搜索栏将弹出。
- en: Type in any class, function, or variable you want to search for.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入您想要搜索的任何类、函数或变量。
- en: Select the right search result.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择正确的搜索结果。
- en: 'The result is shown in *Figure 5**.6*:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 结果显示在 *图 5**.6* 中：
- en: '![Figure 5.7 – You can also search all the documentation by pressing F11 on
    your keyboard](img/B19358_05_07.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.7 – 您也可以通过按键盘上的 F11 键搜索所有文档](img/B19358_05_07.jpg)'
- en: Figure 5.7 – You can also search all the documentation by pressing F11 on your
    keyboard
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.7 – 您也可以通过按键盘上的 F11 键搜索所有文档
- en: This makes it easy to find the right section in the documentation if you are
    not able to hold *Ctrl + click* on Windows and Linux or press *Option + click*
    on Mac, on a class, function, or variable within your code.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您无法在 Windows 和 Linux 上按住 *Ctrl + 点击* 或在 Mac 上按 *Option + 点击*，那么这个快捷键可以方便地找到文档中的正确部分，尤其是在类、函数或变量内部。
- en: Accessing the online documentation
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问在线文档
- en: All of this documentation is also hosted online. There are some pages and tutorials
    on the online version that you cannot access in the offline one. It’s also easier
    to open up multiple pages of documentation on the online version.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些文档也都在线托管。在线版本中有些页面和教程在离线版本中无法访问。它还更容易打开在线版本中的多个文档页面。
- en: 'Just navigate to: [https://docs.godotengine.org/](https://docs.godotengine.org/).'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 只需导航到：[https://docs.godotengine.org/](https://docs.godotengine.org/)。
- en: '![Figure 5.8 – The online documentation](img/B19358_05_08.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.8 – 在线文档](img/B19358_05_08.jpg)'
- en: Figure 5.8 – The online documentation
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.8 – 在线文档
- en: In the menu bar on the left, you can see all the different articles available
    and navigate to sections that interest you.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在左侧菜单栏中，您可以查看所有可用的不同文章，并导航到您感兴趣的部分。
- en: Summary
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: There we go! Throughout *Part 1* of the book, we learned how to program and
    we topped it off with some extra tips on becoming a good programmer during this
    chapter. Remember, no tips in this chapter are chiseled in stone or enforced by
    the engine. So, you can break them where needed. But they are here for your own
    good and many programmers have adopted them as daily practices.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 好了！在本书 *第一部分* 中，我们学习了如何编程，并在本章中提供了一些成为优秀程序员的额外技巧。记住，本章中的所有建议都不是一成不变的，也不会被引擎强制执行。因此，您可以在需要的地方打破它们。但它们在这里是为了您的利益，许多程序员已经将它们作为日常实践。
- en: In the next chapter, which is also at the beginning of the next part of the
    book, we will finally start working on our game! I hope you are as excited as
    I am!
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，也就是本书下一部分的开始，我们终于开始着手制作我们的游戏了！我希望您和我一样兴奋！
- en: Quiz time
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测验时间
- en: What are the three naming conventions used in the Godot Engine and GDScript?
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Godot 引擎和 GDScript 中使用了哪三种命名约定？
- en: Have the following functions been named well?
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些函数的命名是否得当？
- en: '`CalculateLifePoints()`'
  id: totrans-168
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CalculateLifePoints()`'
- en: '`stop_moving()`'
  id: totrans-169
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stop_moving()`'
- en: '`do_a_thing()`'
  id: totrans-170
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do_a_thing()`'
- en: '`drawcircles()`'
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`drawcircles()`'
- en: Have the following classes been named well?
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下类的命名是否得当？
- en: '`Player`'
  id: totrans-173
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Player`'
- en: '`normal_enemy`'
  id: totrans-174
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`normal_enemy`'
- en: '`MOTORCYCLE`'
  id: totrans-175
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MOTORCYCLE`'
- en: What do the acronyms DRY and KISS stand for?
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DRY 和 KISS 这两个缩写分别代表什么？
- en: 'Part 2: Making a Game in Godot Engine'
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二部分：在 Godot 引擎中制作游戏
- en: With the fundamentals of programming under our belt, we will finally start working
    on our very own game from scratch. In this part, we’ll learn all about Godot Engine’s
    flexible node-based system and create a *Vampire* *Survivors*-like game.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在掌握编程基础之后，我们最终将从零开始制作我们自己的游戏。在本部分，我们将了解 Godot 引擎灵活的基于节点的系统，并创建一个类似 *Vampire*
    *Survivors* 的游戏。
- en: By the end of this part, you will have created a whole game using different
    nodes and game development techniques. You will even be able to play the game
    with your friends, because we will end this part with a chapter on making the
    game multiplayer.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 到本部分结束时，你将使用不同的节点和游戏开发技术创建一个完整的游戏。你甚至可以和你的朋友们一起玩这个游戏，因为我们将以一个关于制作多人游戏章节结束本部分。
- en: 'This part has the following chapters:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分包含以下章节：
- en: '[*Chapter 6*](B19358_06.xhtml#_idTextAnchor411), *Creating a World of Your
    Own in Godot*'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第6章*](B19358_06.xhtml#_idTextAnchor411)，*在 Godot 中创建自己的世界*'
- en: '[*Chapter 7*](B19358_07.xhtml#_idTextAnchor523), *Making the Character Move*'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第7章*](B19358_07.xhtml#_idTextAnchor523)，*制作角色移动*'
- en: '[*Chapter 8*](B19358_08.xhtml#_idTextAnchor573), *Splitting and Reusing Scenes*'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第8章*](B19358_08.xhtml#_idTextAnchor573)，*分割和重用场景*'
- en: '[*Chapter 9*](B19358_09.xhtml#_idTextAnchor590), *Cameras, Collisions, and
    Collectibles*'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第9章*](B19358_09.xhtml#_idTextAnchor590)，*摄像机、碰撞和可收集物品*'
- en: '[*Chapter 10*](B19358_10.xhtml#_idTextAnchor632), *Creating Menus, Making Enemies,
    and Using Autoloads*'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第10章*](B19358_10.xhtml#_idTextAnchor632)，*创建菜单、制作敌人和使用自动加载*'
- en: '[*Chapter 11*](B19358_11.xhtml#_idTextAnchor660), *Playing Together with Multiplayer*'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第11章*](B19358_11.xhtml#_idTextAnchor660)，*多人联机游戏*'
