["```cpp\nvar mraa = require('mraa'); var mqtt = require('mqtt'); var B=4275;\n\nvar R0=100000;\n\nvar client = mqtt.connect('mqtt://iot.eclipse.org');\nfunction sendData()\n\n{\n\n  var tempPin=new mraa.Aio(0);\n\n//Processing of temperature var a=tempPin.read();\n\n  var R=1023/a-1; R=100000*R;\n\n  var temperature=1/(Math.log(R/100000)/B+1/298.15)-273.15; temperature\n  = +temperature.toFixed(2);\n\n//Converting type int to type string\n\n  var sendTemp= temperature.toString();\n\n//Publish the processed data client.publish('avirup/temperature',sendTemp); console.log(\"Sending data of temperature %d\", temperature); setTimeout(sendData,1000);\n\n}\n\nsendData();\n\n```", "```cpp\nnpm install mqtt\n\n```", "```cpp\nvar mraa = require('mraa'); \nvar mqtt = require('mqtt');\n\n```", "```cpp\nvar client = mqtt.connect('mqtt://iot.eclipse.org');\n\n```", "```cpp\nclient.publish('avirup/temperature',sendTemp);\n\n```", "```cpp\nvar mraa = require('mraa'); var mqtt = require('mqtt');\n\nvarledPin=new mraa.Gpio(13); ledPin.dir(mraa.DIR_OUT);\n\nvar client = mqtt.connect('mqtt://iot.eclipse.org'); client.subscribe('avirup/control/#') client.handleMessage=function(packet,callback)\n\n{\n\n  var payload = packet.payload.toString() console.log(payload);\n  if(payload=='ON')\n\n  ledPin.write(1); if(payload=='OFF') ledPin.write(0);\n  callback();\n\n}\n\n```", "```cpp\n#define RELAY_PIN 13 void setup()\n{\n  pinMode(RELAY_PIN,OUTPUT); //Set relay pin to output\n}\nvoid loop\n{\n  digitalWrite(RELAY_PIN, HIGH); //Set relay to on position\n}\n\n```", "```cpp\nrepositories \n{ \n  maven \n    {\n      url \"https://repo.eclipse.org/content/repositories/paho-\n      snapshots/\"\n    }\n}\ndependencies \n{\n  compile('org.eclipse.paho:org.eclipse.paho.android.service:1.0.3-\n  SNAPSHOT')\n    {\n      exclude module: 'support-v4'\n    }\n}\n\n```", "```cpp\n<service android:name=\"org.eclipse.paho.android.service.MqttService\" >\n</service>\n<uses- permission android:name=\"android.permission.INTERNET\" />\n\n```", "```cpp\n<EditText \n  android:layout_width=\"wrap_content\"\n  android:layout_height=\"wrap_content\" \n  android:text=\"android/edison\" \n  android:id=\"@+id/channelID\" \n  android:hint=\"Enter channel ID\" \n  android:layout_centerVertical=\"true\"\n  android:layout_alignParentStart=\"true\"\n  android:layout_alignEnd=\"@+id/portNum\" /> \n\n<Button \n  android:layout_width=\"wrap_content\"\n  android:layout_height=\"wrap_content\" \n  android:text=\"On\" \n  android:id=\"@+id/on\"\n  android:layout_below=\"@+id/connectMQTT\"\n  android:layout_alignParentStart=\"true\" \n  android:layout_marginTop=\"45dp\" /> \n<Button \n  android:layout_width=\"wrap_content\"\n  android:layout_height=\"wrap_content\" \n  android:text=\"Off\" \n  android:id=\"@+id/off\"\n  android:layout_alignTop=\"@+id/on\" \n  android:layout_alignParentEnd=\"true\" /> \n\n<EditText \n  android:layout_width=\"wrap_content\"\n  android:layout_height=\"wrap_content\" \n  android:id=\"@+id/brokerAdd\" \n  android:layout_alignParentTop=\"true\"\n  android:layout_alignParentStart=\"true\" \n  android:layout_marginTop=\"40dp\" \n  android:hint=\"Broker Address\" \n  android:layout_alignParentEnd=\"true\" \n  android:text=\"iot.eclipse.org\" /> \n\n<EditText \n  android:layout_width=\"wrap_content\"\n  android:layout_height=\"wrap_content\" \n  android:id=\"@+id/portNum\" \n  android:layout_below=\"@+id/brokerAdd\"\n  android:layout_alignParentStart=\"true\" \n  android:layout_marginTop=\"40dp\" \n  android:hint=\"Port Default: 1883\"\n  android:layout_alignEnd=\"@+id/brokerAdd\" \n  android:text=\"1883\" /> \n\n<Button \n  android:layout_width=\"wrap_content\"\n  android:layout_height=\"wrap_content\" \n  android:text=\"@string/connect\" \n  android:id=\"@+id/connectMQQT\" \n  android:layout_below=\"@+id/channelID\"\n  android:layout_alignParentStart=\"true\"\n  android:layout_alignEnd=\"@+id/channelID\" />\n\n```", "```cpp\nandroid:text=\"@string/connect\"\n\n```", "```cpp\npackage com.example.avirup.mqtt;\nimport org.eclipse.paho.client.mqttv3.IMqttDeliveryToken;\nimport org.eclipse.paho.client.mqttv3.MqttCallback;\nimport org.eclipse.paho.client.mqttv3.MqttClient;\nimport org.eclipse.paho.client.mqttv3.MqttException;\nimport org.eclipse.paho.client.mqttv3.MqttMessage;\nimport org.eclipse.paho.client.mqttv3.MqttPersistenceException;\nimport org.eclipse.paho.client.mqttv3.MqttSecurityException;\nimport org.eclipse.paho.client.mqttv3.persist.MemoryPersistence;\nimport java.io.UnsupportedEncodingException;\n/** * Created by Avirup on 16-02-2017\\. */\npublic class MqttClassimplements MqttCallback \n{ \n  String serverURI, port, clientID; \n  MqttClientclient; \n  MqttCallback callback;\n//ConstructorMqttClass(String uri, String port, String clientID) \n    {\n      this.serverURI=uri;\n      this.port=port;\n      this.clientID=clientID; \n    }\n  public void MqttConnect() \n    {\n      try \n        { \n          MemoryPersistencepersistance = new MemoryPersistence();\n          StringBuilderServerURI = new StringBuilder();\n          ServerURI.append(\"tcp://\"); \n          ServerURI.append(serverURI);\n          ServerURI.append(\":\"); \n          ServerURI.append(port); \n          String finalServerUri = ServerURI.toString();\n          client = new MqttClient(finalServerUri, clientID,\n          persistance);\n          client.setCallback(callback);\n          client.connect(); \n        }\n      catch (MqttSecurityException e) \n        { \n          e.printStackTrace(); \n        } \n      catch (MqttException e) \n        { \n          e.printStackTrace(); \n        }\n      }\n    public void MqttPublish(String message) \n      { \n        String commId=clientID;\n        try\n          {\n            byte[]\n            payload=message.getBytes(\"UTF-8\"); \n            MqttMessagefinalMsg= new MqttMessage(payload);\n            client.publish(clientID,finalMsg); \n          }\n        catch (UnsupportedEncodingException e) \n          { \n            e.printStackTrace(); \n          } \n        catch (MqttPersistenceExceptione) \n          { \n            e.printStackTrace(); \n          } \n        catch (MqttException e) \n          { \n            e.printStackTrace(); \n          } \n        } \n      @Override\n      public void connectionLost(Throwable cause) \n        {\n     }\n       @Override\n       public void messageArrived(String topic, MqttMessage\n       message) throws Exception \n         {\n       }\n      @Override\n      public void deliveryComplete(IMqttDeliveryToken token) \n        {\n      } \n    }\n\n```", "```cpp\nString serverURI, port, clientID; \nMqttClientclient; \nMqttCallback callback; \nMqttClass(String uri, String port, String clientID)\n{\n  this.serverURI=uri;\n  this.port=port;\n  this.clientID=clientID; \n}\n\n```", "```cpp\nMemoryPersistencepersistance = new MemoryPersistence(); StringBuilderServerURI = new StringBuilder(); ServerURI.append(\"tcp://\"); \nServerURI.append(serverURI); \nServerURI.append(\":\"); \nServerURI.append(port); \nString finalServerUri = ServerURI.toString();\n\n```", "```cpp\nclient = new MqttClient(finalServerUri, clientID, persistance);\n\n```", "```cpp\ncatch(MqttSecurityException e) \n{ \n  e.printStackTrace(); \n} \ncatch (MqttException e) \n{\n  e.printStackTrace(); \n}\n\n```", "```cpp\npublic void MqttPublish(String message) \n{ \n  String commId=clientID;\n  try\n    {\n      byte[] payload=message.getBytes(\"UTF-8\"); \n      MqttMessagefinalMsg= new MqttMessage(payload);\n      client.publish(clientID,finalMsg); \n    }\n  catch (UnsupportedEncodingException e) \n    { \n      e.printStackTrace(); \n    } \n  catch (MqttPersistenceException\n    { \n      e.printStackTrace(); \n    } \n  catch (MqttException e) \n    { \n      e.printStackTrace(); \n    } \n}\n\n```", "```cpp\npackagecom.example.avirup.mqtt;\nimport android.support.v7.app.AppCompatActivity;\nimport android.os.Bundle;\npublic class MainActivityextends AppCompatActivity \n{ \n  @Overrideprotected void onCreate(Bundle savedInstanceState)\n  {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main); \n  } \n}\n\n```", "```cpp\nEditTextserverURI,port,channelID; \nButton connect,on,off;\n\n```", "```cpp\nserverURI=(EditText)findViewById(R.id.brokerAdd);\nport=(EditText)findViewById(R.id.port Num);\nconnect=(Button)findViewById(R.id.connectMQTT);\nchannelID=(EditText)findViewById(R.id.channelID);\non=(Button)findViewById(R.id.on);\noff=( Button)findViewById(R.id.off);\n\n```", "```cpp\nconnect.setOnClickListener(new View.OnClickListener() \n{ \n  @Overridepublic void onClick(View v) \n    {\n    } \n});\n\n```", "```cpp\nMqttClassmqttClass;\n\n```", "```cpp\nString serverUri, portNo,channelid;\n\n```", "```cpp\nserverUri=serverURI.getText().toString();\nportNo=port.getText().toString();\nchannelid=channelID.getText().toString();\n\n```", "```cpp\nmqttClass=new MqttClass(serverUri,portNo,channelid); mqttClass.MqttConnect(); \n\n```", "```cpp\non.setOnClickListener(new View.OnClickListener() \n{ \n  @Overridepublic void onClick(View v) \n    {\n      mqttClass.MqttPublish(\"ON\"); \n    } \n});\noff.setOnClickListener(new View.OnClickListener() \n{\n  @Overridepublic void onClick(View v) \n    {\n      mqttClass.MqttPublish(\"OFF\"); \n    } \n});\n\n```", "```cpp\n<Button x:Name=\"click_me\" Content=\"Click me\" HorizontalAlignment=\"Left\" Margin=\"151,137,0,0\" VerticalAlignment=\"Top\" Width=\"193\"/>\n<TextBlock x:Name=\"textBlock\" Text=\"TextBlock\" HorizontalAlignment=\"Left\"\nMargin=\"151,189,0,0\" TextWrapping=\"Wrap\" VerticalAlignment=\"Top\" Width=\"193\" Foreground=\"White\"/>\n<TextBox x:Name=\"textBox\" HorizontalAlignment=\"Left\" Height=\"23\" Margin=\"151,101,0,0\" TextWrapping=\"Wrap\" Text=\"TextBox\" VerticalAlignment=\"Top\" Width=\"193\"/>\n\n```", "```cpp\nprivatevoidclick_me_Click(object sender, RoutedEventArgs e)\n{\n}\n\n```", "```cpp\nprivatevoidclick_me_Click(object sender, RoutedEventArgs e)\n{\n  string res = textBox.Text; if(string.IsNullOrEmpty(res))\n    {\n      MessageBox.Show(\"No text entered. Please enter again\");\n    }\n  else\n    {\n      textBlock.Text = res;\n    }\n}\n\n```", "```cpp\n<Button x:Name=\"on\" Content=\"on\" HorizontalAlignment=\"Left\" Margin=\"151,180,0,0\" VerticalAlignment=\"Top\" Width=\"88\" Click=\"on_Click\"/>\n  <TextBlock x:Name=\"statusBox\" Text=\"status\"\n  HorizontalAlignment=\"Left\" Margin=\"229,205,0,0\" TextWrapping=\"Wrap\"\n  VerticalAlignment=\"Top\" Width=\"115\" Foreground=\"White\"/>\n  <TextBox x:Name=\"channelID\" HorizontalAlignment=\"Left\" Height=\"23\"\n  Margin=\"151,101,0,0\" TextWrapping=\"Wrap\" Text=\"\"\n  VerticalAlignment=\"Top\" Width=\"193\"/>\n  <Button x:Name=\"off\" Content=\"off\" HorizontalAlignment=\"Left\"\n  Margin=\"256,180,0,0\" VerticalAlignment=\"Top\" Width=\"88\"\n  Click=\"off_Click\"/>\n  <Button x:Name=\"connect\" Content=\"Connect\" HorizontalAlignment=\"Left\"\n  VerticalAlignment=\"Top\" Width=\"193\" Margin=\"151,139,0,0\"\n  Click=\"connect_Click\"/> \n\n```", "```cpp\nuPLibrary.Networking.M2Mqtt;\n\n```", "```cpp\nMqttClient client = new MqttClient(\"iot.eclipse.org\"); String channelID;\n\n```", "```cpp\nchannelID_text = channelID.Text;\nif (string.IsNullOrEmpty(channelID_text))\n{\n  MessageBox.Show(\"Channel ID cannot be null\");\n}\nelse\n{\n  try\n  {\n    client.Connect(channelID_text); connect.Content = \"Connected\";\n  }\ncatch (Exception ex)\n{\n  MessageBox.Show(\"Some issues occured: \" + ex.ToString());\n}\n}\n\n```", "```cpp\nprivate void on_Click(object sender, RoutedEventArgs e)\n{\n  byte[] array = Encoding.ASCII.GetBytes(\"on\");\n  client.Publish(channelID_text, array);\n}\n\n```", "```cpp\nprivate void off_Click(object sender, RoutedEventArgs e)\n{\n  byte[] array = Encoding.ASCII.GetBytes(\"off\");\n  client.Publish(channelID_text, array);\n}\n\n```", "```cpp\nusing System; \nusingSystem.Collections.Generic; \nusingSystem.Linq;\nusingSystem.Text; \nusingSystem.Threading.Tasks; \nusingSystem.Windows; \nusingSystem.Windows.Controls; \nusingSystem.Windows.Data; \nusingSystem.Windows.Documents; \nusingSystem.Windows.Input; \nusingSystem.Windows.Media; \nusingSystem.Windows.Media.Imaging; \nusingSystem.Windows.Navigation; \nusingSystem.Windows.Shapes;\nusing uPLibrary.Networking.M2Mqtt; \nnamespaceMqtt_Controller\n{\n/// <summary>\n/// Interaction logic for MainWindow.xaml\n/// </summary>\n  public partial class MainWindow : Window\n    {\n      MqttClient client = new MqttClient(\"iot.eclipse.org\"); \n      String channelID_text;\n      publicMainWindow()\n        {\n          InitializeComponent();\n        }\n      private void on_Click(object sender, RoutedEventArgs e)\n        {\n          byte[] array = Encoding.ASCII.GetBytes(\"ON\");\n          client.Publish(channelID_text, array); \n          statusBox.Text = \"on\";\n        }\n      private void off_Click(object sender, RoutedEventArgs e)\n        {\n          byte[] array = Encoding.ASCII.GetBytes(\"OFF\");\n          client.Publish(channelID_text, array); \n          statusBox.Text = \"off\";\n        }\n      private void connect_Click(object sender, RoutedEventArgs e)\n        {\n          channelID_text = channelID.Text;\n          if (string.IsNullOrEmpty(channelID_text))\n            {\n              MessageBox.Show(\"Channel ID cannot be null\");\n            }\n          else\n            {\n              try\n                {\n                  client.Connect(channelID_text); \n                  connect.Content = \"Connected\";\n                }\n              catch (Exception ex)\n                {\n                  MessageBox.Show(\"Some issues occured: \" +\n                  ex.ToString());\n                }\n            }\n        }\n    }\n}\n\n```"]