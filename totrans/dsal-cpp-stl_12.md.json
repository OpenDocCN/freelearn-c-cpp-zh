["```cpp\nstd::vector<int> original{1, 2, 3};\nstd::vector<int> duplicate(original); // Copy constructor\n```", "```cpp\nstd::vector<int> original{1, 2, 3};\nstd::vector<int> destination(std::move(original)); // Move constructor\n```", "```cpp\n#include <iostream>\n#include <vector>\nvoid printVector(const std::vector<int> &vec,\n                 const std::string &name) {\n  std::cout << name << \": \";\n  for (int val : vec) { std::cout << val << \" \"; }\n  std::cout << \"\\n\";\n}\nint main() {\n  std::vector<int> source = {10, 20, 30, 40, 50};\n  std::vector<int> destination = std::move(source);\n  std::cout\n      << \"Trying to access the 'source' vector after \"\n         \"moving its data:\\n\";\n  printVector(source, \"Source\");\n  printVector(destination, \"Destination\");\n  source.push_back(60);\n  std::cout << \"After trying to add data to 'source' \"\n               \"post-move:\\n\";\n  printVector(source, \"Source\");\n  return 0;\n}\n```", "```cpp\nTrying to access the 'source' vector after moving its data:\nSource:\nDestination: 10 20 30 40 50\nAfter trying to add data to 'source' post-move:\nSource: 60\n```", "```cpp\n#include <iostream>\n#include <vector>\nclass Sample {\npublic:\n  Sample() { std::cout << \"Constructor called!\\n\"; }\n  Sample(const Sample &) {\n    std::cout << \"Copy Constructor called!\\n\";\n  }\n  Sample(Sample &&) noexcept {\n    std::cout << \"Move Constructor called!\\n\";\n  }\n  ~Sample() { std::cout << \"Destructor called!\\n\"; }\n};\nSample createSample() { return Sample(); }\nint main() {\n  std::cout << \"Creating object via function return:\\n\";\n  Sample obj = createSample();\n  return 0;\n}\n```", "```cpp\nCreating object via function return:\nConstructor called!\nDestructor called!\n```", "```cpp\nstd::vector<int> v(5, 2112);\n```", "```cpp\nstd::vector<int> v(5);\nstd::generate(v.begin(), v.end(), [n = 0]() mutable { return n++; });\n```", "```cpp\n#include <algorithm>\n#include <iostream>\n#include <vector>\nint main() {\n  std::vector<int> values = {10, -1, 20, -2, 30};\n  // Using std::replace to update a specific value\n  std::replace(values.begin(), values.end(), -1,\n               0); // Replace -1 with 0\n  // Using std::replace_if to update based on a condition\n  std::replace_if(\n      values.begin(), values.end(),\n      [](int value) {\n        return value < 0;\n      },  // Lambda function for condition\n      0); // Replace negative values with 0\n  // Printing the updated collection\n  for (int value : values) { std::cout << value << \" \"; }\n  std::cout << std::endl;\n  return 0;\n}\n```", "```cpp\n10 0 20 0 30\n```"]