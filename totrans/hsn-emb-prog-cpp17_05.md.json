["```cpp\n--section-start=.text=0x1800 \n```", "```cpp\n__attribute__ ((naked, used, section (\".init3\")))\n```", "```cpp\nchar * __malloc_heap_start \nchar * __malloc_heap_end \n```", "```cpp\n#include <avr/interrupt.h> \n\nISR(ADC_vect) { \n         // user code \n} \n```", "```cpp\nvoid IRAM_ATTR MotionModule::interruptHandler() {\n          int val = digitalRead(pin);\n          if (val == HIGH) { motion = true; }\n          else { motion = false; }\n }\n```", "```cpp\n#include <cinttypes> \n#include <avr/interrupt.h> \n#include <avr/io.h> \n#include <util/atomic.h> \n\nvolatile uint16_t ctr; \n\nISR(TIMER1_OVF_vect) { \n   ctr--; \n} \n\nint main() { \n         ctr = 0x200; \n         start_timer(); \n         sei(); \n         uint16_t ctr_copy; \n         do { \n               ATOMIC_BLOCK(ATOMIC_FORCEON) \n               { \n                     ctr_copy = ctr; \n               } \n         } \n         while (ctr_copy != 0); \n\n         return 0; \n} \n```", "```cpp\nARCH ?= avr\n\n # Board preset.\n BOARD ?= arduino_mega_2560\n\n # Set the name of the output (ELF & Hex) file.\n OUTPUT := sdinfo\n\n # Add files to include for compilation to these variables.\n APP_CPP_FILES = $(wildcard src/*.cpp)\n APP_C_FILES = $(wildcard src/*.c)\n\n #\n # --- End of user-editable variables --- #\n #\n\n # Nodate includes. Requires that the NODATE_HOME environment variable has been set.\n APPFOLDER=$(CURDIR)\n export\n\n all:\n    $(MAKE) -C $(NODATE_HOME)\n\n flash:\n    $(MAKE) -C $(NODATE_HOME) flash\n\n clean:\n    $(MAKE) -C $(NODATE_HOME) clean\n```", "```cpp\nMCU := atmega2560 \nPROGRAMMER := wiring \nVARIANT := mega # \"Arduino Mega\" board type\n```", "```cpp\n#include <wiring.h>\n #include <SPI.h>\n #include <SD.h>\n\n #include \"serialcomm.h\"\n```", "```cpp\nint main () {\n    init();\n    initVariant();\n\n    Serial.begin(9600);\n\n    SPI.begin();\n```", "```cpp\n   Serial.println(\"Initializing SD card...\");\n\n    if (!SD.begin(53)) {\n          Serial.println(\"Initialization failed!\");\n          while (1);\n    }\n\n    Serial.println(\"initialization done.\");\n\n    Serial.println(\"Commands: index, chip\");\n    Serial.print(\"> \");\n```", "```cpp\n          while (1) {\n                String cmd;\n                while (!SerialComm::readLine(cmd)) { }\n\n                if (cmd == \"index\") { readIndex(); }\n                else if (cmd == \"chip\") { readChipConfig(); }\n                else { Serial.println(\"Unknown command.\");      }\n\n                Serial.print(\"> \");\n          }\n\n          return 0;\n }\n```", "```cpp\n#include <HardwareSerial.h>      // UART.\n\n static const int CHARBUFFERSIZE 64\n\n class SerialComm {\n          static char charbuff[CHARBUFFERSIZE];\n\n public:\n          static bool readLine(String &str);\n };\n```", "```cpp\n#include \"serialcomm.h\"\n\n char SerialComm::charbuff[CHARBUFFERSIZE];\n\n bool SerialComm::readLine(String &str) {\n          int index = 0;\n\n          while (1) {\n                while (Serial.available() == 0) { }\n\n                char rc = Serial.read();\n                Serial.print(rc);\n\n                if (rc == '\\n') {\n                      charbuff[index] = 0;\n                      str = charbuff;\n                      return true;\n                }\n\n                if (rc >= 0x20 || rc == ' ') {\n                      charbuff[index++] = rc;\n                      if (index > CHARBUFFERSIZE) {\n                            return false;\n                      }\n                }\n          }\n\n          return false;\n }\n```", "```cpp\nvoid readIndex() {\n          File sdFile = SD.open(\"chips.idx\");\n          if (!sdFile) {\n                Serial.println(\"Failed to open IC index file.\");\n                Serial.println(\"Please check SD card and try again.\");\n                while(1);\n          }\n\n          Serial.println(\"Available chips:\");\n          while (sdFile.available()) {\n                Serial.write(sdFile.read());\n          }\n\n          sdFile.close();\n }\n```", "```cpp\nHEF4001B\nQuad 2-input NOR gate.\nA1-A2: 22-27, Vss: GND, 3A-4B: 28-33, Vdd: 5V\n22:0,23:0=24:1\n22:0,23:1=24:0\n22:1,23:0=24:0\n22:1,23:1=24:0\n26:0,27:0=25:1\n26:0,27:1=25:0\n26:1,27:0=25:0\n26:1,27:1=25:0\n28:0,29:0=30:1\n28:0,29:1=30:0\n28:1,29:0=30:0\n28:1,29:1=30:0\n33:0,32:0=31:1\n33:0,32:1=31:0\n33:1,32:0=31:0\n33:1,32:1=31:0\n```", "```cpp\n<pin>:<value>,[..,]<pin>:<value>=<pin>:<value>\n```", "```cpp\n void readChipConfig() {\n          Serial.println(\"Chip name?\");\n          Serial.print(\"> \");\n          String chip;\n          while (!SerialComm::readLine(chip)) { }\n```", "```cpp\n          File sdFile = SD.open(chip + \".ic\");      \n          if (!sdFile) {\n                Serial.println(\"Failed to open IC file.\");\n                Serial.println(\"Please check SD card and try again.\");\n                return;\n          }\n\n          String name = sdFile.readStringUntil('\\n');\n          String desc = sdFile.readStringUntil('\\n');\n```", "```cpp\n          Serial.println(\"Found IC:\");\n          Serial.println(\"Name: \" + name);\n          Serial.println(\"Description: \" + desc);   \n\n          String pins = sdFile.readStringUntil('\\n');\n          Serial.println(pins);\n```", "```cpp\n\n          Serial.println(\"Type 'start' and press <enter> to start test.\");\n          Serial.print(\"> \");\n          String conf;\n          while (!SerialComm::readLine(conf)) { }\n          if (conf != \"start\") {\n                Serial.println(\"Aborting test.\");\n                return;\n          }\n```", "```cpp\n          int result_pin, result_val;\n          while (sdFile.available()) {\n                // Read line, format:\n                // <pin>:<value>, [..,]<pin>:<value>=<pin>:<value>\n                pins = sdFile.readStringUntil('=');\n                result_pin = sdFile.readStringUntil(':').toInt();\n                result_val = sdFile.readStringUntil('\\n').toInt();\n                Serial.print(\"Result pin: \");\n                Serial.print(result_pin);\n                Serial.print(\", expecting: \");\n                Serial.println(result_val);\n                Serial.print(\"\\n\");\n\n                pinMode(result_pin, INPUT);\n```", "```cpp\n                int pin;\n                bool val;\n                int idx = 0;\n                unsigned int pos = 0;\n                while ((idx = pins.indexOf(':', pos)) > 0) {\n                      int pin = pins.substring(pos, idx).toInt();\n                      pos = idx + 1; // Move to character beyond the double colon.\n\n                      bool val = false\n                      if ((idx = pins.indexOf(\",\", pos)) > 0) {\n                            val = pins.substring(pos, idx).toInt();\n                            pos = idx + 1;\n                      }\n                      else {\n                            val = pins.substring(pos).toInt();\n                      }\n\n                      Serial.print(\"Setting pin \");\n                      Serial.print(pin);\n                      Serial.print(\" to \");\n                      Serial.println(val);\n                      Serial.print(\"\\n\");\n                      pinMode(pin, OUTPUT);\n                      digitalWrite(pin, val);\n                }\n```", "```cpp\n\n                delay(10);\n\n                int res_val = digitalRead(result_pin);\n                if (res_val != result_val) {\n                      Serial.print(\"Error: got value \");\n                      Serial.print(res_val);\n                      Serial.println(\" on the output.\");\n                      Serial.print(\"\\n\");\n                }\n                else {\n                      Serial.println(\"Pass.\");\n                }\n          }     \n\n          sdFile.close();\n }\n```", "```cpp\n    Initializing SD card...\n    initialization done.\n    Commands: index, chip\n    > index  \n```", "```cpp\n    Available chips:\n    4001\n    > chip\n    Chip name?\n    > 4001\n    Found IC:\n    Name: HEF4001B\n    Description: Quad 2-input NOR gate.\n    A1-A2: 22-27, Vss: GND, 3A-4B: 28-33, Vdd: 5V\n    Type 'start' and press <enter> to start test.\n    > start  \n```", "```cpp\n    Result pin: 24, expecting: 1\n    Setting pin 22 to 0\n    Setting pin 23 to 0\n    Pass.\n    Result pin: 24, expecting: 0\n    Setting pin 22 to 0\n    Setting pin 23 to 1\n    Pass.\n    Result pin: 24, expecting: 0\n    Setting pin 22 to 1\n    Setting pin 23 to 0\n    [...]\n    Result pin: 31, expecting: 0\n    Setting pin 33 to 1\n    Setting pin 32 to 0\n    Pass.\n    Result pin: 31, expecting: 0\n    Setting pin 33 to 1\n    Setting pin 32 to 1\n    Pass.\n    >  \n```", "```cpp\n-specs=nosys.specs \n```"]