["```cpp\nclass ClassName { \n  // class body\n};\n```", "```cpp\nclass ClassName {\n  private:\n    int privateDataMember;\n    int privateMemberFunction();\n  protected:\n    float protectedDataMember;\n    float protectedMemberFunction();\n  public:\n    double publicDataMember;\n    double publicMemberFunction();\n};\n```", "```cpp\nclass Coordinates {\n  public:\n    float latitude;\n    float longitude;\n    float distance(const Coordinates& other_coordinate);\n};\n```", "```cpp\nCoordinates newYorkPosition;\nCoordinates tokyoPosition;\n```", "```cpp\nfloat newYorkLatitude = newYorkPosition.latitude;\n```", "```cpp\nfloat distance = newYorkPosition.distance(tokyoPosition);\n```", "```cpp\nfloat Coordinates::distance(const Coordinates& other_coordinate) {\n  return pythagorean_distance(latitude, longitude, other_coodinate.latitude, other_coordinate.longitude);\n}\n```", "```cpp\nclass ClassName {\n  static Type memberName;\n};\n```", "```cpp\nType ClassName::memberName = value;\n```", "```cpp\n// In the .h file\nclass Coordinates {\n  // Data member\n  float latitude_ = 0;\n  // Data member\n  float longitude_ = 0; \npublic:\n  // Static data member declaration\n  static const Coordinates hearthCenter;\n  // Member function declaration\n  float distanceFrom(Coordinates other);\n  // Member function definition\n  float distanceFromCenter() {\n    return distanceFrom(hearthCenter);\n  }\n};\n// In the .cpp file \n// Static data member definition\nconst Coordinates Coordinates::hearthCenter = Coordinates(0, 0);\n```", "```cpp\n    void squares() \n    {  \n        static int count = 1; \n        int x = count * count;\n        x = count * count;\n        std::cout << count << \"*\" << count;\n        std::cout << \": \" << x <<std::endl;\n        count++;\n    }\n    ```", "```cpp\n    int main() \n    { \n        for (int i=1; i<11; i++)     \n            squares(); \n        return 0; \n    }\n    ```", "```cpp\n    1*1: 1\n    2*2: 4\n    3*3: 9\n    4*4: 16\n    5*5: 25\n    6*6: 36\n    7*7: 49\n    8*8: 64\n    9*9: 81\n    10*10: 100\n    ```", "```cpp\nclass Car\n{\n  public:\n  void turnOn() {}\n};\n```", "```cpp\nCar car;\ncar.turnOn();\n```", "```cpp\nclass Car\n{\n  public:\n  void turnOn();\n};\nvoid Car::turnOn() {}\n```", "```cpp\nconst std::string& getColor() const\n{\n  // Function body\n}\n```", "```cpp\nclass Car\n{\n  std::string& getColor() {}\n  const std::string& getColor() const {}\n};\nCar car;\n// Call std::string& getColor()\ncar.getColor();\nconst Car constCar; \n// Call const Color& getColor() const\nconstCar.getColor();\n```", "```cpp\n    type& function() const {}\n    const type& function() {}\n    const type& function() const {}\n    ```", "```cpp\nclass Car\n{\n  std::string color;\n  void setColorToRed()\n  {\n    this->color = \"Red\";\n    // explicit use of this\n  }\n  void setColorToBlue()\n  {\n    color = \"Blue\";\n    // same as this->color = \"Blue\";\n  }\n};\n```", "```cpp\n    class PrintName {\n        std::string name;\n\n    };\n    ```", "```cpp\n    public:\n       void set_name(const std::string &name){\n           this->name = name;\n       }    \n       void print_name() {\n           std::cout << this->name << \"! Welcome to the C++ community :)\" << std::endl;\n       }\n    ```", "```cpp\n    int main()\n    {\n    PrintName object;\n    object.set_name(\"Marco\");\n    object.print_name();\n    }\n    ```", "```cpp\n    Marco! Welcome to the C++ community :)\n    ```", "```cpp\nclass Circle{\n  public:\n    int radius;\n};\nostream& print(ostream& os, const Circle& circle) {\n  os << \"Circle's radius: \" << circle.radius;\n  return os;\n}\n```", "```cpp\nstruct Rectangle {\n  int height;\n  int width;\n};\nRectangle rectangle;\n// What will the following print function print?\nstd::cout << \"Height: \" << rectangle.height << std::endl;\n```", "```cpp\nRectangle rectangle(parameter1, paramter2, ..., parameterN);\n```", "```cpp\nstruct Rectangle {\n  int height, width;\n  Rectangle() {\n    height = 0;\n    width = 0;\n  }\n};\n```", "```cpp\nstruct Date {\n  int day;\n  int month;\n  int year;\n};\n```", "```cpp\nDate date;\ndate.month = 153;\n```", "```cpp\nclass Rectangle {\n  public: \n    Rectangle(); // as before\n    Rectangle (Square square);\n}; \n```", "```cpp\nRectangle obj; // Calls the first constructor\nRectangle obj(square); // Calls the second overloaded constructor\n```", "```cpp\nSquare square;\nRectangle rectangle(square);\n```", "```cpp\nvoid use_rectangle(Rectangle rectangle);\nint main() {\n  Square square;\n  use_rectangle(square);\n}\n```", "```cpp\nexplicit class_name(type arg) {}\n```", "```cpp\nclass ExplicitRectangle {\n  public: \n    explicit ExplicitRectangle(Square square);\n}; \n```", "```cpp\nvoid use_explicit_rectangle(ExplicitRectangle rectangle);\nint main() {\n    Square square;\n    use_explicit_rectangle(square); // Error!\n}\n```", "```cpp\nclass Rectangle {\n  public:\n    Rectangle(): width(0), height(0) { } //Empty function body, as the variables have already been initialized\n  private:\n    int width;\n    int height;\n};\n```", "```cpp\nRectangle rectangle; \nstd::cout << \"Width: \" << rectangle.width << std::endl;  // 0\nstd::cout << \"Height: \" << rectangle.height << std::endl; // 0\n```", "```cpp\nclass Example {\n    Example() : second(0), first(0) {}\n    int first;\n    int second;\n};\n```", "```cpp\nstruct Rectangle {\n  int length;\n  int width;\n};\nRectangle rectangle = {10, 15};\nstd::cout << rectangle.length << \",\" << rectangle.width;\n// Prints: 10, 15\n```", "```cpp\nclass class_name {\n  public:\n    class_name() {} // constructor\n    ~class_name() {} // destructor\n};\n```", "```cpp\n    class Coordinates {\n        public:\n        Coordinates(){\n            std::cout << \"Constructor called!\" << std::endl;\n        }\n\n        ~Coordinates(){\n            std::cout << \"Destructor called!\" << std::endl;\n        }\n    };\n    ```", "```cpp\n    int main() \n    { \n\n      Coordinates c;  \n      // Constructor called!\n      // Destructor called!\n\n    }\n    ```", "```cpp\n    Constructor called!\n    Destructor called!\n    ```", "```cpp\nclass file_handle {\n  public:\n    file_handle(ofstream& stream, const char* filepath) : _stream(stream) {\n      _stream.open(filepath);\n    }\n    ~file_handle {\n      _stream.close();\n    }\n  private:\n    ofstream& _stream;\n};\n```", "```cpp\nofstream stream;\n{\n  file_handle myfile(stream, \"Some path\"); // file is opened\n  do_something_with_file(stream);\n}                                          // file is closed here \n```", "```cpp\nofstream stream;\n{\n  stream.open(\"Some path\");    // file is opened\n  do_something_with_file(stream);\n  stream.close();              // file is closed here\n}\n```", "```cpp\n// Declaration\nclass Coordinate {\n...\n  struct CoordinateDistance {\n    float x = 0;\n    float y = 0;\n    static float walkingDistance(CoordinateDistance distance);\n  }\n};\n// Create an instance of the nested class CoordinateDistance\nCoordinate::CoordinateDistance distance;\n/* Invoke the static method walkingDistance declared inside the nested class CoordinateDistance */\nCoordinate::CoordinateDistance::walkingDistance(distance);\n```", "```cpp\nclass class_name {\n  type_1 member_1;\n  type_2 member_2;\n  public:\n    friend void print(const class_name &obj);\n};\nfriend void print(const class_name &obj){\n  std::cout << obj.member_1 << \" \" << member_2 << std::endl;\n}\n```", "```cpp\nclass A {\n  friend class B;\n  int a = 0;\n};\nclass B {\n  friend class C;\n  int b = 0;\n};\nclass C {\n  int c = 0;\n  void access_a(const A& object) {\n    object.a;\n    // Error! A.a is private, and C is not a friend of A.\n  }\n};\n```", "```cpp\n    class Height {\n        double inches;\n        public:\n            Height(double value): inches(value) { }\n            friend void print_feet(Height);\n    };\n    ```", "```cpp\n    void print_feet(Height h){\n        std::cout << \"Your height in inches is: \" << h.inches<< std::endl;\n        std::cout << \"Your height in feet is: \" << h.inches * 0.083 << std::endl;\n    }\n    ```", "```cpp\n    int main(){\n        IHeight h(83);\n        print_feet(h);\n    }\n    ```", "```cpp\n    Your height in inches is: 83\n    Your height in feet is: 6.889\n    ```", "```cpp\n    class Apple \n    {\n      private:\n        Apple() {}\n        // do nothing\n    };\n    ```", "```cpp\n    class AppleTree\n    {\n      public:\n        Apple createApple(){\n          Apple apple;\n          return apple;\n        }\n    };\n    ```", "```cpp\n    class Apple\n    {\n      friend class AppleTree;\n      private:\n        Apple() {}\n        // do nothing\n    }\n    ```", "```cpp\n    AppleTree tree;\n    Apple apple = tree.createFruit();\n    ```", "```cpp\nclass class_name {\n  public:\n    class_name(const class_name& other) : member(other.member){}\n  private:\n    type member;\n};\n```", "```cpp\nstruct A {\n  A() {}\n  A(const A& a) {\n    std::cout << \"Copy construct A\" << std::endl;\n  }\n};\nstruct B {\n  B() {}\n  B(const B& a) {\n    std::cout << \"Copy construct B\" << std::endl;\n  }\n};\nclass C {\n  A a;\n  B b;\n  // The copy constructor is implicitly generated\n};\nint main() {\n  C first;\n  C second(first);\n  // Prints: \"Copy construct A\", \"Copy construct B\"\n}\n```", "```cpp\nclass class_name {\n  public:\n    class_name& operator= (const class_name & other) {\n      member = other.member;\n    }\n  private:\n    type member;\n};\n```", "```cpp\nclass class_name {\n  public:\n    class_name(const class_name& other) : member(other.member){\n      std::cout << \"Copy constructor called!\" << std::endl;\n    }\n    class_name& operator= (const class_name & other) {\n      member = other.member;\n      std::cout << \"Copy assignment operator called!\" << std::endl;\n    }\n  private:\n    type member;\n};\n```", "```cpp\nclass_name obj;\nclass_name other_obj1(obj);\n\\\\ prints \"Copy constructor called!\"\nclass_name other_obj2 = obj;\n\\\\ prints \"Copy assignment operator called!\"\n```", "```cpp\nclass_name (class_name && other);\n// move-constructor\nclass_name& operator= (class_name && other);\n// move-assignment\n```", "```cpp\nclass WrongMove {\n  public:\n    WrongMove() : _resource(acquire_resource()) {}\n    WrongMove(WrongMove&& other) {\n      _resource = other._resource;\n      // Wrong: we never reset other._resource\n    }\n    ~WrongMove() {\n      if (not is_reset_resource(_resource)) {\n        release_resource(_resource);\n      }\n    }\n  private:\n    Resource _resource;\n}\n```", "```cpp\n{\n  WrongMove first;\n  // Acquires the resource\n  {\n  /* Call the move constructor: we copy the resource to second, but we are not resetting it in first */\n    WrongMove second(std::move(first)); \n  }\n  /* Second is destroyed: second._resource is released here. Since we copied the resource, now first._resource has been released as well. */\n}\n// First is destroyed: the same resource is released again! Error!\n```", "```cpp\nWrongMove(WrongMove&& other) {\n  _resource = other._resource;\n  other._resource = resetted_resource();\n}\n```", "```cpp\nstruct MovableClass {\n  MovableClass(MovableClass&& other) {\n    std::cout << \"Move construct\" << std::endl;\n  }\n  MovableClass& operator=(MovableClass&& other) {\n    std::cout << \"Move assign\" << std::endl;\n  }\n};\nMovableClass first;\n// Move construct\nMovableClass second = std::move(first);\n// Or: MovableClass second(std::move(first));\nMovableClass third;\n// Move assignment\nsecond = std::move(third);\n```", "```cpp\nclass Rectangle {\n  int length;\n  int width;\n  // Prevent generating the implicit move constructor\n  Rectangle(Rectangle&& other) = delete;\n  // Prevent generating the implicit move assignment\n  Rectangle& operator=(Rectangle&& other) = delete;\n};\n```", "```cpp\nclass Point\n{\n  Point operator+(const Point &other) \n  {\n    Point new_point;\n    new_point.x = x + other.x; \n    new_point.y = y + other.y;\n    return new_point;\n  }\n  private:\n    int x;\n    int y;\n}\n```", "```cpp\nPoint first;\nPoint second;\nPoint sum = first + second;\n```", "```cpp\nPoint sum = first.operator+(second);\n```", "```cpp\nclass ClassOverloadingNotOperator {\n  public:\n    bool condition = false;\n\n    ClassOverloadingNotOperator& operator!() {\n      condition = !condition;\n    }\n};\n```", "```cpp\nClassOverloadingNotOperator object;\n!object;\n```", "```cpp\nClassOverloadingNotOperator object;\nobject.operator!();\n```", "```cpp\nclass class_name {\n  public:\n    type operator()(type arg) {} \n};\n```", "```cpp\nclass_name obj;\ntype t;\n/* obj is an instance of a class with the call operator: it can be used as if it was a function */\nobj(t);\n```", "```cpp\nclass logger{\n  public:\n    void operator()(const std::string &s) {\n       std::cout << s << std::endl;\n    }\n};\nlogger log;\nlog (\"Hello world!\");\nlog(\"Keep learning C++\");\n```", "```cpp\n    class AddX {\n       public:\n          explicit AddX(int v) : value(v) {}\n          int operator()(int other_value) {\n       Indent it to the right, same as above\n    }\n       private:\n         int value;\n    };\n    AddX add_five(5);\n    std::cout << add_five(4) << std::endl; // prints 9\n    ```"]