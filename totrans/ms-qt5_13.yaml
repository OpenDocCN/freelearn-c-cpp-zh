- en: Chapter 13.  All Packed and Ready to Deploy
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 13 章。全部打包，准备部署
- en: In the previous chapter, you learned to create a robust application with unit
    tests. The final step for an application is packaging. The Qt framework enables
    you to develop cross-platform applications but packaging is really a platform-specific
    task. Moreover, when your application is ready to be shipped, you need a one-step
    procedure to generate and pack your application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，您学习了如何创建具有单元测试的健壮应用程序。应用程序的最终步骤是打包。Qt 框架使您能够开发跨平台应用程序，但打包实际上是一个特定于平台的任务。此外，当您的应用程序准备发货时，您需要一个一步到位的流程来生成和打包您的应用程序。
- en: In this chapter, we will reuse the gallery application (both on desktop and
    mobile platforms) to learn the steps required to package a Qt application. There
    are many ways to prepare the packaging of an application. In this chapter, we
    want to package the gallery application, from [Chapters 4](part0040.xhtml#aid-164MG2
    "Chapter 4.  Conquering the Desktop UI"), *Conquering the Desktop UI*, and [Chapter
    5](part0048.xhtml#aid-1DOR02 "Chapter 5.  Dominating the Mobile UI"), *Dominating
    the Mobile UI*, on the supported platforms (Windows, Linux, Mac, Android, and
    iOS).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将重用画廊应用程序（包括桌面和移动平台）来学习打包 Qt 应用程序所需的步骤。准备应用程序打包的方法有很多。在本章中，我们想要打包画廊应用程序，从
    [第 4 章](part0040.xhtml#aid-164MG2 "第 4 章。征服桌面 UI")，*征服桌面 UI* 和 [第 5 章](part0048.xhtml#aid-1DOR02
    "第 5 章。主宰移动 UI")，*主宰移动 UI* 在支持的平台上（Windows、Linux、Mac、Android 和 iOS）。
- en: 'Here are the topics covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了以下主题：
- en: Packaging a Qt application on Windows
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Windows 上打包 Qt 应用程序
- en: Packaging a Qt application on Linux
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Linux 上打包 Qt 应用程序
- en: Packaging a Qt application on Mac
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Mac 上打包 Qt 应用程序
- en: Packaging a Qt application on Android
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Android 上打包 Qt 应用程序
- en: Packaging a Qt application on iOS
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 iOS 上打包 Qt 应用程序
- en: Packaging your application
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打包您的应用程序
- en: You will create, for each platform, a dedicated script to perform all the tasks
    required to build a standalone application. Depending on the OS type, the packaged
    application will be `gallery-desktop` or `gallery-mobile`. Because the whole gallery
    project has to be compiled, it also has to include `gallery-core`. Therefore,
    we will create a parent project with `gallery-core`, `gallery-desktop`, and `gallery-mobile`.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 您将为每个平台创建一个专门的脚本，以执行构建独立应用程序所需的所有任务。根据操作系统类型，打包的应用程序将是 `gallery-desktop` 或 `gallery-mobile`。因为整个画廊项目必须编译，所以它还必须包含
    `gallery-core`。因此，我们将创建一个包含 `gallery-core`、`gallery-desktop` 和 `gallery-mobile`
    的父项目。
- en: 'For each platform, we will prepare the project to be packaged and create a
    specific script. All the scripts follow the same workflow:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个平台，我们将准备要打包的项目并创建一个特定的脚本。所有脚本遵循相同的流程：
- en: Set the input and output directories.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置输入和输出目录。
- en: Create Makefiles with `qmake`.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `qmake` 创建 Makefiles。
- en: Build the project.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建项目。
- en: Regroup only the necessary files in the output directory.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仅在输出目录中重新组合必要的文件。
- en: Package the application with platform-specific tasks.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用平台特定的任务打包应用程序。
- en: Store the packed application in the output directory.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将打包的应用程序存储在输出目录中。
- en: These scripts could run on a developer computer or on a continuous integration
    server running software such as Jenkins as long as the packaging computer OS matches
    the script target OS (except for the mobile platforms). In other words, you need
    to run the Windows script on a computer that runs Windows to be able to package
    a Qt application for Windows.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这些脚本可以在开发计算机或运行类似 Jenkins 等软件的持续集成服务器上运行，只要打包计算机的操作系统与脚本目标操作系统相匹配（除了移动平台）。换句话说，您需要在运行
    Windows 的计算机上运行 Windows 脚本，才能为 Windows 打包 Qt 应用程序。
- en: Technically, you can perform cross-compilation (given the appropriate toolchain
    and libraries), but this is beyond the scope of this book. It is easy to cross-compile
    for a RaspberryPI when you are on Linux, but the same cannot be said when you
    want to compile for MacOS and you are on Windows.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 技术上，您可以进行交叉编译（给定适当的工具链和库），但这超出了本书的范围。当您在 Linux 上交叉编译 RaspberryPI 时，这很容易，但当您想在
    Windows 上编译 MacOS 时，情况就不同了。
- en: Note
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: From Linux, you can cross-compile Qt for Windows with tools such as MXE at [http://mxe.cc/](http://mxe.cc/).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Linux，您可以使用 MXE 等工具在 [http://mxe.cc/](http://mxe.cc/) 上交叉编译 Qt。
- en: 'Create a new subdir project named `ch13-gallery-packaging` with the following
    hierarchy:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为 `ch13-gallery-packaging` 的新子目录项目，具有以下层次结构：
- en: '`ch13-gallery-packaging`:'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ch13-gallery-packaging`:'
- en: '`gallery-core`'
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gallery-core`'
- en: '`gallery-desktop`'
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gallery-desktop`'
- en: '`gallery-mobile`'
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gallery-mobile`'
- en: 'Even if you are now an expert on Qt subdirs projects, here is the `ch13-gallery-packaging.pro`
    file:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 即使您现在是 Qt 子目录项目的专家，这里也有 `ch13-gallery-packaging.pro` 文件：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You are now ready to work through any of the following sections, depending on
    the platform you are targeting.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以开始处理以下任何部分，具体取决于您要针对的平台。
- en: Packaging for Windows
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Windows 的打包
- en: To package a standalone application on Windows, you need to provide all the
    dependencies of your executable. The `gallery-core.dll` file, the Qt libraries
    (for example, `Qt5Core.dll`), and compiler-specific libraries (for example, `libstdc++-6.dll`)
    are some examples of dependencies required by our executable. If you forget to
    provide a library, an error will be displayed when you run the `gallery-desktop.exe`
    program.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Windows 上打包独立应用程序，您需要提供可执行文件的所有依赖项。`gallery-core.dll` 文件、Qt 库（例如，`Qt5Core.dll`）和特定编译器的库（例如，`libstdc++-6.dll`）是我们可执行文件所需的一些依赖项示例。如果您忘记提供库，则在运行
    `gallery-desktop.exe` 程序时将显示错误。
- en: Note
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: On Windows, you can use the utility Dependency Walker (`depends`). It will give
    you a list of all libraries required by your application. You can download it
    here: [www.dependencywalker.com](http://www.dependencywalker.com).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 上，您可以使用实用工具依赖关系查看器 (`depends`)。它将为您提供应用程序所需的所有库的列表。您可以从这里下载：[www.dependencywalker.com](http://www.dependencywalker.com)。
- en: For this section, we will create a script to build the project via the command
    line interface. Then we will use the Qt tool `windeployqt` to gather all dependencies
    required by our application. This example is for a MinGW compiler but you can
    easily adapt it for a MSVC compiler.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本节，我们将创建一个脚本，通过命令行界面构建项目。然后我们将使用 Qt 工具 `windeployqt` 收集应用程序所需的所有依赖项。此示例适用于
    MinGW 编译器，但您可以轻松地将其适应 MSVC 编译器。
- en: 'Here is a list of required files and folders gathered by `winqtdeploy`, to
    properly run `gallery-desktop` on Windows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 `winqtdeploy` 收集的所需文件和文件夹列表，以便在 Windows 上正确运行 `gallery-desktop`：
- en: '`iconengines`:'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`iconengines`:'
- en: '`qsvgicon.dll`'
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`qsvgicon.dll`'
- en: '`imageformats`:'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`imageformats`:'
- en: '`qjpeg.dll`'
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`qjpeg.dll`'
- en: '`qwbmp.dll`'
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`qwbmp.dll`'
- en: '`...`'
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`...`'
- en: '`Platforms`:'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Platforms`:'
- en: '`qwindows.dll`'
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`qwindows.dll`'
- en: '`translations`:'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`translations`:'
- en: '`qt_en.qm`'
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`qt_en.qm`'
- en: '`qt_fr.qm`'
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`qt_fr.qm`'
- en: '`...`'
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`...`'
- en: '`D3Dcompiler_47.dll`'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`D3Dcompiler_47.dll`'
- en: '`gallery-core.dll`'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gallery-core.dll`'
- en: '`gallery-desktop.exe`'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gallery-desktop.exe`'
- en: '`libEGL.dll`'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`libEGL.dll`'
- en: '`libgcc_s_dw2-1.dll`'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`libgcc_s_dw2-1.dll`'
- en: '`libGLESV2.dll`'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`libGLESV2.dll`'
- en: '`libstdc++-6.dll`'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`libstdc++-6.dll`'
- en: '`libwinpthread-1.dll`'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`libwinpthread-1.dll`'
- en: '`opengl32sw.dll`'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`opengl32sw.dll`'
- en: '`Qt5Core.dll`'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Qt5Core.dll`'
- en: '`Qt5Gui.dll`'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Qt5Gui.dll`'
- en: '`Qt5Svg.dll`'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Qt5Svg.dll`'
- en: '`Qt5Widgets.dll`'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Qt5Widgets.dll`'
- en: 'Check that your environment variables are correctly set:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 检查您的环境变量是否设置正确：
- en: '![Packaging for Windows](img/image00446.jpeg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![Windows 的打包](img/image00446.jpeg)'
- en: 'Create a file, `package-windows.bat`, in the `scripts` directory:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `scripts` 目录中创建一个名为 `package-windows.bat` 的文件：
- en: '[PRE1]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Let''s talk about the steps performed:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论一下执行步骤：
- en: Set the main path variables. The output directory is `DIST_DIR`. All files are
    generated in the `dist/desktop-windows/build` directory.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置主路径变量。输出目录是 `DIST_DIR`。所有文件都在 `dist/desktop-windows/build` 目录中生成。
- en: Create all directories and launch `dist/desktop-windows/build`.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建所有目录并启动 `dist/desktop-windows/build`。
- en: Execute `qmake` in release mode for the Win32 platform to generate the parent
    project `Makefile`. The spec `win32-g++` is for the MinGW compiler. You should
    use the spec `win32-msvc` if you want to use the MSVC compiler.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Win32 平台上以发布模式执行 `qmake` 以生成父项目 `Makefile`。`win32-g++` 规范适用于 MinGW 编译器。如果您想使用
    MSVC 编译器，应使用 `win32-msvc` 规范。
- en: Run the `mingw32-make qmake_all` command to generate the sub-project Makefiles.
    With an MSVC compiler you must replace `mingw32-make` with `nmake` or `jom`.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `mingw32-make qmake_all` 命令以生成子项目的 Makefile。如果您使用 MSVC 编译器，必须将 `mingw32-make`
    替换为 `nmake` 或 `jom`。
- en: Perform the `mingw32-make` commands to build each required sub-project.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行 `mingw32-make` 命令以构建每个所需的子项目。
- en: Copy the generated files, `gallery-desktop.exe` and `gallery-core.dll,` into
    the `gallery` directory.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将生成的文件 `gallery-desktop.exe` 和 `gallery-core.dll` 复制到 `gallery` 目录。
- en: Call the Qt tool, `windeployqt`, on both files and copy all required dependencies
    (for example, `Qt5Core.dll`, `Qt5Sql.dll`,  `libstdc++-6.dll`, `qwindows.dll`,
    and so on).
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在两个文件上调用 Qt 工具 `windeployqt` 并复制所有必需的依赖项（例如，`Qt5Core.dll`、`Qt5Sql.dll`、`libstdc++-6.dll`、`qwindows.dll`
    等）。
- en: Packaging for Linux with a distribution package
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用发行版包的 Linux 打包
- en: 'Packaging an application for a Linux distribution is a bumpy road. Because
    each distribution can have its own packaging format (`.deb`, `.rpm`, and so on),
    the first question to answer is: which distribution do you wish to target? Covering
    every major packaging format would take several chapters. Even detailing a single
    distribution could be unfair (you wanted to package for RHEL? Too bad, we only
    covered Arch Linux!). After all, from a Qt application developer perspective,
    what you want is to ship your product to your users, you do not (yet) aim to become
    an official Debian repository maintainer.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 为 Linux 发行版打包应用程序是一条坎坷的道路。因为每个发行版都可以有自己的打包格式（`.deb`、`.rpm` 等），首先要回答的问题是：你希望针对哪个发行版？涵盖每一个主要的打包格式需要几章内容。甚至详细说明一个单一的发行版也可能是不公平的（你想要为
    RHEL 打包？很遗憾，我们只覆盖了 Arch Linux！）。毕竟，从 Qt 应用程序开发者的角度来看，你想要的是将你的产品发送给你的用户，你（目前）并不打算成为官方
    Debian 仓库维护者。
- en: Having all this in mind, we decided to focus on a tool that packages the application
    for you for each distribution. That is right, you do not need to learn the internals
    of Debian or Red Hat! We will still explain the common principles in the packaging
    systems without excessive detail.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到所有这些，我们决定专注于一个为你为每个分发打包应用程序的工具。没错，你不需要学习 Debian 或 Red Hat 的内部结构！我们仍然会解释打包系统中的共同原则，而不会过度详细。
- en: For our purpose, we will demonstrate how a packaging can be done using the `.deb`
    format on an Ubuntu machine, but as you will see it can be easily updated to generate
    a `.rpm`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的目的，我们将演示如何在 Ubuntu 机器上使用 `.deb` 格式进行打包，但正如你将看到的，它可以很容易地更新以生成 `.rpm`。
- en: The tool we are going to use is named `fpm` (**eFfing Package Management**).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要使用的工具名为 `fpm`（**eFfing Package Management**）。
- en: Note
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `fpm` tool is available at [https://github.com/jordansissel/fpm](https://github.com/jordansissel/fpm).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`fpm` 工具可在 [https://github.com/jordansissel/fpm](https://github.com/jordansissel/fpm)
    获取。'
- en: 'The `fpm` tool is a Ruby application that aims to do exactly what we need:
    take care of the distribution-specific details and generate the final package.
    First, take the time to install `fpm` on your machine and make sure that it is
    working.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`fpm` 工具是一个 Ruby 应用程序，旨在完成我们需要的任务：处理特定于分发的细节并生成最终的包。首先，花时间在你的机器上安装 `fpm` 并确保它正在运行。'
- en: In a nutshell, a Linux package is a file format that contains all the files
    you want to deploy with a lot of metadata. It can contain description of the content,
    a changelog, a license file, the list of dependencies, checksums, pre- and post-installation
    triggers, and much, much more.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，Linux 打包是一种文件格式，它包含了你想要部署的所有文件以及大量的元数据。它可以包含内容的描述、变更日志、许可文件、依赖项列表、校验和、安装前和安装后触发器等等。
- en: Note
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you want to learn how to package a Debian binary by hand, go to [http://tldp.org/HOWTO/html_single/Debian-Binary-Package-Building-HOWTO/](http://tldp.org/HOWTO/html_single/Debian-Binary-Package-Building-HOWTO/).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要学习如何手动打包 Debian 二进制文件，请访问 [http://tldp.org/HOWTO/html_single/Debian-Binary-Package-Building-HOWTO/](http://tldp.org/HOWTO/html_single/Debian-Binary-Package-Building-HOWTO/)。
- en: 'In our case, we still have to do some project preparation to let `fpm` do its
    job. The files we want to deploy have to match the target filesystem. Here is
    how the deployment should look:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，我们仍然需要进行一些项目准备，以便 `fpm` 执行其工作。我们想要部署的文件必须与目标文件系统相匹配。以下是部署应该看起来像这样：
- en: '`gallery-desktop`: This binary should be deployed in `/usr/bin`'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gallery-desktop`：这个二进制文件应该部署在 `/usr/bin`'
- en: '`libgallery-core.so`: This should be deployed in `/usr/lib`'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`libgallery-core.so`：这个文件应该部署在 `/usr/lib`'
- en: 'To achieve this, we are going to organize our outputs in `dist/desktop-linux`
    like so:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，我们将按照以下方式在 `dist/desktop-linux` 中组织我们的输出：
- en: The `build` directory will contain the compiled project (it is our release shadow
    build)
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`build` 目录将包含编译后的项目（这是我们发布的影子构建）'
- en: The `root` directory will contain the to-be-packaged files, meaning the binary
    and library files in the proper hierarchy (`usr/bin` and `usr/lib`)
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`root` 目录将包含待打包的文件，即二进制文件和库文件在适当的层次结构中（`usr/bin` 和 `usr/lib`）。'
- en: To generate the root directories, we will rely on Qt and the power of the `.pro`
    files. When compiling a Qt project, the target files are already tracked. All
    we have to do is to add an additional install target for `gallery-core` and `gallery-desktop`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 为了生成根目录，我们将依赖 Qt 和 `.pro` 文件的力量。当编译 Qt 项目时，目标文件已经跟踪。我们只需要为 `gallery-core` 和
    `gallery-desktop` 添加一个额外的安装目标。
- en: 'Add the following scope in `gallery-core/gallery-core.pro`:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `gallery-core/gallery-core.pro` 中添加以下作用域：
- en: '[PRE2]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here we define a new `target.path` that is going to deploy the `DISTFILES` (the `.so`
    files) to our desired root tree. Note the use of `$$_PRO_FILE_PWD_`, which points
    to the directory where the current `.pro` file is stored.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们定义了一个新的 `target.path`，它将部署 `DISTFILES`（`.so` 文件）到我们期望的根目录。注意使用 `$$_PRO_FILE_PWD_`，它指向当前
    `.pro` 文件存储的目录。
- en: 'Almost the same procedure is carried out in `gallery-desktop/gallery-desktop.pro`:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `gallery-desktop/gallery-desktop.pro` 中执行几乎相同的程序：
- en: '[PRE3]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: With these lines, when we call make install, the files are going to be deployed
    in `dist/desktop-linux/root/...`.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些行，当我们调用 make install 时，文件将被部署到 `dist/desktop-linux/root/...`。
- en: 'Now that the project configuration is completed, we can switch to the packaging
    script. We will cover the script in two parts:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在项目配置已完成，我们可以切换到打包脚本。我们将分两部分介绍脚本：
- en: Project compilation and `root` preparation
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目编译和 `root` 准备
- en: The `.deb` package generation with `fpm`
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `fpm` 生成 `.deb` 软件包
- en: 'First, check that your environment variables are correctly set:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，检查你的环境变量是否设置正确：
- en: '![Packaging for Linux with a distribution package](img/image00447.jpeg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![使用发行版包对 Linux 进行打包](img/image00447.jpeg)'
- en: 'Create `scripts/package-linux-deb.sh` with the following content:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下内容创建 `scripts/package-linux-deb.sh`：
- en: '[PRE4]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let''s break this down:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解一下：
- en: Set the main path variables. The output directory is `DIST_DIR`. All files are
    generated in the `dist/desktop-linux/build` folder.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置主路径变量。输出目录是 `DIST_DIR`。所有文件都在 `dist/desktop-linux/build` 文件夹中生成。
- en: Create all the directories and launch `dist/desktop-linux/build`.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建所有目录并启动 `dist/desktop-linux/build`。
- en: Execute `qmake` in release mode for the Linux platform to generate the parent
    project `Makefile`.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Linux 平台上以发布模式执行 `qmake` 以生成父项目 `Makefile`。
- en: Run the `make qmake_all` command to generate the sub-projects Makefiles.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行 `make qmake_all` 命令以生成子项目的 Makefile。
- en: Perform the `make` commands to build each required sub-project.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行 `make` 命令来构建每个所需的子项目。
- en: Use the `make install` command to deploy the binary and the libraries to the `dist/desktop-linux/root`
    directory.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `make install` 命令将二进制文件和库部署到 `dist/desktop-linux/root` 目录。
- en: 'If you execute `scripts/package-linux-deb.sh`, the final file tree in `dist/desktop-linux`
    looks like this:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你执行 `scripts/package-linux-deb.sh`，`dist/desktop-linux` 中的最终文件树看起来像这样：
- en: '`build/`'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`build/`'
- en: '`gallery-core/*.o`'
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gallery-core/*.o`'
- en: '`gallery-desktop/*.p`'
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gallery-desktop/*.p`'
- en: '`Makefile`'
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Makefile`'
- en: '`root/`'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`root/`'
- en: '`usr/bin/gallery-desktop`'
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`usr/bin/gallery-desktop`'
- en: '`usr/lib/libgallery-core.so`'
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`usr/lib/libgallery-core.so`'
- en: 'Everything is now ready for `fpm` to work. The final part of `scripts/package-linux-deb.sh`
    contains this:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在一切准备就绪，`fpm` 可以工作了。`scripts/package-linux-deb.sh` 的最后一部分包含以下内容：
- en: '[PRE5]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Most of the arguments are explicit enough. We will focus on the most important
    ones:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数参数都很明确。我们将重点关注最重要的几个：
- en: '`--input-type`: This argument refers to what `fpm` will work with. It can take `deb`, `rpm`, `gem`, `dir`
    and so on and repackage it to another format. Here we use the `dir` option to
    tell `fpm` to use a directory tree as the input source.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--input-type`：此参数表示 `fpm` 将与之交互的内容。它可以接受 `deb`、`rpm`、`gem`、`dir` 等格式，并将其重新包装为另一种格式。在这里，我们使用
    `dir` 选项告诉 `fpm` 使用目录树作为输入源。'
- en: '`--output-type`: This argument refers to the desired output type. Take a look
    at the official documentation to see how many platforms are supported.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--output-type`：此参数表示期望的输出类型。查看官方文档以了解支持多少平台。'
- en: '`--name`: This is the name given to the package (if you want to uninstall it,
    you write `apt-get remove gallery-desktop`).'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--name`：这是分配给软件包的名称（如果你想卸载它，你可以写 `apt-get remove gallery-desktop`）。'
- en: '`--depends`: This argument refers to a library package dependency of the project.
    You can add as many dependencies as you want. In our case, we only depend on `qt5
    -default` and `sqlite3-dev`. This option is very important so be sure that the
    application will be able to run on the target platform. You can specify the version
    of the dependency with `--depends library >= 1.2.3`.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--depends`：此参数表示项目的库包依赖。你可以添加任意多的依赖。在我们的例子中，我们只依赖于 `qt5 -default` 和 `sqlite3-dev`。此选项非常重要，确保应用程序能够在目标平台上运行。你可以使用
    `--depends library >= 1.2.3` 来指定依赖的版本。'
- en: '`--chdir`: This argument refers to the base directory from which `fpm` will
    run. We set it to `dist/desktop-linux/root`, where our file tree is ready to be
    loaded!'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--chdir`：此参数表示 `fpm` 将从中运行的基准目录。我们将其设置为 `dist/desktop-linux/root`，我们的文件树已准备好加载！'
- en: '`--package`: This argument is the name of the final package. The `VERSION`
    and `ARCH` are placeholders that are automatically filled based on your system.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--package`：此参数是最终软件包的名称。`VERSION` 和 `ARCH` 是占位符，将根据您的系统自动填充。'
- en: The rest of the options are purely informative; you can specify a changelog,
    a license file, and much more. Just by changing the `--output-type``deb` to `rpm`,
    the package format is properly updated. The `fpm` tool also provides specific
    package format options, letting you have fine control over what is generated.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 其余的选项纯粹是信息性的；您可以指定一个变更日志、许可文件等等。只需将 `--output-type` 的 `deb` 更改为 `rpm`，软件包格式就会正确更新。`fpm`
    工具还提供了特定的软件包格式选项，让您可以精细控制生成的内容。
- en: 'If you now execute `scripts/package-linux-deb.sh`, you should get a new `dist/desktop-linux/gallery-desktop_1.0.0_amd64.deb`
    file. Try to install it with the commands:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您现在执行 `scripts/package-linux-deb.sh`，应该会得到一个新的 `dist/desktop-linux/gallery-desktop_1.0.0_amd64.deb`
    文件。尝试使用以下命令安装它：
- en: '[PRE6]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The first command deploys the package in your system. You should now have the
    files `/usr/bin/gallery-desktop` and `/usr/lib/libgallery-core.so`.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个命令将在您的系统中部署该软件包。现在您应该拥有文件 `/usr/bin/gallery-desktop` 和 `/usr/lib/libgallery-core.so`。
- en: However, because we installed the package using the `dpkg` command, the dependencies
    are not automatically installed. This would be done if the package was provided
    by a Debian repository (thus, installing the package with `apt-get install gallery-desktop`).
    The missing dependencies are still "marked" and `apt-get install -f` does their
    installation.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，因为我们使用 `dpkg` 命令安装了软件包，所以依赖项并没有自动安装。如果软件包是由 Debian 仓库提供的（因此，使用 `apt-get install
    gallery-desktop` 安装软件包），则会这样做。缺失的依赖项仍然“标记”着，`apt-get install -f` 会安装它们。
- en: 'You can now start `gallery-desktop` from anywhere in your system with the command, `gallery-desktop`.
    When we wrote this chapter in 2016, if you execute it on a "fresh" Ubuntu, you
    might run into the following issue:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以使用命令 `gallery-desktop` 从系统中的任何位置启动 `gallery-desktop`。当我们于 2016 年编写这一章节时，如果在“全新”的
    Ubuntu 上执行它，可能会遇到以下问题：
- en: '[PRE7]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: What happened? We installed the dependencies with `apt-get install -f`! We encounter
    here a major pain point in Linux package management. The dependencies we specify
    in our `.deb` could refer to a specific version of Qt, but the reality is that
    we depend on the package version maintained by the upstream. In other words, each
    time a new version of Qt is released, the distribution maintainers (Ubuntu, Fedora,
    and so on) have to repackage it to make it available in the official repository.
    This can be a long process and the maintainers have a huge number of packages
    to port!
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 发生了什么？我们使用 `apt-get install -f` 安装了依赖项！在这里，我们遇到了 Linux 软件包管理的一个主要痛点。我们在 `.deb`
    文件中指定的依赖项可能指向 Qt 的特定版本，但实际情况是我们依赖于上游维护的软件包版本。换句话说，每当 Qt 发布新版本时，发行版维护者（Ubuntu、Fedora
    等等）必须重新打包它，以便在官方仓库中提供。这可能是一个漫长的过程，维护者需要移植大量的软件包！
- en: 'To be confident about what we are stating, let''s view the library dependencies
    of `gallery-desktop` with an `ldd` command:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保我们所说的内容准确无误，让我们使用 `ldd` 命令查看 `gallery-desktop` 的库依赖项：
- en: '[PRE8]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'As you can see, `libgallery-core.so` is correctly resolved in `/usr/lib` and
    the Qt dependencies too in `/usr/lib/x86_64-linux-gnu`. But what version of Qt
    is used? The answer lies in the details of the libraries:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，`libgallery-core.so` 在 `/usr/lib` 中被正确解析，Qt 的依赖项也在 `/usr/lib/x86_64-linux-gnu`
    中。但使用了哪个版本的 Qt 呢？答案在于库的详细信息：
- en: '[PRE9]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `libQt5Core.so` file is a soft link to `libQt5Core.so.5.5.1`, meaning that
    the system version of Qt is 5.5.1, whereas `gallery-desktop` relies on Qt 5.7\.
    You can configure your system to have the system Qt pointing to your Qt installation
    (done with the Qt installer). However, it is highly improbable that your customer
    will install Qt by hand just to have `gallery-desktop` running.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`libQt5Core.so` 文件是 `libQt5Core.so.5.5.1` 的软链接，这意味着系统版本的 Qt 是 5.5.1，而 `gallery-desktop`
    依赖于 Qt 5.7。您可以配置系统，使系统 Qt 指向您的 Qt 安装（通过 Qt 安装程序完成）。然而，您的客户手动安装 Qt 只为了让 `gallery-desktop`
    运行几乎是不可能的。'
- en: Even worse, for an older version of your distribution, the packages are usually
    not updated at all after some time. Just try to install a Qt 5.7 Debian package
    on Ubuntu 14.04 to understand how complicated things become. We did not even mention
    incompatible dependencies. If we rely on a specific version of `libsqlite3-dev`
    and another application needs another one, things will get ugly, and only one
    can survive.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 更糟糕的是，对于较旧的发行版，经过一段时间后，软件包通常根本不会更新。只需尝试在Ubuntu 14.04上安装Qt 5.7 Debian软件包，就能理解事情变得多么复杂。我们甚至还没有提到不兼容的依赖项。如果我们依赖于特定版本的`libsqlite3-dev`，而另一个应用程序需要另一个版本，事情就会变得很糟糕，只有一个能够幸存。
- en: A Linux package has many advantages if you want it to be available on an official
    repository or if you have specific needs. Using official repositories is a common
    way of installing an application on Linux and your users will not be disoriented.
    If you can restrict your Qt version to the one deployed on the Linux distribution
    that may be a fine solution.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要Linux官方仓库中有这个软件包或者你有特定的需求，一个Linux软件包有很多优点。在Linux上安装应用程序通常使用官方仓库，这样你的用户就不会感到困惑。如果你能将Qt版本限制在Linux发行版上部署的版本，这可能是一个不错的解决方案。
- en: 'Unfortunately, it also brings major headaches: you need to support multiple
    distributions, handle the dependencies without breaking the system, and make sure
    that your application has old enough dependencies, and so on.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，这也带来了巨大的头痛：你需要支持多个发行版，处理依赖关系而不会破坏系统，并确保你的应用程序有足够的旧依赖项，等等。
- en: Do not worry, everything is not lost; smart people are already resolving this
    issue on Linux with self-contained packages. As a matter of fact, we are going
    to cover a self-contained package.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 不要担心，一切还没有失去；聪明的人已经在Linux上通过自包含的软件包来解决这个问题。实际上，我们将要介绍一个自包含的软件包。
- en: Packaging for Linux with AppImage
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用AppImage对Linux进行软件打包
- en: 'On Windows or Mac, an application is self-sufficient: it contains all the dependencies
    it needs to be executed. On the one hand, this creates more file duplication,
    and on the other hand it simplifies packaging for the developer.'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows或Mac上，一个应用程序是自给自足的：它包含执行所需的所有依赖项。一方面，这造成了更多的文件重复，另一方面也简化了开发者的打包工作。
- en: 'Based on this premise, efforts have been made to have the same pattern on Linux
    (as opposed to a repository/distribution-specific package). Today, several solutions
    offer a self-contained package on Linux. We suggest you study one of these solutions:
    AppImage. This particular tool is gaining traction in the Linux community. There
    is a growing number of developers relying on AppImage to package and deploy their
    application.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 基于这个前提，人们已经努力在Linux上实现相同的模式（与特定仓库/发行版的软件包相反）。今天，有几个解决方案在Linux上提供自包含的软件包。我们建议你研究这些解决方案之一：AppImage。这个特定的工具在Linux社区中越来越受欢迎。越来越多的开发者依赖AppImage来打包和部署他们的应用程序。
- en: 'AppImage is a file format that contains an application with all its libraries
    included. You download a single AppImage file, execute it, and you are done: the
    application is running. Behind the scenes, an AppImage is an ISO file on steroids,
    mounted on-the-fly when you execute it. The AppImage file itself is read-only
    and can also run in a sandbox such as Firejail (a SUID sandbox program that reduces
    the risk of security breaches by restricting the running environment of applications).'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: AppImage是一种包含所有库的应用程序的文件格式。你下载一个单一的AppImage文件，执行它，就完成了：应用程序正在运行。幕后，AppImage是一个强化版的ISO文件，在你执行时即时挂载。AppImage文件本身是只读的，也可以在沙盒中运行，例如Firejail（一个SUID沙盒程序，通过限制应用程序的运行环境来降低安全漏洞的风险）。
- en: Note
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: More information on AppImage is available at [http://appimage.org/](http://appimage.org/).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 关于AppImage的更多信息可以在[http://appimage.org/](http://appimage.org/)找到。
- en: 'To package `gallery-desktop` into an AppImage, there are two major steps:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 将`gallery-desktop`打包成AppImage有两个主要步骤：
- en: Gather all the dependencies of `gallery-desktop`.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 收集`gallery-desktop`的所有依赖项。
- en: Package `gallery-desktop` and its dependencies in the AppImage format.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`gallery-desktop`及其依赖项打包成AppImage格式。
- en: 'Fortunately, this whole process can be done by using a nifty tool: `linuxdeployqt`.
    It started as a hobby project and became the official way to package a Qt application
    in the AppImage documentation.'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，整个流程可以通过使用一个巧妙的小工具来完成：`linuxdeployqt`。它最初是一个爱好项目，后来成为了AppImage文档中打包Qt应用程序的官方方法。
- en: Note
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Get `linuxdeployqt` from [https://github.com/probonopd/linuxdeployqt/](https://github.com/probonopd/linuxdeployqt/).
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 从[https://github.com/probonopd/linuxdeployqt/](https://github.com/probonopd/linuxdeployqt/)获取`linuxdeployqt`。
- en: 'The script we are going to write now assumes that the binary `linuxdeployqt`
    is available in your `$PATH` variable. Check that your environment variables are
    correctly set:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要编写的脚本假设二进制文件`linuxdeployqt`在您的`$PATH`变量中可用。请确保您的环境变量设置正确：
- en: '![Packaging for Linux with AppImage](img/image00448.jpeg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![使用AppImage为Linux打包](img/image00448.jpeg)'
- en: 'Create `scripts/package-linux-appimage.sh` and update it like so:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`scripts/package-linux-appimage.sh`并更新如下：
- en: '[PRE10]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The first part is the compilation of the project:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 第一部分是项目的编译：
- en: Set the main path variables. The output directory is `DIST_DIR`. All files are
    generated in the `dist/desktop-linux/build` folder.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置主路径变量。输出目录是`DIST_DIR`。所有文件都在`dist/desktop-linux/build`文件夹中生成。
- en: Create all the directories and go in `dist/desktop-linux/build`.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建所有目录并进入`dist/desktop-linux/build`。
- en: Execute `qmake` in release mode for the Linux platform to generate the parent
    project `Makefile`.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Linux平台上以发布模式执行`qmake`以生成父项目`Makefile`。
- en: Run the `make qmake_all` command to generate the sub-project Makefiles.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`make qmake_all`命令以生成子项目的Makefiles。
- en: Perform the `make` commands to build each required sub-project.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行`make`命令来构建每个所需的子项目。
- en: The second part of the script concerns `linuxdeployqt`. We first have to export
    some paths to let `linuxdeployqt` properly find all the dependencies of `gallery-desktop`
    (Qt libraries and the `gallery-core` library).
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本的第二部分涉及`linuxdeployqt`。我们首先必须导出一些路径，以便`linuxdeployqt`能够正确地找到`gallery-desktop`的所有依赖项（Qt库和`gallery-core`库）。
- en: After that, we execute `linuxdeployqt` by specifying the source binary to work
    with and the target file type (AppImage). The resulting file is a single `gallery-desktop.AppImage`
    ready to be launched on the user's computer without any Qt package installed!
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们通过指定要处理的源二进制文件和目标文件类型（AppImage）来执行`linuxdeployqt`。生成的文件是一个单独的`gallery-desktop.AppImage`，无需安装任何Qt包即可在用户的计算机上启动！
- en: Packaging for Mac OS X
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Mac OS X的打包
- en: 'On OS X, applications are built and run from a bundle: a single directory that
    contains the application binary and all its dependencies. In the Finder, these
    bundles are viewed as `.app` special directories.'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在OS X上，应用程序是通过一个包来构建和运行的：一个包含应用程序二进制文件及其所有依赖项的单个目录。在Finder中，这些包被视为`.app`特殊目录。
- en: When running `gallery-desktop` from Qt Creator, the application is already bundled
    in a `.app` file. Because we are using a custom library, `gallery-core`, this `gallery-desktop.app`
    does not contain all the dependencies and Qt Creator handles it for us.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 当从Qt Creator运行`gallery-desktop`时，应用程序已经打包在一个`.app`文件中。因为我们使用的是自定义库`gallery-core`，所以这个`gallery-desktop.app`不包含所有依赖项，Qt
    Creator会为我们处理。
- en: What we aim to create is a script that completely packages `gallery-desktop`
    (`gallery-core` included) in a `.dmg` file, a Mac OS X disk image file that is
    mounted upon execution and lets the user install the application with ease.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们旨在创建一个脚本，将`gallery-desktop`（包括`gallery-core`）完全打包在一个`.dmg`文件中，这是一个Mac OS X磁盘映像文件，在执行时挂载，并允许用户轻松安装应用程序。
- en: To achieve this, Qt provides the `macdeployqt` tool, which gathers the dependencies
    and creates the `.dmg` file.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，Qt提供了`macdeployqt`工具，它收集依赖项并创建`.dmg`文件。
- en: 'First, check that your environment variables are correctly set:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，检查您的环境变量是否设置正确：
- en: '![Packaging for Mac OS X](img/image00449.jpeg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![使用Mac OS X打包](img/image00449.jpeg)'
- en: 'Create the `scripts/package-macosx.sh` file with the following content:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`scripts/package-macosx.sh`文件，内容如下：
- en: '[PRE11]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We can split the script in two. The first part prepares the application for
    `macdeployqt`:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将脚本分成两部分。第一部分是为`macdeployqt`准备应用程序：
- en: Set the main path variables. The output directory is `DIST_DIR`. All files are
    generated in the `dist/desktop-macosx/build` folder.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置主路径变量。输出目录是`DIST_DIR`。所有文件都在`dist/desktop-macosx/build`文件夹中生成。
- en: Create all the directories and go in `dist/desktop-macosx/build`.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建所有目录并进入`dist/desktop-macosx/build`。
- en: Execute `qmake` in release mode for the Mac OS X platform to generate the parent
    project `Makefile`.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Mac OS X平台上以发布模式执行`qmake`以生成父项目`Makefile`。
- en: Run the `make qmake_all` command to generate the sub-projects Makefiles.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`make qmake_all`命令以生成子项目的Makefiles。
- en: Perform the `make` commands to build each required sub-project.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行`make`命令来构建每个所需的子项目。
- en: 'The following part includes the `gallery-core` library in the generated `gallery-desktop.app`.
    If we do not execute the `cp` command stated in the script and everything that
    comes after it, we might be quite surprised by the `gallery-desktop` binary content.
    Let''s take a look at it by executing the following command:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 以下部分包括在生成的`gallery-desktop.app`中的`gallery-core`库。如果我们不执行脚本中提到的`cp`命令及其之后的内容，我们可能会对`gallery-desktop`的二进制内容感到非常惊讶。让我们通过执行以下命令来查看它：
- en: '[PRE12]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: As you can see, `libgallery-core.1.dylib` is resolved in the local path but
    not in the special dependencies path as is done for `QtWidget` with `@rpath` (namely `Contents/Frameworks/`).
    To mitigate this, `package-macosx.sh` copies the `.dylib` file in `gallery-desktop.app/Contents/Frameworks/`
    and regenerates the dependencies index of the binary with `install_name_tool`.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，`libgallery-core.1.dylib`在本地路径中解析，但不在特殊依赖路径中，就像为`QtWidget`使用`@rpath`（即`Contents/Frameworks/`）那样。为了减轻这种情况，`package-macosx.sh`将`.dylib`文件复制到`gallery-desktop.app/Contents/Frameworks/`，并使用`install_name_tool`重新生成二进制文件的依赖项索引。
- en: Finally, in `package-macosx.sh`, `macdeployqt` is called with the updated `gallery-deskop.app`
    and the target `dmg` format. The resulting `gallery-desktop.dmg` can be deployed
    on your user computer.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在`package-macosx.sh`中，使用更新的`gallery-deskop.app`和目标`dmg`格式调用`macdeployqt`。生成的`gallery-desktop.dmg`可以部署到您的用户计算机上。
- en: Packaging for Android
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android打包
- en: 'The aim of this section is to generate a standalone APK file for the `gallery-mobile`
    application. Packaging and deploying an application for Android require multiple
    steps:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的目标是为`gallery-mobile`应用程序生成一个独立的APK文件。为Android打包和部署应用程序需要多个步骤：
- en: Configure the Android build details.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置Android构建细节。
- en: Generate a keystore and a certificate.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成一个密钥库和一个证书。
- en: Customize the Android manifest from a template.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从模板中自定义Android清单。
- en: Create a script to automate the packaging.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个脚本来自动化打包。
- en: 'You can do most of the tasks directly from Qt Creator. Under the hood, the
    Qt tool, `androiddeployqt`, is called to generate the APK file. Go to **Projects**
    | **Android for armeabi-v7a** | **Build Steps**. You should see a special build
    step: **Build Android APK**. The details look like the following screenshot:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以直接从Qt Creator中完成大多数任务。在底层，Qt工具`androiddeployqt`被调用以生成APK文件。转到**项目** | **armeabi-v7a的Android**
    | **构建步骤**。您应该看到一个特殊的构建步骤：**构建Android APK**。细节如下截图：
- en: '![Packaging for Android](img/image00450.jpeg)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![Android打包](img/image00450.jpeg)'
- en: The first thing to do is to select which Android API level you want to use to
    generate the **Application**. In our case, we selected **android-23** for the
    Android API Level 23\. Try to always build your application with the latest SDK
    version available.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 首件事是选择您想用于生成**应用程序**的Android API级别。在我们的案例中，我们选择了**android-23**作为Android API
    Level 23。尽量始终使用可用的最新SDK版本构建您的应用程序。
- en: 'To publish your application on the Play Store, you must sign the package. To
    be able to update an application, the signature of the current version and the
    new version must be the same. This procedure is a protection to make sure that
    any future versions of the application were really created by you. The first time
    you should create a keystore, the next time you can reuse it with the **Browse...**
    button. For now, click on the **Create...** button on the **Sign package**  |**Keystore**
    line. You will get the following popup:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Play Store上发布您的应用程序，您必须对包进行签名。要能够更新应用程序，当前版本和新版本的签名必须相同。此程序是一个保护措施，以确保任何未来的应用程序版本确实是由您创建的。第一次您应该创建密钥库，下次您可以使用**浏览...**按钮重用它。现在，点击**签名包**
    | **密钥库**行上的**创建...**按钮。您将得到以下弹出窗口：
- en: '![Packaging for Android](img/image00451.jpeg)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![Android打包](img/image00451.jpeg)'
- en: 'Follow these steps to generate a new keystore:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤生成新的密钥库：
- en: The keystore must be protected by a password. Do not forget it or you will not
    be able to use this keystore for a future release.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 密钥库必须通过密码进行保护。不要忘记它，否则你将无法为未来的版本使用此密钥库。
- en: Specify an **Alias name** for the certificate. The default values for **Keysize**
    and **Validity(days)** are fine. You can specify a different password for the
    certificate or use the keystore one.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为证书指定一个**别名名称**。对于**密钥大小**和**有效期（天）**的默认值是合适的。您可以指定不同的密码用于证书或使用密钥库的密码。
- en: In the **Certificate Distinguished Names** group, enter information about you
    and your company.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**证书区分名称**组中，输入有关您和您公司的信息。
- en: Save the keystore file in a safe place.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将密钥库文件保存在安全的地方。
- en: Enter the keystore password to validate its selection for the deployment.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入 keystore 密码以验证其选择用于部署。
- en: 'The next part concerns **Qt deployment**. Indeed, your application needs some
    Qt libraries. Qt supports three kinds of deployment:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个部分是关于 **Qt 部署**。确实，您的应用程序需要一些 Qt 库。Qt 支持三种部署方式：
- en: Create a minimal APK relying on **Ministro** for the Qt dependencies. Ministro
    is an Android application that can be downloaded from the Play Store. It acts
    as a Qt shared libraries installer/provider for all Qt applications on Android.
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个依赖 **Ministro** 的最小 APK，Ministro 是一个可以从 Play Store 下载的 Android 应用程序。它充当
    Android 上所有 Qt 应用程序的 Qt 共享库安装程序/提供者。
- en: Create a standalone **bundle** APK that embeds Qt libraries.
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个嵌入 Qt 库的独立 **bundle** APK。
- en: Create an APK that relies on the fact that the Qt libraries are in a specific
    directory. The libraries are copied into a **temporary directory** during the
    first deployment.
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个依赖于 Qt 库位于特定目录的 APK。在第一次部署期间，库被复制到 **临时目录**。
- en: During the developing and debugging phase, you should select the **temporary
    directory** way to reduce the packaging time. For a deployment, you can use the **Ministro**
    or the **bundle** option. In our case, we chose the standalone bundle to generate
    a complete APK.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发和调试阶段，您应该选择 **临时目录** 方式以减少打包时间。对于部署，您可以使用 **Ministro** 或 **bundle** 选项。在我们的案例中，我们选择了独立的
    bundle 来生成完整的 APK。
- en: 'The **Advanced actions** pane offers three options:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '**高级操作** 面板提供了三个选项：'
- en: '**Use Gradle**: This option generates Gradle wrappers and a script, useful
    if you plan to customize the Java part in an IDE such as Android Studio'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用 Gradle**：此选项生成 Gradle 包装器和脚本，如果您计划在 Android Studio 等 IDE 中自定义 Java 部分，则非常有用。'
- en: '**Open package location after build**: This option opens the directory with
    the packages generated by `androiddeployqt`'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建后打开包位置**：此选项将打开由 `androiddeployqt` 生成的包所在的目录。'
- en: '**Verbose Output**: This option displays additional information about the `androiddeployqt`
    processing'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**详细输出**：此选项显示有关 `androiddeployqt` 处理的附加信息。'
- en: 'The Android build details and signing options are finished. We can now customize
    the Android manifest. Click on **Create Templates**, select the `gallery-mobile.pro`
    file, and click on **Finish**. The wizard creates for you an `android` sub-directory
    with several files; for example, `AndroidManifest.xml`. The `gallery-mobile.pro`
    file has to be updated automatically with these files. However, do not forget
    to add the `android` scope like the following snippet:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: Android 构建细节和签名选项已完成。我们现在可以自定义 Android 清单。点击 **创建模板**，选择 `gallery-mobile.pro`
    文件，然后点击 **完成**。向导为您创建一个包含多个文件的 `android` 子目录；例如，`AndroidManifest.xml`。`gallery-mobile.pro`
    文件必须自动更新这些文件。然而，不要忘记添加 `android` 范围，如下面的代码片段所示：
- en: '[PRE13]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: You can now edit the `AndroidManifest.xml` file. Qt Creator provides a dedicated
    editor. You can also edit it with a plain text editor with caution. You can open
    it from the hierarchical project view: **gallery-mobile** | **Other files** | **android**.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以编辑 `AndroidManifest.xml` 文件。Qt Creator 提供了一个专门的编辑器。您也可以小心地使用纯文本编辑器进行编辑。您可以从分层项目视图打开它：**gallery-mobile**
    | **其他文件** | **android**。
- en: 'Here is our Android manifest in Qt Creator:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我们在 Qt Creator 中的 Android 清单文件：
- en: '![Packaging for Android](img/image00452.jpeg)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![Android 打包](img/image00452.jpeg)'
- en: 'Here are the most important steps:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是最重要的步骤：
- en: Replace the default **Package name** with yours.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将默认的 **包名** 替换为您自己的。
- en: The **Version code** is an integer that must be increased for each official
    release.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**版本代码** 是一个整数，必须为每个官方版本增加。'
- en: The **Version name** is the displayed version for users.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**版本名称** 是用户显示的版本。'
- en: Select the **Minimum required SDK**. Users with an older version will not be
    able to install your application.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **最低要求的 SDK**。使用较旧版本的用户将无法安装您的应用程序。
- en: Select the SDK that will be used to compile your application with the **Target
    SDK.**
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择用于编译应用程序的 **目标 SDK** 将使用的 SDK。
- en: Change the application and activity name.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改应用程序和活动名称。
- en: 'Select an **Application icon** depending on the screen DPI (Dots per Inch).
    From left to right: the low, medium, and high DPI icon.'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据屏幕 DPI（每英寸点数）选择 **应用程序图标**。从左到右：低、中、高 DPI 图标。
- en: Finally, if required by your application, you can add some Android permissions.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，如果您的应用程序需要，您可以添加一些 Android 权限。
- en: You can already build and deploy your signed application from Qt Creator. You
    should see the new application name and icon on your Android phone or emulator.
    However, we will now create a script to easily generate and package the signed
    APK from the command line.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经可以从 Qt Creator 中构建和部署你的签名应用程序。你应该能在你的 Android 手机或模拟器上看到新的应用程序名称和图标。然而，我们现在将创建一个脚本，以便从命令行轻松生成和打包签名
    APK。
- en: 'Several environment variables are required by the Android and Qt tools but
    also for the script itself. Here is a summary with an example:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: Android 和 Qt 工具以及脚本本身需要几个环境变量。以下是一个带有示例的总结：
- en: '![Packaging for Android](img/image00453.jpeg)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![Android打包](img/image00453.jpeg)'
- en: 'This example is a bash script but feel free to adapt it to a `.bat` file if
    you are on Windows. Create a `package-android.sh` file in the `scripts` directory:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子是一个 bash 脚本，但如果你在 Windows 上，请随意将其适配为 `.bat` 文件。在 `scripts` 目录中创建一个 `package-android.sh`
    文件：
- en: '[PRE14]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Let''s analyze this script together:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们一起分析这个脚本：
- en: Set the main path variables. The output directory is `DIST_DIR`. All files are
    generated in the `dist/mobile-android/build` directory. The final signed APK is
    copied in the `dist/mobile-android/apk` directory.
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置主要路径变量。输出目录是 `DIST_DIR`。所有文件都在 `dist/mobile-android/build` 目录中生成。最终的签名 APK
    被复制到 `dist/mobile-android/apk` 目录。
- en: Create all the directories and go in `dist/mobile-android/build`.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建所有目录并进入 `dist/mobile-android/build`。
- en: Execute `qmake` in release mode for the Android platform to generate the parent
    project Makefile.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为 Android 平台执行发布模式的 `qmake` 以生成父项目 Makefile。
- en: Run the `make qmake_all` command to generate the sub-project Makefiles.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行 `make qmake_all` 命令来生成子项目的 Makefiles。
- en: Perform the `make` commands to build each required sub-project.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行 `make` 命令来构建每个所需的子项目。
- en: Run the `make install` command on the `gallery-mobile` directory specifying
    the `INSTALL_ROOT` to copy all binaries and files required by the APK generation.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `gallery-mobile` 目录中运行 `make install` 命令，指定 `INSTALL_ROOT` 以复制 APK 生成所需的全部二进制文件和文件。
- en: 'The final part of the script calls the `androiddeployqt` binary, a Qt tool
    to generate the APK. Take a look at the following options:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本的最后部分调用 `androiddeployqt` 二进制文件，这是一个用于生成 APK 的 Qt 工具。查看以下选项：
- en: The `--deployment` option used here is `bundled` like the mode we used in Qt
    Creator.
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这里使用的 `--deployment` 选项是 `bundled`，就像我们在 Qt Creator 中使用的那样。
- en: 'The `--sign` option requires two parameters: the URL to the keystore file and
    the alias to the key for the certificate.'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--sign` 选项需要两个参数：密钥库文件的 URL 和证书的别名。'
- en: The `--storepass` option is used to specify the keystore password. In our case
    the password is "masteringqt".
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--storepass` 选项用于指定密钥库密码。在我们的例子中，密码是 "masteringqt"。'
- en: Finally, the generated signed APK is copied to the `dist/mobile-android/apk`
    directory with the name `cute-gallery.apk`.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，生成的签名 APK 被复制到 `dist/mobile-android/apk` 目录，文件名为 `cute-gallery.apk`。
- en: Packaging for iOS
  id: totrans-245
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: iOS 打包
- en: Packaging a Qt application for iOS relies on XCode. When you build and run gallery-mobile
    from Qt Creator, XCode will be called under the hood. In the end, an `.xcodeproj`
    file is generated and passed to XCode.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 为 iOS 打包 Qt 应用程序依赖于 XCode。当你从 Qt Creator 中构建和运行 gallery-mobile 时，XCode 将在后台被调用。最后，生成一个
    `.xcodeproj` 文件并将其传递给 XCode。
- en: 'Knowing this, the packaging part will be fairly limited: the only thing than
    can be automated is the generation of the `.xcodeproj`.'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 了解这一点后，打包部分将相当有限：唯一可以自动化的就是 `.xcodeproj` 文件的生成。
- en: 'First, check that your environment variables are correctly set:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，检查你的环境变量是否设置正确：
- en: '![Packaging for iOS](img/image00454.jpeg)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
  zh: '![iOS打包](img/image00454.jpeg)'
- en: 'Create `scripts/package-ios.sh` and add this snippet to it:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 `scripts/package-ios.sh` 并将以下片段添加到其中：
- en: '[PRE15]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The script performs the following steps:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本执行以下步骤：
- en: Set the main path variables. The output directory is `DIST_DIR`. All files are
    generated in the `dist/mobile-ios/build` folder.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置主要路径变量。输出目录是 `DIST_DIR`。所有文件都在 `dist/mobile-ios/build` 文件夹中生成。
- en: Create all the directories and go in `dist/mobile-ios/build`.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建所有目录并进入 `dist/mobile-ios/build`。
- en: Execute `qmake` in release mode for the iPhone device (as opposed to the iPhone
    simulator) platform to generate the parent project `Makefile`.
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为 iPhone 设备（与 iPhone 模拟器平台相对）执行发布模式的 `qmake` 以生成父项目 `Makefile`。
- en: Run the `make qmake_all` command to generate the sub-project Makefiles.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行 `make qmake_all` 命令来生成子项目的 Makefiles。
- en: Perform the `make` command to build each required sub-projects.
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行 `make` 命令来构建每个所需的子项目。
- en: 'Once this script has been executed, `dist/mobile-ios/build/gallery-mobile/gallery-mobile.xcodeproj`
    is ready to be opened in XCode. The remaining steps are entirely done in XCode:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦执行了这个脚本，`dist/mobile-ios/build/gallery-mobile/gallery-mobile.xcodeproj` 就可以打开在XCode中。接下来的步骤完全在XCode中完成：
- en: Open `gallery-mobile.xcodeproj` in XCode.
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在XCode中打开 `gallery-mobile.xcodeproj`。
- en: Compile the application for an iOS device.
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为iOS设备编译应用程序。
- en: Follow the Apple procedure to distribute your application (through the App Store
    or as a standalone file).
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照苹果的流程分发您的应用程序（通过App Store或作为独立文件）。
- en: After that, `gallery-mobile` will be ready for your users!
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，`gallery-mobile` 将为您的用户准备好！
- en: Summary
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Even if your application runs well on your computer, your development environment
    can affect this behavior. Its packaging must be correct to run your application
    on the user's hardware. You learned the steps required to package an application
    before deploying it. Some platforms required specific tasks that must be followed
    carefully. You can now bake a standalone package if your application is running
    a unique script.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 即使您的应用程序在您的电脑上运行良好，您的开发环境也可能影响这种行为。其打包必须正确，以便在用户的硬件上运行您的应用程序。您已经学习了部署应用程序之前所需的打包步骤。某些平台需要遵循特定的任务。如果您的应用程序正在运行独特的脚本，您现在可以制作一个独立的包。
- en: The next chapter describes some tricks that can be useful for developing applications
    with Qt. You will learn some tips concerning Qt Creator.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章描述了一些在开发Qt应用程序时可能有用的技巧。您将学习一些关于Qt Creator的提示。
