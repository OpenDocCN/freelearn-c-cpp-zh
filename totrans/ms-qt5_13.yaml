- en: Chapter 13.  All Packed and Ready to Deploy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you learned to create a robust application with unit
    tests. The final step for an application is packaging. The Qt framework enables
    you to develop cross-platform applications but packaging is really a platform-specific
    task. Moreover, when your application is ready to be shipped, you need a one-step
    procedure to generate and pack your application.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will reuse the gallery application (both on desktop and
    mobile platforms) to learn the steps required to package a Qt application. There
    are many ways to prepare the packaging of an application. In this chapter, we
    want to package the gallery application, from [Chapters 4](part0040.xhtml#aid-164MG2
    "Chapter 4.  Conquering the Desktop UI"), *Conquering the Desktop UI*, and [Chapter
    5](part0048.xhtml#aid-1DOR02 "Chapter 5.  Dominating the Mobile UI"), *Dominating
    the Mobile UI*, on the supported platforms (Windows, Linux, Mac, Android, and
    iOS).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the topics covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Packaging a Qt application on Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Packaging a Qt application on Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Packaging a Qt application on Mac
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Packaging a Qt application on Android
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Packaging a Qt application on iOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Packaging your application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will create, for each platform, a dedicated script to perform all the tasks
    required to build a standalone application. Depending on the OS type, the packaged
    application will be `gallery-desktop` or `gallery-mobile`. Because the whole gallery
    project has to be compiled, it also has to include `gallery-core`. Therefore,
    we will create a parent project with `gallery-core`, `gallery-desktop`, and `gallery-mobile`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For each platform, we will prepare the project to be packaged and create a
    specific script. All the scripts follow the same workflow:'
  prefs: []
  type: TYPE_NORMAL
- en: Set the input and output directories.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create Makefiles with `qmake`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Regroup only the necessary files in the output directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Package the application with platform-specific tasks.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Store the packed application in the output directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: These scripts could run on a developer computer or on a continuous integration
    server running software such as Jenkins as long as the packaging computer OS matches
    the script target OS (except for the mobile platforms). In other words, you need
    to run the Windows script on a computer that runs Windows to be able to package
    a Qt application for Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Technically, you can perform cross-compilation (given the appropriate toolchain
    and libraries), but this is beyond the scope of this book. It is easy to cross-compile
    for a RaspberryPI when you are on Linux, but the same cannot be said when you
    want to compile for MacOS and you are on Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: From Linux, you can cross-compile Qt for Windows with tools such as MXE at [http://mxe.cc/](http://mxe.cc/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new subdir project named `ch13-gallery-packaging` with the following
    hierarchy:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ch13-gallery-packaging`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gallery-core`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gallery-desktop`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gallery-mobile`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Even if you are now an expert on Qt subdirs projects, here is the `ch13-gallery-packaging.pro`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You are now ready to work through any of the following sections, depending on
    the platform you are targeting.
  prefs: []
  type: TYPE_NORMAL
- en: Packaging for Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To package a standalone application on Windows, you need to provide all the
    dependencies of your executable. The `gallery-core.dll` file, the Qt libraries
    (for example, `Qt5Core.dll`), and compiler-specific libraries (for example, `libstdc++-6.dll`)
    are some examples of dependencies required by our executable. If you forget to
    provide a library, an error will be displayed when you run the `gallery-desktop.exe`
    program.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: On Windows, you can use the utility Dependency Walker (`depends`). It will give
    you a list of all libraries required by your application. You can download it
    here: [www.dependencywalker.com](http://www.dependencywalker.com).
  prefs: []
  type: TYPE_NORMAL
- en: For this section, we will create a script to build the project via the command
    line interface. Then we will use the Qt tool `windeployqt` to gather all dependencies
    required by our application. This example is for a MinGW compiler but you can
    easily adapt it for a MSVC compiler.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a list of required files and folders gathered by `winqtdeploy`, to
    properly run `gallery-desktop` on Windows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`iconengines`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`qsvgicon.dll`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`imageformats`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`qjpeg.dll`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`qwbmp.dll`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`...`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Platforms`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`qwindows.dll`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`translations`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`qt_en.qm`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`qt_fr.qm`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`...`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`D3Dcompiler_47.dll`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gallery-core.dll`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gallery-desktop.exe`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`libEGL.dll`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`libgcc_s_dw2-1.dll`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`libGLESV2.dll`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`libstdc++-6.dll`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`libwinpthread-1.dll`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`opengl32sw.dll`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Qt5Core.dll`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Qt5Gui.dll`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Qt5Svg.dll`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Qt5Widgets.dll`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Check that your environment variables are correctly set:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Packaging for Windows](img/image00446.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Create a file, `package-windows.bat`, in the `scripts` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s talk about the steps performed:'
  prefs: []
  type: TYPE_NORMAL
- en: Set the main path variables. The output directory is `DIST_DIR`. All files are
    generated in the `dist/desktop-windows/build` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create all directories and launch `dist/desktop-windows/build`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Execute `qmake` in release mode for the Win32 platform to generate the parent
    project `Makefile`. The spec `win32-g++` is for the MinGW compiler. You should
    use the spec `win32-msvc` if you want to use the MSVC compiler.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `mingw32-make qmake_all` command to generate the sub-project Makefiles.
    With an MSVC compiler you must replace `mingw32-make` with `nmake` or `jom`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Perform the `mingw32-make` commands to build each required sub-project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the generated files, `gallery-desktop.exe` and `gallery-core.dll,` into
    the `gallery` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Call the Qt tool, `windeployqt`, on both files and copy all required dependencies
    (for example, `Qt5Core.dll`, `Qt5Sql.dll`,  `libstdc++-6.dll`, `qwindows.dll`,
    and so on).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Packaging for Linux with a distribution package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Packaging an application for a Linux distribution is a bumpy road. Because
    each distribution can have its own packaging format (`.deb`, `.rpm`, and so on),
    the first question to answer is: which distribution do you wish to target? Covering
    every major packaging format would take several chapters. Even detailing a single
    distribution could be unfair (you wanted to package for RHEL? Too bad, we only
    covered Arch Linux!). After all, from a Qt application developer perspective,
    what you want is to ship your product to your users, you do not (yet) aim to become
    an official Debian repository maintainer.'
  prefs: []
  type: TYPE_NORMAL
- en: Having all this in mind, we decided to focus on a tool that packages the application
    for you for each distribution. That is right, you do not need to learn the internals
    of Debian or Red Hat! We will still explain the common principles in the packaging
    systems without excessive detail.
  prefs: []
  type: TYPE_NORMAL
- en: For our purpose, we will demonstrate how a packaging can be done using the `.deb`
    format on an Ubuntu machine, but as you will see it can be easily updated to generate
    a `.rpm`.
  prefs: []
  type: TYPE_NORMAL
- en: The tool we are going to use is named `fpm` (**eFfing Package Management**).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `fpm` tool is available at [https://github.com/jordansissel/fpm](https://github.com/jordansissel/fpm).
  prefs: []
  type: TYPE_NORMAL
- en: 'The `fpm` tool is a Ruby application that aims to do exactly what we need:
    take care of the distribution-specific details and generate the final package.
    First, take the time to install `fpm` on your machine and make sure that it is
    working.'
  prefs: []
  type: TYPE_NORMAL
- en: In a nutshell, a Linux package is a file format that contains all the files
    you want to deploy with a lot of metadata. It can contain description of the content,
    a changelog, a license file, the list of dependencies, checksums, pre- and post-installation
    triggers, and much, much more.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want to learn how to package a Debian binary by hand, go to [http://tldp.org/HOWTO/html_single/Debian-Binary-Package-Building-HOWTO/](http://tldp.org/HOWTO/html_single/Debian-Binary-Package-Building-HOWTO/).
  prefs: []
  type: TYPE_NORMAL
- en: 'In our case, we still have to do some project preparation to let `fpm` do its
    job. The files we want to deploy have to match the target filesystem. Here is
    how the deployment should look:'
  prefs: []
  type: TYPE_NORMAL
- en: '`gallery-desktop`: This binary should be deployed in `/usr/bin`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`libgallery-core.so`: This should be deployed in `/usr/lib`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To achieve this, we are going to organize our outputs in `dist/desktop-linux`
    like so:'
  prefs: []
  type: TYPE_NORMAL
- en: The `build` directory will contain the compiled project (it is our release shadow
    build)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `root` directory will contain the to-be-packaged files, meaning the binary
    and library files in the proper hierarchy (`usr/bin` and `usr/lib`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To generate the root directories, we will rely on Qt and the power of the `.pro`
    files. When compiling a Qt project, the target files are already tracked. All
    we have to do is to add an additional install target for `gallery-core` and `gallery-desktop`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following scope in `gallery-core/gallery-core.pro`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Here we define a new `target.path` that is going to deploy the `DISTFILES` (the `.so`
    files) to our desired root tree. Note the use of `$$_PRO_FILE_PWD_`, which points
    to the directory where the current `.pro` file is stored.
  prefs: []
  type: TYPE_NORMAL
- en: 'Almost the same procedure is carried out in `gallery-desktop/gallery-desktop.pro`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: With these lines, when we call make install, the files are going to be deployed
    in `dist/desktop-linux/root/...`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that the project configuration is completed, we can switch to the packaging
    script. We will cover the script in two parts:'
  prefs: []
  type: TYPE_NORMAL
- en: Project compilation and `root` preparation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `.deb` package generation with `fpm`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'First, check that your environment variables are correctly set:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Packaging for Linux with a distribution package](img/image00447.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Create `scripts/package-linux-deb.sh` with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s break this down:'
  prefs: []
  type: TYPE_NORMAL
- en: Set the main path variables. The output directory is `DIST_DIR`. All files are
    generated in the `dist/desktop-linux/build` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create all the directories and launch `dist/desktop-linux/build`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Execute `qmake` in release mode for the Linux platform to generate the parent
    project `Makefile`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `make qmake_all` command to generate the sub-projects Makefiles.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Perform the `make` commands to build each required sub-project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `make install` command to deploy the binary and the libraries to the `dist/desktop-linux/root`
    directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you execute `scripts/package-linux-deb.sh`, the final file tree in `dist/desktop-linux`
    looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '`build/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gallery-core/*.o`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gallery-desktop/*.p`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Makefile`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`root/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`usr/bin/gallery-desktop`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`usr/lib/libgallery-core.so`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Everything is now ready for `fpm` to work. The final part of `scripts/package-linux-deb.sh`
    contains this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Most of the arguments are explicit enough. We will focus on the most important
    ones:'
  prefs: []
  type: TYPE_NORMAL
- en: '`--input-type`: This argument refers to what `fpm` will work with. It can take `deb`, `rpm`, `gem`, `dir`
    and so on and repackage it to another format. Here we use the `dir` option to
    tell `fpm` to use a directory tree as the input source.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--output-type`: This argument refers to the desired output type. Take a look
    at the official documentation to see how many platforms are supported.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--name`: This is the name given to the package (if you want to uninstall it,
    you write `apt-get remove gallery-desktop`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--depends`: This argument refers to a library package dependency of the project.
    You can add as many dependencies as you want. In our case, we only depend on `qt5
    -default` and `sqlite3-dev`. This option is very important so be sure that the
    application will be able to run on the target platform. You can specify the version
    of the dependency with `--depends library >= 1.2.3`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--chdir`: This argument refers to the base directory from which `fpm` will
    run. We set it to `dist/desktop-linux/root`, where our file tree is ready to be
    loaded!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--package`: This argument is the name of the final package. The `VERSION`
    and `ARCH` are placeholders that are automatically filled based on your system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The rest of the options are purely informative; you can specify a changelog,
    a license file, and much more. Just by changing the `--output-type``deb` to `rpm`,
    the package format is properly updated. The `fpm` tool also provides specific
    package format options, letting you have fine control over what is generated.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you now execute `scripts/package-linux-deb.sh`, you should get a new `dist/desktop-linux/gallery-desktop_1.0.0_amd64.deb`
    file. Try to install it with the commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The first command deploys the package in your system. You should now have the
    files `/usr/bin/gallery-desktop` and `/usr/lib/libgallery-core.so`.
  prefs: []
  type: TYPE_NORMAL
- en: However, because we installed the package using the `dpkg` command, the dependencies
    are not automatically installed. This would be done if the package was provided
    by a Debian repository (thus, installing the package with `apt-get install gallery-desktop`).
    The missing dependencies are still "marked" and `apt-get install -f` does their
    installation.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can now start `gallery-desktop` from anywhere in your system with the command, `gallery-desktop`.
    When we wrote this chapter in 2016, if you execute it on a "fresh" Ubuntu, you
    might run into the following issue:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: What happened? We installed the dependencies with `apt-get install -f`! We encounter
    here a major pain point in Linux package management. The dependencies we specify
    in our `.deb` could refer to a specific version of Qt, but the reality is that
    we depend on the package version maintained by the upstream. In other words, each
    time a new version of Qt is released, the distribution maintainers (Ubuntu, Fedora,
    and so on) have to repackage it to make it available in the official repository.
    This can be a long process and the maintainers have a huge number of packages
    to port!
  prefs: []
  type: TYPE_NORMAL
- en: 'To be confident about what we are stating, let''s view the library dependencies
    of `gallery-desktop` with an `ldd` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, `libgallery-core.so` is correctly resolved in `/usr/lib` and
    the Qt dependencies too in `/usr/lib/x86_64-linux-gnu`. But what version of Qt
    is used? The answer lies in the details of the libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The `libQt5Core.so` file is a soft link to `libQt5Core.so.5.5.1`, meaning that
    the system version of Qt is 5.5.1, whereas `gallery-desktop` relies on Qt 5.7\.
    You can configure your system to have the system Qt pointing to your Qt installation
    (done with the Qt installer). However, it is highly improbable that your customer
    will install Qt by hand just to have `gallery-desktop` running.
  prefs: []
  type: TYPE_NORMAL
- en: Even worse, for an older version of your distribution, the packages are usually
    not updated at all after some time. Just try to install a Qt 5.7 Debian package
    on Ubuntu 14.04 to understand how complicated things become. We did not even mention
    incompatible dependencies. If we rely on a specific version of `libsqlite3-dev`
    and another application needs another one, things will get ugly, and only one
    can survive.
  prefs: []
  type: TYPE_NORMAL
- en: A Linux package has many advantages if you want it to be available on an official
    repository or if you have specific needs. Using official repositories is a common
    way of installing an application on Linux and your users will not be disoriented.
    If you can restrict your Qt version to the one deployed on the Linux distribution
    that may be a fine solution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Unfortunately, it also brings major headaches: you need to support multiple
    distributions, handle the dependencies without breaking the system, and make sure
    that your application has old enough dependencies, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: Do not worry, everything is not lost; smart people are already resolving this
    issue on Linux with self-contained packages. As a matter of fact, we are going
    to cover a self-contained package.
  prefs: []
  type: TYPE_NORMAL
- en: Packaging for Linux with AppImage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'On Windows or Mac, an application is self-sufficient: it contains all the dependencies
    it needs to be executed. On the one hand, this creates more file duplication,
    and on the other hand it simplifies packaging for the developer.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Based on this premise, efforts have been made to have the same pattern on Linux
    (as opposed to a repository/distribution-specific package). Today, several solutions
    offer a self-contained package on Linux. We suggest you study one of these solutions:
    AppImage. This particular tool is gaining traction in the Linux community. There
    is a growing number of developers relying on AppImage to package and deploy their
    application.'
  prefs: []
  type: TYPE_NORMAL
- en: 'AppImage is a file format that contains an application with all its libraries
    included. You download a single AppImage file, execute it, and you are done: the
    application is running. Behind the scenes, an AppImage is an ISO file on steroids,
    mounted on-the-fly when you execute it. The AppImage file itself is read-only
    and can also run in a sandbox such as Firejail (a SUID sandbox program that reduces
    the risk of security breaches by restricting the running environment of applications).'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: More information on AppImage is available at [http://appimage.org/](http://appimage.org/).
  prefs: []
  type: TYPE_NORMAL
- en: 'To package `gallery-desktop` into an AppImage, there are two major steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Gather all the dependencies of `gallery-desktop`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Package `gallery-desktop` and its dependencies in the AppImage format.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Fortunately, this whole process can be done by using a nifty tool: `linuxdeployqt`.
    It started as a hobby project and became the official way to package a Qt application
    in the AppImage documentation.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Get `linuxdeployqt` from [https://github.com/probonopd/linuxdeployqt/](https://github.com/probonopd/linuxdeployqt/).
  prefs: []
  type: TYPE_NORMAL
- en: 'The script we are going to write now assumes that the binary `linuxdeployqt`
    is available in your `$PATH` variable. Check that your environment variables are
    correctly set:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Packaging for Linux with AppImage](img/image00448.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Create `scripts/package-linux-appimage.sh` and update it like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The first part is the compilation of the project:'
  prefs: []
  type: TYPE_NORMAL
- en: Set the main path variables. The output directory is `DIST_DIR`. All files are
    generated in the `dist/desktop-linux/build` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create all the directories and go in `dist/desktop-linux/build`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Execute `qmake` in release mode for the Linux platform to generate the parent
    project `Makefile`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `make qmake_all` command to generate the sub-project Makefiles.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Perform the `make` commands to build each required sub-project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The second part of the script concerns `linuxdeployqt`. We first have to export
    some paths to let `linuxdeployqt` properly find all the dependencies of `gallery-desktop`
    (Qt libraries and the `gallery-core` library).
  prefs: []
  type: TYPE_NORMAL
- en: After that, we execute `linuxdeployqt` by specifying the source binary to work
    with and the target file type (AppImage). The resulting file is a single `gallery-desktop.AppImage`
    ready to be launched on the user's computer without any Qt package installed!
  prefs: []
  type: TYPE_NORMAL
- en: Packaging for Mac OS X
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'On OS X, applications are built and run from a bundle: a single directory that
    contains the application binary and all its dependencies. In the Finder, these
    bundles are viewed as `.app` special directories.'
  prefs: []
  type: TYPE_NORMAL
- en: When running `gallery-desktop` from Qt Creator, the application is already bundled
    in a `.app` file. Because we are using a custom library, `gallery-core`, this `gallery-desktop.app`
    does not contain all the dependencies and Qt Creator handles it for us.
  prefs: []
  type: TYPE_NORMAL
- en: What we aim to create is a script that completely packages `gallery-desktop`
    (`gallery-core` included) in a `.dmg` file, a Mac OS X disk image file that is
    mounted upon execution and lets the user install the application with ease.
  prefs: []
  type: TYPE_NORMAL
- en: To achieve this, Qt provides the `macdeployqt` tool, which gathers the dependencies
    and creates the `.dmg` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, check that your environment variables are correctly set:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Packaging for Mac OS X](img/image00449.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Create the `scripts/package-macosx.sh` file with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We can split the script in two. The first part prepares the application for
    `macdeployqt`:'
  prefs: []
  type: TYPE_NORMAL
- en: Set the main path variables. The output directory is `DIST_DIR`. All files are
    generated in the `dist/desktop-macosx/build` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create all the directories and go in `dist/desktop-macosx/build`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Execute `qmake` in release mode for the Mac OS X platform to generate the parent
    project `Makefile`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `make qmake_all` command to generate the sub-projects Makefiles.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Perform the `make` commands to build each required sub-project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following part includes the `gallery-core` library in the generated `gallery-desktop.app`.
    If we do not execute the `cp` command stated in the script and everything that
    comes after it, we might be quite surprised by the `gallery-desktop` binary content.
    Let''s take a look at it by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, `libgallery-core.1.dylib` is resolved in the local path but
    not in the special dependencies path as is done for `QtWidget` with `@rpath` (namely `Contents/Frameworks/`).
    To mitigate this, `package-macosx.sh` copies the `.dylib` file in `gallery-desktop.app/Contents/Frameworks/`
    and regenerates the dependencies index of the binary with `install_name_tool`.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, in `package-macosx.sh`, `macdeployqt` is called with the updated `gallery-deskop.app`
    and the target `dmg` format. The resulting `gallery-desktop.dmg` can be deployed
    on your user computer.
  prefs: []
  type: TYPE_NORMAL
- en: Packaging for Android
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The aim of this section is to generate a standalone APK file for the `gallery-mobile`
    application. Packaging and deploying an application for Android require multiple
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Configure the Android build details.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Generate a keystore and a certificate.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Customize the Android manifest from a template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a script to automate the packaging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can do most of the tasks directly from Qt Creator. Under the hood, the
    Qt tool, `androiddeployqt`, is called to generate the APK file. Go to **Projects**
    | **Android for armeabi-v7a** | **Build Steps**. You should see a special build
    step: **Build Android APK**. The details look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Packaging for Android](img/image00450.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The first thing to do is to select which Android API level you want to use to
    generate the **Application**. In our case, we selected **android-23** for the
    Android API Level 23\. Try to always build your application with the latest SDK
    version available.
  prefs: []
  type: TYPE_NORMAL
- en: 'To publish your application on the Play Store, you must sign the package. To
    be able to update an application, the signature of the current version and the
    new version must be the same. This procedure is a protection to make sure that
    any future versions of the application were really created by you. The first time
    you should create a keystore, the next time you can reuse it with the **Browse...**
    button. For now, click on the **Create...** button on the **Sign package**  |**Keystore**
    line. You will get the following popup:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Packaging for Android](img/image00451.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Follow these steps to generate a new keystore:'
  prefs: []
  type: TYPE_NORMAL
- en: The keystore must be protected by a password. Do not forget it or you will not
    be able to use this keystore for a future release.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specify an **Alias name** for the certificate. The default values for **Keysize**
    and **Validity(days)** are fine. You can specify a different password for the
    certificate or use the keystore one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Certificate Distinguished Names** group, enter information about you
    and your company.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the keystore file in a safe place.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the keystore password to validate its selection for the deployment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The next part concerns **Qt deployment**. Indeed, your application needs some
    Qt libraries. Qt supports three kinds of deployment:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a minimal APK relying on **Ministro** for the Qt dependencies. Ministro
    is an Android application that can be downloaded from the Play Store. It acts
    as a Qt shared libraries installer/provider for all Qt applications on Android.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a standalone **bundle** APK that embeds Qt libraries.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create an APK that relies on the fact that the Qt libraries are in a specific
    directory. The libraries are copied into a **temporary directory** during the
    first deployment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: During the developing and debugging phase, you should select the **temporary
    directory** way to reduce the packaging time. For a deployment, you can use the **Ministro**
    or the **bundle** option. In our case, we chose the standalone bundle to generate
    a complete APK.
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Advanced actions** pane offers three options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Use Gradle**: This option generates Gradle wrappers and a script, useful
    if you plan to customize the Java part in an IDE such as Android Studio'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Open package location after build**: This option opens the directory with
    the packages generated by `androiddeployqt`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Verbose Output**: This option displays additional information about the `androiddeployqt`
    processing'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Android build details and signing options are finished. We can now customize
    the Android manifest. Click on **Create Templates**, select the `gallery-mobile.pro`
    file, and click on **Finish**. The wizard creates for you an `android` sub-directory
    with several files; for example, `AndroidManifest.xml`. The `gallery-mobile.pro`
    file has to be updated automatically with these files. However, do not forget
    to add the `android` scope like the following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: You can now edit the `AndroidManifest.xml` file. Qt Creator provides a dedicated
    editor. You can also edit it with a plain text editor with caution. You can open
    it from the hierarchical project view: **gallery-mobile** | **Other files** | **android**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is our Android manifest in Qt Creator:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Packaging for Android](img/image00452.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here are the most important steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Replace the default **Package name** with yours.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Version code** is an integer that must be increased for each official
    release.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Version name** is the displayed version for users.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Minimum required SDK**. Users with an older version will not be
    able to install your application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the SDK that will be used to compile your application with the **Target
    SDK.**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the application and activity name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select an **Application icon** depending on the screen DPI (Dots per Inch).
    From left to right: the low, medium, and high DPI icon.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, if required by your application, you can add some Android permissions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can already build and deploy your signed application from Qt Creator. You
    should see the new application name and icon on your Android phone or emulator.
    However, we will now create a script to easily generate and package the signed
    APK from the command line.
  prefs: []
  type: TYPE_NORMAL
- en: 'Several environment variables are required by the Android and Qt tools but
    also for the script itself. Here is a summary with an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Packaging for Android](img/image00453.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'This example is a bash script but feel free to adapt it to a `.bat` file if
    you are on Windows. Create a `package-android.sh` file in the `scripts` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s analyze this script together:'
  prefs: []
  type: TYPE_NORMAL
- en: Set the main path variables. The output directory is `DIST_DIR`. All files are
    generated in the `dist/mobile-android/build` directory. The final signed APK is
    copied in the `dist/mobile-android/apk` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create all the directories and go in `dist/mobile-android/build`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Execute `qmake` in release mode for the Android platform to generate the parent
    project Makefile.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `make qmake_all` command to generate the sub-project Makefiles.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Perform the `make` commands to build each required sub-project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `make install` command on the `gallery-mobile` directory specifying
    the `INSTALL_ROOT` to copy all binaries and files required by the APK generation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The final part of the script calls the `androiddeployqt` binary, a Qt tool
    to generate the APK. Take a look at the following options:'
  prefs: []
  type: TYPE_NORMAL
- en: The `--deployment` option used here is `bundled` like the mode we used in Qt
    Creator.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `--sign` option requires two parameters: the URL to the keystore file and
    the alias to the key for the certificate.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `--storepass` option is used to specify the keystore password. In our case
    the password is "masteringqt".
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, the generated signed APK is copied to the `dist/mobile-android/apk`
    directory with the name `cute-gallery.apk`.
  prefs: []
  type: TYPE_NORMAL
- en: Packaging for iOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Packaging a Qt application for iOS relies on XCode. When you build and run gallery-mobile
    from Qt Creator, XCode will be called under the hood. In the end, an `.xcodeproj`
    file is generated and passed to XCode.
  prefs: []
  type: TYPE_NORMAL
- en: 'Knowing this, the packaging part will be fairly limited: the only thing than
    can be automated is the generation of the `.xcodeproj`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, check that your environment variables are correctly set:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Packaging for iOS](img/image00454.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Create `scripts/package-ios.sh` and add this snippet to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The script performs the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Set the main path variables. The output directory is `DIST_DIR`. All files are
    generated in the `dist/mobile-ios/build` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create all the directories and go in `dist/mobile-ios/build`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Execute `qmake` in release mode for the iPhone device (as opposed to the iPhone
    simulator) platform to generate the parent project `Makefile`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `make qmake_all` command to generate the sub-project Makefiles.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Perform the `make` command to build each required sub-projects.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once this script has been executed, `dist/mobile-ios/build/gallery-mobile/gallery-mobile.xcodeproj`
    is ready to be opened in XCode. The remaining steps are entirely done in XCode:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `gallery-mobile.xcodeproj` in XCode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Compile the application for an iOS device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Follow the Apple procedure to distribute your application (through the App Store
    or as a standalone file).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After that, `gallery-mobile` will be ready for your users!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Even if your application runs well on your computer, your development environment
    can affect this behavior. Its packaging must be correct to run your application
    on the user's hardware. You learned the steps required to package an application
    before deploying it. Some platforms required specific tasks that must be followed
    carefully. You can now bake a standalone package if your application is running
    a unique script.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter describes some tricks that can be useful for developing applications
    with Qt. You will learn some tips concerning Qt Creator.
  prefs: []
  type: TYPE_NORMAL
