["```cpp\n#version 330 core \n\nlayout (location = 0) in vec3 position; \n\nout vec3 TexCoords; \nuniform mat4 projection; \nuniform mat4 view; \nvoid main() \n\n{ \n    vec4 pos = projection * view * vec4(position, 1.0); \n    gl_Position = pos.xyww; \n    TexCoords = position; \n} \n```", "```cpp\n#version 330 core \nin vec3 TexCoords; \nout vec4 color; \nuniform samplerCube skybox; \nvoid main() \n{ \n    color = texture(skybox, TexCoords); \n} \n```", "```cpp\n// Setup skybox VAO \n\n    GLuint skyboxVAO, skyboxVBO; \n    glGenVertexArrays( 1, &skyboxVAO ); \n    glGenBuffers( 1, &skyboxVBO ); \n    glBindVertexArray( skyboxVAO ); \n    glBindBuffer( GL_ARRAY_BUFFER, skyboxVBO ); \n    glBufferData( GL_ARRAY_BUFFER, sizeof( skyboxVertices ),\n    &skyboxVertices, GL_STATIC_DRAW ); \n    glEnableVertexAttribArray( 0 ); \n    glVertexAttribPointer( 0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(\n    GLfloat ), ( GLvoid * ) 0 ); \n    glBindVertexArray(0);  \n```", "```cpp\n#pragma once \n```", "```cpp\nstatic GLuint LoadTexture( GLchar *path ) \n    { \n        //Generate texture ID and load texture data \n        GLuint textureID; \n        glGenTextures( 1, &textureID );   \n        int imageWidth, imageHeight; \n        unsigned char *image = SOIL_load_image( path, &imageWidth, \n        &imageHeight, 0, SOIL_LOAD_RGB ); \n\n        // Assign texture to ID \n        glBindTexture( GL_TEXTURE_2D, textureID ); \n        glTexImage2D( GL_TEXTURE_2D, 0, GL_RGB, imageWidth,\n        imageHeight, 0, GL_RGB, GL_UNSIGNED_BYTE, image ); \n        glGenerateMipmap( GL_TEXTURE_2D );  \n\n        // Parameters \n        glTexParameteri( GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, \n        GL_REPEAT ); \n        glTexParameteri( GL_TEXTURE_2D, GL_TEXTURE_WRAP_T,\n        GL_REPEAT ); \n        glTexParameteri( GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER,\n        GL_LINEAR_MIPMAP_LINEAR ); \n        glTexParameteri( GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER,\n        GL_LINEAR ); \n        glBindTexture( GL_TEXTURE_2D,  0); \n        SOIL_free_image_data( image );          \n        return textureID; \n    } \n\n    static GLuint LoadCubemap( vector<const GLchar * > faces) \n    { \n        GLuint textureID; \n        glGenTextures( 1, &textureID );  \n        int imageWidth, imageHeight; \n        unsigned char *image; \n            glBindTexture( GL_TEXTURE_CUBE_MAP, textureID ); \n\n      for ( GLuint i = 0; i < faces.size( ); i++ ) \n        { \n            image = SOIL_load_image( faces[i], &imageWidth,\n            &imageHeight, 0, SOIL_LOAD_RGB ); \n            glTexImage2D( GL_TEXTURE_CUBE_MAP_POSITIVE_X + i, 0,\n            GL_RGB, imageWidth, imageHeight, 0, GL_RGB,\n            GL_UNSIGNED_BYTE, image ); \n            SOIL_free_image_data( image ); \n        } \n\nglTexParameteri( GL_TEXTURE_CUBE_MAP, GL_TEXTURE_MAG_FILTER, GL_LINEAR ); \nglTexParameteri( GL_TEXTURE_CUBE_MAP, GL_TEXTURE_MIN_FILTER, GL_LINEAR ); \nglTexParameteri( GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE ); \nglTexParameteri( GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE ); \nglTexParameteri( GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_R, GL_CLAMP_TO_EDGE ); \nglBindTexture( GL_TEXTURE_CUBE_MAP, 0); \nreturn textureID; \n\n} \n```", "```cpp\nglBindTexture( GL_TEXTURE_2D, cubeTexture );   \n```", "```cpp\nstatic GLuint LoadCubemap( vector<const GLchar * > faces) \n    { \n        GLuint textureID; \n        glGenTextures( 1, &textureID );      \n        int imageWidth, imageHeight; \n        unsigned char *image;\n        glBindTexture( GL_TEXTURE_CUBE_MAP, textureID ); \n        for ( GLuint i = 0; i < faces.size( ); i++ ) \n        { \n            image = SOIL_load_image( faces[i], &imageWidth, &imageHeight,\n            0, SOIL_LOAD_RGB );  \n            glTexImage2D( GL_TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, GL_RGB,\n            imageWidth, imageHeight, 0, GL_RGB, GL_UNSIGNED_BYTE, image ); \n            SOIL_free_image_data( image ); \n        } \n\n        glTexParameteri( GL_TEXTURE_CUBE_MAP, GL_TEXTURE_MAG_FILTER,\n        GL_LINEAR ); \n\n        glTexParameteri( GL_TEXTURE_CUBE_MAP, GL_TEXTURE_MIN_FILTER,\n        GL_LINEAR ); \n\n        glTexParameteri( GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_S,\n        GL_CLAMP_TO_EDGE ); \n\n        glTexParameteri( GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_T,\n        GL_CLAMP_TO_EDGE ); \n\n        glTexParameteri( GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_R,\n        GL_CLAMP_TO_EDGE ); \n\n        glBindTexture( GL_TEXTURE_CUBE_MAP, 0); \n        return textureID; \n    }\n```", "```cpp\n// Cubemap (Skybox) \n\n    vector<const GLchar*> faces; \n    faces.push_back( \"res/images/skybox/right.tga\" ); \n    faces.push_back( \"res/images/skybox/left.tga\" ); \n    faces.push_back( \"res/images/skybox/top.tga\" ); \n    faces.push_back( \"res/images/skybox/bottom.tga\" ); \n    faces.push_back( \"res/images/skybox/back.tga\" ); \n    faces.push_back( \"res/images/skybox/front.tga\" ); \n    GLuint cubemapTexture = TextureLoading::LoadCubemap( faces ) \n```"]