["```cpp\n#include \"main_file.h\"\nint main(void)\n{\n    x = 1;\n    y = 2;\n    z = x+y;\n}\n```", "```cpp\nint x;\nint y;\nint z;\n```", "```cpp\n// program file name: helloworld.c\n#include <stdio.h>  \nint main()  \n{  // start main block of instructions\n     printf(\"Hello world!\"); \n     return 0;\n} \n```", "```cpp\n/**********************************************************\nProgram: Helloworld.c \nPurpose: It shows the text \"Hello, world!!\" on the IDE's console. \nAuthor: M. Garcia.\nProgram creation date: September 9, 2020.\nProgram version: 1.0 \n**********************************************************/\n#include <stdio.h>  //standard I/O library\nint main(void)\n{\n    int x; // we declare an integer variable\n\n    printf(\"Hello, world!!\"); \n    x=1; // we assign the value of 1 to variable x.\n}\n```", "```cpp\n/* program that converts from Fahrenheit degrees to Celsius degrees. Written by Miguel Garcia-Ruiz. Version 1.0\\. Date: Sept. 9, 2020\n*/\n#include <stdio.h> // standard I/O library to write text\nint main(void) // It won't return any value\n{\n    float celsius_degrees;\n    float fahrenheit_degrees=75.0;\n    // Calculate the conversion:\n    celsius_degrees=(fahrenheit_degrees-32)*5/9;\n    // printf displays the result on the console:\n    printf(\"%f\",celsius_degrees); \n}\n```", "```cpp\n#include<stdio.h>\n// These are global variables:\nint y;\nint m;\nint x;\nint b;\nint straight_line_equation() {\n    y=m*x+b;\n    return y;\n}\nint main(){\n    int answer;  // this is a local variable\n    m=2;\n    x=3;\n    b=5;\n    answer = straight_line_equation();\n    printf(\" %d\\n  \",answer);\n    return 0;  // this terminates  program\n}\n```", "```cpp\nconst float euler_constant=2.7183;\nconst char A_character='a';\n```", "```cpp\n#define PI 3.1416\n#define value1 11\n#define char_Val 'z'\n```", "```cpp\n<return_data_type> <function_name> (parameter list) {    <list of instructions>\n    return <expression>; //optional\n}\n```", "```cpp\nint maxnumber(int number1, int number2) {\n    /* Declaring a local variable to store the result: */\n    int result1;\n    if (number1 > number2)\n        result1 = number1;\n    else\n        result1 = number2;\n    return result1; \n}\n```", "```cpp\nvoid error_message ()\n{\n    printf(\"Error.\");\n}\n```", "```cpp\nint result2;\nresult2=maxnumber(4,3);\n```", "```cpp\n    #include <stdio.h>\n    void main(){\n    \tint x;\n    \tx=11;\n    \tif (x>10) {\n    \t\tprintf(\"yes, x is greater than 10\");\n    \t}\n    }\n    ```", "```cpp\n    #include <stdio.h>\n    void main(){\n      int x;\n      x=5;\n      if (x>10) {\n         printf(\"yes, x is greater than 10\");\n      }\n      else {\n        printf(\"no, x is not greater than 10\");\n      }\n    }\n    ```", "```cpp\nswitch( expression_to_evaluate)\n{\n    case value1:\n        <statement(s)>;\n        break;\n    case value_n:\n        <statement(s)>;\n        break;\n}\n```", "```cpp\n#include <stdio.h>\nvoid main(){\n\tint age;\n\tage=10;\n\tswitch (age)\n\t{\n\t\tcase 10:\n\t\t\tprintf (\"the person is a child\");\n\t\t\tbreak;\n\t\tcase 30:\n\t\t\tprintf (\"the person is an adult\");\n\t\t\tbreak;\n\t\tcase 80:\n\t\t\tprintf (\"the person is a senior citizen\");\n\t\t\tbreak;\n\t}\t\n}\n```", "```cpp\nfor (<initialization_variable>;         <test_expression_with_variable>; <update_variable>)\n{\n    <statement(s)_to_run>;\n} \n```", "```cpp\nfor (int x=1; x<=10; x++)\n{\n    printf(\"%d \", x);\n}\n```", "```cpp\nwhile (<test_expression>) \n{\n    statement(s); \n}\n```", "```cpp\nint x = 0;\nwhile (x <= 10)\n{\n    // \\n it will display the next number in a new \n    // line of text:\n    printf(\"%d \\n\", x); \n    x=x+1;\n}\n```", "```cpp\ndo\n{\n    statement(s);\n}\nwhile (<test_expression>);\n```", "```cpp\nint number=5;\ndo\n{\n    number=number+5;\n    printf(\"%d \", number);\n}\nwhile (number < 50);\n```", "```cpp\nfor(; ;)\n{\n    printf(\"this text will be displayed endlessly!\");\n}\nwhile(1) \n{\n    printf(\"this text will be displayed endlessly!\");\n}\ndo\n{\n    printf(\"this text will be displayed endlessly!\");\n}\nwhile (1);\n```", "```cpp\nfor (int x=1; x<=10; x++)\n{\n    printf(\"%d \", x);\n    break;\n}\n```", "```cpp\nfor (int x=1; x<=10; x++)\n{\n    printf(\"%d \", x);\n    continue;\n    printf(\"this line won't be displayed.\");\n}\n```", "```cpp\n//necessary IDE's library defining input-output ports:\n#include \"mcc_generated_files/mcc.h\"\nvoid main(void) //main program function\n{\n    // statements\n}\n```", "```cpp\nvoid setup() \n{\n    statement(s);\n}\nvoid loop() \n{\n    statement(s);\n}\n```", "```cpp\nvoid setup ( ) \n{\n // it sets the pin as output.\n    pinMode (pin_number1, OUTPUT);\n // it sets the pin as input \n    pinMode (pin_number2, INPUT); \n}\n```", "```cpp\n    /*\n      Blink\n      This program turns on the Blue Pill's internal LED   on for one second, then off for two seconds,   repeatedly.\n      Version number: 1.\n      Date: Sept. 18, 2020.\n      Note: the internal LED is internally connected to   port PC13.\n      Written by Miguel Garcia-Ruiz.\n     */\n    void setup() \n    {\n      pinMode(PC13, OUTPUT);\n    }\n    void loop() \n    {\n      digitalWrite(PC13, HIGH);\n      delay(1000);\n      digitalWrite(PC13, LOW);\n      delay(2000);             // it waits for two seconds\n    }\n    ```", "```cpp\n    /*\n    This program makes the on-board LED to blink once a second (1000 milliseconds).\n    Ver. 1\\. July, 2020\\. Written by Miguel Garcia-Ruiz\n    */\n    //necessary library generated by MCC:\n    #include \"mcc_generated_files/mcc.h\" \n    void main(void) //main program function\n    {\n        // initializing the microcontroller board:\n        SYSTEM_Initialize(); \n        //it sets up LED0 as output: \n        LED0_SetDigitalOutput();\n        while (1) //infinite loop\n        {\n            LED0_SetLow(); //it turns off the on-board LED\n            __delay_ms(1000); //it pauses the program for                           //1 second \n            LED0_SetHigh(); //it turns on on-board LED and                         //RE0 pin\n            __delay_ms(1000); //it pauses the program for                           //1 second \n        }\n    }\n    ```"]