["```cpp\nvoid Render3D()\n{\n if (gameState == GS_Running)\n {\n  for (unsigned int i = 0; i < asteroids.size(); i++)\n  {\n   asteroids[i]->Render();\n  }\n  ship->Render();\n }\n}\n```", "```cpp\nvoid Enable2D()\n{\n  glColor3f(1.0f, 1.0f, 1.0f);\n  glEnable(GL_TEXTURE_2D);\n\n  glMatrixMode(GL_PROJECTION);\n  glPushMatrix();\n  glLoadIdentity();\n  glOrtho(0, SCREEN_WIDTH, SCREEN_HEIGHT, 0, 0, 1);\n\n  glMatrixMode(GL_MODELVIEW);\n  glPushMatrix();\n  glLoadIdentity();\n\n  glPushAttrib(GL_DEPTH_BUFFER_BIT);\n  glDisable(GL_DEPTH_TEST);\n}\n```", "```cpp\nvoid Disable2D()\n{\n  glPopAttrib();\n\n  glMatrixMode(GL_PROJECTION);\n  glPopMatrix();\n\n  glMatrixMode(GL_MODELVIEW);\n  glPopMatrix();\n\n  glDisable(GL_TEXTURE_2D);\n}\n```", "```cpp\nvoid Render2D()\n{\n  Enable2D();\n  // Future 2D rendering code here\n  Disable2D();\n}\n```", "```cpp\nvoid Render()\n{\n  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);\n  glMatrixMode(GL_MODELVIEW);\n  glLoadIdentity();\n  Render3D();\n  Render2D();\n  SwapBuffers(hDC);\n}\n```", "```cpp\nenum GameState\n{\n  GS_Splash,\n  GS_Loading,\n  GS_Menu,\n  GS_Credits,\n  GS_Running,\n  GS_NextLevel,\n  GS_Paused,\n  GS_GameOver,\n};\n```", "```cpp\nGameState gameState;\n```", "```cpp\nfloat splashDisplayTimer;\nfloat splashDisplayThreshold;\n```", "```cpp\nSprite* splashScreen;\nSprite* menuScreen;\nSprite* creditsScreen;\nSprite* playButton;\nSprite* creditsButton;\nSprite* exitButton;\nSprite* menuButton;\nSprite* gameOverScreen;\nSprite* replayButton;\n```", "```cpp\nfloat uiTimer;\nconst float UI_THRESHOLD = 0.1f;\n```", "```cpp\nvoid LoadSplash()\n{\n  gameState = GameState::GS_Splash;\n  splashScreen = new Sprite(1);\n  splashScreen->SetFrameSize(screenWidth, screenHeight);\n  splashScreen->SetNumberOfFrames(1);\n  splashScreen->AddTexture(\"resources/splash.png\", false);\n  splashScreen->IsActive(true);\n  splashScreen->IsVisible(true);\n  splashScreen->SetPosition(0.0f, 0.0f);\n}\n```", "```cpp\nLoadSplash();\nuiTimer = 0.0f;\nsplashDisplayTimer = 0.0f;\nsplashDisplayThreshold = 5.0f;\n```", "```cpp\nvoid Update(const float p_deltaTime)\n{\n switch (gameState)\n {\n case GameState::GS_Splash:\n case GameState::GS_Loading:\n {\n  splashScreen->Update(p_deltaTime);\n }\n break;\n case GameState::GS_Running:\n {\n  inputManager->Update(p_deltaTime);\n  ProcessInput(p_deltaTime);\n  ship->Update(p_deltaTime);\n  ship->SetVelocity(ship->GetVelocity() + ship->GetVelocity()*p_deltaTime/10.0f);\n  speed = ship->GetVelocity() * 1000;\n  if (maximumSpeed < speed)\n  {\n   maximumSpeed = speed;\n  }\n  missionTime = missionTime + p_deltaTime * 100.0f;\n  CheckCollisions();\n  if (ship->GetPosition().z > 10.0f)\n  {\n   gameState = GS_GameOver;\n   menuButton->IsActive(true);\n   gameOverScreen->IsActive(true);\n  }\n }\n break;\n case GameState::GS_GameOver:\n {\n  gameOverScreen->Update(p_deltaTime);\n  replayButton->IsActive(true);\n  replayButton->Update(p_deltaTime);\n  exitButton->IsActive(true);\n  exitButton->Update(p_deltaTime);\n  inputManager->Update(p_deltaTime);\n  ProcessInput(p_deltaTime);\n  ship->Update(p_deltaTime);\n  CheckCollisions();\n }\n break;\n }\n}\n```", "```cpp\nsplashScreen->Render();\n```", "```cpp\nint score;\nint speed;\nint missionTime;\nint asteroidsHit;\nint maximumSpeed;\n```", "```cpp\nscore = 0;\nspeed = 1.0f;\nmaximumSpeed = 0;\nasteroidsHit = 0;\nmissionTime = 0;\n```", "```cpp\nvoid DrawUi()\n{\n float startY = screenHeight - 50.0f;\n float x1 = 50.0f;\n float x2 = screenWidth / 2.0f - 50.0f;\n float x3 = screenWidth - 250.0f;\n\n char scoreText[50];\n char speedText[50];\n char missionTimeText[50];\n\n sprintf_s(scoreText, 50, \"Score: %i\", score);\n sprintf_s(speedText, 50, \"Speed: %i\", speed);\n sprintf_s(missionTimeText, 50, \"Time: %f\", missionTime / 100.0f);\n DrawText(scoreText, x1, startY, 0.0f, 1.0f, 0.0f);\n DrawText(speedText, x2, startY, 0.0f, 1.0f, 0.0f);\n DrawText(missionTimeText, x3, startY, 0.0f, 1.0f, 0.0f);\n\n}\n\nvoid DrawStats()\n{\n float startX = screenWidth - screenWidth / 2.5f;\n float startY = 275.0f;\n float spaceY = 30.0f;\n\n char asteroidsHitText[50];\n char maximumSpeedText[50];\n char scoreText[50];\n char missionTimeText[50];\n sprintf_s(asteroidsHitText, 50, \"Asteroids Hit: %i\", asteroidsHit);\n sprintf_s(maximumSpeedText, 50, \"Maximum Speed: %i\", maximumSpeed);\n sprintf_s(scoreText, 50, \"Score: %i\", score);\n sprintf_s(missionTimeText, 50, \"Time: %f\", missionTime / 100.0f);\n DrawText(asteroidsHitText, startX, startY, 0.0f, 1.0f, 0.0f);\n DrawText(maximumSpeedText, startX, startY + spaceY, 0.0f, 1.0f, 0.0f);\n DrawText(scoreText, startX, startY + spaceY * 2.0f, 0.0f, 1.0f, 0.0f);\n DrawText(missionTimeText, startX, startY + spaceY * 3.0f, 0.0f, 1.0f, 0.0f);\n}\nvoid DrawCredits()\n{\n float startX = screenWidth - screenWidth / 2.5f;\n float startY = 300.0f;\n float spaceY = 30.0f;\n DrawText(\"Robert Madsen\", startX, startY, 0.0f, 1.0f, 0.0f);\n DrawText(\"Author\", startX, startY + spaceY, 0.0f, 1.0f, 0.0f);\n}\n```", "```cpp\nvoid CheckCollisions()\n{\n bool collision = false;\n for (int i = 0; i < asteroids.size(); i++)\n {\n  Model* item = asteroids[i];\n  collision = ship->CollidedWith(item);\n  if (collision)\n  {\n   item->IsCollideable(false);\n   score++;\n   asteroidsHit++;\n  }\n }\n}\n```", "```cpp\nconst bool LoadTextures()\n{\n menuScreen = new Sprite(1);\n menuScreen->SetFrameSize(screenWidth, screenHeight);\n menuScreen->SetNumberOfFrames(1);\n menuScreen->AddTexture(\"resources/mainmenu.png\", false);\n menuScreen->IsActive(true);\n menuScreen->IsVisible(true);\n menuScreen->SetPosition(0.0f, 0.0f);\n playButton = new Sprite(1);\n playButton->SetFrameSize(75.0f, 38.0f);\n playButton->SetNumberOfFrames(1);\n playButton->SetPosition(690.0f, 300.0f);\n playButton->AddTexture(\"resources/playButton.png\");\n playButton->IsVisible(true);\n playButton->IsActive(false);\n inputManager->AddUiElement(playButton);\n creditsButton = new Sprite(1);\n creditsButton->SetFrameSize(75.0f, 38.0f);\n creditsButton->SetNumberOfFrames(1);\n creditsButton->SetPosition(690.0f, 350.0f);\n creditsButton->AddTexture(\"resources/creditsButton.png\");\n creditsButton->IsVisible(true);\n creditsButton->IsActive(false);\n inputManager->AddUiElement(creditsButton);\n exitButton = new Sprite(1);\n exitButton->SetFrameSize(75.0f, 38.0f);\n exitButton->SetNumberOfFrames(1);\n exitButton->SetPosition(690.0f, 500.0f);\n exitButton->AddTexture(\"resources/exitButton.png\");\n exitButton->IsVisible(true);\n exitButton->IsActive(false);\n inputManager->AddUiElement(exitButton);\n creditsScreen = new Sprite(1);\n creditsScreen->SetFrameSize(screenWidth, screenHeight);\n creditsScreen->SetNumberOfFrames(1);\n creditsScreen->AddTexture(\"resources/credits.png\", false);\n creditsScreen->IsActive(true);\n creditsScreen->IsVisible(true);\n menuButton = new Sprite(1);\n menuButton->SetFrameSize(75.0f, 38.0f);\n menuButton->SetNumberOfFrames(1);\n menuButton->SetPosition(690.0f, 400.0f);\n menuButton->AddTexture(\"resources/menuButton.png\");\n menuButton->IsVisible(true);\n menuButton->IsActive(false);\n inputManager->AddUiElement(menuButton);\n gameOverScreen = new Sprite(1);\n gameOverScreen->SetFrameSize(screenWidth, screenHeight);\n gameOverScreen->SetNumberOfFrames(1);\n gameOverScreen->AddTexture(\"resources/gameover.png\", false);\n gameOverScreen->IsActive(true);\n gameOverScreen->IsVisible(true);\n replayButton = new Sprite(1);\n replayButton->SetFrameSize(75.0f, 38.0f);\n replayButton->SetNumberOfFrames(1);\n replayButton->SetPosition(690.0f, 400.0f);\n replayButton->AddTexture(\"resources/replayButton.png\");\n replayButton->IsVisible(true);\n replayButton->IsActive(false);\n inputManager->AddUiElement(replayButton);\n return true;\n}\n```", "```cpp\nvoid Render2D()\n{\n Enable2D();\n switch (gameState)\n {\n case GameState::GS_Loading:\n {\n  splashScreen->Render();\n }\n break;\n case GameState::GS_Menu:\n {\n  menuScreen->Render();\n  playButton->Render();\n  creditsButton->Render();\n  exitButton->Render();\n }\n break;\n case GameState::GS_Credits:\n {\n  creditsScreen->Render();\n  menuButton->Render();\n  DrawCredits();\n }\n break;\n case GameState::GS_Running:\n {\n  DrawUi();\n }\n break;\n case GameState::GS_Splash:\n {\n  splashScreen->Render();\n }\n  break;\n case GameState::GS_GameOver:\n {\n  gameOverScreen->Render();\n  DrawStats();\n  menuButton->Render();\n }\n break;\n }\n Disable2D();\n}\n```", "```cpp\n case Input::Command::CM_UI:\n {\n  if (playButton->IsClicked())\n  {\n   playButton->IsClicked(false);\n   exitButton->IsActive(false);\n   playButton->IsActive(false);\n   creditsButton->IsActive(false);\n   gameState = GameState::GS_Running;\n  }\n  if (creditsButton->IsClicked())\n  {\n   creditsButton->IsClicked(false);\n   exitButton->IsActive(false);\n   playButton->IsActive(false);\n   creditsButton->IsActive(false);\n   gameState = GameState::GS_Credits;\n  }\n  if (menuButton->IsClicked())\n  {\n   menuButton->IsClicked(false);\n   exitButton->IsActive(true);\n   playButton->IsActive(true);\n   menuButton->IsActive(false);\n   switch (gameState)\n   {\n   case GameState::GS_Credits:\n   {\n    gameState = GameState::GS_Menu;\n   }\n   break;\n   case GameState::GS_GameOver:\n   {\n    StartGame();\n   }\n   break;\n   }\n  }\n  if (exitButton->IsClicked())\n  {\n   playButton->IsClicked(false);\n   exitButton->IsActive(false);\n   playButton->IsActive(false);\n   creditsButton->IsActive(false);\n   PostQuitMessage(0);\n  }\n }\n break;\n }\n```", "```cpp\nvoid Update(const float p_deltaTime)\n{\n switch (gameState)\n {\n case GameState::GS_Splash:\n case GameState::GS_Loading:\n {\n  splashScreen->Update(p_deltaTime);\n  splashDisplayTimer += p_deltaTime;\n  if (splashDisplayTimer > splashDisplayThreshold)\n  {\n   gameState = GameState::GS_Menu;\n  }\n }\n break;\n case GameState::GS_Menu:\n {\n  menuScreen->Update(p_deltaTime);\n  playButton->IsActive(true);\n  creditsButton->IsActive(true);\n  exitButton->IsActive(true);\n  playButton->Update(p_deltaTime);\n  creditsButton->Update(p_deltaTime);\n  exitButton->Update(p_deltaTime);\n  inputManager->Update(p_deltaTime);\n  ProcessInput(p_deltaTime);\n }\n break;\n case GameState::GS_Credits:\n {\n  creditsScreen->Update(p_deltaTime);\n  menuButton->IsActive(true);\n  menuButton->Update(p_deltaTime);\n  inputManager->Update(p_deltaTime);\n  ProcessInput(p_deltaTime);\n }\n break;\n case GameState::GS_Running:\n {\n  inputManager->Update(p_deltaTime);\n  ProcessInput(p_deltaTime);\n  ship->Update(p_deltaTime);\n  ship->SetVelocity(ship->GetVelocity() + ship->GetVelocity()*p_deltaTime/10.0f);\n  speed = ship->GetVelocity() * 1000;\n  if (maximumSpeed < speed)\n  {\n   maximumSpeed = speed;\n  }\n  missionTime = missionTime + p_deltaTime * 100.0f;\n  CheckCollisions();\n  if (ship->GetPosition().z > 10.0f)\n  {\n   gameState = GS_GameOver;\n   menuButton->IsActive(true);\n   gameOverScreen->IsActive(true);\n  }\n }\n break;\n case GameState::GS_GameOver:\n {\n  gameOverScreen->Update(p_deltaTime);\n  replayButton->IsActive(true);\n  replayButton->Update(p_deltaTime);\n  exitButton->IsActive(true);\n  exitButton->Update(p_deltaTime);\n  inputManager->Update(p_deltaTime);\n  ProcessInput(p_deltaTime);\n }\n break;\n }\n}\n```", "```cpp\nvoid GameLoop(const float p_deltatTime)\n{\n if (gameState == GameState::GS_Splash)\n {\n  BuildFont();\n  LoadTextures();\n  gameState = GameState::GS_Loading;\n }\n Update(p_deltatTime);\n Render();\n}\n```"]