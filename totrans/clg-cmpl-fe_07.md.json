["```cpp\n$ ninja clang-tidy\n```", "```cpp\n$ ninja install-clang-tidy\n```", "```cpp\n$ ninja check-clang-tools\n```", "```cpp\n$ cd <...>/llvm-project\n$ build/bin/llvm-lit -v \\\nclang-tools-extra/test/clang-tidy/checkers/modernize/loop-convert-basic.cpp\n```", "```cpp\n-- Testing: 1 tests, 1 workers --\nPASS: Clang Tools :: clang-tidy/checkers/modernize/loop-convert-basic.cpp\n(1 of 1)\n\nTesting Time: 1.38s\n  Passed: 1\n```", "```cpp\n1 #include <iostream> \n\n2 #include <vector> \n\n3  \n\n4 int main() { \n\n5   std::vector<int> numbers = {1, 2, 3, 4, 5}; \n\n6   for (std::vector<int>::iterator it = numbers.begin(); it != numbers.end(); \n\n7        ++it) { \n\n8     std::cout << *it << std::endl; \n\n9   } \n\n10   return 0; \n\n11 }\n```", "```cpp\n1$ <...>/llvm-project/install/bin/clang-tidy \\ \n\n2   -checks=’-*,modernize-*’               \\ \n\n3   loop-convert.cpp                       \\ \n\n4   -- -std=c++17\n```", "```cpp\nloop-convert.cpp:4:5: warning: use a trailing return type for this function\n...\n    4 | int main() {\n      | ~~~ ^\n      | auto       -> int\nloop-convert.cpp:6:3: warning: use range-based for loop instead\n[modernize-loop-convert]\n    6 |   for (std::vector<int>::iterator it = numbers.begin();\n          it != numbers.end();\n      |   ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |       (int & number : numbers)\n    7 |        ++it) {\n      |        ~~~~~\n    8 |     std::cout << *it << std::endl;\n      |                  ~~~\n      |                  number\nloop-convert.cpp:6:8: warning: use auto when declaring iterators\n[modernize-use-auto]\n    6 |   for (std::vector<int>::iterator it = numbers.begin();\n          it != numbers.end();\n```", "```cpp\n      |        ^\nnote: this fix will not be applied because it overlaps with another fix\n\n```", "```cpp\n1$ <...>/llvm-project/install/bin/clang-tidy \\ \n\n2   -checks=’-*,modernize-loop-convert’    \\ \n\n3   -fix                                  \\ \n\n4   loop-convert.cpp                       \\ \n\n5   -- -std=c++17\n```", "```cpp\n1 #include <iostream> \n\n2 #include <vector> \n\n3  \n\n4 int main() { \n\n5   std::vector<int> numbers = {1, 2, 3, 4, 5}; \n\n6   for (int & number : numbers) { \n\n7     std::cout << number << std::endl; \n\n8   } \n\n9   return 0; \n\n10 }\n```", "```cpp\n1  Checks: ’-*,modernize-*’\n```", "```cpp\n1CheckOptions: \n\n2   - key: readability-identifier-naming.NamespaceCase \n\n3    value: CamelCase \n\n4   - key: readability-identifier-naming.ClassCase \n\n5    value: CamelCase\n```", "```cpp\n$ ./clang-tools-extra/clang-tidy/add_new_check.py misc classchecker\n...\nUpdating ./clang-tools-extra/clang-tidy/misc/CMakeLists.txt...\nCreating ./clang-tools-extra/clang-tidy/misc/ClasscheckerCheck.h...\nCreating ./clang-tools-extra/clang-tidy/misc/ClasscheckerCheck.cpp...\nUpdating ./clang-tools-extra/clang-tidy/misc/MiscTidyModule.cpp...\nUpdating clang-tools-extra/docs/ReleaseNotes.rst...\nCreating clang-tools-extra/test/clang-tidy/checkers/misc/classchecker.cpp...\nCreating clang-tools-extra/docs/clang-tidy/checks/misc/classchecker.rst...\nUpdating clang-tools-extra/docs/clang-tidy/checks/list.rst...\n```", "```cpp\nDone. Now it’s your turn!\n\n```", "```cpp\n1 #include \"ClasscheckerCheck.h\" \n\n2 #include \"clang/AST/ASTContext.h\" \n\n3 #include \"clang/ASTMatchers/ASTMatchFinder.h\" \n\n4 using namespace clang::ast_matchers; \n\n5  \n\n6 namespace clang::tidy::misc { \n\n7 void ClasscheckerCheck::registerMatchers(MatchFinder *Finder) { \n\n8     // Match every C++ class. \n\n9     Finder->addMatcher(cxxRecordDecl().bind(\"class\"), this); \n\n10 } \n\n11 void ClasscheckerCheck::check(const MatchFinder::MatchResult &Result) { \n\n12     const auto *ClassDecl = Result.Nodes.getNodeAs<CXXRecordDecl>(\"class\"); \n\n13     if (!ClassDecl || !ClassDecl->isThisDeclarationADefinition()) \n\n14         return; \n\n15     unsigned MethodCount = 0; \n\n16     for (const auto *D : ClassDecl->decls()) { \n\n17         if (isa<CXXMethodDecl>(D)) \n\n18             MethodCount++; \n\n19     } \n\n20     unsigned Threshold = Options.get(\"Threshold\", 5); \n\n21     if (MethodCount > Threshold) { \n\n22         diag(ClassDecl->getLocation(), \n\n23              \"class %0 is too complex: method count = %1\", \n\n24              DiagnosticIDs::Warning) \n\n25             << ClassDecl->getName() << MethodCount; \n\n26     } \n\n27 } \n\n28 } // namespace clang::tidy::misc\n```", "```cpp\n40 class MiscModule : public ClangTidyModule { \n\n41 public: \n\n42   void addCheckFactories(ClangTidyCheckFactories &CheckFactories) override { \n\n43     CheckFactories.registerCheck<ClasscheckerCheck>( \n\n44         \"misc-classchecker\"); \n\n45     CheckFactories.registerCheck<ConfusableIdentifierCheck>( \n\n46         \"misc-confusable-identifiers\");\n```", "```cpp\n$ ninja install\n```", "```cpp\n<...>/llvm-project/install/bin/clang-tidy -checks ’*’ -list-checks\n...\n    misc-classchecker\n...\n```", "```cpp\n1 class Simple { \n\n2 public: \n\n3   void func1() {} \n\n4   void func2() {} \n\n5   void func3() {} \n\n6 };\n```", "```cpp\n1$ <...>/llvm-project/install/bin/clang-tidy                           \\ \n\n2   -checks=’-*,misc-classchecker’                                      \\ \n\n3   -config=\"{CheckOptions: [{key:misc-classchecker.Threshold, value:’2’}]}\"\\ \n\n4   test.cpp                                                           \\ \n\n5   -- -std=c++17\n```", "```cpp\ntest.cpp:1:7: warning: class Simple is too complex: method count = 3\n[misc-classchecker]\nclass Simple {\n      ^\n```", "```cpp\n1 // RUN: %check_clang_tidy %s misc-classchecker %t \n\n2  \n\n3 class Simple { \n\n4 public: \n\n5   void func1() {} \n\n6   void func2() {} \n\n7 }; \n\n8  \n\n9 // CHECK-MESSAGES: :[[LINE+1]]:{{[0-9]+}}: warning: class Complex is too complex: method count = 6 [misc-classchecker] \n\n10 class Complex { \n\n11 public: \n\n12   void func1() {} \n\n13   void func2() {} \n\n14   void func3() {} \n\n15   void func4() {} \n\n16   void func5() {} \n\n17   void func6() {} \n\n18 };\n```", "```cpp\n$ cd <...>/llvm-project\n$ build/bin/llvm-lit -v \\\n  clang-tools-extra/test/clang-tidy/checkers/misc/classchecker.cpp\n```", "```cpp\n-- Testing: 1 tests, 1 workers --\nPASS: Clang Tools :: clang-tidy/checkers/misc/classchecker.cpp (1 of 1)\n\nTesting Time: 0.12s\n  Passed: 1\n```", "```cpp\n1 class MyClass { \n\n2 public: \n\n3   void doSomething(); \n\n4 }; \n\n5  \n\n6 void MyClass::doSometing() {}\n```", "```cpp\nerror.cpp:1:7: warning: class MyClass is too complex: method count = 7\n[misc-classchecker]\nclass MyClass {\n      ^\nerror.cpp:6:15: error: out-of-line definition of ’doSometing’ ...\n[clang-diagnostic-error]\nvoid MyClass::doSometing() {}\n              ^~~~~~~~~~\n              doSomething\nerror.cpp:3:8: note: ’doSomething’ declared here\n  void doSomething();\n       ^\nFound compiler error(s).\n```", "```cpp\n1 class MyClass { \n\n2 public: \n\n3   void doSomething(); \n\n4 }; \n\n5  \n\n6 void MyClass::doSomething() {}\n```", "```cpp\n$ <...>/llvm-project/install/bin/clang-query noerror.cpp -- --std=c++17\n```", "```cpp\nclang-query> set output dump\nclang-query> match cxxRecordDecl()\n```", "```cpp\nMatch #1:\n\nBinding for \"root\":\nCXXRecordDecl ... <noerror.cpp:1:1, line:4:1> line:1:7 class MyClass\ndefinition\n|-DefinitionData ...\n| |-DefaultConstructor exists trivial ...\n| |-CopyConstructor simple trivial ...\n| |-MoveConstructor exists simple trivial ...\n| |-CopyAssignment simple trivial ...\n| |-MoveAssignment exists simple trivial ...\n| ‘-Destructor simple irrelevant trivial ...\n|-CXXRecordDecl ... <col:1, col:7> col:7 implicit class MyClass\n|-AccessSpecDecl ... <line:2:1, col:7> col:1 public\n‘-CXXMethodDecl ... <line:3:3, col:20> col:8 doSomething ’void ()’\n...\n```", "```cpp\n$ <...>/llvm-project/install/bin/clang-query error.cpp -- --std=c++17\nclang-query> set output dump\nclang-query> match cxxRecordDecl()\n```", "```cpp\nCXXRecordDecl ... <error.cpp:1:1, line:4:1> line:1:7 class MyClass\ndefinition\n|-DefinitionData ...\n| |-DefaultConstructor exists trivial ...\n| |-CopyConstructor simple trivial ..\n| |-MoveConstructor exists simple trivial\n| |-CopyAssignment simple trivial ...\n| |-MoveAssignment exists simple trivial\n| ‘-Destructor simple irrelevant trivial\n|-CXXRecordDecl ... <col:1, col:7> col:7 implicit class MyClass\n|-AccessSpecDecl ... <line:2:1, col:7> col:1 public\n|-CXXMethodDecl ... <line:3:3, col:20> col:8 doSomething ’void ()’\n|-CXXConstructorDecl ... <line:1:7> col:7 implicit constexpr MyClass\n’void ()’ ...\n|-CXXConstructorDecl ... <col:7> col:7 implicit constexpr MyClass\n’void (const MyClass &)’ ...\n| ‘-ParmVarDecl ... <col:7> col:7 ’const MyClass &’\n|-CXXMethodDecl ... <col:7> col:7 implicit constexpr operator= ’MyClass\n&(const MyClass &)’ inline default trivial ...\n| ‘-ParmVarDecl ... <col:7> col:7 ’const MyClass &’\n|-CXXConstructorDecl ... <col:7> col:7 implicit constexpr MyClass ’void\n(MyClass &&)’ ...\n| ‘-ParmVarDecl ... <col:7> col:7 ’MyClass &&’\n|-CXXMethodDecl ... <col:7> col:7 implicit constexpr operator= ’MyClass\n&(MyClass &&)’ ...\n| ‘-ParmVarDecl ... <col:7> col:7 ’MyClass &&’\n\n‘-CXXDestructorDecl ... <col:7> col:7 implicit ~MyClass ’void ()’ inline\ndefault ...\n...\n\n```", "```cpp\n29     for (const auto *D : ClassDecl->decls()) { \n\n30       if (isa<CXXMethodDecl>(D) && !D->isImplicit()) \n\n31             MethodCount++; \n\n32     }\n```", "```cpp\nerror.cpp:6:15: error: out-of-line definition of ’doSometing’ ...\n[clang-diagnostic-error]\nvoid MyClass::doSometing() {}\n              ^~~~~~~~~~\n              doSomething\nerror.cpp:3:8: note: ’doSomething’ declared here\n  void doSomething();\n       ^\nFound compiler error(s).\n```"]