- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This hands-on guide will provide you with the most important functional knowledge
    for getting a **Real-Time Operating System** (**RTOS**) up and running on a **microcontroller** **unit**
    (**MCU**)**.** If you're interested in learning how to implement applications
    using an RTOS with hands-on examples using actual hardware and discussing common
    performance versus development-time trade-offs, you're in the right place!
  prefs: []
  type: TYPE_NORMAL
- en: We'll be implementing code using the FreeRTOS kernel, working with the popular
    STM32 ARM MCUs using a low-cost STM Nucleo development board, and debugging/analyzing
    code with SEGGER debug tools.  All of the tools used in this book have been selected
    because they are easily accessible for the hobbyist or professional just getting
    started, and also because of their popularity in real-world professional teams.
    The knowledge and experience you gain through reading this book and working through
    the examples will be directly applicable to actual development in a professional
    environment.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: RTOS programming is not a beginner's topic and is definitely not the right starting
    point for learning about embedded systems. If MCUs or the C language is totally
    new to you, then you're better off starting by covering the basics and getting
    some hands-on experience before diving into this more advanced topic.
  prefs: []
  type: TYPE_NORMAL
- en: So, who stands to benefit the most from working through this book?
  prefs: []
  type: TYPE_NORMAL
- en: '**Professional programmers**: You''ve always programmed on *bare metal* (no
    OS) and are looking to increase your MCU programming skills by learning how to
    use an RTOS to meet tight timing requirements, balance concurrent operations,
    and create modular code.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Students interested in "getting their hands dirty"**: You''ve been covering
    theory, listening to lectures, and coding lab exercises, but now you''re looking
    for a complete guide that helps you to get started with something you can physically
    touch and interact with.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Makers moving onto more advanced topics**: You''ve written some sketches
    or scripts, but you''re looking for your next challenge. Maybe you''d like to
    create a full MCU-based system from scratch – the information here will help get
    you on track for the programming side. You''ll even get some tips on what to look
    for when selecting an MCU for your project.'
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This book comprises 17 chapters in all, spread across four sections. It isn''t
    necessary to read the book straight through if you''re already comfortable with
    some of the material. For example, if you''re already comfortable with basic RTOS
    concepts and real-time systems, feel free to skip to [Chapter 4](c52d7cdb-b6cb-41e8-8d75-72494bc9d4d3.xhtml),
    *Selecting the Right MCU*. The following are brief descriptions of the chapters
    that this book is made up of:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 1](39404421-bf7a-4283-bf78-c396818be4b4.xhtml),  *Introducing Real-Time
    Systems*, is a simple introduction to what an RTOS is and when and why to use
    one. Hardware and software alternatives to an MCU-based RTOS are also discussed.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](84f04852-827d-4e79-99d7-6c954ba3e93c.xhtml), *Understanding RTOS
    Tasks*, provides a comparison of super loops with RTOS tasks, including various
    ways parallel operations can be achieved using both.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](a410ddd6-10eb-4e97-965e-e390f4dc2890.xhtml),  *Task Signaling and
    Communication Mechanisms*, is a short introduction to more RTOS concepts with
    lots of diagrams.  This chapter, along with [Chapter 2](84f04852-827d-4e79-99d7-6c954ba3e93c.xhtml)*, Understanding
    RTOS Tasks,* should be useful as a reference and a quick refresher on the concepts
    and terminology, should you ever need it.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](c52d7cdb-b6cb-41e8-8d75-72494bc9d4d3.xhtml), *Selecting the Right
    MCU*, helps you understand what considerations should be made when selecting an
    MCU. After gaining an appreciation of the inter-dependency between hardware and
    firmware, we look at why it is so important that hardware and firmware engineers
    both have a hand in system design.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](84a945dc-ff6c-4ec8-8b9c-84842db68a85.xhtml), *Selecting an IDE*,
    introduces and discusses various types of **Integrated Development Environments**
    (**IDEs**), including reasons why you might decide to choose one over another
    (or none at all). Instructions on setting up STM32CubeIDE and importing the example
    code are covered here.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](699daa80-06ae-4acc-8b93-a81af2eb774b.xhtml), *Debugging Tools for
    Real-Time Systems*, covers tools for debugging embedded systems, including the
    debugging tool we''ll be using throughout the remainder of the book – SEGGER Ozone
    and SEGGER SystemView visualization software. Instructions on how to use Ozone
    and SystemView are covered here. Hardware-based test equipment and some other
    useful tools for your embedded system development workflow are also included.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](2fa909fe-91a6-48c1-8802-8aa767100b8f.xhtml), *The FreeRTOS Scheduler*,
    teaches you the various ways to create tasks using FreeRTOS and how to troubleshoot
    startup failures. You will gain an understanding of task states and the different
    ways performance can be optimized.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](c6d7a0c6-6f18-4e06-a372-cd1605942ecd.xhtml), *Protecting Data and
    Synchronizing Tasks*, covers task synchronization using semaphores and data protection
    using mutexes, as well as how to avoid race conditions and priority inversion. Software
    timers are also covered.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](495bdcc0-2a86-4b22-9628-4c347e67e49e.xhtml), *Intertask Communication*,
    examines different ways of passing information between tasks, with different examples
    of using queues for passing information by value and reference, discussing the
    advantages and considerations of both approaches. We''ll also learn about a lightweight
    intertask communication mechanism, the direct task notification, including a comparison
    of task notifications and queues.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10](dd741273-db9a-4e9a-a699-b4602e160b84.xhtml), *Drivers and ISRs*,
    dives deep into several detailed examples of how to implement efficient drivers
    with various FreeRTOS primitives including semaphores, queues, and stream buffers.
    We''ll also look at how FreeRTOS can be used in conjunction with MCU hardware
    such as DMA to provide extremely CPU-efficient driver implementations. This chapter
    works both directly with the MCUs peripheral registers and also with STM32 HAL
    code.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 11](c76b2fa5-28ac-4467-bb7e-68593a27f9ce.xhtml), *Sharing Hardware
    Peripherals across Tasks*, teaches you how to create drivers that can be safely
    used across multiple tasks while sharing hardware resources. We''ll adapt the
    STM-supplied USB CDC implementation to be more user-friendly and efficient, wrapping
    it with a mutex and queues so it is safe to use across multiple tasks.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 12](8e78a49a-1bcd-4cfe-a88f-fb86a821c9c7.xhtml), *Tips on Creating
    a Well-Abstracted Architecture*, covers code reusability, flexibility, and hardware
    portability, with an eye on creating abstractions that make your job easier. Some
    suggestions for source code organization to help facilitate reuse are also covered.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 13](e728e173-c9b2-4bb8-91c8-ed348ccf9518.xhtml), *Creating Loose Coupling
    with Queues*, is a culmination of all of the concepts covered in the book. It
    includes a fully fleshed-out example of a loosely coupled architecture used to
    create a properly abstracted, end-to-end application. We''ll use the USB CDC virtual
    comm port developed earlier, as well as an LED abstraction, to create a loosely
    coupled, fully reusable LED sequencer using a command queue. This embedded application
    can be controlled from a PC with a cross-platform UI written in Python.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 14](6bd0a083-df74-4572-9889-75aa841d792c.xhtml), *Choosing an RTOS
    API*, continues our high-level architecture discussion with a look at three different
    APIs available to use for accessing FreeRTOS functionality: the native FreeRTOS
    API, ARM''s CMSIS-RTOS, and POSIX. Discussion topics include a comparison of the
    available features and why you might choose one of the others for different projects.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 15](0f98e454-9804-4589-9854-5c38c9d8d416.xhtml), *FreeRTOS Memory
    Management*, takes a close look at a few different options for memory management
    in FreeRTOS. We''ll look at static versus dynamic allocation, as well as using
    a **Memory Protection Unit** (**MPU**).'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 16](19872ca7-d0fe-44e7-a4fc-1bdbfda87e59.xhtml), *Multi-Processor
    and Multi-Core Systems*, teaches you how multi-processor and multi-core systems
    are used for a variety of reasons – learn what they are and how to get the different
    parts of a system to communicate.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 17](50d2b6c3-9a4e-45c3-9bfc-1c7f58de0b98.xhtml), *Troubleshooting
    Tips and Next Steps*, covers tips for troubleshooting systems, including tips
    on how to avoid stack overflows and how to troubleshoot a hung system. Some recommendations
    for the next steps are also covered.'
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Every effort has been made to make working through the examples in this book
    as easy as possible for a very wide range of people.  To get the most out of the
    book (by working through the examples), you''ll need the following hardware:'
  prefs: []
  type: TYPE_NORMAL
- en: A Windows, macOS, or Linux PC with internet access
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An STM32 Nucleo-F767ZI development board
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two Micro-USB cables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jumper wires—20 to 22 AWG (~0.65 mm) solid core wire
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detailed setup instructions for the different tools used are included in the
    chapters.
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are using the digital version of this book, we advise you to type
    the code yourself or access the code via the GitHub repository (link available
    in the next section). Doing so will help you avoid any potential errors related
    to the copying and pasting of code.**'
  prefs: []
  type: TYPE_NORMAL
- en: Since this book targets programming low-level embedded systems, we'll be using
    C as the language of choice. Some knowledge of microcontrollers is assumed, as
    is the ability to read a datasheet. If you have a good understanding of the C
    language (or C++), then you should be comfortable reading this book – no previous
    RTOS knowledge is required. Since we'll be working with MCUs in an embedded system,
    there will be some occasional discussions on the hardware side as well, primarily
    dealing with features of MCUs and development boards. These topics will be covered
    in enough detail that someone with minimal hardware knowledge should be able to
    follow without too much difficulty. You should be comfortable interacting with
    and handling development hardware, although there isn't any actual assembly required.
  prefs: []
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download the example code files for this book from your account at [https://github.com/PacktPublishing/Hands-On-RTOS-with-Microcontrollers](https://github.com/PacktPublishing/Hands-On-RTOS-with-Microcontrollers).
    If you purchased this book elsewhere, you can visit [www.packtpub.com/support](https://www.packtpub.com/support) and
    register to have the files emailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download the code files by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in or register at [www.packt.com](http://www.packt.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Support tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Code Downloads.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the name of the book in the Search box and follow the onscreen instructions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the file is downloaded, please make sure that you unzip or extract the
    folder using the latest version of:'
  prefs: []
  type: TYPE_NORMAL
- en: WinRAR/7-Zip for Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zipeg/iZip/UnRarX for Mac
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7-Zip/PeaZip for Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code bundle for the book is also hosted on GitHub at [https://github.com/PacktPublishing/Hands-On-RTOS-with-Microcontrollers](https://github.com/PacktPublishing/Hands-On-RTOS-with-Microcontrollers). In
    case there's an update to the code, it will be updated on the existing GitHub
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: We also have other code bundles from our rich catalog of books and videos available
    at **[https://github.com/PacktPublishing/](https://github.com/PacktPublishing/)**.
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Download the color images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We also provide a PDF file that has color images of the screenshots/diagrams
    used in this book. You can download it here: [http://www.packtpub.com/sites/default/files/downloads/9781838826734_ColorImages.pdf](http://www.packtpub.com/sites/default/files/downloads/9781838826734_ColorImages.pdf).
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`CodeInText`: Indicates code words in text, database table names, folder names,
    filenames, file extensions, pathnames, dummy URLs, user input, and Twitter handles. Here
    is an example: "`func1()` is responsible for reading the value of a sensor and
    storing it in'
  prefs: []
  type: TYPE_NORMAL
- en: the `sensorReadings` array"
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Bold**: Indicates a new term, an important word, or words that you see onscreen.
    For example, words in menus or dialog boxes appear in the text like this. Here
    is an example: "Select System info from the Administration panel."'
  prefs: []
  type: TYPE_NORMAL
- en: Warnings or important notes appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Get in touch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome.
  prefs: []
  type: TYPE_NORMAL
- en: '**General feedback**: If you have questions about any aspect of this book, mention
    the book title in the subject of your message and email us at `customercare@packtpub.com`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Errata**: Although we have taken every care to ensure the accuracy of our
    content, mistakes do happen. If you have found a mistake in this book, we would
    be grateful if you would report this to us. Please visit [www.packtpub.com/support/errata](https://www.packtpub.com/support/errata),
    selecting your book, clicking on the Errata Submission Form link, and entering
    the details.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Piracy**: If you come across any illegal copies of our works in any form
    on the Internet, we would be grateful if you would provide us with the location
    address or website name. Please contact us at `copyright@packt.com` with a link
    to the material.'
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are interested in becoming an author**: If there is a topic that you
    have expertise in and you are interested in either writing or contributing to
    a book, please visit [authors.packtpub.com](http://authors.packtpub.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: Reviews
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Please leave a review. Once you have read and used this book, why not leave
    a review on the site that you purchased it from? Potential readers can then see
    and use your unbiased opinion to make purchase decisions, we at Packt can understand
    what you think about our products, and our authors can see your feedback on their
    book. Thank you!
  prefs: []
  type: TYPE_NORMAL
- en: For more information about Packt, please visit [packt.com](http://www.packt.com/).
  prefs: []
  type: TYPE_NORMAL
