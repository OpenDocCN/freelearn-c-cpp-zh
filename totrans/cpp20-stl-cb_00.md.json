["```cpp\ncout << \"hello, world\\n\";\n```", "```cpp\n#include <iostream>\nint main() {\n    std::cout << \"hello, world\\n\";\n}\n```", "```cpp\ntemplate<typename T>\nT add_em_up(T& lhs, T& rhs) {\n    return lhs + rhs;\n}\n```", "```cpp\nint a{ 72 };  // see braced initialization below\nint b{ 47 };\ncout << add_em_up<int>(a, b) << \"\\n\";\n```", "```cpp\nint add_em_up(int& lhs, int& rhs) {\n    return lhs + rhs;\n}\n```", "```cpp\nauto it = std::remove(vec1.begin(), vec1.end(), value);\nvec1.erase(it, vec1.end());\n```", "```cpp\nstd::erase(vec1, value);\n```", "```cpp\nstd::string name{ \"Jimi Hendrix\" };  // braced initialization\nstd::string name = \"Jimi Hendrix\";   // copy initialization\n```", "```cpp\nint x;      // uninitialized            bad  :(\nint x = 0;  // zero (copy constructed)  good :)\nint x{};    // zero (zero-initialized)  best :D\n```", "```cpp\nusing std::cout;    // cout is now sans prefix\ncout << \"Hello, Jimi!\\n\"; \n```", "```cpp\nusing namespace std;    // bad. don't do that. \ncout << \"Hello, Jimi!\\n\"; \n```", "```cpp\nstd::vector<std::pair<int,std::string>>::iterator\n```", "```cpp\ntypedef std::vector<std::pair<int,std::string>>::iterator vecit_t\n```", "```cpp\nusing vecit_t = std::vector<std::pair<int,std::string>>::iterator;\n```", "```cpp\ntemplate<typename T>\nusing v = std::vector<T>;\nv<int> x{};\n```", "```cpp\nvoid printc(const auto& c) {\n    for (auto i : c) {\n        std::cout << i << '\\n';\n    }\n}\n```", "```cpp\ntemplate<typename C>\nvoid printc(const C& c) {\n    for (auto i : c) {\n        std::cout << i << '\\n';\n    }\n}\n```", "```cpp\nint main() {\n    Frac f{ 5, 3 };\n    cout << format(\"Frac: {}\\n\", f);\n}\n```", "```cpp\nfor(uint64_t i{ 2 }; i < n / 2; ++i) {\n    if(n % i == 0) return false;\n}\n```", "```cpp\n$ ./producer-consumer\nGot 0 from the queue\nGot 1 from the queue\nGot 2 from the queue\nfinished!\n```"]