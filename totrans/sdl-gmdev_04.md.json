["```cpp\n#include<math.h>\nclass Vector2D\n{\npublic:\n  Vector2D(float x, float y): m_x(x), m_y(y) {}\n\n  float getX() { return m_x; }\n  float getY() { return m_y; }\n\n  void setX(float x) { m_x = x; }\n  void setY(float y) { m_y = y; }\nprivate:\n\n  float m_x;\n  float m_y;\n};\n```", "```cpp\nfloat length() { return sqrt(m_x * m_x + m_y * m_y); }\n```", "```cpp\nVector2D operator+(const Vector2D& v2) const\n{\n  return Vector2D(m_x + v2.m_x, m_y + v2.m_y);\n}\n\nfriend Vector2D& operator+=(Vector2D& v1, const Vector2D& v2)\n{\n  v1.m_x += v2.m_x;\n  v1.m_y += v2.m_y;\n\n  return v1;\n}\n```", "```cpp\nVector2D v1(10, 11);\nVector2D v2(35,25);\nv1 += v2;\nVector2D v3 = v1 + v2;\n```", "```cpp\nVector2D operator*(float scalar)\n{\n  return Vector2D(m_x * scalar, m_y * scalar);\n}\n\nVector2D& operator*=(float scalar)\n{\n  m_x *= scalar;\n  m_y *= scalar;\n\n  return *this;\n}\n```", "```cpp\nVector2D operator-(const Vector2D& v2) const\n{ \n  return Vector2D(m_x - v2.m_x, m_y - v2.m_y); \n}\n\nfriend Vector2D& operator-=(Vector2D& v1, const Vector2D& v2)\n{\n  v1.m_x -= v2.m_x;\n  v1.m_y -= v2.m_y;\n\n  return v1;\n}\n```", "```cpp\nVector2D operator/(float scalar)    \n{\n  return Vector2D(m_x / scalar, m_y / scalar);\n}\n\nVector2D& operator/=(float scalar)\n{\n  m_x /= scalar;\n  m_y /= scalar;\n\n  return *this;\n}\n```", "```cpp\nvoid normalize()\n{\n  float l = length();\n  if ( l > 0) // we never want to attempt to divide by 0\n  {\n    (*this) *= 1 / l;\n  }\n}\n\n```", "```cpp\n    #include \"Vector2D.h\"\n    ```", "```cpp\n    Vector2D m_position;\n    ```", "```cpp\n    SDLGameObject::SDLGameObject(const LoaderParams* pParams) : GameObject(pParams), m_position(pParams->getX(), pParams->getY())\n    {\n      m_width = pParams->getWidth();\n      m_height = pParams->getHeight();\n      m_textureID = pParams->getTextureID();\n\n      m_currentRow = 1;\n      m_currentFrame = 1;\n    }\n    ```", "```cpp\n    void SDLGameObject::draw()\n    {\n      TextureManager::Instance()->drawFrame(m_textureID, \n      (int)m_position.getX(), (int)m_position.getY(), m_width, \n      m_height, m_currentRow, m_currentFrame, \n      TheGame::Instance()->getRenderer());\n    }\n    ```", "```cpp\n    void Enemy::update()\n    {\n      m_position.setX(m_position.getX() + 1);\n      m_position.setY(m_position.getY() + 1);\n    }\n    ```", "```cpp\n    Vector2D m_velocity;\n    ```", "```cpp\n    SDLGameObject::SDLGameObject(const LoaderParams* pParams) : GameObject(pParams), m_position(pParams->getX(), pParams->getY()), m_velocity(0,0)\n    ```", "```cpp\n    void SDLGameObject::update()\n    {\n      m_position += m_velocity;\n    }\n    ```", "```cpp\n    void Player::update()\n    {\n      m_currentFrame = int(((SDL_GetTicks() / 100) % 6));\n\n      m_velocity.setX(1);\n\n      SDLGameObject::update();\n    }\n    ```", "```cpp\nVector2D m_acceleration;\n```", "```cpp\nvoid SDLGameObject::update()\n{\n  m_velocity += m_acceleration;\n  m_position += m_velocity;\n}\n```", "```cpp\nvoid Player::update()\n{\n  m_currentFrame = int(((SDL_GetTicks() / 100) % 6));\n\n  m_acceleration.setX(1);\n\n  SDLGameObject::update();\n}\n```", "```cpp\n    const int FPS = 60;\n    const int DELAY_TIME = 1000.0f / FPS;\n\n    int main()\n    {\n    ```", "```cpp\n    int main()\n    {\n        Uint32 frameStart, frameTime;\n    ```", "```cpp\n    while(TheGame::Instance()->running())\n    {\n      frameStart = SDL_GetTicks();\n\n      TheGame::Instance()->handleEvents();\n      TheGame::Instance()->update();\n      TheGame::Instance()->render();\n\n      frameTime = SDL_GetTicks() - frameStart;\n\n      if(frameTime< DELAY_TIME)\n      {\n        SDL_Delay((int)(DELAY_TIME - frameTime));\n      }\n    }\n    ```", "```cpp\n#include \"SDL.h\"\nclass InputHandler\n{\npublic:\n  static InputHandler* Instance()\n  {\n    if(s_pInstance == 0)\n    {\n      s_pInstance = new InputHandler();\n    }\n\n    return s_pInstance;\n  }\n\n  void update();\n  void clean();\n\nprivate:\n\n  InputHandler();\n  ~InputHandler() {}\n\n  static InputHandler* s_pInstance;\n};\ntypedef InputHandler TheInputHandler;\n```", "```cpp\n    void initialiseJoysticks();\n    bool joysticksInitialised() { \n    return m_bJoysticksInitialised; }\n    ```", "```cpp\n    std::vector<SDL_Joystick*> m_joysticks;\n    bool m_bJoysticksInitialised;\n    ```", "```cpp\n    void InputHandler::initialiseJoysticks()\n    {\n      if(SDL_WasInit(SDL_INIT_JOYSTICK) == 0)\n      {\n        SDL_InitSubSystem(SDL_INIT_JOYSTICK);\n      }\n\n      if(SDL_NumJoysticks() > 0)\n      {\n        for(int i = 0; i < SDL_NumJoysticks(); i++)\n        {\n          SDL_Joystick* joy = SDL_JoystickOpen(i);\n          if(SDL_JoystickOpened(i) == 1)\n          {\n            m_joysticks.push_back(joy);\n          }\n          else\n          {\n            std::cout << SDL_GetError();\n          }\n        }\n        SDL_JoystickEventState(SDL_ENABLE);\n        m_bJoysticksInitialised = true;\n\n        std::cout << \"Initialised \"<< m_joysticks.size() << \" \n        joystick(s)\";\n      }\n      else\n      {\n        m_bJoysticksInitialised = false;\n      }\n    }\n    ```", "```cpp\n    if(SDL_WasInit(SDL_INIT_JOYSTICK) == 0)\n    {\n      SDL_InitSubSystem(SDL_INIT_JOYSTICK);\n    }\n    ```", "```cpp\n    if(SDL_NumJoysticks() > 0)\n    {\n      for(int i = 0; i < SDL_NumJoysticks(); i++)\n      {\n        SDL_Joystick* joy = SDL_JoystickOpen(i);\n        if(SDL_JoystickOpened(i))\n        {\n          m_joysticks.push_back(joy);\n        }\n        else\n        {\n          std::cout << SDL_GetError();\n        }\n      }\n    }\n    ```", "```cpp\n    SDL_JoystickEventState(SDL_ENABLE);\n    m_bJoysticksInitialised = true;\n\n    std::cout << \"Initialised \" << m_joysticks.size() << \" joystick(s)\";\n\n    }\n    else\n    {\n      m_bJoysticksInitialised = false;\n    }\n    ```", "```cpp\n    void InputHandler::clean()\n    {\n      if(m_bJoysticksInitialised)\n      {\n        for(unsigned int i = 0; i < SDL_NumJoysticks(); i++)\n        {\n          SDL_JoystickClose(m_joysticks[i]);\n        }\n      }\n    }\n    ```", "```cpp\n    void InputHandler::update()\n    {\n      SDL_Event event;\n      while(SDL_PollEvent(&event))\n      {\n        if(event.type == SDL_QUIT)\n        {\n          TheGame::Instance()->quit();\n        }\n      }\n    }\n    ```", "```cpp\n    TheInputHandler::Instance()->initialiseJoysticks();\n    ```", "```cpp\n    void Game::handleEvents()\n    {\n      TheInputHandler::Instance()->update();\n    }\n    ```", "```cpp\n    TheInputHandler::Instance()->clean();\n    ```", "```cpp\n    Initialised x joystick(s)\n    ```", "```cpp\n    if(event.type == SDL_JOYAXISMOTION) // check the type value\n    {\n      int whichOne = event.jaxis.which; // get which controller\n    ```", "```cpp\nstd::vector<std::pair<Vector2D*, Vector2D*>> m_joystickValues;\n```", "```cpp\nfor(int i = 0; i < SDL_NumJoysticks(); i++)\n{\n  SDL_Joystick* joy = SDL_JoystickOpen(i);\n  if(SDL_JoystickOpened(i))\n  {\n    m_joysticks.push_back(joy);\n    m_joystickValues.push_back(std::make_pair(new \n    Vector2D(0,0),new Vector2D(0,0))); // add our pair\n  }\n  else\n  {\n    std::cout << SDL_GetError();\n  }\n}\n```", "```cpp\nint xvalue(int joy, int stick);\nint yvalue(int joy, int stick);\n```", "```cpp\nint InputHandler::xvalue(int joy, int stick);\n{\n  if(m_joystickValues.size() > 0)\n  {\n    if(stick == 1)\n    {\n      return m_joystickValues[joy].first->getX();\n    }\n    else if(stick == 2)\n    {\n      return m_joystickValues[joy].second->getX();\n    }\n  }\n  return 0;\n}\n\nint InputHandler::yvalue(int joy, int stick)\n{\n  if(m_joystickValues.size() > 0)\n  {\n    if(stick == 1)\n    {\n      return m_joystickValues[joy].first->getY();\n    }\n    else if(stick == 2)\n    {\n      return m_joystickValues[joy].second->getY();\n    }\n  }\n  return 0;\n}\n```", "```cpp\nSDL_Event event;\nwhile(SDL_PollEvent(&event))\n{\n  if(event.type == SDL_QUIT)\n  {\n    TheGame::Instance()->quit();\n  }\n\n  if(event.type == SDL_JOYAXISMOTION)\n  {\n    int whichOne = event.jaxis.which;\n\n    // left stick move left or right\n    if(event.jaxis.axis == 0)\n    {\n      if (event.jaxis.value > m_joystickDeadZone)\n      {\n        m_joystickValues[whichOne].first->setX(1);\n      }\n      else if(event.jaxis.value < -m_joystickDeadZone)\n      {\n        m_joystickValues[whichOne].first->setX(-1);\n      }\n      else\n      {\n        m_joystickValues[whichOne].first->setX(0);\n      }\n    }\n\n    // left stick move up or down\n    if(event.jaxis.axis == 1)\n    {\n      if (event.jaxis.value > m_joystickDeadZone)\n      {\n        m_joystickValues[whichOne].first->setY(1);\n      }\n      else if(event.jaxis.value < -m_joystickDeadZone)\n      {\n        m_joystickValues[whichOne].first->setY(-1);\n      }\n      else\n      {\n        m_joystickValues[whichOne].first->setY(0);\n      }\n    }\n\n    // right stick move left or right\n    if(event.jaxis.axis == 3)\n    {\n      if (event.jaxis.value > m_joystickDeadZone)\n      {\n        m_joystickValues[whichOne].second->setX(1);\n      }\n      else if(event.jaxis.value < -m_joystickDeadZone)\n      {\n        m_joystickValues[whichOne].second->setX(-1);\n      }\n      else\n      {\n        m_joystickValues[whichOne].second->setX(0);\n      }\n    }\n\n    // right stick move up or down\n    if(event.jaxis.axis == 4)\n    {\n      if (event.jaxis.value > m_joystickDeadZone)\n      {\n        m_joystickValues[whichOne].second->setY(1);\n      }\n      else if(event.jaxis.value < -m_joystickDeadZone)\n      {\n        m_joystickValues[whichOne].second->setY(-1);\n      }\n      else\n      {\n        m_joystickValues[whichOne].second->setY(0);\n      }\n    }\n  }\n}\n```", "```cpp\nint whichOne = event.jaxis.which;\n```", "```cpp\nm_joystickValues[whichOne]\n```", "```cpp\nif(event.jaxis.axis == 0) // â€¦1,3,4\n```", "```cpp\nconst int m_joystickDeadZone = 10000;\n```", "```cpp\n// left stick move left or right\n{\n  if (event.jaxis.value > m_joystickDeadZone)\n  {\n    m_joystickValues[whichOne].first->setX(1);\n  }\n  else if(event.jaxis.value < -m_joystickDeadZone)\n  {\n    m_joystickValues[whichOne].first->setX(-1);\n  }\n  else\n  {\n    m_joystickValues[whichOne].first->setX(0);\n  }\n}\n```", "```cpp\nprivate:\n\nvoid handleInput();\n```", "```cpp\nvoid Player::handleInput()\n{\n  if(TheInputHandler::Instance()->joysticksInitialised())\n  {\n    if(TheInputHandler::Instance()->xvalue(0, 1) > 0 || \n    TheInputHandler::Instance()->xvalue(0, 1) < 0)\n    {\n      m_velocity.setX(1 * TheInputHandler::Instance()->xvalue(0, \n      1));\n    }\n\n    if(TheInputHandler::Instance()->yvalue(0, 1) > 0 || \n    TheInputHandler::Instance()->yvalue(0, 1) < 0)\n    {\n      m_velocity.setY(1 * TheInputHandler::Instance()->yvalue(0, \n      1));\n    }\n\n    if(TheInputHandler::Instance()->xvalue(0, 2) > 0 || \n    TheInputHandler::Instance()->xvalue(0, 2) < 0)\n    {\n      m_velocity.setX(1 * TheInputHandler::Instance()->xvalue(0, \n      2));\n    }\n\n    if(TheInputHandler::Instance()->yvalue(0, 2) > 0 || \n    TheInputHandler::Instance()->yvalue(0, 2) < 0)\n    {\n      m_velocity.setY(1 * TheInputHandler::Instance()->yvalue(0, \n      2));\n    }\n\n  }\n}\n```", "```cpp\nvoid Player::update()\n{\n  m_velocity.setX(0);\n  m_velocity.setY(0);\n\n  handleInput(); // add our function\n\n  m_currentFrame = int(((SDL_GetTicks() / 100) % 6));\n\n  SDLGameObject::update();\n}\n```", "```cpp\nif(TheInputHandler::Instance()->xvalue(0, 1) > 0 || TheInputHandler::Instance()->xvalue(0, 1) < 0)\n{\n  m_velocity.setX(1 * TheInputHandler::Instance()->xvalue(0, 1));\n}\n```", "```cpp\nstd::vector<std::vector<bool>> m_buttonStates;\n```", "```cpp\nbool getButtonState(int joy, int buttonNumber)\n{\n  return m_buttonStates[joy][buttonNumber];\n}\n```", "```cpp\nfor(int i = 0; i < SDL_NumJoysticks(); i++)\n{\n  SDL_Joystick* joy = SDL_JoystickOpen(i);\n  if(SDL_JoystickOpened(i))\n  {\n    m_joysticks.push_back(joy);\n    m_joystickValues.push_back(std::make_pair(new \n    Vector2D(0,0),new Vector2D(0,0)));\n\n    std::vector<bool> tempButtons;\n\n    for(int j = 0; j < SDL_JoystickNumButtons(joy); j++)\n    {\n      tempButtons.push_back(false);\n    }\n\n    m_buttonStates.push_back(tempButtons);\n  }\n}\n```", "```cpp\nif(event.type == SDL_JOYBUTTONDOWN)  \n{\n  int whichOne = event.jaxis.which;\n\n  m_buttonStates[whichOne][event.jbutton.button] = true;\n}\n\nif(event.type == SDL_JOYBUTTONUP)\n{\n  int whichOne = event.jaxis.which;\n\n  m_buttonStates[whichOne][event.jbutton.button] = false;\n}\n```", "```cpp\nif(TheInputHandler::Instance()->getButtonState(0, 3))\n{\n  m_velocity.setX(1);\n}\n```", "```cpp\nstd::vector<bool> m_mouseButtonStates;\n```", "```cpp\nfor(int i = 0; i < 3; i++)\n{\n  m_mouseButtonStates.push_back(false);\n}\n```", "```cpp\nenum mouse_buttons\n{\n    LEFT = 0,\n    MIDDLE = 1,\n    RIGHT = 2\n};\n```", "```cpp\nif(event.type == SDL_MOUSEBUTTONDOWN)\n{\n  if(event.button.button == SDL_BUTTON_LEFT)\n  {\n    m_mouseButtonStates[LEFT] = true;\n  }\n\n  if(event.button.button == SDL_BUTTON_MIDDLE)\n  {\n    m_mouseButtonStates[MIDDLE] = true;\n  }\n\n  if(event.button.button == SDL_BUTTON_RIGHT)\n  {\n    m_mouseButtonStates[RIGHT] = true;\n  }\n}\n\nif(event.type == SDL_MOUSEBUTTONUP)\n{\n  if(event.button.button == SDL_BUTTON_LEFT)\n  {\n    m_mouseButtonStates[LEFT] = false;\n  }\n\n  if(event.button.button == SDL_BUTTON_MIDDLE)\n  {\n    m_mouseButtonStates[MIDDLE] = false;\n  }\n\n  if(event.button.button == SDL_BUTTON_RIGHT)\n  {\n    m_mouseButtonStates[RIGHT] = false;\n  }\n}\n```", "```cpp\nbool getMouseButtonState(int buttonNumber)\n{\n  return m_mouseButtonStates[buttonNumber];\n}\n```", "```cpp\nif(TheInputHandler::Instance()->getMouseButtonState(LEFT))\n{\n  m_velocity.setX(1);\n}\n```", "```cpp\nVector2D* m_mousePosition;\n```", "```cpp\nVector2D* getMousePosition()\n{\n  return m_mousePosition;\n}\n```", "```cpp\nif(event.type == SDL_MOUSEMOTION)\n{\n  m_mousePosition->setX(event.motion.x);\n  m_mousePosition->setY(event.motion.y);\n}\n```", "```cpp\nVector2D* vec = TheInputHandler::Instance()->getMousePosition();\n\nm_velocity = (*vec - m_position) / 100;\n```", "```cpp\nSDL_GetKeyboardState(int* numkeys)\n```", "```cpp\nUint8* m_keystate;\n```", "```cpp\nm_keystates = SDL_GetKeyboardState(0);\n```", "```cpp\nbool InputHandler::isKeyDown(SDL_Scancode key)\n{\n  if(m_keystates != 0)\n  {\n    if(m_keystates[key] == 1)\n    {\n      return true;\n    }\n    else\n    {\n      return false;\n    }\n  }\n\n  return false;\n}\n```", "```cpp\nif(TheInputHandler::Instance()->isKeyDown(SDL_SCANCODE_RIGHT))\n{\n  m_velocity.setX(2);\n}\n\nif(TheInputHandler::Instance()->isKeyDown(SDL_SCANCODE_LEFT))\n{\n  m_velocity.setX(-2);\n}\n\nif(TheInputHandler::Instance()->isKeyDown(SDL_SCANCODE_UP))\n{\n  m_velocity.setY(-2);\n}\n\nif(TheInputHandler::Instance()->isKeyDown(SDL_SCANCODE_DOWN))\n{\n  m_velocity.setY(2);\n}\n```", "```cpp\n// private functions to handle different event types\n\n// handle keyboard events\nvoid onKeyDown();\nvoid onKeyUp();\n\n// handle mouse events\nvoid onMouseMove(SDL_Event& event);\nvoid onMouseButtonDown(SDL_Event& event);\nvoid onMouseButtonUp(SDL_Event& event);\n\n// handle joysticks events\nvoid onJoystickAxisMove(SDL_Event& event);\nvoid onJoystickButtonDown(SDL_Event& event);\nvoid onJoystickButtonUp(SDL_Event& event);\n```", "```cpp\nvoid InputHandler::update()\n{\n  SDL_Event event;\n  while(SDL_PollEvent(&event))\n  {\n    switch (event.type)\n    {\n    case SDL_QUIT:\n      TheGame::Instance()->quit();\n    break;\n\n    case SDL_JOYAXISMOTION:\n      onJoystickAxisMove(event);\n    break;\n\n    case SDL_JOYBUTTONDOWN:\n      onJoystickButtonDown(event);\n    break;\n\n    case SDL_JOYBUTTONUP:\n      onJoystickButtonUp(event);\n    break;\n\n    case SDL_MOUSEMOTION:\n      onMouseMove(event);\n    break;\n\n    case SDL_MOUSEBUTTONDOWN:\n      onMouseButtonDown(event);\n    break;\n\n    case SDL_MOUSEBUTTONUP:\n      onMouseButtonUp(event);\n    break;\n\n    case SDL_KEYDOWN:\n      onKeyDown();\n    break;\n\n    case SDL_KEYUP:\n      onKeyUp();\n    break;\n\n    default:\n    break;\n    }\n  }\n}\n```", "```cpp\nvoid InputHandler::onMouseButtonDown(SDL_Event& event)\n{\n  if(event.button.button == SDL_BUTTON_LEFT)\n  {\n    m_mouseButtonStates[LEFT] = true;\n  }\n\n  if(event.button.button == SDL_BUTTON_MIDDLE)\n  {\n    m_mouseButtonStates[MIDDLE] = true;\n  }\n\n  if(event.button.button == SDL_BUTTON_RIGHT)\n  {\n    m_mouseButtonStates[RIGHT] = true;\n  }\n}\n```"]