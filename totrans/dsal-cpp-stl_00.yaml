- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Welcome to *Data Structures and Algorithms with the C++ STL*, a resource that
    aims to deepen your understanding of data structures and algorithms using the
    robust tools provided by the C++ `std::vector`, advanced usage of sequence and
    associative containers, in-depth discussions on STL algorithms and their enhancements
    with modern C++ features, and a penetrating look at creating STL-compatible types
    and algorithms.
  prefs: []
  type: TYPE_NORMAL
- en: 'The book is structured into five parts, each focusing on a different aspect
    of STL. *Part 1*, *Mastering std::vector*, details the fundamental usage of vectors
    and their manipulation with STL algorithms. *Part 2*, *Understanding STL Data
    Structures*, expands your repertoire with sequence, ordered and unordered associative
    containers, and container adaptors. *Part 3*, *Mastering STL Algorithms*, provides
    comprehensive coverage of fundamental, numeric, and range-based algorithms, focusing
    on best practices. *Part 4*, *Creating STL-Compatible Types & Algorithms*, guides
    you through developing your own types and algorithms that integrate seamlessly
    with STL. Lastly, *Part 5*, *STL Data Structures and Algorithms: Under the Hood*,
    offers advanced insights into exception safety, thread safety, concurrency, and
    the interactions of STL with the latest C++ features such as concepts and coroutines.'
  prefs: []
  type: TYPE_NORMAL
- en: Each chapter is structured to build on previously introduced concepts, ensuring
    a cohesive learning experience. By the end of this book, you should be proficient
    in the practical application of the STL, equipped to tackle modern software challenges
    with confidence and expertise. Let us embark on this journey not only to understand
    the mechanics of the STL but also to appreciate its elegance and power in crafting
    exceptional C++ software.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is crafted for intermediate-level C++ developers who wish to refine
    their skills and knowledge in applying STL components to solve complex problems
    efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*Chapter 1*](B21945_01.xhtml#_idTextAnchor015), *The Basics of std::vector*,
    introduces `std::vector`, comparing it with C-style arrays, and demonstrates its
    declaration, initialization, and element manipulation.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 2*](B21945_02.xhtml#_idTextAnchor035), *Mastering Iterators with
    std::vector*, explores the different types of iterators in the STL and their application
    within `std::vector` contexts, including custom iterator creation.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 3*](B21945_03.xhtml#_idTextAnchor064), *Mastering Memory and Allocators
    with std::vector*, discusses vector capacity versus size, memory optimization
    techniques, and the design of custom allocators for enhanced performance.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B21945_04.xhtml#_idTextAnchor093), *Mastering Algorithms with
    std::vector*, delves into algorithmic operations on vectors, such as sorting and
    searching, and the importance of understanding iterator invalidation.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B21945_05.xhtml#_idTextAnchor125), *Making the Case for std::vector*,
    examines the performance aspects, practical applications, and versatility of `std::vector`
    as a go-to STL container.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B21945_06.xhtml#_idTextAnchor142), *Advanced Sequence Container
    Usage*, analyzes advanced usage scenarios and best practices for sequence containers
    like `std::array`, `std::deque`, and others.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B21945_07.xhtml#_idTextAnchor235), *Advanced Ordered Associative
    Container Usage*, explores the intricacies of ordered associative containers such
    as `std::set` and `std::map` and their unique performance considerations.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B21945_08.xhtml#_idTextAnchor298), *Advanced Unordered Associative
    Container Usage*, investigates unordered associative containers, highlighting
    their internal workings and use cases.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B21945_09.xhtml#_idTextAnchor361), *Advanced Container Adaptor
    Usage*, focuses on container adaptors like `std::stack` and `std::queue`, discussing
    their implementation and when to use them effectively.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 10*](B21945_10.xhtml#_idTextAnchor465), *Advanced Container View
    Usage,* introduces container views such as `std::span` and `std::mdspan`, providing
    insights into their utility and performance benefits.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 11*](B21945_11.xhtml#_idTextAnchor498), *Fundamental Algorithms and
    Searching*, Covers the foundational algorithms for sorting and searching within
    STL and their practical applications.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 12*](B21945_12.xhtml#_idTextAnchor507), *Manipulation and Transformation*,
    Details the techniques for transforming data within STL containers, including
    the nuances of copying, moving, and removing elements.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 13*](B21945_13.xhtml#_idTextAnchor530), *Numeric and Range-Based
    Operations*, Explores numeric operations and their applications on ranges, demonstrating
    how they can optimize algorithmic complexity.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 14*](B21945_14.xhtml#_idTextAnchor542), *Permutations, Partitions,
    and Heaps*, Provides an in-depth look at data organization algorithms, such as
    partitioning and heap operations, within the STL.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 15*](B21945_15.xhtml#_idTextAnchor563), *Modern STL with Ranges*,
    Discusses the modern approach to STL with ranges, enhancing the composability
    and efficiency of algorithms.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 16*](B21945_16.xhtml#_idTextAnchor590), *Creating STL-Types Containers*,
    Guides through the creation of custom containers that are compatible with STL
    algorithms and the essential components required for full integration.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 17*](B21945_17.xhtml#_idTextAnchor636), *Creating STL-Compatible
    Algorithms*, Details the development of custom algorithms that work seamlessly
    with STL containers and adhere to STL principles.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 18*](B21945_18.xhtml#_idTextAnchor658), *Type Traits and Policies*,
    Delves into the advanced topics of type traits and policies, key in crafting adaptable
    and efficient template code.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 19*](B21945_19.xhtml#_idTextAnchor679), *Exception Safety*, Examines
    the levels of exception safety guaranteed by STL and how to write robust STL-compatible
    code with noexcept.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 20*](B21945_20.xhtml#_idTextAnchor696), *Thread Safety and Concurrency
    with the STL*, Discusses the concurrency and thread safety features of STL containers,
    the prevention of race conditions, and best practices for multithreaded programming.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 21*](B21945_21.xhtml#_idTextAnchor745), *STL Interaction with Concepts
    and Coroutines*, Explores the interaction between STL and the latest C++ features
    like concepts and coroutines, showcasing their synergy.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 22*](B21945_22.xhtml#_idTextAnchor762), *Parallel Algorithms with
    the STL*, Introduces execution policies for parallel algorithms in STL, the role
    of constexpr, and the considerations for performance and efficiency.'
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before embarking on this book, readers should have a firm grasp of fundamental
    C++ programming concepts, such as syntax, control structures, and basic object-oriented
    principles. An understanding of pointers, memory management, and template basics
    is also assumed, as these are foundational to effectively utilizing the STL. The
    book presumes familiarity with C++11 standard features, as many examples and explanations
    rely on this version of the language or newer. Moreover, a basic knowledge of
    data structures such as arrays and linked lists, as well as classic algorithms,
    will be beneficial for following the advanced topics discussed within.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Software/hardware covered in** **the book** | **Operating** **system requirements**
    |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| C++ | Windows, macOS, or Linux |'
  prefs: []
  type: TYPE_TB
- en: '| C++ STL |  |'
  prefs: []
  type: TYPE_TB
- en: '**If you are using the digital version of this book, we advise you to type
    the code yourself or access the code from the book’s GitHub repository (a link
    is available in the next section). Doing so will help you avoid any potential
    errors related to the copying and pasting** **of code.**'
  prefs: []
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download the example code files for this book from GitHub at . If there’s
    an update to the code, it will be updated in the GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: We also have other code bundles from our rich catalog of books and videos available
    at [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/).
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`Code in text`: Indicates code words in text, database table names, folder
    names, filenames, file extensions, pathnames, dummy URLs, user input, and Twitter
    handles. Here is an example: “This is where the genius of std::vector shines;
    over-allocating reduces the need for frequent and, potentially, computationally
    costly reallocations.”'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Tips or important notes
  prefs: []
  type: TYPE_NORMAL
- en: Appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Get in touch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome.
  prefs: []
  type: TYPE_NORMAL
- en: '**General feedback**: If you have questions about any aspect of this book,
    email us at [customercare@packtpub.com](mailto:customercare@packtpub.com) and
    mention the book title in the subject of your message.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Errata**: Although we have taken every care to ensure the accuracy of our
    content, mistakes do happen. If you have found a mistake in this book, we would
    be grateful if you would report this to us. Please visit [www.packtpub.com/support/errata](http://www.packtpub.com/support/errata)
    and fill in the form.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Piracy**: If you come across any illegal copies of our works in any form
    on the internet, we would be grateful if you would provide us with the location
    address or website name. Please contact us at [copyright@packt.com](mailto:copyright@packt.com)
    with a link to the material.'
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are interested in becoming an author**: If there is a topic that you
    have expertise in and you are interested in either writing or contributing to
    a book, please visit [authors.packtpub.com](http://authors.packtpub.com)'
  prefs: []
  type: TYPE_NORMAL
- en: Share Your Thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you’ve read *Data Structures and Algorithms with the C++ STL*, we’d love
    to hear your thoughts! Please [click here to go straight to the Amazon review
    page](https://packt.link/r/1835468551) for this book and share your feedback.
  prefs: []
  type: TYPE_NORMAL
- en: Your review is important to us and the tech community and will help us make
    sure we’re delivering excellent quality content.
  prefs: []
  type: TYPE_NORMAL
- en: Download a free PDF copy of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thanks for purchasing this book!
  prefs: []
  type: TYPE_NORMAL
- en: Do you like to read on the go but are unable to carry your print books everywhere?
  prefs: []
  type: TYPE_NORMAL
- en: Is your eBook purchase not compatible with the device of your choice?
  prefs: []
  type: TYPE_NORMAL
- en: Don’t worry, now with every Packt book you get a DRM-free PDF version of that
    book at no cost.
  prefs: []
  type: TYPE_NORMAL
- en: Read anywhere, any place, on any device. Search, copy, and paste code from your
    favorite technical books directly into your application.
  prefs: []
  type: TYPE_NORMAL
- en: The perks don’t stop there, you can get exclusive access to discounts, newsletters,
    and great free content in your inbox daily
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these simple steps to get the benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: Scan the QR code or visit the link below
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B21945_QR_Free_PDF.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[https://packt.link/free-ebook/978-1-83546-855-5](https://packt.link/free-ebook/978-1-83546-855-5)'
  prefs: []
  type: TYPE_NORMAL
- en: Submit your proof of purchase
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That’s it! We’ll send your free PDF and other benefits to your email directly
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Part 1: Mastering std::vector'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this Part, we will build our knowledge of C++ `std::vector`. We will start
    with introducing `std::vector`, contrasting it with traditional C-style arrays,
    and covering essential operations such as initializing, accessing, and modifying
    elements. We then advance to the intricacies of iterators, revealing their types
    and uses in `std::vector` operations and the elegance of range-based for loops.
    Memory management is demystified by constructing an understanding of optimizing
    the allocation and deallocation of resources, including an introduction to creating
    custom allocators. The section then builds into applying algorithms to sort, search,
    and manipulate vector contents efficiently, emphasizing the role of custom comparators
    and the importance of understanding iterator invalidation. The final chapter encapsulates
    the performance considerations and practical applications of `std::vector`, cementing
    its status as the default container choice for C++ developers.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part has the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 1*](B21945_01.xhtml#_idTextAnchor015)*: The Basics of std::vector*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 2*](B21945_02.xhtml#_idTextAnchor035)*: Mastering Iterators with
    std::vector*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 3*](B21945_03.xhtml#_idTextAnchor064)*: Mastering Memory and Allocators
    with std::vector*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B21945_04.xhtml#_idTextAnchor093)*: Mastering Algorithms with
    std::vector*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B21945_05.xhtml#_idTextAnchor125)*: Making a Case for std::vector*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
