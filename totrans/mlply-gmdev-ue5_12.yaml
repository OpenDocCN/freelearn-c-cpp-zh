- en: '12'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Managing Multiplayer Sessions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you already know from previous chapters, a game session is represented by
    a server with multiple players all connected to it.
  prefs: []
  type: TYPE_NORMAL
- en: Unreal Engine provides a solid framework for creating, destroying, and handling
    game sessions. By having a strong grip on how to handle a multiplayer session,
    programmers can ensure their games will provide a nice and flawless experience
    to all players involved.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will be presented with the main concepts needed to manage
    a game session, starting from the basic setup to creating one. Then, you’ll learn
    how to let clients search for available sessions and how to join them. By the
    end of this chapter, you will have built a user interface that will be used later
    to handle the Unreal Engine multiplayer session system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Through the next few sections, I will present the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding game sessions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing a project game session
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a session
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Joining a session
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To follow the topics presented in this chapter, you should have completed [*Chapter
    11*](B18203_11.xhtml#_idTextAnchor215), *Debugging a Multiplayer Game*, and understood
    its content.
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, if you would prefer to begin with code from the companion repository
    for this book, you can download the `.zip` project files provided in this book’s
    companion project repository: [https://github.com/PacktPublishing/Multiplayer-Game-Development-with-Unreal-Engine-5](https://github.com/PacktPublishing/Multiplayer-Game-Development-with-Unreal-Engine-5).'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the files that are up to date with the end of the previous
    chapter by clicking the `Unreal Shadows –` [*Chapter 11*](B18203_11.xhtml#_idTextAnchor215)`End`
    link.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding game sessions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: During a **game session**, players can participate in online games by connecting
    to remote servers or even using their computers as dedicated servers. The Unreal
    Engine game session system offers a wide range of impressive online capabilities,
    such as a server browser, player limits, server search over the network, and much
    more. It’s easy to use and only requires a few commands to activate. Whether running
    on a player’s machine or a dedicated server, game sessions provide a way for players
    to connect and immerse themselves in the virtual world of the game. In this chapter,
    we will focus on setting up a local network environment, leaving the dedicated
    server setup to the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: However, before we begin working on sessions, I need to introduce you to the
    Online Subsystem and its unique characteristics.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the Online Subsystem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Unreal Engine, the **Online Subsystem** is a system that offers a standard
    method of accessing the features of online services such as Epic Online Services,
    Steam, Xbox Live, and others. This is especially useful in game development scenarios
    where multiple platforms or online services are supported. In such cases, the
    Online Subsystem eliminates the need for developers to make code changes by enabling
    the use of configuration adjustments for each supported service. This ensures
    that the coding process and development efforts are streamlined, efficient, and
    consistent across all supported platforms and services.
  prefs: []
  type: TYPE_NORMAL
- en: The core purpose of the Online Subsystem is to manage asynchronous communication
    with a diverse range of online platforms. As network speeds, server delays, and
    backend service runtimes are typically unknown to local machines, interactions
    with such systems are highly unpredictable in terms of duration. To address this
    issue, the Online Subsystem leverages delegates for all remote operations, ensuring
    that they are always executed when any supported asynchronous feature is utilized.
    Delegates serve a dual purpose by enabling the system to respond to requests as
    they complete, as well as allowing developers to query runtime requests. By providing
    a single code path to follow, delegates negate the need for developers to write
    custom code to handle various success or failure conditions.
  prefs: []
  type: TYPE_NORMAL
- en: Supported features are grouped into service-specific, modular interfaces. For
    instance, the **Leaderboard** interface encompasses all aspects related to leaderboard
    access – such as the ability to register personal scores or times, as well as
    check the leaderboards for scores from players across the globe or within your
    friends’ lists – while the **Purchase** interface covers the process of making
    in-game purchases and handling past purchases history. Each feature set on every
    supported online service has an associated interface, allowing developers to write
    code that is agnostic to the online service being employed, promoting consistency
    across services.
  prefs: []
  type: TYPE_NORMAL
- en: 'Epic Games provides a list of plugins that allow developers to work on the
    Online Subsystem, including dedicated plugins for the most common and used platforms.
    *Figure 12**.1* shows a portion of the many elements available in Unreal Engine’s
    **Plugins** | **Online** **Platform** section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.1 – Some of the available Online Subsystem plugins](img/Figure_12_01_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.1 – Some of the available Online Subsystem plugins
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will use the default Online Subsystem, which offers the
    most basic operations to handle a session, including its creation, destruction,
    and joining. In [*Chapter 15*](B18203_15.xhtml#_idTextAnchor288), *Adding Epic
    Online Services (EOS)*, we’ll dive into more detail regarding more advanced Online
    Subsystem features. Let’s start by learning how to manage the most basic session
    operations.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding session commands
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So, how can a multiplayer session be managed and operated? There are four main
    operations you can use to handle a session:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Create Session**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Destroy Session**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Find Session**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Join Session**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s take a closer look at each of them and analyze them in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Create Session
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **Create Session** command constitutes the starting point of the session
    process. Once a session is created successfully, it becomes discoverable by other
    instances of the game, which can subsequently join it. The **Create Session**
    command allows you to specify key aspects, such as the number of players allowed
    in the session itself and LAN mode, which lets you manage an internet-based game
    or a LAN game.
  prefs: []
  type: TYPE_NORMAL
- en: Destroy Session
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are hosting a session (that is, you created a session), **Destroy Session**
    will close it so that it is no longer available for discovery and joining. Connected
    clients will be immediately disconnected from the session. If you are a client
    who’s connected to a session, calling this command is the way to go to leave the
    session and, consequently, the game.
  prefs: []
  type: TYPE_NORMAL
- en: Find Session
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By using the **Find Session** command, you can retrieve a comprehensive list
    of currently created and accessible game sessions. Upon a successful call of this
    method, the returned objects can be queried to obtain important information such
    as the server’s name, ping, and player count. As for the **Create Session** command,
    you can opt for an internet-based game or a LAN-based one.
  prefs: []
  type: TYPE_NORMAL
- en: Join Session
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: After identifying the desired session, you can initiate a **Join Session** call
    to join the game. Upon successful connection to the server, the game will automatically
    transition to the server’s map and allow you to participate in the ongoing gameplay.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding connection errors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you already know, network operations always pose the risk of encountering
    errors, and it’s critical for games to handle them appropriately. Instances such
    as the host leaving the session (or crashing), temporary internet connection issues,
    or other unforeseen problems are common examples.
  prefs: []
  type: TYPE_NORMAL
- en: Any failures associated with the aforementioned session functions will be communicated
    through appropriate events or, in the case of Blueprints, dedicated execution
    pins, allowing the developer to configure the game response accordingly. This
    will guarantee a positive experience for the players, even during critical situations.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have a grasp of how to make and oversee multiplayer game sessions,
    let’s head back into Unreal Engine and apply this knowledge to our project! In
    the next few sections, you will create a user interface that lets you host a session
    and expose it to the network or join one.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing a project game session
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter and the next, we will create a new level that will serve as
    a starting point for your game and will let players host a session or join one.
    As mentioned previously, in this chapter, we will focus on creating a LAN-hosted
    game – this means that all players will be connected to the same local network
    – leaving the trickier details of hosting a game over the internet to the next
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The level will be pretty simple and will contain the following elements:'
  prefs: []
  type: TYPE_NORMAL
- en: 'A user interface widget that will do the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let the player create and host a session
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Let the player find and join hosted sessions
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A 3D model of the character that the player will use to change skin colors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, we will focus on creating the user interface – including all
    the needed widgets – leaving the level creation and the skin handling to the next
    one.
  prefs: []
  type: TYPE_NORMAL
- en: This interface will concentrate on the primary session functions and not on
    its visual aspect. However, you can decide on the style and look based on your
    personal preference – just let your creativity run free!
  prefs: []
  type: TYPE_NORMAL
- en: To create our user interface, we will use UMG again – you used it in [*Chapter
    6*](B18203_06.xhtml#_idTextAnchor125), *Replicating Properties* *O**ver the Network*.
    One of the main advantages of using the UMG system is that you can create a custom
    widget and use it to compose the full interface. This will let you separate elements
    into logical blocks and keep the overall system clean and reusable.
  prefs: []
  type: TYPE_NORMAL
- en: We will start by creating the needed elements for creating and joining a session.
    By the end of this chapter, we will put everything together in a main menu interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, we will need four main components:'
  prefs: []
  type: TYPE_NORMAL
- en: A **Create Session** widget, which will help us in handling the session creation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A **Find Sessions** widget, which will let us look for available sessions and
    list them in the user interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A **Session Item Renderer** widget, which will be used to show each session’s
    information and will let us join a session
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A **Main Menu** widget, which will let us display the previous widgets on the
    screen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s start creating these widgets by opening the Unreal project and navigating
    to the `Content` | `Blueprints` folder. The first widget we will be adding is
    **Create Session**.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a session
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, you will be creating a user interface widget that will let
    you manage session creation. In particular, the **Create Session** widget will
    do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Let the player select how many players are allowed to connect in a single session
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create the session with the click of a button
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Open the game level and start the game
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The first thing we must do is create the actual widget so, in the `Blueprints`
    folder of the Content Browser, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Right-click and select **User Interface** | **Widget Blueprint**. In the pop-up
    window that appears, select **User Widget**, as shown in *Figure 12**.2*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.2 – The user widget creation window](img/Figure_12_02_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.2 – The user widget creation window
  prefs: []
  type: TYPE_NORMAL
- en: Name the newly created widget `WB_CreateSession` and double-click on it to open
    it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we will add the visual elements.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the visual elements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once the editor is open, select the **Designer** view and do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: From the `CreateSessionPanel`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the `Background`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its `(0, 0,` `0, 0.4)`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'While holding the *Ctrl* and *Shift* keys, click the **Anchors** drop-down
    menu and select the bottom-right button to make the background stretch over the
    entirety of the **Canvas** panel. The selection button is shown in *Figure 12.3*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.3 – The background anchors selection](img/Figure_12_03_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.3 – The background anchors selection
  prefs: []
  type: TYPE_NORMAL
- en: From the `Container`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: While holding the *Ctrl* and *Shift* keys, click the **Anchors** drop-down menu
    and select the bottom-right button to make the background stretch over the entirety
    of the **Canvas** panel
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At this point, you have created the container for the widget – nothing fancy,
    but it’s fully functional. The widget hierarchy can be seen in *Figure 12**.4*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.4 – The partial CreateSession widget hierarchy](img/Figure_12_04_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.4 – The partial CreateSession widget hierarchy
  prefs: []
  type: TYPE_NORMAL
- en: 'We are now going to add the working elements that will allow the player to
    create the session. To do so, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: From the `TitleLabel`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its `5.0`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **Text** property to **Create Session**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the `Separator`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its `10.0`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the `MaxPlayersLabel`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its `5.0`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **Text** property to **Max Players**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the `MaxPlayersSpinBox`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its `10.0`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable the `1`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable the `5`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set both `0`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-check that the **Is Variable** checkbox is selected
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the `CreateSessionBtn`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its `5.0`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-check that the **Is Variable** checkbox is selected
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the `CreateSessionLabel`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Text** property to **Create**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Justification** property to **Align** **Text Center**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The final structure of the widget is shown in *Figure 12**.5*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.5 – The final CreateSession widget hierarchy](img/Figure_12_05_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.5 – The final CreateSession widget hierarchy
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Designer** view for the widget is shown in *Figure 12**.6*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.6 – The Designer view of the CreateSession widget](img/Figure_12_06_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.6 – The Designer view of the CreateSession widget
  prefs: []
  type: TYPE_NORMAL
- en: With this layout, the player will be able to select the maximum number of players
    hosted in a session and start the session itself.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the Visual Scripting logic
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that the visual part of the widget is finished, you can start adding the
    Visual Scripting logic. Open the **Graph** panel by clicking the **Graph** button
    and, in the **Variables** panel, you should already have two variables – **CreateSessionBtn**
    and **MaxPlayersSpinBox**. Then, complete the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Add a new variable of the `MaxPlayers`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **MaxPlayersSpinBox** variable and, in the **Events** panel, click
    on the **On Value Changed +** button to create an event.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **CreateSessionBtn** variable and, in the **Events** panel, click
    on the **On Clicked +** button to create an event.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The previous steps will create two events that will handle the corresponding
    user interactions, as shown in *Figure 12**.7*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.7 – The CreateSession graph events](img/Figure_12_07_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.7 – The CreateSession graph events
  prefs: []
  type: TYPE_NORMAL
- en: 'We will start by handling the spin box change event, which will simply have
    to assign its value to the **MaxConnections** variable. To do so, follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: From the **Variables** panel, drag a **Set Max** **Players** node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the outgoing execution pin of the **On Value Changed (MaxPlayersSpinBox)**
    event to the incoming execution pin of the **Set Max** **Players** node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the **In Value** pin of the event node to the **Max Players** pin of
    the **Set** node. This will automatically create a **Truncate** node to convert
    the spin box float value into an integer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The final result of this part of the graph is shown in *Figure 12**.8*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.8 – The spin box Event Graph](img/Figure_12_08_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.8 – The spin box Event Graph
  prefs: []
  type: TYPE_NORMAL
- en: We can now start working on the session creation part of the graph, which will
    be fired whenever the **CreateSessionBtn** button is clicked.
  prefs: []
  type: TYPE_NORMAL
- en: Add a **Create Session** node and a **Get Player Controller** node to the graph.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Variables** panel, drag a **Get Max** **Players** node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the outgoing execution pin of the **On Clicked (CreateSessionBtn)**
    event to the incoming execution pin of the **Create** **Session** node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the **Return Value** pin of the **Get Player Controller** node to the
    **Player Controller** pin of the **Create** **Session** node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the outgoing pin of the **Max Players** node to the **Public Connections**
    pin of the **Create** **Session** node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable the **Use LAN** checkbox of the **Create** **Session** node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add an `Level_01` to the `listen` to the **Options** input field to open the
    level as a listen server
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the **On Success** execution pin of the **Create Session** node to the
    incoming execution pin of the **Open Level (by** **Name)** node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Optionally, connect the **On Failure** execution pin of the **Create Session**
    node to a **Print String** node; this will show an error message. This will trace
    any failure that may pop up during the creation of a session in the **Output**
    **Log** window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The final graph is shown in *Figure 12**.9*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.9 – The Create Session Event Graph](img/Figure_12_09_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.9 – The Create Session Event Graph
  prefs: []
  type: TYPE_NORMAL
- en: The graph you have just created is simple but does a lot of things, including
    creating a session on a LAN, setting a maximum of players per session, and opening
    the game level to start the actual multiplayer session.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will work on an interface that will let the player search
    for and join existing sessions.
  prefs: []
  type: TYPE_NORMAL
- en: Joining a session
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will work on a couple of widgets that will display a list
    of sessions available in the network and let the players join them. We will need
    two widgets: **Session Item Renderer** and **Find Session**. The first one will
    be used to display a single session’s information, while the second one will be
    responsible for using the first one as a list of available sessions.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the SessionItemRenderer widget
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The widget you will create will have the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: Displays the available server name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displays the maximum number of available connections, along with the number
    of connected players
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provides a join button to let the player enter the session
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The first thing we must do is create the widget. So, in the Content Browser
    area, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click and select **User Interface** | **Widget Blueprint**. In the pop-up
    window that appears, select **User Widget**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the newly created widget `WB_SessionItemRenderer` and double-click on it
    to open it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once again, we will start by adding the user interface elements.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the visual elements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Once the editor is open, select the **Designer** panel and do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: From the `Container`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the `ServerNameLabel` and tick the `Fill` and the `5.0`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the `Server Name`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the `NumPlayersLabel` and tick the `5.0`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the `0/0`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the `JoinBtn` and double-check that the `5.0`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the `JoinLabel`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the `Join Session`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The final structure of the widget is shown in *Figure 12**.10*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.10 – The hierarchy view of the SessionItemRenderer widget](img/Figure_12_10_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.10 – The hierarchy view of the SessionItemRenderer widget
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Designer** view for the widget is shown in *Figure 12**.11*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.11 – The Designer view of the SessionItemRenderer widget](img/Figure_12_11_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.11 – The Designer view of the SessionItemRenderer widget
  prefs: []
  type: TYPE_NORMAL
- en: With this layout, the player will be able to see the information for each available
    session and the join button.
  prefs: []
  type: TYPE_NORMAL
- en: Now that the visual part of the widget is finished, you can start adding the
    Visual Scripting logic.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the Visual Scripting logic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Open the **Graph** panel by clicking the **Graph** button and do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: In the **Variables** panel, you should already have three variables – **JoinBtn**,
    **NumPlayersLabel**, and **ServerNameLabel**. In the Designer graph, all of them
    have been marked as **Is Variable**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a new variable of the `SearchResult`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In its **Details** panel, enable the **Instance Editable** and **Expose on Spawn**
    properties to make this property accessible from other Blueprints
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should be already familiar with the **Instance Editable** property, but
    **Expose on Spawn** may be new to you. Enabling it will show a pin for this property
    when spawning this Blueprint – this will help us later on in initializing the
    data when we add this renderer to the list of available sessions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that the variables have been set up, it’s time to add some Visual Scripting.
    We will start by implementing the **Join Session** logic. To do so, follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: With the **JoinBtn** variable selected, add an **On Clicked (JoinBtn)** event
    by clicking on the **On Clicked +** button in the **Events** panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a **Join Session** node to the graph and connect its incoming execution
    pin to the outgoing execution pin of the **On Clicked (****JoinBtn)** event.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a **Get Player Controller** node to the graph and connect its **Return Value**
    pin to the **Player Controller** pin of **Join** **Session Node**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Variables** panel, drag a **Get Search Result** node into the graph
    and connect its pin to the **Search Result** node of the **Join** **Session**
    node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The final result for this part of the graph is shown in *Figure 12**.12*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.12 – The Join Session graph](img/Figure_12_12_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.12 – The Join Session graph
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, joining a session is quite straightforward once you have the
    session data (that is, the search result); this data will be obtained during the
    **Find Session** procedure we’ll add later.
  prefs: []
  type: TYPE_NORMAL
- en: Please notice that we don’t need to open any level after joining a session as
    we did for the **Create Session** widget; this will happen automatically once
    we are connected to the host.
  prefs: []
  type: TYPE_NORMAL
- en: 'To complete this widget, we need to show the search result data in the labels
    we have previously created and, as we have previously exposed this data on spawn,
    we will have it already available at construction time. Let’s complete the widget’s
    Visual Scripting by looking for the **Event Construct** event node in the graph
    – it should already be available by default. Then, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: To keep things clean, add a **Sequence** node with two outgoing pins (the default
    setup) and connect its incoming execution pin to the outgoing execution pin of
    the event node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Variables** panel, drag a **Get Server Name Label** node and a **Get
    Search** **Result** node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Server Name Label** outgoing pin, click and drag to create a **SetText
    (****Text)** node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the **SetText (Text)** incoming execution pin to the **Then 0** execution
    pin of the **Sequence** node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Search Result** outgoing pin, click and drag to add a **Get Server**
    **Name** node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the **Get Server Name** outgoing pin to the **In Text** pin of the **SetText
    (Text)** node. This will automatically create a **To Text (String)** node that
    will convert the text into the correct type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'So far, the graph should be like *Figure 12**.13*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.13 – The first part of the Event Construct event node](img/Figure_12_13_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.13 – The first part of the Event Construct event node
  prefs: []
  type: TYPE_NORMAL
- en: The previous graph simply gets the available server’s name from the search result
    data and displays it in the corresponding label. We are going to do something
    similar with the number of connected players. To do so, keep on working on the
    same graph and continue with these steps.
  prefs: []
  type: TYPE_NORMAL
- en: From the **Variables** panel, drag a **Get Num Players Label** node and a **Get
    Search** **Result** node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Num Players Label** outgoing pin, click and drag to create a **SetText
    (****Text)** node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the **SetText (Text)** incoming execution pin to the **Then 1** execution
    pin of the **Sequence** node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Search Result** outgoing pin, click and drag to add a **Get Current
    Players** node. Repeat this step, but this time, add a **Get Max** **Players**
    node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add an `/` character into the input field for the **B** pin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the incoming **C** pin to **Return Value** of the **Get Max Players**
    node. This will automatically add a node converted for the type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the **Append** node’s outgoing pin to the **In Text** pin of the **SetText
    (Text)** node. This will automatically create a **To Text (String)** node that
    will convert the text into the correct type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This portion of the graph will look like *Figure 12**.14*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.14 – The second part of the Event Construct event node](img/Figure_12_14_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.14 – The second part of the Event Construct event node
  prefs: []
  type: TYPE_NORMAL
- en: This widget is now complete and contains all the logic to show a session’s information
    and join it.
  prefs: []
  type: TYPE_NORMAL
- en: We are now going to create the third widget, which will allow us to search the
    network for available sessions.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the FindSessions widget
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **FindSessions** widget will have the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: Let the player find available sessions through the click of a button
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Show a list of the available sessions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If required, display information messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The first thing we must do is create the actual widget. So, in the Content
    Browser area, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click and select **User Interface** | **Widget Blueprint**. In the pop-up
    window that appears, select **User Widget**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the newly created widget `WB_FindSessions` and double-click on it to open
    it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As usual, you will start by adding the visual elements to the widget.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the visual elements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Once the editor is open, select the **Designer** panel and follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: From the `FindSessionsPanel`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the `Background`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its `(0, 0,` `0, 0.4)`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: While holding the *Ctrl* and *Shift* keys, click the **Anchors** drop-down menu
    and select the bottom-right button to make the background stretch over the entirety
    of the **Canvas** panel
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the `Container`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: While holding the *Ctrl* and *Shift* keys pressed, click the **Anchors** drop-down
    menu, and select the bottom-right button to make the background stretch over the
    entirety of the **Canvas** panel
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At this point, you will have created the container for the widget – nothing
    fancy, but fully functional. The widget hierarchy can be seen in *Figure 12**.15*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.15 – The partial FindSessions widget hierarchy](img/Figure_12_15_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.15 – The partial FindSessions widget hierarchy
  prefs: []
  type: TYPE_NORMAL
- en: Now, we are going to add the working elements that will allow the player to
    find the network sessions.
  prefs: []
  type: TYPE_NORMAL
- en: From the `FindSessionsBtn`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its `10.0`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-check that the **Is Variable** checkbox is selected
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the `FindSessionsLabel`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the `Find Sessions`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the `Separator`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its `10.0`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the `SessionsScrollBox`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its `10.0`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Size** property to **Fill**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-check that the **Is Variable** checkbox is selected
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the `SessionMessage` and tick the `10.0`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **Text** property to **No** **Session Available**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The final structure of the widget is shown in *Figure 12**.16*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.16 – The final FindSessions widget hierarchy](img/Figure_12_16_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.16 – The final FindSessions widget hierarchy
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Designer** view for the widget is shown in *Figure 12**.17*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.17 – The final FindSessions widget Designer view](img/Figure_12_17_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.17 – The final FindSessions widget Designer view
  prefs: []
  type: TYPE_NORMAL
- en: With this layout, the player will be able to click the **Find Sessions** button
    to search the network for available sessions and display them in a selectable
    list. You now need to open the **Graph** panel and add some Visual Scripting logic.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the Visual Scripting logic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This part will be a bit more complex than the rest as there will be a lot going
    on; in particular, the code logic will have to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Search for available networks over the LAN
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Display a list of available sessions through the **SessionItemRenderer** widget
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Display error messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enable and disable the search button, depending on the circumstances
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As a first step, I need you to check that, in the **Variables** panel, there
    are three references to the items you will be using: **FindSessionBtn**, **SessionMessage**,
    and **SessionScrollBox**. Then, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Add a new variable called `SessionResults` of the **Blueprint Session Result**
    type and make it an **Array** – this will contain a list of the sessions that
    have been found in the network.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **FindSessionBtn** and, in the **Events** panel, add an **On Clicked**
    event by clicking the **+** button next to the corresponding element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the outgoing execution pin of **On Clicked (FindSessionBtn)** to a **Sequence**
    node with two execution pins (that is, the default ones).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, to keep things clean, you’ll be creating some functions that will do some
    of the minor operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '**AddItemRenderer** to add a session item to the list'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**EnableSearchButton/DisableSearchButton** to make the search button interactable
    or not, depending on the situation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GetSessionResultMessage** to compose the resulting message of a search'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s create these now.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the AddItemRenderer function
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'We’ll start from the first function by clicking on the **+** button in the
    **Functions** section of the **My Blueprint** window. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Name the function `AddItemRenderer` and, in the `SearchResult`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the function node selected, look for the **Graph** section of the **My
    Blueprint** window and set **Access Specifier** to **Protected**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a **Get Player Controller** node to the graph.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a **Create Widget** node to the graph and do the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect its incoming execution pin to the outgoing execution pin of the **Add
    Item Renderer** function node
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: From the drop-down menu of the **Class** pin, select **WB_SessionItemRenderer**
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Connect the **Owning Player** pin to **Return Value** of the **Get Player**
    **Controller** node
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Connect the **Search Result** pin to the **Search Result** pin of the **Add
    Item Renderer** function node
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Drag a **Get Session Scroll Box** node from the **Variables** panel onto the
    graph.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add an **Add Child** node to the graph and do the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect its incoming execution pin to the outgoing execution pin of the **Create**
    **Widget** node
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Connect the **Content** pin to the **Return Value** pin of the **Create** **Widget**
    node
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Connect the **Target** pin to the **Session Scroll Box** getter node
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The final graph for the **AddItemRenderer** function is shown in *Figure 12**.18*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.18 – The AddItemRenderer function](img/Figure_12_18_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.18 – The AddItemRenderer function
  prefs: []
  type: TYPE_NORMAL
- en: We can now start creating the function that will enable the search button when
    requested.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the EnableSearchButton function
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by creating the function by clicking on the **+** button in the
    **Functions** section of the **My Blueprint** window. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Name the function `EnableSearchButton` and, with the function node selected,
    look for the **Graph** section of the **My Blueprint** window and set **Access
    Specifier** to **Protected**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Variables** panel, drag a **FindSessionsBtn** node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a **Set Is Enabled** node to the graph and do the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect its incoming execution pin to the outgoing execution pin of the **Enable
    Search Button** function node
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Connect the **Target** pin to the **Find Session** **Btn** getter
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Tick the **In Is** **Enabled** checkbox
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The final graph for this function is shown in *Figure 12**.19*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.19 – The EnableSearchButton function](img/Figure_12_19_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.19 – The EnableSearchButton function
  prefs: []
  type: TYPE_NORMAL
- en: The function that will disable the button is almost identical to the previous
    one, so let’s create it.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the DisableSearchButton function
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by creating the function by clicking on the **+** button in the
    **Functions** section of the **My Blueprint** window. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: With the function node selected, look for the **Graph** section of the **My
    Blueprint** window and set **Access Specifier** to **Protected**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Variables** panel, drag a **FindSessionsBtn** node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a **Set Is Enabled** node to the graph and do the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect its incoming execution pin to the outgoing execution pin of the **Enable
    Search Button** function node
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Connect the **Target** pin to the **Find Session** **Btn** getter
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Leave the **In Is Enabled** checkbox unticked
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The final graph for this function is shown in *Figure 12**.20*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.20 – The DisableSearchButton function](img/Figure_12_20_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.20 – The DisableSearchButton function
  prefs: []
  type: TYPE_NORMAL
- en: We need just one last function – the one that will compose the sessions message.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the GetSessionResultMessage function
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by creating the function by clicking on the **+** button in the
    **Functions** section of the **My Blueprint** window. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Name the function `GetSessionsResultMessage` and do the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the function node selected, look for the `ReturnValue`; this will add **Return
    Node** to the graph.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: From the **Variables** panel, drag a **Get Session** **Results** node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the outgoing pin of the **Session Results** getter, click and drag to add
    a **Length** node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add an `Found:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the `sessions`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the outgoing pin of the **Append** node to **Return Value** of **Return
    Node**; this will automatically create a **To Text (String)** converter node in
    between.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The final graph for this function is shown in *Figure 12**.21*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.21 – The GetSessionsResultMessage function](img/Figure_12_21_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.21 – The GetSessionsResultMessage function
  prefs: []
  type: TYPE_NORMAL
- en: The last function has been created, so it’s time to get back to the main Event
    Graph and create the search and result logic.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the Event Graph
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The main graph will need to look for the available sessions in the network
    and expose them in the widget list. To start with this Visual Scripting logic,
    follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Locate the **On Clicked (FindSessionBtn)** event and add a **Sequence** node
    to the outgoing execution pin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Variables** panel, drag a **SessionsScrollBox** node and, from its
    outgoing pin, click and drag to add a **Clear** **Children** node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the **Clear Children** incoming execution pin to the **Then 0** outgoing
    execution pin of the **Sequence** node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Functions** panel, drag a **Disable Search Button** function and
    connect its incoming execution pin to the outgoing execution pin of the **Clear**
    **Children** node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Variables** panel, drag a **Session Message** node and, from its
    outgoing pin, click and drag to add a **Set Text** node (from the **Content**
    category).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the incoming execution pin of the **Set Text** node to the outgoing
    pin of **Disable** **Search Button**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Insert **Search Session...** into the **Text** field of the **Set** **Text**
    node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This first part of the graph essentially cleans the sessions list from previous
    search results, disables the search button to avoid multiple clicks, and displays
    a message. This is shown in *Figure 12**.22*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.22 – The first part of the FindSessions graph](img/Figure_12_22_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.22 – The first part of the FindSessions graph
  prefs: []
  type: TYPE_NORMAL
- en: The second part of the graph will be responsible for searching the network sessions
    and showing the actual results.
  prefs: []
  type: TYPE_NORMAL
- en: Add a **Get Player Controller** node to the graph.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a `10`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tick the **Use LAN** checkbox to enable it
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Variables** panel, drag a **Set Session Results** node and connect
    its incoming execution pin to the **On Success** execution pin of the **Find**
    **Sessions** node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Functions** panel, drag a **Get Sessions Result** **Message** node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the **Variables** panel, drag a **Session Message** getter node and do
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From its outgoing pin, click and drag to add a **Set Text** node (from the **Content**
    category)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Connect its **Text** pin to the **Return Value** pin of the **Get Sessions Result**
    **Message** node
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Connect its incoming execution pin to the outgoing execution pin of the **Set
    Session** **Results** node
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: From the **Variables** panel, drag a **Get Session Results** node. From its
    outgoing pin, click and drag to add a **For Each Loop** node. Connect the incoming
    **Exec** pin of the **For Each Loop** node to the outgoing pin of the **Set**
    **Text** node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the **Functions** panel, drag an **Add Item Renderer** node to the graph
    and do the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect its incoming execution pin to the **Loop Body** execution pin of the
    **For Each** **Loop** node
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Connect its **Search Result** pin to the **Array Element** pin of the **For
    Each** **Loop** node
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: From the **Functions** panel, drag an **Enable Search Button** node onto the
    graph and connect its incoming execution pin to the **Completed** execution pin
    of the **For Each** **Loop** node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This second part of the graph looks for a list of available sessions in the
    network, displays a result message, and adds the results to the session list.
    The graph is shown in *Figure 12**.23*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.23 – The second part of the FindSessions graph](img/Figure_12_23_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.23 – The second part of the FindSessions graph
  prefs: []
  type: TYPE_NORMAL
- en: The last part of the graph will just show an error message if the search results
    with a failure.
  prefs: []
  type: TYPE_NORMAL
- en: From the **Variables** panel, drag a **Session Message** getter node and, from
    its outgoing pin, click and drag to add a **Set Text** node (from the **Content**
    category).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `Error searching for` `available sessions`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect its incoming execution pin to the **On Failure** outgoing execution
    pin of the **Find** **Sessions** node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect its outgoing execution pin to an **Enable Search Button** node to make
    the button clickable again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This part of the graph is self-explanatory and is depicted in *Figure 12**.24*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.24 – The third part of the FindSessions graph](img/Figure_12_24_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.24 – The third part of the FindSessions graph
  prefs: []
  type: TYPE_NORMAL
- en: We have finally completed this widget and we are now ready to put things together
    in the **Main** **Menu** widget.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Main Menu widget
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **Main Menu** widget – the fourth and last one – simply acts as a container
    for the **Create Session** and **Find Sessions** ones. To create it, follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click inside the Content Browser area and select **User Interface** |
    **Widget Blueprint**. In the pop-up window that appears, select **User Widget**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the newly created widget `WB_MainMenu` and double-click on it to open it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Palette** window, drag a **Canvas Panel** item into the **Designer**
    view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Palette** menu, drag a **WB Create Session** item onto the **Canvas**
    panel and place it somewhere you think is appropriate.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Palette** menu, drag a **WB Find Sessions** item onto the **Canvas**
    panel and place it somewhere you think is appropriate.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The **Designer** view for this widget should look similar to the one shown
    in *Figure 12**.25*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.25 – The MainMenu widget](img/Figure_12_25_B18203.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.25 – The MainMenu widget
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you created the user interface for the main menu level, which
    is composed of reusable widgets. Each widget contains dedicated logic for creating
    sessions and joining them.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter introduced you to the primary session commands within Unreal Engine’s
    Online Subsystem, providing you with the tools necessary to create, join, and
    manage multiplayer game sessions with ease. Armed with this knowledge, you have
    created a user interface that harnesses these features and puts them to practical
    use.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to take your multiplayer game from being just a basic prototype
    to a fully functional and complete gaming experience, then you must learn how
    to use these features. Trust me – having this knowledge under your belt will make
    all the difference and help you create some truly awesome multiplayer games!
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we’ll take these helpful widgets and use them to create
    the main menu for the game. We’ll also create the needed Gameplay Framework classes,
    as well as a cool system for customizing the character’s appearance!
  prefs: []
  type: TYPE_NORMAL
