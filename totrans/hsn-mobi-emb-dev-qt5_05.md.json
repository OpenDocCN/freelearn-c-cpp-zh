["```cpp\n    InputPanel {\n        id: inputPanel\n        z: 99\n        x: 0\n        y: window.height\n        width: window.width\n        states: State {\n            name: \"visible\"\n            when: inputPanel.active\n            PropertyChanges {\n                target: inputPanel\n                y: window.height - inputPanel.height\n            }\n        }\n        transitions: Transition {\n            from: \"\"\n            to: \"visible\"\n            reversible: true\n            ParallelAnimation {\n                NumberAnimation {\n                    properties: \"y\"\n                    duration: 250\n                    easing.type: Easing.InOutQuad\n                }\n            }\n        }\n    }\n```", "```cpp\n    TextField {\n        anchors {\n            bottom: inputPanel.top\n            top: parent.top\n            right: parent.right\n            left: parent.left\n        }\n        placeholderText: \"Enter something\"\n    }\n\n```", "```cpp\nqApp->installEventFilter(this);\n```", "```cpp\nbool MainWindow::eventFilter(QObject* obj, QEvent* event);\n```", "```cpp\nbool MainWindow::eventFilter(QObject* obj, QEvent* event)\n{\n    switch(event->type()) {\n        case QEvent::TouchBegin:\n        case QEvent::TouchCancel:\n        case QEvent::TouchEnd:\n        case QEvent::TouchUpdate:\n            qWarning(\"Touch event %d\", event->type());\n            break;\n        default:\n            break;\n    };\n    return false;\n}\n```", "```cpp\nbool MainWindow::event(QEvent *ev)\n{\n  switch (ev->type()) {\n    case QEvent::TouchBegin:\n      qWarning(\"TouchBegin event %d\", ev->type());\n        break;\n    case QEvent::TouchEnd:\n      qWarning(\"TouchEnd event %d\", ev->type());\n        break;\n    case QEvent::TouchUpdate:\n      qWarning(\"TouchUpdate event %d\", ev->type());\n        break;\n};}\n```", "```cpp\n#include <linux/input.h>\n```", "```cpp\n     QDir inputDir = QDir(\"/dev/input\");\n     QStringList filters;\n     filters << \"event*\";\n     QStringList eventFiles = inputDir.entryList(filters,\nQDir::System);\n     int fd = -1;\n     char name[256];\n     for (QString file : eventFiles) {\n         file.prepend(inputDir.absolutePath());\n         fd = ::open(file.toLocal8Bit().constData(), O_RDONLY|O_NONBLOCK);\n if (fd >= 0) {\n ioctl(fd, EVIOCGNAME(sizeof(name)), name);\n ::close(fd);\n }\n}\n```", "```cpp\nunsigned short id[4];\nioctl(fd, EVIOCGID, &id);\n```", "```cpp\nbool MainWindow::isTouchDevice(int fd)\n{\n    unsigned short id[4];\n    long bitsKey[LONG_FIELD_SIZE(KEY_CNT)];\n    memset(bitsKey, 0, sizeof(bitsKey));\n    ioctl(fd, EVIOCGBIT(EV_KEY, sizeof(bitsKey)), bitsKey);\n    if (testBit(BTN_TOUCH, bitsKey)) {\n        return true;\n    }\n    return false;\n}\n```", "```cpp\nint MainWindow::doScan(int fd)\n{\n    QSocketNotifier *notifier\n        = new QSocketNotifier(fd, QSocketNotifier::Read,\n         this);\n        auto c = connect(notifier,  &QSocketNotifier::activated,\n                     [=]( int /*socket*/ ) {\n        struct input_event ev;\n        unsigned int size;\n        size = read(fd, &ev, sizeof(struct input_event));\n        if (size < sizeof(struct input_event)) {\n            qWarning(\"expected %u bytes, got %u\\n\", sizeof(struct\n            input_event), size);\n            perror(\"\\nerror reading\");\n            return EXIT_FAILURE;\n        }\n        if (ev.type == EV_KEY && ev.code == BTN_TOUCH)\n            qWarning(\"Touchscreen value: %i\\n\", ev.value);\n        if (ev.type == EV_ABS && ev.code == ABS_MT_POSITION_X)\n             qWarning(\"X value: %i\\n\", ev.value);\n         if (ev.type == EV_ABS && ev.code == ABS_MT_POSITION_Y)\n             qWarning(\"Y value: %i\\n\", ev.value);\n          return 0;\n     });\n return true;\n}\n```", "```cpp\nLIBS += -levdev\n```", "```cpp\n#include <libevdev-1.0/libevdev/libevdev.h>\n```", "```cpp\nbool MainWindow::isTouchDevice(int fd)\n{\n    int rc = 1;\n    rc = libevdev_new_from_fd(fd, &dev);\n    if (rc < 0) {\n        qWarning(\"Failed to init libevdev (%s)\\n\", strerror(-rc));\n        return false;\n    }\n    if (libevdev_has_event_code(dev, EV_KEY, BTN_TOUCH)) {\n        qWarning(\"Device: %s\\n\", libevdev_get_name(dev));\n        return true;\n    }\n    libevdev_free(dev);\n    return false;\n}\n```", "```cpp\nint MainWindow::doScan(int fd)\n{\n    QSocketNotifier *notifier\n            = new QSocketNotifier(fd, QSocketNotifier::Read,\nthis);\n    auto c = connect(notifier,  &QSocketNotifier::activated,\n                     [=]( int /*socket*/ ) {\n        int rc = -1;\n        do {            struct input_event ev;\n            rc = libevdev_next_event(dev,\nLIBEVDEV_READ_FLAG_NORMAL, &ev);\n            if (rc == LIBEVDEV_READ_STATUS_SYNC) {\n                while (rc == LIBEVDEV_READ_STATUS_SYNC) {\n                    rc = libevdev_next_event(dev, LIBEVDEV_READ_FLAG_SYNC, &ev);\n                }\n            } else if (rc == LIBEVDEV_READ_STATUS_SUCCESS) {\n                if ((ev.type == EV_KEY && ev.code == BTN_TOUCH) ||\n                        (ev.type == EV_ABS && ev.code ==\nABS_MT_POSITION_X) ||\n                        (ev.type == EV_ABS && ev.code ==\nABS_MT_POSITION_Y)) {\n                    qWarning(\"%s value: %i\\n\",\nlibevdev_event_code_get_name(ev.type, ev.code), ev.value);\n                }\n            }\n        } while (rc == 1 || rc == 0 || rc == -EAGAIN);\n        return 0;\n    });\n    return 0;\n}\n```", "```cpp\nconfigure -qt-mouse-tslib\n```", "```cpp\n export TSLIB_TSDEVICE=/dev/input/event4\n```", "```cpp\n    MultiPointTouchArea { \n          anchors.fill: parent \n          touchPoints: [ \n              TouchPoint { id: finger1 }, \n              TouchPoint { id: finger2 }, \n              TouchPoint { id: finger3 }, \n              TouchPoint { id: finger4 }, \n              TouchPoint { id: finger5 } \n          ] \n      } \n\n```", "```cpp\n      Rectangle { \n          width: 30; height: 30 \n          color: \"green\" \n          radius: 50 \n          x: finger1.x \n          y: finger1.y \n      }\n\n```", "```cpp\nsetAttribute(Qt::WA_AcceptTouchEvents);\n```", "```cpp\ngrabGesture(Qt::SwipeGesture);\n```", "```cpp\nbool MyWidget::event(QEvent *event)\n{\n    if (event->type() == QEvent::Gesture)\n        handleSwipe();\n    return QWidget::event(event);\n}\n```", "```cpp\nif (QGesture *swipe = event->gesture(Qt::SwipeGesture))\n```"]