["```cpp\nimport QtQuick 2.0\n\nItem {\n  id: root\n  width: 600; height: width\n  Rectangle {\n    id: rect\n    color: \"red\"; width: 50; height: width\n  }\n NumberAnimation {\n target: rect\n property: \"x\"\n from: 0; to: 550\n duration: 3000\n running: true\n }\n}\n```", "```cpp\nimport QtQuick 2.1\n\nImage {\n  id: root\n  property int dayLength: 60000 // 1 minute\n  source: \"images/sky.png\"\n\n  Item {\n    id: sun\n    x: 140\n    y: root.height-170\n    Rectangle {\n      id: sunVisual\n      width: 40\n      height: width\n      radius: width/2\n      color: \"yellow\"\n      anchors.centerIn: parent\n    }\n  }\n  Image {\n    source: \"images/trees.png\"\n    x: -200\n    anchors.bottom: parent.bottom\n  }\n  Image {\n    source: \"images/grass.png\"\n    anchors.bottom: parent.bottom\n  }\n}\n```", "```cpp\nNumberAnimation {\n  target: sun\n  property: \"x\"\n  from: 0\n  to: root.width\n  duration: dayLength\n  running: true\n}\n```", "```cpp\nNumberAnimation {\n  id: sunGoesUpAnim\n  // …\n  onStopped: sunGoesDownAnimTimer.start()\n}\nTimer {\n  id: sunGoesDownAnimTimer\n  interval: dayLength/3\n  onTriggered: sunGoesDownAnim.start()\n}\n```", "```cpp\nParallelAnimation {\n  id: parallelAnimationGroup\n\n  NumberAnimation {\n    target: obj1; property: \"prop1\"\n    from: 0; to: 100\n    duration: 1500\n  }\n  NumberAnimation {\n    target: obj2; property: \"prop2\"\n    from: 150; to: 0\n    duration: 1500\n  }\n  running: true\n}\n```", "```cpp\nSequentialAnimation {\n  id: sequentialAnimationGroup\n\n  ParallelAnimation {\n    id: parallelAnimationGroup\n\n    NumberAnimation {\n      id: A1\n      target: obj2; property: \"prop2\"\n      from: 150; to: 0\n      duration: 1000\n    }\n    NumberAnimation {\n      id: A2\n      target: obj1; property: \"prop1\"\n      from: 0; to: 100\n      duration: 2000\n    }\n  }\n  PropertyAnimation {\n    id: A3\n    target: obj1; property: \"prop1\"\n    from: 100; to: 300\n    duration: 1500\n  }\n  running: true\n}\n```", "```cpp\nSequentialAnimation {\n  NumberAnimation {\n    target: sun\n    property: \"y\"\n    from: root.height+sunVisual.height\n    to: root.height-270\n    duration: dayLength/3\n  }\n  PauseAnimation { duration: dayLength/3 }\n  NumberAnimation {\n    target: sun\n    property: \"y\"\n    from: root.height-270\n    to: root.height+sunVisual.height\n    duration: dayLength/3\n  }\nrunning: true\n}\n```", "```cpp\nNumberAnimation {\n  target: obj; property: prop;\n  from: startValue; to: endValue;\n easing.type: Easing.InOutBounce\n}\n```", "```cpp\nSequentialAnimation {\n  NumberAnimation {\n    target: sun\n    property: \"y\"\n    from: root.height+sunVisual.height\n    to: root.height-270\n    duration: dayLength/2\n    easing.type: Easing.OutCubic\n  }\n  NumberAnimation {\n    target: sun\n    property: \"y\"\n    to: root.height+sunVisual.height\n    duration: dayLength/2\n    easing.type: Easing.InCubic\n  }\n\n  running: true\n}\n```", "```cpp\nNumberAnimation on rotation {\n  from: 0\n  to: 360\n  duration: 500\n}\n```", "```cpp\nRectangle {\n  id: sunVisual\n  // ...\n SequentialAnimation on color {\n ColorAnimation {\n from: \"red\"\n to: \"yellow\"\n duration: 0.2*dayLength/2\n }\n PauseAnimation { duration: 2*0.8*dayLength/2 }\n ColorAnimation {\n to: \"red\"\n duration: 0.2*dayLength/2\n }\n running: true\n }\n}\n```", "```cpp\nSequentialAnimation on scale {\n  NumberAnimation {\n    from: 1.6; to: 0.8\n    duration: dayLength/2\n    easing.type: Easing.OutCubic\n  }\n  NumberAnimation {\n    from: 0.8; to: 1.6\n    duration: dayLength/2\n    easing.type: Easing.InCubic\n  }\n}\n```", "```cpp\nSequentialAnimation {\n  ParallelAnimation {\n    NumberAnimation {\n      target: sun\n      property: \"y\"\n      from: root.height+sunVisual.height\n      to: root.height-270\n      duration: dayLength/2\n      easing.type: Easing.OutCubic\n    }\n    NumberAnimation {\n      target: sun\n      property: \"scale\"\n      from: 1.6; to: 0.8\n      duration: dayLength/2\n      easing.type: Easing.OutCubic\n    }\n  // …\n```", "```cpp\nItem {\n  id: sunRays\n  property int count: 10\n  width: sunVisual.width\n  height: width\n  anchors.centerIn: parent\n  z: -1\n  Repeater {\n    model: sunRays.count\n    Rectangle {\n      color: \"red\"\n      rotation: index*360/sunRays.count\n      anchors.fill: parent\n    }\n  }\n}\n```", "```cpp\nimport QtQuick 2.0\n\nItem {\n  width: 600; height: width\n  Item {\n    id: empty\n    x: parent.width/2; y: parent.height/2\n    Rectangle {\n      id: rect\n      width: 100; height: width; color: \"red\"\n      anchors.centerIn: parent\n    }\n  }\n  MouseArea {\n    anchors.fill: parent\n    onClicked: { empty.x = mouse.x; empty.y = mouse.y }\n  }\n}\n```", "```cpp\nItem {\n  id: rect\n  x: parent.width/2; y: parent.height/2\n  Rectangle {\n    width: 100; height: width; color: \"red\"\n    anchors.centerIn: parent\n  }\n Behavior on x { NumberAnimation { } }\n Behavior on y { NumberAnimation { } }\n}\n```", "```cpp\nBehavior on x {\n  SequentialAnimation {\n    PropertyAction {\n  target: rect; property: \"color\"; value: \"yellow\"\n}\nParallelAnimation {\n  NumberAnimation { easing.type: Easing.InOutQuad; duration: 1000\n}\n\n      SequentialAnimation {\n        NumberAnimation {\n          target: rect; property: \"scale\"\n          from: 1.0; to: 1.5; duration: 500\n        }\n        NumberAnimation {\n          target: rect; property: \"scale\"\n          from: 1.5; to: 1.0; duration: 500\n        }\n      }\n    }\n    PropertyAction { target: rect; property: \"color\"; value: \"red\" }\n  }\n}\n```", "```cpp\nBehavior on rotation {\n  SmoothedAnimation { velocity: 50 }\n}\n```", "```cpp\nItem {\n  id: lamp\n  property bool lampOn: false\n  Rectangle {\n    id: lightsource\n    anchors.fill: parent\n    color: transparent\n  }\n}\n```", "```cpp\nItem {\n  id: lamp\n  property bool lampOn: false\n  // …\n  states: State {\n    name: \"on\"\n    PropertyChanges {\n      target: lightsource\n      color: \"yellow\"\n    }\n  }\n}\n```", "```cpp\nonLampOnChanged: state = lampOn ? \"on\" : \"\"\n```", "```cpp\nState {\n  name: \"on\"\n when: lamp.lampOn\n  PropertyChanges {\n    target: lightsource\n    color: \"yellow\"\n  }\n}\n```", "```cpp\nstates: [\n  State {\n    name: \"on\"\n    when: lamp.lampOn\n  },\n  State {\n    name: \"off\"\n    when: !lamp.lampOn\n  }\n]\n```", "```cpp\nItem {\n  id: lamp\n  property bool lampOn: false\n  Rectangle {\n    id: lightsource\n    anchors.fill: parent\n color: \"yellow\"\n opacity: 0\n  }\n  states: State {\n    name: \"on\"\n    when: lamp.lampOn\n    PropertyChanges {\n      target: lightsource\n      opacity: 1\n    }\n  }\n  transitions: Transition {\n NumberAnimation { duration: 100 }\n }\n}\n```", "```cpp\nTransition {\n  SequentialAnimation {\n    NumberAnimation { target: lightsource; property: \"opacity\"; duration: 200 }\n    ScriptAction { script: console.log(\"Transition has ended\") }\n  }\n}\n```", "```cpp\nvoid Scene::keyEvent(QKeyEvent *ke) {\n  switch(ke->key()) {\n  case Qt::Key_Right: player->goRight(); break;\n  case Qt::Key_Left:  player->goLeft();  break;\n  case Qt::Key_Space: player->jump();    break;\n  // ...\n  }\n}\n```", "```cpp\nItem {\n  id: player\n  y: parent.height\n  focus: true\n\n  Keys.onRightPressed: x = Math.min(x+20, parent.width)\n  Keys.onLeftPressed: x = Math.max(0, x-20)\n  Keys.onUpPressed: jump()\n\n  function jump() { jumpAnim.start() }\n\n  Image {\n    source: \"elephant.png\"\n    anchors.bottom: parent.bottom\n    anchors.horizontalCenter: parent.horizontalCenter\n  }\n  Behavior on x { NumberAnimation { duration: 100 } }\n  SequentialAnimation on y {\n    id: jumpAnim\n    running: false\n    NumberAnimation { to: player.parent.height-50; easing.type: Easing.OutQuad }\n    NumberAnimation { to: player.parent.height; easing.type: Easing.InQuad }\n  }\n}\n```", "```cpp\nPlayer {\n  id: player\n  x:40\n}\n```", "```cpp\nQtObject {\n  id: flags\n  readonly property int speed: 20\n  property int horizontal: 0 \n}\nKeys.onRightPressed: { recalculateDurations(); flags.horizontal = 1 }\nKeys.onLeftPressed: {\n  if(flags.horizontal != 0) return \n  recalculateDurations()\n  flags.horizontal = -1 \n}\nKeys.onUpPressed: jump()\nKeys.onReleased: {\n  if(event.key == Qt.Key_Right) flags.horizontal = 0\n  if(event.key == Qt.Key_Left && flags.horizontal < 0) flags.horizontal = 0\n}\n\nfunction recalculateDurations() {\n  xAnimRight.duration = (xAnimRight.to-x)*1000/flags.speed\n  xAnimLeft.duration  = (x-xAnimLeft.to)*1000/flags.speed\n}\nNumberAnimation on x {\n  id: xAnimRight\n  running: flags.horizontal > 0\n  to: parent.width\n}\nNumberAnimation on x {\n  id: xAnimLeft\n  running: flags.horizontal < 0\n  to: 0\n}\n```", "```cpp\nItem {\n  id: coin\n\n  Rectangle {\n    id: coinVisual\n    color: \"yellow\"\n    border.color: Qt.darker(color)\n    border.width: 2\n    width: 30; height: width\n    radius: width/2\n    anchors.centerIn: parent\n\n    transform: Rotation {\n      axis.y: 1\n\n      NumberAnimation on angle {\n        from: 0; to: 360\n        loops: Animation.Infinite\n        running: true\n      }\n    }\n    Text {\n      color: coinVisual.border.color\n      anchors.centerIn: parent\n      text: \"1\"\n    }\n  }\n}\n```", "```cpp\nComponent {\n  id: coinGenerator\n  Coin {}\n}\n\nTimer {\n  id: coinTimer\n  interval: 1000\n  repeat: true\n\n  onTriggered: {\n    var cx = Math.floor(Math.random() * scene.width)\n    var cy = Math.floor(Math.random() * scene.height/3) \n             + scene.height/2\n    coinGenerator.createObject(scene, { x: cx, y: cy});\n  }\n}\n```", "```cpp\nImage {\n  property int currentFrame: 1\n  property int frameCount: 10\n  source: \"images/walking_\"+currentFrame+\".png\"\n  mirror: player.facingLeft\n\n  anchors.bottom: parent.bottom\n  anchors.horizontalCenter: parent.horizontalCenter\n  Animation on currentFrame {\n    from: 1\n    to: frameCount\n    loops: Animation.Infinite\n    duration: frameCount*40\n    running: player.walking\n  }\n}\n```", "```cpp\nproperty bool walking: flags.horizontal != 0\nproperty bool facingLeft: flags.horizontal < 0\n```", "```cpp\nAnimatedSprite {\n  id: sprite\n  source: \"images/walking.png\"\n  frameX: 560\n  frameY: 0\n  frameWidth: 80\n  frameHeight: 52\n  frameCount: 7\n  frameRate: 10\n  interpolate: true\n  width: frameWidth\n  height: frameHeight\n\n  running: player.walking\n  anchors.bottom: parent.bottom\n  anchors.horizontalCenter: parent.horizontalCenter\n\n  transform: Scale {\n    origin.x: sprite.width/2\n    xScale: player.facingLeft ? -1 : 1\n  }\n}\n```", "```cpp\nSpriteSequence {\n  id: sprite\n  width: 80\n  height: 52\n  anchors.bottom: parent.bottom\n  anchors.horizontalCenter: parent.horizontalCenter\n  currentSprite: \"still\"\n  running: true\n\n  Sprite {\n    name: \"still\"\n    source: \"images/walking.png\"\n    frameCount: 1\n    frameWidth: 80\n    frameHeight: 52\n    frameDuration: 100\n    to: {\"still\": 1, \"walking\": 0, \"jumping\": 0}\n  }\n  Sprite {\n    name: \"walking\"\n    source: \"images/walking.png\"\n    frameCount: 7\n    frameWidth: 80\n    frameHeight: 52\n    frameRate: 10\n    to: {\"walking\": 1, \"still\": 0, \"jumping\": 0}\n  }\n  Sprite {\n    name: \"jumping\"\n    source: \"images/jumping.png\"\n    frameCount: 11\n    frameWidth: 80\n    frameHeight: 70\n    frameRate: 4\n    to: { \"still\" : 1 }\n  }\n\n  transform: Scale {\n    origin.x: sprite.width/2\n    xScale: player.facingLeft ? -1 : 1\n  }\n}\n```", "```cpp\nSequentialAnimation {\n  id: jumpAnim\n  running: false\n ScriptAction { script: sprite.goalSprite = \"jumping\" }\n  NumberAnimation {\n    target: player; property: \"y\"\n    to: player.parent.height-50; easing.type: Easing.OutQuad \n  }\n  NumberAnimation {\n    target: player; property: \"y\"\n    to: player.parent.height; easing.type: Easing.InQuad \n  }\n ScriptAction {\n script: { sprite.goalSprite = \"\"; sprite.jumpTo(\"still\"); } \n }\n}\n```", "```cpp\nimport QtQuick 2.2\n\nItem {\n  id: root\n  property int currentPos\n  x: -currentPos*(root.width-root.parent.width)/width\n}\n```", "```cpp\nimport QtQuick 2.2\n\nItem {\n  property real factor: 0\n  x: factor > 0 ? -parent.currentPos/factor - parent.x : 0\n}\n```", "```cpp\nRectangle {\n  id: view\n\n  width: 600\n  height: 380\n\n  ParallaxScene {\n    id: scene\n    width: 1500; height: 380\n    anchors.bottom: parent.bottom\n    currentPos: player.x\n\n    ParallaxLayer {\n      factor: 7.5\n      width: sky.width; height: sky.height\n      anchors.bottom: parent.bottom\n      Image { id: sky; source: \"sky.png\" }\n    }\n    ParallaxLayer {\n      factor: 2.5\n      width: trees.width; height: trees.height\n      anchors.bottom: parent.bottom\n      Image { id: trees; source: \"trees.png\" }\n    }\n    ParallaxLayer {\n      factor: 0\n      width: grass.width; height: grass.height\n      anchors.bottom: parent.bottom\n      Image { id: grass; source: \"grass.png\" }\n    }\n\n    Item {\n      id: player\n      // ...\n    }\n  }\n}\n```", "```cpp\npragma library\n\nfunction boundingBox(object1) {\n  var cR = object1.childrenRect\n  var mapped = object1.mapToItem(object1.parent, cR.x, cR.y, cR.width, cR.height)\n  return Qt.rect(mapped.x, mapped.y, mapped.width, mapped.height)\n}\n\nfunction intersect(object1, object2) {\n  var r1 = boundingBox(object1)\n  var r2 = boundingBox(object2)\n  return (r1.x <= r2.x+r2.width  && // r1.left <= r2.right\n  r2.x <= r1.x+r1.width  && // r2.left <= r1.right\n  r1.y <= r2.y+r2.height && // r1.top <= r2.bottom\n  r2.y <= r1.y+r1.height)   // r2.top <= r1.bottom\n}\n```", "```cpp\nimport \"collisions.js\"\n\nvar coins = []\n\ncoins.collisionsWith = function(player) {\n  var collisions = []\n  for(var index = 0; index < length; ++index) {\n    var obj = this[index]\n    if(intersect(player, obj)) collisions.push(obj)\n  }\n  return collisions\n}\ncoins.remove = function(obj) {\n  var arr = isArray(obj) ? obj : [ obj ]\n  var L = arr.length\n  var idx, needle\n  while(L && this.length) {\n    var needle = arr[--L]\n    idx = this.indexOf(needle)\n    if(idx != -1) { this.splice(idx, 1) }\n  }\n  return this\n}\n```", "```cpp\nimport \"coins.js\"\n```", "```cpp\nfunction checkCollisions() {\n  var result = coins.collisionsWith(player)\n  if(result.length == 0) return\n  result.forEach(function(coin) { coin.hit() })\n  coins.remove(result) // prevent the coin from being hit again\n}\n```", "```cpp\nonXChanged: { checkCollisions() }\nonYChanged: { checkCollisions() }\n```", "```cpp\nSequentialAnimation {\n  id: hitAnim\n  running: false\n  NumberAnimation {\n    target: coin\n    property: \"opacity\"\n    from: 1; to: 0\n    duration: 250\n  }\n  ScriptAction {\n    script: coin.destroy()  \n  }\n}\n\nfunction hit() {\n  hitAnim.start()\n}\n```", "```cpp\nItem {\n  id: window\n\n  Flickable {\n    id: uiFlickable\n    anchors.centerIn: parent\n    contentWidth: ui.width; contentHeight: ui.height\n\n    width: parent.width >= contentWidth ? contentWidth : parent.width\n    height: parent.height >= contentHeight ? contentHeight : parent.height\n\n    UI { id: ui }\n  }\n}\n```", "```cpp\nItem {\n  id: window\n\n  UI {\n    id: ui\n\n    anchors.centerIn: parent\n    scale: Math.min(parent.width/width, parent.height/height)\n  }\n}\n```", "```cpp\nItem {\n  id: window\n  Item {\n anchors { fill: parent; margins: 10 }\n    UI {\n      id: ui\n\n      anchors.centerIn: parent\n      scale: Math.min(parent.width/width, parent.height/height)\n    }\n }\n}\n```", "```cpp\nimport QtQuick 2.0\nimport QtGraphicalEffects 1.0\n\nItem {\n  width: 1000; height: 600\n  HeartBeat { id: hb; anchors.centerIn: parent; visible: false }\n  DropShadow {\n    source: hb\n    anchors.fill: hb\n    horizontalOffset: 3\n    verticalOffset: 3\n    radius: 8\n    samples: 16\n    color: \"black\"\n  }\n}\n```", "```cpp\nGaussianBlur {\n  source: hb\n  anchors.fill: hb\n  radius: 12\n  samples: 20\n  transparentBorder: true\n}\n```", "```cpp\nBadge {\n  id: importantBadge\n}\nGlow {\n  source: importantBadge\n  anchors.fill: source\n  samples: 16\n  color: \"red\"\n\n  SequentialAnimation on radius {\n    loops: Animation.Infinite\n    running: true\n\n    NumberAnimation { from: 0; to: 10; duration: 2000 }\n    PauseAnimation  { duration: 1000 }\n    NumberAnimation { from: 10; to: 0; duration: 2000 }\n    PauseAnimation  { duration: 1000 }\n  }\n}\n```", "```cpp\nimport QtQuick 2.0\nimport QtQuick.Particles 2.0\n\nParticleSystem {\n  id: particleSystem\n  width: 360; height: 360\n\n  Emitter { anchors.fill: parent }\n  ImageParticle { source: \"star.png\" }\n}\n```", "```cpp\nParticleSystem {\n  id: particleSystem\n  width: 360; height: 360\n\n  Emitter {\n    anchors.fill: parent\n    emitRate: 350\n    lifeSpan: 1500\n    lifeSpanVariation: 400 // effective: 1100-1900 ms\n  }\n  ImageParticle { source: \"star.png\" }\n}\n```", "```cpp\nParticleSystem {\n  id: particleSystem\n  width: 360; height: 360\n\n  Emitter {\n    anchors.fill: parent\n    emitRate: 50\n    size: 12\n    sizeVariation: 6\n    endSize: 2\n  }\n  ImageParticle { source: \"star.png\" }\n}\n```", "```cpp\nParticleSystem {\n  id: particleSystem\n  width: 360; height: 360\n\n  Emitter {\n    anchors.fill: parent\n    emitRate: 1600\n    shape: MaskShape { source: \"star.png\" }\n  }\n  ImageParticle { source: \"star.png\" }\n}\n```", "```cpp\nEmitter {\n  anchors.centerIn: parent\n  width: 50; height: 50\n  emitRate: 50\n\n  velocity: AngleDirection {\n    angleVariation: 45\n    angle: 180\n    magnitude: 200\n  }\n}\n```", "```cpp\nEmitter {\n  anchors.right: parent.right\n  anchors.verticalCenter: parent.verticalCenter\n  emitRate: 15\n  lifeSpan: 5000\n\n  velocity: AngleDirection {\n    angle: 180\n    magnitude: 200\n  }\n  acceleration: AngleDirection {\n    angle: 90 // local left = global down\n    magnitude: 100\n  }\n}\n```", "```cpp\nItem {\n  Image {\n    id: image\n    source: \"rocket.png\"\n  }\n  Emitter {\n    anchors.right: image.right\n    anchors.verticalCenter: image.verticalCenter\n    emitRate: 500\n    lifeSpan: 3000\n    lifeSpanVariation: 1000\n    velocityFromMovement: -20\n\n    velocity: AngleDirection {\n      magnitude: 100\n      angleVariation: 40\n    }\n  }\n  NumberAnimation on x {\n    ...\n  }\n}\n```", "```cpp\nAge {\n  once: true\n  lifeLeft: 500\n  shape: EllipseShape { fill: true }\n  anchors.fill: parent\n}\n```", "```cpp\nParticleSystem {\n  id: coinParticles\n  anchors.fill: parent // scene is the parent\n\n  ImageParticle {\n    source: \"particle.png\"\n    colorVariation: 1\n    rotationVariation: 180\n    rotationVelocityVariation: 10\n  }\n}\n```", "```cpp\nEmitter {\n  id: emitter\n  system: coinParticles\n  emitRate: 0\n  lifeSpan: 500\n  lifeSpanVariation: 100\n  velocity: AngleDirection { angleVariation: 180; magnitude: 10 }\n  acceleration: AngleDirection { angle: 270; magnitude: 2 }\n}\n```", "```cpp\nfunction hit() {\n  emitter.burst(50)\n  hitAnim.start()\n}\n```"]