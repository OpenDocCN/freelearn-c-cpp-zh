["```cpp\n  CollisionObject2D < Node2D < CanvasItem < Node < Object\n```", "```cpp\n    ~/project_folder/$ git init\n    ```", "```cpp\n    ~/project_folder/$ git add *\n    ```", "```cpp\n    ~/project_folder/$ git commit -m \"short description\"\n    ```", "```cpp\nshader_type canvas_item;\nvoid fragment() {\n    // Place fragment code here.\n}\n```", "```cpp\nshader_type canvas_item;\nvoid fragment() {\nCOLOR = vec4(UV.x, UV.y, 0.0, 1.0);\n}\n```", "```cpp\nshader_type canvas_item;\nuniform vec4 fill_color : source_color;\nvoid fragment() {\n    COLOR = fill_color;\n}\n```", "```cpp\nCOLOR.rgb = fill_color.rgb;\n```", "```cpp\nshader_type canvas_item;\nuniform vec4 fill_color : source_color;\nuniform bool active = false;\nvoid fragment() {\n    if (active == true) {\n        COLOR.rgb = fill_color.rgb;\n    }\n}\n```", "```cpp\nshader_type canvas_item;\nuniform vec4 line_color : source_color;\nuniform float line_thickness : hint_range(0, 10) = 0.5;\nvoid fragment() {\n    vec2 size = TEXTURE_PIXEL_SIZE * line_thickness;\n    float outline = texture(TEXTURE, UV + vec2(-size.x,\n        0)).a;\n    outline += texture(TEXTURE, UV + vec2(0, size.y)).a;\n    outline += texture(TEXTURE, UV + vec2(size.x, 0)).a;\n    outline += texture(TEXTURE, UV + vec2(0, -size.y)).a;\n    outline = min(outline, 1.0);\n    vec4 color = texture(TEXTURE, UV);\n    COLOR = mix(color, line_color, outline - color.a);\n}\n```", "```cpp\nshader_type spatial;\nvoid vertex() {\n    VERTEX.y += sin(10.0 * UV.x) * 0.5;\n}\n```", "```cpp\nVERTEX.y += sin(TIME + 10.0 * UV.x) * 0.5;\n```", "```cpp\nusing Godot;\npublic partial class MyCharacterBody2D : CharacterBody2D\n{\n    private float _speed = 100.0f;\n    private float _jumpSpeed = -400.0f;\n    // Get the gravity from the project settings so you can\n       sync with rigid body nodes.\n    public float Gravity = ProjectSettings.GetSetting(\n        \"physics/2d/default_gravity\").AsSingle();\n    public override void _PhysicsProcess(double delta)\n    {\n        Vector2 velocity = Velocity;\n        // Add the gravity.\n        velocity.Y += Gravity * (float)delta;\n        // Handle jump.\n        if (Input.IsActionJustPressed(\"jump\") &&\n        IsOnFloor())\n            velocity.Y = _jumpSpeed;\n        // Get the input direction.\n        Vector2 direction = Input.GetAxis(\"ui_left\",\n            \"ui_right\");\n        velocity.X = direction * _speed;\n        Velocity = velocity;\n        MoveAndSlide();\n    }\n}\n```"]