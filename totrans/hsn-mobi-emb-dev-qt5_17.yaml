- en: Deploying to Mobile and Embedded
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mobile phones, tablets, and watches have their platform ways to deploy apps—usually
    through an app store. Deploying plugins and other libraries needs special attention.
    In this chapter, we will discuss alternative OSes, such as Jolla's Sailfish OS,
    as embedded devices have several options. I use a Raspberry Pi as an example for
    embedded Linux devices.
  prefs: []
  type: TYPE_NORMAL
- en: For the major mobile phone app stores, you will need to digitally sign your
    package with a security certificate, which the systems use as a way to identify
    the author enough to trust the application.
  prefs: []
  type: TYPE_NORMAL
- en: A certificate involves a public-private key pair. The private key is just that.
    You keep that private. The public certificate is publicly distributable. I won't
    go into the cryptography involved here. Qt Creator calls these certificates the
    keystore and you can use Qt Creator to generate these self-signed certificates.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will examine the following deployment targets:'
  prefs: []
  type: TYPE_NORMAL
- en: For Android
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For iOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For alternative OSes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For embedded Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keep backups of your digital certificates as you will not be able to update
    your applications in the stores if you lose them.
  prefs: []
  type: TYPE_NORMAL
- en: Deployment for Android
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Android does not need Google Play Store to install apps; it's just most convenient.
    There are other marketplaces to choose from, such as Aptoid, Yandex, F-Droid,
    and Amazon.
  prefs: []
  type: TYPE_NORMAL
- en: You can also sideload apps. Sideloading is installing an app by transferring
    the package by USB, memory card, or over the internet, without the use of the
    official store.
  prefs: []
  type: TYPE_NORMAL
- en: Qt Creator technically can sideload the package of the application you are working
    on. It can install the package, or simply run the executable on the device without
    installing it.
  prefs: []
  type: TYPE_NORMAL
- en: Essentially, you can put a package file on your web server, have people download
    it to their phones or computers, and let them manually install it.
  prefs: []
  type: TYPE_NORMAL
- en: You could also make it available on Google Play Store, by officially publishing
    it. You need to be able to sign it with a certificate that you get from your developer
    account. This certificate for Android does not need to be signed by a certificate
    authority, but can be self-signed.
  prefs: []
  type: TYPE_NORMAL
- en: The package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After developing and testing your application, you will need to make a package
    so people can install it. There are a few ways to make a package, via Qt Creator
    or by the command line.
  prefs: []
  type: TYPE_NORMAL
- en: androiddeployqt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The command line tool named `androiddeployqt` comes with Qt Creator for the
    Android SDK. This is a command line tool to help build and sign an Android package.
    To view its help output, run `/path/to/androiddeployqt --help`. I am not going
    to go into the command line deployment other than to say it is available to use.
  prefs: []
  type: TYPE_NORMAL
- en: Qt Creator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Digital certificates in Qt Creator are handled on the Build Settings page for
    your projects. Now, let''s build:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Projects | Build will get you to the Build Settings page. If you are making
    a release, make sure your project is in Release mode from the top of this page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cc60086f-401b-4dae-bae2-f8d9b9ee95d7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Navigate to Build Steps | Build Android APK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4259b16a-acac-4ecd-878c-a2cda549bed9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will need to click on Create Templates, which will create the `manifest.xml`
    file needed for the store. The two main entries are Package name and Application
    icon. I used Android Studio to create different sized icons, because it was the
    most efficient at creating several icons at once. I started with a large PNG.
    Be sure to select the correct SDK versions, or it will become an issue later on:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b520da3d-9632-4120-b084-c8845de0a982.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You also need to generate certificates. In the Build Steps page, find the Sign
    package section. The button on the very right of the Keystore entry, which says
    Create..., will bring up this dialog:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5229d052-7a5a-4fde-91e5-9478eb6286a7.png)'
  prefs: []
  type: TYPE_IMG
- en: You will need to supply a Password for both Keystore and Certificate, which
    are the private and public keys.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You also need to supply your name, Organization, City, State, and Two-letter
    country code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Do another build and it will create a signed Android package that you can install
    or upload to the store. You are now ready to test your app in a closed, internal,
    or open test track. Qt Creator will not help you there.
  prefs: []
  type: TYPE_NORMAL
- en: Test track
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can set up an internal test track for testers in your organization. If you
    are a one-stop shop, you are the tester!
  prefs: []
  type: TYPE_NORMAL
- en: Internal tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can have up to 100 internal testers. To create a testers list on Play Console,
    navigate to:'
  prefs: []
  type: TYPE_NORMAL
- en: Settings | Manage testers | CREATE LIST
  prefs: []
  type: TYPE_NORMAL
- en: 'You will need to provide the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: List name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Email addresses (you can upload a csv email list too!)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can then add testers to an app (which you may or may not have previously
    added). Now select your app and navigate to App releases, and select one of the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Internal: An internal closed track'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Alpha: A closed track'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Beta: An open track'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Production: Release'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on Manage (Internal) | Create Release
  prefs: []
  type: TYPE_NORMAL
- en: 'You need to make sure your account is set up, by providing the following items:'
  prefs: []
  type: TYPE_NORMAL
- en: Store Listing—screenshots
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hi-res icon (512 x 512 png)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Feature Graphic (1,024 x 500 jpg, png)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Content rating
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pricing and distribution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You need to upload an app package before you add testers. Once you upload your
    package app, you will need to select Review.
  prefs: []
  type: TYPE_NORMAL
- en: You will then be asked to select your testers list when you navigate back to
    the App releases page. You should receive a URL to share with your tester that
    they can use to download and install your internally-tested application package.
  prefs: []
  type: TYPE_NORMAL
- en: 'That red icon at the top of the page means something needs to be checked.:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fe17f4e7-c342-4536-a563-5b8a16718b35.png)'
  prefs: []
  type: TYPE_IMG
- en: In my case, I hadn't actually selected any testers to this release yet.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you add to the list of testers, it should look similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/441ba5b3-76aa-4d6b-9edb-528f92d0eef1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is what your testers will see in the Google Play Store:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/34f25046-f7bd-4be8-bcc9-22349032d3ce.png)'
  prefs: []
  type: TYPE_IMG
- en: Deployment on iOS is very similar, so let's look at that.
  prefs: []
  type: TYPE_NORMAL
- en: Deployment for iOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The iOS store is perhaps the most restrictive and complicated of all the mobile
    app stores to submit an app to. It also has more exhaustive submission guidelines,
    such as: it should not replicate the functionality of native applications. The
    process to get to the point of submitting an app is also more complicated.'
  prefs: []
  type: TYPE_NORMAL
- en: The package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Qt Creator comes with support for creating and signing iOS packages. As with
    Android, you will need certificates from your developer account. This is what
    you see when you log into the developer account at Apple:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8e06b7cc-dbe1-4bd2-a8bb-bdac7e502927.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once in your developer account, click on the icon labelled Certificates, Identifiers
    & Profiles to add certificates. Notice the list under Certificates at the left:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1158d39c-545e-4369-bf22-811bb0495ec9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'There are two types of Certificates: Development and Production. Production
    certificates are for release distribution. If you do not have Production certificates,
    add one now by clicking on the + icon:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6676edda-60b5-4633-be35-477b482d7f44.png)'
  prefs: []
  type: TYPE_IMG
- en: 'That will open up the following dialog:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f614f553-fa2b-4d3d-8530-97cd0913a7b2.png)'
  prefs: []
  type: TYPE_IMG
- en: Select App Store and Ad Hoc. Ad Hoc means you can only install this on a few
    testing devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, under Identifiers, select **App IDs**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/32808075-68c2-4024-b4cf-66a13b2a9dd4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'There are two types of App IDs:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Wildcard*, which can be used for multiple apps if they do not require iCloud
    or in-app purchases.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Explicit*, which is used for in-app purchases per application. You will need
    one of these for each app you have that uses in-app purchasing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You also need Provisioning Profiles:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e7736952-884c-44cb-9ab1-58abd4ae3da3.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see here, there are different types of provisioning profiles. Under
    Distribution, select App Store then the Continue button at the bottom of the page. Select
    the App ID you created previously. Select the Certificate also previously created.
    You will need to name this profile, and it must match the Bundle Identifier for
    your package. Download this and put it somewhere you remember; you will need this
    to sign the app through XCode.
  prefs: []
  type: TYPE_NORMAL
- en: You will also need an App ID, so select App IDs from the left and create a new
    one.
  prefs: []
  type: TYPE_NORMAL
- en: Now we can sign a release mode package.
  prefs: []
  type: TYPE_NORMAL
- en: Qt Creator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Qt Creator cannot create iOS packages itself. We need to use the Xcode project
    file that Qt Creator generates in order to create the package using Xcode.
  prefs: []
  type: TYPE_NORMAL
- en: Select a Release build and then run `qmake` to create the Xcode project file
    we will use.
  prefs: []
  type: TYPE_NORMAL
- en: Xcode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From the build directory, open the resulting `<target>.xcodeproj` in Xcode.
    Select the project from the left to open up the project settings.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on General and then unselect Automatically manage signing to be able
    to manually select the package signing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ce97988e-3681-465e-9e13-58faa7b578bc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can import the profile by selecting Import Profile... from the drop-down
    list that is labeled Provisioning Profile, and then select Import Profile....
    Once the file dialog opens, you can navigate to where you put the `<profilename>.mobileprovision`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2e63d252-9933-4248-b512-dcd53bc6fda8.png)'
  prefs: []
  type: TYPE_IMG
- en: You can do this for both Signing (Debug) and Signing (Release).
  prefs: []
  type: TYPE_NORMAL
- en: 'Your Bundle Identifier must match the name of the provisioning profile. If
    it doesn''t, it will alert you:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9dd88fde-728d-4f92-85f5-af6d71652526.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The certificates have been applied:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e32c019f-fc21-4c87-9185-d86dd740ed34.png)'
  prefs: []
  type: TYPE_IMG
- en: Test and build the package. It should ask you for your administrator password
    when it signs the package.
  prefs: []
  type: TYPE_NORMAL
- en: To build a release mode package, navigate to Product | Scheme | Edit Scheme
    | Info | Build Configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Select Release and then build the package.
  prefs: []
  type: TYPE_NORMAL
- en: 'From here, you need to grab your web browser again and navigate to the App
    Store Connect, select **My Apps**, and click on the + to create a New App:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/275b8f25-d0f2-4a9d-96f9-3fc5f5e3f244.png)'
  prefs: []
  type: TYPE_IMG
- en: From here, fill out App Information, Pricing, and Availability.
  prefs: []
  type: TYPE_NORMAL
- en: Next, add screenshots, icons, store text, and other items for the apps page
    and the App Store.
  prefs: []
  type: TYPE_NORMAL
- en: To upload your app from Xcode, select Product | Archive.
  prefs: []
  type: TYPE_NORMAL
- en: This will create the package and open the Archives window.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should validate the package before uploading it to the App Store, so select
    Validate App, then select profile and the certificates:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/718f21e1-6790-42ff-965b-ebe8a3854b06.png)'
  prefs: []
  type: TYPE_IMG
- en: Fix any issues you may have. This also includes adding screenshots, app icons,
    and so on for the storefront for the app. Then you can click the Distribute App button.
  prefs: []
  type: TYPE_NORMAL
- en: Alternative OSes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are other mobile and embedded OSes available that you may or may not
    have heard about, such as my favorite alternative mobile OS: Jolla''s Sailfish.
    Another operating system is UBports, which is an Open Source version of Canonical''s
    now-defunct mobile phone OS, Ubuntu Touch.'
  prefs: []
  type: TYPE_NORMAL
- en: Sailfish OS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sailfish OS is a continuation of Nokia's MeeGo, which was a continuation of
    Maemo.
  prefs: []
  type: TYPE_NORMAL
- en: The UI is developed by Jolla, and the base OS is open source Mer, which is developed
    by Jolla and the community.
  prefs: []
  type: TYPE_NORMAL
- en: 'Jolla has an app store they named Harbour ([http://harbour.jolla.com](http://harbour.jolla.com)).
    At this time, you cannot sell apps through this app store:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3b80ce25-022e-4522-a811-993aede9f94f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This is what my developer page looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/53a4b008-a2bc-48d5-afb7-d455b8db017d.png)'
  prefs: []
  type: TYPE_IMG
- en: Yes, it has been five years since I have updated it.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can install Jolla onto certain Android phones—or if you are lucky enough
    to have actual Jolla hardware or perhaps a phone that comes with Jolla installed,
    you have access to Harbour through the Store app. Here is the view of the Top
    apps page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/90c6fa09-d95f-49d1-8a68-03a4de6ae1d8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'I have an old app in that store named Compass that I need to update to the
    new Sailfish OS version 3:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bdb1a474-9b30-45d3-aba4-38eba4e03350.png)'
  prefs: []
  type: TYPE_IMG
- en: I need to download the Application SDK from [https://releases.sailfishos.org/sdk/installers/1.24/](https://releases.sailfishos.org/sdk/installers/1.24/).
  prefs: []
  type: TYPE_NORMAL
- en: 'I install it on my Linux development machine as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The Sailfish OS SDK is now installed!
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/30c4bfde-de9d-466f-8a16-e5dd16b3c58b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After Qt Creator opens with the Sailfish SDK, click on Sailfish OS from the
    icons on the left:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3002229b-0519-4003-bb03-c529c33f21a0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You should see a message that says that the build engine is not running, so
    we need to start it. Click on Start the build engine!:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/376220ef-6daf-42ff-9aa0-1ac9555d8342.png)'
  prefs: []
  type: TYPE_IMG
- en: Once you do that, you get into the Sailfish Control Centre, where you can add
    components into the SDK, and apply updates if needed.
  prefs: []
  type: TYPE_NORMAL
- en: Set up your device, if you have one, and navigate to Tools | Options | Devices.
  prefs: []
  type: TYPE_NORMAL
- en: Once there, click on Tools | Options | Kits and select the armv7hl kit.
  prefs: []
  type: TYPE_NORMAL
- en: In the Devices options section, make sure that the Jolla device that you set
    up previously is selected and not the emulator, unless that is what you want to
    run the app on.
  prefs: []
  type: TYPE_NORMAL
- en: The Jolla SDK build engine runs in a Virtual machine, so it can be used from
    any platform. The IDE it uses is Qt Creator. Jolla is unique in that you can run
    native apps for Jolla OS, but also it can run Android Apps. The gotcha about Android
    support is that there is no Google Play API.
  prefs: []
  type: TYPE_NORMAL
- en: Now that the build engine (cross compiler) is running, we can build our app,
    test, and then make a package to upload to Harbour.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the Projects | Run settings, make sure either Deploy by Copying Binaries or
    Deploy As RPM Package is selected for Method. If you are running it without installing
    a package, select the Copying method. Here is my updated Compass app running on
    the Jolla phone:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5a2051d2-468b-4d36-9967-91fa018c8463.png)'
  prefs: []
  type: TYPE_IMG
- en: Once you have built the release package, navigate to Sailfish OS | Publishing,
    click on the RPM validator, and select your package file to validate.
  prefs: []
  type: TYPE_NORMAL
- en: The Jolla Store interface is the least complicated of the mobile app stores
    here, in part because there are no sales of apps.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on Add app. You will have to fill out the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Title
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Details:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: description
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: summary
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: recent changes
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Categorization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compatibility
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visual Assts (screenshots, icons)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Contact details
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any message to QA
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once you submit your application to Jolla''s Harbour store, you will see something
    like this image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4e5fb11b-d6c6-49fa-9c70-04f850fd776c.png)'
  prefs: []
  type: TYPE_IMG
- en: QA will check the package and either reject or accept it.
  prefs: []
  type: TYPE_NORMAL
- en: UBports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: UBports is a convergent OS based on Canonical's now-defunct mobile offering,
    Ubuntu Touch. Convergent means it is designed to run on desktops and mobile devices.
    It runs on various mobile phones and tablets, and the UI is based on Qt and QML.
    I run mine on a Nexus 4\. I won't go into detail, but I did wanted to mention
    it. More information can be found on: [https://ubports.com/](https://ubports.com/)
  prefs: []
  type: TYPE_NORMAL
- en: There is a simple installer for putting UBports on a supported device at [https://ubuntu-touch.io/get-ut](https://ubuntu-touch.io/get-ut).
  prefs: []
  type: TYPE_NORMAL
- en: You can grab the SDK at [https://docs.ubports.com/en/latest/appdev/index.html](https://docs.ubports.com/en/latest/appdev/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: Clickable
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The UBports SDK produces click packages from the command line. The Ubuntu Touch
    SDK IDE is no longer supported by Canonical or UBports. The store is called OpenStore.
    You need an account, and the URL to submit apps is [https://open-store.io/submit](https://open-store.io/submit).
  prefs: []
  type: TYPE_NORMAL
- en: Embedded Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Embedded Linux devices come in many different sizes and varieties. Some may
    have app stores, but most don't. There are various methods to get the OS and apps
    on the devices.
  prefs: []
  type: TYPE_NORMAL
- en: OS deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The deployment of the operating system will on your device, as some embedded
    devices have very specific methods in which the operating system is deployed to
    the device. In the case of Raspberry Pi, it is easy to copy the image to an SD
    card and put that into the RPI and boot it up.
  prefs: []
  type: TYPE_NORMAL
- en: 'I have a script named `writeIso` that I use; it consists of two lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'I run it something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '`./writeIso /path/to/deviceImage.img /dev/sdc`'
  prefs: []
  type: TYPE_NORMAL
- en: Other devices may have a `flash` method, whereby the image gets copied directly
    onto the device. This can be as low-level as having to use JTAG, or it could be
    higher-level, such as using Android's `adb` command. Sometimes, you have to write
    the image to an SD card, put that into the device, and then, with some combination
    of keys or buttons, flash that image into the machine's ROM.
  prefs: []
  type: TYPE_NORMAL
- en: App deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With a distribution with a package manager such as Raspbian or Yocto, you can
    easily distribute your application, either by installing directly on the device
    or adding to the package repository. In the case of Yocto, you can have a local
    repository to distribute.
  prefs: []
  type: TYPE_NORMAL
- en: To get the package file onto the device, you can use Qt Creator and set up a
    generic Linux device. This requires an SSH server running on the device and some
    kind of network connection.
  prefs: []
  type: TYPE_NORMAL
- en: You can also use the `scp` command to copy packages and/or binaries to the device.
    This also requires an SSH server.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a few different methods for OS and app deployment. Mobile phones have
    app stores, which also have various methods to submit apps. Usually, these are
    done though a web browser. You should be able to publish apps to the Android,
    iOS, and alternative OS, such as Jolla's Sailfish, app stores.
  prefs: []
  type: TYPE_NORMAL
- en: You should also be able to distribute your app onto embedded devices, such as
    Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will traverse into the brand new technology of Qt for
    WebAssembly that allows Qt applications to run in a web browser.
  prefs: []
  type: TYPE_NORMAL
