["```cpp\n#ifndef _EXTREME_C_EXAMPLE_22_1_\n#define _EXTREME_C_EXAMPLE_22_1_\n#include <stdint.h>\n#include <unistd.h>\ntypedef int64_t (*int64_feed_t)();\nint64_t next_even_number();\nint64_t calc_factorial(int64_feed_t feed);\n#endif\n```", "```cpp\n#include \"ExtremeC_examples_chapter22_1.h\"\nint64_t next_even_number() {\n  static int feed = -2;\n  feed += 2;\n  if (feed >= 10) {\n    feed = 0;\n  }\n  return feed;\n}\nint64_t calc_factorial(int64_feed_t feed) {\n  int64_t fact = 1;\n  int64_t number = feed();\n  for (int64_t i = 1; i <= number; i++) {\n    fact *= i;\n  }\n  return fact;\n}\n```", "```cpp\n#include <stdio.h>\n#include \"ExtremeC_examples_chapter22_1.h\"\nint main(int argc, char** argv) {\n  for (size_t i = 1; i <= 12; i++) {\n    printf(\"%lu\\n\", calc_factorial(next_even_number));\n  }\n  return 0;\n}\n```", "```cpp\n$ gcc -c ExtremeC_examples_chapter22_1.c -o impl.o\n$ gcc -c ExtremeC_examples_chapter22_1_main.c -o main.o\n$ gcc impl.o main.o -o ex22_1.out\n$ ./ex22_1.out\n1\n2\n24\n720\n40320\n1\n2\n24\n720\n40320\n1\n2\n$\n```", "```cpp\n#include <assert.h>\n#include \"ExtremeC_examples_chapter22_1.h\"\nvoid TESTCASE_next_even_number__even_numbers_should_be_returned() {\n  assert(next_even_number() == 0);\n  assert(next_even_number() == 2);\n  assert(next_even_number() == 4);\n  assert(next_even_number() == 6);\n  assert(next_even_number() == 8);\n}\nvoid TESTCASE_next_even_number__numbers_should_rotate() {\n  int64_t number = next_even_number();\n  next_even_number();\n  next_even_number();\n  next_even_number();\n  next_even_number();\n  int64_t number2 = next_even_number();\n  assert(number == number2);\n}\n```", "```cpp\n#include <assert.h>\n#include \"ExtremeC_examples_chapter22_1.h\"\nint64_t input_value = -1;\nint64_t feed_stub() {\n  return input_value;\n}\nvoid TESTCASE_calc_factorial__fact_of_zero_is_one() {\n  input_value = 0;\n  int64_t fact = calc_factorial(feed_stub);\n  assert(fact == 1);\n}\nvoid TESTCASE_calc_factorial__fact_of_negative_is_one() {\n  input_value = -10;\n  int64_t fact = calc_factorial(feed_stub);\n  assert(fact == 1);\n}\nvoid TESTCASE_calc_factorial__fact_of_5_is_120() {\n  input_value = 5;\n  int64_t fact = calc_factorial(feed_stub);\n  assert(fact == 120);\n}\n```", "```cpp\n#include <stdio.h>\nvoid TESTCASE_next_even_number__even_numbers_should_be_returned();\nvoid TESTCASE_next_even_number__numbers_should_rotate();\nvoid TESTCASE_calc_factorial__fact_of_zero_is_one();\nvoid TESTCASE_calc_factorial__fact_of_negative_is_one();\nvoid TESTCASE_calc_factorial__fact_of_5_is_120();\nint main(int argc, char** argv) {\n  TESTCASE_next_even_number__even_numbers_should_be_returned();\n  TESTCASE_next_even_number__numbers_should_rotate();\n  TESTCASE_calc_factorial__fact_of_zero_is_one();\n  TESTCASE_calc_factorial__fact_of_negative_is_one();\n  TESTCASE_calc_factorial__fact_of_5_is_120();\n  printf(\"All tests are run successfully.\\n\");\n  return 0;\n}\n```", "```cpp\n$ gcc -g -c ExtremeC_examples_chapter22_1.c -o impl.o\n$ gcc -g -c ExtremeC_examples_chapter22_1__next_even_number__tests.c -o tests1.o\n$ gcc -g -c ExtremeC_examples_chapter22_1__calc_factorial__tests.c -o tests2.o\n$ gcc -g -c ExtremeC_examples_chapter22_1_tests.c -o main.o\n$ gcc impl.o tests1.o tests2.o main.o -o ex22_1_tests.out\n$ ./ex22_1_tests.out\nAll tests are run successfully.\n$ echo $?\n0\n$\n```", "```cpp\nint64_t calc_factorial(int64_feed_t feed) {\n  int64_t fact = 1;\n  int64_t number = feed();\n  for (int64_t i = 1; i <= (number + 1); i++) {\n    fact *= i;\n  }\n  return fact;\n}\n```", "```cpp\n$ gcc -g -c ExtremeC_examples_chapter22_1.c -o impl.o\n$ gcc -g -c ExtremeC_examples_chapter22_1_tests.c -o main.o\n$ ./ex22_1_tests.out\nAssertion failed: (fact == 120), function TESTCASE_calc_factorial__fact_of_5_is_120, \nfile .../22.1/ExtremeC_examples_chapter22_1__calc_factorial__tests.c, line 29.\nAbort trap: 6\n$ echo $?\n134\n$\n```", "```cpp\nint64_t calc_factorial() {\n  int64_t fact = 1;\n  int64_t number = next_even_number();\n  for (int64_t i = 1; i <= number; i++) {\n    fact *= i;\n  }\n  return fact;\n}\n```", "```cpp\n#include <assert.h>\n#include \"ExtremeC_examples_chapter22_1.h\"\nvoid TESTCASE_component_test__factorials_from_0_to_8() {\n  assert(calc_factorial(next_even_number) == 1);\n  assert(calc_factorial(next_even_number) == 2);\n  assert(calc_factorial(next_even_number) == 24);\n  assert(calc_factorial(next_even_number) == 720);\n  assert(calc_factorial(next_even_number) == 40320);\n}\nvoid TESTCASE_component_test__factorials_should_rotate() {\n  int64_t number = calc_factorial(next_even_number);\n  for (size_t i = 1; i <= 4; i++) {\n    calc_factorial(next_even_number);\n  }\n  int64_t number2 = calc_factorial(next_even_number);\n  assert(number == number2);\n}\nint main(int argc, char** argv) {\n  TESTCASE_component_test__factorials_from_0_to_8();\n  TESTCASE_component_test__factorials_should_rotate();\n  return 0;\n}\n```", "```cpp\n// Required by CMocka\n#include <stdarg.h>\n#include <stddef.h>\n#include <setjmp.h>\n#include <cmocka.h>\n#include \"ExtremeC_examples_chapter22_1.h\"\nint64_t input_value = -1;\nint64_t feed_stub() {\n  return input_value;\n}\nvoid calc_factorial__fact_of_zero_is_one(void** state) {\n  input_value = 0;\n  int64_t fact = calc_factorial(feed_stub);\n  assert_int_equal(fact, 1);\n}\nvoid calc_factorial__fact_of_negative_is_one(void** state) {\n  input_value = -10;\n  int64_t fact = calc_factorial(feed_stub);\n  assert_int_equal(fact, 1);\n}\nvoid calc_factorial__fact_of_5_is_120(void** state) {\n  input_value = 5;\n  int64_t fact = calc_factorial(feed_stub);\n  assert_int_equal(fact, 120);\n}\nvoid next_even_number__even_numbers_should_be_returned(void** state) {\n  assert_int_equal(next_even_number(), 0);\n  assert_int_equal(next_even_number(), 2);\n  assert_int_equal(next_even_number(), 4);\n  assert_int_equal(next_even_number(), 6);\n  assert_int_equal(next_even_number(), 8);\n}\nvoid next_even_number__numbers_should_rotate(void** state) {\n  int64_t number = next_even_number();\n  for (size_t i = 1; i <= 4; i++) {\n    next_even_number();\n  }\n  int64_t number2 = next_even_number();\n  assert_int_equal(number, number2);\n}\nint setup(void** state) {\n  return 0;\n}\nint tear_down(void** state) {\n  return 0;\n}\nint main(int argc, char** argv) {\n  const struct CMUnitTest tests[] = {\n    cmocka_unit_test(calc_factorial__fact_of_zero_is_one),\n    cmocka_unit_test(calc_factorial__fact_of_negative_is_one),\n    cmocka_unit_test(calc_factorial__fact_of_5_is_120),\n    cmocka_unit_test(next_even_number__even_numbers_should_be_returned),\n    cmocka_unit_test(next_even_number__numbers_should_rotate),\n  };\n  return cmocka_run_group_tests(tests, setup, tear_down);\n}\n```", "```cpp\n$ gcc -g -c ExtremeC_examples_chapter22_1.c -o impl.o\n$ gcc -g -c ExtremeC_examples_chapter22_1_cmocka_tests.c -o cmocka_tests.o\n$ gcc impl.o cmocka_tests.o -lcmocka -o ex22_1_cmocka_tests.out\n$ ./ex22_1_cmocka_tests.out\n[==========] Running 5 test(s).\n[ RUN      ] calc_factorial__fact_of_zero_is_one\n[       OK ] calc_factorial__fact_of_zero_is_one\n[ RUN      ] calc_factorial__fact_of_negative_is_one\n[       OK ] calc_factorial__fact_of_negative_is_one\n[ RUN      ] calc_factorial__fact_of_5_is_120\n[       OK ] calc_factorial__fact_of_5_is_120\n[ RUN      ] next_even_number__even_numbers_should_be_returned\n[       OK ] next_even_number__even_numbers_should_be_returned\n[ RUN      ] next_even_number__numbers_should_rotate\n[       OK ] next_even_number__numbers_should_rotate\n[==========] 5 test(s) run.\n[  PASSED  ] 5 test(s).\n$\n```", "```cpp\nvoid next_even_number__even_numbers_should_be_returned(void** state) {\n  assert_int_equal(next_even_number(), 1);\n  ...\n}\n```", "```cpp\n$ gcc -g -c ExtremeC_examples_chapter22_1_cmocka_tests.c -o cmocka_tests.o\n$ gcc impl.o cmocka_tests.o -lcmocka -o ex22_1_cmocka_tests.out\n$ ./ex22_1_cmocka_tests.out\n[==========] Running 5 test(s).\n[ RUN      ] calc_factorial__fact_of_zero_is_one\n[       OK ] calc_factorial__fact_of_zero_is_one\n[ RUN      ] calc_factorial__fact_of_negative_is_one\n[       OK ] calc_factorial__fact_of_negative_is_one\n[ RUN      ] calc_factorial__fact_of_5_is_120\n[       OK ] calc_factorial__fact_of_5_is_120\n[ RUN      ] next_even_number__even_numbers_should_be_returned\n[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- .../ExtremeC_examples_chapter22_1_cmocka_tests.c:37: error: Failure!\n[  FAILED  ] next_even_number__even_numbers_should_be_returned\n[ RUN      ] next_even_number__numbers_should_rotate\n[       OK ] next_even_number__numbers_should_rotate\n[==========] 5 test(s) run.\n[  PASSED  ] 4 test(s).\n[  FAILED  ] 1 test(s), listed below:\n[  FAILED  ] next_even_number__even_numbers_should_be_returned\n 1 FAILED TEST(S)\n $\n```", "```cpp\n#ifndef _EXTREME_C_EXAMPLE_22_2_\n#define _EXTREME_C_EXAMPLE_22_2_\n#define TRUE 1\n#define FALSE 0\ntypedef int bool_t;\nbool_t random_boolean();\n#endif\n```", "```cpp\n#include <stdlib.h>\n#include <stdio.h>\n#include \"ExtremeC_examples_chapter22_2.h\"\nbool_t random_boolean() {\n  int number = rand();\n  return (number % 2);\n}\n```", "```cpp\n#include <stdlib.h>\n// Required by CMocka\n#include <stdarg.h>\n#include <stddef.h>\n#include <setjmp.h>\n#include <cmocka.h>\n#include \"ExtremeC_examples_chapter22_2.h\"\nint next_random_num = 0;\nint __wrap_rand() {\n  return next_random_num;\n}\nvoid test_even_random_number(void** state) {\n  next_random_num = 10;\n  assert_false(random_boolean());\n}\nvoid test_odd_random_number(void** state) {\n  next_random_num = 13;\n  assert_true(random_boolean());\n}\nint main(int argc, char** argv) {\n  const struct CMUnitTest tests[] = {\n    cmocka_unit_test(test_even_random_number),\n    cmocka_unit_test(test_odd_random_number)\n  };\n  return cmocka_run_group_tests(tests, NULL, NULL);\n}\n```", "```cpp\n$ gcc -g -c ExtremeC_examples_chapter22_2.c -o impl.o\n$ gcc -g -c ExtremeC_examples_chapter22_2_cmocka_tests_with_stub.c -o tests.o\n$ gcc impl.o tests.o -lcmocka -o ex22_2_cmocka_tests_with_stub.out\n$ ./ex22_2_cmocka_tests_with_stub.out\n[==========] Running 2 test(s).\n[ RUN      ] test_even_random_number\n[  ERROR   ] --- random_boolean()\n[   LINE   ] --- ExtremeC_examples_chapter22_2_cmocka_tests_with_stub.c:23: error: Failure!\n[  FAILED  ] test_even_random_number\n[ RUN      ] test_odd_random_number\n[  ERROR   ] --- random_boolean()\n[   LINE   ] --- ExtremeC_examples_chapter22_2_cmocka_tests_with_stub.c:28: error: Failure!\n[  FAILED  ] test_odd_random_number\n[==========] 2 test(s) run.\n[  PASSED  ] 0 test(s).\n[  FAILED  ] 2 test(s), listed below:\n[  FAILED  ] test_even_random_number\n[  FAILED  ] test_odd_random_number\n 2 FAILED TEST(S)\n$\n```", "```cpp\n$ gcc impl.o tests.o -lcmocka -Wl,--wrap=rand -o ex22_2_cmocka_tests_with_stub.out\n$ ./ex22_2_cmocka_tests_with_stub.out\n[==========] Running 2 test(s).\n[ RUN      ] test_even_random_number\n[       OK ] test_even_random_number\n[ RUN      ] test_odd_random_number\n[       OK ] test_odd_random_number\n[==========] 2 test(s) run.\n[  PASSED  ] 2 test(s).\n$\n```", "```cpp\n#include <stdlib.h>\n// Required by CMocka\n#include <stdarg.h>\n#include <stddef.h>\n#include <setjmp.h>\n#include <cmocka.h>\n#include \"ExtremeC_examples_chapter22_2.h\"\nint __wrap_rand() {\n  return mock_type(int);\n}\nvoid test_even_random_number(void** state) {\n  will_return(__wrap_rand, 10);\n  assert_false(random_boolean());\n}\nvoid test_odd_random_number(void** state) {\n  will_return(__wrap_rand, 13);\n  assert_true(random_boolean());\n}\nint main(int argc, char** argv) {\n  const struct CMUnitTest tests[] = {\n    cmocka_unit_test(test_even_random_number),\n    cmocka_unit_test(test_odd_random_number)\n  };\n  return cmocka_run_group_tests(tests, NULL, NULL);\n}\n```", "```cpp\n#ifndef _EXTREME_C_EXAMPLE_22_1_\n#define _EXTREME_C_EXAMPLE_22_1_\n#include <stdint.h>\n#include <unistd.h>\n#if __cplusplus\nextern \"C\" {\n#endif\ntypedef int64_t (*int64_feed_t)();\nint64_t next_even_number();\nint64_t calc_factorial(int64_feed_t feed);\n#if __cplusplus\n}\n#endif\n#endif\n```", "```cpp\n// Required by Google Test\n#include <gtest/gtest.h>\n#include \"ExtremeC_examples_chapter22_1.h\"\nint64_t input_value = -1;\nint64_t feed_stub() {\n  return input_value;\n}\nTEST(calc_factorial, fact_of_zero_is_one) {\n  input_value = 0;\n  int64_t fact = calc_factorial(feed_stub);\n  ASSERT_EQ(fact, 1);\n}\nTEST(calc_factorial, fact_of_negative_is_one) {\n  input_value = -10;\n  int64_t fact = calc_factorial(feed_stub);\n  ASSERT_EQ(fact, 1);\n}\nTEST(calc_factorial, fact_of_5_is_120) {\n  input_value = 5;\n  int64_t fact = calc_factorial(feed_stub);\n  ASSERT_EQ(fact, 120);\n}\nTEST(next_even_number, even_numbers_should_be_returned) {\n  ASSERT_EQ(next_even_number(), 0);\n  ASSERT_EQ(next_even_number(), 2);\n  ASSERT_EQ(next_even_number(), 4);\n  ASSERT_EQ(next_even_number(), 6);\n  ASSERT_EQ(next_even_number(), 8);\n}\nTEST(next_even_number, numbers_should_rotate) {\n  int64_t number = next_even_number();\n  for (size_t i = 1; i <= 4; i++) {\n    next_even_number();\n  }\n  int64_t number2 = next_even_number();\n   ASSERT_EQ(number, number2);\n}\nint main(int argc, char** argv) {\n  ::testing::InitGoogleTest(&argc, argv);\n  return RUN_ALL_TESTS();\n}\n```", "```cpp\n$ gcc -g -c ExtremeC_examples_chapter22_1.c -o impl.o\n$ g++ -std=c++11 -g -c ExtremeC_examples_chapter22_1_gtests.cpp -o gtests.o\n$ g++ impl.o gtests.o -lgtest -lpthread -o ex19_1_gtests.out\n$ ./ex19_1_gtests.out\n[==========] Running 5 tests from 2 test suites.\n[----------] Global test environment set-up.\n[----------] 3 tests from calc_factorial\n[ RUN      ] calc_factorial.fact_of_zero_is_one\n[       OK ] calc_factorial.fact_of_zero_is_one (0 ms)\n[ RUN      ] calc_factorial.fact_of_negative_is_one\n[       OK ] calc_factorial.fact_of_negative_is_one (0 ms)\n[ RUN      ] calc_factorial.fact_of_5_is_120\n[       OK ] calc_factorial.fact_of_5_is_120 (0 ms)\n[----------] 3 tests from calc_factorial (0 ms total)\n[----------] 2 tests from next_even_number\n[ RUN      ] next_even_number.even_numbers_should_be_returned\n[       OK ] next_even_number.even_numbers_should_be_returned (0 ms)\n[ RUN      ] next_even_number.numbers_should_rotate\n[       OK ] next_even_number.numbers_should_rotate (0 ms)\n[----------] 2 tests from next_even_number (0 ms total)\n[----------] Global test environment tear-down\n[==========] 5 tests from 2 test suites ran. (1 ms total)\n[  PASSED  ] 5 tests.\n$\n```", "```cpp\nTEST(next_even_number, even_numbers_should_be_returned) {\n  ASSERT_EQ(next_even_number(), 1);\n  ...\n}\n```", "```cpp\n$ g++ -std=c++11 -g -c ExtremeC_examples_chapter22_1_gtests.cpp -o gtests.o\n$ g++ impl.o gtests.o -lgtest -lpthread -o ex22_1_gtests.out\n$ ./ex22_1_gtests.out\n[==========] Running 5 tests from 2 test suites.\n[----------] Global test environment set-up.\n[----------] 3 tests from calc_factorial\n[ RUN      ] calc_factorial.fact_of_zero_is_one\n[       OK ] calc_factorial.fact_of_zero_is_one (0 ms)\n[ RUN      ] calc_factorial.fact_of_negative_is_one\n[       OK ] calc_factorial.fact_of_negative_is_one (0 ms)\n[ RUN      ] calc_factorial.fact_of_5_is_120\n[       OK ] calc_factorial.fact_of_5_is_120 (0 ms)\n[----------] 3 tests from calc_factorial (0 ms total)\n[----------] 2 tests from next_even_number\n[ RUN      ] next_even_number.even_numbers_should_be_returned\n.../ExtremeC_examples_chapter22_1_gtests.cpp:34: Failure\nExpected equality of these values:\n  next_even_number()\n    Which is: 0\n  1\n[  FAILED  ] next_even_number.even_numbers_should_be_returned (0 ms)\n[ RUN      ] next_even_number.numbers_should_rotate\n[       OK ] next_even_number.numbers_should_rotate (0 ms)\n[----------] 2 tests from next_even_number (0 ms total)\n[----------] Global test environment tear-down\n[==========] 5 tests from 2 test suites ran. (0 ms total)\n[  PASSED  ] 4 tests.\n[  FAILED  ] 1 test, listed below:\n[  FAILED  ] next_even_number.even_numbers_should_be_returned\n 1 FAILED TEST\n$\n```"]