["```cpp\n{\n  \"FileVersion\": 3,\n  \"EngineAssociation\": \"4.21\",\n  \"Category\": \"\",\n  \"Description\": \"\",\n  \"Modules\": [\n    {\n      \"Name\": \"Chapter_10\",\n      \"Type\": \"Runtime\",\n      \"LoadingPhase\": \"Default\"\n    }, \n { \n \"Name\": \"Chapter_10Editor\", \n \"Type\": \"Editor\", \n \"LoadingPhase\": \"PostEngineInit\", \n \"AdditionalDependencies\": [ \n \"Engine\", \n \"CoreUObject\" \n ] \n } \n  ]\n}\n\n```", "```cpp\nusing UnrealBuildTool;\nusing System.Collections.Generic;\n\npublic class Chapter_10EditorTarget : TargetRules\n{\n  public Chapter_10EditorTarget(TargetInfo Target) : base(Target)\n  {\n    Type = TargetType.Editor;\n\n    ExtraModuleNames.AddRange( new string[] { \"Chapter_10Editor\" } );\n  }\n}\n```", "```cpp\nusing UnrealBuildTool;\n\npublic class Chapter_10Editor : ModuleRules\n{\n    public Chapter_10Editor(ReadOnlyTargetRules Target) : \n    base(Target)\n    {\n        PCHUsage = PCHUsageMode.UseExplicitOrSharedPCHs;\n\n        PublicDependencyModuleNames.AddRange(new string[] { \"Core\", \n        \"CoreUObject\", \"Engine\", \"InputCore\", \"RHI\", \"RenderCore\", \n        \"ShaderCore\", \"MainFrame\", \"AssetTools\", \"AppFramework\", \n        \"PropertyEditor\"});\n\n       PublicDependencyModuleNames.Add(\"Chapter_10\");\n\n        PrivateDependencyModuleNames.AddRange(new string[] { \n        \"UnrealEd\", \"Slate\", \"SlateCore\", \"EditorStyle\", \n        \"GraphEditor\", \"BlueprintGraph\" });\n\n    }\n}\n```", "```cpp\n#pragma once\n\n#include \"Engine.h\"\n#include \"Modules/ModuleInterface.h\"\n#include \"Modules/ModuleManager.h\"\n#include \"UnrealEd.h\"\n\nclass FChapter_10EditorModule: public IModuleInterface \n{ \n}; \n```", "```cpp\n#include \"Chapter_10Editor.h\" \n#include \"Modules/ModuleManager.h\"\n#include \"Modules/ModuleInterface.h\"\n\nIMPLEMENT_GAME_MODULE(FChapter_10EditorModule, Chapter_10Editor)\n```", "```cpp\n#pragma once\n#include \"Commands.h\"\n#include \"EditorStyleSet.h\"\n\nclass FCookbookCommands : public TCommands<FCookbookCommands>\n{\npublic:\n  FCookbookCommands()\n    : TCommands<FCookbookCommands>( \n      FName(TEXT(\"UE4_Cookbook\")), \n      FText::FromString(\"Cookbook Commands\"), \n      NAME_None, \n      FEditorStyle::GetStyleSetName()) \n  {\n  };\n\n  virtual void RegisterCommands() override;\n\n  TSharedPtr<FUICommandInfo> MyButton;\n\n  TSharedPtr<FUICommandInfo> MyMenuButton;\n};\n```", "```cpp\n#include \"CookbookCommands.h\"\n#include \"Chapter_10Editor.h\"\n#include \"Commands.h\"\n\nvoid FCookbookCommands::RegisterCommands()\n{\n#define LOCTEXT_NAMESPACE \"\"\n  UI_COMMAND(MyButton, \"Cookbook\", \"Demo Cookbook Toolbar Command\", EUserInterfaceActionType::Button, FInputGesture());\n  UI_COMMAND(MyMenuButton, \"Cookbook\", \"Demo Cookbook Toolbar Command\", EUserInterfaceActionType::Button, FInputGesture());\n#undef LOCTEXT_NAMESPACE\n}\n\n```", "```cpp\n#pragma once\n\n#include \"Engine.h\"\n#include \"Modules/ModuleInterface.h\"\n#include \"Modules/ModuleManager.h\"\n#include \"UnrealEd.h\"\n#include \"CookbookCommands.h\"\n#include \"Editor/MainFrame/Public/Interfaces/IMainFrameModule.h\"\n\nclass FChapter_10EditorModule: public IModuleInterface \n{ \n virtual void StartupModule() override;\n virtual void ShutdownModule() override;\n\n TSharedPtr<FExtender> ToolbarExtender;\n TSharedPtr<const FExtensionBase> Extension;\n\n void MyButton_Clicked()\n {\n\n TSharedRef<SWindow> CookbookWindow = SNew(SWindow)\n .Title(FText::FromString(TEXT(\"Cookbook Window\")))\n .ClientSize(FVector2D(800, 400))\n .SupportsMaximize(false)\n .SupportsMinimize(false);\n\n IMainFrameModule& MainFrameModule =\n FModuleManager::LoadModuleChecked<IMainFrameModule>\n (TEXT(\"MainFrame\"));\n\n if (MainFrameModule.GetParentWindow().IsValid())\n {\n FSlateApplication::Get().AddWindowAsNativeChild\n (CookbookWindow, MainFrameModule.GetParentWindow()\n .ToSharedRef());\n }\n else\n {\n FSlateApplication::Get().AddWindow(CookbookWindow);\n }\n\n };\n\n void AddToolbarExtension(FToolBarBuilder &builder)\n {\n\n FSlateIcon IconBrush =\n FSlateIcon(FEditorStyle::GetStyleSetName(),\n \"LevelEditor.ViewOptions\",\n \"LevelEditor.ViewOptions.Small\"); builder.AddToolBarButton(FCookbookCommands::Get()\n .MyButton, NAME_None, FText::FromString(\"My Button\"),\n FText::FromString(\"Click me to display a message\"),\n IconBrush, NAME_None);\n\n };\n}; \n```", "```cpp\n#include \"Chapter_10Editor.h\" \n#include \"Modules/ModuleManager.h\"\n#include \"Modules/ModuleInterface.h\"\n#include \"LevelEditor.h\" \n#include \"SlateBasics.h\" \n#include \"MultiBoxExtender.h\" \n#include \"CookbookCommands.h\" \n\nIMPLEMENT_GAME_MODULE(FChapter_10EditorModule, Chapter_10Editor)\n\nvoid FChapter_10EditorModule::StartupModule()\n{\n\n FCookbookCommands::Register();\n\n TSharedPtr<FUICommandList> CommandList = MakeShareable(new FUICommandList());\n\n CommandList->MapAction(FCookbookCommands::Get().MyButton, FExecuteAction::CreateRaw(this, &FChapter_10EditorModule::MyButton_Clicked), FCanExecuteAction());\n\n ToolbarExtender = MakeShareable(new FExtender());\n\n FLevelEditorModule& LevelEditorModule = FModuleManager::LoadModuleChecked<FLevelEditorModule>( \"LevelEditor\" );\n\n Extension = ToolbarExtender->AddToolBarExtension(\"Compile\", EExtensionHook::Before, CommandList, FToolBarExtensionDelegate::CreateRaw(this, &FChapter_10EditorModule::AddToolbarExtension)); \n\n LevelEditorModule.GetToolBarExtensibilityManager()->AddExtender(ToolbarExtender);\n\n}\n\nvoid FChapter_10EditorModule::ShutdownModule()\n{\n\n ToolbarExtender->RemoveExtension(Extension.ToSharedRef());\n\n Extension.Reset();\n ToolbarExtender.Reset();\n\n}\n```", "```cpp\nvoid AddMenuExtension(FMenuBuilder &builder) \n{ \n  FSlateIcon IconBrush = \n   FSlateIcon(FEditorStyle::GetStyleSetName(), \n   \"LevelEditor.ViewOptions\", \n   \"LevelEditor.ViewOptions.Small\"); \n\n  builder.AddMenuEntry(FCookbookCommands::Get().MyButton); \n}; \n```", "```cpp\nEExtension = ToolbarExtender->AddToolBarExtension(\"Compile\", EExtensionHook::Before, CommandList, FToolBarExtensionDelegate::CreateRaw(this, &FChapter_10EditorModule::AddToolbarExtension)); \nLevelEditorModule.GetToolBarExtensibilityManager()->AddExtender(ToolbarExtender);\n```", "```cpp\nExtension = ToolbarExtender->AddMenuExtension(\"LevelEditor\", EExtensionHook::Before, CommandList, FMenuExtensionDelegate::CreateRaw(this,&FChapter_10EditorModule::AddMenuExtension)); \nLevelEditorModule.GetMenuExtensibilityManager()->AddExtender(ToolbarExtender);\n```", "```cpp\nvoid MyButton_Clicked()\n{\n\n    TSharedRef<SWindow> CookbookWindow = SNew(SWindow)\n        .Title(FText::FromString(TEXT(\"Cookbook Window\")))\n        .ClientSize(FVector2D(800, 400))\n        .SupportsMaximize(false)\n        .SupportsMinimize(false)\n        [\n SNew(SVerticalBox)\n + SVerticalBox::Slot()\n .HAlign(HAlign_Center)\n .VAlign(VAlign_Center)\n [\n SNew(STextBlock)\n .Text(FText::FromString(TEXT(\"Hello from Slate\")))\n ]\n ];\n\n    IMainFrameModule& MainFrameModule =\n        FModuleManager::LoadModuleChecked<IMainFrameModule>\n        (TEXT(\"MainFrame\"));\n\n    if (MainFrameModule.GetParentWindow().IsValid())\n    {\n        FSlateApplication::Get().AddWindowAsNativeChild\n        (CookbookWindow, MainFrameModule.GetParentWindow()\n            .ToSharedRef());\n    }\n    else\n    {\n        FSlateApplication::Get().AddWindow(CookbookWindow);\n    }\n\n};\n```", "```cpp\n#pragma once\n\n#include \"CoreMinimal.h\"\n#include \"UObject/NoExportTypes.h\"\n#include \"MyCustomAsset.generated.h\"\n\n/**\n * \n */\nUCLASS()\nclass CHAPTER_10_API UMyCustomAsset : public UObject\n{\n  GENERATED_BODY()\n\npublic:\n UPROPERTY(EditAnywhere, Category = \"Custom Asset\")\n FString Name;\n\n};\n```", "```cpp\n#pragma once\n\n#include \"CoreMinimal.h\"\n#include \"Factories/Factory.h\"\n#include \"CustomAssetFactory.generated.h\"\n\nUCLASS()\nclass CHAPTER_10_API UCustomAssetFactory : public UFactory\n{\n    GENERATED_BODY()\n\npublic:\n    UCustomAssetFactory();\n\n    virtual UObject* FactoryCreateNew(UClass* InClass,\n        UObject* InParent, FName InName, EObjectFlags Flags,\n        UObject* Context, FFeedbackContext* Warn, FName\n        CallingContext) override;\n};\n\n```", "```cpp\n#include \"CustomAssetFactory.h\" \n#include \"Chapter_10.h\"\n#include \"MyCustomAsset.h\" \n\nUCustomAssetFactory::UCustomAssetFactory()\n :Super()\n{\n bCreateNew = true;\n bEditAfterNew = true;\n SupportedClass = UMyCustomAsset::StaticClass();\n}\n\nUObject* UCustomAssetFactory::FactoryCreateNew(UClass*\n InClass, UObject* InParent, FName InName, EObjectFlags\n Flags, UObject* Context, FFeedbackContext* Warn, FName\n CallingContext)\n{\n auto NewObjectAsset = NewObject<UMyCustomAsset>(InParent,\n InClass, InName, Flags);\n return NewObjectAsset;\n}\n```", "```cpp\nUObject* UCameraAnimFactory::FactoryCreateNew(UClass* \n Class,UObject* InParent,FName Name,EObjectFlags \n Flags,UObject* Context,FFeedbackContext* Warn) \n{ \n  UCameraAnim* NewCamAnim = \n   NewObject<UCameraAnim>(InParent, Class, Name, Flags);  NewCamAnim->CameraInterpGroup = \n   NewObject<UInterpGroupCamera>(NewCamAnim); \n  NewCamAnim->CameraInterpGroup->GroupName = Name; \n  return NewCamAnim; \n} \n```", "```cpp\n#pragma once\n#include \"AssetTypeActions_Base.h\"\n#include \"Editor/MainFrame/Public/Interfaces/IMainFrameModule.h\"\n\nclass CHAPTER_10EDITOR_API FMyCustomAssetActions : public FAssetTypeActions_Base\n{\npublic:\n\n    virtual bool HasActions(const TArray<UObject*>& InObjects)\n    const override;\n\n    virtual void GetActions(const TArray<UObject*>& InObjects,\n    FMenuBuilder& MenuBuilder) override;\n\n    virtual FText GetName() const override;\n\n    virtual UClass* GetSupportedClass() const override;\n\n    virtual FColor GetTypeColor() const override;\n\n    virtual uint32 GetCategories() override;\n\n    void MyCustomAssetContext_Clicked()\n    {\n        TSharedRef<SWindow> CookbookWindow = SNew(SWindow)\n            .Title(FText::FromString(TEXT(\"Cookbook Window\")))\n            .ClientSize(FVector2D(800, 400))\n            .SupportsMaximize(false)\n            .SupportsMinimize(false);\n\n        IMainFrameModule& MainFrameModule = \n        FModuleManager::LoadModuleChecked<IMainFrameModule>\n        (TEXT(\"MainFrame\"));\n\n        if (MainFrameModule.GetParentWindow().IsValid())\n        {\n            FSlateApplication::Get().AddWindowAsNativeChild(CookbookWindow, \n            MainFrameModule.GetParentWindow().ToSharedRef());\n        }\n        else\n        {\n            FSlateApplication::Get().AddWindow(CookbookWindow);\n        }\n\n    };\n};\n\n```", "```cpp\n#include \"MyCustomAssetActions.h\"\n#include \"Chapter_10Editor.h\"\n#include \"MyCustomAsset.h\"\n\nbool FMyCustomAssetActions::HasActions(const TArray<UObject*>& InObjects) const\n{\n  return true;\n}\n\nvoid FMyCustomAssetActions::GetActions(const TArray<UObject*>& InObjects, FMenuBuilder& MenuBuilder)\n{\n  MenuBuilder.AddMenuEntry(\n    FText::FromString(\"CustomAssetAction\"),\n    FText::FromString(\"Action from Cookbook Recipe\"),\n    FSlateIcon(FEditorStyle::GetStyleSetName(),\n    \"LevelEditor.ViewOptions\"),\n    FUIAction(\n      FExecuteAction::CreateRaw(this, \n      &FMyCustomAssetActions::MyCustomAssetContext_Clicked),\n      FCanExecuteAction()\n      ));\n}\n\nuint32 FMyCustomAssetActions::GetCategories()\n{\n  return EAssetTypeCategories::Misc;\n}\n\nFText FMyCustomAssetActions::GetName() const\n{\n  return FText::FromString(TEXT(\"My Custom Asset\"));\n}\n\nUClass* FMyCustomAssetActions::GetSupportedClass() const\n{\n  return UMyCustomAsset::StaticClass();\n}\n\nFColor FMyCustomAssetActions::GetTypeColor() const\n{\n  return FColor::Emerald;\n}\n\n```", "```cpp\n#pragma once\n\n#include \"Engine.h\"\n#include \"Modules/ModuleInterface.h\"\n#include \"Modules/ModuleManager.h\"\n#include \"UnrealEd.h\"\n#include \"CookbookCommands.h\"\n#include \"Editor/MainFrame/Public/Interfaces/IMainFrameModule.h\"\n#include \"Developer/AssetTools/Public/IAssetTypeActions.h\"\n\n class FChapter_10EditorModule: public IModuleInterface \n{ \n    virtual void StartupModule() override;\n    virtual void ShutdownModule() override;\n\n TArray< TSharedPtr<IAssetTypeActions> > CreatedAssetTypeActions;\n\n    TSharedPtr<FExtender> ToolbarExtender;\n    TSharedPtr<const FExtensionBase> Extension;\n\n```", "```cpp\n#include \"Developer/AssetTools/Public/IAssetTools.h\"\n#include \"Developer/AssetTools/Public/AssetToolsModule.h\"\n#include \"MyCustomAssetActions.h\"\n// ...\n\nvoid FChapter_10EditorModule::StartupModule()\n{\n\n    FCookbookCommands::Register();\n\n    TSharedPtr<FUICommandList> CommandList = MakeShareable(new FUICommandList());\n\n    CommandList->MapAction(FCookbookCommands::Get().MyButton, FExecuteAction::CreateRaw(this, &FChapter_10EditorModule::MyButton_Clicked), FCanExecuteAction());\n\n    ToolbarExtender = MakeShareable(new FExtender());\n\n    FLevelEditorModule& LevelEditorModule = FModuleManager::LoadModuleChecked<FLevelEditorModule>(\"LevelEditor\");\n\n IAssetTools& AssetTools = \n    FModuleManager::LoadModuleChecked<FAssetToolsModule>\n    (\"AssetTools\").Get();\n\n auto Actions = MakeShareable(new FMyCustomAssetActions);\n AssetTools.RegisterAssetTypeActions(Actions);\n CreatedAssetTypeActions.Add(Actions);\n\n}\n```", "```cpp\nvoid FChapter_10EditorModule::ShutdownModule()\n{\n\n    ToolbarExtender->RemoveExtension(Extension.ToSharedRef());\n\n    Extension.Reset();\n    ToolbarExtender.Reset();\n\nIAssetTools& AssetTools = FModuleManager::LoadModuleChecked<FAssetToolsModule>(\"Asset Tools\").Get(); \n\n for (auto Action : CreatedAssetTypeActions)\n {\n AssetTools.UnregisterAssetTypeActions(Action.ToSharedRef());\n }\n\n}\n```", "```cpp\nclass FChapter_10EditorModule: public IModuleInterface \n{ \n    virtual void StartupModule() override;\n    virtual void ShutdownModule() override;\n\n    TArray< TSharedPtr<IAssetTypeActions> > CreatedAssetTypeActions;\n\n    TSharedPtr<FExtender> ToolbarExtender;\n    TSharedPtr<const FExtensionBase> Extension;\n\n IConsoleCommand* DisplayTestCommand;\n IConsoleCommand* DisplayUserSpecifiedWindow;\n```", "```cpp\nDisplayTestCommand = IConsoleManager::Get().RegisterConsoleCommand(TEXT(\"DisplayTestCommandWindow\"), TEXT(\"test\"), FConsoleCommandDelegate::CreateRaw(this, &FChapter_10EditorModule::DisplayWindow, FString(TEXT(\"Test Command Window\"))), ECVF_Default);\n\n    DisplayUserSpecifiedWindow = IConsoleManager::Get().RegisterConsoleCommand(TEXT(\"DisplayWindow\"), TEXT(\"test\"), FConsoleCommandWithArgsDelegate::CreateLambda(\n        [&](const TArray< FString >& Args)\n    {\n        FString WindowTitle;\n        for (FString Arg : Args)\n        {\n            WindowTitle += Arg;\n            WindowTitle.AppendChar(' ');\n        }\n        this->DisplayWindow(WindowTitle);\n    }\n\n    ), ECVF_Default);\n```", "```cpp\nif(DisplayTestCommand)\n{\n    IConsoleManager::Get().UnregisterConsoleObject(DisplayTestCommand);\n    DisplayTestCommand = nullptr;\n}\n\nif(DisplayUserSpecifiedWindow)\n{\n    IConsoleManager::Get().UnregisterConsoleObject(DisplayUserSpecifiedWindow);\n    DisplayUserSpecifiedWindow = nullptr;\n}\n```", "```cpp\nvoid DisplayWindow(FString WindowTitle) \n{ \n  TSharedRef<SWindow> CookbookWindow = SNew(SWindow) \n  .Title(FText::FromString(WindowTitle)) \n  .ClientSize(FVector2D(800, 400)) \n  .SupportsMaximize(false) \n  .SupportsMinimize(false); \n  IMainFrameModule& MainFrameModule = \n   FModuleManager::LoadModuleChecked<IMainFrameModule>\n   (TEXT(\"MainFrame\")); \n  if (MainFrameModule.GetParentWindow().IsValid()) \n  { \n    FSlateApplication::Get().AddWindowAsNativeChild\n     (CookbookWindow, MainFrameModule.GetParentWindow()\n     .ToSharedRef()); \n  } \n  else \n  { \n    FSlateApplication::Get().AddWindow(CookbookWindow); \n  } \n}\n```", "```cpp\nvirtual IConsoleCommand* RegisterConsoleCommand(const \n TCHAR* Name, const TCHAR* Help, const \n FConsoleCommandDelegate& Command, uint32 Flags);\n```", "```cpp\n#pragma once\n\n#include \"CoreMinimal.h\"\n#include \"UObject/NoExportTypes.h\"\n#include \"MyCustomAsset.generated.h\"\n\nUCLASS(BlueprintType, EditInlineNew)\nclass CHAPTER_10_API UMyCustomAsset : public UObject\n{\n  GENERATED_BODY()\n\npublic:\n    UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = \"Custom Asset\")\n    FString ColorName;\n\n};\n```", "```cpp\n#pragma once\n#include \"EdGraphUtilities.h\"\n#include \"MyCustomAsset.h\"\n#include \"SGraphPinCustomAsset.h\"\n\nstruct CHAPTER_10EDITOR_API FMyCustomAssetPinFactory : public FGraphPanelPinFactory\n{\npublic:\n  virtual TSharedPtr<class SGraphPin> CreatePin(class UEdGraphPin* Pin) const override \n  {\n    if (Pin->PinType.PinSubCategoryObject == UMyCustomAsset::StaticClass())\n    {\n      return SNew(SGraphPinCustomAsset, Pin);\n    }\n    else\n    {\n      return nullptr;\n    }\n  };\n};\n\n```", "```cpp\n#pragma once\n#include \"SGraphPin.h\"\n\nclass CHAPTER_10EDITOR_API SGraphPinCustomAsset : public SGraphPin\n{\n  SLATE_BEGIN_ARGS(SGraphPinCustomAsset) {}\n  SLATE_END_ARGS()\n\n  void Construct(const FArguments& InArgs, UEdGraphPin* InPin);\nprotected:\n  virtual FSlateColor GetPinColor() const override { return FSlateColor(FColor::Black); };\n\n  virtual TSharedRef<SWidget> GetDefaultValueWidget() override;\n\n  void ColorPicked(FLinearColor SelectedColor);\n};\n\n```", "```cpp\n#include \"SGraphPinCustomAsset.h\"\n#include \"Chapter_10Editor.h\"\n#include \"SColorPicker.h\"\n#include \"MyCustomAsset.h\"\n\nvoid SGraphPinCustomAsset::Construct(const FArguments& InArgs, UEdGraphPin* InPin)\n{\n  SGraphPin::Construct(SGraphPin::FArguments(), InPin);\n}\n\nTSharedRef<SWidget> SGraphPinCustomAsset::GetDefaultValueWidget()\n{\n  return SNew(SColorPicker)\n    .OnColorCommitted(this, &SGraphPinCustomAsset::ColorPicked);\n\n}\n\nvoid SGraphPinCustomAsset::ColorPicked(FLinearColor SelectedColor)\n{\n  UMyCustomAsset* NewValue = NewObject<UMyCustomAsset>();\n  NewValue->ColorName = SelectedColor.ToFColor(false).ToHex();\n  GraphPinObj->GetSchema()->TrySetDefaultObject(*GraphPinObj, NewValue);\n}\n```", "```cpp\nTSharedPtr<FMyCustomAssetPinFactory> PinFactory; \n```", "```cpp\nPinFactory = MakeShareable(new FMyCustomAssetPinFactory()); \nFEdGraphUtilities::RegisterVisualPinFactory(PinFactory); \n```", "```cpp\nFEdGraphUtilities::UnregisterVisualPinFactory(PinFactory); PinFactory.Reset(); \n```", "```cpp\nvirtual TSharedPtr<class SGraphPin> CreatePin(class \n UEdGraphPin* Pin) const\n```", "```cpp\n#pragma once\n\n#include \"MyCustomAsset.h\" \n#include \"DetailLayoutBuilder.h\" \n#include \"IDetailCustomization.h\" \n#include \"IPropertyTypeCustomization.h\" \n```", "```cpp\nclass FMyCustomAssetDetailsCustomization : public IDetailCustomization\n{\n\npublic:\n    virtual void CustomizeDetails(IDetailLayoutBuilder& DetailBuilder) override;\n\n    void ColorPicked(FLinearColor SelectedColor);\n\n    static TSharedRef<IDetailCustomization> MakeInstance()\n    {\n        return MakeShareable(new FMyCustomAssetDetailsCustomization);\n    }\n\n    TWeakObjectPtr<class UMyCustomAsset> MyAsset;\n};\n```", "```cpp\nclass FMyCustomAssetPropertyDetails : public IPropertyTypeCustomization\n{\npublic:\n  void ColorPicked(FLinearColor SelectedColor);\n  static TSharedRef<IPropertyTypeCustomization> MakeInstance()\n  {\n    return MakeShareable(new FMyCustomAssetPropertyDetails);\n  }\n\n  UMyCustomAsset* MyAsset;\n  virtual void CustomizeChildren(TSharedRef<IPropertyHandle> PropertyHandle, IDetailChildrenBuilder& ChildBuilder, IPropertyTypeCustomizationUtils& CustomizationUtils) override;\n\n  virtual void CustomizeHeader(TSharedRef<IPropertyHandle> PropertyHandle, FDetailWidgetRow& HeaderRow, IPropertyTypeCustomizationUtils& CustomizationUtils) override;\n\n};\n```", "```cpp\n#include \"MyCustomAssetDetailsCustomization.h\" \n#include \"Chapter_10Editor.h\" \n#include \"IDetailsView.h\" \n#include \"DetailLayoutBuilder.h\" \n#include \"DetailCategoryBuilder.h\" \n#include \"SColorPicker.h\" \n#include \"SBoxPanel.h\" \n#include \"DetailWidgetRow.h\" \n```", "```cpp\nvoid FMyCustomAssetDetailsCustomization::CustomizeDetails(IDetailLayoutBuilder& DetailBuilder)\n{\n    const TArray< TWeakObjectPtr<UObject> >& SelectedObjects = DetailBuilder.GetDetailsView()->GetSelectedObjects();\n\n    for (int32 ObjectIndex = 0; !MyAsset.IsValid() && ObjectIndex < SelectedObjects.Num(); ++ObjectIndex)\n    {\n        const TWeakObjectPtr<UObject>& CurrentObject = SelectedObjects[ObjectIndex];\n        if (CurrentObject.IsValid())\n        {\n            MyAsset = Cast<UMyCustomAsset>(CurrentObject.Get());\n        }\n    }\n\n    DetailBuilder.EditCategory(\"CustomCategory\", FText::GetEmpty(), ECategoryPriority::Important)\n.AddCustomRow(FText::GetEmpty())\n    [\n    SNew(SVerticalBox)\n    + SVerticalBox::Slot()\n    .VAlign(VAlign_Center)\n        [\n            SNew(SColorPicker)\n            .OnColorCommitted(this, &FMyCustomAssetDetailsCustomization::ColorPicked)\n        ]\n    ];\n}\n```", "```cpp\nvoid FMyCustomAssetDetailsCustomization::ColorPicked(FLinearColor SelectedColor)\n{\n    if (MyAsset.IsValid())\n    {\n        MyAsset.Get()->ColorName = SelectedColor.ToFColor(false).ToHex();\n    }\n}\n```", "```cpp\nvoid FMyCustomAssetPropertyDetails::CustomizeChildren(TSharedRef<IPropertyHandle> PropertyHandle, IDetailChildrenBuilder& ChildBuilder, IPropertyTypeCustomizationUtils& CustomizationUtils)\n{\n}\n\nvoid FMyCustomAssetPropertyDetails::CustomizeHeader(TSharedRef<IPropertyHandle> PropertyHandle, FDetailWidgetRow& HeaderRow, IPropertyTypeCustomizationUtils& CustomizationUtils)\n{\n    UObject* PropertyValue = nullptr;\n    auto GetValueResult = PropertyHandle->GetValue(PropertyValue);\n\n    HeaderRow.NameContent()\n        [\n            PropertyHandle->CreatePropertyNameWidget()\n        ];\n    HeaderRow.ValueContent()\n        [\n            SNew(SVerticalBox)\n            + SVerticalBox::Slot()\n        .VAlign(VAlign_Center)\n        [\n            SNew(SColorPicker)\n            .OnColorCommitted(this, &FMyCustomAssetPropertyDetails::ColorPicked)\n        ]\n        ];\n}\n\nvoid FMyCustomAssetPropertyDetails::ColorPicked(FLinearColor SelectedColor)\n{\n    if (MyAsset)\n    {\n        MyAsset->ColorName = SelectedColor.ToFColor(false).ToHex();\n    }\n}\n```", "```cpp\n#include \"PropertyEditorModule.h\" \n#include \"MyCustomAssetDetailsCustomization.h\"\n#include \"MyCustomAssetPinFactory.h\"\n```", "```cpp\nFPropertyEditorModule& PropertyModule = FModuleManager::LoadModuleChecked<FPropertyEditorModule>(\"PropertyEditor\");\nPropertyModule.RegisterCustomClassLayout(UMyCustomAsset::StaticClass()->GetFName(), FOnGetDetailCustomizationInstance::CreateStatic(&FMyCustomAssetDetailsCustomization::MakeInstance));\nPropertyModule.RegisterCustomPropertyTypeLayout(UMyCustomAsset::StaticClass()->GetFName(), FOnGetPropertyTypeCustomizationInstance::CreateStatic(&FMyCustomAssetPropertyDetails::MakeInstance));\n```", "```cpp\nFPropertyEditorModule& PropertyModule = FModuleManager::LoadModuleChecked<FPropertyEditorModule>(\"PropertyEditor\");\nPropertyModule.UnregisterCustomClassLayout(UMyCustomAsset::StaticClass()->GetFName());\n```", "```cpp\nvirtual void CustomizeDetails(IDetailLayoutBuilder& DetailBuilder) override;\n```", "```cpp\nvoid FMyCustomAssetDetailsCustomization::ColorPicked(FLinearColor SelectedColor)\n```"]