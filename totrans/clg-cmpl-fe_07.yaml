- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Clang-Tidy Linter Framework
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter introduces Clang-Tidy, the clang-based linter framework that utilizes
    the **Abstract Syntax Tree** (**AST**) to identify anti-patterns in C/C++/Objective-C
    code. First, we’ll discuss Clang-Tidy’s capabilities, the types of checks it offers,
    and how to use them. After that, we will delve into the architecture of Clang-Tidy
    and explore how to create our own custom lint check. In this chapter, we’ll cover
    the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: An overview of Clang-Tidy, including a brief description of the different checks
    provided by default
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The internal design of Clang-Tidy
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create a custom Clang-Tidy check
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 5.1 Technical requirements
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The source code for this chapter is located in the `chapter5` folder of the
    book’s GitHub repository: [https://github.com/PacktPublishing/Clang-Compiler-Frontend-Packt/tree/main/chapter5](https://github.com/PacktPublishing/Clang-Compiler-Frontend-Packt/tree/main/chapter5).'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: 5.2 Overview of Clang-Tidy and usage examples
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Clang-Tidy is a linter and static analysis tool for C and C++ code. It is a
    part of the Clang and LLVM project. The tool is built on top of the Clang frontend,
    which means it understands your code in depth, giving it the ability to catch
    a wide range of issues.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some key points to understand about Clang-Tidy:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '**Checks**: Clang-Tidy contains a series of ”checks” that identify various
    issues or suggest enhancements. These checks range from performance improvements
    and potential bugs to coding style and modern C++ best practices. For instance,
    it might suggest using `emplace_back` instead of `push_back` for certain cases
    or identify areas where you might be accidentally using integer overflow.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Extensibility**: New checks can be added to Clang-Tidy, making it a highly
    extensible tool. If you have specific coding guidelines or practices you want
    to enforce, you can write a check for it.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Integration**: Clang-Tidy is often used within CI/CD pipelines or integrated
    with development environments. Many IDEs support Clang-Tidy directly or via plugins,
    so you can get real-time feedback on your code as you write it.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Automatic fixes**: One of the powerful features of Clang-Tidy is its ability
    to not only identify issues but also automatically fix many of them. This is done
    with the `-fix` option. It is, however, important to review the proposed changes,
    as automatic fixes might not always be perfect.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Configuration**: You can configure which checks Clang-Tidy performs using
    a configuration file or command-line options. This allows teams to enforce specific
    coding standards or prioritize certain types of issues. For example, the `-checks=’-*,modernize-*’`
    command-line option will disable all checks but not the checks from modernize
    set.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Modern C++ best practices**: One of the often-appreciated features of Clang-Tidy
    is its emphasis on modern C++ idioms and best practices. It can guide developers
    to write safer, more performant, and more idiomatic C++ code.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After acquiring basic knowledge about Clang-Tidy, let’s examine how it can be
    built.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: 5.2.1 Building and testing Clang-Tidy
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We will use the basic build configuration specified in [Figure 1.4](B19722_01.xhtml#x1-27004r4)
    and build Clang-Tidy with the following Ninja command:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Figure 5.1**: Using the Ninja command to build Clang-Tidy'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: 'We can install the Clang-Tidy binary to the designated `install` folder using
    the following command:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Figure 5.2**: Using the Ninja command to install Clang-Tidy'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: Using the build configuration from [Figure 1.4](B19722_01.xhtml#x1-27004r4),
    the command will install the Clang-Tidy binary under the `<...>/llvm-project/install/bin`
    folder. Here, `<...>/llvm-project` refers to the path where the LLVM code base
    was cloned (see [Figure 1.1](B19722_01.xhtml#x1-25005r1)).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: If you use a build configuration with shared libraries (with the `BUILD``_SHARED``_LIBS`
    flag set to `ON` ), as shown in [Figure 1.12](B19722_01.xhtml#x1-30003r12), then
    you might need to install and built all artifacts with `ninja` `install` .
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: 'Clang-Tidy is part of Clang-Tools-Extra, and its tests are a part of the `clang-tools`
    CMake target. Thus, we can run the tests with the following command:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Figure 5.3**: Using the Ninja command to run Clang-Tidy tests'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: 'The command will run LIT tests (see [*Section** 4.5.2*](B19722_04.xhtml#x1-830002)*,
    LLVM test* *framework*) for all Clang-Tidy checks, and will also run unit tests
    for the Clang-Tidy core system. You can also run a specific LIT test separately;
    for example, if we want to run the LIT test for the `modernize-loop-convert` check,
    we can use the following command:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Figure 5.4**: Testing the modernize-loop-convert clang-tidy check'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: 'The command will produce the following output:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Figure 5.5**: LIT test output for the cppcoreguidelines-owning-memory clang-tidy
    check'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: After building and testing Clang-Tidy, it’s now time to run it on some code
    examples.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: 5.2.2 Clang-Tidy usage
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To test Clang-Tidy, we will use the following test program:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Figure 5.6**: Test program for Clang-Tidy: loop-convert.cpp'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: 'The program is correctly written in the older C++ code style, that is, before
    C++11\. Clang-Tidy has a set of checks that encourage adopting the modern C++
    code style and using new C++ idioms available in the latest C++ standard. These
    checks can be run on the program as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**Figure 5.7**: Running Clang-Tidy modernize checks on loop-convert.cpp'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: 'The most important parts of [Figure 5.7](#x1-103021r7) are as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '*Line 1*: The path to the Clang-Tidy binary is specified here.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Line 2*: We remove all checks using the ’`-*` ’ option. Then, we enable all
    checks with the ’`modernize` ’ prefix by using the ’`-*,modernize-*` ’ value for
    the ’`--checks` ’ argument.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Line 3*: We specify the path to the code to be tested.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Line 4*: We pass additional arguments to the compiler, notably specifying
    that we want the compiler to use C++17 as the C++ standard.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The output of the program will be as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**Figure 5.8**: Output from running Clang-Tidy on loop-convert.cpp'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**图5.8**：在 loop-convert.cpp 上运行 Clang-Tidy 的输出'
- en: 'As we can see, several issues were detected, and Clang-Tidy suggested some
    fixes. Unfortunately, some of them conflict with each other, especially `modernize-loop-convert`
    and `modernize-use-auto` , and cannot be applied together. On the other hand,
    we can apply the fix suggested by `modernize-loop-convert` by running only this
    specific check to avoid any conflicts, as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，检测到几个问题，Clang-Tidy 建议了一些修复。不幸的是，其中一些相互冲突，特别是`modernize-loop-convert`和`modernize-use-auto`，不能一起应用。另一方面，我们可以通过仅运行此特定检查来应用`modernize-loop-convert`建议的修复，以避免任何冲突，如下所示：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**Figure 5.9**: Running a modernize-loop-convert check on loop-convert.cpp'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**图5.9**：在 loop-convert.cpp 上运行 modernize-loop-convert 检查'
- en: 'As we can see, the second line has changed compared to [Figure 5.7](#x1-103021r7),
    and another line (3) has been added. The latter instructs Clang-Tidy to apply
    the fixes suggested by the check. The resulting code can be found in the original
    file:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，与[图5.7](#x1-103021r7)相比，第二行已更改，并添加了另一行（3）。后者指示 Clang-Tidy 应用检查建议的修复。结果代码可以在原始文件中找到：
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**Figure 5.10**: Fixed test program for Clang-Tidy: loop-convert.cpp'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**图5.10**：Clang-Tidy 的修复测试程序：loop-convert.cpp'
- en: As we can see, *Lines 6* and *7* have changed compared to the original code
    from [Figure 5.6](#x1-103014r6). This functionality makes Clang-Tidy a powerful
    tool that can not only detect issues but also fix them. We will explore this possibility
    in greater depth later in [*Section** 7.3*](B19722_07.xhtml#x1-1410003)*, Clang-Tidy
    as a code modification* *tool*.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，与[图5.6](#x1-103014r6)中的原始代码相比，*第6行*和*第7行*已更改。这种功能使 Clang-Tidy 成为一个强大的工具，它不仅可以检测问题，还可以修复它们。我们将在稍后的[*第7.3节*](B19722_07.xhtml#x1-1410003)中更深入地探讨这种可能性，即
    Clang-Tidy 作为代码修改工具。
- en: 5.2.3 Clang-Tidy checks
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5.2.3 Clang-Tidy 检查
- en: 'Clang-Tidy has a wide variety of checks grouped into different categories.
    Here’s a concise list of some of the main categories, with an example check from
    each and a brief description:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Clang-Tidy 拥有多种检查，这些检查被分组到不同的类别中。以下是一些主要类别的简要列表，包括每个类别中的一个示例检查和简要描述：
- en: '**boost-***:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**boost-***:'
- en: '`boost-use-to-string`: Suggests replacing `boost::lexical``_cast<std:` `:string>`
    with `boost::to``_string`'
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boost-use-to-string`: 建议将`boost::lexical_cast<std::string>`替换为`boost::to_string`'
- en: '**bugprone-***:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**bugprone-***:'
- en: '`bugprone-integer-division`: Warns when integer division in a floating-point
    context is likely to cause unintended loss of precision'
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bugprone-integer-division`: 当在浮点上下文中进行整数除法可能导致意外精度损失时发出警告'
- en: '**cert-*** (Checks related to the CERT C++ Secure Coding Standard):'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**cert-***（与CERT C++安全编码标准相关的检查）:'
- en: '`cert-dcl03-c`: Ensures that macros are not used in unsafe contexts'
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cert-dcl03-c`: 确保宏不在不安全上下文中使用'
- en: '**cppcoreguidelines-*** (Checks from C++ Core Guidelines):'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**cppcoreguidelines-***（来自C++核心指南的检查）:'
- en: '`cppcoreguidelines-slicing`: Warns on slicing (object slicing, where a derived
    object is assigned to a base object, cutting off the derived parts)'
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cppcoreguidelines-slicing`: 在切片（对象切片，即派生对象被赋值给基对象，切掉派生部分）时发出警告'
- en: '**google-*** (Google’s coding conventions):'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**google-***（谷歌编码规范）:'
- en: '`google-build-using-namespace`: Flags using-directives'
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`google-build-using-namespace`: 标记使用using指令的标志'
- en: '**llvm-*** (LLVM coding conventions):'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**llvm-***（LLVM编码规范）:'
- en: '`llvm-namespace-comment`: Ensures that namespaces have closing comments'
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`llvm-namespace-comment`: 确保命名空间有结尾注释'
- en: '**misc-*** (Miscellaneous checks):'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**misc-***（杂项检查）:'
- en: '`misc-unused-parameters`: Flags parameters that are unused'
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`misc-unused-parameters`: 标记未使用的参数'
- en: '**modernize-*** (Modernization checks for C++):'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**modernize-***（C++现代化检查）:'
- en: '`modernize-use-auto`: Recommends the use of `auto` for variable declarations
    when appropriate'
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`modernize-use-auto`: 建议在适当的情况下使用`auto`进行变量声明'
- en: '**performance-***:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**performance-***:'
- en: '`performance-faster-string-find`: Suggests faster alternatives for string searching'
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`performance-faster-string-find`: 建议使用更快的字符串搜索替代方案'
- en: '**readability-***:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**readability-***:'
- en: '`readability-identifier-naming`: Ensures consistent identifier naming'
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`readability-identifier-naming`: 确保一致的标识符命名'
- en: This list is just a representation of a subset of the checks available. Each
    category contains multiple checks, and there are additional categories in the
    tool as well. For a complete, up-to-date list of checks and their detailed descriptions,
    refer to the official Clang-Tidy documentation [[17](B19722_Bib.xhtml#Xllvm_clang_tidy)]
    or use the `clang-tidy -list-checks` command on your system.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这个列表只是可用检查子集的一个表示。每个类别都包含多个检查，工具中还有其他类别。要获取检查的完整、最新列表及其详细描述，请参阅官方 Clang-Tidy
    文档 [[17](B19722_Bib.xhtml#Xllvm_clang_tidy)] 或在您的系统上使用 `clang-tidy -list-checks`
    命令。
- en: After learning how to build and use clang-tidy, it’s time to delve deeper and
    examine its internal design.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在学习如何构建和使用 clang-tidy 之后，现在是时候深入了解并检查其内部设计。
- en: 5.3 Clang-Tidy’s internal design
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5.3 Clang-Tidy 的内部设计
- en: 'Clang-Tidy is built on top of Clang. At its core, Clang-Tidy leverages Clang’s
    ability to parse and analyze source code into an AST. Each check in Clang-Tidy
    essentially involves defining patterns or conditions to match against this AST.
    When a match is found, a diagnostic can be raised, and in many cases, an automatic
    fix can be suggested. The tool operates on the basis of individual ”checks” that
    target specific issues or coding styles. Checks are implemented as plugins, making
    Clang-Tidy extensible. The `ASTMatchers` library facilitates writing these checks
    by providing a domain-specific language to query the AST; see [*Section** 3.5*](B19722_03.xhtml#x1-630005)*,
    AST matchers* and the official documentation [[16](B19722_Bib.xhtml#Xllvm_astmatchers)]
    for more info. This ensures that checks are both concise and expressive. Clang-Tidy
    also has support for analyzing the code base using a compilation database, which
    provides context such as compile flags (see [*Chapter** 9*](B19722_09.xhtml#x1-1810009)*,
    Appendix 1: Compilation Database* for more info). This comprehensive integration
    with Clang’s internals makes Clang-Tidy a powerful static analysis tool with precise
    code transformation capabilities.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Clang-Tidy 是建立在 Clang 之上的。在其核心，Clang-Tidy 利用 Clang 解析和分析源代码到 AST 的能力。Clang-Tidy
    中的每个检查本质上都涉及定义与这个 AST 匹配的模式或条件。当找到匹配时，可以引发诊断，在许多情况下，还可以建议自动修复。该工具基于针对特定问题或编码风格的单个“检查”操作。检查作为插件实现，使
    Clang-Tidy 具有可扩展性。`ASTMatchers` 库通过提供用于查询 AST 的领域特定语言来简化这些检查的编写；有关更多信息，请参阅 [*第
    3.5 节*](B19722_03.xhtml#x1-630005) 中的 AST 匹配器和官方文档 [[16](B19722_Bib.xhtml#Xllvm_astmatchers)]。这确保了检查既简洁又表达力强。Clang-Tidy
    还支持使用编译数据库分析代码库，该数据库提供编译标志等上下文信息（有关更多信息，请参阅 [*第 9 章*](B19722_09.xhtml#x1-1810009)
    附录 1：编译数据库）。这种与 Clang 内部功能的综合集成使 Clang-Tidy 成为一个功能强大的静态分析工具，具有精确的代码转换能力。
- en: 5.3.1 Internal organization
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5.3.1 内部组织
- en: 'The internal organization of clang-tidy within the Clang code base can be complex
    due to its deep integration with the Clang libraries, but at a high level, the
    organization can be broken down as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 由于与 Clang 库的深度集成，clang-tidy 在 Clang 代码库中的内部组织可能很复杂，但从高层次来看，其组织可以分解如下：
- en: '**Source and headers**: The main source code and headers for `clang-tidy` are
    located in the `clang-tools-extra` repository, specifically within the `clang-tidy`
    directory.'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**源代码和头文件**：`clang-tidy` 的主要源代码和头文件位于 `clang-tools-extra` 仓库中，具体位于 `clang-tidy`
    目录下。'
- en: '**Main driver**: The `ClangTidyMain.cpp` file, located in the `tool` subfolder,
    serves as the main driver for the Clang-Tidy tool.'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**主要驱动程序**：位于 `tool` 子文件夹中的 `ClangTidyMain.cpp` 文件是 Clang-Tidy 工具的主要驱动程序。'
- en: '**Core infrastructure**: Files such as `ClangTidy.cpp` , `ClangTidy.h` manage
    the core functionalities and options.'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**核心基础设施**：例如 `ClangTidy.cpp` 和 `ClangTidy.h` 这样的文件管理着核心功能和选项。'
- en: '**Checks**: Checks are organized into subdirectories based on categories (e.g.,
    `bugprone` or `modernize` ).'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**检查**：检查根据类别（例如，`bugprone` 或 `modernize`）组织到子目录中。'
- en: '**Utilities**: The `utils` directory contains utility classes and functions.'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**实用工具**：`utils` 目录包含实用类和函数。'
- en: '**AST Matchers**: The `ASTMatchers` library, which we explored previously in
    [*Section** 3.5*](B19722_03.xhtml#x1-630005)*, AST matchers*, is integral for
    querying the AST.'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**AST 匹配器**：我们之前在 [*第 3.5 节*](B19722_03.xhtml#x1-630005) 中探讨的 `ASTMatchers`
    库，AST 匹配器，对于查询 AST 是至关重要的。'
- en: '**Clang diagnostics**: Clang-Tidy actively uses the Clang diagnostics subsystem
    to print diagnostics messages and suggest fixes (see [*Section** 4.4.2*](B19722_04.xhtml#x1-800002)*,
    Diagnostics support*).'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Clang 诊断**：Clang-Tidy 主动使用 Clang 诊断子系统来打印诊断消息和建议修复（请参阅 [*第 4.4.2 节*](B19722_04.xhtml#x1-800002)
    中的诊断支持）。'
- en: '**Tests**: Tests are located in the `test` directory and use LLVM’s LIT framework
    (see [*Section** 4.5.2*](B19722_04.xhtml#x1-830002)*, LLVM test framework*). It’s
    worth noting that the test folder is shared with other projects inside the `clang-tools-extra`
    folder.'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Documentation**: The `docs` directory contains documentation for Clang-Tidy.
    As well as the tests, the documentation is a part of other projects inside the
    `clang-tools-extra` folder.'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'These relationships are schematically illustrated in the following figure:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.11: Clang-Tidy’s internal organization ](img/Figure5.11_B19722.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
- en: '**Figure 5.11**: Clang-Tidy’s internal organization'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have gained an understanding of Clang-Tidy’s internals and its
    relationship with other parts of Clang/LLVM, it’s time to explore components external
    to the Clang-Tidy binary: its configuration and other tools that leverage the
    functionality provided by Clang-Tidy.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: 5.3.2 Configuration and integration
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Clang-Tidy binary can interact with other components, as shown in [Figure 5.12](#Figure5.12).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.12: Clang-Tidy external components: configuration and integrations
    ](img/Figure5.12_B19722.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
- en: '**Figure 5.12**: Clang-Tidy external components: configuration and integrations'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: Clang-Tidy can be seamlessly integrated with various **Integrated Development**
    **Environments** (**IDEs**), such as Visual Studio Code, CLion, and Eclipse, to
    provide real-time feedback during coding. We will explore this possibility later
    in [*Section** 8.5.2*](B19722_08.xhtml#x1-1700002)*, Clang-Tidy*.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: It can also be incorporated into build systems such as CMake and Bazel to run
    checks during builds. **Continuous Integration** (**CI**) platforms, such as Jenkins
    and GitHub Actions, often employ Clang-Tidy to ensure code quality on pull requests.
    Code review platforms, such as Phabricator, utilize Clang-Tidy for automated reviews.
    Additionally, custom scripts and static analysis platforms can harness Clang-Tidy’s
    capabilities for tailored workflows and combined analyses.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: Another important part of Clang-Tidy shown in [Figure 5.12](#Figure5.12) is
    its configuration. Let’s explore it in detail.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: Clang-Tidy configuration
  id: totrans-109
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Clang-Tidy uses a configuration file to specify which checks to run and to set
    options for those checks. This configuration is done using a `.clang-tidy` file.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: 'The `.clang-tidy` file is written in YAML format. It typically contains two
    main keys: `Checks` and `CheckOptions` .'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: 'We will begin with the `Checks` key, which allows us to specify which checks
    to enable or disable:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: Use - to disable a check
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use * as a wildcard to match multiple checks
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checks are comma-separated
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here’s an example:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '**Figure 5.13**: Checks key of a .clang-tidy config file'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: 'The next key is `CheckOptions` . This key allows us to set options for specific
    checks, with each option specified as a key-value pair. An example is provided
    here:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '**Figure 5.14**: CheckOptions key of a .clang-tidy config file'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: When Clang-Tidy is run, it searches for the `.clang-tidy` file in the directory
    of the file being processed and its parent directories. The search stops when
    the file is found.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 当运行 Clang-Tidy 时，它会在正在处理的文件及其父目录中搜索`.clang-tidy`文件。当找到文件时，搜索停止。
- en: Now that we have an understanding of Clang-Tidy’s internal design, it’s time
    to create our first custom Clang-Tidy check using the information we’ve gathered
    from this and previous chapters of the book.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了 Clang-Tidy 的内部设计，是时候根据我们从本书的这些章节和前几章中获得的信息创建我们的第一个自定义 Clang-Tidy 检查了。
- en: 5.4 Custom Clang-Tidy check
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5.4 自定义 Clang-Tidy 检查
- en: In this part of the chapter, we will transform our plugin example (see [*Section** 4.6*](B19722_04.xhtml#x1-840006)*,
    Clang plugin project*) into a Clang-Tidy check. This check will estimate the complexity
    of a C++ class based on the number of methods it contains. We will define a threshold
    as a parameter for the check.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的这一部分，我们将把我们的插件示例（见[*第 4.6 节*](B19722_04.xhtml#x1-840006)*，Clang 插件项目*）转换为一个
    Clang-Tidy 检查。此检查将根据类包含的方法数量估计 C++ 类的复杂性。我们将定义一个阈值作为检查的参数。
- en: Clang-Tidy offers a tool designed to aid in the creation of checks. Let’s begin
    by creating a skeleton for our check.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: Clang-Tidy 提供了一个旨在帮助创建检查的工具。让我们首先为我们的检查创建一个骨架。
- en: 5.4.1 Creating a skeleton for the check
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5.4.1 为检查创建骨架
- en: 'Clang-Tidy provides a specific Python script, `add``_new``_check.py` , to assist
    in creating new checks. This script is located in the `clang-tools-extra/clang-tidy`
    directory. The script requires two positional parameters:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: Clang-Tidy 提供了一个特定的 Python 脚本，`add_new_check.py`，以帮助创建新的检查。此脚本位于`clang-tools-extra/clang-tidy`目录中。脚本需要两个位置参数：
- en: '`module` : This refers to the module directory where the new tidy check will
    be placed. In our case, this will be `misc` .'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`module`：这指的是新 tidy 检查将被放置的模块目录。在我们的情况下，这将是在`misc`。'
- en: '`check` : This is the name of the new tidy check to add. For our purposes,
    we will name it `classchecker` .'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`check`：这是要添加的新 tidy 检查的名称。为了我们的目的，我们将将其命名为`classchecker`。'
- en: 'By running the script in the `llvm-project` directory (which contains the cloned
    LLVM repository), we receive the following output:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在`llvm-project`目录（其中包含克隆的 LLVM 仓库）中运行脚本，我们得到以下输出：
- en: '[PRE13]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '**Figure 5.15**: Creating a skeleton for the misc-classchecker check'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 5.15**：为`misc-classchecker`检查创建骨架'
- en: 'From the output, we can observe that several files under the `clang-tools-extra/`
    `clang-tidy` directory have been updated. These files pertain to checks registration,
    such as `misc/MiscTidyModule.cpp` , or build configuration, such as `misc/CMakeLists.txt`
    . The script also generated several new files, which we need to modify in order
    to implement our check’s desired logic:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 从输出中，我们可以观察到`clang-tools-extra/clang-tidy`目录下的几个文件已被更新。这些文件与检查注册有关，例如`misc/MiscTidyModule.cpp`，或与构建配置有关，例如`misc/CMakeLists.txt`。脚本还生成了几个新文件，我们需要修改这些文件以实现我们检查所需的功能：
- en: '`misc/ClasscheckerCheck.h` : This is the header file for our check'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`misc/ClasscheckerCheck.h`：这是我们的检查的头文件'
- en: '`misc/ClasscheckerCheck.cpp` : This file will house the implementation of our
    check'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`misc/ClasscheckerCheck.cpp`：此文件将包含我们检查的实现'
- en: Additionally, the script has generated a LIT test for our check, named `ClassChecker.cpp.`
    This test can be found in the `clang-tools-extra/test/clang-tidy/checkers/misc`
    directory.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，脚本还为我们检查生成了一个 LIT 测试，命名为`ClassChecker.cpp`。此测试可以在`clang-tools-extra/test/clang-tidy/checkers/misc`目录中找到。
- en: 'Apart from the source files, the script also modifies some documentation files
    in the `clang-tools-extra/docs` directory:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 除了源文件外，脚本还修改了`clang-tools-extra/docs`目录中的某些文档文件：
- en: '`ReleaseNotes.rst` : This file contains updated release notes with placeholder
    entries for our new check'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ReleaseNotes.rst`：此文件包含带有我们新检查占位符的更新版发布说明'
- en: '`clang-tidy/checks/misc/classchecker.rst` : This serves as the primary documentation
    for our check'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clang-tidy/checks/misc/classchecker.rst`：这是我们的检查的主要文档'
- en: '`clang-tidy/checks/list.rst` : The list of checks has been updated to include
    our new check alongside other checks from the ’`misc` ’ module'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clang-tidy/checks/list.rst`：检查列表已更新，包括我们新的检查以及其他来自`misc`模块的检查。'
- en: We will now turn our attention to implementing the check and the subsequent
    build process.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将把注意力转向实现检查和随后的构建过程。
- en: 5.4.2 Clang-Tidy check implementation
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5.4.2 Clang-Tidy 检查实现
- en: 'We’ll begin by modifying `ClasscheckerCheck.cpp` . The generated file can be
    found in the `clang-tools-extra/clang-tidy/misc` directory. Let’s replace the
    generated code with the following (note: the generated comment containing the
    license info has been omitted for brevity):'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先修改`ClasscheckerCheck.cpp`。生成的文件可以在`clang-tools-extra/clang-tidy/misc`目录中找到。让我们用以下代码替换生成的代码（注意：为了简洁，省略了包含许可信息的生成注释）：
- en: '[PRE15]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '**Figure 5.16**: Modifications to ClasscheckerCheck.cpp'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '**图5.16**：对ClasscheckerCheck.cpp的修改'
- en: We replaced the original stub with *Lines 15-35* to implement the necessary
    changes.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们用*第15-35行*替换了原始的占位符以实现必要的更改。
- en: To integrate our check into the Clang-Tidy binary, we can execute the standard
    build procedure from the `build` directory within the LLVM source tree; see [Figure 5.2](#x1-102004r2).
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 要将我们的检查集成到Clang-Tidy二进制文件中，我们可以在LLVM源树中的`build`目录内执行标准构建过程；参见[图5.2](#x1-102004r2)。
- en: 'The name of our check is defined in the modified `MiscTidyModule.cpp` file
    in `clang-tools-extra/clang-tidy/misc` folder:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的检查名称定义在`clang-tools-extra/clang-tidy/misc`文件夹中修改后的`MiscTidyModule.cpp`文件中：
- en: '[PRE16]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '**Figure 5.17**: Modifications to MiscTidyModule.cpp'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '**图5.17**：对MiscTidyModule.cpp的修改'
- en: As illustrated in [Figure 5.17](#x1-111042r17) (*Lines 43-44*), we registered
    the new check under the name `"``misc``-``classchecker``"`. After the code modification,
    we are ready to recompile Clang-Tidy with
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 如[图5.17](#x1-111042r17)所示（*第43-44行*），我们在名称为`"``misc``-``classchecker``"`下注册了新的检查。代码修改后，我们就可以重新编译Clang-Tidy了
- en: '[PRE17]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We can verify that the check has been added by executing Clang-Tidy with the
    `-list-checks` argument as follows:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下方式执行Clang-Tidy并使用`-list-checks`参数来验证检查是否已添加：
- en: '[PRE18]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '**Figure 5.18**: Clang-Tidy `-list-checks` option'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '**图5.18**：Clang-Tidy `-list-checks`选项'
- en: It’s worth noting that we enabled all checks using the `-checks ’*’` command-line
    option, as shown in [Figure 5.18](#x1-111044r18).
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，我们使用`-checks '*’`命令行选项启用了所有检查，如[图5.18](#x1-111044r18)所示。
- en: 'To test the check, we can use the file from the clang plugin project, as seen
    in [Figure 4.39](B19722_04.xhtml#x1-91014r39):'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试这个检查，我们可以使用[图4.39](B19722_04.xhtml#x1-91014r39)中看到的clang插件项目中的文件：
- en: '[PRE19]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '**Figure 5.19**: Test file for the misc-classchecker clang-tidy check: test.cpp'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '**图5.19**：misc-classchecker clang-tidy检查的测试文件：test.cpp'
- en: 'This file contains three methods. To trigger a warning, we must set the threshold
    to 2, as demonstrated:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件包含三个方法。要触发警告，我们必须将阈值设置为2，如下所示：
- en: '[PRE20]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '**Figure 5.20**: Run a misc-classchecker check on the test file: test.cpp'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '**图5.20**：在测试文件test.cpp上运行misc-classchecker检查'
- en: 'The output will be as follows:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '[PRE21]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '**Figure 5.21**: Output of the misc-classchecker check for the test.cpp test
    file'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '**图5.21**：对test.cpp测试文件的misc-classchecker检查输出'
- en: After testing the file with custom source code, it’s time to create an LIT test
    for our check.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用自定义源代码测试文件后，是时候为我们的检查创建一个LIT测试了。
- en: 5.4.3 LIT test
  id: totrans-169
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5.4.3 LIT测试
- en: 'For the LIT test, we will use the slightly modified code from [Figure 4.43](B19722_04.xhtml#x1-93048r43).
    Let’s modify `classchecker.cpp` , located in the `clang-tools-extra/test/clang-tidy/checkers/misc`
    folder, as follows:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 对于LIT测试，我们将使用[图4.43](B19722_04.xhtml#x1-93048r43)中略微修改的代码。让我们按照以下方式修改位于`clang-tools-extra/test/clang-tidy/checkers/misc`文件夹中的`classchecker.cpp`：
- en: '[PRE22]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '**Figure 5.22**: LIT test: classchecker.cpp'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '**图5.22**：LIT测试：classchecker.cpp'
- en: As we can see, the only difference compared to [Figure 4.43](B19722_04.xhtml#x1-93048r43)
    is in *Line 1*, where we specify which commands should be run, and in *Line 9*,
    where we define the test pattern.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，与[图4.43](B19722_04.xhtml#x1-93048r43)相比，唯一的区别在于*第1行*，我们指定了应该运行哪些命令，以及在*第9行*定义了测试模式。
- en: 'We can run the test as follows:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按照以下方式运行测试：
- en: '[PRE23]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '**Figure 5.23**: Testing the misc-classchecker clang-tidy check'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '**图5.23**：测试misc-classchecker clang-tidy检查'
- en: 'The command produces the following output:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 命令将产生以下输出：
- en: '[PRE24]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '**Figure 5.24**: Testing output for misc-classchecker'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '**图5.24**：测试misc-classchecker的输出'
- en: We can also use the command shown in [Figure 5.3](#x1-102007r3) to run all clang-tidy
    checks, including our newly added one.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用[图5.3](#x1-102007r3)中显示的命令来运行所有clang-tidy检查，包括我们新添加的检查。
- en: When we run our check on a real code base, as opposed to synthetic tests, we
    may encounter unexpected results. One such issue has already been discussed in
    [*Section** 3.7*](B19722_03.xhtml#x1-650007)*, Processing AST in the case of errors*
    and pertains to the impact of compilation errors on Clang-Tidy results. Let’s
    delve into this problem using a specific example.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: 5.4.4 Results in the case of compilation errors
  id: totrans-182
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Clang-Tidy uses AST as the information provider for checks, and the checks can
    produce wrong results if the information source is broken. The typical case is
    when the analyzed code has compilation errors (see [*Section** 3.7*](B19722_03.xhtml#x1-650007)*,
    Processing AST in the case of errors*).
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following code as an example:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '**Figure 5.25**: Test file with compilation errors: error.cpp'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: 'In the example, we made a syntax error in *Line 6*: the method name is incorrectly
    written as ’doSometing’ instead of ’doSomet**h**ing’. If we run our check on the
    file without any parameters, we will receive the following output:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '**Figure 5.26**: Running a misc-classchecker check on a file containing compilation
    errors'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: Our check seems to be working incorrectly with this code. It assumes the class
    has seven methods when, in fact, it has only one.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: The case of compilation errors can be considered an edge case, and we can process
    it correctly. Before addressing these cases, we should investigate the produced
    AST to examine the issue.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: 5.4.5 Compilation errors as edge cases
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let’s use `clang-query` (see [*Section** 3.6*](B19722_03.xhtml#x1-640006)*,
    Explore Clang AST with* *clang-query*) to explore what has happened with the AST.
    The program with the error fixed is shown in the following figure:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '**Figure 5.27**: noerror.cpp test file with compilation errors fixed'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: 'The `clang-query` command can be run on the file as follows:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '**Figure 5.28**: Clang-Query run on noerror.cpp file with compilation errors
    fixed'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: Then, we will set up Clang-Query’s output as `dump` and find all matches for
    `CXXRecordDecl`
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '**Figure 5.29**: Setup Clang-Query output and run matchers'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: The result is shown below
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '**Figure 5.30**: AST for the noerror.cpp file with compilation errors fixed'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: Compare it with the output for the code with an error (see [Figure 5.25](#x1-113009r25)).
    We run Clang-Query on the error.cpp file and set up the required matcher as follows
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '**Figure 5.31**: Clang-Query run on error.cpp'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: 'The found match is shown below:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '**Figure 5.32**: AST for the error.cpp file with a compilation error'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: 'As we can see, all additional methods are added implicitly. We can exclude
    them by modifying *Line 30* (see [Figure 5.16](#x1-111031r16)) of our check code,
    as shown:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '**Figure 5.33**: Exclude implicit declaration from the check report'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: 'If we run the modified check on the file that contains compilation errors,
    we will get the following output:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '**Figure 5.34**: Running a fixed misc-classchecker check on a file containing
    compilation errors'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, the compiler error is reported, but our check does not trigger
    any warnings.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，编译器错误被报告了，但我们的检查没有触发任何警告。
- en: 'Despite the fact that we correctly processed the unusual clang-tidy result,
    it’s worth noting that not every compilation error can be correctly processed.
    As mentioned in [*Section** 3.7*](B19722_03.xhtml#x1-650007)*, Processing AST
    in the case of errors*, the Clang compiler tries to produce an AST even when encountering
    compilation errors. This approach is because it’s designed for use by IDEs and
    other tools that benefit from as much information as possible, even in the presence
    of errors. However, this ”error-recovery” mode of the AST can produce structures
    that Clang-Tidy might not anticipate. Therefore, we should adhere to the following
    rule:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们正确处理了不寻常的clang-tidy结果，但值得注意的是，并非每个编译错误都能被正确处理。如[*第3.7节*](B19722_03.xhtml#x1-650007)中所述，“错误情况下处理AST”，Clang编译器即使在遇到编译错误时也会尝试生成AST。这种做法是因为它被设计为供IDE和其他工具使用，即使存在错误，也能尽可能多地提供信息。然而，这种AST的“错误恢复”模式可能会产生Clang-Tidy可能没有预料到的结构。因此，我们应该遵守以下规则：
- en: Tip
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: Always ensure your code compiles without errors before running Clang-Tidy and
    other Clang Tools. This guarantees that the AST is both accurate and complete.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行Clang-Tidy和其他Clang工具之前，始终确保你的代码没有错误。这保证了AST既准确又完整。
- en: 5.5 Summary
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5.5 摘要
- en: In this chapter, we delved into Clang-Tidy, a robust tool for code analysis.
    We explored its configuration, execution, and internal architecture. Additionally,
    we developed a custom Clang-Tidy check to assess class complexity. Our check utilized
    basic AST matchers, akin to regular expressions within the AST. For complexity
    determination, we employed a simple method. More sophisticated metrics, such as
    cyclomatic complexity, demand tools such as **Control Flow Graphs** (**CFGs**).
    The adventure continues in the next chapter, where we’ll dive deep into designing
    intricate checks using CFG.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们深入探讨了Clang-Tidy，这是一个用于代码分析的强大工具。我们研究了其配置、执行和内部架构。此外，我们还开发了一个定制的Clang-Tidy检查来评估类复杂性。我们的检查使用了基本的AST匹配器，类似于AST中的正则表达式。对于复杂性的确定，我们采用了简单的方法。更复杂的度量，如圈复杂度，需要像**控制流图（CFGs**）这样的工具。冒险将在下一章继续，我们将深入探讨使用CFG设计复杂检查。
- en: 5.6 Further reading
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5.6 进一步阅读
- en: 'Clang-Tidy extra Clang tools documentation: [https://clang.llvm.org/extra/clang-tidy/](https://clang.llvm.org/extra/clang-tidy/)'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Clang-Tidy额外Clang工具文档：[https://clang.llvm.org/extra/clang-tidy/](https://clang.llvm.org/extra/clang-tidy/)
- en: 'AST matcher reference: [https://clang.llvm.org/docs/LibASTMatchersReference.html](https://clang.llvm.org/docs/LibASTMatchersReference.html)'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AST匹配器参考：[https://clang.llvm.org/docs/LibASTMatchersReference.html](https://clang.llvm.org/docs/LibASTMatchersReference.html)
