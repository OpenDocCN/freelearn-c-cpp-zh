- en: Part Two – APPropriate Behavior
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二部分 – 适当的举止
- en: One of the key things that motivated me to write this part was picking up my
    copy of *Code Complete, 2nd Edition*—[http://www.cc2e.com](http://www.cc2e.com).
    I’ve had a copy of either this or the first edition of the book for most of my
    developer career. I hadn’t read it in a while, though, so I flicked through the
    table of contents looking for an interesting section to re-read.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 促使我写这部分的关键之一是拿起我的*《完整的程序员》第二版*——[http://www.cc2e.com](http://www.cc2e.com)。在我的开发者生涯中，我大部分时间都有一本这本书的副本，要么是这一版，要么是第一版。尽管如此，我有一段时间没有读过它，所以我翻阅了目录，寻找一个有趣的章节来重新阅读。
- en: The only parts that caught my eye were the sections at the back on the personality
    of a developer and on self-improvement. I find this odd; *Code Complete* is widely
    recommended as a comprehensive book on the craft of writing software. Rightly
    so; it’s helped lots of programmers (myself included) to introspect the way they
    practice their work, to understand and improve it.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一引起我注意的部分是关于开发者个性和自我提升的章节。我觉得这很奇怪；“完整的程序员”被广泛推荐为关于编写软件技艺的全面书籍。这是正确的；它帮助了许多程序员（包括我自己）反思他们的工作方式，理解并改进它。
- en: Code Complete is certainly thick enough to be considered comprehensive. Why,
    then, when it has so much content on *how code should be written*, has it so little
    to say on *the people doing the writing*?
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 《完整的程序员》当然足够厚，可以被认为是全面的。那么，为什么它有那么多关于*代码应该如何编写*的内容，却如此少地谈论*编写代码的人*呢？
- en: I’m now in a position to answer the question that titles this section; this
    part is about the things that go into being a programmer that aren’t specifically
    the programming. *Coder Complete*, if you will. It starts fairly close to home,
    with chapters on working with other coders, on supporting your own programming
    needs, and on other “software engineering” practices (I’m currently not sure whether
    I think software *is* an engineering discipline, nor, for people interested in
    that movement, a craftsmanship—the term is commonly encountered so I’ll use it
    anyway) that programmers should understand and make use of. But as we go through
    this part of the book, we’ll be talking about psychology and metacognition—about
    understanding how you, the programmer, *function* and how to improve that functioning.
    My hope is that thinking about these things will help to formulate a *philosophy*
    of making software; a coherent argument that describes what’s good and worthwhile
    and desirable about making software, what isn’t, and how the things discussed
    throughout this part, fit into that philosophy.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我现在可以回答这个部分标题所提出的问题；这部分是关于成为程序员所需的事情，而这些事情并不特指编程。即“完整的程序员”。它从离我们很近的地方开始，包括与其他程序员合作、支持自己的编程需求以及程序员应该理解和利用的其他“软件工程”实践（我目前不确定我认为软件*是否*是一门工程学科，或者对于对这个运动感兴趣的人来说，是否是一门手艺——这个术语很常见，所以我将使用它）。但随着我们阅读这本书的这一部分，我们将讨论心理学和元认知——关于理解你，程序员，*如何运作*以及如何改进这种运作。我的希望是思考这些事情将有助于形成制作软件的*哲学*；一个连贯的论点，描述了制作软件的好处、值得和期望之处，什么不是，以及本部分讨论的内容如何融入这一哲学。
- en: A very small amount of this part of the book has appeared before *on my blog*—[https://sicpers.info](https://sicpers.info).
    More was destined for my blog but was incorporated here instead. Still more would
    never have been written if I hadn’t planned out the table of contents of the empty
    sections of my head.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书的这一部分只有一小部分内容在我的博客上出现过*——[https://sicpers.info](https://sicpers.info)。更多内容原本打算放在我的博客上，但最终被收录在这里。还有更多内容，如果没有规划我脑海中空白部分的目录，可能永远都不会被写出来。
