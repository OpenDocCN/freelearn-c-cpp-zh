- en: Chapter 11. Packaging Project
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章. 项目打包
- en: Throughout this book, you learned the basics of Unreal Engine 4\. In this final
    chapter, we will recap all that, as well as see how to package your project into
    a standalone game. You will also learn how to package the game for quick distribution
    and package a game as a release version.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的整个过程中，你学习了Unreal Engine 4的基础知识。在本章的最后，我们将回顾所有这些内容，同时了解如何将你的项目打包成一个独立游戏。你还将学习如何快速分发游戏以及如何打包游戏作为发布版本。
- en: Recap
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回顾
- en: In the first chapter, you learned the difference between Unreal Engine versions.
    As I have mentioned, the launcher version is a binary version compiled by Epic
    and is ready for you to use. But, if you want to get the latest build that is
    not yet available through launcher, then your only choice is getting the source
    code from GitHub. If you are going for the source code version of Unreal Engine
    then I recommend getting the source from the promoted branch. Epic works hard
    on the promoted build for their artists and designers, so most of the time it
    is updated daily and you get the latest stuff too! if you really want to get your
    hands dirty or you have that urge to grab the latest and the most cutting-edge
    build, then you should go for the master branch. Keep in mind that this branch
    tracks live changes directly from Epic, it might be buggy and it might even fail
    to compile.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一章中，你学习了Unreal Engine不同版本之间的区别。正如我提到的，启动器版本是由Epic编译的二进制版本，可供你使用。但是，如果你想获取通过启动器尚未提供的最新构建版本，那么你唯一的选择就是从GitHub获取源代码。如果你打算使用Unreal
    Engine的源代码版本，我建议从推荐的分支获取源代码。Epic为他们的艺术家和设计师努力工作，因此大多数时候它每天都会更新，你也可以获得最新的内容！如果你真的想亲自动手或者你有获取最新和最前沿构建的冲动，那么你应该选择master分支。请记住，这个分支直接跟踪Epic的实时更改，它可能存在错误，甚至可能无法编译。
- en: Once you get the engine up and running, you can start importing your assets
    into **Content Browser**. This is where you save and edit the assets that are
    used in your game. **Content Browser** offers a lot of functionality such as searching
    based on keyword, tags, asset type, filters, etc. and you can use the **Collections**
    feature in **Content Browser** to add references to your most commonly used assets.
    When searching, you can exclude specific keywords by adding the hyphen (-) before
    the name. For example, if you want to exclude all assets that contain the name
    `floor`, then you can search in **Content Browser** as `-floor`. This will show
    you all assets that do not contain the word floor.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你启动了引擎，你就可以开始将你的资产导入到**内容浏览器**中。这是你保存和编辑游戏中使用的资产的地方。**内容浏览器**提供了许多功能，如基于关键字、标签、资产类型、过滤器等进行搜索，你还可以使用**内容浏览器**中的**集合**功能添加对你最常用资产的引用。在搜索时，你可以在名称前添加连字符（-）来排除特定的关键字。例如，如果你想排除所有包含名称`floor`的资产，那么你可以在**内容浏览器**中搜索`-floor`。这将显示所有不包含单词floor的资产。
- en: 'Another great feature of **Content Browser** is the **Developers** folder.
    This is especially useful when you are working in a team where you want to try
    out different techniques or assets in your game without affecting other parts.
    One thing to remember is that you should only use this strictly for personal or
    experimental work and you should never include references to external assets outside
    this folder. For example, if you made an asset that you want to try out before
    adding it to the game, then you can create a test level inside your **Developers**
    folder and test out everything there. Think of the **Developers** folder as your
    own private playground where you can do whatever you want without affecting others
    work. The **Developers** folder is not enabled by default. To enable it, click
    on **View Options** at the bottom right corner of your **Content Browser** and
    select **Show Developers Folder**:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**内容浏览器**的另一个出色功能是**开发者**文件夹。这在团队合作中特别有用，当你想在游戏中尝试不同的技术或资产而不影响其他部分时。有一点要记住的是，你应该只将此文件夹严格用于个人或实验性工作，并且你永远不应该在此文件夹之外包含对外部资产的引用。例如，如果你制作了一个想要在添加到游戏之前尝试的资产，那么你可以在**开发者**文件夹内创建一个测试关卡，并在那里测试一切。将**开发者**文件夹想象成你自己的私人游乐场，你可以在这里随心所欲地做任何事情，而不会影响他人的工作。**开发者**文件夹默认不启用。要启用它，点击**内容浏览器**右下角的**视图选项**，然后选择**显示开发者文件夹**：'
- en: '![Recap](img/B03950_11_01.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![回顾](img/B03950_11_01.jpg)'
- en: 'Once you enable that, you will see a new folder called **Developers** under
    your **Content** folder in **Content Browser**:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你启用它，你将在**内容浏览器**中的**内容**文件夹下看到一个名为**开发者**的新文件夹：
- en: '![Recap](img/B03950_11_02.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![回顾](img/B03950_11_02.jpg)'
- en: 'The name of the folder inside the **Developers** folder is automatically set
    to your Windows username. If you are using **Source Control** (for example, Perforce
    or Subversion), then you can see the `Other` **Developers** folder by enabling
    the **Other Developers** checkbox available under **Filters** | **Other Filters**:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**开发者**文件夹内的文件夹名称自动设置为你的Windows用户名。如果你使用**源代码控制**（例如，Perforce或Subversion），那么你可以通过启用**其他开发者**复选框来查看“其他开发者”文件夹，该复选框位于**过滤器**
    | **其他过滤器**下：'
- en: '![Recap](img/B03950_11_03.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![回顾](img/B03950_11_03.jpg)'
- en: Knowing this will help you a lot when you are working with a team or when you
    have lots of assets.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 了解这些将大大帮助你当你在团队中工作或拥有大量资产时。
- en: 'Just like how you use **Content Browser** to find assets that are imported,
    you use **World Outliner** to find assets that are placed in your level. You can
    also use **Layers** to organize assets that are placed in the level. Both of these
    windows can be summoned from **Window** in the menu bar:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 就像使用**内容浏览器**查找导入的资产一样，你使用**世界大纲**来查找放置在你关卡中的资产。你还可以使用**层**来组织放置在关卡中的资产。这两个窗口都可以从菜单栏中的**窗口**召唤：
- en: '![Recap](img/B03950_11_04.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![回顾](img/B03950_11_04.jpg)'
- en: 'In [Chapter 3](ch03.html "Chapter 3. Materials"), *Materials*, you learned
    about the awesome **Material Editor** and the common nodes that we will use. A
    good material artist can totally change the realism of your game. Mainly materials
    and post processing gives you the power to make the game look realistic or cartoony.
    The common material expressions that we learned are not just used for coloring
    your assets. For example, create the following material network and apply to a
    simple mesh (for example, a sphere) and see what happens:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第3章](ch03.html "第3章。材质")“材质”中，你学习了令人惊叹的**材质编辑器**和我们将使用的常见节点。一位优秀的材质艺术家可以完全改变你游戏的现实感。主要材料和后处理赋予你让游戏看起来逼真或卡通化的能力。我们学习的常见材质表达式不仅用于为资产着色。例如，创建以下材质网络并将其应用于一个简单的网格（例如，一个球体），看看会发生什么：
- en: '![Recap](img/B03950_11_05.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![回顾](img/B03950_11_05.jpg)'
- en: If you find yourself using a specific network multiple times, then it's better
    for you to create a material function which can tidy up your graph and make it
    more organized.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你发现自己多次使用特定的网络，那么创建一个材质函数来整理你的图并使其更有组织会更好。
- en: As you continue developing your game, you will eventually start tweaking with
    **Post Process Volume**. This lets you modify the overall look and feel of your
    game. By combining **Post Process** in blueprints or C++ you can even use it to
    affect your game play too. A perfect example for this is the detective vision
    from the Batman Arkham series games. You can use materials in post process to
    highlight a specific object in world or even use it to render outlines for meshes
    that are behind other objects.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 随着你继续开发你的游戏，你最终将开始调整**后处理体积**。这让你可以修改游戏的整体外观和感觉。通过在蓝图或C++中结合**后处理**，你甚至可以用来影响游戏玩法。一个完美的例子是来自蝙蝠侠阿卡姆系列游戏的侦探视野。你可以使用后处理中的材质来突出世界中的特定对象，甚至用它来渲染其他对象后面的网格的轮廓。
- en: Another crucial part of the game that determines the final look is lighting.
    In this book, you learned about different light mobilities, the differences between
    them including common light settings and how it affects the game world. You also
    learned about Lightmass Global Illumination which is the static global illumination
    solver developed by Epic Games.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏的另一个关键部分是照明，它决定了最终的外观。在这本书中，你学习了不同的光照移动性，它们之间的区别包括常见的光照设置以及它如何影响游戏世界。你还学习了Epic
    Games开发的静态全局照明求解器Lightmass全局照明。
- en: 'As you know by now, Lightmass is used to bake lighting and because of that,
    dynamic lights are not supported by Lightmass. When using Lightmass for your game,
    you need to make sure that you have a second UV channel for all your static meshes
    (that are not set to movable) to have proper shadows. If you want to use dynamic
    lights (that means lights that can change any of their properties at runtime-think
    of the day and night cycle as an example), Epic has included support for **Light
    Propagation Volume** (**LPV**). At the time of writing this book, LPV is in experimental
    stage and is not yet ready for production. One extra thing that is worth mentioning
    here is the ability to change bounced lighting color. Take a look at the following
    material network:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所知，Lightmass用于烘焙光照，因此不支持动态光照。当您在游戏中使用Lightmass时，您需要确保所有静态网格（未设置为可移动的）都有一个第二UV通道，以便产生适当阴影。如果您想使用动态光照（这意味着在运行时可以改变其任何属性的光源——例如，白天和夜晚的循环），Epic已经包含了**光传播体积**（**LPV**）的支持。在撰写本书时，LPV处于实验阶段，尚未准备好投入生产。这里还有一件额外的事情值得提及，那就是可以改变反射光照的颜色。请看以下材质网络：
- en: '![Recap](img/B03950_11_06.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![回顾](img/B03950_11_06.jpg)'
- en: Using the **GIReplace** material node, you can change the color of the bounced
    light. If you apply the preceding material to a mesh and use Lightmass to build
    lighting, the result of the bounced light will be red color instead of white.
    Even though we don't need to have a different color for bounced lights, we can
    still use this node to darken or brighten the bounced lighting without the need
    to adjust Lightmass settings.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 使用**GIReplace**材质节点，您可以改变反射光的颜色。如果您将前面的材质应用到网格上并使用Lightmass构建光照，反射光的颜色将变为红色而不是白色。即使我们不需要为反射光使用不同的颜色，我们仍然可以使用此节点在不调整Lightmass设置的情况下加深或变亮反射光照。
- en: Once we have all the base setups, we then jump to Blueprints. **Blueprint Visual
    Scripting** is a powerful and flexible node-based editor that lets artists and
    designers quickly prototype their game. Mainly, we work with two common Blueprint
    types and they are **Level Blueprint** and **Class Blueprint**. Inside these Blueprints,
    we have Event Graph, Function Graph, and Macro Graph. In **Class Blueprints**,
    we add components to define what that Blueprint is and how they behave. Nodes
    in Blueprint have various colors applied to them to indicate what kind of node
    they are. Once you start using Blueprints, you will get familiar with all the
    node colors and what they mean. We saw how to create a **Class Blueprint** from
    an `Actor` class and how to spawn it dynamically in the game. We also saw how
    we can interact with objects in world through **Level Blueprint**. We placed triggers
    in the level and in **Level Blueprint** we created overlap events for these triggers
    and learned how to play a Matinee sequence.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们完成了所有基本设置，我们就转向Blueprints。**Blueprint可视化脚本**是一个强大且灵活的基于节点的编辑器，它允许艺术家和设计师快速原型化他们的游戏。主要来说，我们处理两种常见的Blueprint类型，它们是**级别Blueprint**和**类Blueprint**。在这些Blueprint内部，我们有事件图、函数图和宏图。在**类Blueprint**中，我们添加组件来定义该Blueprint是什么以及它们的运行方式。Blueprint中的节点被应用了各种颜色，以指示它们是哪种类型的节点。一旦您开始使用Blueprint，您就会熟悉所有节点颜色及其含义。我们看到了如何从一个`Actor`类创建**类Blueprint**以及如何在游戏中动态生成它。我们还看到了如何通过**级别Blueprint**与世界中的对象交互。我们在级别中放置了触发器，并在**级别Blueprint**中为这些触发器创建了重叠事件，并学习了如何播放Matinee序列。
- en: Matinee is one of the powerful tools in Unreal Engine 4 that is mainly used
    to create cinematics. You learned about Matinee UI and how to create a basic cut
    scene. Since Matinee is similar to other nonlinear video editors, it is easy for
    video editing professionals to get familiar with Matinee. Even though Matinee
    is used for cinematics, you can also use it for gameplay-related elements such
    as opening doors, elevator movement etc.. You can even use it to export your existing
    cinematics as image sequences or in the AVI format.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Matinee是Unreal Engine 4中强大的工具之一，主要用于创建电影场景。您已经了解了Matinee用户界面以及如何创建一个基本的剪辑场景。由于Matinee与其他非线性视频编辑器类似，视频编辑专业人士很容易熟悉Matinee。尽管Matinee用于电影场景，您也可以用它来创建与游戏玩法相关的元素，例如开门、电梯移动等。您甚至可以使用它将现有的电影场景导出为图像序列或AVI格式。
- en: After learning about Matinee, we continued to the next chapter to learn about
    **Unreal Motion Graphics** (**UMG**). UMG is a UI authoring tool developed by
    Epic. Using UMG, we created a simple HUD for the player and learned how to communicate
    with the player Blueprint to show a health bar for the player. We also made a
    3D widget for the player that floats on top of the character's head.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在学习完Matinee之后，我们继续到下一章学习**Unreal运动图形**（**UMG**）。UMG是由Epic开发的UI创作工具。使用UMG，我们为玩家创建了一个简单的HUD，并学习了如何与玩家蓝图通信以显示玩家的生命条。我们还为玩家制作了一个浮在角色头顶上的3D小部件。
- en: Continuing from there, you learned more about the Cascade Particle System. You
    learned about Particle Editor and various other windows available inside Cascade
    Editor. After learning the basics, you created a basic particle system using GPU
    Sprites including collision. Lastly, we took the particle system to Blueprints
    and learned how to randomly burst the particles using Custom events and delay
    node.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 从那里继续，你学习了更多关于级联粒子系统（Cascade Particle System）的知识。你了解了粒子编辑器以及级联编辑器内部可用的各种窗口。在掌握基础知识后，你创建了一个基本的粒子系统，包括使用GPU
    Sprites的碰撞。最后，我们将粒子系统带到了蓝图（Blueprints）中，并学习了如何使用自定义事件和延迟节点随机爆发粒子。
- en: Finally, we dived into the magic world of C++. There you learned about various
    versions of Visual Studio 2015 and how to download Visual Studio 2015 Community
    Edition. Once we have the IDE installed, we created a new C++ project based on
    the Third Person template. From there we extended it to include health and health
    regeneration for our character class. You also learned how to expose variables
    and functions to Blueprints and how to access them in Blueprints.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们深入到了C++的神奇世界。在那里，你学习了Visual Studio 2015的各种版本以及如何下载Visual Studio 2015社区版。一旦我们安装了IDE，我们就基于第三人称模板创建了一个新的C++项目。从那里，我们扩展了它以包括我们角色类的生命值和生命值恢复。你还学习了如何将变量和函数暴露给蓝图以及如何在蓝图中访问它们。
- en: Packaging the project
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打包项目
- en: 'Now that you have learned most of the basics of Unreal Engine 4, let''s see
    how to package your game. Before we package the game, we need to make sure that
    we set a default map for our game which will be loaded when your packaged game
    starts. You can set the **Game Default Map** option from the **Project Settings**
    window. For example, you can set the **Game Default Map** option to your main
    menu map:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经学习了大多数Unreal Engine 4的基础知识，让我们看看如何打包你的游戏。在我们打包游戏之前，我们需要确保我们为游戏设置了一个默认地图，该地图将在你的打包游戏启动时加载。你可以从**项目设置**窗口设置**游戏默认地图**选项。例如，你可以将**游戏默认地图**选项设置为你的主菜单地图：
- en: '![Packaging the project](img/B03950_11_07.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![打包项目](img/B03950_11_07.jpg)'
- en: 'To set a default map for the game, please follow these steps:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要为游戏设置默认地图，请按照以下步骤操作：
- en: Click on the **Edit** menu.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**编辑**菜单。
- en: Click on **Project Settings**.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**项目设置**。
- en: Select **Maps & Modes**.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**地图与模式**。
- en: Choose your new map in **Game Default Map**.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**游戏默认地图**中选择你的新地图。
- en: Quick packaging
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 快速打包
- en: 'Once you set the **Game Default Map** option, you need to select the **Build
    Configuration**:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你设置了**游戏默认地图**选项，你需要选择**构建配置**：
- en: '![Quick packaging](img/B03950_11_08.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![快速打包](img/B03950_11_08.jpg)'
- en: 'There are three types of build configurations available Packaging the project:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在打包项目时，有三种类型的构建配置可用：
- en: '`DebugGame`: This configuration will include all the debug information. For
    testing purposes, you can use this configuration.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DebugGame`：这种配置将包含所有调试信息。出于测试目的，你可以使用这个配置。'
- en: '`Development`: This configuration offers better performance compared to the
    `DebugGame` configuration build because of minimal debugging support.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`开发`：这种配置与`DebugGame`配置构建相比，由于调试支持最小化，因此提供了更好的性能。'
- en: '`Shipping`: This should be the setting you should choose when you want to distribute
    the game.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`发布`：当你想要分发游戏时，应该选择这个设置。'
- en: 'Once you have selected your build configuration, you can package your game
    from **File** | **Package Project** and then select your platform. For example,
    here is the option to package your game for **Windows 64-bit**:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你选择了构建配置，你就可以从**文件** | **打包项目**进行游戏打包，然后选择你的平台。例如，这里是为**Windows 64位**打包游戏的选项：
- en: '![Quick packaging](img/B03950_11_09.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![快速打包](img/B03950_11_09.jpg)'
- en: Once you select that option, editor might prompt you to select a target directory
    to save the packaged game. Once you set the path, editor will start building and
    cooking the content for the selected platform. If the packaging is successful,
    you will see the packaged game under the target directory you set earlier.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦选择该选项，编辑器可能会提示您选择一个目标目录以保存打包的游戏。一旦设置路径，编辑器将开始为所选平台构建和准备内容。如果打包成功，您将在之前设置的目录下看到打包的游戏。
- en: Packaging the release version
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 打包发布版本
- en: The previously mentioned method is for quickly packaging and distributing the
    game to end users. However the preceding method cannot build DLCs or patches for
    your game so in this section, you will learn how to create a release version for
    your game.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 之前提到的方 法是用于快速打包和向最终用户分发游戏。然而，前面的方法不能构建您的游戏的DLC或补丁，因此在本节中，您将学习如何为您的游戏创建发布版本。
- en: 'To start let''s first open the **Project Launcher** window. **Project Launcher**
    provides advanced workflows to packaging your game:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们打开 **项目启动器** 窗口。**项目启动器** 提供了打包游戏的先进工作流程：
- en: '![Packaging the release version](img/B03950_11_10.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![打包发布版本](img/B03950_11_10.jpg)'
- en: 'To create a custom launch profile, click on the plus (**+**) button as shown
    in the preceding screenshot. Once you click on that you will see a new window
    with new settings as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建自定义启动配置文件，请点击前面截图所示的增加（**+**）按钮。一旦点击，您将看到一个带有以下新设置的新窗口：
- en: '![Packaging the release version](img/B03950_11_11.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![打包发布版本](img/B03950_11_11.jpg)'
- en: 'In the preceding window, do the following:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的窗口中，执行以下操作：
- en: Enable the **Build** checkbox.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用 **构建** 复选框。
- en: Set the **Build Configuration** option to **Shipping**.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 **构建配置** 选项设置为 **发布**。
- en: Set the dropdown to **By the book**.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将下拉菜单设置为 **按书**。
- en: In this example we selected **WindowsNoEditor** to test on Windows.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在本例中，我们选择了 **WindowsNoEditor** 以在 Windows 上进行测试。
- en: Select the culture. This is used for localization. By default, **en-US** is
    selected.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择文化。这用于本地化。默认情况下，**en-US** 被选中。
- en: 'Once all those settings are done, expand the **Release/DLC/Patching Settings**
    and **Advanced Settings** sections:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 完成所有这些设置后，展开 **发布/DLC/修补设置** 和 **高级设置** 部分：
- en: '![Packaging the release version](img/B03950_11_12.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![打包发布版本](img/B03950_11_12.jpg)'
- en: 'Inside those sections do the following:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些部分中执行以下操作：
- en: Enable **Create a release version of the game for distribution**.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用 **创建用于分发的游戏发布版本**。
- en: Set the name of the new release to **1.0**.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新发布版本的名称设置为 **1.0**。
- en: Enable **Store all content in a single file (UnrealPak)**.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用 **将所有内容存储在单个文件中（UnrealPak）**。
- en: Set the **Cooker build** **configuration** section to **Shipping**.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 **烹饪构建** **配置** 部分设置为 **发布**。
- en: Add the `–stage` command line as **Additional Cooker Option**. Note that you
    do not press enter after typing it. Simply click anywhere else to apply that command.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `–stage` 命令行作为 **附加烹饪选项** 添加。请注意，在输入后不要按回车键。只需点击其他任何地方即可应用该命令。
- en: 'After setting this, set the last two options of **Package** and **Deploy**
    to **Do not package** and **Do not deploy** respectively:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 设置完成后，将 **打包** 和 **部署** 的最后两个选项分别设置为 **不打包** 和 **不部署**：
- en: '![Packaging the release version](img/B03950_11_13.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![打包发布版本](img/B03950_11_13.jpg)'
- en: 'Once all those are done, click on the **Back** button on the top right corner
    of the **Project Launcher** window and you will see your new profile ready to
    build:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 完成所有这些操作后，点击 **项目启动器** 窗口右上角的 **后退** 按钮，您将看到准备好的新配置文件，可以开始构建：
- en: '![Packaging the release version](img/B03950_11_14.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![打包发布版本](img/B03950_11_14.jpg)'
- en: 'Simply click on the **Launch** button, **ProjectLauncher** will build, cook,
    and package your game. This might take time depending on the complexity of your
    game:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 简单地点击 **启动** 按钮，**项目启动器** 将构建、准备和打包您的游戏。这可能会根据您游戏复杂度的大小而花费一些时间：
- en: '![Packaging the release version](img/B03950_11_15.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![打包发布版本](img/B03950_11_15.jpg)'
- en: 'If the packaging was successful, then you can see that in the **ProjectLauncher**
    window:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果打包成功，您可以在 **项目启动器** 窗口中看到：
- en: '![Packaging the release version](img/B03950_11_16.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![打包发布版本](img/B03950_11_16.jpg)'
- en: You can find your packaged game in your project folder under **Saved** | **StagedBuilds**
    | **WindowsNoEditor** folder. Now you can distribute this packaged game to other
    users.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在项目文件夹下的 **Saved** | **StagedBuilds** | **WindowsNoEditor** 文件夹中找到您的打包游戏。现在您可以向其他用户分发这个打包游戏。
- en: Summary
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Throughout this book, you learned the basics of Unreal Engine 4\. We started
    this journey with you learning how to download the engine and saw how to import
    your own assets. From there you learned about Material Editor and its common aspects.
    Then you learned about Post Process, how to use lights and the importance of lights
    in video games. You also learned about Blueprints which is the visual scripting
    language of Unreal Engine 4\. We continued our journey from Blueprints to UMG
    which you can use to create any kind of menu in the game. Since a game is nothing
    without visual effects and cut scenes, you learned about Cascade Particle Editor
    and Matinee. From there we dived into the world of C++ to learn the basics of
    this awesome language. Finally you learned how to package the game and distribute
    it to others.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，您学习了虚幻引擎4的基础知识。我们与您一起开始这段旅程，学习了如何下载引擎以及如何导入您的资产。从那里，您学习了材质编辑器和它的常见方面。然后您学习了后期处理，如何使用灯光以及灯光在视频游戏中的重要性。您还学习了蓝图，这是虚幻引擎4的视觉脚本语言。我们从蓝图继续到UMG，您可以使用它来创建游戏中任何类型的菜单。由于游戏如果没有视觉效果和场景将毫无意义，您学习了Cascade粒子编辑器和Matinee。从那里，我们深入到C++的世界，学习这种强大语言的基础。最后，您学习了如何打包游戏并将其分发给他人。
- en: References
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: 'Your journey of learning Unreal Engine 4 does not stop here. You can extend
    your knowledge even further by visiting these links:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 您学习虚幻引擎4的旅程并不止于此。您可以通过访问以下链接来进一步扩展您的知识：
- en: '*Unreal Engine* *Community*'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*虚幻引擎* *社区*'
- en: '[https://forums.unrealengine.com/](https://forums.unrealengine.com/)'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://forums.unrealengine.com/](https://forums.unrealengine.com/)'
- en: '*Unreal Engine* *Official Twitch Streams*'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*虚幻引擎* *官方Twitch直播*'
- en: '[http://www.twitch.tv/unrealengine](http://www.twitch.tv/unrealengine)'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://www.twitch.tv/unrealengine](http://www.twitch.tv/unrealengine)'
- en: '*Unreal Engine* *YouTube channel*'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*虚幻引擎* *YouTube频道*'
- en: '[https://www.youtube.com/user/UnrealDevelopmentKit/videos](https://www.youtube.com/user/UnrealDevelopmentKit/videos)'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://www.youtube.com/user/UnrealDevelopmentKit/videos](https://www.youtube.com/user/UnrealDevelopmentKit/videos)'
- en: '*Unreal Engine* *AnswerHub*'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*虚幻引擎* *AnswerHub*'
- en: '[https://answers.unrealengine.com/index.html](https://answers.unrealengine.com/index.html)'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://answers.unrealengine.com/index.html](https://answers.unrealengine.com/index.html)'
- en: '*Unreal Engine* *Documentation*'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*虚幻引擎* *官方文档*'
- en: '[https://docs.unrealengine.com/latest/INT/GettingStarted/index.html](https://docs.unrealengine.com/latest/INT/GettingStarted/index.html)'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://docs.unrealengine.com/latest/INT/GettingStarted/index.html](https://docs.unrealengine.com/latest/INT/GettingStarted/index.html)'
