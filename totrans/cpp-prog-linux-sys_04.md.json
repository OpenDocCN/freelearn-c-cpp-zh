["```cpp\n    extern int x;\n    void foo(int arg);\n    struct Point;\n    ```", "```cpp\n    int x;\n    void foo(int arg) {\n       // function body\n    }\n    struct Point {\n       // struct members and methods\n    };\n    ```", "```cpp\n    int x = 1; // global variable\n    void foo() {\n        std::cout << x << std::endl; // access global\n          variable\n    }\n    ```", "```cpp\n    void foo() {\n        int x = 1; // local variable\n        std::cout << x << std::endl; // access local\n          variable\n    }\n    ```", "```cpp\n    void foo() {\n        int x = 2; // local variable with function scope\n        {\n            int y = 4; // local variable with block scope\n        }\n    }\n    ```", "```cpp\n#include <iostream>\nint global_var = 1; // Static storage duration\nvoid foo() {\n    int automatic_var = 2;\n    static int static_var = 3;\n    int* dynamic_var = new int(4);\n    std::cout << \"Automatic var: \" << automatic_var <<\n      '\\n';\n    std::cout << \"Static var: \" << static_var << '\\n';\n    std::cout << \"Dynamic var: \" << *dynamic_var << '\\n';\n    delete dynamic_var;\n}\nint main() {\n    foo();\n    std::cout << \"Global var: \" << global_var << '\\n';\n    return 0;\n}\n```", "```cpp\nvoid foo() {\n    int x;\n}\n```", "```cpp\nint i;\nlong l;\nchar* p;\nstd::cout << \"sizeof(int) = \" << sizeof(int) << \"; sizeof(i) = \" << sizeof(i) << '\\n';\nstd::cout << \"sizeof(long) = \" << sizeof(long) << \"; sizeof(l) = \" << sizeof(l) << '\\n';\nstd::cout << \"sizeof(char*) = \" << sizeof(char*) << \"; sizeof(p) = \" << sizeof(p) << '\\n';\n```", "```cpp\nsizeof(int) = 4; sizeof(i) = 4\nsizeof(long) = 8; sizeof(l) = 8\nsizeof(char*) = 8; sizeof(p) = 8\n```", "```cpp\nstruct Empty {};\nstruct Padding {\n    long test;\n    char m;\n};\nstruct Virt {\n    virtual char GetChar() const { return ch; }\n    char ch;\n};\nvoid foo() {\n    std::cout << \"Empty: \" << sizeof(Empty) << '\\n';\n    std::cout << \"Padding: \" << sizeof(Padding) << '\\n';\n    std::cout << \"Virt: \" << sizeof(Virt) << '\\n';\n}\n```", "```cpp\nEmpty: 1\nPadding: 16\nVirt: 16\n```", "```cpp\nchar c;\nchar& r_c{c};\nchar* p_c;\nstd::cout << \"sizeof(char) = \" << sizeof(char) << \"; sizeof(c) = \" << sizeof(c) << '\\n';\nstd::cout << \"sizeof(char&) = \" << sizeof(char&) << \"; sizeof(r_c) = \" << sizeof(r_c) << '\\n';\nstd::cout << \"sizeof(char*) = \" << sizeof(char*) << \"; sizeof(p_c) = \" << sizeof(p_c) << '\\n';\n```", "```cpp\nsizeof(char) = 1; sizeof(c) = 1\nsizeof(char&) = 1; sizeof(r_c) = 1\nsizeof(char*) = 8; sizeof(p_c) = 8\n```", "```cpp\nstruct Point {\n    double x;\n    double y;\n};\nvoid foo() {\n    long a; // {1}\n    Point p1; // {2}\n    std::cout << \"{1}: \" << a << '\\n';\n    std::cout << \"{2}: \" << p1.x << \", \" << p1.y << '\\n';\n}\n```", "```cpp\n{1}: 1\n{2}: 4.19164e-318, 4.3211e-320\n```", "```cpp\nvoid foo() {\n    int b(1);         // {3.1}\n    int b_trunc(1.2); // {3.2}\n    int c{2};         // {4.1}\n    int c_warn{2.2};  // {4.2}\n    std::cout << \"{3.1}: \" << b << '\\n';\n    std::cout << \"{3.2}: \" << b_trunc << '\\n';\n    std::cout << \"{4.1}: \" << c << '\\n';\n}\n```", "```cpp\nint c_warn{2.2};  // {4.2}\n```", "```cpp\nerror: narrowing conversion of '2.2000000000000002e+0' from 'double' to 'int' [-Wnarrowing]\n```", "```cpp\nstruct Person {\n    std::string name;\n    int age;\n};\nvoid init() {\n    int zero1{}; // {1}\n    int zero2 = int(); // {2}\n    int zero3 = int{}; // {3}\n    Person nick{\"Nick L.\", 42}; // {4}\n    Person john{.name{\"John M.\"}, .age{24}}; // {5}\n}\n```", "```cpp\nvoid foo() {\n    int c{2};\n    int d(c);     // {1}\n    int e{d};     // {2}\n    int f = e;    // {3}\n    int f1 = {d}; // {4}\n}\n```", "```cpp\nclass Person {\npublic:\n    explicit Person(const std::string&  the_name) : name{\n      the_name} {}\nprivate:\n    std::string name;\n};\nclass Employee {\npublic:\n    Employee(const Person& p) : p{p} {}\n    explicit Employee(const Employee& e) : p{e.p} {}\nprivate:\n    Person p;\n};\n```", "```cpp\nvoid foo() {\n    Person john{\"John M.\"};\n    Employee staff1{john};          // {1}\n    // Employee staff2{std::string{\"George\"}};   // {2}\n    Employee staff3{staff1};        // {3}\n    // Employee staff4 = staff1;    // {4}\n    // Employee staff5 = {staff1};  // {5}\n}\n```", "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <source_location>\nstruct Mean {\n    Mean() = default;\n    void operator()(const double& val) {\n        std::cout <<  std::source_location::current()\n          .function_name() << \" of \" << this << '\\n';\n        sum += val;\n        ++count;\n    }\nprivate:\n    double sum{};\n    int count{};\n    friend std::ostream& operator<<(std::ostream& os, const\n      Mean& a);\n};\nstd::ostream& operator<<(std::ostream& os, const Mean& a) {\n    double mean{std::nan(\"\")};\n    if (a.count > 0) {\n        mean = a.sum / a.count;\n    }\n    os << mean;\n    return os;\n}\nint main() {\n    Mean calc_mean;\n    std::vector v1{1.0, 2.5, 4.0, 5.5};\n    std::for_each(v1.begin(), v1.end(), calc_mean);\n    std::cout << \"The mean value is: \" << calc_mean <<\n      '\\n';\n    return 0;\n}\n```", "```cpp\noperator()\n```", "```cpp\nstd::ostream& operator<<(std::ostream& os, const Mean& a)\n```", "```cpp\nvoid Mean::operator()(const double&) of 0x7ffc571a64e0\nvoid Mean::operator()(const double&) of 0x7ffc571a64e0\nvoid Mean::operator()(const double&) of 0x7ffc571a64e0\nvoid Mean::operator()(const double&) of 0x7ffc571a64e0\nThe mean value is: nan\n```", "```cpp\nstruct Mean {\n    Mean() noexcept {\n        std::cout <<  std::source_location::current()\n         .function_name() << \" of \" << this << '\\n';\n    }\n    Mean(Mean&& a) noexcept : sum{a.sum}, count{a.count} {\n        std::cout <<  std::source_location::current()\n          .function_name() << \" from: \" << &a << \" to: \" <<\n             this << '\\n';\n        a.sum = 0;\n        a.count = -1;\n    }\n    Mean& operator=(Mean&& a) noexcept {\n        std::cout <<  std::source_location::current()\n          .function_name() << \" from: \" << &a << \" to: \" <<\n            this << '\\n';\n        sum = a.sum;\n        count = a.count;\n        return *this;\n    }\n    Mean(const Mean& a) noexcept : sum{a.sum},\n      count{a.count} {\n        std::cout <<  std::source_location::current()\n          .function_name() << \" from: \" << &a << \" to: \" <<\n            this << '\\n';\n    }\n    ~Mean() noexcept {\n        std::cout <<  std::source_location::current()\n          .function_name() << \" of \" << this << '\\n';\n    }\n    void operator()(const double& val) {\n        std::cout <<  std::source_location::current()\n          .function_name() << \" of \" << this << '\\n';\n        sum += val;\n        ++count;\n    }\nprivate:\n    double sum{};\n    int count{};\n    friend std::ostream& operator<<(std::ostream& os, const\n      Mean& a);\n};\n```", "```cpp\nint main() {\n    Mean calc_mean;\n    std::vector v1{1.0, 2.5, 4.0, 5.5};\n    std::cout << \"Start calculation\\n\";\n    std::for_each(v1.begin(), v1.end(), calc_mean);\n    std::cout << \"Finish calculation\\n\";\n    std::cout << \"The mean value is: \" << calc_mean <<\n      '\\n';\n    return 0;\n}\n```", "```cpp\nMean::Mean() of 0x7ffef7956c50\nStart calculation\nMean::Mean(const Mean&) from: 0x7ffef7956c50 to: 0x7ffef7956ca0\nvoid Mean::operator()(const double&) of 0x7ffef7956ca0\nvoid Mean::operator()(const double&) of 0x7ffef7956ca0\nvoid Mean::operator()(const double&) of 0x7ffef7956ca0\nvoid Mean::operator()(const double&) of 0x7ffef7956ca0\nMean::Mean(Mean&&) from: 0x7ffef7956ca0 to: 0x7ffef7956c90\nMean::~Mean() of 0x7ffef7956c90\nMean::~Mean() of 0x7ffef7956ca0\nFinish calculation\nThe mean value is: nan\nMean::~Mean() of 0x7ffef7956c50\n```", "```cpp\ntemplate< class InputIt, class UnaryFunction >\nconstexpr UnaryFunction for_each( InputIt first, InputIt\n  last, UnaryFunction f );\n```", "```cpp\ncalc_mean = std::for_each(v1.begin(), v1.end(), calc_mean);\n```", "```cpp\nFinish calculation\nThe mean value is: 3.25\n```", "```cpp\nusing VecCIter = std::vector<double>::const_iterator;\nstd::for_each<VecCIter, Mean&>(v1.begin(), v1.end(),\n  calc_mean);\n```", "```cpp\nstd::for_each(v1.begin(), v1.end(), std::ref(calc_mean));\n```", "```cpp\nMean::Mean() of 0x7ffe7415a180\nStart calculation\nvoid Mean::operator()(const double&) of 0x7ffe7415a180\nvoid Mean::operator()(const double&) of 0x7ffe7415a180\nvoid Mean::operator()(const double&) of 0x7ffe7415a180\nvoid Mean::operator()(const double&) of 0x7ffe7415a180\nFinish calculation\nThe mean value is: 3.25\nMean::~Mean() of 0x7ffe7415a180\n```", "```cpp\nauto min_lambda = [](const auto& name) -> void {\n    std::cout << name << \" lambda.\\n\";\n};\nmin_lambda(\"Simple\");\n```", "```cpp\nvoid foo() {\n    double mean{};\n    std::vector v1{1.0, 2.5, 4.0, 5.5};\n    std::string_view text{\"calculating ...\"};\n    std::for_each(v1.begin(), v1.end(),\n                  [&mean, sum{0.0}, count{0}, text](const\n                     double& val) mutable {\n        std::cout << text << '\\n';\n        sum += val;\n        ++count;\n        mean = sum / count;\n    });\n    std::cout << mean << '\\n';\n}\n```", "```cpp\n[&mean, sum{0.0}, count{0}, text](const double& val)\n  mutable { … }\n```", "```cpp\ncalculating ...\ncalculating ...\ncalculating ...\ncalculating ...\n3.25\n```", "```cpp\nauto sum = [](auto a, auto b) {\n    return a*b;\n}\n```", "```cpp\nclass platform_specific_name {\npublic:\n    template<typename T1, typename T2>\n    auto operator()(T1 a, T2 b) const {\n        return a*b;\n    }\n};\n```", "```cpp\nauto sum = []<typename T1, typename T2>(T1 a, T2 b) {\n    return a*b;\n}\n```", "```cpp\nauto div = [](double x, double y) {\n    if (y < 0) { return 0; }\n    return x / y;\n};\n```", "```cpp\nauto div = [](double x, double y) -> double {\n    if (y < 0) { return 0; }\n    return x / y;\n};\n```"]