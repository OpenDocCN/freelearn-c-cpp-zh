["```cpp\nVUID-VkImageViewCreateInfo-imageViewType-04974 ] Object 0: handle = 0xcb3ee80000000007, type = VK_OBJECT_TYPE_IMAGE; | MessageID = 0xc120e150 | vkCreateImageView(): Using pCreateInfo->viewType VK_IMAGE_VIEW_TYPE_2D and the subresourceRange.layerCount VK_REMAINING_ARRAY_LAYERS=(2) and must 1 (try looking into VK_IMAGE_VIEW_TYPE_*_ARRAY). The Vulkan spec states: If viewType is VK_IMAGE_VIEW_TYPE_1D, VK_IMAGE_VIEW_TYPE_2D, or VK_IMAGE_VIEW_TYPE_3D; and subresourceRange.layerCount is VK_REMAINING_ARRAY_LAYERS, then the remaining number of layers must be 1\n```", "```cpp\nVUID-VkImageViewCreateInfo-imageViewType-04974 ] Object 0: handle = 0xcb3ee80000000007, name = Image: Swapchain image 0, type = VK_OBJECT_TYPE_IMAGE; | MessageID = 0xc120e150 | vkCreateImageView(): Using pCreateInfo->viewType VK_IMAGE_VIEW_TYPE_2D and the subresourceRange.layerCount VK_REMAINING_ARRAY_LAYERS=(2) and must 1 (try looking into VK_IMAGE_VIEW_TYPE_*_ARRAY). The Vulkan spec states: If viewType is VK_IMAGE_VIEW_TYPE_1D, VK_IMAGE_VIEW_TYPE_2D, or VK_IMAGE_VIEW_TYPE_3D; and subresourceRange.layerCount is VK_REMAINING_ARRAY_LAYERS, then the remaining number of layers must be 1\n```", "```cpp\nVkInstance instance_ = VK_NULL_HANDLE;\nstd::vector<const char *> instanceExtensions = {\n  VK_EXT_DEBUG_UTILS_EXTENSION_NAME};\nconst VkInstanceCreateInfo instanceInfo = {\n  .sType = VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO,\n  ...\n  .enabledExtensionCount = static_cast<uint32_t>(\n    instanceExtensions.size()),\n  .ppEnabledExtensionNames =\n    instanceExtensions.data(),\n};\nVK_CHECK(vkCreateInstance(&instanceInfo, nullptr,\n                          &instance_));\n```", "```cpp\n    VkDevice device_; // Valid Vulkan device\n    VkObjectType type = VK_OBJECT_TYPE_UNKNOWN;\n    std::string name; // human readable name\n    const VkDebugUtilsObjectNameInfoEXT\n      objectNameInfo = {\n        .sType =\n          VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT,\n        .objectType = type,\n        .objectHandle =\n          reinterpret_cast<uint64_t>(handle),\n        .pObjectName = name.c_str(),\n    };\n    VK_CHECK(vkSetDebugUtilsObjectNameEXT(\n      device_, &objectNameInfo));\n    ```", "```cpp\nVkPhysicalDevice physicalDevice; // Valid Vulkan\n                                 // Physical Device\nconst std::vector<const char *> deviceExtensions =\n  {VK_KHR_SHADER_NON_SEMANTIC_INFO_EXTENSION_NAME};\nconst VkDeviceCreateInfo dci = {\n  .sType = VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO,\n  ...\n  .enabledExtensionCount = static_cast<uint32_t>(\n    deviceExtensions.size()),\n  .ppEnabledExtensionNames = deviceExtensions.data(),\n};\nVK_CHECK(vkCreateDevice(physicalDevice_, &dci,\n  nullptr, &device_));\n```", "```cpp\n    #version 460\n    debugPrintfEXT in your shader code whenever you would like to print values. In the following code snippet, we are printing the value of gl_VertexIndex:\n\n    ```", "```cpp\n\n    ```", "```cpp\n    vec3 position;\n    debugPrintfEXT(\"%2.3v3f\", position);\n    ```", "```cpp\n#version 460\n#extension GL_EXT_debug_printf: enable\nlayout(location = 0) out vec4 outColor;\nvec2 positions[3] = vec2[]( ... );\nvec3 colors[3] = vec3[]( ... );\nvoid main() {\n    gl_Position = vec4(positions[gl_VertexIndex], 0.0, 1.0);\n    debugPrintfEXT(«gl_VertexIndex = %i», gl_VertexIndex);\n    outColor = vec4(colors[gl_VertexIndex], 1.0);\n}\n```", "```cpp\n    typedef VkBool32(\n      VKAPI_PTR\n         PFN_vkDebugUtilsMessengerCallbackEXT)(\n      VkDebugUtilsMessageSeverityFlagBitsEXT\n        messageSeverity,\n      VkDebugUtilsMessageTypeFlagsEXT messageTypes,\n      const VkDebugUtilsMessengerCallbackDataEXT\n         pCallbackData,\n      void *pUserData);\n    ```", "```cpp\n    VkBool32 VKAPI_PTR debugMessengerCallback(\n      VkDebugUtilsMessageSeverityFlagBitsEXT\n        messageSeverity,\n      VkDebugUtilsMessageTypeFlagsEXT messageTypes,\n      const VkDebugUtilsMessengerCallbackDataEXT\n         pCallbackData,\n      void *pUserData) {\n      if (\n        messageSeverity &\n        (VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT)) {\n        LOGE(\"debugMessengerCallback : MessageCode \"\n             \"is %s & Message is %s\",\n             pCallbackData->pMessageIdName,\n             pCallbackData->pMessage);\n    #if defined(_WIN32)\n        __debugbreak();\n    #else\n        raise(SIGTRAP);\n    #endif\n      } else if (\n        messageSeverity &\n        (VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT)) {\n        LOGW(\"debugMessengerCallback : MessageCode \"\n             \"is %s & Message is %s\",\n             pCallbackData->pMessageIdName,\n             pCallbackData->pMessage);\n      } else {\n        LOGI(\"debugMessengerCallback : MessageCode \"\n             \"is %s & Message is %s\",\n             pCallbackData->pMessageIdName,\n             pCallbackData->pMessage);\n      }\n      return VK_FALSE;\n    }\n    ```", "```cpp\n    VkInstance instance; // Valid Vulkan Instance\n    VkDebugUtilsMessengerEXT messenger =\n      VK_NULL_HANDLE;\n    const VkDebugUtilsMessengerCreateInfoEXT messengerInfo = {\n      .sType =\n        VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT,\n      .flags = 0,\n      .messageSeverity =\n        VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT |\n        VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT |\n        VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT |\n        VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT,\n      .messageType =\n        VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT |\n        VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT,\n      .pfnUserCallback = &debugMessengerCallback,\n      .pUserData = nullptr,\n    };\n    VK_CHECK(vkCreateDebugUtilsMessengerEXT(\n      instance, &messengerInfo, nullptr, &messenger));\n    ```", "```cpp\n    vkDestroyDebugUtilsMessengerEXT(instance_,\n                                    messenger_,\n                                    nullptr);\n    ```", "```cpp\n    typedef struct VkLayerSettingEXT {\n      const char *pLayerName;\n      const char *pSettingName;\n      VkLayerSettingTypeEXT type;\n      uint32_t valueCount;\n      const void *pValues;\n    } VkLayerSettingEXT;\n    ```", "```cpp\n    const std::string layer_name =\n      \"VK_LAYER_KHRONOS_validation\";\n    ```", "```cpp\n    const std::array<const char *, 1>\n      setting_debug_action = {\"VK_DBG_LAYER_ACTION_BREAK\"};\n    const std::array<const char *, 1>\n      setting_gpu_based_action = {\n        \"GPU_BASED_DEBUG_PRINTF\"};\n    const std::array<VkBool32, 1>\n      setting_printf_to_stdout = {VK_TRUE};\n    ```", "```cpp\n    const array<VkLayerSettingEXT, 3> settings = {\n      VkLayerSettingEXT{\n        .pLayerName = layer_name.c_str(),\n        .pSettingName = \"debug_action\",\n        .type = VK_LAYER_SETTING_TYPE_STRING_EXT,\n        .valueCount = 1,\n        .pValues = setting_debug_action.data(),\n      },\n      VkLayerSettingEXT{\n        .pLayerName = layer_name.c_str(),\n        .pSettingName = \"validate_gpu_based\",\n        .type = VK_LAYER_SETTING_TYPE_STRING_EXT,\n        .valueCount = 1,\n        .pValues = setting_gpu_based_action.data(),\n      },\n      VkLayerSettingEXT{\n        .pLayerName = layer_name.c_str(),\n        .pSettingName = \"printf_to_stdout\",\n        .type = VK_LAYER_SETTING_TYPE_BOOL32_EXT,\n        .valueCount = 1,\n        .pValues = setting_printf_to_stdout.data(),\n      },\n    };\n    ```", "```cpp\n    const VkLayerSettingsCreateInfoEXT\n      layer_settings_ci = {\n        .sType =\n          VK_STRUCTURE_TYPE_LAYER_SETTINGS_CREATE_INFO_EXT,\n        .pNext = nullptr,\n        .settingCount =\n          static_cast<uint32_t>(settings.size()),\n        .pSettings = settings.data(),\n    };\n    ```", "```cpp\n    const VkInstanceCreateInfo instanceInfo = {\n      .sType = VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO,\n      .pNext = &layer_settings_ci,\n      ...\n    };\n    VK_CHECK(vkCreateInstance(&instanceInfo, nullptr,\n                              &instance_));\n    ```", "```cpp\nValidation Information: [ WARNING-DEBUG-PRINTF ] | MessageID = 0x76589099 | vkQueueSubmit():  gl_VertexIndex = 1\n```", "```cpp\nValidation Information: [ WARNING-DEBUG-PRINTF ] Object 0: handle = 0x26e6bf17bd0, type = VK_OBJECT_TYPE_QUEUE; | MessageID = 0x76589099 | vkQueueSubmit():  Command buffer (Command buffer:  0)(0x26e6c6613b0). Draw Index 0\\. Pipeline (Graphics pipeline: )(0x26e78d000d0). Shader Module (Shader Module: )(0x26e73b68450). Shader Instruction Index = 92.  gl_VertexIndex = 1 Debug shader printf message generated at line 21.\n21:     outColor = vec4(colors[gl_VertexIndex], 1.0);\n```", "```cpp\n    #include <tracy/Tracy.hpp>\n    #include <tracy/TracyVulkan.hpp>\n    ```", "```cpp\n    VkPhysicalDevice physicalDevice;\n    VkDevice device;\n    int graphicsQueueIndex;\n    VkCommandBuffer commandBuffer;\n    #if defined(VK_EXT_calibrated_timestamps)\n    TracyVkCtx tracyCtx_ = TracyVkContextCalibrated(\n      physicalDevice, device, graphicsQueueIndex,\n      commandBuffer,\n      vkGetPhysicalDeviceCalibrateableTimeDomainsKHR,\n      vkGetCalibratedTimestampsKHR);\n    #else\n    TracyVkCtx tracyCtx_ = TracyVkContext(\n      physicalDevice, device, graphicsQueueIndex,\n      commandBuffer);\n    #endif\n    ```", "```cpp\n    TracyVkZone(tracyCtx_, commandBuffer, \"Model upload\");\n    ```", "```cpp\n    TracyVkCollect(tracyCtx_, commandBuffer);\n    ```", "```cpp\n    TracyVkDestroy(tracyCtx_);\n    ```", "```cpp\n    -DTRACY_ENABLE=1\n    ```"]