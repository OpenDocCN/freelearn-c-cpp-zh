["```cpp\ngit clone https://github.com/codeplea/Hands-On-Network-Programming-with-C\ncd Hands-On-Network-Programming-with-C/chap10\n```", "```cpp\n/*chap10.h*/\n\n#if defined(_WIN32)\n#ifndef _WIN32_WINNT\n#define _WIN32_WINNT 0x0600\n#endif\n#include <winsock2.h>\n#include <ws2tcpip.h>\n#pragma comment(lib, \"ws2_32.lib\")\n\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <netdb.h>\n#include <unistd.h>\n#include <errno.h>\n\n#endif\n```", "```cpp\n/*chap10.h continued*/\n\n#if defined(_WIN32)\n#define ISVALIDSOCKET(s) ((s) != INVALID_SOCKET)\n#define CLOSESOCKET(s) closesocket(s)\n#define GETSOCKETERRNO() (WSAGetLastError())\n\n#else\n#define ISVALIDSOCKET(s) ((s) >= 0)\n#define CLOSESOCKET(s) close(s)\n#define SOCKET int\n#define GETSOCKETERRNO() (errno)\n#endif\n```", "```cpp\n/*chap10.h continued*/\n\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <time.h>\n\n#include <openssl/crypto.h>\n#include <openssl/x509.h>\n#include <openssl/pem.h>\n#include <openssl/ssl.h>\n#include <openssl/err.h>\n```", "```cpp\nopenssl req -x509 -newkey rsa:2048 -nodes -sha256 -keyout key.pem \\\n-out cert.pem -days 365\n```", "```cpp\nopenssl x509 -text -noout -in cert.pem\n```", "```cpp\nopenssl x509 -text -noout -in cert.pem | unix2dos\n```", "```cpp\nSSL_library_init();\nOpenSSL_add_all_algorithms();\nSSL_load_error_strings();\n```", "```cpp\nSSL_CTX *ctx = SSL_CTX_new(TLS_server_method());\nif (!ctx) {\n    fprintf(stderr, \"SSL_CTX_new() failed.\\n\");\n    return 1;\n}\n```", "```cpp\nif (!SSL_CTX_use_certificate_file(ctx, \"cert.pem\" , SSL_FILETYPE_PEM)\n|| !SSL_CTX_use_PrivateKey_file(ctx, \"key.pem\", SSL_FILETYPE_PEM)) {\n    fprintf(stderr, \"SSL_CTX_use_certificate_file() failed.\\n\");\n    ERR_print_errors_fp(stderr);\n    return 1;\n}\n```", "```cpp\nSSL *ssl = SSL_new(ctx);\nif (!ctx) {\n    fprintf(stderr, \"SSL_new() failed.\\n\");\n    return 1;\n}\n```", "```cpp\nSSL_set_fd(ssl, socket_client);\nif (SSL_accept(ssl) <= 0) {\n    fprintf(stderr, \"SSL_accept() failed.\\n\");\n    ERR_print_errors_fp(stderr);\n    return 1;\n}\n\nprintf (\"SSL connection using %s\\n\", SSL_get_cipher(ssl));\n```", "```cpp\nSSL_shutdown(ssl);\nCLOSESOCKET(socket_client);\nSSL_free(ssl);\n```", "```cpp\nSSL_CTX_free(ctx);\n```", "```cpp\n/*tls_time_server.c*/\n\n#include \"chap10.h\"\n\nint main() {\n\n#if defined(_WIN32)\n    WSADATA d;\n    if (WSAStartup(MAKEWORD(2, 2), &d)) {\n        fprintf(stderr, \"Failed to initialize.\\n\");\n        return 1;\n    }\n#endif\n```", "```cpp\n/*tls_time_server.c continued*/\n\n    SSL_library_init();\n    OpenSSL_add_all_algorithms();\n    SSL_load_error_strings();\n```", "```cpp\n/*tls_time_server.c continued*/\n\n    SSL_CTX *ctx = SSL_CTX_new(TLS_server_method());\n    if (!ctx) {\n        fprintf(stderr, \"SSL_CTX_new() failed.\\n\");\n        return 1;\n    }\n```", "```cpp\n/*tls_time_server.c continued*/\n\n    if (!SSL_CTX_use_certificate_file(ctx, \"cert.pem\" , SSL_FILETYPE_PEM)\n    || !SSL_CTX_use_PrivateKey_file(ctx, \"key.pem\", SSL_FILETYPE_PEM)) {\n        fprintf(stderr, \"SSL_CTX_use_certificate_file() failed.\\n\");\n        ERR_print_errors_fp(stderr);\n        return 1;\n    }\n```", "```cpp\n/*tls_time_server.c continued*/\n\n    printf(\"Configuring local address...\\n\");\n    struct addrinfo hints;\n    memset(&hints, 0, sizeof(hints));\n    hints.ai_family = AF_INET;\n    hints.ai_socktype = SOCK_STREAM;\n    hints.ai_flags = AI_PASSIVE;\n\n    struct addrinfo *bind_address;\n    getaddrinfo(0, \"8080\", &hints, &bind_address);\n\n    printf(\"Creating socket...\\n\");\n    SOCKET socket_listen;\n    socket_listen = socket(bind_address->ai_family,\n            bind_address->ai_socktype, bind_address->ai_protocol);\n    if (!ISVALIDSOCKET(socket_listen)) {\n        fprintf(stderr, \"socket() failed. (%d)\\n\", GETSOCKETERRNO());\n        return 1;\n    }\n```", "```cpp\n  /*tls_time_server.c continued*/\n\n    printf(\"Binding socket to local address...\\n\");\n    if (bind(socket_listen,\n                bind_address->ai_addr, bind_address->ai_addrlen)) {\n        fprintf(stderr, \"bind() failed. (%d)\\n\", GETSOCKETERRNO());\n        return 1;\n    }\n    freeaddrinfo(bind_address);\n\n    printf(\"Listening...\\n\");\n    if (listen(socket_listen, 10) < 0) {\n        fprintf(stderr, \"listen() failed. (%d)\\n\", GETSOCKETERRNO());\n        return 1;\n    }\n```", "```cpp\n/*tls_time_server.c continued*/\n\n while (1) {\n\n        printf(\"Waiting for connection...\\n\");\n        struct sockaddr_storage client_address;\n        socklen_t client_len = sizeof(client_address);\n        SOCKET socket_client = accept(socket_listen,\n                (struct sockaddr*) &client_address, &client_len);\n        if (!ISVALIDSOCKET(socket_client)) {\n            fprintf(stderr, \"accept() failed. (%d)\\n\", GETSOCKETERRNO());\n            return 1;\n        }\n```", "```cpp\n/*tls_time_server.c continued*/\n\n        printf(\"Client is connected... \");\n        char address_buffer[100];\n        getnameinfo((struct sockaddr*)&client_address,\n                client_len, address_buffer, sizeof(address_buffer), 0, 0,\n                NI_NUMERICHOST);\n        printf(\"%s\\n\", address_buffer);\n```", "```cpp\n/*tls_time_server.c continued*/\n\n        SSL *ssl = SSL_new(ctx);\n        if (!ctx) {\n            fprintf(stderr, \"SSL_new() failed.\\n\");\n            return 1;\n        }\n```", "```cpp\n/*tls_time_server.c continued*/\n\n        SSL_set_fd(ssl, socket_client);\n        if (SSL_accept(ssl) <= 0) {\n            fprintf(stderr, \"SSL_accept() failed.\\n\");\n            ERR_print_errors_fp(stderr);\n\n            SSL_shutdown(ssl);\n            CLOSESOCKET(socket_client);\n            SSL_free(ssl);\n\n            continue;\n        }\n\n        printf (\"SSL connection using %s\\n\", SSL_get_cipher(ssl));\n```", "```cpp\n/*tls_time_server.c continued*/\n\n        printf(\"Reading request...\\n\");\n        char request[1024];\n        int bytes_received = SSL_read(ssl, request, 1024);\n        printf(\"Received %d bytes.\\n\", bytes_received);\n```", "```cpp\n/*tls_time_server.c continued*/\n\n        printf(\"Sending response...\\n\");\n        const char *response =\n            \"HTTP/1.1 200 OK\\r\\n\"\n            \"Connection: close\\r\\n\"\n            \"Content-Type: text/plain\\r\\n\\r\\n\"\n            \"Local time is: \";\n        int bytes_sent = SSL_write(ssl, response, strlen(response));\n        printf(\"Sent %d of %d bytes.\\n\", bytes_sent, (int)strlen(response));\n```", "```cpp\n/*tls_time_server.c continued*/\n\n        time_t timer;\n        time(&timer);\n        char *time_msg = ctime(&timer);\n        bytes_sent = SSL_write(ssl, time_msg, strlen(time_msg));\n        printf(\"Sent %d of %d bytes.\\n\", bytes_sent, (int)strlen(time_msg));\n```", "```cpp\n/*tls_time_server.c continued*/\n\n        printf(\"Closing connection...\\n\");\n        SSL_shutdown(ssl);\n        CLOSESOCKET(socket_client);\n        SSL_free(ssl);\n    }\n```", "```cpp\n/*tls_time_server.c continued*/\n\n    printf(\"Closing listening socket...\\n\");\n    CLOSESOCKET(socket_listen);\n    SSL_CTX_free(ctx);\n```", "```cpp\n/*tls_time_server.c continued*/\n\n#if defined(_WIN32)\n    WSACleanup();\n#endif\n\n    printf(\"Finished.\\n\");\n\n    return 0;\n}\n```", "```cpp\ngcc tls_time_server.c -o tls_time_server -lssl -lcrypto\n./tls_time_server\n```", "```cpp\ngcc tls_time_server.c -o tls_time_server.exe -lssl -lcrypto -lws2_32\ntls_time_server\n```"]