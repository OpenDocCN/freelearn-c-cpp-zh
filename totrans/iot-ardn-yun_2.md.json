["```cpp\n#include <Bridge.h>\n#include <YunServer.h>\n#include <YunClient.h>\n```", "```cpp\nYunServer server;\n```", "```cpp\n#define CURRENT_SENSOR A0\n#define RELAY_PIN 8\n```", "```cpp\nfloat effective_voltage = 230;\n```", "```cpp\nBridge.begin();\n```", "```cpp\nserver.listenOnLocalhost();\nserver.begin();\n```", "```cpp\nzero_sensor = getSensorValue();\n```", "```cpp\nfor (int i = 0; i < nb_measurements; i++) {\n  sensorValue = analogRead(CURRENT_SENSOR);\n  avgSensor = avgSensor + float(sensorValue);\n}  \navgSensor = avgSensor/float(nb_measurements);\n```", "```cpp\nreturn avgSensor;\n```", "```cpp\nYunClient client = server.accept();\n```", "```cpp\nif (client) {\n  // Process request\n  process(client);\n\n  // Close connection and free resources.\n  client.stop();\n}\n```", "```cpp\nfloat sensor_value = getSensorValue();\n```", "```cpp\namplitude_current=(float)(sensor_value-zero_sensor)/1024*5/185*1000000;\n```", "```cpp\neffective_value=amplitude_current/1.414;\n```", "```cpp\nabs(effective_value*effective_voltage/1000);\n```", "```cpp\nSensor value: 493.05\n\n```", "```cpp\nSensor value: 492.87\nCurrent amplitude (in mA): \n4.5\nCurrent effective value (in mA)\n3.2\nEffective power (in W): \n0.7\n\n```", "```cpp\nSensor value: 486.52\nCurrent amplitude (in mA): \n-163.1\nCurrent effective value (in mA)\n-115.4\nEffective power (in W): \n26.5\n\n```", "```cpp\n#include \"TembooAccount.h\"\n```", "```cpp\nint server_poll_time = 50;\nint power_measurement_delay = 10000;\nint power_measurement_cycles_max = power_measurement_delay/server_poll_time;\n```", "```cpp\nconst String GOOGLE_USERNAME = \"yourGoogleUsername\";\nconst String GOOGLE_PASSWORD = \"yourGooglePass\";\nconst String SPREADSHEET_TITLE = \"Power\";\n```", "```cpp\ntime = millis();\nif (!date.running())  {\n  date.begin(\"date\");\n  date.addParameter(\"+%D-%T\");\n  date.run();\n}\n```", "```cpp\nif (power_measurement_cycles > power_measurement_cycles_max)\n```", "```cpp\nfloat sensor_value = getSensorValue();\n```", "```cpp\nmeasurements_interval = millis() - last_measurement;\nlast_measurement = millis();\n```", "```cpp\n// Convert to current\namplitude_current=(float)(sensor_value-zero_sensor)/1024*5/185*1000000;\neffective_value=amplitude_current/1.414;\n\n// Calculate power\n   float effective_power = abs(effective_value * effective_voltage/1000);\n```", "```cpp\nrunAppendRow(measurements_interval,effective_power);\npower_measurement_cycles = 0;\n```", "```cpp\nTembooChoreo AppendRowChoreo;\n```", "```cpp\nAppendRowChoreo.begin();\n```", "```cpp\nAppendRowChoreo.addInput(\"Username\", GOOGLE_USERNAME);\n```", "```cpp\ndata = data + timeString + \",\" + String(interval) + \",\" + String(effectiveValue);\n```", "```cpp\nAppendRowChoreo.run();\n```", "```cpp\ndelay(server_poll_time);\npower_measurement_cycles++; \n```", "```cpp\n<script src=\"img/jquery-2.0.3.min.js\"></script>\n<script src=\"img/script.js\"></script>\n```", "```cpp\n<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\">\n```", "```cpp\n<input type=\"button\" id=\"on\" class=\"commandButton\" value=\"On\" onClick=\"relayOn()\"/>\n```", "```cpp\n#relay {\n  text-align: center;\n}\n```", "```cpp\n.commandButton {\n  background-color: orange;\n  border: 1px solid black; \n  font-size: 40px;\n  cursor: pointer;\n  border-radius: 10px;\n  width: 300px;\n  height: 100px;\n}\n```", "```cpp\n@media screen and (max-device-width: 400px) {\n  .commandButton {\n    width: 100%;\n    height: 200px;\n    border: 2px solid black; \n    font-size: 80px;\n    margin-bottom: 50px;\n       text-align: center;\n       background-color: orange;\n       }\n}\n```", "```cpp\nfunction relayOn(){\n  $.get( \"update_state.php\", { command: \"1\"} );\n}\n```", "```cpp\n$service_url = 'http://myarduinoyun.local/arduino/digital/8/' . $_GET[\"command\"];\n```", "```cpp\n$curl = curl_init($service_url);\n```", "```cpp\ncurl_setopt($curl, CURLOPT_IPRESOLVE, CURL_IPRESOLVE_V4 ); \n$curl_response = curl_exec($curl);\ncurl_close($curl);\n```"]