["```cpp\n#include <string.h>\nint main(int argc, char** argv) {\n  char str[10];\n  strcpy(str, \"akjsdhkhqiueryo34928739r27yeiwuyfiusdciuti7twe79ye\");\n  return 0;\n}\n```", "```cpp\n#include <stdio.h>\nint main(int argc, char** argv) {\n  char arr[4];\n  arr[0] = 'A';\n  arr[1] = 'B';\n  arr[2] = 'C';\n  arr[3] = 'D';\n  return 0;\n}\n```", "```cpp\n$ gcc -g ExtremeC_examples_chapter5_1.c -o ex5_1_dbg.out\n$\n```", "```cpp\n$ gcc ExtremeC_examples_chapter2_10.c -o ex5_1.out\n$ ls -al ex5_1.out\n-rwxrwxr-x 1 kamranamini kamranamini 8640 jul 24 13:55 ex5_1.out\n$ gcc -g ExtremeC_examples_chapter2_10.c -o ex5_1_dbg.out\n$ ls -al ex5_1.out\n-rwxrwxr-x 1 kamranamini kamranamini 9864 jul 24 13:56 ex5_1_dbg.out\n$\n```", "```cpp\n$ gdb ex5_1_dbg.out\n```", "```cpp\n$ gdb ex5_1_dbg.out\nGNU gdb (Ubuntu 7.11.1-0ubuntu1~16.5) 7.11.1\nCopyright (C) 2016 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later http://gnu.org/licenses/gpl.html\n...\nReading symbols from ex5_1_dbg.out...done.\n(gdb)\n```", "```cpp\n...\nReading symbols from ex5_1_dbg.out...done.\n(gdb) run\nStarting program: .../extreme_c/5.1/ex5_1_dbg.out\n[Inferior 1 (process 9742) exited normally]\n(gdb)\n```", "```cpp\n(gdb) break main\nBreakpoint 1 at 0x400555: file ExtremeC_examples_chapter5_1.c, line 4.\n(gdb)\n```", "```cpp\n(gdb) r\nStarting program: .../extreme_c/5.1/ex5_1_dbg.out\nBreakpoint 1, main (argc=1, argv=0x7fffffffcbd8) at ExtremeC_examples_chapter5_1.c:3\n3       int main(int argc, char** argv) {\n(gdb)\n```", "```cpp\n(gdb) n\n5         arr[0] = 'A';\n(gdb) n\n6         arr[1] = 'B';\n(gdb) next\n7        arr[2] = 'C';\n(gdb) next\n8        arr[3] = 'D';\n(gdb) next\n9        return 0;\n(gdb)\n```", "```cpp\n(gdb) print arr\n$1 = \"ABCD\"\n(gdb)\n```", "```cpp\n(gdb) x/4b arr\n0x7fffffffcae0: 0x41    0x42    0x43    0x44\n(gdb) x/8b arr\n0x7fffffffcae0: 0x41    0x42    0x43    0x44    0xff    0x7f    0x00    0x00\n(gdb)\n```", "```cpp\n(gdb) x/4b arr\n0x7fffffffcae0: 0x41    0x42    0x43    0x44\n(gdb) set arr[1] = 'F'\n(gdb) x/4b arr\n0x7fffffffcae0: 0x41    0x46    0x43    0x44\n(gdb) print arr\n$2 = \"AFCD\"\n(gdb)\n```", "```cpp\n(gdb) x/20x arr\n0x7fffffffcae0: 0x41    0x42    0x43    0x44    0xff    0x7f    0x00    0x00\n0x7fffffffcae8: 0x00    0x96    0xea    0x5d    0xf0    0x31    0xea    0x73\n0x7fffffffcaf0: 0x90    0x05    0x40    0x00\n(gdb) set *(0x7fffffffcaed) = 0xff\n(gdb) x/20x arr\n0x7fffffffcae0: 0x41    0x42    0x43    0x44    0xff    0x7f    0x00    0x00\n0x7fffffffcae8: 0x00    0x96    0xea    0x5d    0xf0    0xff    0x00    0x00\n0x7fffffffcaf0: 0x00    0x05    0x40    0x00\n(gdb)\n```", "```cpp\n(gdb) c\nContinuing.\n*** stack smashing detected ***: .../extreme_c/5.1/ex5_1_dbg.out terminated\nProgram received signal SIGABRT, Aborted.\n0x00007ffff7a42428 in __GI_raise (sig=sig@entry=6) at ../sysdeps/Unix/sysv/linux/raise.c:54\n54      ../sysdeps/Unix/sysv/linux/raise.c: No such file or directory.\n(gdb)\n```", "```cpp\nint main(int argc, char** argv) {\n  char str[10];\n  strcpy(str, argv[1]);\n  printf(\"Hello %s!\\n\", str);\n}\n```", "```cpp\nint main(int argc, char** argv) {\n  int a;\n  ...\n  return 0;\n}\n```", "```cpp\nint* get_integer() {\n  int var = 10;\n  return &var;\n}\nint main(int argc, char** argv) {\n  int* ptr = get_integer();\n  *ptr = 5;\n  return 0;\n}\n```", "```cpp\n$ gcc ExtremeC_examples_chapter5_2.c -o ex5_2.out\nExtremeC_examples_chapter5_2.c: In function 'get_integer':\nExtremeC_examples_chapter5_2.c:3:11: warning: function returns address of local variable [-Wreturn-local-addr]\n   return &var;\n          ^~~~\n$\n```", "```cpp\n$ ./ex5_2.out\nSegmentation fault (core dumped)\n$\n```", "```cpp\n$ gcc -g ExtremeC_examples_chapter5_2.c -o ex5_2_dbg.out\nExtremeC_examples_chapter5_2.c: In function 'get_integer':\nExtremeC_examples_chapter5_2.c:3:11: warning: function returns address of local variable [-Wreturn-local-addr]\n   return &var;\n          ^~~~\n$ gdb ex5_2_dbg.out\nGNU gdb (Ubuntu 8.1-0ubuntu3) 8.1.0.20180409-git\n...\nReading symbols from ex5_2_dbg.out...done.\n(gdb) run\nStarting program: .../extreme_c/5.2/ex5_2_dbg.out\nProgram received signal SIGSEGV, Segmentation fault.\n0x00005555555546c4 in main (argc=1, argv=0x7fffffffdf88) at ExtremeC_examples_chapter5_2.c:8\n8    *ptr = 5;\n(gdb) quit\n$\n```", "```cpp\n#include <stdio.h>  // For printf function\n#include <stdlib.h> // For C library's heap memory functions\nvoid print_mem_maps() {\n#ifdef __linux__\n  FILE* fd = fopen(\"/proc/self/maps\", \"r\");\n  if (!fd) {\n    printf(\"Could not open maps file.\\n\");\n    exit(1);\n  }\n  char line[1024];\n  while (!feof(fd)) {\n    fgets(line, 1024, fd);\n    printf(\"> %s\", line);\n  }\n  fclose(fd);\n#endif\n}\nint main(int argc, char** argv) {\n  // Allocate 10 bytes without initialization\n  char* ptr1 = (char*)malloc(10 * sizeof(char));\n  printf(\"Address of ptr1: %p\\n\", (void*)&ptr1);\n  printf(\"Memory allocated by malloc at %p: \", (void*)ptr1);\n  for (int i = 0; i < 10; i++) {\n    printf(\"0x%02x \", (unsigned char)ptr1[i]);\n  }\n  printf(\"\\n\");\n  // Allocation 10 bytes all initialized to zero\n  char* ptr2 = (char*)calloc(10, sizeof(char));\n  printf(\"Address of ptr2: %p\\n\", (void*)&ptr2);\n  printf(\"Memory allocated by calloc at %p: \", (void*)ptr2);\n  for (int i = 0; i < 10; i++) {\n    printf(\"0x%02x \", (unsigned char)ptr2[i]);\n  }\n  printf(\"\\n\");\n  print_mem_maps();\n  free(ptr1);\n  free(ptr2);\n  return 0;\n}\n```", "```cpp\n$ gcc ExtremeC_examples_chapter5_3.c -o ex5_3.out\n$ ./ex5_3.out\nAddress of ptr1: 0x7ffe0ad75c38\nMemory allocated by malloc at 0x564c03977260: 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 \nAddress of ptr2: 0x7ffe0ad75c40\nMemory allocated by calloc at 0x564c03977690: 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 \n> 564c01978000-564c01979000 r-xp 00000000 08:01 5898436                    /home/kamranamini/extreme_c/5.3/ex5_3.out\n> 564c01b79000-564c01b7a000 r--p 00001000 08:01 5898436                    /home/kamranamini/extreme_c/5.3/ex5_3.out\n> 564c01b7a000-564c01b7b000 rw-p 00002000 08:01 5898436                    /home/kamranamini/extreme_c/5.3/ex5_3.out\n> 564c03977000-564c03998000 rw-p 00000000 00:00 0           [heap]\n> 7f31978ec000-7f3197ad3000 r-xp 00000000 08:01 5247803     /lib/x86_64-linux-gnu/libc-2.27.so\n...\n> 7f3197eef000-7f3197ef1000 rw-p 00000000 00:00 0 \n> 7f3197f04000-7f3197f05000 r--p 00027000 08:01 5247775     /lib/x86_64-linux-gnu/ld-2.27.so\n> 7f3197f05000-7f3197f06000 rw-p 00028000 08:01 5247775     /lib/x86_64-linux-gnu/ld-2.27.so\n> 7f3197f06000-7f3197f07000 rw-p 00000000 00:00 0 \n> 7ffe0ad57000-7ffe0ad78000 rw-p 00000000 00:00 0           [stack]\n> 7ffe0adc2000-7ffe0adc5000 r--p 00000000 00:00 0           [vvar]\n> 7ffe0adc5000-7ffe0adc7000 r-xp 00000000 00:00 0           [vdso]\n> ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0   [vsyscall]\n$\n```", "```cpp\n$ clang ExtremeC_examples_chapter5_3.c -o ex5_3.out\n$ ./ ex5_3.out\nAddress of ptr1: 0x7ffee66b2888\nMemory allocated by malloc at 0x7fc628c00370: 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x80 0x00 0x00\nAddress of ptr2: 0x7ffee66b2878\nMemory allocated by calloc at 0x7fc628c02740: 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00\n$\n```", "```cpp\n#include <stdlib.h> // For malloc\n#include <string.h> // For memset\nint main(int argc, char** argv) {\n  char* ptr = (char*)malloc(16 * sizeof(char));\n  memset(ptr, 0, 16 * sizeof(char));    // Fill with 0\n  memset(ptr, 0xff, 16 * sizeof(char)); // Fill with 0xff\n  ...\n  free(ptr);\n  return 0;\n}\n```", "```cpp\nint main(int argc, char** argv) {\n  char* ptr = (char*)malloc(16 * sizeof(char));\n  ...\n  ptr = (char*)realloc(32 * sizeof(char));\n  ...\n  free(ptr);\n  return 0;\n}\n```", "```cpp\n#include <stdlib.h> // For heap memory functions\nint main(int argc, char** argv) {\n  char* ptr = (char*)malloc(16 * sizeof(char));\n  return 0;\n}\n```", "```cpp\n$ gcc -g ExtremeC_examples_chapter5_4.c -o ex5_4.out\n$ valgrind ./ex5_4.out\n==12022== Memcheck, a memory error detector\n==12022== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==12022== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info\n==12022== Command: ./ex5_4.out\n==12022== \n==12022== \n==12022== HEAP SUMMARY:\n==12022==     in use at exit: 16 bytes in 1 blocks\n==12022==   total heap usage: 1 allocs, 0 frees, 16 bytes allocated\n==12022== \n==12022== LEAK SUMMARY:\n==12022==    definitely lost: 16 bytes in 1 blocks\n==12022==    indirectly lost: 0 bytes in 0 blocks\n==12022==      possibly lost: 0 bytes in 0 blocks\n==12022==    still reachable: 0 bytes in 0 blocks\n==12022==         suppressed: 0 bytes in 0 blocks\n==12022== Rerun with --leak-chck=full to see details of leaked memory\n==12022== \n==12022== For counts of detected and suppressed errors, rerun with: -v\n==12022== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n$\n```", "```cpp\n$ gcc -g ExtremeC_examples_chapter5_4.c -o ex5_4.out\n$ valgrind --leak-check=full ./ex5_4.out\n==12144== Memcheck, a memory error detector\n==12144== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==12144== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info\n==12144== Command: ./ex5_4.out\n==12144== \n==12144== \n==12144== HEAP SUMMARY:\n==12144==     in use at exit: 16 bytes in 1 blocks\n==12144==   total heap usage: 1 allocs, 0 frees, 16 bytes allocated\n==12144== \n==12144== 16 bytes in 1 blocks are definitely lost in loss record 1 of 1\n==12144==    at 0x4C2FB0F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\n==12144==    by 0x108662: main (ExtremeC_examples_chapter5_4.c:4)\n==12144== \n==12144== LEAK SUMMARY:\n==12144==    definitely lost: 16 bytes in 1 blocks\n==12144==    indirectly lost: 0 bytes in 0 blocks\n==12144==      possibly lost: 0 bytes in 0 blocks\n==12144==    still reachable: 0 bytes in 0 blocks\n==12144==         suppressed: 0 bytes in 0 blocks\n==12144== \n==12144== For counts of detected and suppressed errors, rerun with : -v\n==12144== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)\n$\n```", "```cpp\n#include <stdlib.h> // For heap memory functions\nint main(int argc, char** argv) {\n  char* ptr = (char*)malloc(16 * sizeof(char));\n  free(ptr);\n  return 0;\n}\n```", "```cpp\n$ gcc -g ExtremeC_examples_chapter5_4.c -o ex5_4.out\n$ valgrind --leak-check=full ./ex5_4.out\n==12175== Memcheck, a memory error detector\n==12175== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==12175== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info\n==12175== Command: ./ex5_4.out\n==12175== \n==12175== \n==12175== HEAP SUMMARY:\n==12175==     in use at exit: 0 bytes in 0 blocks\n==12175==   total heap usage: 1 allocs, 1 frees, 16 bytes allocated\n==12175== \n==12175== All heap blocks were freed -- no leaks are possible\n==12175== \n==12175== For counts of detected and suppressed errors, rerun with  -v\n==12175== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n$\n```", "```cpp\n#include <stdio.h> // For printf function\n#include <stdlib.h> // For heap memory functions\n#define QUEUE_MAX_SIZE 100\ntypedef struct {\n  int front;\n  int rear;\n  double* arr;\n} queue_t;\nvoid init(queue_t* q) {\n  q->front = q->rear = 0;\n  // The heap memory block allocated here is owned\n  // by the queue object.\n  q->arr = (double*)malloc(QUEUE_MAX_SIZE * sizeof(double));\n}\nvoid destroy(queue_t* q) {\n  free(q->arr);\n}\nint size(queue_t* q) {\n  return q->rear - q->front;\n}\nvoid enqueue(queue_t* q, double item) {\n  q->arr[q->rear] = item;\n  q->rear++;\n}\ndouble dequeue(queue_t* q) {\n  double item = q->arr[q->front];\n  q->front++;\n  return item;\n}\nint main(int argc, char** argv) {\n  // The heap memory block allocated here is owned\n  // by the function main\n  queue_t* q = (queue_t*)malloc(sizeof(queue_t));\n  // Allocate needed memory for the queue object\n  init(q);\n  enqueue(q, 6.5);\n  enqueue(q, 1.3);\n  enqueue(q, 2.4);\n  printf(\"%f\\n\", dequeue(q));\n  printf(\"%f\\n\", dequeue(q));\n  printf(\"%f\\n\", dequeue(q));\n  // Release resources acquired by the queue object\n  destroy(q);\n  // Free the memory allocated for the queue object\n  // acquired by the function main\n  free(q);\n  return 0;\n}\n```", "```cpp\n#include <stdio.h>  // For printf function\n#include <stdlib.h> // For heap memory functions\n#include <string.h> // For strcmp function\nvoid fill(int* matrix, int rows, int columns) {\n  int counter = 1;\n  for (int i = 0; i < rows; i++) {\n    for (int j = 0; j < columns; j++) {\n      *(matrix + i * columns + j) = counter;\n    }\n    counter++;\n  }\n}\nvoid print_matrix(int* matrix, int rows, int columns) {\n  int counter = 1;\n  printf(\"Matrix:\\n\");\n  for (int i = 0; i < rows; i++) {\n    for (int j = 0; j < columns; j++) {\n      printf(\"%d \", *(matrix + i * columns + j));\n    }\n    printf(\"\\n\");\n  }\n}\nvoid print_flat(int* matrix, int rows, int columns) {\n  printf(\"Flat matrix: \");\n  for (int i = 0; i < (rows * columns); i++) {\n    printf(\"%d \", *(matrix + i));\n  }\n  printf(\"\\n\");\n}\nint friendly_sum(int* matrix, int rows, int columns) {\n  int sum = 0;\n  for (int i = 0; i < rows; i++) {\n    for (int j = 0; j < columns; j++) {\n      sum += *(matrix + i * columns + j);\n    }\n  }\n  return sum;\n}\nint not_friendly_sum(int* matrix, int rows, int columns) {\n  int sum = 0;\n  for (int j = 0; j < columns; j++) {\n    for (int i = 0; i < rows; i++) {\n      sum += *(matrix + i * columns + j);\n    }\n  }\n  return sum;\n}\nint main(int argc, char** argv) {\n  if (argc < 4) {\n    printf(\"Usage: %s [print|friendly-sum|not-friendly-sum] \");\n    printf(\"[number-of-rows] [number-of-columns]\\n\", argv[0]);\n    exit(1);\n  }\n  char* operation = argv[1];\n  int rows = atol(argv[2]);\n  int columns = atol(argv[3]);\n  int* matrix = (int*)malloc(rows * columns * sizeof(int));\n  fill(matrix, rows, columns);\n  if (strcmp(operation, \"print\") == 0) {\n    print_matrix(matrix, rows, columns);\n    print_flat(matrix, rows, columns);\n  }\n  else if (strcmp(operation, \"friendly-sum\") == 0) {\n    int sum = friendly_sum(matrix, rows, columns);\n    printf(\"Friendly sum: %d\\n\", sum);\n  }\n  else if (strcmp(operation, \"not-friendly-sum\") == 0) {\n    int sum = not_friendly_sum(matrix, rows, columns);\n    printf(\"Not friendly sum: %d\\n\", sum);\n  }\n  else {\n    printf(\"FATAL: Not supported operation!\\n\");\n    exit(1);\n  }\n  free(matrix);\n  return 0;\n}\n```", "```cpp\n$ gcc ExtremeC_examples_chapter5_6.c -o ex5_6.out\n$ ./ex5_6.out print 2 3\nMatrix:\n1 1 1\n2 2 2\nFlat matrix: 1 1 1 2 2 2\n$\n```", "```cpp\n$ time ./ex5_6.out friendly-sum 20000 20000\nFriendly sum: 1585447424\nreal   0m5.192s\nuser   0m3.142s\nsys    0m1.765s\n$ time ./ex5_6.out not-friendly-sum 20000 20000\nNot friendly sum: 1585447424\nreal   0m15.372s\nuser   0m14.031s\nsys    0m0.791s\n$\n```"]