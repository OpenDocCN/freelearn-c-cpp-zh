- en: Chapter 1. Building a Weather Station Connected to the Cloud
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章：构建连接到云端的气象站
- en: This chapter will introduce you to the powerful features of the Arduino Yún
    microcontroller board. In this chapter, you will learn how to create a simple
    weather station that will send data to the cloud using the features of the web-based
    service **Temboo**. Temboo is not 100 percent free, but you will be able to make
    1000 calls to Temboo per month using their free plan. You will learn how to connect
    sensors that measure temperature, humidity, and light level to your Arduino Yún.
    These sensors will first be separately tested to make sure that the hardware connections
    you made are correct.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将向您介绍Arduino Yún微控制器板的功能。在本章中，您将学习如何创建一个简单的气象站，该气象站将使用基于Web的服务**Temboo**的功能将数据发送到云端。Temboo并非完全免费，但您将能够使用他们的免费计划每月调用Temboo
    1000次。您将学习如何将测量温度、湿度和光照水平的传感器连接到您的Arduino Yún。这些传感器将首先分别进行测试，以确保您所做的硬件连接是正确的。
- en: Then, we are going to use the Temboo Arduino libraries to send these measurements
    to the cloud and to different web services so that they can be accessed remotely
    regardless of where you are in the world. Temboo is a web-based service that allows
    you to connect different web services together and proposes ready-to-use libraries
    for the Arduino Yún.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将使用Temboo Arduino库将这些测量数据发送到云端和不同的Web服务，以便无论您在世界上的哪个地方都可以远程访问。Temboo是一个基于Web的服务，允许您将不同的Web服务连接在一起，并为Arduino
    Yún提供现成的库。
- en: For example, the first thing we are going to do with Temboo is to send the data
    from your measurements to a Google Docs spreadsheet, where they will be logged
    along with the measurement data. Within this spreadsheet, you will be able to
    plot this data right in your web browser and see the data that arrives getting
    stored in your Google Docs account.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们使用Temboo的第一件事是将您的测量数据发送到Google Docs电子表格中，其中它们将与测量数据一起记录。在这个电子表格中，您可以直接在您的网络浏览器中绘制这些数据，并看到存储在您的Google
    Docs账户中的数据。
- en: Then, we will use Temboo again to send an automated e-mail based on the recorded
    data. For example, you would like to send an alert when the temperature drops
    below a certain level in your home, indicating that a heater has to be turned
    on.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将再次使用Temboo根据记录的数据发送自动电子邮件。例如，您可能希望在室内温度降至某个水平以下时发送警报，这表明需要打开加热器。
- en: Finally, we will finish the chapter by using Temboo to post the data at regular
    intervals on a Twitter account, for example, every minute. By doing this, we can
    have a dedicated Twitter account for your home that different members of your
    family can follow to have live information about your home.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将使用Temboo在Twitter账户上定期发布数据，例如每分钟一次。通过这样做，我们可以为您的家庭创建一个专门的Twitter账户，家庭成员可以关注以获取有关您家庭的实时信息。
- en: After completing this chapter, you'll be able to apply what you learned to other
    projects than just weather-related measurements. You can apply what you see in
    this chapter to any project that can measure data, in order to log this data on
    the Web and publish it on Twitter.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本章后，您将能够将您所学的内容应用到其他项目，而不仅仅是与气象相关的测量。您可以将本章中看到的内容应用到任何可以测量数据的项目中，以便在网络上记录这些数据并在Twitter上发布。
- en: 'The Arduino Yún board is shown in the following image:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图片显示了Arduino Yún板：
- en: '![Building a Weather Station Connected to the Cloud](img/8007OS_01_01.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![构建连接到云端的气象站](img/8007OS_01_01.jpg)'
- en: The required hardware and software components
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 所需的硬件和软件组件
- en: Of course, you need to have your Arduino Yún board ready on your desk along
    with a micro USB cable to do the initial programming and testing. Also, we recommend
    that you have a power socket to the micro USB adapter so that you can power on
    your Arduino Yún directly from the wall without having your computer lying around.
    This will be useful at the end of the project, as you will want your Arduino Yún
    board to perform measurements autonomously.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，您需要在桌子上准备好您的Arduino Yún板和一根微型USB线，以便进行初始编程和测试。此外，我们建议您准备一个微型USB适配器电源插座，这样您可以直接从墙上为Arduino
    Yún供电，而不需要电脑在旁边。这在项目结束时将非常有用，因为您希望Arduino Yún板能够自主进行测量。
- en: You will then need the different sensors which will be used to sense data about
    the environment. For this project, we are going to use a DHT11 sensor to measure
    temperature and humidity and a simple photocell to measure light levels. DHT11
    is a very cheap digital temperature and humidity sensor that is widely used with
    the Arduino platform. You can also use a DHT22 sensor, which is more precise,
    as the Arduino library is the same for both sensors. There are several manufacturers
    for these sensors, but you can find them easily, for example, on SparkFun or Adafruit.
    For the photocell, you can use any brand that you wish; it just needs to be a
    component that changes its resistance according to the intensity of the ambient
    light.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你需要不同的传感器，这些传感器将用于感应环境数据。对于这个项目，我们将使用DHT11传感器来测量温度和湿度，以及一个简单的光敏电阻来测量光强度。DHT11是一个非常便宜的数字温度和湿度传感器，广泛用于Arduino平台。你也可以使用DHT22传感器，它更精确，因为Arduino库对这两个传感器都是相同的。这些传感器有几个制造商，但你可以在SparkFun或Adafruit等地方轻松找到它们。对于光敏电阻，你可以使用你想要的任何品牌；只需确保它是一个根据环境光强度改变其电阻的组件。
- en: To make the DHT11 sensor and photocell work, we will need a 4.7k Ohm resistor
    and a 10k Ohm resistor as well. You will also need a small breadboard with at
    least two power rails on the side and some male-male jumper wires to make the
    electrical connections between the different components.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要使DHT11传感器和光敏电阻工作，我们还需要一个4.7k欧姆电阻和一个10k欧姆电阻。你还需要一个至少有两排电源的小型面包板和一些公对公跳线，以便在各个组件之间进行电气连接。
- en: On the software side, you will need the latest beta version of the Arduino IDE,
    which is the only IDE that supports the Arduino Yún board (we used Version 1.5.5
    when doing this project). You will also need the DHT library for the DHT11 sensor,
    which can be downloaded from [https://github.com/adafruit/DHT-sensor-library](https://github.com/adafruit/DHT-sensor-library).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件方面，你需要Arduino IDE的最新测试版，这是唯一支持Arduino Yún板的IDE（我们在做这个项目时使用了版本1.5.5）。你还需要DHT11传感器的DHT库，可以从[https://github.com/adafruit/DHT-sensor-library](https://github.com/adafruit/DHT-sensor-library)下载。
- en: To install the library, simply unzip the files and extract the `DHT` folder
    to your `libraries` folder in your main Arduino folder.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装库，只需解压文件并将`DHT`文件夹提取到你的主Arduino文件夹中的`libraries`文件夹。
- en: Connecting the sensors to the Arduino Yún board
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将传感器连接到Arduino Yún板
- en: Before doing anything related to the Web, we will first make sure that our hardware
    is working correctly. We are going to make the correct hardware connections between
    the different components and write a simple Arduino sketch to test all these sensors
    individually. By doing this, we will ensure that you make all the hardware connections
    correctly, and this will help a lot if you encounter problems in the next sections
    of this chapter that use more complex Arduino sketches.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行任何与网络相关的操作之前，我们首先确保我们的硬件能够正常工作。我们将确保不同组件之间有正确的硬件连接，并编写一个简单的Arduino草图来单独测试所有这些传感器。通过这样做，我们将确保你正确地完成了所有硬件连接，如果在本书下一部分使用更复杂的Arduino草图时遇到问题，这将非常有帮助。
- en: 'The hardware connections required for our project are actually quite simple.
    We have to connect the DHT11 sensor and then the part responsible for the light
    level measurement with the photocell by performing the following steps:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们项目所需的硬件连接实际上非常简单。我们必须通过以下步骤连接DHT11传感器，然后是负责光强度测量的光敏电阻部分：
- en: First, we connect the Arduino Yún board's +5V pin to the red rail on the breadboard
    and the ground pin to the blue rail.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将Arduino Yún板的+5V引脚连接到面包板上的红色电源轨，并将地线引脚连接到蓝色电源轨。
- en: Then, we connect pin number 1 of the DHT11 sensor to the red rail on the breadboard
    and pin number 4 to the blue rail. Also, connect pin number 2 of the sensor to
    pin number 8 of the Arduino Yún board.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将DHT11传感器的1号引脚连接到面包板上的红色电源轨，4号引脚连接到蓝色电源轨。同时，将传感器的2号引脚连接到Arduino Yún板的8号引脚。
- en: To complete the DHT11 sensor connections, clamp the 4.7k Ohm resistor between
    pin numbers 1 and 2 of the sensor.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要完成DHT11传感器的连接，将4.7k欧姆电阻夹在传感器的1号和2号引脚之间。
- en: For the photocell, first place the cell in series with the 10k Ohm resistor
    on the breadboard. This pull-down resistor will ensure that during the operation,
    if there is no light at all, the voltage seen by the Arduino board will be 0V.
    Then, connect the other end of the photocell to the red rail on the breadboard
    and the end of the resistor to the ground. Finally, connect the common pin to
    the Arduino Yún board analog pin A0.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 对于光敏电阻，首先将电阻器串联到面包板上的10k欧姆电阻器。这个下拉电阻器将确保在操作期间，如果没有光线，Arduino板看到的电压将是0V。然后，将光敏电阻的另一端连接到面包板上的红色轨道，并将电阻器的另一端连接到地。最后，将公共引脚连接到Arduino
    Yún板的模拟引脚A0。
- en: 'The following image made using the Fritzing software summarizes the hardware
    connections:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Fritzing软件制作的以下图像总结了硬件连接：
- en: '![Connecting the sensors to the Arduino Yún board](img/8007OS_01_02.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![将传感器连接到Arduino Yún板](img/8007OS_01_02.jpg)'
- en: Now that the hardware connections are done, we will work on testing the sensors
    without uploading anything to the Web. Let's go through the important parts of
    the code.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在硬件连接完成，我们将测试传感器，而不上传任何内容到Web。让我们看一下代码中的重要部分。
- en: 'First, we have to import the library for the DHT11 sensor, as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们必须按照以下方式导入DHT11传感器的库：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Then, we need to declare a couple of variables that will store the measurements,
    as shown in the following code. These variables are declared as floats because
    the DHT sensor library returns float numbers.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要声明几个变量来存储测量值，如下面的代码所示。这些变量被声明为浮点数，因为DHT传感器库返回的是浮点数。
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Also, we can define the sensor pin and sensor type as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们可以按照以下方式定义传感器引脚和传感器类型：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Create the DHT instance as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下方式创建DHT实例：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, in the `setup()` part of the sketch, we need to start the serial connection,
    as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在代码的`setup()`部分，我们需要启动串行连接，如下所示：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next, in order to initialize the DHT sensor, we have the following:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，为了初始化DHT传感器，我们有以下代码：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In the `loop()` part, we are going to perform the different measurements. First,
    we will calculate the temperature and humidity, as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在`loop()`部分，我们将执行不同的测量。首先，我们将计算温度和湿度，如下所示：
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Then, measure the light level, as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，测量光照水平，如下所示：
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Finally, we print all the data on the serial monitor, as shown in the following
    code:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将在串行监视器中打印所有数据，如下面的代码所示：
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Repeat this every 2 seconds, as shown:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 每2秒重复一次，如下所示：
- en: '[PRE9]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The complete sketch for this part can be found at [https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter1/sensors_test](https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter1/sensors_test).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 该部分的完整代码可以在[https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter1/sensors_test](https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter1/sensors_test)找到。
- en: 'Now it''s time to test the sketch and upload it to the Arduino board. Then,
    open the serial monitor and you should have the data that comes from the sensors
    being displayed, as shown in the following screenshot:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候测试代码并将其上传到Arduino板上了。然后，打开串行监视器，您应该会看到来自传感器的数据，如下面的截图所示：
- en: '![Connecting the sensors to the Arduino Yún board](img/8007OS_01_03.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![将传感器连接到Arduino Yún板](img/8007OS_01_03.jpg)'
- en: If you can see the different measurements being displayed as in the previous
    screenshot, it means that you have made the correct hardware connections on your
    breadboard and that you can proceed to the next sections of this chapter.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您可以看到像之前截图那样的不同测量值，这意味着您已经在面包板上正确地完成了硬件连接，并且可以继续本章的下一部分。
- en: If it is not the case, please check all the connections again individually by
    following the instructions in this section. Please make sure that you haven't
    forgotten the 4.7k Ohm resistor with the DHT sensor, as the measurements from
    this sensor won't work without it.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不是这样，请按照本节中的说明逐个检查所有连接。请确保你没有忘记DHT传感器上的4.7k欧姆电阻器，因为没有它，这个传感器的测量值将无法工作。
- en: Tip
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在[http://www.packtpub.com](http://www.packtpub.com)的账户中下载您购买的所有Packt书籍的示例代码文件。如果您在其他地方购买了这本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，以便将文件直接通过电子邮件发送给您。
- en: All the up-to-date code for the four projects of this book can also be found
    at [https://github.com/openhomeautomation/geeky-projects-yun](https://github.com/openhomeautomation/geeky-projects-yun).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 本书四个项目的所有最新代码也可以在 [https://github.com/openhomeautomation/geeky-projects-yun](https://github.com/openhomeautomation/geeky-projects-yun)
    找到。
- en: Creating a Temboo account
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 Temboo 账户
- en: The next step in this project is to create and set up an account on the web
    service Temboo, so you can use the wide range of services provided by Temboo to
    upload data to Google Docs and to use their Gmail and Twitter libraries. This
    account will actually be used in the whole book for the other projects as well.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目的下一步是在网络服务 Temboo 上创建和设置账户，这样您就可以使用 Temboo 提供的广泛服务将数据上传到 Google Docs，并使用他们的
    Gmail 和 Twitter 库。实际上，这个账户将在本书的其余部分的其他项目中也会使用。
- en: To do so, the first step is to simply go to the Temboo website at [http://temboo.com/](http://temboo.com/).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 要这样做，第一步是简单地访问 Temboo 网站 [http://temboo.com/](http://temboo.com/)。
- en: 'On the main page, simply enter your e-mail address to register and click on
    **Sign up**, as shown in the following screenshot:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在主页上，只需输入您的电子邮件地址进行注册，然后点击 **注册**，如下面的截图所示：
- en: '![Creating a Temboo account](img/8007OS_01_04.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![创建 Temboo 账户](img/8007OS_01_04.jpg)'
- en: 'You will then be asked to enter some basic information about your account,
    such as your account name, as shown in the following screenshot:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您将被要求输入一些关于您账户的基本信息，例如您的账户名称，如下面的截图所示：
- en: '![Creating a Temboo account](img/8007OS_01_05.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![创建 Temboo 账户](img/8007OS_01_05.jpg)'
- en: Then, you will be prompted to create your first app. Ensure that you save the
    details of your account, such as the name of your first app and the key that will
    be given to you; we are going to need it for the rest of this book.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您将被提示创建您的第一个应用程序。请确保保存您账户的详细信息，例如您第一个应用程序的名称和将授予您的密钥；我们将在本书的其余部分需要它。
- en: 'In case you need to get these values again or create a new application, you
    can always access this data in the **My Account** section of the Temboo website
    by clicking on the **MANAGE** button below **APPLICATIONS**, just as it is displayed
    in the following screenshot:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要再次获取这些值或创建新的应用程序，您可以通过点击以下截图所示的下方的 **MANAGE** 按钮，在 Temboo 网站的 **我的账户**
    部分始终访问这些数据，就像以下截图所示：
- en: '![Creating a Temboo account](img/8007OS_01_06.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![创建 Temboo 账户](img/8007OS_01_06.jpg)'
- en: We are now all set to start using the Temboo libraries that are made specifically
    for the Arduino Yún board and to upload some data to the cloud.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经准备好开始使用为 Arduino Yún 板专门制作的 Temboo 库，并将一些数据上传到云端。
- en: Sending data to Google Docs and displaying it
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将数据发送到 Google Docs 并显示
- en: In this section, we are going to use our first Temboo library (called a **Choreo**)
    to upload the measurements of the Arduino Yún to the Web and log the data into
    a Google Docs spreadsheet.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用我们的第一个 Temboo 库（称为 **Choreo**）将 Arduino Yún 的测量数据上传到网络，并将数据记录到 Google
    Docs 电子表格中。
- en: First, let's have a look at what a Choreo is and how you can generate the code
    for your Arduino Yún board. If you go to the main Temboo page, you will see that
    you can choose different platforms and languages, such as Arduino, JavaScript,
    or Python. Each of these links will allow you to select a Choreo, which is a dedicated
    library written for the platform you chose and can interface with a given web
    service such as Google Docs.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看看什么是 Choreo 以及您如何为您的 Arduino Yún 板生成代码。如果您访问主 Temboo 页面，您会看到您可以选择不同的平台和语言，例如
    Arduino、JavaScript 或 Python。每个链接都将允许您选择一个 Choreo，这是一个为所选平台编写的专用库，可以与给定的网络服务（如
    Google Docs）接口。
- en: For the Arduino platform, Temboo even offers to generate the entire code for
    you. You can click on the Arduino icon on the Temboo website and then click on
    Arduino Yún; you will get access to a step-by-step interface to generate the code.
    However, as we want to get complete control of our device and write our own code,
    we won't use this feature for this project.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Arduino 平台，Temboo 甚至提供为您生成整个代码的服务。您可以在 Temboo 网站上点击 Arduino 图标，然后点击 Arduino
    Yún；您将获得一个逐步界面的访问权限来生成代码。然而，由于我们想要完全控制我们的设备并编写自己的代码，我们不会在这个项目中使用此功能。
- en: Google Docs is really convenient as it's an online (and free) version of the
    popular Office software from Microsoft. The main difference is that because it's
    all in the cloud, you don't have to store files locally or save them—it's all
    done online. For our project, the advantage is that you can access these files
    remotely from any web browser, even if you are not on your usual computer. You
    just need your Google account name and password and can access all your files.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Google Docs 真的很方便，因为它是由微软流行的 Office 软件的在线（且免费）版本。主要区别在于，因为它全部都在云端，你不需要在本地存储文件或保存它们——所有操作都在线上完成。对于我们项目来说，优势在于你可以从任何网络浏览器远程访问这些文件，即使你不在你常用的电脑上。你只需要你的
    Google 账户名和密码，就可以访问所有文件。
- en: If you don't have a Google account yet, you can create one in less than five
    minutes at [https://drive.google.com/](https://drive.google.com/).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有 Google 账户，你可以在 [https://drive.google.com/](https://drive.google.com/)
    在不到五分钟内创建一个。
- en: This will also create an account for the Gmail service, which we will also use
    later. Please make sure that you have your Google Docs username and password as
    you are going to need them soon.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这也将为 Gmail 服务创建一个账户，我们稍后也会使用它。请确保你有你的 Google Docs 用户名和密码，因为你很快就会需要它们。
- en: Before we start writing any Arduino code, we need to prepare a Google Docs spreadsheet
    that will host the data. Simply create a new one at the root of your Google Docs
    account; you can name it whatever you wish (for example, `Yun`). This is done
    from the main page of Google Docs just by clicking on **Create**.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始编写任何 Arduino 代码之前，我们需要准备一个将托管数据的 Google Docs 电子表格。只需在 Google Docs 账户的根目录下创建一个新的即可；你可以给它取任何你想要的名称（例如，`Yun`）。这可以通过点击
    Google Docs 主页上的 **创建** 来完成。
- en: 'In the spreadsheet, you need to set the name of the columns for the data that
    will be logged; that is, `Time`, `Temperature`, `Humidity`, and `Light level`.
    This is shown in the following screenshot:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在电子表格中，你需要设置将要记录的数据的列名；即，`时间`、`温度`、`湿度`和`光照水平`。这在上面的屏幕截图中有显示：
- en: '![Sending data to Google Docs and displaying it](img/8007OS_01_07.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![将数据发送到 Google Docs 并显示](img/8007OS_01_07.jpg)'
- en: 'Now, let''s start building the Arduino sketch inside the Arduino IDE. We first
    need to import all the necessary libraries, as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们开始在 Arduino IDE 中构建 Arduino 脚本。我们首先需要导入所有必要的库，如下所示：
- en: '[PRE10]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `Bridge` library is something that was introduced for the Arduino Yún board
    and is responsible for making the interface between the Linux machine of the Yún
    and the Atmel processor, where our Arduino sketch will run. With this library,
    it's possible to use the power of the Linux machine right inside the Arduino sketch.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`Bridge` 库是为 Arduino Yún 板引入的，负责在 Yún 的 Linux 机器和 Atmel 处理器之间建立接口，我们的 Arduino
    脚本将在其中运行。有了这个库，我们可以在 Arduino 脚本中直接使用 Linux 机器的强大功能。'
- en: 'The `Process` library will be used to run some programs on the Linux side,
    and the Temboo file will contain all the information that concerns your Temboo
    account. Please go inside this file to enter the information corresponding to
    your own account. This is as shown in the following code:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 将使用 `Process` 库在 Linux 端运行一些程序，而 Temboo 文件将包含所有与你的 Temboo 账户相关的信息。请进入此文件，输入与你自己的账户相对应的信息。这在上面的代码中有所体现：
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that we also included a debug mode in the sketch that you can set to `true`
    if you want some debug output to be printed on the serial monitor. However, for
    an autonomous operation of the board, we suggest that you disable this debugging
    mode to save some memory inside Yún.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们还在这段代码中包含了一个调试模式，如果你想在串行监视器上打印一些调试输出，可以将它设置为 `true`。然而，为了板的自主操作，我们建议你禁用此调试模式以节省
    Yún 内部的内存。
- en: 'In the sketch, we then have to enter the Google Docs information. You need
    to put your Google username and password here along with the name of the spreadsheet
    where you want the data to be logged, as shown in the following code:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在脚本中，我们接下来需要输入 Google Docs 的信息。你需要在这里输入你的 Google 用户名和密码，以及你想要记录数据的电子表格名称，如下面的代码所示：
- en: '[PRE12]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In the `setup()` part of the sketch, we are now starting the bridge between
    the Linux machine and the Atmel microcontroller by executing the following line
    of code:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在脚本的 `setup()` 部分，我们现在通过执行以下代码行来启动 Linux 机器和 Atmel 微控制器之间的桥接：
- en: '[PRE13]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We are also starting a date process so that we can also log the data of when
    each measurement was recorded, as shown in the following code:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还在启动一个日期处理过程，这样我们也可以记录每次测量的数据，如下面的代码所示：
- en: '[PRE14]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The date will be in the format: date of the day followed by the time. The date
    process we are using here is actually a very common utility for Linux, and you
    can look for the documentation of this function on the Web to learn more about
    the different date and time formats that you can use.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 日期的格式将是：日期后跟时间。我们在这里使用的日期处理方法实际上是 Linux 中一个非常常见的实用工具，你可以在网上查找这个函数的文档，了解更多关于你可以使用的不同日期和时间格式。
- en: 'Now, in the `loop()` part of the sketch, we send the measurements continuously
    using the following function:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在草图的 `loop()` 部分中，我们使用以下函数连续发送测量数据：
- en: '[PRE15]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Let''s get into the details of this function. It starts by declaring the Choreo
    (the Temboo service) that we are going to use:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解这个函数的细节。它首先声明了我们将要使用的 Choreo（Temboo 服务）：
- en: '[PRE16]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The preceding function is specific to Google Docs spreadsheets and works by
    sending a set of data separated by commas on a given row. There are Choreos for
    every service that Temboo connects to, such as Dropbox and Twitter. Please refer
    to the Temboo documentation pages to get the details about this specific Choreo.
    After declaring the Choreo, we have to add the different parameters of the Choreo
    as inputs. For example, the Google username, as shown in the following line of
    code:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的函数是针对 Google Docs 电子表格的特定函数，它通过在给定行上发送由逗号分隔的一组数据来工作。Temboo 连接到每个服务都有 Choreo，例如
    Dropbox 和 Twitter。请参阅 Temboo 文档页面以获取有关此特定 Choreo 的详细信息。在声明 Choreo 之后，我们必须添加 Choreo
    的不同参数作为输入。例如，Google 用户名，如下面的代码行所示：
- en: '[PRE17]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The same is done with the other required parameters, as shown in the following
    code:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，对其他所需的参数也做了同样的处理，如下面的代码所示：
- en: '[PRE18]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The important part of the function is when we actually format the data so that
    it can be appended to the spreadsheet. Remember, the data needs to be delimited
    using commas so that it is appended to the correct columns in the spreadsheet,
    as shown in the following code:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 函数的重要部分是我们实际上格式化数据，以便它可以附加到电子表格中。记住，数据需要用逗号分隔，以便正确附加到电子表格的正确列中，如下面的代码所示：
- en: '[PRE19]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The Choreo is then executed with the following line of code:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用以下代码行执行 Choreo：
- en: '[PRE20]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The function is then repeated every 10 minutes. Indeed, these values usually
    change slowly over the course of a day, so this is useless to the data that is
    logging continuously. Also, remember that the number of calls to Temboo is limited
    depending on the plan you chose (1000 calls per month on a free plan, which is
    approximately 1 call per hour). This is done using the delay function, as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 函数然后每 10 分钟重复一次。实际上，这些值通常在一天中缓慢变化，所以这对连续记录的数据来说是无用的。另外，记住 Temboo 的调用次数取决于你选择的计划（免费计划每月
    1000 次调用，大约每小时 1 次调用）。这是使用延迟函数完成的，如下所示：
- en: '[PRE21]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: For demonstration purposes, the data is logged every 10 minutes. However, you
    can change this just by changing the argument of the `delay()` function. The complete
    code for this part can be found at [https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter1/temboo_log](https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter1/temboo_log).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示目的，数据每 10 分钟记录一次。但是，你可以通过更改 `delay()` 函数的参数来更改这一点。这部分完整的代码可以在 [https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter1/temboo_log](https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter1/temboo_log)
    找到。
- en: 'You can now upload the sketch to the Arduino Yún board and open the Google
    Docs spreadsheet to see what''s happening. It''s all synchronized live with the
    Google Docs servers, so you do not need to refresh anything. After a while, you
    should see the first set of measurements being logged, as shown in the following
    screenshot:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以将草图上传到 Arduino Yún 板上，并打开 Google Docs 电子表格来查看发生了什么。它与 Google Docs 服务器实时同步，所以你不需要刷新任何内容。过了一会儿，你应该会看到第一组测量数据被记录下来，如下面的截图所示：
- en: '![Sending data to Google Docs and displaying it](img/8007OS_01_08.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![将数据发送到 Google Docs 并显示](img/8007OS_01_08.jpg)'
- en: 'In order to show you what can be done using this project, we used the integrated
    chart capabilities of Google Docs to plot this data using the measurements that
    we obtained for over 24 hours. The following screenshot is an extract from the
    raw data:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示使用这个项目可以做到什么，我们使用了 Google Docs 的集成图表功能，通过我们获得的超过 24 小时的测量数据来绘制这些数据。以下截图是原始数据的一个提取：
- en: '![Sending data to Google Docs and displaying it](img/8007OS_01_09.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![将数据发送到 Google Docs 并显示](img/8007OS_01_09.jpg)'
- en: 'Now, to actually plot some data, you can simply use the **Insert charts** function
    of Google Docs. We chose the simple **Line** graph for our data. The following
    screenshot shows the results for temperature and humidity:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，要实际绘制一些数据，您只需使用Google Docs的**插入图表**功能。我们为我们的数据选择了简单的**折线图**。以下截图显示了温度和湿度的结果：
- en: '![Sending data to Google Docs and displaying it](img/8007OS_01_10.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![将数据发送到Google Docs并显示](img/8007OS_01_10.jpg)'
- en: 'We did the same for light level measurements, as shown in the following screenshot:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对光级测量也做了同样的处理，如下面的截图所示：
- en: '![Sending data to Google Docs and displaying it](img/8007OS_01_11.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![将数据发送到Google Docs并显示](img/8007OS_01_11.jpg)'
- en: These charts can be placed automatically in their respective sheets inside your
    spreadsheet and will, of course, be updated automatically as new data comes in.
    You can also use the sharing capabilities of Google Docs to share these sheets
    with anyone, so they can also follow the measurements of your home.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这些图表可以自动放置到电子表格中相应的表格内，并且当然，当有新数据进来时，它们也会自动更新。您还可以使用Google Docs的共享功能将这些表格与任何人共享，这样他们也可以跟踪您家的测量情况。
- en: Creating automated e-mail alerts
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建自动电子邮件警报
- en: In this part, we are not only going to build on what we did in the previous
    section with Google Docs but also create some automated e-mail alerts on top with
    a Google account. This time, we will use the Temboo library that interfaces directly
    with Gmail, in this case, to automatically send an e-mail using your account.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们不仅将基于之前在Google Docs中做的操作，还会使用Google账户创建一些自动电子邮件警报。这次，我们将使用直接与Gmail接口的Temboo库，在这种情况下，将自动使用您的账户发送电子邮件。
- en: What we will do is program the Arduino Yún board to send an e-mail to the chosen
    address if the temperature goes below a given level, for example, indicating that
    you should turn on the heating in your home.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将编程Arduino Yún板，当温度低于给定水平时向所选地址发送电子邮件，例如，表示您应该打开家中的暖气。
- en: 'Compared to the previous Arduino sketch, we need to add the destination e-mail
    address. I used my own address for testing purposes, but of course, this destination
    address can be completely different from the one of your Gmail account. For example,
    if you want to automatically e-mail somebody who is responsible for your home
    if something happens, execute the following line of code:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前的Arduino草图相比，我们需要添加目标电子邮件地址。我为了测试目的使用了我的电子邮件地址，但当然，这个目标地址可以与您的Gmail账户完全不同。例如，如果您想自动向负责您家的人发送电子邮件，如果发生某些情况，请执行以下代码行：
- en: '[PRE22]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Please note that sending an e-mail to yourself might be seen as spam by your
    Gmail account. So, it''s advisable to send these alerts to another e-mail of your
    choice, for example, on a dedicated account for these alerts. We also need to
    set a temperature limit in the sketch. In my version of the project, it is the
    temperature under which the Arduino Yún will send an e-mail alert, but you can
    of course modify the meaning of this temperature limit, as shown in the following
    line of code:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，将电子邮件发送给自己可能会被您的Gmail账户视为垃圾邮件。因此，建议将这些警报发送到您选择的另一个电子邮件地址，例如，为这些警报设置一个专门的账户。我们还需要在草图中设置一个温度限制。在我的项目版本中，这是Arduino
    Yún将发送电子邮件警报的温度，但当然，您可以修改这个温度限制的含义，如下面的代码行所示：
- en: '[PRE23]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'In the `loop()` part of the sketch, what changes compared to the sketch of
    the previous section is that we can compare the recorded temperature to the limit.
    This is done with a simple `if` statement:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在草图的`loop()`部分，与上一节的草图相比，我们可以在记录的温度与限制之间进行比较。这是通过一个简单的`if`语句完成的：
- en: '[PRE24]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Then, the alert mechanism occurs in the new function called `sendTempAlert`
    that is called if the temperature is below the limit. The function also takes
    a string as an argument, which is the content of the message that will be sent
    when the alert is triggered. Inside the function, we start again by declaring
    the type of Choreo that we will use. This time, the Choreo that we will use is
    specific to Gmail and is used to send an e-mail with the subject and body of the
    message, as shown in the following line of code:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，当温度低于限制时，会触发新的功能`sendTempAlert`，该功能会调用。该函数还接受一个字符串作为参数，这是当警报触发时将发送的消息内容。在函数内部，我们再次声明我们将使用的Choreo类型。这次，我们将使用的是针对Gmail的特定Choreo，用于发送带有消息主题和正文的电子邮件，如下面的代码行所示：
- en: '[PRE25]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Just as the Choreo we used to log data into Google Docs, this new Choreo requires
    a given set of parameters that are defined in the official Temboo documentation.
    We need to specify all the required inputs for the Choreo, for example, the e-mail''s
    subject line that you can personalize as well, as shown in the following line
    of code:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们用来将数据记录到Google Docs的Choreo一样，这个新的Choreo需要一组在官方Temboo文档中定义的参数。我们需要指定Choreo的所有必需输入，例如，您可以个性化的电子邮件主题行，如下面的代码行所示：
- en: '[PRE26]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The body of the message is defined in the following line of code:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 消息正文定义在以下代码行中：
- en: '[PRE27]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Note that the `message` variable is the one passed in the `loop()` part of
    the sketch and can be personalized as well, for example, by adding the value of
    the measured temperature. Finally, the Choreo is executed with the following line
    of code:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`message`变量是在草图中的`loop()`部分传递的，也可以个性化，例如，通过添加测量的温度值。最后，使用以下代码行执行Choreo：
- en: '[PRE28]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The complete code for this part can be found at [https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter1/temboo_alerts](https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter1/temboo_alerts).
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分的完整代码可以在[https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter1/temboo_alerts](https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter1/temboo_alerts)找到。
- en: 'Now, you can compile and update the sketch to your Yún. You can also go to
    the Gmail interface to check for new e-mails. If the temperature indeed drops
    below the value that you set as a limit, the following is what you should receive
    in your inbox:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以将草图编译并更新到您的Yún板上。您还可以访问Gmail界面以检查新电子邮件。如果温度确实低于您设置的极限值，您应该在收件箱中收到以下内容：
- en: '![Creating automated e-mail alerts](img/8007OS_01_12.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![创建自动化电子邮件警报](img/8007OS_01_12.jpg)'
- en: Again, you can play with this sketch and create more complex alerts based on
    the data you measured. For example, you can add the humidity and light level in
    the mix and create dedicated limits and alerts for these values. You can also
    program Arduino Yún so that it e-mails you the data itself at regular intervals,
    even if no temperature limit is reached.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，您可以玩这个草图，并根据您测量的数据创建更复杂的警报。例如，您可以将湿度和光照水平混合在一起，并为这些值创建专门的限制和警报。您还可以编程Arduino
    Yún，使其在达到温度限制之前定期通过电子邮件发送数据。
- en: Making your Arduino Yún board tweet sensor data
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使您的Arduino Yún板发送传感器数据推文
- en: Finally, in the last part of this project, we will make your Arduino Yún board
    send its own messages on Twitter. You can even create a new Twitter account just
    for your Yún board, and you can tell people you know to follow it on Twitter so
    that they can be informed at all times about what's going on in your home!
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在本项目的最后一部分，我们将使您的Arduino Yún板在Twitter上发送自己的消息。您甚至可以为您的Yún板创建一个新的Twitter账户，并告诉您认识的人关注它，这样他们就可以随时了解您家中的情况！
- en: The project starts on the Twitter website because you have to declare a new
    app on Twitter. Log in using your Twitter credentials and then go to [https://apps.twitter.com/](https://apps.twitter.com/).
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 项目从Twitter网站开始，因为您必须在Twitter上声明一个新的应用。使用您的Twitter凭据登录，然后转到[https://apps.twitter.com/](https://apps.twitter.com/)。
- en: 'Now, click on **Create New App** to start the process, as shown in the following
    screenshot:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，点击**创建新应用**以开始过程，如下面的截图所示：
- en: '![Making your Arduino Yún board tweet sensor data](img/8007OS_01_13.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![使您的Arduino Yún板发送传感器数据推文](img/8007OS_01_13.jpg)'
- en: 'You will need to give some name to your app. For example, we named ours `MyYunTemboo`.
    You will need to get a lot of information from the Twitter website. The first
    things you need to get are the API key and the API secret. These are available
    in the **API Keys** tab, as shown in the following screenshot:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要为您的应用起一个名字。例如，我们将其命名为`MyYunTemboo`。您需要从Twitter网站上获取大量信息。首先需要获取的是API密钥和API密钥。这些可以在**API密钥**选项卡中找到，如下面的截图所示：
- en: '![Making your Arduino Yún board tweet sensor data](img/8007OS_01_14.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![使您的Arduino Yún板发送传感器数据推文](img/8007OS_01_14.jpg)'
- en: Make sure that the **Access level** of your app is set to **Read**, **Write**,
    and **Direct** messages. This might not be active by default, and in the first
    tests, my Arduino board did not respond anymore because I didn't set these parameters
    correctly. So, make sure that your app has the correct access level.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您的应用**访问级别**设置为**读取**、**写入**和**直接消息**。这可能不是默认设置，在第一次测试中，我的Arduino板没有再响应，因为我没有正确设置这些参数。所以，请确保您的应用具有正确的访问级别。
- en: Then, you are also going to need a token for your app. You can do this by going
    to the **Your access token** section. From this section, you need to get the **Access
    token** and the **Access token secret**. Again, make sure that the access level
    of your token is correctly set.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您还需要为您的应用获取一个令牌。您可以通过访问**您的访问令牌**部分来完成此操作。从这个部分，您需要获取**访问令牌**和**访问令牌密钥**。再次确保您的令牌访问级别设置正确。
- en: 'We can now proceed to write the Arduino sketch, so the Arduino Yún board can
    automatically send tweets. The Twitter Choreo is well known for using a lot of
    memory on the Yún, so this sketch will only tweet data without logging data into
    your Google Docs account. I also recommend that you disable any debugging messages
    on the serial port to preserve the memory of your Yún. In the sketch, you first
    need to define your Twitter app information, as shown in the following code:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以继续编写Arduino草图，以便Arduino Yún板可以自动发送推文。Twitter Choreo因其占用Yún大量内存而闻名，因此这个草图只会发送数据而不会将数据记录到您的Google
    Docs账户中。我还建议您禁用串行端口上的任何调试消息以保留Yún的内存。在草图中，您首先需要定义您的Twitter应用信息，如下面的代码所示：
- en: '[PRE29]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Then, the sketch will regularly tweet the data about your home with the following
    function:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，草图将定期使用以下函数发布关于您家的数据：
- en: '[PRE30]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'This function is repeated every minute using a `delay()` function, as follows:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数使用`delay()`函数每分钟重复一次，如下所示：
- en: '[PRE31]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Of course, this delay can be changed according to your needs. Let''s see the
    details of this function. It starts by declaring the correct Choreo to send updates
    on Twitter:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这个延迟可以根据您的需求进行更改。让我们看看这个函数的详细情况。它首先声明了正确的Choreo来发送Twitter上的更新：
- en: '[PRE32]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Then, we build the text that we want to tweet as a string. In this case, we
    just formatted the sensor data in one string, as shown in the following code:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们构建我们想要推文的文本作为字符串。在这种情况下，我们只是将传感器数据格式化在一个字符串中，如下面的代码所示：
- en: '[PRE33]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The access token and API key that we defined earlier are declared as inputs:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前定义的访问令牌和API密钥被声明为输入：
- en: '[PRE34]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The text that we want to tweet is also simply declared as an input of the Twitter
    Choreo with the string variable we built earlier:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要推文的文本也被简单地声明为Twitter Choreo的输入，使用我们之前构建的字符串变量：
- en: '[PRE35]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The complete code for this part can be found at [https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter1/temboo_twitter](https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter1/temboo_twitter).
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分的完整代码可以在[https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter1/temboo_twitter](https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter1/temboo_twitter)找到。
- en: 'Now that the Arduino sketch is ready, we can test it. You can simply upload
    the code to your Arduino Yún, and wait for a moment. Your board should automatically
    connect to the Twitter feed that you chose and print the data as a new message,
    as shown in the following screenshot:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 现在Arduino草图已经准备好了，我们可以对其进行测试。您只需将代码上传到您的Arduino Yún，稍等片刻。您的板子应该会自动连接到您选择的Twitter流，并打印出新的消息，如下面的截图所示：
- en: '![Making your Arduino Yún board tweet sensor data](img/8007OS_01_15.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![制作您的Arduino Yún板推文传感器数据](img/8007OS_01_15.jpg)'
- en: If nothing shows up on your Twitter account, there are several things that you
    can check. I already mentioned memory usage; try to disable the debug output on
    the serial port to free some memory. Also, make sure that you have entered the
    correct information about your Twitter app; it is quite easy to make a mistake
    between different API keys and access tokens.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的Twitter账户中没有显示任何内容，您可以检查几个方面。我已经提到了内存使用；尝试禁用串行端口上的调试输出以释放一些内存。同时，请确保您已经正确输入了关于您的Twitter应用的详细信息；在不同的API密钥和访问令牌之间出错是很常见的。
- en: For this project, I used the Twitter account of my website dedicated to home
    automation, but of course, you can create a dedicated Twitter account for the
    project so that many people can follow the latest updates about your home!
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个项目，我使用了我的专注于家庭自动化的网站上的Twitter账户，但当然，您可以为项目创建一个专门的Twitter账户，这样许多人就可以关注您家的最新更新了！
- en: You can also combine the code from this part with the idea of the previous section,
    for example, to create automated alerts based on the measured data and post messages
    on Twitter accordingly.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以将这部分代码与上一节的想法结合起来，例如，根据测量的数据创建自动警报并在Twitter上相应地发布消息。
- en: Summary
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Let's summarize what we learned in this chapter. We built a simple weather measurement
    station based on the Arduino Yún board that sends data automatically into the
    cloud.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们总结一下本章所学的内容。我们基于Arduino Yún板构建了一个简单的气象测量站，该站能自动将数据发送到云端。
- en: First, you learned how to connect simple sensors to your Arduino Yún board and
    to write a test sketch for the Yún board in order to make sure that all these
    sensors are working correctly.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你学习了如何将简单的传感器连接到你的Arduino Yún板，并编写一个用于Yún板的测试草图，以确保所有这些传感器都能正常工作。
- en: Then, we interfaced the Arduino Yún board to the Temboo services by using the
    dedicated Temboo libraries for the Yún. Using these libraries, we logged data
    in a Google Docs spreadsheet, created automated e-mail alerts based on our measurements,
    and published these measurements on Twitter.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们通过使用为Yún板定制的Temboo库，将Arduino Yún板与Temboo服务进行接口连接。使用这些库，我们在Google Docs电子表格中记录数据，根据我们的测量结果创建自动电子邮件警报，并将这些测量结果发布到Twitter上。
- en: To take it further, you can combine the different parts of this project together,
    and also add many Arduino Yún boards to the project, for example, in two different
    areas of your home. In the next chapter, we are going to use the power of the
    Temboo libraries again to send power measurement data to the Web, so the energy
    consumption of your home can be monitored remotely.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 要进一步扩展，你可以将这个项目的不同部分组合在一起，也可以在项目的不同区域添加多个Arduino Yún板，例如，在你家的两个不同区域。在下一章中，我们将再次利用Temboo库的力量，将电力测量数据发送到网络，以便远程监控你家的能源消耗。
