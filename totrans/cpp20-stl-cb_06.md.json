["```cpp\nvector<int> x { 1, 2, 3, 4, 5 };\nlong sum{};\nfor( int i : x ) sum += i;                     // sum is 15\n```", "```cpp\nvector<int> x { 1, 2, 3, 4, 5 };\nauto sum = accumulate(x.begin(), x.end(), 0);  // sum is 15\n```", "```cpp\ndeque<int> x { 1, 2, 3, 4, 5 };\nauto sum = accumulate(x.begin(), x.end(), 0);  // sum is 15\n```", "```cpp\n    void printc(auto& c, string_view s = \"\") {\n        if(s.size()) cout << format(\"{}: \", s);\n        for(auto e : c) cout << format(\"[{}] \", e);\n        cout << '\\n';\n    }\n    ```", "```cpp\n    int main() {\n        vector<string> v1\n            { \"alpha\", \"beta\", \"gamma\", \"delta\", \n              \"epsilon\" };\n        printc(v1);\n    }\n    ```", "```cpp\nv1: [alpha] [beta] [gamma] [delta] [epsilon]\n```", "```cpp\n    vector<string> v2(v1.size());\n    ```", "```cpp\n    std::copy(v1.begin(), v1.end(), v2.begin());\n    printc(v2);\n    ```", "```cpp\nv1: [alpha] [beta] [gamma] [delta] [epsilon]\nv2: [alpha] [beta] [gamma] [delta] [epsilon]\n```", "```cpp\n    vector<string> v2{};\n    std::copy(v1.begin(), v1.end(), back_inserter(v2))\n    ```", "```cpp\n    vector<string> v2(v1.size());\n    ranges::copy(v1, v2.begin());\n    ```", "```cpp\nvector<string> v2{};\nranges::copy(v1, back_inserter(v2));\n```", "```cpp\nv2: [alpha] [beta] [gamma] [delta] [epsilon]\n```", "```cpp\n    vector<string> v3{};\n    std::copy_n(v1.begin(), 3, back_inserter(v3));\n    printc(v3, \"v3\");\n    ```", "```cpp\nv3: [alpha] [beta] [gamma]\n```", "```cpp\n    vector<string> v4{};\n    std::copy_if(v1.begin(), v1.end(), back_inserter(v4), \n        [](string& s){ return s.size() > 4; });\n    printc(v4, \"v4\");\n    ```", "```cpp\nvector<string> v4{};\nranges::copy_if(v1, back_inserter(v4), \n    [](string& s){ return s.size() > 4; });\nprintc(v4, \"v4\");\n```", "```cpp\nv4: [alpha] [gamma] [delta] [epsilon]\n```", "```cpp\n    ostream_iterator<string> out_it(cout, \" \");\n    ranges::copy(v1, out_it)\n    cout << '\\n';\n    ```", "```cpp\nalpha beta gamma delta epsilon\n```", "```cpp\ntemplate<typename Input_it, typename Output_it>\nOutput_it bw_copy(Input_it begin_it, Input_it end_it, \n                  Output_it dest_it) {\n    while (begin_it != end_it) {\n        *dest_it++ = *begin_it++;\n    }\n    return dest_it;\n}\n```", "```cpp\nstd::move(v1.begin(), v1.end(), v2.begin());\nprintc(v1, \"after move: v1\");\nprintc(v2, \"after move: v2\");\n```", "```cpp\nafter move1: v1: [] [] [] [] []\nafter move1: v2: [alpha] [beta] [gamma] [delta] [epsilon]\n```", "```cpp\nranges::move(v1, v2.begin());\n```", "```cpp\nfor(auto v : c) cout << v << ', ';\n```", "```cpp\nvector<string> greek{ \"alpha\", \"beta\", \"gamma\", \n                      \"delta\", \"epsilon\" };\nfor(auto v : greek) cout << v << \", \";\ncout << '\\n';\n```", "```cpp\nalpha, beta, gamma, delta, epsilon,\n```", "```cpp\nauto greek_view = views::join(greek);\n```", "```cpp\nfor(const char c : greek_view) cout << c;\ncout << '\\n';\n```", "```cpp\nalphabetagammadeltaepsilon\n```", "```cpp\n    int main() {\n        vector<string> greek{ \"alpha\", \"beta\", \"gamma\",\n            \"delta\", \"epsilon\" };\n        ...\n    }\n    ```", "```cpp\n    namespace bw {\n        template<typename I>\n        ostream& join(I it, I end_it, ostream& o, \n                      string_view sep = \"\") {\n            if(it != end_it) o << *it++;\n            while(it != end_it) o << sep << *it++;\n            return o;\n        }\n    }\n    ```", "```cpp\nbw::join(greek.begin(), greek.end(), cout, \", \") << '\\n';\n```", "```cpp\nalpha, beta, gamma, delta, epsilon\n```", "```cpp\n    template<typename I>\n    string join(I it, I end_it, string_view sep = \"\") {\n        ostringstream ostr;\n        join(it, end_it, ostr, sep);\n        return ostr.str();\n    }\n    ```", "```cpp\nstring s = bw::join(greek.begin(), greek.end(), \", \");\ncout << s << '\\n';\n```", "```cpp\nalpha, beta, gamma, delta, epsilon\n```", "```cpp\n    string join(const auto& c, string_view sep = \"\") {\n        return join(begin(c), end(c), sep);\n    }\n    ```", "```cpp\nstring s = bw::join(greek, \", \");\ncout << s << '\\n';\n```", "```cpp\nalpha, beta, gamma, delta, epsilon\n```", "```cpp\nnamespace bw {\n    template<typename I>\n    ostream& join(I it, I end_it, ostream& o, \n                  string_view sep = \"\") {\n        if(it != end_it) o << *it++;\n        while(it != end_it) o << sep << *it++;\n        return o;\n    }\n}\n```", "```cpp\nif(it != end_it) o << *it++;\n```", "```cpp\nwhile(it != end_it) o << sep << *it++;\n```", "```cpp\nbw::join(greek.begin(), greek.end(), cout, \", \") << '\\n';\n```", "```cpp\nalpha, beta, gamma, delta, epsilon\n```", "```cpp\nnamespace num = std::numbers;\nlist<double> constants { num::pi, num::e, num::sqrt2 };\ncout << bw::join(constants, \", \") << '\\n';\n```", "```cpp\n3.14159, 2.71828, 1.41421\n```", "```cpp\ncout << bw::join(greek_view, \":\") << '\\n';\n```", "```cpp\na:l:p:h:a:b:e:t:a:g:a:m:m:a:d:e:l:t:a:e:p:s:i:l:o:n\n```", "```cpp\n    void check_sorted(auto &c) {\n        if(!is_sorted(c.begin(), c.end())) cout << \"un\";\n        cout << \"sorted: \";\n    }\n    ```", "```cpp\n    void printc(const auto &c) {\n        check_sorted(c);\n        for(auto& e : c) cout << e << ' ';\n        cout << '\\n';\n    }\n    ```", "```cpp\n    int main() {\n        vector<int> v{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };\n        printc(v);\n        …\n    }\n    ```", "```cpp\nsorted: 1 2 3 4 5 6 7 8 9 10\n```", "```cpp\n    void randomize(auto& c) {\n        static std::random_device rd;\n        static std::default_random_engine rng(rd());\n        std::shuffle(c.begin(), c.end(), rng);\n    }\n    ```", "```cpp\nrandomize(v);\nprintc(v);\n```", "```cpp\nunsorted: 6 3 4 8 10 1 2 5 9 7\n```", "```cpp\nfor(int i{3}; i; --i) {\n    randomize(v);\n    printc(v);\n}\n```", "```cpp\nunsorted: 3 1 8 5 10 2 7 9 6 4\nunsorted: 7 6 5 1 3 9 10 2 4 8\nunsorted: 4 2 3 10 1 9 5 6 8 7\n```", "```cpp\n    std::sort(v.begin(), v.end());\n    printc(v);\n    ```", "```cpp\nsorted: 1 2 3 4 5 6 7 8 9 10\n```", "```cpp\n    cout << \"partial_sort:\\n\";\n    randomize(v);\n    auto middle{ v.begin() + (v.size() / 2) };\n    std::partial_sort(v.begin(), middle, v.end());\n    printc(v);\n    ```", "```cpp\nunsorted: 1 2 3 4 5 10 7 6 8 9\n```", "```cpp\n    coutrandomize(v);\n    printc(v);\n    partition(v.begin(), v.end(), [](int i)\n        { return i > 5; });\n    printc(v);\n    ```", "```cpp\nunsorted: 4 6 8 1 9 5 2 7 3 10\nunsorted: 10 6 8 7 9 5 2 1 3 4\n```", "```cpp\n    struct things {\n        string s_;\n        int i_;\n        string str() const {\n            return format(\"({}, {})\", s_, i_);\n        }\n    };\n    ```", "```cpp\nvector<things> vthings{ {\"button\", 40},\n    {\"hamburger\", 20}, {\"blog\", 1000},\n    {\"page\", 100}, {\"science\", 60} };\n```", "```cpp\nvoid print_things(const auto& c) {\n    for (auto& v : c) cout << v.str() << ' ';\n    cout << '\\n';\n}\n```", "```cpp\n    std::sort(vthings.begin(), vthings.end(), \n            [](const things &lhs, const things &rhs) {\n        return lhs.i_ < rhs.i_;\n    });\n    print_things(vthings);\n    ```", "```cpp\n(hamburger, 20) (button, 40) (science, 60) (page, 100) (blog, 1000)\n```", "```cpp\nstd::sort(vthings.begin(), vthings.end(), \n        [](const things &lhs, const things &rhs) {\n    return lhs.s_ < rhs.s_;\n});\nprint_things(vthings);\n```", "```cpp\n(blog, 1000) (button, 40) (hamburger, 20) (page, 100) (science, 60)\n```", "```cpp\nstd::sort(vthings.begin(), vthings.end(), \n        [](const things& lhs, const things& rhs) {\n    return lhs.i_ < rhs.i_;\n});\n```", "```cpp\nbool cmp(const Type1& a, const Type2& b);\n```", "```cpp\n    void printc(auto& c, string_view s = \"\") {\n        if(s.size()) cout << format(\"{}: \", s);\n        for(auto e : c) cout << format(\"{} \", e);\n        cout << '\\n';\n    }\n    ```", "```cpp\n    int main() {\n        vector<int> v1{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };\n        vector<int> v2;\n        printc(v1, \"v1\");\n        ...\n    }\n    ```", "```cpp\nv1: 1 2 3 4 5 6 7 8 9 10\n```", "```cpp\n    cout << \"squares:\\n\";\n    transform(v1.begin(), v1.end(), back_inserter(v2),\n        [](int x){ return x * x; });\n    printc(v2, \"v2\");\n    ```", "```cpp\nsquares:\nv2: 1 4 9 16 25 36 49 64 81 100\n```", "```cpp\n    string str_lower(const string& s) {\n        string outstr{};\n        for(const char& c : s) {\n            outstr += tolower(c);\n        }\n        return outstr;\n    }\n    ```", "```cpp\nvector<string> vstr1{ \"Mercury\", \"Venus\", \"Earth\",\n    \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\",\n    \"Pluto\" };\nvector<string> vstr2;\nprintc(vstr1, \"vstr1\");\ncout << \"str_lower:\\n\";\ntransform(vstr1.begin(), vstr1.end(),\n    back_inserter(vstr2), \n    [](string& x){ return str_lower(x); });\nprintc(vstr2, \"vstr2\");\n```", "```cpp\nvstr: Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune Pluto\nstr_lower:\nvstr: mercury venus earth mars jupiter saturn uranus neptune pluto\n```", "```cpp\n    cout << \"ranges squares:\\n\";\n    auto view1 = views::transform(v1, [](int x){ \n        return x * x; });\n    printc(view1, \"view1\");\n    ```", "```cpp\nv2.clear();    // reset vector v2 to empty state\nfor(auto e : v1) v2.push_back(e * e);\nprintc(v2, \"v2\");\n```", "```cpp\nv2: 1 4 9 16 25 36 49 64 81 100\n```", "```cpp\n    int main() {\n        const vector<int> v{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };\n        ...\n    }\n    ```", "```cpp\n    auto it1 = find(v.begin(), v.end(), 7);\n    if(it1 != v.end()) cout << format(\"found: {}\\n\", *it1);\n    else cout << \"not found\\n\";\n    ```", "```cpp\nfound: 7\n```", "```cpp\n    struct City {\n        string name{};\n        unsigned pop{};\n        bool operator==(const City& o) const {\n            return name == o.name;\n        }\n        string str() const {\n            return format(\"[{}, {}]\", name, pop);\n        }\n    };\n    ```", "```cpp\n    const vector<City> c{\n        { \"London\", 9425622 },\n        { \"Berlin\", 3566791 },\n        { \"Tokyo\",  37435191 },\n        { \"Cairo\",  20485965 }\n    };\n    ```", "```cpp\n    auto it2 = find(c.begin(), c.end(), City{\"Berlin\"});\n    if(it2 != c.end()) cout << format(\"found: {}\\n\", \n        it2->str());\n    else cout << \"not found\\n\";\n    ```", "```cpp\nfound: [Berlin, 3566791]\n```", "```cpp\n    auto it3 = find_if(begin(c), end(c),\n        [](const City& item)\n            { return item.pop > 20000000; });\n    if(it3 != c.end()) cout << format(\"found: {}\\n\",\n        it3->str());\n    else cout << \"not found\\n\";\n    ```", "```cpp\nfound: [Tokyo, 37435191]\n```", "```cpp\nauto vw1 = ranges::views::filter(c, \n    [](const City& c){ return c.pop > 20000000; });\nfor(const City& e : vw1) cout << format(\"{}\\n\", e.str());\n```", "```cpp\n[Tokyo, 37435191]\n[Cairo, 20485965]\n```", "```cpp\ntemplate<class InputIt, class T>\nconstexpr InputIt find(InputIt, InputIt, const T&)\n```", "```cpp\ntemplate<class InputIt, class UnaryPredicate>\nconstexpr InputIt find_if(InputIt, InputIt, UnaryPredicate)\n```", "```cpp\ntemplate<ranges::viewable_range R, class Pred>\nconstexpr ranges::view auto ranges::views::filter(R&&, Pred&&);\n```", "```cpp\nauto vw1 = std::ranges::views::filter(c,\n    [](const City& c){ return c.pop > 20000000; });\nfor(const City& e : vw1) cout << format(\"{}\\n\", e.str());\n```", "```cpp\n[Tokyo, 37435191]\n[Cairo, 20485965]\n```", "```cpp\n    void printc(auto& c, string_view s = \"\") {\n        if(s.size()) cout << format(\"{}: \", s);\n        for(auto e : c) cout << format(\"{:>5} \", e);\n        cout << '\\n';\n    }\n    ```", "```cpp\n    int main() {\n        auto il = { 0, -12, 2001, 4, 5, -14, 100, 200, \n          30000 };\n        ...\n    }\n    ```", "```cpp\n    constexpr int ilow{0};\n    constexpr int ihigh{500};\n    ```", "```cpp\n    vector<int> voi{ il };\n    cout << \"vector voi before:\\n\";\n    printc(voi);\n    ```", "```cpp\nvector voi before:\n    0   -12  2001     4     5   -14   100   200 30000\n```", "```cpp\n    cout << \"vector voi after:\\n\";\n    for(auto& e : voi) e = clamp(e, ilow, ihigh);\n    printc(voi);\n    ```", "```cpp\nvector voi before:\n    0   -12  2001     4     5   -14   100   200 30000\nvector voi after:\n    0     0   500     4     5     0   100   200   500\n```", "```cpp\n    cout << \"list loi before:\\n\";\n    list<int> loi{ il };\n    printc(loi);\n    transform(loi.begin(), loi.end(), loi.begin(), \n        [=](auto e){ return clamp(e, ilow, ihigh); });\n    cout << \"list loi after:\\n\";\n    printc(loi);\n    ```", "```cpp\nlist loi before:\n    0   -12  2001     4     5   -14   100   200 30000\nlist loi after:\n    0     0   500     4     5     0   100   200   500\n```", "```cpp\ntemplate<class T>\nconstexpr const T& clamp( const T& v, const T& lo,\n        const T& hi ) {\n    return less(v, lo) ? lo : less(hi, v) ? hi : v;\n}\n```", "```cpp\nfor(auto& v : voi) v = clamp(v, ilow, ihigh);\n```", "```cpp\ntransform(loi.begin(), loi.end(), loi.begin(),\n    [=](auto v){ return clamp(v, ilow, ihigh); });\n```", "```cpp\n    int iround(const double& d) {\n        return static_cast<int>(std::round(d));\n    }\n    ```", "```cpp\n    int main() {\n        constexpr size_t n_data{ 200000 };\n        constexpr size_t n_samples{ 500 };\n        constexpr int mean{ 0 };\n        constexpr size_t dev{ 3 };\n        ...\n    }\n    ```", "```cpp\n    std::random_device rd;\n    std::mt19937 rng(rd());\n    std::normal_distribution<> dist{ mean, dev };\n    ```", "```cpp\n    array<int, n_data> v{};\n    for(auto& e : v) e = iround(dist(rng));\n    ```", "```cpp\n    array<int, n_samples> samples{};\n    sample(data.begin(), data.end(), samples.begin(), \n        n_samples, rng);\n    ```", "```cpp\n    std::map<int, size_t> hist{};\n    for (const int i : samples) ++hist[i];\n    ```", "```cpp\n    constexpr size_t scale{ 3 };\n    cout << format(\"{:>3} {:>5} {:<}/{}\\n\", \n        \"n\", \"count\", \"graph\", scale);\n    for (const auto& [value, count] : hist) {\n        cout << format(\"{:>3} ({:>3}) {}\\n\", \n            value, count, string(count / scale, '*'));\n    }\n    ```", "```cpp\n$ ./sample\n  n count graph/3\n -9 (  2)\n -7 (  5) *\n -6 (  9) ***\n -5 ( 22) *******\n -4 ( 24) ********\n -3 ( 46) ***************\n -2 ( 54) ******************\n -1 ( 59) *******************\n  0 ( 73) ************************\n  1 ( 66) **********************\n  2 ( 44) **************\n  3 ( 34) ***********\n  4 ( 26) ********\n  5 ( 18) ******\n  6 (  9) ***\n  7 (  5) *\n  8 (  3) *\n  9 (  1)\n```", "```cpp\nOutIter sample(SourceIter, SourceIter, OutIter, \n    SampleSize, RandNumGen&&);\n```", "```cpp\n    void printc(const auto& c, string_view s = \"\") {\n        if(s.size()) cout << format(\"{}: \", s);\n        for(auto e : c) cout << format(\"{} \", e);\n        cout << '\\n';\n    }\n    ```", "```cpp\n    int main() {\n        vector<string> vs{ \"dog\", \"cat\", \"velociraptor\" };\n        sort(vs.begin(), vs.end());\n        ...\n    }\n    ```", "```cpp\n    do {\n        printc(vs);\n    } while (next_permutation(vs.begin(), vs.end()));\n    ```", "```cpp\ncat dog velociraptor\ncat velociraptor dog\ndog cat velociraptor\ndog velociraptor cat\nvelociraptor cat dog\nvelociraptor dog cat\n```", "```cpp\nvector<string> vs{ \"velociraptor\", \"dog\", \"cat\" };\ndo {\n    printc(vs);\n} while (next_permutation(vs.begin(), vs.end()));\n```", "```cpp\nvelociraptor dog cat\n```", "```cpp\nvector<int> vi{ 1, 2, 3, 4, 5, 1, 2, 3, 4, 5 };\nsort(vi.begin(), vi.end());\nprintc(vi, \"vi sorted\");\nlong count{};\ndo {\n    ++count;\n} while (next_permutation(vi.begin(), vi.end()));\ncout << format(\"number of permutations: {}\\n\", count);\n```", "```cpp\nVi sorted: 1 1 2 2 3 3 4 4 5 5\nnumber of permutations: 113400\n```", "```cpp\nvector<int> vi2{ 1, 3, 1 };\nsort(vi2.begin(), vi2.end());\ndo {\n    printc(vi2);\n} while (next_permutation(vi2.begin(), vi2.end()));\n```", "```cpp\n1 1 3\n1 3 1\n3 1 1\n```", "```cpp\n    void printc(const auto& c, string_view s = \"\") {\n        if(s.size()) cout << format(\"{}: \", s);\n        for(auto e : c) cout << format(\"{} \", e);\n        cout << '\\n';\n    }\n    ```", "```cpp\n    int main() {\n        vector<string> vs1{ \"dog\", \"cat\", \n          \"velociraptor\" };\n        vector<string> vs2{ \"kirk\", \"sulu\", \"spock\" };\n        vector<string> dest{};\n        printc(vs1, \"vs1\");\n        printc(vs2, \"vs2\");\n        ...\n    }\n    ```", "```cpp\nvs1: dog cat velociraptor\nvs2: kirk sulu spock\n```", "```cpp\n    sort(vs1.begin(), vs1.end());\n    sort(vs2.begin(), vs2.end());\n    printc(vs1, \"vs1 sorted\");\n    printc(vs2, \"vs2 sorted\");\n    ```", "```cpp\nvs1 sorted: cat dog velociraptor\nvs2 sorted: kirk spock sulu\n```", "```cpp\n    merge(vs1.begin(), vs1.end(), vs2.begin(), vs2.end(), \n        back_inserter(dest));\n    printc(dest, \"dest\");\n    ```", "```cpp\ndest: cat dog kirk spock sulu velociraptor\n```", "```cpp\nOutputIt merge(InputIt1, InputIt1, InputIt2, InputIt2, OutputIt)\n```"]