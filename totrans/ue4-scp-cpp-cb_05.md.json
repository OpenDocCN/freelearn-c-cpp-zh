["```cpp\nUPROPERTY() \nUBoxComponent* TriggerZone; \n\nUFUNCTION() \nvirtual void NotifyActorBeginOverlap(AActor* OtherActor) override; \n\nUFUNCTION() \nvirtual void NotifyActorEndOverlap(AActor* OtherActor) override;\n```", "```cpp\n#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n#include \"Components/BoxComponent.h\"\n#include \"MyTriggerVolume.generated.h\"\n```", "```cpp\n// Sets default values\nAMyTriggerVolume::AMyTriggerVolume()\n{\n    // Set this actor to call Tick() every frame. You can turn \n   // this off to improve performance if you don't need it. \n\n    PrimaryActorTick.bCanEverTick = true;\n\n // Create a new component for the instance and initialize \n       it\n TriggerZone = CreateDefaultSubobject<UBoxComponent>(\"TriggerZone\");\n TriggerZone->SetBoxExtent(FVector(200, 200, 100));\n}\n```", "```cpp\nvoid AMyTriggerVolume::NotifyActorBeginOverlap(AActor* OtherActor) \n{ \n    auto Message = FString::Printf(TEXT(\"%s entered me\"), \n                   *(OtherActor->GetName()));\n\n    GEngine->AddOnScreenDebugMessage(-1, 1, FColor::Red, Message); \n} \n\nvoid AMyTriggerVolume::NotifyActorEndOverlap(AActor* OtherActor) \n{ \n    auto Message = FString::Printf(TEXT(\"%s left me\"), \n                   *(OtherActor->GetName()));\n\n    GEngine->AddOnScreenDebugMessage(-1, 1, FColor::Red, Message); \n} \n```", "```cpp\nDECLARE_DELEGATE(FStandardDelegateSignature)\nUCLASS()\nclass CHAPTER_05_API AChapter_05GameModeBase : public AGameModeBase\n```", "```cpp\nDECLARE_DELEGATE(FStandardDelegateSignature)\nUCLASS()\nclass CHAPTER_05_API AChapter_05GameModeBase : public AGameModeBase\n{\n  GENERATED_BODY()\n\npublic:\n FStandardDelegateSignature MyStandardDelegate;\n};\n```", "```cpp\nUFUNCTION() \nvoid EnableLight(); \n\nUPROPERTY() \nUPointLightComponent* PointLight; \n```", "```cpp\n#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n#include \"Components/PointLightComponent.h\"\n#include \"DelegateListener.generated.h\"\n```", "```cpp\nADelegateListener::ADelegateListener()\n{\n  // Set this actor to call Tick() every frame. You can turn this\n // off to improve performance if you don't need it.\n PrimaryActorTick.bCanEverTick = true;\n\n  // Create a point light\n PointLight = CreateDefaultSubobject<UPointLightComponent>(\"PointLight\");\n RootComponent = PointLight;\n\n // Turn it off at the beginning so we can turn it on later \n //   through code \n PointLight->SetVisibility(false);\n\n // Set the color to blue to make it easier to see\n PointLight->SetLightColor(FLinearColor::Blue);\n\n}\n```", "```cpp\nvoid ADelegateListener::BeginPlay()\n{\n    Super::BeginPlay();\n\n UWorld* TheWorld = GetWorld();\n if (TheWorld != nullptr)\n {\n AGameModeBase* GameMode = \n UGameplayStatics::GetGameMode(TheWorld);\n\n AChapter_05GameModeBase * MyGameMode = \n Cast<AChapter_05GameModeBase>(GameMode);\n\n if (MyGameMode != nullptr)\n {\n MyGameMode->MyStandardDelegate.BindUObject(this, \n &ADelegateListener::EnableLight);\n }\n }\n\n}\n```", "```cpp\n#include \"DelegateListener.h\"\n#include \"Chapter_05GameModeBase.h\"\n#include \"Kismet/GameplayStatics.h\"\n```", "```cpp\nvoid ADelegateListener::EnableLight() \n{ \n  PointLight->SetVisibility(true); \n} \n```", "```cpp\nvoid AMyTriggerVolume::NotifyActorBeginOverlap(AActor* OtherActor) \n{ \n    auto Message = FString::Printf(TEXT(\"%s entered me\"), \n                   *(OtherActor->GetName()));\n\n    GEngine->AddOnScreenDebugMessage(-1, 1, FColor::Red, Message); \n\n    // Call our delegate\n UWorld* TheWorld = GetWorld();\n\n if (TheWorld != nullptr)\n {\n AGameModeBase* GameMode = \n                               UGameplayStatics::GetGameMode(TheWorld); \n AChapter_05GameModeBase * MyGameMode = \n                               Cast<AChapter_05GameModeBase>(GameMode);\n\n if(MyGameMode != nullptr)\n {\n MyGameMode->MyStandardDelegate.ExecuteIfBound();\n }\n\n }\n} \n```", "```cpp\n#include \"MyTriggerVolume.h\"\n#include \"Chapter_05GameModeBase.h\"\n#include \"Kismet/GameplayStatics.h\"\n```", "```cpp\nUFUNCTION() \nvirtual void EndPlay(const EEndPlayReason::Type EndPlayReason) override;\n```", "```cpp\nvoid ADelegateListener::EndPlay(const EEndPlayReason::Type EndPlayReason)\n{\n    Super::EndPlay(EndPlayReason);\n    UWorld* TheWorld = GetWorld();\n\n    if (TheWorld != nullptr)\n    {\n        AGameModeBase* GameMode = \n                               UGameplayStatics::GetGameMode(TheWorld);\n\n        AChapter_05GameModeBase * MyGameMode = \n                               Cast<AChapter_05GameModeBase>(GameMode);\n\n        if (MyGameMode != nullptr)\n        {\n            MyGameMode->MyStandardDelegate.Unbind();\n        }\n    }\n}\n```", "```cpp\nDECLARE_DELEGATE(FStandardDelegateSignature)\nDECLARE_DELEGATE_OneParam(FParamDelegateSignature, FLinearColor) \nUCLASS()\nclass CHAPTER_05_API AChapter_05GameModeBase : public AGameModeBase\n```", "```cpp\nDECLARE_DELEGATE(FStandardDelegateSignature)\nDECLARE_DELEGATE_OneParam(FParamDelegateSignature, FLinearColor)\n\nUCLASS()\nclass CHAPTER_05_API AChapter_05GameModeBase : public AGameModeBase\n{\n  GENERATED_BODY()\n\npublic:\n    FStandardDelegateSignature MyStandardDelegate;\n\n    FParamDelegateSignature MyParameterDelegate;\n\n};\n```", "```cpp\n#pragma once\n\n#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n#include \"Components/PointLightComponent.h\"\n#include \"ParamDelegateListener.generated.h\"\n\nUCLASS()\nclass CHAPTER_05_API AParamDelegateListener : public AActor\n{\n    GENERATED_BODY()\n\npublic: \n    // Sets default values for this actor's properties\n    AParamDelegateListener();\n\n UFUNCTION()\n void SetLightColor(FLinearColor LightColor);\n\n UPROPERTY()\n UPointLightComponent* PointLight;\n\nprotected:\n    // Called when the game starts or when spawned\n    virtual void BeginPlay() override;\n\npublic: \n    // Called every frame\n    virtual void Tick(float DeltaTime) override;\n\n};\n```", "```cpp\n// Sets default values\nAParamDelegateListener::AParamDelegateListener()\n{\n    // Set this actor to call Tick() every frame. You can turn this off \n    // to improve performance if you don't need it.\n    PrimaryActorTick.bCanEverTick = true;\n\n PointLight = CreateDefaultSubobject<UPointLightComponent>(\"PointLight\");\n RootComponent = PointLight;\n\n}\n```", "```cpp\n#include \"ParamDelegateListener.h\"\n#include \"Chapter_05GameModeBase.h\"\n#include \"Kismet/GameplayStatics.h\"\n```", "```cpp\n// Called when the game starts or when spawned\nvoid AParamDelegateListener::BeginPlay()\n{\n    Super::BeginPlay();\n\n    UWorld* TheWorld = GetWorld();\n\n    if (TheWorld != nullptr)\n    {\n        AGameModeBase* GameMode = \n                               UGameplayStatics::GetGameMode(TheWorld);\n\n        AChapter_05GameModeBase * MyGameMode = \n                               Cast<AChapter_05GameModeBase>(GameMode);\n\n        if (MyGameMode != nullptr)\n        {\n            MyGameMode->MyParameterDelegate.BindUObject(this, \n                               &AParamDelegateListener::SetLightColor);\n        }\n    }\n\n}\n```", "```cpp\nvoid AParamDelegateListener::SetLightColor(FLinearColor LightColor)\n{\n    PointLight->SetLightColor(LightColor);\n}\n```", "```cpp\n void AMyTriggerVolume::NotifyActorBeginOverlap(AActor* OtherActor) \n{ \n    auto Message = FString::Printf(TEXT(\"%s entered me\"), \n                   *(OtherActor->GetName()));\n\n    GEngine->AddOnScreenDebugMessage(-1, 1, FColor::Red, Message); \n\n    // Call our delegate\n    UWorld* TheWorld = GetWorld();\n\n    if (TheWorld != nullptr)\n    {\n        AGameModeBase* GameMode = \n                               UGameplayStatics::GetGameMode(TheWorld); \n        AChapter_05GameModeBase * MyGameMode = \n                               Cast<AChapter_05GameModeBase>(GameMode);\n\n        if(MyGameMode != nullptr)\n        {\n            MyGameMode->MyStandardDelegate.ExecuteIfBound();\n\n            // Call the function using a parameter\n auto Color = FLinearColor(1, 0, 0, 1);\n MyGameMode->MyParameterDelegate.ExecuteIfBound(Color);\n        }\n\n    }\n}\n```", "```cpp\n// Called when the game starts or when spawned\nvoid AParamDelegateListener::BeginPlay()\n{\n    Super::BeginPlay();\n\n    UWorld* TheWorld = GetWorld();\n\n    if (TheWorld != nullptr)\n    {\n        AGameModeBase* GameMode = \n                               UGameplayStatics::GetGameMode(TheWorld);\n\n        AChapter_05GameModeBase * MyGameMode = \n                               Cast<AChapter_05GameModeBase>\n                               (GameMode);\n\n        if (MyGameMode != nullptr)\n        {\n            MyGameMode->MyParameterDelegate.BindUObject(this, \n                        &AParamDelegateListener::SetLightColor, \n                        false);\n        }\n    }\n\n}\n```", "```cpp\nUCLASS()\nclass CHAPTER_05_API AParamDelegateListener : public AActor\n{\n    GENERATED_BODY()\n\npublic: \n    // Sets default values for this actor's properties\n    AParamDelegateListener();\n\n    UFUNCTION()\n    void SetLightColor(FLinearColor LightColor, bool EnableLight);\n\n    UPROPERTY()\n    UPointLightComponent* PointLight;\n\nprotected:\n    // Called when the game starts or when spawned\n    virtual void BeginPlay() override;\n\npublic: \n    // Called every frame\n    virtual void Tick(float DeltaTime) override;\n\n};\n```", "```cpp\nvoid AParamDelegateListener::SetLightColor(FLinearColor LightColor, bool EnableLight)\n{\n    PointLight->SetLightColor(LightColor);\n    PointLight->SetVisibility(EnableLight);\n}\n```", "```cpp\nDECLARE_DELEGATE(FStandardDelegateSignature)\nDECLARE_DELEGATE_OneParam(FParamDelegateSignature, FLinearColor)\nDECLARE_MULTICAST_DELEGATE(FMulticastDelegateSignature) \nUCLASS()\nclass CHAPTER_05_API AChapter_05GameModeBase : public AGameModeBase\n{\n  GENERATED_BODY()\n\npublic:\n    FStandardDelegateSignature MyStandardDelegate;\n\n    FParamDelegateSignature MyParameterDelegate;\n\n    FMulticastDelegateSignature MyMulticastDelegate;\n\n};\n```", "```cpp\n#pragma once\n\n#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n#include \"Components/PointLightComponent.h\"\n#include \"MulticastDelegateListener.generated.h\"\n\nUCLASS()\nclass CHAPTER_05_API AMulticastDelegateListener : public AActor\n{\n  GENERATED_BODY()\n\npublic: \n  // Sets default values for this actor's properties\n  AMulticastDelegateListener();\n\n    UFUNCTION()\n void ToggleLight();\n\n UFUNCTION()\n virtual void EndPlay(const EEndPlayReason::Type EndPlayReason) \n    override;\n\n UPROPERTY()\n UPointLightComponent* PointLight;\n\n FDelegateHandle MyDelegateHandle;\n\nprotected:\n  // Called when the game starts or when spawned\n  virtual void BeginPlay() override;\n\npublic: \n  // Called every frame\n  virtual void Tick(float DeltaTime) override;\n\n};\n```", "```cpp\n// Sets default values\nAMulticastDelegateListener::AMulticastDelegateListener()\n{\n   // Set this actor to call Tick() every frame. You can turn this \n   //off to improve performance if you don't need it.\n  PrimaryActorTick.bCanEverTick = true;\n\n PointLight = CreateDefaultSubobject<UPointLightComponent>\n    (\"PointLight\");\n RootComponent = PointLight;\n}\n```", "```cpp\n    #include \"MulticastDelegateListener.h\"\n    #include \"Chapter_05GameModeBase.h\"\n    #include \"Kismet/GameplayStatics.h\"\n    ```", "```cpp\n    // Called when the game starts or when spawned\n    void AMulticastDelegateListener::BeginPlay()\n    {\n      Super::BeginPlay();\n\n     UWorld* TheWorld = GetWorld();\n\n     if (TheWorld != nullptr)\n     {\n     AGameModeBase* GameMode = \n     UGameplayStatics::GetGameMode(TheWorld);\n\n     AChapter_05GameModeBase * MyGameMode = \n     Cast<AChapter_05GameModeBase>\n                                   (GameMode);\n\n     if (MyGameMode != nullptr)\n     {\n     MyDelegateHandle = MyGameMode-\n                >MyMulticastDelegate.AddUObject(this, \n                &AMulticastDelegateListener::ToggleLight);\n     }\n     }\n\n    }\n    ```", "```cpp\n    void AMulticastDelegateListener::ToggleLight() \n    { \n      PointLight->ToggleVisibility(); \n    } \n    ```", "```cpp\n    void AMulticastDelegateListener::EndPlay (const EEndPlayReason::Type EndPlayReason)\n    {\n        Super::EndPlay(EndPlayReason);\n\n        UWorld* TheWorld = GetWorld();\n\n        if (TheWorld != nullptr)\n        {\n            AGameModeBase* GameMode = \n                                   UGameplayStatics::GetGameMode(TheWorld);\n\n            AChapter_05GameModeBase * MyGameMode = \n                                   Cast<AChapter_05GameModeBase>\n                                   (GameMode);\n\n            if (MyGameMode != nullptr)\n            {\n                MyGameMode-\n                >MyMulticastDelegate.Remove(MyDelegateHandle);\n            }\n        }\n\n    }\n    ```", "```cpp\n    MyGameMode->MyMulticastDelegate.Broadcast(); \n    ```", "```cpp\n    DECLARE_EVENT(AMyTriggerVolume, FPlayerEntered) \n    ```", "```cpp\n    FPlayerEntered OnPlayerEntered; \n    ```", "```cpp\n    OnPlayerEntered.Broadcast();\n    ```", "```cpp\n    #pragma once\n\n    #include \"CoreMinimal.h\"\n    #include \"GameFramework/Actor.h\"\n    #include \"Components/PointLightComponent.h\"\n    #include \"MyTriggerVolume.h\"\n    #include \"TriggerVolEventListener.generated.h\"\n\n    UCLASS()\n    class CHAPTER_05_API ATriggerVolEventListener : public AActor\n    {\n        GENERATED_BODY()\n\n    public: \n        // Sets default values for this actor's properties\n        ATriggerVolEventListener();\n\n        UPROPERTY()\n     UPointLightComponent* PointLight;\n\n     UPROPERTY(EditAnywhere)\n     AMyTriggerVolume* TriggerEventSource;\n\n     UFUNCTION()\n     void OnTriggerEvent();\n\n    protected:\n        // Called when the game starts or when spawned\n        virtual void BeginPlay() override;\n\n    public: \n        // Called every frame\n        virtual void Tick(float DeltaTime) override;\n\n    };\n    ```", "```cpp\n    // Sets default values\n    ATriggerVolEventListener::ATriggerVolEventListener()\n    {\n        // Set this actor to call Tick() every frame. You can turn this \n        //off to improve performance if you don't need it.\n        PrimaryActorTick.bCanEverTick = true;\n\n     PointLight = CreateDefaultSubobject<UPointLightComponent>\n        (\"PointLight\");\n     RootComponent = PointLight;\n    }\n    ```", "```cpp\n    // Called when the game starts or when spawned\n    void ATriggerVolEventListener::BeginPlay()\n    {\n        Super::BeginPlay();\n\n     if (TriggerEventSource != nullptr)\n     {\n     TriggerEventSource->OnPlayerEntered.AddUObject(this,            \n            &ATriggerVolEventListener::OnTriggerEvent);\n     }\n\n    }\n    ```", "```cpp\n    void ATriggerVolEventListener::OnTriggerEvent() \n    { \n      PointLight->SetLightColor(FLinearColor(0, 1, 0, 1)); \n    }\n    ```", "```cpp\n    DECLARE_MULTICAST_DELEGATE_TwoParams(FOnTimeChangedSignature, int32, \n                                         int32)\n    UCLASS()\n    class CHAPTER_05_API ATimeOfDayHandler : public AActor\n    ```", "```cpp\n    FOnTimeChangedSignature OnTimeChanged; \n    ```", "```cpp\n    UPROPERTY() \n    int32 TimeScale; \n\n    UPROPERTY() \n    int32 Hours; \n    UPROPERTY() \n    int32 Minutes; \n\n    UPROPERTY() \n    float ElapsedSeconds; \n    ```", "```cpp\n    // Sets default values\n    ATimeOfDayHandler::ATimeOfDayHandler()\n    {\n        // Set this actor to call Tick() every frame. You can turn this   \n       //  off to improve performance if you don't need it.\n        PrimaryActorTick.bCanEverTick = true;\n\n     TimeScale = 60;\n     Hours = 0;\n     Minutes = 0;\n     ElapsedSeconds = 0;\n    }\n    ```", "```cpp\n    // Called every frame\n    void ATimeOfDayHandler::Tick(float DeltaTime)\n    {\n        Super::Tick(DeltaTime);\n\n     ElapsedSeconds += (DeltaTime * TimeScale);\n\n     if(ElapsedSeconds > 60)\n     {\n     ElapsedSeconds -= 60;\n     Minutes++;\n\n     if (Minutes > 60)\n     {\n     Minutes -= 60;\n     Hours++;\n     }\n\n     OnTimeChanged.Broadcast(Hours, Minutes);\n     }\n\n    }\n    ```", "```cpp\n    #pragma once\n\n    #include \"CoreMinimal.h\"\n    #include \"GameFramework/Actor.h\"\n    #include \"Clock.generated.h\"\n\n    UCLASS()\n    class CHAPTER_05_API AClock : public AActor\n    {\n        GENERATED_BODY()\n\n    public: \n        // Sets default values for this actor's properties\n        AClock();\n\n     UPROPERTY()\n     USceneComponent* RootSceneComponent;\n\n     UPROPERTY()\n     UStaticMeshComponent* ClockFace;\n\n     UPROPERTY()\n     USceneComponent* HourHandle;\n\n     UPROPERTY()\n     UStaticMeshComponent* HourHand;\n\n     UPROPERTY()\n     USceneComponent* MinuteHandle;\n\n     UPROPERTY()\n     UStaticMeshComponent* MinuteHand;\n\n     UFUNCTION()\n     void TimeChanged(int32 Hours, int32 Minutes);\n\n     FDelegateHandle MyDelegateHandle;\n\n    protected:\n        // Called when the game starts or when spawned\n        virtual void BeginPlay() override;\n\n    public: \n        // Called every frame\n        virtual void Tick(float DeltaTime) override;\n\n    };\n    ```", "```cpp\n    #include \"TimeOfDayHandler.h\"\n    #include \"Kismet/GameplayStatics.h\"\n\n    // Sets default values\n    AClock::AClock()\n    {\n        // Set this actor to call Tick() every frame. You can turn this off to improve performance if you don't need it.\n        PrimaryActorTick.bCanEverTick = true;\n\n        RootSceneComponent = CreateDefaultSubobject<USceneComponent>(\"RootSceneComponent\");\n        ClockFace = CreateDefaultSubobject<UStaticMeshComponent>(\"ClockFace\"); \n        HourHand = CreateDefaultSubobject<UStaticMeshComponent>(\"HourHand\"); \n        MinuteHand = CreateDefaultSubobject<UStaticMeshComponent>(\"MinuteHand\"); \n        HourHandle = CreateDefaultSubobject<USceneComponent>(\"HourHandle\"); \n        MinuteHandle = CreateDefaultSubobject<USceneComponent>(\"MinuteHandle\"); \n\n        auto MeshAsset = ConstructorHelpers::FObjectFinder<UStaticMesh>(TEXT(\"StaticMesh'/Engine/BasicShapes/Cylinder.Cylinder'\")); \n\n        if (MeshAsset.Object != nullptr)\n        {\n            ClockFace->SetStaticMesh(MeshAsset.Object);\n            HourHand->SetStaticMesh(MeshAsset.Object);\n            MinuteHand->SetStaticMesh(MeshAsset.Object);\n        }\n\n        RootComponent = RootSceneComponent;\n\n        HourHand->AttachToComponent(HourHandle, \n                         FAttachmentTransformRules::KeepRelativeTransform);\n\n        MinuteHand->AttachToComponent(MinuteHandle, \n                         FAttachmentTransformRules::KeepRelativeTransform);\n\n        HourHandle->AttachToComponent(RootSceneComponent, \n                         FAttachmentTransformRules::KeepRelativeTransform);\n\n        MinuteHandle->AttachToComponent(RootSceneComponent, \n                         FAttachmentTransformRules::KeepRelativeTransform);\n\n        ClockFace->AttachToComponent(RootSceneComponent, \n                         FAttachmentTransformRules::KeepRelativeTransform);\n\n        ClockFace->SetRelativeTransform(FTransform(FRotator(90, 0, 0), \n                                        FVector(10, 0, 0), \n                                        FVector(2, 2, 0.1)));\n\n        HourHand->SetRelativeTransform(FTransform(FRotator(0, 0, 0), \n                                       FVector(0, 0, 25), \n                                       FVector(0.1, 0.1, 0.5)));\n\n        MinuteHand->SetRelativeTransform(FTransform(FRotator(0, 0, 0), \n                                         FVector(0, 0, 50), \n                                         FVector(0.1, 0.1, 1)));\n\n    }\n    ```", "```cpp\n    // Called when the game starts or when spawned\n    void AClock::BeginPlay()\n    {\n        Super::BeginPlay();\n\n     TArray<AActor*> TimeOfDayHandlers; \n     UGameplayStatics::GetAllActorsOfClass(GetWorld(), \n                                          ATimeOfDayHandler::StaticClass(), \n                                              TimeOfDayHandlers); \n     if (TimeOfDayHandlers.Num() != 0)\n     {\n     auto TimeOfDayHandler = Cast<ATimeOfDayHandler>\n            (TimeOfDayHandlers[0]);\n     MyDelegateHandle =  \n            TimeOfDayHandler->OnTimeChanged.AddUObject(this, \n            &AClock::TimeChanged);\n     }\n\n    }\n    ```", "```cpp\n    void AClock::TimeChanged(int32 Hours, int32 Minutes)\n    {\n        HourHandle->SetRelativeRotation(FRotator(0, 0, 30 * Hours));\n        MinuteHandle->SetRelativeRotation(FRotator(0, 0, 6 * Minutes));\n    }\n    ```", "```cpp\n    DECLARE_DELEGATE(FPickedupEventSignature) \n    ```", "```cpp\n    // Fill out your copyright notice in the Description page of Project Settings.\n\n    #pragma once\n\n    #include \"CoreMinimal.h\"\n    #include \"GameFramework/Actor.h\"\n    #include \"GameFramework/RotatingMovementComponent.h\"\n    #include \"Pickup.generated.h\"\n\n    DECLARE_DELEGATE(FPickedupEventSignature)\n    UCLASS()\n    class CHAPTER_05_API APickup : public AActor\n    {\n        GENERATED_BODY()\n\n    public: \n        // Sets default values for this actor's properties\n        APickup();\n\n     virtual void NotifyActorBeginOverlap(AActor* OtherActor) \n        override;\n\n     UPROPERTY()\n     UStaticMeshComponent* MyMesh;\n\n     UPROPERTY()\n     URotatingMovementComponent* RotatingComponent;\n\n     FPickedupEventSignature OnPickedUp;\n\n    protected:\n        // Called when the game starts or when spawned\n        virtual void BeginPlay() override;\n\n    public: \n        // Called every frame\n        virtual void Tick(float DeltaTime) override;\n\n    };\n\n    ```", "```cpp\n    #include \"ConstructorHelpers.h\"\n    ```", "```cpp\n    // Sets default values\n    APickup::APickup()\n    {\n       // Set this actor to call Tick() every frame. You can turn this  \n       // off to improve performance if you don't need it.\n      PrimaryActorTick.bCanEverTick = true;\n\n        MyMesh = CreateDefaultSubobject<UStaticMeshComponent>(\"MyMesh\");\n\n     RotatingComponent = \n        CreateDefaultSubobject<URotatingMovementComponent>\n        (\"RotatingComponent\");\n     RootComponent = MyMesh;\n\n     auto MeshAsset = ConstructorHelpers::FObjectFinder<UStaticMesh>\n        (TEXT(\"StaticMesh'/Engine/BasicShapes/Cube.Cube'\"));\n\n     if (MeshAsset.Object != nullptr)\n     {\n     MyMesh->SetStaticMesh(MeshAsset.Object);\n     }\n\n     MyMesh->SetCollisionProfileName(TEXT(\"OverlapAllDynamic\"));\n     RotatingComponent->RotationRate = FRotator(10, 0, 10);\n    }\n    ```", "```cpp\n    void APickup::NotifyActorBeginOverlap(AActor* OtherActor)\n    {\n        OnPickedUp.ExecuteIfBound();\n    }\n    ```", "```cpp\n    #pragma once\n\n    #include \"CoreMinimal.h\"\n    #include \"GameFramework/Actor.h\"\n    #include \"Pickup.h\"\n    #include \"PickupSpawner.generated.h\"\n\n    UCLASS()\n    class CHAPTER_05_API APickupSpawner : public AActor\n    {\n        GENERATED_BODY()\n\n    public: \n        // Sets default values for this actor's properties\n        APickupSpawner();\n\n       UPROPERTY() \n     USceneComponent* SpawnLocation; \n\n     UFUNCTION() \n     void PickupCollected(); \n\n     UFUNCTION() \n     void SpawnPickup(); \n\n     UPROPERTY() \n     APickup* CurrentPickup; \n\n     FTimerHandle MyTimer;\n\n    protected:\n        // Called when the game starts or when spawned\n        virtual void BeginPlay() override;\n\n    public: \n        // Called every frame\n        virtual void Tick(float DeltaTime) override;\n\n    };\n\n    ```", "```cpp\n    SpawnLocation = \n     CreateDefaultSubobject<USceneComponent>(\"SpawnLocation\");\n    ```", "```cpp\n    // Called when the game starts or when spawned\n    void APickupSpawner::BeginPlay()\n    {\n        Super::BeginPlay();\n\n        SpawnPickup();\n\n    }\n    ```", "```cpp\n    void APickupSpawner::PickupCollected()\n    {\n        GetWorld()->GetTimerManager().SetTimer(MyTimer, \n                                               this, \n                                              &APickupSpawner::SpawnPickup, \n                                              10, \n                                              false);\n\n        CurrentPickup->OnPickedUp.Unbind();\n        CurrentPickup->Destroy();\n    }\n    ```", "```cpp\n    void APickupSpawner::SpawnPickup()\n    {\n        UWorld* MyWorld = GetWorld();\n\n        if (MyWorld != nullptr) \n        {\n            CurrentPickup = MyWorld->SpawnActor<APickup>( \n                                                    APickup::StaticClass(), \n                                                         GetTransform());\n\n            CurrentPickup->OnPickedUp.BindUObject(this, \n                                         &APickupSpawner::PickupCollected);\n        }\n    }\n    ```"]