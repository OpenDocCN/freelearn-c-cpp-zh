- en: '*Chapter 13*'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Teamwork
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Unless I've completely failed at writing convincingly for the last hundred-and-something
    pages, you should have the impression that software is a social activity. We work
    with other people to produce software, and the value system that we share as makers
    of software shapes the software we make. We give (or sell) our software to other
    people to use, and that shapes the way they see themselves and work with each
    other. Software can reinforce existing bonds or create new ones, but it can also
    destroy or reduce the importance of existing connections. Professionally speaking,
    the bonds our software has influence over that are closest to our experiences
    when writing code are with the team that we interact with every day.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter discusses these bonds: how we work as a team, how our colleagues
    work with us, and the benefits and tensions that can occur.'
  prefs: []
  type: TYPE_NORMAL
- en: Focus versus Interruption
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We've heard the clarion call. We've heard how programmers need to get *in the
    zone*—[http://www.joelonsoftware.com/articles/fog0000000068.html](http://www.joelonsoftware.com/articles/fog0000000068.html)
    in order to get their best work done, and that it's hard to enter the zone. We've
    heard that a simple phone call or chat from a friend is all it takes to exit the
    zone, but that getting back in can take 15 minutes. So why doesn't everyone work
    from home? If having other humans around is so poisonous to productivity, why
    does *any* business even bother with the capital expenditure of an office?
  prefs: []
  type: TYPE_NORMAL
- en: Because, while a good person works well on their own, two people working together
    can be *awesome*. Let me describe the day I had prior to writing this paragraph.
    I didn't really get much done in the morning, because a colleague asked me about
    memory leaks in the code he was working on and I helped him with that. This solved
    his problem much faster than he would've solved it on his own.
  prefs: []
  type: TYPE_NORMAL
- en: So, I only really got about an hour of time "in the zone" before lunch, and
    it didn't go so well. I made a bit of progress on my problem, but then hit a problem
    where a simple change to add new behavior broke the stuff that already existed.
    I couldn't work out why that was. Anyway, it was then lunchtime, so we went to
    get a sandwich and I described the problem to my colleague. Before we got to the
    sandwich shop, we'd already agreed what the problem was and what I should do to
    solve it, which worked first time when I got back to my desk.
  prefs: []
  type: TYPE_NORMAL
- en: 'The point of this anecdote is that, had we both been left "in the zone," we
    could undoubtedly have worked faster: up to the point where we could not individually
    solve our problems. We would''ve more efficiently failed at our jobs. As it was,
    having the possibility to work together let us pool our knowledge, even though
    it meant each of us getting taken out of "the zone" at some point.'
  prefs: []
  type: TYPE_NORMAL
- en: 'I''ve worked in various environments. In my first job, I had an office to myself—albeit
    one where one of the walls was the lift shaft and the whole shebang was underground.
    (In fact, this office had previously been the bunk room for on-site **Digital
    Equipment Corporation** engineers maintaining the computer that came a few before
    the systems I was responsible for. Either they were very heavy sleepers, or they
    turned the lifts off during the night shifts.) Since then, I''ve worked in cubicle
    spaces, open-plan spaces, and in my house. I know what it''s like to be "in the
    zone": but I also know what it''s like to be banging your head up against a wall
    when you can''t solve a problem and have no one to ask about it. I know what it''s
    like to work for 10 hours straight on a really interesting problem, and what it''s
    like to be told after 5 minutes that the company already has a solution you could
    use. I know what it''s like when the guitars over in the corner are beckoning,
    and what it''s like to feed off the energy of a handful of other engrossed and
    motivated people sat nearby.'
  prefs: []
  type: TYPE_NORMAL
- en: The fact is that "the zone" is not always relevant, as the case example above
    shows. You may want to enter "the zone" to do some research from books or the
    internet, but then it'd probably be helpful to get some input from other people
    to compare their experiences and opinions with what you learned. "The zone" is
    helpful while you're coding, but only if you know or can work out what you're
    supposed to be doing. If the problem is at all difficult, talking it over with
    other people will be more helpful.
  prefs: []
  type: TYPE_NORMAL
- en: 'A final point here: humans are *"an intensely social species"*—[https://thoughteconomics.com/](https://thoughteconomics.com/)
    and the best environments for entering "the zone"—working from home or in a secluded
    area—are the worst for having shared social experiences with our colleagues. Some
    of us are lucky enough to be able to fill our social requirements with interactions
    among friends or family outside of work, but for more extroverted people who prize
    continual social contact, working in solitude can have a negative impact on mental
    health.'
  prefs: []
  type: TYPE_NORMAL
- en: 'So, working alone in conditions conducive to solitary work is sometimes useful
    but can be emotionally unstimulating. Working with other people can be rewarding
    and beneficial, but also distracting and frustrating. How do we balance these
    two aspects? An approach that''s commonly employed is the "headphones rule." Headphones
    on: I''m concentrating. Headphones off: feel free to talk to me. A variant of
    the headphones rule is the **duck of productivity**—[https://www.youtube.com/watch?v=oBw_cKdnUgw&index=11&list=PLKMpKKmHd2SvY9DLg_Lozb06M2MLcNImz&t=38s](https://www.youtube.com/watch?v=oBw_cKdnUgw&index=11&list=PLKMpKKmHd2SvY9DLg_Lozb06M2MLcNImz&t=38s)).'
  prefs: []
  type: TYPE_NORMAL
- en: 'In my experience, enforcing the headphones or duck of productivity rule is
    difficult: people on both sides of the headphones feel it''s rude to ignore friends
    and colleagues regardless of headphone status. Changing the social rules of the
    whole team can be hard. One group I worked in came up with a much simpler rule
    that''s easier to work with: if I''m in the office, then I''m here to talk to
    everyone else and get some collaboration done. If I''m anywhere else (the canteen,
    a meeting room, at home, a coffee shop nearby), then I''m getting work done on
    my own.'
  prefs: []
  type: TYPE_NORMAL
- en: Where the balance needs to be drawn varies based on the individual; therefore,
    the optimum approach for a team to take depends on the people who comprise the
    team. More gregarious people will want to spend more time working with others,
    so having a policy where people who want to work uninterrupted stay at home will
    isolate them.
  prefs: []
  type: TYPE_NORMAL
- en: One of the more general zone-related techniques I've come across is based on
    very lightweight time tracking. This calls for a kitchen timer (or an app – or,
    if you're in a hotel and enjoy annoying receptionists, wake-up calls) to be set
    for 25 minutes. During those 25 minutes, focus on your problem. If someone wants
    help, ask if you can get back to them after the time's up. At the end of those
    25 minutes, take a short break, answer any interruptions that came up, and plan
    to enter the next 25 minutes. If you absolutely need to work on something else,
    it's suggested that you abort (rather than pause) the work period and start again
    when the opportunity arises.
  prefs: []
  type: TYPE_NORMAL
- en: 'An important observation regarding this technique is that it''s OK to not be
    in a timed stretch if you''re taking a break or helping someone else: both important
    parts of your working day. You might only manage one or two 25-minute bursts on
    some days, but at least you get to control the trade-off between "the zone" and
    all the other things you have to do.'
  prefs: []
  type: TYPE_NORMAL
- en: I've only used this technique for a short while, but I've found that it does
    help to improve focus. Initially, I was surprised by how long a 25-minute stretch
    can seem to last! As I write that, it seems absurd, but it shows how much I was
    allowing distractions such as social networks to get in the way of my focus.
  prefs: []
  type: TYPE_NORMAL
- en: Remaining focused even for as long as 25 minutes needs support from both your
    environment (the subject of the next section) and your tools. One iPad app that
    I worked on could only be tested on tethered iPads, as a third-party library was
    not supplied for the simulator. It took about 30 seconds to "*Build and Run*"
    or to launch any unit tests – plenty of time for me to be distracted by email
    or Twitter. I also found that my ability to stay disciplined tails off after lunch;
    I still get work done, but I'm much more likely to carry on working into the breaks
    or stop in the middle of a stretch.
  prefs: []
  type: TYPE_NORMAL
- en: Working Environment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Your interactions with your colleagues are a small portion of the collection
    of experiences and inputs that make up your entire working environment. Unsurprisingly,
    the best environment is no less personal than the best trade-off between solitary
    and team working; the best I can do here is describe what's worked for me and
    some of the things you could consider to reflect on your own environment.
  prefs: []
  type: TYPE_NORMAL
- en: Firstly, if you're working somewhere that expects a "standard" desk layout with
    no decoration or personalization, that's just not a very healthy environment at
    all. People like to decorate their environments *to express their individuality*—[https://www.colorado.edu/cmci/academics/communication](https://www.colorado.edu/cmci/academics/communication).
    A homogeneous workspace may be good for ensuring the facilities manager's magnolia
    paint does not get stained but does not allow employees any creative freedom.
    Constraining the creativity of our software makers is not good for making creative
    software.
  prefs: []
  type: TYPE_NORMAL
- en: The 1999 edition of Peopleware—[https://books.google.co.uk/books/about/Peopleware.html?id=eA9PAAAAMAAJ&redir_esc=y](https://books.google.co.uk/books/about/Peopleware.html?id=eA9PAAAAMAAJ&redir_esc=y)
    has a lot to say about working conditions. I arrived into working life too late
    to see the full-height cubicle farms they complain about (though I have, of course,
    seen *Tron and Office Space*), but other aspects of their discussion of office
    setups are still relevant.
  prefs: []
  type: TYPE_NORMAL
- en: 'A couple of places I''ve worked in have had those huge **Voice-over-IP** desk
    phones with all the buttons, redirect options, switches, and so-on that the conn
    in **Star Trek** first introduced to human-machine interaction. An early discovery
    of mine was that no one knows how to operate those phones, which means that you
    have plausible deniability for any of your actions, should you need it. Find the
    manual online and locate the one mute/divert button you need, then work peacefully.
    When someone complains that they were trying to phone you:'
  prefs: []
  type: TYPE_NORMAL
- en: Apologize for having hit the wrong button when you were trying to divert calls
    to your mobile phone.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Suggest that email or some other asynchronous communication is a better way
    to reach you.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Two important features of work environments for me are bookshelves and whiteboards.
    Even when I work from home, I have a whiteboard and marker to hand for quick diagramming
    – quite a small one that I can hold up to the Skype camera if I need to. *Not*
    having a whiteboard can have a deleterious effect on the rest of the workspace.
    One office I worked in only had whiteboards in the meeting rooms, so we grabbed
    dry markers and drew diagrams all over the (cheap, white, fibreboard) bookshelves.
    We soon found that the ink was really hard to clean off; but having ruined the
    bookshelves there was no reason to look back. Diagrams quickly became palimpsests
    as new "art" was drawn over the older stuff that couldn't be erased.
  prefs: []
  type: TYPE_NORMAL
- en: I mentioned earlier that my first office was underground. A literature review
    of the *effects of natural light on building occupants*—[http://indoorenvironment.org/effects-of-natural-light-on-building-occupants/](http://indoorenvironment.org/effects-of-natural-light-on-building-occupants/)
    found that people feel better and, as a result, perform better in environments
    with natural lighting. This result doesn't just apply to workers; students and
    even shoppers are affected. As DeMarco and Lister observe, there's no excuse for
    building a work environment where some people don't have access to a window. People
    who think it's impossible to give everyone a window need to look at the way hotels
    are designed.
  prefs: []
  type: TYPE_NORMAL
- en: Prioritizing Work
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most people who make software will have more than one thing they are working
    on at any time. The choice could be between different tasks on one project, tasks
    on different projects, and other work such as preparing presentations, responding
    to emails, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Some people like to capture all of these tasks in a big review system such as
    **GTD** ([http://www.davidco.com/](http://www.davidco.com/)) so that, at any time,
    they can review the outstanding tasks in their current context and choose one
    to work on next. A much simpler approach I was taught by the human resources department
    at **Sophos** ([http://www.sophos.com](http://www.sophos.com)), who got it from
    President Eisenhower, was to draw four quadrants indicating the urgency and importance
    of tasks.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.1: The Eisenhower Matrix'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15099_13_01.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 13.1: The Eisenhower Matrix'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Now think about the tasks that are currently pending and put them into these
    quadrants. Anything in the top-right quadrant is both important and urgent, so
    probably needs to be done soon. Anything that's important but not urgent doesn't
    need to be done *yet*, and anything that's urgent but not important doesn't need
    to be done *at all* – or at least not by you.
  prefs: []
  type: TYPE_NORMAL
- en: 'A large amount of a programmer''s work is prioritized by other agents anyway,
    which means that, much of the time, it''s clear what you should be working on
    next. Later in this chapter, we''ll examine some software development methodologies
    designed to allow the whole team to decide what they''re working on. (In one of
    my rare rages against the establishment, I''m going to call them "patterns for
    software project management" rather than "methodologies." The latter word is used—alongside
    "paradigm"—in so many contexts as to be ambiguous. I saw Barbara Liskov give a
    talk reflecting on her work on data types where she used "methodology" to mean
    an overall software design approach: so object-oriented, structured, procedural,
    and so on are all "methodologies" at the same time that Waterfall, Scrum, and
    so on are.)'
  prefs: []
  type: TYPE_NORMAL
- en: Tell Experts What Needs to Be Done
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In other words, don''t tell experts what to do. The more cynical of them will
    do what you tell them. That doesn''t sound so bad, until you realize that *they*
    are the expert and are doing it out of spite. Neal Stephenson expanded upon this
    idea in his novel **Cryptonomicon**—[https://books.google.co.uk/books/about/Cryptonomicon.html?id=Lw-00wTgBy8C&redir_esc=y](https://books.google.co.uk/books/about/Cryptonomicon.html?id=Lw-00wTgBy8C&redir_esc=y):'
  prefs: []
  type: TYPE_NORMAL
- en: '*The extreme formality with which he addresses these officers carries an important
    subtext: your problem, sir, is deciding what you want me to do, and my problem,
    sir, is doing it. My gung-ho posture says that once you give the order I''m not
    going to bother you with any of the details—and your half of the bargain is you
    had better stay on your side of the line, sir, and not bother me with any of the
    chickenshit politics that you have to deal with for a living. The implied responsibility
    placed upon the officer''s shoulders by the subordinate''s unhesitating willingness
    to follow orders is a withering burden to any officer with half a brain, and Shaftoe
    has more than once seen seasoned noncoms reduce green lieutenants to quivering
    blobs simply by standing before them and agreeing, cheerfully, to carry out their
    orders.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'And it''s not just fictional military figures who talk about this. General
    George S. Patton:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Never tell people how to do things. Tell them what to do, and they will surprise
    you with their ingenuity.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two sides to this. One is that the other person probably knows more
    about what you''re asking than you do: OK, so you''re a great programmer, but
    when it comes to graphic design, user interaction, documentation, translation,
    marketing, or any of the other things that go into building software, there are
    likely to be people out there who can handle it better than you. Your best option
    is to find one of them, outline the goal, and leave them to it.'
  prefs: []
  type: TYPE_NORMAL
- en: The other issue to be aware of is that leaving someone else to it is a *lot*
    easier than taking control, because there's a lot less work involved. Once you
    get into the officer-marine relationship described in *Cryptonomicon*, you have
    to give *every* order because it becomes an expected part of the interaction that
    you *will* give every order. It's a lot quicker, and you get better results, to
    just say "this is the problem that needs solving" and let someone who's good at
    solving that problem assume responsibility.
  prefs: []
  type: TYPE_NORMAL
- en: So, the central trick to delegation is relinquishing control of the delegated
    task. That means the fundamental thing to learn is *trust*; not so much trusting
    the other person not to have messed it up but trusting yourself to have found
    the person who won't mess it up and to have communicated the problem to them clearly.
  prefs: []
  type: TYPE_NORMAL
- en: Working with Junior Programmers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Less-experienced programmers are just a special case of experts – they're experts-in-training.
    The above rules about dealing with experts apply, so let them know what needs
    doing, make sure you did that clearly, and let them get on with it.
  prefs: []
  type: TYPE_NORMAL
- en: The clarification aspect is the part that needs the most examination. Remembering
    *Chapter 10, Learning*, you'll find that different people learn in different ways.
    Some approach a new problem via experimentation, some by reading about concepts.
    *Diagrams help a lot of learners*. In my experience working as the senior developer
    on a team, it's important not to accidentally invert the expert-customer relationship,
    because then you get back into a micromanagement situation. Let the junior ask
    questions; indeed, encourage them to ask questions, but act as an oracle and not
    as a lecturer.
  prefs: []
  type: TYPE_NORMAL
- en: Having made yourself available while they're working, have a little retrospective
    when they've done the task. Try to avoid "I wouldn't have done it like that"—that's
    just an offensive statement of the obvious. No matter how experienced or skilled
    the other person is, you would've done it differently. The key question is not
    whether they've done *your* work but whether they've done *good* work. Find the
    things that work and call them out. Ask why the junior did them like that and
    reinforce those decisions. Find the things that don't work, ask why they did them
    like that, and discuss the issues. Focus on the *issues*; don't talk about the
    *quality of the work* (or the integrity of the worker). Your role as a teacher
    is to help the learner to build a generalized mental model of what they want to
    do.
  prefs: []
  type: TYPE_NORMAL
- en: '*A little aside on the subject of different ways of learning: I once found
    that body language gives you some great clues about how people think about their
    problems. I was working with a junior programmer and felt that I was not communicating
    very well. This programmer would solve the problems I posed, but often with some
    details missed out or not in the way I (thought I) had described.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Then, in one discussion, it struck me. When I''m describing a software system,
    I describe it spatially: my hands make boxes and circle shapes and I move these
    shapes around as messages or data flowing through the software. When the other
    programmer described them, his hands stayed flat and moved from top to bottom
    as he explained the steps. I was drawing diagrams; he was listening for lists!
    I switched to explaining problems by listing the features and found that details
    stopped disappearing between the two of us.*'
  prefs: []
  type: TYPE_NORMAL
- en: Working with Managers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are two (almost opposing) interpretations of the word "manager" as it
    applies to the work context. The conservative view is of the manager as the controlling
    force in charge of a group of people. This manager's position is seen as ensuring
    that their reports do the work expected by the business, and by extension, don't
    do anything unexpected.
  prefs: []
  type: TYPE_NORMAL
- en: The liberal view is the manager as leader or enabler. This manager's role is
    to ensure that their reports have the resources they need to get their work done,
    free from distractions that the rest of the business (or its customers and suppliers,
    and so on) might impose.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, I'm going to leave the political models aside and discuss the
    general idea of working with the person you have to report to. If you're a self-employed
    programmer, you don't have an *explicit* manager. You may still find, from time
    to time, that certain people fill similar roles; I know some independent developers
    who contract "business mentors" to act in a coaching and advisory capacity. In
    some cases, the social structure in which you work as a consultant or contractor
    may see you reporting to a specific person in the business you're supplying to.
    "Manager" will do as shorthand for all of these people.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look back over what I''ve said about working with experts: you should
    tell them *what* needs doing, not *how* to do it. You should expect your manager
    to know and understand this, and in return, of course, you should act like the
    professional expert that you are. Really, the manager''s task is as an *adaptor*.
    In one direction, they''re taking the business goals and strategies and adapting
    them into *tactics* – into things that can be done *now* to improve the strategic
    position. In the other direction, they''re taking your problems and concerns and
    adapting them into things the business can do to alleviate or remove those problems.'
  prefs: []
  type: TYPE_NORMAL
- en: The best managers I've worked with seem like they could do the second part of
    that context-free. It's about *coaching*; not about taking on the hard parts of
    your work. By countering every question, we ask with a question of their own,
    they force us to introspect, to diagnose our own problems, to suggest, and to
    evaluate our own solutions. They don't remove our *responsibility* to tackle the
    problems ourselves, even if they do accept the responsibility (and the authority)
    for implementing the solutions at times.
  prefs: []
  type: TYPE_NORMAL
- en: That appearance of context-free management may not be entirely realistic. In
    a questionnaire completed by about 80 developers, *Jeremy Leipzig*—[http://arxiv.org/abs/1303.2646v1](http://arxiv.org/abs/1303.2646v1)
    discovered that developers felt their relationship with their manager was easier
    if the manager came from a technical, rather than a business, background.
  prefs: []
  type: TYPE_NORMAL
- en: 'My hypothesis is that this is a communication issue, and thus has an effect
    on the first part of management (adapting the business''s needs into things we
    need to do). Every group has its specific language, its *argot* of jargon and
    slang terms. Computing is certainly no stranger to that (I imagine an Ubuntu forum
    and Mumsnet would react very differently to discussions about "zombie children,"
    for example). It can be hard to see when you''re immersed in it, but this language
    creates a social inequality: the in-crowd who understand the jargon and the out-crowd
    who don''t. If your manager is not part of the in-crowd, it''s possible that you
    both struggle for terms in which to explain things and identify them on some level
    as "not one of *us*."'
  prefs: []
  type: TYPE_NORMAL
- en: 'In *Chapter 9, Requirements Engineering*, I identified how the use of a ubiquitous
    language can help everyone to understand how the software you''re writing solves
    the problems that the customers need it to. Now, we find that a ubiquitous language
    has *political* benefits, too: it makes you all part of the same team. (One company
    I worked in managed to create silos of employees by devising a project code name.
    Often, these are fun little names chosen to both describe the whole project in
    shorthand, and to give everyone a sense of belonging, like having a team name.
    In this instance, the company didn''t provide a central glossary of what all the
    projects were named and what they did. This reinforced the feeling of "us and
    them" *inside* the company: you either were a member of the elite group who knew
    what "Merlot" meant or you were not.) Consider it your responsibility to find
    some linguistic common ground with your manager, even if you have a computer science
    background and they have an MBA. You''ll find it easier to remember that you''re
    both on the same team that way.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A final thought on working with managers that''s really about professional
    ethics: over the last few years, I''ve found that managers don''t like hearing
    bad news. It''s a whole lot worse though if they *don''t* hear the bad news and
    discover it for themselves, later. Being honest and alerting people to things
    going wrong early leads to some awkward conversations, but ultimately, you''ll
    be respected more than if you pretend everything''s going well up until the moment
    of disaster. I shouldn''t have let myself get into a position of experience on
    this one, but I have, so you don''t have to.'
  prefs: []
  type: TYPE_NORMAL
- en: Patterns of Software Project Management
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Over the last five decades, there have been numerous different ways to run a
    software project proposed and practiced. Over the last decade, I've been exposed
    to a few of them. Which will work for you depends on the team you're working with
    and the expectations of the people you're working for.
  prefs: []
  type: TYPE_NORMAL
- en: Waterfall
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: My first experience of a "death march" was on a waterfall project. The product
    manager wrote a document explaining the requirements of the new product. These
    were prioritized using 1-3 (with 1 being "we'll probably finish these in time,"
    and 2-3 taking up space on the page). Then, the lead developer wrote a functional
    specification, explaining what each of the controls in the product would be and
    how each of them would fulfil a requirement from the first document.
  prefs: []
  type: TYPE_NORMAL
- en: Given the functional specification, the lead developer (not necessarily the
    same one as mentioned previously) would estimate how long it'd take to build,
    and the lead tester would estimate how long it'd take to test. Then, the ship
    date was the day after that work ended! Having built and tested the thing, documentation
    could write a manual, translation could translate the whole lot, then it'd be
    beta tested, and finally, marketing could write a new website and it would all
    get launched with beer and nibbles in the office atrium.
  prefs: []
  type: TYPE_NORMAL
- en: I should stress that the death march was not a *result* of following the waterfall
    process. The death march was the result of an inexperienced team, poor communication
    and collaboration, and an unclear vision of what the business or the customers
    thought the product should be.
  prefs: []
  type: TYPE_NORMAL
- en: 'The waterfall process did make it harder to *react* to these problems, though.
    Limited visibility in the usual running of the project meant that most people
    involved had an idealized view of how the project *should* be progressing and
    treated that as reality. They didn''t have a view of how the project *was* progressing
    because that feedback was neither requested nor provided: come back when you''re
    ready to enter the testing phase. The expensive change-control procedure, involving
    sign-off from senior managers who weren''t involved with the usual running of
    the project, made it hard or even *undesirable* to react to eleventh-hour feedback.
    Unfortunately, the twelfth hour resembles the twelfth much more than it does the
    first.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In *Test-Driven iOS Development* section in *Chapter 5, Coding Practices*,
    I tried to paint the waterfall as a historical quirk that doesn''t hold any relevance
    for modern developers. This isn''t really true. If you''re doing contract or agency
    work, the customer will often have a mental model that goes something like:'
  prefs: []
  type: TYPE_NORMAL
- en: I tell you what app I want.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You build the app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Maybe we have a phone call every week, so I know you're still alive. If you
    send me a prototype, I might suggest moving a button or changing a word.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You put the app on the store.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: I retire to a cocaine-soaked mountain complex.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can dispel that myth. In fact, you probably should: if you get more feedback
    from your client, they''ll feel more engaged, and enjoy the process more. They''ll
    also end up with the product they *wanted*, not the one they *asked for* months
    ago. And if you *ask* for feedback from the client, they''ll give you *that* feedback
    instead of the stuff about the buttons and words.'
  prefs: []
  type: TYPE_NORMAL
- en: Scrum
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'I''ve seen multiple projects run in multiple ways all named "Scrum," which
    is why I call these things patterns rather than rules. Most have had the following
    in common:'
  prefs: []
  type: TYPE_NORMAL
- en: Short iteration lengths with work planned only for the upcoming iteration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Frequent feedback to the whole team on how work is progressing on the current
    iteration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Acceptance or rejection of the previous iteration's work at the end
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some form of retrospective on what to learn from the previous iteration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: None of these things is in itself contentious and looking at the problems identified
    with my waterfall project above, we can see the benefit of frequent feedback,
    measurement of quality, and particularly of learning from our mistakes as quickly
    as possible. But the implementation often leaves people scratching their heads
    or updating their CVs.
  prefs: []
  type: TYPE_NORMAL
- en: Take the "frequent feedback" point as an example. This is often embodied in
    the stand-up meeting. Does everyone actually stand up? If someone's late, do we
    wait or proceed without them? How long is it going to take (my record being an
    hour and a half, in a team with 16 developers who obviously only took 5 minutes
    each)? Do I actually need to know everything that comes up in the meeting? Why
    are you asking every day whether I've finished the thing I told you would take
    a week? (Actually, this one's my fault. I don't think that estimates are worth
    anything if they represent more than half a day of work. If I think something's
    going to take more than that, then I probably don't know what's involved and should
    find out before you start relying on my guesses.) Are minutes taken? If I want
    clarification on something do I ask now or after we've disbanded?
  prefs: []
  type: TYPE_NORMAL
- en: The thing is, despite these differences in approach, things tend to actually
    happen. Stuff gets done and you can see it getting done because you've got a feel
    for what everyone is doing. I tend to think of Scrum as the closest thing you'll
    get to **Agile software development**—[http://www.agilemanifesto.org/](http://www.agilemanifesto.org/)
    in an organization that still wants close managerial oversight, though in most
    situations I've encountered it doesn't quite match *the principles*—[http://www.agilemanifesto.org/principles.html](http://www.agilemanifesto.org/principles.html).
  prefs: []
  type: TYPE_NORMAL
- en: Lean Software
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Lean software isn''t really a way to run a software project, so much as a description
    of a principle of organizing software projects with some Japanese words thrown
    in to help sell the MBA textbooks. Indeed, it''s one of the 12 agile principles
    linked above:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Simplicity--the art of maximizing the amount of work not done--is essential.*'
  prefs: []
  type: TYPE_NORMAL
- en: That's really all that Lean is (plus the textbooks). Focus on doing the valuable
    thing (solving the customer's problem) and not on doing the invaluable things.
    Work out what you're doing that doesn't have value and stop doing it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Interestingly, and probably because we enjoy doing it, we sometimes forget
    that writing software *doesn''t* have value. Yes, *having* software that has been
    written does, but actually writing it costs money. Maybe we should be focusing
    more on reusing software or even on finding the thing that already exists that
    our customers could be using instead of a new bespoke product. The community of
    people promoting the lean idea have created *five principles*—[http://www.lean.org/WhatsLean/Principles.cfm](http://www.lean.org/WhatsLean/Principles.cfm):'
  prefs: []
  type: TYPE_NORMAL
- en: Identify value to the customer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eliminate any steps in the business chain that aren't adding value
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a smooth flow of the remaining steps, ending in delivering value to the
    customer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each step should pull its valuable input as needed from the upstream step
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Iterate over the above
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'So far, so reasonable, although I know that I (along with a lot of you, I imagine)
    think it sounds a bit too businessy-MBAey. Therein lies the danger. This collection
    of values is actually *at an appropriate level of abstraction*, and it''s *us*
    who are thinking too much about what we *currently* do, rather than whether it''s
    useful. If you try to recast the above in terms of writing code, you get something
    like:'
  prefs: []
  type: TYPE_NORMAL
- en: Identify that writing code is valuable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eliminate the meetings and other things that stop us writing code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write a load of automation stuff so that code is automatically delivered to
    the next people in the chain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manage a **Kanban board**—[https://en.wikipedia.org/wiki/Kanban_board](https://en.wikipedia.org/wiki/Kanban_board)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Iterate over the above
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is useful for improving the efficiency of *writing code*, which will almost
    certainly make developers happier and incrementally improve processes. But it
    doesn't help identify whether the most valuable thing to do is to write code;
    in fact, it actively hinders that.
  prefs: []
  type: TYPE_NORMAL
- en: Anchoring Bias and Project Management
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A last thought on running a software project for this chapter. The previous
    section explained that if we think about a process too much in terms of what we
    already do, it becomes harder to question whether *that* is worth doing at all.
    It turns out there are other problems associated with thinking about things –
    not that I'm suggesting anyone should stop.
  prefs: []
  type: TYPE_NORMAL
- en: There's a factor in decision-making called **anchoring**—[http://www.skepdic.com/anchoring.html](http://www.skepdic.com/anchoring.html),
    in which people tend to fixate on a piece of information presented early in making
    later judgements. Anchoring is the reason infomercials ask you "How much would
    *you* pay for this? $100?" before telling you the price is $10\. You probably
    don't expect the price to be $100, but it's given you an *anchor* that will set
    your further expectations.
  prefs: []
  type: TYPE_NORMAL
- en: Related to this is the **social anchoring**—[http://dictionary-psychology.com/index.php?a=term&d=Dictionary+of+psychology&t=Social+anchoring](http://dictionary-psychology.com/index.php?a=term&d=Dictionary+of+psychology&t=Social+anchoring)
    factor. People are inclined to vote the same way as the herd. There's a great
    demonstration of this, devised by **Solomon Asch (1951)**—[http://www.simplypsychology.org/asch-conformity.html](http://www.simplypsychology.org/asch-conformity.html).
    Eight "participants" are asked which of three lines is the longest; the first
    seven are stooges who all choose the wrong answer. Asch found that only 25% of
    the (actual) participants never conformed to the group and gave the wrong answer.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a genuine question, because I don''t think it''s been researched: what
    effect do these anchoring biases have on software projects, and what can we do
    to correct for them? Does giving people wireframes or other prototypes anchor
    their expectations and make them desire products that are like the prototypes?
    Do games like *Planning Poker* inadvertently anchor estimates to the number thought
    of by the first person to reveal? Might we accidentally bias estimates by discussing
    unrelated numbers in meetings ("I hope we can get this done in 45 minutes... Now,
    how many story points is this feature")?'
  prefs: []
  type: TYPE_NORMAL
- en: Bias bias
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'An unfortunate phenomenon is the **Bias Blind Spot**—[https://dataspace.princeton.edu/jspui/handle/88435/dsp013j333232r](https://dataspace.princeton.edu/jspui/handle/88435/dsp013j333232r),
    in which we more readily report biases in another people''s reasoning than in
    our own. A problem with drawing attention to cognitive biases such as the anchoring
    bias above is that, being aware of the bias, we''re now in a position to identify
    *other people* relying on the bias, and to believe that *we* are immune from it
    because we know about it. This is not true. Being aware of it will not stop us
    from applying the bias: analyzing, detecting, and correcting for the bias in our
    own work and decisions will do that. There is *Chapter 11, Critical Analysis*,
    in this book.'
  prefs: []
  type: TYPE_NORMAL
- en: Negotiation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You need to negotiate with other people. OK, if you''re selling a consumer
    app, you probably don''t negotiate with your customers: you set a price and they
    either pay it or go elsewhere. But that doesn''t mean negotiation is limited to
    people dealing with terrorists and kidnappers. You might want to convince the
    rest of your team that it''s worth rewriting some component, or that a feature
    you want to build should go into the product. You might want to ask your manager
    for more responsibility. Perhaps you want a vendor to fix a bug in their software,
    or a supplier to give you a preferential discount. In any of these cases, you''ll
    need to negotiate. (L looked up the etymology of "negotiate" in the Oxford American
    Dictionary. Apparently, it comes from the Latin "otium" meaning leisure, so "neg-otium"
    is "not leisure" or, in other words, business. That''s got nothing to do with
    this book but it''s really interesting, so I wanted to share it.)'
  prefs: []
  type: TYPE_NORMAL
- en: A sure-fire way to lose at negotiation is to ignore the other person's position.
    So, you want time to rewrite that server component in *FluffyMochaGerbilScript*,
    and your manager is saying no. Is that because your manager is a bozo who just
    doesn't get it? Are you the only person who can see the world as it really is?
  prefs: []
  type: TYPE_NORMAL
- en: 'No. That''s the fundamental attribution error again (refer *Chapter 12, Business*).
    It''s a common enough problem, but if you find yourself thinking that you''re
    talking to an idiot, you''re probably just talking to someone with different problems
    to solve. Perhaps they''re worried about a rewrite introducing regressions: what
    can you do to prove that won''t happen? Maybe they know that the company will
    be taking on some extra work soon, and the time you think you''ve got for the
    rewrite doesn''t really exist.'
  prefs: []
  type: TYPE_NORMAL
- en: The most reliable way to find out what the other person's concerns are is to
    ask, because the fundamental attribution error works both ways. While you're thinking
    that they just don't get clean code or craftsmanship or this week's buzzword,
    they're thinking that you don't get that this is a business that needs to make
    money and can't support the whims of a highly-strung developer. One of the two
    (or more) of you will need to be the one to break the stalemate by sharing what
    they know and asking what the other person knows. It could be you.
  prefs: []
  type: TYPE_NORMAL
- en: I find it's easy to get too emotional in the first discussion, particularly
    when it's a change to a project I've been working on for months and exhaustion
    has set in. For me, the best thing to do is to take a break, think about how we
    could meet in the middle, and come back to the discussion later. Just introspecting
    and wondering what the other person's position is goes some way to reconciliation,
    but the **empathy gap**—[http://en.wikipedia.org/wiki/Empathy_gap](http://en.wikipedia.org/wiki/Empathy_gap)
    means that isn't foolproof. I'm likely to assume that the other person is being
    rational, underestimating the importance of emotional factors in their decision.
    But wait, I stepped back from the conversation because I was getting *too* emotional.
    It's likely that the other person is making decisions based on visceral factors
    too.
  prefs: []
  type: TYPE_NORMAL
- en: Empathy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The previous section made it clear that successful negotiation relies largely
    on *empathy*: being able to see what''s driving the people you''re talking to
    and identifying how to present your proposed solution in a way that addresses
    their concerns and satisfies their needs and desires. Let''s look in more depth
    at how that works.'
  prefs: []
  type: TYPE_NORMAL
- en: The Effect of Mood on Collaboration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can probably anecdotally describe the effect that your mood has on how you
    work with others. I know that when I get grumpy, I value isolation and will bark
    at people who interrupt me, trying to avoid getting into conversations. This probably
    means I'm less likely to listen to other opinions and to either contribute meaningfully
    to discussions or to learn how to do my own job better. I'd rather do the wrong
    thing on my own than accept help when I'm in that mood.
  prefs: []
  type: TYPE_NORMAL
- en: In a column called "Mood"—[http://cacm.acm.org/magazines/2012/12/157887-moods/fulltext](http://cacm.acm.org/magazines/2012/12/157887-moods/fulltext)
    in Communications of the ACM, Peter J. Denning investigates the ways that mood
    can affect our interactions with each other, even transmitting mood socially between
    members of a team. He notes that when everybody is positive, collaboration is
    easy; when everybody is negative, the outcome is likely to be bad so it's best
    to avoid what will most likely become confrontational.
  prefs: []
  type: TYPE_NORMAL
- en: It's when people are in mixed moods that outcomes are hardest to predict. Will
    the negative person or people feed off the optimism of others, or will they resent
    it? How can you best help to improve the mood of negative people?
  prefs: []
  type: TYPE_NORMAL
- en: 'There are some high-level patterns in the overall moods of groups. Bruce Tuckman
    described four stages of development in the establishment of a team:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Forming**: The team does not exist yet; it is a collection of individuals.
    Each is seeking acceptance, so the team does not tackle any big or divisive problems.
    People work independently for the most part.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Storming**: The individual preferences and opinions of each member of the
    team come into conflict. The team learns what the differences and similarities
    between its members are, which it is willing to accept, and which cause problems.
    The group begins to discover where it is willing to be led and how.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Norming**: Through a combination of agreements and compromises, the team
    decides how to resolve its conflicts, what its goals are, and how it will work
    towards them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Performing**: Having collectively agreed upon the team''s norms, the members
    become more efficient at working within the team framework.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can often work out someone''s mood by the language they use. An example
    from Denning''s column involves asking team members why they think a recent release
    of their product was poorly received. One person exhibits a sense of wonder and
    curiosity:'
  prefs: []
  type: TYPE_NORMAL
- en: '*...I would love to interview our customers and find out what was behind their
    reactions. I am certain I will learn something that will help improve our software.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Other shows signs of confusion and resentment:'
  prefs: []
  type: TYPE_NORMAL
- en: '*I also don''t know what the heck is going on. But I do know those customers
    are jerks...*'
  prefs: []
  type: TYPE_NORMAL
- en: Language cues can provide information about what mood someone's in, which can
    inform your choice on how to engage with them.
  prefs: []
  type: TYPE_NORMAL
- en: Language and Introversion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Language also tells you about someone's personality. One scale along which psychologists
    often grade personalities is how introverted or extroverted someone is. Introverts
    gain energy from being alone, finding interaction with other people tiring or
    overwhelming. Extroverts gain energy from being with other people.
  prefs: []
  type: TYPE_NORMAL
- en: Introverts use more concrete phrases—[http://www.bps-research-digest.blogspot.co.uk/2012/11/introverts-use-more-concrete-language.html](http://www.bps-research-digest.blogspot.co.uk/2012/11/introverts-use-more-concrete-language.html),
    and less abstraction, than extroverts. In describing photos of people interacting,
    introverts were more likely to stick to facts ("the woman is pointing to the right,
    and has her mouth open"), whereas extroverts were more likely to infer reasons
    for what the photos depicted ("the woman is angry and is shouting at the man").
  prefs: []
  type: TYPE_NORMAL
- en: Being able to detect features of someone's personality can go a long way toward
    empathizing with them, as you can start to predict how they might react to situations
    or events. Language is a useful tool for this; and one it's easier to get people
    to engage with than a psychometric test like the Myers-Briggs Type Indicators.
  prefs: []
  type: TYPE_NORMAL
- en: Knowing What Level to Talk and To Listen At
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: So, extroverts are more likely to use abstract language than introverts, but
    there are other reasons people may discuss issues at differing levels of abstraction.
    You need to bear these in mind too, to get the most out of interactions with your
    team.
  prefs: []
  type: TYPE_NORMAL
- en: What role does the person you're talking to have? If you're discussing a bug
    with a fellow coder, then the weird thing you saw where the property was set on
    the view but then it didn't update because it was reset by a different thread
    is *totally* on topic. It's likely to interest your colleague, they'll have relevant
    experience to bring to bear, and they'll want to learn what the problem was in
    case they see a similar thing in the future.
  prefs: []
  type: TYPE_NORMAL
- en: If you're talking to the business development manager at your client's company,
    they *may* not be so interested. Of course, that's not necessarily true... but
    it's likely. They're probably more interested in whether the bug has been fixed,
    when they'll receive the fix, and whether the bug will impact anything else in
    the product.
  prefs: []
  type: TYPE_NORMAL
- en: As a courtesy to you, the business development manager probably isn't going
    to go into the intricacies of their contract with your company and the gnarly
    clause about how your boss has to fax them a copy of the company's business insurance
    policy every year. They expect the same courtesy in return. Similarly, your customer
    wants to hear about why they might want to buy your thing, not about how you completely
    rewrote it in *SuperFluffyAwesomeSquirrelNode*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Even in discussions with fellow developers, there are times when the details
    matter and times when they don''t. As we''ve seen, your colleague''s mood can
    have an effect on their receptiveness: maybe don''t go into a discussion about
    how much better your approach to database retrieval is than theirs when they''re
    feeling apathetic or resigned.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Situation has as much (or more) of a role to play than personality or emotion,
    too: if someone''s in the exalted "Zone" working on a complex problem, they probably
    don''t want to listen to your opinions on the relative merits of the `pre-increment`
    and `post-increment` operators, fascinating though they may be. (If you actually
    *have* opinions on the relative merits of the `pre-increment` and `post-increment`
    operators and want to share them, please do send them to `/dev/null`.)'
  prefs: []
  type: TYPE_NORMAL
- en: Shared Language and Shiny Buzzwords
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Any social group has its *argot* – its special words and phrases that speed
    up communication between the cognoscenti. (Argot has another meaning: the secret
    language used by groups to protect their conversations from eavesdropping. In
    this sense, cants and rhyming slang/back slang are argots. We''ll stick with the
    jargon sense for this book.) Think about what the word "tree" means; now think
    about what it means in a computer science context. That meaning is part of the
    argot of computer scientists.'
  prefs: []
  type: TYPE_NORMAL
- en: In a sense, jargon terms define group boundaries because they're exclusive.
    If you haven't learned the buzzwords in one context, you aren't included in the
    conversation among people who have. So, while jargon facilitates conversation
    among those in the know, it also keeps people who aren't in the know from understanding
    that conversation; it's a cause of inequality and division.
  prefs: []
  type: TYPE_NORMAL
- en: It's important to realize that, sometimes, subsectors, companies, or even teams
    within companies develop their own slang phrases that are slightly divergent from
    even the slang used within their industry or sector. One company I worked at used
    "train" to describe a collection of semi-independent projects that were all due
    to be released together, where other project managers might use the word "program"
    instead.
  prefs: []
  type: TYPE_NORMAL
- en: My first few months working in the telecoms sector involved being bombarded
    with three letter acronyms (TLAs). When I asked what they meant, people would
    usually expand the acronym... when I asked what they *meant* they'd look at me
    as if I'd wondered just what these "phone" things we're selling are for. Immersed
    in the world where your argot is spoken, a new hire will quickly pick up the lingo.
    A customer or supplier may not have the capacity or desire to do so, however,
    so may just be confused or misinformed when you use them.
  prefs: []
  type: TYPE_NORMAL
- en: Confused or misinformed suppliers and customers should be avoided. Suppliers
    and customers (along with colleagues) should not feel *excluded* either, but jargon
    use can have that effect. If you realize which parts of your language are slang
    developed in your industry, field, or team, you can know when using them will
    help discussions and when it will hinder conversation.
  prefs: []
  type: TYPE_NORMAL
