["```cpp\n#include <iostream>\nvoid testCanBeCreated ()\n{\n    std::cout << \"testCanBeCreated\" << std::endl;\n}\nint main ()\n{\n    testCanBeCreated();\n    return 0;\n}\n```", "```cpp\ntestCanBeCreated\nProgram ended with exit code: 0\n```", "```cpp\n#include <iostream>\n#include <string_view>\nclass Test\n{\npublic:\n    Test (std::string_view name)\n    : mName(name), mResult(true)\n    {}\n    void operator () ()\n    {\n        std::cout << mName << std::endl;\n    }\nprivate:\n    std::string mName;\n    bool mResult;\n};\nTest test(\"testCanBeCreated\");\nint main ()\n{\n    test();\n    return 0;\n}\n```", "```cpp\nclass Test\n{\npublic:\n    Test (std::string_view name)\n    : mName(name), mResult(true)\n    {}\n    void operator () ();\nprivate:\n    std::string mName;\n    bool mResult;\n};\nTest test(\"testCanBeCreated\");\nvoid Test::operator () ()\n{\n    std::cout << mName << std::endl;\n}\n```", "```cpp\n#define TEST class Test \\\n{ \\\npublic: \\\n    Test (std::string_view name) \\\n    : mName(name), mResult(true) \\\n    {} \\\n    void operator () (); \\\nprivate: \\\n    std::string mName; \\\n    bool mResult; \\\n}; \\\nTest test(\"testCanBeCreated\"); \\\nvoid Test::operator () ()\nTEST\n{\n    std::cout << mName << std::endl;\n}\n```", "```cpp\n#ifndef TEST_H\n#define TEST_H\n#include <string_view>\n#define TEST class Test \\\n{ \\\npublic: \\\n    Test (std::string_view name) \\\n    : mName(name), mResult(true) \\\n    {} \\\n    void operator () (); \\\nprivate: \\\n    std::string mName; \\\n    bool mResult; \\\n}; \\\nTest test(\"testCanBeCreated\"); \\\nvoid Test::operator () ()\n#endif // TEST_H\n```", "```cpp\n#include \"Test.h\"\n#include <iostream>\nTEST\n{\n    std::cout << mName << std::endl;\n}\nint main ()\n{\n    test();\n    return 0;\n}\n```", "```cpp\n#ifndef MERETDD_TEST_H\n#define MERETDD_TEST_H\n#include <string_view>\n#include <vector>\nnamespace MereTDD\n{\nclass TestInterface\n{\npublic:\n    virtual ~TestInterface () = default;\n    virtual void run () = 0;\n};\nstd::vector<TestInterface *> & getTests ()\n{\n    static std::vector<TestInterface *> tests;\n    return tests;\n}\n} // namespace MereTDD\n```", "```cpp\n#define TEST \\\nclass Test : public MereTDD::TestInterface \\\n{ \\\npublic: \\\n    Test (std::string_view name) \\\n    : mName(name), mResult(true) \\\n    { \\\n        MereTDD::getTests().push_back(this); \\\n    } \\\n    void run () override; \\\nprivate: \\\n    std::string mName; \\\n    bool mResult; \\\n}; \\\nTest test(\"testCanBeCreated\"); \\\nvoid Test::run ()\n#endif // MERETDD_TEST_H\n```", "```cpp\nint main ()\n{\n    for (auto * test: MereTDD::getTests())\n    {\n        test->run();\n    }\n    return 0;\n}\n```", "```cpp\nint main ()\n{\n    MereTDD::runTests();\n    return 0;\n}\n```", "```cpp\nnamespace MereTDD\n{\nclass TestInterface\n{\npublic:\n    virtual ~TestInterface () = default;\n    virtual void run () = 0;\n};\nstd::vector<TestInterface *> & getTests ()\n{\n    static std::vector<TestInterface *> tests;\n    return tests;\n}\nvoid runTests ()\n{\n    for (auto * test: getTests())\n    {\n        test->run();\n    }\n}\n} // namespace MereTDD\n```", "```cpp\nMereTDD project root folder\n    Test.h\n    tests folder\n        main.cpp\n        Creation.cpp\n```", "```cpp\n#include \"../Test.h\"\nint main ()\n{\n    MereTDD::runTests();\n    return 0;\n}\n```", "```cpp\n#include \"../Test.h\"\n#include <iostream>\nTEST\n{\n    std::cout << mName << std::endl;\n}\n```", "```cpp\ninline std::vector<TestInterface *> & getTests ()\n{\n    static std::vector<TestInterface *> tests;\n    return tests;\n}\ninline void runTests ()\n{\n    for (auto * test: getTests())\n    {\n        test->run();\n    }\n}\n```", "```cpp\ntestCanBeCreated\nProgram ended with exit code: 0\n```"]