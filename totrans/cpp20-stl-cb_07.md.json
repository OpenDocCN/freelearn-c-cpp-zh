["```cpp\ntemplate<\n    typename CharT,\n    typename Traits = std::char_traits<CharT>,\n    typename Allocator = std::allocator<CharT>\n> class basic_string;\n```", "```cpp\nconst std::basic_string<char> s{\"hello\"};\nconst char * sdata = s.data();\nfor(size_t i{0}; i < s.size(); ++i) {\n    cout << sdata[i] << ' ';\n}\ncout << '\\n';\n```", "```cpp\nh e l l o\n```", "```cpp\nusing std::string = std::basic_string<char>;\n```", "```cpp\n    char text[]{ \"hello\" };\n    string greeting{ text };\n    text[0] = 'J';\n    cout << text << ' ' << greeting << '\\n';\n    ```", "```cpp\nJello hello\n```", "```cpp\n    char text[]{ \"hello\" };\n    string_view greeting{ text };\n    text[0] = 'J';\n    cout << text << ' ' << greeting << '\\n';\n    ```", "```cpp\nJello Jello\n```", "```cpp\n    string_view sv() {\n        const char text[]{ \"hello\" };  // temporary storage\n        string_view greeting{ text };\n        return greeting;\n    }\n    int main() {\n        string_view greeting = sv();  // data out of scope\n        cout << greeting << '\\n';  // output undefined\n    }\n    ```", "```cpp\n    string str{ \"hello\" };\n    string_view greeting{ str };\n    cout << greeting << '\\n';\n    ```", "```cpp\nhello\n```", "```cpp\n    using namespace std::literals;\n    cout << \"hello\"sv.substr(1, 4) << '\\n';\n    ```", "```cpp\nello\n```", "```cpp\n    char text[]{ \"hello\" };\n    string_view sv1{ text };\n    string_view sv2{ sv1 };\n    string_view sv3{ sv2 };\n    string_view sv4{ sv3 };\n    cout << format(\"{} {} {} {}\\n\", sv1, sv2, sv3, sv4);\n    text[0] = 'J';\n    cout << format(\"{} {} {} {}\\n\", sv1, sv2, sv3, sv4);\n    ```", "```cpp\nhello hello hello hello\nJello Jello Jello Jello\n```", "```cpp\n    void f(string_view sv) {\n        if(sv.size()) {\n            char* x = (char*)sv.data();  // dangerous\n            x[0] = 'J';  // modifies the source\n        }\n        cout << format(\"f(sv): {} {}\\n\", (void*)sv.data(),      sv);\n    }\n    int main() {\n        char text[]{ \"hello\" };\n        string_view sv1{ text };\n        cout << format(\"sv1: {} {}\\n\", (void*)sv1.data(),       sv1);\n        f(sv1);\n        cout << format(\"sv1: {} {}\\n\", (void*)sv1.data(),       sv1);\n    }\n    ```", "```cpp\nsv1: 0x7ffd80fa7b2a hello\nf(sv): 0x7ffd80fa7b2a Jello\nsv1: 0x7ffd80fa7b2a Jello\n```", "```cpp\nsv1 = sv2 + sv3 + sv4; // does not work\n```", "```cpp\nstring str1{ text };\nstring str2{ str1 };\nstring str3{ str2 };\nstring str4{ str3 };\nstr1 = str2 + str3 + str4; // works\ncout << str1 << '\\n';\n```", "```cpp\nJelloJelloJello\n```", "```cpp\n    string a{ \"a\" };\n    string b{ \"b\" };\n    ```", "```cpp\n    string x{};\n    x += a + \", \" + b + \"\\n\";\n    cout << x;\n    ```", "```cpp\na, b\n```", "```cpp\n    string x{};\n    x.append(a);\n    x.append(\", \");\n    x.append(b);\n    x.append(\"\\n\");\n    cout << x;\n    ```", "```cpp\na, b\n```", "```cpp\n    ostringstream x{};\n    x << a << \", \" << b << \"\\n\";\n    cout << x.str();\n    ```", "```cpp\na, b\n```", "```cpp\n    string x{};\n    x = format(\"{}, {}\\n\", a, b);\n    cout << x;\n    ```", "```cpp\na, b\n```", "```cpp\n    using std::chrono::high_resolution_clock;\n    using std::chrono::duration;\n    void timer(string(*f)()) {\n        auto t1 = high_resolution_clock::now();\n        string s{ f() };\n        auto t2 = high_resolution_clock::now();\n        duration<double, std::milli> ms = t2 - t1;\n        cout << s;\n        cout << format(\"duration: {} ms\\n\", ms.count());\n    }\n    ```", "```cpp\n    string append_string() {\n        cout << \"append_string\\n\";\n        string a{ \"a\" };\n        string b{ \"b\" };\n        long n{0};\n        while(++n) {\n            string x{};\n            x.append(a);\n            x.append(\", \");\n            x.append(b);\n            x.append(\"\\n\");\n            if(n >= 10000000) return x;\n        }\n        return \"error\\n\";\n    }\n    ```", "```cpp\nint main() {\n    timer(append_string);\n}\n```", "```cpp\nappend_string\na, b\nduration: 425.361643 ms\n```", "```cpp\n    string concat_string() {\n        cout << \"concat_string\\n\";\n        string a{ \"a\" };\n        string b{ \"b\" };\n        long n{0};\n        while(++n) {\n            string x{};\n            x += a + \", \" + b + \"\\n\";\n            if(n >= 10000000) return x;\n        }\n        return \"error\\n\";\n    }\n    ```", "```cpp\nconcat_string\na, b\nduration: 659.957702 ms\n```", "```cpp\n    string concat_ostringstream() {\n        cout << \"ostringstream\\n\";\n        string a { \"a\" };\n        string b { \"b\" };\n        long n{0};\n        while(++n) {\n            ostringstream x{};\n            x << a << \", \" << b << \"\\n\";\n            if(n >= 10000000) return x.str();\n        }\n        return \"error\\n\";\n    }\n    ```", "```cpp\nostringstream\na, b\nduration: 3462.020587 ms\n```", "```cpp\n    string concat_format() {\n        cout << \"append_format\\n\";\n        string a{ \"a\" };\n        string b{ \"b\" };\n        long n{0};\n        while(++n) {\n            string x{};\n            x = format(\"{}, {}\\n\", a, b);\n            if(n >= 10000000) return x;\n        }\n        return \"error\\n\";\n    }\n    ```", "```cpp\nappend_format\na, b\nduration: 782.800547 ms\n```", "```cpp\n    char char_upper(const char& c) {\n        return static_cast<char>(std::toupper(c));\n    }\n    ```", "```cpp\nchar char_lower(const char& c) {\n    return static_cast<char>(std::tolower(c));\n}\n```", "```cpp\n    char rot13(const char& x) {\n        auto rot13a = [](char x, char a)->char { \n            return a + (x - a + 13) % 26; \n        };\n        if (x >= 'A' && x <= 'Z') return rot13a(x, 'A');\n        if (x >= 'a' && x <= 'z') return rot13a(x, 'a');\n        return x;\n    }\n    ```", "```cpp\n    main() {\n        string s{ \"hello jimi\\n\" };\n        cout << s;\n        std::transform(s.begin(), s.end(), s.begin(), \n          char_upper);\n        cout << s;\n        ...\n    ```", "```cpp\nhello jimi\nHELLO JIMI\n```", "```cpp\n    for(auto& c : s) c = rot13(c);\n    cout << s;\n    ```", "```cpp\nURYYB WVZV\n```", "```cpp\n    for(auto& c : s) c = rot13(char_lower(c));\n    cout << s;\n    ```", "```cpp\nhello jimi\n```", "```cpp\n    string& title_case(string& s) {\n        auto begin = s.begin();\n        auto end = s.end();\n        *begin++ = char_upper(*begin);  // first element\n        bool space_flag{ false };\n        for(auto it{ begin }; it != end; ++it) {\n            if(*it == ' ') {\n                space_flag = true;\n            } else {\n                if(space_flag) *it = char_upper(*it);\n                space_flag = false;\n            }\n        }\n        return s;\n    }\n    ```", "```cpp\ncout << title_case(s);\n```", "```cpp\nHello Jimi\n```", "```cpp\ntemplate< class... Args >\nstring format(const string_view fmt, Args&&... args );\n```", "```cpp\nconst int a{47};\nformat(\"a is {}\\n\", a);\n```", "```cpp\na is 47\n```", "```cpp\nformat(\"Hex: {:x} Octal: {:o} Decimal {:d} \\n\", a, a, a);\n```", "```cpp\nHex: 2f Octal: 57 Decimal 47\n```", "```cpp\n    const int inta{ 47 };\n    const char * human{ \"earthlings\" };\n    const string_view alien{ \"vulcans\" };\n    const double df_pi{ pi };\n    ```", "```cpp\n    cout << \"inta is \" << inta << '\\n'\n        << \"hello, \" << human << '\\n'\n        << \"All \" << alien << \" are welcome here\\n\"\n        << \"π is \" << df_pi << '\\n';\n    ```", "```cpp\na is 47\nhello, earthlings\nAll vulcans are welcome here\nπ is 3.14159\n```", "```cpp\n    cout << format(\"Hello {}\\n\", human);\n    ```", "```cpp\nHello earthlings\n```", "```cpp\nprint(\"Hello {}\\n\", cstr);\n```", "```cpp\ntemplate<typename... Args>\nconstexpr void print(const string_view str_fmt, \n                     Args&&... args) {\n    fputs(std::vformat(str_fmt, \n          std::make_format_args(args...)).c_str(), \n          stdout);\n}\n```", "```cpp\nprint(\"Hello {}\\n\", human);\n```", "```cpp\nHello earthlings\n```", "```cpp\n    print(\"Hello {} we are {}\\n\", human, alien);\n    ```", "```cpp\nHello earthlings we are vulcans\n```", "```cpp\nprint(\"Hello {1} we are {0}\\n\", human, alien);\n```", "```cpp\nHello vulcans we are earthlings\n```", "```cpp\n    print(\"π is {}\\n\", df_pi);\n    ```", "```cpp\nπ is 3.141592653589793\n```", "```cpp\nprint(\"π is {:.5}\\n\", df_pi);\n```", "```cpp\nπ is 3.1416\n```", "```cpp\nprint(\"inta is {1:}, π is {0:.5}\\n\", df_pi, inta);\n```", "```cpp\ninta is 47, π is 3.1416\n```", "```cpp\n    print(\"inta is [{:10}]\\n\", inta);\n    ```", "```cpp\ninta is [        47]\n```", "```cpp\nprint(\"inta is [{:<10}]\\n\", inta);\nprint(\"inta is [{:>10}]\\n\", inta);\n```", "```cpp\ninta is [47        ]\ninta is [        47]\n```", "```cpp\nprint(\"inta is [{:*<10}]\\n\", inta);\nprint(\"inta is [{:0>10}]\\n\", inta);\n```", "```cpp\ninta is [47********]\ninta is [0000000047]\n```", "```cpp\nprint(\"inta is [{:^10}]\\n\", inta);\nprint(\"inta is [{:_^10}]\\n\", inta);\n```", "```cpp\ninta is [    47    ]\ninta is [____47____]\n```", "```cpp\n    print(\"{:>8}: [{:04x}]\\n\", \"Hex\", inta);\n    print(\"{:>8}: [{:4o}]\\n\", \"Octal\", inta);\n    print(\"{:>8}: [{:4d}]\\n\", \"Decimal\", inta);\n    ```", "```cpp\n     Hex: [002f]\n   Octal: [  57]\n Decimal: [  47]\n```", "```cpp\nprint(\"{:>8}: [{:04X}]\\n\", \"Hex\", inta);\n```", "```cpp\n     Hex: [002F]\n```", "```cpp\ntemplate<typename... Args>\nconstexpr void print(const string_view str_fmt, Args&&... args) {\n    fputs(vformat(str_fmt, \n      make_format_args(args...)).c_str(), \n          stdout);\n}\n```", "```cpp\ntemplate<typename T>\nstruct Frac {\n    T n;\n    T d;\n};\n...\nFrac<long> n{ 3, 5 };\ncout << \"Frac: \" << n << '\\n';\n```", "```cpp\ntemplate <typename T>\nstd::ostream& operator<<(std::ostream& os, const Frac<T>& f) {\n    os << f.n << '/' << f.d;\n    return os;\n}\n```", "```cpp\nFrac: 3/5\n```", "```cpp\ntemplate <typename T>\nstruct std::formatter<Frac<T>> : std::formatter<unsigned> {\n    template <typename Context>\n    auto format(const Frac<T>& f, Context& ctx) const {\n        return format_to(ctx.out(), \"{}/{}\", f.n, f.d);\n    }\n};\n```", "```cpp\nprint(\"Frac: {}\\n\", n);\n```", "```cpp\nFrac: 3/5\n```", "```cpp\n    int main() {\n        string s{\" \\t  ten-thumbed input   \\t   \\n \\t \"};\n        cout << format(\"[{}]\\n\", s);\n        ...\n    ```", "```cpp\n[       ten-thumbed input\n      ]\n```", "```cpp\n    string trimstr(const string& s) {\n        constexpr const char * whitespace{ \" \\t\\r\\n\\v\\f\" };\n        if(s.empty()) return s;\n        const auto first{ s.find_first_not_of(whitespace) };\n        if(first == string::npos) return {};\n        const auto last{ s.find_last_not_of(whitespace) };\n        return s.substr(first, (last - first + 1));\n    }\n    ```", "```cpp\n    cout << format(\"[{}]\\n\", trimstr(s));\n    ```", "```cpp\n[ten-thumbed input]\n```", "```cpp\nsize_t find_first_not_of( const CharT* s, size_type pos = 0 );\nsize_t find_last_not_of( const CharT* s, size_type pos = 0 );\n```", "```cpp\nstring word{};\ncout << \"Enter words: \";\nwhile(cin >> word) {\n    cout << format(\"[{}] \", word);\n}\ncout << '\\n';\n```", "```cpp\n$ ./working\nEnter words: big light in sky\n[big] [light] [in] [sky]\n```", "```cpp\n    bool prompt(const string_view s, const string_view s2 = \"\") {\n        if(s2.size()) cout << format(\"{} ({}): \", s, s2);\n        else cout << format(\"{}: \", s);\n        cout.flush();\n        return true;\n    }\n    ```", "```cpp\n    constexpr size_t MAXLINE{1024 * 10};\n    char s[MAXLINE]{};\n    const char * p1{ \"Words here\" };\n    prompt(p1);\n    cin.getline(s, MAXLINE, '\\n');\n    cout << s << '\\n';\n    ```", "```cpp\nWords here: big light in sky![](img/1.png)\nbig light in sky\n```", "```cpp\ngetline(char* s, size_t count, char delim );\n```", "```cpp\n    string line{};\n    const char * p1a{ \"More words here\" };\n    prompt(p1a, \"p1a\");\n    getline(cin, line, '\\n');\n    cout << line << '\\n';\n    ```", "```cpp\n$ ./working\nMore words here (p1a): slated to appear in east![](img/1.png)\nslated to appear in east\n```", "```cpp\ngetline(basic_istream&& in, string& str, char delim );\n```", "```cpp\nvoid clearistream() {\n    string s{};\n    cin.clear();\n    getline(cin, s);\n}\n```", "```cpp\n    double a{};\n    double b{};\n    const char * p2{ \"Please enter two numbers\" };\n    for(prompt(p2); !(cin >> a >> b); prompt(p2)) {\n        cout << \"not numeric\\n\";\n        clearistream();\n    }\n    cout << format(\"You entered {} and {}\\n\", a, b);\n    ```", "```cpp\n$ ./working\nPlease enter two numbers: a b![](img/1.png)\nnot numeric\nPlease enter two numbers: 47 73![](img/1.png)\nYou entered 47 and 73\n```", "```cpp\n    line.clear();\n    prompt(p3);\n    while(line.empty()) getline(cin, line);\n    stringstream ss(line);\n    while(getline(ss, word, ',')) {\n        if(word.empty()) continue;\n        cout << format(\"word: [{}]\\n\", trimstr(word));\n    }\n    ```", "```cpp\n$ ./working\nComma-separated words: this, that, other\nword: [this]\nword: [that]\nword: [other]\n```", "```cpp\n    size_t wordcount(auto& is) {\n        using it_t = istream_iterator<string>;\n        return distance(it_t{is}, it_t{});\n    }\n    ```", "```cpp\n    int main() {\n        const char * fn{ \"the-raven.txt\" };\n        std::ifstream infile{fn, std::ios_base::in};\n        size_t wc{ wordcount(infile) };\n        cout << format(\"There are {} words in the \n          file.\\n\", wc);\n    }\n    ```", "```cpp\nThere are 1068 words in the file.\n```", "```cpp\n    Las Vegas\n    661903 36.1699 -115.1398\n    New York City\n    8850000 40.7128 -74.0060\n    Berlin\n    3571000 52.5200 13.4050\n    Mexico City\n    21900000 19.4326 -99.1332\n    Sydney\n    5312000 -33.8688 151.2093\n    ```", "```cpp\n    constexpr const char * fn{ \"cities.txt\" };\n    ```", "```cpp\n    struct City {\n        string name;\n        unsigned long population;\n        double latitude;\n        double longitude;\n    };\n    ```", "```cpp\n    vector<City> cities;\n    ```", "```cpp\n    std::istream& operator>>(std::istream& in, City& c) {\n        in >> std::ws;\n        std::getline(in, c.name);\n        in >> c.population >> c.latitude >> c.longitude;\n        return in;\n    }\n    ```", "```cpp\n    ifstream infile(fn, std::ios_base::in);\n    if(!infile.is_open()) {\n        cout << format(\"failed to open file {}\\n\", fn);\n        return 1;\n    }\n    for(City c{}; infile >> c;) cities.emplace_back(c);\n    ```", "```cpp\n    for (const auto& [name, pop, lat, lon] : cities) {\n        cout << format(\"{:.<15} pop {:<10} coords {}, {}\\n\", \n            name, make_commas(pop), lat, lon);\n    }\n    ```", "```cpp\n$ ./initialize_container < cities.txt\nLas Vegas...... pop 661,903    coords 36.1699, -115.1398\nNew York City.. pop 8,850,000  coords 40.7128, -74.006\nBerlin......... pop 3,571,000  coords 52.52, 13.405\nMexico City.... pop 21,900,000 coords 19.4326, -99.1332\nSydney......... pop 5,312,000  coords -33.8688, 151.2093\n```", "```cpp\n    string make_commas(const unsigned long num) {\n        string s{ std::to_string(num) };\n        for(int l = s.length() - 3; l > 0; l -= 3) {\n            s.insert(l, \",\");\n        }\n        return s;\n    }\n    ```", "```cpp\nstd::istream& operator>>(std::istream& in, City& c) {\n    in >> std::ws;\n    std::getline(in, c.name);\n    in >> c.population >> c.latitude >> c.longitude;\n    return in;\n}\n```", "```cpp\nCity c{};\ninfile >> c;\n```", "```cpp\n// skip BOM for UTF-8 on Windows\nvoid skip_bom(auto& fs) {\n    const unsigned char boms[]{ 0xef, 0xbb, 0xbf };\n    bool have_bom{ true };\n    for(const auto& c : boms) {\n        if((unsigned char)fs.get() != c) have_bom = false; \n    }\n    if(!have_bom) fs.seekg(0);\n    return;\n}\n```", "```cpp\nint main() {\n    ...\n    ifstream infile(fn, std::ios_base::in);\n    if(!infile.is_open()) {\n        cout << format(\"failed to open file {}\\n\", fn);\n        return 1;\n    }\n    skip_bom(infile);\n    for(City c{}; infile >> c;) cities.emplace_back(c);\n    ...\n}\n```", "```cpp\nclass basic_string<char, std::char_traits<char>>;\n```", "```cpp\n    constexpr char char_lower(const char& c) {\n        if(c >= 'A' && c <= 'Z') return c + ('a' - 'A');\n        else return c;\n    }\n    ```", "```cpp\n    class ci_traits : public std::char_traits<char> {\n    public:\n        ...\n    };\n    ```", "```cpp\n    static constexpr bool lt(char_type a, char_type b) noexcept {\n        return char_lower(a) < char_lower(b);\n    }\n    static constexpr bool eq(char_type a, char_type b) noexcept {\n        return char_lower(a) == char_lower(b);\n    }\n    ```", "```cpp\n    static constexpr int compare(const char_type* s1, \n            const char_type* s2, size_t count) {\n        for(size_t i{0}; i < count; ++i) {\n            auto diff{ char_lower(s1[i]) <=> \n              char_lower(s2[i]) };\n            if(diff > 0) return 1;\n            if(diff < 0) return -1;\n            }\n        return 0;\n    }\n    ```", "```cpp\n    static constexpr const char_type* find(const char_type* p, \n            size_t count, const char_type& ch) {\n        const char_type find_c{ char_lower(ch) };\n        for(size_t i{0}; i < count; ++i) {\n            if(find_c == char_lower(p[i])) return p + i;\n        }\n        return nullptr;\n    }\n    ```", "```cpp\n    using ci_string = std::basic_string<char, ci_traits>;\n    ```", "```cpp\n    int main() {\n        string s{\"Foo Bar Baz\"};\n        ci_string ci_s{\"Foo Bar Baz\"};\n        ...\n    ```", "```cpp\n    cout << \"string: \" << s << '\\n';\n    cout << \"ci_string: \" << ci_s << '\\n';\n    ```", "```cpp\nstd::ostream& operator<<(std::ostream& os, \n        const ci_string& str) {\n    return os << str.c_str();\n}\n```", "```cpp\nstring: Foo Bar Baz\nci_string: Foo Bar Baz\n```", "```cpp\n    ci_string compare1{\"CoMpArE StRiNg\"};\n    ci_string compare2{\"compare string\"};\n    if (compare1 == compare2) {\n        cout << format(\"Match! {} == {}\\n\", compare1, \n          compare2);\n    } else {\n        cout << format(\"no match {} != {}\\n\", compare1, \n          compare2);\n    }\n    ```", "```cpp\nMatch! CoMpArE StRiNg == compare string\n```", "```cpp\n    size_t found = ci_s.find('b');\n    cout << format(\"found: pos {} char {}\\n\", found, ci_s[found]);\n    ```", "```cpp\nfound: pos 4 char B\n```", "```cpp\nclass lc_traits : public std::char_traits<char> {\npublic:\n    static constexpr void assign( char_type& r, const\n      char_type& a )\n            noexcept {\n        r = char_lower(a);\n    }\n    static constexpr char_type* assign( char_type* p,\n            std::size_t count, char_type a ) {\n        for(size_t i{}; i < count; ++i) p[i] = \n          char_lower(a);\n        return p;\n    }\n    static constexpr char_type* copy(char_type* dest, \n            const char_type* src, size_t count) {\n        for(size_t i{0}; i < count; ++i) {\n            dest[i] = char_lower(src[i]);\n        }\n        return dest;\n    }\n};\n```", "```cpp\nusing lc_string = std::basic_string<char, lc_traits>;\n...\nlc_string lc_s{\"Foo Bar Baz\"};\ncout << \"lc_string: \" << lc_s << '\\n';\n```", "```cpp\nlc_string: foo bar baz\n```", "```cpp\n<a href=\"http://example.com/file.html\">Text goes here</a>\n```", "```cpp\n    const char * fn{ \"the-end.html\" };\n    ```", "```cpp\n    const std::regex \n        link_re{ \"<a href=\\\"([^\\\"]*)\\\"[^<]*>([^<]*)</a>\" };\n    ```", "```cpp\n    string in{};\n    std::ifstream infile(fn, std::ios_base::in);\n    for(string line{}; getline(infile, line);) in += line;\n    ```", "```cpp\n    std::sregex_token_iterator it{ in.begin(), in.end(),\n        link_re, {1, 2} };\n    ```", "```cpp\n    template<typename It>\n    void get_links(It it) {\n        for(It end_it{}; it != end_it; ) {\n            const string link{ *it++ };\n            if(it == end_it) break;\n            const string desc{ *it++ };\n            cout << format(\"{:.<24} {}\\n\", desc, link);\n        }\n    }\n    ```", "```cpp\nget_links(it);\n```", "```cpp\nBill Weinman............ https://bw.org/\ncourses................. https://bw.org/courses/\nmusic................... https://bw.org/music/\nbooks................... https://packt.com/\nback to the internet.... https://duckduckgo.com/\n```", "```cpp\nconst regex link_re{ \"<a href=\\\"([^\\\"]*)\\\"[^<]*>([^<]*)</a>\" };\n```", "```cpp\nsregex_token_iterator it{ in.begin(), in.end(), link_re, {1, 2} };\n```", "```cpp\nfor(It end_it{}; it != end_it; ) {\n    const string link{ *it++ };\n    if(it == end_it) break;\n    const string desc{ *it++ };\n    cout << format(\"{:.<24} {}\\n\", desc, link);\n}\n```", "```cpp\nBill Weinman............ https://bw.org/\ncourses................. https://bw.org/courses/\nmusic................... https://bw.org/music/\nbooks................... https://packt.com/\nback to the internet.... https://duckduckgo.com/\n```"]