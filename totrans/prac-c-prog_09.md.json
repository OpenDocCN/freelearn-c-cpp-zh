["```cpp\n//binarysearch.c\n\n#include <stdio.h>\n\n#define max 20\nint binary_search(int[], int, int);\n\nint main() {\n  int len, found, numb, arr[max], i;\n  printf(\"Enter the length of an array: \");\n  scanf(\"%d\", & len);\n  printf(\"Enter %d values in sorted order \\n\", len);\n  for (i = 0; i < len; i++)\n    scanf(\"%d\", & arr[i]);\n  printf(\"Enter the value to search \");\n  scanf(\"%d\", & numb);\n  found = binary_search(arr, numb, len);\n  if (found == numb)\n    printf(\"Value %d is found in the list\\n\", numb);\n  else\n    printf(\"Value %d is not found in the list \\n\", numb);\n  return 0;\n}\n\nint binary_search(int arr[], int pnumb, int plen) {\n  int lindex = 0, mid, uindex = plen - 1, nfound;\n  while (uindex >= lindex) {\n    mid = (uindex + lindex) / 2;\n    if (pnumb == arr[mid]) {\n      nfound = arr[mid];\n      break;\n    } else {\n      if (pnumb > arr[mid])\n        lindex = mid + 1;\n      else\n        uindex = mid - 1;\n    }\n  }\n  return (nfound);\n}\n```", "```cpp\n//bubblesort.c\n\n#include <stdio.h>\n\n#define max 20\nint main() {\n  int arr[max], temp, len, i, j;\n  printf(\"How many values are there? \");\n  scanf(\"%d\", & len);\n  printf(\"Enter %d values to sort\\n\", len);\n  for (i = 0; i < len; i++)\n    scanf(\"%d\", & arr[i]);\n  for (i = len - 2; i >= 1; i--) {\n    for (j = 0; j <= i; j++) {\n      if (arr[j] > arr[j + 1]) {\n        temp = arr[j];\n        arr[j] = arr[j + 1];\n        arr[j + 1] = temp;\n      }\n    }\n  }\n  printf(\"The sorted array is:\\n\");\n  for (i = 0; i < len; i++)\n    printf(\"%d\\n\", arr[i]);\n  return 0;\n}\n```", "```cpp\ngcc bubblesort.c -o bubblesort\n```", "```cpp\n//insertionsort.c\n\n#include <stdio.h>\n\n#define max 20\n\nint main() {\n  int arr[max], i, j, temp, len;\n  printf(\"How many numbers are there ? \");\n  scanf(\"%d\", & len);\n  printf(\"Enter %d values to sort\\n\", len);\n  for (i = 0; i < len; i++)\n    scanf(\"%d\", & arr[i]);\n  for (i = 1; i < len; i++) {\n    for (j = i; j > 0; j--) {\n      if (arr[j] < arr[j - 1]) {\n        temp = arr[j];\n        arr[j] = arr[j - 1];\n        arr[j - 1] = temp;\n      }\n    }\n  }\n  printf(\"\\nThe ascending order of the values entered is:\\n\");\n  for (i = 0; i < len; i++)\n    printf(\"%d\\n\", arr[i]);\n  return 0;\n}\n```", "```cpp\ngcc insertionsort.c -o insertionsort\n```", "```cpp\nQuick Sort (arr,n)\n```", "```cpp\npivot=FindingPivot(arr,s,e)\n```", "```cpp\nFindingPivot (arr,start,end)\n```", "```cpp\nstart=start+1\n```", "```cpp\n//quick sort.c\n\n# include<stdio.h>\n# define stacksize 10\n#define arrsize 20\nint top1 = -1, top2 = -1;\nint stack1[stacksize];\nint stack2[stacksize];\nint arr[arrsize];\n\nint quick(int, int);\nvoid pushstk1(int);\nvoid pushstk2(int);\nint popstk1();\nint popstk2();\n\nint main() {\n  int sindex, eindex, lindex, uindex, k, pivot, i, len;\n  printf(\"How many numerical to sort? \");\n  scanf(\"%d\", & len);\n  printf(\"Enter %d numerical:\\n\", len);\n  for (i = 0; i <= len - 1; i++)\n    scanf(\"%d\", & arr[i]);\n  lindex = 0;\n  uindex = len - 1;\n  pushstk1(lindex);\n  pushstk2(uindex);\n  while (top1 != -1) {\n    sindex = popstk1();\n    eindex = popstk2();\n    pivot = quick(sindex, eindex);\n    if (sindex < pivot - 1) {\n      pushstk1(sindex);\n      pushstk2(pivot - 1);\n    }\n    if (pivot + 1 < eindex) {\n      pushstk1(pivot + 1);\n      pushstk2(eindex);\n    }\n  }\n  printf(\"\\nAscending order using Quick Sort is:\\n\");\n  for (i = 0; i <= len - 1; i++)\n    printf(\"%d\\n\", arr[i]);\n  return 0;\n}\n\nint quick(int si, int ei) {\n  int li, temp;\n  li = si;\n  while (1) {\n    while (arr[ei] >= arr[li] && li != ei)\n      ei--;\n    if (li == ei) return (li);\n    if (arr[li] > arr[ei]) {\n      temp = arr[li];\n      arr[li] = arr[ei];\n      arr[ei] = temp;\n      li = ei;\n    }\n    while (arr[si] <= arr[li] && li != si)\n      si++;\n    if (li == si) return (li);\n    if (arr[si] > arr[li]) {\n      temp = arr[si];\n      arr[si] = arr[li];\n      arr[li] = temp;\n      li = si;\n    }\n  }\n  return 0;\n}\nvoid pushstk1(int s) {\n  top1++;\n  stack1[top1] = s;\n}\nvoid pushstk2(int e) {\n  top2++;\n  stack2[top2] = e;\n}\nint popstk1() {\n  return (stack1[top1--]);\n}\nint popstk2() {\n  return (stack2[top2--]);\n}\n```", "```cpp\ngcc quick sort.c -o quick sort\n```", "```cpp\nleftchild=0\nrightchild=0\nroot=1\n```", "```cpp\n//heapsort.c\n\n# include <stdio.h>\n#define max 20\nint heap[max], len;\n\nvoid insheap(int h);\nint delsheap(int j);\n\nint main() {\n  int arr[max], numb, i, j;\n  printf(\"How many elements to sort? \");\n  scanf(\"%d\", & len);\n  printf(\"Enter %d values \\n\", len);\n  for (i = 0; i < len; i++) {\n    scanf(\"%d\", & numb);\n    insheap(numb);\n  }\n  j = len - 1;\n  for (i = 0; i < len; i++) {\n    arr[i] = delsheap(j);\n    j--;\n  }\n  printf(\"\\nThe Descending order is: \\n\");\n  for (i = 0; i < len; i++)\n    printf(\"%d\\n\", arr[i]);\n  return 0;\n}\n\nvoid insheap(int value) {\n  static int x;\n  int par, cur, temp;\n  if (x == 0) {\n    heap[x] = value;\\\n    x++;\n  } else {\n    heap[x] = value;\n    par = (x - 1) / 2;\n    cur = x;\n    do {\n      if (heap[cur] > heap[par]) {\n        temp = heap[cur];\n        heap[cur] = heap[par];\n        heap[par] = temp;\n        cur = par;\n        par = (cur - 1) / 2;\n      } else break;\n    } while (cur != 0);\n    x++;\n  }\n}\n\nint delsheap(int j) {\n  int loc, n = 0, pos, lc = 0, rc = 0, temp = 0;\n  loc = j;\n  pos = 0;\n  n = heap[pos];\n  heap[pos] = heap[loc];\n  if (loc == 0 || loc == 1) return (n);\n  loc--;\n  lc = 2 * pos + 1;\n  rc = 2 * pos + 2;\n  while (rc <= loc) {\n    if ((heap[pos] > heap[lc] && heap[pos] > heap[rc]))\n      return (n);\n    else {\n      if (heap[lc] > heap[rc]) {\n        temp = heap[lc];\n        heap[lc] = heap[pos];\n        heap[pos] = temp;\n        pos = lc;\n      } else {\n        temp = heap[rc];\n        heap[rc] = heap[pos];\n        heap[pos] = temp;\n        pos = rc;\n      }\n      lc = 2 * pos + 1;\n      rc = 2 * pos + 2;\n    }\n  }\n  if (lc == loc) {\n    if (heap[pos] < heap[lc]) {\n      temp = heap[pos];\n      heap[pos] = heap[lc];\n      heap[lc] = temp;\n      pos = lc;\n    }\n  }\n  return (n);\n}\n```", "```cpp\ngcc heapsort.c -o heapsort\n```"]