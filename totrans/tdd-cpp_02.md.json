["```cpp\ninline void runTests ()\n{\n    for (auto * test: getTests())\n    {\n        try\n        {\n            test->run();\n        }\n        catch (...)\n        {\n            test->setFailed(\"Unexpected exception thrown.\");\n        }\n    }\n}\n```", "```cpp\nclass TestBase\n{\npublic:\n    TestBase (std::string_view name)\n    : mName(name), mPassed(true)\n    { }\n    virtual ~TestBase () = default;\n    virtual void run () = 0;\n    std::string_view name () const\n    {\n        return mName;\n    }\n    bool passed () const\n    {\n        return mPassed;\n    }\n    std::string_view reason () const\n    {\n        return mReason;\n    }\n    void setFailed (std::string_view reason)\n    {\n        mPassed = false;\n        mReason = reason;\n    }\nprivate:\n    std::string mName;\n    bool mPassed;\n    std::string mReason;\n};\n```", "```cpp\ninline std::vector<TestBase *> & getTests ()\n{\n    static std::vector<TestBase *> tests;\n    return tests;\n}\n```", "```cpp\n#define TEST \\\nclass Test : public MereTDD::TestBase \\\n{ \\\npublic: \\\n    Test (std::string_view name) \\\n    : TestBase(name) \\\n    { \\\n        MereTDD::getTests().push_back(this); \\\n    } \\\n    void run () override; \\\n}; \\\nTest test(\"testCanBeCreated\"); \\\nvoid Test::run ()\n```", "```cpp\n#define MERETDD_TEST_H\n#include <iostream>\n#include <string_view>\n#include <vector>\n```", "```cpp\ninline void runTests ()\n{\n    for (auto * test: getTests())\n    {\n        std::cout << \"---------------\\n\"\n            << test->name()\n            << std::endl;\n        try\n        {\n            test->run();\n        }\n        catch (...)\n        {\n            test->setFailed(\"Unexpected exception thrown.\");\n        }\n        if (test->passed())\n        {\n            std::cout << \"Passed\"\n                << std::endl;\n        }\n        else\n        {\n            std::cout << \"Failed\\n\"\n                << test->reason()\n                << std::endl;\n        }\n    }\n}\n```", "```cpp\n#include \"../Test.h\"\nTEST\n{\n    throw 1;\n}\n```", "```cpp\n---------------\ntestCanBeCreated\nFailed\nUnexpected exception thrown.\nProgram ended with exit code: 0\n```", "```cpp\n---------------\ntestCanBeCreated\nPassed\nProgram ended with exit code: 0\n```", "```cpp\n#include \"../Test.h\"\nTEST\n{\n}\nTEST\n{\n    throw 1;\n}\n```", "```cpp\n#include \"../Test.h\"\nTEST(\"Test can be created\")\n{\n}\nTEST(\"Test with throw can be created\")\n{\n    throw 1;\n}\n```", "```cpp\n#define MERETDD_CLASS_FINAL( line ) Test ## line\n#define MERETDD_CLASS_RELAY( line ) MERETDD_CLASS_FINAL( line )\n#define MERETDD_CLASS MERETDD_CLASS_RELAY( __LINE__ )\n#define MERETDD_INSTANCE_FINAL( line ) test ## line\n#define MERETDD_INSTANCE_RELAY( line ) MERETDD_INSTANCE_FINAL( line )\n#define MERETDD_INSTANCE MERETDD_INSTANCE_RELAY( __LINE__ )\n```", "```cpp\n#define TEST( testName ) \\\nclass MERETDD_CLASS : public MereTDD::TestBase \\\n{ \\\npublic: \\\n    MERETDD_CLASS (std::string_view name) \\\n    : TestBase(name) \\\n    { \\\n        MereTDD::getTests().push_back(this); \\\n    } \\\n    void run () override; \\\n}; \\\nMERETDD_CLASS MERETDD_INSTANCE(testName); \\\nvoid MERETDD_CLASS::run ()\n```", "```cpp\n---------------\nTest can be created\nPassed\n---------------\nTest with throw can be created\nFailed\nUnexpected exception thrown.\nProgram ended with exit code: 0\n```", "```cpp\nint main ()\n{\n    return MereTDD::runTests();\n}\n```", "```cpp\ninline int runTests ()\n{\n    std::cout << \"Running \"\n        << getTests().size()\n        << \" tests\\n\";\n```", "```cpp\n    int numPassed = 0;\n    int numFailed = 0;\n    for (auto * test: getTests())\n    {\n        std::cout << \"---------------\\n\"\n            << test->name()\n            << std::endl;\n        try\n        {\n            test->run();\n        }\n        catch (...)\n        {\n            test->setFailed(\"Unexpected exception thrown.\");\n        }\n        if (test->passed())\n        {\n            ++numPassed;\n            std::cout << \"Passed\"\n                << std::endl;\n        }\n        else\n        {\n            ++numFailed;\n            std::cout << \"Failed\\n\"\n                << test->reason()\n                << std::endl;\n        }\n    }\n```", "```cpp\n    std::cout << \"---------------\\n\";\n    if (numFailed == 0)\n    {\n        std::cout << \"All tests passed.\"\n            << std::endl;\n    }\n    else\n    {\n        std::cout << \"Tests passed: \" << numPassed\n            << \"\\nTests failed: \" << numFailed\n            << std::endl;\n    }\n    return numFailed;\n}\n```", "```cpp\nRunning 2 tests\n---------------\nTest can be created\nPassed\n---------------\nTest with throw can be created\nFailed\nUnexpected exception thrown.\n---------------\nTests passed: 1\nTests failed: 1\nProgram ended with exit code: 1\n```", "```cpp\n#include \"../Test.h\"\n#include <iostream>\nint main ()\n{\n    return MereTDD::runTests(std::cout);\n}\n```", "```cpp\n#ifndef MERETDD_TEST_H\n#define MERETDD_TEST_H\n#include <ostream>\n#include <string_view>\n#include <vector>\n```", "```cpp\ninline int runTests (std::ostream & output)\n{\n    output << \"Running \"\n        << getTests().size()\n        << \" tests\\n\";\n    int numPassed = 0;\n    int numFailed = 0;\n    for (auto * test: getTests())\n    {\n        output << \"---------------\\n\"\n            << test->name()\n            << std::endl;\n```"]