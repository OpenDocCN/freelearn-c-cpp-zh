["```cpp\nQT += multimedia\n```", "```cpp\nimport QtAudioEngine 1.0\n```", "```cpp\n    AudioEngine {\n        id: audioEngine\n        dopplerFactor: 1\n        speedOfSound: 343.33\n}\n```", "```cpp\n AudioEngine {\n        id: audioEngine\n        dopplerFactor: 1\n        speedOfSound: 343.33\n        AudioSample {\n            name:\"plink\"\n            source: \"thunder.wav\"\n            preloaded: true\n        }\n}\n```", "```cpp\n AudioEngine {\n        id: audioEngine\n        dopplerFactor: 1\n        speedOfSound: 343.33\n        addAudioSample(plinkSound)\n}\nAudioSample {\n    id: plinkSound\n    name:\"plink\"\n    source: \"thunder.wav\"\n    preloaded: true\n}\n```", "```cpp\nSound {\n    name: \"thunderengine\"\n    attenuationModel: \"thunderModel\"\n    PlayVariation {\n        looping: true\n        sample: \"plink\"\n        maxGain: 0.5\n        minGain: 0.3\n     }\n}\n```", "```cpp\n    AudioListener {\n        engine: audioEngine\n        position: Qt.vector3d(0, 0, 0)\n    }\n```", "```cpp\n    SoundInstance {\n        id: plinkSound\n        engine: audioEngine\n        sound: \"thunderengine\"\n        position: Qt.vector3d(leftRightValue, forwardBacktValue,\nupDownValue)\n        Component.onCompleted: plinkSound.play()\n    }\n\n```", "```cpp\n    MouseArea {\n        anchors.fill: parent\n        hoverEnabled: true\n        propagateComposedEvents: true\n        onPositionChanged: {\n            leftRightValue = -((window.width / 2) - mouse.x)\n            forwardBacktValue = (window.height / 2) - mouse.y\n        }\n```", "```cpp\nproperty real leftRightValue: 0;\nproperty real forwardBacktValue: 0;\nproperty real upDownValue: 0;\n```", "```cpp\nimport QtMultimedia 5.12\n```", "```cpp\nAudio {\n    id: audioPlayer\n    source: \"sample.mp3\"\n}\n```", "```cpp\nComponent.onCompleted: audioPlayer.play()\n```", "```cpp\nvolume: .75\n```", "```cpp\nmetaData {\n    onMetaDataChanged: {\n        titleLabel.text = \"Title: \" + metaData.title\n        artistLabel.text = \"Artist: \" + metaData.contributingArtist\n        albumLabel.text = \"Album: \" + metaData.albumTitle\n    }\n}\n```", "```cpp\n\nvoid MainWindow::listAudioDevices() \n{ \n    for (const QAudioDeviceInfo &deviceInfo : \n         QAudioDeviceInfo::availableDevices(QAudio::AudioInput)) { \n        ui->textEdit->insertPlainText( \n                    QString(\"Device name: %1\\n\") \n                    .arg(deviceInfo.deviceName())); \n\n        ui->textEdit->insertPlainText( \n                    \"    Supported Codecs: \" \n                    + deviceInfo.supportedCodecs() \n                    .join(\", \") + \"\\n\"); \n        ui->textEdit->insertPlainText( \n                    QString(\"    Supported channel count: %1\\n\") \n                    .arg(stringifyIntList(deviceInfo.supportedChannelCounts()))); \n        ui->textEdit->insertPlainText( \n                    QString(\"    Supported bit depth b/s: %1\\n\") \n                    .arg(stringifyIntList(deviceInfo.supportedSampleSizes()))); \n        ui->textEdit->insertPlainText( \n                    QString(\"    Supported sample rates Hz: %1\\n\") \n                    .arg(stringifyIntList(deviceInfo.supportedSampleRates()))); \n    }    \n} \n\n```", "```cpp\nQAudioEncoderSettings audioSettings;\naudioSettings.setCodec(\"audio/pcm\");\naudioSettings.setChannelCount(2);\naudioSettings.setBitRate(16);\naudioSettings.setSampleRate(44100);\n```", "```cpp\naudioSettings.setQuality(QMultimedia::NormalQuality);\n```", "```cpp\nQAudioRecorder *audioRecorder = new QAudioRecorder(this);\naudioRecorder->setEncodingSettings(audioSettings);\n```", "```cpp\nQStringList inputs = audioRecorder->audioInputs();\n```", "```cpp\n   audioRecorder->setAudioInput(audioRecorder->defaultAudioInput());\n```", "```cpp\naudioRecorder->setOutputLocation(QUrl::fromLocalFile(\"record1.wav\"));\n```", "```cpp\naudioRecorder->record();\n```", "```cpp\nconnect(audioRecorder, QOverload<QMediaRecorder::Error>::of(&QMediaRecorder::error),\n           [=](QMediaRecorder::Error error){ \n                ui->textEdit->insertPlainText(\"QAudioRecorder Error: \" + audioRecorder->errorString()); \n               on_stopButton_clicked(); \n            }); \n```", "```cpp\nplayer = new QMediaPlayer(this);\nplayer->setMedia(audioRecorder->outputLocation());\n```", "```cpp\nconnect(player, &QMediaPlayer::positionChanged,\n         this, &MainWindow::positionChanged);\n```", "```cpp\nconnect(player, QOverload<QMediaPlayer::Error>::of(&QMediaPlayer::error),\n            [=](QMediaPlayer::Error error){ \n            ui->textEdit->insertPlainText(\"QMediaPlayer Error: \" + player->errorString());\n           on_stopButton_clicked();\n   });\n```", "```cpp\nplayer->play();\n```", "```cpp\nplayer->setVolume(75);\n```", "```cpp\nQAudioOutput *audio;\n```", "```cpp\n    QAudioFormat format;\n    format.setSampleRate(44100);\n    format.setChannelCount(2);\n    format.setSampleSize(16);\n    format.setCodec(\"audio/pcm\");\n    format.setByteOrder(QAudioFormat::LittleEndian);\n    format.setSampleType(QAudioFormat::UnSignedInt);\n```", "```cpp\n    for (const QAudioDeviceInfo &deviceInfo : QAudioDeviceInfo::availableDevices(QAudio::AudioOutput)) {\n        if (deviceInfo.isFormatSupported(format)) {\n            audio = new QAudioOutput(deviceInfo, format, this);\n            connect(audio, &QAudioOutput::stateChanged, [=] (QAudio::State\nstate) {\n            qDebug() << Q_FUNC_INFO << \"state\" << state;\n            if (state == QAudio::StoppedState) {\n                if (audio->error() != QAudio::NoError) {\n                    qDebug() << Q_FUNC_INFO << audio->error();\n                }\n            }\n        });\n }\n```", "```cpp\nQFile sourceFile;\nsourceFile.setFileName(file);\nsourceFile.open(QIODevice::ReadOnly);\naudio->start(&sourceFile);\n```", "```cpp\n    QList<QCameraInfo> cameras = QCameraInfo::availableCameras();\n    foreach (const QCameraInfo &cameraInfo, cameras)\n        ui->textEdit->insertPlainText(cameraInfo.deviceName() + \"\\n\");\n```", "```cpp\nQCamera *camera;\nif (cameraInfo.position() == QCamera::BackFace) {\n    camera = new QCamera(cameraInfo);\n}\n```", "```cpp\ncamera->setCaptureMode(QCamera::CaptureStillImage);\n```", "```cpp\nconnect(camera, &QCamera::statusChanged, [=] (QCamera::Status status) {\n    ui->textEdit->insertPlainText(QString(\"Status changed %1\").arg(status) + \"\\n\");\n});\n```", "```cpp\ncamera->load();\nQCameraImageProcessing *imageProcessor = camera->imageProcessing();\n\n```", "```cpp\n    Camera {\n        id: camera\n        position: Camera.BackFace\n        onCameraStateChanged: console.log(cameraState)\n        imageCapture {\n            onImageCaptured: {\n                console.log(\"Image captured\")\n            }\n        }\n    }\n```", "```cpp\n    VideoOutput {\n        id: viewfinder\n        source: camera\n        autoOrientation: true\n}\n```", "```cpp\nMouseArea {\n    anchors.fill: parent\n    onPressAndHold: {\n        captureMode: captureSwitch.position === 0 ?Camera.CaptureStillImage : Camera.CaptureVideo\n        camera.imageCapture.capture()\n    }\n    onClicked: {\n        if (camera.lockStatus == Camera.Unlocked)\n            camera.unlock();\n            camera.searchAndLock();\n    }\n }\n```", "```cpp\nVideoRecorder {\n    audioEncodingMode: CameraRecorder.ConstantBitrateEncoding;\n    audioBitRate: 128000\n    mediaContainer: \"mp4\"\n}\n```", "```cpp\nonPressAndHold: {\n    captureMode: captureSwitch.position === 0 ? Camera.CaptureStillImage : Camera.CaptureVideo\n    if (captureSwitch.position === 0)\n        camera.imageCapture.capture()\n    else\n        camera.videoRecorder.record()\n}\n```", "```cpp\nonClicked: {\n    if (camera.videoRecorder.recorderState === CameraRecorder.RecordingState) {\n        camera.videoRecorder.stop()\n     } else {\n         if (camera.lockStatus == Camera.Unlocked)\n             camera.unlock();\n         camera.searchAndLock();\n     }\n}\n```", "```cpp\nMediaPlayer {\n    id: player\n```", "```cpp\n\n    autoPlay: true\n    source: \"hellowindow.m4v\"\n    onStatusChanged: console.log(\"Status \" + status)\n    onError: console.log(\"Error: \" + errorString)\n}\n```", "```cpp\n\nVideoOutput {\n    source: player\n    anchors.fill : parent\n }\n\nMouseArea {\n    id: playArea\n    anchors.fill: parent\n    onPressed: player.play();\n}\n```", "```cpp\nRadio {\n    id: radio\n```", "```cpp\n\n    band: Radio.FM\n    Component.onCompleted {\n        if (radio.availability == Radio.Available)\n            console.log(\"Good to go!\")\n        else \n           console.log(\"Sad face. No radio found. :(\")\n    }\n}\n```"]