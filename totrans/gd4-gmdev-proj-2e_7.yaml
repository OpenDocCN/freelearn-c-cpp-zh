- en: '7'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next Steps and Additional Resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Congratulations! The projects you’ve built in this book have started you on
    the road to becoming a Godot expert. However, you’ve only just scratched the surface
    of what’s possible in Godot. As you become more proficient and the sizes of your
    projects grow, you’ll need to know how to find solutions to your problems, how
    to distribute your games so they can be played, and even how to extend the engine
    yourself.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you’ll learn about the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: How to effectively use Godot’s built-in documentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using **Git** to back up and manage your project files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An overview of some of the vector math concepts you’ll encounter in most game
    projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using **Blender**, an open source 3D modeling application, to make 3D objects
    you can use in Godot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exporting projects to run on other platforms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An introduction to shaders
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using other programming languages in Godot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Community resources where you can get help
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Becoming a Godot contributor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This chapter will help you move on from the book’s projects and begin making
    your own games. You can use the information here to find additional resources
    and guidance, as well as some more advanced topics that didn’t fit in with the
    beginner projects covered earlier.
  prefs: []
  type: TYPE_NORMAL
- en: Using Godot’s documentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Learning Godot’s API can seem overwhelming at first. How can you learn about
    all the different nodes and the properties and methods each one contains? Fortunately,
    Godot’s built-in documentation is there to help you. Develop the habit of using
    it often: it will help you find things when you’re learning, but it’s also a great
    way to quickly look up a method or property for reference once you know your way
    around.'
  prefs: []
  type: TYPE_NORMAL
- en: Leveling up your skills
  prefs: []
  type: TYPE_NORMAL
- en: Learning to effectively use API documentation is the number one thing you can
    do to dramatically boost your skill level. Keep a docs tab open in your web browser
    while you’re working and reference it often, looking up the nodes and/or functions
    you’re using.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you are in the **Script** tab of the editor, you’ll see the following
    buttons in the upper-right corner:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.1: Documentation buttons](img/B19289_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.1: Documentation buttons'
  prefs: []
  type: TYPE_NORMAL
- en: The `position`, you can take a look at the `Vector2` document and see all of
    the functions available for that data type.
  prefs: []
  type: TYPE_NORMAL
- en: 'The other button allows you to view the documentation directly in the Godot
    editor. Clicking **Search Help** lets you search for any method or property name.
    The search is *smart*, meaning you can type part of a word and the results will
    be narrowed down as you type. Take a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.2: Searching for help](img/B19289_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.2: Searching for help'
  prefs: []
  type: TYPE_NORMAL
- en: When you find the property or method you’re looking for, click **Open** and
    the documentation reference for that node will appear.
  prefs: []
  type: TYPE_NORMAL
- en: Reading the API documentation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you’ve found the documentation for the node you want, you’ll see that
    it follows a common format, with the name of the node at the top followed by several
    subsections of information, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.3: API documentation](img/B19289_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.3: API documentation'
  prefs: []
  type: TYPE_NORMAL
- en: 'At the top of the page is a list called `Object`, which is Godot’s base object
    class. For example, `Area2D` has the following inheritance chain:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This lets you quickly see what other properties this type of object may have.
    For example, an `Area2D` node has a `position` property because that property
    is defined by `Node2D` – any node that inherits from `Node2D` will also have a
    position in 2D space. You can click on any of the node names to jump to that node’s
    documentation.
  prefs: []
  type: TYPE_NORMAL
- en: You can also see a list of what node types, if any, inherit from that particular
    node, as well as a general description of the node. Below that, you can see the
    member variables and methods of the node. The names of most methods and types
    are links, so you can click on any item to read more about it. Note that these
    names and descriptions are the same ones that show when you hover over a property
    in the Inspector.
  prefs: []
  type: TYPE_NORMAL
- en: Develop the habit of consulting the API documentation regularly as you’re working.
    You’ll find that you will quickly begin to develop a stronger understanding of
    how everything works together.
  prefs: []
  type: TYPE_NORMAL
- en: Version control – using Git with Godot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It happens to everyone – at a certain point, you’ll make a mistake. You’ll accidentally
    delete a file or just change some code in a way that breaks everything, but you
    can’t figure out how to get back to the working version.
  prefs: []
  type: TYPE_NORMAL
- en: The solution to this problem is **version control software** (**VCS**). The
    most popular VCS, used by developers all over the world, is Git. When you use
    Git with your projects, every change you make is tracked, allowing you to “rewind”
    time at any point and recover from unwanted changes.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, Godot is very VCS-friendly. All the content of your game is kept
    in the project folder. Scenes, scripts, and resources are all saved in a human-readable
    text format that is easy for Git to track.
  prefs: []
  type: TYPE_NORMAL
- en: Git is typically used via a command-line interface, but there are graphical
    clients you can use as well. There is also a Git plugin available in Godot’s **AssetLib**
    that you can try.
  prefs: []
  type: TYPE_NORMAL
- en: 'In any case, the basic workflow can be broken down into two steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Add** the files you want to track.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Commit** the changes you have made.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In addition, you can use a website such as GitHub or GitLab to store and share
    your Git-based projects. This is a common way that developers collaborate on projects
    – indeed, the entire Godot source code is stored and managed on GitHub. If you’re
    doing this, you’ll have a third step: **pushing** your committed changes to the
    remote repository.'
  prefs: []
  type: TYPE_NORMAL
- en: Most developers use the command-line version of Git, which you can install from
    your OS package manager or download directly from [https://git-scm.com/downloads](https://git-scm.com/downloads).
    There are also many GUI interfaces, such as Git Kraken or GitHub Desktop.
  prefs: []
  type: TYPE_NORMAL
- en: 'The details of using Git are beyond the scope of this book, but here is an
    example of the most basic usage: creating and updating a repository to save your
    changes. All of these steps will be done using your computer’s terminal or command-line
    interface:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new Git repository in your project folder. Navigate to the folder
    and type the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After working on your project, add the new and/or updated files to the repository
    by typing the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Commit your changes, creating a “checkpoint” in time that you can rewind to
    if necessary:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Repeat steps 2 and 3 every time you add a new feature or make changes to your
    project.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure to type something descriptive in the commit message. If you need to
    rewind to a certain point in your project’s history, it will help you identify
    the change you are looking for.
  prefs: []
  type: TYPE_NORMAL
- en: 'There’s a lot more to Git than just the above. You can create branches – multiple
    versions of your game’s code, collaborate with others making changes at the same
    time, and much more. Here are some suggestions of where you can learn more about
    how to use Git with your projects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.github.com/en/get-started/quickstart/git-and-github-learning-resources](https://docs.github.com/en/get-started/quickstart/git-and-github-learning-resources)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Mastering Git* (book) by Jakub Narębski'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It may seem hard at first – Git has a difficult learning curve – but it is a
    skill that will serve you well, and you’ll really appreciate it the first time
    it saves you from a disaster! You may even find that Git is helpful with your
    non-game projects as well.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you’ll see how to use the popular Blender modeling tool
    to create 3D objects and use them in Godot.
  prefs: []
  type: TYPE_NORMAL
- en: Using Blender with Godot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Blender is a very popular open source 3D modeling and animation program (it
    does a lot of other things too). If you’re planning on making a 3D game and you
    need to make items, characters, and environments for your game, Blender is probably
    your best option for doing so.
  prefs: []
  type: TYPE_NORMAL
- en: The most common workflow is to export glTF files from Blender and import them
    into Godot. This is a stable and reliable workflow and will work well in most
    situations.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you export a glTF file, you have two options: glTF binary (`.glb`) and
    glTF text (`.gltf`). The binary version is more compact and is therefore the preferred
    format, but either will work fine.'
  prefs: []
  type: TYPE_NORMAL
- en: Import hints
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It’s common to import meshes from Blender and then make modifications such
    as adding collisions or removing unneeded nodes. To simplify this, you can add
    suffixes to the names of your objects to give Godot a hint about how you want
    them to be processed on import. Here are some examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-noimp` – These objects will be removed from the imported scene.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-col`, `-convcol`, `-colonly` – These options tell Godot to make a collision
    shape from the named mesh. The first two options make a child triangle mesh or
    convex polygon shape, respectively. The `-colonly` option will remove the mesh
    entirely and replace it with a `StaticBody3D` collision.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-rigid` – This object will be imported as a `RigidBody3D`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-loop` – Blender animations with this suffix will be imported with the loop
    option enabled.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See the documentation for more details on all the possible import suffixes.
  prefs: []
  type: TYPE_NORMAL
- en: Using blend files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With Godot 4, you have an additional option: importing `.blend` files directly
    into your Godot project. In order to use this feature, you need to have Blender
    installed on the same computer you’re using for Godot.'
  prefs: []
  type: TYPE_NORMAL
- en: To set it up, open **Editor Settings** and look under **FileSystem** | **Import**.
    Here, you can set the path where you’ve installed Blender.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.4: Setting up Blender support](img/B19289_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.4: Setting up Blender support'
  prefs: []
  type: TYPE_NORMAL
- en: Click the folder icon to browse to your Blender location. Once you’ve set this
    value, you can drop your `.blend` files directly into your Godot project folder.
    This can make prototyping and iterating your designs much faster. You can open
    Blender, save a change to the design, and then when you tab back to Godot, you’ll
    instantly see it updated.
  prefs: []
  type: TYPE_NORMAL
- en: Blender is an important tool to learn if you plan on making 3D games. Because
    of its open source nature, it’s a great fit for working with Godot. While its
    learning curve can be challenging, investing time in learning it will give you
    a huge benefit when designing and building 3D games.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you’ve explored how to import external content into your game project,
    the next section will explain how you can export your game to run on other systems,
    such as mobile devices, PCs, or the web.
  prefs: []
  type: TYPE_NORMAL
- en: Exporting projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Eventually, your project will reach the stage where you want to share it with
    the world. Exporting your project means converting it into a package that can
    be run by someone who doesn’t have the Godot editor. You can export your project
    to a number of popular platforms.
  prefs: []
  type: TYPE_NORMAL
- en: 'Godot supports the following target platforms:'
  prefs: []
  type: TYPE_NORMAL
- en: Android (mobile)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iOS (mobile)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: macOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTML5 (web)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows Desktop
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UWP (Windows Universal)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The requirements for exporting a project vary depending on the platform you
    are targeting. For example, to export to iOS, you must be running on a macOS computer
    with Xcode installed.
  prefs: []
  type: TYPE_NORMAL
- en: Each platform is unique, and some features of your game may not work on some
    platforms because of hardware limitations, screen size, or other factors. As an
    example, if you wanted to export the *Coin Dash* game for an Android phone, your
    player wouldn’t be able to move because the user wouldn’t have a keyboard! For
    that platform, you would need to include touchscreen controls in your game’s code
    (more about this later).
  prefs: []
  type: TYPE_NORMAL
- en: Every platform is unique, and there are many factors to consider when configuring
    your project for export. Consult the official documentation for the latest instructions
    on exporting to your desired platform.
  prefs: []
  type: TYPE_NORMAL
- en: Exporting for consoles
  prefs: []
  type: TYPE_NORMAL
- en: While it’s perfectly possible for Godot games to run on consoles such as Switch
    or Xbox, the process is more complex. Console companies such as Nintendo and Microsoft
    require the developer to sign a contract that includes a secrecy clause. That
    means that, while you can make your game run on the console, you can’t share the
    code you wrote to make it work publicly. If you do plan to release your game on
    a console platform, you’ll either need to do that work yourself or partner with
    a company that has already entered such an agreement.
  prefs: []
  type: TYPE_NORMAL
- en: Getting the export templates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Export templates** are versions of Godot that are compiled for each target
    platform but don’t include the editor. Your project will be combined with the
    target platform’s template to create a standalone application.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin, you must download the export templates. Select **Manage Export Templates**
    from the **Editor** menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.5: Manage Export Templates](img/B19289_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.5: Manage Export Templates'
  prefs: []
  type: TYPE_NORMAL
- en: In this window, you can click **Download and Install** to fetch the export templates
    matching the version of Godot you are using. If you’re running multiple versions
    of Godot for some reason, you’ll see the other versions listed in the window.
  prefs: []
  type: TYPE_NORMAL
- en: Export presets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you’re ready to export your project, click on **Project** | **Export**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.6: Export settings](img/B19289_07_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.6: Export settings'
  prefs: []
  type: TYPE_NORMAL
- en: In this window, you can create **presets** for each platform by clicking **Add…**
    and selecting the platform from the list. You can make as many presets for each
    platform as you wish. For example, you may want to create both “debug” and “release”
    versions of your projects.
  prefs: []
  type: TYPE_NORMAL
- en: Each platform has its own settings and options – too many to describe here.
    The default values are typically good, but you should test them thoroughly before
    distributing the project. Consult the official documentation at [https://docs.godotengine.org/](https://docs.godotengine.org/)
    for details.
  prefs: []
  type: TYPE_NORMAL
- en: Exporting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are two export buttons at the bottom of the export window. The first button,
    **Export PCK/ZIP…**, will only create a PCK, or packed, version of your project’s
    data. This doesn’t include an executable, so the game can’t be run on its own.
    This method is useful if you need to provide add-ons, updates, or **downloadable
    content** (**DLC**) for your game.
  prefs: []
  type: TYPE_NORMAL
- en: The second button, `exe` for Windows or an .`apk` for Android.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.7: Export dialog](img/B19289_07_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.7: Export dialog'
  prefs: []
  type: TYPE_NORMAL
- en: In the next dialog, you can choose where to save your exported project. Take
    note of the **Export with Debug** checkbox, which is checked by default. You’ll
    want to disable this when it is time to export the final, released version of
    your game.
  prefs: []
  type: TYPE_NORMAL
- en: Exporting for specific platforms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The exact steps and requirements for exporting vary depending on your target
    platform. For example, exporting to desktop platforms (Windows, MacOS, Linux)
    is very straightforward and will work without any additional configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exporting on mobile platforms, however, can be more complex. To export for
    Android, for example, you’ll need to install Google’s Android Studio and configure
    it correctly. The detailed requirements can change regularly as mobile platforms
    update, so you should check the Godot documentation at this link for the most
    accurate information: [https://docs.godotengine.org/en/latest/tutorials/export/](https://docs.godotengine.org/en/latest/tutorials/export/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you’ve configured the platforms you wish to export, the window will look
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.8: Ready to export](img/B19289_07_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.8: Ready to export'
  prefs: []
  type: TYPE_NORMAL
- en: Godot’s export system is comprehensive and robust. You can manage multiple versions,
    export different features for different platforms, and many other options. While
    it may seem complex at first, remember that the complexity mostly comes from the
    rules of a particular platform. It’s best if you practice with desktop platforms
    first before attempting to work with mobile.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you’ll learn about how visual effects are implemented using
    a special type of program called a shader.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to shaders
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A **shader** is a program that is designed to run on the GPU and alters the
    way that objects appear on the screen. Shaders are used extensively in both 2D
    and 3D development to create a variety of visual effects. They are called shaders
    because they were originally used for shading and lighting effects, but today
    they are used for a wide variety of visual effects. Because they run in the GPU
    in *parallel*, they are very fast but also come with some restrictions.
  prefs: []
  type: TYPE_NORMAL
- en: Learning more
  prefs: []
  type: TYPE_NORMAL
- en: This section is a very brief introduction to the concept of shaders. For a more
    in-depth understanding, see [https://thebookofshaders.com/](https://thebookofshaders.com/)
    and Godot’s shader documentation at .
  prefs: []
  type: TYPE_NORMAL
- en: Earlier in this book, when you added a `StandardMaterial3D` to a mesh, you were
    actually adding a shader – one that’s pre-configured and built into Godot. It’s
    great for many common situations, but sometimes you need something more specific,
    and for that, you’ll need to write shader code.
  prefs: []
  type: TYPE_NORMAL
- en: In Godot, you’ll write shaders in a language very similar to GLSL ES 3.0\. If
    you are familiar with C-style languages, you’ll find the syntax very similar.
    If you are not, it may look strange to you at first. See the end of this section
    for links to further resources where you can learn more.
  prefs: []
  type: TYPE_NORMAL
- en: 'Shaders in Godot come in several types:'
  prefs: []
  type: TYPE_NORMAL
- en: '**spatial** (for 3D rendering)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**canvas_item** (for 2D rendering)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**particles** (for rendering particle effects)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**sky** (for rendering 3D sky materials)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fog** (for rendering volumetric fog effects)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first line of your shader must declare which of these types you are writing.
    Typically, this will be automatically filled in for you when you add a shader
    to a particular type of node.
  prefs: []
  type: TYPE_NORMAL
- en: 'After determining the type of shader, you can then choose what phase(s) of
    the rendering process you want to affect:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Fragment** shaders are used to set the color of all affected pixels'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Vertex** shaders can modify the vertices of a shape or mesh, changing its
    apparent shape'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Light** shaders are applied to alter the way light is processed for an object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For each of these three shader types, you will write code that will be run *simultaneously*
    on every affected item. This is where the real power of shaders comes from. For
    example, when using a fragment shader, the code is run on every pixel of the object
    at the same time. This is a very different process than what you might be used
    to using a traditional language, where you would loop over each pixel one at a
    time. That kind of sequential code just isn’t fast enough to handle the huge number
    of pixels modern games need to process.
  prefs: []
  type: TYPE_NORMAL
- en: The importance of the GPU
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider a game running at the relatively low resolution of 480 x 720 – a typical
    phone resolution. The total number of pixels on the screen is almost 350,000\.
    Any manipulation of those pixels in code must happen in less than 1/60 of a second
    to avoid lag – even less when you consider the rest of your code that also has
    to run on every frame: game logic, animation, networking, and everything else.
    This is why GPUs are so important, especially for high-end games that may be processing
    millions of pixels each and every frame.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a 2D shader
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To demonstrate some shader effects, create a scene with a `Sprite2D` node and
    choose any texture you like. This demo will use the player image from *Coin Dash*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.9: Player sprite](img/B19289_07_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.9: Player sprite'
  prefs: []
  type: TYPE_NORMAL
- en: A shader can be added to any `CanvasItem` derived node – in this case, `Sprite2D`,
    via its **Material** property. In this property, select **New ShaderMaterial**
    and click on the newly created resource.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.10: Adding a shader material](img/B19289_07_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.10: Adding a shader material'
  prefs: []
  type: TYPE_NORMAL
- en: The first property is **Shader**, where you can choose **New Shader**. When
    you do, a **Create Shader** panel appears.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.11: Create Shader options](img/B19289_07_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.11: Create Shader options'
  prefs: []
  type: TYPE_NORMAL
- en: Note that `.gdshader`. Click **Create** and then you can click your new shader
    to edit it in the bottom panel.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your new shader has the following code by default:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Shader functions have a number of `TEXTURE` input built-in contains the pixel
    data of the object’s texture, while the `COLOR` output built-in is used to set
    the pixel color. Remember, the code in the fragment shader will affect the color
    of every processed pixel.
  prefs: []
  type: TYPE_NORMAL
- en: When working with shaders in the `TEXTURE` property, for example, coordinates
    are measured in a *normalized* (that is, ranging from 0 to 1) coordinate space.
    This coordinate space is called `UV` to distinguish it from the x/y coordinate
    space.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.12: UV coordinate space](img/B19289_07_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.12: UV coordinate space'
  prefs: []
  type: TYPE_NORMAL
- en: As a very small example, our first shader will change the color of each pixel
    in the image based on its `UV` position.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type the following code into the **Shader** **Editor** panel:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 7.13: Color gradient](img/B19289_07_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.13: Color gradient'
  prefs: []
  type: TYPE_NORMAL
- en: As soon as you do this, you’ll see the entire image change to a gradient of
    red and green. What happened? Look at the preceding UV image – as we move from
    left to right, the red value increases from 0 to 1, and the green does the same
    from bottom to top.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s try another example. This time, to allow you to choose the color, you
    can use a `uniform` variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Uniforms allow you to pass data into the shader from outside. Declaring a `uniform`
    variable will cause it to appear in the Inspector (similar to the way `@export`
    works in GDScript) and also allows you to set it via code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: You’ll see that **Fill Color** has appeared under **Shader Parameters** in the
    Inspector, and you can change its value.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.14: Shader Parameters](img/B19289_07_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.14: Shader Parameters'
  prefs: []
  type: TYPE_NORMAL
- en: 'Why did the entire rectangle of the image change color in these examples? Because
    the output `COLOR` is applied to every pixel. Our player image has transparent
    pixels surrounding it, so we can ignore those by not changing the pixel’s `a`
    value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can change the color of the object. Let’s turn it into a “hit” effect
    so that we can make the object flash whenever it’s hit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Note that now you can toggle the color on and off by clicking the `uniform`
    variables appear in the `AnimationPlayer` that animates these values for your
    visual effect.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s another example. This time, we’ll create an outline around the image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In this shader, we have a lot more going on. We’re using the built-in `TEXTURE_PIXEL_SIZE`
    to get the normalized size of each pixel (its size compared to the size of the
    image). Then, we get a float value that “adds up” how transparent the pixels on
    all four sides of the image are. Finally, we use the `mix()` function to combine
    the original pixel’s color with the line color based on that outline value.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.15: Outline shader](img/B19289_07_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.15: Outline shader'
  prefs: []
  type: TYPE_NORMAL
- en: An important thing to note – did you notice that the outline did not go below
    the character’s feet? This is because an object’s shader can only affect the pixels
    of that image. Since the character’s feet in this image are on the edge, there
    are no pixels available below them that can be affected by the shader. It’s important
    to keep this in mind when working on 2D shader effects. If you’re creating 2D
    art, leave a border of a few pixels around the image to prevent clipping at the
    edges.
  prefs: []
  type: TYPE_NORMAL
- en: 3D shaders
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s try one 3D shader so you can see how the vertex() shader works. In a new
    scene, add a `MeshInstance3D` with a `PlaneMesh` shape. So that you can see the
    vertices better, select **Display Wireframe** from the **Perspective** menu.
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Mesh** resource to expand it and add a new shader in the **Material**
    property, just like you did previously.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.16: Adding a shader to the plane](img/B19289_07_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.16: Adding a shader to the plane'
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we’re using a plane shape, we have four vertices: the four corners of
    the shape. The `vertex()` function will apply an effect to each of these vertices.
    For example, adding to their `y` value would move them all upward.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start with this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Note that we’re using a `spatial` type shader now, since our node is a `Node3D`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.17: Shifting the vertices](img/B19289_07_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.17: Shifting the vertices'
  prefs: []
  type: TYPE_NORMAL
- en: It doesn’t look like much changed – the two vertices in the +X direction moved
    down a little bit. But `UV.x` is only either `0` or `1`, so the `sin()` function
    doesn’t have much to do. To see more variation, we need to add more vertices.
    In the mesh properties, change both `32`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.18: Working with more vertices](img/B19289_07_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.18: Working with more vertices'
  prefs: []
  type: TYPE_NORMAL
- en: Now we can see much more variation in the effect, as the different vertices
    along the *x* axis are moved up or down in a smooth sine wave.
  prefs: []
  type: TYPE_NORMAL
- en: 'For one more fun effect, let’s use the `TIME` built-in to animate the effect.
    Change the code to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Take some time to experiment with this. Don’t be afraid to try things – experimentation
    is a great way to become more comfortable with how shaders work.
  prefs: []
  type: TYPE_NORMAL
- en: Learning more
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Shaders are capable of an amazing range of effects. Experimenting with Godot’s
    shader language is a great way to learn the basics. The best place to start is
    with the shader section of Godot’s documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.godotengine.org/en/latest/tutorials/shaders/](https://docs.godotengine.org/en/latest/tutorials/shaders/)'
  prefs: []
  type: TYPE_NORMAL
- en: There is also a wealth of resources on the internet for learning more. When
    learning about shaders, you can use resources that aren’t specific to Godot, and
    you shouldn’t have much trouble getting them to work in Godot. The concept is
    the same across all types of graphics applications.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, Godot’s documentation includes a page on converting shaders from
    other popular sources into Godot’s version of GLSL.
  prefs: []
  type: TYPE_NORMAL
- en: To see some examples of just how powerful shaders can be, visit [https://www.shadertoy.com/](https://www.shadertoy.com/).
  prefs: []
  type: TYPE_NORMAL
- en: This section was only a brief introduction to the in-depth topic of shaders
    and shader effects. While it can be a very challenging subject to master, the
    power it gives you makes it well worth the effort.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you’ll see how it’s possible to use other programming languages
    with Godot.
  prefs: []
  type: TYPE_NORMAL
- en: Using other programming languages in Godot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The projects in this book have all been written using GDScript. GDScript has
    a number of advantages that make it the best choice for building your games. It
    is very tightly integrated with Godot’s API, and its Python-style syntax makes
    it useful for rapid development while also being very beginner-friendly.
  prefs: []
  type: TYPE_NORMAL
- en: It’s not the only option, however. Godot also supports two other “official”
    scripting languages and also provides tools for integrating code using a variety
    of other languages.
  prefs: []
  type: TYPE_NORMAL
- en: C#
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: C# is very popular in game development, and the Godot version is based on the
    .NET 6.0 framework. Because of its wide use, there are many resources available
    for learning C# and a great deal of existing code in the language for accomplishing
    a variety of game-related functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the time of writing, Godot version 4.0 is still relatively new. Features
    are being added and bugs are being fixed continuously, so see the C# documentation
    at this link to get the latest information: [https://docs.godotengine.org/en/stable/tutorials/scripting/c_sharp/index.html](https://docs.godotengine.org/en/stable/tutorials/scripting/c_sharp/index.html)'
  prefs: []
  type: TYPE_NORMAL
- en: If you want to try out the C# implementation, you’ll need to first make sure
    you have the .NET SDK installed, which you can get from [https://dotnet.microsoft.com/download](https://dotnet.microsoft.com/download).
    You must also download the Godot version that has C# support included, which you
    can find at [http://godotengine.org/download](http://godotengine.org/download),
    where it is labeled **Godot Engine - .****NET**.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll also need to use an external editor – such as Visual Studio Code or MonoDevelop
    – that provides more debugging and language functionality than Godot’s built-in
    editor. You can set this in **Editor Settings** under the **Dotnet** section.
  prefs: []
  type: TYPE_NORMAL
- en: 'To attach a C# script to a node, select the language from the **Attach Node**
    **Script** dialog:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.19: Create script dialog](img/B19289_07_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.19: Create script dialog'
  prefs: []
  type: TYPE_NORMAL
- en: In general, scripting in C# works very much the same as what you’ve already
    done in GDScript. The main difference is that the API functions are renamed in
    PascalCase to follow C# standards instead of the snake_case that’s standard for
    GDScript.
  prefs: []
  type: TYPE_NORMAL
- en: There are also a number of existing C# libraries that you may find useful in
    building your game. Things such as procedural generation, artificial intelligence,
    or other intensive topics may be easier to implement using available C# libraries.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an example of CharacterBody2D movement in C#. Compare this with the
    movement script in *Jungle Jump*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: For more details about setting up and using C#, see the **Scripting** section
    of the documentation linked above.
  prefs: []
  type: TYPE_NORMAL
- en: Other languages – GDExtension
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many programming languages to choose from. Each has its strengths
    and weaknesses, as well as its fans who prefer to use it over other options. While
    it doesn’t make sense to support every language directly in Godot, there are situations
    where GDScript is not sufficient to solve a particular problem. Perhaps you want
    to use an existing external library, or you’re doing something computationally
    intensive – such as AI or procedural world generation – that it doesn’t make sense
    to write in GDScript.
  prefs: []
  type: TYPE_NORMAL
- en: Because GDScript is an interpreted language, it trades performance for flexibility.
    This means that for some processor-intensive code, it can run unacceptably slow.
    In this case, the highest performance would be achieved by running native code
    written in a compiled language. In this situation, you can move that code to GDExtension.
  prefs: []
  type: TYPE_NORMAL
- en: '**GDExtension** is a technology that opens up the same API available to GDScript
    and C#, making it possible to write code in other languages that talks to Godot.
    By default, it works directly with C and C++, but by using **third-party bindings**,
    you can use it with many other languages.'
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing, several projects are available that use GDExtension
    to allow you to use other languages for scripting. These include C, C++, Rust,
    Python, Nim, and others. While these additional language bindings are still relatively
    new at the time of writing, they each have a dedicated group of developers working
    on them. If you’re interested in using a particular language with Godot, a Google
    search of “godot + <language name>” will help you find what’s available.
  prefs: []
  type: TYPE_NORMAL
- en: Working with other programming languages is certainly not required for just
    about any game project you may encounter, so don’t feel that it’s something you
    need to learn if it’s foreign to you. It’s presented here for those to whom it
    might be useful, and it’s something to keep in mind if you have a preferred language
    you’d like to work with.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you can explore the community resources that are available
    for you to learn more about how Godot works, find examples, and even get help
    with your own projects.
  prefs: []
  type: TYPE_NORMAL
- en: Getting help – community resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Godot’s online community is one of its strengths. Because of its open source
    nature, there is a wide variety of people working together to improve the engine,
    write documentation, and help each other with issues.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find a list of official community resources at [https://godotengine.org/community](https://godotengine.org/community).
    These links may change over time, but the following are the main community resources
    you should be aware of:'
  prefs: []
  type: TYPE_NORMAL
- en: '**GitHub** – [https://github.com/godotengine/](https://github.com/godotengine/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Godot GitHub repository is where Godot’s developers work. You can find Godot’s
    source code there if you find yourself needing to compile a custom version of
    the engine for your own use or if you’re just curious how things work under the
    hood.
  prefs: []
  type: TYPE_NORMAL
- en: If you find any kind of problem with the engine itself – something that doesn’t
    work, a typo in the documentation, and so on – this is the place where you should
    report it.
  prefs: []
  type: TYPE_NORMAL
- en: '**Godot Q&A** – [https://godotengine.org/qa/](https://godotengine.org/qa/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is Godot’s official help site. You can post questions here for the community
    to answer, as well as searching the growing database of previously answered questions.
    If you happen to see a question you know the answer to, you can help out as well.
  prefs: []
  type: TYPE_NORMAL
- en: '**Discord** – [https://discord.gg/zH7NUgz](https://discord.gg/zH7NUgz)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Godot Engine Discord is a very active and welcoming community of Godot
    users where you can get help, find answers to questions, and discuss your project
    with others. You may even encounter the author of this book hanging out in the
    #beginner channel, answering questions!'
  prefs: []
  type: TYPE_NORMAL
- en: Godot Recipes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I have also created the **Godot Recipes** website at [https://godotrecipes.com/](https://godotrecipes.com/).
    This is a collection of solutions and examples to help you make any game system
    you might need. You can see how to make an FPS character, handle complex animation
    states, or add AI to your enemies.
  prefs: []
  type: TYPE_NORMAL
- en: There are also additional tutorials and examples of completed games that you
    can try out.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.20: Godot Recipes website](img/B19289_07_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.20: Godot Recipes website'
  prefs: []
  type: TYPE_NORMAL
- en: As illustrated by this section, one of the great strengths of the Godot Engine
    is its community. The resources listed here, along with many others, are built
    by the community of Godot users who are passionate about the engine and about
    helping others. In the next section, you can find out how you can contribute to
    Godot as well.
  prefs: []
  type: TYPE_NORMAL
- en: Contributing to Godot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Godot is an open source, community-driven project. All of the work that’s done
    to build, test, document, and otherwise support Godot is done primarily by passionate
    individuals contributing their time and skills. For the majority of contributors,
    it is a labor of love, and they take pride in helping to build something of quality
    that people enjoy using.
  prefs: []
  type: TYPE_NORMAL
- en: In order for Godot to continue growing and improving, there is always a need
    for more members of the community to step up and contribute. There are many ways
    you can help out, regardless of your skill level or the amount of time you can
    commit.
  prefs: []
  type: TYPE_NORMAL
- en: Contributing to the engine
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are two main ways you can directly contribute to Godot’s development.
    If you visit [https://github.com/godotengine/godot](https://github.com/godotengine/godot),
    you can see Godot’s source code, as well as finding out exactly what’s being worked
    on. Click the **Clone** or **Download** button, and you’ll have the up-to-the-minute
    source code and can test out the latest features. You’ll need to build the engine,
    but don’t be intimidated: Godot is one of the easiest open source projects to
    compile that you’ll find. See [https://docs.godotengine.org/en/latest/contributing/development/compiling/index.html](https://docs.godotengine.org/en/latest/contributing/development/compiling/index.html)
    for instructions.'
  prefs: []
  type: TYPE_NORMAL
- en: If you’re not able to actually contribute to the C++ code, go to the **Issues**
    tab, where you can report or read about bugs and suggestions for improvements.
    There is always a need for people to confirm bug reports, test fixes, and give
    their opinions on new features.
  prefs: []
  type: TYPE_NORMAL
- en: Writing documentation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Godot’s official documentation is only as good as its community’s contributions.
    From something as small as correcting a typo to writing an entire tutorial, all
    levels of help are very welcome. The home of the official documentation is [https://github.com/godotengine/godot-docs](https://github.com/godotengine/godot-docs).
  prefs: []
  type: TYPE_NORMAL
- en: Hopefully, by now, you’ve taken some time to browse through the official documentation
    and get an idea of what’s available. If you spot something wrong or something
    missing, open an issue at the aforementioned GitHub link. If you’re comfortable
    with using GitHub, you can even go ahead and submit a pull request yourself. Just
    make sure you read all the guidelines first so that your contribution will be
    accepted. You can find the guidelines at [https://docs.godotengine.org/en/latest/contributing/ways_to_contribute.html](https://docs.godotengine.org/en/latest/contributing/ways_to_contribute.html).
  prefs: []
  type: TYPE_NORMAL
- en: If you speak a language other than English, translations are also very much
    needed and will be greatly appreciated by Godot’s non-English-speaking users.
    See [https://docs.godotengine.org/en/latest/contributing/documentation/editor_and_docs_localization](https://docs.godotengine.org/en/latest/contributing/documentation/editor_and_docs_localization)
    for how to contribute in your language.
  prefs: []
  type: TYPE_NORMAL
- en: Donations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Godot is a not-for-profit project, and user donations go a long way to help
    pay for hosting costs and development resources, such as hardware. Financial contributions
    also allow the project to pay core developers, allowing them to dedicate themselves
    part- or full-time to working on the engine.
  prefs: []
  type: TYPE_NORMAL
- en: The easiest way to contribute to Godot is via the donation page at [https://godotengine.org/donate](https://godotengine.org/donate).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about a few additional topics that will help you
    continue to level up your Godot skills. Godot has a great many features in addition
    to those explored in this book. You’ll need to know where to look and where to
    ask for help as you move on to working on projects of your own.
  prefs: []
  type: TYPE_NORMAL
- en: You also learned about some more advanced topics, such as working with other
    programming languages and using shaders to enhance your game’s visual effects.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, since Godot is built by its community, you learned how you could
    participate and become part of the team that is making it one of the fastest-growing
    projects of its kind.
  prefs: []
  type: TYPE_NORMAL
- en: Final words
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thank you for taking the time to read this book. I hope you found it useful
    in starting your game development journey with Godot. The goal of this book was
    not to give you a “copy-and-paste” solution to making games but rather to help
    you develop an intuition for the process of game development. As you’ll see when
    you explore other resources, there are often many ways to solve a problem, and
    there may not be a single “right” answer. It’s up to you as a developer to evaluate
    and determine what works for you in your situation. I wish you luck in your future
    game projects, and I hope to play them sometime in the future!
  prefs: []
  type: TYPE_NORMAL
