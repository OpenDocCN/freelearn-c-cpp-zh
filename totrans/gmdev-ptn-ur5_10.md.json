["```cpp\nUSTRUCT(BlueprintType)\nstruct FPooledObjectData\n{\n    GENERATED_BODY()\n    UPROPERTY(EditAnywhere)\n    TSubclassOf<AActor> _ActorTemplate;\n    UPROPERTY(EditAnywhere)\n    int _PoolSize;\n    UPROPERTY(EditAnywhere)\n    bool _CanGrow;\n    UPROPERTY(EditAnywhere)\n    FString _ActorName;\n    FPooledObjectData()\n    {\n        _ActorTemplate = nullptr;\n        _PoolSize = 1;\n        _CanGrow = false;\n        _ActorName = \"default\";\n    }\n};\n```", "```cpp\nclass AObjectPool;\nUCLASS(ClassGroup=(Utility), meta=(BlueprintSpawnableComponent))\nclass RTS_AI_API UPooledObject : public UActorComponent\n{\n    GENERATED_BODY()\npublic:\n    UPROPERTY(VisibleInstanceOnly, BlueprintReadOnly)\n    bool _IsActive;\n    void Init(AObjectPool* owner);\n    UFUNCTION(BlueprintCallable)\n    void RecycleSelf();\nprivate:\n    TObjectPtr<AObjectPool> _ObjectPool;\n    virtual void OnComponentDestroyed(bool bDestroyingHierarchy)\n    override;\n};\n```", "```cpp\nvoid UPooledObject::Init(AObjectPool* owner)\n{\n    _IsActive = false;\n    _ObjectPool = owner;\n}\nvoid UPooledObject::RecycleSelf()\n{\n    _ObjectPool->RecyclePooledObject(this);\n}\nvoid UPooledObject::OnComponentDestroyed(\n    bool bDestroyingHierarchy)\n{\n    _ObjectPool->OnPoolerCleanup.RemoveDynamic(this,\n        &UPooledObject::RecycleSelf);\n    Super::OnComponentDestroyed(bDestroyingHierarchy);\n}\n```", "```cpp\nDECLARE_DYNAMIC_MULTICAST_DELEGATE(FPoolerCleanupSignature);\nclass UPooledObject;\nUSTRUCT(BlueprintType)\nstruct FSingleObjectPool\n{\n    GENERATED_BODY()\n    UPROPERTY(VisibleInstanceOnly, BlueprintReadOnly)\n    TArray<TObjectPtr<UPooledObject>> _PooledObjects;\n};\n```", "```cpp\nUCLASS()\nclass RTS_AI_API AObjectPool : public AActor\n{\n    GENERATED_BODY()\npublic:\n    UPROPERTY()\n    FPoolerCleanupSignature OnPoolerCleanup;\n    UFUNCTION(BlueprintCallable)\n    void Broadcast_PoolerCleanup();\n    UFUNCTION(BlueprintCallable)\n    AActor* GetPooledActor(FString name);\n    UFUNCTION(BlueprintCallable)\n    void RecyclePooledObject(UPooledObject* poolCompRef);\n    UFUNCTION(BlueprintCallable)\n    void RecycleActor(AActor* pooledActor);\nprotected:\n    virtual void BeginPlay() override;\n    UPROPERTY(EditAnywhere, BlueprintReadWrite)\n    TArray<FPooledObjectData> _PooledObjectData;\n    UPROPERTY(VisibleInstanceOnly, BlueprintReadWrite)\n    TArray<FSingleObjectPool> _Pools;\nprivate:\n    void RegenItem(int poolIndex, int positionIndex);\n};\n```", "```cpp\nvoid AObjectPool::Broadcast_PoolerCleanup() {\n    OnPoolerCleanup.Broadcast();\n}\nvoid AObjectPool::BeginPlay() {\n    Super::BeginPlay();\n    FActorSpawnParameters spawnParams;\n    for(int poolIndex = 0; poolIndex <\n        _PooledObjectData.Num(); poolIndex++)\n    {\n        FSingleObjectPool currentPool;\n        spawnParams.Name =\n            FName(_PooledObjectData[poolIndex]._ActorName);\n        spawnParams.NameMode =\n            FActorSpawnParameters::ESpawnActorNameMode:: Requested;\n        spawnParams.SpawnCollisionHandlingOverride =\n           ESpawnActorCollisionHandlingMethod::AlwaysSpawn;\n        for(int objectIndex = 0; objectIndex <\n            _PooledObjectData[poolIndex]._PoolSize;\n                objectIndex++)\n        {\n            AActor* spawnedActor = GetWorld()->\n                SpawnActor(_PooledObjectData[poolIndex].\n                    _ActorTemplate, &FVector::ZeroVector,\n                        &FRotator::ZeroRotator,\n                            spawnParams);\n            UPooledObject* poolComp =\n                NewObject<UPooledObject>(spawnedActor);\n            poolComp->RegisterComponent();\n            spawnedActor->AddInstanceComponent(poolComp);\n            poolComp->Init(this);\n            currentPool._PooledObjects.Add(poolComp);\n            spawnedActor->SetActorHiddenInGame(true);\n            spawnedActor->SetActorEnableCollision(false);\n            spawnedActor->SetActorTickEnabled(false);\n            spawnedActor->AttachToActor(this,\n                FAttachmentTransformRules::\n                    SnapToTargetNotIncludingScale);\n        }\n        _Pools.Add(currentPool);\n    }\n}\n```", "```cpp\nAActor* AObjectPool::GetPooledActor(FString name)\n{\n    int poolCount = _Pools.Num();\n    int currentPool = -1;\n    for(int i = 0; i < poolCount; i++)\n    {\n        if(_PooledObjectData[i]._ActorName == name)\n        {\n            currentPool = i;\n            break;\n        }\n    }\n    if(currentPool == -1) { return nullptr; }\n    int pooledObjectCount =\n        _Pools[currentPool]._PooledObjects.Num();\n    int firstAvailable = -1;\n    for(int i = 0; i < pooledObjectCount; i++)\n    {\n        if(_Pools[currentPool]._PooledObjects[i] !=\n            nullptr)\n        {\n            if(!_Pools[currentPool]._PooledObjects[i]->\n                _IsActive)\n            {\n                firstAvailable = i;\n                break;\n            }\n        }\n        else\n        {\n            RegenItem(currentPool, i);\n            firstAvailable = i;\n            break;\n        }\n    }\n    if(firstAvailable >= 0)\n    {\n        UPooledObject* toReturn =\n            _Pools[currentPool]._PooledObjects[firstAvailable];\n        toReturn->_IsActive = true;\n        OnPoolerCleanup.AddUniqueDynamic(toReturn,\n            &UPooledObject::RecycleSelf);\n        AActor* toReturnActor = toReturn->GetOwner();\n        toReturnActor->SetActorHiddenInGame(false);\n        toReturnActor->SetActorEnableCollision(true);\n        toReturnActor->SetActorTickEnabled(true);\n        toReturnActor->AttachToActor(nullptr,\n            FAttachmentTransformRules::\n                SnapToTargetNotIncludingScale);\n        return toReturnActor;\n    }\n    if(!_PooledObjectData[currentPool]._CanGrow) { return\n        nullptr; }\n    FActorSpawnParameters spawnParams;\n    spawnParams.Name =\n        FName(_PooledObjectData[currentPool]._ActorName);\n    spawnParams.NameMode =\n        FActorSpawnParameters::ESpawnActorNameMode::\n            Requested;\n    spawnParams.SpawnCollisionHandlingOverride =\n        ESpawnActorCollisionHandlingMethod::AlwaysSpawn;\n    AActor* spawnedActor = GetWorld()->\n        SpawnActor(_PooledObjectData[currentPool].\n            _ActorTemplate, &FVector::ZeroVector,\n                &FRotator::ZeroRotator, spawnParams);\n    UPooledObject* poolComp =\n        NewObject<UPooledObject>(spawnedActor);\n    poolComp->RegisterComponent();\n    spawnedActor->AddInstanceComponent(poolComp);\n    poolComp->Init(this);\n    _Pools[currentPool]._PooledObjects.Add(poolComp);\n    poolComp->_IsActive = true;\n    OnPoolerCleanup.AddUniqueDynamic(poolComp,\n        &UPooledObject::RecycleSelf);\n    return spawnedActor;\n}\n```", "```cpp\nvoid AObjectPool::RecyclePooledObject(UPooledObject* poolCompRef)\n{\n    OnPoolerCleanup.RemoveDynamic(poolCompRef,\n        &UPooledObject::RecycleSelf);\n    poolCompRef->_IsActive = false;\n    AActor* returningActor = poolCompRef->GetOwner();\n    returningActor->SetActorHiddenInGame(true);\n    returningActor->SetActorEnableCollision(false);\n    returningActor->SetActorTickEnabled(false);\n    returningActor->AttachToActor(this,\n        FAttachmentTransformRules::SnapToTargetNotIncludingScale);\n}\nvoid AObjectPool::RecycleActor(AActor* pooledActor)\n{\n    if(UPooledObject* poolCompRef =\n        Cast<UPooledObject>(pooledActor->\n            GetComponentByClass(UPooledObject::StaticClass())))\n    {\n        RecyclePooledObject(poolCompRef);\n    }\n}\n```", "```cpp\nvoid AObjectPool::RegenItem(int poolIndex, int positionIndex)\n{\n    FActorSpawnParameters spawnParams;\n    spawnParams.Name =\n        FName(_PooledObjectData[poolIndex]._ActorName);\n    spawnParams.NameMode =\n        FActorSpawnParameters::ESpawnActorNameMode::Requested;\n    spawnParams.SpawnCollisionHandlingOverride =\n        ESpawnActorCollisionHandlingMethod::AlwaysSpawn;\n    AActor* spawnedActor = GetWorld()->\n        SpawnActor(_PooledObjectData[poolIndex].\n            _ActorTemplate, &FVector::ZeroVector,\n                &FRotator::ZeroRotator, spawnParams);\n    UPooledObject* poolComp =\n        NewObject<UPooledObject>(spawnedActor);\n    poolComp->RegisterComponent();\n    spawnedActor->AddInstanceComponent(poolComp);\n    poolComp->Init(this);\n    _Pools[poolIndex]._PooledObjects.Insert(poolComp,\n        positionIndex);\n    spawnedActor->SetActorHiddenInGame(true);\n    spawnedActor->SetActorEnableCollision(false);\n    spawnedActor->SetActorTickEnabled(false);\n    spawnedActor->AttachToActor(this,FAttachmentTransformRules::\n    SnapToTargetNotIncludingScale);\n}\n```"]