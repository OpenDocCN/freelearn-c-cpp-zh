["```cpp\ntemplate <typename T> void swap(T& x, T& y) { T tmp(x);\n  x = y;\n  y = tmp;\n}\n```", "```cpp\nvoid swap(std::vector<int>& x, std::vector<int>& y) {\n  std::vector<int> tmp(x);\n  x = y;\n  y = tmp;\n}\n```", "```cpp\ntemplate <typename T>\n  void swap (T& a, T& b);\ntemplate <typename T, size_t N>\n  void swap(T (&a)[N], T (&b)[N]);    // Since C++11\n```", "```cpp\n// Example 03a\nclass C;            // Our element type\nC transmogrify(C x) {    // Some operation on C\n  return C(...);\n}\nvoid transmogrify(const std::vector<C>& in,\n                  std::vector<C>& out) {\n  out.resize(0);\n  out.reserve(in.size());\n  for (const auto& x : in) {\n    out.push_back(transmogrify(x));\n  }\n}\n```", "```cpp\n// Example 03b\nvoid transmogrify(const std::vector<C>& in,\n                  std::vector<C>& out) {\n  std::vector<C> tmp;\n  tmp.reserve(in.size());\n  for (const C& x : in) {\n    tmp.push_back(transmogrify(x));\n  }\n  out.swap(tmp);    // Must not throw!\n}\n```", "```cpp\n// Example 04\nclass C {\n    public:\n    void swap(C& rhs) noexcept {\n        … swap data members …\n    }\n};\nC c = ....;    // Object with stuff in it\n{\n  C tmp;\n  c.swap(tmp);    // c is now default-constructed\n}            // Old c is now gone\n```", "```cpp\nC c = ....;    // Object with stuff in it\nC().swap(c);    // Temporary is created and deleted\n```", "```cpp\nC c = ....;    // Object with stuff in it\nc.swap(C());    // Close but does not compile\n```", "```cpp\n// Example 05\nstd::vector<C> vec;\n...                     // Write data into the vector\n{\n  std::vector<C> tmp;\n  transmogrify(vec, tmp);    // tmp is the result\n  swap(vec, tmp);        // Now vec is the result!\n}                    // and now old vec is destroyed\n...                    // Keep using vec, with new data\n```", "```cpp\nstd::vector<C> vec;\n...                     // Write data into the vector\ntry {\n  std::vector<C> tmp;\n  transmogrify(vec, tmp);    // throws an exception\n  swap(vec, tmp);        // we never get here\n} catch (...) {}            // vec is unchanged\n...                     // Keep using vec, with old data\n```", "```cpp\nstd::vector<C> vec;\n...    // Write data into the vector std::vector<C> vec1;\ntransmogrify(vec, vec1);    // Must use vec1 from now on!\nstd::vector<C> vec2;\ntransmogrify(vec1, vec2);     // Must use vec2 from now on!\n```", "```cpp\nclass C {\n  public:\n  void swap(C& rhs) noexcept;\n};\n```", "```cpp\n//Example 06a\n#include <utility>    // <algorithm> before C++11\n...\nclass C {\n  public:\n  void swap(C& rhs) noexcept {\n    using std::swap;    // Brings in std::swap into this scope\n    v_.swap(rhs.v_);\n    swap(i_, rhs.i_);    // Calls std::swap\n  }\n  ...\n  private:\n  std::vector<int> v_;\n  int i_;\n};\n```", "```cpp\n// Example 06b\n// In the header C.h:\nclass C_impl;        // Forward declaration\nclass C {\n  public:\n  void swap(C& rhs) noexcept {\n    swap(pimpl_, rhs.pimpl_);\n  }\n  void f(...);        // Declaration only\n  ...\n  private:\n  C_impl* pimpl_;\n};\n// In the C file:\nclass C_impl {\n  ... real implementation ...\n};\nvoid C::f(...) {\n  pimpl_->f(...);    // Actual implementation of C::f()\n}\n```", "```cpp\n// Example 07a\nclass C {\n  public:\n  void swap(C& rhs) noexcept;\n};\n...\nC c1(...), c2(...);\nswap(c1, c2);    // Either does not compile\n             // or calls std::swap\n```", "```cpp\n// Example07b\nnamespace N {\n  class C {\n    public:\n    void swap(C& rhs) noexcept;\n  };\n  void swap(C& lhs, C& rhs) noexcept { lhs.swap(rhs); }\n}\n...\nN::C c1(...), c2(...);\nswap(c1, c2);    // Calls non-member N::swap()\n```", "```cpp\n// Example 07c\nclass C {\n  friend void swap(C& rhs) noexcept;\n};\nvoid swap(C& lhs, C& rhs) noexcept {\n  ... swap data members of C ...\n}\n```", "```cpp\n// Example 07d\nclass C {\n  friend void swap(C& lhs, C& rhs) noexcept {\n    ... swap data members of C ...\n  }\n};\n```", "```cpp\n// Example 08\nnamespace N {\n  class C {\n    public:\n    void swap(C& rhs) noexcept;\n  };\n  void swap(C& lhs, C& rhs) noexcept { lhs.swap(rhs); }\n}\n...\nN::C c1(...), c2(...);\nstd::swap(c1, c2);    // Calls std::swap()\nswap(c1, c2);        // Calls N::swap()\n```", "```cpp\nusing std::swap;    // Makes std::swap() available\nswap(c1, c2);    // Calls N::swap() if provided\n             // Otherwise, calls std::swap()\n```", "```cpp\ntemplate <typename Iter1, typename Iter2>\nvoid iter_swap(Iter1 a, ITer2 b) {\n  using std::swap;\n  swap(*a, *b);\n}\n```", "```cpp\n// Example 09\nnamespace std {\nvoid swap(N::C& lhs, N::C& rhs) noexcept {\n  lhs.swap(rhs); }\n}\n```", "```cpp\nusing std::swap;        // Makes std::swap() available\nstd::swap(c1, c2);    // Calls our std::swap() overload\nswap(c1, c2);        // Calls default std::swap()\n```"]