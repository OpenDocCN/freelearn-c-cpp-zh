- en: Introducing Qt 5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Qt gives developers a great toolbox with which to create fantastic and practical
    applications with minimal stress, as you will soon discover. In this chapter,
    we will introduce Qt and describe how to set it up on a machine. By the end of
    the chapter, you should be able to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Install Qt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write a simple program in Qt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compile and run a Qt program
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The objectives have been kept simple and straightforward. So let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: Installing Qt on Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Ubuntu operating system makes it reasonably easy to install Qt 5\. Issue
    the following commands to set up your box:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'After the installation, Qt programs will be compiled and run from the command
    line. In [Chapter 6](bfdfd852-205f-4c4b-bb41-d798fdc865f7.xhtml), *Connecting
    Qt with Databases*, we will illustrate how to connect to the database using Qt.
    Issue the following command to ensure that the relevant libraries are installed
    for Qt to work with. The database that will''ll connect to is MySQL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Installing Qt on macOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are a variety of ways to get Qt installed on a Mac. To begin the process
    of installing Qt 5 on your Mac, you need to get Xcode installed on your machine.
    Issue the following commands on the Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If you get the following output, then you are ready for the next series of
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '*HomeBrew* is a package management software tool that allows you to easily
    install Unix tools that don''t come shipped with the macOS.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you don''t already have it on your machine, you can install it by issuing
    the following command in a Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, you should issue yet another set of commands to get Qt installed
    via the Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'In a few chapters'' time, we will be working with the MySql database. To configure
    Qt 5 with MySql, issue the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This command should take a while to complete and, assuming nothing goes wrong,
    you are ready to write Qt programs.
  prefs: []
  type: TYPE_NORMAL
- en: Installation on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For readers using Windows, installation remains simple, albeit a little less
    straightforward. We can start by heading over to [http://download.qt.io](http://download.qt.io).
  prefs: []
  type: TYPE_NORMAL
- en: Select `official_releases/`, then `online_installers/`, and opt to download
    `qt-unified-windows-x86-online.exe`.
  prefs: []
  type: TYPE_NORMAL
- en: Run the program and opt to create an account. Click through to select the installation
    folder and don't forget to select the MinGW 5.3.0 32 bit option as the compiler
    when selecting the components that need to be installed.
  prefs: []
  type: TYPE_NORMAL
- en: Most of the commands in this book should run in this IDE.
  prefs: []
  type: TYPE_NORMAL
- en: What is Qt?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have set up our boxes to start development, let's put together a
    hello world example. First, however, let's take a brief detour.
  prefs: []
  type: TYPE_NORMAL
- en: Qt is a toolkit for creating **Graphical User Interfaces** (**GUI**), as well
    as cross-platform applications. GUI applications are programs that employ the
    use of the mouse to issue commands to the computer for execution. Though Qt can,
    in some cases, be used without necessarily making use of this, therein lies its
    utility.
  prefs: []
  type: TYPE_NORMAL
- en: The difficulty in trying to produce the same look, feel, and functionality across
    multiple operating systems is one big hurdle you have to deal with when writing
    GUI applications. Qt completely does away with this impediment by providing a
    means to write code only once and ensuring that it runs on most operating systems
    without requiring much or any change.
  prefs: []
  type: TYPE_NORMAL
- en: 'Qt makes use of some modules. These modules group related functionalities together.
    The following lists some modules and what they do:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtCore`: As the name implies, these modules contains core and important classes
    for the Qt framework. These include containers, events, and thread management,
    among others.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets` and `QtGui`: This module contains classes for calling widgets.
    Widgets are the components that make up the majority of a graphical interface.
    These include buttons, textboxes, and labels.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWebkit`: This module makes it possible to use web pages and apps within
    a Qt application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtNetwork`: This module provides classes to connect to and communicate with
    network resources.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtXML`: For parsing XML documents, this module contains useful classes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtSQL`: This module is feature-rich with classes and drivers that allow for
    connecting to databases, including My SQL, PostgreSQL, and SQLite.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hello world in Qt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will put together a very simple hello world program. The
    program will show a simple button within a window. Create a file called `hello.cpp`
    in a newly created folder called `hello_world`. Open the file and insert the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This looks like a regular C++ program, with the exception of unfamiliar classes
    being used.
  prefs: []
  type: TYPE_NORMAL
- en: Like any regular program, the `int main()` function is the entry point of our
    application.
  prefs: []
  type: TYPE_NORMAL
- en: An instance of the `QApplication` class is created, called `app`, and the arguments
    passed to the `main()` function. The `app` object is required because it sets
    off the `Event` loop that continues to run until we close the application. Without
    the `QApplication` object, you cannot really create a Qt GUI application.
  prefs: []
  type: TYPE_NORMAL
- en: However, it is possible to use certain aspects of Qt without the need to create
    an instance of `QApplication`.
  prefs: []
  type: TYPE_NORMAL
- en: Also, the constructor for `QApplication` requires that we pass the `argc` and
    `argv` to it.
  prefs: []
  type: TYPE_NORMAL
- en: We instantiate an object of the `QLabel` class, `label`. We pass the `"Hello
    World!"` string to its constructor. A `QLabel` represents what we call a widget,
    which is a term used to describe visual elements on the screen. Labels are used
    to hold text for display.
  prefs: []
  type: TYPE_NORMAL
- en: By default, created widgets are hidden. To display them, a call to the `show()`
    function has to be made.
  prefs: []
  type: TYPE_NORMAL
- en: To start the `Event` loop, the `app.exec()` line is executed. This passes control
    of the application to Qt.
  prefs: []
  type: TYPE_NORMAL
- en: The `return` keyword will pass an integer back to the operating system, indicating
    the state of the application when it was closed or exited.
  prefs: []
  type: TYPE_NORMAL
- en: 'To compile and run our program, navigate to the folder where `hello.cpp` is
    stored. Type the following command in the Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This will create the `hello_world.pro` file. The name `hello_world` is the name
    of the folder where `hello.cpp` is located. The generated file should change,
    depending on the location you stored the `hello.cpp` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `hello_world.pro` file with any text editor of your choice. The following
    lines deserve some explanation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The value, `app`, here means that the final output of the project will be an
    application. Alternatively, it could be a library or sub-directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The name, `hello_world`, here is the name of the application or (library) that
    will be executed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Since `hello.cpp` is the only source file in our project, it is added to the
    `SOURCES` variable.
  prefs: []
  type: TYPE_NORMAL
- en: We need to generate a `Makefile` that will detail the steps needed to compile
    our hello world program. The benefit of this autogenerated `Makefile` is that
    it takes away the need for us to know the various nuances involved in compiling
    the program on the different operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'While in the same project directory, issue the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This generates a `Makefile` in the directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, issue the following command to compile the program:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The following error will be produced (along with further information) as the
    output from running the `make` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Earlier on, we mentioned that various components and classes are packaged into
    modules. The `QApplication` is being utilized in our application, but the correct
    module has not been included. During compilation, this omission results in an
    error.
  prefs: []
  type: TYPE_NORMAL
- en: 'To fix this issue, open the `hello_world.pro` file and insert the following
    lines after the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This will add the `QtWidget` module, along with the `QtCore` modules, to the
    compiled program. With the correct module added, run the `make` command again
    on the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'A `hello_world` file will be generated in the same folder. Run this file from
    the command line as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'On a macOS, the full path to the executable will be specified with the following
    path from the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'This should produce the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2c834541-f8a2-4f5c-b1e7-2c8f97c37a3e.png)'
  prefs: []
  type: TYPE_IMG
- en: Well, there is our first GUI program. It displays the Hello world ! in a label.
    To close the application, click on the Close button of the window.
  prefs: []
  type: TYPE_NORMAL
- en: Let's add a dash of **Qt Style Sheet** (**QSS**) to give our label a little
    effect!
  prefs: []
  type: TYPE_NORMAL
- en: 'Modify the `hello.cpp` file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The only change here is `label.setStyleSheet("QLabel:hover { color: rgb(60,
    179, 113)}");`.'
  prefs: []
  type: TYPE_NORMAL
- en: A QSS rule is passed as an argument to the `setStyleSheet` method on the `label`
    object. The rule sets every label within our application to show the color green
    when the cursor hovers over it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following commands to recompile the application and run it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The program should appear as in the following screenshot. The label turns green
    when the mouse is placed over it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e2178602-669c-4509-90db-06cb03263baa.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter laid the foundation for getting to know Qt and what it can be used
    for. Installing of Qt on macOS and Linux was outlined. A small hello world application
    was written and compiled, all from the command line, without any need for an IDE.
    This meant that we were also introduced to the various steps that lead to the
    final program.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the hello world application was modified to employ QSS in a bid to
    show what other things can be done to a widget.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 2](a0d84833-24c7-4f5d-933b-c4d99fe82034.xhtml), *Creating Widgets
    and Layouts*, we will explore more widgets in Qt and how to organize and group
    them.
  prefs: []
  type: TYPE_NORMAL
