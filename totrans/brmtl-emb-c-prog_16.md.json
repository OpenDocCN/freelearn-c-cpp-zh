["```cpp\n#include \"iwdg.h\"\n#define IWDG_KEY_ENABLE                 0x0000CCCCU\n#define IWDG_KEY_WR_ACCESS_ENABLE       0x00005555U\n#define IWDG_PRESCALER_4              0x00000000U\n#define IWDG_RELOAD_VAL              0xFFF\nstatic uint8_t isIwdg_ready(void);\nvoid iwdg_init(void)\n{\n    /*Enable the IWDG by writing 0x0000CCCC in the IWDG_KR register*/\n    IWDG->KR = IWDG_KEY_ENABLE;\n    /*Enable register access by writing 0x0000 5555 in the IWDG_KR \n    register*/\n    IWDG->KR = IWDG_KEY_WR_ACCESS_ENABLE;\n    /*Set the IWDG Prescaler*/\n    IWDG->PR =  IWDG_PRESCALER_4;\n    /*Set the reload register (IWDG_RLR) to the largest value 0xFFF*/\n    IWDG->RLR = IWDG_RELOAD_VAL;\n    /*Wait for the registers to be updated (IWDG_SR = 0x0000 0000)*/\n    while(isIwdg_ready() != 1){}\n    /*Refresh the counter value with IWDG_KR (IWDG_KR = 0x0000 AAAA)*/\n    IWDG->KR = IWDG_KEY_RELOAD;\n}\nstatic uint8_t isIwdg_ready(void)\n{\n return ((READ_BIT(IWDG->SR, IWDG_SR_PVU | IWDG_SR_RVU) == 0U) ? 1UL : \n 0UL);\n}\n```", "```cpp\n#include \"iwdg.h\"\n#define IWDG_KEY_ENABLE                 0x0000CCCCU\n#define IWDG_KEY_WR_ACCESS_ENABLE       0x00005555U\n#define IWDG_PRESCALER_4                0x00000000U\n#define IWDG_RELOAD_VAL                 0xFFF\n```", "```cpp\nIWDG->KR = IWDG_KEY_ENABLE;\n```", "```cpp\nIWDG->KR = IWDG_KEY_WR_ACCESS_ENABLE;\n```", "```cpp\nIWDG->PR = IWDG_PRESCALER_4;\n```", "```cpp\nIWDG->RLR = IWDG_RELOAD_VAL;\n```", "```cpp\nwhile (isIwdg_ready() != 1) {}\n```", "```cpp\nIWDG->KR = IWDG_KEY_RELOAD;\n```", "```cpp\n#include <stdio.h>\n#include \"adc.h\"\n#include \"uart.h\"\n#include \"gpio.h\"\n#include \"iwdg.h\"\n#include \"gpio_exti.h\"\nuint8_t g_btn_press;\nstatic void check_reset_source(void);\nint main(void)\n{\n    /*Initialize debug UART*/\n    uart_init();\n    /*Initialize LED*/\n    led_init();\n    /*Initialize EXTI*/\n    pc13_exti_init();\n    /*Find reset source*/\n    check_reset_source();\n    /*Initialize IWDG*/\n    iwdg_init();\n    while(1)\n    {\n        if( g_btn_press != 1)\n         {\n              /*Refresh IWDG down-counter to default value*/\n             IWDG->KR = IWDG_KEY_RELOAD;\n             led_toggle();\n             for(int i = 0; i < 90000; i++){}\n         }\n    }\n}\n```", "```cpp\nstatic void check_reset_source(void)\n{\nif ((RCC->CSR & RCC_CSR_IWDGRSTF) == (RCC_CSR_IWDGRSTF))\n      {\n          /*Clear IWDG Reset flag*/\n          RCC->CSR = RCC_CSR_RMVF;\n          /*Turn LED On*/\n          led_on();\n          printf(\"RESET was caused by IWDG.....\\n\\r\");\n          while( g_btn_press != 1)\n          {\n          }\n          g_btn_press =  0;\n      }\n}\n```", "```cpp\nstatic void exti_callback(void)\n{\n    g_btn_press = 1;\n}\n```", "```cpp\nvoid EXTI15_10_IRQHandler(void) {\n    if((EXTI->PR & LINE13)!=0)\n    {\n        /*Clear PR flag*/\n        EXTI->PR |=LINE13;\n        //Do something...\n        exti_callback();\n    }\n}\n```"]