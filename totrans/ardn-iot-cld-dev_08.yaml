- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Working with the Arduino IoT Cloud SDK and JavaScript
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Arduino IoT Cloud SDK和JavaScript进行工作
- en: 'Every platform provides **APIs** and **SDKs** to make their product compatible
    with other platforms, and these endpoints are used by developers to create new
    functionalities to solve real-world issues. Likewise, the **Arduino IoT Cloud**
    comes with its own built-in features and functionalities, but there are also three
    different ways to extend the Arduino IoT Cloud platform’s functionality or make
    it compatible with other tools and services: namely, **REST APIs**, **SDKs**,
    and **webhooks**.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 每个平台都提供**APIs**和**SDKs**以使他们的产品与其他平台兼容，并且这些端点被开发者用来创建新的功能以解决现实世界的问题。同样，**Arduino
    IoT Cloud**也自带内置的功能和特性，但还有三种不同的方式来扩展Arduino IoT Cloud平台的功能或使其与其他工具和服务兼容：即**REST
    APIs**、**SDKs**和**webhooks**。
- en: In this chapter, we will talk about APIs and SDKs and how they work. Specifically,
    we will use the **Node.js SDK** to illustrate different coding exercises. This
    chapter will cover **Create, Read, Update, and Delete** (**CRUD**) operations
    for devices, Things, properties (aka variables), and dashboards. Beyond that,
    we will explore some other features such as how to set/get values of properties.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论APIs和SDKs以及它们的工作原理。具体来说，我们将使用**Node.js SDK**来展示不同的编码练习。本章将涵盖设备、事物、属性（即变量）和仪表板的**创建、读取、更新和删除**（**CRUD**）操作。除此之外，我们还将探索一些其他功能，例如如何设置/获取属性的值。
- en: By the end of this chapter, you will understand how to interact with the Arduino
    IoT Cloud platform via an API or the Node.js SDK to create custom dashboards,
    interface with the data using other tools/apps, and use the SDK for bulk device
    creation and management.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将了解如何通过API或Node.js SDK与Arduino IoT Cloud平台交互以创建自定义仪表板，使用其他工具/应用程序与数据交互，以及使用SDK进行大量设备创建和管理。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Demystifying the Arduino IoT Cloud SDK – functionality and operation
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 揭秘Arduino IoT Cloud SDK – 功能和操作
- en: Securing access – unveiling API keys and authentication
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保护访问权限 – 揭示API密钥和身份验证
- en: Step-by-step – installing the Arduino Node.js SDK client
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 步骤详解 – 安装Arduino Node.js SDK客户端
- en: Initial exploration – test drive using Postman
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初步探索 – 使用Postman进行试驾
- en: Diverse platform compatibility – SDKs for various environments
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多平台兼容性 – 适用于各种环境的SDKs
- en: Interacting with devices – hands-on with the Node.js SDK
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与设备交互 – 使用Node.js SDK进行实践
- en: Engaging with Things – Node.js SDK implementation guide
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与事物互动 – Node.js SDK实现指南
- en: Exploring properties – Node.js SDK interaction techniques
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索属性 – Node.js SDK交互技巧
- en: Crafting dashboards – unleashing potential via the Node.js SDK
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打造仪表板 – 通过Node.js SDK释放潜力
- en: Fine-tuning with the Node.js SDK – property value management
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Node.js SDK进行微调 – 属性值管理
- en: Technical requirements
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'There are no specific hardware requirements for this chapter as we are focusing
    on the SDK and will work through different coding exercises to perform different
    operations on the Arduino IoT Cloud platform using the Node.js SDK. To follow
    along with the coding and testing exercises, the following software is required:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本章没有特定的硬件要求，因为我们专注于SDK，并将通过不同的编码练习在Arduino IoT Cloud平台上使用Node.js SDK执行不同的操作。为了跟随编码和测试练习，需要以下软件：
- en: Node.js
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js
- en: The **Node.js Arduino IoT Cloud** **module** installed
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已安装**Node.js Arduino IoT Cloud** **模块**
- en: The **VSCode editor**
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**VSCode编辑器**'
- en: '**Postman**'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Postman**'
- en: An Arduino IoT Cloud account
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino IoT Cloud账户
- en: Postman will be used for **cURL testing** and authentication, which will help
    other developers when doing request and response testing. For SDK coding, we will
    use Node.js and the VSCode editor. The code for this chapter is available from
    the book’s official GitHub repository at [https://github.com/PacktPublishing/Arduino-IoT-Cloud-for-Developers](https://github.com/PacktPublishing/Arduino-IoT-Cloud-for-Developers).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 将使用Postman进行**cURL测试**和身份验证，这将帮助其他开发者在进行请求和响应测试时。对于SDK编码，我们将使用Node.js和VSCode编辑器。本章的代码可在书籍的官方GitHub仓库[https://github.com/PacktPublishing/Arduino-IoT-Cloud-for-Developers](https://github.com/PacktPublishing/Arduino-IoT-Cloud-for-Developers)中找到。
- en: Demystifying the Arduino IoT Cloud SDK – functionality and operation
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 揭秘Arduino IoT Cloud SDK – 功能和操作
- en: The Arduino IoT Cloud offers a range of features, but there are inevitably situations
    where developers need to integrate their tools/systems/apps with the Arduino IoT
    Cloud for improved operations management and control. To cater to these requirements,
    the Arduino IoT Cloud provides different techniques and tools that can be used
    by developers and organizations to extend the product’s functionality and provide
    solutions for real-world issues.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino IoT Cloud 提供了一系列功能，但不可避免地会有一些情况，开发者需要将他们的工具/系统/应用程序与 Arduino IoT Cloud
    集成，以改善操作管理和控制。为了满足这些需求，Arduino IoT Cloud 提供了不同的技术和工具，供开发者和组织使用，以扩展产品的功能并解决现实世界的问题。
- en: As shown in the following diagram, the Arduino IoT Cloud provides three main
    interfaces to developers to help meet their requirements. First is webhooks, which
    we used in the previous chapter to send the data from an Arduino IoT Cloud Thing
    to a custom **endpoint** or any well-known platform including **Zapier** or **IFTTT**
    for further integration. Following webhooks, we have the REST API and SDK, both
    of which are very handy features for developers to mold the system according to
    their requirements.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如以下图所示，Arduino IoT Cloud 为开发者提供了三个主要接口，以帮助他们满足需求。首先是 webhooks，我们在上一章中使用它将 Arduino
    IoT Cloud Thing 的数据发送到自定义 **端点** 或任何知名平台，包括 **Zapier** 或 **IFTTT** 以进行进一步集成。在
    webhooks 之后，我们有 REST API 和 SDK，这两个都是开发者根据需求塑造系统的非常有用的功能。
- en: '![Figure 8.1 – Arduino IoT Cloud interface](img/B19752_08_01.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.1 – Arduino IoT Cloud 界面](img/B19752_08_01.jpg)'
- en: Figure 8.1 – Arduino IoT Cloud interface
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.1 – Arduino IoT Cloud 界面
- en: In this chapter, we are going to focus specifically on the Node.js SDK. However,
    it’s important first to give a proper overview of the Arduino IoT Cloud functionalities
    that can help developers make better decisions during integration with other platforms.
    The Arduino team has created REST API endpoints for different operations such
    as *create*, *delete*, *list*, *update*, and so on, and placed them into different
    categories according to the main terms used on the Arduino IoT Cloud platform,
    such as Thing, device, property, and so on. The developer can send a request to
    these endpoints via different methods such as `PUT`, `DELETE`, or `GET` with different
    parameters, and in return they will get their desired response from the Arduino
    IoT Cloud in JSON format that they can then use for further product development.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将特别关注 Node.js SDK。然而，首先对 Arduino IoT Cloud 的功能进行适当的概述是很重要的，这有助于开发者在与其他平台集成时做出更好的决策。Arduino
    团队为不同的操作创建了 REST API 端点，例如 *创建*、*删除*、*列出*、*更新* 等，并根据 Arduino IoT Cloud 平台上使用的术语，如
    Thing、设备、属性等，将它们放入不同的类别中。开发者可以通过不同的方法向这些端点发送请求，例如 `PUT`、`DELETE` 或 `GET`，并带有不同的参数，然后他们将从
    Arduino IoT Cloud 获取所需的 JSON 格式响应，这些响应可以用于进一步的产品开发。
- en: 'REST APIs are like raw material for developers in that they need to process
    them by writing code in their preferred language and sending and receiving requests
    and responses using the **cURL library**. On the other hand, the Arduino team
    offers an SDK, which is basically a programming wrapper for REST API endpoints.
    This allows us to save time as we get access to a lot of methods and sample code
    to accomplish our tasks just using library methods. At the time of writing, the
    Arduino team has developed SDKs for three programming platforms: Node.js, **Python**,
    and **GoLang**.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: REST API 对开发者来说就像原材料，他们需要通过在首选语言中编写代码来处理它们，并使用 **cURL 库**发送和接收请求和响应。另一方面，Arduino
    团队提供了一个 SDK，它基本上是 REST API 端点的编程包装器。这使我们能够节省时间，因为我们通过使用库方法获得对许多方法和示例代码的访问权限，从而完成我们的任务。在撰写本文时，Arduino
    团队已经为三个编程平台开发了 SDK：Node.js、**Python** 和 **GoLang**。
- en: In this chapter, we will work with the Node.js SDK specifically to create different
    scripts to perform CRUD operations on Things, devices, properties, and dashboards.
    We will also develop scripts that allow you to *fetch*/*set* the latest values
    of Thing properties and much more. Overall, this chapter will be fun for developers,
    as we are going to explore different techniques and methods that will help us
    extend IoT operations from small scale to enterprise level.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将专门使用 Node.js SDK 创建不同的脚本，以对 Thing、设备、属性和仪表板执行 CRUD 操作。我们还将开发允许您 *获取*/*设置*
    Thing 属性最新值的脚本，以及更多功能。总的来说，本章对开发者来说将会很有趣，因为我们将探索不同的技术和方法，这些方法将帮助我们从小规模扩展到企业级的物联网操作。
- en: In this section, we have discussed what type of features the Arduino IoT Cloud
    API/SDKs provide to developers. In the next section, we will talk about API keys
    for authentication.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论了Arduino IoT Cloud API/SDK为开发者提供哪些类型的功能。在下一节中，我们将讨论用于认证的API密钥。
- en: Securing access – unveiling API keys and authentication
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护访问权限 – 揭示API密钥和认证
- en: Before heading into the meat of the chapter, we first need to talk about the
    authentication mechanism of the platform. The Arduino IoT Cloud uses a `requests`/`responses`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在进入本章的主要内容之前，我们首先需要讨论平台的认证机制。Arduino IoT Cloud使用`requests`/`responses`。
- en: Before we get started with the SDK installation and testing with Postman, we
    need to set up the API in the Arduino Cloud that will provide us the Client ID
    and Secret. In older versions of the interface, the API options are under the
    **Integrations** tab, but have now moved to the Arduino Cloud, which is available
    at [https://cloud.arduino.cc/home/](https://cloud.arduino.cc/home/).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始SDK安装和用Postman进行测试之前，我们需要在Arduino Cloud中设置API，它将为我们提供客户端ID和密钥。在旧版本的界面中，API选项位于**集成**选项卡下，但现在已移动到Arduino
    Cloud，可在[https://cloud.arduino.cc/home/](https://cloud.arduino.cc/home/)找到。
- en: 'After visiting the Integration page click on **API Keys** and you will be taken
    to the API page. Click on **CREATE API KEY**. A popup will appear; provide a name
    for the API and click on the **CONTINUE** button. The wizard that appears will
    take a few seconds to generate the keys and then a new popup will appear displaying
    the keys:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 访问集成页面后，点击**API密钥**，您将被带到API页面。点击**创建API密钥**。将出现一个弹出窗口；为API提供一个名称，然后点击**继续**按钮。出现的向导将花费几秒钟生成密钥，然后会出现一个新的弹出窗口显示密钥：
- en: '![Figure 8.2 – API keys](img/B19752_08_02.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图8.2 – API密钥](img/B19752_08_02.jpg)'
- en: Figure 8.2 – API keys
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.2 – API密钥
- en: Copy the **Client ID** and **Client Secret** values by clicking on the copy
    icons – never try to copy by manual selection as the **Client Secret** is very
    long, so clicking the copy icon is the best option. Save the both Client ID and
    Client Secret in a secure location and then click the checkbox confirming that
    you have saved your keys. Lastly, click on **DONE** and you will see your API
    key in the panel – it’s now ready for use.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击复制图标复制**客户端ID**和**客户端密钥**的值 – 千万不要尝试手动选择复制，因为**客户端密钥**非常长，所以点击复制图标是最好的选择。将客户端ID和客户端密钥保存在安全的位置，然后点击复选框确认您已保存您的密钥。最后，点击**完成**，您将在面板中看到您的API密钥
    – 现在它已准备好使用。
- en: Important note
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: A single API key is used to give access to all the Things and their variables.
    Having access to all infrastructure with just one API key is handy, instead of
    having to create separate API keys for each Thing, but you must take care of your
    key! This is a big security risk, as if you were to lose the key, a hacker could
    gain access to your whole account.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 使用单个API密钥即可访问所有设备和它们的变量。只需一个API密钥就能访问所有基础设施非常方便，无需为每个设备创建单独的API密钥，但您必须保管好您的密钥！这是一个很大的安全风险，因为如果您丢失了密钥，黑客可能会获取到您的整个账户的访问权限。
- en: In this section, we have set up and created API authentication keys consisting
    of a Client ID and Client Secret. This section is most important, as without these
    keys we can’t use any APIs. In the next section, we are going to try our first
    API call using the Postman tool.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们已经设置并创建了由客户端ID和客户端密钥组成的API认证密钥。本节非常重要，因为没有这些密钥，我们无法使用任何API。在下一节中，我们将尝试使用Postman工具进行第一次API调用。
- en: Initial exploration – test drive using Postman
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初步探索 – 使用Postman进行试驾
- en: Before diving into the SDK, we will try the **naked REST APIs** endpoints using
    Postman, a tool that helps developers to debug *requests*/*responses* for other
    programming-language platforms not available as SDKs. Postman is a well-known
    tool among backend developers and is used to expose API requests/responses without
    any coding. Postman also helps developers to analyze responses via a **graphical
    user** **interface** (**GUI**).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入研究SDK之前，我们将尝试使用Postman的**裸露的REST API**端点，Postman是一个帮助开发者调试其他编程语言平台（这些平台没有作为SDK提供）的请求/响应的工具。Postman是后端开发者中广为人知的一个工具，用于在不进行任何编码的情况下公开API请求/响应。Postman还帮助开发者通过**图形用户界面**（**GUI**）分析响应。
- en: 'Download Postman from [https://www.postman.com/](https://www.postman.com/),
    choosing the correct version for your operating system. Before getting to work
    with Postman, firstly create a new workspace for the Arduino IoT Cloud to put
    all the requests in a separate group. To do this, click on **Workspaces** and
    then **Create Workspace**:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 从[https://www.postman.com/](https://www.postman.com/)下载Postman，选择适合您操作系统的正确版本。在开始使用Postman之前，首先为Arduino
    IoT Cloud创建一个新的工作区，以便将所有请求放入一个单独的组中。为此，点击**工作区**然后**创建工作区**：
- en: '![Figure 8.3 – Postman workspace](img/B19752_08_03.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图8.3 – Postman工作区](img/B19752_08_03.jpg)'
- en: Figure 8.3 – Postman workspace
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.3 – Postman工作区
- en: 'A new window will be opened: provide a workspace name and description and set
    the visibility policy according to your requirements. After creating the new workspace,
    navigate to **File** > **New…** and select **HTTP Request**. Before sending any
    request to the Arduino IoT Cloud, an authentication token is mandatory. Refer
    to the following screenshot: click on the **Authorization** tab and select **OAuth
    2.0** from the **Type** dropdown. Scroll down the **Authorization** page to find
    the **Configure New Token** section and click on the **Configuration Options**
    tab under this section.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 将会打开一个新窗口：提供工作区名称和描述，并根据您的需求设置可见性策略。创建新工作区后，导航到**文件** > **新建…**并选择**HTTP请求**。在向Arduino
    IoT Cloud发送任何请求之前，必须有一个认证令牌。参考以下截图：点击**授权**选项卡，然后从**类型**下拉菜单中选择**OAuth 2.0**。滚动到**授权**页面以找到**配置新令牌**部分，并点击此部分下的**配置选项**选项卡。
- en: '![Figure 8.4 – Authorization Configuration Options](img/B19752_08_04.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图8.4 – 授权配置选项](img/B19752_08_04.jpg)'
- en: Figure 8.4 – Authorization Configuration Options
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.4 – 授权配置选项
- en: We need to provide three things under **Configuration Options**. Firstly, add
    the [https://api2.arduino.cc/iot/v1/clients/token](https://api2.arduino.cc/iot/v1/clients/token)
    URL to the **Access Token URL** field, then insert the values that we generated
    previously in the Arduino IoT Cloud API into the **Client ID** and **Client Secret**
    fields. Lastly, select **Send client credentials in body** from the **Client Authentication**
    dropdown. Now click on the **Advanced Options** tab, where we will set the API
    audience who will receive the requests.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在**配置选项**下，我们需要提供三样东西。首先，将[https://api2.arduino.cc/iot/v1/clients/token](https://api2.arduino.cc/iot/v1/clients/token)
    URL添加到**访问令牌URL**字段，然后将我们在Arduino IoT Cloud API中之前生成的值插入到**客户端ID**和**客户端密钥**字段。最后，从**客户端认证**下拉菜单中选择**在正文中发送客户端凭据**。现在点击**高级选项**选项卡，我们将在此设置接收请求的API受众。
- en: '*Figure 8**.5* shows the **Advanced Options** where we need to provide the
    Arduino IoT Cloud authentication URL with which we can authenticate and authorize
    requests.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '*图8.5*显示了**高级选项**，我们需要提供Arduino IoT Cloud认证URL，以便我们可以认证和授权请求。'
- en: '![Figure 8.5 – Authorization Advanced Options](img/B19752_08_05.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图8.5 – 授权高级选项](img/B19752_08_05.jpg)'
- en: Figure 8.5 – Authorization Advanced Options
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.5 – 授权高级选项
- en: Add the [https://api2.arduino.cc/iot](https://api2.arduino.cc/iot) URL into
    the **Audience** field. After setting up the configuration, click the **Get new
    Access Token** button. It will return either an error or a success message. If
    there is any error, then please repeat all the steps one by one, ensuring the
    configuration is as described previously. If you are successful, then click on
    **Proceed** and you will get your token for authentication.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 将[https://api2.arduino.cc/iot](https://api2.arduino.cc/iot) URL添加到**受众**字段。设置好配置后，点击**获取新的访问令牌**按钮。它将返回错误消息或成功消息。如果有任何错误，请逐个重复所有步骤，确保配置与之前描述的一致。如果成功，请点击**继续**，您将获得用于认证的令牌。
- en: After getting the authentication token, it’s time to do some experiments. The
    Arduino team has documented all the endpoints with cURL and the Node.js SDK samples
    in different categories, available at [https://www.arduino.cc/reference/en/iot/api/](https://www.arduino.cc/reference/en/iot/api/).
    So here, we want to see the list of cloud variables/properties for specific Thing.
    Open up the preceding API documentation URL, find the `https://api2.arduino.cc/iot/v2/things/{id}/properties?show_deleted=`.
    Here we need to replace `{id}` in the URL with the specific Thing ID (*Figure
    8**.6*). The Thing ID is available under the Thing’s `true` to the end of the
    URL just after `show_deleted`. After adding all the required data to the URL,
    it will look something like [https://api2.arduino.cc/iot/v2/things/8aee742e-4492-423d-9f19-79fec856b917/properties?show_deleted=true](https://api2.arduino.cc/iot/v2/things/8aee742e-4492-423d-9f19-79fec856b917/properties?show_deleted=true).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 获取认证令牌后，是时候做一些实验了。Arduino 团队已经用 cURL 和 Node.js SDK 示例记录了所有端点，这些示例按不同类别提供，可在
    [https://www.arduino.cc/reference/en/iot/api/](https://www.arduino.cc/reference/en/iot/api/)
    找到。因此，我们想查看特定事物的云变量/属性列表。打开上述 API 文档 URL，找到 `https://api2.arduino.cc/iot/v2/things/{id}/properties?show_deleted=`。在这里，我们需要将
    URL 中的 `{id}` 替换为特定事物的 ID (*图 8.6*）。事物 ID 在 URL 的 `show_deleted` 之后，位于事物的 `true`
    之前。在将所有所需数据添加到 URL 后，它将看起来像 [https://api2.arduino.cc/iot/v2/things/8aee742e-4492-423d-9f19-79fec856b917/properties?show_deleted=true](https://api2.arduino.cc/iot/v2/things/8aee742e-4492-423d-9f19-79fec856b917/properties?show_deleted=true)。
- en: 'Click on **Send** and you will receive a response from the Arduino IoT Cloud
    in JSON format containing all the cloud variables properties of the Thing, including
    the property ID, name, type, last value of the cloud variable, and so on:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 **发送**，你将收到来自 Arduino IoT Cloud 的 JSON 格式响应，其中包含事物的所有云变量属性，包括属性 ID、名称、类型、云变量的最后值等：
- en: '![Figure 8.6 – Postman request response](img/B19752_08_06.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.6 – Postman 请求响应](img/B19752_08_06.jpg)'
- en: Figure 8.6 – Postman request response
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.6 – Postman 请求响应
- en: The preceding screenshot shows the response in Postman. You can convert the
    response into plain text as well as other formats including **XHTML**, **HTML**,
    and so on, but Postman has excellent visualization functionality for **JSON**
    data responses. This way, developers can easily understand and tweak the nature
    of the response and prepare the scripts according to their data structure. It
    also helps developers to choose specific content from the response more quickly,
    reducing the time and effort required.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 上一张截图显示了 Postman 中的响应。您可以将响应转换为纯文本以及其他格式，包括 **XHTML**、**HTML** 等，但 Postman 对
    **JSON** 数据响应的视觉功能非常出色。这样，开发者可以轻松理解并调整响应的性质，并根据其数据结构准备脚本。这也有助于开发者更快地从响应中选择特定内容，从而减少所需的时间和精力。
- en: In this section, we used Postman to generate our first request to the Arduino
    IoT Cloud. We began by configuring the API authentication keys in Postman and
    then requested the list of cloud variables/properties of Thing. The Arduino IoT
    Cloud successfully returned the response with all the required data in JSON format.
    In the following section, we will examine the SDKs available for different platforms.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们使用 Postman 向 Arduino IoT Cloud 发送了我们的第一个请求。我们首先在 Postman 中配置了 API 认证密钥，然后请求事物的云变量/属性列表。Arduino
    IoT Cloud 成功以 JSON 格式返回了包含所有所需数据的响应。在下一节中，我们将检查不同平台可用的 SDK。
- en: Diverse platform compatibility – SDKs for various environments
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多平台兼容性 – 各种环境的 SDK
- en: After testing *request*/*response* with Postman, it’s time to explore the SDKs
    available for the Arduino IoT Cloud. Earlier I mentioned the Arduino Team has
    developed official SDKs for three programming platforms, Node.js, Python, and
    GoLang.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 Postman 测试 *请求*/*响应* 后，是时候探索 Arduino IoT Cloud 可用的 SDK 了。之前我提到，Arduino 团队为三个编程平台开发了官方
    SDK，分别是 Node.js、Python 和 GoLang。
- en: Node.js is a very well-known language among backend developers and is used by
    both web and mobile developers. So, if you are planning to create a mobile or
    web app for Arduino IoT Cloud automation with custom visualizations, then Node.js
    is the best language, providing a wide variety of libraries for HTTP services.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js 是后端开发者中非常知名的语言，被网页和移动开发者广泛使用。因此，如果您计划为 Arduino IoT Cloud 自动化创建带有自定义可视化的移动或网页应用，那么
    Node.js 是最佳语言，它提供了广泛的 HTTP 服务库。
- en: On the other hand, Python is also a very well-known and rapidly growing language
    among web, IoT, and **AI**/**ML** developers. Python seems to be trending toward
    AI/ML, and IoT is very close as a field to AI/ML. If you are planning to develop
    a solution focused on AI/ML, such as **predictive maintenance**, **time series
    analysis**, or predictions then the Python SDK is the best choice to interact
    with the Arduino IoT Cloud.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，Python 也是在 Web、IoT 和 **AI**/**ML** 开发者中非常知名且快速发展的语言。Python 似乎正朝着 AI/ML
    发展趋势，而 IoT 作为领域与 AI/ML 非常接近。如果你计划开发专注于 AI/ML 的解决方案，例如 **预测性维护**、**时间序列分析**或预测，那么
    Python SDK 是与 Arduino IoT Cloud 交互的最佳选择。
- en: GoLang is the last platform for which an SDK was developed by the Arduino team.
    GoLang was developed by Google and follows the **C-type syntax**. The GoLang platform
    is good for operating system and network/API service development. If you are planning
    to maintain a high-performance system with the Arduino IoT Cloud or planning to
    run concurrent operations, then GoLang is the better choice.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: GoLang 是 Arduino 团队为其开发的最后一个平台。GoLang 由 Google 开发，遵循 **C 类语法**。GoLang 平台非常适合操作系统和网络/API
    服务开发。如果你计划使用 Arduino IoT Cloud 维护高性能系统或计划运行并发操作，那么 GoLang 是更好的选择。
- en: We discussed here the three different platforms and their specialized domains
    of application. Node.js is best for **Web APIs**, Python is good for machine learning,
    and GoLang is an awesome choice for high-performance systems. You can either choose
    one SDK platform for your development or consume all the SDKs depending on your
    project requirements.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里讨论了三种不同的平台及其专门的应用领域。Node.js 适用于 **Web APIs**，Python 适用于机器学习，而 GoLang 是高性能系统的绝佳选择。你可以根据项目需求选择一个
    SDK 平台进行开发，或者消费所有 SDK。
- en: In the next section, we will start our journey with the Node.js SDK, beginning
    by installing the official Arduino IoT Cloud Node.js SDK on our machines.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将开始使用 Node.js SDK 的旅程，首先在我们的机器上安装官方 Arduino IoT Cloud Node.js SDK。
- en: Step-by-step – installing the Arduino Node.js SDK client
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 步骤-by-步骤 – 安装 Arduino Node.js SDK 客户端
- en: 'From this point, we are going to use the Node.js SDK for our exercises and
    experiments. Before moving to the practical exercises, we need to first install
    the Arduino IoT Cloud package for Node.js. Download and install Node.js from [https://nodejs.org/](https://nodejs.org/).
    After the installation of Node.js is complete, open up the Windows/Mac/Linux **Terminal**
    and navigate to the directory where you will set up your coding workspaces using
    **VSCode**:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个点开始，我们将使用 Node.js SDK 进行我们的练习和实验。在进入实际练习之前，我们首先需要安装 Arduino IoT Cloud 的 Node.js
    包。从 [https://nodejs.org/](https://nodejs.org/) 下载并安装 Node.js。Node.js 安装完成后，打开
    Windows/Mac/Linux 的 **终端** 并导航到使用 **VSCode** 设置编码工作空间的目录：
- en: '[PRE0]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Type the two preceding commands in the **Terminal** and wait for the installation
    to complete. After a successful installation, open up VSCode and add the folder
    (where you have installed the Node.js Arduino IoT Cloud SDK) to the workspace
    where you installed the Arduino IoT Cloud and request-promise modules.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **终端** 中输入前两个命令，等待安装完成。安装成功后，打开 VSCode 并将（你安装 Node.js Arduino IoT Cloud SDK
    的）文件夹添加到安装 Arduino IoT Cloud 和 request-promise 模块的 workspace 中。
- en: Navigate to the book’s official GitHub repository and download all the code
    from this chapter’s folder. Copy the files into the VSCode `Workspace` folder
    and extract the downloaded `.zip` file. Navigate to the `start` folder and open
    up the `main.js` file in VSCode.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到本书的官方 GitHub 仓库，并从本章文件夹中下载所有代码。将文件复制到 VSCode 的 `Workspace` 文件夹中，并解压下载的 `.zip`
    文件。导航到 `start` 文件夹，并在 VSCode 中打开 `main.js` 文件。
- en: 'Here we have two methods, `getToken()` and `ThingProperty()`. The `getToken()`
    method will be same across the coding exercises and will be used to fetch the
    authentication token from the Arduino IoT Cloud on the basis of the Client ID
    and Client Secret:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们有两种方法，`getToken()` 和 `ThingProperty()`。`getToken()` 方法将在编码练习中保持一致，并用于根据客户端
    ID 和客户端密钥从 Arduino IoT Cloud 获取认证令牌：
- en: '[PRE1]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The preceding code snippet is from the `getToken()` method. Insert your Client
    ID in the `client_id` variable and your Client Secret in the `client_secret` variable.
    Likewise, insert your `Thing ID` and `Property ID` in the following code snippet
    under the `ThingProperty()` method. You can get your Thing ID by navigating to
    Thing and then the **Metadata** tab in the Arduino IoT Cloud. The property ID
    can be found by clicking on the cloud variable on the Thing page in the Arduino
    IoT Cloud:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码片段来自 `getToken()` 方法。将你的客户端 ID 插入 `client_id` 变量，将你的客户端密钥插入 `client_secret`
    变量。同样，在 `ThingProperty()` 方法下的以下代码片段中插入你的 `Thing ID` 和 `Property ID`。你可以通过导航到
    Arduino IoT Cloud 中的“设备”然后是 **元数据** 选项卡来获取你的 `Thing ID`。属性 ID 可以通过在 Arduino IoT
    Cloud 的设备页面上的云变量上点击来找到：
- en: '[PRE2]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Open the `main.js` code and provide a response in the console:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 `main.js` 代码并在控制台提供响应：
- en: '[PRE3]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You will receive the following response in the console if everything works
    fine:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切正常，你将在控制台收到以下响应：
- en: '[PRE4]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If you receive a `401 error`, it means your Client ID and/or Client Secret are
    not correct. If a `404 error` is returned, it means you are not using the proper
    method to fetch property data. If you get a `500 error`, it means the server is
    down or there is a network blockage for the Arduino IoT Cloud from your ISP.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你收到 `401` 错误，这意味着你的客户端 ID 和/或客户端密钥不正确。如果返回 `404` 错误，这意味着你没有使用正确的方法来获取属性数据。如果你得到
    `500` 错误，这意味着服务器已关闭或你的 ISP 对 Arduino IoT Cloud 有网络阻塞。
- en: In the *First try with Postman* section, we discussed how to use Arduino IoT
    Cloud endpoints with Postman for request/response tasks as well as installing
    the Node.js module for the cloud and testing it with an example where we fetched
    the last value of the Thing cloud variable/property.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *第一次使用 Postman 尝试* 部分，我们讨论了如何使用 Arduino IoT Cloud 端点与 Postman 进行请求/响应任务，以及安装云的
    Node.js 模块并使用示例进行测试，其中我们获取了 Thing 云变量/属性的最后一个值。
- en: Building on this foundation, we are going to start a new journey where we will
    play around with the Arduino IoT Cloud. Firstly, we will start with devices. In
    the next section, we will create, update, delete, list, and view a specific device.
    Later in the chapter, we will do the same for Things, properties (also known as
    cloud variables), and dashboards.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个基础上，我们将开始一段新的旅程，我们将围绕 Arduino IoT Cloud 进行操作。首先，我们将从设备开始。在下一节中，我们将创建、更新、删除、列出和查看特定设备。在章节的后面，我们将对
    Things、属性（也称为云变量）和仪表板做同样的操作。
- en: Interacting with devices – hands-on with the Node.js SDK
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与设备交互 - 使用 Node.js SDK 进行实际操作
- en: 'In this section, we are going to get hands-on and practical with devices. We
    will perform CRUD operations on a device as well as listing all the devices and
    showing all the parameters of specific devices. Open up VSCode and navigate to
    this chapter’s example code. Then click on the `device` folder: here you can find
    all the code related to device operations.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将亲自动手，使用设备进行实际操作。我们将对设备执行 CRUD 操作，以及列出所有设备并显示特定设备的所有参数。打开 VSCode 并导航到本章的示例代码。然后点击
    `device` 文件夹：在这里你可以找到所有与设备操作相关的代码。
- en: Creating a device
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建设备
- en: Firstly, we will start with device creation. The documentation on device creation
    can be found at [https://www.arduino.cc/reference/en/iot/api/#api-DevicesV2-devicesV2Create](https://www.arduino.cc/reference/en/iot/api/#api-DevicesV2-devicesV2Create).
    Open `create-device.js` under the `device` folder in VSCode.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将从设备创建开始。设备创建的文档可以在 [https://www.arduino.cc/reference/en/iot/api/#api-DevicesV2-devicesV2Create](https://www.arduino.cc/reference/en/iot/api/#api-DevicesV2-devicesV2Create)
    找到。在 VSCode 中 `device` 文件夹下打开 `create-device.js`。
- en: 'There are two methods in the code: one is `getToken()`, which is the same method
    as in all our coding exercises and helps us to fetch the authentication token
    for requests. The second method is `CreateDevice()`, which is responsible for
    device creation. Consulting the documentation, we can see we need to initiate
    the `api` variable with the `AiotApi.DevicesV2Api()` object, which is related
    to devices:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 代码中有两种方法：一种是 `getToken()`，这与我们所有的编码练习中的方法相同，帮助我们获取请求的认证令牌。第二种方法是 `CreateDevice()`，它负责设备创建。查阅文档，我们可以看到我们需要使用
    `AiotApi.DevicesV2Api()` 对象初始化 `api` 变量，这与设备相关：
- en: '[PRE5]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`api.devicesV2Create` is the method responsible for device creation and takes
    two parameters as input. `DeviceProperties` covers things such as the device name,
    type, and `name` first – this could be anything you fancy, but avoid using special
    characters. Next, we need to provide a choice for `connection_type`, such as Wi-Fi,
    GSM, LoRa WAN, and so on. All available types are provided by the documentation.
    For `fqbn`, we need to provide the details of the development board. Taking the
    `esp32:esp32:XIAO_ESP32C3`.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`api.devicesV2Create` 是负责设备创建的方法，它接受两个输入参数。`DeviceProperties` 包括设备名称、类型和 `name`
    第一部分——这可以是任何您喜欢的，但请避免使用特殊字符。接下来，我们需要提供一个 `connection_type` 的选择，例如 Wi-Fi、GSM、LoRa
    WAN 等。所有可用类型都在文档中提供。对于 `fqbn`，我们需要提供开发板的详细信息。例如 `esp32:esp32:XIAO_ESP32C3`。'
- en: '`options` are optional, so I left it blank, but you can provide the `X-Organization`
    value according to your requirements. Both arrays are passed to the `api.devicesV2Create`
    method, which will return the response. The `util.inspect` method is used to display
    the JSON response on the console with proper formatting. Type the following command
    to execute the `create-device.js` program:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`options` 是可选的，所以我留空了，但你可以根据需求提供 `X-Organization` 的值。两个数组都传递给 `api.devicesV2Create`
    方法，该方法将返回响应。使用 `util.inspect` 方法以适当的格式在控制台上显示 JSON 响应。输入以下命令以执行 `create-device.js`
    程序：'
- en: '[PRE6]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'After successful execution of the script, it will print a response like the
    following:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本成功执行后，将打印出如下响应：
- en: '[PRE7]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the response, you will get your device ID, which will be used later in the
    chapter for Thing creation when we associate the device with the Thing. The remaining
    properties are the same as already covered in the code.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在响应中，您将获得设备 ID，它将在本章的设备创建部分使用，当我们将设备与设备关联时。其余属性与代码中已覆盖的相同。
- en: Important note
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 重要注意事项
- en: If you are unable to get the correct FQBN, then add the device manually from
    the dashboard, finding and clicking on the device from the dropdown. This will
    give you the `fqbn`, `type`, and `connection_type` details. You can use these
    details later in your Node.js script for automated creation of devices.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您无法获取正确的 FQBN，则可以从仪表板手动添加设备，通过下拉菜单查找并点击设备。这将提供 `fqbn`、`type` 和 `connection_type`
    详细信息。您可以在 Node.js 脚本中稍后使用这些详细信息来自动创建设备。
- en: Updating a device
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新设备
- en: 'In this section, we are going to explore how we can update a device using the
    device ID. Let’s suppose we mistakenly added a device with the wrong FQBN and
    name. We will update both properties using the device ID. The documentation on
    updating devices is available at [https://www.arduino.cc/reference/en/iot/api/#api-DevicesV2-devicesV2Update](https://www.arduino.cc/reference/en/iot/api/#api-DevicesV2-devicesV2Update).
    Open the `update-device.js` file under the `device` folder in VSCode:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨如何使用设备 ID 更新设备。假设我们错误地添加了一个具有错误 FQBN 和名称的设备。我们将使用设备 ID 更新这两个属性。有关更新设备的文档可在
    [https://www.arduino.cc/reference/en/iot/api/#api-DevicesV2-devicesV2Update](https://www.arduino.cc/reference/en/iot/api/#api-DevicesV2-devicesV2Update)
    查找。在 VSCode 中打开 `device` 文件夹下的 `update-device.js` 文件：
- en: '[PRE8]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The preceding code is almost the same as the `create-device` code. Here we
    have one extra variable, `DeviceID`, with which we will update the specific device.
    The rest of the code has the same device properties and options as previously.
    Now, fill in the correct `fqbn` and `name` values in the `DeviceProperties` variable.
    Lastly, we call the `api.devicesV2Update()` method. Execute the following command
    in the Terminal:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码几乎与 `create-device` 代码相同。这里我们有一个额外的变量 `DeviceID`，我们将用它来更新特定的设备。其余的代码与之前相同，具有相同的设备属性和选项。现在，在
    `DeviceProperties` 变量中填写正确的 `fqbn` 和 `name` 值。最后，我们调用 `api.devicesV2Update()`
    方法。在终端中执行以下命令：
- en: '[PRE9]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'After successful execution of the script, it will print a response like the
    following:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本成功执行后，将打印出如下响应：
- en: '[PRE10]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As we can see, after our update, the response sends back the new content. We
    provided a change of name and FQBN and it is reflected successfully in the response.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，在更新后，响应会发送回新的内容。我们提供了名称和 FQBN 的更改，并且成功反映在响应中。
- en: Deleting a device
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除设备
- en: In this section, we are going to explore how we can delete a device using the
    device ID. The documentation for deleting devices is available at [https://www.arduino.cc/reference/en/iot/api/#api-DevicesV2-devicesV2Delete](https://www.arduino.cc/reference/en/iot/api/#api-DevicesV2-devicesV2Delete).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨如何使用设备ID来删除设备。有关删除设备的文档可在[https://www.arduino.cc/reference/en/iot/api/#api-DevicesV2-devicesV2Delete](https://www.arduino.cc/reference/en/iot/api/#api-DevicesV2-devicesV2Delete)找到。
- en: 'Open the `delete-device.js` file under the `device` folder in VSCode:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在VSCode中打开`device`文件夹下的`delete-device.js`文件：
- en: '[PRE11]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The preceding code snippet is taken from the `DeleteDevice()` method. In this
    method, we need to supply `DeviceID` and options variables as parameters. `DeviceID`
    is mandatory for the deletion process while the `options` variable is not. Execute
    the following command in the Terminal:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码片段是从`DeleteDevice()`方法中提取的。在此方法中，我们需要将`DeviceID`和`options`变量作为参数提供。`DeviceID`是删除过程的必需参数，而`options`变量不是必需的。请在终端中执行以下命令：
- en: '[PRE12]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: After successful execution of the script, it will print a response to the console
    reporting that the device has been deleted successfully.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本执行成功后，将在控制台打印一条响应，报告设备已成功删除。
- en: Listing devices
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列出设备
- en: 'In this section, we will list all the devices. Note that there is a difference
    between listing devices and showing devices: *listing* devices means displaying
    all the devices with their properties, while *showing* a device only returns a
    specific device’s properties based on the device ID.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将列出所有设备。请注意，列出设备和显示设备之间存在差异：*列出*设备意味着显示所有设备及其属性，而*显示*设备仅根据设备ID返回特定设备的属性。
- en: 'The documentation on listing devices is available at [https://www.arduino.cc/reference/en/iot/api/#api-DevicesV2-devicesV2List](https://www.arduino.cc/reference/en/iot/api/#api-DevicesV2-devicesV2List).
    Open the `list-device.js` file under the `device` folder in VSCode. The following
    code snippet is taken from the `ListDevice()` method from the `list-device.js`
    file:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 列出设备的文档可在[https://www.arduino.cc/reference/en/iot/api/#api-DevicesV2-devicesV2List](https://www.arduino.cc/reference/en/iot/api/#api-DevicesV2-devicesV2List)找到。在VSCode中打开`device`文件夹下的`list-device.js`文件。以下代码片段是从`list-device.js`文件中的`ListDevice()`方法中提取的：
- en: '[PRE13]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Here we need to provide the criteria that will be used to filter out the devices
    and return the desired response. In the current code, we only mention one parameter,
    `''acrossUserIds''`, which is `true` to fetch all types of devices. But if required,
    you can filter the devices listed on the basis of `tags`, `serial`, and `X-Organization`.
    Execute the following command in the Terminal:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们需要提供用于过滤设备和返回所需响应的准则。在当前代码中，我们只提到了一个参数，即`'acrossUserIds'`，其值为`true`以获取所有类型的设备。但如果需要，你可以根据`tags`、`serial`和`X-Organization`来过滤列出的设备。请在终端中执行以下命令：
- en: '[PRE14]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'After successful execution of the script, it will print a response in JSON
    format with the device properties, which will clog up the **Terminal** console
    with extensive output. I modified the code to only display the device ID and device
    name on the console:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本执行成功后，将以JSON格式打印包含设备属性的响应，这将导致**终端**控制台输出大量信息。我修改了代码，只显示设备ID和设备名称在控制台上：
- en: '[PRE15]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In the preceding code, we are displaying two parameters on the console, but
    you can choose whichever and however many you want by specifying their names in
    the for loop. Using this, we can send the output in JSON format to a web/mobile
    client, which will display the information either in a list box or in menus.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们在控制台显示了两个参数，但你可以通过指定它们的名称在for循环中自由选择并指定任意数量。使用这种方法，我们可以将输出以JSON格式发送到Web/移动客户端，该客户端将在列表框或菜单中显示信息。
- en: Showing a device
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 显示设备
- en: This is the second-to-last subsection of the *Interacting with devices – hands-on
    with the Node.js SDK* section. Here we will fetch all the properties of a specific
    device by providing the device ID. The documentation on showing devices is available
    at [https://www.arduino.cc/reference/en/iot/api/#api-DevicesV2-devicesV2Show](https://www.arduino.cc/reference/en/iot/api/#api-DevicesV2-devicesV2Show).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这是“与设备交互 – 使用Node.js SDK动手实践”部分的倒数第二个小节。在这里，我们将通过提供设备ID来获取特定设备的所有属性。有关显示设备的文档可在[https://www.arduino.cc/reference/en/iot/api/#api-DevicesV2-devicesV2Show](https://www.arduino.cc/reference/en/iot/api/#api-DevicesV2-devicesV2Show)找到。
- en: 'Open the `show-device.js` file under the `device` folder in VSCode. The following
    code snippet is taken from the `ShowDevice()` method from the `show-device.js`
    file:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在 VSCode 中打开 `device` 文件夹下的 `show-device.js` 文件。以下代码片段是从 `show-device.js` 文件中的
    `ShowDevice()` 方法中摘取的：
- en: '[PRE16]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The `devicesV2Show()` method only takes two parameters: the first one is the
    `DeviceID` and the second is `options`, which includes `X-Organization`. `DeviceID`
    is mandatory to fetch a proper response while the `opts` variable is optional,
    hence we pass this variable as empty. Execute the following command in the Terminal:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`devicesV2Show()` 方法只接受两个参数：第一个是 `DeviceID`，第二个是 `options`，包括 `X-Organization`。`DeviceID`
    是获取适当响应的必需参数，而 `opts` 变量是可选的，因此我们将其留空。在终端中执行以下命令：'
- en: '[PRE17]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'After successful execution of the script, it will print the response in JSON
    format with the device properties as well as the details of any cloud variables
    if any associated variable is present:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本执行成功后，它将以 JSON 格式打印出包含设备属性以及任何关联变量的详情（如果有的话）：
- en: '[PRE18]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The preceding code is the edited response of the script regarding device properties,
    which includes all the details of the given device such as last activity, the
    cloud variables count, the Thing ID associated with the device, webhook details
    (if active), sketch ID, and so on.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码是关于设备属性的脚本编辑后的响应，包括给定设备的所有详细信息，如最后活动时间、云变量数量、与设备关联的 Thing ID、webhook 详细信息（如果处于活动状态）、sketch
    ID 等。
- en: In this sub-section, we have explored how to get all the devices list from the
    Arduino IoT Cloud using the Node.js SDK. Next, let’s explore how to get the list
    of cloud variables/properties associated with the device.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在本小节中，我们探讨了如何使用 Node.js SDK 从 Arduino IoT Cloud 获取所有设备列表。接下来，让我们探索如何获取与设备关联的云变量/属性列表。
- en: Device properties/variables
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设备属性/变量
- en: Here, we will fetch all the cloud variable details for a specific device by
    providing the device ID. The documentation on showing devices is available at
    [https://www.arduino.cc/reference/en/iot/api/#api-DevicesV2-devicesV2GetProperties](https://www.arduino.cc/reference/en/iot/api/#api-DevicesV2-devicesV2GetProperties).
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将通过提供设备 ID 来获取特定设备的所有云变量详情。关于显示设备的文档可在 [https://www.arduino.cc/reference/en/iot/api/#api-DevicesV2-devicesV2GetProperties](https://www.arduino.cc/reference/en/iot/api/#api-DevicesV2-devicesV2GetProperties)
    查找。
- en: 'To begin, open the `properties-device.js` file under the `device` folder in
    VSCode. The following code snippet is taken from the `ListPropDevice()` method
    in the `properties-device.js` file:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在 VSCode 中打开 `device` 文件夹下的 `properties-device.js` 文件。以下代码片段是从 `properties-device.js`
    文件中的 `ListPropDevice()` 方法中摘取的：
- en: '[PRE19]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The `devicesV2GetProperties()` method only takes two parameters: the first
    one is device ID and the second is options, which includes `showDeleted` and `X-Organization`.
    `DeviceID` is mandatory to fetch a proper response, while the `opts` variable
    is optional, so we leave this variable empty when we pass it. Execute the following
    command in the Terminal:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`devicesV2GetProperties()` 方法只接受两个参数：第一个是设备 ID，第二个是选项，包括 `showDeleted` 和 `X-Organization`。`DeviceID`
    是获取适当响应的必需参数，而 `opts` 变量是可选的，因此我们将其留空。在终端中执行以下命令：'
- en: '[PRE20]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'After successful execution of the script, it will print a response in JSON
    format containing the cloud variable details associated with that particular device
    ID:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本执行成功后，它将以 JSON 格式打印出与特定设备 ID 相关的云变量详情：
- en: '[PRE21]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The preceding response is the edited response of the script regarding the device
    cloud variables, including `variable_name`, `type`, `permission`, `thing_id`,
    `update_strategy`, and so on. We have now seen how to get the cloud variable details,
    and in the next section we’ll move on to cover Things.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 以下响应是关于设备云变量的脚本编辑后的响应，包括 `variable_name`、`type`、`permission`、`thing_id`、`update_strategy`
    等。我们已经看到了如何获取云变量详情，在下一节中，我们将继续介绍 Things。
- en: Engaging with Things – Node.js SDK implementation guide
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与事物互动 – Node.js SDK 实现指南
- en: The Thing is one of the most important elements in the Arduino IoT Cloud, and
    acts as defined container holding all of its ingredients such as cloud variables,
    the device, a sketch for the device, and the device’s network configuration. In
    this section, we will try a range of different coding exercises to get a feel
    for Thing CRUD operations.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: Thing 是 Arduino IoT Cloud 中最重要的元素之一，它作为一个定义的容器，包含所有成分，如云变量、设备、设备的 sketch 以及设备的网络配置。在本节中，我们将尝试一系列不同的编码练习，以了解
    Thing CRUD 操作。
- en: Creating a Thing
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个 Thing
- en: Firstly, we will start with Thing creation. The relevant documentation can be
    found at [https://www.arduino.cc/reference/en/iot/api/#api-ThingsV2-thingsV2Createe](https://www.arduino.cc/reference/en/iot/api/#api-ThingsV2-thingsV2Createe).
    Open the `create-thing.js` file under the `thing` folder in VSCode.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将从创建 Thing 开始。相关文档可在[https://www.arduino.cc/reference/en/iot/api/#api-ThingsV2-thingsV2Createe](https://www.arduino.cc/reference/en/iot/api/#api-ThingsV2-thingsV2Createe)找到。在
    VSCode 中打开位于 `thing` 文件夹下的 `create-thing.js` 文件。
- en: 'There are two methods in this code: one is `getToken()`, which is the same
    method as in all our coding exercises and helps us to fetch an authentication
    token for our requests. The second method is `CreateThing()`, which is responsible
    for Thing creation. Referring to the documentation, we can see that we need to
    initiate the `api` variable with the `AiotApi.ThingsV2Api()` object, which relates
    to the Arduino IoT Cloud Thing. This object is responsible for performing operations
    on the Thing:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码中有两种方法：一种是 `getToken()`，这与我们所有编码练习中的方法相同，帮助我们获取请求的认证令牌。第二种方法是 `CreateThing()`，它负责创建
    Thing。根据文档，我们可以看到需要使用 `AiotApi.ThingsV2Api()` 对象初始化 `api` 变量，该对象与 Arduino IoT
    Cloud Thing 相关。该对象负责对 Thing 执行操作：
- en: '[PRE22]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '`api.thingsV2Create` is the method responsible for Thing creation and takes
    two parameters as input: `name` and `opts`. Firstly, we start with `name`, which
    can be anything you like, but make sure to avoid special characters. For now,
    we provide just the Thing name in the variable, but in the upcoming update section,
    we will additionally pass the time zone and device ID parameters.'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '`api.thingsV2Create` 是负责创建 Thing 的方法，它接受两个参数作为输入：`name` 和 `opts`。首先，我们从 `name`
    开始，这可以是任何您喜欢的名称，但请确保避免特殊字符。目前，我们在变量中只提供了 Thing 名称，但在即将到来的更新部分，我们还将传递时区和设备 ID 参数。'
- en: '`opts` here is optional, hence I left it blank, but you can provide the `X-Organization`
    value if required. Both variables are passed to the `api.thingsV2Create` method,
    which will return the response. The `util.inspect` method is used to display the
    JSON response on the console with proper formatting. Type the following command
    to execute the `create-device.js` script:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`opts` 是可选的，因此我将其留空，但如有需要，您可以提供 `X-Organization` 值。这两个变量都传递给 `api.thingsV2Create`
    方法，该方法将返回响应。`util.inspect` 方法用于在控制台上以适当的格式显示 JSON 响应。输入以下命令以执行 `create-device.js`
    脚本：'
- en: '[PRE23]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'After successful execution of the script, it will print a response as follows:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本执行成功后，将打印出如下响应：
- en: '[PRE24]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In the response, you will get your Thing ID, which will be used shortly in the
    following Thing update/delete operations – so make sure to paste this Thing ID
    into a Notepad file or something similar. Also returned are the time zone, properties
    count, and webhook status.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在响应中，您将获得您的 Thing ID，该 ID 将在以下 Thing 更新/删除操作中很快使用——因此请确保将此 Thing ID 粘贴到记事本文件或其他类似文件中。同时返回的还有时区、属性计数和
    webhook 状态。
- en: Updating a Thing
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新一个 Thing
- en: 'In this section, we are going to explore how to update a Thing using the Thing
    ID. Let’s suppose we mistakenly added the Thing without setting the proper time
    zone and without device association. In this scenario, we have the option to update
    the Thing with new properties. The documentation covering updating devices is
    available at [https://www.arduino.cc/reference/en/iot/api/#api-ThingsV2-thingsV2Update](https://www.arduino.cc/reference/en/iot/api/#api-ThingsV2-thingsV2Update).
    Open the `update-thing.js` file under the `device` folder in VSCode:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨如何使用 Thing ID 更新一个 Thing。假设我们错误地添加了 Thing，但没有设置正确的时间区域，也没有进行设备关联。在这种情况下，我们有选项使用新属性更新
    Thing。有关更新设备的文档可在[https://www.arduino.cc/reference/en/iot/api/#api-ThingsV2-thingsV2Update](https://www.arduino.cc/reference/en/iot/api/#api-ThingsV2-thingsV2Update)找到。在
    VSCode 中打开位于 `device` 文件夹下的 `update-thing.js` 文件：
- en: '[PRE25]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The preceding code is similar to the `create-thing` code. Here we have one
    extra variable, `id`, which will help us to update the specific Thing. We also
    have the `timezone`, `device_id`, and `name` in the `thingupdate` variable. Lastly,
    we call the `api.thingsV2Update()` method. Execute the following command in the
    Terminal:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码与 `create-thing` 代码类似。这里我们有一个额外的变量 `id`，它将帮助我们更新特定的 Thing。在 `thingupdate`
    变量中，我们还有 `timezone`、`device_id` 和 `name`。最后，我们调用 `api.thingsV2Update()` 方法。在终端中执行以下命令：
- en: '[PRE26]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'After successful execution of the script, it will print a response like the
    following:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本执行成功后，将打印出如下响应：
- en: '[PRE27]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: After our update, the response will return the new content. We provided new
    values for `name` and `device_id`, along with the correct time zone. Everything
    is updated successfully and reflected in the response.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 更新后，响应将返回新的内容。我们提供了新的 `name` 和 `device_id` 值，以及正确的时间区域。所有内容都已成功更新并反映在响应中。
- en: Creating a Thing sketch
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 Thing 草图
- en: With Thing creation out of the way, we now need to create a sketch for the Thing.
    The relevant documentation can be found at [https://www.arduino.cc/reference/en/iot/api/#api-ThingsV2-thingsV2CreateSketch](https://www.arduino.cc/reference/en/iot/api/#api-ThingsV2-thingsV2CreateSketch).
    Open the `create-sketch-thing.js` file under the `thing` folder in VSCode.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成 Thing 的创建后，我们现在需要为 Thing 创建一个草图。相关文档可在[https://www.arduino.cc/reference/en/iot/api/#api-ThingsV2-thingsV2CreateSketch](https://www.arduino.cc/reference/en/iot/api/#api-ThingsV2-thingsV2CreateSketch)找到。在
    VSCode 中打开位于 `thing` 文件夹下的 `create-sketch-thing.js` 文件。
- en: 'There are two methods in the code: one is `getToken()`, which is the same method
    as used in all our coding exercises and fetches the authentication token for our
    requests. The second method is `CreateSketch()`, which handles creating the sketch
    for our specific Thing:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 代码中有两种方法：一种是 `getToken()`，这是我们在所有编码练习中使用的相同方法，用于获取请求的认证令牌。第二种方法是 `CreateSketch()`，它处理为特定
    Thing 创建草图：
- en: '[PRE28]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '`api.thingsV2CreateSketch` is the method responsible for Thing sketch creation
    and takes three parameters as input. The Thing ID is the first parameter; the
    second is the sketch version. `opts` is optional, so I left it blank, but you
    can provide the `X-Organization` value according to your requirements. All variables
    are passed to the `api.thingsV2CreateSketch` method, which will return the response.
    The `util.inspect` method is used to display the JSON response on the console
    with proper formatting. Type the following command to execute the `create-device.js`
    script:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '`api.thingsV2CreateSketch` 是负责创建 Thing 草图的方法，它接受三个输入参数。第一个参数是 Thing ID；第二个是草图版本。`opts`
    是可选的，所以我留空了，但你可以根据需要提供 `X-Organization` 值。所有变量都传递给 `api.thingsV2CreateSketch`
    方法，该方法将返回响应。使用 `util.inspect` 方法在控制台上以适当的格式显示 JSON 响应。输入以下命令以执行 `create-device.js`
    脚本：'
- en: '[PRE29]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'After successful execution of the script, it will print the following response:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本执行成功后，将打印以下响应：
- en: '[PRE30]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: In the response, you will see your Thing ID along with some other properties
    indicating that the sketch for the given Thing has been created successfully.
    You can also verify the sketch by navigating to the given Thing on the Arduino
    IoT Cloud.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在响应中，您将看到您的 Thing ID 以及一些其他属性，表明已成功创建了给定 Thing 的草图。您还可以通过在 Arduino IoT Cloud
    中导航到指定的 Thing 来验证草图。
- en: Important note
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Before sketch creation, it’s important to associate a device with the Thing.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建草图之前，将设备与 Thing 关联是很重要的。
- en: In this section, we created the Sketch for our Thing as the Arduino IoT Cloud
    will not do this by default. As a result, it’s mandatory to create a Sketch after
    creating a Thing in the Arduino IoT Cloud. Next we are going to explore how we
    can delete a Thing using the Arduino IoT Cloud API.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们创建了 Thing 的草图，因为 Arduino IoT Cloud 默认不会这样做。因此，在 Arduino IoT Cloud 中创建
    Thing 后，必须创建一个草图。接下来，我们将探讨如何使用 Arduino IoT Cloud API 删除一个 Thing。
- en: Deleting a Thing
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除 Thing
- en: 'In this section, we are going to explore how we can delete a Thing using the
    Thing ID. The documentation covering Thing deletion is available at [https://www.arduino.cc/reference/en/iot/api/#api-ThingsV2-thingsV2Delete](https://www.arduino.cc/reference/en/iot/api/#api-ThingsV2-thingsV2Delete).
    Open the `delete-thing.js` file under the `thing` folder in VSCode:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨如何使用 Thing ID 删除一个 Thing。关于 Thing 删除的文档可在[https://www.arduino.cc/reference/en/iot/api/#api-ThingsV2-thingsV2Delete](https://www.arduino.cc/reference/en/iot/api/#api-ThingsV2-thingsV2Delete)找到。在
    VSCode 中打开位于 `thing` 文件夹下的 `delete-thing.js` 文件：
- en: '[PRE31]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The preceding code snippet is taken from the `DeleteThing()` method. In the
    `DeleteThing()` method, we need to supply the `id` (Thing ID) and `opts` variables
    as parameters. `id` (Thing ID) is mandatory for the deletion process, while the
    `opts` variable is not. Execute the following command in the Terminal:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码片段来自 `DeleteThing()` 方法。在 `DeleteThing()` 方法中，我们需要将 `id`（Thing ID）和 `opts`
    变量作为参数提供。`id`（Thing ID）是删除过程所必需的，而 `opts` 变量则不是。在终端中执行以下命令：
- en: '[PRE32]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: After successful execution of the script, it will print a response on the console
    indicating that the device was deleted successfully.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本执行成功后，将在控制台上打印一个响应，指示设备已成功删除。
- en: Listing Things
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列出 Things
- en: 'In this section, we will list all the Things. Note that there is a difference
    between *listing* Things and *showing* a Thing: listing Things will display all
    the Things with their properties, while showing a Thing only shows the specific
    Thing properties related to a given Thing ID.'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将列出所有的事物。请注意，*列出*事物和*显示*事物之间有区别：列出事物将显示所有事物的属性，而显示事物仅显示与特定事物ID相关的特定事物属性。
- en: 'The relevant documentation on listing Things is available at [https://www.arduino.cc/reference/en/iot/api/#api-ThingsV2-thingsV2List](https://www.arduino.cc/reference/en/iot/api/#api-ThingsV2-thingsV2List).
    Open the `list-thing.js` file under the `thing` folder in VSCode. The following
    code snippet is taken from the `ListThing()` method:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 有关列出事物的相关文档可在[https://www.arduino.cc/reference/en/iot/api/#api-ThingsV2-thingsV2List](https://www.arduino.cc/reference/en/iot/api/#api-ThingsV2-thingsV2List)找到。在VSCode中打开`thing`文件夹下的`list-thing.js`文件。以下代码片段是从`ListThing()`方法中摘取的：
- en: '[PRE33]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Here we need to provide criteria that will be used to filter out the Things
    and return the response. In the current code, we have provided only one parameter,
    `''acrossUserIds''`, which is `true` and so will fetch all types of Things. But
    you can also filter Things on the basis of tags, IDs, X-Organization, and so on.
    Execute the following command in the Terminal:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们需要提供用于过滤事物并返回响应的准则。在当前代码中，我们只提供了一个参数，即`'acrossUserIds'`，其值为`true`，因此将检索所有类型的事物。但你也可以根据标签、ID、X-Organization等进行事物过滤。在终端中执行以下命令：
- en: '[PRE34]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'After successful execution of the script, it will print the response in JSON
    format with the Thing properties, which will fill the console with an extensive
    output. I modified the code to only display the Thing ID and Thing name on the
    console:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本执行成功后，它将以JSON格式打印包含事物属性的响应，这将使控制台充满大量输出。我修改了代码，只显示控制台上的事物ID和事物名称：
- en: '[PRE35]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: As can be seen in the preceding output, I am only displaying two parameters
    on the console but you can choose whichever parameters you would like to be displayed
    by specifying their names in the for loop. This way we can send the output in
    JSON format to a web/mobile client where the information will be displayed in
    either a list box or in menus.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述输出所示，我在控制台上只显示两个参数，但你可以通过在for循环中指定它们的名称来选择你想要显示的任何参数。这样我们就可以将输出以JSON格式发送到Web/移动客户端，信息将在列表框或菜单中显示。
- en: Showing a Thing
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 显示事物
- en: 'This is the last subsection of the *Engaging with things – Node.js SDK implementation
    guide* section. Here we will fetch all the properties regarding a specific Thing
    by providing the Thing ID. The documentation covering showing Things is available
    at [https://www.arduino.cc/reference/en/iot/api/#api-ThingsV2-thingsV2Show](https://www.arduino.cc/reference/en/iot/api/#api-ThingsV2-thingsV2Show).
    Open the `show-thing.js` file under the `thing` folder in VSCode. The following
    code snippet is taken from the `ShowThing()` method:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 这是“与事物互动 – Node.js SDK 实现指南”部分的最后一个子部分。我们将通过提供事物ID来获取有关特定事物的所有属性。有关显示事物的文档可在[https://www.arduino.cc/reference/en/iot/api/#api-ThingsV2-thingsV2Show](https://www.arduino.cc/reference/en/iot/api/#api-ThingsV2-thingsV2Show)找到。在VSCode中打开`thing`文件夹下的`show-thing.js`文件。以下代码片段是从`ShowThing()`方法中摘取的：
- en: '[PRE36]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The `thingsV2Show()` method only takes two parameters: the first one is the
    `thingid` and the second is `opts`, which include `X-Organization`. `thingid`
    is mandatory to fetch a proper response, while the `opts` variable is not compulsory,
    hence I passed this variable empty. Execute the following command in the Terminal:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '`thingsV2Show()`方法只接受两个参数：第一个是`thingid`，第二个是`opts`，其中包含`X-Organization`。`thingid`是获取适当响应的必需参数，而`opts`变量不是强制性的，因此我传递了这个空变量。在终端中执行以下命令：'
- en: '[PRE37]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'After successful execution of the script, it will print the response in JSON
    format containing the device properties as well as the details of cloud variables,
    if any associated variable is present:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本执行成功后，它将以JSON格式打印响应，其中包含设备属性以及云变量的详细信息（如果有相关变量）：
- en: '[PRE38]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The preceding code snippet shows an edited section from the output response
    regarding the Thing properties, which includes all the details of the Thing, the
    device properties, cloud variables such as last value, webhook details (if active),
    the sketch ID, and so on.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码片段显示了输出响应中关于事物属性的编辑部分，其中包括事物的所有详细信息，设备属性，云变量（如最后值），webhook详细信息（如果处于活动状态），草图ID等。
- en: In this section, we explored how we can get the complete details of a specific
    Arduino IoT Cloud Thing using the Thing ID in JSON format. Next, we will start
    playing with cloud variables/properties.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们探讨了如何使用JSON格式的设备ID获取特定Arduino IoT Cloud事物的完整详细信息。接下来，我们将开始玩转云变量/属性。
- en: Exploring properties – Node.js SDK interaction techniques
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索属性 - Node.js SDK交互技术
- en: '**Properties**, also called **cloud variables**, are one of the most important
    ingredients for Things in the Arduino IoT Cloud, responsible for storage of sensor
    data from the device to the cloud or vice versa. In this section, we will explore
    how to create, update, delete, and list cloud variables using the Node.js SDK.'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '**属性**，也称为**云变量**，是Arduino IoT Cloud中事物最重要的组成部分之一，负责从设备到云或反之的数据存储。在本节中，我们将探讨如何使用Node.js
    SDK创建、更新、删除和列出云变量。'
- en: Creating a property
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建属性
- en: Firstly, we will start with property creation. The property creation documentation
    can be found at [https://www.arduino.cc/reference/en/iot/api/#api-PropertiesV2-propertiesV2Create](https://www.arduino.cc/reference/en/iot/api/#api-PropertiesV2-propertiesV2Create).
    Open the `create-property.js` file under the `properties` folder in VSCode.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将从属性创建开始。属性创建文档可在[https://www.arduino.cc/reference/en/iot/api/#api-PropertiesV2-propertiesV2Create](https://www.arduino.cc/reference/en/iot/api/#api-PropertiesV2-propertiesV2Create)找到。在VSCode中打开位于
    `properties` 文件夹下的 `create-property.js` 文件。
- en: 'There are two methods in the code: one is `getToken()`, which is the same method
    used in all our coding exercises to fetch the authentication token for our requests.
    The second method is `CreateProperty()`, which handles cloud variable creation.
    Consulting the documentation, we can see that we need to initiate the `api` variable
    with `AiotApi`, the `PropertiesV2Api()` object, which is related to properties:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 代码中有两种方法：一种是 `getToken()`，这是我们所有编码练习中用来获取请求认证令牌的相同方法。第二种方法是 `CreateProperty()`，它处理云变量创建。查阅文档，我们可以看到我们需要使用
    `AiotApi` 和 `PropertiesV2Api()` 对象初始化 `api` 变量，这与属性相关：
- en: '[PRE39]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '`api.propertiesV2Create` is the method responsible for property creation and
    takes two parameters as input. One is the Thing ID and the other variable contains
    mandatory details regarding the cloud variable. The Thing ID is simple and easily
    fetchable from the Thing metadata, but cloud variables have a variety of different
    parameters including `type`, `permission`, and `update_strategy`, available on
    the official documentation page (the URL was provided at the start of this section).
    Both variables are passed to the `api.devicesV2Create` method, which returns the
    response. The `util.inspect` method is used to display the JSON response with
    proper formatting on the console. Type the following command to execute the `create-device.js`
    script:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '`api.propertiesV2Create` 是负责属性创建的方法，它接受两个输入参数。一个是设备ID，另一个变量包含有关云变量的强制详细资料。设备ID简单且易于从设备元数据中获取，但云变量有多种不同的参数，包括
    `type`、`permission` 和 `update_strategy`，这些参数可以在官方文档页面上找到（该URL在本节开头已提供）。这两个变量都传递给
    `api.devicesV2Create` 方法，该方法返回响应。使用 `util.inspect` 方法在控制台上以适当的格式显示JSON响应。输入以下命令以执行
    `create-device.js` 脚本：'
- en: '[PRE40]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'After successful execution of the script, it will print the following response:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本执行成功后，将打印以下响应：
- en: '[PRE41]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: In the response, you will get your cloud variable ID, creation date, and update
    date, along with other details already mentioned during our cloud variable creation
    exercise.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在响应中，您将获得您的云变量ID、创建日期和更新日期，以及其他在我们云变量创建练习中提到的其他详细信息。
- en: Updating a property
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新属性
- en: 'In this section, we are going to explore how we can update a cloud variable
    using the cloud variable ID. Suppose we mistakenly added a cloud variable with
    the wrong data type and some other parameters – in the event of this scenario,
    we have the option to update it. The documentation covering updating properties
    is available at [https://www.arduino.cc/reference/en/iot/api/#api-PropertiesV2-propertiesV2Update](https://www.arduino.cc/reference/en/iot/api/#api-PropertiesV2-propertiesV2Update).
    Open the `update-property.js` file under the `property` folder in VSCode:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨如何使用云变量ID更新云变量。假设我们错误地添加了一个具有错误数据类型和一些其他参数的云变量——在这种情况下，我们有更新它的选项。有关更新属性的文档可在[https://www.arduino.cc/reference/en/iot/api/#api-PropertiesV2-propertiesV2Update](https://www.arduino.cc/reference/en/iot/api/#api-PropertiesV2-propertiesV2Update)找到。在VSCode中打开
    `update-property.js` 文件，位于 `property` 文件夹下：
- en: '[PRE42]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The preceding code is very similar to the `create-property` code. Here we have
    one extra variable, `property_id`, used to update the given property. Besides
    that, we have the same cloud variable properties with their updated content. Lastly,
    we call the `api.propertiesV2Update()` method. Execute the following command in
    the Terminal:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码与`create-property`代码非常相似。这里我们有一个额外的变量`property_id`，用于更新指定的属性。除此之外，我们还有相同的云变量属性及其更新内容。最后，我们调用`api.propertiesV2Update()`方法。在终端中执行以下命令：
- en: '[PRE43]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'After successful execution of the script, it will print a response something
    like the following:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本执行成功后，它将打印出类似于以下内容的响应：
- en: '[PRE44]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: After the update, the response will return the new content. We provided updated
    information for the name, type, and variable name and this is reflected successfully
    in the response.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 更新后，响应将返回新的内容。我们提供了名称、类型和变量名的更新信息，并在响应中成功反映出来。
- en: Deleting a property
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除属性
- en: 'In this section, we are going to explore how to delete a property using the
    Thing ID and property ID. The documentation covering deleting a property is available
    at [https://www.arduino.cc/reference/en/iot/api/#api-PropertiesV2-propertiesV2Delete](https://www.arduino.cc/reference/en/iot/api/#api-PropertiesV2-propertiesV2Delete).
    Open the `delete-property.js` file under the `property` folder in VSCode:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨如何使用设备ID和属性ID来删除属性。有关删除属性的文档可在[https://www.arduino.cc/reference/en/iot/api/#api-PropertiesV2-propertiesV2Delete](https://www.arduino.cc/reference/en/iot/api/#api-PropertiesV2-propertiesV2Delete)找到。在VSCode中打开`property`文件夹下的`delete-property.js`文件：
- en: '[PRE45]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The preceding code snippet is taken from the `DeleteProperty()` method from
    `delete-property.js` file. In the `DeleteProperty()` method we need to supply
    the `thing_ID`, `property_id`, and `options` variables as parameters. `thing_id`
    and `property_id` are both mandatory for the deletion process while the `options`
    variable is optional. Execute the following command in the Terminal:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码片段是从`delete-property.js`文件中的`DeleteProperty()`方法中摘取的。在`DeleteProperty()`方法中，我们需要将`thing_ID`、`property_id`和`options`变量作为参数提供。`thing_id`和`property_id`都是删除过程的必需参数，而`options`变量是可选的。在终端中执行以下命令：
- en: '[PRE46]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: After successful execution of the script, it will print a response on the console
    reading that the property has been deleted successfully.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本执行成功后，将在控制台打印出响应，表明属性已成功删除。
- en: Listing properties
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列出属性
- en: In this section, we will list all the properties for a given Thing using the
    Thing ID. As previously outlined with devices and Things, there is a difference
    between *listing* properties and *showing* a property. Listing properties means
    displaying all the cloud variables of a Thing, while showing a property only shows
    the specific cloud variable properties related to the given Thing ID and property
    ID.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用设备ID列出给定设备的所有属性。正如之前在设备和设备中概述的那样，列出属性和显示属性之间存在差异。列出属性意味着显示设备的所有云变量，而显示属性仅显示与给定设备ID和属性ID相关的特定云变量属性。
- en: 'The documentation on listing properties is available at [https://www.arduino.cc/reference/en/iot/api/#api-PropertiesV2-propertiesV2List](https://www.arduino.cc/reference/en/iot/api/#api-PropertiesV2-propertiesV2List).
    Open the `list-property.js` file under the `property` folder in VSCode. The following
    code snippet is taken from the `ListProperty()` method:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 列出属性的文档可在[https://www.arduino.cc/reference/en/iot/api/#api-PropertiesV2-propertiesV2List](https://www.arduino.cc/reference/en/iot/api/#api-PropertiesV2-propertiesV2List)找到。在VSCode中打开`property`文件夹下的`list-property.js`文件。以下代码片段是从`ListProperty()`方法中摘取的：
- en: '[PRE47]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Here we only need to provide the Thing ID and options to get a complete list
    of cloud variables associated with the Thing. Execute the following command in
    the Terminal:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们只需要提供设备ID和选项，就可以获取与设备关联的所有云变量的完整列表。在终端中执行以下命令：
- en: '[PRE48]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'After successful execution of the script, it will print the response in JSON
    format with the cloud variable’s properties. I chose a Thing that only has a single
    cloud variable:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本执行成功后，它将以JSON格式打印出响应，包含云变量的属性。我选择了一个只有一个云变量的设备：
- en: '[PRE49]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: The preceding response contains all the values related to the cloud variable,
    such as last value, updated time, and so on. If you want to fetch the last value
    of a cloud variable then this method could be used in your application to do so.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的响应包含了与云变量相关的所有值，例如最后值、更新时间等。如果您想获取一个云变量的最后值，那么这个方法可以在您的应用程序中用来实现这一点。
- en: Next, we have another API endpoint related to showing the properties of a single
    cloud variable. The code is available in the `property` folder, and the execution
    of the code along with checking out how it works is left to you as an exercise.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们还有一个与显示单个云变量属性相关的API端点。代码位于`property`文件夹中，代码的执行以及如何检查其工作作为练习留给您。
- en: In this section, we discussed in depth how to get the complete details of a
    cloud variable/property in JSON format using the Arduino IoT Cloud API, which
    provides lot of data including `last_value` and `value_update_at`. In the next
    section, we will start working with dashboards and learn how to perform operations
    on them using the Node.js SDK.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们深入讨论了如何使用Arduino IoT Cloud API以JSON格式获取云变量/属性的完整详情，该API提供了包括`last_value`和`value_update_at`在内的大量数据。在下一节中，我们将开始处理仪表板，并学习如何使用Node.js
    SDK对它们进行操作。
- en: Crafting dashboards – unleashing potential via the Node.js SDK
  id: totrans-234
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建仪表板——通过Node.js SDK释放潜力
- en: Dashboards are the most important ingredient in the Arduino IoT Cloud pertaining
    to **data visualization**. In the SDK, we have dashboard-specific methods to perform
    CRUD operations on dashboards, as well as other operations such as sharing, requesting
    access, and so on, but here we will only focus on the CRUD operations.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 仪表板是Arduino IoT Cloud中与**数据可视化**最重要的组成部分。在SDK中，我们有针对仪表板的特定方法来执行对仪表板的CRUD操作，以及其他操作，如共享、请求访问等，但在这里我们只关注CRUD操作。
- en: Creating a dashboard
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建仪表板
- en: Let’s start first with dashboard creation. The relevant documentation can be
    found at [https://www.arduino.cc/reference/en/iot/api/#api-DashboardsV2-dashboardsV2Create](https://www.arduino.cc/reference/en/iot/api/#api-DashboardsV2-dashboardsV2Create).
    Open the `create-dashboard.js` file under the `dashboard` folder in VSCode.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先从仪表板创建开始。相关文档可以在[https://www.arduino.cc/reference/en/iot/api/#api-DashboardsV2-dashboardsV2Create](https://www.arduino.cc/reference/en/iot/api/#api-DashboardsV2-dashboardsV2Create)找到。在VSCode中打开`dashboard`文件夹下的`create-dashboard.js`文件。
- en: 'There are two methods in this code: one is `getToken()`, which is the same
    method as in all our coding exercises to fetch the authentication token for our
    requests. The second method is `CreateDashboard()`, which is responsible for dashboard
    creation. Referring to the documentation, we can see we need to initiate the `api`
    variable with the `AiotApi.DashboardV2Api()` object, which is used to perform
    operations on dashboard objects:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在此代码中有两种方法：一种方法是`getToken()`，这与我们所有编码练习中的方法相同，用于获取请求的认证令牌。第二种方法是`CreateDashboard()`，它负责仪表板的创建。参考文档，我们可以看到我们需要使用`AiotApi.DashboardV2Api()`对象初始化`api`变量，该对象用于对仪表板对象执行操作：
- en: '[PRE50]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '`api.dashboardsV2Create` is the method responsible for dashboard creation and
    takes two parameters as input: the first is the dashboard properties and the second
    variable is `opts`, which is not mandatory, hence I leave it empty. Both variables
    are passed to the `api.dashboardsV2Create` method, which returns the response.
    The `util.inspect` method is used to display the JSON response on the console
    with proper formatting. Type the following command to execute the `create-dashboard.js`
    script:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '`api.dashboardsV2Create`是负责创建仪表板的方法，它接受两个输入参数：第一个是仪表板属性，第二个变量是`opts`，它不是必需的，因此我将其留空。这两个变量都传递给`api.dashboardsV2Create`方法，该方法返回响应。使用`util.inspect`方法在控制台上以适当的格式显示JSON响应。输入以下命令以执行`create-dashboard.js`脚本：'
- en: '[PRE51]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'After successful execution of the script, it will print a response like the
    following:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本执行成功后，它将打印出如下所示的响应：
- en: '[PRE52]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: In the response you will get your dashboard ID, creation date, update date,
    and other things we already covered during dashboard creation.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在响应中，您将获得仪表板ID、创建日期、更新日期以及其他我们在仪表板创建过程中已经讨论过的事项。
- en: Updating a dashboard
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新仪表板
- en: 'In this section, we are going to explore how to update a dashboard using the
    dashboard ID. There is an option to add widgets to a dashboard via an API but
    it will make the code significantly more complex due to the JSON data involved.
    For this reason, we will just update the dashboard name instead of adding widgets.
    The documentation for updating properties is available at [https://www.arduino.cc/reference/en/iot/api/#api-DashboardsV2-dashboardsV2Update](https://www.arduino.cc/reference/en/iot/api/#api-DashboardsV2-dashboardsV2Update).
    Open the `update-dashboard.js` file under the `dashboard` folder in VSCode:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨如何使用仪表板ID更新仪表板。通过API向仪表板添加组件是一个选项，但由于涉及JSON数据，这将使代码变得复杂得多。因此，我们将只更新仪表板名称而不是添加组件。有关更新属性的文档可在[https://www.arduino.cc/reference/en/iot/api/#api-DashboardsV2-dashboardsV2Update](https://www.arduino.cc/reference/en/iot/api/#api-DashboardsV2-dashboardsV2Update)找到。在VSCode中打开`dashboard`文件夹下的`update-dashboard.js`文件：
- en: '[PRE53]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'The preceding code is almost the same as the `create-dashboard` code. Here
    we have one extra variable, `dashboard_id`, used to update the specific dashboard.
    Besides that, we have the same dashboard properties with their updated content.
    Lastly, we call the `api.dashboardsV2Update()` method. Execute the following command
    in the Terminal:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码几乎与`create-dashboard`代码相同。这里我们有一个额外的变量`dashboard_id`，用于更新特定的仪表板。除此之外，我们还有相同的仪表板属性及其更新后的内容。最后，我们调用`api.dashboardsV2Update()`方法。在终端中执行以下命令：
- en: '[PRE54]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'After successful execution of the script, it will print a response like the
    following:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 在脚本成功执行后，它将打印出以下类似的响应：
- en: '[PRE55]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: After our update, the response will return the new content, reflecting the updated
    data for the name that we provided.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 更新后，响应将返回新的内容，反映我们提供的名称的更新数据。
- en: Deleting a dashboard
  id: totrans-253
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除仪表板
- en: 'In this section, we are going to explore how to delete a dashboard using the
    dashboard ID. The relevant documentation on deleting dashboards is available at
    [https://www.arduino.cc/reference/en/iot/api/#api-DashboardsV2-dashboardsV2Delete](https://www.arduino.cc/reference/en/iot/api/#api-DashboardsV2-dashboardsV2Delete).
    Open the `delete-dashboard.js` file under the `dashboard` folder in VSCode:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨如何使用仪表板ID删除仪表板。有关删除仪表板的文档可在[https://www.arduino.cc/reference/en/iot/api/#api-DashboardsV2-dashboardsV2Delete](https://www.arduino.cc/reference/en/iot/api/#api-DashboardsV2-dashboardsV2Delete)找到。在VSCode中打开`dashboard`文件夹下的`delete-dashboard.js`文件：
- en: '[PRE56]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'The preceding code snippet is taken from the `DeleteDashboard()` method from
    `delete-dashboard.js` file. In the `DeleteDashboard()` method we need to supply
    the `dashboard_id` and `opts` variables as parameters. `dashboard_id` is mandatory
    for the deletion process, while the `opts` variable is optional. Execute the following
    command in the Terminal:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码片段是从`delete-dashboard.js`文件中的`DeleteDashboard()`方法中提取的。在`DeleteDashboard()`方法中，我们需要将`dashboard_id`和`opts`变量作为参数提供。`dashboard_id`是删除过程所必需的，而`opts`变量是可选的。在终端中执行以下命令：
- en: '[PRE57]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: After successful execution of the script, it will print the response on the
    console indicating that the dashboard was deleted successfully.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在脚本成功执行后，它将在控制台上打印出响应，表明仪表板已成功删除。
- en: Listing dashboards
  id: totrans-259
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列出仪表板
- en: In this section, we will list all the dashboards with complete details and widgets.
    The difference between listing dashboards and showing a dashboard is that listing
    dashboards will display all the dashboards available in the Arduino IoT Cloud,
    while showing a dashboard only shows the specific dashboard properties and widgets
    related to the given dashboard ID.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将列出所有仪表板及其完整细节和组件。列出仪表板与显示仪表板之间的区别在于，列出仪表板将显示Arduino IoT Cloud中所有可用的仪表板，而显示仪表板仅显示与给定仪表板ID相关的特定仪表板属性和组件。
- en: 'The documentation for listing dashboards is available at [https://www.arduino.cc/reference/en/iot/api/#api-DashboardsV2-dashboardsV2List](https://www.arduino.cc/reference/en/iot/api/#api-DashboardsV2-dashboardsV2List).
    Open `list-dashboard.js` under the `dashboard` folder in VSCode. The following
    code snippet is taken from the `ListDashboard()` method:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 列出仪表板的文档可在[https://www.arduino.cc/reference/en/iot/api/#api-DashboardsV2-dashboardsV2List](https://www.arduino.cc/reference/en/iot/api/#api-DashboardsV2-dashboardsV2List)找到。在VSCode中打开`dashboard`文件夹下的`list-dashboard.js`文件。以下代码片段是从`ListDashboard()`方法中提取的：
- en: '[PRE58]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Execute the following command in the Terminal:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端中执行以下命令：
- en: '[PRE59]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'After successful execution of the script, it will print the response in JSON
    format containing the dashboard properties and widgets:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 在脚本成功执行后，它将以JSON格式打印出包含仪表板属性和组件的响应：
- en: '[PRE60]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: The preceding response contains all the properties related to dashboards such
    as widgets, creation date, update time, and so on. Next, we have another API endpoint
    related to showing a dashboard, which is used to display all the information regarding
    a single dashboard. The code is available in the `dashboard` folder; the execution
    of the code and checking out how it works is left to you as an independent exercise.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的响应包含与仪表板相关的所有属性，如小部件、创建日期、更新时间等。接下来，我们还有一个与显示仪表板相关的API端点，它用于显示单个仪表板的所有信息。代码位于`dashboard`文件夹中；代码的执行和检查其工作方式留给你作为独立练习。
- en: In these sub-sections, we discussed how to work programmatically with dashboards,
    including actions such as dashboard creation, updating, deletion, and showing
    the list of dashboards via the Arduino IoT Cloud Node.js SDK. In the next section,
    we will explore how we can use the Node.js SDK to fine-tune our cloud variables/properties.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些子部分中，我们讨论了如何使用Arduino IoT Cloud Node.js SDK编程方式与仪表板进行交互，包括仪表板创建、更新、删除以及通过仪表板列表显示仪表板等操作。在下一节中，我们将探讨如何使用Node.js
    SDK来微调我们的云变量/属性。
- en: Fine-tuning with the Node.js SDK – property value management
  id: totrans-269
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Node.js SDK进行微调 – 属性值管理
- en: In this section, we will look at how we can *set*/*get* cloud variable values
    using the SDK. This is very useful for performing bulk operations; for example,
    if you have 100 lights connected to the Arduino IoT Cloud, it will be difficult
    to control them all manually from a dashboard. Suppose switching one device on/off
    takes 3 seconds from the dashboard – with 100 devices this will require 300 seconds,
    a total of 5 minutes, along with the chance of human error (maybe the user misses
    one device due to bulk processing). But with the help of the SDK, we can perform
    bulk operations on Things, saving time and improving confidence in our ability
    to reach zero-error operations.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨如何使用SDK来*设置*/*获取*云变量值。这对于执行批量操作非常有用；例如，如果你有100个连接到Arduino IoT Cloud的灯，手动从仪表板控制它们将非常困难。假设从仪表板切换一个设备开关需要3秒钟
    – 对于100个设备来说，这将需要300秒，总共5分钟，还有人为错误的可能性（也许用户在批量处理中遗漏了一个设备）。但是，有了SDK的帮助，我们可以在事物上执行批量操作，节省时间并提高我们实现零错误操作的信心。
- en: Get a property value
  id: totrans-271
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取属性值
- en: 'Let’s first see how to get the last value of the cloud variable. To do this,
    we need the Thing ID and cloud variable ID. More precisely, we will get the complete
    properties of the cloud variable in JSON format here, but will only fetch `last_value`
    of the cloud variable. The relevant documentation can be found at [https://www.arduino.cc/reference/en/iot/api/#api-PropertiesV2-propertiesV2Show.](https://www.arduino.cc/reference/en/iot/api/#api-PropertiesV2-propertiesV2Show.)
    Open the `get-prop.js` file under the `getset` folder in VSCode:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先看看如何获取云变量的最后一个值。为此，我们需要设备ID和云变量ID。更确切地说，我们将在这里获取云变量的完整属性，以JSON格式呈现，但只会获取云变量的`last_value`。相关文档可以在[https://www.arduino.cc/reference/en/iot/api/#api-PropertiesV2-propertiesV2Show.](https://www.arduino.cc/reference/en/iot/api/#api-PropertiesV2-propertiesV2Show.)找到。在VSCode中打开`getset`文件夹下的`get-prop.js`文件：
- en: '[PRE61]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'The preceding code snippet was taken from the `GetProperty()` method. We have
    defined `thingid` and `propertyid` and then passed these variables to the `api.propertiesV2Show`
    method later in the snippet. After getting the response in JSON format, we only
    use the `last_value` property to display its data on the console. Run the following
    command on the Terminal:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码片段是从`GetProperty()`方法中摘取的。我们定义了`thingid`和`propertyid`，然后在代码片段的后面将这些变量传递给`api.propertiesV2Show`方法。在以JSON格式获取响应后，我们只使用`last_value`属性在控制台上显示其数据。在终端运行以下命令：
- en: '[PRE62]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: After successful execution, you will get the response with the value.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 执行成功后，你将获得包含值的响应。
- en: Set a property value
  id: totrans-277
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置属性值
- en: 'In the previous section, we discussed how to get the last value of a cloud
    variable, and in this section, we will explore how to `set`/`publish` the value
    to a cloud variable. The relevant documentation can be found at [https://www.arduino.cc/reference/en/iot/api/#api-PropertiesV2-propertiesV2Publish](https://www.arduino.cc/reference/en/iot/api/#api-PropertiesV2-propertiesV2Publish).
    Open the `set-prop.js` file under the `getset` folder in VSCode:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们讨论了如何获取云变量的最后一个值，在本节中，我们将探讨如何`设置`/`发布`值到云变量。相关文档可以在[https://www.arduino.cc/reference/en/iot/api/#api-PropertiesV2-propertiesV2Publish](https://www.arduino.cc/reference/en/iot/api/#api-PropertiesV2-propertiesV2Publish)找到。在VSCode中打开`getset`文件夹下的`set-prop.js`文件：
- en: '[PRE63]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'The preceding code snippet was taken from the `SetProperty()` method. Here,
    we provide three variables to the `api.propertiesV2Publish` method. The first
    is `thingid`, the second is `propertyid`, and the third variable contains the
    two further properties of `device_id` and `value`. Run the following command on
    the Terminal to execute the script:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段是从`SetProperty()`方法中摘取的。在这里，我们向`api.propertiesV2Publish`方法提供了三个变量。第一个是`thingid`，第二个是`propertyid`，第三个变量包含两个进一步的属性`device_id`和`value`。在终端上运行以下命令以执行脚本：
- en: '[PRE64]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: After successful execution, you will get a response indicating that the value
    has been updated successfully.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 执行成功后，你将收到一个响应，表明值已成功更新。
- en: In the section, we discussed in detail how to get/set the value of a cloud variable
    programmatically. This helps developers to fetch values and display them in their
    custom dashboards, or set the values of cloud variables to control device operations.
    Next, you have an assignment of an example project for practice, which will help
    you to refine your skills and chapter study.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们详细讨论了如何以编程方式获取/设置云变量的值。这有助于开发者获取值并在他们的自定义仪表板上显示它们，或将云变量的值设置为控制设备操作。接下来，你将有一个示例项目的练习任务，这将帮助你提高技能并深化对章节的学习。
- en: Assignment
  id: totrans-284
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 任务
- en: 'After playing with SDK, it’s now time to do some more experiments so you can
    apply your learning in new scenarios and solidify your learning. For this assignment,
    you will create a script for Thing automation with the following properties:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 在玩SDK之后，现在是时候进行更多实验，以便你可以在新的场景中应用你的学习并巩固你的知识。对于这个任务，你将创建一个具有以下属性的设备自动化脚本：
- en: Set up a method for **WeMos D1 Mini** device creation. This device belongs to
    the **ESP8266** category.
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置一个用于**WeMos D1 Mini**设备创建的方法。此设备属于**ESP8266**类别。
- en: Set up a Thing named `Sense Environment` and create a sketch for a Thing. Then,
    associate the previously created device with the Thing.
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置一个名为`Sense Environment`的设备，并为设备创建一个草图。然后，将之前创建的设备与设备关联。
- en: Create three cloud variables/properties for temperature, humidity, and air quality
    and attach these variables to the previously created Thing.
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为温度、湿度和空气质量创建三个云变量/属性，并将这些变量附加到之前创建的设备上。
- en: Create the required script in one file containing all the methods, where we
    just provide the Thing name and it will automatically set up the device, Thing,
    and sketch, handle device association with the Thing, and take care of variable
    creation. Successfully completing this task will teach you to automate workflows
    and processes efficiently and effectively.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个文件中创建所需的脚本，包含所有方法，我们只需提供设备名称，它将自动设置设备、设备和草图，处理设备与设备的关联，并负责变量的创建。成功完成这项任务将教会你高效有效地自动化工作流程和流程。
- en: Summary
  id: totrans-290
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered API endpoints, SDKs, and the types of SDK platforms
    available to us on the Arduino IoT Cloud. We also learned how to test APIs with
    Postman. Next, we explored the Node.js SDK by performing different types of operations,
    particularly CRUD operations, on devices, Things, properties, and dashboards.
    Finally, we saw how to get and set the value of a cloud variable.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了API端点、SDK以及我们在Arduino IoT Cloud上可用的SDK平台类型。我们还学习了如何使用Postman测试API。接下来，我们通过在设备、设备、属性和仪表板上执行不同类型的操作，特别是CRUD操作，来探索Node.js
    SDK。最后，我们看到了如何获取和设置云变量的值。
- en: This chapter was specially designed for backend developers seeking to use the
    Arduino IoT Cloud as a foundation and wanting to develop a custom frontend for
    their solution, which is possible when you know how to interact with the Arduino
    IoT Cloud programmatically using the Node.js SDK. Likewise, the ability to create
    custom services allows us to integrate with third party cloud services and applications.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 这章专门为寻求使用Arduino IoT Cloud作为基础并希望为其解决方案开发自定义前端的后端开发者设计。当你知道如何使用Node.js SDK以编程方式与Arduino
    IoT Cloud交互时，这成为可能。同样，创建自定义服务的功能使我们能够集成第三方云服务和应用程序。
- en: The next chapter will be more interesting as we are going to dive into smart
    agriculture, implementation a project where you will learn how to measure the
    soil moisture, soil temperature, and outdoor temperature and humidity. We will
    design a device that will allow us to monitor four different crops/plants. You
    could use this project to monitor your home plants as well as helping your friends
    working in the field of agriculture.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将会更加有趣，因为我们将要深入探讨智能农业，实施一个项目，在这个项目中你将学习如何测量土壤湿度、土壤温度和室外温度与湿度。我们将设计一个设备，使我们能够监控四种不同的作物/植物。你也可以使用这个项目来监控你家的植物，同时帮助那些在农业领域工作的朋友。
