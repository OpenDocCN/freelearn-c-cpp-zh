- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Working with the Arduino IoT Cloud SDK and JavaScript
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Every platform provides **APIs** and **SDKs** to make their product compatible
    with other platforms, and these endpoints are used by developers to create new
    functionalities to solve real-world issues. Likewise, the **Arduino IoT Cloud**
    comes with its own built-in features and functionalities, but there are also three
    different ways to extend the Arduino IoT Cloud platform’s functionality or make
    it compatible with other tools and services: namely, **REST APIs**, **SDKs**,
    and **webhooks**.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will talk about APIs and SDKs and how they work. Specifically,
    we will use the **Node.js SDK** to illustrate different coding exercises. This
    chapter will cover **Create, Read, Update, and Delete** (**CRUD**) operations
    for devices, Things, properties (aka variables), and dashboards. Beyond that,
    we will explore some other features such as how to set/get values of properties.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you will understand how to interact with the Arduino
    IoT Cloud platform via an API or the Node.js SDK to create custom dashboards,
    interface with the data using other tools/apps, and use the SDK for bulk device
    creation and management.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: Demystifying the Arduino IoT Cloud SDK – functionality and operation
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Securing access – unveiling API keys and authentication
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Step-by-step – installing the Arduino Node.js SDK client
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Initial exploration – test drive using Postman
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Diverse platform compatibility – SDKs for various environments
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interacting with devices – hands-on with the Node.js SDK
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Engaging with Things – Node.js SDK implementation guide
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring properties – Node.js SDK interaction techniques
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Crafting dashboards – unleashing potential via the Node.js SDK
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fine-tuning with the Node.js SDK – property value management
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are no specific hardware requirements for this chapter as we are focusing
    on the SDK and will work through different coding exercises to perform different
    operations on the Arduino IoT Cloud platform using the Node.js SDK. To follow
    along with the coding and testing exercises, the following software is required:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: Node.js
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Node.js Arduino IoT Cloud** **module** installed
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **VSCode editor**
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Postman**'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An Arduino IoT Cloud account
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Postman will be used for **cURL testing** and authentication, which will help
    other developers when doing request and response testing. For SDK coding, we will
    use Node.js and the VSCode editor. The code for this chapter is available from
    the book’s official GitHub repository at [https://github.com/PacktPublishing/Arduino-IoT-Cloud-for-Developers](https://github.com/PacktPublishing/Arduino-IoT-Cloud-for-Developers).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Demystifying the Arduino IoT Cloud SDK – functionality and operation
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Arduino IoT Cloud offers a range of features, but there are inevitably situations
    where developers need to integrate their tools/systems/apps with the Arduino IoT
    Cloud for improved operations management and control. To cater to these requirements,
    the Arduino IoT Cloud provides different techniques and tools that can be used
    by developers and organizations to extend the product’s functionality and provide
    solutions for real-world issues.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: As shown in the following diagram, the Arduino IoT Cloud provides three main
    interfaces to developers to help meet their requirements. First is webhooks, which
    we used in the previous chapter to send the data from an Arduino IoT Cloud Thing
    to a custom **endpoint** or any well-known platform including **Zapier** or **IFTTT**
    for further integration. Following webhooks, we have the REST API and SDK, both
    of which are very handy features for developers to mold the system according to
    their requirements.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.1 – Arduino IoT Cloud interface](img/B19752_08_01.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
- en: Figure 8.1 – Arduino IoT Cloud interface
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to focus specifically on the Node.js SDK. However,
    it’s important first to give a proper overview of the Arduino IoT Cloud functionalities
    that can help developers make better decisions during integration with other platforms.
    The Arduino team has created REST API endpoints for different operations such
    as *create*, *delete*, *list*, *update*, and so on, and placed them into different
    categories according to the main terms used on the Arduino IoT Cloud platform,
    such as Thing, device, property, and so on. The developer can send a request to
    these endpoints via different methods such as `PUT`, `DELETE`, or `GET` with different
    parameters, and in return they will get their desired response from the Arduino
    IoT Cloud in JSON format that they can then use for further product development.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: 'REST APIs are like raw material for developers in that they need to process
    them by writing code in their preferred language and sending and receiving requests
    and responses using the **cURL library**. On the other hand, the Arduino team
    offers an SDK, which is basically a programming wrapper for REST API endpoints.
    This allows us to save time as we get access to a lot of methods and sample code
    to accomplish our tasks just using library methods. At the time of writing, the
    Arduino team has developed SDKs for three programming platforms: Node.js, **Python**,
    and **GoLang**.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will work with the Node.js SDK specifically to create different
    scripts to perform CRUD operations on Things, devices, properties, and dashboards.
    We will also develop scripts that allow you to *fetch*/*set* the latest values
    of Thing properties and much more. Overall, this chapter will be fun for developers,
    as we are going to explore different techniques and methods that will help us
    extend IoT operations from small scale to enterprise level.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we have discussed what type of features the Arduino IoT Cloud
    API/SDKs provide to developers. In the next section, we will talk about API keys
    for authentication.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: Securing access – unveiling API keys and authentication
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before heading into the meat of the chapter, we first need to talk about the
    authentication mechanism of the platform. The Arduino IoT Cloud uses a `requests`/`responses`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: Before we get started with the SDK installation and testing with Postman, we
    need to set up the API in the Arduino Cloud that will provide us the Client ID
    and Secret. In older versions of the interface, the API options are under the
    **Integrations** tab, but have now moved to the Arduino Cloud, which is available
    at [https://cloud.arduino.cc/home/](https://cloud.arduino.cc/home/).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: 'After visiting the Integration page click on **API Keys** and you will be taken
    to the API page. Click on **CREATE API KEY**. A popup will appear; provide a name
    for the API and click on the **CONTINUE** button. The wizard that appears will
    take a few seconds to generate the keys and then a new popup will appear displaying
    the keys:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.2 – API keys](img/B19752_08_02.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
- en: Figure 8.2 – API keys
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: Copy the **Client ID** and **Client Secret** values by clicking on the copy
    icons – never try to copy by manual selection as the **Client Secret** is very
    long, so clicking the copy icon is the best option. Save the both Client ID and
    Client Secret in a secure location and then click the checkbox confirming that
    you have saved your keys. Lastly, click on **DONE** and you will see your API
    key in the panel – it’s now ready for use.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: A single API key is used to give access to all the Things and their variables.
    Having access to all infrastructure with just one API key is handy, instead of
    having to create separate API keys for each Thing, but you must take care of your
    key! This is a big security risk, as if you were to lose the key, a hacker could
    gain access to your whole account.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we have set up and created API authentication keys consisting
    of a Client ID and Client Secret. This section is most important, as without these
    keys we can’t use any APIs. In the next section, we are going to try our first
    API call using the Postman tool.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: Initial exploration – test drive using Postman
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before diving into the SDK, we will try the **naked REST APIs** endpoints using
    Postman, a tool that helps developers to debug *requests*/*responses* for other
    programming-language platforms not available as SDKs. Postman is a well-known
    tool among backend developers and is used to expose API requests/responses without
    any coding. Postman also helps developers to analyze responses via a **graphical
    user** **interface** (**GUI**).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: 'Download Postman from [https://www.postman.com/](https://www.postman.com/),
    choosing the correct version for your operating system. Before getting to work
    with Postman, firstly create a new workspace for the Arduino IoT Cloud to put
    all the requests in a separate group. To do this, click on **Workspaces** and
    then **Create Workspace**:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.3 – Postman workspace](img/B19752_08_03.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
- en: Figure 8.3 – Postman workspace
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: 'A new window will be opened: provide a workspace name and description and set
    the visibility policy according to your requirements. After creating the new workspace,
    navigate to **File** > **New…** and select **HTTP Request**. Before sending any
    request to the Arduino IoT Cloud, an authentication token is mandatory. Refer
    to the following screenshot: click on the **Authorization** tab and select **OAuth
    2.0** from the **Type** dropdown. Scroll down the **Authorization** page to find
    the **Configure New Token** section and click on the **Configuration Options**
    tab under this section.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.4 – Authorization Configuration Options](img/B19752_08_04.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
- en: Figure 8.4 – Authorization Configuration Options
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: We need to provide three things under **Configuration Options**. Firstly, add
    the [https://api2.arduino.cc/iot/v1/clients/token](https://api2.arduino.cc/iot/v1/clients/token)
    URL to the **Access Token URL** field, then insert the values that we generated
    previously in the Arduino IoT Cloud API into the **Client ID** and **Client Secret**
    fields. Lastly, select **Send client credentials in body** from the **Client Authentication**
    dropdown. Now click on the **Advanced Options** tab, where we will set the API
    audience who will receive the requests.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 8**.5* shows the **Advanced Options** where we need to provide the
    Arduino IoT Cloud authentication URL with which we can authenticate and authorize
    requests.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.5 – Authorization Advanced Options](img/B19752_08_05.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
- en: Figure 8.5 – Authorization Advanced Options
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: Add the [https://api2.arduino.cc/iot](https://api2.arduino.cc/iot) URL into
    the **Audience** field. After setting up the configuration, click the **Get new
    Access Token** button. It will return either an error or a success message. If
    there is any error, then please repeat all the steps one by one, ensuring the
    configuration is as described previously. If you are successful, then click on
    **Proceed** and you will get your token for authentication.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: After getting the authentication token, it’s time to do some experiments. The
    Arduino team has documented all the endpoints with cURL and the Node.js SDK samples
    in different categories, available at [https://www.arduino.cc/reference/en/iot/api/](https://www.arduino.cc/reference/en/iot/api/).
    So here, we want to see the list of cloud variables/properties for specific Thing.
    Open up the preceding API documentation URL, find the `https://api2.arduino.cc/iot/v2/things/{id}/properties?show_deleted=`.
    Here we need to replace `{id}` in the URL with the specific Thing ID (*Figure
    8**.6*). The Thing ID is available under the Thing’s `true` to the end of the
    URL just after `show_deleted`. After adding all the required data to the URL,
    it will look something like [https://api2.arduino.cc/iot/v2/things/8aee742e-4492-423d-9f19-79fec856b917/properties?show_deleted=true](https://api2.arduino.cc/iot/v2/things/8aee742e-4492-423d-9f19-79fec856b917/properties?show_deleted=true).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on **Send** and you will receive a response from the Arduino IoT Cloud
    in JSON format containing all the cloud variables properties of the Thing, including
    the property ID, name, type, last value of the cloud variable, and so on:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.6 – Postman request response](img/B19752_08_06.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
- en: Figure 8.6 – Postman request response
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: The preceding screenshot shows the response in Postman. You can convert the
    response into plain text as well as other formats including **XHTML**, **HTML**,
    and so on, but Postman has excellent visualization functionality for **JSON**
    data responses. This way, developers can easily understand and tweak the nature
    of the response and prepare the scripts according to their data structure. It
    also helps developers to choose specific content from the response more quickly,
    reducing the time and effort required.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we used Postman to generate our first request to the Arduino
    IoT Cloud. We began by configuring the API authentication keys in Postman and
    then requested the list of cloud variables/properties of Thing. The Arduino IoT
    Cloud successfully returned the response with all the required data in JSON format.
    In the following section, we will examine the SDKs available for different platforms.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: Diverse platform compatibility – SDKs for various environments
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After testing *request*/*response* with Postman, it’s time to explore the SDKs
    available for the Arduino IoT Cloud. Earlier I mentioned the Arduino Team has
    developed official SDKs for three programming platforms, Node.js, Python, and
    GoLang.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: Node.js is a very well-known language among backend developers and is used by
    both web and mobile developers. So, if you are planning to create a mobile or
    web app for Arduino IoT Cloud automation with custom visualizations, then Node.js
    is the best language, providing a wide variety of libraries for HTTP services.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, Python is also a very well-known and rapidly growing language
    among web, IoT, and **AI**/**ML** developers. Python seems to be trending toward
    AI/ML, and IoT is very close as a field to AI/ML. If you are planning to develop
    a solution focused on AI/ML, such as **predictive maintenance**, **time series
    analysis**, or predictions then the Python SDK is the best choice to interact
    with the Arduino IoT Cloud.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: GoLang is the last platform for which an SDK was developed by the Arduino team.
    GoLang was developed by Google and follows the **C-type syntax**. The GoLang platform
    is good for operating system and network/API service development. If you are planning
    to maintain a high-performance system with the Arduino IoT Cloud or planning to
    run concurrent operations, then GoLang is the better choice.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: We discussed here the three different platforms and their specialized domains
    of application. Node.js is best for **Web APIs**, Python is good for machine learning,
    and GoLang is an awesome choice for high-performance systems. You can either choose
    one SDK platform for your development or consume all the SDKs depending on your
    project requirements.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will start our journey with the Node.js SDK, beginning
    by installing the official Arduino IoT Cloud Node.js SDK on our machines.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: Step-by-step – installing the Arduino Node.js SDK client
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'From this point, we are going to use the Node.js SDK for our exercises and
    experiments. Before moving to the practical exercises, we need to first install
    the Arduino IoT Cloud package for Node.js. Download and install Node.js from [https://nodejs.org/](https://nodejs.org/).
    After the installation of Node.js is complete, open up the Windows/Mac/Linux **Terminal**
    and navigate to the directory where you will set up your coding workspaces using
    **VSCode**:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Type the two preceding commands in the **Terminal** and wait for the installation
    to complete. After a successful installation, open up VSCode and add the folder
    (where you have installed the Node.js Arduino IoT Cloud SDK) to the workspace
    where you installed the Arduino IoT Cloud and request-promise modules.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the book’s official GitHub repository and download all the code
    from this chapter’s folder. Copy the files into the VSCode `Workspace` folder
    and extract the downloaded `.zip` file. Navigate to the `start` folder and open
    up the `main.js` file in VSCode.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: 'Here we have two methods, `getToken()` and `ThingProperty()`. The `getToken()`
    method will be same across the coding exercises and will be used to fetch the
    authentication token from the Arduino IoT Cloud on the basis of the Client ID
    and Client Secret:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The preceding code snippet is from the `getToken()` method. Insert your Client
    ID in the `client_id` variable and your Client Secret in the `client_secret` variable.
    Likewise, insert your `Thing ID` and `Property ID` in the following code snippet
    under the `ThingProperty()` method. You can get your Thing ID by navigating to
    Thing and then the **Metadata** tab in the Arduino IoT Cloud. The property ID
    can be found by clicking on the cloud variable on the Thing page in the Arduino
    IoT Cloud:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Open the `main.js` code and provide a response in the console:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You will receive the following response in the console if everything works
    fine:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If you receive a `401 error`, it means your Client ID and/or Client Secret are
    not correct. If a `404 error` is returned, it means you are not using the proper
    method to fetch property data. If you get a `500 error`, it means the server is
    down or there is a network blockage for the Arduino IoT Cloud from your ISP.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: In the *First try with Postman* section, we discussed how to use Arduino IoT
    Cloud endpoints with Postman for request/response tasks as well as installing
    the Node.js module for the cloud and testing it with an example where we fetched
    the last value of the Thing cloud variable/property.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: Building on this foundation, we are going to start a new journey where we will
    play around with the Arduino IoT Cloud. Firstly, we will start with devices. In
    the next section, we will create, update, delete, list, and view a specific device.
    Later in the chapter, we will do the same for Things, properties (also known as
    cloud variables), and dashboards.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: Interacting with devices – hands-on with the Node.js SDK
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we are going to get hands-on and practical with devices. We
    will perform CRUD operations on a device as well as listing all the devices and
    showing all the parameters of specific devices. Open up VSCode and navigate to
    this chapter’s example code. Then click on the `device` folder: here you can find
    all the code related to device operations.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: Creating a device
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Firstly, we will start with device creation. The documentation on device creation
    can be found at [https://www.arduino.cc/reference/en/iot/api/#api-DevicesV2-devicesV2Create](https://www.arduino.cc/reference/en/iot/api/#api-DevicesV2-devicesV2Create).
    Open `create-device.js` under the `device` folder in VSCode.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two methods in the code: one is `getToken()`, which is the same method
    as in all our coding exercises and helps us to fetch the authentication token
    for requests. The second method is `CreateDevice()`, which is responsible for
    device creation. Consulting the documentation, we can see we need to initiate
    the `api` variable with the `AiotApi.DevicesV2Api()` object, which is related
    to devices:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`api.devicesV2Create` is the method responsible for device creation and takes
    two parameters as input. `DeviceProperties` covers things such as the device name,
    type, and `name` first – this could be anything you fancy, but avoid using special
    characters. Next, we need to provide a choice for `connection_type`, such as Wi-Fi,
    GSM, LoRa WAN, and so on. All available types are provided by the documentation.
    For `fqbn`, we need to provide the details of the development board. Taking the
    `esp32:esp32:XIAO_ESP32C3`.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '`options` are optional, so I left it blank, but you can provide the `X-Organization`
    value according to your requirements. Both arrays are passed to the `api.devicesV2Create`
    method, which will return the response. The `util.inspect` method is used to display
    the JSON response on the console with proper formatting. Type the following command
    to execute the `create-device.js` program:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'After successful execution of the script, it will print a response like the
    following:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the response, you will get your device ID, which will be used later in the
    chapter for Thing creation when we associate the device with the Thing. The remaining
    properties are the same as already covered in the code.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: If you are unable to get the correct FQBN, then add the device manually from
    the dashboard, finding and clicking on the device from the dropdown. This will
    give you the `fqbn`, `type`, and `connection_type` details. You can use these
    details later in your Node.js script for automated creation of devices.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: Updating a device
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we are going to explore how we can update a device using the
    device ID. Let’s suppose we mistakenly added a device with the wrong FQBN and
    name. We will update both properties using the device ID. The documentation on
    updating devices is available at [https://www.arduino.cc/reference/en/iot/api/#api-DevicesV2-devicesV2Update](https://www.arduino.cc/reference/en/iot/api/#api-DevicesV2-devicesV2Update).
    Open the `update-device.js` file under the `device` folder in VSCode:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The preceding code is almost the same as the `create-device` code. Here we
    have one extra variable, `DeviceID`, with which we will update the specific device.
    The rest of the code has the same device properties and options as previously.
    Now, fill in the correct `fqbn` and `name` values in the `DeviceProperties` variable.
    Lastly, we call the `api.devicesV2Update()` method. Execute the following command
    in the Terminal:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'After successful execution of the script, it will print a response like the
    following:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As we can see, after our update, the response sends back the new content. We
    provided a change of name and FQBN and it is reflected successfully in the response.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: Deleting a device
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we are going to explore how we can delete a device using the
    device ID. The documentation for deleting devices is available at [https://www.arduino.cc/reference/en/iot/api/#api-DevicesV2-devicesV2Delete](https://www.arduino.cc/reference/en/iot/api/#api-DevicesV2-devicesV2Delete).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `delete-device.js` file under the `device` folder in VSCode:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The preceding code snippet is taken from the `DeleteDevice()` method. In this
    method, we need to supply `DeviceID` and options variables as parameters. `DeviceID`
    is mandatory for the deletion process while the `options` variable is not. Execute
    the following command in the Terminal:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: After successful execution of the script, it will print a response to the console
    reporting that the device has been deleted successfully.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: Listing devices
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we will list all the devices. Note that there is a difference
    between listing devices and showing devices: *listing* devices means displaying
    all the devices with their properties, while *showing* a device only returns a
    specific device’s properties based on the device ID.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: 'The documentation on listing devices is available at [https://www.arduino.cc/reference/en/iot/api/#api-DevicesV2-devicesV2List](https://www.arduino.cc/reference/en/iot/api/#api-DevicesV2-devicesV2List).
    Open the `list-device.js` file under the `device` folder in VSCode. The following
    code snippet is taken from the `ListDevice()` method from the `list-device.js`
    file:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Here we need to provide the criteria that will be used to filter out the devices
    and return the desired response. In the current code, we only mention one parameter,
    `''acrossUserIds''`, which is `true` to fetch all types of devices. But if required,
    you can filter the devices listed on the basis of `tags`, `serial`, and `X-Organization`.
    Execute the following command in the Terminal:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'After successful execution of the script, it will print a response in JSON
    format with the device properties, which will clog up the **Terminal** console
    with extensive output. I modified the code to only display the device ID and device
    name on the console:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In the preceding code, we are displaying two parameters on the console, but
    you can choose whichever and however many you want by specifying their names in
    the for loop. Using this, we can send the output in JSON format to a web/mobile
    client, which will display the information either in a list box or in menus.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: Showing a device
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is the second-to-last subsection of the *Interacting with devices – hands-on
    with the Node.js SDK* section. Here we will fetch all the properties of a specific
    device by providing the device ID. The documentation on showing devices is available
    at [https://www.arduino.cc/reference/en/iot/api/#api-DevicesV2-devicesV2Show](https://www.arduino.cc/reference/en/iot/api/#api-DevicesV2-devicesV2Show).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `show-device.js` file under the `device` folder in VSCode. The following
    code snippet is taken from the `ShowDevice()` method from the `show-device.js`
    file:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The `devicesV2Show()` method only takes two parameters: the first one is the
    `DeviceID` and the second is `options`, which includes `X-Organization`. `DeviceID`
    is mandatory to fetch a proper response while the `opts` variable is optional,
    hence we pass this variable as empty. Execute the following command in the Terminal:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'After successful execution of the script, it will print the response in JSON
    format with the device properties as well as the details of any cloud variables
    if any associated variable is present:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The preceding code is the edited response of the script regarding device properties,
    which includes all the details of the given device such as last activity, the
    cloud variables count, the Thing ID associated with the device, webhook details
    (if active), sketch ID, and so on.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: In this sub-section, we have explored how to get all the devices list from the
    Arduino IoT Cloud using the Node.js SDK. Next, let’s explore how to get the list
    of cloud variables/properties associated with the device.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: Device properties/variables
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here, we will fetch all the cloud variable details for a specific device by
    providing the device ID. The documentation on showing devices is available at
    [https://www.arduino.cc/reference/en/iot/api/#api-DevicesV2-devicesV2GetProperties](https://www.arduino.cc/reference/en/iot/api/#api-DevicesV2-devicesV2GetProperties).
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin, open the `properties-device.js` file under the `device` folder in
    VSCode. The following code snippet is taken from the `ListPropDevice()` method
    in the `properties-device.js` file:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The `devicesV2GetProperties()` method only takes two parameters: the first
    one is device ID and the second is options, which includes `showDeleted` and `X-Organization`.
    `DeviceID` is mandatory to fetch a proper response, while the `opts` variable
    is optional, so we leave this variable empty when we pass it. Execute the following
    command in the Terminal:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'After successful execution of the script, it will print a response in JSON
    format containing the cloud variable details associated with that particular device
    ID:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The preceding response is the edited response of the script regarding the device
    cloud variables, including `variable_name`, `type`, `permission`, `thing_id`,
    `update_strategy`, and so on. We have now seen how to get the cloud variable details,
    and in the next section we’ll move on to cover Things.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: Engaging with Things – Node.js SDK implementation guide
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Thing is one of the most important elements in the Arduino IoT Cloud, and
    acts as defined container holding all of its ingredients such as cloud variables,
    the device, a sketch for the device, and the device’s network configuration. In
    this section, we will try a range of different coding exercises to get a feel
    for Thing CRUD operations.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Thing
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Firstly, we will start with Thing creation. The relevant documentation can be
    found at [https://www.arduino.cc/reference/en/iot/api/#api-ThingsV2-thingsV2Createe](https://www.arduino.cc/reference/en/iot/api/#api-ThingsV2-thingsV2Createe).
    Open the `create-thing.js` file under the `thing` folder in VSCode.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two methods in this code: one is `getToken()`, which is the same
    method as in all our coding exercises and helps us to fetch an authentication
    token for our requests. The second method is `CreateThing()`, which is responsible
    for Thing creation. Referring to the documentation, we can see that we need to
    initiate the `api` variable with the `AiotApi.ThingsV2Api()` object, which relates
    to the Arduino IoT Cloud Thing. This object is responsible for performing operations
    on the Thing:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '`api.thingsV2Create` is the method responsible for Thing creation and takes
    two parameters as input: `name` and `opts`. Firstly, we start with `name`, which
    can be anything you like, but make sure to avoid special characters. For now,
    we provide just the Thing name in the variable, but in the upcoming update section,
    we will additionally pass the time zone and device ID parameters.'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: '`opts` here is optional, hence I left it blank, but you can provide the `X-Organization`
    value if required. Both variables are passed to the `api.thingsV2Create` method,
    which will return the response. The `util.inspect` method is used to display the
    JSON response on the console with proper formatting. Type the following command
    to execute the `create-device.js` script:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'After successful execution of the script, it will print a response as follows:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In the response, you will get your Thing ID, which will be used shortly in the
    following Thing update/delete operations – so make sure to paste this Thing ID
    into a Notepad file or something similar. Also returned are the time zone, properties
    count, and webhook status.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: Updating a Thing
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we are going to explore how to update a Thing using the Thing
    ID. Let’s suppose we mistakenly added the Thing without setting the proper time
    zone and without device association. In this scenario, we have the option to update
    the Thing with new properties. The documentation covering updating devices is
    available at [https://www.arduino.cc/reference/en/iot/api/#api-ThingsV2-thingsV2Update](https://www.arduino.cc/reference/en/iot/api/#api-ThingsV2-thingsV2Update).
    Open the `update-thing.js` file under the `device` folder in VSCode:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The preceding code is similar to the `create-thing` code. Here we have one
    extra variable, `id`, which will help us to update the specific Thing. We also
    have the `timezone`, `device_id`, and `name` in the `thingupdate` variable. Lastly,
    we call the `api.thingsV2Update()` method. Execute the following command in the
    Terminal:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'After successful execution of the script, it will print a response like the
    following:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: After our update, the response will return the new content. We provided new
    values for `name` and `device_id`, along with the correct time zone. Everything
    is updated successfully and reflected in the response.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Thing sketch
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With Thing creation out of the way, we now need to create a sketch for the Thing.
    The relevant documentation can be found at [https://www.arduino.cc/reference/en/iot/api/#api-ThingsV2-thingsV2CreateSketch](https://www.arduino.cc/reference/en/iot/api/#api-ThingsV2-thingsV2CreateSketch).
    Open the `create-sketch-thing.js` file under the `thing` folder in VSCode.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two methods in the code: one is `getToken()`, which is the same method
    as used in all our coding exercises and fetches the authentication token for our
    requests. The second method is `CreateSketch()`, which handles creating the sketch
    for our specific Thing:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '`api.thingsV2CreateSketch` is the method responsible for Thing sketch creation
    and takes three parameters as input. The Thing ID is the first parameter; the
    second is the sketch version. `opts` is optional, so I left it blank, but you
    can provide the `X-Organization` value according to your requirements. All variables
    are passed to the `api.thingsV2CreateSketch` method, which will return the response.
    The `util.inspect` method is used to display the JSON response on the console
    with proper formatting. Type the following command to execute the `create-device.js`
    script:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'After successful execution of the script, it will print the following response:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: In the response, you will see your Thing ID along with some other properties
    indicating that the sketch for the given Thing has been created successfully.
    You can also verify the sketch by navigating to the given Thing on the Arduino
    IoT Cloud.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: Before sketch creation, it’s important to associate a device with the Thing.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we created the Sketch for our Thing as the Arduino IoT Cloud
    will not do this by default. As a result, it’s mandatory to create a Sketch after
    creating a Thing in the Arduino IoT Cloud. Next we are going to explore how we
    can delete a Thing using the Arduino IoT Cloud API.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: Deleting a Thing
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we are going to explore how we can delete a Thing using the
    Thing ID. The documentation covering Thing deletion is available at [https://www.arduino.cc/reference/en/iot/api/#api-ThingsV2-thingsV2Delete](https://www.arduino.cc/reference/en/iot/api/#api-ThingsV2-thingsV2Delete).
    Open the `delete-thing.js` file under the `thing` folder in VSCode:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The preceding code snippet is taken from the `DeleteThing()` method. In the
    `DeleteThing()` method, we need to supply the `id` (Thing ID) and `opts` variables
    as parameters. `id` (Thing ID) is mandatory for the deletion process, while the
    `opts` variable is not. Execute the following command in the Terminal:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: After successful execution of the script, it will print a response on the console
    indicating that the device was deleted successfully.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: Listing Things
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we will list all the Things. Note that there is a difference
    between *listing* Things and *showing* a Thing: listing Things will display all
    the Things with their properties, while showing a Thing only shows the specific
    Thing properties related to a given Thing ID.'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: 'The relevant documentation on listing Things is available at [https://www.arduino.cc/reference/en/iot/api/#api-ThingsV2-thingsV2List](https://www.arduino.cc/reference/en/iot/api/#api-ThingsV2-thingsV2List).
    Open the `list-thing.js` file under the `thing` folder in VSCode. The following
    code snippet is taken from the `ListThing()` method:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Here we need to provide criteria that will be used to filter out the Things
    and return the response. In the current code, we have provided only one parameter,
    `''acrossUserIds''`, which is `true` and so will fetch all types of Things. But
    you can also filter Things on the basis of tags, IDs, X-Organization, and so on.
    Execute the following command in the Terminal:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'After successful execution of the script, it will print the response in JSON
    format with the Thing properties, which will fill the console with an extensive
    output. I modified the code to only display the Thing ID and Thing name on the
    console:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: As can be seen in the preceding output, I am only displaying two parameters
    on the console but you can choose whichever parameters you would like to be displayed
    by specifying their names in the for loop. This way we can send the output in
    JSON format to a web/mobile client where the information will be displayed in
    either a list box or in menus.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: Showing a Thing
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is the last subsection of the *Engaging with things – Node.js SDK implementation
    guide* section. Here we will fetch all the properties regarding a specific Thing
    by providing the Thing ID. The documentation covering showing Things is available
    at [https://www.arduino.cc/reference/en/iot/api/#api-ThingsV2-thingsV2Show](https://www.arduino.cc/reference/en/iot/api/#api-ThingsV2-thingsV2Show).
    Open the `show-thing.js` file under the `thing` folder in VSCode. The following
    code snippet is taken from the `ShowThing()` method:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The `thingsV2Show()` method only takes two parameters: the first one is the
    `thingid` and the second is `opts`, which include `X-Organization`. `thingid`
    is mandatory to fetch a proper response, while the `opts` variable is not compulsory,
    hence I passed this variable empty. Execute the following command in the Terminal:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'After successful execution of the script, it will print the response in JSON
    format containing the device properties as well as the details of cloud variables,
    if any associated variable is present:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The preceding code snippet shows an edited section from the output response
    regarding the Thing properties, which includes all the details of the Thing, the
    device properties, cloud variables such as last value, webhook details (if active),
    the sketch ID, and so on.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we explored how we can get the complete details of a specific
    Arduino IoT Cloud Thing using the Thing ID in JSON format. Next, we will start
    playing with cloud variables/properties.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: Exploring properties – Node.js SDK interaction techniques
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Properties**, also called **cloud variables**, are one of the most important
    ingredients for Things in the Arduino IoT Cloud, responsible for storage of sensor
    data from the device to the cloud or vice versa. In this section, we will explore
    how to create, update, delete, and list cloud variables using the Node.js SDK.'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: Creating a property
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Firstly, we will start with property creation. The property creation documentation
    can be found at [https://www.arduino.cc/reference/en/iot/api/#api-PropertiesV2-propertiesV2Create](https://www.arduino.cc/reference/en/iot/api/#api-PropertiesV2-propertiesV2Create).
    Open the `create-property.js` file under the `properties` folder in VSCode.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two methods in the code: one is `getToken()`, which is the same method
    used in all our coding exercises to fetch the authentication token for our requests.
    The second method is `CreateProperty()`, which handles cloud variable creation.
    Consulting the documentation, we can see that we need to initiate the `api` variable
    with `AiotApi`, the `PropertiesV2Api()` object, which is related to properties:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '`api.propertiesV2Create` is the method responsible for property creation and
    takes two parameters as input. One is the Thing ID and the other variable contains
    mandatory details regarding the cloud variable. The Thing ID is simple and easily
    fetchable from the Thing metadata, but cloud variables have a variety of different
    parameters including `type`, `permission`, and `update_strategy`, available on
    the official documentation page (the URL was provided at the start of this section).
    Both variables are passed to the `api.devicesV2Create` method, which returns the
    response. The `util.inspect` method is used to display the JSON response with
    proper formatting on the console. Type the following command to execute the `create-device.js`
    script:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'After successful execution of the script, it will print the following response:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: In the response, you will get your cloud variable ID, creation date, and update
    date, along with other details already mentioned during our cloud variable creation
    exercise.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: Updating a property
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we are going to explore how we can update a cloud variable
    using the cloud variable ID. Suppose we mistakenly added a cloud variable with
    the wrong data type and some other parameters – in the event of this scenario,
    we have the option to update it. The documentation covering updating properties
    is available at [https://www.arduino.cc/reference/en/iot/api/#api-PropertiesV2-propertiesV2Update](https://www.arduino.cc/reference/en/iot/api/#api-PropertiesV2-propertiesV2Update).
    Open the `update-property.js` file under the `property` folder in VSCode:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The preceding code is very similar to the `create-property` code. Here we have
    one extra variable, `property_id`, used to update the given property. Besides
    that, we have the same cloud variable properties with their updated content. Lastly,
    we call the `api.propertiesV2Update()` method. Execute the following command in
    the Terminal:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'After successful execution of the script, it will print a response something
    like the following:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: After the update, the response will return the new content. We provided updated
    information for the name, type, and variable name and this is reflected successfully
    in the response.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: Deleting a property
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we are going to explore how to delete a property using the
    Thing ID and property ID. The documentation covering deleting a property is available
    at [https://www.arduino.cc/reference/en/iot/api/#api-PropertiesV2-propertiesV2Delete](https://www.arduino.cc/reference/en/iot/api/#api-PropertiesV2-propertiesV2Delete).
    Open the `delete-property.js` file under the `property` folder in VSCode:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The preceding code snippet is taken from the `DeleteProperty()` method from
    `delete-property.js` file. In the `DeleteProperty()` method we need to supply
    the `thing_ID`, `property_id`, and `options` variables as parameters. `thing_id`
    and `property_id` are both mandatory for the deletion process while the `options`
    variable is optional. Execute the following command in the Terminal:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: After successful execution of the script, it will print a response on the console
    reading that the property has been deleted successfully.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: Listing properties
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will list all the properties for a given Thing using the
    Thing ID. As previously outlined with devices and Things, there is a difference
    between *listing* properties and *showing* a property. Listing properties means
    displaying all the cloud variables of a Thing, while showing a property only shows
    the specific cloud variable properties related to the given Thing ID and property
    ID.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: 'The documentation on listing properties is available at [https://www.arduino.cc/reference/en/iot/api/#api-PropertiesV2-propertiesV2List](https://www.arduino.cc/reference/en/iot/api/#api-PropertiesV2-propertiesV2List).
    Open the `list-property.js` file under the `property` folder in VSCode. The following
    code snippet is taken from the `ListProperty()` method:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Here we only need to provide the Thing ID and options to get a complete list
    of cloud variables associated with the Thing. Execute the following command in
    the Terminal:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'After successful execution of the script, it will print the response in JSON
    format with the cloud variable’s properties. I chose a Thing that only has a single
    cloud variable:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: The preceding response contains all the values related to the cloud variable,
    such as last value, updated time, and so on. If you want to fetch the last value
    of a cloud variable then this method could be used in your application to do so.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: Next, we have another API endpoint related to showing the properties of a single
    cloud variable. The code is available in the `property` folder, and the execution
    of the code along with checking out how it works is left to you as an exercise.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we discussed in depth how to get the complete details of a
    cloud variable/property in JSON format using the Arduino IoT Cloud API, which
    provides lot of data including `last_value` and `value_update_at`. In the next
    section, we will start working with dashboards and learn how to perform operations
    on them using the Node.js SDK.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: Crafting dashboards – unleashing potential via the Node.js SDK
  id: totrans-234
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dashboards are the most important ingredient in the Arduino IoT Cloud pertaining
    to **data visualization**. In the SDK, we have dashboard-specific methods to perform
    CRUD operations on dashboards, as well as other operations such as sharing, requesting
    access, and so on, but here we will only focus on the CRUD operations.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: Creating a dashboard
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s start first with dashboard creation. The relevant documentation can be
    found at [https://www.arduino.cc/reference/en/iot/api/#api-DashboardsV2-dashboardsV2Create](https://www.arduino.cc/reference/en/iot/api/#api-DashboardsV2-dashboardsV2Create).
    Open the `create-dashboard.js` file under the `dashboard` folder in VSCode.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two methods in this code: one is `getToken()`, which is the same
    method as in all our coding exercises to fetch the authentication token for our
    requests. The second method is `CreateDashboard()`, which is responsible for dashboard
    creation. Referring to the documentation, we can see we need to initiate the `api`
    variable with the `AiotApi.DashboardV2Api()` object, which is used to perform
    operations on dashboard objects:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '`api.dashboardsV2Create` is the method responsible for dashboard creation and
    takes two parameters as input: the first is the dashboard properties and the second
    variable is `opts`, which is not mandatory, hence I leave it empty. Both variables
    are passed to the `api.dashboardsV2Create` method, which returns the response.
    The `util.inspect` method is used to display the JSON response on the console
    with proper formatting. Type the following command to execute the `create-dashboard.js`
    script:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'After successful execution of the script, it will print a response like the
    following:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: In the response you will get your dashboard ID, creation date, update date,
    and other things we already covered during dashboard creation.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: Updating a dashboard
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we are going to explore how to update a dashboard using the
    dashboard ID. There is an option to add widgets to a dashboard via an API but
    it will make the code significantly more complex due to the JSON data involved.
    For this reason, we will just update the dashboard name instead of adding widgets.
    The documentation for updating properties is available at [https://www.arduino.cc/reference/en/iot/api/#api-DashboardsV2-dashboardsV2Update](https://www.arduino.cc/reference/en/iot/api/#api-DashboardsV2-dashboardsV2Update).
    Open the `update-dashboard.js` file under the `dashboard` folder in VSCode:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'The preceding code is almost the same as the `create-dashboard` code. Here
    we have one extra variable, `dashboard_id`, used to update the specific dashboard.
    Besides that, we have the same dashboard properties with their updated content.
    Lastly, we call the `api.dashboardsV2Update()` method. Execute the following command
    in the Terminal:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'After successful execution of the script, it will print a response like the
    following:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: After our update, the response will return the new content, reflecting the updated
    data for the name that we provided.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: Deleting a dashboard
  id: totrans-253
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we are going to explore how to delete a dashboard using the
    dashboard ID. The relevant documentation on deleting dashboards is available at
    [https://www.arduino.cc/reference/en/iot/api/#api-DashboardsV2-dashboardsV2Delete](https://www.arduino.cc/reference/en/iot/api/#api-DashboardsV2-dashboardsV2Delete).
    Open the `delete-dashboard.js` file under the `dashboard` folder in VSCode:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'The preceding code snippet is taken from the `DeleteDashboard()` method from
    `delete-dashboard.js` file. In the `DeleteDashboard()` method we need to supply
    the `dashboard_id` and `opts` variables as parameters. `dashboard_id` is mandatory
    for the deletion process, while the `opts` variable is optional. Execute the following
    command in the Terminal:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: After successful execution of the script, it will print the response on the
    console indicating that the dashboard was deleted successfully.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: Listing dashboards
  id: totrans-259
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will list all the dashboards with complete details and widgets.
    The difference between listing dashboards and showing a dashboard is that listing
    dashboards will display all the dashboards available in the Arduino IoT Cloud,
    while showing a dashboard only shows the specific dashboard properties and widgets
    related to the given dashboard ID.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: 'The documentation for listing dashboards is available at [https://www.arduino.cc/reference/en/iot/api/#api-DashboardsV2-dashboardsV2List](https://www.arduino.cc/reference/en/iot/api/#api-DashboardsV2-dashboardsV2List).
    Open `list-dashboard.js` under the `dashboard` folder in VSCode. The following
    code snippet is taken from the `ListDashboard()` method:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Execute the following command in the Terminal:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'After successful execution of the script, it will print the response in JSON
    format containing the dashboard properties and widgets:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: The preceding response contains all the properties related to dashboards such
    as widgets, creation date, update time, and so on. Next, we have another API endpoint
    related to showing a dashboard, which is used to display all the information regarding
    a single dashboard. The code is available in the `dashboard` folder; the execution
    of the code and checking out how it works is left to you as an independent exercise.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: In these sub-sections, we discussed how to work programmatically with dashboards,
    including actions such as dashboard creation, updating, deletion, and showing
    the list of dashboards via the Arduino IoT Cloud Node.js SDK. In the next section,
    we will explore how we can use the Node.js SDK to fine-tune our cloud variables/properties.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: Fine-tuning with the Node.js SDK – property value management
  id: totrans-269
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will look at how we can *set*/*get* cloud variable values
    using the SDK. This is very useful for performing bulk operations; for example,
    if you have 100 lights connected to the Arduino IoT Cloud, it will be difficult
    to control them all manually from a dashboard. Suppose switching one device on/off
    takes 3 seconds from the dashboard – with 100 devices this will require 300 seconds,
    a total of 5 minutes, along with the chance of human error (maybe the user misses
    one device due to bulk processing). But with the help of the SDK, we can perform
    bulk operations on Things, saving time and improving confidence in our ability
    to reach zero-error operations.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: Get a property value
  id: totrans-271
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s first see how to get the last value of the cloud variable. To do this,
    we need the Thing ID and cloud variable ID. More precisely, we will get the complete
    properties of the cloud variable in JSON format here, but will only fetch `last_value`
    of the cloud variable. The relevant documentation can be found at [https://www.arduino.cc/reference/en/iot/api/#api-PropertiesV2-propertiesV2Show.](https://www.arduino.cc/reference/en/iot/api/#api-PropertiesV2-propertiesV2Show.)
    Open the `get-prop.js` file under the `getset` folder in VSCode:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'The preceding code snippet was taken from the `GetProperty()` method. We have
    defined `thingid` and `propertyid` and then passed these variables to the `api.propertiesV2Show`
    method later in the snippet. After getting the response in JSON format, we only
    use the `last_value` property to display its data on the console. Run the following
    command on the Terminal:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: After successful execution, you will get the response with the value.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: Set a property value
  id: totrans-277
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the previous section, we discussed how to get the last value of a cloud
    variable, and in this section, we will explore how to `set`/`publish` the value
    to a cloud variable. The relevant documentation can be found at [https://www.arduino.cc/reference/en/iot/api/#api-PropertiesV2-propertiesV2Publish](https://www.arduino.cc/reference/en/iot/api/#api-PropertiesV2-propertiesV2Publish).
    Open the `set-prop.js` file under the `getset` folder in VSCode:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'The preceding code snippet was taken from the `SetProperty()` method. Here,
    we provide three variables to the `api.propertiesV2Publish` method. The first
    is `thingid`, the second is `propertyid`, and the third variable contains the
    two further properties of `device_id` and `value`. Run the following command on
    the Terminal to execute the script:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: After successful execution, you will get a response indicating that the value
    has been updated successfully.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: In the section, we discussed in detail how to get/set the value of a cloud variable
    programmatically. This helps developers to fetch values and display them in their
    custom dashboards, or set the values of cloud variables to control device operations.
    Next, you have an assignment of an example project for practice, which will help
    you to refine your skills and chapter study.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: Assignment
  id: totrans-284
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After playing with SDK, it’s now time to do some more experiments so you can
    apply your learning in new scenarios and solidify your learning. For this assignment,
    you will create a script for Thing automation with the following properties:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: Set up a method for **WeMos D1 Mini** device creation. This device belongs to
    the **ESP8266** category.
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set up a Thing named `Sense Environment` and create a sketch for a Thing. Then,
    associate the previously created device with the Thing.
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create three cloud variables/properties for temperature, humidity, and air quality
    and attach these variables to the previously created Thing.
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the required script in one file containing all the methods, where we
    just provide the Thing name and it will automatically set up the device, Thing,
    and sketch, handle device association with the Thing, and take care of variable
    creation. Successfully completing this task will teach you to automate workflows
    and processes efficiently and effectively.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-290
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered API endpoints, SDKs, and the types of SDK platforms
    available to us on the Arduino IoT Cloud. We also learned how to test APIs with
    Postman. Next, we explored the Node.js SDK by performing different types of operations,
    particularly CRUD operations, on devices, Things, properties, and dashboards.
    Finally, we saw how to get and set the value of a cloud variable.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: This chapter was specially designed for backend developers seeking to use the
    Arduino IoT Cloud as a foundation and wanting to develop a custom frontend for
    their solution, which is possible when you know how to interact with the Arduino
    IoT Cloud programmatically using the Node.js SDK. Likewise, the ability to create
    custom services allows us to integrate with third party cloud services and applications.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will be more interesting as we are going to dive into smart
    agriculture, implementation a project where you will learn how to measure the
    soil moisture, soil temperature, and outdoor temperature and humidity. We will
    design a device that will allow us to monitor four different crops/plants. You
    could use this project to monitor your home plants as well as helping your friends
    working in the field of agriculture.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将会更加有趣，因为我们将要深入探讨智能农业，实施一个项目，在这个项目中你将学习如何测量土壤湿度、土壤温度和室外温度与湿度。我们将设计一个设备，使我们能够监控四种不同的作物/植物。你也可以使用这个项目来监控你家的植物，同时帮助那些在农业领域工作的朋友。
