["```cpp\n#include <QCoreApplication>\n#include <QScriptEngine>\n\nint main(int argc, char **argv) {\n  QCoreApplication app(argc, argv);\n  QScriptEngine engine;\n  engine.evaluate(\"print('Hello World!')\");\n  return 0;\n}\n```", "```cpp\n#include <QCoreApplication>\n#include <QScriptEngine>\n#include <QtDebug>\n\nint main(int argc, char **argv) {\n  QCoreApplication app(argc, argv);\n  QScriptEngine engine;\n  engine.evaluate(\"print('Hello World!')\");\n if(engine.hasUncaughtException()) {\n QScriptValue exception = engine.uncaughtException();\n qDebug() << exception.toString();\n }\n  return 0;\n}\n```", "```cpp\n\"SyntaxError: Parse error\"\n```", "```cpp\nQScriptValue result = engine.evaluate(\"(7+8)/2\");\nif(engine.hasUncaughtException()) {\n  // ...\n} else {\n  qDebug() << result.toString();\n}\n```", "```cpp\nvoid MainWindow::openDocument() {\n  QString filePath = QFileDialog::getOpenFileName(this, \"Open Document\", QDir::homePath(), \"JavaScript Documents (*.js)\");\n  if(filePath.isEmpty()) return;\n  open(filePath);\n}\n```", "```cpp\nvoid MainWindow::open(const QString &filePath) {\n  QFile file(filePath);\n  if(!file.open(QFile::ReadOnly|QFile::Text)) {\n      QMessageBox::critical(this, \"Error\", \"Can't open file.\");\n      return;\n  }\n  setWindowFilePath(filePath);\n  ui->codeEditor->setPlainText(QTextStream(&file).readAll());\n  ui->logWindow->clear();\n}\n```", "```cpp\nvoid Main Window::run() {\n   ui->logWindow->clear();\n   QScriptValue result\n     = m_engine.evaluate(scriptSourceCode, windowFilePath());\n   if(m_engine.hasUncaughtException()) {\n     QScriptValue exception = m_engine.uncaughtException();\n     QTextCursor cursor = ui->logWindow->textCursor();\n     QTextCharFormat errFormat;\n     errFormat.setForeground(Qt::red);\n     cursor.insertText(\n       QString(\"Exception at line %1:\")\n       .arg(m_engine.uncaughtExceptionLineNumber()),\n       errFormat\n     );\n     cursor.insertText(exception.toString(), errFormat);\n     QStringList trace = m_engine.uncaughtExceptionBacktrace();\n     errFormat.setForeground(Qt::darkRed);\n     for(int i = 0; i < trace.size(); ++i) {\n       const QString & traceFrame = trace.at(i);\n       cursor.insertBlock();\n       cursor.insertText(QString(\"#%1: %2\")\n         .arg(i).arg(traceFrame), errFormat);\n     }\n   } else {\n     QTextCursor cursor = ui->logWindow->textCursor();\n     QTextCharFormat resultFormat;\n     resultFormat.setForeground(Qt::blue);\n     cursor.insertText(result.toString(), resultFormat);\n   }\n}\n```", "```cpp\nfunction factorial(n) {\n  if( n < 0 ) return undefined\n  if( n == 0 ) return 1\n  return n*factorial(n-1)\n}\n\nfactorial(7)\n```", "```cpp\nfunction factorial(n) {\n  return N\n}\n\nfactorial(7)\n```", "```cpp\nvar fun = function() { return 42 }\n```", "```cpp\nvoid MainWindow::run() {\n    ui->logWindow->clear();\n    QString scriptSourceCode = ui->codeEditor->toPlainText();\n m_engine.pushContext();\n QScriptValue result = m_engine.evaluate\n  (scriptSourceCode, windowFilePath());\n    if(m_engine.hasUncaughtException()) {\n        // …\n    }\n m_engine.popContext();\n}\n```", "```cpp\nvar foo = 7\nfunction bar() { return foo }\nbar()\n```", "```cpp\nQScriptContext *context = engine.pushContext();\nQScriptValue activationObject = context->activationObject();\nactivationObject.setProperty(\"foo\", \"bar\");\nengine.evaluate(\"print(foo)\");\n```", "```cpp\nQScriptContext *context = engine.pushContext();\nQScriptValue thisObject = context->thisObject();\nthisObject.setProperty(\"foo\", \"bar\");\nengine.evaluate(\"print(this.foo)\");\n```", "```cpp\nQScriptEngine engine;\nQPushButton *button = new QPushButton(\"Button\");\n// …\nQScriptValue scriptButton = engine.newQObject(button);\nengine.globalObject().setProperty(\"pushButton\", scriptButton);\n```", "```cpp\nint main(int argc, char **argv) {\n  QApplication app(argc, argv);\n  QScriptEngine engine;\n  QPushButton button;\n  engine.globalObject().setProperty\n  (\"pushButton\", engine.newQObject(&button));\n  QString script = \"pushButton.text = 'My Scripted Button'\\n\"+\n                   \"pushButton.checkable = true\\n\" +\n                   \"pushButton.setChecked(true)\"\n  engine.evaluate(script);\n  return app.exec();\n}\n```", "```cpp\nQ_PROPERTY(QString internalName READ internalName SCRIPTABLE false)\n```", "```cpp\nQ_PROPERTY(QString name     READ name        NOTIFY nameChanged)\nQ_PROPERTY(char direction   READ direction   NOTIFY directionChanged)\nQ_PROPERTY(QPoint position  READ position    NOTIFY positionChanged)\nQ_PROPERTY(int hp           READ hp          NOTIFY hpChanged)\nQ_PROPERTY(int maxHp        READ maxHp       NOTIFY maxHpChanged)\nQ_PROPERTY(int dex          READ dex         NOTIFY dexChanged)\nQ_PROPERTY(int baseAttack   READ baseAttack  NOTIFY baseAttackChanged)\nQ_PROPERTY(int armor        READ armor       NOTIFY armorChanged)\n```", "```cpp\npublic:\n  void setName(const QString &newName);\n  void setDirection(char newDirection);\n  void setPosition(const QPoint &newPosition);\n  void setHp(int newHp);\n  void setMaxHp(int newMaxHp);\n  void setBaseAttack(int newBaseAttack);\n  void setArmor(int newArmor);\n  void setDex(int newDex);\n```", "```cpp\npublic:\n  void attack(LivingEntity *enemy);\n  void dodge();\n  void wait();\n  bool moveForward();\n  bool moveBackward();\n  void turnLeft();\n  void turnRight();\n```", "```cpp\nvoid LivingEntity::wait() {  if(hp() < maxHp()) setHp(hp()+1); }\nvoid LivingEntity::dodge() {\n    m_armorBonus += dex(); \n    emit armorChanged(armor()); // m_baseArmor + m_armorBonus\n}\nvoid LivingEntity::attack(LivingEntity *enemy) {\n  if (baseAttack() <=0) return;\n  int damage = qrand() % baseAttack();\n  int enemyArmor = enemy->armor();\n  int inflictedDamage = qMax(0, damage-enemyArmor);\n  enemy->setHp(qMax(0, enemy->hp() - inflictedDamage));\n}\n```", "```cpp\nclass NPC : public LivingEntity {\n  Q_OBJECT\npublic:\n  NPC(QObject *parent = 0) : LivingEntity(parent) {}\npublic slots:\n  void attack(LivingEntity *enemy) { LivingEntity::attack(enemy); }\n  void dodge() { LivingEntity::dodge(); }\n  void wait() { LivingEntity::wait(); }\n  bool moveForward() { return LivingEntity::moveForward(); }\n  bool moveBackward() { return LivingEntity::moveBackward(); }\n  void turnLeft() { LivingEntity::turnLeft(); }\n  void turnRight() { LivingEntity::turnRight(); }\n};\n```", "```cpp\nclass GameEngine : public QScriptEngine {\npublic:\n  GameEngine(QObject *parent = 0) : QScriptEngine(parent) {\n    m_timerId = 0;\n    m_player = new LivingCreature(this);\n    m_creature = new NPC(this);\n    QScriptValue go = globalObject();\n    go.setProperty(\"player\", newQObject(m_player));\n    go.setProperty(\"self\", newQObject(m_creature));\n  }\n  LivingCreature *player() const {return m_player; }\n  LivingCreature *npc() const { return m_creature; }\n  void start(const QString &fileName) {\n    if(m_timerId) killTimer(m_timerId);\n    m_npcProgram = readScriptFromFile(fileName);\n    m_timerId = startTimer(1000);\n  }\nprotected:\n  QScriptProgram readScriptFromFile(const QString &fileName) const {\n    QFile file(fileName);\n    if(!file.open(QFile::ReadOnly|QFile::Text)) return QScriptProgram();\n    return QScriptProgram(file.readAll(), fileName);\n  }\n  void timerEvent(QTimerEvent *te) {\n    if(te->timerId() != m_timerId) return;\n    m_creature->reset();\n    m_player->reset();\n    evaluate(m_npcProgram);\n  }\nprivate:\n  LivingEntity *m_player;\n  NPC *m_creature;\n  QScriptProgram m_npcProgram;\n  int m_timerId;\n};\n```", "```cpp\nint main(int argc, char **argv) {\n  QCoreApplication app(argc, argv);\n  GameEngine engine;\n\n  engine.player()->setMaxHp(50);\n  engine.player()->setHp(50);\n  engine.player()->setDex(10);\n  engine.player()->setBaseAttack(12);\n  engine.player()->setArmor(3);\n\n  engine.npc()->setMaxHp(100);\n  engine.npc()->setHp(100);\n  engine.npc()->setDex(4);\n  engine.npc()->setBaseAttack(2);\n  engine.npc()->setArmor(1);\n\n  engine.start(argv[1]);\n  return app.exec();\n}\n```", "```cpp\nprint(\"Player HP:\", player.hp)\nprint(\"Creature HP:\", self.hp)\nvar val = Math.random() * 100\nif(val < 50) {\n  print(\"Attack!\")\n  self.attack(player) \n} else {\n  print(\"Dodge!\");\n  self.dodge();\n}\n```", "```cpp\nvoid timerEvent(QTimerEvent *te) {\n  if(te->timerId() != m_timerId) return;\n  m_creature.reset();\n  m_player.reset();\n  evaluate(m_npcProgram);\n  evaluate(m_playerProgram);\n m_creature.executeAction();\n m_player.executeAction();\n}\n```", "```cpp\nint sum(int a, int b) { return a+b; }\n\nQScriptValue sum_wrapper(QScriptContext *context, QScriptEngine *engine) {\n  if(context->argumentCount() != 2) return engine->undefinedValue();\n  QScriptValue arg0 = context->argument(0);\n  QScriptValue arg1 = context->argument(1);\n  if(!arg0.isNumber() || !arg1.isNumber())\n  return engine->undefinedValue();\n  return sum(arg0.toNumber()+arg1.toNumber());\n}\n```", "```cpp\nQScriptValue sumFunction = engine.newFunction(sum_wrapper, 2);\nengine.globalObject().setProperty(\"sum\", sumFunction);\n```", "```cpp\nprint(\"Arguments expected:\", sum.length)\nprint(sum(1,2,3) // sum returns Undefined\n```", "```cpp\nQScriptValue sum_wrapper(QScriptContext *context, \n  QScriptEngine *engine) {\n  int result = 0;\n  for(int i=0; i<context->argumentCount();++i) {\n    QScriptValue arg = context->argument(i);\n    result = sum(result, arg.toNumber());\n  }\n  return result;\n}\n```", "```cpp\nprint(sum());\nprint(sum(1,2));\nprint(sum(1,2,3));\n```", "```cpp\nclass CustomObject : public QObject {\n  Q_OBJECT\npublic:\n  CustomObject(QObject *parent = 0) : QObject(parent) { m_value = 0; }\n  int value() const { return m_value; }\n  void setValue(int v) { m_value = v; }\nprivate:\n  int m_value;\n};\n\nQScriptValue getSetValue(QScriptContext *, QScriptEngine*); // function prototype\n\nint main(int argc, char **argv) {\n  QCoreApplication app(argc, argv);\n  QScriptEngine engine;\n  CustomObject object;\n  QScriptValue object_value = engine.newQObject(&object);\n  QScriptValue getSetValue_fun = engine.newFunction(getSetValue);\n  object_value.setProperty(\"value\", getSetValue_fun,\n    QScriptValue::PropertyGetter|QScriptValue::PropertySetter);\n  engine.globalObject().setProperty(\"customObject\", object_value);\n  engine.evaluate(\"customObject.value = 42\");\n  qDebug() << object.value();\n  return 0;\n}\n```", "```cpp\nQScriptValue getSetValue(QScriptContext *context, QScriptEngine *engine) {\n  QScriptValue object = context->thisObject();\n  CustomObject *customObject = qobject_cast<CustomObject*>(object.toQObject());\n  if(!customObject) return engine->undefinedValue();\n  if(context->argumentCount() == 1) {\n    // property setter\n    customObject->setValue(context->argument(0).toNumber());\n    return engine->undefinedValue();\n  } else {\n    // property getter\n    return customObject->value();\n  }\n}\n```", "```cpp\nQScriptValue powFunction = engine.globalObject().property(\"Math\").property(\"pow\");\n```", "```cpp\nQScriptValueList arguments = { QScriptValue(2), QScriptValue(10) };\nQScriptValue result = powFunction.call(QScriptValue(), arguments);\nqDebug() << result.toNumber(); // yields 1024\n```", "```cpp\nclass AIScript {\npublic:\n  QScriptProgram read(const QString &fileName);\n  bool evaluate(const QScriptProgram &program, QScriptEngine *engine);\n  QScriptValue initFunction;\n  QScriptValue heartbeatFunction;\n  QScriptValue defendFunction;\n};\n```", "```cpp\nbool AIScript::evaluate(const QScriptProgram &program, QScriptEngine *engine) {\n  QScriptContext *context = engine->pushContext();\n  QScriptValue activationObject;\n  QScriptValue result = engine->evaluate(program);\n  activationObject = context->activationObject();\n  if(!result.isError()) {\n    initFunction = activationObject.property(\"init\");\n    heartbeatFunction = activationObject.property(\"heartbeat\");\n    defendFunction = activationObject.property(\"defend\");\n  }\n  engine->popContext();\n  return !result.isError();\n}\n```", "```cpp\n  void start(const QString &fileName) {\n    m_ai = AIScript();\n    QScriptProgram program = m_ai.read(fileName);\n    m_ai.evaluate(program, this);\n    qDebug() << m_ai.initFunction.toString();\n    qDebug() << m_ai.heartbeatFunction.toString();\n    qDebug() << m_ai.defendFunction.toString();\n  }\n```", "```cpp\nfunction init() {\n  print(\"This is init function\")\n}\n\nfunction heartbeat() {\n  print(\"This is heartbeat function\")\n}\n\nfunction defend() {\n  print(\"This is defend function\")\n}\n```", "```cpp\nQScriptValue m_thisObject;\n```", "```cpp\nvoid AIScript::initialize(QScriptEngine *engine) {\n  m_thisObject = engine->newObject();\n  engine->pushContext();\n  initFunction.call(m_thisObject);\n  engine->popContext();\n}\n```", "```cpp\n  void start(const QString &fileName) {\n    m_ai = AIScript();\n    QScriptProgram program = m_ai.read(fileName);\n    evaluate(program, this);\n    m_ai.initialize(this);\n  }\n```", "```cpp\nfunction init() {\n  print(\"This is init function\")\n  this.distance = function(p1, p2) {\n    // Manhattan distance\n    return Math.abs(p1.x-p2.x)+Math.abs(p1.y-p2.y)\n  }\n  this.actionHistory = []\n}\n```", "```cpp\nvoid AIScript::heartbeat(QScriptEngine *engine, QObject *personObject, QObject *otherObject) {\n  QScriptValueList params;\n  params << engine->newQObject(personObject);\n  m_thisObject.setProperty(\"enemy\", engine->newQObject(otherObject));\n  heartbeatFunction.call(m_thisObject, params);\n  m_thisObject.setProperty(\"enemy\", QScriptValue::UndefinedValue);\n}\n```", "```cpp\nvoid timerEvent(QTimerEvent *te) {\n    if(te->timerId() != m_timerId) return;\n    m_creature->reset();\n    m_player->reset();\n    m_ai.heartbeat(this, m_creature, m_player);\n}\n```", "```cpp\nfunction heartbeat(person) {\n  person.attack(this.enemy)\n  this.actionHistory.push(\"ATTACK\")\n}\n```", "```cpp\nbutton.clicked.connect(lineEdit.clear)\n```", "```cpp\nbutton.clicked.connect(clearLineEdit)\n```", "```cpp\nbutton.clicked.connect(function() { lineEdit.clear() })\n```", "```cpp\nvar obj = { \"name\": \"FooBar\" }\nbutton.clicked.connect(obj, function() { print(this.name) })\n```", "```cpp\nbutton.clicked.disconnect(clearLineEdit)\n```", "```cpp\nspinBox.valueChanged(7)\n```", "```cpp\nQScriptValue function = engine.evaluate(\"(function() { })\");\nqScriptConnect(button, SIGNAL(clicked()), QScriptValue(), function);\n```", "```cpp\nQScriptValue pushbutton_ctor(QScriptContext *context, QScriptEngine *engine) {\n    QScriptValue parentValue = context->argument(0);\n    QWidget *parent = qscriptvalue_cast<QWidget*>(parentValue);\n    QPushButton *button = new QPushButton(parent);\n    QScriptValue buttonValue = engine->newQObject(button, QScriptEngine::AutoOwnership);\n    return buttonValue;\n}\nQScriptValue buttonConstructor = engine.newFunction(pushbutton_ctor);\nengine.globalObject().setProperty(\"QPushButton\", buttonConstructor);\n```", "```cpp\nQ_SCRIPT_DECLARE_QMETAOBJECT(QPushButton, QWidget*)\n```", "```cpp\nQScriptValue pushButtonClass = engine.scriptValueFromQMetaObject<QPushButton>();\n```", "```cpp\n#include <QtWidgets>\n#include <QScriptEngine>\n\nQ_SCRIPT_DECLARE_QMETAOBJECT(QPushButton, QWidget*)\n\nint main(int argc, char **argv) {\n  QApplication app(argc, argv);\n  QScriptEngine engine;\n  QScriptValue pushButtonClass \n  = engine.scriptValueFromQMetaObject<QPushButton>();\n  engine.globalObject().setProperty(\"QPushButton\", pushButtonClass);\n  QString script = \"pushButton = new QPushButton\\n\"\n                   \"pushButton.text = 'Script Button'\\n\"\n                   \"pushButton.show()\";\n  engine.evaluate(script);\n  return app.exec();\n}\n```", "```cpp\nQScriptValue globalObject = engine.globalObject();\nQScriptValue newGO = engine.newObject();\nQScriptValueIterator iter(globalObject);\nwhile(iter.hasNext()) {\n  iter.next(); newGO.setProperty(iter.key(), iter.value());\n}\n```", "```cpp\nQScriptValue globalObject = engine.globalObject();\nQScriptValue newGO = engine.newObject();\nnewGO.setPrototype(globalObject);\n```", "```cpp\nengine.setGlobalObject(newGO);\n```", "```cpp\nQScriptEngine engine;\nQScriptEngineDebugger debugger;\ndebugger.attachTo(&engine);\n```", "```cpp\nclass SimpleExtension : public QScriptExtensionPlugin {\n  Q_OBJECT\n  Q_PLUGIN_METADATA(IID \"org.qt- project.Qt.QScriptExtensionInterface\")\npublic:\n  SimpleExtension(QObject *parent = 0) : QScriptExtensionPlugin(parent) {}\n  QStringList keys() const Q_DECL_OVERRIDE { return QStringList() << \"simple\"; }\n  void initialize(const QString &key, QScriptEngine *engine) {\n    QScriptValue simple = engine->newObject();\n    simple.setProperty(\"name\", \"This is text from Simple extension\");\n    engine->globalObject().setProperty(\"Simple\", simple);\n  }\n};\n```", "```cpp\nQScriptEngine engine;\nengine.importExtension(\"Simple\");\nengine.evaluate(\"print(Simple.name)\")\n```", "```cpp\nsudo apt-get install libpython3.3-dev\n\n```", "```cpp\nLIBS += -lpython3.3m\nINCLUDEPATH += /usr/include/python3.3m/\n```", "```cpp\n#include <Python.h>\n#include <QtCore>\n\nint main(int argc, char **argv) {\n  QApplication app(argc, argv);\n  Py_SetProgramName(argv[0]);\n  Py_Initialize();\n  const char *script = \"print(\\\"Hello from Python\\\")\"\n  PyRun_SimpleString(script);\n  Py_Finalize();\n  return app.exec();\n}\n```", "```cpp\n#include <Python.h>\n#include <QObject>\n#include <QString>\nclass QtPython : public QObject {\n  Q_OBJECT\npublic:\n  QtPython(const char *progName, QObject *parent = 0) : QObject(parent) { \n    if(progName != 0) {\n        wchar_t buf[strlen(progName+1)];\n        mbstowcs(buf, progName, strlen(progName));\n        Py_SetProgramName(buf);\n    }\n    Py_InitializeEx(0);\n  }\n  ~QtPython() { Py_Finalize(); }\n  void run(const QString &program) {\n    PyRun_SimpleString(qPrintable(program));\n  }\n};\n```", "```cpp\n#include \"qtpython.h\"\n\nint main(int argc, char **argv) {\n  QtPython python(argv[0]);\n  python.run(\"print('Hello from Python')\");\n  return 0;\n}\n```", "```cpp\nCONFIG += link_pkgconfig\nPKGCONFIG += python-3.3m # adjust the version number to suit your needs\n```", "```cpp\nINCLUDEPATH += C:\\Python33\\include\nLIBS += -LC:\\Python33\\include -lpython33\n```", "```cpp\n#include <Python.h>\n\nclass QtPythonValue {\npublic:\n  QtPythonValue() { incRef(Py_None);}\n  QtPythonValue(const QtPythonValue &other) { incRef(other.m_value); }\n  QtPythonValue& operator=(const QtPythonValue &other) {\n    if(m_value == other.m_value) return *this;\n    decRef();\n    incRef(other.m_value);\n    return *this;\n  }\n\n  QtPythonValue(int val) {  m_value = PyLong_FromLong(val); }\n  QtPythonValue(const QString &str) {\n    m_value = PyUnicode_FromString(qPrintable(str));\n  }\n  ~QtPythonValue() { decRef(); }\n  int toInt() const { return PyLong_Check(m_value) ? PyLong_AsLong(m_value) : 0; }\n  QString toString() const {\n    return PyUnicode_Check(m_value) ? QString::fromUtf8(PyUnicode_AsUTF8(m_value)) : QString(); \n  }\n  bool isNone() const { return m_value == Py_None; }\n\nprivate:\n  QtPythonValue(PyObject *ptr) { m_value = ptr; }\n  void incRef() { if(m_value) Py_INCREF(m_value); }\n  void incRef(PyObject *val) { m_value = val; incRef(); }\n  void decRef() { if(m_value) Py_DECREF(m_value); }\n  PyObject *m_value;\n  friend class QtPython;\n};\n```", "```cpp\n#include \"qtpython.h\"\n#include \"qtpythonvalue.h\"\n#include <QtDebug>\n\nint main(int argc, char *argv[]) {\n    QtPython python(argv[0]);\n    QtPythonValue integer = 7, string = QStringLiteral(\"foobar\"), none;\n    qDebug() << integer.toInt() << string.toString() << none.isNone();\n    return 0;\n}\n```", "```cpp\nQtPythonValue::QtPythonValue(const QVariant &variant)\n{\n  switch(variant.type()) {\n    case QVariant::Invalid: incRef(Py_None);\n    return;\n    case QVariant::String: m_value \n      = PyUnicode_FromString(qPrintable(variant.toString()));\n    return;\n    case QVariant::Int: m_value = PyLong_FromLong(variant.toInt());\n    return;\n    case QVariant::LongLong: m_value \n      = PyLong_FromLongLong(variant.toLongLong());\n    return;\n case QVariant::List: {\n QVariantList list = variant.toList();\n const int listSize = list.size();\n PyObject *tuple = PyTuple_New(listSize);\n for(int i=0;i<listSize;++i) {\n PyTuple_SetItem(tuple, i, QtPythonValue(list.at(i)).m_value);\n }\n m_value = tuple;\n return;\n }\n case QVariant::Map: {\n QVariantMap map = variant.toMap();\n PyObject *dict = PyDict_New();\n for(QVariantMap::const_iterator iter = map.begin();\n iter != map.end(); ++iter) {\n PyDict_SetItemString(dict, \n qPrintable(iter.key()), \n QtPythonValue(iter.value()).m_value\n );\n }\n m_value = dict;\n return;\n }\n  default: incRef(Py_None); return;\n  }\n}\n```", "```cpp\nQtPythonValue QtPython::run(const QString &program, const QtPythonValue &globals, const QtPythonValue &locals)\n{\n  PyObject *retVal = PyRun_String(qPrintable(program), \n    Py_file_input, globals.m_value, locals.m_value);\n  return QtPythonValue(retVal);\n}\n```", "```cpp\nQtPythonValue QtPython::import(const QString &name) const {\n  return QtPythonValue(PyImport_ImportModule(qPrintable(name)));\n}\n\nQtPythonValue QtPython::addModule(const QString &name) const {\n  PyObject *retVal = PyImport_AddModule(qPrintable(name));\n  Py_INCREF(retVal);\n  return QtPythonValue(retVal);\n}\n\nQtPythonValue QtPython::dictionary(const QtPythonValue &module) const {\n  PyObject *retVal = PyModule_GetDict(module.m_value);\n  Py_INCREF(retVal);\n  return QtPythonValue(retVal);\n}\n```", "```cpp\nbool QtPythonValue::isCallable() const {\n  return PyCallable_Check(m_value);\n}\n\nQtPythonValue QtPythonValue::attribute(const QString &name) const {\n  return QtPythonValue(PyObject_GetAttrString(m_value, qPrintable(name)));\n}\n\nbool QtPythonValue::setAttribute(const QString &name, const QtPythonValue &value) {\n  int retVal = PyObject_SetAttrString(m_value, qPrintable(name), value.m_value);\n  return retVal != -1;\n}\n\nQtPythonValue QtPythonValue::call(const QVariantList &arguments) const {\n  return QtPythonValue(PyObject_CallObject(m_value, QtPythonValue(arguments).m_value));\n}\n\nQtPythonValue QtPythonValue::call(const QStringList &arguments) const {\n  return QtPythonValue(PyObject_CallObject(m_value, QtPythonValue(arguments).m_value));\n}\n```", "```cpp\nint main(int argc, char *argv[]) {\n  QtPython python(argv[0]);\n\n  QtPythonValue mainModule = python.addModule(\"__main__\");\n  QtPythonValue dict = python.dictionary(mainModule);\n  python.run(\"foo = (1, 2, 3)\", dict, dict);\n  python.run(\"print(foo)\", dict, dict);\n\n  QtPythonValue module = python.import(\"os\");\n  QtPythonValue chdir = module.attribute(\"chdir\");\n  chdir.call(QStringList() << \"/home\");\n  QtPythonValue func = module.attribute(\"getcwd\");\n  qDebug() << func.call(QVariantList()).toString();\n\n  return 0;\n}\n```"]