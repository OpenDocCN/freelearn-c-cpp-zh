["```cpp\n    virtual void Tick(float DeltaSeconds) override;\n    ```", "```cpp\n    void AGFInstancesCharacter::Tick(float DeltaSeconds)\n    {\n      Super::Tick(DeltaSeconds);\n    }\n    ```", "```cpp\n    const AGameModeBase* GameMode = GetWorld()->GetAuthGameMode();\n    const AGameStateBase* GameState = GetWorld()->GetGameState();\n    const APlayerController* PlayerController = \n      Cast<APlayerController>(GetController());\n    const AHUD* HUD = PlayerController != nullptr ? PlayerController->GetHUD() : nullptr;\n    ```", "```cpp\n    const FString GameModeString = GameMode != nullptr ? \n      TEXT(\"Valid\") : TEXT(\"Invalid\");\n    const FString GameStateString = GameState != nullptr ? \n      TEXT(\"Valid\") : TEXT(\"Invalid\");\n    const FString PlayerStateString = GetPlayerState() != nullptr ? TEXT(\"Valid\") : TEXT(\"Invalid\");\n    const FString PawnString = GetName();\n    const FString PlayerControllerString = PlayerController != nullptr ? TEXT(\"Valid\") : TEXT(\"Invalid\");\n    const FString HUDString = HUD != nullptr ? TEXT(\"Valid\"):\n      TEXT(\"Invalid\");\n    ```", "```cpp\n    const FString String = FString::Printf(TEXT(\"Game Mode = %s\\nGame \n      State = %s\\nPlayerState = %s\\nPawn = %s\\nPlayer Controller = \n      %s\\nHUD = %s\"), *GameModeString, *GameStateString, \n      *PlayerStateString, *PawnString, \n      *PlayerControllerString, \n      *HUDString);\n    DrawDebugString(GetWorld(), GetActorLocation(), String, nullptr, FColor::White, 0.0f, true);\n    ```", "```cpp\n    PublicDependencyModuleNames.AddRange(new string[] { \"Core\", \"CoreUObject\", \"Engine\", \"InputCore\", \"HeadMountedDisplay\", \"UMG\" });\n    ```", "```cpp\n    UPROPERTY(EditDefaultsOnly, BlueprintReadOnly, Category = \"GF Instance Player Controller\")\n    TSubclassOf<UUserWidget> MenuClass;\n    UPROPERTY()\n    UUserWidget* Menu;\n    ```", "```cpp\n    virtual void BeginPlay() override;\n    ```", "```cpp\n    #include \"Blueprint/UserWidget.h\"\n    ```", "```cpp\n    void AGFInstancePlayerController::BeginPlay()\n    {\n      Super::BeginPlay();\n    }\n    ```", "```cpp\n    if (IsLocalController() && MenuClass != nullptr)\n    {\n      Menu = CreateWidget<UUserWidget>(this, MenuClass);\n      if (Menu != nullptr)\n      {\n        Menu->AddToViewport(0);\n      }\n    }\n    ```", "```cpp\nATestGameMode::ATestGameMode()\n{\n  DefaultPawnClass = AMyCharacter::StaticClass();\n  PlayerControllerClass = \n  AMyPlayerController::StaticClass();\n  PlayerStateClass = AMyPlayerState::StaticClass();\n  GameStateClass = AMyGameState::StaticClass();\n}\n```", "```cpp\nAGameModeBase* GameMode = GetWorld()->GetAuthGameMode();\n```", "```cpp\nvoid ATestGameMode::OnDeath(APlayerController* VictimController)\n{\n  if(VictimController == nullptr)\n  {\n    return;\n  }\n\n  APawn* Pawn = VictimController->GetPawn();\n  if(Pawn != nullptr)\n  {\n    Pawn->Destroy();\n  }\n\n  RestartPlayer(VictimController);\n}\n```", "```cpp\nbool ATestGameMode::ShouldSpawnAtStartSpot(AController* Player)\n{\n  return false;\n}\n```", "```cpp\nAPlayerState* PlayerState = Controller->PlayerState;\n```", "```cpp\n// Default version\nAPlayerState* PlayerState = Controller->GetPlayerState();\n// Template version\nATestPlayerState* MyPlayerState = Controller->GetPlayerState<ATestPlayerState>();\n```", "```cpp\n// Default version\nAPlayerState* PlayerState = Pawn->GetPlayerState();\n// Template version\nATestPlayerState* MyPlayerState = Pawn-\n  >GetPlayerState<ATestPlayerState>();\n```", "```cpp\nTArray<APlayerState*> PlayerStates = GameState->PlayerArray;\n```", "```cpp\n// Default version\nAGameStateBase* GameState = GetWorld()->GetGameState();\n// Template version\nAMyGameState* MyGameState = GetWorld()->GetGameState<AMyGameState>();\n```", "```cpp\nAGameStateBase* GameState = GameMode->GameState;\n```", "```cpp\n// Default version\nAGameStateBase* GameState = GameMode->GetGameState<AGameStateBase>();\n// Template version\nAMyGameState* MyGameState = GameMode->GetGameState<AMyGameState>();\n```", "```cpp\nvoid ATestActor::EndPlay(const EEndPlayReason::Type EndPlayReason)\n{\n  Super::EndPlay(EndPlayReason);\n  const FString String = FString::Printf(TEXT(\"The actor %s \n  has just stopped playing\"), *GetName());\n  GEngine->AddOnScreenDebugMessage(-1, 2.0f, FColor::Red, \n  String);\n}\n```", "```cpp\nvoid ATestCharacter::Landed(const FHitResult& Hit)\n{\n  Super::Landed(Hit);\n  UGameplayStatics::PlaySound2D(GetWorld(), LandSound);\n}\n```", "```cpp\nvoid ATestGameModeBase::RestartMap()\n{\n  const FString URL = GetWorld()->GetName();\n  GetWorld()->ServerTravel(URL, false, false);\n}\n```", "```cpp\nvoid ATestActor::SortValues()\n{\n  TArray<int32> SortTest;\n  SortTest.Add(43);\n  SortTest.Add(1);\n  SortTest.Add(23);\n  SortTest.Add(8);\n  SortTest.Sort([](const int32& A, const int32& B) { return \n  A < B; });\n}\n```", "```cpp\nvoid AFPSCharacter::FellOutOfWorld(const UDamageType& DmgType)\n{\n  Super::FellOutOfWorld(DmgType);\n  const FString String = FString::Printf(TEXT(\"The actor %s \n  has fell out of the world\"), *GetName());\n  GEngine->AddOnScreenDebugMessage(-1, 2.0f, FColor::Red, \n  String);\n}\n```", "```cpp\n#include \"GameFramework/RotatingMovementComponent.h\"\n```", "```cpp\nUPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = \"Test Actor\")\nURotatingMovementComponent* RotatingMovement;\n```", "```cpp\nRotatingMovement = CreateDefaultSubobject\n  <URotatingMovementComponent>(\"Rotating Movement\");\nRotatingMovement->RotationRate = FRotator(0.0, 90.0f, 0);\n```", "```cpp\n    UPROPERTY(Replicated, BlueprintReadOnly)\n    int32 PickupsRemaining;\n    ```", "```cpp\n    virtual void BeginPlay() override;\n    ```", "```cpp\n    UFUNCTION(BlueprintCallable)\n    TArray<APlayerState*> GetPlayerStatesOrderedByScore() const;\n    ```", "```cpp\n    void RemovePickup() { PickupsRemaining--; }\n    ```", "```cpp\n    bool HasPickups() const { return PickupsRemaining > 0; }\n    ```", "```cpp\n    #include \"Pickup.h\"\n    #include \"Kismet/GameplayStatics.h\"\n    #include \"Net/UnrealNetwork.h\"\n    #include \"GameFramework/PlayerState.h\"\n    ```", "```cpp\n    void APickupsGameState::GetLifetimeReplicatedProps(TArray< \n      FLifetimeProperty >& OutLifetimeProps) const\n    {\n      Super::GetLifetimeReplicatedProps(OutLifetimeProps);\n      DOREPLIFETIME(APickupsGameState, PickupsRemaining);\n    }\n    ```", "```cpp\n    void APickupsGameState::BeginPlay()\n    {\n      Super::BeginPlay();\n      TArray<AActor*> Pickups;\n      UGameplayStatics::GetAllActorsOfClass(this, \n        APickup::StaticClass(), Pickups);\n      PickupsRemaining = Pickups.Num();\n    }\n    ```", "```cpp\n    TArray<APlayerState*> APickupsGameState::GetPlayerStatesOrderedByScore() const\n    {\n      TArray<APlayerState*> PlayerStates(PlayerArray);\n      PlayerStates.Sort([](const APlayerState& A, const \n      APlayerState& \n        B) { return A.GetScore() > B.GetScore(); });\n      return PlayerStates;\n    }\n    ```", "```cpp\n    UPROPERTY(Replicated, BlueprintReadOnly)\n    int32 Pickups;\n    ```", "```cpp\n    void AddPickup() { Pickups++; }\n    ```", "```cpp\n    #include \"Net/UnrealNetwork.h\"\n    ```", "```cpp\n    void APickupsPlayerState::GetLifetimeReplicatedProps(TArray< \n      FLifetimeProperty >& OutLifetimeProps) const\n    {\n      Super::GetLifetimeReplicatedProps(OutLifetimeProps);\n      DOREPLIFETIME(APickupsPlayerState, Pickups);\n    }\n    ```", "```cpp\n    UPROPERTY(EditDefaultsOnly, BlueprintReadOnly, Category = \"Pickup Player Controller\")\n    TSubclassOf<class UUserWidget> ScoreboardMenuClass;\n    ```", "```cpp\n    UPROPERTY()\n    class UUserWidget* ScoreboardMenu;\n    ```", "```cpp\n    virtual void BeginPlay() override;\n    ```", "```cpp\n    #include \"Blueprint/UserWidget.h\"\n    ```", "```cpp\n    void ApickupsPlayerController::BeginPlay()\n    {\n      Super::BeginPlay();\n      if (IsLocalController() && ScoreboardMenuClass != \n      nullptr)\n      {\n        ScoreboardMenu = CreateWidget<UUserWidget>(this, \n        ScoreboardMenuClass);\n        if (ScoreboardMenu != nullptr)\n        {\n          ScoreboardMenu->AddToViewport(0);\n        }\n      }  \n    }\n    ```", "```cpp\n    #include \"GameFramework/GameMode.h\"\n    ```", "```cpp\n    class APickupsGameMode : public AGameMode\n    ```", "```cpp\n    UPROPERTY()\n    class APickupsGameState* MyGameState;\n    ```", "```cpp\n    virtual void BeginPlay() override;\n    ```", "```cpp\n    virtual bool ShouldSpawnAtStartSpot(AController* Player) \n      override;\n    ```", "```cpp\n    virtual void HandleMatchHasStarted() override;\n    virtual void HandleMatchHasEnded() override;\n    virtual bool ReadyToStartMatch_Implementation() override;\n    virtual bool ReadyToEndMatch_Implementation() override;\n    ```", "```cpp\n    void RestartMap() const;\n    ```", "```cpp\n    #include \"Kismet/GameplayStatics.h\"\n    #include \"PickupsGameState.h\"\n    ```", "```cpp\n    void APickupsGameMode::BeginPlay()\n    {\n      Super::BeginPlay();\n      MyGameState = GetGameState<APickupsGameState>();\n    }\n    ```", "```cpp\n    bool APickupsGameMode::ShouldSpawnAtStartSpot\n      (AController* Player)\n    {\n      return false;\n    }\n    ```", "```cpp\n    void APickupsGameMode::HandleMatchHasStarted()\n    {\n      Super::HandleMatchHasStarted();\n      GEngine->AddOnScreenDebugMessage(-1, 2.0f, \n      FColor::Green, \"The game has started!\");\n    }\n    ```", "```cpp\n    void APickupsGameMode::HandleMatchHasEnded()\n    {\n      Super::HandleMatchHasEnded();\n      GEngine->AddOnScreenDebugMessage(-1, 2.0f, \n      FColor::Red, \"The game has ended!\");\n      TArray<AActor*> Characters;\n        UGameplayStatics::GetAllActorsOfClass(this, \n        APickupsCharacter::StaticClass(), Characters);\n      for (AActor* Character : Characters)\n      {\n        Character->Destroy();\n      }\n      FTimerHandle TimerHandle;\n      GetWorldTimerManager().SetTimer(TimerHandle, this, \n        &APickupsGameMode::RestartMap, 5.0f);\n    }\n    ```", "```cpp\n    bool APickupsGameMode::ReadyToStartMatch_Implementation()\n    {\n      return true;\n    }\n    ```", "```cpp\n    bool APickupsGameMode::ReadyToEndMatch_Implementation()\n    {\n      return MyGameState != nullptr && !MyGameState\n      ->HasPickups();\n    }\n    ```", "```cpp\n    void APickupsGameMode::RestartMap() const\n    {\n      GetWorld()->ServerTravel(GetWorld()->GetName(), \n      false, false);\n    }\n    ```", "```cpp\n    UPROPERTY(EditDefaultsOnly, BlueprintReadOnly, Category = \n      \"Pickups Character\")\n    USoundBase* FallSound;\n    UPROPERTY(EditDefaultsOnly, BlueprintReadOnly, Category = \n      \"Pickups Character\")\n    USoundBase* LandSound;\n    ```", "```cpp\n    virtual void EndPlay(const EEndPlayReason::Type EndPlayReason) override;\n    virtual void Landed(const FHitResult& Hit) override;\n    virtual void FellOutOfWorld(const UDamageType& DmgType) override;\n    ```", "```cpp\n    void AddScore(const float Score) const;\n    void AddPickup() const;\n    ```", "```cpp\n    UFUNCTION(Client, Unreliable)\n    void ClientPlaySound2D(USoundBase* Sound);\n    ```", "```cpp\n    #include \"PickupsPlayerState.h\"\n    #include \"GameFramework/GameMode.h\"\n    #include \"GameFramework/PlayerState.h\"\n    #include \"Kismet/GameplayStatics.h\"\n    ```", "```cpp\n    void APickupsCharacter::EndPlay(const EEndPlayReason::Type EndPlayReason)\n    {\n      Super::EndPlay(EndPlayReason);\n      if (EndPlayReason == EEndPlayReason::Destroyed)\n      {\n        UGameplayStatics::PlaySound2D(GetWorld(), \n        FallSound);\n      }\n    }\n    ```", "```cpp\n    void APickupsCharacter::Landed(const FHitResult& Hit)\n    {\n      Super::Landed(Hit);\n      UGameplayStatics::PlaySound2D(GetWorld(), LandSound);\n    }\n    ```", "```cpp\n    void APickupsCharacter::FellOutOfWorld(const UDamageType& \n      DmgType)\n    {\n      AController* TempController = Controller;\n      AddScore(-10);\n      Destroy();\n      AGameMode* GameMode = GetWorld()\n      ->GetAuthGameMode<AGameMode>();\n      if (GameMode != nullptr)\n      {\n        GameMode->RestartPlayer(TempController);\n      }\n    }\n    ```", "```cpp\n    void APickupsCharacter::AddScore(const float Score) const\n    {\n      APlayerState* MyPlayerState = GetPlayerState();\n      if (MyPlayerState != nullptr)\n      {\n        const float CurrentScore = MyPlayerState->GetScore();\n        MyPlayerState->SetScore(CurrentScore + Score);\n      }\n    }\n    ```", "```cpp\n    void APickupsCharacter::AddPickup() const\n    {\n      APickupsPlayerState* MyPlayerState = \n        GetPlayerState<APickupsPlayerState>();\n      if (MyPlayerState != nullptr)\n      {\n        MyPlayerState->AddPickup();\n      }\n    }\n    ```", "```cpp\n    void APickupsCharacter::ClientPlaySound2D_Implementation(USoundBase* Sound)\n    {\n      UGameplayStatics::PlaySound2D(GetWorld(), Sound);\n    }\n    ```", "```cpp\n    UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = \n      \"Pickup\")\n    UStaticMeshComponent* Mesh;\n    ```", "```cpp\n    UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = \n      \"Pickup\")\n    class URotatingMovementComponent* RotatingMovement;\n    ```", "```cpp\n    UPROPERTY(EditDefaultsOnly, BlueprintReadOnly, Category = \n      \"Pickup\")\n    USoundBase* PickupSound;\n    ```", "```cpp\n    APickup();\n    virtual void BeginPlay() override;\n    ```", "```cpp\n    UFUNCTION()\n    void OnBeginOverlap(UPrimitiveComponent* OverlappedComp, AActor* \n      OtherActor, UPrimitiveComponent* OtherComp, int32 \n      OtherBodyIndex, bool bFromSweep, const FHitResult& \n      Hit);\n    ```", "```cpp\n    #include \"PickupsCharacter.h\"\n    #include \"PickupsGameState.h\"\n    #include \"GameFramework/RotatingMovementComponent.h\"\n    ```", "```cpp\n    Mesh = CreateDefaultSubobject<UStaticMeshComponent>(\"Mesh\");\n    Mesh->SetCollisionProfileName(\"OverlapAll\");\n    RootComponent = Mesh;\n    ```", "```cpp\n    RotatingMovement = CreateDefaultSubobject\n      <URotatingMovementComponent>(\"Rotating Movement\");\n    RotatingMovement->RotationRate = FRotator(0.0, 90.0f, 0);\n    ```", "```cpp\n    bReplicates = true;\n    PrimaryActorTick.bCanEverTick = false;\n    ```", "```cpp\n    Mesh->OnComponentBeginOverlap.AddDynamic(this, &APickup::OnBeginOverlap);\n    ```", "```cpp\n    void APickup::OnBeginOverlap(UPrimitiveComponent* OverlappedComp, \n      AActor* OtherActor, UPrimitiveComponent* OtherComp, \n      int32 \n      OtherBodyIndex, bool bFromSweep, const FHitResult& \n      Hit)\n    {\n      APickupsCharacter* Character = \n        Cast<APickupsCharacter>(OtherActor);\n      if (Character == nullptr || !HasAuthority())\n      {\n        return;\n      }\n      APickupsGameState* GameState = \n        Cast<APickupsGameState>(GetWorld()\n      ->GetGameState());\n      if (GameState != nullptr)\n      {\n        GameState->RemovePickup();\n      }\n      Character->ClientPlaySound2D(PickupSound);\n      Character->AddScore(10);\n      Character->AddPickup();\n      Destroy();\n    }\n    ```", "```cpp\n    PublicDependencyModuleNames.AddRange(new string[] { \"Core\", \n      \"CoreUObject\", \"Engine\", \"InputCore\", \n      \"HeadMountedDisplay\", \n      \"UMG\" });\n    ```"]