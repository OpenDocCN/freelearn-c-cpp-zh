- en: '13'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Scripting the Arduino IoT Cloud with Cloud CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Arduino Cloud **Command-Line Interface** (**CLI**) is an automation tool
    that is useful for scripting and creating devices, Things, and dashboards. It
    also provides the option to perform mass uploads (**OTA**), enabling the fleet
    management of deployed IoT nodes. This chapter will explore the advanced functionalities
    of the tool and propose some scenarios for its usage.
  prefs: []
  type: TYPE_NORMAL
- en: The Arduino Cloud CLI is a cross-platform tool that lets you perform bulk management
    and operations via the command line, which helps you to increase your productivity,
    and provides the option to automate Things via command-line scripts. In this chapter,
    we will explore all the commands and observe their context.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you will understand how to interact with the Arduino
    IoT Cloud platform via a CLI to create, delete, or extract templates from devices,
    Things, and dashboards and send OTA updates to devices via the command line. This
    chapter will show you how to perform all the operations via the command line to
    boost your productivity. The commands you will learn will help you write custom
    scripts for use in mass deployments and bulk management operations.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What is the Arduino Cloud CLI?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Securing access – unveiling API keys and authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing the Arduino Cloud CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interacting with devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Engaging with Things
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Crafting dashboards – unleashing potential via the command line
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OTA management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What’s next?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are no specific hardware requirements for this chapter as we will focus
    on the Arduino Cloud CLI and work through different command exercises to perform
    operations on the Arduino IoT Cloud platform using a CLI. However, before we proceed,
    we will need the following software to complete the different exercises in this
    chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: The Arduino Cloud CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Arduino IDE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An Arduino IoT Cloud account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For the commands, we need the Arduino Cloud CLI and an active Arduino IoT Cloud
    account. This chapter only contains commands, so there is no folder for it on
    GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: What is the Arduino Cloud CLI?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Arduino Cloud CLI is a powerful tool to manage and interact with your Arduino
    projects on the cloud. It allows you to perform various operations, such as deploying
    and managing devices and generating a dashboard and Things template for bulk creations,
    all from the comfort of your command line.
  prefs: []
  type: TYPE_NORMAL
- en: The benefits of using the Arduino Cloud CLI are numerous. Firstly, it provides
    a convenient and efficient way to manage your projects without the need for a
    graphical user interface. This can be particularly useful if you prefer working
    with command-line tools, or if you integrate Arduino into an automated workflow.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Arduino Cloud CLI serves as a command-line utility, enabling you to interact
    with the key functionalities of the Arduino IoT Cloud through a terminal. It provides
    the capability to accomplish the following tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Duplicate existing Things and dashboards by extracting their templates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Execute mass OTA uploads
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generate devices, Things, and dashboards directly through the CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here are some of the benefits of using the Arduino Cloud CLI:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Automation**: The Arduino Cloud CLI can be used to automate tasks that you
    would otherwise have to do manually. For example, you could use it to create a
    script that clones a Thing and then performs a mass OTA upload to all of the devices
    that are associated with that Thing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Efficient device management**: The Arduino Cloud CLI can help you manage
    a large number of devices more efficiently. For example, you could use it to list
    all of the devices that are associated with a particular tag or to get the status
    of a particular device.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Access to advanced features**: The Arduino Cloud CLI can be used to access
    features of the Arduino IoT Cloud that are not available in a web interface. For
    example, you could use it to create a script that checks the status of a device
    every minute and then sends an email alert if the status changes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Customization**: Being open source, users have the flexibility to customize
    the Arduino Cloud CLI to suit their specific needs and integrate it into their
    workflows.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Active development and community support**: The tool is actively developed,
    meaning it continually receives updates, new features, and bug fixes. Additionally,
    the presence of a large community can provide assistance and support for users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Time and effort savings**: The Arduino Cloud CLI can save time and effort
    in managing IoT projects, making it a valuable resource for developers working
    with Arduino devices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overall, the Arduino Cloud CLI is a powerful tool that can be used to automate
    tasks, manage a large number of devices, and access features of the Arduino IoT
    Cloud that are not available in a web interface.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we have discussed what the Arduino Cloud CLI is and what the
    benefits of the Arduino Cloud CLI are. In the next section, we will explore how
    to set up API keys and how to use API keys to authenticate the Arduino Cloud CLI
    with the Arduino IoT Cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Securing access – unveiling API keys and authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before getting into the meat of the chapter, we first need to talk about the
    authentication mechanism of the platform. The Arduino IoT Cloud uses a **token
    authentication mechanism** to validate Arduino Cloud CLI requests.
  prefs: []
  type: TYPE_NORMAL
- en: Before we start to install and test the Arduino Cloud CLI, we need to set up
    the API keys in Arduino Cloud that will provide us with the client ID and secret.
    In older versions of the interface, the API options were under the **Integrations**
    tab, but they have now moved to Arduino Cloud, which is available at [https://cloud.arduino.cc/home/](https://cloud.arduino.cc/home/).
  prefs: []
  type: TYPE_NORMAL
- en: After visiting the **Integration** page, click on **API Keys**, and then you
    will be taken to the API page. Click on **CREATE API KEY**. A popup will appear;
    provide a name for the API, and click on the **CONTINUE** button. The wizard that
    appears will take a few seconds to generate the keys, and then a new popup will
    appear displaying the keys, as shown in *Figure 13**.1*.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.1 – The API keys](img/B19752_13_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.1 – The API keys
  prefs: []
  type: TYPE_NORMAL
- en: Copy the **Client ID** and **Client Secret** values by clicking on the copy
    icons – never try to copy by manual selection, as the client secret is very long,
    so clicking on the copy icon is the best option. Save both the **Client ID** and
    **Client Secret** values in a secure location, and then click the checkbox, confirming
    that you have saved your keys. Lastly, click on **DONE**, and you will see your
    API key in the panel – it’s now ready for use.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: A single API key is used to give access to all the Things and their variables.
    Having access to all the infrastructure with just one API key is handy, instead
    of having to create separate API keys for each Thing, but you must take care of
    your key! This is a big security risk as, if you were to lose the key, a hacker
    could gain access to your whole account.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we created API authentication keys, which consist of a client
    ID and a client secret. This section is most important, as without these keys,
    we can’t execute any command via the Arduino Cloud CLI. In the following section,
    we will install the Arduino Cloud CLI.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Arduino Cloud CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will install the Arduino Cloud CLI tool. The Arduino team
    developed the CLI tool for all three major operating systems: macOS, Windows,
    and Linux. You can download the Arduino Cloud CLI tool for your operating system
    from [https://github.com/arduino/arduino-cloud-cli/releases](https://github.com/arduino/arduino-cloud-cli/releases).
    The official Arduino Cloud CLI page can be found at [https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli](https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli);
    here, you can get updated information regarding commands and their usage.'
  prefs: []
  type: TYPE_NORMAL
- en: Always try to download the latest and most stable release of the Arduino Cloud
    CLI. After downloading the ZIP file according to your operating system, extract
    the files from it. You will find one executable file named `arduino-cloud-cli`
    and another called `LICENSE.txt`, and can set up Environmental variables for an
    `arduino-cloud-cli` executable file in your operating system, which will help
    you to execute `arduino-cloud-cli` in the terminal without specifying the location
    of the `arduino-cloud-cli` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just open up the terminal and enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Then, you will see the following output on your terminal (*Figure 13**.2*).
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.2 – The Arduino Cloud CLI terminal](img/B19752_13_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.2 – The Arduino Cloud CLI terminal
  prefs: []
  type: TYPE_NORMAL
- en: This simply shows you how to use the Arduino Cloud CLI with different parameters,
    as we didn’t specify any parameters during the command execution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, it’s time to initiate the Arduino Cloud CLI authentication with Arduino
    Cloud, using the API keys that we generated in the previous section. Type the
    following command into the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: After executing the preceding command, you will be asked for your client ID
    and client secret, respectively. Finally, you will be asked for your organization
    ID, which is not mandatory, and you can leave this empty, as shown in *Figure
    13**.3*.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.3 – The Arduino Cloud CLI authentication process with Arduino Cloud](img/B19752_13_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.3 – The Arduino Cloud CLI authentication process with Arduino Cloud
  prefs: []
  type: TYPE_NORMAL
- en: After successful authentication, you will see a success message on the terminal,
    as shown in *Figure 13**.3*. Congratulations! You are now ready to execute the
    commands on the terminal and able to perform operations on the Arduino IoT Cloud
    via commands.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we downloaded the `arduino-cloud-cli` file and installed it
    on our operating system, and we also initialized the authentication process for
    the `arduino-cloud-cli` tool with the Arduino IoT Cloud. In the next section,
    we will start playing with devices using the command line.
  prefs: []
  type: TYPE_NORMAL
- en: Interacting with devices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will get hands-on and practical with devices. We will perform
    create, list, delete, tag, and untag operations on a device, as well as list all
    the devices and show all the parameters of specific devices. Open up the command
    terminal, and then we’ll execute the commands in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a device
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Firstly, we will start by creating a device. The documentation on device creation
    can be found at [https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#device](https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#device).
    Before you execute the command, connect your development board to your computer
    and find out the port number and FQBN for your device from the documentation page.
    The following is the syntax of the `device` `create` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'I attached the MKR Wi-Fi 1010 to my computer, which is available on port `/dev/cu.usbmodem101`,
    and its FQBN is `arduino:samd:mkrwifi1010`. Therefore, the following will be my
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: After executing the preceding command, you will get the following output, which
    shows the device has been successfully created (*Figure 13**.4*).
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.4 – Device creation using arduino-cloud-cli](img/B19752_13_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.4 – Device creation using arduino-cloud-cli
  prefs: []
  type: TYPE_NORMAL
- en: After creating the device, the terminal will show the device name, ID, board,
    serial number, and FQBN. Just imagine how easy it would be to attach dozens of
    development boards to the Arduino IoT Cloud using the command line, compared to
    a graphical user interface. The Arduino Cloud CLI is also able to create **LoRaWAN**
    devices as well as ESP32/ESP8266 devices via the CLI.
  prefs: []
  type: TYPE_NORMAL
- en: In this subsection, we created a device in the Arduino IoT Cloud using the command
    line. In the following subsection, we will explore how to list the device.
  prefs: []
  type: TYPE_NORMAL
- en: Listing devices
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we will list all the devices. *Listing* devices means displaying
    all the devices with their properties. The documentation on listing devices is
    available at [https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#list-devices](https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#list-devices).
    The following is a very simple command to list all the devices:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: After executing the preceding command, we will see a complete list of devices,
    as shown in the following figure.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.5 – The device list command](img/B19752_13_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.5 – The device list command
  prefs: []
  type: TYPE_NORMAL
- en: In the output, we can see the device name, ID, board, FQBN, serial number, and
    tags. Here, the ID is very important, as it will be used in the following commands
    for device deletion, as well as for tag creation and deletion. In this subsection,
    we have seen how to list the devices, and in the next subsection, we will explore
    how to delete a device using its ID.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting a device
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we will explore how we can delete a device using the device
    ID. The documentation for deleting devices is available at [https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#delete-a-device](https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#delete-a-device).
    The following is the command syntax for device deletion:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'According to the preceding command syntax, we need a device ID for deletion.
    You can retrieve the device ID by using the `device` `list` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: After successfully deleting the device, you will not see any error message;
    otherwise, you will see a `401 error` on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.6 – The device delete command](img/B19752_13_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.6 – The device delete command
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 13**.6* shows the completed command for device deletion, and there
    is no error on the screen, which means the device has been deleted successfully.
    In this subsection, we discussed the `delete` command. In the upcoming subsection,
    we will tag and untag a device.'
  prefs: []
  type: TYPE_NORMAL
- en: Tagging and untagging a device
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we will explore how we can tag and untag a device using the
    device ID. The documentation for tagging a device is available at [https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#tag-device](https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#tag-device),
    and the documentation for untagging a device is available at [https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#untag-device](https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#untag-device).
    The following is the command syntax to tag a device:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the command syntax to untag a device:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: You might ask the question, why do we need a tag for a device? Let’s say you
    have a generic product for warehouse monitoring, and you have deployed this product
    in different organizations and different rooms. Now, the issue is that it’s very
    difficult to assign the organization name and location in the **Device Name**
    field. So, an optimal solution is tagging. You can use tags as many times as you
    want. A tag has two options – one is a key and the other is a value.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, we will attach two tags – one for the organization
    name and another for the location. Pick a device ID by using the `device list`
    command to attach the tags. The following is the command to attach tags to a device:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'According to the following command syntax, we need a device ID to remove the
    tag from the device. You can fetch the device ID by using the `device list` command.
    The following command is used to remove the tag from the device:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Here, the command is a little different, as we have used `delete-tags` and `-k`
    to specify the tag key. If you want to remove multiple tags, then use a comma
    to separate the keys.
  prefs: []
  type: TYPE_NORMAL
- en: In this and the preceding subsections, we performed various operations on devices
    using commands, including ones for device creation, listing devices, device deletion,
    tagging, and untagging. In the next section, we will explore how to practically
    perform operations on Things.
  prefs: []
  type: TYPE_NORMAL
- en: Engaging with Things
  prefs: []
  type: TYPE_NORMAL
- en: A Thing is one of the most important elements in the Arduino IoT Cloud, which
    acts as a separate container holding all of its ingredients, such as cloud variables,
    the device, a sketch for the device, and the device’s network configuration. In
    this section, we will try a range of different operations via commands, such as
    extracting a template from a Thing, creating a Thing from a template, making a
    clone of a Thing, and deleting a Thing.
  prefs: []
  type: TYPE_NORMAL
- en: Extracting a template from a Thing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the Arduino Cloud CLI, we deal with commands and provide different parameters
    to perform different types of operations. Therefore, it is difficult to create
    a new Thing via the command line, as it will make it more complex to pass different
    parameters, such as cloud variables and network configurations.
  prefs: []
  type: TYPE_NORMAL
- en: To solve this issue, the Arduino team introduced the concept of template extraction
    from a Thing. For example, say you want to deploy hundreds of environmental monitoring
    nodes. It’s difficult to create hundreds of Things via the Arduino graphical user
    interface and to create a long command for Thing creation that includes all the
    information regarding the Thing. Therefore, Arduino introduced the template extraction
    technique. Firstly, we will create a Thing via the Arduino graphical user interface,
    and then we will extract its template via the command line. Then, using the template,
    we will create the Thing in the Arduino IoT Cloud via the command line, as the
    Arduino Cloud CLI does not allow you to create a Thing from scratch. You can find
    out more about Thing template extraction in the official documentation at [https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#extract-thing-template](https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#extract-thing-template).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the command syntax for template extraction. With this command,
    we need to provide a Thing ID, with which the command will fetch the template
    of the Thing. Then, we need to provide the format for the template file – either
    JSON or YAML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'For the Thing ID, either visit the Arduino IoT Cloud to find it or refer to
    the upcoming subsections, in which we will show you how to list Things, which
    provides the Thing name, ID, and so on, so you can also retrieve the Thing ID
    from the output. Now, we will assign the format; we want the template output in
    JSON format, so I used JSON here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: After executing the command, we will get the template output on the screen in
    JSON format, as shown in *Figure 13**.7*.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.7 – Extracting the Thing template](img/B19752_13_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.7 – Extracting the Thing template
  prefs: []
  type: TYPE_NORMAL
- en: Our Thing template shows all the information regarding cloud variables. Copy
    the text and save it in a file, which will be used in the following section for
    Thing creation.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Thing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After extracting the Thing template, we will now start to create the Thing.
    The documentation on Thing creation can be found at [https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#create-things](https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#create-things).
    The following is the syntax of the Thing creation command, which takes two parameters.
    Firstly, it will take the name, and secondly, it will take the template filename
    for the Thing creation, which contains the Thing template in JSON format that
    we saved in the previous section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, I have provided a Thing name, `EnvSense101`, and in the previous section,
    I saved the JSON template in the file named `EnvSenseTemplate.json`. Then, we
    provide the name with the `-n` parameter and the template file with the `-``t`
    parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: After executing the preceding command, you will get the following output for
    successful Thing creation (*Figure 13**.8*).
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.8 – Thing creation using arduino-cloud-cli](img/B19752_13_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.8 – Thing creation using arduino-cloud-cli
  prefs: []
  type: TYPE_NORMAL
- en: After creating the Thing, the terminal will show the Thing name, ID, device
    ID (which is empty right now, but in the upcoming sections, we will associate
    the device with this Thing), and variable name.
  prefs: []
  type: TYPE_NORMAL
- en: In this subsection, we created a Thing in the Arduino IoT Cloud using the command
    line. In the following section, we will explore how to clone the Thing for bulk
    creations.
  prefs: []
  type: TYPE_NORMAL
- en: Cloning a Thing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After creating a Thing from a template, we will now explore how we can use
    the clone operation for large-scale deployments. The documentation on the Thing
    clone can be found at [https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#clone-things](https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#clone-things).
    The following is the syntax of the `thing clone` command, which will take two
    parameters. Firstly, it will take a name, and secondly, it will take a Thing ID:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, I have provided a Thing name, `EnvSense102`, and in the previous section,
    we created the Thing, so I can get its ID from the terminal, as shown in *Figure
    13**.8* (use your own Thing ID in the command line). Then, provide the name with
    an `-n` parameter and the Thing ID with a `-``c` parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: After executing the preceding command, you will get the following output for
    a successful Thing clone (*Figure 13**.9*).
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.9 – A Thing clone using arduino-cloud-cli](img/B19752_13_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.9 – A Thing clone using arduino-cloud-cli
  prefs: []
  type: TYPE_NORMAL
- en: This is the output of a successful Thing clone by the Arduino Cloud CLI. After
    cloning the Thing, the terminal will show the Thing name, ID, device ID (which
    is empty right now, but in the upcoming section, we will associate the device
    with this Thing), and variable name. You can see how easy it is to create hundreds
    of Things with just the `clone` command. Here, you can just create a batch script,
    which will only change the name of the Thing by using the `for` loop and create
    hundreds of Things in just a few minutes.
  prefs: []
  type: TYPE_NORMAL
- en: In this subsection, we learned how to clone a Thing in the Arduino IoT Cloud
    using the command line. In the following section, we will explore how to list
    Things.
  prefs: []
  type: TYPE_NORMAL
- en: Listing Things
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we will list all the Things. The documentation on listing
    Things is available at [https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#list-things](https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#list-things).
    The following is a very simple command to list all the Things:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: After executing the preceding command, we will see a complete list of Things,
    as shown in the following figure.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.10 – The thing list command](img/B19752_13_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.10 – The thing list command
  prefs: []
  type: TYPE_NORMAL
- en: In the output, we can see the Thing name, ID, device, and tags. Again, the ID
    is very important, as it will be used in the following commands for Thing deletion,
    as well as for tag creation and deletion. In the preceding sections, we also used
    the ID for Thing template extraction and creation, as well as Thing cloning.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Arduino Cloud CLI also provides different parameters to get more detailed
    output on the terminal, such as a variable list along with a list of Things. We
    can attach the `-s` parameter to the Thing, and we can also list a Thing by providing
    a device ID as well as list a series of Things by providing a Thing ID. Here,
    I want to explore how we can get a variable list along with Things. The following
    is a simple command to list cloud variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: After executing the preceding command, you will see the output shown in *Figure
    13**.11*.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.11 – The thing list command with variables](img/B19752_13_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.11 – The thing list command with variables
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, you can see all the cloud variables along with the Thing names, but it
    looks a little bit complicated. Now, we will try to list a single Thing with cloud
    variables. The following is the command syntax to list a Thing with cloud variables.
    It will take two parameters as input – one Thing ID and an `-``s` parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Execute the preceding command, and you will see the complete and readable output
    shown in *Figure 13**.12*.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.12 – Displaying a single Thing with cloud variables](img/B19752_13_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.12 – Displaying a single Thing with cloud variables
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, it’s time to explore how we can find a Thing by using a device ID. The
    following is a simple command to retrieve a Thing based on a device ID:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: After executing the preceding command, we will get specific Thing data using
    the device ID, as well as its cloud variables, as we used the `-s` parameter in
    the command (as shown in *Figure 13**.13*).
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.13 – Displaying a single Thing based on a device ID, with cloud
    variables](img/B19752_13_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.13 – Displaying a single Thing based on a device ID, with cloud variables
  prefs: []
  type: TYPE_NORMAL
- en: In this subsection, we explored how to list Things by using different parameters.
    In the next subsection, we will explore how to delete a Thing.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting a Thing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we will explore how to delete a Thing using a Thing ID. The
    documentation for deleting a Thing is available at [https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#delete-things](https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#delete-things).
    The following is the command syntax for Thing deletion:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'According to the command syntax, we need a Thing ID for deletion. You can fetch
    the Thing ID by using the `thing` `list` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: After the successful deletion of the device, you will not see an error message;
    otherwise, you will get a `401 error` message on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 13.14 – The Thing delet\uFEFFe command](img/B19752_13_14.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 13.14 – The Thing delete command
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 13**.14* shows the complete command for Thing deletion, and there is
    no error on the screen, which means the Thing has been deleted successfully. In
    this subsection, we discussed the `delete` command, and in the upcoming subsection,
    we will explore how to associate the device with a Thing.'
  prefs: []
  type: TYPE_NORMAL
- en: Associating a device with a Thing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous Thing subsections, we extracted the Thing template, created
    the Thing from that template, and also performed Thing cloning operations. However,
    throughout all the processes, we didn’t associate a device with a Thing, and without
    a device, a Thing is just an empty JAR that is not capable of performing any operation.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this subsection, we will explore how to attach the device with a Thing by
    using a device ID and a Thing ID. The documentation for associating a device with
    a Thing is available at [https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#bind-thing-to-device](https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#bind-thing-to-device).
    The following is the simple command syntax to bind a device with a Thing in the
    Arduino IoT Cloud:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, you can get a specific device ID by using the `arduino-cloud-cli device
    list` command and a Thing ID with `arduino-cloud-cli` `thing list`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding command, we have assigned a Thing ID by using `-i` and a device
    ID with the `-d` parameter. Execute the preceding command, and you will see the
    output shown in *Figure 13**.15*.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.15 – Device binding with Thing](img/B19752_13_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.15 – Device binding with Thing
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 13**.15* shows a device successfully binding with a Thing. To confirm,
    we used the `thing list` command with the `-i` parameter to verify the device
    ID. In both the command as well as in the `thing list` output, the device ID is
    the same.'
  prefs: []
  type: TYPE_NORMAL
- en: In this subsection, we explored how to bind/associate a device with a Thing.
    In the next subsection, we will discuss how to assign and remove tags from a Thing.
  prefs: []
  type: TYPE_NORMAL
- en: Tagging and untagging a Thing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we will explore how we can tag and untag a Thing using the
    Thing ID. The documentation for tagging a Thing is available at [https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#tag-a-thing](https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#tag-a-thing),
    and for untagging a Thing, documentation is available at [https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#untag-a-thing](https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#untag-a-thing).
    The following is the command syntax to tag a Thing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the command syntax to untag a Thing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'You might question the necessity of assigning a tag to a Thing. Consider this
    scenario. You have a versatile product designed for monitoring warehouses, and
    you’ve deployed this product in various organizations and different rooms within
    those organizations. The challenge arises when attempting to incorporate the organization’s
    name and location directly into the **Device Name** field, which can be quite
    cumbersome. In this context, a more efficient solution presents itself through
    the use of tags. Tags can be applied without limitations, much like when we previously
    established tags for devices. Each tag consists of two components: a key and a
    corresponding value.'
  prefs: []
  type: TYPE_NORMAL
- en: 'So, in the following example, we will attach two tags – one for the organization
    name and another for the location. Pick the Thing ID by using the `thing list`
    command to attach tags. The following is the command to attach tags to a Thing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: After executing the preceding command, you can verify the tags by using the
    `thing list` command, as shown in *Figure 13**.16*.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.16 – Assigning tags to a Thing](img/B19752_13_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.16 – Assigning tags to a Thing
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 13**.16* shows the full command that is used to assign tags to a Thing,
    and it also clearly shows the `thing list` command we used to verify the tags.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, it’s time to explore how we can remove a tag from a Thing. Previously,
    we saw the syntax to untag a tag from a Thing. The following is the complete command
    that will remove the location tag from a specific Thing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: After executing the preceding command, you can verify the tags by using the
    `thing list` command, as shown in *Figure 13**.17*.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.17 – Deleting a tag from a Thing](img/B19752_13_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.17 – Deleting a tag from a Thing
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 13**.17* shows the full command that is used to delete a tag from a
    Thing, and it also clearly shows the `thing list` command we used to verify the
    tags.'
  prefs: []
  type: TYPE_NORMAL
- en: Here, the command is a little different, as we have used `delete-tags` and `-k`
    to specify the tag key. If you want to remove multiple tags, then use a comma
    to separate the keys. In the following section, we will explore how to work with
    dashboards using the Arduino Cloud CLI.
  prefs: []
  type: TYPE_NORMAL
- en: Crafting dashboards – unleashing potential via the command line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dashboards are the most important ingredient in the Arduino IoT Cloud pertaining
    to **data visualization**. In the Arduino Cloud CLI, we have dashboard-specific
    commands to perform operations on dashboards, such as extracting a template from
    an existing dashboard, viewing a list of dashboards, deleting the dashboard, and
    creating a dashboard from an extracted template. Firstly, we will start with dashboard
    template extraction.
  prefs: []
  type: TYPE_NORMAL
- en: Extracting a template from a dashboard
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the Arduino Cloud CLI, we deal with commands and provide different parameters
    to perform various operations. Therefore, it is difficult to create a new dashboard
    via the command line, as it will make it more complex to guide the Arduino IoT
    Cloud about widgets and attach these widgets with cloud variables via commands.
  prefs: []
  type: TYPE_NORMAL
- en: To solve this issue, the Arduino team introduced the concept of template extraction
    from a dashboard. For example, if you want to deploy hundreds of environmental
    monitoring nodes, it’s difficult to create hundreds of dashboards via the Arduino
    graphical user interface. It’s also difficult to create long commands for dashboard
    creation, which includes all the information regarding the dashboard. So, Arduino
    introduced the template extraction technique. Firstly, we will create the dashboard
    via the Arduino graphical user interface, and then we will extract its template
    via the command line. Then, using a template, we will create dashboards in the
    Arduino IoT Cloud via the command line, as the Arduino Cloud CLI does not allow
    you to create a dashboard from scratch. The official documentation for dashboard
    template extraction is available at [https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#extract-dashboard-template](https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#extract-dashboard-template).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following shows the command syntax for template extraction. With this command,
    we need to provide a dashboard ID with which the command will fetch the template
    of the dashboard. Then, we need to provide the format for the template file –
    either JSON or YAML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'For the dashboard ID, either visit the Arduino IoT Cloud to find it or refer
    to the upcoming subsections, in which we will show you how to list dashboards,
    which will provide their name, ID, and so on. Now, we will assign the format;
    we want the template output in JSON format, so I used JSON here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: After executing the command, we will get the template output on the screen in
    JSON format, as shown in *Figure 13**.18*.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.18 – Extracting a dashboard template](img/B19752_13_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.18 – Extracting a dashboard template
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 13**.18* shows partial output on the screen. We have our dashboard
    template in JSON format, which shows all the information regarding widgets and
    their configuration, including `thing_id` and `variable_id`. Copy the JSON format
    output and save it in a file, which will be used in the following section for
    dashboard creation.'
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: There is a bug in the Arduino Cloud CLI for dashboard extraction, as it shows
    the Thing name instead of the Thing ID in the `thing_id` value. Therefore, you
    need to replace the text with the Thing ID; otherwise, an error will occur during
    the execution of the dashboard creation command.
  prefs: []
  type: TYPE_NORMAL
- en: In this subsection, we explored how to extract a template from an existing dashboard.
    In the following subsection, we will explore how to list dashboards.
  prefs: []
  type: TYPE_NORMAL
- en: Listing dashboards
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we will list all the dashboards. The documentation on listing
    dashboards is available at [https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#list-dashboards](https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#list-dashboards).
    The following is a very simple command to list all the dashboards:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: After executing the preceding command, we will see a complete list of dashboards,
    as shown in the following figure.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.19 – The dashboard list command](img/B19752_13_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.19 – The dashboard list command
  prefs: []
  type: TYPE_NORMAL
- en: In the output shown in *Figure 13**.19*, we can see the dashboard **Name**,
    **ID**, and **UpdatedAt** details. Here, **ID** is very important, as it will
    be used in the following commands for dashboard deletion. It also helps you in
    dashboard template extraction, as we used the dashboard ID in the preceding subsection
    to extract the template.
  prefs: []
  type: TYPE_NORMAL
- en: In this subsection, we explored how to list dashboards by using a very simple
    command. In the next subsection, we will explore how to delete a dashboard using
    the dashboard ID.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting a dashboard
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this subsection, we will explore how to delete a dashboard using the dashboard
    ID. The documentation for deleting dashboards is available at [https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#delete-dashboards](https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#delete-dashboards).
    The following is the command syntax for dashboard deletion:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'According to the preceding command syntax, we need to provide a dashboard ID
    for deletion. You can fetch the dashboard ID by using the `dashboard` `list` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: After the successful deletion of the device, you will not see an error message;
    otherwise, you will get a `401 error` message on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.20 – The dashboard delete command](img/B19752_13_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.20 – The dashboard delete command
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 13**.20* shows the complete command for dashboard deletion, and there
    is no error on the screen, which means the dashboard has been deleted successfully.
    In this subsection, we discussed the `delete` command. In the upcoming subsection,
    we will explore how to create a dashboard using a template, which we extracted
    in the first subsection of this section.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a dashboard
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After extracting a dashboard template, we can start to create a dashboard.
    The documentation on dashboard creation can be found at [https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#create-dashboard](https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#create-dashboard).
    The following is the syntax of the dashboard creation command, which takes two
    parameters. Firstly, it takes the name of the dashboard, and secondly, it takes
    the template filename for dashboard creation, which contains the dashboard template
    in JSON format that we saved in the previous section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, I have provided the Thing name, `EnvSense101`, and in the previous section,
    I saved the JSON template in a file named `EnvSenseTemplate.json`. Then, we provide
    the name with the `-n` parameter and the template file with the `-``t` parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'After executing the preceding command, you will get the following output for
    successful dashboard creation (*Figure 13**.21*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.21 – Dashboard creation using arduino-cloud-cli](img/B19752_13_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.21 – Dashboard creation using arduino-cloud-cli
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 13**.21* shows the command and the output of successful dashboard creation
    by the Arduino Cloud CLI. After creating the dashboard, the terminal shows the
    dashboard **name**, **id**, **updated_at**, and **widgets** details.'
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: There is a bug in the Arduino Cloud CLI for dashboard extraction, as it shows
    the Thing name instead of the Thing ID in the `thing_id` value. Therefore, you
    need to replace the text with the Thing ID; otherwise, an error will occur during
    the execution of the dashboard creation command.
  prefs: []
  type: TYPE_NORMAL
- en: In this subsection, we created a dashboard in the Arduino IoT Cloud using the
    command line. In the following section, we will explore how OTA updates work via
    a CLI.
  prefs: []
  type: TYPE_NORMAL
- en: OTA management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [*Chapter 11*](B19752_11.xhtml#_idTextAnchor229), we explored what OTA is
    and how we can easily use this feature to send updates to remote devices. In that
    chapter, we used a graphical user interface, which is a good option for a single
    device. However, when we have bulk Things to send OTA, then the situation becomes
    complex, as we need to go through different things one at a time to send OTA updates,
    which is very time consuming and a difficult operation at the enterprise level.
  prefs: []
  type: TYPE_NORMAL
- en: That’s why the Arduino team created commands for the Arduino Cloud CLI to send
    OTA updates to single or multiple devices automatically, to minimize the complexity
    and operation time. So, firstly, we will explore how to export the compiled binary
    by using the Arduino IDE, and then we will send an OTA update to a device using
    its ID. For official documentation and updates, visit [https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#ota-over-the-air](https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#ota-over-the-air).
  prefs: []
  type: TYPE_NORMAL
- en: Exporting a binary using the Arduino IDE
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will use the Arduino IDE to generate the complied binaries
    of our program for a device OTA. Firstly, download your Thing code from the Arduino
    IoT Cloud. Then, extract your downloaded code and open it up in the Arduino IDE.
    Select the development board in the Arduino IDE, and then click on **Sketch**
    | **Export Compiled Binary**, as shown in *Figure 13**.22*.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.22 – Export Compiled Binary in the Arduino IDE](img/B19752_13_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.22 – Export Compiled Binary in the Arduino IDE
  prefs: []
  type: TYPE_NORMAL
- en: Clicking on `build` directory under your `sketch` directory, where you will
    find lots of files generated by the Arduino compiler. You need to select the file
    that ends with the `ino.bin` extension, as shown in *Figure 13**.23*.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.23 – The sketch build files](img/B19752_13_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.23 – The sketch build files
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we explored how to generate the build files of a sketch using
    the Arduino IDE. In the next subsection, we will send this build file to a device
    OTA via the command line.
  prefs: []
  type: TYPE_NORMAL
- en: Uploading a sketch to a device
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Arduino Cloud CLI provides a single upload option as well as a mass deployment
    option. This is the official documentation link: [https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#upload](https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#upload).
    You can visit the page for the latest updates and news. Firstly, we will explore
    how to send an update to a single device. The following is a simple command syntax
    for a single-device OTA operation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we need to specify the device ID and the filename, including its path,
    which is done with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: After the successful execution of the command, you will see an empty terminal
    without any errors, as shown in *Figure 13**.24*. However, if the device is unavailable
    or any other issue arises, then the details will be printed on the terminal.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.24 – A successful command execution of the OTA upload](img/B19752_13_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.24 – A successful command execution of the OTA upload
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 13**.24* shows that our upload has been completed successfully without
    any errors. It will take some time on the terminal to upload the file, depending
    on your internet speed as well as your sketch size, but you need to wait till
    the final output. Never interrupt the upload procedure.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we have the mass deployment option in OTA, where you can upload firmware
    to multiple devices by using FQBN, as well as tags. The following is a simple
    command for mass deployment that uses FQBN, and you can also assign specific device
    IDs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'However, with this specific command, I will only use `fqbn` to send the update
    to all the same device types:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: You can also explore the OTA mass upload by adding tags, to send an update to
    specific groups of devices. In this section, we explored how to build binaries
    of a sketch using the Arduino IDE and how to upload an update using the OTA command.
  prefs: []
  type: TYPE_NORMAL
- en: What next?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After playing around with some commands, it’s now time to do some more experiments
    so that you can apply your learning to new scenarios and learn new stuff. We explored
    the complete list of commands available on the Arduino Cloud CLI. However, you
    can check out Arduino’s official page for the latest updates and news to keep
    yourself up to date with the latest features. Now, it’s your turn to create batch
    scripts using the Arduino Cloud CLI to automate your operations, such as bulk
    device addition in the Arduino IoT Cloud, bulk Thing creation using templates,
    binding devices with Things, and creating a dashboard for every Thing from dashboard
    templates.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered all the types of commands that are officially available
    to us on the Arduino Cloud CLI. Firstly, we explored device-related commands,
    which include device creation, listing devices, deletion, tagging, and untagging.
    Then, we explored how to work with Things; in that section, we started with template
    extraction and then created a Thing using a template. We also explored how to
    clone a Thing, how to bind a device with a Thing, and so on. In the penultimate
    section, we played around with dashboard commands, and in the last section, we
    explored how OTA commands can benefit us by sending updates to devices via the
    command line in different ways.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter was specially designed for backend developers and administrators
    who want to use the Arduino Cloud CLI to optimize their daily tasks, by using
    terminal commands instead of a graphical user interface. This chapter will have
    helped them interact with the Arduino IoT Cloud using a CLI. It will also have
    helped them to create custom scripts, automating their daily tasks.
  prefs: []
  type: TYPE_NORMAL
- en: The following chapter is the last chapter of this book, and in this chapter,
    we will explore different Arduino IoT Cloud plans for educational and enterprise
    organizations. We will also explore industrial IoT hardware devices and different
    types of Arduino IoT Cloud services that are especially available to enterprise
    organizations. This chapter will give you a complete overview of how to scale
    your product from a smaller scale to an enterprise level.
  prefs: []
  type: TYPE_NORMAL
