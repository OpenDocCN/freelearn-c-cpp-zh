- en: '13'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '13'
- en: Scripting the Arduino IoT Cloud with Cloud CLI
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Cloud CLI编写Arduino IoT Cloud脚本
- en: The Arduino Cloud **Command-Line Interface** (**CLI**) is an automation tool
    that is useful for scripting and creating devices, Things, and dashboards. It
    also provides the option to perform mass uploads (**OTA**), enabling the fleet
    management of deployed IoT nodes. This chapter will explore the advanced functionalities
    of the tool and propose some scenarios for its usage.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino Cloud **命令行界面**（**CLI**）是一个自动化工具，对于脚本编写和创建设备、事物和仪表板非常有用。它还提供了执行大量上传（**OTA**）的选项，从而能够管理已部署的IoT节点。本章将探讨该工具的高级功能，并提出一些使用场景。
- en: The Arduino Cloud CLI is a cross-platform tool that lets you perform bulk management
    and operations via the command line, which helps you to increase your productivity,
    and provides the option to automate Things via command-line scripts. In this chapter,
    we will explore all the commands and observe their context.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino Cloud CLI是一个跨平台工具，它允许你通过命令行执行批量管理和操作，这有助于提高你的生产力，并提供通过命令行脚本自动事物选项。在本章中，我们将探讨所有命令并观察它们的上下文。
- en: By the end of this chapter, you will understand how to interact with the Arduino
    IoT Cloud platform via a CLI to create, delete, or extract templates from devices,
    Things, and dashboards and send OTA updates to devices via the command line. This
    chapter will show you how to perform all the operations via the command line to
    boost your productivity. The commands you will learn will help you write custom
    scripts for use in mass deployments and bulk management operations.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，你将了解如何通过CLI与Arduino IoT Cloud平台交互，以创建、删除或从设备、事物和仪表板中提取模板，并通过命令行向设备发送OTA更新。本章将展示如何通过命令行执行所有操作以提高你的生产力。你将学习的命令将帮助你编写用于大量部署和批量管理操作的定制脚本。
- en: 'In this chapter, we will cover the following main topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: What is the Arduino Cloud CLI?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是Arduino Cloud CLI？
- en: Securing access – unveiling API keys and authentication
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保护访问权限 – 揭示API密钥和身份验证
- en: Installing the Arduino Cloud CLI
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Arduino Cloud CLI
- en: Interacting with devices
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与设备交互
- en: Engaging with Things
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与事物互动
- en: Crafting dashboards – unleashing potential via the command line
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建仪表板 – 通过命令行释放潜力
- en: OTA management
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OTA管理
- en: What’s next?
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来是什么？
- en: Technical requirements
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'There are no specific hardware requirements for this chapter as we will focus
    on the Arduino Cloud CLI and work through different command exercises to perform
    operations on the Arduino IoT Cloud platform using a CLI. However, before we proceed,
    we will need the following software to complete the different exercises in this
    chapter:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章没有特定的硬件要求，因为我们将会专注于Arduino Cloud CLI，并通过不同的命令练习来执行在Arduino IoT Cloud平台上使用CLI的操作。然而，在继续之前，我们需要以下软件来完成本章的不同练习：
- en: The Arduino Cloud CLI
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino Cloud CLI
- en: The Arduino IDE
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino IDE
- en: An Arduino IoT Cloud account
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino IoT Cloud账户
- en: For the commands, we need the Arduino Cloud CLI and an active Arduino IoT Cloud
    account. This chapter only contains commands, so there is no folder for it on
    GitHub.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 对于命令，我们需要Arduino Cloud CLI和一个活跃的Arduino IoT Cloud账户。本章只包含命令，因此在GitHub上没有为其创建文件夹。
- en: What is the Arduino Cloud CLI?
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是Arduino Cloud CLI？
- en: The Arduino Cloud CLI is a powerful tool to manage and interact with your Arduino
    projects on the cloud. It allows you to perform various operations, such as deploying
    and managing devices and generating a dashboard and Things template for bulk creations,
    all from the comfort of your command line.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino Cloud CLI是一个强大的工具，可以管理和与云端的Arduino项目进行交互。它允许你执行各种操作，例如部署和管理设备，以及生成仪表板和事物模板以进行批量创建，所有这些都可以在你的命令行中完成。
- en: The benefits of using the Arduino Cloud CLI are numerous. Firstly, it provides
    a convenient and efficient way to manage your projects without the need for a
    graphical user interface. This can be particularly useful if you prefer working
    with command-line tools, or if you integrate Arduino into an automated workflow.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Arduino Cloud CLI的好处有很多。首先，它提供了一种方便且高效的方式来管理你的项目，无需图形用户界面。如果你更喜欢使用命令行工具，或者将Arduino集成到自动化工作流程中，这尤其有用。
- en: 'The Arduino Cloud CLI serves as a command-line utility, enabling you to interact
    with the key functionalities of the Arduino IoT Cloud through a terminal. It provides
    the capability to accomplish the following tasks:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino Cloud CLI是一个命令行工具，它使你能够通过终端与Arduino IoT Cloud的关键功能进行交互。它提供了以下任务的能力：
- en: Duplicate existing Things and dashboards by extracting their templates
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过提取模板来复制现有的事物和仪表板
- en: Execute mass OTA uploads
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行大量OTA上传
- en: Generate devices, Things, and dashboards directly through the CLI
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过CLI直接生成设备、事物和仪表板
- en: 'Here are some of the benefits of using the Arduino Cloud CLI:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是使用Arduino Cloud CLI的一些好处：
- en: '**Automation**: The Arduino Cloud CLI can be used to automate tasks that you
    would otherwise have to do manually. For example, you could use it to create a
    script that clones a Thing and then performs a mass OTA upload to all of the devices
    that are associated with that Thing.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化**：Arduino Cloud CLI可以用来自动化您否则必须手动完成的任务。例如，您可以使用它创建一个脚本，克隆一个事物，然后对该事物关联的所有设备执行大量OTA上传。'
- en: '**Efficient device management**: The Arduino Cloud CLI can help you manage
    a large number of devices more efficiently. For example, you could use it to list
    all of the devices that are associated with a particular tag or to get the status
    of a particular device.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高效设备管理**：Arduino Cloud CLI可以帮助您更高效地管理大量设备。例如，您可以使用它列出与特定标签关联的所有设备，或获取特定设备的状态。'
- en: '**Access to advanced features**: The Arduino Cloud CLI can be used to access
    features of the Arduino IoT Cloud that are not available in a web interface. For
    example, you could use it to create a script that checks the status of a device
    every minute and then sends an email alert if the status changes.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**访问高级功能**：Arduino Cloud CLI可以用来访问在网页界面中不可用的Arduino IoT Cloud功能。例如，您可以使用它创建一个脚本，每分钟检查设备状态，如果状态发生变化，则发送电子邮件警报。'
- en: '**Customization**: Being open source, users have the flexibility to customize
    the Arduino Cloud CLI to suit their specific needs and integrate it into their
    workflows.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**定制**：作为开源工具，用户可以根据自己的特定需求定制Arduino Cloud CLI，并将其集成到他们的工作流程中。'
- en: '**Active development and community support**: The tool is actively developed,
    meaning it continually receives updates, new features, and bug fixes. Additionally,
    the presence of a large community can provide assistance and support for users.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**积极开发和社区支持**：该工具正在积极开发中，这意味着它持续接收更新、新功能和错误修复。此外，庞大社区的存在可以为用户提供帮助和支持。'
- en: '**Time and effort savings**: The Arduino Cloud CLI can save time and effort
    in managing IoT projects, making it a valuable resource for developers working
    with Arduino devices.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**节省时间和精力**：Arduino Cloud CLI可以在管理物联网项目中节省时间和精力，对于使用Arduino设备的开发者来说是一个宝贵的资源。'
- en: Overall, the Arduino Cloud CLI is a powerful tool that can be used to automate
    tasks, manage a large number of devices, and access features of the Arduino IoT
    Cloud that are not available in a web interface.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，Arduino Cloud CLI是一个强大的工具，可以用来自动化任务、管理大量设备，以及访问在网页界面中不可用的Arduino IoT Cloud功能。
- en: In this section, we have discussed what the Arduino Cloud CLI is and what the
    benefits of the Arduino Cloud CLI are. In the next section, we will explore how
    to set up API keys and how to use API keys to authenticate the Arduino Cloud CLI
    with the Arduino IoT Cloud.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论了Arduino Cloud CLI是什么以及Arduino Cloud CLI的好处。在下一节中，我们将探讨如何设置API密钥以及如何使用API密钥通过Arduino
    IoT Cloud对Arduino Cloud CLI进行身份验证。
- en: Securing access – unveiling API keys and authentication
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护访问权限 – 揭示API密钥和身份验证
- en: Before getting into the meat of the chapter, we first need to talk about the
    authentication mechanism of the platform. The Arduino IoT Cloud uses a **token
    authentication mechanism** to validate Arduino Cloud CLI requests.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在进入本章的主要内容之前，我们首先需要讨论平台的身份验证机制。Arduino IoT Cloud使用**令牌身份验证机制**来验证Arduino Cloud
    CLI请求。
- en: Before we start to install and test the Arduino Cloud CLI, we need to set up
    the API keys in Arduino Cloud that will provide us with the client ID and secret.
    In older versions of the interface, the API options were under the **Integrations**
    tab, but they have now moved to Arduino Cloud, which is available at [https://cloud.arduino.cc/home/](https://cloud.arduino.cc/home/).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始安装和测试Arduino Cloud CLI之前，我们需要在Arduino Cloud中设置API密钥，这将为我们提供客户端ID和密钥。在旧版本的界面中，API选项位于**集成**标签下，但现在它们已移动到Arduino
    Cloud，可在[https://cloud.arduino.cc/home/](https://cloud.arduino.cc/home/)找到。
- en: After visiting the **Integration** page, click on **API Keys**, and then you
    will be taken to the API page. Click on **CREATE API KEY**. A popup will appear;
    provide a name for the API, and click on the **CONTINUE** button. The wizard that
    appears will take a few seconds to generate the keys, and then a new popup will
    appear displaying the keys, as shown in *Figure 13**.1*.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 访问**集成**页面后，点击**API密钥**，然后您将被带到API页面。点击**创建API密钥**。将弹出一个窗口；为API提供一个名称，然后点击**继续**按钮。出现的向导将花费几秒钟生成密钥，然后会弹出一个新的窗口显示密钥，如图*图13.1*所示。
- en: '![Figure 13.1 – The API keys](img/B19752_13_01.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图13.1 – API密钥](img/B19752_13_01.jpg)'
- en: Figure 13.1 – The API keys
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.1 – API密钥
- en: Copy the **Client ID** and **Client Secret** values by clicking on the copy
    icons – never try to copy by manual selection, as the client secret is very long,
    so clicking on the copy icon is the best option. Save both the **Client ID** and
    **Client Secret** values in a secure location, and then click the checkbox, confirming
    that you have saved your keys. Lastly, click on **DONE**, and you will see your
    API key in the panel – it’s now ready for use.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击复制图标复制**客户端ID**和**客户端密钥**的值 – 永远不要尝试手动选择复制，因为客户端密钥非常长，所以点击复制图标是最好的选择。将**客户端ID**和**客户端密钥**的值保存在安全的位置，然后点击复选框，确认您已保存您的密钥。最后，点击**完成**，您将在面板中看到您的API密钥
    – 现在它已准备好使用。
- en: Important note
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: A single API key is used to give access to all the Things and their variables.
    Having access to all the infrastructure with just one API key is handy, instead
    of having to create separate API keys for each Thing, but you must take care of
    your key! This is a big security risk as, if you were to lose the key, a hacker
    could gain access to your whole account.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 单个API密钥用于访问所有事物及其变量。仅使用一个API密钥即可访问所有基础设施，这很方便，而不是为每个事物创建单独的API密钥，但您必须小心保管您的密钥！这是一个很大的安全风险，因为如果您丢失了密钥，黑客可能会获得对您整个账户的访问权限。
- en: In this section, we created API authentication keys, which consist of a client
    ID and a client secret. This section is most important, as without these keys,
    we can’t execute any command via the Arduino Cloud CLI. In the following section,
    we will install the Arduino Cloud CLI.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们创建了API认证密钥，这些密钥由客户端ID和客户端密钥组成。本节非常重要，因为没有这些密钥，我们无法通过Arduino Cloud CLI执行任何命令。在下一节中，我们将安装Arduino
    Cloud CLI。
- en: Installing the Arduino Cloud CLI
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Arduino Cloud CLI
- en: 'In this section, we will install the Arduino Cloud CLI tool. The Arduino team
    developed the CLI tool for all three major operating systems: macOS, Windows,
    and Linux. You can download the Arduino Cloud CLI tool for your operating system
    from [https://github.com/arduino/arduino-cloud-cli/releases](https://github.com/arduino/arduino-cloud-cli/releases).
    The official Arduino Cloud CLI page can be found at [https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli](https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli);
    here, you can get updated information regarding commands and their usage.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将安装Arduino Cloud CLI工具。Arduino团队为所有三个主要操作系统：macOS、Windows和Linux开发了CLI工具。您可以从[https://github.com/arduino/arduino-cloud-cli/releases](https://github.com/arduino/arduino-cloud-cli/releases)下载适用于您的操作系统的Arduino
    Cloud CLI工具。官方Arduino Cloud CLI页面可在[https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli](https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli)找到；在这里，您可以获取有关命令及其使用的更新信息。
- en: Always try to download the latest and most stable release of the Arduino Cloud
    CLI. After downloading the ZIP file according to your operating system, extract
    the files from it. You will find one executable file named `arduino-cloud-cli`
    and another called `LICENSE.txt`, and can set up Environmental variables for an
    `arduino-cloud-cli` executable file in your operating system, which will help
    you to execute `arduino-cloud-cli` in the terminal without specifying the location
    of the `arduino-cloud-cli` folder.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 总是尝试下载Arduino Cloud CLI的最新和最稳定的版本。根据您的操作系统下载ZIP文件后，从中提取文件。您将找到一个名为`arduino-cloud-cli`的可执行文件，另一个名为`LICENSE.txt`，您可以在操作系统中为`arduino-cloud-cli`可执行文件设置环境变量，这将帮助您在终端中执行`arduino-cloud-cli`而无需指定`arduino-cloud-cli`文件夹的位置。
- en: 'Just open up the terminal and enter the following command:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 只需打开终端并输入以下命令：
- en: '[PRE0]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Then, you will see the following output on your terminal (*Figure 13**.2*).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您将在终端上看到以下输出（*图13.2*）。
- en: '![Figure 13.2 – The Arduino Cloud CLI terminal](img/B19752_13_02.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图13.2 – Arduino Cloud CLI终端](img/B19752_13_02.jpg)'
- en: Figure 13.2 – The Arduino Cloud CLI terminal
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.2 – Arduino Cloud CLI终端
- en: This simply shows you how to use the Arduino Cloud CLI with different parameters,
    as we didn’t specify any parameters during the command execution.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是简单地展示了如何使用Arduino Cloud CLI与不同的参数一起使用，因为我们没有在命令执行期间指定任何参数。
- en: 'Now, it’s time to initiate the Arduino Cloud CLI authentication with Arduino
    Cloud, using the API keys that we generated in the previous section. Type the
    following command into the terminal:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候使用我们在上一节中生成的API密钥，通过Arduino Cloud CLI来初始化Arduino Cloud的认证了。请在终端中输入以下命令：
- en: '[PRE1]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: After executing the preceding command, you will be asked for your client ID
    and client secret, respectively. Finally, you will be asked for your organization
    ID, which is not mandatory, and you can leave this empty, as shown in *Figure
    13**.3*.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 执行上述命令后，您将被要求输入您的客户端ID和客户端密钥，最后您将被要求输入您的组织ID，这不是强制性的，您可以将其留空，如图13.3所示。
- en: '![Figure 13.3 – The Arduino Cloud CLI authentication process with Arduino Cloud](img/B19752_13_03.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图13.3 – 使用Arduino Cloud CLI与Arduino Cloud的认证过程](img/B19752_13_03.jpg)'
- en: Figure 13.3 – The Arduino Cloud CLI authentication process with Arduino Cloud
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.3 – 使用Arduino Cloud CLI与Arduino Cloud的认证过程
- en: After successful authentication, you will see a success message on the terminal,
    as shown in *Figure 13**.3*. Congratulations! You are now ready to execute the
    commands on the terminal and able to perform operations on the Arduino IoT Cloud
    via commands.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 成功认证后，您将在终端看到成功消息，如图13.3所示。恭喜！您现在可以执行终端上的命令，并通过命令在Arduino IoT Cloud上执行操作。
- en: In this section, we downloaded the `arduino-cloud-cli` file and installed it
    on our operating system, and we also initialized the authentication process for
    the `arduino-cloud-cli` tool with the Arduino IoT Cloud. In the next section,
    we will start playing with devices using the command line.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们下载了`arduino-cloud-cli`文件并在我们的操作系统上安装了它，我们还使用Arduino IoT Cloud初始化了`arduino-cloud-cli`工具的认证过程。在下一节中，我们将开始使用命令行来玩设备。
- en: Interacting with devices
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与设备交互
- en: In this section, we will get hands-on and practical with devices. We will perform
    create, list, delete, tag, and untag operations on a device, as well as list all
    the devices and show all the parameters of specific devices. Open up the command
    terminal, and then we’ll execute the commands in the following sections.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将通过设备进行实际操作。我们将对设备执行创建、列出、删除、标记和取消标记操作，以及列出所有设备并显示特定设备的所有参数。打开命令终端，然后我们将执行以下章节中的命令。
- en: Creating a device
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建设备
- en: 'Firstly, we will start by creating a device. The documentation on device creation
    can be found at [https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#device](https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#device).
    Before you execute the command, connect your development board to your computer
    and find out the port number and FQBN for your device from the documentation page.
    The following is the syntax of the `device` `create` command:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将创建一个设备。有关设备创建的文档可以在[https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#device](https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#device)找到。在您执行命令之前，请将您的开发板连接到您的电脑，并从文档页面中找出您的设备的端口号和FQBN。以下为`device`
    `create`命令的语法：
- en: '[PRE2]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'I attached the MKR Wi-Fi 1010 to my computer, which is available on port `/dev/cu.usbmodem101`,
    and its FQBN is `arduino:samd:mkrwifi1010`. Therefore, the following will be my
    command:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我将MKR Wi-Fi 1010连接到我的电脑，该电脑在端口`/dev/cu.usbmodem101`上可用，其FQBN为`arduino:samd:mkrwifi1010`。因此，以下是我的命令：
- en: '[PRE3]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: After executing the preceding command, you will get the following output, which
    shows the device has been successfully created (*Figure 13**.4*).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 执行上述命令后，您将看到以下输出，显示设备已成功创建（*图13**.4*）。
- en: '![Figure 13.4 – Device creation using arduino-cloud-cli](img/B19752_13_04.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![图13.4 – 使用arduino-cloud-cli创建设备](img/B19752_13_04.jpg)'
- en: Figure 13.4 – Device creation using arduino-cloud-cli
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.4 – 使用arduino-cloud-cli创建设备
- en: After creating the device, the terminal will show the device name, ID, board,
    serial number, and FQBN. Just imagine how easy it would be to attach dozens of
    development boards to the Arduino IoT Cloud using the command line, compared to
    a graphical user interface. The Arduino Cloud CLI is also able to create **LoRaWAN**
    devices as well as ESP32/ESP8266 devices via the CLI.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 创建设备后，终端将显示设备名称、ID、板、序列号和FQBN。想象一下，与图形用户界面相比，使用命令行将数十个开发板连接到Arduino IoT Cloud是多么容易。Arduino
    Cloud CLI还能够通过CLI创建**LoRaWAN**设备和ESP32/ESP8266设备。
- en: In this subsection, we created a device in the Arduino IoT Cloud using the command
    line. In the following subsection, we will explore how to list the device.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在本小节中，我们使用命令行在Arduino IoT云平台上创建了一个设备。在下一小节中，我们将探讨如何列出设备。
- en: Listing devices
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列出设备
- en: 'In this section, we will list all the devices. *Listing* devices means displaying
    all the devices with their properties. The documentation on listing devices is
    available at [https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#list-devices](https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#list-devices).
    The following is a very simple command to list all the devices:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将列出所有设备。*列出*设备意味着显示所有设备及其属性。列出设备的文档可在[https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#list-devices](https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#list-devices)找到。以下为列出所有设备的简单命令：
- en: '[PRE4]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: After executing the preceding command, we will see a complete list of devices,
    as shown in the following figure.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 执行上述命令后，我们将看到设备列表的完整列表，如下图所示。
- en: '![Figure 13.5 – The device list command](img/B19752_13_05.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图13.5 – 设备列表命令](img/B19752_13_05.jpg)'
- en: Figure 13.5 – The device list command
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.5 – 设备列表命令
- en: In the output, we can see the device name, ID, board, FQBN, serial number, and
    tags. Here, the ID is very important, as it will be used in the following commands
    for device deletion, as well as for tag creation and deletion. In this subsection,
    we have seen how to list the devices, and in the next subsection, we will explore
    how to delete a device using its ID.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在输出中，我们可以看到设备名称、ID、板、FQBN、序列号和标签。在这里，ID非常重要，因为它将在后续的设备删除、标签创建和删除命令中使用。在本小节中，我们已看到如何列出设备，在下一小节中，我们将探讨如何使用设备ID删除设备。
- en: Deleting a device
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除设备
- en: 'In this section, we will explore how we can delete a device using the device
    ID. The documentation for deleting devices is available at [https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#delete-a-device](https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#delete-a-device).
    The following is the command syntax for device deletion:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨如何使用设备ID删除设备。删除设备的文档可在[https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#delete-a-device](https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#delete-a-device)找到。以下为设备删除的命令语法：
- en: '[PRE5]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'According to the preceding command syntax, we need a device ID for deletion.
    You can retrieve the device ID by using the `device` `list` command:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 根据上述命令语法，我们需要一个设备ID来进行删除。您可以通过使用`device` `list`命令来检索设备ID：
- en: '[PRE6]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: After successfully deleting the device, you will not see any error message;
    otherwise, you will see a `401 error` on the screen.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功删除设备后，您将不会看到任何错误信息；否则，您将在屏幕上看到`401错误`。
- en: '![Figure 13.6 – The device delete command](img/B19752_13_06.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图13.6 – 设备删除命令](img/B19752_13_06.jpg)'
- en: Figure 13.6 – The device delete command
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.6 – 设备删除命令
- en: '*Figure 13**.6* shows the completed command for device deletion, and there
    is no error on the screen, which means the device has been deleted successfully.
    In this subsection, we discussed the `delete` command. In the upcoming subsection,
    we will tag and untag a device.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '*图13**.6* 展示了设备删除的完整命令，屏幕上没有错误信息，这意味着设备已成功删除。在本小节中，我们讨论了`delete`命令。在接下来的小节中，我们将对设备进行标记和取消标记。'
- en: Tagging and untagging a device
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标记和取消标记设备
- en: 'In this section, we will explore how we can tag and untag a device using the
    device ID. The documentation for tagging a device is available at [https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#tag-device](https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#tag-device),
    and the documentation for untagging a device is available at [https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#untag-device](https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#untag-device).
    The following is the command syntax to tag a device:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨如何使用设备ID对设备进行标记和取消标记。设备标记的文档可在[https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#tag-device](https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#tag-device)找到，设备取消标记的文档可在[https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#untag-device](https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#untag-device)找到。以下为标记设备的命令语法：
- en: '[PRE7]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The following is the command syntax to untag a device:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 以下为取消标记设备的命令语法：
- en: '[PRE8]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: You might ask the question, why do we need a tag for a device? Let’s say you
    have a generic product for warehouse monitoring, and you have deployed this product
    in different organizations and different rooms. Now, the issue is that it’s very
    difficult to assign the organization name and location in the **Device Name**
    field. So, an optimal solution is tagging. You can use tags as many times as you
    want. A tag has two options – one is a key and the other is a value.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会问，为什么需要一个标签来表示设备？假设你有一个通用的仓库监控产品，并且你在不同的组织和不同的房间中部署了该产品。现在的问题是，在**设备名称**字段中分配组织名称和位置非常困难。因此，一个最佳解决方案是使用标签。你可以根据需要多次使用标签。标签有两个选项——一个是键，另一个是值。
- en: 'In the following example, we will attach two tags – one for the organization
    name and another for the location. Pick a device ID by using the `device list`
    command to attach the tags. The following is the command to attach tags to a device:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们将附加两个标签——一个用于组织名称，另一个用于位置。使用`device list`命令选择设备ID以附加标签。以下是将标签附加到设备的命令：
- en: '[PRE9]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'According to the following command syntax, we need a device ID to remove the
    tag from the device. You can fetch the device ID by using the `device list` command.
    The following command is used to remove the tag from the device:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 根据以下命令语法，我们需要设备ID来从设备中删除标签。你可以使用`device list`命令获取设备ID。以下是从设备中删除标签的命令：
- en: '[PRE10]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Here, the command is a little different, as we have used `delete-tags` and `-k`
    to specify the tag key. If you want to remove multiple tags, then use a comma
    to separate the keys.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，命令略有不同，因为我们使用了`delete-tags`和`-k`来指定标签键。如果你想删除多个标签，那么使用逗号来分隔键。
- en: In this and the preceding subsections, we performed various operations on devices
    using commands, including ones for device creation, listing devices, device deletion,
    tagging, and untagging. In the next section, we will explore how to practically
    perform operations on Things.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节和前面的子节中，我们使用命令对设备执行了各种操作，包括设备创建、列出设备、设备删除、标签和取消标签。在下一节中，我们将探讨如何实际地对事物执行操作。
- en: Engaging with Things
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 与事物互动
- en: A Thing is one of the most important elements in the Arduino IoT Cloud, which
    acts as a separate container holding all of its ingredients, such as cloud variables,
    the device, a sketch for the device, and the device’s network configuration. In
    this section, we will try a range of different operations via commands, such as
    extracting a template from a Thing, creating a Thing from a template, making a
    clone of a Thing, and deleting a Thing.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 事物是Arduino IoT Cloud中最重要元素之一，它作为一个独立的容器，包含所有组成部分，如云变量、设备、设备的草图以及设备的网络配置。在本节中，我们将通过命令尝试一系列不同的操作，例如从事物中提取模板、从模板创建事物、克隆事物以及删除事物。
- en: Extracting a template from a Thing
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从事物中提取模板
- en: In the Arduino Cloud CLI, we deal with commands and provide different parameters
    to perform different types of operations. Therefore, it is difficult to create
    a new Thing via the command line, as it will make it more complex to pass different
    parameters, such as cloud variables and network configurations.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在Arduino Cloud CLI中，我们处理命令并提供不同的参数来执行不同类型的操作。因此，通过命令行创建新的事物会更复杂，因为它将使传递不同参数（如云变量和网络配置）变得更加复杂。
- en: To solve this issue, the Arduino team introduced the concept of template extraction
    from a Thing. For example, say you want to deploy hundreds of environmental monitoring
    nodes. It’s difficult to create hundreds of Things via the Arduino graphical user
    interface and to create a long command for Thing creation that includes all the
    information regarding the Thing. Therefore, Arduino introduced the template extraction
    technique. Firstly, we will create a Thing via the Arduino graphical user interface,
    and then we will extract its template via the command line. Then, using the template,
    we will create the Thing in the Arduino IoT Cloud via the command line, as the
    Arduino Cloud CLI does not allow you to create a Thing from scratch. You can find
    out more about Thing template extraction in the official documentation at [https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#extract-thing-template](https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#extract-thing-template).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，Arduino团队引入了从实体中提取模板的概念。例如，假设你想部署数百个环境监测节点。通过Arduino图形用户界面创建数百个实体并创建一个包含有关实体的所有信息的长命令是困难的。因此，Arduino引入了模板提取技术。首先，我们将通过Arduino图形用户界面创建一个实体，然后我们将通过命令行提取其模板。然后，使用模板，我们将在Arduino
    IoT Cloud中通过命令行创建实体，因为Arduino Cloud CLI不允许你从头创建实体。你可以在官方文档中了解更多关于实体模板提取的信息，文档地址为[https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#extract-thing-template](https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#extract-thing-template)。
- en: 'The following is the command syntax for template extraction. With this command,
    we need to provide a Thing ID, with which the command will fetch the template
    of the Thing. Then, we need to provide the format for the template file – either
    JSON or YAML:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 以下为模板提取的命令语法。使用此命令，我们需要提供一个实体ID，该命令将获取实体的模板。然后，我们需要提供模板文件的格式——要么是JSON，要么是YAML：
- en: '[PRE11]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'For the Thing ID, either visit the Arduino IoT Cloud to find it or refer to
    the upcoming subsections, in which we will show you how to list Things, which
    provides the Thing name, ID, and so on, so you can also retrieve the Thing ID
    from the output. Now, we will assign the format; we want the template output in
    JSON format, so I used JSON here:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 对于实体ID，你可以访问Arduino IoT Cloud以找到它，或者参考即将到来的小节，其中我们将向你展示如何列出实体，这提供了实体名称、ID等信息，因此你也可以从输出中检索实体ID。现在，我们将指定格式；我们希望模板输出为JSON格式，所以我这里使用了JSON：
- en: '[PRE12]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: After executing the command, we will get the template output on the screen in
    JSON format, as shown in *Figure 13**.7*.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 执行命令后，我们将在屏幕上以JSON格式获得模板输出，如图*图13.7*所示。
- en: '![Figure 13.7 – Extracting the Thing template](img/B19752_13_07.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![图13.7 – 提取实体模板](img/B19752_13_07.jpg)'
- en: Figure 13.7 – Extracting the Thing template
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.7 – 提取实体模板
- en: Our Thing template shows all the information regarding cloud variables. Copy
    the text and save it in a file, which will be used in the following section for
    Thing creation.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的实体模板显示了有关云变量的所有信息。复制文本并将其保存到文件中，该文件将在下一节用于实体创建。
- en: Creating a Thing
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建实体
- en: 'After extracting the Thing template, we will now start to create the Thing.
    The documentation on Thing creation can be found at [https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#create-things](https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#create-things).
    The following is the syntax of the Thing creation command, which takes two parameters.
    Firstly, it will take the name, and secondly, it will take the template filename
    for the Thing creation, which contains the Thing template in JSON format that
    we saved in the previous section:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在提取了实体模板之后，我们现在将开始创建实体。有关实体创建的文档可以在[https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#create-things](https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#create-things)找到。以下为实体创建命令的语法，该命令接受两个参数。首先，它将接受名称，其次，它将接受用于实体创建的模板文件名，该文件名包含我们在上一节中保存的JSON格式的实体模板：
- en: '[PRE13]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Here, I have provided a Thing name, `EnvSense101`, and in the previous section,
    I saved the JSON template in the file named `EnvSenseTemplate.json`. Then, we
    provide the name with the `-n` parameter and the template file with the `-``t`
    parameter:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我已提供了一个实体名称，`EnvSense101`，在上一节中，我将JSON模板保存到了名为`EnvSenseTemplate.json`的文件中。然后，我们使用`-n`参数提供名称，使用`-t`参数提供模板文件：
- en: '[PRE14]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: After executing the preceding command, you will get the following output for
    successful Thing creation (*Figure 13**.8*).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 执行前面的命令后，你将获得以下成功创建实体的输出（*图13.8*）。
- en: '![Figure 13.8 – Thing creation using arduino-cloud-cli](img/B19752_13_08.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![图13.8 – 使用arduino-cloud-cli创建设备](img/B19752_13_08.jpg)'
- en: Figure 13.8 – Thing creation using arduino-cloud-cli
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.8 – 使用arduino-cloud-cli创建设备
- en: After creating the Thing, the terminal will show the Thing name, ID, device
    ID (which is empty right now, but in the upcoming sections, we will associate
    the device with this Thing), and variable name.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 创建设备后，终端将显示设备名称、ID、设备ID（目前为空，但在接下来的章节中，我们将将与该设备关联的设备与该设备关联），以及变量名称。
- en: In this subsection, we created a Thing in the Arduino IoT Cloud using the command
    line. In the following section, we will explore how to clone the Thing for bulk
    creations.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在本小节中，我们使用命令行在Arduino IoT云中创建了一个设备。在下一节中，我们将探讨如何克隆设备以进行批量创建。
- en: Cloning a Thing
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 克隆设备
- en: 'After creating a Thing from a template, we will now explore how we can use
    the clone operation for large-scale deployments. The documentation on the Thing
    clone can be found at [https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#clone-things](https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#clone-things).
    The following is the syntax of the `thing clone` command, which will take two
    parameters. Firstly, it will take a name, and secondly, it will take a Thing ID:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 从模板创建设备后，我们现在将探讨如何使用克隆操作进行大规模部署。有关设备克隆的文档可在[https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#clone-things](https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#clone-things)找到。以下为`thing
    clone`命令的语法，它将接受两个参数。首先，它将接受一个名称，其次，它将接受一个设备ID：
- en: '[PRE15]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Here, I have provided a Thing name, `EnvSense102`, and in the previous section,
    we created the Thing, so I can get its ID from the terminal, as shown in *Figure
    13**.8* (use your own Thing ID in the command line). Then, provide the name with
    an `-n` parameter and the Thing ID with a `-``c` parameter:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我提供了一个设备名称，`EnvSense102`，在上一节中，我们创建了该设备，因此我可以从终端获取其ID，如图*图13.8*所示（在命令行中使用您自己的设备ID）。然后，使用`-n`参数提供名称，使用`-c`参数提供设备ID：
- en: '[PRE16]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: After executing the preceding command, you will get the following output for
    a successful Thing clone (*Figure 13**.9*).
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 执行上述命令后，您将获得以下输出以成功克隆设备（*图13.9*）。
- en: '![Figure 13.9 – A Thing clone using arduino-cloud-cli](img/B19752_13_09.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![图13.9 – 使用arduino-cloud-cli进行设备克隆](img/B19752_13_09.jpg)'
- en: Figure 13.9 – A Thing clone using arduino-cloud-cli
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.9 – 使用arduino-cloud-cli进行设备克隆
- en: This is the output of a successful Thing clone by the Arduino Cloud CLI. After
    cloning the Thing, the terminal will show the Thing name, ID, device ID (which
    is empty right now, but in the upcoming section, we will associate the device
    with this Thing), and variable name. You can see how easy it is to create hundreds
    of Things with just the `clone` command. Here, you can just create a batch script,
    which will only change the name of the Thing by using the `for` loop and create
    hundreds of Things in just a few minutes.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Arduino Cloud CLI成功克隆设备后的输出。克隆设备后，终端将显示设备名称、ID、设备ID（目前为空，但在接下来的章节中，我们将将与该设备关联的设备与该设备关联），以及变量名称。您可以看到，仅使用`clone`命令就可以轻松创建数百个设备。在这里，您只需创建一个批处理脚本，通过使用`for`循环只更改设备名称，就可以在几分钟内创建数百个设备。
- en: In this subsection, we learned how to clone a Thing in the Arduino IoT Cloud
    using the command line. In the following section, we will explore how to list
    Things.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在本小节中，我们学习了如何使用命令行在Arduino IoT云中克隆设备。在下一节中，我们将探讨如何列出设备。
- en: Listing Things
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列出设备
- en: 'In this section, we will list all the Things. The documentation on listing
    Things is available at [https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#list-things](https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#list-things).
    The following is a very simple command to list all the Things:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将列出所有设备。有关列出设备的文档可在[https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#list-things](https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#list-things)找到。以下是一个列出所有设备的非常简单的命令：
- en: '[PRE17]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: After executing the preceding command, we will see a complete list of Things,
    as shown in the following figure.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 执行上述命令后，我们将看到设备的完整列表，如图下所示。
- en: '![Figure 13.10 – The thing list command](img/B19752_13_10.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![图13.10 – 设备列表命令](img/B19752_13_10.jpg)'
- en: Figure 13.10 – The thing list command
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.10 – 设备列表命令
- en: In the output, we can see the Thing name, ID, device, and tags. Again, the ID
    is very important, as it will be used in the following commands for Thing deletion,
    as well as for tag creation and deletion. In the preceding sections, we also used
    the ID for Thing template extraction and creation, as well as Thing cloning.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在输出中，我们可以看到 Thing 名称、ID、设备和标签。再次强调，ID 非常重要，因为它将在以下命令中用于 Thing 删除，以及标签创建和删除。在前面的章节中，我们也使用了
    ID 进行 Thing 模板提取和创建，以及 Thing 克隆。
- en: 'The Arduino Cloud CLI also provides different parameters to get more detailed
    output on the terminal, such as a variable list along with a list of Things. We
    can attach the `-s` parameter to the Thing, and we can also list a Thing by providing
    a device ID as well as list a series of Things by providing a Thing ID. Here,
    I want to explore how we can get a variable list along with Things. The following
    is a simple command to list cloud variables:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino Cloud CLI 还提供了不同的参数，以便在终端上获取更详细的输出，例如变量列表以及 Thing 列表。我们可以将 `-s` 参数附加到
    Thing 上，也可以通过提供设备 ID 来列出 Thing，还可以通过提供 Thing ID 来列出一系列的 Thing。在这里，我想探讨如何获取变量列表以及
    Thing。以下是一个列出云变量的简单命令：
- en: '[PRE18]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: After executing the preceding command, you will see the output shown in *Figure
    13**.11*.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 执行前面的命令后，你将看到 *图 13.11* 中所示的输出。
- en: '![Figure 13.11 – The thing list command with variables](img/B19752_13_11.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.11 – 带变量的 thing 列表命令](img/B19752_13_11.jpg)'
- en: Figure 13.11 – The thing list command with variables
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.11 – 带变量的 thing 列表命令
- en: 'Here, you can see all the cloud variables along with the Thing names, but it
    looks a little bit complicated. Now, we will try to list a single Thing with cloud
    variables. The following is the command syntax to list a Thing with cloud variables.
    It will take two parameters as input – one Thing ID and an `-``s` parameter:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以看到所有云变量以及 Thing 名称，但看起来有点复杂。现在，我们将尝试列出带有云变量的单个 Thing。以下为列出带有云变量的 Thing
    的命令语法。它将接受两个参数作为输入 – 一个 Thing ID 和一个 `-s` 参数：
- en: '[PRE19]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Execute the preceding command, and you will see the complete and readable output
    shown in *Figure 13**.12*.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 执行前面的命令，你将看到 *图 13.12* 中所示的完整且可读的输出。
- en: '![Figure 13.12 – Displaying a single Thing with cloud variables](img/B19752_13_12.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.12 – 使用云变量显示单个 Thing](img/B19752_13_12.jpg)'
- en: Figure 13.12 – Displaying a single Thing with cloud variables
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.12 – 使用云变量显示单个 Thing
- en: 'Now, it’s time to explore how we can find a Thing by using a device ID. The
    following is a simple command to retrieve a Thing based on a device ID:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候探索如何使用设备 ID 来查找一个 Thing。以下是一个简单的命令，用于根据设备 ID 获取一个 Thing：
- en: '[PRE20]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: After executing the preceding command, we will get specific Thing data using
    the device ID, as well as its cloud variables, as we used the `-s` parameter in
    the command (as shown in *Figure 13**.13*).
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 执行前面的命令后，我们将使用设备 ID 获取特定的 Thing 数据，以及其云变量，正如我们在命令中使用了 `-s` 参数（如 *图 13.13* 所示）。
- en: '![Figure 13.13 – Displaying a single Thing based on a device ID, with cloud
    variables](img/B19752_13_13.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.13 – 基于设备 ID 显示单个 Thing，包含云变量](img/B19752_13_13.jpg)'
- en: Figure 13.13 – Displaying a single Thing based on a device ID, with cloud variables
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.13 – 基于设备 ID 显示单个 Thing，包含云变量
- en: In this subsection, we explored how to list Things by using different parameters.
    In the next subsection, we will explore how to delete a Thing.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在本小节中，我们探讨了如何使用不同的参数来列出 Thing。在下一个小节中，我们将探讨如何删除一个 Thing。
- en: Deleting a Thing
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除一个 Thing
- en: 'In this section, we will explore how to delete a Thing using a Thing ID. The
    documentation for deleting a Thing is available at [https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#delete-things](https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#delete-things).
    The following is the command syntax for Thing deletion:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨如何使用 Thing ID 删除一个 Thing。有关删除 Thing 的文档可在 [https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#delete-things](https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#delete-things)
    查找。以下为删除 Thing 的命令语法：
- en: '[PRE21]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'According to the command syntax, we need a Thing ID for deletion. You can fetch
    the Thing ID by using the `thing` `list` command:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 根据命令语法，我们需要一个 Thing ID 用于删除。你可以通过使用 `thing list` 命令来获取 Thing ID：
- en: '[PRE22]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: After the successful deletion of the device, you will not see an error message;
    otherwise, you will get a `401 error` message on the screen.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在设备成功删除后，你将不会看到错误消息；否则，你将在屏幕上得到一个 `401` 错误消息。
- en: "![Figure 13.14 – The Thing delet\uFEFFe command](img/B19752_13_14.jpg)"
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.14 – Thing 删除命令](img/B19752_13_14.jpg)'
- en: Figure 13.14 – The Thing delete command
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.14 – Thing 删除命令
- en: '*Figure 13**.14* shows the complete command for Thing deletion, and there is
    no error on the screen, which means the Thing has been deleted successfully. In
    this subsection, we discussed the `delete` command, and in the upcoming subsection,
    we will explore how to associate the device with a Thing.'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 13.14* 展示了 Thing 删除的完整命令，屏幕上没有错误，这意味着 Thing 已成功删除。在本小节中，我们讨论了 `delete` 命令，在接下来的小节中，我们将探讨如何将设备与
    Thing 关联。'
- en: Associating a device with a Thing
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将设备与 Thing 关联
- en: In the previous Thing subsections, we extracted the Thing template, created
    the Thing from that template, and also performed Thing cloning operations. However,
    throughout all the processes, we didn’t associate a device with a Thing, and without
    a device, a Thing is just an empty JAR that is not capable of performing any operation.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的 Thing 小节中，我们提取了 Thing 模板，从该模板创建了 Thing，并也执行了 Thing 克隆操作。然而，在整个过程中，我们没有将设备与
    Thing 关联，没有设备，Thing 只是一个空 JAR 文件，无法执行任何操作。
- en: 'In this subsection, we will explore how to attach the device with a Thing by
    using a device ID and a Thing ID. The documentation for associating a device with
    a Thing is available at [https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#bind-thing-to-device](https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#bind-thing-to-device).
    The following is the simple command syntax to bind a device with a Thing in the
    Arduino IoT Cloud:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在本小节中，我们将探讨如何通过使用设备 ID 和 Thing ID 来将设备与 Thing 相关联。有关将设备与 Thing 关联的文档可在 [https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#bind-thing-to-device](https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#bind-thing-to-device)
    查找。以下是在 Arduino IoT Cloud 中将设备与 Thing 关联的简单命令语法：
- en: '[PRE23]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Here, you can get a specific device ID by using the `arduino-cloud-cli device
    list` command and a Thing ID with `arduino-cloud-cli` `thing list`:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，你可以使用 `arduino-cloud-cli device list` 命令获取特定的设备 ID，以及使用 `arduino-cloud-cli`
    `thing list` 获取 Thing ID：
- en: '[PRE24]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In the preceding command, we have assigned a Thing ID by using `-i` and a device
    ID with the `-d` parameter. Execute the preceding command, and you will see the
    output shown in *Figure 13**.15*.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的命令中，我们通过 `-i` 参数分配了一个 Thing ID，并通过 `-d` 参数分配了一个设备 ID。执行前面的命令，你将看到 *图 13.15*
    中所示的输出。
- en: '![Figure 13.15 – Device binding with Thing](img/B19752_13_15.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.15 – 使用 Thing 进行设备绑定](img/B19752_13_15.jpg)'
- en: Figure 13.15 – Device binding with Thing
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.15 – 使用 Thing 进行设备绑定
- en: '*Figure 13**.15* shows a device successfully binding with a Thing. To confirm,
    we used the `thing list` command with the `-i` parameter to verify the device
    ID. In both the command as well as in the `thing list` output, the device ID is
    the same.'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 13.15* 展示了一个设备成功与 Thing 绑定的情况。为了确认，我们使用了带有 `-i` 参数的 `thing list` 命令来验证设备
    ID。在命令以及 `thing list` 输出中，设备 ID 是相同的。'
- en: In this subsection, we explored how to bind/associate a device with a Thing.
    In the next subsection, we will discuss how to assign and remove tags from a Thing.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在本小节中，我们探讨了如何将/关联设备与 Thing。在下一小节中，我们将讨论如何为 Thing 分配和移除标签。
- en: Tagging and untagging a Thing
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标记和取消标记 Thing
- en: 'In this section, we will explore how we can tag and untag a Thing using the
    Thing ID. The documentation for tagging a Thing is available at [https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#tag-a-thing](https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#tag-a-thing),
    and for untagging a Thing, documentation is available at [https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#untag-a-thing](https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#untag-a-thing).
    The following is the command syntax to tag a Thing:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨如何使用 Thing ID 来标记和取消标记 Thing。有关标记 Thing 的文档可在 [https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#tag-a-thing](https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#tag-a-thing)
    查找，而对于取消标记 Thing，文档可在 [https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#untag-a-thing](https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#untag-a-thing)
    查找。以下是为 Thing 标记的命令语法：
- en: '[PRE25]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The following is the command syntax to untag a Thing:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是不标记 Thing 的命令语法：
- en: '[PRE26]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'You might question the necessity of assigning a tag to a Thing. Consider this
    scenario. You have a versatile product designed for monitoring warehouses, and
    you’ve deployed this product in various organizations and different rooms within
    those organizations. The challenge arises when attempting to incorporate the organization’s
    name and location directly into the **Device Name** field, which can be quite
    cumbersome. In this context, a more efficient solution presents itself through
    the use of tags. Tags can be applied without limitations, much like when we previously
    established tags for devices. Each tag consists of two components: a key and a
    corresponding value.'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会质疑给一个事物分配标签的必要性。考虑以下场景。你有一个适用于仓库监控的多功能产品，并且已经在多个组织和这些组织内的不同房间中部署了该产品。当尝试将组织的名称和位置直接输入到**设备名称**字段时，会遇到挑战，这可能会相当繁琐。在这种情况下，通过使用标签，可以提供一个更有效的解决方案。标签可以无限制地应用，就像我们之前为设备建立标签时一样。每个标签由两个部分组成：一个键和一个相应的值。
- en: 'So, in the following example, we will attach two tags – one for the organization
    name and another for the location. Pick the Thing ID by using the `thing list`
    command to attach tags. The following is the command to attach tags to a Thing:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在以下示例中，我们将附加两个标签——一个用于组织名称，另一个用于位置。使用`thing list`命令选择事物ID来附加标签。以下是将标签附加到事物的命令：
- en: '[PRE27]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: After executing the preceding command, you can verify the tags by using the
    `thing list` command, as shown in *Figure 13**.16*.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 执行前面的命令后，你可以使用`thing list`命令来验证标签，如图*图13.16*所示。
- en: '![Figure 13.16 – Assigning tags to a Thing](img/B19752_13_16.jpg)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![图13.16 – 为事物分配标签](img/B19752_13_16.jpg)'
- en: Figure 13.16 – Assigning tags to a Thing
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.16 – 为事物分配标签
- en: '*Figure 13**.16* shows the full command that is used to assign tags to a Thing,
    and it also clearly shows the `thing list` command we used to verify the tags.'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '*图13.16*显示了用于为事物分配标签的完整命令，并且它还清楚地显示了用于验证标签的`thing list`命令。'
- en: 'Now, it’s time to explore how we can remove a tag from a Thing. Previously,
    we saw the syntax to untag a tag from a Thing. The following is the complete command
    that will remove the location tag from a specific Thing:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们来探讨如何从事物中移除标签。之前，我们看到了从事物中取消标签的语法。以下是将位置标签从特定事物中移除的完整命令：
- en: '[PRE28]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: After executing the preceding command, you can verify the tags by using the
    `thing list` command, as shown in *Figure 13**.17*.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 执行前面的命令后，你可以使用`thing list`命令来验证标签，如图*图13.16*所示。
- en: '![Figure 13.17 – Deleting a tag from a Thing](img/B19752_13_17.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![图13.17 – 从事物中删除标签](img/B19752_13_17.jpg)'
- en: Figure 13.17 – Deleting a tag from a Thing
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.17 – 从事物中删除标签
- en: '*Figure 13**.17* shows the full command that is used to delete a tag from a
    Thing, and it also clearly shows the `thing list` command we used to verify the
    tags.'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '*图13.17*显示了用于从事物中删除标签的完整命令，并且它还清楚地显示了用于验证标签的`thing list`命令。'
- en: Here, the command is a little different, as we have used `delete-tags` and `-k`
    to specify the tag key. If you want to remove multiple tags, then use a comma
    to separate the keys. In the following section, we will explore how to work with
    dashboards using the Arduino Cloud CLI.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，命令略有不同，因为我们使用了`delete-tags`和`-k`来指定标签键。如果你想删除多个标签，那么使用逗号来分隔键。在下一节中，我们将探讨如何使用Arduino
    Cloud CLI与仪表板一起工作。
- en: Crafting dashboards – unleashing potential via the command line
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建仪表板 – 通过命令行释放潜力
- en: Dashboards are the most important ingredient in the Arduino IoT Cloud pertaining
    to **data visualization**. In the Arduino Cloud CLI, we have dashboard-specific
    commands to perform operations on dashboards, such as extracting a template from
    an existing dashboard, viewing a list of dashboards, deleting the dashboard, and
    creating a dashboard from an extracted template. Firstly, we will start with dashboard
    template extraction.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 仪表板是Arduino IoT Cloud中与**数据可视化**最重要的组成部分。在Arduino Cloud CLI中，我们有针对仪表板的特定命令来执行操作，例如从现有仪表板中提取模板、查看仪表板列表、删除仪表板以及从提取的模板中创建仪表板。首先，我们将从仪表板模板提取开始。
- en: Extracting a template from a dashboard
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从仪表板中提取模板
- en: In the Arduino Cloud CLI, we deal with commands and provide different parameters
    to perform various operations. Therefore, it is difficult to create a new dashboard
    via the command line, as it will make it more complex to guide the Arduino IoT
    Cloud about widgets and attach these widgets with cloud variables via commands.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在Arduino Cloud CLI中，我们处理命令并提供不同的参数以执行各种操作。因此，通过命令行创建新的仪表盘是困难的，因为它会使指导Arduino
    IoT Cloud关于小部件以及通过命令将这些小部件与云变量关联变得更加复杂。
- en: To solve this issue, the Arduino team introduced the concept of template extraction
    from a dashboard. For example, if you want to deploy hundreds of environmental
    monitoring nodes, it’s difficult to create hundreds of dashboards via the Arduino
    graphical user interface. It’s also difficult to create long commands for dashboard
    creation, which includes all the information regarding the dashboard. So, Arduino
    introduced the template extraction technique. Firstly, we will create the dashboard
    via the Arduino graphical user interface, and then we will extract its template
    via the command line. Then, using a template, we will create dashboards in the
    Arduino IoT Cloud via the command line, as the Arduino Cloud CLI does not allow
    you to create a dashboard from scratch. The official documentation for dashboard
    template extraction is available at [https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#extract-dashboard-template](https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#extract-dashboard-template).
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，Arduino团队引入了从仪表盘中提取模板的概念。例如，如果您想部署数百个环境监测节点，通过Arduino图形用户界面创建数百个仪表盘是困难的。创建包含有关仪表盘所有信息的长命令也很困难。因此，Arduino引入了模板提取技术。首先，我们将通过Arduino图形用户界面创建仪表盘，然后我们将通过命令行提取其模板。然后，使用模板，我们将在Arduino
    IoT Cloud中通过命令行创建仪表盘，因为Arduino Cloud CLI不允许您从头创建仪表盘。仪表盘模板提取的官方文档可在 [https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#extract-dashboard-template](https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#extract-dashboard-template)
    查找。
- en: 'The following shows the command syntax for template extraction. With this command,
    we need to provide a dashboard ID with which the command will fetch the template
    of the dashboard. Then, we need to provide the format for the template file –
    either JSON or YAML:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的示例显示了模板提取的命令语法。使用此命令，我们需要提供一个仪表盘ID，该命令将获取仪表盘的模板。然后，我们需要提供模板文件的格式 – 要么是JSON，要么是YAML：
- en: '[PRE29]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'For the dashboard ID, either visit the Arduino IoT Cloud to find it or refer
    to the upcoming subsections, in which we will show you how to list dashboards,
    which will provide their name, ID, and so on. Now, we will assign the format;
    we want the template output in JSON format, so I used JSON here:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 对于仪表盘ID，您可以访问Arduino IoT Cloud以找到它，或者参考即将到来的小节，我们将向您展示如何列出仪表盘，这将提供它们的名称、ID等信息。现在，我们将指定格式；我们希望模板输出为JSON格式，所以我在这里使用了JSON：
- en: '[PRE30]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: After executing the command, we will get the template output on the screen in
    JSON format, as shown in *Figure 13**.18*.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 执行命令后，我们将在屏幕上以JSON格式获得模板输出，如图 *图13**.18* 所示。
- en: '![Figure 13.18 – Extracting a dashboard template](img/B19752_13_18.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![图13.18 – 提取仪表盘模板](img/B19752_13_18.jpg)'
- en: Figure 13.18 – Extracting a dashboard template
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.18 – 提取仪表盘模板
- en: '*Figure 13**.18* shows partial output on the screen. We have our dashboard
    template in JSON format, which shows all the information regarding widgets and
    their configuration, including `thing_id` and `variable_id`. Copy the JSON format
    output and save it in a file, which will be used in the following section for
    dashboard creation.'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '*图13**.18* 展示了屏幕上的部分输出。我们有一个JSON格式的仪表盘模板，它显示了有关小部件及其配置的所有信息，包括 `thing_id` 和
    `variable_id`。复制JSON格式的输出并将其保存到文件中，该文件将在下一节中用于仪表盘创建。'
- en: Important note
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: There is a bug in the Arduino Cloud CLI for dashboard extraction, as it shows
    the Thing name instead of the Thing ID in the `thing_id` value. Therefore, you
    need to replace the text with the Thing ID; otherwise, an error will occur during
    the execution of the dashboard creation command.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在Arduino Cloud CLI中提取仪表盘时存在一个错误，因为它在 `thing_id` 值中显示的是事物名称而不是事物ID。因此，您需要用事物ID替换文本；否则，在执行仪表盘创建命令时将发生错误。
- en: In this subsection, we explored how to extract a template from an existing dashboard.
    In the following subsection, we will explore how to list dashboards.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在本小节中，我们探讨了如何从现有仪表盘中提取模板。在下一小节中，我们将探讨如何列出仪表盘。
- en: Listing dashboards
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列出仪表盘
- en: 'In this section, we will list all the dashboards. The documentation on listing
    dashboards is available at [https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#list-dashboards](https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#list-dashboards).
    The following is a very simple command to list all the dashboards:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将列出所有仪表板。有关列出仪表板的文档可在[https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#list-dashboards](https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#list-dashboards)找到。以下是一个列出所有仪表板的非常简单的命令：
- en: '[PRE31]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: After executing the preceding command, we will see a complete list of dashboards,
    as shown in the following figure.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 执行上述命令后，我们将看到仪表板的完整列表，如图下所示。
- en: '![Figure 13.19 – The dashboard list command](img/B19752_13_19.jpg)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![图13.19 – 仪表板列表命令](img/B19752_13_19.jpg)'
- en: Figure 13.19 – The dashboard list command
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.19 – 仪表板列表命令
- en: In the output shown in *Figure 13**.19*, we can see the dashboard **Name**,
    **ID**, and **UpdatedAt** details. Here, **ID** is very important, as it will
    be used in the following commands for dashboard deletion. It also helps you in
    dashboard template extraction, as we used the dashboard ID in the preceding subsection
    to extract the template.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图13.19*所示的输出中，我们可以看到仪表板的**名称**、**ID**和**更新时间**详情。在这里，**ID**非常重要，因为它将在以下命令中用于删除仪表板。它还有助于仪表板模板提取，因为我们使用仪表板ID在上一个小节中提取了模板。
- en: In this subsection, we explored how to list dashboards by using a very simple
    command. In the next subsection, we will explore how to delete a dashboard using
    the dashboard ID.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在本小节中，我们探讨了如何使用一个非常简单的命令列出仪表板。在下一小节中，我们将探讨如何使用仪表板ID删除仪表板。
- en: Deleting a dashboard
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除仪表板
- en: 'In this subsection, we will explore how to delete a dashboard using the dashboard
    ID. The documentation for deleting dashboards is available at [https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#delete-dashboards](https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#delete-dashboards).
    The following is the command syntax for dashboard deletion:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在本小节中，我们将探讨如何使用仪表板ID删除仪表板。有关删除仪表板的文档可在[https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#delete-dashboards](https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#delete-dashboards)找到。以下为删除仪表板的命令语法：
- en: '[PRE32]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'According to the preceding command syntax, we need to provide a dashboard ID
    for deletion. You can fetch the dashboard ID by using the `dashboard` `list` command:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 根据上述命令语法，我们需要提供一个仪表板ID进行删除。您可以通过使用`dashboard` `list`命令来获取仪表板ID：
- en: '[PRE33]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: After the successful deletion of the device, you will not see an error message;
    otherwise, you will get a `401 error` message on the screen.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功删除设备后，您将不会看到错误消息；否则，您将在屏幕上收到一个`401错误`消息。
- en: '![Figure 13.20 – The dashboard delete command](img/B19752_13_20.jpg)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![图13.20 – 仪表板删除命令](img/B19752_13_20.jpg)'
- en: Figure 13.20 – The dashboard delete command
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.20 – 仪表板删除命令
- en: '*Figure 13**.20* shows the complete command for dashboard deletion, and there
    is no error on the screen, which means the dashboard has been deleted successfully.
    In this subsection, we discussed the `delete` command. In the upcoming subsection,
    we will explore how to create a dashboard using a template, which we extracted
    in the first subsection of this section.'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '*图13.20*显示了删除仪表板的完整命令，屏幕上没有错误，这意味着仪表板已成功删除。在本小节中，我们讨论了`delete`命令。在下一小节中，我们将探讨如何使用模板创建仪表板，该模板我们在本节的第一小节中提取。'
- en: Creating a dashboard
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建仪表板
- en: 'After extracting a dashboard template, we can start to create a dashboard.
    The documentation on dashboard creation can be found at [https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#create-dashboard](https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#create-dashboard).
    The following is the syntax of the dashboard creation command, which takes two
    parameters. Firstly, it takes the name of the dashboard, and secondly, it takes
    the template filename for dashboard creation, which contains the dashboard template
    in JSON format that we saved in the previous section:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在提取仪表板模板后，我们可以开始创建仪表板。有关创建仪表板的文档可在[https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#create-dashboard](https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#create-dashboard)找到。以下为创建仪表板命令的语法，该命令接受两个参数。首先，它接受仪表板的名称，其次，它接受用于创建仪表板的模板文件名，该文件名包含我们在上一节中保存的JSON格式的仪表板模板：
- en: '[PRE34]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Here, I have provided the Thing name, `EnvSense101`, and in the previous section,
    I saved the JSON template in a file named `EnvSenseTemplate.json`. Then, we provide
    the name with the `-n` parameter and the template file with the `-``t` parameter:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我提供了设备名称 `EnvSense101`，并在上一节中，我将 JSON 模板保存为名为 `EnvSenseTemplate.json` 的文件。然后，我们使用
    `-n` 参数提供名称，并使用 `-t` 参数提供模板文件：
- en: '[PRE35]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'After executing the preceding command, you will get the following output for
    successful dashboard creation (*Figure 13**.21*):'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 执行前面的命令后，您将获得以下输出以成功创建仪表板 (*图 13*.21*)：
- en: '![Figure 13.21 – Dashboard creation using arduino-cloud-cli](img/B19752_13_21.jpg)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.21 – 使用 arduino-cloud-cli 创建仪表板](img/B19752_13_21.jpg)'
- en: Figure 13.21 – Dashboard creation using arduino-cloud-cli
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.21 – 使用 arduino-cloud-cli 创建仪表板
- en: '*Figure 13**.21* shows the command and the output of successful dashboard creation
    by the Arduino Cloud CLI. After creating the dashboard, the terminal shows the
    dashboard **name**, **id**, **updated_at**, and **widgets** details.'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 13*.21* 显示了 Arduino Cloud CLI 成功创建仪表板的命令和输出。创建仪表板后，终端显示了仪表板的 **名称**、**ID**、**更新时间**和
    **小部件**详细信息。'
- en: Important note
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: There is a bug in the Arduino Cloud CLI for dashboard extraction, as it shows
    the Thing name instead of the Thing ID in the `thing_id` value. Therefore, you
    need to replace the text with the Thing ID; otherwise, an error will occur during
    the execution of the dashboard creation command.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino Cloud CLI 在仪表板提取中存在一个错误，因为它在 `thing_id` 值中显示的是设备名称而不是设备 ID。因此，您需要将文本替换为设备
    ID；否则，在创建仪表板命令执行过程中将发生错误。
- en: In this subsection, we created a dashboard in the Arduino IoT Cloud using the
    command line. In the following section, we will explore how OTA updates work via
    a CLI.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在本小节中，我们使用命令行在 Arduino IoT Cloud 中创建了一个仪表板。在下一节中，我们将探讨如何通过 CLI 进行 OTA 更新。
- en: OTA management
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OTA 管理
- en: In [*Chapter 11*](B19752_11.xhtml#_idTextAnchor229), we explored what OTA is
    and how we can easily use this feature to send updates to remote devices. In that
    chapter, we used a graphical user interface, which is a good option for a single
    device. However, when we have bulk Things to send OTA, then the situation becomes
    complex, as we need to go through different things one at a time to send OTA updates,
    which is very time consuming and a difficult operation at the enterprise level.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [*第 11 章*](B19752_11.xhtml#_idTextAnchor229) 中，我们探讨了 OTA 是什么以及我们如何轻松使用此功能向远程设备发送更新。在第
    11 章中，我们使用了图形用户界面，这对于单个设备来说是一个不错的选择。然而，当我们有大量设备需要发送 OTA 时，情况就变得复杂了，因为我们需要逐个处理不同的设备来发送
    OTA 更新，这非常耗时，在企业层面也是一个困难的操作。
- en: That’s why the Arduino team created commands for the Arduino Cloud CLI to send
    OTA updates to single or multiple devices automatically, to minimize the complexity
    and operation time. So, firstly, we will explore how to export the compiled binary
    by using the Arduino IDE, and then we will send an OTA update to a device using
    its ID. For official documentation and updates, visit [https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#ota-over-the-air](https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#ota-over-the-air).
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 正因如此，Arduino 团队为 Arduino Cloud CLI 创建了命令，以自动向单个或多个设备发送 OTA 更新，以最大限度地减少复杂性和操作时间。因此，首先，我们将探讨如何使用
    Arduino IDE 导出编译后的二进制文件，然后我们将使用设备的 ID 向其发送 OTA 更新。有关官方文档和更新，请访问 [https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#ota-over-the-air](https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#ota-over-the-air)。
- en: Exporting a binary using the Arduino IDE
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Arduino IDE 导出二进制文件
- en: In this section, we will use the Arduino IDE to generate the complied binaries
    of our program for a device OTA. Firstly, download your Thing code from the Arduino
    IoT Cloud. Then, extract your downloaded code and open it up in the Arduino IDE.
    Select the development board in the Arduino IDE, and then click on **Sketch**
    | **Export Compiled Binary**, as shown in *Figure 13**.22*.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用 Arduino IDE 生成程序的编译后的二进制文件，用于设备的 OTA。首先，从 Arduino IoT Cloud 下载您的设备代码。然后，提取下载的代码并在
    Arduino IDE 中打开它。在 Arduino IDE 中选择开发板，然后点击 **草图** | **导出编译后的二进制文件**，如图 *图 13*.22*
    所示。
- en: '![Figure 13.22 – Export Compiled Binary in the Arduino IDE](img/B19752_13_22.jpg)'
  id: totrans-247
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.22 – 在 Arduino IDE 中导出编译后的二进制文件](img/B19752_13_22.jpg)'
- en: Figure 13.22 – Export Compiled Binary in the Arduino IDE
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.22 – 在 Arduino IDE 中导出编译后的二进制文件
- en: Clicking on `build` directory under your `sketch` directory, where you will
    find lots of files generated by the Arduino compiler. You need to select the file
    that ends with the `ino.bin` extension, as shown in *Figure 13**.23*.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的 `sketch` 目录下的 `build` 目录中点击，您会找到由 Arduino 编译器生成的许多文件。您需要选择以 `ino.bin` 扩展名结尾的文件，如图
    *图 13.23* 所示。
- en: '![Figure 13.23 – The sketch build files](img/B19752_13_23.jpg)'
  id: totrans-250
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.23 – 草图构建文件](img/B19752_13_23.jpg)'
- en: Figure 13.23 – The sketch build files
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.23 – 草图构建文件
- en: In this section, we explored how to generate the build files of a sketch using
    the Arduino IDE. In the next subsection, we will send this build file to a device
    OTA via the command line.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们探讨了如何使用 Arduino IDE 生成草图的构建文件。在下一个小节中，我们将通过命令行将这个构建文件发送到设备进行 OTA 上传。
- en: Uploading a sketch to a device
  id: totrans-253
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将草图上传到设备
- en: 'The Arduino Cloud CLI provides a single upload option as well as a mass deployment
    option. This is the official documentation link: [https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#upload](https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#upload).
    You can visit the page for the latest updates and news. Firstly, we will explore
    how to send an update to a single device. The following is a simple command syntax
    for a single-device OTA operation:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino Cloud CLI 提供了一个单独的上传选项以及一个大规模部署选项。这是官方文档链接：[https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#upload](https://docs.arduino.cc/arduino-cloud/getting-started/arduino-cloud-cli#upload)。您可以访问页面获取最新更新和新闻。首先，我们将探讨如何向单个设备发送更新。以下是一个单设备
    OTA 操作的简单命令语法：
- en: '[PRE36]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Here, we need to specify the device ID and the filename, including its path,
    which is done with the following command:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们需要指定设备 ID 和文件名，包括其路径，这可以通过以下命令完成：
- en: '[PRE37]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: After the successful execution of the command, you will see an empty terminal
    without any errors, as shown in *Figure 13**.24*. However, if the device is unavailable
    or any other issue arises, then the details will be printed on the terminal.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 命令成功执行后，您将看到一个没有错误且为空的终端，如图 *图 13.24* 所示。然而，如果设备不可用或出现任何其他问题，则详细信息将打印在终端上。
- en: '![Figure 13.24 – A successful command execution of the OTA upload](img/B19752_13_24.jpg)'
  id: totrans-259
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.24 – OTA 上传命令执行成功](img/B19752_13_24.jpg)'
- en: Figure 13.24 – A successful command execution of the OTA upload
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.24 – OTA 上传命令执行成功
- en: '*Figure 13**.24* shows that our upload has been completed successfully without
    any errors. It will take some time on the terminal to upload the file, depending
    on your internet speed as well as your sketch size, but you need to wait till
    the final output. Never interrupt the upload procedure.'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 13.24* 显示我们的上传已经成功完成，没有任何错误。上传文件需要一些时间，取决于您的网络速度以及您的草图大小，但您需要等待直到最终输出。永远不要中断上传过程。'
- en: 'Then, we have the mass deployment option in OTA, where you can upload firmware
    to multiple devices by using FQBN, as well as tags. The following is a simple
    command for mass deployment that uses FQBN, and you can also assign specific device
    IDs:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在 OTA 中我们有大规模部署选项，您可以通过使用 FQBN 以及标签来上传固件到多个设备。以下是一个使用 FQBN 的大规模部署简单命令，您也可以分配特定的设备
    ID：
- en: '[PRE38]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'However, with this specific command, I will only use `fqbn` to send the update
    to all the same device types:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，使用这个特定的命令，我将只使用 `fqbn` 将更新发送到所有相同的设备类型：
- en: '[PRE39]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: You can also explore the OTA mass upload by adding tags, to send an update to
    specific groups of devices. In this section, we explored how to build binaries
    of a sketch using the Arduino IDE and how to upload an update using the OTA command.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过添加标签来探索 OTA 大规模上传，以将更新发送到特定的设备组。在本节中，我们探讨了如何使用 Arduino IDE 构建草图的二进制文件，以及如何使用
    OTA 命令上传更新。
- en: What next?
  id: totrans-267
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接下来是什么？
- en: After playing around with some commands, it’s now time to do some more experiments
    so that you can apply your learning to new scenarios and learn new stuff. We explored
    the complete list of commands available on the Arduino Cloud CLI. However, you
    can check out Arduino’s official page for the latest updates and news to keep
    yourself up to date with the latest features. Now, it’s your turn to create batch
    scripts using the Arduino Cloud CLI to automate your operations, such as bulk
    device addition in the Arduino IoT Cloud, bulk Thing creation using templates,
    binding devices with Things, and creating a dashboard for every Thing from dashboard
    templates.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 在玩了一些命令之后，现在是时候进行更多实验，以便您可以将所学知识应用到新的场景中，并学习新知识。我们探讨了Arduino云CLI上可用的完整命令列表。然而，您可以查看Arduino的官方网站以获取最新更新和新闻，保持对最新功能的了解。现在，轮到您使用Arduino云CLI创建批处理脚本来自动化您的操作了，例如在Arduino物联网云中批量添加设备，使用模板批量创建事物，将设备与事物绑定，以及从仪表盘模板为每个事物创建仪表盘。
- en: Summary
  id: totrans-269
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered all the types of commands that are officially available
    to us on the Arduino Cloud CLI. Firstly, we explored device-related commands,
    which include device creation, listing devices, deletion, tagging, and untagging.
    Then, we explored how to work with Things; in that section, we started with template
    extraction and then created a Thing using a template. We also explored how to
    clone a Thing, how to bind a device with a Thing, and so on. In the penultimate
    section, we played around with dashboard commands, and in the last section, we
    explored how OTA commands can benefit us by sending updates to devices via the
    command line in different ways.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们涵盖了在Arduino云CLI上官方提供的所有命令类型。首先，我们探讨了与设备相关的命令，包括设备创建、列出设备、删除、标记和取消标记。然后，我们探讨了如何与事物一起工作；在该部分，我们从模板提取开始，然后使用模板创建了一个事物。我们还探讨了如何克隆一个事物，如何将设备与事物绑定，等等。在倒数第二个部分，我们玩了一些仪表盘命令，在最后一部分，我们探讨了如何通过命令行以不同方式发送更新到设备，从而利用OTA命令为我们带来好处。
- en: This chapter was specially designed for backend developers and administrators
    who want to use the Arduino Cloud CLI to optimize their daily tasks, by using
    terminal commands instead of a graphical user interface. This chapter will have
    helped them interact with the Arduino IoT Cloud using a CLI. It will also have
    helped them to create custom scripts, automating their daily tasks.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 这一章特别设计为面向希望使用Arduino云CLI来优化日常任务的后端开发人员和管理员，通过使用终端命令而不是图形用户界面。这一章将帮助他们使用CLI与Arduino物联网云进行交互。它还将帮助他们创建自定义脚本，自动化他们的日常任务。
- en: The following chapter is the last chapter of this book, and in this chapter,
    we will explore different Arduino IoT Cloud plans for educational and enterprise
    organizations. We will also explore industrial IoT hardware devices and different
    types of Arduino IoT Cloud services that are especially available to enterprise
    organizations. This chapter will give you a complete overview of how to scale
    your product from a smaller scale to an enterprise level.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 以下章节是本书的最后一章，在这一章中，我们将探讨针对教育和企业组织的不同Arduino物联网云计划。我们还将探讨工业物联网硬件设备和针对企业组织特别提供的不同类型的Arduino物联网云服务。这一章将为您提供一个全面概述，说明如何将您的产品从小规模扩展到企业级。
