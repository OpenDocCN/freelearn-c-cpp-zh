- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Setting Up the Tools of the Trade
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置工具
- en: In the world of embedded systems, crafting efficient firmware begins with a
    clear comprehension of the tools available. This chapter will guide you in establishing
    a robust development environment, ensuring that you are equipped with all the
    necessary tools for a comprehensive firmware development experience.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在嵌入式系统领域，制作高效的固件始于对可用工具的清晰理解。本章将指导你建立一个强大的开发环境，确保你拥有全面的固件开发体验所需的所有工具。
- en: Central to our discussion is the concept of datasheets. Consider these as the
    detailed blueprints for any microcontroller, encompassing its capabilities, specifications,
    and intricate details. However, the challenge often isn’t merely understanding
    a datasheet but also sourcing the correct datasheets tailored to your specific
    microcontroller. To address this, I will assist you in pinpointing and understanding
    both datasheets and user manuals important to our chosen microcontroller.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论的核心是数据表的概念。将这些视为任何微控制器的详细蓝图，包括其功能、规格和复杂细节。然而，挑战往往不仅仅是理解数据表，还包括找到适合您特定微控制器的正确数据表。为了解决这个问题，我将帮助您确定和理解对我们所选微控制器重要的数据表和用户手册。
- en: As we progress, we’ll delve into the intricacies of setting up our **Integrated
    Development Environment** (**IDE**) and acknowledging its critical function within
    the development life cycle. Furthermore, you’ll gain insights into configuring
    the GNU Arm Embedded Toolchain and OpenOCD. These tools will later empower us
    to craft our firmware, bypassing the need for an IDE altogether.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们不断深入，我们将探讨设置我们的**集成开发环境**（**IDE**）的复杂性，并认识到它在开发生命周期中的关键作用。此外，你将了解如何配置GNU
    Arm嵌入式工具链和OpenOCD。这些工具将使我们能够制作固件，从而完全无需IDE。
- en: 'In this chapter, we will explore the following main topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨以下主要主题：
- en: Essential development tools for microcontrollers
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微控制器必备的开发工具
- en: The development board
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发板
- en: Datasheets and manuals – unraveling the details
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据表和手册 – 揭示细节
- en: Navigating the STM32CubeIDE
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导航STM32CubeIDE
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The following are the prerequisites for the chapter:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的先决条件如下：
- en: 'STM32CubeIDE: [https://www.st.com/en/development-tools/stm32cubeide.html](https://www.st.com/en/development-tools/stm32cubeide.html)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'STM32CubeIDE: [https://www.st.com/en/development-tools/stm32cubeide.html](https://www.st.com/en/development-tools/stm32cubeide.html)'
- en: 'GNU Arm Embedded Toolchain (`gcc-arm-none-eabi-10.3-2021.10-win32.exe`): [https://developer.arm.com/downloads/-/gnu-rm](https://developer.arm.com/downloads/-/gnu-rm)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'GNU Arm嵌入式工具链 (`gcc-arm-none-eabi-10.3-2021.10-win32.exe`): [https://developer.arm.com/downloads/-/gnu-rm](https://developer.arm.com/downloads/-/gnu-rm)'
- en: 'OpenOCD: [https://github.com/xpack-dev-tools/openocd-xpack/releases](https://github.com/xpack-dev-tools/openocd-xpack/releases)'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'OpenOCD: [https://github.com/xpack-dev-tools/openocd-xpack/releases](https://github.com/xpack-dev-tools/openocd-xpack/releases)'
- en: 'Notepad++: [https://notepad-plus-plus.org/downloads/v8.5.8/](https://notepad-plus-plus.org/downloads/v8.5.8/)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Notepad++: [https://notepad-plus-plus.org/downloads/v8.5.8/](https://notepad-plus-plus.org/downloads/v8.5.8/)'
- en: 'STM32F11 reference manual: [https://www.st.com/resource/en/reference_manual/rm0383-stm32f411xce-advanced-armbased-32bit-mcus-stmicroelectronics.pdf](https://www.st.com/resource/en/reference_manual/rm0383-stm32f411xce-advanced-armbased-32bit-mcus-stmicroelectronics.pdf)'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'STM32F11参考手册: [https://www.st.com/resource/en/reference_manual/rm0383-stm32f411xce-advanced-armbased-32bit-mcus-stmicroelectronics.pdf](https://www.st.com/resource/en/reference_manual/rm0383-stm32f411xce-advanced-armbased-32bit-mcus-stmicroelectronics.pdf)'
- en: 'STM32F411 datasheet: [https://www.st.com/resource/en/reference_manual/rm0383-stm32f411xce-advanced-armbased-32bit-mcus-stmicroelectronics.pdf](https://www.st.com/resource/en/reference_manual/rm0383-stm32f411xce-advanced-armbased-32bit-mcus-stmicroelectronics.pdf)'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'STM32F411数据手册: [https://www.st.com/resource/en/reference_manual/rm0383-stm32f411xce-advanced-armbased-32bit-mcus-stmicroelectronics.pdf](https://www.st.com/resource/en/reference_manual/rm0383-stm32f411xce-advanced-armbased-32bit-mcus-stmicroelectronics.pdf)'
- en: 'NUCLEO-F411 user manual: [https://www.st.com/resource/en/user_manual/um1724-stm32-nucleo64-boards-mb1136-stmicroelectronics.pdf](https://www.st.com/resource/en/user_manual/um1724-stm32-nucleo64-boards-mb1136-stmicroelectronics.pdf)'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'NUCLEO-F411用户手册: [https://www.st.com/resource/en/user_manual/um1724-stm32-nucleo64-boards-mb1136-stmicroelectronics.pdf](https://www.st.com/resource/en/user_manual/um1724-stm32-nucleo64-boards-mb1136-stmicroelectronics.pdf)'
- en: 'Cortex-M4 generic user guide: [https://developer.arm.com/documentation/dui0553/latest/](https://developer.arm.com/documentation/dui0553/latest/)'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Cortex-M4通用用户指南: [https://developer.arm.com/documentation/dui0553/latest/](https://developer.arm.com/documentation/dui0553/latest/)'
- en: Essential development tools for microcontrollers
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微控制器必备的开发工具
- en: In this section, we will explore the essential tools that form the backbone
    of our development process. Understanding these tools is important, as they will
    be our companions in transforming ideas into functioning firmware.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨构成我们开发过程骨干的基本工具。了解这些工具很重要，因为它们将是我们将想法转化为功能固件时的伴侣。
- en: When selecting tools for firmware development, we have two primary options.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择固件开发工具时，我们有两个主要选项。
- en: 'IDEs: An IDE is a unified software application offering a **Graphical User
    Interface** (**GUI**) tailored to crafting software – in our context, firmware.
    Popular IDEs for microcontroller firmware development include the following:'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IDEs：IDE是一个提供定制**图形用户界面**（**GUI**）的统一软件应用程序，用于制作软件——在我们的上下文中，是固件。用于微控制器固件开发的流行IDE包括以下内容：
- en: '**Keil uVision (also known as Keil MDK)**: Developed by ARM Holdings'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Keil uVision（也称为Keil MDK）**：由ARM Holdings开发'
- en: '**STM32CubeIDE**: Developed by STMicroelectronics'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**STM32CubeIDE**：由意法半导体公司开发'
- en: '**IAR Embedded Workbench**: Developed by IAR Systems'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IAR嵌入式工作台**：由IAR Systems开发'
- en: These IDEs boast a GUI-centric design, enabling users to conveniently create
    new files, build, compile, and step through code lines interactively. For the
    demonstrations and exercises in this book, we’ll use the STM32CubeIDE. It has
    all the requisite features and is generously available for free, without any code
    size constraints.
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些IDE以GUI为中心的设计，使用户能够方便地创建新文件、构建、编译和交互式地逐行执行代码。在本书的演示和练习中，我们将使用STM32CubeIDE。它具有所有必需的功能，并且免费提供，没有任何代码大小限制。
- en: '`assemble`, `compile`, and `link` are often used. In this book, we’ll use the
    open source GNU Arm Embedded Toolchain. Based on the renowned open source **GNU
    Compiler Collection** (**GCC**), this integrates a GCC compiler tailored for ARM,
    the **GNU Debugger** (**GDB**) debugger, and several other invaluable utilities.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`汇编`、`编译`和`链接`经常被使用。在本书中，我们将使用开源的GNU Arm嵌入式工具链。它基于著名的开源**GNU编译器集合**（**GCC**），集成了针对ARM的GCC编译器、**GNU调试器**（**GDB**）调试器和几个其他非常有价值的实用工具。'
- en: In the following section, we will carefully go through the process of setting
    up our preferred IDE, the STM32CubeIDE.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将仔细介绍设置我们首选IDE——STM32CubeIDE的过程。
- en: Setting up the STM32CubeIDE
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置STM32CubeIDE
- en: Throughout this book, we’ll use both the STM32CubeIDE and the GNU Arm Embedded
    Toolchain to develop our firmware. Leveraging an IDE such as STM32CubeIDE enables
    us to easily analyze and compare the linker script and startup files, autogenerated
    by the IDE, against those we’ll construct from the ground up.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将使用STM32CubeIDE和GNU Arm嵌入式工具链来开发我们的固件。利用像STM32CubeIDE这样的IDE，我们可以轻松地分析和比较IDE自动生成的链接脚本和启动文件，以及我们将从头构建的文件。
- en: 'Let’s start by downloading and installing STM32CubeIDE:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从下载和安装STM32CubeIDE开始：
- en: Launch your web browser and navigate to [st.com](http://st.com).
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的网络浏览器并导航到[st.com](http://st.com)。
- en: Click on **STM32 Developer Zone**, and then select **STM32CubeIDE**.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**STM32开发者区**，然后选择**STM32CubeIDE**。
- en: '![Figure 1.1: The home page of st.com](img/B21914_01_1.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图1.1：st.com的首页](img/B21914_01_1.jpg)'
- en: 'Figure 1.1: The home page of st.com'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.1：st.com的首页
- en: Scroll down to the **All software versions** section of the page and click on
    **Download Software**. You’ll need to log into your ST account before proceeding
    with the download.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 滚动到页面上的**所有软件版本**部分并点击**下载软件**。在继续下载之前，您需要登录您的ST账户。
- en: '![Figure 1.2: The All software versions section of the stm32cubeide page](img/B21914_01_2.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图1.2：stm32cubeide页面的所有软件版本部分](img/B21914_01_2.jpg)'
- en: 'Figure 1.2: The All software versions section of the stm32cubeide page'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.2：stm32cubeide页面上的所有软件版本部分
- en: If you don’t have an account, click on **Login/Register** to sign up. If you
    already have one, simply log in.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您没有账户，请点击**登录/注册**进行注册。如果您已经有了账户，只需登录即可。
- en: Complete the registration form with your first name, last name, and email address.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您的名字、姓氏和电子邮件地址完成注册表单。
- en: Click on `.zip` file will be downloaded into your `Downloads` folder.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击将`.zip`文件下载到您的`下载`文件夹。
- en: 'Let’s install the STM32CubeIDE:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们安装STM32CubeIDE：
- en: Unzip the downloaded package.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解压下载的包。
- en: Double-click the `st-stm32cubeide` file to initiate the installer.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击`st-stm32cubeide`文件以启动安装程序。
- en: Retain default settings by clicking **Next** throughout the setup process.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在整个设置过程中点击**下一步**以保留默认设置。
- en: On the **Choose Components** page, ensure that both **SEGGER J-Link drivers**
    and **ST-LINK drivers** are selected. Then, click **Install**.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **选择组件** 页面上，确保已选中 **SEGGER J-Link 驱动程序** 和 **ST-LINK 驱动程序**。然后，点击 **安装**。
- en: '![Figure 1.3: The installer showing the Choose Components page](img/B21914_01_3.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.3：显示选择组件页面的安装程序](img/B21914_01_3.jpg)'
- en: 'Figure 1.3: The installer showing the Choose Components page'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.3：显示选择组件页面的安装程序
- en: Having successfully installed STM32CubeIDE on our computer, we will now proceed
    to configure our alternate development tool, the GNU Arm Embedded Toolchain.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的计算机上成功安装 STM32CubeIDE 后，我们现在将配置我们的备用开发工具，即 GNU Arm嵌入式工具链。
- en: Setting up the GNU Arm Embedded Toolchain
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置 GNU Arm嵌入式工具链
- en: 'In this section, we will go through the process of setting up the GNU Arm Embedded
    Toolchain – an important tool for developing firmware for ARM-based microcontrollers:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍设置 GNU Arm嵌入式工具链的过程——这是开发基于 ARM 微控制器固件的重要工具：
- en: Launch your web browser and navigate to [https://developer.arm.com/downloads/-/gnu-rm](https://developer.arm.com/downloads/-/gnu-rm).
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的网络浏览器并导航到 [https://developer.arm.com/downloads/-/gnu-rm](https://developer.arm.com/downloads/-/gnu-rm)。
- en: Scroll down the page to find the download link appropriate for your operating
    system. For those of you using Windows, like myself, opt for the `.exe` version.
    For Linux or macOS users, choose the corresponding `.tar` file for your operating
    system.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 滚动页面以找到适合您操作系统的下载链接。对于像我一样使用 Windows 的用户，选择 `.exe` 版本。对于 Linux 或 macOS 用户，选择适用于您操作系统的相应
    `.tar` 文件。
- en: After the download completes, double-click the installer to begin the installation
    process.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载完成后，双击安装程序以开始安装过程。
- en: Read through the license agreement. Then, choose to install in the default folder
    location by clicking **Install**.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 阅读许可协议。然后，通过点击 **安装** 选择在默认文件夹位置安装。
- en: '![Figure 1.4: The GNU Arm Embedded Toolchain installer](img/B21914_01_4.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.4：GNU Arm嵌入式工具链安装程序](img/B21914_01_4.jpg)'
- en: 'Figure 1.4: The GNU Arm Embedded Toolchain installer'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.4：GNU Arm嵌入式工具链安装程序
- en: When the installation is complete, ensure that you check the **Add path to environment**
    **variable** option.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，请确保您检查了 **添加路径到环境变量** 选项。
- en: '![Figure 1.5: The installer showing the Add path to environment variable option](img/B21914_01_5.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.5：显示添加环境变量路径选项的安装程序](img/B21914_01_5.jpg)'
- en: 'Figure 1.5: The installer showing the Add path to environment variable option'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.5：显示添加环境变量路径选项的安装程序
- en: Click **Finish** to finalize the setup.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **完成** 以完成设置。
- en: Setting up OpenOCD
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置 OpenOCD
- en: For firmware development with the GNU Arm Toolchain, OpenOCD plays an integral
    role, facilitating both the downloading of firmware into our microcontroller and
    the debugging of code in real time.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 对于使用 GNU Arm 工具链进行固件开发，OpenOCD 扮演着至关重要的角色，它既可以帮助我们将固件下载到我们的微控制器中，也可以实时调试代码。
- en: 'Let’s set up OpenOCD:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们设置 OpenOCD：
- en: Launch your web browser and navigate to [https://openocd.org/pages/getting-openocd.html](https://openocd.org/pages/getting-openocd.html).
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的网络浏览器并导航到 [https://openocd.org/pages/getting-openocd.html](https://openocd.org/pages/getting-openocd.html)。
- en: Scroll to the section titled **Unofficial** **binary packages**.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 滚动到标题为 **非官方二进制软件包** 的部分。
- en: Click on the link for multiplatform binaries.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击链接下载多平台二进制文件。
- en: '![Figure 1.6: The Unofficial binary packages section](img/B21914_01_6.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.6：非官方二进制软件包部分](img/B21914_01_6.jpg)'
- en: 'Figure 1.6: The Unofficial binary packages section'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.6：非官方二进制软件包部分
- en: Identify the latest version compatible with your operating system. For an exhaustive
    list, click on **Show all** **14 assets**.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确定与您的操作系统兼容的最新版本。要获取完整列表，请点击 **显示所有 14 个资源**。
- en: '![Figure 1.7: The OpenOCD packages](img/B21914_01_7.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.7：OpenOCD 软件包](img/B21914_01_7.jpg)'
- en: 'Figure 1.7: The OpenOCD packages'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.7：OpenOCD 软件包
- en: For Windows users, download the `win32-x64.zip` version. For Linux or macOS
    users, download the corresponding `.tar` file for your operating system.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于 Windows 用户，下载 `win32-x64.zip` 版本。对于 Linux 或 macOS 用户，下载适用于您操作系统的相应 `.tar`
    文件。
- en: Once downloaded, unzip the package.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载完成后，解压软件包。
- en: Navigate to the extracted folder, and then the `bin` subfolder. Here, you’ll
    find the `openocd.exe` application. This is the application we shall call in the
    command prompt together with the specific script of our chosen microcontroller,
    in order to debug or download code onto the microcontroller.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到解压后的文件夹，然后进入 `bin` 子文件夹。在这里，您可以找到 `openocd.exe` 应用程序。这是我们将在命令提示符中调用以与所选微控制器的特定脚本一起调试或下载代码到微控制器中的应用程序。
- en: Within the `xpack-openocd-0.12.0-2` | `openocd` | `scripts` directory structure,
    you’ll find scripts tailored for various microcontrollers and development boards.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `xpack-openocd-0.12.0-2` | `openocd` | `scripts` 目录结构中，您可以找到针对各种微控制器和开发板的定制脚本。
- en: 'Next, we need to add OpenOCD to our environment variables:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要将 OpenOCD 添加到我们的环境变量中：
- en: Begin by relocating the entire `openocd` folder to your `Program` `Files` directory.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先将整个 `openocd` 文件夹移动到您的 `程序` `文件` 目录。
- en: '![Figure 1.8: OpenOCD moved to Program Files, showing the path to the bin folder](img/B21914_01_8.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.8：OpenOCD 移动到程序文件，显示 bin 文件夹的路径](img/B21914_01_8.jpg)'
- en: 'Figure 1.8: OpenOCD moved to Program Files, showing the path to the bin folder'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.8：OpenOCD 移动到程序文件，显示 bin 文件夹的路径
- en: Copy the path to the `openocd` `bin` folder.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制 `openocd` `bin` 文件夹的路径。
- en: Right-click on **This PC**, and then choose **Properties**.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击 **此电脑**，然后选择 **属性**。
- en: Search for and select **Edit the system** **environment variables**.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 搜索并选择 **编辑系统** **环境变量**。
- en: '![Figure 1.9: The This PC properties page](img/B21914_01_9.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.9：此电脑属性页面](img/B21914_01_9.jpg)'
- en: 'Figure 1.9: The This PC properties page'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.9：此电脑属性页面
- en: Click the **Environment Variables** button in the **System Properties** pop-up
    window.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **系统属性** 弹出窗口中点击 **环境变量** 按钮。
- en: '![Figure 1.10: The System Properties pop-up window](img/B21914_01_10.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.10：系统属性弹出窗口](img/B21914_01_10.jpg)'
- en: 'Figure 1.10: The System Properties pop-up window'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.10：系统属性弹出窗口
- en: Under the **User variables** section of the **Environment Variables** popup,
    double-click the **Path** entry.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **环境变量** 弹出窗口的 **用户变量** 部分，双击 **路径** 项。
- en: '![Figure 1.11: The Environment Variables popup](img/B21914_01_11.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.11：环境变量弹出](img/B21914_01_11.jpg)'
- en: 'Figure 1.11: The Environment Variables popup'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.11：环境变量弹出
- en: In the **Edit environment variable** popup, click on **New** to create a row
    for a new path entry.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **编辑环境变量** 弹出窗口中，点击 **新建** 以创建一个新路径项的行。
- en: Paste the previously copied OpenOCD path into this new row.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将之前复制的 OpenOCD 路径粘贴到这个新行中。
- en: Confirm your changes by clicking **OK** on the various pop-up windows.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在各个弹出窗口中点击 **确定** 来确认您的更改。
- en: '![Figure 1.12: The Edit environment variable popup](img/B21914_01_12.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.12：编辑环境变量弹出](img/B21914_01_12.jpg)'
- en: 'Figure 1.12: The Edit environment variable popup'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.12：编辑环境变量弹出
- en: Finally, we have successfully completed the setup process. We have configured
    two essential, standalone tools to develop firmware for STM32 microcontrollers
    – the STM32CubeIDE for an IDE, and the GNU Arm Embedded Toolchain, complemented
    by OpenOCD, to develop and debug our firmware without an IDE.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们已经成功完成了设置过程。我们已配置了两个用于开发 STM32 微控制器固件的必要独立工具——STM32CubeIDE 用于 IDE，以及 GNU
    Arm Embedded Toolchain，辅以 OpenOCD，以便在没有 IDE 的情况下开发和调试我们的固件。
- en: Next, we will turn our attention to our development board.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将把注意力转向我们的开发板。
- en: The development board
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发板
- en: In this segment of the chapter, we will delve into the specifications and features
    of the development board selected for this book.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的这一部分，我们将深入探讨本书所选开发板的规格和特性。
- en: Understanding the role of a development board
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解开发板的作用
- en: Firstly, let’s clarify the concept of a development board. It’s essential to
    note that a development board is not synonymous with a microcontroller. While
    a development board might derive part of its name from the microcontroller mounted
    on it, it would be a misnomer to refer to the board itself as the microcontroller.
    A development board allows us to validate our firmware on the exact microcontroller
    variant we aim to deploy in our final product. Consequently, the firmware tested
    on our development board is assured to operate identically on the microcontroller
    in the end product. This is why companies such as STMicroelectronics offer a diverse
    range of development boards, tailored to each microcontroller in their portfolio.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们明确开发板的概念。重要的是要注意，开发板并不等同于微控制器。虽然开发板的名字可能部分来源于其上安装的微控制器，但将板本身称为微控制器是不准确的。开发板允许我们在最终产品中部署的确切微控制器变体上验证我们的固件。因此，在开发板上测试的固件确保在最终产品的微控制器上以相同的方式运行。这就是为什么像STMicroelectronics这样的公司提供各种开发板，针对他们产品组合中的每个微控制器进行定制。
- en: It’s also essential to contrast the role of a development board with prototyping
    boards, such as Arduino. While prototyping boards (which might not house the microcontrollers
    intended for the final product) serve as preliminary testing platforms, development
    boards elevate this process. They enable us to rigorously test concepts and the
    performance evaluation of our firmware on the designated microcontroller meant
    for bulk product manufacturing. For the purposes of this book, our focus will
    be on the NUCLEO-F411 development board.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 同样重要的是要将开发板的作用与原型板，如Arduino，进行对比。虽然原型板（可能不包含最终产品中打算使用的微控制器）作为初步测试平台，但开发板提升了这一过程。它们使我们能够在为大量产品制造指定的微控制器上严格测试概念和固件的性能评估。本书的目的将专注于NUCLEO-F411开发板。
- en: An overview of the NUCLEO-F411 Development Board
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NUCLEO-F411开发板概述
- en: The NUCLEO-F411 development board is equipped with an STM32F411RE microcontroller,
    capable of a peak operating frequency of 100MHz. It comes with a generous 512
    Kbytes of flash memory and 128 Kbytes of SRAM. Furthermore, the board is equipped
    with several columns of berg pins, allowing us to effortlessly make connections
    using jumper wires to interface with a variety of modules and components – from
    sensors and motors to LEDs. For quick and straightforward input/output firmware
    tests, the board also features a built-in user button and LED, eliminating the
    immediate need for external components.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: NUCLEO-F411开发板配备了一个STM32F411RE微控制器，其峰值工作频率可达100MHz。它拥有丰富的512 Kbytes闪存和128 Kbytes
    SRAM。此外，该板还配备了多列berg引脚，使我们能够轻松地使用跳线连接到各种模块和组件，从传感器和电机到LED。为了快速简便地进行输入/输出固件测试，该板还内置了用户按钮和LED，消除了对外部组件的即时需求。
- en: '![Figure 1.13: The NUCLEO-F411 development board](img/B21914_01_13.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![图1.13：NUCLEO-F411开发板](img/B21914_01_13.jpg)'
- en: 'Figure 1.13: The NUCLEO-F411 development board'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.13：NUCLEO-F411开发板
- en: Now that we’re familiar with the development board, let’s delve into the various
    types of documentation that are essential for a comprehensive understanding and
    programming of the development board.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经熟悉了开发板，让我们深入了解对开发板的全面理解和编程所必需的各种文档。
- en: Datasheets and manuals – unraveling the details
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据表和手册 – 揭示细节
- en: Our main objective in this book is to write firmware code that interacts directly
    with the registers of our microcontroller. This means there’s no abstraction or
    intermediary library between our code and the target microcontroller. To achieve
    this, it’s important to grasp the internal architecture of the microcontroller,
    understand the addresses of each register we interact with, and know the functions
    of relevant bits within those registers. This is where datasheets and manuals
    come in. Manufacturers provide these documents for users to understand their products,
    which in our case refers to the microcontroller core architecture, the microcontroller,
    and the development board.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的主要目标是编写与我们的微控制器寄存器直接交互的固件代码。这意味着我们的代码与目标微控制器之间没有抽象或中间库。为了实现这一点，了解微控制器的内部架构、理解我们交互的每个寄存器的地址以及了解那些寄存器中相关位的函数至关重要。这正是数据表和手册的作用所在。制造商提供这些文档，让用户了解他们的产品，在我们的情况下，指的是微控制器核心架构、微控制器和开发板。
- en: Two distinct companies play roles in the making of our development board. The
    first is ARM Holdings, which licenses processor and microcontroller core architecture
    designs to semiconductor manufacturing firms such as STMicroelectronics, Texas
    Instruments, and Renesas. These manufacturers then produce the physical microcontroller
    or processor based on the licensed designs from ARM, often with their custom additions.
    This explains why two different microcontrollers from separate manufacturers might
    share the same microcontroller core. For instance, both the TM4C123 from Texas
    Instruments and STM32F4 from STMicroelectronics are based on the ARM Cortex-M4
    core.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 两个不同的公司在我们的开发板制作中扮演着角色。第一个是ARM Holdings，它向半导体制造公司如意法半导体、德州仪器和瑞萨等授权处理器和微控制器核心架构设计。这些制造商然后基于从ARM授权的设计生产物理微控制器或处理器，通常还会添加自己的定制功能。这就是为什么来自不同制造商的两个不同的微控制器可能共享相同的微控制器核心。例如，德州仪器的TM4C123和意法半导体的STM32F4都是基于ARM
    Cortex-M4核心。
- en: Since our chosen development board, the NUCLEO-F411 from STMicroelectronics,
    is based on the ARM Cortex-M4 microcontroller core, in the following sections,
    we’ll delve into the documentation for the board, its integrated microcontroller,
    and the underlying core.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们选择的发展板，即意法半导体的NUCLEO-F411，是基于ARM Cortex-M4微控制器核心，在接下来的章节中，我们将深入研究该板、其集成微控制器和底层核心的文档。
- en: Understanding STMicroelectronics’ documentation
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解意法半导体的文档
- en: A significant reason for the popularity of STM32 microcontrollers is STMicroelectronics’
    continued commitment to providing comprehensive support. This includes well-organized
    documentation and various firmware development resources.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: STM32微控制器之所以受欢迎，一个重要原因是意法半导体（STMicroelectronics）持续致力于提供全面的支持。这包括组织良好的文档和各种固件开发资源。
- en: 'STMicroelectronics has a range of documents, each following a specific naming
    convention. Let’s discuss those relevant to our work:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 意法半导体有一系列文档，每个都遵循特定的命名约定。让我们讨论与我们工作相关的那些：
- en: '`RM`, followed by a number. For instance, the RM for our microcontroller is
    `RM0383`. This document details every register in our microcontroller, clarifying
    each bit’s role and providing insights on register configurations.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RM`后跟一个数字。例如，我们微控制器的RM是`RM0383`。这份文档详细说明了我们微控制器中的每个寄存器，解释了每个位的角色，并提供了关于寄存器配置的见解。'
- en: '`STM32F411`. This document provides a functional overview of the microcontroller,
    a complete memory map, a block diagram showcasing the microcontroller’s peripherals
    and connecting buses, as well as the pinout and electrical characteristics of
    the microcontroller.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`STM32F411`。本文件提供了微控制器的功能概述、完整的内存映射、展示微控制器外设和连接总线的框图，以及微控制器的引脚排列和电气特性。'
- en: '`UM` and followed by a number, such as `UM1724` for our NUCLEO-F411, this document
    focuses on the development board. It describes how components on our board, such
    as LEDs and buttons, are connected to specific ports and pins of the microcontroller.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UM`后跟一个数字，例如，我们NUCLEO-F411的`UM1724`，这份文档专注于开发板。它描述了我们板上的组件，如LED和按钮，是如何连接到微控制器的特定端口和引脚的。'
- en: The generic user guide by ARM
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ARM的通用用户指南
- en: ARM provides documents for every microcontroller and processor core they design.
    Important to our discussion is the generic user guide for our microcontroller
    core. As we’re using the STM32F411, which is based on the ARM Cortex-M4 core,
    we’ll refer to the Cortex-M4 generic user guide.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: ARM为它们设计的每个微控制器和处理器核心提供文档。对我们讨论重要的是我们微控制器核心的通用用户指南。由于我们使用的是基于ARM Cortex-M4核心的STM32F411，我们将参考Cortex-M4通用用户指南。
- en: This means that if we were using an STM32F7 microcontroller, which is based
    on the ARM Cortex-M7 core, then we would need to get the Cortex-M7 generic user
    guide. The naming convention of this document is simply the name of the microcontroller
    core + the phrase `generic` `user guide`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着如果我们使用的是基于ARM Cortex-M7核心的STM32F7微控制器，那么我们就需要获取Cortex-M7通用用户指南。这份文档的命名约定只是微控制器核心的名称加上短语`通用``用户指南`。
- en: As the name implies, this document provides information generic to the specific
    microcontroller core. This means that the information provided in the Cortex-M4
    generic user guide applies to all microcontrollers based on the Cortex-M4 core,
    irrespective of the manufacturers of those microcontrollers. In contrast, the
    information provided in the STMicroelectronics documentation applies to only STMicroelectronics’
    microcontrollers.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如其名所示，本文件提供了关于特定微控制器核心的通用信息。这意味着在 Cortex-M4 通用用户指南中提供的信息适用于所有基于 Cortex-M4 核心的微控制器，无论这些微控制器的制造商是谁。相比之下，STMicroelectronics
    文档中提供的信息仅适用于 STMicroelectronics 的微控制器。
- en: '![Figure 1.14: The relationship between the development board, microcontroller,
    and microcontroller core](img/B21914_01_14.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.14：开发板、微控制器和微控制器核心之间的关系](img/B21914_01_14.jpg)'
- en: 'Figure 1.14: The relationship between the development board, microcontroller,
    and microcontroller core'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.14：开发板、微控制器和微控制器核心之间的关系
- en: '*Why do we need the generic* *user guide?*'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '*为什么我们需要通用用户指南？*'
- en: The generic user guide provides information on the core peripherals of the processor
    core. As the term suggests, these core peripherals are consistent across all microcontrollers,
    based on a specific core. The Cortex-M4 core has five core peripherals – the System
    Timer, Floating-Point Unit, System Control Block, Memory Protection Unit, and
    the Nested Vectored Interrupt Controller. When developing bare-metal drivers for
    these peripherals, the generic user guide is the definitive source for the essential
    details.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 通用用户指南提供了关于处理器核心核心外设的信息。正如其名称所暗示的，这些核心外设在基于特定核心的所有微控制器中是一致的。Cortex-M4 核心有五个核心外设——系统定时器、浮点单元、系统控制块、内存保护单元和嵌套向量中断控制器。当为这些外设开发裸机驱动程序时，通用用户指南是获取必要细节的权威来源。
- en: Additionally, the guide provides information on the microcontroller core’s Instruction
    Set, as well as the Programmer’s Model, Exception Model, fault handling, and power
    management.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，本指南还提供了关于微控制器核心指令集、程序员模型、异常模型、故障处理和电源管理的信息。
- en: Getting the documents
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取文档
- en: 'To obtain the aforementioned documents, you can use the following search phrases
    on Google:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取上述文档，您可以在 Google 上使用以下搜索词：
- en: '`STM32F11 Reference Manual` or `RM0383`.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`STM32F11 参考手册` 或 `RM0383`.'
- en: '`STM32F411 Datasheet`.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`STM32F411 数据手册`.'
- en: '`Nucleo-F11 User Manual` or `UM1724`.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Nucleo-F11 用户手册` 或 `UM1724`.'
- en: '`Cortex-M4 Generic` `User Guide`'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Cortex-M4 通用` `用户指南`'
- en: Direct links to these documents are also available, in the *Technical requirements*
    section of this chapter.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这些文档的直接链接也在此章的 *技术要求* 部分提供。
- en: Before analyzing the key areas of the various documents to program our development
    board, let’s first take a closer look at the STM32CubeIDE we installed earlier.
    We will familiarize ourselves with its features and functionalities in the next
    section.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在分析编程我们的开发板的关键区域的各种文档之前，让我们首先更仔细地看看我们之前安装的 STM32CubeIDE。在下一节中，我们将熟悉其功能和特性。
- en: Navigating the STM32CubeIDE
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导航 STM32CubeIDE
- en: When you launch STM32CubeIDE for the first time, you’ll see the **Information
    Center**. This center offers quick access to a number of valuable resources for
    STM32 firmware development.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 当您首次启动 STM32CubeIDE 时，您将看到 **信息中心**。此中心提供了快速访问许多对 STM32 固件开发有价值的资源。
- en: To exit the Information Center, simply click the **X** on its tab. If you wish
    to revisit it later, simply navigate to **Help** | **Information Center**.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 要退出信息中心，只需在其选项卡上单击 **X**。如果您稍后想再次访问它，只需导航到 **帮助** | **信息中心**。
- en: '![Figure 1.15: Information Center](img/B21914_01_15.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.15：信息中心](img/B21914_01_15.jpg)'
- en: 'Figure 1.15: Information Center'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.15：信息中心
- en: The STM32CubeIDE is based on the Eclipse framework, and therefore, the layout
    and elements are similar to those of other Eclipse-based IDEs.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: STM32CubeIDE 基于Eclipse框架，因此其布局和元素与其他基于Eclipse的IDE类似。
- en: 'Let’s go through the process of creating a new project:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过创建新项目的流程来了解一下：
- en: Either click **Create a New STM32 project** in the empty **Project Explorer**
    pane or select **File** | **New** | **STM32 Project**.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以在空白的 **项目资源管理器** 窗格中单击 **创建一个新的STM32项目**，或者选择 **文件** | **新建** | **STM32项目**。
- en: '![Figure 1.16: A workspace showing an empty Project Explorer pane](img/B21914_01_16.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.16：显示空项目资源管理器的工位图](img/B21914_01_16.jpg)'
- en: 'Figure 1.16: A workspace showing an empty Project Explorer pane'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.16：显示空项目资源管理器的工位图
- en: You will be presented with the **Target Selection** window to select the microcontroller
    or development board for your project.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到一个 **目标选择** 窗口，用于选择项目所需的微控制器或开发板。
- en: Click the **Board** **Selector** tab.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **板** **选择** 选项卡。
- en: Enter `NUCLEO-F411` into the **Commercial Part** **Number** field.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **商业零件** **编号** 字段中输入 `NUCLEO-F411`。
- en: '![Figure 1.17: The Target Selection window](img/B21914_01_17.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.17：目标选择窗口](img/B21914_01_17.jpg)'
- en: 'Figure 1.17: The Target Selection window'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.17：目标选择窗口
- en: From the displayed board list, select **NUCLEO-F11RE**, and then click **Next**.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从显示的板列表中选择 **NUCLEO-F11RE**，然后点击 **下一步**。
- en: '![Figure 1.18: The board list with NUCLEO-F411 selected](img/B21914_01_18.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.18：选择 NUCLEO-F411 的板列表](img/B21914_01_18.jpg)'
- en: 'Figure 1.18: The board list with NUCLEO-F411 selected'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.18：选择 NUCLEO-F411 的板列表
- en: Give the project a name.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给项目起一个名字。
- en: For **Targeted Project Type**, select **Empty**.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于 **目标项目类型**，选择 **空**。
- en: '![Figure 1.19: The Setup STM32 project window](img/B21914_01_19.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.19：STM32 项目设置窗口](img/B21914_01_19.jpg)'
- en: 'Figure 1.19: The Setup STM32 project window'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.19：STM32 项目设置窗口
- en: Click **Finish** to create the project.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **完成** 按钮创建项目。
- en: You will see the new project, containing all the necessary startup files and
    linker scripts, in the **Project** **Explorer** pane.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在 **项目** **资源管理器** 窗格中看到包含所有必要启动文件和链接脚本的新项目。
- en: '![Figure 1.20: The Project Explorer pane showing a new project](img/B21914_01_20.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.20：显示新项目的项目资源管理器窗格](img/B21914_01_20.jpg)'
- en: 'Figure 1.20: The Project Explorer pane showing a new project'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.20：显示新项目的项目资源管理器窗格
- en: Understanding the control icons
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解控制图标
- en: The most frequently used control icons are the **New**, **Build**, and **Debug**
    icons.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 最常用的控制图标是 **新建**、**构建** 和 **调试** 图标。
- en: '![Figure 1.21: The control icons](img/B21914_01_21.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.21：控制图标](img/B21914_01_21.jpg)'
- en: 'Figure 1.21: The control icons'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.21：控制图标
- en: 'Let’s look closely at the functions of these icons:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们仔细看看这些图标的功能：
- en: '**The New icon**: This icon allows us to create various files, including source
    code, header files, projects, libraries, and more. This function is also accessible
    via **File** | **New**.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**新建图标**：此图标允许我们创建各种文件，包括源代码、头文件、项目、库等。此功能也可以通过 **文件** | **新建** 访问。'
- en: '**The Build icon**: Used for building projects. This functionality can also
    be accessed by right-clicking on a project and selecting **Build Project**.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建图标**：用于构建项目。此功能也可以通过在项目上右键单击并选择 **构建项目** 来访问。'
- en: '**The Debug icon**: This launches a debug configuration to facilitate project
    debugging. This functionality is also available by right-clicking a project and
    selecting **Debug Project**.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调试图标**：此图标启动调试配置，以方便项目调试。此功能也可以通过在项目上右键单击并选择 **调试项目** 来访问。'
- en: These control icons provide quick access to essential functions, significantly
    enhancing productivity and streamlining the development process.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这些控制图标提供了快速访问基本功能的途径，显著提高了生产力和简化了开发过程。
- en: Summary
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we set out to create a robust environment for embedded firmware
    development, focusing on the careful selection and setup of essential tools. Each
    tool we selected plays a crucial role in the efficient development of firmware
    for microcontrollers. We explored the installation processes of STM32CubeIDE,
    the GNU Arm Embedded Toolchain, and OpenOCD, laying a solid groundwork for our
    development activities.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们旨在为嵌入式固件开发创建一个健壮的环境，重点关注基本工具的精心选择和设置。我们选择的每个工具都在微控制器固件的高效开发中扮演着关键角色。我们探讨了
    STM32CubeIDE、GNU Arm Embedded Toolchain 和 OpenOCD 的安装过程，为我们的发展活动奠定了坚实的基础。
- en: We then introduced the NUCLEO-F411 development board, equipped with an STM32F411RE
    microcontroller, as our experimental platform, and we spent time identifying some
    of the components on the board.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们随后介绍了配备 STM32F411RE 微控制器的 NUCLEO-F411 开发板，作为我们的实验平台，并花费时间识别了板上的某些组件。
- en: We also emphasized the importance of knowing the different types of datasheets
    and reference manuals, equipping us with the ability to quickly access detailed
    information about a microcontroller’s architecture and functionalities.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还强调了了解不同类型的数据表和参考手册的重要性，使我们能够快速获取有关微控制器架构和功能性的详细信息。
- en: Moving on to the next chapter, we will leap into developing our first bare-metal
    firmware, using only the documentation we have compiled as our guide.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将进入下一章，我们将着手开发我们的第一个裸机固件，仅使用我们已编译的文档作为我们的指南。
