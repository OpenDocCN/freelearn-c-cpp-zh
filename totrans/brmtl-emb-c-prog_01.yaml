- en: '1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Setting Up the Tools of the Trade
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the world of embedded systems, crafting efficient firmware begins with a
    clear comprehension of the tools available. This chapter will guide you in establishing
    a robust development environment, ensuring that you are equipped with all the
    necessary tools for a comprehensive firmware development experience.
  prefs: []
  type: TYPE_NORMAL
- en: Central to our discussion is the concept of datasheets. Consider these as the
    detailed blueprints for any microcontroller, encompassing its capabilities, specifications,
    and intricate details. However, the challenge often isn’t merely understanding
    a datasheet but also sourcing the correct datasheets tailored to your specific
    microcontroller. To address this, I will assist you in pinpointing and understanding
    both datasheets and user manuals important to our chosen microcontroller.
  prefs: []
  type: TYPE_NORMAL
- en: As we progress, we’ll delve into the intricacies of setting up our **Integrated
    Development Environment** (**IDE**) and acknowledging its critical function within
    the development life cycle. Furthermore, you’ll gain insights into configuring
    the GNU Arm Embedded Toolchain and OpenOCD. These tools will later empower us
    to craft our firmware, bypassing the need for an IDE altogether.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will explore the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Essential development tools for microcontrollers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The development board
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Datasheets and manuals – unraveling the details
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Navigating the STM32CubeIDE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the prerequisites for the chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'STM32CubeIDE: [https://www.st.com/en/development-tools/stm32cubeide.html](https://www.st.com/en/development-tools/stm32cubeide.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'GNU Arm Embedded Toolchain (`gcc-arm-none-eabi-10.3-2021.10-win32.exe`): [https://developer.arm.com/downloads/-/gnu-rm](https://developer.arm.com/downloads/-/gnu-rm)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'OpenOCD: [https://github.com/xpack-dev-tools/openocd-xpack/releases](https://github.com/xpack-dev-tools/openocd-xpack/releases)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Notepad++: [https://notepad-plus-plus.org/downloads/v8.5.8/](https://notepad-plus-plus.org/downloads/v8.5.8/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'STM32F11 reference manual: [https://www.st.com/resource/en/reference_manual/rm0383-stm32f411xce-advanced-armbased-32bit-mcus-stmicroelectronics.pdf](https://www.st.com/resource/en/reference_manual/rm0383-stm32f411xce-advanced-armbased-32bit-mcus-stmicroelectronics.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'STM32F411 datasheet: [https://www.st.com/resource/en/reference_manual/rm0383-stm32f411xce-advanced-armbased-32bit-mcus-stmicroelectronics.pdf](https://www.st.com/resource/en/reference_manual/rm0383-stm32f411xce-advanced-armbased-32bit-mcus-stmicroelectronics.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'NUCLEO-F411 user manual: [https://www.st.com/resource/en/user_manual/um1724-stm32-nucleo64-boards-mb1136-stmicroelectronics.pdf](https://www.st.com/resource/en/user_manual/um1724-stm32-nucleo64-boards-mb1136-stmicroelectronics.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Cortex-M4 generic user guide: [https://developer.arm.com/documentation/dui0553/latest/](https://developer.arm.com/documentation/dui0553/latest/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Essential development tools for microcontrollers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will explore the essential tools that form the backbone
    of our development process. Understanding these tools is important, as they will
    be our companions in transforming ideas into functioning firmware.
  prefs: []
  type: TYPE_NORMAL
- en: When selecting tools for firmware development, we have two primary options.
  prefs: []
  type: TYPE_NORMAL
- en: 'IDEs: An IDE is a unified software application offering a **Graphical User
    Interface** (**GUI**) tailored to crafting software – in our context, firmware.
    Popular IDEs for microcontroller firmware development include the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Keil uVision (also known as Keil MDK)**: Developed by ARM Holdings'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**STM32CubeIDE**: Developed by STMicroelectronics'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IAR Embedded Workbench**: Developed by IAR Systems'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These IDEs boast a GUI-centric design, enabling users to conveniently create
    new files, build, compile, and step through code lines interactively. For the
    demonstrations and exercises in this book, we’ll use the STM32CubeIDE. It has
    all the requisite features and is generously available for free, without any code
    size constraints.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`assemble`, `compile`, and `link` are often used. In this book, we’ll use the
    open source GNU Arm Embedded Toolchain. Based on the renowned open source **GNU
    Compiler Collection** (**GCC**), this integrates a GCC compiler tailored for ARM,
    the **GNU Debugger** (**GDB**) debugger, and several other invaluable utilities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the following section, we will carefully go through the process of setting
    up our preferred IDE, the STM32CubeIDE.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the STM32CubeIDE
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Throughout this book, we’ll use both the STM32CubeIDE and the GNU Arm Embedded
    Toolchain to develop our firmware. Leveraging an IDE such as STM32CubeIDE enables
    us to easily analyze and compare the linker script and startup files, autogenerated
    by the IDE, against those we’ll construct from the ground up.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start by downloading and installing STM32CubeIDE:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch your web browser and navigate to [st.com](http://st.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **STM32 Developer Zone**, and then select **STM32CubeIDE**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.1: The home page of st.com](img/B21914_01_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.1: The home page of st.com'
  prefs: []
  type: TYPE_NORMAL
- en: Scroll down to the **All software versions** section of the page and click on
    **Download Software**. You’ll need to log into your ST account before proceeding
    with the download.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.2: The All software versions section of the stm32cubeide page](img/B21914_01_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.2: The All software versions section of the stm32cubeide page'
  prefs: []
  type: TYPE_NORMAL
- en: If you don’t have an account, click on **Login/Register** to sign up. If you
    already have one, simply log in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Complete the registration form with your first name, last name, and email address.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on `.zip` file will be downloaded into your `Downloads` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let’s install the STM32CubeIDE:'
  prefs: []
  type: TYPE_NORMAL
- en: Unzip the downloaded package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click the `st-stm32cubeide` file to initiate the installer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Retain default settings by clicking **Next** throughout the setup process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Choose Components** page, ensure that both **SEGGER J-Link drivers**
    and **ST-LINK drivers** are selected. Then, click **Install**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.3: The installer showing the Choose Components page](img/B21914_01_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.3: The installer showing the Choose Components page'
  prefs: []
  type: TYPE_NORMAL
- en: Having successfully installed STM32CubeIDE on our computer, we will now proceed
    to configure our alternate development tool, the GNU Arm Embedded Toolchain.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the GNU Arm Embedded Toolchain
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we will go through the process of setting up the GNU Arm Embedded
    Toolchain – an important tool for developing firmware for ARM-based microcontrollers:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch your web browser and navigate to [https://developer.arm.com/downloads/-/gnu-rm](https://developer.arm.com/downloads/-/gnu-rm).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll down the page to find the download link appropriate for your operating
    system. For those of you using Windows, like myself, opt for the `.exe` version.
    For Linux or macOS users, choose the corresponding `.tar` file for your operating
    system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the download completes, double-click the installer to begin the installation
    process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Read through the license agreement. Then, choose to install in the default folder
    location by clicking **Install**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.4: The GNU Arm Embedded Toolchain installer](img/B21914_01_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.4: The GNU Arm Embedded Toolchain installer'
  prefs: []
  type: TYPE_NORMAL
- en: When the installation is complete, ensure that you check the **Add path to environment**
    **variable** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.5: The installer showing the Add path to environment variable option](img/B21914_01_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.5: The installer showing the Add path to environment variable option'
  prefs: []
  type: TYPE_NORMAL
- en: Click **Finish** to finalize the setup.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Setting up OpenOCD
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For firmware development with the GNU Arm Toolchain, OpenOCD plays an integral
    role, facilitating both the downloading of firmware into our microcontroller and
    the debugging of code in real time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s set up OpenOCD:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch your web browser and navigate to [https://openocd.org/pages/getting-openocd.html](https://openocd.org/pages/getting-openocd.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll to the section titled **Unofficial** **binary packages**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the link for multiplatform binaries.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.6: The Unofficial binary packages section](img/B21914_01_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.6: The Unofficial binary packages section'
  prefs: []
  type: TYPE_NORMAL
- en: Identify the latest version compatible with your operating system. For an exhaustive
    list, click on **Show all** **14 assets**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.7: The OpenOCD packages](img/B21914_01_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.7: The OpenOCD packages'
  prefs: []
  type: TYPE_NORMAL
- en: For Windows users, download the `win32-x64.zip` version. For Linux or macOS
    users, download the corresponding `.tar` file for your operating system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once downloaded, unzip the package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the extracted folder, and then the `bin` subfolder. Here, you’ll
    find the `openocd.exe` application. This is the application we shall call in the
    command prompt together with the specific script of our chosen microcontroller,
    in order to debug or download code onto the microcontroller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Within the `xpack-openocd-0.12.0-2` | `openocd` | `scripts` directory structure,
    you’ll find scripts tailored for various microcontrollers and development boards.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to add OpenOCD to our environment variables:'
  prefs: []
  type: TYPE_NORMAL
- en: Begin by relocating the entire `openocd` folder to your `Program` `Files` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.8: OpenOCD moved to Program Files, showing the path to the bin folder](img/B21914_01_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.8: OpenOCD moved to Program Files, showing the path to the bin folder'
  prefs: []
  type: TYPE_NORMAL
- en: Copy the path to the `openocd` `bin` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on **This PC**, and then choose **Properties**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Search for and select **Edit the system** **environment variables**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.9: The This PC properties page](img/B21914_01_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.9: The This PC properties page'
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Environment Variables** button in the **System Properties** pop-up
    window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.10: The System Properties pop-up window](img/B21914_01_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.10: The System Properties pop-up window'
  prefs: []
  type: TYPE_NORMAL
- en: Under the **User variables** section of the **Environment Variables** popup,
    double-click the **Path** entry.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.11: The Environment Variables popup](img/B21914_01_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.11: The Environment Variables popup'
  prefs: []
  type: TYPE_NORMAL
- en: In the **Edit environment variable** popup, click on **New** to create a row
    for a new path entry.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Paste the previously copied OpenOCD path into this new row.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Confirm your changes by clicking **OK** on the various pop-up windows.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.12: The Edit environment variable popup](img/B21914_01_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.12: The Edit environment variable popup'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we have successfully completed the setup process. We have configured
    two essential, standalone tools to develop firmware for STM32 microcontrollers
    – the STM32CubeIDE for an IDE, and the GNU Arm Embedded Toolchain, complemented
    by OpenOCD, to develop and debug our firmware without an IDE.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will turn our attention to our development board.
  prefs: []
  type: TYPE_NORMAL
- en: The development board
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this segment of the chapter, we will delve into the specifications and features
    of the development board selected for this book.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the role of a development board
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Firstly, let’s clarify the concept of a development board. It’s essential to
    note that a development board is not synonymous with a microcontroller. While
    a development board might derive part of its name from the microcontroller mounted
    on it, it would be a misnomer to refer to the board itself as the microcontroller.
    A development board allows us to validate our firmware on the exact microcontroller
    variant we aim to deploy in our final product. Consequently, the firmware tested
    on our development board is assured to operate identically on the microcontroller
    in the end product. This is why companies such as STMicroelectronics offer a diverse
    range of development boards, tailored to each microcontroller in their portfolio.
  prefs: []
  type: TYPE_NORMAL
- en: It’s also essential to contrast the role of a development board with prototyping
    boards, such as Arduino. While prototyping boards (which might not house the microcontrollers
    intended for the final product) serve as preliminary testing platforms, development
    boards elevate this process. They enable us to rigorously test concepts and the
    performance evaluation of our firmware on the designated microcontroller meant
    for bulk product manufacturing. For the purposes of this book, our focus will
    be on the NUCLEO-F411 development board.
  prefs: []
  type: TYPE_NORMAL
- en: An overview of the NUCLEO-F411 Development Board
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The NUCLEO-F411 development board is equipped with an STM32F411RE microcontroller,
    capable of a peak operating frequency of 100MHz. It comes with a generous 512
    Kbytes of flash memory and 128 Kbytes of SRAM. Furthermore, the board is equipped
    with several columns of berg pins, allowing us to effortlessly make connections
    using jumper wires to interface with a variety of modules and components – from
    sensors and motors to LEDs. For quick and straightforward input/output firmware
    tests, the board also features a built-in user button and LED, eliminating the
    immediate need for external components.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.13: The NUCLEO-F411 development board](img/B21914_01_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.13: The NUCLEO-F411 development board'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’re familiar with the development board, let’s delve into the various
    types of documentation that are essential for a comprehensive understanding and
    programming of the development board.
  prefs: []
  type: TYPE_NORMAL
- en: Datasheets and manuals – unraveling the details
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our main objective in this book is to write firmware code that interacts directly
    with the registers of our microcontroller. This means there’s no abstraction or
    intermediary library between our code and the target microcontroller. To achieve
    this, it’s important to grasp the internal architecture of the microcontroller,
    understand the addresses of each register we interact with, and know the functions
    of relevant bits within those registers. This is where datasheets and manuals
    come in. Manufacturers provide these documents for users to understand their products,
    which in our case refers to the microcontroller core architecture, the microcontroller,
    and the development board.
  prefs: []
  type: TYPE_NORMAL
- en: Two distinct companies play roles in the making of our development board. The
    first is ARM Holdings, which licenses processor and microcontroller core architecture
    designs to semiconductor manufacturing firms such as STMicroelectronics, Texas
    Instruments, and Renesas. These manufacturers then produce the physical microcontroller
    or processor based on the licensed designs from ARM, often with their custom additions.
    This explains why two different microcontrollers from separate manufacturers might
    share the same microcontroller core. For instance, both the TM4C123 from Texas
    Instruments and STM32F4 from STMicroelectronics are based on the ARM Cortex-M4
    core.
  prefs: []
  type: TYPE_NORMAL
- en: Since our chosen development board, the NUCLEO-F411 from STMicroelectronics,
    is based on the ARM Cortex-M4 microcontroller core, in the following sections,
    we’ll delve into the documentation for the board, its integrated microcontroller,
    and the underlying core.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding STMicroelectronics’ documentation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A significant reason for the popularity of STM32 microcontrollers is STMicroelectronics’
    continued commitment to providing comprehensive support. This includes well-organized
    documentation and various firmware development resources.
  prefs: []
  type: TYPE_NORMAL
- en: 'STMicroelectronics has a range of documents, each following a specific naming
    convention. Let’s discuss those relevant to our work:'
  prefs: []
  type: TYPE_NORMAL
- en: '`RM`, followed by a number. For instance, the RM for our microcontroller is
    `RM0383`. This document details every register in our microcontroller, clarifying
    each bit’s role and providing insights on register configurations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`STM32F411`. This document provides a functional overview of the microcontroller,
    a complete memory map, a block diagram showcasing the microcontroller’s peripherals
    and connecting buses, as well as the pinout and electrical characteristics of
    the microcontroller.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UM` and followed by a number, such as `UM1724` for our NUCLEO-F411, this document
    focuses on the development board. It describes how components on our board, such
    as LEDs and buttons, are connected to specific ports and pins of the microcontroller.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The generic user guide by ARM
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ARM provides documents for every microcontroller and processor core they design.
    Important to our discussion is the generic user guide for our microcontroller
    core. As we’re using the STM32F411, which is based on the ARM Cortex-M4 core,
    we’ll refer to the Cortex-M4 generic user guide.
  prefs: []
  type: TYPE_NORMAL
- en: This means that if we were using an STM32F7 microcontroller, which is based
    on the ARM Cortex-M7 core, then we would need to get the Cortex-M7 generic user
    guide. The naming convention of this document is simply the name of the microcontroller
    core + the phrase `generic` `user guide`.
  prefs: []
  type: TYPE_NORMAL
- en: As the name implies, this document provides information generic to the specific
    microcontroller core. This means that the information provided in the Cortex-M4
    generic user guide applies to all microcontrollers based on the Cortex-M4 core,
    irrespective of the manufacturers of those microcontrollers. In contrast, the
    information provided in the STMicroelectronics documentation applies to only STMicroelectronics’
    microcontrollers.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.14: The relationship between the development board, microcontroller,
    and microcontroller core](img/B21914_01_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.14: The relationship between the development board, microcontroller,
    and microcontroller core'
  prefs: []
  type: TYPE_NORMAL
- en: '*Why do we need the generic* *user guide?*'
  prefs: []
  type: TYPE_NORMAL
- en: The generic user guide provides information on the core peripherals of the processor
    core. As the term suggests, these core peripherals are consistent across all microcontrollers,
    based on a specific core. The Cortex-M4 core has five core peripherals – the System
    Timer, Floating-Point Unit, System Control Block, Memory Protection Unit, and
    the Nested Vectored Interrupt Controller. When developing bare-metal drivers for
    these peripherals, the generic user guide is the definitive source for the essential
    details.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, the guide provides information on the microcontroller core’s Instruction
    Set, as well as the Programmer’s Model, Exception Model, fault handling, and power
    management.
  prefs: []
  type: TYPE_NORMAL
- en: Getting the documents
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To obtain the aforementioned documents, you can use the following search phrases
    on Google:'
  prefs: []
  type: TYPE_NORMAL
- en: '`STM32F11 Reference Manual` or `RM0383`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`STM32F411 Datasheet`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Nucleo-F11 User Manual` or `UM1724`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Cortex-M4 Generic` `User Guide`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Direct links to these documents are also available, in the *Technical requirements*
    section of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Before analyzing the key areas of the various documents to program our development
    board, let’s first take a closer look at the STM32CubeIDE we installed earlier.
    We will familiarize ourselves with its features and functionalities in the next
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Navigating the STM32CubeIDE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you launch STM32CubeIDE for the first time, you’ll see the **Information
    Center**. This center offers quick access to a number of valuable resources for
    STM32 firmware development.
  prefs: []
  type: TYPE_NORMAL
- en: To exit the Information Center, simply click the **X** on its tab. If you wish
    to revisit it later, simply navigate to **Help** | **Information Center**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.15: Information Center](img/B21914_01_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.15: Information Center'
  prefs: []
  type: TYPE_NORMAL
- en: The STM32CubeIDE is based on the Eclipse framework, and therefore, the layout
    and elements are similar to those of other Eclipse-based IDEs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s go through the process of creating a new project:'
  prefs: []
  type: TYPE_NORMAL
- en: Either click **Create a New STM32 project** in the empty **Project Explorer**
    pane or select **File** | **New** | **STM32 Project**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.16: A workspace showing an empty Project Explorer pane](img/B21914_01_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.16: A workspace showing an empty Project Explorer pane'
  prefs: []
  type: TYPE_NORMAL
- en: You will be presented with the **Target Selection** window to select the microcontroller
    or development board for your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Board** **Selector** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `NUCLEO-F411` into the **Commercial Part** **Number** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.17: The Target Selection window](img/B21914_01_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.17: The Target Selection window'
  prefs: []
  type: TYPE_NORMAL
- en: From the displayed board list, select **NUCLEO-F11RE**, and then click **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.18: The board list with NUCLEO-F411 selected](img/B21914_01_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.18: The board list with NUCLEO-F411 selected'
  prefs: []
  type: TYPE_NORMAL
- en: Give the project a name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For **Targeted Project Type**, select **Empty**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.19: The Setup STM32 project window](img/B21914_01_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.19: The Setup STM32 project window'
  prefs: []
  type: TYPE_NORMAL
- en: Click **Finish** to create the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will see the new project, containing all the necessary startup files and
    linker scripts, in the **Project** **Explorer** pane.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.20: The Project Explorer pane showing a new project](img/B21914_01_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.20: The Project Explorer pane showing a new project'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the control icons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The most frequently used control icons are the **New**, **Build**, and **Debug**
    icons.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.21: The control icons](img/B21914_01_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.21: The control icons'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s look closely at the functions of these icons:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The New icon**: This icon allows us to create various files, including source
    code, header files, projects, libraries, and more. This function is also accessible
    via **File** | **New**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Build icon**: Used for building projects. This functionality can also
    be accessed by right-clicking on a project and selecting **Build Project**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Debug icon**: This launches a debug configuration to facilitate project
    debugging. This functionality is also available by right-clicking a project and
    selecting **Debug Project**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These control icons provide quick access to essential functions, significantly
    enhancing productivity and streamlining the development process.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we set out to create a robust environment for embedded firmware
    development, focusing on the careful selection and setup of essential tools. Each
    tool we selected plays a crucial role in the efficient development of firmware
    for microcontrollers. We explored the installation processes of STM32CubeIDE,
    the GNU Arm Embedded Toolchain, and OpenOCD, laying a solid groundwork for our
    development activities.
  prefs: []
  type: TYPE_NORMAL
- en: We then introduced the NUCLEO-F411 development board, equipped with an STM32F411RE
    microcontroller, as our experimental platform, and we spent time identifying some
    of the components on the board.
  prefs: []
  type: TYPE_NORMAL
- en: We also emphasized the importance of knowing the different types of datasheets
    and reference manuals, equipping us with the ability to quickly access detailed
    information about a microcontroller’s architecture and functionalities.
  prefs: []
  type: TYPE_NORMAL
- en: Moving on to the next chapter, we will leap into developing our first bare-metal
    firmware, using only the documentation we have compiled as our guide.
  prefs: []
  type: TYPE_NORMAL
