["```cpp\n    virtual void Notify(USkeletalMeshComponent* MeshComp, UAnimSequenceBase* Animation, const FAnimNotifyEventReference& EventReference); \n    ```", "```cpp\n    public:   virtual void Notify(USkeletalMeshComponent* MeshComp, UAnimSequenceBase* Animation, const FAnimNotifyEventReference& EventReference) override;\n    ```", "```cpp\n     void UAnim_ProjectileNotify::Notify(USkeletalMeshComponent* MeshComp, UAnimSequenceBase* Animation, const FAnimNotifyEventReference& EventReference)\n    {\n       Super::Notify(MeshComp, Animation, EventReference);\n       UE_LOG(LogTemp, Warning, TEXT(\"Throw Notify\"));\n    }\n    ```", "```cpp\n Notify(USkeletalMeshComponent* MeshComp, UAnimSequenceBase* Animation, const FAnimNotifyEventReference& EventReference)\n```", "```cpp\n    UPROPERTY(EditAnywhere)\n    class UAnimMontage* ThrowMontage;\n    ```", "```cpp\n    #include \"Animation/AnimInstance.h\"\n    ```", "```cpp\n\n//Bind the pressed action Throw to your ThrowProjectile function\nEnhancedPlayerInput->BindAction(IA_Throw, ETriggerEvent::Triggered, this, &ASuperSideScroller_Player::ThrowProjectile);\n```", "```cpp\n    void ASuperSideScroller_Player::ThrowProjectile()\n    {\n      if (ThrowMontage)\n      {\n        const bool bIsMontagePlaying = GetMesh()\n        ->GetAnimInstance()->\n          Montage_IsPlaying(ThrowMontage);\n        if (!bIsMontagePlaying)\n        {\n          GetMesh()->GetAnimInstance()\n          ->Montage_Play(ThrowMontage, \n            1.0f);\n        }\n        }    }\n    ```", "```cpp\n    Location = (X=30.145807,Y=36.805481,Z=-10.23186)\n    ```", "```cpp\n    UPROPERTY(EditAnywhere)\n    TSubclassOf<class APlayerProjectile> PlayerProjectile;\n    ```", "```cpp\n    void SpawnProjectile();\n    ```", "```cpp\n    #include \"PlayerProjectile.h\"\n    #include \"Engine/World.h\"\n    #include \"Components/SphereComponent.h\"\n    ```", "```cpp\n    void ASuperSideScroller_Player::SpawnProjectile()\n    {\n    }\n    ```", "```cpp\n    void ASuperSideScroller_Player::SpawnProjectile()\n    {\n      if(PlayerProjectile)\n        {\n        }\n    }\n    ```", "```cpp\n    void ASuperSideScroller_Player::SpawnProjectile()\n    {\n      if(PlayerProjectile)\n        {\n          UWorld* World = GetWorld();\n          if (World)\n            {\n            }\n        }\n    }\n    ```", "```cpp\n    void ASuperSideScroller_Player::SpawnProjectile()\n    {\n      if(PlayerProjectile)\n        {\n          UWorld* World = GetWorld();\n          if (World)\n            {\n              FActorSpawnParameters SpawnParams;\n              SpawnParams.Owner = this;\n            }\n        }\n    }\n    ```", "```cpp\n    const FVector SpawnLocation = this->GetMesh()-\n      >GetSocketLocation(FName(\"ProjectileSocket\"));\n    const FRotator Rotation = GetActorForwardVector().Rotation();\n    ```", "```cpp\n    APlayerProjectile* Projectile = World-\n      >SpawnActor<APlayerProjectile>(PlayerProjectile, \n      SpawnLocation, \n      Rotation, SpawnParams);\n    ```", "```cpp\n #include \"Anim_ProjectileNotify.h\"\nvoid UAnim_ProjectileNotify::Notify(USkeletalMeshComponent* MeshComp, UAnimSequenceBase* Animation, const FAnimNotifyEventReference& EventReference)\n{\n   Super::Notify(MeshComp, Animation, EventReference);\n   UE_LOG(LogTemp, Warning, TEXT(\"Throw Notify\"));\n}\n```", "```cpp\n    #include \"Components/SkeletalMeshComponent.h\"\n    #include \"SuperSideScroller/SuperSideScroller_Player.h\"\n    ```", "```cpp\n    ASuperSideScroller_Player* Player = \n      Cast<ASuperSideScroller_Player>(\n      MeshComp->GetOwner());\n    ```", "```cpp\n    if (Player)\n    {\n      Player->SpawnProjectile();\n    }\n    ```", "```cpp\nbool AActor::Destroy( bool bNetForce, bool bShouldModifyLevel )\n```", "```cpp\nWorld->DestroyActor( this, bNetForce, bShouldModifyLevel );\n```", "```cpp\n    public:\n      void DestroyEnemy();\n    ```", "```cpp\n    void AEnemyBase::DestroyEnemy()\n    {\n    }\n    ```", "```cpp\n    void AEnemyBase::DestroyEnemy()\n    {\n      Destroy();\n    }\n    ```", "```cpp\n    void ExplodeProjectile();\n    ```", "```cpp\n    void APlayerProjectile::ExplodeProjectile()\n    {\n    }\n    ```", "```cpp\n    void APlayerProjectile::ExplodeProjectile()\n    {\n      Destroy();\n    }\n    ```", "```cpp\nUGameplayStatics::SpawnEmitterAtLocation\nUGameplayStatics:SpawnSoundAtLocation\n```", "```cpp\n    A_Guardian_Death_Cue\n    P_Goblin_Death\n    ```", "```cpp\n    UPROPERTY(EditAnywhere, BlueprintReadOnly)\n    class UParticleSystem* DeathEffect;\n    ```", "```cpp\n    UPROPERTY(EditAnywhere, BlueprintReadOnly)\n    class USoundBase* DeathSound;\n    ```", "```cpp\n    #include \"Kismet/GameplayStatics.h\"\n    #include \"Engine/World.h\"\n    ```", "```cpp\n    Destroy();\n    ```", "```cpp\n    UWorld* World = GetWorld();\n    ```", "```cpp\n    if(World)\n    {\n    }\n    ```", "```cpp\n    if(DeathEffect)\n    {\n        UGameplayStatics::SpawnEmitterAtLocation(World, \n          DeathEffect, GetActorTransform());\n    }\n    ```", "```cpp\n    if(DeathSound)\n    {\n        UGameplayStatics::SpawnSoundAtLocation(World, \n          DeathSound, GetActorLocation());\n    }\n    ```", "```cpp\nP_Env_Fire_Grate_01\nA_Ambient_Fire01_Cue\n```", "```cpp\n    UPROPERTY(VisibleDefaultsOnly, Category = Sound)\n    class UAudioComponent* ProjectileMovementSound;\n    ```", "```cpp\n    UPROPERTY(VisibleDefaultsOnly, Category = Projectile)\n    class UParticleSystemComponent* ProjectileEffect;\n    ```", "```cpp\n    #include \"Components/AudioComponent.h\"\n    #include \"Engine/Classes/Particles/ParticleSystemComponent.h\"\n    ```", "```cpp\n    ProjectileMovementSound = CreateDefaultSubobject<UAudioComponent>\n      (TEXT(\"ProjectileMovementSound\"));\n      ProjectileMovementSound\n      ->AttachToComponent(RootComponent, \n      FAttachmentTransformRules::KeepWorldTransform);\n    ```", "```cpp\n    ProjectileEffect = CreateDefaultSubobject<UParticle SystemComponent>(TEXT(\"Projectile\n      Effect\"));\n    ProjectileEffect->AttachToComponent(RootComponent, \n      FAttachmentTransformRules::KeepWorldTransform);\n    ```", "```cpp\nP_Skill_001\nA_Ability_FireballCast_Cue\n```", "```cpp\n(X=0.000000,Y=100.000000,Z=0.000000)\n```", "```cpp\n    (X=0.500000,Y=0.500000,Z=0.500000)\n    ```"]