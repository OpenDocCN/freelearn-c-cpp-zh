["```cpp\nlong long sumOfSquares(const vector<int> numbers){\n     vector<long long> squaredNumbers(numbers.size());\n     auto squareNumber = [](const long it ){ return it * it; };\n     transform(numbers.begin(), numbers.end(), squaredNumbers.begin(), squareNumber);\n     return reduce(squaredNumbers.begin(), squaredNumbers.end(), 0);\n}\nTEST_CASE(\"sum of squares in parallel\") {\n        vector<int> numbers{234, 423, 345, 212, 112, 2412};\n        CHECK_EQ(6227942, sumOfSquares(numbers));\n}\n```", "```cpp\nlong long sumOfSquares(const vector<int> numbers){\n     vector<long long> squaredNumbers(numbers.size());\n     auto squareNumber = [](const long it ){ return it * it; };\n     transform(std::execution::par, numbers.begin(), numbers.end(), squaredNumbers.begin(), squareNumber);\n     return reduce(std::execution::par, squaredNumbers.begin(), squaredNumbers.end(), 0);\n}\n```", "```cpp\nbehavior chatter(event_based_actor* self, const string& name) {\nreturn {\n[=] (const string& msg) {\ncout << name << \" received: \" << msg << endl;\n}\n};\n}\nvoid caf_main(actor_system& system) {\n          auto alice = system.spawn(chatter, \"Alice\");\n          auto bob = system.spawn(chatter, \"Bob\");\n          scoped_actor self{system};\n          self->send(alice, \"Hello Alice!\");\n          self->send(bob, \"Hello Bob!\");\n          self->send(alice, \"How are you?\");\n          self->send(bob, \"I'm good, thanks!\");\n          sleep_for(seconds(1));\n}\nCAF_MAIN()\n```", "```cpp\nBob received: Hello Bob!\nAlice received: Hello Alice!\nAlice received: How are you?\nBob received: I'm good, thanks!\n```", "```cpp\nBob received: Hello Bob!\nBob received: I'm good, thanks!\nAlice received: Hello Alice!\nAlice received: How are you?\n```", "```cpp\nAlice received: Hello Alice!\nBobAlice received: How are you? received: Hello Bob!\nBob received: I'm good, thanks!\n```"]