["```cpp\nextern \"C\" {\n#include \"lua.h\"\n#include \"lualib.h\"\n#include \"lauxlib.h\"\n}\n```", "```cpp\n#include <lua.hpp>\nclass LuaExecutor\n{\npublic:\n    LuaExecutor();\n    virtual ~LuaExecutor();\nprivate:\n    lua_State *const L;\n};\n```", "```cpp\n#include \"LuaExecutor.h\"\nLuaExecutor::LuaExecutor()\n    : L(luaL_newstate())\n{\n    luaL_openlibs(L);\n}\nLuaExecutor::~LuaExecutor()\n{\n    lua_close(L);\n}\n```", "```cpp\nclass Lua\n{\npublic:\n    void openlibs();\nprivate:\n    LuaState *pImpl;\n};\nstruct LuaState\n{\n    // implementation details\n};\n```", "```cpp\n#include <string>\nclass LuaExecutor\n{\npublic:\n    void executeFile(const std::string &path);\nprivate:\n    void pcall(int nargs = 0, int nresults = 0);\n    std::string popString();\n};\n```", "```cpp\n#include <iostream>\nvoid LuaExecutor::executeFile(const std::string &path)\n{\n    if (luaL_loadfile(L, path.c_str()))\n    {\n        std::cerr << \"Failed to prepare file: \"\n                  << popString() << std::endl;\n        return;\n    }\n    pcall();\n}\n```", "```cpp\nvoid LuaExecutor::pcall(int nargs, int nresults)\n{\n    if (lua_pcall(L, nargs, nresults, 0))\n    {\n        std::cerr << \"Failed to execute Lua code: \"\n                  << popString() << std::endl;\n    }\n}\n```", "```cpp\nstd::string LuaExecutor::popString()\n{\n    std::string result(lua_tostring(L, -1));\n    lua_pop(L, 1);\n    return result;\n}\n```", "```cpp\nprint(\"Hello C++\")\n```", "```cpp\n#include \"LuaExecutor.h\"\nint main()\n{\n    LuaExecutor lua;\n    lua.executeFile(\"script.lua\");\n    return 0;\n}\n```", "```cpp\nLUA_PATH = ../lua/src\nCXX = g++\nCXXFLAGS = -Wall -Werror\nCPPFLAGS = -I${LUA_PATH}\nLDFLAGS = -L${LUA_PATH}\nEXECUTABLE = executable\nall: lua project\nlua:\n    @cd ../lua && make\nproject: main.cpp LuaExecutor.cc LuaExecutor.h\n    $(CXX) $(CXXFLAGS) $(CPPFLAGS) $(LDFLAGS) -o\n       $(EXECUTABLE) main.cpp LuaExecutor.cc -llua\nclean:\n    rm -f $(EXECUTABLE)\n```", "```cpp\nChapter03 % make\nChapter03 % ./executable\nHello C++\n```", "```cpp\nclass LuaExecutor\n{\npublic:\n    void execute(const std::string &script);\n};\n```", "```cpp\nvoid LuaExecutor::execute(const std::string &script)\n{\n    if (luaL_loadstring(L, script.c_str()))\n    {\n        std::cerr << \"Failed to prepare script: \"\n                  << popString() << std::endl;\n        return;\n    }\n    pcall();\n}\n```", "```cpp\n#include \"LuaExecutor.h\"\nint main()\n{\n    LuaExecutor lua;\n    lua.execute(\"print('Hello Lua')\");\n    return 0;\n}\n```", "```cpp\nprint('Hello Lua')\n```", "```cpp\nlua.execute(\"print('Hello Lua'\");\n```", "```cpp\nFailed to prepare script: [string \"print('Hello Lua'\"]:1:\n')' expected near <eof>\n```", "```cpp\nlua.execute(\"print(a / 2)\");\n```", "```cpp\nFailed to execute Lua code: [string \"print(a / 2)\"]:1:\nattempt to perform arithmetic on a nil value (global 'a')\n```", "```cpp\nvoid lua_pushnil     (lua_State *L);\nvoid lua_pushboolean (lua_State *L, int bool);\nvoid lua_pushnumber  (lua_State *L, lua_Number n);\nvoid lua_pushinteger (lua_State *L, lua_Integer n);\nvoid lua_pushstring  (lua_State *L, const char *s);\n```", "```cpp\nint         lua_toboolean (lua_State *L, int index);\nconst char *lua_tostring  (lua_State *L, int index);\nlua_Number  lua_tonumber  (lua_State *L, int index);\nlua_Integer lua_tointeger (lua_State *L, int index);\n```", "```cpp\nvoid lua_pop (lua_State *L, int n);\n```", "```cpp\nstd::string LuaExecutor::popString()\n{\n    std::string result(lua_tostring(L, -1));\n    lua_pop(L, 1);\n    return result;\n}\n```", "```cpp\nwhom = \"C++\"\nfunction hello()\n    print(\"Hello \" .. whom)\nend\n```", "```cpp\nint lua_getglobal (lua_State *L, const char *name);\n```", "```cpp\n#define LUA_TNIL           0\n#define LUA_TBOOLEAN       1\n#define LUA_TLIGHTUSERDATA 2\n#define LUA_TNUMBER        3\n#define LUA_TSTRING        4\n#define LUA_TTABLE         5\n#define LUA_TFUNCTION      6\n#define LUA_TUSERDATA      7\n#define LUA_TTHREAD        8\n```", "```cpp\nclass LuaExecutor\n{\npublic:\n    std::string getGlobalString(const std::string &name);\n};\n```", "```cpp\nstd::string\nLuaExecutor::getGlobalString(const std::string &name)\n{\n    const int type = lua_getglobal(L, name.c_str());\n    assert(LUA_TSTRING == type);\n    return popString();\n}\n```", "```cpp\nclass LuaExecutor\n{\npublic:\n    void setGlobal(const std::string &name,\n                   const std::string &value);\n};\n```", "```cpp\nvoid LuaExecutor::setGlobal(const std::string &name,\n                            const std::string &value)\n{\n    lua_pushstring(L, value.c_str());\n    lua_setglobal(L, name.c_str());\n}\n```", "```cpp\n#include <iostream>\n#include \"LuaExecutor.h\"\nint main()\n{\n    LuaExecutor lua;\n    lua.executeFile(\"script.lua\");\n    std::cout << \"Lua variable whom=\"\n              << lua.getGlobalString(\"whom\")\n              << std::endl;\n    lua.execute(\"hello()\");\n    lua.setGlobal(\"whom\", \"Lua\");\n    std::cout << \"Lua variable whom=\"\n              << lua.getGlobalString(\"whom\")\n              << std::endl;\n    lua.execute(\"hello()\");\n    return 0;\n}\n```", "```cpp\nLua variable whom=C++\nHello C++\nLua variable whom=Lua\nHello Lua\n```", "```cpp\nfunction greetings(whom)\n    return \"Hello \" .. whom\nend\n```", "```cpp\nLuaExecutor lua;\nlua.executeFile(\"script.lua\");\nlua.execute(\"greetings('Lua')\");\n```", "```cpp\nclass LuaExecutor\n{\npublic:\n    std::string call(const std::string &function,\n                     const std::string &param);\n};\n```", "```cpp\nstd::string\nLuaExecutor::call(const std::string &function,\n                  const std::string &param)\n{\n    int type = lua_getglobal(L, function.c_str());\n    assert(LUA_TFUNCTION == type);\n    lua_pushstring(L, param.c_str());\n    pcall(1, 1);\n    return popString();\n}\n```", "```cpp\ngreetings = function (whom)\n    return \"Hello \" .. whom\nend\n```", "```cpp\n#include <iostream>\n#include \"LuaExecutor.h\"\nint main()\n{\n    LuaExecutor lua;\n    lua.executeFile(\"script.lua\");\n    std::cout << lua.call(\"greetings\", \"next adventure\")\n              << std::endl;\n    return 0;\n}\n```"]