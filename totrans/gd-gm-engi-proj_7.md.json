["```cpp\nCollisionObject2D < Node2D < CanvasItem < Node < Object\n```", "```cpp\nvar target = Vector2()\n\nfunc _input(event):\n    if event is InputEventScreenTouch and event.pressed:\n        target = event.position\n\nfunc _process(delta):\n    velocity = (target - position).normalized() * speed\n    if (target - position).length() > 5:\n        position += velocity * delta\n    else:\n        velocity = Vector2()\n\n    if velocity.length() > 0:\n        $AnimatedSprite.animation = \"run\"\n        $AnimatedSprite.flip_h = velocity.x < 0\n    else:\n        $AnimatedSprite.animation = \"idle\"\n```", "```cpp\nkeytool -keyalg RSA -genkeypair -alias androiddebugkey -keypass android -keystore debug.keystore -storepass android -dname \"CN=Android Debug,O=Android,C=US\" -validity 9999\n```", "```cpp\nadb install dodge.apk\n```", "```cpp\nshader_type canvas_item; // choose spatial, canvas_item, or particles\n\nvoid fragment(){\n    // code in this function runs on every pixel\n}\n\nvoid vertex() {\n    // code in this function runs on each vertex\n}\n\nvoid light() {\n    // code in this function affects light processing\n}\n```", "```cpp\nshader_type canvas_item;\n\nuniform vec4 fill_color:hint_color;\n\nvoid fragment(){\n    COLOR.rgb = fill_color.rgb;\n}\n```", "```cpp\nCOLOR.a = texture(TEXTURE, UV).a;\n```", "```cpp\nshader_type canvas_item;\n\nuniform float radius = 10.0;\n\nvoid fragment(){\n    vec4 new_color = texture(TEXTURE, UV);\n    vec2 pixel_size = TEXTURE_PIXEL_SIZE; // size of the texture in pixels\n\n    new_color += texture(TEXTURE, UV + vec2(0, -radius) * pixel_size);\n    new_color += texture(TEXTURE, UV + vec2(0, radius) * pixel_size);\n    new_color += texture(TEXTURE, UV + vec2(-radius, 0) * pixel_size);\n    new_color += texture(TEXTURE, UV + vec2(radius, 0) * pixel_size);\n\n    COLOR = new_color / 5.0;\n}\n```", "```cpp\nusing Godot;\nusing System;\n\npublic class Movement : KinematicBody2D\n{\n    [Export] public int speed = 200;\n\n    Vector2 velocity = new Vector2();\n\n    public void GetInput()\n    {\n        velocity = new Vector2();\n        if (Input.IsActionPressed(\"right\"))\n        {\n            velocity.x += 1;\n        }\n        if (Input.IsActionPressed(\"left\"))\n        {\n            velocity.x -= 1;\n        }\n        if (Input.IsActionPressed(\"down\"))\n        {\n            velocity.y += 1;\n        }\n        if (Input.IsActionPressed(\"up\"))\n        {\n            velocity.y -= 1;\n        }\n        velocity = velocity.Normalized() * speed;\n    }\n\n    public override void _PhysicsProcess(float delta)\n    {\n        GetInput();\n        MoveAndSlide(velocity);\n    }\n}\n```", "```cpp\nextends Node\n\nfunc _ready():\n    var lib = GDNative.new()\n    lib.library = load(\"res://somelib.tres\")\n    lib.initialize()\n\n    // call functions in the library\n    var result = lib.call_native(\"call_type\", \"some_function\", arguments_array)\n\n    lib.terminate()\n```", "```cpp\n#include <gdnative.h>\n\nvoid GDN_EXPORT godot_gdnative_init(godot_gdnative_init_options *p_options) {\n    // initialization code\n}\n\nvoid GDN_EXPORT godot_gdnative_terminate(godot_gdnative_terminate_options *p_options) {\n    // termination code\n}\n\nvoid GDN_EXPORT godot_nativescript_init(void *p_handle) {\n\n}\n\ngodot_variant GDN_EXPORT some_function(void *args) {\n    // Do something\n}\n```"]