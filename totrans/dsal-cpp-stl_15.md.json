["```cpp\n\nstd::sort(v.begin(), v.end());\n```", "```cpp\n\nstd::ranges::sort(v);\n```", "```cpp\n\nstd::vector<int> nums = {4, 1, 3, 2};\nstd::sort(nums.begin(), nums.end());\n```", "```cpp\n\nstd::vector<int> nums = {4, 1, 3, 2};\nstd::ranges::sort(nums);\n```", "```cpp\n\n#include <algorithm>\n#include <iostream>\n#include <ranges>\n#include <vector>\nint main() {\n  std::vector<int> data = {5, 2, 9, 1, 5, 6, 8, 7, 3, 4};\n  // Create a view of the data that filters even numbers\n  // and then sorts them\n  auto even_sorted =\n      data | std::views::filter([](int x) {\n        return x % 2 == 0;\n      }) |\n      std::views::transform([](int x) { return -x; }) |\n      std::ranges::to<std::vector<int>>();\n  std::sort(even_sorted.begin(), even_sorted.end());\n  // Display the sorted even numbers\n  std::cout << \"Sorted even numbers: \";\n  for (int num : even_sorted) { std::cout << num << \" \"; }\n  std::cout << \"\\n\";\n  return 0;\n}\n```", "```cpp\n\nSorted even numbers: -8 -6 -4 -2\n```", "```cpp\n\nstd::vector<int> nums = {1, 2, 3, 4, 5};\nauto it = std::find(nums.begin(), nums.end(), 3);\n```", "```cpp\n\nstd::vector<int> nums = {1, 2, 3, 4, 5};\nauto it = std::ranges::find(nums, 3);\n```", "```cpp\n\n#include <iostream>\n#include <ranges>\n#include <vector>\nbool is_prime(int number) {\n  if (number <= 1) return false;\n  for (int i = 2; i * i <= number; i++) {\n    if (number % i == 0) return false;\n  }\n  return true;\n}\nint main() {\n  std::vector<int> nums = {4,  6,  8,  9,  10, 11,\n                           13, 15, 17, 19, 23, 25};\n  auto prime_greater_than_10 =\n      nums |\n      std::views::filter([](int n) { return n > 10; }) |\n      std::views::filter(is_prime) | std::views::take(3);\n  std::cout\n      << \"First three prime numbers greater than 10: \";\n  for (int num : prime_greater_than_10) {\n    std::cout << num << \" \";\n  }\n  std::cout << \"\\n\";\n  return 0;\n}\n```", "```cpp\n\nFirst three prime numbers greater than 10: 11 13 17\n```", "```cpp\n\nstd::vector<int> nums = {5, 8, 10, 14, 18};\nauto result = nums | std::views::filter([](int n) { return n % 2 == 0; })\n                   | std::views::transform([](int n) { return n * 2; });\n```", "```cpp\n\nauto doubledEvens() {\n    std::vector<int> nums = {1, 2, 3, 4, 5};\n    return nums | std::views::filter([](int n) { return n % 2 == 0; })\n                | std::views::transform([](int n) { return n * 2; });\n}\n```", "```cpp\n\nint x = 0;\nauto range = std::views::iota(1) | std::views::transform([&x](int n) { return x += n; });\n```"]