- en: '1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Look-and-Feel Customization with Qt Designer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Qt 6 allows us to easily design our program’s user interface through a method
    most people are familiar with. Qt not only provides us with a powerful user interface
    toolkit, called **Qt Designer**, which enables us to design our user interface
    without writing a single line of code, but it also allows advanced users to customize
    their user interface components through a simple scripting language called **Qt**
    **Style Sheet**.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Using style sheets with Qt Designer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing basic style sheets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a login screen using style sheets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using resources in style sheets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing properties and sub-controls
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Styling in **Qt Modeling** **Language** (**QML**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exposing the QML object pointer to C++
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The technical requirements for this chapter include having **Qt 6.1.1 MinGW
    64-bit** and **Qt Creator 12.0.2**. The code that’s used in this chapter can be
    downloaded from this book’s GitHub repository: [https://github.com/PacktPublishing/QT6-C-GUI-Programming-Cookbook---Third-Edition-/tree/main/Chapter01](https://github.com/PacktPublishing/QT6-C-GUI-Programming-Cookbook---Third-Edition-/tree/main/Chapter01).'
  prefs: []
  type: TYPE_NORMAL
- en: Using style sheets with Qt Designer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this example, we will learn how to change the look and feel of our program
    and make it look more professional by using style sheets and resources. Qt allows
    you to decorate your **graphical user interfaces** (**GUIs**) using a style sheet
    language called **Qt Style Sheets**, which is very similar to **Cascading Style
    Sheets** (**CSS**), something that’s used by web designers to decorate their websites.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s get started by learning how to create a new project and get ourselves
    familiar with Qt Designer:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up **Qt Creator** and create a new project. If this is the first time you
    have used Qt Creator, you can either click the big button, which reads **Create
    Project…**, or simply go to **File** | **New Project…**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Application (Qt)** from the **Projects** window and select **Qt** **Widgets
    Application**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Choose...** button at the bottom. A window will pop out and ask
    you to insert the project’s name and its location.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Next** several times, then click the **Finish** button to create the
    project. We will stick with the default settings for now. Once the project has
    been created, the first thing you will see is a panel with tons of big icons on
    the left-hand side of the window, which is called the mode selector panel; we
    will discuss this in more detail in the *Dissecting Qt* *Designer* recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will see all your source files listed on the sidebar panel, which is located
    next to the mode selector panel. This is where you can select which file you want
    to edit. In this case, this is `mainwindow.ui`, because we are about to start
    designing the program’s UI.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click the `mainwindow.ui` file; you will see an entirely different interface
    appear out of nowhere. Qt Creator helped you switch from the script editor to
    the UI editor (Qt Designer) because it detected the `.ui` extension on the file
    you’re trying to open.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will also notice that the highlighted button on the mode selector panel
    has changed from **Edit** to **Design**. You can switch back to the script editor
    or change to any other tools by clicking one of the buttons located in the upper
    half of the mode selector panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let’s go back to Qt Designer and look at the `mainwindow.ui` file. This is the
    main window of our program (as the filename implies) and it’s empty by default,
    without any widget on it. You can try to compile and run the program by pressing
    the **Run** button (the green arrow button) at the bottom of the mode selector
    panel; you will see an empty window pop up once the compilation is complete.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let’s add a push button to our program’s UI by clicking on the **Push Button**
    item in the **Widget Box** area (under the **Buttons** category) and dragging
    it to our main window in the form editor. Keep the push button selected; you will
    see all the properties of this button inside the **Property Editor** area on the
    right-hand side of your window. Scroll down to the middle and look for a property
    called **styleSheet**. This is where you will apply styles to your widget, which
    may or may not be inherited from its children or grandchildren recursively, depending
    on how you set your style sheet. Alternatively, you can right-click on any widget
    in your UI at the form editor and select **Change styleSheet...** from the pop-up
    menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can click on the input field of the **styleSheet** property to directly
    write the style sheet code, or click on the **…** button beside the input field
    to open up the **Edit Style Sheet** window, which has a bigger space for writing
    longer code for style sheets. At the top of the window, you can find several buttons,
    such as **Add Resource**, **Add Gradient**, **Add Color**, and **Add Font**, that
    can help you kickstart your coding if you can’t remember the properties’ names.
    Let’s try to do some simple styling with the **Edit Style** **Sheet** window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Add Color** and choose a color.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pick a random color from the color picker window – let’s say, a pure red color.
    Then, click **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A line of code has been added to the text field in the **Edit Style Sheet**
    window, which in my case is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click the **OK** button; the text on your push button should change to red.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s take a bit of time to get familiar with Qt Designer’s interface before
    we start learning how to design our own UI:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.1 – Overview of Qt Designer’s interface](img/B20976_01_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.1 – Overview of Qt Designer’s interface
  prefs: []
  type: TYPE_NORMAL
- en: 'The explanation for the preceding screenshot is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Menu bar**: The menu bar houses application-specific menus that provide easy
    access to essential functions, such as creating new projects, saving files, undoing,
    redoing, copying, and pasting. It also allows you to access development tools
    that come with Qt Creator, such as the compiler, debugger, and profiler.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Widget Box**: This is where you can find all the different types of widgets
    provided by Qt Designer. You can add a widget to your program’s UI by clicking
    one of the widgets from the **Widget Box** area and dragging it to the form editor.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Mode selector**: The mode selector is a side panel that places shortcut buttons
    for easy access to different tools. You can quickly switch between the script
    editor and form editor by clicking the **Edit** or **Design** button on the mode
    selector panel, which is very useful for multitasking. You can also easily navigate
    to the debugger and profiler tools at the same speed and manner.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Build shortcuts**: The build shortcuts are located at the bottom of the mode
    selector panel. You can build, run, and debug your project easily by pressing
    the shortcut buttons here.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Form editor**: The form editor is where you edit your program’s UI. You can
    add different widgets to your program by selecting a widget from the **Widget
    Box** area and dragging it to the form editor.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Form toolbar**: From here, you can quickly select a different form to edit.
    Click the drop-down box located at the top of the **Widget Box** area and select
    the file you want to open with Qt Designer. Beside the drop-down box are buttons
    to switch between the different modes of the form editor, and also buttons to
    change the layout of your UI.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`.ui` file. All the widgets are arranged according to their parent-child relationship
    in the hierarchy. You can select a widget from the **Object Inspector** area to
    display its properties in the **Property** **Editor** area.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Property Editor**: The **Property Editor** area will display all the properties
    of the widget you selected from either the **Object Inspector** area or the form
    editor window.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Action Editor** and **Signals & Slots Editor**: This window contains two
    editors: **Action Editor** and **Signals & Slots Editor**. Both can be accessed
    from the tabs beneath the window. **Action Editor** is where you create actions
    that can be added to a menu bar or toolbar in your program’s UI.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Output panes**: Output panes consist of several different windows that display
    information and output messages related to script compilation and debugging. You
    can switch between different output panes by pressing the buttons that carry a
    number before them, such as **1 Issues**, **2 Search Results**, or **3** **Application
    Output**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we discussed how to apply style sheets to Qt widgets through
    C++ coding. Although that method works well, most of the time, the person who
    is in charge of designing the program’s UI is not the programmer, but rather a
    UI designer who specializes in designing user-friendly UI. In this case, it’s
    better to let the UI designer design the program’s layout and style sheet with
    a different tool and not mess around with the code. Qt provides an all-in-one
    editor called **Qt Creator**.
  prefs: []
  type: TYPE_NORMAL
- en: Qt Creator consists of several different tools, such as a script editor, compiler,
    debugger, profiler, and UI editor. The UI editor, which is also called **Qt Designer**,
    is the perfect tool for designers to design their program’s UI without writing
    any code. This is because Qt Designer adopted the *what you see is what you get*
    approach by providing an accurate visual representation of the final result, which
    means whatever you design with Qt Designer will turn out the same visually when
    the program is compiled and run.
  prefs: []
  type: TYPE_NORMAL
- en: 'The similarities between Qt Style Sheets and CSS are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is how a typical piece of CSS code looks:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This is how Qt Style Sheets look, which is almost the same as the preceding
    CSS:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you can see, both of them contain a selector and a declaration block. Each
    declaration contains a property and a value, separated by a colon. In Qt, a style
    sheet can be applied to a single widget by calling the `QObject::setStyleSheet()`
    function in C++ code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code will turn the text of a button with the `myPushButton` variable
    name to blue. You can achieve the same result by writing the declaration in the
    style sheet property field in Qt Designer. We will discuss Qt Designer more in
    the *Customizing basic style* *sheets* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Qt Style Sheets also supports all the different types of selectors defined
    in the CSS2 standard, including the `usernameEdit` object name, we can do this
    by using an ID selector to refer to it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'QLineEdit#usernameEdit { background-color: blue }'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'To learn about all the selectors available in CSS2 (which are also supported
    by Qt Style Sheets), please refer to this document: [http://www.w3.org/TR/REC-CSS2/selector.html](http://www.w3.org/TR/REC-CSS2/selector.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Customizing basic style sheets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, you learned how to apply a style sheet to a widget with
    Qt Designer. Let’s go crazy and push things further by creating a few other types
    of widgets and changing their style properties to something bizarre for the sake
    of learning.
  prefs: []
  type: TYPE_NORMAL
- en: This time, however, we will not apply the style to every single widget one by
    one; instead, we will learn to apply the style sheet to the main window and let
    it inherit down the hierarchy to all the other widgets so that the style sheet
    is easier to manage and maintain in the long run.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the following example, we will format different types of widgets on the
    canvas and add some code to the style sheet to change its appearance:'
  prefs: []
  type: TYPE_NORMAL
- en: Remove the style sheet from `PushButton` by selecting it and clicking the small
    arrow button beside the **styleSheet** property. This button will revert the property
    to its default value, which in this case is the empty style sheet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a few more widgets to the UI by dragging them one by one from the **Widget
    Box** area to the form editor. I’ve added a line edit, combo box, horizontal slider,
    radio button, and a check box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For the sake of simplicity, delete **menuBar**, **mainToolBar**, and **statusBar**
    from your UI by selecting them in the **Object Inspector** area, right-clicking,
    and choosing **Remove**. Now, your UI should look similar to this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.2 – Dragging and dropping some widgets onto the form editor](img/B20976_01_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.2 – Dragging and dropping some widgets onto the form editor
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the main window from either the form editor or the **Object Inspector**
    area, then right-click and choose **Change styleSheet...** to open the **Edit
    Style Sheet** window. Insert the following into the style sheet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will see a bizarre-looking UI with everything covered in yellow with a
    thick border. This is because the preceding style sheet does not have a selector,
    which means the style will apply to the children widgets of the main window down
    the hierarchy. To change that, let’s try something different:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This time, only **PushButton** will get the style described in the preceding
    code, and all the other widgets will return to the default styling. You can try
    to add a few more push buttons to your UI; they will all look the same:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.3 – Changing the push buttons to yellow](img/B20976_01_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.3 – Changing the push buttons to yellow
  prefs: []
  type: TYPE_NORMAL
- en: 'This happens because we specifically tell the selector to apply the style to
    all the widgets with the `QPushButton` class. We can also apply the style to just
    one of the push buttons by mentioning its name in the style sheet, as shown in
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once you understand this method, we can add the following code to the style
    sheet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This code changes the style of all the push buttons, as well as some properties
    of the `pushButton_2` button. We keep the style sheet of `pushButton_3` as-is.
    Now, the buttons will look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.4 – Applying a different style to each button](img/B20976_01_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.4 – Applying a different style to each button
  prefs: []
  type: TYPE_NORMAL
- en: The first set of style sheets will change all widgets of the `QPushButton` type
    to a white rectangular button with no border and red text. The second set of style
    sheets only changes the border of a specific `QPushButton` widget called `pushButton_2`.
    Notice that the background color and text color of `pushButton_2` remain white
    and red, respectively, because we didn’t override them in the second set of style
    sheets, hence it will return to the style described in the first set of style
    sheets since it applies to all the `QPushButton` widgets. The text of the third
    button has also changed to red because we didn’t describe the **Color** property
    in the third set of style sheets.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create another set of style sheets that use the universal selector by using
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The universal selector will affect all the widgets, regardless of their type.
    Therefore, the preceding style sheet will apply a nice gradient color to all the
    widgets’ backgrounds and set their text to white with a one-pixel solid outline
    that is also white. Instead of writing the name of the color (that is, white),
    we can use the `rgb` function (`rgb(255, 255, 255)`) or hex code (`#ffffff`) to
    describe the color value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As before, the preceding style sheet will not affect the push buttons because
    we have already given them their own styles, which will override the general style
    described in the universal selector. Just remember that in Qt, the more specific
    style will ultimately be used when there is more than one style with an influence
    on a widget. This is how the UI will look now:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.5 – Applying a gradient background to all the other widgets](img/B20976_01_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.5 – Applying a gradient background to all the other widgets
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you are ever involved in web development using HTML and CSS, Qt’s style sheets
    work the same way as CSS. Style sheets provide the definitions to describe the
    presentation of the widgets – what the colors are for each element in the widget
    group, how thick the border should be, and so on. If you specify the name of the
    widget to the style sheet, it will change the style of the particular `PushButton`
    widget with the name you provide. None of the other widgets will be affected and
    will remain as the default style.
  prefs: []
  type: TYPE_NORMAL
- en: To change the name of a widget, select the widget from either the form editor
    or the **Object Inspector** area and change the **objectName** property in the
    property window. If you used the ID selector previously to change the style of
    the widget, changing its object name will break the style sheet and lose the style.
    To fix this problem, simply change the object name in the style sheet as well.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a login screen using style sheets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, we will learn how to put all the knowledge we learned in the previous
    recipe together and create a fake graphical login screen for an imaginary operating
    system. Style sheets are not the only thing you need to master to design a good
    UI. You will also need to learn how to arrange the widgets neatly using the layout
    system in Qt Designer.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s get started by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to design the layout of the graphical login screen before we start
    doing anything. Planning is very important to produce good software. The following
    is a sample layout design I made to show you how I imagine the login screen will
    look. Just a simple line drawing like this is sufficient, so long as it conveys
    the message clearly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.6 – A simple drawing depicting the login screen](img/B20976_01_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.6 – A simple drawing depicting the login screen
  prefs: []
  type: TYPE_NORMAL
- en: Go back to Qt Designer again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will be placing the widgets at the top panel first, then the logo and the
    login form beneath it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the main window and change its width and height from `400` and `300`
    to `800` and `600`, respectively – we’ll need a bigger space in which to place
    all the widgets.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click and drag a label under the **Display Widgets** category from the **Widget
    Box** area to the form editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the `currentDateTime` and change its text property to the current date
    and time for display purposes – for example, `Wednesday, 25-10-2023` `3:14 PM`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click and drag `PushButton` under the `restartButton` and `shutdownButton`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the main window and click the small icon button on the form toolbar that
    says **Lay Out Vertically** when you mouse over it. You will see that the widgets
    are automatically arranged on the main window, but that’s not exactly what we
    want yet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click and drag a **Horizontal Layout** widget under the **Layouts** category
    to the main window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click and drag the two push buttons and the text label into the horizontal layout.
    You will see the three widgets being arranged in a horizontal row, but vertically,
    they are located in the middle of the screen. The horizontal arrangement is almost
    correct, but the vertical position is off.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click and drag a **Vertical Spacer** widget from the **Spacers** category and
    place it beneath the **Horizontal Layout** widget we created in *Step 9* (under
    the red rectangular outline). All the widgets will be pushed to the top by the
    spacer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Place a **Horizontal Spacer** widget between the text label and the two buttons
    to keep them apart. This will ensure the text label always sticks to the left
    and the buttons align to the right.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set both the `55 x 55`. Set the **text** property of the buttons to empty, as
    we will be using icons instead of text. We will learn how to place an icon in
    the button widgets in the *Using resources in style* *sheets* recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your UI should look similar to this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.7 – Pushing apart the text and buttons using a horizontal spacer](img/B20976_01_007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.7 – Pushing apart the text and buttons using a horizontal spacer
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will be adding the logo. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Add a **Horizontal Layout** widget between the top panel and a **Vertical Spacer**
    widget to serve as a container for the logo.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After adding the **Horizontal Layout** widget, you will find that the layout
    is way too thin in height (almost zero height) for you to add any widgets to it.
    This is because the layout is empty and it’s being pushed by the vertical spacer
    under it into zero height. To solve this problem, we can set its **vertical margin**
    (either **layoutTopMargin** or **layoutBottomMargin**) to be temporarily bigger
    until a widget is added to the layout.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a `logo`. We will learn more about how to insert an image into the label
    to use it as a logo in the *Using resources in style sheets* recipe. For now,
    just empty out the `150` `x 150`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the vertical margin of the layout back to zero if you haven’t already done
    so.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The logo will now appear to be invisible, so we will just place a temporary
    style sheet to make it visible until we add an image to it in the *Using resources
    in style sheets* recipe. The style sheet is really simple:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Your UI should look similar to this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.8 – Putting the placeholder logo in the middle](img/B20976_01_008.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.8 – Putting the placeholder logo in the middle
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s create the login form:'
  prefs: []
  type: TYPE_NORMAL
- en: Add a `100`) so that you can add a widget to it more easily.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a `20`) so that we can place widgets in it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click the `QWidget` object, it will automatically inherit all the properties
    from the widget class, which means we can now adjust its size to suit our needs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the `QWidget` object, which we just converted from the layout, `loginForm`
    and change both its `350` `x 200`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since we already placed the `loginForm` widget inside **Horizontal Layout**,
    we can set its **layoutTopMargin** property back to zero.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the same style sheet that you did for the logo to the `loginForm` widget
    to make it visible temporarily. However, this time, we need to add an ID selector
    in front so that it will only apply the style to `loginForm` and not its children
    widgets:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Your UI should look something like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.9 – Constructing the frame for the login form](img/B20976_01_009.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.9 – Constructing the frame for the login form
  prefs: []
  type: TYPE_NORMAL
- en: 'We are not done with the login form yet. Now that we have created the container
    for the login form, it’s time to put more widgets into the form:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Place two horizontal layouts in the login form container. We need two layouts:
    one for the username field and another for the password field.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add `Username:` and the one beneath to `Password:`. Rename the two line edits
    to `username` and `password`, respectively.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a push button beneath the password layout and change its `Login`. Rename
    it `loginButton`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can add a `Login` button to distance them slightly. After the `5`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `loginForm` container and set all its margins to `35`. This is to
    make the login form look better by adding some space to all its sides.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the `Username`, `Password`, and `loginButton` widgets to `25` so that they
    don’t look so cramped.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your UI should look something like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.10 – Adding widgets to the login form](img/B20976_01_010.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.10 – Adding widgets to the login form
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, you can use a grid layout for the **Username** and **Password**
    fields to keep their sizes uniform.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’re not done yet! As you can see, the login form and the logo are both sticking
    to the top of the main window due to the **Vertical Spacer** widget beneath them.
    The logo and the login form should be placed at the center of the main window
    instead of the top. To fix this problem, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Add another **Vertical Spacer** widget between the top panel and the logo’s
    layout. This will counter the spacer at the bottom to balance out the alignment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you think that the logo is sticking too close to the login form, you can
    add a `10`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click the top panel’s layout and choose `topPanel`. The layout must be
    converted into **QWidget** because we cannot apply style sheets to a layout. This
    is because a layout doesn’t have any properties other than margins.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There is a little bit of a margin around the edges of the main window – we don’t
    want that. To remove the margins, select the **centralWidget** object from the
    **Object Inspector** window, which is right under the **MainWindow** panel, and
    set all the margin values to zero.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the project by clicking the **Run** button (with the green arrow icon)
    to see what your program looks like. If everything goes well, you should see something
    like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.11 – We’re done with the layout – for now](img/B20976_01_011.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.11 – We’re done with the layout – for now
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s decorate the UI using style sheets! Since all the important widgets
    have been given object names, it’s easier for us to apply the style sheets to
    them from the main window since we will only write the style sheets to the main
    window and let them inherit down the hierarchy tree.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on **MainWindow** from the **Object Inspector** area and choose
    **Change styleSheet...**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to the style sheet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The background of the main window will change color. We will learn how to use
    an image for the background in the *Using resources in style sheets* recipe. So,
    the color is just temporary.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Qt, if you want to apply styles to the main window itself, you must apply
    them to its **centralWidget** widget instead of the main window since the window
    is just a container.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a nice gradient color to the top panel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Apply the black color to the login form and make it look semi-transparent.
    We will also make the corners of the login form container slightly rounded by
    setting the `border-radius` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Apply styles to the general types of widgets:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding style sheets will change all the labels’ texts to a white color;
    this includes the text on the widgets as well because, internally, Qt uses the
    same type of label on the widgets that have text on them. Also, we made the corners
    of the line edit widgets slightly rounded.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Apply style sheets to all the push buttons on our UI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding style sheet changes the text of all the buttons to a white color,
    then sets its background color to blue, and makes its corners slightly rounded.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To push things even further, we will make it so that the color of the push
    buttons changes when we mouse over it by using the `hover` keyword:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding style sheet will change the background color of the push buttons
    to green when we mouse over them. We will talk more about this in the *Customizing
    properties and* *sub-controls* recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can further adjust the size and margins of the widgets to make them look
    even better. Remember to remove the border line of the login form by removing
    the style sheet that we applied directly to it in *step 6*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your login screen should look something like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.12 – Applying colors and styles to the widgets](img/B20976_01_012.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.12 – Applying colors and styles to the widgets
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This example focused more on the layout system of Qt. Qt’s layout system allows
    our application GUI to automatically arrange itself within the given space by
    arranging the children objects of each widget. The spacer items that we used in
    this recipe help push the widgets contained in a layout outward to create spacing
    along the width of the spacer item.
  prefs: []
  type: TYPE_NORMAL
- en: 'To locate a widget in the middle of the layout, we must put two spacer items
    into the layout: one on the left-hand side of the widget and one on the right-hand
    side of the widget. The widget will then be pushed to the middle of the layout
    by the two spacers.'
  prefs: []
  type: TYPE_NORMAL
- en: Using resources in style sheets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Qt provides us with a platform-independent resource system that allows us to
    store any type of file in our program’s executable for later use. There is no
    limit to the types of files we can store in our executable – images, audio, video,
    HTML, XML, text files, binary files, and so on are all permitted.
  prefs: []
  type: TYPE_NORMAL
- en: The resource system is really useful for embedding resource files (such as icons
    and translation files) into the executable so that it can be accessed by the application
    at any time. To achieve this, we must tell Qt which files we want to add to its
    resource system in the `.qrc` file; Qt will handle the rest during the build process.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To add a new `.qrc` file to our project, go to `resources`) and click the `.qrc`
    file will now be created and automatically opened by Qt Creator. You don’t have
    to edit the `.qrc` file directly in XML format as Qt Creator provides you with
    the user interface to manage your resources.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add images and icons to your project, you need to make sure that the images
    and icons are being placed in your project’s directory. While the `.qrc` file
    is opened in Qt Creator, click the **Add** button, followed by the **Add Prefix**
    button. The prefix is used to categorize your resources so that they can be better
    managed when you have a ton of resources in your project:'
  prefs: []
  type: TYPE_NORMAL
- en: Rename the prefix you just created to `/icons`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create another prefix by clicking **Add**, followed by **Add Prefix**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the new prefix `/images`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `/icon` prefix and click **Add**, followed by **Add Files**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A file selection window will appear; use that to select all the icon files.
    You can select multiple files at a time by holding the *Ctrl* key on your keyboard
    while clicking on the files to select them. Click **Open** once you’re done.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `/images` prefix and click the **Add** button, followed by the **Add
    Files** button. The file-selection window will pop up again; this time, we will
    select the background image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Repeat the preceding steps, but this time, we will add the logo image to the
    `/images` prefix. Don’t forget to save once you’re done by pressing *Ctrl* + *S*.
    Your `.qrc` file should now look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.13 – Showing the structure of the resource file](img/B20976_01_013.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.13 – Showing the structure of the resource file
  prefs: []
  type: TYPE_NORMAL
- en: Go back to the `mainwindow.ui` file; let’s make use of the resources we have
    just added to our project. Select the restart button located on the top panel.
    Scroll down the **Property Editor** area until you see the **icon** property.
    Click the little button with a drop-down arrow icon and click **Choose Resources**
    from its menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Select Resource** window will pop up. Click on the icons prefix on the
    left panel and select the restart icon on the right panel. Press **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A tiny icon will appear on the button. This icon looks very tiny because the
    default icon size is set to `16 x 16`. Change the `50 x 50`; you will see that
    the icon appears bigger. Repeat the preceding steps for the shutdown button, except
    this time, choose the shutdown icon instead.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The two buttons should now look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.14 – Applying icons to the push buttons](img/B20976_01_014.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.14 – Applying icons to the push buttons
  prefs: []
  type: TYPE_NORMAL
- en: Let’s use the image we added to the resource file as our logo. Select the logo
    widget and remove the style sheet that we added earlier to render its outline.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll down the **Property Editor** area until you see the **pixmap** property.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the little drop-down button behind the **pixmap** property and select
    **Choose Resources** from the menu. Select the logo image and click **OK**. The
    logo size no longer follows the dimension you set previously; it follows the actual
    dimension of the image instead. We cannot change its dimension because this is
    simply how the **pixmap** property works.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you want more control over the logo’s dimension, you can remove the image
    from the **pixmap** property and use a style sheet instead. You can use the following
    code to apply an image to the icon container:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To obtain the path of the image, right-click the image’s name in the file list
    window and choose **Copy path**. The path will be saved to your operating system’s
    clipboard; now, you can just paste it into the preceding style sheet. Using this
    method will ensure that the image fits the dimensions of the widget that you applied
    the style to. Your logo should now appear like what’s shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.15 – The logo is now appearing at the top of the login form](img/B20976_01_015.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.15 – The logo is now appearing at the top of the login form
  prefs: []
  type: TYPE_NORMAL
- en: 'Apply the wallpaper image to the background using a style sheet. Since the
    background dimension will change according to the window size, we cannot use `border-image`
    property in a style sheet. Right-click the main window and select **Change styleSheet...**
    to open the **Edit Style Sheet** window. We will add a new line under the style
    sheet of the **centralWidget** widget:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'It’s really that simple and easy! Your login screen should now look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.16 – The final result looks neat](img/B20976_01_016.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.16 – The final result looks neat
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The resource system in Qt stores binary files, such as images and translation
    files, in the executable when it gets compiled. It reads the `.qrc`) in your project
    to locate the files that need to be stored in the executable and include them
    in the build process. A `.qrc` file looks something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: It uses `.qrc` file, or one of its subdirectories.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing properties and sub-controls
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Qt’s style sheet system enables us to create stunning and professional-looking
    UIs with ease. In this example, we will learn how to set custom properties for
    our widgets and use them to switch between different styles.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to customize widget properties and sub-controls:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s create a new Qt project. I have prepared the UI for this purpose. The
    UI contains three buttons on the left-hand side and a **tab widget** with three
    pages located on the right-hand side, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.17 – Basic user interface with three tabs and buttons](img/B20976_01_017.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.17 – Basic user interface with three tabs and buttons
  prefs: []
  type: TYPE_NORMAL
- en: 'The three buttons are blue because I’ve added the following style sheet to
    the main window (not to the individual button):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'I will explain what **pseudo-states** are in Qt by adding the following style
    sheet to the main window. You might be familiar with this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We used the preceding style sheet in the *Creating a login screen using style
    sheets* recipe, to make the buttons change color when there is a mouse-over event.
    This is made possible by Qt Style Sheet’s `hover` separated from the `QPushButton`
    class by a colon. Every widget has a set of generic pseudo-states, such as `QPushButton`,
    but not for `QLineEdit`. Let’s add the **pressed** pseudo-state to change the
    buttons’ color to yellow when the user clicks on it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Pseudo-states allow the users to load a different set of style sheets based
    on the condition that applies to them. Qt pushes this concept further by implementing
    **dynamic properties** in Qt Style Sheets. This allows us to change the style
    sheet of a widget when a custom condition has been met. We can make use of this
    feature to change the style sheet of our buttons based on a custom condition that
    we can set using custom properties in Qt. First, we will add this style sheet
    to our main window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This changes the push button’s background color to red if the `pagematches`
    property returns `QPushButton` class. However, we can add it to our buttons using
    `QObject::setProperty()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In your `mainwindow.cpp` source code, add the following code right after `ui->setupUi(this)`:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code will add a custom property called `pagematches` to the first
    button and set its value as true. This will make the first button turn red by
    default.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After that, right-click on `currentChanged(int)` option from the list and click
    **OK**. Qt will generate a slot function for you, which looks something like this:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'The `mainwindow.cpp`; you will see the function’s declaration there. Let’s
    add some code to the function:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code sets the `pagematches` properties of all three buttons to
    **false** when **Tab Widget** switches its current page. Be sure to reset everything
    before we decide which button should change to red.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the `index` variable supplied by the event signal; this will tell you
    the index number of the current page. Set the `pagematches` property of one of
    the buttons to `index` number.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Refresh the style of all three buttons by calling `polish()`. You may also
    want to add the following header to `mainwindow.h`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Build and run the project. You should now see the three buttons changing to
    red whenever you switch **Tab Widget** to a different page. Also, the buttons
    will change to green when there is a mouse-over, as well as change to yellow when
    you click on them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.18 – The final result looks like this](img/B20976_01_018.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.18 – The final result looks like this
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Qt provides users the freedom to add custom properties to any type of widget.
    Custom properties are very useful if you want to change a particular widget when
    a special condition is met, whereas Qt doesn’t provide such a context by default.
    This allows the user to extend the usability of Qt and makes it a flexible tool
    for customized solutions.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if we have a row of buttons on our main window and we need one
    of them to change its color depending on which page `QObject::setProperty()`.
    To read the custom property, we can use another function called `QObject::property()`.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will talk about sub-controls in Qt Style Sheets. Often, a widget is
    not just a single object, but a combination of more than one object or control,
    used to form a more complex widget. These objects are called **sub-controls**.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, a spin box widget contains an input field, a down button, an up
    button, an up arrow, and a down arrow, which is quite complicated compared to
    some other widgets. In this case, Qt grants us more flexibility by allowing us
    to change every sub-control using a style sheet if we want to. We can do so by
    specifying the name of the sub-control behind the widget’s class name, separated
    by a double colon. For instance, if I want to change the image of the down button
    to a spin box, I can write my style sheet as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: This will only apply the image to the down button of my spin box, and not to
    any other parts of the widget. By combining **custom properties**, **pseudo-states**,
    and **sub-controls**, Qt provides us with a very flexible method to customize
    our user interface.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'Visit the following link to learn more about pseudo-states and subcontrols
    in Qt: [http://doc.qt.io/qt-6/stylesheet-reference.html](http://doc.qt.io/qt-6/stylesheet-reference.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Styling in Qt Modeling Language (QML)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Qt Meta Language** or **Qt Modeling Language** (**QML**) is a JavaScript-inspired
    user interface markup language that’s used by Qt to design user interfaces. Qt
    provides you with **Qt Quick Components** (widgets powered by the QML technology)
    to easily design touch-friendly UI without C++ programming. We will learn more
    about how to use QML and Qt Quick Components to design our program’s UI by following
    the steps provided in this recipe.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to learn about styling in QML:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Since Qt 6, The Qt Company has released a separate program called **Qt Design
    Studio** for developing Qt Quick applications. It’s intended to separate the different
    tasks of designers and programmers. So, if you’re a GUI designer, you should use
    **Qt Design Studio**, while sticking to Qt Creator if you’re a programmer. Once
    you have installed and opened Qt Design Studio, create a new project by pressing
    on the big **Create Project…** button or by going to **File** | **New Project…**
    from the top menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.19 – Creating a new QML project in Qt Design Studio](img/B20976_01_019.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.19 – Creating a new QML project in Qt Design Studio
  prefs: []
  type: TYPE_NORMAL
- en: Once the **New Project** window appears, key in the default width and height
    of your project window and insert a name for your project. Then, select the directory
    where you want your project to be created, select a default GUI style, pick a
    target Qt version, and click the **Create** button. Your Qt Quick project will
    now be created by Qt Design Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'There are some differences between a `App.qml` file inside the project resource.
    This `.qml` file is the UI description file that’s written using the QML markup
    language. If you double-click the `main.qml` file, Qt Creator will open the script
    editor and you will see something like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This file tells Qt to create a window that loads the **Screen01** user interface
    and a window title with your project name. The **Screen01** interface comes from
    another file called **Screen01.ui.qml**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you open the `main.cpp` file located in the `scr` folder in your project,
    you will see the following line of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code tells Qt’s QML engine to load the `main.qml` file when the
    program starts. If you want to load the other `.qml` file, you know where to look
    for the code. The `src` folder is hidden from your Qt Design Studio project; you
    can look for it inside your project directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you build the project now, all you’ll get is a huge window with simple text
    and a push button that says **Press me**. The window’s background color and the
    text will change when you press the push button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.20 – Your first Qt Quick program](img/B20976_01_020.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.20 – Your first Qt Quick program
  prefs: []
  type: TYPE_NORMAL
- en: 'To add UI elements, we’ll create a **Qt Quick UI File** by going to **File**
    | **New File…** and selecting **Qt Quick UI File** under the **Files and Classes**
    | **Qt Quick** **Files** category:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.21 - Creating a new Qt Quick UI file](img/B20976_01_021.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.21 - Creating a new Qt Quick UI file
  prefs: []
  type: TYPE_NORMAL
- en: 'Set `Main`, followed by clicking the **Finish** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.22 – Giving your Qt Quick component a meaningful name](img/B20976_01_022.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.22 – Giving your Qt Quick component a meaningful name
  prefs: []
  type: TYPE_NORMAL
- en: A new file called `Main.ui.qml` has been added to your project resources. Try
    to open the `Main.ui.qml` file by double-clicking on it, if it hasn’t been automatically
    opened by Qt Design Studio upon creation. You will see a completely different
    UI editor compared to what we had for the C++ project in the previous recipes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let’s open `App.qml` and replace **Screen01** with **Main**, like so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When `App.qml` is loaded by the QML engine, it will also import `Main.ui.qml`
    into the UI since `Main` is now being called in the `App.qml` file. Qt will check
    whether `Main` is a valid UI by searching for its `.qml` file based on the naming
    convention. This concept is similar to the C++ project we completed in all our
    previous recipes; the `App.qml` file acts like the `main.cpp` file and `Main.ui.qml`
    acts like the `MainWindow` class. You can also create other UI templates and use
    them in `App.qml`. Hopefully, this comparison will make it easier to understand
    how QML works.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `Main.ui.qml`. You should see only one item listed in the **Navigator**
    window: **Item**. This is the base layout of the window, which shouldn’t be deleted.
    It is similar to **centralWidget**, which we used in the previous recipe.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The canvas is empty at the moment, so let’s drag a **Mouse Area** item and
    **Text** items to the canvas from the **QML Types** panel on the left. Resize
    **Mouse Area** so that it fills the entire canvas. Also, make sure that both **Mouse
    Area** and the **Text** items are being placed under the **Item** item in the
    **Navigator** panel, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.23 – Dragging and dropping a mouse area and text items onto the
    canvas](img/B20976_01_023.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.23 – Dragging and dropping a mouse area and text items onto the canvas
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Mouse Area** item is an invincible item that gets triggered when the
    mouse is clicking on it, or when a finger is touching it (for mobile platforms).
    The **Mouse Area** item is also used in a **button** component, which we will
    be using in a while. The **Text** item is self-explanatory: it is a label that
    displays a block of text in the application.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the **Navigator** window, we can hide or show an item by clicking on the
    icon that resembles an eye beside the item. When an item is hidden, it will not
    appear on the canvas or the compiled application. Just like the widgets in a C++
    Qt project, Qt Quick Components are arranged in a hierarchy based on the parent-child
    relationship. All the child items will be placed under the parent item with an
    indented position. In our case, we can see that the **Mouse Area** and **Text**
    elements are positioned slightly to the right compared to the **Item** item because
    they are both children of the **Item** element. We can rearrange the parent-child
    relationship, as well as their position in the hierarchy, by using a click-and-drag
    method from the **Navigator** window. You can try clicking on the **Text** item
    and dragging it on top of the mouse area. You will then see that the **Text**
    item has changed its position and is now located beneath the mouse area with a
    wider indentation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.24 – Rearranging the parent-child relationship between items](img/B20976_01_024.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.24 – Rearranging the parent-child relationship between items
  prefs: []
  type: TYPE_NORMAL
- en: We can rearrange them by using the arrow buttons located at the top of the **Navigator**
    window, as shown in the preceding screenshot. Anything that happens to the parent
    item will also affect all its children, such as moving the parent item, and hiding
    and showing the parent item.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You can pan around the canvas view by holding the middle mouse button (or mouse
    scroll) while moving your mouse around. You can also zoom in and out by scrolling
    your mouse while holding the *Ctrl* key on your keyboard. By default, scrolling
    your mouse will move the canvas view up and down. However, if your mouse cursor
    is on top of the horizontal scroll bar of the canvas, scrolling the mouse will
    move the view to the left and right.
  prefs: []
  type: TYPE_NORMAL
- en: Delete both the **Mouse Area** item and **Text** items as we will be learning
    how to create a user interface from scratch using QML and Qt Quick.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the `800 x 600` as we’re going to need a bigger space for the widgets.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the images we used in the previous C++ project, in the *Using resources
    in style sheets* recipe, over to the QML project’s folder since we are going to
    recreate the same login screen with QML.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the images to the resource file so that we can use them for our UI.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open **Qt Design Studio** and switch to the **Resources** window. Click and
    drag the background image directly to the canvas. Switch over to the **Layout**
    tab on the **Properties** pane and click the fill anchor button, indicated here
    by a red circle. This will make the background image always stick to the window
    size:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.25 – Selecting the fill anchor button to make the item follow the
    size of its parent object](img/B20976_01_025.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.25 – Selecting the fill anchor button to make the item follow the size
    of its parent object
  prefs: []
  type: TYPE_NORMAL
- en: Click and drag a **Rectangle** component from the **Library** window to the
    canvas. We will use this as the top panel for our program.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the top panel, enable the top anchor, left anchor, and right anchor so that
    the panel sticks to the top of the window and follows its width. Make sure all
    the margins are set to zero.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the `#805bcce9` and the second color to `#80000000`. This will create
    a half-transparent panel with a blue gradient.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a `Wednesday, 25-10-2023 3:14 PM`) for display purposes. Then, set the text
    color to white.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Switch over to the **Layout** tab and enable the top anchor and left anchor
    so that the text widget will always stick to the top-left corner of the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a `50 x 50`. Then, make it a child of the top panel by dragging it on top
    of the top panel in the **Navigator** window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the color of the mouse area to blue (`#27a9e3`) and set its radius to `2`
    to make its corners slightly rounded. Enable the top anchor and right anchor to
    make it stick to the top-right corner of the window. Set the top anchor’s margin
    to `8` and the right anchor’s margin to `10` to create some space.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the **Resources** window and drag the shutdown icon to the canvas. Make
    it a child of the **Mouse Area** item we created a moment ago. Then, enable the
    fill anchor to make it fit the size of the mouse area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Phew – that’s a lot of steps! Now, your items should be arranged as follows
    in the **Navigator** window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.26 – Be cautious about the parent-child relationship between items](img/B20976_01_026.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.26 – Be cautious about the parent-child relationship between items
  prefs: []
  type: TYPE_NORMAL
- en: 'The parent-child relationship and the layout anchors are both very important
    to keep the widgets in the correct positions when the main window changes its
    size. Your top panel should look something like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.27 – Completing the top banner design](img/B20976_01_027.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.27 – Completing the top banner design
  prefs: []
  type: TYPE_NORMAL
- en: Let’s work on the login form. Add a new `360 x 200` and set its radius to `15`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its color to `#80000000`; this will change it to black with 50% transparency.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enable the vertical center anchor and the horizontal center anchor to make
    the rectangle always align with the center of the window. Then, set the margin
    of the vertical center anchor to `100` so that it moves slightly lower to the
    bottom. This will ensure we have the space to place the logo. The following screenshot
    illustrates the settings for **Anchors**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.28 – Setting the alignment and margin](img/B20976_01_028.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.28 – Setting the alignment and margin
  prefs: []
  type: TYPE_NORMAL
- en: Add the text objects to the canvas. Make them children of the login form (the
    `Username:` and `Password:`. Change their text color to white and position them
    accordingly. We don’t need to set a margin this time because they will follow
    the rectangle’s position.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add two text input objects to the canvas and place them next to the text widgets
    we just created. Make sure the text input is also a child of the login form. Since
    the text input doesn’t contain any background color property, we need to add two
    rectangles to the canvas to use as their background.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add two rectangles to the canvas and make each of them a child of one of the
    text inputs we just created. Set the `5` to give them some rounded corners. After
    that, enable fill anchors on both of the rectangles so that they will follow the
    size of the text input widgets.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let’s create the login button beneath the password field. Add a mouse area
    to the canvas and make it a child of the login form. Resize it to your preferred
    dimension and move it into place.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since the mouse area does not contain any background color property, we need
    to add a `#27a9e3`) and enable the fill anchor so that it fits nicely with the
    mouse area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a text object to the canvas and make it a child of the login button. Change
    its text color to white and set its `Login`. Finally, enable the horizontal center
    anchor and the vertical center anchor so that they align with the center of the
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will now get a login form that looks pretty similar to the one we made
    in the C++ project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.29 – Final design of the login form](img/B20976_01_029.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.29 – Final design of the login form
  prefs: []
  type: TYPE_NORMAL
- en: Now, it’s time to add the logo, which is very simple. Open the **Resources**
    window and drag the logo image to the canvas.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make it a child of the login form and set its size to `512` `x 200`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Position it on top of the login form. With that, you’re done.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is what the entire UI looks like when compiled. We have successfully recreated
    the login screen from the C++ project, but this time, we did it with QML and Qt
    Quick:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.30 – The final result](img/B20976_01_030.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.30 – The final result
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Qt Quick editor uses a very different approach for placing widgets in the
    application compared to the form editor. The user can decide which method is best
    suited to their purposes. The following screenshot shows what the Qt Quick Designer
    looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.31 – Overview of Qt Design Studio’s user interface](img/B20976_01_031.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.31 – Overview of Qt Design Studio’s user interface
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s look at the various elements of the editor’s UI:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Navigator**: The **Navigator** window displays the items in the current QML
    file as a tree structure. It’s similar to the object operator window in the other
    Qt Designer we used in the *Using style sheets with Qt* *Designer* recipe.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Library**: The **Library** window displays all the Qt Quick Components or
    Qt Quick Controls available in QML. You can click and drag it to the canvas window
    to add to your UI. You can also create your own custom QML components and display
    them here.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Assets**: The **Assets** window displays all the resources in a list that
    can then be used in your UI design.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Add Modules**: The **Add Modules** button allows you to import different
    QML modules into your current QML file, such as a Bluetooth module, a WebKit module,
    or a positioning module, to add additional functionality to your QML project.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Properties**: Similar to the **Property Editor** area we used in the previous
    recipe, the **Properties** pane in QML Designer displays the properties of the
    selected item. You can also change the properties of the items in the code editor.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Canvas**: The canvas is the working area where you create QML components
    and design applications.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Workspace selector**: The workspace selector area displays the different
    layouts available in the Qt Design Studio editor, allowing the user to select
    the workspace that suits their needs.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Style selector**: This selector is where you can select a different style
    to preview how your application will look when running on a specific platform.
    This is very useful when developing cross-platform applications.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Exposing the QML object pointer to C++
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, we want to modify the properties of a QML object through C++ scripting,
    such as changing the text of a label, hiding/showing the widget, or changing its
    size. Qt’s QML engine allows you to register your QML objects to C++ types, which
    automatically exposes all its properties.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We want to create a label in QML and change its text occasionally. To expose
    the label object to C++, we can do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a C++ class called `MyLabel` that extends from the `QObject` class in
    `mylabel.h`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `mylabel.cpp` source file, define a function called `SetMyObject()`
    to save the object pointer. This function will later be called in QML in `mylabel.cpp`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `main.cpp`, include the `MyLabel` header and register it to the QML engine
    using the `qmlRegisterType()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Notice that there are four parameters you need to declare in `qmlRegisterType()`.
    Besides declaring your class name (`MyLabel`), you also need to declare your library
    name (`MyLabelLib`) and its version (`1.0`). This will be used to import your
    class into QML.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Map the QML engine to our label object in QML and import the class library
    we defined earlier in *Step 3* by calling `import MyLabelLib 1.0` in our QML file.
    Notice that the library name and its version number have to match the one you
    declared in `main.cpp`; otherwise, it will throw an error. After declaring `MyLabel`
    in QML and setting its ID as `mylabel.SetMyObject(myLabel)` to expose its pointer
    to C/C++ right after the label is initialized:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Wait until the label is fully initiated before exposing its pointer to C/C++;
    otherwise, you may cause the program to crash. To make sure it’s fully initiated,
    call the `SetMyObject()` function within `Component.onCompleted` and not in any
    other functions or event callbacks. Now that the QML label has been exposed to
    C/C++, we can change any of its properties by calling the `setProperty()` function.
    For instance, we can set its visibility to `true` and change its text to `Bye`
    `bye world!`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Besides changing the properties, we can also call its functions by calling
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Or, simply, we can call the `invokedMethod()` function with only two parameters
    if we do not expect any values to be returned from it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: QML is designed in such a way that it can be expanded through C++ code. The
    classes in the Qt QML module permit QML objects to be used and operate from C++,
    and the capability of the QML engine united with Qt’s **meta-object system** allows
    C++ functionality to be called directly from QML. To add some C++ data or usage
    to QML, it should come forward from a QObject-derived class. QML object types
    could be instituted from C++ and supervised to access their properties, appeal
    their methods, and get their signal alerts. This is possible because all QML object
    types are executed using QObject-derived classes, allowing the QML engine to forcibly
    load and inspect objects through the Qt meta-object system.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Qt 6 comes with two different types of GUI kits – Qt Widgets and Qt Quick. Both
    have their strengths and advantages over the other, giving programmers the ability
    and freedom to design their application’s interface without having to worry about
    feature constraints and performance issues.
  prefs: []
  type: TYPE_NORMAL
- en: Qt 6 allows you to pick the best method and programming language that suits
    your working style and requirements for your project. By going through this chapter,
    you will be able to create a good-looking and functional cross-platform application
    using Qt 6 in no time.
  prefs: []
  type: TYPE_NORMAL
