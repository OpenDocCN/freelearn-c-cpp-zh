- en: Setting Up a Development Environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you're familiar with the elements of WebAssembly, it's time to set
    up a suitable development environment. Developing with WebAssembly is tantamount
    to developing in C or C++. The difference lies in the build process and the output.
    In this chapter, we will cover the development tooling, and how to install and
    configure it on your system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our goal for this chapter is to understand the following:'
  prefs: []
  type: TYPE_NORMAL
- en: How to install the required development tooling (Git, Node.js, and Visual Studio
    Code)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to configure Visual Studio Code for use with C/C++ and WebAssembly using
    extensions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to set up a local HTTP server to serve up the HTML, JavaScript, and `.wasm`
    files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking your browser for WebAssembly support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What helpful tools are available to simplify and improve the development process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing the development tooling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You'll need to install some applications and tooling to start developing WebAssembly.
    We will use Visual Studio Code, a text editor, to write our C/C++, JavaScript,
    HTML, and Wat. We'll also use Node.js for serving up the files and Git to manage
    our code. We will use package managers to install these tools, which makes the
    installation process much simpler than downloading and installing them manually.
    In this section, we will cover the operating systems, as well as the package managers
    for each platform. We'll also review each of the applications, with a brief overview
    of their role in the development process.
  prefs: []
  type: TYPE_NORMAL
- en: Operating systems and hardware
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To ensure that the installation and configuration process goes smoothly, it''s
    important to be aware of the operating systems I will use for the examples in
    this book. If you encounter an issue, it may be due to an incompatibility between
    the platform you''re using and the one I''m using. In most cases, you shouldn''t
    have an issue. For the sake of eliminating the OS version as a potential problem
    causer, I''ve provided details for the operating systems I''m using in the following
    list:'
  prefs: []
  type: TYPE_NORMAL
- en: macOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: High Sierra, version 10.13.x
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2.2 GHz Intel i7 processor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 16 GB of RAM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ubuntu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ubuntu 16.04 LTS running in VMware Fusion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2.2 GHz Intel i7 Processor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 4 GB of RAM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Windows 10 Pro running in VMware Fusion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2.2 GHz Intel i7 Processor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 8 GB of RAM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Package managers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Package managers are tools that simplify the installation process for software.
    They allow us to upgrade, configure, uninstall, and search for available software
    from the command line without having to go to a website to download and run the
    installer. They also simplify the installation process for software that may have
    multiple dependencies or require manual configuration before use. In this section,
    I'll cover the package manager for each platform.
  prefs: []
  type: TYPE_NORMAL
- en: Homebrew for macOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Homebrew is an excellent package manager for macOS that allows us to install
    most of the tools we will use out of the box. Homebrew is as simple as pasting
    the following command in Terminal and running it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You''ll see messages in Terminal that will walk you through the installation
    process. Once that''s complete, you''ll need to install an extension for Homebrew
    called **Homebrew-Cask** that allows you to install macOS applications without
    having to download the installer, mount it, and drag the application into the
    `Applications` folder. You can install this by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'That''s it! You''re now able to install applications by running either of these
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Apt for Ubuntu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Apt is the package manager provided with Ubuntu; there''s no need to install
    it. It allows you to install both command-line tools and applications out of the
    box. If an application isn''t available from Apt''s repository, you can add a
    repository using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Chocolatey for Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Chocolatey is a package manager for Windows. It''s similar to Apt in that it
    lets you install both command-line tools and applications. To install Chocolatey,
    you need to run the command prompt (`cmd.exe`) as an administrator. You can do
    this by pressing the Start menu button, typing cmd, and right-clicking on the
    Command Prompt application and selecting Run as administrator:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/257d1dc9-7c8b-4e3e-91ff-2697e0749527.png)'
  prefs: []
  type: TYPE_IMG
- en: Running the Command Prompt as an administrator
  prefs: []
  type: TYPE_NORMAL
- en: 'Then just run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The easiest way to get the command text is through Chocolatey's installation
    page at [https://chocolatey.org/install](https://chocolatey.org/install). There's
    a button to copy the text to your clipboard under the *Install with* *cmd.exe*
    section. You could also install the application using PowerShell if you follow
    the steps on the Installation page.
  prefs: []
  type: TYPE_NORMAL
- en: Git
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Git is a **version control system** (**VCS**) that allows you to track changes
    to files and manage work between multiple developers contributing to the same
    code base. Git is the VCS powering GitHub and GitLab, and is also available on
    Bitbucket (they also offer Mercurial, which is another VCS). Git will allow us
    to clone repositories from GitHub, and is a prerequisite for the EMSDK, which
    we'll cover in the next chapter. In this section, we will cover the installation
    process for Git.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Git on macOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Git is probably already available if you''re using macOS. macOS comes bundled
    with Apple Git, which will probably be a few versions behind the most recent version.
    For the purposes of this book, the version you already have installed should be
    sufficient. If you wish to upgrade, you can install the most recent version of
    Git using Homebrew by running the following commands in Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'If you run this command, you should see `/usr/local/bin/git`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'You can check to ensure that the installation was successful by running this
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Installing Git on Ubuntu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can use `apt` to install Git; just run the following command in Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You can check to ensure that the installation was successful by running this
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Installing Git on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can install Git using Chocolatey. Open up Command Prompt or PowerShell
    and run this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You can check to ensure that the installation was successful by running this
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: You can bypass the confirmation messages by adding a `-y` to the end of the
    install command (for example, `choco install git -y`). You can also opt to always
    skip the confirmation by entering the
  prefs: []
  type: TYPE_NORMAL
- en: '**`choco feature enable -n allowGlobalConfirmation`** command.'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The official website for Node.js describes it as an asynchronous event-driven
    JavaScript runtime. Node is designed to build scalable network applications. We
    will use it in this book to serve up our files and work with them in a browser.
    Node.js comes packaged with `npm`, a package manager for JavaScript, which will
    allow us to install packages globally and access them through the command line.
    In this section, we'll cover the installation process for each platform using
    the **Node Version Manager** (**nvm**).
  prefs: []
  type: TYPE_NORMAL
- en: nvm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will use the **long-term stable** (**LTS**) release of Node.js (Version 8)
    to ensure that we're using the most stable version of the platform. We will use
    `nvm` to manage Node.js versions. This will prevent conflicts if you already have
    a higher (or lower) version of Node.js installed on your computer. `nvm` allows
    you to have multiple versions of Node.js installed that you can quickly switch
    to and isolate in the context of a single terminal window.
  prefs: []
  type: TYPE_NORMAL
- en: Installing nvm on macOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Run the following command in Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Follow the post-installation steps Homebrew specifies to ensure that you can
    start using it (you may have to restart your Terminal session). If you cleared
    your Terminal contents before performing the steps, you can run this command to
    see the installation steps again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'You can check to ensure that the installation was successful by running this
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Install nvm on Ubuntu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Ubuntu comes bundled with `wget`, which can retrieve files using HTTP/S and
    FTP/S protocols. The GitHub page for `nvm` ([https://github.com/creationix/nvm](https://github.com/creationix/nvm))
    contains the following command to install it using `wget`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Once installed, restart Terminal to complete the installation. You can check
    to ensure that the installation was successful by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Installing nvm on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`nvm` doesn''t currently support Windows, so you''re actually installing a
    different application named `nvm`-windows. The GitHub page for `nvm`-windows can
    be found at [https://github.com/coreybutler/nvm-windows](https://github.com/coreybutler/nvm-windows).
    Some of the commands are slightly different, but the installation command we run
    will be the same. To install `nvm`-windows, open up Command Prompt or PowerShell
    and run this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'You can check to ensure that the installation was successful by running the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Installing Node.js using nvm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After installing `nvm`, you need to install the version of Node.js we will
    use in this book: version 8.11.1\. To install it, run this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'If you didn''t have Node.js or `nvm` previously installed, it will automatically
    set this to your default Node.js installation, so the output of this command should
    be `v8.11.1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'If you have existing Node.js versions installed, you can either use v8.11.1
    as a default, or ensure that you run this command to use v8.11.1 when working
    through the examples in this book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: You can create a file named `.nvmrc` in the folder with your code and populate
    it with the contents `v8.11.1`. You can run `nvm use` within this directory and
    it will set the version to `8.11.1` without having to specify it.
  prefs: []
  type: TYPE_NORMAL
- en: GNU make and rimraf
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the `learn-webassembly` repository, the code examples use GNU Make and VS
    Code's Tasks feature (which we'll cover in [Chapter 5](51201d69-0a8e-45f3-bb4f-03ded5bbeb6c.xhtml),
    *Creating and Loading a WebAssembly Module*) to perform the build tasks defined
    throughout the book. GNU Make is an excellent cross-platform tool for automating
    build processes. You can read more about GNU Make at [https://www.gnu.org/software/make](https://www.gnu.org/software/make).
    Let's review the installation steps for each platform.
  prefs: []
  type: TYPE_NORMAL
- en: GNU Make on macOS and Ubuntu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you''re using macOS or Linux, GNU `make` should already be installed. To
    validate this, run the following command in Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: If you see version information, you're ready to go. Skip ahead to the *Installing
    rimraf* section. Otherwise, follow the GNU Make installation instructions for
    your platform.
  prefs: []
  type: TYPE_NORMAL
- en: Installing GNU Make on macOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install GNU Make on macOS, run the following command from Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'You can check to ensure that the installation was successful by running this
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: If you see version information, skip to the *Installing* *rimraf* section.
  prefs: []
  type: TYPE_NORMAL
- en: Installing GNU Make on Ubuntu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install GNU Make on Ubuntu, run the following command from Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'You can check to ensure that the installation was successful by running this
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: If you see version information, skip to the *Installing rimraf* section.
  prefs: []
  type: TYPE_NORMAL
- en: Installing GNU make on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can install GNU `make` on Windows using Chocolatey. Open up Command Prompt
    or PowerShell and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'You may need to restart the CLI to use the `make` command. Once restarted,
    run the following command to validate the installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: If you see version information, continue to the next section. If you encounter
    issues, you may need to download and install the setup package at [http://gnuwin32.sourceforge.net/packages/make.htm](http://gnuwin32.sourceforge.net/packages/make.htm).
  prefs: []
  type: TYPE_NORMAL
- en: Installing rimraf
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some of the build steps defined in the Makefiles or VS Code Tasks delete files
    or directories. The commands required to delete a file or folder differ based
    on your platform and shell. To address this issue we'll use the `rimraf npm` package
    ([https://www.npmjs.com/package/rimraf](https://www.npmjs.com/package/rimraf)).
    Installing the package globally provides a `rimraf` command that performs the
    correct deletion operation for the operating system and shell.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install `rimraf`, ensure that Node.js is installed and run the following
    command from a CLI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'To ensure that the installation was successful, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: You should see usage instructions and a list of command line flags. Let's move
    on to the VS Code installation.
  prefs: []
  type: TYPE_NORMAL
- en: VS Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'VS Code is a cross-platform text editor with multiple-language support and
    a rich extensions ecosystem. Integrated debugging and Git support are built in,
    and new features are being added all the time. We''re able to use it for the entire
    WebAssembly development process throughout the course of this book. In this section,
    we will cover the installation steps for each platform:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d936d227-0ea4-44a0-8ffa-f43768420eb0.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot from Visual Studio Code's website
  prefs: []
  type: TYPE_NORMAL
- en: Installing Visual Studio Code on macOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Use Homebrew-Cask to install VS Code. Run the following command in Terminal
    to install:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Once it's complete, you should be able to launch it from the `Applications`
    folder or the Launchpad.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Visual Studio Code on Ubuntu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The process for installing VS Code on Ubuntu has a few extra steps, but is
    still relatively simple. First, download the `.deb` file from VS Code''s download
    page ([https://code.visualstudio.com/Download](https://code.visualstudio.com/Download)).
    Once the download completes, run the following commands to complete the installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'If you get a missing dependency error, you can fix it by running the following
    command before `sudo dpkg`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: You should now be able to open VS Code from the Launcher.
  prefs: []
  type: TYPE_NORMAL
- en: Installing VS Code on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can install VS Code using Chocolatey. Run this command from Command Prompt
    or PowerShell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Once installed, you can access it from the Start menu.
  prefs: []
  type: TYPE_NORMAL
- en: You can open VS Code with the current working directory as the project by running
    `code .` in the CLI.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring VS Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Out of the box, VS Code is a powerful text editor with a lot of great functionality.
    In addition to being highly configurable and customizable, it possesses an incredibly
    rich extensions ecosystem. We'll need to install some of these extensions so we
    won't need to use different editors for different programming languages. In this
    section, we will cover how to configure VS Code and which extensions to install
    to simplify the WebAssembly development process.
  prefs: []
  type: TYPE_NORMAL
- en: Managing settings and customization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Customizing and configuring VS Code is simple and intuitive. You can manage
    custom settings such as editor font and tab sizes by selecting Code | Preferences
    | Settings on macOS or File | Preferences | Settings on Windows. User and workspace
    settings are managed separately in JSON files and auto completion is provided
    in case you can't remember the exact name of a setting. You can also change the
    themes or keyboard shortcuts by selecting the appropriate option in the Preferences
    menu. The settings file is also where you can set custom settings for any extensions
    you install. Some settings are added by default when you install an extension,
    so changing them is as simple as updating and saving this file.
  prefs: []
  type: TYPE_NORMAL
- en: Extensions overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ll need to install some extensions as part of the configuration process.
    There are multiple ways to find and install extensions in VS Code. I prefer to
    click on the Extensions button (fourth button from the top in the Activity bar
    on the left-hand side of the editor), enter what I''m looking for in the Search
    box, and press the green Install button for the extension I''d like to install.
    You could also visit the VS Code Marketplace at [https://marketplace.visualstudio.com/vscode](https://marketplace.visualstudio.com/vscode),
    search for and select an extension you''d like to install, and press the green
    Install button on the extension''s page. You can manage extensions through the
    command line as well. For more information, visit [https://code.visualstudio.com/docs/editor/extension-gallery](https://code.visualstudio.com/docs/editor/extension-gallery):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a4681032-4748-44a9-a937-d92678e2636f.png)'
  prefs: []
  type: TYPE_IMG
- en: Installing extensions in VS Code
  prefs: []
  type: TYPE_NORMAL
- en: Configuration for C/C++ and WebAssembly
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: VS Code doesn't support C and C++ out of the box, but there is an excellent
    extension that allows you to work with these languages. It also doesn't support
    syntax highlighting for the WebAssembly text format, but there is an extension
    that adds that functionality as well. In this section, we will cover the installation
    and configuration of the *C/C++ for VS Code* and *WebAssembly Toolkit for VSCode*
    extensions.
  prefs: []
  type: TYPE_NORMAL
- en: Installing C/C++ for VS Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The C/C++ extension for VS Code includes several features for writing and debugging
    C and C++ code, such as auto completion, symbol searching, class/method navigation,
    line-by-line code stepping, and many others. To install the extension, search
    for C/C++ in the Extensions and install the extension titled C/C++ (it's created
    by Microsoft) or navigate to the extension's official page at [https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools)
    and press the green Install button.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once installed, you can view configuration details for the extension by selecting
    the extension from the Extensions list in VS Code and selecting the Contributions
    tab. This tab contains the various settings, commands, and debugger details:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/db5aeb52-94d7-4d7b-9af0-e3637e5cb4ce.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Contributions* tab for the C/C++ extension'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring C/C++ for VS Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Microsoft has an official page for the extension, which you can view at [https://code.visualstudio.com/docs/languages/cpp](https://code.visualstudio.com/docs/languages/cpp).
    This page describes, among other things, how to configure through the use of JSON
    files. Let''s start by creating a new configuration file to manage our C/C++ environment.
    You can generate a new configuration file by pressing the *F1* key, typing C/C,
    and selecting C/Cpp: Edit Configurations…:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/653b245b-f3a0-4fb5-bacd-9624555a6bde.png)'
  prefs: []
  type: TYPE_IMG
- en: Command Palette with C/C++ extension options
  prefs: []
  type: TYPE_NORMAL
- en: This will generate a new `c_cpp_properties.json` in a `.vscode` folder within
    your current project. The file will contain configuration options for your C/C++
    compiler based on your platform, the C and C++ standards to use, and the include
    paths for header files. You can close this file once it's generated. We will revisit
    it when we configure the EMSDK.
  prefs: []
  type: TYPE_NORMAL
- en: WebAssembly Toolkit for VSCode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are a few different WebAssembly extensions for VS Code currently available.
    I''m using the WebAssembly Toolkit for VSCode extension because it allows you
    to right-click on a `.wasm` file and select Show WebAssembly, which displays the
    Wat representation of the file. You can install this extension through the Extensions
    panel (search for WebAssembly), or from the official extension page in the VS
    Code Marketplace ([https://marketplace.visualstudio.com/items?itemName=dtsvet.vscode-wasm](https://marketplace.visualstudio.com/items?itemName=dtsvet.vscode-wasm)):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e5df8895-859b-40c0-a647-5c7d51fd567e.png)'
  prefs: []
  type: TYPE_IMG
- en: Viewing the Wat for a `.wasm` file using the WebAssembly Toolkit for the VS
    Code extension
  prefs: []
  type: TYPE_NORMAL
- en: Once installed, you're ready to go! Now that you've got all of the required
    extensions, let's evaluate some optional extensions that can simplify common tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Other useful extensions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: VS Code has some great extensions to improve efficiency and customize the interface.
    In this section, I will cover some of the extensions I have installed that simplify
    common tasks as well as the user interface/icon themes. You don't need to install
    any of these extensions for the examples in this book, but you may find some of
    them useful.
  prefs: []
  type: TYPE_NORMAL
- en: Auto rename tag
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This extension is incredibly helpful when working with HTML. It automatically
    changes the name of the closing tag if you change the tag type. For example, if
    you have a `<div>` element and you want to make it a `<span>`, changing the text
    of the opening element to `span` will update the closing element text (`</div>`
    to `</span>`):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/94ea0207-f80b-43fd-8907-fca386c945c7.png)'
  prefs: []
  type: TYPE_IMG
- en: Auto renaming tag renaming HTML tag
  prefs: []
  type: TYPE_NORMAL
- en: Bracket pair colorizer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This extension colorizes the brackets, braces, and parentheses in your code
    so you can quickly identify the opening and closing brackets. WebAssembly''s text
    format uses parentheses extensively, so being able to determine which elements
    are enclosed in which list makes debugging and evaluation much simpler:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6a7bd70b-1c52-43b9-ba23-3db2d688ca43.png)'
  prefs: []
  type: TYPE_IMG
- en: Bracket pair colorizer color matching parentheses in a Wat file
  prefs: []
  type: TYPE_NORMAL
- en: Material Icon theme and Atom One Light theme
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are over 1,000 icon and interface themes available on the VS Code Marketplace.
    I''m including the Material Icon theme and Atom One Light theme in this section
    because they''re being used in the screenshots in this book. The Material Icon
    theme is incredibly popular, with over 2 million downloads, while the Atom One
    Light theme has over 70,000 downloads:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c32d88eb-7850-49c3-9ff4-84e0eb89969d.png)'
  prefs: []
  type: TYPE_IMG
- en: Icons in the Material Icons theme
  prefs: []
  type: TYPE_NORMAL
- en: Setting up for the web
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Interacting with and debugging Wasm modules will be done in the browser, which
    means we'll need a way to serve up a folder containing our example files. As we
    discussed in [Chapter 2](0b30dfc9-4624-48b6-a968-0342540d1ef5.xhtml), *Elements
    of WebAssembly - Wat, Wasm, and the JavaScript API*, WebAssembly is integrated
    into the browser's JavaScript engine, but you'll need to make sure you're using
    a browser that supports it. In this section, we will provide instructions for
    cloning the book examples repository. We will also review how to quickly set up
    a local web server for testing and evaluating browser options to ensure that you're
    able to develop locally.
  prefs: []
  type: TYPE_NORMAL
- en: Cloning the book examples repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You may want to clone the GitHub repository now with all of the examples contained
    in this book. You''ll definitely need to have the code available for [Chapter
    7](79019325-2d3e-452c-b680-ac90522aa4bf.xhtml), *Creating an Application from
    Scratch*, because the application''s code base is too large to fit into a single
    chapter. Select a folder on your hard drive and run the following command to clone
    the repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Once the clone process is complete, you'll find that the examples are organized
    by chapter. If there are several examples in a chapter, they're broken down by
    subfolders within the chapter folder.
  prefs: []
  type: TYPE_NORMAL
- en: If you're using Windows, do not clone the repository into the `\Windows` folder
    or any other folder with limited permissions. Otherwise, you will run into issues
    when attempting to compile the examples.
  prefs: []
  type: TYPE_NORMAL
- en: Installing a local server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will use an `npm` package, `serve`, for serving up the files. To install,
    simply run this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Once installation is completed, you can serve up the files in any folder. To
    ensure that it''s working, let''s try serving up a local folder. The code for
    this section is located in the `/chapter-03-dev-env` folder of the `learn-webassembly`
    repository. Follow these instructions to validate your server installation:'
  prefs: []
  type: TYPE_NORMAL
- en: First, let's create a folder that will contain the code samples we'll be working
    through for the remainder of the book (the examples use the name `book-examples`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Launch VS Code and select File | Open... from the menu bar for macOS/Linux,
    and File | Open Folder... for Windows.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, select the folder, `book-examples`, and press the Open (or Select Folder)
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once VS Code finishes loading, right-click within the VS Code file explorer
    and select New Folder from the menu and name the folder `chapter-03-dev-env`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the `chapter-03-dev-env` folder and press the New File button (or *Cmd*/*Ctrl*
    + *N*) to create a new file. Name the file `index.html` and populate it with the
    following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Create another file in the `chapter-03-dev-env` folder named `stuff.html` and
    populate it with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'We will use VS Code''s integrated terminal to serve up the files. You can access
    this by selecting View | Integrated Terminal, or using the keyboard shortcut *Ctrl*
    + *`* (the *`* is the backtick key under the *Esc* key). Once loaded, run this
    command to serve up the working folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00cc7407-20b7-42e2-8831-9dcedd076726.png)'
  prefs: []
  type: TYPE_IMG
- en: Results of running the serve command in terminal
  prefs: []
  type: TYPE_NORMAL
- en: 'The `-l 8080` flag tells `serve` to serve the folder on port `8080`. The first
    link (`http://127.0.0.1:8080`) is only accessible on your computer. Any links
    below that can be used to access the page from another computer on your local
    network. If you navigate to the first link (`http://127.0.0.1:8080/index.html`)
    in your browser, you should see this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2c6d3092-1cb0-4e6e-8aa7-436774502b04.png)'
  prefs: []
  type: TYPE_IMG
- en: Test page served up in Google Chrome
  prefs: []
  type: TYPE_NORMAL
- en: Clicking on the here link should bring you to the Stuff page (the address bar
    will show `127.0.0.1:8080/stuff.html`. If everything is working correctly, it's
    time to validate your browser.
  prefs: []
  type: TYPE_NORMAL
- en: Validating your browser
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To ensure that you're able to test out the examples in a browser, you need to
    make sure that there's a global `WebAssembly` object available. To prevent any
    issues related to browser compatibility, I recommend that you have either Google
    Chrome or Mozilla Firefox installed for development. If you had either of these
    browsers installed beforehand, there's a very good chance that your browser is
    already valid. For the sake of being thorough, we will still cover the validation
    process. In this section, I will review the steps you can take to ensure that
    your browser supports WebAssembly.
  prefs: []
  type: TYPE_NORMAL
- en: Validating Google Chrome
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The process for validating Chrome pretty straightforward. Select the button
    that looks like three vertical dots (next to the address bar) and select **More
    Tools** | **Developer Tools** or use the keyboard shortcut *Cmd*/*Ctrl* + *Shift*
    + *I*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a8ed36a6-4d8f-4db0-9a43-316d02af59ee.png)'
  prefs: []
  type: TYPE_IMG
- en: Accessing Developer Tools in Google Chrome
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the Developer Tools window appears, select the Console tab, type `WebAssembly`,
    and press *Enter.* If you see this, your browser is valid:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8a26528d-e9a8-4b91-920d-52a4472250e0.png)'
  prefs: []
  type: TYPE_IMG
- en: Results of WebAssembly validation in Google Chrome's Developer Tools console
  prefs: []
  type: TYPE_NORMAL
- en: Validating Mozilla Firefox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The process for validating Firefox is almost identical to that for Google Chrome.
    Select **Tools** | **Web Developer** | **Toggle Tools** from the menu bar or use
    the keyboard shortcut *Cmd*/*Ctrl* + *Shift* + *I*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ec99f38f-7129-4e8c-a154-e616dc89e593.png)'
  prefs: []
  type: TYPE_IMG
- en: Accessing Developer Tools in Mozilla Firefox
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the Console tab, click inside the command input box, type `WebAssembly`,
    and press *Enter*. You''ll see this if your version of Firefox is valid:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a9aa4970-18d1-42f9-94fa-a572856d2b08.png)'
  prefs: []
  type: TYPE_IMG
- en: Results of WebAssembly validation in Mozilla Firefox's Developer Tools console
  prefs: []
  type: TYPE_NORMAL
- en: Validating other browsers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The validation process for other browsers is essentially the same; the only
    aspect of validation that differs across browsers is how to access the developer
    tools. If a `WebAssembly` object is available through the console of the browser
    you're using, you can use that browser for WebAssembly development.
  prefs: []
  type: TYPE_NORMAL
- en: Other tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to the applications and tools we covered in the previous sections,
    there are some great tools that are free to use and rich in functionality that
    can greatly improve your development process. I won't have time to cover them
    all, but I'd like to highlight the ones I use regularly. In this section, I will
    briefly review some of the popular tooling and applications that are available
    for each platform.
  prefs: []
  type: TYPE_NORMAL
- en: iTerm2 for macOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The default macOS installation includes Terminal application, Terminal, that
    is sufficient for use in this book. If you want a more full-featured Terminal,
    iTerm2 is an excellent option. It offers features such as splitting windows, extensive
    customization, multiple profiles, and a Toolbelt feature that can display notes,
    running jobs, command history, and so on. You can download the image file from
    the official website ([https://www.iterm2.com/](https://www.iterm2.com/)) and
    install it manually, or install iTerm with Homebrew-Cask using this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is iTerm2 running with the Toolbelt open and multiple editor windows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/25f36b2a-329f-46ea-b070-2f580add757f.png)'
  prefs: []
  type: TYPE_IMG
- en: ITerm instance with multiple panes and Toolbelt
  prefs: []
  type: TYPE_NORMAL
- en: Terminator for Ubuntu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Terminator is the iTerm and `cmder` of Ubuntu, Terminal emulator that allows
    for multiple tabs and panes within a single window. Terminator also provides features
    such as drag and drop, find functionality, and a wide array of plugins and themes.
    You can install Terminator through `apt`. To ensure that you''re using the most
    recent version, run the following commands in Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Refer the screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e8a7a5ed-adea-42a2-9d92-b9c55bc1a87b.png)'
  prefs: []
  type: TYPE_IMG
- en: Terminator screenshot taken from http://technicalworldforyou.blogspot.com
  prefs: []
  type: TYPE_NORMAL
- en: B09984_03_17
  prefs: []
  type: TYPE_NORMAL
- en: cmder for Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`cmder` is a console emulator for Windows that adds a lot of functionality
    and features to the standard Command Prompt or PowerShell. It offers features
    such as multiple tabs and customizability. It allows you to open up instances
    of different shells within the same program. You can download and install it from
    the official website ([cmder.net](https://cmder.net)) or install it with Chocolatey
    using this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'This is how it looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2ec1d160-3abc-4e51-9614-da686a21035e.png)'
  prefs: []
  type: TYPE_IMG
- en: cmder screenshot from the official website
  prefs: []
  type: TYPE_NORMAL
- en: Zsh and Oh-My-Zsh
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Zsh is an interactive shell that improves upon Bash. Oh-My-Zsh is a configuration
    manager for Zsh that has a wide array of useful plugins. You can see the whole
    list on their website ([https://github.com/robbyrussell/oh-my-zsh](https://github.com/robbyrussell/oh-my-zsh)).
    For example, if you want powerful autocomplete and syntax highlighting functionality
    in your CLI, there are plugins such as zsh-autosuggestion and zsh-syntax-highlighting.
    You can install and configure Zsh and Oh-My-Zsh on macOS, Linux, and Windows.
    The Oh-My-Zsh page has installation instructions as well as a list of themes and
    plugins.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered the installation and configuration process for the
    development tooling we will use to start working with WebAssembly. We discussed
    how to install Git, Node.js, and VS Code quickly and easily using a package manager
    for your operating systems (for example, Homebrew for macOS). The steps to configure
    VS Code were presented as well as the required and optional extensions you can
    add to enhance the development experience. We discussed how to install a local
    web server for testing and how to validate your browser to ensure that WebAssembly
    is supported. Finally, we briefly reviewed some additional tools you can install
    for your platform to aid in development.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 4](d03f5dbf-8b6e-49aa-96be-9bb64681be24.xhtml), *Installing the
    Required Dependencies*, we'll install the required dependencies and test out the
    toolchain.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is the name of the package manager you should use for your operating system?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Does BitBucket support Git?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why are we using version 8 of Node.js instead of the most recent version?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you change the color theme in Visual Studio Code?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you access the Command Palette in Visual Studio Code?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you check if your browser supports WebAssembly?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the tools in the *Other tools* section is supported on all three operating
    systems?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Homebrew: [https://brew.sh](https://brew.sh)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`apt` documentation: [https://help.ubuntu.com/lts/serverguide/apt.html.en](https://help.ubuntu.com/lts/serverguide/apt.html.en)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Chocolatey: [https://chocolatey.org](https://chocolatey.org)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Git: [https://git-scm.com](https://git-scm.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Node.js: [https://nodejs.org/en](https://nodejs.org/en)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'GNU Make: [https://www.gnu.org/software/make](https://www.gnu.org/software/make)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'VS Code: [https://code.visualstudio.com](https://code.visualstudio.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
