["```cpp\nfn main() {\n    let the_message = \"Hello, world!\";\n    println!(\"{the_message}\");\n    the_message = \"A new hello!\";\n    println!(\"{the_message}\");\n}\n```", "```cpp\n    let mut the_message = \"Hello, world!\";\n    println!(\"{the_message}\");\n    the_message = \"A new hello!\";\n    println!(\"{the_message}\");\n```", "```cpp\nlet months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\nprintln!(\"{:?}\", months);\nlet (one, two) = (1, 1+1);\nprintln!(\"{one} and {two}\");\n```", "```cpp\nstd::vector<string> months = {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"};\n```", "```cpp\nfn main() {\n    let two = increment(1);\n    println!(\"{two}\");\n}\nfn increment(x:i32) -> i32{\n    x+1\n}\n```", "```cpp\nfn increment_all() -> Vec<i32>{\n    let values : Vec<i32> = vec![1, 2, 3];\n    return values.iter().map(|x| x+1).collect();\n}\n```", "```cpp\n#[cfg(test)]\nmod tests {\n    use super::*;\n    #[test]\n    fn it_works() {\n        assert_eq!(vec![2, 3, 4], increment_all());\n    }\n}\n```", "```cpp\npub struct NewsArticle {\n    pub headline: String,\n    pub location: String,\n    pub author: String,\n    pub content: String,\n}\n```", "```cpp\npub struct Tweet {\n    pub username: String,\n    pub content: String,\n    pub reply: bool,\n    pub retweet: bool,\n}\n```", "```cpp\npub trait Summary {\n    fn summarize(&self) -> String;\n}\n```", "```cpp\nimpl Summary for Tweet {\n    fn summarize(&self) -> String {\n        format!(\"{}: {}\", self.username, self.content)\n    }\n}\n```", "```cpp\n    #[test]\n    fn summarize_tweet() {\n        let tweet = Tweet {\n            username: String::from(\"me\"),\n            content: String::from(\"a message\"),\n            reply: false,\n            retweet: false,\n        };\n        assert_eq!(\"me: a message\", tweet.summarize());\n    }\n```", "```cpp\nimpl Summary for NewsArticle {\n    fn summarize(&self) -> String {\n        format!(\"{}, by {} ({})\", self.headline, self.author, self.location)\n    }\n}\n#[test]\n    fn summarize_news_article() {\n        let news_article = NewsArticle {\n            headline: String::from(\"Big News\"),\n            location: String::from(\"Undisclosed\"),\n            author: String::from(\"Me\"),\n            content: String::from(\"Big News here, must follow\"),\n        };\n        assert_eq!(\"Big News, by Me (Undisclosed)\", news_article.summarize());\n    }\n```", "```cpp\n    #[test]\n    fn copy_on_stack() {\n        let stack_value = 1;\n        let copied_stack_value = stack_value;\n        assert_eq!(1, stack_value);\n        assert_eq!(1, copied_stack_value);\n    }\n```", "```cpp\n    #[test]\n    fn copy_on_heap() {\n        let heap_value = String::from(\"A string\");\n        let copied_heap_value = heap_value;\n        assert_eq!(String::from(\"A string\"), heap_value);\n        assert_eq!(String::from(\"A string\"), copied_heap_value);\n    }\n```", "```cpp\n    #[test]\n    fn clone_on_heap() {\n        let heap_value = String::from(\"A string\");\n        let copied_heap_value = heap_value.clone();\n        assert_eq!(String::from(\"A string\"), heap_value);\n        assert_eq!(String::from(\"A string\"), copied_heap_value);\n    }\n```", "```cpp\n    fn call_me(value: String) -> String {\n        return value;\n    }\n    #[test]\n    fn move_semantics_method_call() {\n        let heap_value = String::from(\"A string\");\n        let result = call_me(heap_value);\n        assert_eq!(String::from(\"A string\"), heap_value);\n        assert_eq!(String::from(\"A string\"), result);\n    }\n```", "```cpp\n    fn i_borrow(value: &String) -> &String {\n        return value;\n    }\n    #[test]\n    fn borrow_method_call() {\n        let heap_value = String::from(\"A string\");\n        let result = i_borrow(&heap_value);\n        assert_eq!(String::from(\"A string\"), heap_value);\n        assert_eq!(String::from(\"A string\"), *result);\n    }\n```"]