["```cpp\nvoid test_func(){}\nint main(){\n     test_func(); return 0;\n}\n```", "```cpp\n$ g++ mem_layout_example.cpp -std=c++2a -O0 -o test\n```", "```cpp\n$ size test\n text       data        bss        dec        hex    filename\n 2040        640          8       2688        a80    test\n```", "```cpp\n$ readelf -s test\n```", "```cpp\nvoid test_func(){\n    static uint32_t test_var;\n}\n```", "```cpp\n$ size test\ntext       data        bss        dec        hex    filename\n2040        640         16       2696        a88    test\n```", "```cpp\n$ nm -S test | grep test_var\n0000000000004018 0000000000000004 b _ZZ9test_funcvE8test_var\n```", "```cpp\nvoid test_func(){\n    static uint32_t test_var = 10;}\n```", "```cpp\n$ size test\ntext       data        bss        dec        hex    filename\n2040        644          4       2688        a80    test\n$ nm -S test | grep test_var\n0000000000004010 0000000000000004 d _ZZ9test_funcvE8test_var\n```", "```cpp\nvoid test_func(){\n    const static uint32_t test_var = 10;}\n```", "```cpp\n$ size test\n text       data        bss        dec        hex    filename\n 2044        640          8       2692        a84    test\n$ nm -S test | grep test_var\n0000000000002004 0000000000000004 r _ZZ9test_funcvE8test_var\n```", "```cpp\n$ top\n. . .\nPID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND\n```", "```cpp\n$ ps a\nPID TTY STAT TIME COMMAND\n```", "```cpp\n    $ chrt -m\n    SCHED_OTHER   the standard round-robin time-sharing policy\n    SCHED_BATCH   for \"batch\" style execution of processes\n    SCHED_IDLE    for running very low priority background jobs.\n    SCHED_FIFO    a first-in, first-out policy\n    SCHED_RR      a round-robin policy\n    ```", "```cpp\n$ nice -5 ps\n```", "```cpp\n$ sudo nice -5 ps\n```", "```cpp\n$ sudo renice -n -10 -p 9610\n```", "```cpp\n$ sudo chrt --rr 99 ./test\n```", "```cpp\n#include <iostream>\n#include <unistd.h>\nusing namespace std;\nvoid process_creator() {\n    if (fork() == 0) // {1}\n        cout << \"Child with pid: \" << getpid() << endl;\n    else\n        cout << \"Parent with pid: \" << getpid() << endl;\n}\nint main() {\n    process_creator();\n    return 0;\n}\n```", "```cpp\nParent with pid: 92745\nChild with pid: 92746\n```", "```cpp\n. . .\nvoid process_creator() {\n    if (execv(\"./test_fork\", NULL) == -1) // {1}\n        cout << \"Process creation failed!\" << endl;\n    else\n        cout << \"Process called!\" << endl;\n}\n. . .\n```", "```cpp\nParent with pid: 12191\nChild with pid: 12192\n```", "```cpp\nint execl(const char* path, const char* arg, …)\nint execlp(const char* file, const char* arg, …)\nint execle(const char* path, const char* arg, …, char*\n  const envp[])\nint execv(const char* path, const char* argv[])\nint execvp(const char* file, const char* argv[])\nint execvpe(const char* file, const char* argv[], char\n  *const envp[])\n```", "```cpp\n...\n#include <stdlib.h>\n...\n    if (fork() == 0) {\n        cout << \"Child process id: \" << getpid() << endl;\n        exit(EXIT_SUCCESS); // {1}\n    }\n    else {\n        cout << \"Parent process id: \" << getpid() << endl;\n    }\n...\n```", "```cpp\n#include <sys/wait.h>\n...\nvoid process_creator() {\n    pid_t pids[2] = {0};\n    if ((pids[0] = fork()) == 0) {\n        cout << \"Child process id: \" << getpid() << endl;\n        exit(EXIT_SUCCESS); // {1}\n    }\n    if ((pids[1] = fork()) == 0) {\n        cout << \"Child process id: \" << getpid() << endl;\n        exit(EXIT_FAILURE); // {2}\n    }\n    int status = 0;\n    waitpid(pids[0], &status, 0); // {3}\n    if (WIFEXITED(status)) // {4}\n        cout << \"Child \" << pids[0]\n             << \" terminated with: \"\n             << status << endl;\n    waitpid(pids[1], &status, 0); // {5}\n    if (WIFEXITED(status)) // {6}\n        cout << \"Child \" << pids[1]\n             << \" terminated with: \"\n             << status << endl;\n...\n```", "```cpp\nChild process id: 33987\nChild process id: 33988\nChild 33987 terminated with: 0\nChild 33988 terminated with: 256\n```", "```cpp\n...\nvoid process_creator() {\n...\n    if ((pids[1] = fork()) == 0) {\n        cout << \"Child process id: \" << getpid() << endl;\n        abort(); // {1}\n    }\n    siginfo_t status = {0}; // {2}\n    waitid(P_PID, pids[1], &status, WEXITED); // {3}\n    if (WIFSIGNALED(status)) // {4}\n        cout << \"Child \" << pids[1]\n             << \" aborted: \"\n             << \"\\nStatus update with SIGCHLD: \"\n             << status.si_signo\n             << \"\\nTermination signal - SIGABRT: \"\n             << status.si_status\n             << \"\\nTermination code - _exit(2): \"\n             << status.si_code << endl;\n}...\n```", "```cpp\nChild process id: 48368\nChild process id: 48369\nChild 48369 aborted:\nStatus update with SIGCHLD: 20\nTermination signal - SIGABRT: 6\nTermination code - _exit(2): 2\n```", "```cpp\npthread_t new_thread;\npthread_create(&new_thread, <attributes>,\n               <procedure to execute>,\n               <procedure arguments>);\npthread_join(new_thread, NULL);\n```", "```cpp\nstd::thread new_thread(<procedure to execute>);\nnew.join();\n```", "```cpp\n#include <iostream>\n#include <chrono>\n#include <thread>\nusing namespace std;\nusing namespace std::chrono;\nvoid detached_routine() {\n    cout << \"Starting detached_routine thread.\\n\";\n    this_thread::sleep_for(seconds(2));\n    cout << \"Exiting detached_routine thread.\\n\";\n}\nvoid joined_routine() {\n    cout << \"Starting joined_routine thread.\\n\";\n    this_thread::sleep_for(seconds(2));\n    cout << \"Exiting joined_routine thread.\\n\";\n}\nvoid thread_creator() {\n    cout << \"Starting thread_creator.\\n\";\n    thread t1(detached_routine);\n    cout << \"Before - Is the detached thread joinable: \"\n         << t1.joinable() << endl;\n    t1.detach();\n    cout << \"After - Is the detached thread joinable: \"\n         << t1.joinable() << endl;\n    thread t2(joined_routine);\n    cout << \"Before - Is the joined thread joinable: \"\n         << t2.joinable() << endl;\n    t2.join();\n    cout << \"After - Is the joined thread joinable: \"\n         << t2.joinable() << endl;\n    this_thread::sleep_for(chrono::seconds(1));\n    cout << \"Exiting thread_creator.\\n\";\n}\nint main() {\n    thread_creator();\n}\n```", "```cpp\nStarting thread_creator.\nBefore - Is the detached thread joinable: 1\nAfter - Is the detached thread joinable: 0\nBefore - Is the joined thread joinable: 1\nStarting joined_routine thread.\nStarting detached_routine thread.\nExiting joined_routine thread.\nExiting detached_routine thread.\nAfter - Is the joined thread joinable: 0\nExiting thread_creator.\n```"]