["```cpp\n$ cmake -G Ninja -DLLVM_ENABLE_PROJECTS=\"clang;clang-tools-extra\" …\n```", "```cpp\n$ ninja clang\n```", "```cpp\n$ ninja check-clang\n```", "```cpp\n$ clang++ -### -std=c++11 -Wall ./hello_world.cpp -o hello_world\n```", "```cpp\n\"/path/to/clang\" \"-cc1\" \"-triple\" \"x86_64-apple-macosx11.0.0\" \"-Wdeprecated-objc-isa-usage\" \"-Werror=deprecated-objc-isa-usage\" \"-Werror=implicit-function-declaration\" \"-emit-obj\" \"-mrelax-all\" \"-disable-free\" \"-disable-llvm-verifier\" … \"-fno-strict-return\" \"-masm-verbose\" \"-munwind-tables\" \"-target-sdk-version=11.0\" … \"-resource-dir\" \"/Library/Developer/CommandLineTools/usr/lib/clang/12.0.0\" \"-isysroot\" \"/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk\" \"-I/usr/local/include\" \"-stdlib=libc++\" … \"-Wall\" \"-Wno-reorder-init-list\" \"-Wno-implicit-int-float-conversion\" \"-Wno-c99-designator\" … \"-std=c++11\" \"-fdeprecated-macro\" \"-fdebug-compilation-dir\" \"/Users/Rem\" \"-ferror-limit\" \"19\" \"-fmessage-length\" \"87\" \"-stack-protector\" \"1\" \"-fstack-check\" \"-mdarwin-stkchk-strong-link\" … \"-fexceptions\" … \"-fdiagnostics-show-option\" \"-fcolor-diagnostics\" \"-o\" \"/path/to/temp/hello_world-dEadBeEf.o\" \"-x\" \"c++\" \"hello_world.cpp\"…\n```", "```cpp\n$ clang -Xclang -ast-dump -fsyntax-only foo.c\n```", "```cpp\nint foo(int c) { return c + 1; }\n```", "```cpp\nTranslationUnitDecl 0x560f3929f5a8 <<invalid sloc>> <invalid sloc>\n|…\n`-FunctionDecl 0x560f392e1350 <./test.c:2:1, col:30> col:5 foo 'int (int)'\n  |-ParmVarDecl 0x560f392e1280 <col:9, col:13> col:13 used c 'int'\n  `-CompoundStmt 0x560f392e14c8 <col:16, col:30>\n    `-ReturnStmt 0x560f392e14b8 <col:17, col:28>\n      `-BinaryOperator 0x560f392e1498 <col:24, col:28> 'int' '+'\n        |-ImplicitCastExpr 0x560f392e1480 <col:24> 'int' <LValueToRValue>\n        | `-DeclRefExpr 0x560f392e1440 <col:24> 'int' lvalue ParmVar 0x560f392e1280 'c' 'int'\n        `-IntegerLiteral 0x560f392e1460 <col:28> 'int' 1\n```", "```cpp\n$ clang -fplugin=/path/to/MyPlugin.so … foo.cpp\n```", "```cpp\nint main(int argc, char** argv) {\n  CommonOptionsParser OptionsParser(argc, argv,…);\n  ClangTool Tool(OptionsParser.getCompilations(), {\"foo.cpp\"});\n  return Tool.run(newFrontendActionFactory<MyCustomAction>().         get());\n}\n```", "```cpp\n// In foo.cpp…\nstruct Location {\n  float Lat, Lng;\n};\nfloat foo(Location *loc) {\n  auto Lat = loc->Lat + 1.0;\n  return Lat;\n}\n```", "```cpp\n$ clang-refactor --selection=\"foo.cpp:1:1-10:2\" \\\n                 --old-qualified-name=\"Location::Lat\" \\\n                 --new-qualified-name=\"Location::Latitude\" \\\n                 foo.cpp\n```", "```cpp\n// In foo.cpp…\nstruct Location {\n  float Latitude, Lng;\n};\nfloat foo(Location *loc) {\n  auto Lat = loc->Latitude + 1.0;\n  return Lat;\n}\n```"]