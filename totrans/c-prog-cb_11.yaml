- en: Using MySQL Database
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用MySQL数据库
- en: MySQL is one of the most popular database management systems in recent times.
    Databases, as we all know, are used for storing data that's going to be used in the
    future when required. The data in a database can be secured through encryption
    and can be indexed for faster access. Where the volume of data is too high, a database management
    system is preferred over a traditional sequential and random file handling system. Storing
    data in a database is a very important task in any application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL是近年来最受欢迎的数据库管理系统之一。众所周知，数据库用于存储将来需要使用的数据。数据库中的数据可以通过加密来保护，并且可以建立索引以实现更快的访问。当数据量太大时，数据库管理系统比传统的顺序和随机文件处理系统更受欢迎。在任何应用程序中，将数据存储在数据库中都是一个非常重要的任务。
- en: 'This chapter is focused on understanding how table rows are managed in the
    database tables. In this chapter, you will learn about the following recipes:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的重点是理解如何在数据库表中管理表行。在本章中，你将学习以下菜谱：
- en: Displaying all the built-in tables in a default MySQL database
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示默认MySQL数据库中的所有内置表
- en: Storing information into MySQL database
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将信息存储到MySQL数据库中
- en: Searching desired information in the database
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在数据库中搜索所需信息
- en: Updating information in the database
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新数据库中的信息
- en: Deleting data from the database using C
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用C语言从数据库中删除数据
- en: We will review the most commonly used functions in MySQL before we move on to
    the recipes. Also, ensure that you read *Appendix B* and *Appendix C* to install
    Cygwin and MySQL Server before implementing the recipes in this chapter.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续到菜谱之前，我们将回顾MySQL中最常用的函数。同时，确保你在实施本章中的菜谱之前阅读*附录B*和*附录C*以安装Cygwin和MySQL服务器。
- en: Functions in MySQL
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MySQL中的函数
- en: While accessing and working with MySQL database in C programming, we will have
    to use several functions. Let's go through them.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在C编程语言中访问和使用MySQL数据库时，我们不得不使用几个函数。让我们来看看它们。
- en: mysql_init()
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: mysql_init()
- en: 'This initializes a `MYSQL` object that can be used in the `mysql_real_connect()`
    method. Here is its syntax:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这初始化了一个`MYSQL`对象，该对象可以在`mysql_real_connect()`方法中使用。以下是它的语法：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If the object parameter that's passed is `NULL`, then the function initializes
    and returns a new object; otherwise, the supplied object is initialized and the
    address of the object is returned.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果传递的对象参数是`NULL`，则该函数初始化并返回一个新对象；否则，提供的对象被初始化，并返回对象的地址。
- en: mysql_real_connect()
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: mysql_real_connect()
- en: 'This establishes a connection to a MySQL database engine running on the specified
    host. Here is its syntax:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这将建立一个连接到指定主机上运行的MySQL数据库引擎。以下是它的语法：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这里：
- en: '`mysqlObject` represents the address of an existing `MYSQL` object.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mysqlObject`代表现有`MYSQL`对象的地址。'
- en: '`hostName` is where the hostname or IP address of the host is provided. To
    connect to a local host, either `NULL` or the string *localhost* is provided.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hostName`是提供主机名或IP地址的地方。要连接到本地主机，可以提供`NULL`或字符串*localhost*。'
- en: '`userid` represents a valid MySQL login ID.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`userid`代表一个有效的MySQL登录ID。'
- en: '`password` represents the password of the user.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`password`代表用户的密码。'
- en: '`dbase` represents the database name to which the connection has to be established.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dbase`代表需要建立连接的数据库名称。'
- en: '`port` is where either value `0`  is specified or the port number for the TCP/IP
    connection is supplied.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`port`是指定值`0`或提供TCP/IP连接的端口号的地方。'
- en: '`socket`is where either `NULL` is specified or the socket or named pipe is
    supplied.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`socket`是指定`NULL`或提供套接字或命名管道的地方。'
- en: '`flag` can be used to enable certain features, such as handling expired passwords
    and applying compression in the client/server protocol, but its value is usually
    kept at `0`.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flag`可用于启用某些功能，例如处理过期的密码和在客户端/服务器协议中应用压缩，但其值通常保持在`0`。'
- en: The function returns a `MYSQL` connection handler if the connection is established;
    otherwise, it returns `NULL`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果连接建立成功，该函数返回一个`MYSQL`连接句柄；否则，它返回`NULL`。
- en: mysql_query()
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: mysql_query()
- en: 'This function executes the supplied SQL query. Here is its syntax:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数执行提供的SQL查询。以下是它的语法：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这里：
- en: '`mysqlObject` represents the `MYSQL` object'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mysqlObject`代表`MYSQL`对象'
- en: '`sqlstmt` represents the null-terminated string that contains the SQL statement
    to be executed'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sqlstmt`代表包含要执行的SQL语句的空终止字符串'
- en: The function returns `0` if the SQL statement executes successfully; otherwise,
    it returns a non-zero value.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果SQL语句执行成功，该函数返回`0`；否则，它返回一个非零值。
- en: mysql_use_result()
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: mysql_use_result()
- en: 'After successful execution of an SQL statement, this method is used to save
    the result set. This means that the result set is retrieved and returned. Here
    is its syntax:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功执行一个 SQL 语句之后，此方法用于保存结果集。这意味着结果集被检索并返回。以下是它的语法：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here,  `mysqlObject` represents the connection handler.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`mysqlObject` 代表连接处理程序。
- en: If no error occurs, the function returns a `MYSQL_RES` result structure. In
    case of any error, the function returns `NULL`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有发生错误，该函数返回一个 `MYSQL_RES` 结果结构。在发生任何错误的情况下，该函数返回 `NULL`。
- en: mysql_fetch_row()
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: mysql_fetch_row()
- en: 'This function fetches the next row from a result set. The function returns
    `NULL` if there are no more rows in the result set to retrieve or if an error
    occurs. Here is its syntax:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数从结果集中获取下一行。如果结果集中没有更多行可检索或发生错误，则函数返回 `NULL`。以下是它的语法：
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here, the `resultset` parameter is the set from which the next row has to be
    fetched. You can access values in the column of the row by using the subscript
    `row[0]`, `row[1]`, and so on, where `row[0]` represents the data in the first
    column, `row[1]` represents the data in the second column, and so on.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`resultset` 参数是从中获取下一行的集合。您可以通过使用下标 `row[0]`、`row[1]` 等来访问行的列中的值，其中 `row[0]`
    表示第一列中的数据，`row[1]` 表示第二列中的数据，依此类推。
- en: mysql_num_fields()
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: mysql_num_fields()
- en: 'This returns the number of values; that is, columns in the supplied row. Here
    is its syntax:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这返回值数；即，提供的行中的列数。以下是它的语法：
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here, the parameter row represents the individual row that is accessed from
    the `resultset`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，参数行代表从 `resultset` 访问的单独行。
- en: mysql_free_result()
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: mysql_free_result()
- en: 'This frees the memory allocated to a result set. Here is its syntax:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这释放了分配给结果集的内存。以下是它的语法：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here, `resultset` represents the set whose memory we want to free up.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`resultset` 代表我们想要释放内存的集合。
- en: mysql_close()
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: mysql_close()
- en: 'This function closes the previously opened MySQL connection. Here is its syntax:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数关闭之前打开的 MySQL 连接。以下是它的语法：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: It de-allocates the connection handler that's represented by the `mysqlObject`
    parameter. The function returns no value.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 它释放由 `mysqlObject` 参数表示的连接处理程序。该函数不返回任何值。
- en: This covers the functions that we need to know for using the MySQL database
    for our recipes. From the second recipe onward, we will be working on a database
    table. So, let's get started and create a database and a table inside it.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这涵盖了我们需要了解的用于在食谱中使用 MySQL 数据库的函数。从第二个食谱开始，我们将在一个数据库表中工作。所以，让我们开始创建一个数据库和其中的表。
- en: Creating a MySQL database and tables
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 MySQL 数据库和表
- en: 'Open the Cygwin Terminal and open the MySQL command line by giving the following
    command. Through this command, we want to open MySQL through the user ID root
    and try to connect with the MySQL server running at the localhost (`127.0.0.1`):'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 Cygwin 终端并使用以下命令打开 MySQL 命令行。通过此命令，我们希望通过用户 ID root 打开 MySQL，并尝试连接到运行在本地的
    MySQL 服务器（`127.0.0.1`）：
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The preceding MySQL prompt that appears confirms that the `userid` and `password`
    have been entered correctly and that you are successfully connected to a running
    MySQL server. Now, we can go ahead and run SQL commands.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 出现的前一个 MySQL 提示确认了 `userid` 和 `password` 已正确输入，并且您已成功连接到正在运行的 MySQL 服务器。现在，我们可以继续运行
    SQL 命令。
- en: Create database
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建数据库
- en: 'The `create database` statement creates the database with the specified name.
    Here is the syntax:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`create database` 语句创建具有指定名称的数据库。以下是它的语法：'
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Here, `database_name` is the name of the new database to be created.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`database_name` 是要创建的新数据库的名称。
- en: 'Let''s create a database by the name `ecommerce` for our recipes:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个名为 `ecommerce` 的数据库来存储我们的食谱：
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To confirm that our `ecommerce` database has been successfully created, we
    will use the `show databases` statement to see the list of existing databases
    on the MySQL server:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确认我们的 `ecommerce` 数据库已成功创建，我们将使用 `show databases` 语句查看 MySQL 服务器上现有的数据库列表：
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In the preceding database listing, we can see the name `ecommerce`, which confirms
    that our database has been successfully created. Now, we will apply the `use`
    statement to access the `ecommerce` database, as shown here:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的数据库列表中，我们可以看到名称 `ecommerce`，这证实了我们的数据库已成功创建。现在，我们将应用 `use` 语句来访问 `ecommerce`
    数据库，如下所示：
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now, the `ecommerce` database is in use, so whatever SQL commands we will give
    will be applied to the `ecommerce` database only. Next, we need to create a table
    in our `ecommerce` database. For creating a database table, the `Create table`
    command is used. Let's discuss it next.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: Create table
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This creates a database table with the specified name. Here is its syntax:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Here:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '`table_name` represents the name of the table that we want to create.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`column_ name` represents the column names that we want in the table.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`column_type` represents the data type of the column. Depending on the type
    of data we want to store in the column, the `column_type` can be `int`, `varchar`,
    `date`, `text`, and so on.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `create table` statement creates a `users` table with three columns: `email_address`,
    `password`, and `address_of_delivery`. Assuming that this table will contain information
    of the users who have placed orders online, we will be storing their email address,
    password, and the location where the order has to be delivered:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'To confirm that the table has been successfully created, we will use the `show
    tables` command to display the list of existing tables in the currently opened
    database, as shown here:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The output of the `show tables` command displays the `users` table, thus confirming
    that the table has indeed been created successfully. To see the table structure
    (that is, its column names, column types, and column width), we will use the `describe`
    statement. The following statement displays the structure of the `users` table:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: So, now that we have learned about some basic commands to work with our database,
    we can begin with the first recipe of this chapter.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: Displaying all the built-in tables in a default mysql database
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The MySQL server, when installed, comes with certain default databases. One
    of those databases is `mysql`. In this recipe, we will learn to display all the
    table names that are available in the `mysql` database.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a MySQL object:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Establish a connection to the MySQL server running at the specified host. Also,
    connect to the desired database:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Create an execute SQL statement, comprised of `show tables`:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Save the result of the executing SQL query (that is, the table information
    of the `mysql` database) into a `resultset`:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Fetch one row at a time from the `resultset` in a `while` loop and display
    only the table name from that row:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Free up the memory that is allocated to the `resultset`:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Close the opened connection handler:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The `mysql1.c` program for displaying all the tables in the built-in `mysql`
    database is as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Now, let's go behind the scenes to understand the code better.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will start by establishing a connection with the MySQL server and for that,
    we need to invoke the `mysql_real_connect` function. But we have to pass a `MYSQL`
    object to the `mysql_real_connect` function and we have to invoke the `mysql_init`
    function to create the `MYSQL` object. Hence, the `mysql_init` function is first
    invoked to initialize a `MYSQL` object by the name `conn`.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先与MySQL服务器建立连接，为此，我们需要调用`mysql_real_connect`函数。但是，我们必须将`MYSQL`对象传递给`mysql_real_connect`函数，并且必须调用`mysql_init`函数来创建`MYSQL`对象。因此，首先调用`mysql_init`函数以初始化名为`conn`的`MYSQL`对象。
- en: We will then supply the `MYSQL` object `conn` to the `mysql_real_connect` function,
    along with the valid user ID, password, and the host details. The `mysql_real_connect`
    function will establish a connection to the MySQL server running at the specified
    host. Besides this, the function will link to the supplied `mysql` database and
    will declare `conn` as the connection handler. This means that `conn` will be
    used in the rest of the program whenever we want to perform some action to the
    specified MySQL server and the `mysql` database.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将`MYSQL`对象`conn`和有效的用户ID、密码以及主机详细信息一起传递给`mysql_real_connect`函数。`mysql_real_connect`函数将建立与在指定主机上运行的MySQL服务器的连接。除此之外，该函数还将连接到提供的`mysql`数据库，并将`conn`声明为连接处理程序。这意味着`conn`将在整个程序中用于执行对指定MySQL服务器和`mysql`数据库的任何操作。
- en: If any error occurs in establishing the connection to the MySQL database engine,
    the program will terminate after displaying an error message. If the connection
    to the MySQL database engine is established successfully, the `mysql_query` function
    is invoked and the SQL statement `show tables` and the connection handler `conn`
    are supplied to it. The `mysql_query` function will execute the supplied SQL statement.
    To save the resulting table information of the `mysql` database, the `mysql_use_result`
    function is invoked. The table information that's received from the `mysql_use_result`
    function will be assigned to `resultset` `res`.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在建立与MySQL数据库引擎的连接时发生任何错误，程序将在显示错误消息后终止。如果成功建立与MySQL数据库引擎的连接，将调用`mysql_query`函数，并将SQL语句`show
    tables`和连接处理程序`conn`传递给它。`mysql_query`函数将执行提供的SQL语句。为了保存`mysql`数据库的结果表信息，将调用`mysql_use_result`函数。从`mysql_use_result`函数接收到的表信息将被分配给`resultset`
    `res`。
- en: Next, we will invoke the `mysql _fetch_row` function in a `while` loop that
    will extract one row at a time from the `resultset` `res`; that is, one table
    detail will be fetched at a time from the `resultset` and assigned to the array
    row. The array row will contain complete information of one table at a time. The
    table name stored in the `row[0]` subscript is displayed on the screen. With every
    iteration of the `while` loop, the next piece of table information is extracted
    from `resultset` `res` and assigned to the array row. Consequently, all the table
    names in the `mysql` database will be displayed on the screen.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在一个`while`循环中调用`mysql_fetch_row`函数，该循环将逐行从`resultset` `res`中提取数据；也就是说，每次从`resultset`中提取一个表详情并将其分配给数组行。数组行将包含一次一个表的完整信息。存储在`row[0]`索引中的表名将在屏幕上显示。随着`while`循环的每次迭代，将从`resultset`
    `res`中提取下一块表信息并分配给数组行。因此，`mysql`数据库中的所有表名都将显示在屏幕上。
- en: Then, we will invoke the `mysql_free_result` function to free up the memory
    that is allocated to `resultset` `res` and, finally, we will invoke the `mysql_close`
    function to close the opened connection handler `conn`.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将调用`mysql_free_result`函数释放分配给`resultset` `res`的内存，最后调用`mysql_close`函数关闭打开的连接处理程序`conn`。
- en: 'Let''s use GCC to compile the `mysql1.c` program, as shown here:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用GCC编译`mysql1.c`程序，如下所示：
- en: '[PRE25]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'If you get no errors or warnings, that means the `mysql1.c` program has compiled
    into an executable file, `mysql1.exe`. Let''s run this executable file:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有收到任何错误或警告，这意味着`mysql1.c`程序已编译成可执行文件，`mysql1.exe`。让我们运行这个可执行文件：
- en: '[PRE26]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '*Voila*! As you can see, the output shows the list of built-in tables in the
    `mysql` database. Now, let''s move on to the next recipe!'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '*Voila*！正如你所见，输出显示了`mysql`数据库中内置表的列表。现在，让我们继续下一个菜谱！'
- en: Storing information in MySQL database
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在MySQL数据库中存储信息
- en: 'In this recipe, we will learn how to insert a new row into the `users` table.
    Recall that at the beginning of this chapter, we created a database called `ecommerce`, and
    in that database, we created a table called `users` with the following columns:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将学习如何将新行插入到 `users` 表中。回想一下，在本章开头，我们创建了一个名为 `ecommerce` 的数据库，并在该数据库中创建了一个名为
    `users` 的表，该表具有以下列：
- en: '[PRE27]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: We will be inserting rows into this `users` table now.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将向这个 `users` 表中插入行。
- en: How to do it…
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Initialize a MYSQL object:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化一个 MYSQL 对象：
- en: '[PRE28]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Establish a connection to the MySQL server running at the localhost. Also,
    connect to the database that you want to work on:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 建立与运行在本地的 MySQL 服务器之间的连接。同时，连接到你想要工作的数据库：
- en: '[PRE29]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Enter the information of the new row that you want to insert into the `users`
    table in the `ecommerce` database, which will be for the new user''s email address,
    password, and address of delivery:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入要插入到 `ecommerce` 数据库中的 `users` 表的新行的信息，这将用于新用户的电子邮件地址、密码和送货地址：
- en: '[PRE30]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Prepare an SQL `INSERT` statement comprising this information; that is, the
    email address, password, and address of delivery of the new user:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 准备一个包含以下信息的 SQL `INSERT` 语句；即新用户的电子邮件地址、密码和送货地址：
- en: '[PRE31]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Execute the SQL `INSERT` statement to insert a new row into the `users` table
    in the `ecommerce` database:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行 SQL `INSERT` 语句以将新行插入到 `ecommerce` 数据库中的 `users` 表：
- en: '[PRE32]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Close the connection handler:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭连接句柄：
- en: '[PRE33]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The `adduser.c` program for inserting a row into a MySQL database table is
    shown in the following code:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 插入 MySQL 数据库表行的 `adduser.c` 程序如下所示：
- en: '[PRE34]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Now, let's go behind the scenes to understand the code better.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们深入了解代码，以更好地理解它。
- en: How it works...
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We start by invoking the `mysql_init` function to initialize a `MYSQL` object
    by the name `conn`. The initialized `MYSQL` object `conn` is then supplied for
    invoking the `mysql_real_connect` function, along with the valid user ID and password,
    which in turn will establish a connection to the MySQL server running on the localhost.
    In addition, the function will link to our `ecommerce` database.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先调用 `mysql_init` 函数以通过名称 `conn` 初始化一个 `MYSQL` 对象。初始化后的 `MYSQL` 对象 `conn`
    然后用于调用 `mysql_real_connect` 函数，同时提供有效的用户 ID 和密码，这将反过来建立与运行在本地的 MySQL 服务器的连接。此外，该函数将链接到我们的
    `ecommerce` 数据库。
- en: If any error occurs in establishing the connection to the MySQL database engine,
    an error message will be displayed and the program will terminate. If the connection
    to the MySQL database engine is established successfully, then `conn` will act
    as a connection handler for the rest of the program.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在建立与 MySQL 数据库引擎的连接时发生任何错误，将会显示错误消息，并且程序将终止。如果成功建立了与 MySQL 数据库引擎的连接，那么 `conn`
    将作为程序其余部分的连接句柄。
- en: 'You will be prompted to enter information for the new row that you want to
    insert into the `users` table in the `ecommerce` database. You will be prompted
    to enter the information for the new row: the email address, password, and address
    of delivery. We will create an SQL `INSERT` statement comprising this information
    (email address, password, and address of delivery), which is supposed to be entered
    by users. Thereafter, we will invoke the `mysql_query` function and pass the MySQL
    object `conn` and the SQL `INSERT` statements to it to execute the SQL statement
    and insert a new row into the `users` table.'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 你将被提示输入要插入到 `ecommerce` 数据库中的 `users` 表的新行的信息。你将被提示输入新行信息：电子邮件地址、密码和送货地址。我们将创建一个包含此信息的
    SQL `INSERT` 语句（电子邮件地址、密码和送货地址），该信息应由用户输入。之后，我们将调用 `mysql_query` 函数并将 MySQL 对象
    `conn` 和 SQL `INSERT` 语句传递给它以执行 SQL 语句并将新行插入到 `users` 表中。
- en: If any error occurs while executing the `mysql_query` function, an error message
    will be displayed on the screen and the program will terminate. If the new row
    is successfully inserted into the `users` table, the message `Row is inserted
    successfully in users table` will be displayed on the screen. Finally, we will
    invoke the `mysql_close` function and pass the connection handler `conn` to it
    to close the connection handler.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在执行 `mysql_query` 函数时发生任何错误，屏幕上将会显示错误消息，并且程序将终止。如果新行成功插入到 `users` 表中，屏幕上将会显示消息
    `Row is inserted successfully in users table`。最后，我们将调用 `mysql_close` 函数并将连接句柄
    `conn` 传递给它以关闭连接句柄。
- en: 'Let''s open the Cygwin Terminal. We will require two Terminal windows; on one
    window, we will run SQL commands and on the other, we will compile and run C.
    Open another Terminal window by pressing *Alt+F2*. In the first Terminal window,
    invoke the MySQL command line by using the following command:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们打开 Cygwin 终端。我们需要两个终端窗口；在一个窗口中，我们将运行 SQL 命令，在另一个窗口中，我们将编译和运行 C 语言。通过按 *Alt+F2*
    打开另一个终端窗口。在第一个终端窗口中，使用以下命令调用 MySQL 命令行：
- en: '[PRE35]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'To work with our `ecommerce` database, we need to make it the current database.
    So, open the `ecommerce` database by using the following command:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用我们的 `ecommerce` 数据库，我们需要将其设置为当前数据库。因此，使用以下命令打开 `ecommerce` 数据库：
- en: '[PRE36]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Now, `ecommerce` is our current database; that is, whatever SQL commands we
    will execute will be applied to the `ecommerce` database only. Let''s use the
    following SQL `SELECT` command to see the existing rows in the `users` database
    table:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`ecommerce` 是我们的当前数据库；也就是说，我们将执行的任何 SQL 命令都只应用于 `ecommerce` 数据库。让我们使用以下 SQL
    `SELECT` 命令来查看 `users` 数据库表中的现有行：
- en: '[PRE37]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The given output confirms that the `users` table is currently empty. To compile
    the C program, switch to the second Terminal window. Let''s use GCC to compile
    the `adduser.c` program, as shown here:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 给定的输出确认，`users` 表目前为空。要编译 C 程序，切换到第二个终端窗口。让我们使用 GCC 编译 `adduser.c` 程序，如下所示：
- en: '[PRE38]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'If you get no errors or warnings, that means the `adduser.c` program has compiled
    into an executable file, `adduser.exe`. Let''s run this executable file:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有错误或警告，这意味着 `adduser.c` 程序已编译成可执行文件 `adduser.exe`。让我们运行这个可执行文件：
- en: '[PRE39]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The given C program output confirms that the new row has been successfully
    added to the `users` database table. To confirm this, switch to the Terminal window
    where the MySQL command line is open and use the following command:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 给定的 C 程序输出确认，新行已成功添加到 `users` 数据库表。为了确认这一点，切换到打开 MySQL 命令行的终端窗口，并使用以下命令：
- en: '[PRE40]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '*Voila*! The given output confirms that the new row that was entered through
    C has been successfully inserted into the `users` database table.'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '*哇*！给定的输出确认，通过 C 语言输入的新行已成功插入到 `users` 数据库表中。'
- en: Now, let's move on to the next recipe!
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续下一个菜谱！
- en: Searching for the desired information in the database
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在数据库中搜索所需信息
- en: In this recipe, we will learn how to search for information in a database table.
    Again, we assume that a `users` table comprising three columns, `email_address`,
    `password`, and `address_of_delivery`, already exists (please see the section,
    *Creating a MySQL database and tables*, of this chapter, where we created an `ecommerce`
    database and a `users` table in it). On entering an email address, the recipe
    will search the entire `users` database table for it, and if any row is found
    that matches the supplied email address, that user's password and address of delivery
    will be displayed on the screen.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将学习如何在数据库表中搜索信息。同样，我们假设已经存在一个包含三个列 `email_address`、`password` 和 `address_of_delivery`
    的 `users` 表（请参阅本章的 *创建 MySQL 数据库和表* 部分，其中我们创建了一个 `ecommerce` 数据库并在其中创建了一个 `users`
    表）。输入电子邮件地址后，菜谱将搜索整个 `users` 数据库表，如果找到与提供的电子邮件地址匹配的任何行，则将在屏幕上显示该用户的密码和送货地址。
- en: How to do it…
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'Initialize a MYSQL object:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化一个 MYSQL 对象：
- en: '[PRE41]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Establish a connection to the MySQL server running at the specified host. Also,
    establish a connection to the `ecommerce` database:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 建立与指定主机上运行的 MySQL 服务器之间的连接。同时，建立与 `ecommerce` 数据库的连接：
- en: '[PRE42]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Enter the email address of the user whose details you want to search for:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入您要搜索详细信息的用户的电子邮件地址：
- en: '[PRE43]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Create an SQL `SELECT` statement that searches the row in the `users` table
    that matches the email address that was entered by the user:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 SQL `SELECT` 语句，搜索 `users` 表中与用户输入的电子邮件地址匹配的行：
- en: '[PRE44]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Execute the SQL `SELECT` statement. Terminate the program if the SQL query
    does not execute or some error occurs:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行 SQL `SELECT` 语句。如果 SQL 查询未执行或发生某些错误，则终止程序：
- en: '[PRE45]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'If the SQL query executes successfully then the row(s) that matches the specified
    email address are retrieved and assigned to a `resultset`:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果 SQL 查询成功执行，则匹配指定电子邮件地址的行（如果有的话）将被检索并分配给 `resultset`：
- en: '[PRE46]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Use a `while` loop to extract one row at a time from the `resultset` and assign
    it to the array row:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `while` 循环逐行从 `resultset` 中提取并分配给数组 `row`：
- en: '[PRE47]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'The information of the entire row is shown by displaying the subscripts `row[0]`,
    `row[1]`, and `row[2]`, respectively:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过显示子索引 `row[0]`、`row[1]` 和 `row[2]` 分别显示整行信息：
- en: '[PRE48]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Memory that''s allocated to the `resultset` is freed up:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 分配给 `resultset` 的内存被释放：
- en: '[PRE49]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'The opened connection handler is closed:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开的连接处理程序被关闭：
- en: '[PRE50]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'The `searchuser.c` program for searching in a specific row in a MySQL database
    table is shown in the following code:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中展示了用于在 MySQL 数据库表中的特定行进行搜索的 `searchuser.c` 程序：
- en: '[PRE51]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Now, let's go behind the scenes to understand the code better.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们深入了解代码，以更好地理解其工作原理。
- en: How it works...
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We will start by invoking the `mysql_init` function to initialize a `MYSQL`
    object by the name `conn`. Thereafter, we will invoke the `mysql_real_connect`
    function and pass the `MYSQL` object `conn` to it along with the valid user ID,
    password, and the host details. The `mysql_real_connect` function will establish
    a connection to the MySQL server running at the specified host and will also connect
    to the supplied database, `ecommerce`. The `MYSQL` object `conn` will act as the
    connection handler for the rest of the program. Wherever a connection to the MySQL
    server and `ecommerce` database is required, referring to `conn` will suffice.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先调用 `mysql_init` 函数，通过名称 `conn` 初始化一个 `MYSQL` 对象。之后，我们将调用 `mysql_real_connect`
    函数，并将 `MYSQL` 对象 `conn` 及有效的用户 ID、密码和主机详细信息传递给它。`mysql_real_connect` 函数将连接到在指定主机上运行的
    MySQL 服务器，并将连接到提供的数据库 `ecommerce`。`MYSQL` 对象 `conn` 将作为程序其余部分的连接处理程序。无论何时需要连接到
    MySQL 服务器和 `ecommerce` 数据库，引用 `conn` 就足够了。
- en: If any error occurs in establishing a connection to the MySQL database engine
    or the `ecommerce` database, an error message will be displayed and the program
    will terminate. If a connection to the MySQL database engine is established successfully,
    you will be prompted to enter the email address of the user whose details you
    want to search for.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在建立与 MySQL 数据库引擎或 `ecommerce` 数据库的连接时发生任何错误，将显示错误消息，并终止程序。如果成功建立与 MySQL 数据库引擎的连接，你将被提示输入要搜索的用户详情的电子邮件地址。
- en: We will create an SQL `SELECT` statement that will search the row in the `users`
    table that matches the email address entered by the user. Then, we will invoke
    the `mysql_query` function and pass the created SQL `SELECT` statement to it,
    along with the connection handler `conn`. If the SQL query does not execute or
    some error occurs, the program will terminate after displaying an error message.
    If the query is successful, then the resulting row(s) that satisfy the condition
    (that is, the row(s) that match the supplied email address) will be retrieved
    by invoking the `mysql_use_result` function and will be assigned to the result
    set, `resultset`.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个 SQL `SELECT` 语句，用于搜索 `users` 表中与用户输入的电子邮件地址匹配的行。然后，我们将调用 `mysql_query`
    函数，并将创建的 SQL `SELECT` 语句及其连接处理程序 `conn` 传递给它。如果 SQL 查询没有执行或发生某些错误，程序将在显示错误消息后终止。如果查询成功，则满足条件的结果行（即与提供的电子邮件地址匹配的行）将通过调用
    `mysql_use_result` 函数检索，并将分配给结果集 `resultset`。
- en: We will then invoke the `mysql _fetch_row` function in a `while` loop that will
    extract one row at a time from the `resultset`; that is, the first row from the
    `resultset` will be accessed and assigned to the array row.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将在一个 `while` 循环中调用 `mysql_fetch_row` 函数，每次提取 `resultset` 中的一行；即，将 `resultset`
    中的第一行访问并分配给数组 `row`。
- en: 'Recall that the `users` table contains the following columns:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下，`users` 表包含以下列：
- en: '`email_address varchar(30)`'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`email_address varchar(30)`'
- en: '`password varchar(30)   `'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`password varchar(30)` '
- en: '`address_of_delivery text`'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`address_of_delivery text`'
- en: Consequently, the array row will contain complete information of the accessed
    row, where the subscript `row[0]` will contain the data of the `email_ address` column,
    `row[1]` will contain the data of the column password, and `row[2]` will contain
    the data of the `address_of_delivery` column. The information of the entire row
    will be displayed by displaying the subscripts `row[0]`, `row[1]`, and `row[2]`,
    respectively.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，数组 `row` 将包含访问行的完整信息，其中索引 `row[0]` 将包含 `email_address` 列的数据，`row[1]` 将包含密码列的数据，`row[2]`
    将包含 `address_of_delivery` 列的数据。通过分别显示索引 `row[0]`、`row[1]` 和 `row[2]`，将显示整个行的信息。
- en: At the end, we will invoke the `mysql_free_result` function to free up the memory
    that was allocated to the `resultset`. Then, we will invoke the `mysql_close`
    function to close the opened connection handler `conn`.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将调用 `mysql_free_result` 函数释放分配给 `resultset` 的内存。然后，我们将调用 `mysql_close`
    函数关闭打开的连接处理程序 `conn`。
- en: 'Let''s open the Cygwin Terminal. We will require two Terminal windows; on one
    window, we will run SQL commands and on the other, we will compile and run C.
    Open another Terminal window by pressing *Alt+F2*. In the first Terminal window,
    invoke the MySQL command line by using the following command:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们打开 Cygwin 终端。我们需要两个终端窗口；在一个窗口中，我们将运行 SQL 命令，在另一个窗口中，我们将编译和运行 C 语言程序。通过按 *Alt+F2*
    打开另一个终端窗口。在第一个终端窗口中，使用以下命令调用 MySQL 命令行：
- en: '[PRE52]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'To work with our `ecommerce` database, we need to make it the current database.
    So, open the `ecommerce` database by using the following command:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 要与我们的 `ecommerce` 数据库一起工作，我们需要将其设置为当前数据库。因此，使用以下命令打开 `ecommerce` 数据库：
- en: '[PRE53]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Now, `ecommerce` is our current database; that is, whatever SQL commands we
    will execute will be applied to the `ecommerce` database only. Let''s use the
    following SQL `SELECT` command to see the existing rows in the `users` database
    table:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`ecommerce` 是我们的当前数据库；也就是说，我们将执行的任何 SQL 命令都只应用于 `ecommerce` 数据库。让我们使用以下 SQL
    `SELECT` 命令来查看 `users` 数据库表中的现有行：
- en: '[PRE54]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: The given output shows that there are three rows in the `users` table.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 给定的输出显示 `users` 表中有三行。
- en: 'To compile the C program, switch to the second Terminal window. Let''s use
    GCC to compile the `searchuser.c` program, as shown here:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 要编译 C 程序，切换到第二个终端窗口。让我们使用 GCC 编译 `searchuser.c` 程序，如下所示：
- en: '[PRE55]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'If you get no errors or warnings, that means the `searchuser.c` program has
    compiled into an executable file, `searchuser.exe`. Let''s run this executable
    file:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有错误或警告，这意味着 `searchuser.c` 程序已编译成可执行文件 `searchuser.exe`。让我们运行这个可执行文件：
- en: '[PRE56]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '*Voila*! We can see that complete information of the user with their email
    address, [bmharwani@yahoo.com](mailto:bmharwani@yahoo.com), is displayed on the
    screen.'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '*哇塞*！我们可以看到，带有电子邮件地址 [bmharwani@yahoo.com](mailto:bmharwani@yahoo.com) 的用户完整信息显示在屏幕上。'
- en: Now, let's move on to the next recipe!
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续下一个菜谱！
- en: Updating information in the database
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新数据库中的信息
- en: In this recipe, we will learn how to update information in a database table.
    We assume that a `users` database table already exists, comprising of three columns—`email_address`,
    `password`, and `address_of_delivery` (please see the beginning of this chapter,
    where we learned to create a database and a table in it). On entering an email
    address, all the current information of the user (that is, their password and
    address of delivery) will be displayed. Thereafter, the user will be prompted
    to enter a new password and address of delivery. This new information will be
    updated against the current information in the table.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将学习如何在数据库表中更新信息。我们假设已经存在一个 `users` 数据库表，包含三个列——`email_address`、`password`
    和 `address_of_delivery`（请参阅本章开头，我们学习了如何创建数据库和其中的表）。输入电子邮件地址后，将显示用户的当前所有信息（即他们的密码和送货地址）。之后，用户将被提示输入新的密码和送货地址。这些新信息将更新到表中的当前信息。
- en: How to do it…
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Initialize a `MYSQL` object:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化一个 `MYSQL` 对象：
- en: '[PRE57]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Establish a connection to the MySQL server running at the specified host. Also,
    generate a connection handler. The program will terminate if some error occurs
    in establishing the connection to the MySQL server engine or to the `ecommerce`
    database:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 建立与指定主机上运行的 MySQL 服务器的连接。同时，生成一个连接处理器。如果建立与 MySQL 服务器引擎或 `ecommerce` 数据库的连接时发生错误，程序将终止：
- en: '[PRE58]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Enter the email address of the user whose information has to be updated:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入需要更新信息的用户的电子邮件地址：
- en: '[PRE59]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Create an SQL `SELECT` statement that will search the row in the `users` table
    that matches the email address that was entered by the user:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 SQL `SELECT` 语句，用于搜索与用户输入的电子邮件地址匹配的 `users` 表中的行：
- en: '[PRE60]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Execute the SQL `SELECT` statement. The program will terminate if the SQL query
    does not execute successfully or some other error occurs:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行 SQL `SELECT` 语句。如果 SQL 查询没有成功执行或发生其他错误，程序将终止：
- en: '[PRE61]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'If the SQL query executes successfully, then the row(s) that match the supplied
    email address will be retrieved and assigned to the `resultset`:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果 SQL 查询执行成功，则与提供的电子邮件地址匹配的行将被检索并分配给 `resultset`：
- en: '[PRE62]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Check if there is at least one row in the `resultset`:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查 `resultset` 中是否至少有一行：
- en: '[PRE63]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'If there is no row in the `resultset`, then display the message that no row
    was found in the `users` table with the specified email address and exit from
    the program:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果 `resultset` 中没有行，则显示消息，指出在 `users` 表中没有找到指定电子邮件地址的行，并退出程序：
- en: '[PRE64]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'If there is any row in the `resultset`, then access it and assign it to the
    array row:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果 `resultset` 中有任何行，则访问它并将其分配给数组行：
- en: '[PRE65]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Information about the user (that is, the email address, password, and address
    of delivery, which are assigned to the subscripts `row[0]`, `row[1]`, and `row[2]`,
    respectively) are displayed on the screen:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示在屏幕上的用户信息（即电子邮件地址、密码和送货地址，分别分配给子脚标 `row[0]`、`row[1]` 和 `row[2]`）：
- en: '[PRE66]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'The memory allocated to the `resultset` is freed:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 分配给 `resultset` 的内存将被释放：
- en: '[PRE67]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Enter the new updated information of the user; that is, the new password and
    the new address of delivery:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入用户的新更新信息；即新的密码和新的送货地址：
- en: '[PRE68]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'An SQL `UPDATE` statement is prepared that contains the information of the
    newly entered password and address of delivery:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 准备一个包含新输入密码和送货地址信息的 SQL `UPDATE` 语句：
- en: '[PRE69]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Execute the SQL `UPDATE` statement. If any error occurs in executing the SQL
    `UPDATE` query, the program will terminate:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行 SQL `UPDATE` 语句。如果在执行 SQL `UPDATE` 查询过程中发生任何错误，程序将终止：
- en: '[PRE70]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'If the SQL `UPDATE` statement executes successfully, display a message on the
    screen informing that the user''s information has been updated successfully:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果 SQL `UPDATE` 语句执行成功，将在屏幕上显示一条消息，告知用户信息已成功更新：
- en: '[PRE71]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Close the opened connection handler:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭打开的连接句柄：
- en: '[PRE72]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'The `updateuser.c` program for updating a specific row of a MySQL database
    table with new content is shown in the following code:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 更新 MySQL 数据库表特定行的 `updateuser.c` 程序如下所示：
- en: '[PRE73]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Now, let's go behind the scenes to understand the code better.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们深入了解代码，以更好地理解其工作原理。
- en: How it works...
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this program, we first ask the user to enter the email address they want
    to update. Then, we search the `users` table to see if there is any row with the
    matching email address. If we find it, we display the current information of the
    user; that is, the current email address, password, and address of delivery. Thereafter,
    we ask the user to enter a new password and new address of delivery. The new password
    and address of deliver will replace the old password and address of delivery,
    thereby updating the `users` table.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在此程序中，我们首先要求用户输入他们想要更新的电子邮件地址。然后，我们在 `users` 表中搜索是否有任何行与匹配的电子邮件地址。如果我们找到它，我们显示用户的当前信息；即当前的电子邮件地址、密码和送货地址。之后，我们要求用户输入新的密码和新的送货地址。新的密码和送货地址将替换旧的密码和送货地址，从而更新
    `users` 表。
- en: We will start by invoking the `mysql_init` function to initialize a `MYSQL`
    object by the name `conn`. Then, we will pass the `MYSQL` object `conn` to the `mysql_real_connect`
    function that we invoked to establish a connection to the  MySQL server running
    at the specified host. Several other parameters will also be passed to the `mysql_real_connection`
    function, including a valid user ID, password, host details, and the database
    with which we want to work. The `mysql_real_connect` function will establish the
    connection to the  MySQL server running at the specified host and will declare
    the `MYSQL` object `conn` as the connection handler. This means that `conn` can
    connect to the `MySQL` server and the `ecommerce` database wherever it is used.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先调用 `mysql_init` 函数，通过名称 `conn` 初始化一个 `MYSQL` 对象。然后，我们将 `MYSQL` 对象 `conn`
    传递给 `mysql_real_connect` 函数，以建立与指定主机上运行的 MySQL 服务器的连接。还将向 `mysql_real_connect`
    函数传递其他几个参数，包括有效的用户 ID、密码、主机详情以及我们想要工作的数据库。`mysql_real_connect` 函数将建立与指定主机上运行的
    MySQL 服务器的连接，并将 `MYSQL` 对象 `conn` 声明为连接句柄。这意味着 `conn` 可以在任何使用的地方连接到 `MySQL` 服务器和
    `ecommerce` 数据库。
- en: The program will terminate after displaying an error message if some error occurs
    while establishing the connection to the MySQL server engine or to the `ecommerce`
    database. If the connection to the MySQL database engine is established successfully,
    you will be prompted to enter the email address of the user whose record you want
    to update.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在建立与 MySQL 服务器引擎或 `ecommerce` 数据库的连接过程中发生错误，程序将在显示错误消息后终止。如果成功建立了与 MySQL 数据库引擎的连接，您将被提示输入您想要更新的用户记录的电子邮件地址。
- en: As we mentioned earlier, we will first display the current information of the
    user. So, we will create an SQL `SELECT` statement and we will search the row
    in the `users` table that matches the email address that's entered by the user.
    Then, we will invoke the `mysql_query` function and pass the created SQL `SELECT`
    statement to it, along with the connection handler `conn`.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们之前提到的，我们首先将显示当前用户的信息。因此，我们将创建一个 SQL `SELECT` 语句，并将在 `users` 表中搜索与用户输入的电子邮件地址匹配的行。然后，我们将调用
    `mysql_query` 函数，并将创建的 SQL `SELECT` 语句及其连接处理器 `conn` 传递给它。
- en: Again, the program will terminate after displaying an error message if the SQL
    query does not execute successfully or some other error occurs. If the query executes
    successfully, then the resulting row(s) (that is, the row(s) that match the supplied
    email address), will be retrieved by invoking the `mysql_use_result` function
    and will be assigned to the `resultset`.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 SQL 查询没有成功执行或发生其他错误，程序将在显示错误消息后终止。如果查询执行成功，则通过调用 `mysql_use_result` 函数检索的结果行（即与提供的电子邮件地址匹配的行），将被分配给
    `resultset`。
- en: We will then invoke the `mysql_num_rows` function to ensure that there is at
    least one row in the `resultset`. If there is no row in the `resultset`, this
    means that no row was found in the `users` table that matches the given email
    address. In this case, the program will terminate after informing that no row
    was found in the `users` table with the given email address. If there is even
    a single row in the `resultset`, we will invoke the `mysql _fetch_row` function
    on the `resultset`, which will extract one row from the `resultset` and assign
    it to the array row.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将调用 `mysql_num_rows` 函数以确保 `resultset` 中至少有一行。如果没有行在 `resultset` 中，这意味着在
    `users` 表中没有找到与给定电子邮件地址匹配的行。在这种情况下，程序将在告知在 `users` 表中没有找到给定电子邮件地址的行后终止。如果 `resultset`
    中甚至有一行，我们将对 `resultset` 调用 `mysql_fetch_row` 函数，这将从一个 `resultset` 中提取一行并将其分配给数组行。
- en: 'The `users` table contains the following three columns:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '`users` 表包含以下三个列：'
- en: '`email_address varchar(30)`'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`email_address varchar(30)`'
- en: '`password varchar(30)`'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`password varchar(30)`'
- en: '`address_of_delivery text`'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`address_of_delivery text`'
- en: The array row will contain the information of the accessed row, where the subscripts
    `row[0]`, `row[1]`, and `row[2]` will contain the data of the columns `email_
    address`, `password`, and `address_of_delivery`, respectively. The current information
    of the user is displayed by displaying the information assigned to the aforementioned
    subscripts. Then, we will invoke the `mysql_free_result` function to free up the
    memory that is allocated to the `resultset`.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 数组行将包含访问行的信息，其中子索引 `row[0]`、`row[1]` 和 `row[2]` 分别包含 `email_address`、`password`
    和 `address_of_delivery` 列的数据。通过显示分配给上述子索引的信息来显示当前用户的信息。然后，我们将调用 `mysql_free_result`
    函数来释放分配给 `resultset` 的内存。
- en: At this stage, the user will be asked to enter the new password and the new
    address of delivery. We will prepare an SQL `UPDATE` statement that contains the
    information of the newly entered password and address of delivery. The `mysql_query`
    function will be invoked and the SQL `UPDATE` statement will be passed to it,
    along with the connection handler `conn`.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，将要求用户输入新的密码和新的送货地址。我们将准备一个包含新输入的密码和送货地址信息的 SQL `UPDATE` 语句。将调用 `mysql_query`
    函数，并将 SQL `UPDATE` 语句及其连接处理器 `conn` 传递给它。
- en: If any error occurs in executing the SQL `UPDATE` query, again, an error message
    will be displayed and the program will terminate. If the SQL `UPDATE` statement
    executes successfully, a message informing that the user's information has been
    updated successfully will be displayed. Finally, we will invoke the `mysql_close`
    function to close the opened connection handler `conn`.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在执行 SQL `UPDATE` 查询时发生任何错误，同样会显示错误消息，并且程序将终止。如果 SQL `UPDATE` 语句执行成功，将显示一条消息，告知用户信息已成功更新。最后，我们将调用
    `mysql_close` 函数来关闭已打开的连接处理器 `conn`。
- en: 'Let''s open the Cygwin Terminal. We will require two Terminal windows; on one
    window, we will run SQL commands and on the other, we will compile and run C.
    Open another Terminal window by pressing *Alt+F2*. In the first Terminal window,
    invoke the MySQL command line by using the following command:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们打开 Cygwin 终端。我们需要两个终端窗口；在一个窗口中运行 SQL 命令，在另一个窗口中编译和运行 C 语言。通过按 *Alt+F2* 打开另一个终端窗口。在第一个终端窗口中，使用以下命令调用
    MySQL 命令行：
- en: '[PRE74]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'To work with our `ecommerce` database, we need to make it the current database.
    So, open the `ecommerce` database by using the following command:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Now, `ecommerce` is our current database; that is, whatever SQL commands we
    will execute will be applied to the `ecommerce` database only. Let''s use the
    following SQL `SELECT` command to see the existing rows in the `users` database
    table:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'We can see from the preceding output that there are three rows in the `users`
    table. To compile the C program, switch to the second Terminal window. Let''s
    use GCC to compile the `updateuser.c` program, as shown here:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'If you get no errors or warnings, that means the `updateuser.c` program has
    compiled into an executable file, `updateuser.exe`. Let''s run this executable
    file:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Let''s run the program again and enter an email address that already exists:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'So, we have updated the row of the user with the email address, [bmharwani@yahoo.com](mailto:bmharwani@yahoo.com).
    To confirm that the row has been updated in the `users` database table too, switch
    to the Terminal window where the MySQL command line is running and issue the following
    SQL `SELECT` command:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '*Voila*! We can see that the row of the `users` table with the email address `bmharwani@yahoo.com` has
    been updated and is showing the new information.'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's move on to the next recipe!
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: Deleting data from the database using C
  id: totrans-274
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to delete information from a database table.
    We assume that a `users` table comprising three columns, `email_address`, `password`, and `address_of_delivery`,
    already exists (please see the beginning of this chapter, where we created an `ecommerce` database
    and a `users` table in it). You will be prompted to enter the email address of
    the user whose row has to be deleted. On entering an email address, all the information
    of the user will be displayed. Thereafter, you will again be asked to confirm
    if the displayed row should be deleted or not. After your confirmation, the row
    will be permanently deleted from the table.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-276
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Initialize a `MYSQL` object:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'Establish a connection to the MySQL server running at the specified host. Also,
    generate a connection handler. If any error occurs in establishing a connection
    to the MySQL server engine, the program will terminate:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'If the connection to the MySQL database engine is established successfully,
    you will be prompted to enter the email address of the user whose record you want
    to delete:'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'Create an SQL `SELECT` statement that will search the row from the `users`
    table that matches the email address that''s entered by the user:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'Execute the SQL `SELECT` statement. The program will terminate after displaying
    an error message if the SQL query does not execute successfully:'
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'If the query executes successfully, then the resulting row(s) that match the
    supplied email address will be retrieved and assigned to the `resultset`:'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'Invoke the `mysql_num_rows` function to ensure that there is at least one row
    in the `resultset`:'
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'If there is no row in the `resultset`, that means no row was found in the `users`
    table that matches the given email address; hence, the program will terminate:'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'If there is any row in the result set, that row is extracted from the `resultset`
    and will be assigned to the array row:'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'The information of the user is displayed by displaying the corresponding subscripts
    in the array row:'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'The memory that''s allocated to the `resultset` is freed up:'
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE91]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'If the user enters `yes`, an SQL `DELETE` statement will be created that will
    delete the row from the `users` table that matches the specified email address:'
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'The SQL `DELETE` statement is executed. If there are any error occurs in executing
    the SQL `DELETE` query, the program will terminate:'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE93]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'If the SQL `DELETE` statement is executed successfully, a message informing
    that the user account with the specified email address is deleted successfully
    is displayed:'
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'The opened connection handler is closed:'
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'The `deleteuser.c` program for deleting a specific row from a MySQL database
    table is shown in the following code:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: Now, let's go behind the scenes to understand the code better.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-310
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will start by invoking the `mysql_init` function to initialize a `MYSQL`
    object by the name `conn`. We will then pass the `MYSQL` object `conn` to the `mysql_real_connect`
    function that we invoked to establish a connection to the  MySQL server running
    at the specified host. Several other parameters will also be passed to the `mysql_real_connection`
    function, including a valid user ID, password, host details, and the database
    with which we want to work. The `mysql_real_connect` function will establish a
    connection to the  MySQL server running at the specified host and will declare
    a `MYSQL` object `conn` as the connection handler. This means thar `conn` can
    connect to the MySQL server and the commerce database wherever it is used.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: The program will terminate after displaying an error message if some error occurs
    while establishing a connection to the MySQL server engine or to the `ecommerce`
    database. If the connection to the MySQL database engine is established successfully,
    you will be prompted to enter the email address of the user whose record you want
    to delete.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: We will first display the information of the user and thereafter will seek permission
    from the user as to whether they really want to delete that row or not. So, we
    will create an SQL `SELECT` statement that will search the row from the `users`
    table that matches the email address that was entered by the user. Then, we will
    invoke the `mysql_query` function and pass the created SQL `SELECT` statement
    to it, along with the connection handler `conn`.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: Again, the program will terminate after displaying an error message if the SQL
    query does not execute successfully or some other error occurs. If the query executes
    successfully, then the resulting row(s) (that is, the row(s) that match the supplied
    email address) will be retrieved by invoking the `mysql_use_result` function and
    will be assigned to the `resultset`.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: We will invoke the `mysql_num_rows` function to ensure that there is at least
    one row in the `resultset`. If there is no row in the `resultset`, that means
    no row was found in the `users` table that matches the given email address. In
    that case, the program will terminate after informing that no row was found in
    the `users` table with the given email address. If there is even a single row
    in the `resultset`, we will invoke the `mysql _fetch_row` function on the `resultset`,
    which will extract one row from the `resultset` and assign it to the array row.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: 'The `users` table contains the following three columns:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: '`email_address varchar(30)`'
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`password varchar(30)`'
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`address_of_delivery text`'
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The array row will contain information of the accessed row, where the subscripts
    `row[0]`, `row[1]`, and `row[2]` will contain the data of the columns `email_
    address`, `password`, and `address_of_delivery`, respectively. The current information
    of the user will be displayed by displaying the current email address, password,
    and address of delivery that's assigned to the subscripts `row[0]`, `row[1]`,
    and `row[2]`. Then, we will invoke the `mysql_free_result` function to free up
    the memory that is allocated to the `resultset`.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: At this stage, the user will be asked to confirm whether they really want to
    delete the shown record. The user is supposed to enter `yes`, all in lowercase,
    to delete the record. If the user enters `yes`, an SQL `DELETE` statement will
    be created that will delete the row from the `users` table that matches the specified
    email address. The `mysql_query` function will be invoked and the SQL `DELETE`
    statement will be passed to it, along with the connection handler `conn`.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
- en: If any error occurs in executing the SQL `DELETE` query, again an error message
    will be displayed and the program will terminate. If the SQL `DELETE` statement
    executes successfully, a message informing that the user account with the specified
    mail address has been deleted successfully is displayed. Finally, we will invoke
    the `mysql_close` function to close the opened connection handler `conn`.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s open the Cygwin Terminal. We will require two Terminal windows; on one
    window, we will run MySQL commands and on the other, we will compile and run C.
    Open another Terminal window by pressing *Alt+F2*. In the first Terminal window,
    invoke the MySQL command line by giving the following command:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'To work with our `ecommerce` database, we need to make it the current database.
    So, open the `ecommerce` database by using the following command:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'Now, `ecommerce` is our current database; that is, whatever SQL commands we
    will execute will be applied to the `ecommerce` database only. Let''s use the
    following SQL `SELECT` command to see the existing rows in the `users` database
    table:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`ecommerce` 是我们的当前数据库；也就是说，我们将执行的任何 SQL 命令都只应用于 `ecommerce` 数据库。让我们使用以下 SQL
    `SELECT` 命令来查看 `users` 数据库表中的现有行：
- en: '[PRE99]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'From the preceding output, we can see that there are three rows in the `users`
    table. To compile the C program, switch to the second Terminal window. Let''s
    use GCC to compile the `deleteuser.c` program, as shown here:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的输出中，我们可以看到 `users` 表中有三行。要编译 C 程序，切换到第二个终端窗口。让我们使用 GCC 编译 `deleteuser.c`
    程序，如下所示：
- en: '[PRE100]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 'If you get no errors or warnings, that means the `deleteuser.c` program has
    compiled into an executable file, `deleteuser.exe`. Let''s run this executable
    file:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有收到任何错误或警告，这意味着 `deleteuser.c` 程序已编译成可执行文件，`deleteuser.exe`。让我们运行这个可执行文件：
- en: '[PRE101]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'Now, let''s run the program again with a valid email address:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们再次使用有效的电子邮件地址运行程序：
- en: '[PRE102]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 'So, the row of the user with the email address `bmharwani@yahoo.com` will be
    deleted from the `users` table. To confirm that the row has been deleted from
    the `users` database table too, switch to the Terminal window where the MySQL
    command line is running and issue the following SQL `SELECT` command:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，具有电子邮件地址 `bmharwani@yahoo.com` 的用户行将从 `users` 表中删除。为了确认该行已从 `users` 数据库表中删除，切换到运行
    MySQL 命令行的终端窗口，并执行以下 SQL `SELECT` 命令：
- en: '[PRE103]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '*Voila*! We can see that now there are only two rows left in the `users` table,
    confirming that one row has been deleted from the `users` table.'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: '*Voila*！我们可以看到现在 `users` 表中只剩下两行，这证实了一行已从 `users` 表中删除。'
