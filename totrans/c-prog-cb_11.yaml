- en: Using MySQL Database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MySQL is one of the most popular database management systems in recent times.
    Databases, as we all know, are used for storing data that's going to be used in the
    future when required. The data in a database can be secured through encryption
    and can be indexed for faster access. Where the volume of data is too high, a database management
    system is preferred over a traditional sequential and random file handling system. Storing
    data in a database is a very important task in any application.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter is focused on understanding how table rows are managed in the
    database tables. In this chapter, you will learn about the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Displaying all the built-in tables in a default MySQL database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Storing information into MySQL database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Searching desired information in the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating information in the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting data from the database using C
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will review the most commonly used functions in MySQL before we move on to
    the recipes. Also, ensure that you read *Appendix B* and *Appendix C* to install
    Cygwin and MySQL Server before implementing the recipes in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Functions in MySQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While accessing and working with MySQL database in C programming, we will have
    to use several functions. Let's go through them.
  prefs: []
  type: TYPE_NORMAL
- en: mysql_init()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This initializes a `MYSQL` object that can be used in the `mysql_real_connect()`
    method. Here is its syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: If the object parameter that's passed is `NULL`, then the function initializes
    and returns a new object; otherwise, the supplied object is initialized and the
    address of the object is returned.
  prefs: []
  type: TYPE_NORMAL
- en: mysql_real_connect()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This establishes a connection to a MySQL database engine running on the specified
    host. Here is its syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mysqlObject` represents the address of an existing `MYSQL` object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hostName` is where the hostname or IP address of the host is provided. To
    connect to a local host, either `NULL` or the string *localhost* is provided.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`userid` represents a valid MySQL login ID.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`password` represents the password of the user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dbase` represents the database name to which the connection has to be established.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`port` is where either value `0`  is specified or the port number for the TCP/IP
    connection is supplied.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`socket`is where either `NULL` is specified or the socket or named pipe is
    supplied.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flag` can be used to enable certain features, such as handling expired passwords
    and applying compression in the client/server protocol, but its value is usually
    kept at `0`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The function returns a `MYSQL` connection handler if the connection is established;
    otherwise, it returns `NULL`.
  prefs: []
  type: TYPE_NORMAL
- en: mysql_query()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This function executes the supplied SQL query. Here is its syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mysqlObject` represents the `MYSQL` object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sqlstmt` represents the null-terminated string that contains the SQL statement
    to be executed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The function returns `0` if the SQL statement executes successfully; otherwise,
    it returns a non-zero value.
  prefs: []
  type: TYPE_NORMAL
- en: mysql_use_result()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After successful execution of an SQL statement, this method is used to save
    the result set. This means that the result set is retrieved and returned. Here
    is its syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Here,  `mysqlObject` represents the connection handler.
  prefs: []
  type: TYPE_NORMAL
- en: If no error occurs, the function returns a `MYSQL_RES` result structure. In
    case of any error, the function returns `NULL`.
  prefs: []
  type: TYPE_NORMAL
- en: mysql_fetch_row()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This function fetches the next row from a result set. The function returns
    `NULL` if there are no more rows in the result set to retrieve or if an error
    occurs. Here is its syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Here, the `resultset` parameter is the set from which the next row has to be
    fetched. You can access values in the column of the row by using the subscript
    `row[0]`, `row[1]`, and so on, where `row[0]` represents the data in the first
    column, `row[1]` represents the data in the second column, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: mysql_num_fields()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This returns the number of values; that is, columns in the supplied row. Here
    is its syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Here, the parameter row represents the individual row that is accessed from
    the `resultset`.
  prefs: []
  type: TYPE_NORMAL
- en: mysql_free_result()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This frees the memory allocated to a result set. Here is its syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Here, `resultset` represents the set whose memory we want to free up.
  prefs: []
  type: TYPE_NORMAL
- en: mysql_close()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This function closes the previously opened MySQL connection. Here is its syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: It de-allocates the connection handler that's represented by the `mysqlObject`
    parameter. The function returns no value.
  prefs: []
  type: TYPE_NORMAL
- en: This covers the functions that we need to know for using the MySQL database
    for our recipes. From the second recipe onward, we will be working on a database
    table. So, let's get started and create a database and a table inside it.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a MySQL database and tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open the Cygwin Terminal and open the MySQL command line by giving the following
    command. Through this command, we want to open MySQL through the user ID root
    and try to connect with the MySQL server running at the localhost (`127.0.0.1`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The preceding MySQL prompt that appears confirms that the `userid` and `password`
    have been entered correctly and that you are successfully connected to a running
    MySQL server. Now, we can go ahead and run SQL commands.
  prefs: []
  type: TYPE_NORMAL
- en: Create database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `create database` statement creates the database with the specified name.
    Here is the syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Here, `database_name` is the name of the new database to be created.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a database by the name `ecommerce` for our recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'To confirm that our `ecommerce` database has been successfully created, we
    will use the `show databases` statement to see the list of existing databases
    on the MySQL server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding database listing, we can see the name `ecommerce`, which confirms
    that our database has been successfully created. Now, we will apply the `use`
    statement to access the `ecommerce` database, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Now, the `ecommerce` database is in use, so whatever SQL commands we will give
    will be applied to the `ecommerce` database only. Next, we need to create a table
    in our `ecommerce` database. For creating a database table, the `Create table`
    command is used. Let's discuss it next.
  prefs: []
  type: TYPE_NORMAL
- en: Create table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This creates a database table with the specified name. Here is its syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`table_name` represents the name of the table that we want to create.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`column_ name` represents the column names that we want in the table.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`column_type` represents the data type of the column. Depending on the type
    of data we want to store in the column, the `column_type` can be `int`, `varchar`,
    `date`, `text`, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `create table` statement creates a `users` table with three columns: `email_address`,
    `password`, and `address_of_delivery`. Assuming that this table will contain information
    of the users who have placed orders online, we will be storing their email address,
    password, and the location where the order has to be delivered:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'To confirm that the table has been successfully created, we will use the `show
    tables` command to display the list of existing tables in the currently opened
    database, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the `show tables` command displays the `users` table, thus confirming
    that the table has indeed been created successfully. To see the table structure
    (that is, its column names, column types, and column width), we will use the `describe`
    statement. The following statement displays the structure of the `users` table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: So, now that we have learned about some basic commands to work with our database,
    we can begin with the first recipe of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying all the built-in tables in a default mysql database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The MySQL server, when installed, comes with certain default databases. One
    of those databases is `mysql`. In this recipe, we will learn to display all the
    table names that are available in the `mysql` database.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a MySQL object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Establish a connection to the MySQL server running at the specified host. Also,
    connect to the desired database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an execute SQL statement, comprised of `show tables`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the result of the executing SQL query (that is, the table information
    of the `mysql` database) into a `resultset`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch one row at a time from the `resultset` in a `while` loop and display
    only the table name from that row:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Free up the memory that is allocated to the `resultset`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Close the opened connection handler:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The `mysql1.c` program for displaying all the tables in the built-in `mysql`
    database is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Now, let's go behind the scenes to understand the code better.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will start by establishing a connection with the MySQL server and for that,
    we need to invoke the `mysql_real_connect` function. But we have to pass a `MYSQL`
    object to the `mysql_real_connect` function and we have to invoke the `mysql_init`
    function to create the `MYSQL` object. Hence, the `mysql_init` function is first
    invoked to initialize a `MYSQL` object by the name `conn`.
  prefs: []
  type: TYPE_NORMAL
- en: We will then supply the `MYSQL` object `conn` to the `mysql_real_connect` function,
    along with the valid user ID, password, and the host details. The `mysql_real_connect`
    function will establish a connection to the MySQL server running at the specified
    host. Besides this, the function will link to the supplied `mysql` database and
    will declare `conn` as the connection handler. This means that `conn` will be
    used in the rest of the program whenever we want to perform some action to the
    specified MySQL server and the `mysql` database.
  prefs: []
  type: TYPE_NORMAL
- en: If any error occurs in establishing the connection to the MySQL database engine,
    the program will terminate after displaying an error message. If the connection
    to the MySQL database engine is established successfully, the `mysql_query` function
    is invoked and the SQL statement `show tables` and the connection handler `conn`
    are supplied to it. The `mysql_query` function will execute the supplied SQL statement.
    To save the resulting table information of the `mysql` database, the `mysql_use_result`
    function is invoked. The table information that's received from the `mysql_use_result`
    function will be assigned to `resultset` `res`.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will invoke the `mysql _fetch_row` function in a `while` loop that
    will extract one row at a time from the `resultset` `res`; that is, one table
    detail will be fetched at a time from the `resultset` and assigned to the array
    row. The array row will contain complete information of one table at a time. The
    table name stored in the `row[0]` subscript is displayed on the screen. With every
    iteration of the `while` loop, the next piece of table information is extracted
    from `resultset` `res` and assigned to the array row. Consequently, all the table
    names in the `mysql` database will be displayed on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we will invoke the `mysql_free_result` function to free up the memory
    that is allocated to `resultset` `res` and, finally, we will invoke the `mysql_close`
    function to close the opened connection handler `conn`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s use GCC to compile the `mysql1.c` program, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'If you get no errors or warnings, that means the `mysql1.c` program has compiled
    into an executable file, `mysql1.exe`. Let''s run this executable file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '*Voila*! As you can see, the output shows the list of built-in tables in the
    `mysql` database. Now, let''s move on to the next recipe!'
  prefs: []
  type: TYPE_NORMAL
- en: Storing information in MySQL database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, we will learn how to insert a new row into the `users` table.
    Recall that at the beginning of this chapter, we created a database called `ecommerce`, and
    in that database, we created a table called `users` with the following columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: We will be inserting rows into this `users` table now.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Initialize a MYSQL object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Establish a connection to the MySQL server running at the localhost. Also,
    connect to the database that you want to work on:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Enter the information of the new row that you want to insert into the `users`
    table in the `ecommerce` database, which will be for the new user''s email address,
    password, and address of delivery:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Prepare an SQL `INSERT` statement comprising this information; that is, the
    email address, password, and address of delivery of the new user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute the SQL `INSERT` statement to insert a new row into the `users` table
    in the `ecommerce` database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Close the connection handler:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The `adduser.c` program for inserting a row into a MySQL database table is
    shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Now, let's go behind the scenes to understand the code better.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We start by invoking the `mysql_init` function to initialize a `MYSQL` object
    by the name `conn`. The initialized `MYSQL` object `conn` is then supplied for
    invoking the `mysql_real_connect` function, along with the valid user ID and password,
    which in turn will establish a connection to the MySQL server running on the localhost.
    In addition, the function will link to our `ecommerce` database.
  prefs: []
  type: TYPE_NORMAL
- en: If any error occurs in establishing the connection to the MySQL database engine,
    an error message will be displayed and the program will terminate. If the connection
    to the MySQL database engine is established successfully, then `conn` will act
    as a connection handler for the rest of the program.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will be prompted to enter information for the new row that you want to
    insert into the `users` table in the `ecommerce` database. You will be prompted
    to enter the information for the new row: the email address, password, and address
    of delivery. We will create an SQL `INSERT` statement comprising this information
    (email address, password, and address of delivery), which is supposed to be entered
    by users. Thereafter, we will invoke the `mysql_query` function and pass the MySQL
    object `conn` and the SQL `INSERT` statements to it to execute the SQL statement
    and insert a new row into the `users` table.'
  prefs: []
  type: TYPE_NORMAL
- en: If any error occurs while executing the `mysql_query` function, an error message
    will be displayed on the screen and the program will terminate. If the new row
    is successfully inserted into the `users` table, the message `Row is inserted
    successfully in users table` will be displayed on the screen. Finally, we will
    invoke the `mysql_close` function and pass the connection handler `conn` to it
    to close the connection handler.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s open the Cygwin Terminal. We will require two Terminal windows; on one
    window, we will run SQL commands and on the other, we will compile and run C.
    Open another Terminal window by pressing *Alt+F2*. In the first Terminal window,
    invoke the MySQL command line by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'To work with our `ecommerce` database, we need to make it the current database.
    So, open the `ecommerce` database by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, `ecommerce` is our current database; that is, whatever SQL commands we
    will execute will be applied to the `ecommerce` database only. Let''s use the
    following SQL `SELECT` command to see the existing rows in the `users` database
    table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'The given output confirms that the `users` table is currently empty. To compile
    the C program, switch to the second Terminal window. Let''s use GCC to compile
    the `adduser.c` program, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'If you get no errors or warnings, that means the `adduser.c` program has compiled
    into an executable file, `adduser.exe`. Let''s run this executable file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'The given C program output confirms that the new row has been successfully
    added to the `users` database table. To confirm this, switch to the Terminal window
    where the MySQL command line is open and use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '*Voila*! The given output confirms that the new row that was entered through
    C has been successfully inserted into the `users` database table.'
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's move on to the next recipe!
  prefs: []
  type: TYPE_NORMAL
- en: Searching for the desired information in the database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to search for information in a database table.
    Again, we assume that a `users` table comprising three columns, `email_address`,
    `password`, and `address_of_delivery`, already exists (please see the section,
    *Creating a MySQL database and tables*, of this chapter, where we created an `ecommerce`
    database and a `users` table in it). On entering an email address, the recipe
    will search the entire `users` database table for it, and if any row is found
    that matches the supplied email address, that user's password and address of delivery
    will be displayed on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Initialize a MYSQL object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Establish a connection to the MySQL server running at the specified host. Also,
    establish a connection to the `ecommerce` database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Enter the email address of the user whose details you want to search for:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an SQL `SELECT` statement that searches the row in the `users` table
    that matches the email address that was entered by the user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute the SQL `SELECT` statement. Terminate the program if the SQL query
    does not execute or some error occurs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'If the SQL query executes successfully then the row(s) that matches the specified
    email address are retrieved and assigned to a `resultset`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Use a `while` loop to extract one row at a time from the `resultset` and assign
    it to the array row:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'The information of the entire row is shown by displaying the subscripts `row[0]`,
    `row[1]`, and `row[2]`, respectively:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Memory that''s allocated to the `resultset` is freed up:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'The opened connection handler is closed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'The `searchuser.c` program for searching in a specific row in a MySQL database
    table is shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Now, let's go behind the scenes to understand the code better.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will start by invoking the `mysql_init` function to initialize a `MYSQL`
    object by the name `conn`. Thereafter, we will invoke the `mysql_real_connect`
    function and pass the `MYSQL` object `conn` to it along with the valid user ID,
    password, and the host details. The `mysql_real_connect` function will establish
    a connection to the MySQL server running at the specified host and will also connect
    to the supplied database, `ecommerce`. The `MYSQL` object `conn` will act as the
    connection handler for the rest of the program. Wherever a connection to the MySQL
    server and `ecommerce` database is required, referring to `conn` will suffice.
  prefs: []
  type: TYPE_NORMAL
- en: If any error occurs in establishing a connection to the MySQL database engine
    or the `ecommerce` database, an error message will be displayed and the program
    will terminate. If a connection to the MySQL database engine is established successfully,
    you will be prompted to enter the email address of the user whose details you
    want to search for.
  prefs: []
  type: TYPE_NORMAL
- en: We will create an SQL `SELECT` statement that will search the row in the `users`
    table that matches the email address entered by the user. Then, we will invoke
    the `mysql_query` function and pass the created SQL `SELECT` statement to it,
    along with the connection handler `conn`. If the SQL query does not execute or
    some error occurs, the program will terminate after displaying an error message.
    If the query is successful, then the resulting row(s) that satisfy the condition
    (that is, the row(s) that match the supplied email address) will be retrieved
    by invoking the `mysql_use_result` function and will be assigned to the result
    set, `resultset`.
  prefs: []
  type: TYPE_NORMAL
- en: We will then invoke the `mysql _fetch_row` function in a `while` loop that will
    extract one row at a time from the `resultset`; that is, the first row from the
    `resultset` will be accessed and assigned to the array row.
  prefs: []
  type: TYPE_NORMAL
- en: 'Recall that the `users` table contains the following columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '`email_address varchar(30)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`password varchar(30)   `'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`address_of_delivery text`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consequently, the array row will contain complete information of the accessed
    row, where the subscript `row[0]` will contain the data of the `email_ address` column,
    `row[1]` will contain the data of the column password, and `row[2]` will contain
    the data of the `address_of_delivery` column. The information of the entire row
    will be displayed by displaying the subscripts `row[0]`, `row[1]`, and `row[2]`,
    respectively.
  prefs: []
  type: TYPE_NORMAL
- en: At the end, we will invoke the `mysql_free_result` function to free up the memory
    that was allocated to the `resultset`. Then, we will invoke the `mysql_close`
    function to close the opened connection handler `conn`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s open the Cygwin Terminal. We will require two Terminal windows; on one
    window, we will run SQL commands and on the other, we will compile and run C.
    Open another Terminal window by pressing *Alt+F2*. In the first Terminal window,
    invoke the MySQL command line by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'To work with our `ecommerce` database, we need to make it the current database.
    So, open the `ecommerce` database by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, `ecommerce` is our current database; that is, whatever SQL commands we
    will execute will be applied to the `ecommerce` database only. Let''s use the
    following SQL `SELECT` command to see the existing rows in the `users` database
    table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: The given output shows that there are three rows in the `users` table.
  prefs: []
  type: TYPE_NORMAL
- en: 'To compile the C program, switch to the second Terminal window. Let''s use
    GCC to compile the `searchuser.c` program, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'If you get no errors or warnings, that means the `searchuser.c` program has
    compiled into an executable file, `searchuser.exe`. Let''s run this executable
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '*Voila*! We can see that complete information of the user with their email
    address, [bmharwani@yahoo.com](mailto:bmharwani@yahoo.com), is displayed on the
    screen.'
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's move on to the next recipe!
  prefs: []
  type: TYPE_NORMAL
- en: Updating information in the database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to update information in a database table.
    We assume that a `users` database table already exists, comprising of three columns—`email_address`,
    `password`, and `address_of_delivery` (please see the beginning of this chapter,
    where we learned to create a database and a table in it). On entering an email
    address, all the current information of the user (that is, their password and
    address of delivery) will be displayed. Thereafter, the user will be prompted
    to enter a new password and address of delivery. This new information will be
    updated against the current information in the table.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Initialize a `MYSQL` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Establish a connection to the MySQL server running at the specified host. Also,
    generate a connection handler. The program will terminate if some error occurs
    in establishing the connection to the MySQL server engine or to the `ecommerce`
    database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Enter the email address of the user whose information has to be updated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an SQL `SELECT` statement that will search the row in the `users` table
    that matches the email address that was entered by the user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute the SQL `SELECT` statement. The program will terminate if the SQL query
    does not execute successfully or some other error occurs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'If the SQL query executes successfully, then the row(s) that match the supplied
    email address will be retrieved and assigned to the `resultset`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Check if there is at least one row in the `resultset`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'If there is no row in the `resultset`, then display the message that no row
    was found in the `users` table with the specified email address and exit from
    the program:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'If there is any row in the `resultset`, then access it and assign it to the
    array row:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Information about the user (that is, the email address, password, and address
    of delivery, which are assigned to the subscripts `row[0]`, `row[1]`, and `row[2]`,
    respectively) are displayed on the screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'The memory allocated to the `resultset` is freed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Enter the new updated information of the user; that is, the new password and
    the new address of delivery:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'An SQL `UPDATE` statement is prepared that contains the information of the
    newly entered password and address of delivery:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute the SQL `UPDATE` statement. If any error occurs in executing the SQL
    `UPDATE` query, the program will terminate:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'If the SQL `UPDATE` statement executes successfully, display a message on the
    screen informing that the user''s information has been updated successfully:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'Close the opened connection handler:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'The `updateuser.c` program for updating a specific row of a MySQL database
    table with new content is shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: Now, let's go behind the scenes to understand the code better.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this program, we first ask the user to enter the email address they want
    to update. Then, we search the `users` table to see if there is any row with the
    matching email address. If we find it, we display the current information of the
    user; that is, the current email address, password, and address of delivery. Thereafter,
    we ask the user to enter a new password and new address of delivery. The new password
    and address of deliver will replace the old password and address of delivery,
    thereby updating the `users` table.
  prefs: []
  type: TYPE_NORMAL
- en: We will start by invoking the `mysql_init` function to initialize a `MYSQL`
    object by the name `conn`. Then, we will pass the `MYSQL` object `conn` to the `mysql_real_connect`
    function that we invoked to establish a connection to the  MySQL server running
    at the specified host. Several other parameters will also be passed to the `mysql_real_connection`
    function, including a valid user ID, password, host details, and the database
    with which we want to work. The `mysql_real_connect` function will establish the
    connection to the  MySQL server running at the specified host and will declare
    the `MYSQL` object `conn` as the connection handler. This means that `conn` can
    connect to the `MySQL` server and the `ecommerce` database wherever it is used.
  prefs: []
  type: TYPE_NORMAL
- en: The program will terminate after displaying an error message if some error occurs
    while establishing the connection to the MySQL server engine or to the `ecommerce`
    database. If the connection to the MySQL database engine is established successfully,
    you will be prompted to enter the email address of the user whose record you want
    to update.
  prefs: []
  type: TYPE_NORMAL
- en: As we mentioned earlier, we will first display the current information of the
    user. So, we will create an SQL `SELECT` statement and we will search the row
    in the `users` table that matches the email address that's entered by the user.
    Then, we will invoke the `mysql_query` function and pass the created SQL `SELECT`
    statement to it, along with the connection handler `conn`.
  prefs: []
  type: TYPE_NORMAL
- en: Again, the program will terminate after displaying an error message if the SQL
    query does not execute successfully or some other error occurs. If the query executes
    successfully, then the resulting row(s) (that is, the row(s) that match the supplied
    email address), will be retrieved by invoking the `mysql_use_result` function
    and will be assigned to the `resultset`.
  prefs: []
  type: TYPE_NORMAL
- en: We will then invoke the `mysql_num_rows` function to ensure that there is at
    least one row in the `resultset`. If there is no row in the `resultset`, this
    means that no row was found in the `users` table that matches the given email
    address. In this case, the program will terminate after informing that no row
    was found in the `users` table with the given email address. If there is even
    a single row in the `resultset`, we will invoke the `mysql _fetch_row` function
    on the `resultset`, which will extract one row from the `resultset` and assign
    it to the array row.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `users` table contains the following three columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '`email_address varchar(30)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`password varchar(30)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`address_of_delivery text`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The array row will contain the information of the accessed row, where the subscripts
    `row[0]`, `row[1]`, and `row[2]` will contain the data of the columns `email_
    address`, `password`, and `address_of_delivery`, respectively. The current information
    of the user is displayed by displaying the information assigned to the aforementioned
    subscripts. Then, we will invoke the `mysql_free_result` function to free up the
    memory that is allocated to the `resultset`.
  prefs: []
  type: TYPE_NORMAL
- en: At this stage, the user will be asked to enter the new password and the new
    address of delivery. We will prepare an SQL `UPDATE` statement that contains the
    information of the newly entered password and address of delivery. The `mysql_query`
    function will be invoked and the SQL `UPDATE` statement will be passed to it,
    along with the connection handler `conn`.
  prefs: []
  type: TYPE_NORMAL
- en: If any error occurs in executing the SQL `UPDATE` query, again, an error message
    will be displayed and the program will terminate. If the SQL `UPDATE` statement
    executes successfully, a message informing that the user's information has been
    updated successfully will be displayed. Finally, we will invoke the `mysql_close`
    function to close the opened connection handler `conn`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s open the Cygwin Terminal. We will require two Terminal windows; on one
    window, we will run SQL commands and on the other, we will compile and run C.
    Open another Terminal window by pressing *Alt+F2*. In the first Terminal window,
    invoke the MySQL command line by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'To work with our `ecommerce` database, we need to make it the current database.
    So, open the `ecommerce` database by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, `ecommerce` is our current database; that is, whatever SQL commands we
    will execute will be applied to the `ecommerce` database only. Let''s use the
    following SQL `SELECT` command to see the existing rows in the `users` database
    table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see from the preceding output that there are three rows in the `users`
    table. To compile the C program, switch to the second Terminal window. Let''s
    use GCC to compile the `updateuser.c` program, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'If you get no errors or warnings, that means the `updateuser.c` program has
    compiled into an executable file, `updateuser.exe`. Let''s run this executable
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s run the program again and enter an email address that already exists:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'So, we have updated the row of the user with the email address, [bmharwani@yahoo.com](mailto:bmharwani@yahoo.com).
    To confirm that the row has been updated in the `users` database table too, switch
    to the Terminal window where the MySQL command line is running and issue the following
    SQL `SELECT` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: '*Voila*! We can see that the row of the `users` table with the email address `bmharwani@yahoo.com` has
    been updated and is showing the new information.'
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's move on to the next recipe!
  prefs: []
  type: TYPE_NORMAL
- en: Deleting data from the database using C
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to delete information from a database table.
    We assume that a `users` table comprising three columns, `email_address`, `password`, and `address_of_delivery`,
    already exists (please see the beginning of this chapter, where we created an `ecommerce` database
    and a `users` table in it). You will be prompted to enter the email address of
    the user whose row has to be deleted. On entering an email address, all the information
    of the user will be displayed. Thereafter, you will again be asked to confirm
    if the displayed row should be deleted or not. After your confirmation, the row
    will be permanently deleted from the table.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Initialize a `MYSQL` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'Establish a connection to the MySQL server running at the specified host. Also,
    generate a connection handler. If any error occurs in establishing a connection
    to the MySQL server engine, the program will terminate:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'If the connection to the MySQL database engine is established successfully,
    you will be prompted to enter the email address of the user whose record you want
    to delete:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an SQL `SELECT` statement that will search the row from the `users`
    table that matches the email address that''s entered by the user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute the SQL `SELECT` statement. The program will terminate after displaying
    an error message if the SQL query does not execute successfully:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'If the query executes successfully, then the resulting row(s) that match the
    supplied email address will be retrieved and assigned to the `resultset`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'Invoke the `mysql_num_rows` function to ensure that there is at least one row
    in the `resultset`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'If there is no row in the `resultset`, that means no row was found in the `users`
    table that matches the given email address; hence, the program will terminate:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'If there is any row in the result set, that row is extracted from the `resultset`
    and will be assigned to the array row:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'The information of the user is displayed by displaying the corresponding subscripts
    in the array row:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: 'The memory that''s allocated to the `resultset` is freed up:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'If the user enters `yes`, an SQL `DELETE` statement will be created that will
    delete the row from the `users` table that matches the specified email address:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 'The SQL `DELETE` statement is executed. If there are any error occurs in executing
    the SQL `DELETE` query, the program will terminate:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: 'If the SQL `DELETE` statement is executed successfully, a message informing
    that the user account with the specified email address is deleted successfully
    is displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: 'The opened connection handler is closed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: 'The `deleteuser.c` program for deleting a specific row from a MySQL database
    table is shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: Now, let's go behind the scenes to understand the code better.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will start by invoking the `mysql_init` function to initialize a `MYSQL`
    object by the name `conn`. We will then pass the `MYSQL` object `conn` to the `mysql_real_connect`
    function that we invoked to establish a connection to the  MySQL server running
    at the specified host. Several other parameters will also be passed to the `mysql_real_connection`
    function, including a valid user ID, password, host details, and the database
    with which we want to work. The `mysql_real_connect` function will establish a
    connection to the  MySQL server running at the specified host and will declare
    a `MYSQL` object `conn` as the connection handler. This means thar `conn` can
    connect to the MySQL server and the commerce database wherever it is used.
  prefs: []
  type: TYPE_NORMAL
- en: The program will terminate after displaying an error message if some error occurs
    while establishing a connection to the MySQL server engine or to the `ecommerce`
    database. If the connection to the MySQL database engine is established successfully,
    you will be prompted to enter the email address of the user whose record you want
    to delete.
  prefs: []
  type: TYPE_NORMAL
- en: We will first display the information of the user and thereafter will seek permission
    from the user as to whether they really want to delete that row or not. So, we
    will create an SQL `SELECT` statement that will search the row from the `users`
    table that matches the email address that was entered by the user. Then, we will
    invoke the `mysql_query` function and pass the created SQL `SELECT` statement
    to it, along with the connection handler `conn`.
  prefs: []
  type: TYPE_NORMAL
- en: Again, the program will terminate after displaying an error message if the SQL
    query does not execute successfully or some other error occurs. If the query executes
    successfully, then the resulting row(s) (that is, the row(s) that match the supplied
    email address) will be retrieved by invoking the `mysql_use_result` function and
    will be assigned to the `resultset`.
  prefs: []
  type: TYPE_NORMAL
- en: We will invoke the `mysql_num_rows` function to ensure that there is at least
    one row in the `resultset`. If there is no row in the `resultset`, that means
    no row was found in the `users` table that matches the given email address. In
    that case, the program will terminate after informing that no row was found in
    the `users` table with the given email address. If there is even a single row
    in the `resultset`, we will invoke the `mysql _fetch_row` function on the `resultset`,
    which will extract one row from the `resultset` and assign it to the array row.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `users` table contains the following three columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '`email_address varchar(30)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`password varchar(30)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`address_of_delivery text`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The array row will contain information of the accessed row, where the subscripts
    `row[0]`, `row[1]`, and `row[2]` will contain the data of the columns `email_
    address`, `password`, and `address_of_delivery`, respectively. The current information
    of the user will be displayed by displaying the current email address, password,
    and address of delivery that's assigned to the subscripts `row[0]`, `row[1]`,
    and `row[2]`. Then, we will invoke the `mysql_free_result` function to free up
    the memory that is allocated to the `resultset`.
  prefs: []
  type: TYPE_NORMAL
- en: At this stage, the user will be asked to confirm whether they really want to
    delete the shown record. The user is supposed to enter `yes`, all in lowercase,
    to delete the record. If the user enters `yes`, an SQL `DELETE` statement will
    be created that will delete the row from the `users` table that matches the specified
    email address. The `mysql_query` function will be invoked and the SQL `DELETE`
    statement will be passed to it, along with the connection handler `conn`.
  prefs: []
  type: TYPE_NORMAL
- en: If any error occurs in executing the SQL `DELETE` query, again an error message
    will be displayed and the program will terminate. If the SQL `DELETE` statement
    executes successfully, a message informing that the user account with the specified
    mail address has been deleted successfully is displayed. Finally, we will invoke
    the `mysql_close` function to close the opened connection handler `conn`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s open the Cygwin Terminal. We will require two Terminal windows; on one
    window, we will run MySQL commands and on the other, we will compile and run C.
    Open another Terminal window by pressing *Alt+F2*. In the first Terminal window,
    invoke the MySQL command line by giving the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: 'To work with our `ecommerce` database, we need to make it the current database.
    So, open the `ecommerce` database by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, `ecommerce` is our current database; that is, whatever SQL commands we
    will execute will be applied to the `ecommerce` database only. Let''s use the
    following SQL `SELECT` command to see the existing rows in the `users` database
    table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: 'From the preceding output, we can see that there are three rows in the `users`
    table. To compile the C program, switch to the second Terminal window. Let''s
    use GCC to compile the `deleteuser.c` program, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: 'If you get no errors or warnings, that means the `deleteuser.c` program has
    compiled into an executable file, `deleteuser.exe`. Let''s run this executable
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s run the program again with a valid email address:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: 'So, the row of the user with the email address `bmharwani@yahoo.com` will be
    deleted from the `users` table. To confirm that the row has been deleted from
    the `users` database table too, switch to the Terminal window where the MySQL
    command line is running and issue the following SQL `SELECT` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: '*Voila*! We can see that now there are only two rows left in the `users` table,
    confirming that one row has been deleted from the `users` table.'
  prefs: []
  type: TYPE_NORMAL
