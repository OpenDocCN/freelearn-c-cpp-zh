- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Programs regularly have to allocate and manage memory, no matter what programming
    language they are written in. Why and how we do this depends on the language and
    the application domain, however: real-time systems, embedded systems, games, and
    conventional desktop applications all have different needs and constraints, and
    there is no single, universal best approach to all problems.'
  prefs: []
  type: TYPE_NORMAL
- en: This book shows how modern C++ lets programmers write simpler and safer programs,
    but also how that language makes it possible to take control of memory allocation
    mechanisms and make sure programs respect the constraints they face. Starting
    from the language’s basic concepts of objects’ lifetimes and memory organization,
    you will learn how to write your own containers and your own allocators, and to
    adapt the very behavior of allocation operators to suit your needs. Depending
    on your needs, you will be able to make programs that are smaller, faster, more
    predictable... and safer.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is written for individuals who have some programming experience and
    who enjoy both high-level and low-level programming. Having prior experience with
    generic programming and concurrent programming will lead to a more pleasant reading
    experience.
  prefs: []
  type: TYPE_NORMAL
- en: More specifically, this book is written for you if (a) you think managing memory
    in C++ is difficult but are willing to take a fresh look at it, (b) you want better
    control over the way your programs manage memory, or (c) you want your programs
    to be smaller, faster, and safer. You might benefit from this book if you come
    from a C++ background, of course, but also if you normally program in other languages
    and would like to look at what C++ allows you to do. This book will be helpful
    to any programmer, but you might find it particularly useful if you program in
    constrained environments (such as embedded systems or game consoles) or in other
    application domains where you need tight control over resource allocation mechanisms.
    Who knows, you might even enjoy it!
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*Chapter 1*](B21071_01.xhtml#_idTextAnchor016), *Objects, Pointers, and References*,
    discusses the basic concepts of the object model in the C++ language, providing
    us with a common basic vocabulary.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 2*](B21071_02.xhtml#_idTextAnchor027), *Things to Be Careful With*,
    looks at some of the tricky aspects of C++, with a more specific examination of
    low-level programming maneuvers that can lead us into trouble; we will examine
    what kind of trouble these can lead us to.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 3*](B21071_03.xhtml#_idTextAnchor047), *Casts and cv-qualifications*,
    examines the tools at our disposal to coerce the type system to our needs and
    discusses how to use these sometimes sharp tools in reasonable ways.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B21071_04.xhtml#_idTextAnchor062), *Using Destructors*, looks
    at this important aspect of C++ that makes it possible to write objects that are
    responsible for the management of resources in general and of memory in particular.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B21071_05.xhtml#_idTextAnchor079), *Using Standard Smart Pointers*,
    provides a look at how we can benefit from this important part of contemporary
    C++ programming, which inscribes responsibility over memory into the type system.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B21071_06.xhtml#_idTextAnchor096), *Writing Smart Pointers*,
    looks at ways in which we write homemade versions of the standard smart pointers
    as well as how we can design our own smart pointers to cover niches that are not
    yet covered by those provided by the standard library.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B21071_07.xhtml#_idTextAnchor116), *Overloading Memory Allocation
    Operators*, shows some of the many ways in which we can provide our own versions
    of memory allocation operators and explains why it can be a good idea to do so.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B21071_08.xhtml#_idTextAnchor128), *Writing a Naïve Leak Detector*,
    puts our new memory management skills to use to write a working (if simple) tool
    to detect memory leaks in a way that is essentially transparent to user code.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B21071_09.xhtml#_idTextAnchor141), *Atypical Allocation Mechanisms*,
    takes a tour of some unusual applications (and overloads) of the standard memory
    allocation operators, including non-throwing versions and others that handle “exotic”
    memory.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 10*](B21071_10.xhtml#_idTextAnchor153), *Arena-Based Memory Management
    and Other Optimizations*, uses our memory management skills to make programs execute
    more quickly and behave more deterministically, benefitting from domain-specific
    or application-specific knowledge.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 11*](B21071_11.xhtml#_idTextAnchor163), *Deferred Reclamation*, explores
    ways in which we can write programs that automatically reclaim dynamically allocated
    objects at chosen moments during program execution.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 12*](B21071_12.xhtml#_idTextAnchor172), *Writing Generic Containers
    with Explicit Memory Management*, explains how to write two efficient generic
    containers that manage memory themselves and discusses exception-safety and complexity
    tradeoffs of this practice.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 13*](B21071_13.xhtml#_idTextAnchor187), *Writing Generic Containers
    with Implicit Memory Management*, revisits the containers written in the previous
    chapter to see the impacts of moving from an explicit memory management approach
    to an implicit one that relies on smart pointers.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 14*](B21071_14.xhtml#_idTextAnchor199), *Writing Generic Containers
    with Allocator Support*, revisits our homemade containers to see how memory management
    can be customized through allocators, covering allocators from before C++11 to
    contemporary allocators, as well as PMR allocators.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 15*](B21071_15.xhtml#_idTextAnchor213), *Contemporary Issues*, looks
    toward the near future and examines some recent (as of the book’s writing) features
    of C++ that pertain to memory management as well as some interesting candidate
    additions to the language in C++26 and C++29.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Annexure*](B21071_16.xhtml#_idTextAnchor221)*: Things You Should Know*, provides
    some technical background that can help you get the most out of this book but
    that might not be common knowledge. Refer to it as needed, it’s there for you!'
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*You will need a contemporary C++ compiler, ideally one that supports at least
    C++20 and ideally C++23\. This book does not require other tools, but you are
    of course welcome to use your favorite code editor and experiment with the examples
    you will meet as* *you progress.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Care was taken to keep to standard C++ from a portable and safe perspective.
    The few places where you will meet examples that use non-portable code are identified*
    *as such.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Code examples have been tested on three distinct compilers and the samples
    on the book’s GitHub repository all contain, in addition to the actual source
    code, links to online versions (in comments) that compile and that you can modify
    and adapt as* *you wish.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are using the digital version of this book, we advise you to type
    the code yourself or access the code from the book’s GitHub repository (a link
    is available in the next section). Doing so will help you avoid any potential
    errors related to the copying and pasting** **of code.**'
  prefs: []
  type: TYPE_NORMAL
- en: '*I hope you enjoy the experience and find the examples to be an interesting
    starting point for your* *own explorations.*'
  prefs: []
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download the example code files for this book from GitHub at [https://github.com/PacktPublishing/C-Plus-Plus-Memory-Management](https://github.com/PacktPublishing/C-Plus-Plus-Memory-Management).
    If there’s an update to the code, it will be updated in the GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: We also have other code bundles from our rich catalog of books and videos available
    at [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/).
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`Code in text`: Indicates code words in text, database table names, folder
    names, filenames, file extensions, pathnames, dummy URLs, user input, and Twitter
    handles. Here is an example: “The whole body of `f()` could legitimately be rewritten
    by your compiler as `return g(*p)` in this case, with the `return *p` statement
    being turned into unreachable code.”'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Tips or important notes
  prefs: []
  type: TYPE_NORMAL
- en: Appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Get in touch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome.
  prefs: []
  type: TYPE_NORMAL
- en: '**General feedback**: If you have questions about any aspect of this book,
    email us at [customercare@packtpub.com](mailto:customercare@packtpub.com) and
    mention the book title in the subject of your message.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Errata**: Although we have taken every care to ensure the accuracy of our
    content, mistakes do happen. If you have found a mistake in this book, we would
    be grateful if you would report this to us. Please visit [www.packtpub.com/support/errata](http://www.packtpub.com/support/errata)
    and fill in the form.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Piracy**: If you come across any illegal copies of our works in any form
    on the internet, we would be grateful if you would provide us with the location
    address or website name. Please contact us at [copyright@packt.com](mailto:copyright@packt.com)
    with a link to the material.'
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are interested in becoming an author**: If there is a topic that you
    have expertise in and you are interested in either writing or contributing to
    a book, please visit [authors.packtpub.com](http://authors.packtpub.com).'
  prefs: []
  type: TYPE_NORMAL
- en: Share Your Thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you’ve read *C++ Memory Management*, we’d love to hear your thoughts! Please
    [click here to go straight to the Amazon review page](https://packt.link/r/1805129805)
    for this book and share your feedback.
  prefs: []
  type: TYPE_NORMAL
- en: Your review is important to us and the tech community and will help us make
    sure we’re delivering excellent quality content.
  prefs: []
  type: TYPE_NORMAL
- en: Download a free PDF copy of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thanks for purchasing this book!
  prefs: []
  type: TYPE_NORMAL
- en: Do you like to read on the go but are unable to carry your print books everywhere?
  prefs: []
  type: TYPE_NORMAL
- en: Is your eBook purchase not compatible with the device of your choice?
  prefs: []
  type: TYPE_NORMAL
- en: Don’t worry, now with every Packt book you get a DRM-free PDF version of that
    book at no cost.
  prefs: []
  type: TYPE_NORMAL
- en: Read anywhere, any place, on any device. Search, copy, and paste code from your
    favorite technical books directly into your application.
  prefs: []
  type: TYPE_NORMAL
- en: The perks don’t stop there, you can get exclusive access to discounts, newsletters,
    and great free content in your inbox daily
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these simple steps to get the benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: Scan the QR code or visit the link below
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B21071_QR_Free_PDF.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[https://packt.link/free-ebook/978-1-80512-980-6](https://packt.link/free-ebook/978-1-80512-980-6)'
  prefs: []
  type: TYPE_NORMAL
- en: Submit your proof of purchase
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That’s it! We’ll send your free PDF and other benefits to your email directly
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Part 1: Memory in C++'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this part, we will develop a common vocabulary on some key aspects of the
    object model in C++. This includes a discussion of ideas such as what an object
    is, what a reference is, and how C++ represents memory; a look at some of the
    risky or delicate maneuvers we sometimes need to do when writing low-level code
    (and the consequences that stem from doing them inappropriately); and how to coerce
    the type system to our needs in ways that do not come back to harm us. The knowledge
    gathered in this part will serve as a basis from which later chapters will be
    built.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part has the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 1*](B21071_01.xhtml#_idTextAnchor016), *Objects, Pointers, and References*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 2*](B21071_02.xhtml#_idTextAnchor027), *Things to Be Careful with*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 3*](B21071_03.xhtml#_idTextAnchor047), *Casts and cv-qualifications*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
