- en: '*Chapter 14*: COVID-19 20-Second Hand Washing Timer'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter describes a useful project where you will make a touchless timer
    by waving at an ultrasonic sensor. This timer will count the minimum time of 20
    seconds recommended by health authorities for properly washing our hands for preventing
    contamination from viruses such as SARS-CoV-2 that produces COVID-19 symptoms.
    The project involves an inexpensive ultrasonic sensor that detects when a user
    waves at the sensor by measuring the distance between the user and the circuit,
    triggering the counting. This application must be enclosed in a waterproof container
    to avoid soaking the circuit while the user washes their hands and damaging it.
    We explain at the end of the chapter how to do this.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Programming the counter (timer)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Showing the timer on an LCD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting an ultrasonic sensor to the microcontroller board
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Putting everything together – think of a protective case for the project!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing the timer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will have learned how to properly connect an
    ultrasonic sensor and an LCD to a microcontroller board. In addition, you will
    learn how to read input values from a sensor to activate the 20-second counting.
    You will also learn how to code an efficient and effective timer that runs on
    a microcontroller board.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The software tool that you will be using in this chapter is the Arduino IDE
    for editing and uploading your programs to the Blue Pill microcontroller board.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code used in this chapter can be found in the book''s GitHub repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/DIY-Microcontroller-Projects-for-Hobbyists/tree/master/Chapter14](https://github.com/PacktPublishing/DIY-Microcontroller-Projects-for-Hobbyists/tree/master/Chapter14)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Code in Action video for this chapter can be found here: [https://bit.ly/3gQZdPf](https://bit.ly/3gQZdPf)'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will use the following pieces of hardware:'
  prefs: []
  type: TYPE_NORMAL
- en: One solderless breadboard.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One Blue Pill microcontroller board.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One micro-USB cable for connecting your microcontroller board to a computer
    and a power bank.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One USB power bank.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One ST-INK/V2 electronic interface, needed for uploading the compiled code to
    the Blue Pill. Bear in mind that the ST-LINK/V2 requires four female-to-female
    DuPont wires.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One HC-SR04 ultrasonic sensor.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One 1602 16x2 LCD.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One 2.2k ohm resistor, 1/4 watt. This is for the LCD.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A dozen male-to-male and a dozen male-to-female DuPont wires.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The next section explains how to code the 20-second timer that runs on the Blue
    Pill microcontroller board.
  prefs: []
  type: TYPE_NORMAL
- en: Programming the counter (timer)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section shows you how to code the 20-second timer. Programming a timer
    like this one is not trivial, since a user could activate the timer many times
    by waving at the ultrasonic sensor more than once while the counter is on. The
    program should not take into account those multiple activations if the 20-second
    counting is going on; otherwise, the counter will re-start multiple times and
    the counting will not be accurate. We also need to consider saving energy by turning
    off the LCD when not in use.
  prefs: []
  type: TYPE_NORMAL
- en: 'We should code our 20-second timer application by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Read values from the ultrasonic sensor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Check whether the user is waving at the sensor within 15 centimeters of the
    sensor. If this happens, do this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a) Turn on the LCD light.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) Show the **Lather hands** message and show the 20-second counting on the
    LCD.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'c) When the counter finishes, show this message on the LCD: **Rinse your hands**.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d) Wait for 4 seconds and then turn off the LCD to conserve energy.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: e) Return to *step 1*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The following is the Arduino IDE code that runs on the Blue Pill, programmed
    following the preceding steps. The following code snippet shows how the variables
    and constants are defined. The HC-SR04''s echo digital value is obtained from
    port `A9` (labeled `PA9`) and stored in the `echo` variable. Similarly, the trigger
    value is sent to the ultrasonic sensor through port `A8` (`PA8`) and stored in
    the `trigger` variable. Please note that the `dist_read` variable stores the distance
    between an object (for example, a waving hand) and the ultrasonic sensor, measured
    in centimeters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: As you can see from the preceding code, it uses a library called `elapsedMillis.h`
    to calculate the time in milliseconds that has elapsed on the counting. This library
    can also be obtained from [https://www.arduino.cc/reference/en/libraries/elapsedmillis/](https://www.arduino.cc/reference/en/libraries/elapsedmillis/).
    You can find this library in the code folder uploaded to the book's GitHub repository.
    It is useful because by using this library we avoid using the `delay()` function
    in the 20-second counting. If we use the `delay()` function, the Blue Pill's counting
    and reading sensor values from the ports could mess up. Note that the library
    is written between double quotes because in C++ this means that the library is
    in the same folder as the source code, which is a library that does not belong
    to the original Arduino IDE installation. The code also uses the `LiquidCrystal.h`
    library, used for controlling the 1602 LCD. This library already comes with the
    standard Arduino IDE installation so there is no need for installing it separately.
  prefs: []
  type: TYPE_NORMAL
- en: 'This code snippet sets up the LCD and the Blue Pill ports:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code segment shows the code''s main loop, which reads the ultrasonic
    sensor values and calculates the distance between the user''s waving hand and
    the sensor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code segment from the main loop function calculates whether the
    distance between the user and the sensor is equal to or less than 15 centimeters,
    then activates the 20-second counter and shows it on the LCD:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also run the previous code on Arduino microcontroller boards. You just
    need to change the port numbers used for the LCD and sensor connections. For example,
    if you are using an Arduino Uno board, change this line to `const int rs=12,en=11,d4=5,d5=4,d6=3,d7=2;`
    using Arduino board digital ports `12`, `11`, `5`, `4`, `3`, and `2`, respectively.
    You will also need to change these lines to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`#define backLight 6`'
  prefs: []
  type: TYPE_NORMAL
- en: '`#define trigger 7`'
  prefs: []
  type: TYPE_NORMAL
- en: '`#define echo 8`'
  prefs: []
  type: TYPE_NORMAL
- en: So, you will use Arduino digital ports 6, 7 and 8 for the ultrasonic sensor.
  prefs: []
  type: TYPE_NORMAL
- en: Bear in mind that the code uploaded to the GitHub repository contains many comments
    explaining its most important parts.
  prefs: []
  type: TYPE_NORMAL
- en: The next section explains how to connect the 1602 LCD to the Blue Pill to show
    the 20-second count on it.
  prefs: []
  type: TYPE_NORMAL
- en: Showing the timer on an LCD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we explain how to connect and use the 1602 LCD to show the
    timer on it. *Figure 14.1* shows the Fritzing diagram similar to the one explained
    in [*Chapter 5*](B16413_05_Final_NM_ePub.xhtml#_idTextAnchor069), *Humidity and
    Temperature Measurement*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.1 – The LCD connected to the Blue Pill microcontroller board](img/Figure_14.1_B16413.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.1 – The LCD connected to the Blue Pill microcontroller board
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the steps for connecting the LCD to the Blue Pill, following
    the diagram from *Figure 14.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: Connect the Blue Pill's **GND** (also labeled as **G**) pins to the solderless
    breadboard rails.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the Blue Pill's **5V** pin (providing 5 volts) to the breadboard rails.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the USB cable to the Blue Pill and then to your computer or a USB power
    bank.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Insert the LCD's 16 pins into the solderless breadboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the LCD's **VSS** pin to ground (the lower breadboard rail).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the LCD's **VDD** pin to 5 volts (the lower breadboard rail).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the 2.2k ohm resistor to the LCD's **V0** pin and to ground (the lower
    breadboard rail).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the LCD's **RS** pin to the Blue Pill's **B11** pin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the LCD's **RW** pin to ground (lower breadboard rail).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the LCD's **E** pin to the Blue Pill's **B10** pin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the LCD's **D4** pin to the Blue Pill's **B0** pin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the LCD's **D5** pin to the Blue Pill's **A7** pin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the LCD's **D6** pin to the Blue Pill's **A6** pin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the LCD's **D7** pin to the Blue Pill's **A5** pin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the LCD's **A** pin to the Blue Pill's port **B12**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the LCD's **K** pin to ground (lower breadboard rail).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The LCD's **D0**, **D1**, **D2**, and **D3** pins are not connected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After doing the preceding steps, you have accomplished connecting the LCD to
    the Blue Pill board. The LCD will be useful for showing the 20-second count. Well
    done!
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 14.2* shows how everything is connected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.2 – The Blue Pill microcontroller board connected to the LCD ](img/Figure_14.2_B16413.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.2 – The Blue Pill microcontroller board connected to the LCD
  prefs: []
  type: TYPE_NORMAL
- en: As you can see from *Figure 14.2*, the 1602A LCD is easy to connect to the Blue
    Pill. The 2.2k ohm connected to the LCD's pin **V0** sets up the LCD's contrast.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: You can use a 50k ohm variable resistor (also known as a **potentiometer**)
    instead of the 2.2k ohm resistor connected to the LCD's pin **V0** to adjust the
    display contrast. Just connect the potentiometer's middle pin to **V0**, one pin
    to ground, and the other pin to **5V**.
  prefs: []
  type: TYPE_NORMAL
- en: Please note that the LCD pin **A** (pin no. 15) is connected to the Blue Pill's
    **B12** port, which controls the LCD by turning its back light on or off via coding.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Allow enough space on the solderless breadboard between the Blue Pill and the
    rest of the electronic components (LCD, ultrasonic sensor, and so on) to facilitate
    the connection of the ST-Link/V2 interface to the Blue Pill.
  prefs: []
  type: TYPE_NORMAL
- en: The next section explains how to use the ultrasonic sensor to see whether a
    user is waving at the sensor to trigger the 20-second timer.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting an ultrasonic sensor to the microcontroller board
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section explains how an ultrasonic sensor works, and it describes how to
    connect the HC-SR04 sensor to the Blue Pill microcontroller board, describing
    how to use its four-pin functions. The ultrasonic sensor will be used to check
    whether the user waves at it to initiate the 20-second counting.
  prefs: []
  type: TYPE_NORMAL
- en: What is an ultrasonic sensor?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ultrasonic waves are sound waves that have a frequency that is higher than the
    frequencies that most human beings can hear, which is above 20,000 Hz. Ultrasonic
    sounds, or ultrasound, can have different applications, including something called
    **echolocation**, used by animals such as bats for identifying how far their prey
    is using reflected sounds. The same principle is applied in ultrasonic sensors.
  prefs: []
  type: TYPE_NORMAL
- en: An **ultrasonic sensor** is a dedicated electronic component that generally
    contains a number of electronic parts such as resistors, transistors, diodes,
    a crystal clock, a special microphone, and a speaker. Many ultrasonic sensors
    are technically modules, because they integrate a number of electronic parts,
    and this integration as a module facilitates the connection with other devices
    such as microcontroller boards. An ultrasonic sensor measures the distance between
    an object (for example, a waving hand) and the sensor by using ultrasonic sound
    waves. The sensor emits ultrasonic sound waves through a speaker and receives
    through a microphone the reflected ultrasonic waves that hit the object. The sensor
    measures the time it takes between the sound wave emission and reception.
  prefs: []
  type: TYPE_NORMAL
- en: How does an ultrasonic sensor work?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An ultrasonic sensor (such as the **HC-SR04**) emits and receives ultrasonic
    sound waves (working like **sonar**) to determine the distance to an object. Sonar
    is an echolocation device used for detecting objects underwater, emitting sound
    pulses (generally using ultrasound frequencies), measuring the time it takes for
    the reflection of those pulses, and calculating the distance between the object
    and the sonar device. The ultrasonic sensor used in this chapter is not meant
    to be used underwater, as we can see later.
  prefs: []
  type: TYPE_NORMAL
- en: Some ultrasonic sensors (such as the HC-SR04 used in this chapter) use sound
    waves with a frequency of 40 kHz, well above the range of sound frequencies that
    the human ear can perceive on average, which is 20 Hz to 20 kHz.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is how the HC-SR04 ultrasonic sensor works:'
  prefs: []
  type: TYPE_NORMAL
- en: A microcontroller board sends a digital signal to the sensor's `Trig` pin, triggering
    (initiating) the ultrasonic wave emission through the sensor's speaker.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When a high-frequency sound wave hits an object, it is reflected back to the
    sensor and this reflection is picked up by the sensor's microphone.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The sensor sends out a digital signal to the microcontroller board through its
    `Echo` pin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A microcontroller board receives that digital signal from the `Echo` pin, encoding
    the duration between the sound wave emission and reception.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The distance between the sensor and the object is calculated as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: D=(T*C) ⁄ 2
  prefs: []
  type: TYPE_NORMAL
- en: 'The symbols denote the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**D**: Distance'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**T**: Time it takes between ultrasonic wave emission and reception (duration)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**C**: General speed of sound (343 m/s in dry air)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The distance is divided by 2 because we need just the sound wave's return distance.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 14.3* shows a Fritzing diagram of the ultrasonic sensor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.3 – The HC-SR04 ultrasonic sensor pinout](img/Figure_14.3_B16413.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.3 – The HC-SR04 ultrasonic sensor pinout
  prefs: []
  type: TYPE_NORMAL
- en: From *Figure 14.3*, you can see the sensor pinout. The **VCC** pin is connected
    to a 5-volt power supply. The **Trig** and **Echo** pins are connected to the
    microcontroller board's digital ports. The **GND** pin is connected to ground.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the technical characteristics of the HC-SR04 sensor:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Operating voltage**: DC 5 volts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Operating frequency**: 40 kHz'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Operating current**: 15 mA'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Maximum operational range**: 4 meters'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Minimum operational range**: 2 centimeters'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Resolution**: 0.3 centimeters'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Measuring angle**: 30 degrees (sensor''s field of view)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Figure 14.4* shows the HC-SR04 ultrasonic sensor used in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.4 – The HC-SR04 ultrasonic sensor](img/Figure_14.4_B16413.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.4 – The HC-SR04 ultrasonic sensor
  prefs: []
  type: TYPE_NORMAL
- en: 'From *Figure 14.4*, you can see that the sensor has two speaker-like components.
    One of them is actually a small speaker emitting ultrasonic sound signals and
    the other one is a microphone that captures those signals back after they bounce
    on an object. *Figure 14.5* shows the back of the HC-SR04 ultrasonic sensor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.5 – The back side of the HC-SR04 sensor](img/Figure_14.5_B16413.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.5 – The back side of the HC-SR04 sensor
  prefs: []
  type: TYPE_NORMAL
- en: As you can see from *Figure 14.5*, the back of the sensor contains electronic
    components such as resistors, transistors, and integrated circuits that support
    the generation and reception of ultrasonic signals.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are other types of ultrasonic sensors, such as the Maxbotix MaxSonar
    ultrasonic sensor. Its Fritzing diagram is shown in *Figure 14.6*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.6 – The Maxbotix MaxSonar ultrasonic sensor](img/Figure_14.6_B16413.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.6 – The Maxbotix MaxSonar ultrasonic sensor
  prefs: []
  type: TYPE_NORMAL
- en: The sensor shown in *Figure 14.6* can be used with microcontroller boards. The
    Maxbotix MaxSonar is an accurate and long-range ultrasonic sensor (it can measure
    distances up to 6.45 meters), but it is expensive and requires connecting seven
    wires to its seven pins. The HC-SR04 sensor will suffice for our 20-second timer
    application. It is low cost and easy to connect to, requiring only four wires.
  prefs: []
  type: TYPE_NORMAL
- en: The timer starts when the ultrasonic sensor detects a user waving at it, so
    the sensor will trigger the timer.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 14.7* shows how to connect the HC-SR04 ultrasonic sensor to the Blue
    Pill:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.7 – The ultrasonic sensor connected to the Blue Pill microcontroller
    board](img/Figure_14.7_B16413.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.7 – The ultrasonic sensor connected to the Blue Pill microcontroller
    board
  prefs: []
  type: TYPE_NORMAL
- en: 'From *Figure 14.7*, you can see that one of the breadboard''s lower rails is
    connected to the Blue Pill''s **5V** pin. The other rail is connected to Blue
    Pill''s ground. The following are the steps for connecting the HC-SR04 sensor
    to the Blue Pill in addition to the steps followed in *Figure 14.1*, following
    the diagram from *Figure 14.7*:'
  prefs: []
  type: TYPE_NORMAL
- en: Connect the sensor's **VCC** pin to the breadboard's low rail that is connected
    to **5V**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the sensor's **Trig** pin to the Blue Pill's **A8** pin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the sensor's **Echo** pin to the Blue Pill's **A9** pin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the sensor's **GND** pin to the breadboard's lower rail that is connected
    to ground.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Figure 14.8* shows how everything is connected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.8 – The Blue Pill connected to the LCD and the ultrasonic sensor](img/Figure_14.8_B16413.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.8 – The Blue Pill connected to the LCD and the ultrasonic sensor
  prefs: []
  type: TYPE_NORMAL
- en: Please note from *Figure 14.8* that all the connections from the ultrasonic
    sensor are done on its back side. This is to avoid any cable obstructing the ultrasonic
    signals sent and received on the front of the sensor. Also note that the 1602
    LCD's power (pin **VDD**) is connected to Blue Pill's pin **5V**. If you feed
    the LCD with 3.3 volts, it may not work.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Make sure that there are no wires obstructing the field of view of HC-SR04 ultrasonic
    sensor; otherwise, they will produce erratic or false measurements and results
    with the 20-second counting.
  prefs: []
  type: TYPE_NORMAL
- en: Also note from *Figure 14.8* that the breadboard's upper rail is connected to
    the Blue Pill's **G** pin (in some Blue Pills it is labeled as **GND**), which
    serves to connect the LCD's ground and its 2.2k ohm resistor that is used to preset
    the LCD's contrast.
  prefs: []
  type: TYPE_NORMAL
- en: The next section explains how to encase the whole project to protect it from
    dust, water, and so on, and to facilitate its use in a place for washing hands.
  prefs: []
  type: TYPE_NORMAL
- en: Putting everything together – think of a protective case for the project!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section shows how you can place the electronic circuit with the ultrasonic
    sensor inside a protective case. The section also shows some suggestions on how
    to fit everything in a plastic or glass container, because if you use the 20-second
    counter in a bathroom or in a place close to a hand washing sink, you will need
    to protect the circuit against water spilling and soap stains that can damage
    the electronic components used in this 20-second counter project. We do not recommend
    you connect the Blue Pill board to a wall USB adapter for security reasons. It
    is best to connect the Blue Pill to a USB power bank.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you can''t fit the whole 20-second counter circuit (including its solderless
    breadboard) in a plastic or glass container, try connecting the Blue Pill on a
    smaller solderless breadboard such as a half breadboard. Detach the ultrasonic
    sensor and the LCD from the breadboard and position and attach them inside the
    container with strong adhesive tape. A Fritzing diagram about this smaller circuit
    is shown in *Figure 14.9*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.9 – Connecting everything on a small solderless breadboard](img/Figure_14.9_B16413.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.9 – Connecting everything on a small solderless breadboard
  prefs: []
  type: TYPE_NORMAL
- en: As you can see from *Figure 14.9*, by using a half-breadboard you can make all
    the connections more compact so you can use a small container such as an empty
    instant coffee jar or any plastic container that has a lid. You could mount the
    ultrasonic sensor on the lid and place the rest inside of the container or jar.
    You will need to use female-to-male DuPont wires to connect the LCD and the ultrasonic
    sensor to the half breadboard.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 14.10* shows a prototype design with a custom-made case giving you
    an idea of how you could encase all the components and protect the electronics
    from water spilling:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.10 – A 3D prototype design containing the whole project](img/Figure_14.10_B16413.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.10 – A 3D prototype design containing the whole project
  prefs: []
  type: TYPE_NORMAL
- en: As you can see from *Figure 14.10*, that case could be a plastic box where the
    1602A LCD is placed on top of it. The HC-SR04 sensor is placed at the front of
    the case. The interior of the case could contain the small breadboard, wires,
    the Blue Pill, the resistor, the power bank, and the USB cable. Don't place the
    whole project very close to a hand wash sink, just in case.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the timer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section shows how to test out the 20-second timer.
  prefs: []
  type: TYPE_NORMAL
- en: Once you insert the electronic circuit with the sensor, the Blue Pill, and the
    LCD in a protective case, try it in a bathroom. Carefully place it close to a
    hand washing sink if you can, to facilitate activating it and seeing the counting
    while you wash your hands. See whether you can fix it to a wall or a surface so
    it won't move and that no one accidentally knocks it over while waving at it.
    Safety first!
  prefs: []
  type: TYPE_NORMAL
- en: 'You should connect the Blue Pill to a portable power bank that has a USB socket.
    This is to avoid connecting the Blue Pill to a wall USB adapter to make it safer
    to use in an environment such as a bathroom, as shown in *Figure 14.11*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.11 – A power bank connected to the Blue Pill microcontroller board](img/Figure_14.11_B16413.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.11 – A power bank connected to the Blue Pill microcontroller board
  prefs: []
  type: TYPE_NORMAL
- en: You can test out everything with a small power bank, such as the one shown in
    *Figure 14.11*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Try activating the timer by waving at the sensor numerous times. You will see
    that sometimes the circuit counts up to 21\. This is because most microcontroller
    boards (including the Blue Pill) do not calculate the time very accurately. Try
    adding a variable and a decision to the code to show the count up to number 20\.
    Hint: Stop showing the counting when it reaches 20\. It is not critical if it
    counts up to 21 when you wash your hands for trying to *destroy* the virus that
    causes COVID-19\. The longer the counting the better.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can adjust the detected distance if you feel that the user needs to wave
    at the sensor at a different distance. Try changing the value from this line of
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`if ((dist_read<=15) & (dist_read>0))`'
  prefs: []
  type: TYPE_NORMAL
- en: The `15` value means that the LCD will activate and show the counting if you
    are waving at the sensor at a distance of 15 centimeters or less from the sensor.
    Try to change the value to a greater number, perhaps 20 centimeters.
  prefs: []
  type: TYPE_NORMAL
- en: If you think that the text and numbers shown on the LCD need more contrast,
    try changing the 2.2k ohm resistor to a smaller one, such as 1 k ohm. This may
    happen if your bathroom or the place where you will use the counter is too bright.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is an interesting test: try the 20-second counter with people of different
    ages, to see whether the ultrasonic sensor can detect different hand sizes. For
    example, see whether the sensor detects the waving hands of small children and
    adults.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned the basics of coding an easy-to-read 20-second counter.
    This count is recommended by many health authorities for properly washing our
    hands during that time in an attempt to destroy some viruses such as the one that
    causes COVID-19\. The chapter also explained how the HC-SR04 ultrasonic sensor
    works for activating the counter. One major skill that you gained on completing
    the project from this chapter is that you learned how to connect a practical LCD
    to a microcontroller board, and how we could show the counting on an LCD. You
    can use the LCD in other projects that require showing numeric or text data from
    a microcontroller board.
  prefs: []
  type: TYPE_NORMAL
- en: We have covered in this chapter a practical way to obtain data from a sensor,
    process it on the microcontroller board, and do something about it such as showing
    results on an LCD. Obtaining data from sensors and processing it is one of the
    main applications of microcontrollers, leveraging their simplicity for connecting
    sensors to their input/output ports.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Choudhuri, K. B. R. (2017), *Learn Arduino Prototyping in 10 Days*, Birmingham,
    UK: Packt Publishing Ltd'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Gay, W. (2018), *Beginning STM32: Developing with FreeRTOS, libopencm3 and
    GCC*, New York, NY: Apress'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HC-SR04 (2013), *HC-SR04 user's manual V1.0\. Cytron Technologies*, available
    from [https://docs.google.com/document/d/1Y-yZnNhMYy7rwhAgyL_pfa39RsB-x2qR4vP8saG73rE/edit?usp=sharing](https://docs.google.com/document/d/1Y-yZnNhMYy7rwhAgyL_pfa39RsB-x2qR4vP8saG73rE/edit?usp=sharing)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Horowitz, P. and Hill, W. (2015), *The Art of Electronics*, [3rd ed.] Cambridge
    University Press: New York, NY'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LCD1602 (2009), *LCM module data sheet TC1602A-01T*, Tinsharp Industrial Co.,
    Ltd. available from [https://cdn-shop.adafruit.com/datasheets/TC1602A-01T.pdf](https://cdn-shop.adafruit.com/datasheets/TC1602A-01T.pdf)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microchip (2019), *PIC16F15376 Curiosity Nano hardware user guide*, Microchip
    Technology, Inc. available from [http://ww1.microchip.com/downloads/en/DeviceDoc/50002900B.pdf](http://ww1.microchip.com/downloads/en/DeviceDoc/50002900B.pdf)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
