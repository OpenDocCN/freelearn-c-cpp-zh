["```cpp\n#include \"..\\\\SmallWindows\\\\SmallWindows.h\" \n#include \"HelloWindow.h\" \n\nvoid MainWindow(vector<String> /* argumentList */, WindowShow windowShow) { \n  Application::ApplicationName() = TEXT(\"Hello\"); \n  Application::MainWindowPtr() = \n    new HelloWindow(windowShow); \n} \n\n```", "```cpp\nclass HelloWindow : public Window { \n  public: \n    HelloWindow(WindowShow windowShow); \n    void OnDraw(Graphics& graphics, DrawMode drawMode) const; \n}; \n\n```", "```cpp\n#include \"..\\\\SmallWindows\\\\SmallWindows.h\" \n#include \"HelloWindow.h\" \n\nHelloWindow::HelloWindow(WindowShow windowShow) \n :Window(LogicalWithScroll, ZeroSize, nullptr, \n         OverlappedWindow, NoStyle, windowShow) { \n  SetHeader(TEXT(\"Hello Window\")); \n} \n\n```", "```cpp\nvoid HelloWindow::OnDraw(Graphics& graphics, \n                         DrawMode /* drawMode */) const { \n  Size clientSize = GetClientSize(); \n  Rect clientRect(Point(0, 0), clientSize);\n graphics.DrawText(clientRect, TEXT(\"Hello, Small Windows!\"),\n                    SystemFont, Black, White);\n} \n\n```", "```cpp\n#include \"..\\\\SmallWindows\\\\SmallWindows.h\" \n#include \"Circle.h\" \n#include \"CircleDocument.h\" \n\nvoid MainWindow(vector<String> /* argumentList */, \n                WindowShow windowShow) { \n  Application::ApplicationName() = TEXT(\"Circle\"); \n  Application::MainWindowPtr() = \n    new CircleDocument(windowShow); \n} \n\n```", "```cpp\nclass CircleDocument : public StandardDocument { \n  public: \n    CircleDocument(WindowShow windowShow); \n    ~CircleDocument(); \n\n    void OnMouseDown(MouseButton mouseButtons, \n                    Point mousePoint, \n                    bool shiftPressed, \n                    bool controlPressed); \n    void OnMouseUp(MouseButton mouseButtons, \n                    Point mousePoint, \n                    bool shiftPressed, \n                    bool controlPressed); \n    void OnMouseMove(MouseButton mouseButtons, \n                    Point mousePoint, \n                    bool shiftPressed, \n                    bool controlPressed); \n\n    void OnDraw(Graphics& graphics, DrawMode drawMode) const; \n\n    bool ReadDocumentFromStream(String name, \n                           istream& inStream); \n    bool WriteDocumentToStream(String name, \n                           ostream& outStream) const; \n    void ClearDocument(); \n\n```", "```cpp\n    DEFINE_VOID_LISTENER(CircleDocument,OnRed); \n    DEFINE_VOID_LISTENER(CircleDocument,OnGreen); \n    DEFINE_VOID_LISTENER(CircleDocument,OnBlue); \n    DEFINE_VOID_LISTENER(CircleDocument,OnColorDialog); \n\n```", "```cpp\n    DEFINE_BOOL_LISTENER(CircleDocument, RedRadio); \n    DEFINE_BOOL_LISTENER(CircleDocument, GreenRadio); \n    DEFINE_BOOL_LISTENER(CircleDocument, BlueRadio); \n\n```", "```cpp\n    static const int CircleRadius = 500; \n\n```", "```cpp\n  private: \n    vector<Circle> circleList; \n    Color nextColor; \n    int moveIndex = -1; \n    Point movePoint; \n}; \n\n```", "```cpp\n#include \"..\\\\SmallWindows\\\\SmallWindows.h\" \n#include \"Circle.h\" \n#include \"CircleDocument.h\" \n\nCircleDocument::CircleDocument(WindowShow windowShow) \n :StandardDocument(LogicalWithScroll, USLetterPortrait, \n                   TEXT(\"Circle Files, cle\"), nullptr, \n                   OverlappedWindow, windowShow) { \n\n```", "```cpp\n  Menu menuBar(this);\n```", "```cpp\n  menuBar.AddMenu(StandardFileMenu(false));\n```", "```cpp\n  Menu colorMenu(this, TEXT(\"&Color\")); \n  colorMenu.AddItem(TEXT(\"&Red\\tCtrl+R\"), OnRed, \n                    nullptr, nullptr, RedRadio); \n  colorMenu.AddItem(TEXT(\"&Green\\tCtrl+G\"), OnGreen, \n                    nullptr, nullptr, GreenRadio); \n  colorMenu.AddItem(TEXT(\"&Blue\\tCtrl+B\"), OnBlue, \n                    nullptr, nullptr, BlueRadio); \n  colorMenu.AddSeparator(); \n  colorMenu.AddItem(TEXT(\"&Dialog ...\"), OnColorDialog); \n  menuBar.AddMenu(colorMenu); \n\n  menuBar.AddMenu(StandardHelpMenu()); \n  SetMenuBar(menuBar); \n\n```", "```cpp\n  nextColor.ReadColorFromRegistry(TEXT(\"NextColor\"), Red); \n} \n\n```", "```cpp\nCircleDocument::~CircleDocument() { \n  nextColor.WriteColorToRegistry(TEXT(\"NextColor\")); \n} \n\n```", "```cpp\nvoid CircleDocument::ClearDocument() { \n  circleList.clear(); \n} \n\n```", "```cpp\nbool CircleDocument::WriteDocumentToStream(String name, \n                          ostream& outStream) const { \n  int size = circleList.size(); \n  outStream.write((char*) &size, sizeof size); \n\n  for (Circle circle : circleList) { \n    circle.WriteCircle(outStream); \n  } \n\n  return ((bool) outStream); \n} \n\n```", "```cpp\nbool CircleDocument::ReadDocumentFromStream(String name, \n                                 istream& inStream) { \n  int size; \n  inStream.read((char*) &size, sizeof size); \n\n  for (int count = 0; count < size; ++count) { \n    Circle circle; \n    circle.ReadCircle(inStream); \n    circleList.push_back(circle); \n  } \n\n  return ((bool) inStream); \n} \n\n```", "```cpp\nvoid CircleDocument::OnMouseDown \n           (MouseButton mouseButtons, Point mousePoint, \n            bool shiftPressed /* = false */, \n            bool controlPressed /* = false */) { \n  if (mouseButtons == LeftButton) { \n    moveIndex = -1; \n    int size = circleList.size(); \n\n    for (int index = 0; index < size; ++index) { \n      if (circleList[index].IsClick(mousePoint)) { \n        moveIndex = index; \n        movePoint = mousePoint; \n        break; \n      } \n    } \n\n```", "```cpp\n    if (moveIndex == -1) { \n      Circle newCircle(mousePoint, CircleRadius, \n                       nextColor); \n      circleList.push_back(newCircle); \n      Invalidate(newCircle.Area()); \n      UpdateWindow(); \n      SetDirty(true); \n    } \n  } \n} \n\n```", "```cpp\nvoid CircleDocument::OnMouseMove \n           (MouseButton mouseButtons, Point mousePoint, \n            bool shiftPressed /* = false */, \n            bool controlPressed /* = false */) { \n  if ((mouseButtons == LeftButton)&&(moveIndex != -1)) { \n    Size distanceSize = mousePoint - movePoint; \n    movePoint = mousePoint; \n\n    Circle& movedCircle = circleList[moveIndex]; \n    Invalidate(movedCircle.Area()); \n    movedCircle.Center() += distanceSize; \n    Invalidate(movedCircle.Area()); \n\n    UpdateWindow(); \n    SetDirty(true); \n  } \n} \n\n```", "```cpp\nvoid CircleDocument::OnMouseUp \n           (MouseButton mouseButtons, Point mousePoint, \n            bool shiftPressed /* = false */, \n            bool controlPressed /* = false */) { \n  moveIndex = -1; \n} \n\n```", "```cpp\nvoid CircleDocument::OnDraw(Graphics& graphics, \n                            DrawMode /* drawMode */) const { \n  for (Circle circle : circleList) { \n    circle.Draw(graphics); \n  } \n} \n\n```", "```cpp\nbool CircleDocument::RedRadio() const { \n  return (nextColor == Red); \n} \n\nbool CircleDocument::GreenRadio() const { \n  return (nextColor == Green); \n} \n\nbool CircleDocument::BlueRadio() const { \n  return (nextColor == Blue); \n} \n\n```", "```cpp\nvoid CircleDocument::OnRed() { \n  nextColor = Red; \n} \n\nvoid CircleDocument::OnGreen() { \n  nextColor = Green; \n} \n\nvoid CircleDocument::OnBlue() { \n  nextColor = Blue; \n} \n\n```", "```cpp\nvoid CircleDocument::OnColorDialog() { \n  StandardDialog(this, nextColor); \n} \n\n```", "```cpp\nclass Circle { \n  public: \n    Circle(); \n    Circle(Point center, int radius, Color color); \n\n    bool WriteCircle(ostream& outStream) const; \n    bool ReadCircle(istream& inStream); \n\n    bool IsClick(Point point) const; \n    Rect Area() const; \n    void Draw(Graphics& graphics) const; \n\n    Point Center() const {return center;} \n    Point& Center() {return center;} \n    Color GetColor() {return color;} \n\n```", "```cpp\n  private: \n    Point center; \n    int radius; \n    Color color; \n}; \n\n```", "```cpp\n#include \"..\\\\SmallWindows\\\\SmallWindows.h\" \n#include \"Circle.h\" \n\nCircle::Circle() { \n  // Empty. \n} \n\nCircle::Circle(Point center, int radius, Color color) \n :color(color), \n  center(center), \n  radius(radius) { \n  // Empty. \n} \n\n```", "```cpp\nbool Circle::WriteCircle(ostream& outStream) const { \n  color.WriteColorToStream(outStream); \n  center.WritePointToStream(outStream); \n  outStream.write((char*) &radius, sizeof radius); \n  return ((bool) outStream); \n} \n\nbool Circle::ReadCircle(istream& inStream) { \n  color.ReadColorFromStream(inStream); \n  center.ReadPointFromStream(inStream); \n  inStream.read((char*) &radius, sizeof radius); \n  return ((bool) inStream); \n} \n\n```", "```cpp\n Circle::IsClick(Point point) const { \n  int width = point.X() - center.X(), \n      height = point.Y() - center.Y(); \n  int distance = (int) sqrt((width * width) + \n                            (height * height)); \n  return (distance <= radius); \n} \n\n```", "```cpp\nRect Circle::Area() const { \n  Point topLeft = center - radius, \n        bottomRight = center + radius; \n  return Rect(topLeft, bottomRight); \n} \n\n```", "```cpp\nvoid Circle::Draw(Graphics& graphics) const { \n  Point topLeft = center - radius, \n        bottomRight = center + radius; \n  Rect circleRect(topLeft, bottomRight); \n  graphics.FillEllipse(circleRect, Black, color); \n} \n\n```"]