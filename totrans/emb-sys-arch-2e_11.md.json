["```cpp\nSTM32_Programmer_CLI -c port=swd -ob displ\n```", "```cpp\nstatic void sau_init_region(uint32_t region,\n    uint32_t start_addr,\n    uint32_t end_addr,\n    int secure)\n{\n  uint32_t secure_flag = 0;\n  if (secure)\n      secure_flag = SAU_REG_SECURE;\n  SAU_RNR = region & SAU_REGION_MASK;\n  SAU_RBAR = start_addr & SAU_ADDR_MASK;\n  SAU_RLAR = (end_addr & SAU_ADDR_MASK)\n      | secure_flag | SAU_REG_ENABLE;\n}\n```", "```cpp\nstatic void secure_world_init(void)\n{\n  /* Non-secure callable: NSC functions area */\n  sau_init_region(0, 0x0C001000, 0x0C001FFF, 1);\n  /* Non-secure: application flash area */\n  sau_init_region(1, 0x08040000, 0x0804FFFF, 0);\n  /* Non-secure RAM region in SRAM1 */\n  sau_init_region(2, 0x20018000, 0x2002FFFF, 0);\n  /* Non-secure: internal peripherals */\n  sau_init_region(3, 0x40000000, 0x4FFFFFFF, 0);\n```", "```cpp\n  /* Enable SAU */\n  SAU_CTRL = SAU_INIT_CTRL_ENABLE;\n  /* Enable securefault handler */\n  SCB_SHCSR |= SCB_SHCSR_SECUREFAULT_EN;\n}\n```", "```cpp\nSTM32_Programmer_CLI -c port=swd -ob SECWM1_PSTRT=0\n   SECWM1_PEND=0x39\n```", "```cpp\n   Secure Area 1:\n     SECWM1_PSTRT : 0x0  (0x8000000)\n     SECWM1_PEND  : 0x39  (0x8039000)\n```", "```cpp\n#define SET_GTZC_MPCBBx_S_VCTR(bank,n,val) \\\n(*((volatile uint32_t *)(GTZC_MPCBB##bank##_S_VCTR_BASE )\\\n           + n ))= val\n```", "```cpp\n static void gtzc_init(void)\n{\n   int i;\n  /* Configure lower half of SRAM1 as secure */\n   for (i = 0; i < 12; i++) {\n       SET_GTZC_MPCBBx_S_VCTR(1, i, 0xFFFFFFFF);\n   }\n   /* Configure upper half of SRAM1 as non-secure */\n   for (i = 12; i < 24; i++) {\n       SET_GTZC_MPCBBx_S_VCTR(1, i, 0x0);\n   }\n  /* Configure SRAM2 as secure */\n   for (i = 0; i < 8; i++) {\n       SET_GTZC_MPCBBx_S_VCTR(2, i, 0xFFFFFFFF);\n   }\n}\n```", "```cpp\n#define GPIOA_BASE 0x52020000\n#define GPIOB_BASE 0x52020400\n#define GPIOC_BASE 0x52020800\n```", "```cpp\n#define GPIOA_BASE 0x42020000\n#define GPIOB_BASE 0x42020400\n#define GPIOC_BASE 0x42020800\n```", "```cpp\nvoid red_led_secure(int onoff)\n{\n  if (onoff)\n      GPIOA_SECCFG |= (1 << RED_LED);\n  else\n      GPIOA_SECCFG &= ~(1 << RED_LED);\n}\n```", "```cpp\n    red_led_secure(1);\n    green_led_secure(0);\n    blue_led_secure(1);\n```", "```cpp\nSTM32_Programmer_CLI -c port=swd mode=hotplug -ob TZEN=1\n```", "```cpp\n    RAM (rwx) : ORIGIN = 0x20000000, LENGTH = 0x00018000\n```", "```cpp\n    FLASH (rx) : ORIGIN = 0x0C000000, LENGTH = 0x1000\n```", "```cpp\n    FLASH_NSC(rx): ORIGIN = 0x0C001000, LENGTH = 0x1000\n```", "```cpp\nSTM32_Programmer_CLI -c port=swd mode=hotplug -ob SECBOOTADD0=0x180000\n```", "```cpp\nvoid __attribute__((cmse_nonsecure_entry))\n    nsc_blue_led_toggle(void)\n{\n  if ((GPIOB_ODR & (1 << BLUE_LED)) == (1 << BLUE_LED))\n    blue_led_off();\n  else\n    blue_led_on();\n}\n```", "```cpp\n.gnu.sgstubs :\n{\n  . = ALIGN(4);\n  *(.gnu.sgstubs*)   /* Secure Gateway stubs */\n  . = ALIGN(4);\n} >FLASH_NSC\n```", "```cpp\nSTM32_Programmer_CLI -c port=swd -d bootloader.bin 0x0C000000\n```", "```cpp\nFLASH (rx) : ORIGIN = 0x08040000, LENGTH = 256K\nRAM (rwx) :  ORIGIN = 0x20018000, LENGTH = 96K\n```", "```cpp\nSTM32_Programmer_CLI -c port=swd -d image.bin 0x08040000\n```", "```cpp\n  /* Update IV */\n  VTOR_NS = ((uint32_t)app_IV);\n```", "```cpp\n  app_end_stack =\n     (*((uint32_t *)(NS_WORLD_ENTRY_ADDRESS)));\n  app_entry =\n     (void *)(*((uint32_t *)(NS_WORLD_ENTRY_ADDRESS + 4)));\n```", "```cpp\n  app_stack_limit = app_end_stack - MAX_NS_STACK_SIZE;\n```", "```cpp\n  asm volatile(\"msr msplim_ns, %0\" ::\"r\"(app_stack_limit));\n```", "```cpp\n  asm volatile(\"msr msp_ns, %0\" ::\"r\"(app_end_stack));\n```", "```cpp\n  /* Jump to non-secure app_entry */\n  asm volatile(\"mov r12, %0\" ::\"r\"\n     ((uint32_t)app_entry - 1));\n  asm volatile(\"blxns   r12\" );\n```", "```cpp\n0c001000 <nsc_blue_led_toggle>:\nc001000:   e97f e97f   sg\nc001004:   f7ff bdd2   b.w c000bac\n              <__acle_se_nsc_blue_led_toggle>\n```", "```cpp\n080408e8 <__nsc_blue_led_toggle_veneer>:\n80408e8:   f85f f000   ldr.w   pc, [pc]    ; 80408ec \\\n                       <__nsc_blue_led_toggle_veneer+0x4>\n80408ec:   0c001001\n```", "```cpp\nc000bee:   4774        bxns    lr\n```"]