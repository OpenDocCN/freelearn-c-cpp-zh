["```cpp\n#include <cstdint>\n#include <iostream>\n#include <span>\nstruct UDPHeader {\n  uint16_t srcPort{0};\n  uint16_t destPort{0};\n  uint16_t length{0};\n  uint16_t checksum{0};\n  void display() const {\n    std::cout << \"Source Port: \" << srcPort << \"\\n\"\n              << \"Destination Port: \" << destPort << \"\\n\"\n              << \"Length: \" << length << \"\\n\"\n              << \"Checksum: \" << checksum << \"\\n\";\n  }\n};\nvoid processUDPPacket(std::span<const uint8_t> packet) {\n  if (packet.size() < sizeof(UDPHeader)) {\n    std::cerr << \"Invalid packet size!\\n\";\n    return;\n  }\n  auto headerSpan = packet.subspan(0, sizeof(UDPHeader));\n  const UDPHeader &header =\n      *reinterpret_cast<const UDPHeader *>(\n          headerSpan.data());\n  header.display();\n  auto dataSpan = packet.subspan(sizeof(UDPHeader));\n  std::cout << \"Data size: \" << dataSpan.size()\n            << \" bytes\\n\";\n}\nint main() {\n  uint8_t udpPacket[] = {0x08, 0x15, // Source port\n                         0x09, 0x16, // Destination port\n                         0x00, 0x10, // Length\n                         0x12, 0x34, // Checksum\n                         // Some data\n                         0x01, 0x02, 0x03, 0x04, 0x05,\n                         0x06};\n  processUDPPacket(udpPacket);\n  return 0;\n}\n```", "```cpp\nSource Port: 5384\nDestination Port: 5641\nLength: 4096\nChecksum: 13330\nData size: 6 bytes\n```"]