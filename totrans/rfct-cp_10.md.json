["```cpp\n#include <iostream>\nclass NumberWrapper {\n    int number;\npublic:\n    NumberWrapper() {\n    }\n};\n```", "```cpp\n#include <iostream>\nclass NumberWrapper {\n    int number;\npublic:\n    NumberWrapper(int n) {\n        (void)n; // to avoid warning: unused parameter 'n'\n        std::cout << \"init with: \" << number << std::endl;\n    }\n};\nint main() {\n    auto num = NumberWrapper{1};\n    (void) num;\n    return 0;\n}\n```", "```cpp\n    #include <vector>\n    ```", "```cpp\n    std::vector<int> createLargeVector();\n    ```", "```cpp\n    void processVector(std::vector<int> vec);\n    ```", "```cpp\n    int main() {\n    ```", "```cpp\n        std::vector<int> vec = createLargeVector();\n    ```", "```cpp\n        processVector(vec); // Clang-Tidy: Use std::move to avoid copying\n    ```", "```cpp\n        return 0;\n    ```", "```cpp\n    }\n    ```", "```cpp\n    std::vector<int> myVec = {1, 2, 3};\n    ```", "```cpp\n    for (std::size_t i = 0; i < myVec.size(); ++i) {\n    ```", "```cpp\n        // Clang-Tidy: Use a range-based for loop instead\n    ```", "```cpp\n        std::cout << myVec[i] << std::endl;\n    ```", "```cpp\n    }\n    ```", "```cpp\n    int* ptr = nullptr;\n    ```", "```cpp\n    int value = *ptr; // Clang-Tidy: Dereference of null pointer\n    ```", "```cpp\n    int MyVariable = 42; // Clang-Tidy: Variable name should be lower_case\n    ```", "```cpp\n    bool a, b, c;\n    ```", "```cpp\n    if (a && (b || c)) {\n    ```", "```cpp\n        // Clang-Tidy: Simplify logical expression\n    ```", "```cpp\n    }\n    ```", "```cpp\n    strcpy(dest, src); // Clang-Tidy: Use of function 'strcpy' is insecure\n    ```", "```cpp\n    clang-tidy my_code.cpp --checks='performance-*, -performance-noexcept-move-constructor'\n    ```", "```cpp\n    int x = 0; // NOLINT\n    ```", "```cpp\n    int x = 0; // NOLINT(bugprone-integer-division)\n    ```", "```cpp\n    clang-tidy my_code.cpp --warnings-as-errors='bugprone-*'\n    ```", "```cpp\n    Checks: 'performance-*, -performance-noexcept-move-constructor'\n    ```", "```cpp\n      WarningsAsErrors: 'bugprone-*'\n    ```"]