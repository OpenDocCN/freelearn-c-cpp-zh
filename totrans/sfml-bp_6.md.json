["```cpp\nint main()\n{\n  int pid = fork();\n  if(pid == -1)\n    std::cerr<<\"Error when calling fork()\"<<std::endl;\n  else if (pid == 0)\n    std::cout<<\"I'm the child process\"<<std::endl;\n  else\n    std::cout<<\"I'm the parent process\"<<std::endl;\n  return 0;\n}\n```", "```cpp\nint main()\n{\n  int pid = fork();\n  if(pid == -1)\n  =  std::cerr<<\"Error when calling fork()\"<<std::endl;\n  else if (pid == 0) {\n    std::cout<<\"I'm the child process\"<<std::endl;\n  }\n  else {\n    std::cout<<\"I'm the parent process\"<<std::endl;\n    execlp(\"Gravitris\", \"Gravitris\", \"arg 1\", \"arg 2\",NULL);\n    std::cout<<\"This message will never be print, except if execl() fail\"<<std::endl;\n  }\n  return 0;\n}\n```", "```cpp\n#include <SFML/System.hpp>\nstatic sf::Mutex mutex;\nstatic int i = 0;\n\nvoid f()\n{\n  sf::Lock guard(mutex);\n  std::cout<<\"Hello world\"<<std::endl;\n  std::cout<<\"The value of i is \"<<(++i)<<\" from f()\"<<std::endl;\n}\n\nint main()\n{\n  sf::Thread thread(f);\n  thread.launch();\n  mutex.lock();\n  std::cout<<\"The value of i is \"<<(++i)<<\" from main\"<<std::endl;\n  mutex.unlock();\n  thread.wait();\n  return 0;\n}\n```", "```cpp\n#include <SFML/System.hpp>\nstatic sf::Mutex mutex;\nstatic int i = 0;\n\nvoid f()\n{\n  sf::Lock guard(mutex);\n  std::cout<<\"Hello world\"<<std::endl;\n  std::cout<<\"The value of i is \"<<(++i)<<\" from f()\"<<std::endl;\n}\n\nint main()\n{\n  sf::Thread thread(f);\n  thread.launch();\n  mutex.lock();\n  std::cout<<\"The value of i is \"<<(++i)<<\" from main\"<<std::endl;\n  mutex.unlock();\n  thread.wait();\n  return 0;\n}\n```", "```cpp\n    void updatePhysics(const sf::Time& deltaTime,const sf::Time& timePerFrame);\n    ```", "```cpp\n    void updatePhysics();\n    ```", "```cpp\n    sf::Thread _physicsThread;\n    sf::Mutex _mutex;\n    bool _isRunning;\n    int _physicsFramePerSeconds;\n    ```", "```cpp\n    Game::Game(int X, int Y,int word_x,int word_y) : ActionTarget(Configuration::player_inputs), _window(sf::VideoMode(X,Y),\"06_Multithreading\"), _current_piece(nullptr), _world(word_x,word_y), _mainMenu(_window),_configurationMenu(_window), _pauseMenu(_window), _status(Status::StatusMainMenu), _physicsThread(&Game::update_physics,this), _isRunning(true)\n    {\n      bind(Configuration::PlayerInputs::HardDrop,[this](const sf::Event&){\n          sf::Lock lock(_mutex);\n          _current_piece = _world.newPiece();\n          timeSinceLastFall = sf::Time::Zero;\n      });\n    }\n    ```", "```cpp\n    void Game::run(int minimum_frame_per_seconds, int physics_frame_per_seconds)\n    {\n      sf::Clock clock;\n      const sf::Time timePerFrame = sf::seconds(1.f/minimum_frame_per_seconds);\n      const sf::Time timePerFramePhysics = sf::seconds(1.f/physics_frame_per_seconds);\n      _physics_frame_per_seconds = physics_frame_per_seconds;\n      _physicsThread.launch();\n\n      while (_window.isOpen())\n      {\n        sf::Time time = clock.restart();\n        processEvents();\n        if(_status == StatusGame and not _stats.isGameOver()){\n          updatePhysics(time,timePerFramePhysics);\n          update(time,timePerFrame);\n        }\n        render();\n      }\n      _isRunning = false;\n      _physicsThread.wait();\n    }\n    ```", "```cpp\n    void Game::update(const sf::Time& deltaTime,const sf::Time& timePerFrame)\n    {\n      static sf::Time timeSinceLastUpdate = sf::Time::Zero;\n      timeSinceLastUpdate+=deltaTime;\n      timeSinceLastFall+=deltaTime;\n      if(timeSinceLastUpdate > timePerFrame)\n      {\n        sf::Lock lock(_mutex);\n        if(_current_piece != nullptr)\n        {\n          _currentPiece->rotate(_rotateDirection*3000);\n          _currentPiece->moveX(_moveDirection*5000);\n          bool new_piece;\n          {\n            int old_level =_stats.getLevel();\n            _stats.addLines(_world.clearLines(new_piece,*_currentPiece));\n            if(_stats.getLevel() != old_level)\n            _world.add(Configuration::Sounds::LevelUp);\n          }\n          if(new_piece or timeSinceLastFall.asSeconds() > std::max(1.0,10-_stats.getLevel()*0.2))\n          {\n            _current_piece = _world.newPiece();\n            timeSinceLastFall = sf::Time::Zero;\n          }\n        }\n        _world.update(timePerFrame);\n        _stats.setGameOver(_world.isGameOver());\n        timeSinceLastUpdate = sf::Time::Zero;\n      }\n      _rotateDirection=0;\n      _moveDirection=0;\n    }\n    ```", "```cpp\n    void Game::updatePhysics(const sf::Time& deltaTime,const sf::Time& timePerFrame)\n    void Game::updatePhysics()\n    {\n      sf::Clock clock;\n      const sf::Time timePerFrame = sf::seconds(1.f/_physics_frame_per_seconds);\n      static sf::Time timeSinceLastUpdate = sf::Time::Zero;\n\n      while (_isRunning)\n      {\n        sf::Lock lock(_mutex);\n        timeSinceLastUpdate+=deltaTime;\n        timeSinceLastUpdate+= clock.restart();\n        _world.updateGravity(_stats.getLevel());\n\n        while (timeSinceLastUpdate > timePerFrame)\n        {\n          if(_status == StatusGame and not _stats.isGameOver())\n          _world.update_physics(timePerFrame);\n          timeSinceLastUpdate -= timePerFrame;\n        }\n      }\n    }\n    ```", "```cpp\n    void Game::initGame()\n    {\n      sf::Lock lock(_mutex);\n      timeSinceLastFall = sf::Time::Zero;\n      _stats.reset();\n      _world.reset();\n      _current_piece = _world.newPiece();\n    }\n    ```", "```cpp\n    void Game::render()\n    {\n      _window.clear();\n      switch(_status)\n      {\n        case StatusMainMenu:\n        {\n          _window.draw(_mainMenu);\n        }break;\n        case StatusGame :\n        {\n          if(not _stats.isGameOver())\n          {\n            sf::Lock lock(_mutex);\n            _window.draw(_world);\n          }\n          _window.draw(_stats);\n        }break;\n        case StatusConfiguration:\n        {\n          _sfg_desktop.Update(0.0);\n          _sfgui.Display(_window);\n          _window.draw(_configurationMenu);\n        }break;\n        case StatusPaused :\n        {\n          if(not _stats.isGameOver())\n          {\n            sf::Lock lock(_mutex);\n            _window.draw(_world);\n          }\n          _window.draw(_pauseMenu);\n        }break;\n        default : break;\n      }\n      _window.display();\n    }\n    ```"]