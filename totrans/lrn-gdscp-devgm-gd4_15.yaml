- en: '15'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using the File System
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the early days, arcade games would never store the progress of players. Every
    time you put in a quarter, the game would start from zero, unless there was a
    system that would let you buy more lives within the same run. But in general,
    you could not return the day after and start playing where you left off the day
    before.
  prefs: []
  type: TYPE_NORMAL
- en: Even early console games had limited functionality in terms of saving your progress.
    Some games would have a code system with which you got a secret code from the
    moment you had beaten a level. Later, you could use this code to start directly
    from there. But these games still didn’t really save your progress.
  prefs: []
  type: TYPE_NORMAL
- en: This restriction was partly because storage space, like hard drives or flash
    memory, was very expensive. Nowadays, almost every computer and console comes
    standard with a few hundred gigabytes, if not terabytes, of storage. Saving data
    has become very cheap and easy and players have come to expect that some kind
    of progress is tracked between play sessions.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What is the file system?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a save system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As with every chapter, you can find the final code in the GitHub repository
    in the subfolder for this chapter: [https://github.com/PacktPublishing/Learning-GDScript-by-Developing-a-Game-with-Godot-4/tree/main/chapter15](https://github.com/PacktPublishing/Learning-GDScript-by-Developing-a-Game-with-Godot-4/tree/main/chapter15)'
  prefs: []
  type: TYPE_NORMAL
- en: What is the file system?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A file system is a system that manages files, their contents, as well as the
    metadata of these files. For example, a file system would manage in what folders
    the files are stored. It makes sure that we can access these files to read the
    content and metadata and write new data back. For Godot, this means that Godot
    Engine manages all resources that we could need in our game, from scenes to scripts,
    as well as images and sounds.
  prefs: []
  type: TYPE_NORMAL
- en: Metadata
  prefs: []
  type: TYPE_NORMAL
- en: When we have data, such as a text file, it is often accompanied by metadata.
    This is data about the data. While the text file contains the actual data, that
    is, the text, the metadata contains information such as the date of creation,
    who the author was, where it is stored, and what accounts have access to the file.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start our exploration of file systems with file paths in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: File paths
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To be able to locate a file, the file system gives a unique path to each file.
    On our computer, we can find files through folders, also called directories, where
    we store them in a nice order. This path could look like this on a Windows-based
    system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Or it could look like this on macOS and Linux-based systems:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'For resource and other project-related files, Godot Engine’s paths work relative
    to the position where the project’s `project.godot` file is located. This file’s
    path is considered as the root directory. The paths within the Godot file system
    to access resource files always start with `res://`. To access one of the files
    within the project, for example, a path could look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: For convenience and compatibility, the Godot file system always uses forward
    slashes (`/`). Even on Windows-based systems, where the backward slash (`\`) is
    normally used.
  prefs: []
  type: TYPE_NORMAL
- en: We actually already used one of these paths when we preloaded the projectiles
    in [*Chapter 10*](B19358_10.xhtml#_idTextAnchor632).
  prefs: []
  type: TYPE_NORMAL
- en: User path
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The fact that we can easily access all project files using the `res://` path
    is very convenient, but there is a problem. We cannot write to any file in the
    `res://` domain; when the game is running from an exported build, we can only
    read files from it. To help developers out with this problem, Godot Engine provides
    another root path, `user://`, which files can be written to and then read from.
  prefs: []
  type: TYPE_NORMAL
- en: 'Godot Engine automatically makes a folder somewhere on the computer to store
    this user data. The location of this folder is dependent on the system the game
    is running on, so it will be at a different for each OS:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Windows: `%``APPDATA%\Godot\app_userdata\<project name>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'macOS: `~/Library/Application Support/Godot/app_userdata/ <``project name>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Linux: `~/.local/share/godot/app_userdata/ <``project name>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: In the project settings, we can even specify where to locate this folder for
    each of the three OSs, but that is not needed for now, as Godot handles this for
    us and hides the folders away somewhere safe.
  prefs: []
  type: TYPE_NORMAL
- en: You can access the `user://` folder for a given project by opening up the **Project**
    menu and choosing **Open User** **Data Folder**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.1 - Open User Data Folder takes us to the user:// folder](img/B19358_15_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.1 - Open User Data Folder takes us to the user:// folder
  prefs: []
  type: TYPE_NORMAL
- en: The `user://` path is what we are going to use to write our save data to in
    the next section of this chapter. So, let’s get to the actual implementation of
    our own little save system.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a save system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In theory, all we need to do is open a file, write the data we want to save
    to it, and then, later on, read that same file whenever we need the data. As it
    turns out, in the Godot Engine, it is indeed easy to read and write files.
  prefs: []
  type: TYPE_NORMAL
- en: We’re first going to see how to write to an external file.
  prefs: []
  type: TYPE_NORMAL
- en: Writing data to the disk
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s get to it by creating a new script called `save_manager.gd` under the
    `autoloads` folder. Then, to save data, put this code in the script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'func read_save_data():'
  prefs: []
  type: TYPE_NORMAL
- en: 'var save_file: FileAccess = FileAccess.open(SAVE_FILE_PATH, FileAccess.READ)'
  prefs: []
  type: TYPE_NORMAL
- en: 'if save_file == null:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Could not open save file.")
  prefs: []
  type: TYPE_NORMAL
- en: return
  prefs: []
  type: TYPE_NORMAL
- en: 'var file_content: String = save_file.get_as_text()'
  prefs: []
  type: TYPE_NORMAL
- en: save_data = read_save_data function loads the saved file and parses the content
    so that we can use it in the game. Firstly,  we open the saved file with FileAccess.open,
    providing the file’s path and FileAccess.READ to indicate that we only want to
    read it. After this, we check to make sure the file is opened properly, else we
    need to exit the function again.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we read out the complete file as a string into a variable called `file_content`.
    We’ll have to parse this string from the JSON format it was saved in, to the format
    that GDScript can handle, a dictionary. The parsed value is directly stored in
    the `save_data` variable that we defined in the previous section.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: More information
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For more on saving and loading data in Godot Engine, check out the official
    documentation: [https://docs.godotengine.org/en/stable/tutorials/io/saving_games.html](https://docs.godotengine.org/en/stable/tutorials/io/saving_games.html).'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: This is great, we have two functions that are able to write and read the saved
    data for our little game. Now we still need to add some functions to make sure
    the script is usable by the game.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Preparing the save manager for use in the game
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The save manager is almost ready, but we still need to add these two functions:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The first function, the `_ready()` function, makes sure that we load the saved
    data from the moment the player starts up the game.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: The second function adds a convenient way of storing a new high score. It adds
    the new high score to the `save_data` dictionary and then writes the data to disk.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, to make sure we can access the save manager from anywhere, add this script
    to the project’s autoloads. What we want is for our save manager to be the first
    autoload that gets executed, which will make sure that the saved data gets loaded
    before any other part of the game executes. To do this, make sure the `save_manager.gd`
    script is at the top of the list of autoloads. You can do this by dragging and
    dropping the entry of **SaveManager** or by clicking the arrows on the right until
    it is at the top.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 15.2 - Make sure SaveManager is the first autoload in the list](img/B19358_15_2.jpg)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: Figure 15.2 - Make sure SaveManager is the first autoload in the list
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: With this script finished and in place as an autoload, we can finally hook up
    the game to use it. Let’s do that in the next section.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Adjusting the game to use the save manager
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, all we need to do is to get the high score from `highscore_manager.gd`
    script and save the high score every time the player attains a new one. Add the
    following `_ready` function to the `highscore_manager``.gd` script and add the
    `SaveManager.save_highscore()` function call:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: With these in place, we can finally play the game a bit, get a high score, close
    the game, and, when we reopen it, see our previous high score come up.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 15.3 - The high score gets loaded when we open the game](img/B19358_15_3.jpg)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: Figure 15.3 - The high score gets loaded when we open the game
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Now our game is really ready for users to strive over beating their high score
    over multiple days without having to keep track of it themselves. In the next
    section, we’ll take a glance at the actual content of the save file itself.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Having a look at the save file
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: For now, we have treated the save file as a black box, without knowing its actual
    contents. We save data to it, in JSON format, and read it back in, parsing it
    back to data that is usable by GDScript.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Black box
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: We say we interact with a black box when we don’t have an idea of how the thing
    itself actually works. We provide the system with input and it spits out some
    output.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Of course, we can also take a look at the contents of the save file with a text
    editor, such as Notepad on Windows. Just open the `user://` folder, as we did
    in the *User path* section, earlier in this chapter. From here, open up the `save_data.save`
    file that we created in the save manager.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You’ll see that the data within this file is very easily readable, and looks
    a lot like the actual dictionary that we defined in the `save_manager.gd` script.
    This is because JSON also has a notion of the dictionary data structure and the
    syntax is very similar to that of dictionaries in GDScript. The file looks like
    this:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: If you want, you can change the save data from here and cheat, by filling in
    an impossibly high score. Unfortunately, users will also be able to do this if
    they know where to look for the save file.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: More information
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'There are ways to encrypt save files, but these are out of the scope of this
    book. See the  official documentation for more: [https://docs.godotengine.org/en/stable/classes/class_fileaccess.html#class-fileaccess-method-open-encrypted](https://docs.godotengine.org/en/stable/classes/class_fileaccess.html#class-fileaccess-method-open-encrypted).'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Awesome, with our game saving the player’s high score, we have come to the end
    of this chapter. There are still many tricks to be learned about loading and saving
    the game state, but for now, this will surely do.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: In this chapter, we learned all about the file system of Godot and computers
    in general. It allowed us to write a little save system that keeps the high score
    of our game and loads it every time we start up the game.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: This was the last chapter for this part of the book. Over the course of the
    last five chapters, we took a deeper dive into programming concepts, patterns,
    and the file system.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: You are all ready to go and develop some games of your own. But before you do
    so, I want to give you some last pointers and steps on what to do next in the
    last chapter of this book. See you there.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Quiz time
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: What is the difference between the `res://` and `user://` file paths within
    Godot Engine?
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: To save data, we used the JSON format. Is JSON a format unique to Godot Engine?
    In what other domain is the JSON format widely used?
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
