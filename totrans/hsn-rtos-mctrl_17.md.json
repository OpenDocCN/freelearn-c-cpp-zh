["```cpp\n typedef void (*iPwmDutyCycleFunc)( float DutyCycle );\n\n typedef struct\n {\n   const iPwmDutyCycleFunc SetDutyCycle;\n }iPWM; \n```", "```cpp\ntypedef struct\n{\n  uint8_t cmdNum;\n  float red;\n  float green;\n  float blue;\n}LedCmd;\n```", "```cpp\ntypedef enum\n{\n  CMD_ALL_OFF = 0,\n  CMD_ALL_ON = 1,\n  CMD_SET_INTENSITY = 2,\n  CMD_BLINK = 3\n}LED_CMD_NUM;\n```", "```cpp\ntypedef struct\n{\n  QueueHandle_t ledCmdQueue; \n  iPWM * redPWM;\n  iPWM * bluePWM;\n  iPWM * greenPWM;\n}CmdExecArgs;\n```", "```cpp\nLED_CMD_NUM currCmdNum = CMD_ALL_OFF;\nbool ledsOn = false;\nLedCmd nextLedCmd;\nparam_assert(Args == NULL);\nCmdExecArgs args = *(CmdExecArgs*)Args;\n```", "```cpp\nif(xQueueReceive(args.ledCmdQueue, &nextLedCmd, 250) == pdTRUE)\n{\n    switch(nextLedCmd.cmdNum)\n    {\n        case CMD_SET_INTENSITY:\n            currCmdNum = CMD_SET_INTENSITY;\n            setDutyCycles( &args, nextLedCmd.red, \n                           nextLedCmd.green, nextLedCmd.blue);\n            break;\n        case CMD_BLINK:\n            currCmdNum = CMD_BLINK;\n            blinkingLedsOn = true;\n            setDutyCycles(&args, nextLedCmd.red, \n                            nextLedCmd.green, nextLedCmd.blue);\n            break;\n        //additional cases not shown\n    }\n}\n```", "```cpp\nelse if (currCmdNum == CMD_BLINK)\n{\n    //if there is no new command and we should be blinking\n    if(blinkingLedsOn)\n    {\n        blinkingLedsOn = false;\n        setDutyCycles(&args, 0, 0, 0);\n    }\n    else\n    {\n        blinkingLedsOn = true;\n        setDutyCycles(  &args, nextLedCmd.red, \n                        nextLedCmd.green, nextLedCmd.blue);\n    }\n}\n```", "```cpp\nvoid setDutyCycles( const CmdExecArgs* Args, float RedDuty,                            float GreenDuty, float BlueDuty)\n{\n  Args->redPWM->SetDutyCycle(RedDuty);\n  Args->greenPWM->SetDutyCycle(GreenDuty);\n  Args->bluePWM->SetDutyCycle(BlueDuty);\n}\n```", "```cpp\nStreamBufferHandle_t const * GetUsbRxStreamBuff( void )\n{\n  return &vcom_rxStream;\n}\n```", "```cpp\nvoid frameDecoder( void* NotUsed)\n{\n  LedCmd incomingCmd;\n  #define FRAME_LEN 9\n  uint8_t frame[FRAME_LEN];\n  while(1)\n  {\n    memset(frame, 0, FRAME_LEN);\n    while(frame[0] != 0x02)\n    {\n      xStreamBufferReceive( *GetUsbRxStreamBuff(), frame, 1,\n                                             portMAX_DELAY);\n    }\n    xStreamBufferReceive( *GetUsbRxStreamBuff(),\n      &frame[1],\n      FRAME_LEN-1,\n      portMAX_DELAY);\n    if(CheckCRC(frame, FRAME_LEN))\n    {\n      incomingCmd.cmdNum = frame[1];\n      incomingCmd.red = frame[2]/255.0 * 100;\n      incomingCmd.green = frame[3]/255.0 * 100;\n      incomingCmd.blue = frame[4]/255.0 * 100;\n      xQueueSend(ledCmdQueue, &incomingCmd, 100);\n    }\n  }\n}\n```", "```cpp\nLedCmd incomingCmd;\n#define FRAME_LEN 9\nuint8_t frame[FRAME_LEN];\n```", "```cpp\nmemset(frame, 0, FRAME_LEN);\n```", "```cpp\n while(frame[0] != 0x02)\n {\n     xStreamBufferReceive( *GetUsbRxStreamBuff(), frame, 1, \n                                            portMAX_DELAY);\n }\n```", "```cpp\nxStreamBufferReceive( *GetUsbRxStreamBuff(), &frame[1], \n                           FRAME_LEN-1, portMAX_DELAY);\n```", "```cpp\nif(CheckCRC(frame, FRAME_LEN))\n```", "```cpp\n incomingCmd.cmdNum = frame[1];\n incomingCmd.red = frame[2]/255.0 * 100;\n incomingCmd.green = frame[3]/255.0 * 100;\n incomingCmd.blue = frame[4]/255.0 * 100;\n```", "```cpp\n xQueueSend(ledCmdQueue, &incomingCmd, 100);\n```", "```cpp\nstatic int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)\n{\n  /* USER CODE BEGIN 6 */\n  portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;\n\n  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);\n  xStreamBufferSendFromISR( *GetUsbRxStreamBuff(),\n        Buf,\n        *Len,\n        &xHigherPriorityTaskWoken);\n\n  USBD_CDC_ReceivePacket(&hUsbDeviceFS);\n  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);\n  return (USBD_OK);\n  /* USER CODE END 6 */\n}\n```", "```cpp\nLedCmd cmd = {.cmdNum=3, .red=20, .blue=30, .green=100};\nxQueueSend(ledCmdQueue, &cmd, 100);\n```"]