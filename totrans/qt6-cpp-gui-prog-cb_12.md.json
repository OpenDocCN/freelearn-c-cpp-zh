["```cpp\n    QT += core gui mainwindow.ui and drag seven label widgets, a combo box, and a checkbox to the canvas. Set the text properties of four of the labels to Name:, Age:, Gender:, and Married:. Then, set the objectName properties of the rest to name, age, gender, and married. There is no need to set the object name for the previous four labels because they’re for display purposes only:\n    ```", "```cpp\n    #include <QMainWindow>\n    #include <QtSql>\n    #include <QSqlDatabase>\n    #include <QSqlQuery>\n    mainwindow.cpp and insert the following code into the class constructor:\n\n    ```", "```cpp\n\n    ```", "```cpp\n         if (db.open()) {\n               QSqlQuery query;\n               if (query.exec(\"SELECT emp_name, emp_age, emp_gender, emp_married FROM employee\")) {\n                     while (query.next()) {\n                           qDebug() << query.value(0) << query.value(1) <<\n    query.value(2) << query.value(3);\n                           ui->name->setText(query.value(0).toString());\n                           ui->age->setText(query.value(1).toString());\n                           ui->gender->setCurrentIndex(query.value(2).toInt());\n                           ui->married->setChecked(query.value(3).toBool());\n                     }\n               }\n    ```", "```cpp\n               else {\n                     qDebug() << query.lastError().text();\n               }\n               db.close();\n         }\n         else {\n               qDebug() << \"Failed to connect to database.\";\n         }\n    }\n    ```", "```cpp\n    private:\n         Ui::MainWindow *ui;\n         QSqlDatabase db;\n         bool connected;\n         mainwindow.cpp and go to the class constructor. It is still pretty much the same as the previous example, except we store the database connection status in a Boolean variable called connected, and we also obtain the ID of the data from the database and store it in an integer variable called currentID:\n\n    ```", "```cpp\n\n    ```", "```cpp\n         if (connected) {\n               QSqlQuery query;\n               if (query.exec(\"SELECT emp_id, emp_name, emp_age, emp_gender, emp_married FROM employee\")) {\n                     while (query.next()) {\n                           currentID = query.value(0).toInt();\n                           ui->name->setText(query.value(1).toString());\n                           ui->age->setText(query.value(2).toString());\n                           ui->gender->setCurrentIndex(query.value(3).toInt());\n                           ui->married->setChecked(query.value(4).toBool());\n                     }\n               }\n    ```", "```cpp\n               else {\n                     qDebug() << query.lastError().text();\n               }\n         }\n         else {\n               qDebug() << \"Failed to connect to database.\";\n         }\n    }\n    ```", "```cpp\n    private slots:\n         void on_updateButton_clicked();\n         void on_insertButton_clicked();\n         void on_deleteButton_clicked();\n    ```", "```cpp\n    void MainWindow::on_updateButton_clicked() {\n         if (connected) {\n               if (currentID == 0) {\n                     qDebug() << \"Nothing to update.\";\n               }\n               else {\n                     QString id = QString::number(currentID);\n                     QString name = ui->name->text();\n                     QString age = ui->age->text();\n                     QString gender =\n    QString::number(ui->gender->currentIndex());\n                     QString married =\n    QString::number(ui->married->isChecked());\n    ```", "```cpp\n                     qDebug() << \"UPDATE employee SET emp_name = '\" + name + \"', emp_age = '\" + age + \"', emp_gender = \" + gender + \", emp_married = \" + married + \" WHERE emp_id = \" + id;\n                     QSqlQuery query;\n                     if (query.exec(\"UPDATE employee SET emp_name = '\" + name + \"', emp_age = '\" + age + \"', emp_gender = \" + gender + \", emp_married = \" + married + \" WHERE emp_id = \" + id)) {\n                           qDebug() << \"Update success.\";\n                     }\n    ```", "```cpp\n                     else {\n                           qDebug() << query.lastError().text();\n                     }\n               }\n         }\n         else {\n               qDebug() << \"Failed to connect to database.\";\n         }\n    }\n    ```", "```cpp\n    void MainWindow::on_insertButton_clicked() {\n         if (connected) {\n               QString name = ui->name->text();\n               QString age = ui->age->text();\n               QString gender =\n    QString::number(ui->gender->currentIndex());\n               QString married =\n    QString::number(ui->married->isChecked());\n               qDebug() << \"INSERT INTO employee (emp_name, emp_age, emp_gender, emp_married) VALUES ('\" + name + \"','\" + age + \"', \" + gender + \",\" + married + \")\";\n    ```", "```cpp\n               QSqlQuery query;\n               if (query.exec(\"INSERT INTO employee (emp_name, emp_age, emp_gender, emp_married) VALUES ('\" + name + \"','\" + age + \"', \" + gender + \",\" + married + \")\")) {\n                     currentID = query.lastInsertId().toInt();\n                     qDebug() << \"Insert success.\";\n               } else {\n                     qDebug() << query.lastError().text();\n               }\n         }\n         else {\n               qDebug() << \"Failed to connect to database.\";\n         }\n    }\n    ```", "```cpp\n    void MainWindow::on_deleteButton_clicked() {\n         if (connected) {\n               if (currentID == 0) {\n                     qDebug() << \"Nothing to delete.\";\n               } else {\n                     QString id = QString::number(currentID);\n                     qDebug() << \"DELETE FROM employee WHERE emp_id = \" + id;\n                     QSqlQuery query;\n                     if (query.exec(\"DELETE FROM employee WHERE emp_id = \" + id)) {\n                           currentID = 0;\n                           qDebug() << \"Delete success.\";\n                     } else {\n                           qDebug() << query.lastError().text();\n                     }\n               }\n         }\n         else {\n               qDebug() << \"Failed to connect to database.\";\n         }\n    }\n    ```", "```cpp\n    MainWindow::~MainWindow() {\n         db.close();\n         delete ui;\n    }\n    ```", "```cpp\n    #include <QMainWindow>\n    #include <QtSql>\n    #include <QSqlDatabase>\n    #include <QSqlQuery>\n    #include <QMessageBox>\n    mainwindow.h:\n\n    ```", "```cpp\n\n    ```", "```cpp\n    MainWindow::MainWindow(QWidget *parent) :\n         QMainWindow(parent),\n         ui(new Ui::MainWindow) {\n         ui->setupUi(this);\n         ui->stackedWidget->setCurrentIndex(0);\n         db = QSqlDatabase::addDatabase(\"QSQLITE\");\n         db.setDatabaseName(\"database.db3\");\n         if (!db.open()) {\n               qDebug() << \"Failed to connect to database.\";\n         }\n    }\n    ```", "```cpp\n    void MainWindow::on_loginButton_clicked() {\n         QString username = ui->username->text();\n         QString password = ui->password->text();\n         QSqlQuery query;\n         if (query.exec(\"SELECT user_employeeID from user WHERE user_username = '\" + username + \"' AND user_password = '\" + password + \"'\")) {\n               int resultSize = 0;\n               while (query.next()) {\n                     QString employeeID = query.value(0).toString();\n                     QSqlQuery query2;\n    ```", "```cpp\n                     if (query2.exec(\"SELECT emp_name, emp_age, emp_gender, emp_married FROM employee WHERE emp_id = \" + employeeID)) {\n                           while (query2.next()) {\n                                 QString name = query2.value(0).toString();\n                                 QString age = query2.value(1).toString();\n                                 int gender = query2.value(2).toInt();\n                                 bool married = query2.value(3).toBool();\n                                 ui->name->setText(name);\n                                 ui->age->setText(age);\n    ```", "```cpp\n                                 if (gender == 0)\n                                       ui->gender->setText(\"Male\");\n                                 else\n                                       ui->gender->setText(\"Female\");\n                                 if (married)\n                                       ui->married->setText(\"Yes\");\n                                 else\n                                       ui->married->setText(\"No\");\n                                 ui->stackedWidget->setCurrentIndex(1);\n                           }\n                     }\n                     resultSize++;\n               }\n    ```", "```cpp\n               if (resultSize == 0)\n               {\n                     QMessageBox::warning(this, \"Login failed\", \"Invalid username or password.\");\n               }\n         }\n         else\n         {\n               qDebug() << query.lastError().text();\n         }\n    }\n    ```", "```cpp\n    void MainWindow::on_logoutButton_clicked() {\n         ui->stackedWidget->setCurrentIndex(0);\n    }\n    ```", "```cpp\n    MainWindow::~MainWindow() {\n         db.close();\n         delete ui;\n    }\n    ```", "```cpp\n    private:\n         Ui::MainWindow *ui;\n         bool hasInit;\n         mainwindow.h:\n\n    ```", "```cpp\n\n    ```", "```cpp\n    MainWindow::MainWindow(QWidget *parent) :\n         QMainWindow(parent),\n         ui(new Ui::MainWindow)\n    {\n         hasInit = false;\n         ui->setupUi(this);\n         db = QSqlDatabase::addDatabase(\"QSQLITE\");\n         db.setDatabaseName(\"database.db3\");\n         ui->tableWidget->setColumnHidden(0, true);\n    ```", "```cpp\n         if (db.open()) {\n               QSqlQuery query;\n               if (query.exec(\"SELECT emp_id, emp_name, emp_age, emp_gender, emp_married FROM employee\")) {\n                     while (query.next()) {\n                           qDebug() << query.value(0) << query.value(1) << query.value(2) << query.value(3) << query.value(4);\n                           QString id = query.value(0).toString();\n                           QString name = query.value(1).toString();\n                           QString age = query.value(2).toString();\n                           int gender = query.value(3).toInt();\n                           bool married = query.value(4).toBool();\n    ```", "```cpp\n                           ui->tableWidget->setRowCount(ui->tableWidget->rowCount() + 1);\n                           QTableWidgetItem* idItem = new QTableWidgetItem(id);\n                           QTableWidgetItem* nameItem = new QTableWidgetItem(name);\n                           QTableWidgetItem* ageItem = new QTableWidgetItem(age);\n                           QTableWidgetItem* genderItem = new QTableWidgetItem();\n                           if (gender == 0)\n                                 genderItem->setData(0, \"Male\");\n                           else\n                                 genderItem->setData(0, \"Female\");\n                           QTableWidgetItem* marriedItem = new QTableWidgetItem();\n                           if (married)\n                                 marriedItem->setData(0, \"Yes\");\n                           else\n                                 marriedItem->setData(0, \"No\");\n    ```", "```cpp\n                           ui->tableWidget->setItem(ui->tableWidget->rowCount() - 1, 0, idItem);\n                           ui->tableWidget->setItem(ui->tableWidget->rowCount() - 1, 1, nameItem);\n                           ui->tableWidget->setItem(ui->tableWidget->rowCount() - 1, 2, ageItem);\n                           ui->tableWidget->setItem(ui->tableWidget->rowCount() - 1, 3, genderItem);\n                           ui->tableWidget->setItem(ui->tableWidget->rowCount() - 1, 4, marriedItem);\n                     }\n                     hasInit = true;\n               }\n               else {\n                     qDebug() << query.lastError().text();\n               }\n         }\n         else {\n               qDebug() << \"Failed to connect to database.\";\n         }\n    }\n    ```", "```cpp\n    void MainWindow::on_tableWidget_itemChanged(QTableWidgetItem *item) {\n         if (hasInit) {\n               QString id = ui->tableWidget->item(item->row(), 0)->data(0).toString();\n               QString name = ui->tableWidget->item(item->row(), 1)->data(0).toString();\n               QString age = QString::number(ui->tableWidget->item(item->row(), 2)->data(0).toInt());\n               ui->tableWidget->item(item->row(), 2)->setData(0, age);\n               QString gender;\n               if (ui->tableWidget->item(item->row(), 3)->data(0).toString() == \"Male\") {\n                     gender = \"0\";\n               } else {\n                     ui->tableWidget->item(item->row(), 3)->setData(0,\"Female\");\n                     gender = \"1\";\n               }\n               QString married;\n               if (ui->tableWidget->item(item->row(), 4)->data(0).toString() == \"No\") {\n                     married = \"0\";\n               } else {\n                     ui->tableWidget->item(item->row(), 4)->setData(0, \"Yes\");\n                     married = \"1\";\n               }\n               qDebug() << id << name << age << gender << married;\n               QSqlQuery query;\n               if (query.exec(\"UPDATE employee SET emp_name = '\" + name + \"', emp_age = '\" + age + \"', emp_gender = '\" + gender + \"', emp_married = '\" + married + \"' WHERE emp_id = \" + id)) {\n                     QMessageBox::information(this, \"Update Success\", \"Data updated to database.\");\n               } else {\n                     qDebug() << query.lastError().text();\n               }\n         }\n    }\n    ```", "```cpp\n    MainWindow::~MainWindow() {\n         db.close();\n         delete ui;\n    }\n    ```", "```cpp\n    QT += core sql\n    main.cpp and add the following header files to the top of the source file:\n\n    ```", "```cpp\n\n    ```", "```cpp\n    void filterAge() {\n         qDebug() << \"== Employees above 40 year old =============\";\n         QSqlQuery query;\n         if (query.exec(\"SELECT emp_name, emp_age FROM employee WHERE emp_age > 40\")) {\n               while (query.next()) {\n                     qDebug() << query.value(0).toString() << query.value(1).toString();\n               }\n         }\n         else {\n         qDebug() << query.lastError().text();\n         }\n    }\n    ```", "```cpp\n    void getDepartmentAndBranch() {\n         qDebug() << \"== Get employees' department and branch =============\";\n         QSqlQuery query;\n         if (query.exec(\"SELECT emp_name, dep_name, brh_name FROM (SELECT emp_name, emp_departmentID FROM employee) AS myEmployee INNER JOIN department ON department.dep_id = myEmployee.emp_departmentID INNER JOIN branch ON branch.brh_id = department.dep_branchID\")) {\n               while (query.next()) {\n                     qDebug() << query.value(0).toString() << query.value(1).toString() << query.value(2).toString();\n               }\n         }\n         else {\n               qDebug() << query.lastError().text();\n         }\n    }\n    ```", "```cpp\n    void filterBranchAndAge() {\n         qDebug() << \"== Employees from New York and age below 40 =============\";\n         QSqlQuery query;\n         if (query.exec(\"SELECT emp_name, emp_age, dep_name, brh_name FROM (SELECT emp_name, emp_age, emp_departmentID FROM employee) AS myEmployee INNER JOIN department ON department.dep_id = myEmployee.emp_departmentID INNER JOIN branch ON branch.brh_id = department.dep_branchID WHERE branch.brh_name = 'New York' AND myEmployee.emp_age < 40\")) {\n               while (query.next()) {\n                     qDebug() << query.value(0).toString() << query.value(1).toString() << query.value(2).toString() << query.value(3).toString();\n               }\n         }\n         else {\n         qDebug() << query.lastError().text();\n         }\n    }\n    ```", "```cpp\n    void countFemale() {\n         qDebug() << \"== Count female employees =============\";\n         QSqlQuery query;\n         if (query.exec(\"SELECT COUNT(emp_gender) FROM employee WHERE emp_gender = 1\")) {\n               while (query.next()) {\n                     qDebug() << query.value(0).toString();\n               }\n         }\n         else {\n               qDebug() << query.lastError().text();\n         }\n    }\n    ```", "```cpp\n    void filterName() {\n         qDebug() << \"== Employees name start with 'Ja' =============\";\n         QSqlQuery query;\n         if (query.exec(\"SELECT emp_name FROM employee WHERE emp_name LIKE '%Ja%'\")) {\n               while (query.next()) {\n                     qDebug() << query.value(0).toString();\n               }\n         }\n         else {\n               qDebug() << query.lastError().text();\n         }\n    }\n    ```", "```cpp\n    void filterBirthday() {\n         qDebug() << \"== Employees birthday in August =============\";\n         QSqlQuery query;\n         if (query.exec(\"SELECT emp_name, emp_birthday FROM employee WHERE strftime('%m', emp_birthday) = '08'\")) {\n               while (query.next()) {\n                     qDebug() << query.value(0).toString() << query.value(1).toDate().toString(\"d-MMMM-yyyy\");\n               }\n         }\n         else {\n               qDebug() << query.lastError().text();\n         }\n    }\n    ```", "```cpp\n    void checkLog() {\n         qDebug() << \"== Employees who logged in on 27 April 2024 =============\";\n         QSqlQuery query;\n         if (query.exec(\"SELECT DISTINCT emp_name FROM (SELECT emp_id, emp_name FROM employee) AS myEmployee INNER JOIN user ON user.user_employeeID = myEmployee.emp_id INNER JOIN log ON log.log_userID = user.user_id WHERE DATE(log.log_loginTime) = '2024-04-27'\")) {\n               while (query.next()) {\n                     qDebug() << query.value(0).toString();\n               }\n         }\n         else {\n               qDebug() << query.lastError().text();\n         }\n    }\n    ```", "```cpp\n    int main(int argc, char *argv[]) {\n         QCoreApplication a(argc, argv);\n         QSqlDatabase db = QSqlDatabase::addDatabase(\"QSQLITE\");\n         db.setDatabaseName(\"database.db3\");\n         if (db.open()) {\n               filterAge();\n               getDepartmentAndBranch();\n               filterBranchAndAge();\n               countFemale();\n               filterName();\n               filterBirthday();\n               checkLog();\n               db.close();\n         }\n         else {\n               qDebug() << \"Failed to connect to database.\";\n         }\n         return a.exec();\n    }\n    ```"]