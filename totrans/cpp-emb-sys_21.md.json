["```cpp\n#include <array>\n#include <algorithm>\n#include <cstdio>\nint main() {\n    std::array<int, 5> arr = {5, 3, 4, 1, 2};\n    std::array<int, 5>::iterator start = arr.begin();\n    auto finish = arr.end();\n    std::sort(start, finish);\n    for (auto it = arr.begin(); it != arr.end(); ++it) {\n        printf(\"%d \", *it);\n    }\n    printf(\"\\n\");\n    return 0;\n} \n```", "```cpp\n    $ sudo systemctl start docker\n    $ docker run --network=host -d -it --name dev_env mahmutbegovic/cpp_in_embedded_systems\n    $ docker exec -it dev_env /bin/bash \n    ```", "```cpp\n$ docker run -d -it --name dev_env -p 33000:33000 -p 8080:8080 mahmutbegovic/cpp_in_embedded_systems \n```", "```cpp\n    $ git clone https://pigweed.googlesource.com/pigweed/showcase/sense \n    ```", "```cpp\n    $ device.rpcs.board.Board.OnboardTemp() \n    ```", "```cpp\n$ (Status.OK, board.OnboardTempResponse(temp=20.0)) \n```", "```cpp\n    $ device.rpcs.blinky.Blinky.Blink(interval_ms=200, blink_count=3) \n    ```", "```cpp\nsyntax = \"proto3\";\npackage blinky;\nimport \"pw_protobuf_protos/common.proto\";\nservice Blinky {\n// Toggles the LED on or off.\nrpc ToggleLed(pw.protobuf.Empty) returns(pw.protobuf.Empty);\n// Blinks the board LED a specified number of times.\nrpc Blink(BlinkRequest) returns (pw.protobuf.Empty);\n}\nmessage BlinkRequest {\n// The interval at which to blink the LED, in milliseconds. uint32 interval_ms = 1;\n// The number of times to blink the LED.\noptional uint32 blink_count = 2;\n} \n```", "```cpp\nclass BlinkyService final : public ::blinky::pw_rpc::nanopb::Blinky::Service {\npublic:\n    pw::Status ToggleLed(const pw_protobuf_Empty&, pw_protobuf_Empty&);\n    pw::Status Blink(const blinky_BlinkRequest& request, pw_protobuf_Empty&);\nprivate:\n    Blinky blinky_;\n}; \n```", "```cpp\npw::Status BlinkyService::ToggleLed(\nconst pw_protobuf_Empty&,\npw_protobuf_Empty&)\n{\n    blinky_.Toggle();\n    return pw::OkStatus();\n}\npw::Status BlinkyService::Blink(\nconst blinky_BlinkRequest& request,\npw_protobuf_Empty&) \n{\n    uint32_t interval_ms = request.interval_ms;\n    uint32_t blink_count = request.has_blink_count;\n    return blinky_.Blink(blink_count, interval_ms);\n} \n```", "```cpp\n$ cmake –B build\n$ cmake --build build --target run_in_renode \n```", "```cpp\n    struct send_temperature : public callback::service<float> {}; \n    ```", "```cpp\n    struct display_temperature_component {\n    constexpr static auto display_temperature = [](float temperature) {\n        printf(\"Temperature is %.2f C\\r\\n\", temperature);\n    };\n    constexpr static auto config = cib::config(\n        cib::extend<send_temperature>(display_temperature)\n    );\n    };\n    struct data_sender_component {\n    constexpr static auto send_temp = [](float temp) {\n        printf(\"Sending temperature %.2f C\\r\\n\", temp);\n    };\n    constexpr static auto config = cib::config(\n        cib::extend<send_temperature>(send_temp)\n    );\n    }; \n    ```", "```cpp\nstruct my_project {\nconstexpr static auto config = cib::config(\n    cib::exports<send_temperature>,\n\n    cib::components<display_temperature_component,\n                    data_sender_component>\n);\n}; \n```", "```cpp\n    int main() {\n        cib::nexus<my_project> nexus{};\n        nexus.init();\n        for(int i = 0; i < 3; i++)\n        {\n            nexus.service<send_temperature>(42.0f);\n        }\n        return 0;\n    } \n    ```", "```cpp\n    struct runtime_init : public flow::service<> {};\n    struct main_loop : public callback::service<> {}; \n    ```", "```cpp\n    struct i2c {\n    constexpr static auto init = flow::action<\"i2c_init\">(\n        [](){\n            printf(\"I2C init ...\\r\\n\");\n        });\n    constexpr static auto config = cib::config(\n        cib::extend<runtime_init>(*init)\n    );\n    }; \n    ```", "```cpp\n    struct temperature_sensor_component {\n    constexpr static auto init = flow::action<\"temp_sensor_init\">(\n        []() {\n            printf(\"Initializing temperature sensor ... \\r\\n\");\n        });\n    constexpr static auto read_temperature = []() {\n        float temperature = 23.4f;\n        cib::service<send_temperature>(temperature);\n    };\n    constexpr static auto config = cib::config(\n\n        cib::extend<main_loop>(read_temperature),\n        cib::extend<runtime_init>(i2c::init >> *init)\n    );\n    }; \n    ```", "```cpp\n    struct my_project {\n    constexpr static auto config = cib::config(\n        cib::exports<runtime_init,\n                     main_loop,\n                     send_temperature>,\n\n        cib::components<i2c,\n                        temperature_sensor_component,\n                        display_temperature_component,\n                        data_sender_component>\n    );\n    }; \n    ```", "```cpp\n    int main() {\n        cib::nexus<my_project> nexus{};\n        nexus.init();\n        nexus.service<runtime_init>();\n        for(int i = 0; i < 3; i++)\n        {\n            nexus.service<main_loop>();\n        }\n        return 0;\n    } \n    ```", "```cpp\n$ cmake –B build\n$ cmake --build build --target run_in_renode \n```", "```cpp\nI2C init ...\nInitializing temperature sensor ...\nSending temperature 23.40 C\nTemperature is 23.40 C\nSending temperature 23.40 C\nTemperature is 23.40 C\nSending temperature 23.40 C\nTemperature is 23.40 C \n```"]