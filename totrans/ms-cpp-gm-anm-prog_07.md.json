["```cpp\n[database-config]\ntype = mysql\nhost = mysql\nport = 3306\nuser = app1\npassword = ASafePassWord1# \n```", "```cpp\n{\n  \"database-config\": {\n    \"type\": \"mysql\",\n    \"host\": \"mysql\",\n    \"port\": 3306,\n    \"user\": \"app1\",\n    \"password\": \"ASafePassWord1#\"\n  }\n} \n```", "```cpp\ndatabase-config:\n  type: mysql\n  host: mysql\n  port: 3306\n  user: app1\n  password: ASafePassWord1# \n```", "```cpp\nof a configuration file as an example:\n```", "```cpp\ndatabase-config:\n  type: mysql \n```", "```cpp\ndatabase-config:\n  type: mysql\n  host: mysql\n  port: 3306 \n```", "```cpp\ncolors:\n  - red\n  - green\n  - blue \n```", "```cpp\ncolors: [red, green, blue] \n```", "```cpp\ninstances:\n  - position: [0, 0, 0]\n    rotation: [0, 0, 0]\n  - position: [1, 0, -3]\n    rotation: [0, 90, 0]\n  - position: [3, 0, 3]\n    rotation: [0, -90, 0] \n```", "```cpp\nsudo apt install libyaml-cpp-dev \n```", "```cpp\nsudo pacman â€“S yaml-cpp \n```", "```cpp\n FetchContent_Declare(\n    yaml-cpp\n    GIT_REPOSITORY https://github.com/jbeder/yaml-cpp\n    GIT_TAG 0.8.0\n  ) \n```", "```cpp\n FetchContent_MakeAvailable(yaml-cpp)\n  FetchContent_GetProperties(yaml-cpp)\n  if(NOT yaml-cpp_POPULATED)\n    FetchContent_Populate(yaml-cpp)\n    add_subdirectory(${yaml-cpp_SOURCE_DIR}\n      ${yaml-cpp_BINARY_DIR} EXCLUDE_FROM_ALL)\n  endif() \n```", "```cpp\nfind_path(YAML-CPP_INCLUDE_DIR yaml-cpp/yaml.h\n          PATHS ${YAML-CPP_DIR}/include/)\nfind_library(YAML-CPP_LIBRARY\n             NAMES ${YAML-CPP_STATIC} yaml-cpp\n             PATHS  ${YAML-CPP_DIR}/lib) \n```", "```cpp\ninclude_directories(... ${YAML_CPP_INCLUDE_DIR}) \n```", "```cpp\ntarget_link_libraries(... yaml-cpp::yaml-cpp) \n```", "```cpp\ntarget_link_libraries(... yaml-cpp) \n```", "```cpp\n#include <yaml-cpp/yaml.h> \n```", "```cpp\n YAML::Node mYamlNode{};\n    YAML::Emitter mYamlEmit{}; \n```", "```cpp\n mYamlNode = YAML::LoadFile(fileName);\n  YAML::Node settingsNode = mYamlNode[\"settings\"]; \n```", "```cpp\n int value = dataNode.as<int>(); \n```", "```cpp\nInstanceSetting instSet = instNode.as<InstanceSettings>(); \n```", "```cpp\nfor (size_t i = 0; i < instNode.size(); ++i) {\n  instSettings.emplace_back(\n    instNode[i].as<InstanceSettings>());\n} \n```", "```cpp\nfor(auto it = settingsNode.begin();\n    it != settingsNode.end(); ++it) {\n  if (it->first.as<std::string>() == \"selected-model\") {\n    ....\n  }\n} \n```", "```cpp\n try {\n    mYamlNode = YAML::LoadFile(fileName);\n  } catch(...) {\n    return false;\n  } \n```", "```cpp\nYAML::Emitter& operator<<(YAML::Emitter& out,\n    const glm::vec3& vec) {\n  out << YAML::Flow;\n  out << YAML::BeginSeq;\n  out << vec.x << vec.y << vec.z;\n  out << YAML::EndSeq;\n  return out;\n} \n```", "```cpp\n[1, 2, 3] \n```", "```cpp\nYAML::Emitter& operator<<(YAML::Emitter& out,\n    const InstanceSettings& settings) {\n  out << YAML::Key << \"model-file\";\n  out << YAML::Value << settings.isModelFile;\n  out << YAML::Key << \"position\";\n  out << YAML::Value << settings.isWorldPosition;\n  out << YAML::Key << \"rotation\";\n  out << YAML::Value << settings.isWorldRotation\n  ...\n} \n```", "```cpp\nYamlParser parser;\nif (!parser.createConfigFile(mRenderData, mModelInstData)) {\n    return false;\n  } \n```", "```cpp\n mYamlEmit << YAML::Comment(\"Application viewer\n    config file\");\n  mYamlEmit << YAML::BeginMap;\n  mYamlEmit << YAML::Key << \"version\";\n  mYamlEmit << YAML::Value << 1.0f;\n  mYamlEmit << YAML::EndMap;\n  ... \n```", "```cpp\n# Application viewer config file\nversion: 1 \n```", "```cpp\n mYamlEmit << YAML::BeginMap;\n  mYamlEmit << YAML::Key << \"instances\";\n  mYamlEmit << YAML::Value;\n  mYamlEmit << YAML::BeginSeq; \n```", "```cpp\nfor (const auto& instance : modInstData.miAssimpInstances) {\n  mYamlEmit << YAML::BeginMap;\n  mYamlEmit << instance->getInstanceSettings();\n  mYamlEmit << YAML::EndMap;\n} \n```", "```cpp\n mYamlEmit << YAML::EndSeq;\n  mYamlEmit << YAML::EndMap \n```", "```cpp\ninstances:\n  - model-file: Woman.gltf\n    position: [0, 0, 0]\n    rotation: [0, 0, 0]\n    scale: 1\n    swap-axes: false\n    anim-clip-number: 0\n    anim-clip-speed: 1 \n```", "```cpp\n Logger::log(1, \"%s\\n\", mYamlEmit.c_str()); \n```", "```cpp\nbool YamlParser::writeYamlFile(std::string fileName) {\n  std::ofstream fileToWrite(fileName);\n  fileToWrite << mYamlEmit.c_str();\n  fileToWrite.close();\n  return true;\n} \n```", "```cpp\n config.flags = ImGuiFileDialogFlags_Modal |\n      ImGuiFileDialogFlags_ConfirmOverwrite; \n```", "```cpp\n const std::string defaultFileName = \"config/conf.acfg\";\n    config.filePathName = defaultFileName.c_str(); \n```", "```cpp\n ImGuiFileDialog::Instance()->OpenDialog(\n      \"SaveConfigFile\", \"Save Configuration File\",\n      \".acfg\", config); \n```", "```cpp\n if (ImGuiFileDialog::Instance()->IsOk()) {\n      std::string filePathName =\n        ImGuiFileDialog::Instance()->GetFilePathName();\n      saveSuccessful =\n        modInstData.miSaveConfigCallbackFunction(\n        filePathName);\n    } \n```", "```cpp\nnamespace YAML {\n  template<>\n  struct convert<glm::vec3> {\n    static Node encode(const glm::vec3& rhs) {\n      Node node;\n      node.push_back(rhs.x);\n      node.push_back(rhs.y);\n      node.push_back(rhs.z);\n      return node;\n    } \n```", "```cpp\n static bool decode(const Node& node, glm::vec3& rhs) {\n      if(!node.IsSequence() || node.size() != 3) {\n        return false;\n      } \n```", "```cpp\n rhs.x = node[0].as<float>();\n      rhs.y = node[1].as<float>();\n      rhs.z = node[2].as<float>();\n      return true;\n    }\n  }; \n```", "```cpp\nglm::vec3 data;\nnode[\"rotation\"] = data.isWorldRotation;\ndata.isWorldRotation = node[\"rotation\"].as<glm::vec3>(); \n```", "```cpp\n const std::string mDefaultConfigFileName =\n      \"config/conf.acfg\"; \n```", "```cpp\n if (!loadConfigFile(mDefaultConfigFileName)) {\n    addNullModelAndInstance();\n  } \n```"]