["```cpp\n  char*  student_first_names[10];\n  char*  student_surnames[10];\n   int   student_ages[10];\ndouble   student_marks[10];\n```", "```cpp\n  char*  aaa[10];\n  char*  bbb[10];\n   int   ccc[10];\ndouble   ddd[10];\n```", "```cpp\nint pixel_p1_x     = 56;\nint pixel_p1_y     = 34;\nint pixel_p1_red   = 123;\nint pixel_p1_green = 37;\nint pixel_p1_blue  = 127;\nint pixel_p2_x     = 212;\nint pixel_p2_y     = 994;\nint pixel_p2_red   = 127;\nint pixel_p2_green = 127;\nint pixel_p2_blue  = 0;\n```", "```cpp\ntypedef struct {\n  int x, y;\n  int red, green, blue;\n} pixel_t;\npixel_t p1, p2;\np1.x = 56;\np1.y = 34;\np1.red = 123;\np1.green = 37;\np1.blue = 127;\np2.x = 212;\np2.y = 994;\np2.red = 127;\np2.green = 127;\np2.blue = 0;\n```", "```cpp\n// Construct an empty object\nvar clientObj = {};\n// Set the attributes\nclientObj.name = \"John\";\nclientObj.surname = \"Doe\";\n// Add a method for ordering a bank account\nclientObj.orderBankAccount = function () {\n  ...\n}\n...\n// Call the method\nclientObj.orderBankAccount();\n```", "```cpp\nclass Client {\npublic:\n  void orderBankAccount() {\n    ...\n  }\n  std::string name;\n  std::string surname:\n};\n...\nClient clientObj;\nclientObj.name = \"John\";\nclientObj.surname = \"Doe\";\n...\nclientObj.orderBankAccount ();\n```", "```cpp\n#ifndef EXTREME_C_EXAMPLES_CHAPTER_6_1_H\n#define EXTREME_C_EXAMPLES_CHAPTER_6_1_H\n// This structure keeps all the attributes\n// related to a car object\ntypedef struct {\n  char name[32];\n  double speed;\n  double fuel;\n} car_t;\n// These function declarations are \n// the behaviors of a car object\nvoid car_construct(car_t*, const char*);\nvoid car_destruct(car_t*);\nvoid car_accelerate(car_t*);\nvoid car_brake(car_t*);\nvoid car_refuel(car_t*, double);\n#endif\n```", "```cpp\n#include <string.h>\n#include \"ExtremeC_examples_chapter6_1.h\"\n// Definitions of the above functions\nvoid car_construct(car_t* car, const char* name) {\n  strcpy(car->name, name);\n  car->speed = 0.0;\n  car->fuel = 0.0;\n}\nvoid car_destruct(car_t* car) {\n  // Nothing to do here!\n}\nvoid car_accelerate(car_t* car) {\n  car->speed += 0.05;\n  car->fuel -= 1.0;\n  if (car->fuel < 0.0) {\n    car->fuel = 0.0;\n  }\n}\nvoid car_brake(car_t* car) {\n  car->speed -= 0.07;\n  if (car->speed < 0.0) {\n    car->speed = 0.0;\n  }\n  car->fuel -= 2.0;\n  if (car->fuel < 0.0) {\n    car->fuel = 0.0;\n  }\n}\nvoid car_refuel(car_t* car, double amount) {\n  car->fuel = amount;\n}\n```", "```cpp\n#include <stdio.h>\n#include \"ExtremeC_examples_chapter6_1.h\"\n// Main function\nint main(int argc, char** argv) {\n  // Create the object variable\n  car_t car;\n  // Construct the object\n  car_construct(&car, \"Renault\");\n  // Main algorithm\n  car_refuel(&car, 100.0);\n  printf(\"Car is refueled, the correct fuel level is %f\\n\",\n    car.fuel);\n  while (car.fuel > 0) {\n    printf(\"Car fuel level: %f\\n\", car.fuel);\n    if (car.speed < 80) {\n      car_accelerate(&car);\n      printf(\"Car has been accelerated to the speed: %f\\n\", \n  car.speed);\n    } else {\n      car_brake(&car);\n      printf(\"Car has been slowed down to the speed: %f\\n\",\n  car.speed);\n    }\n  }\n  printf(\"Car ran out of the fuel! Slowing down ...\\n\");\n  while (car.speed > 0) {\n    car_brake(&car);\n    printf(\"Car has been slowed down to the speed: %f\\n\", \n      car.speed);\n  }\n  // Destruct the object\n  car_destruct(&car);\n  return 0;\n} \n```", "```cpp\n#ifndef EXTREME_C_EXAMPLES_CHAPTER_6_2_H\n#define EXTREME_C_EXAMPLES_CHAPTER_6_2_H\nclass Car {\npublic:\n  // Constructor\n  Car(const char*);\n  // Destructor\n  ~Car();\n  void Accelerate();\n  void Brake();\n  void Refuel(double);\n  // Data Members (Attributes in C)\n  char name[32];\n  double speed;\n  double fuel;\n};\n#endif\n```", "```cpp\n#include <string.h>\n#include \"ExtremeC_examples_chapter6_2.h\"\nCar::Car(const char* name) {\n  strcpy(this->name, name);\n  this->speed = 0.0;\n  this->fuel = 0.0;\n}\nCar::~Car() {\n  // Nothing to do\n}\nvoid Car::Accelerate() {\n  this->speed += 0.05;\n  this->fuel -= 1.0;\n  if (this->fuel < 0.0) {\n    this->fuel = 0.0;\n  }\n}\nvoid Car::Brake() {\n  this->speed -= 0.07;\n  if (this->speed < 0.0) {\n    this->speed = 0.0;\n  }\n  this->fuel -= 2.0;\n  if (this->fuel < 0.0) {\n    this->fuel = 0.0;\n  }\n}\nvoid Car::Refuel(double amount) {\n  this->fuel = amount;\n}\n```", "```cpp\n// File name: ExtremeC_examples_chapter6_2_main.cpp\n// Description: Main function\n#include <iostream>\n#include \"ExtremeC_examples_chapter6_2.h\"\n// Main function\nint main(int argc, char** argv) {\n  // Create the object variable and call the constructor\n  Car car(\"Renault\");\n  // Main algorithm\n  car.Refuel(100.0);\n  std::cout << \"Car is refueled, the correct fuel level is \"\n    << car.fuel << std::endl;\n  while (car.fuel > 0) {\n    std::cout << \"Car fuel level: \" << car.fuel << std::endl;\n    if (car.speed < 80) {\n      car.Accelerate();\n      std::cout << \"Car has been accelerated to the speed: \"\n        << car.speed << std::endl;\n    } else {\n      car.Brake();\n      std::cout << \"Car has been slowed down to the speed: \"\n        << car.speed << std::endl;\n    }\n  }\n  std::cout << \"Car ran out of the fuel! Slowing down ...\"\n    << std::endl;\n  while (car.speed > 0) {\n    car.Brake();\n    std::cout << \"Car has been slowed down to the speed: \"\n      << car.speed << std::endl;\n  }\n  std::cout << \"Car is stopped!\" << std::endl;\n  // When leaving the function, the object 'car' gets\n  // destructed automatically.\n  return 0;\n}\n```", "```cpp\n#ifndef EXTREME_C_EXAMPLES_CHAPTER_6_3_H\n#define EXTREME_C_EXAMPLES_CHAPTER_6_3_H\n#include <unistd.h>\n// The attribute structure with no disclosed attribute\nstruct list_t;\n// Allocation function\nstruct list_t* list_malloc();\n// Constructor and destructor functions\nvoid list_init(struct list_t*);\nvoid list_destroy(struct list_t*);\n// Public behavior functions\nint list_add(struct list_t*, int);\nint list_get(struct list_t*, int, int*);\nvoid list_clear(struct list_t*);\nsize_t list_size(struct list_t*);\nvoid list_print(struct list_t*);\n#endif\n```", "```cpp\n#include <stdio.h>\n#include <stdlib.h>\n#define MAX_SIZE 10\n// Define the alias type bool_t\ntypedef int bool_t;\n// Define the type list_t\ntypedef struct {\n size_t size;\n int* items;\n} list_t;\n// A private behavior which checks if the list is full\nbool_t __list_is_full(list_t* list) {\n  return (list->size == MAX_SIZE);\n}\n// Another private behavior which checks the index\nbool_t __check_index(list_t* list, const int index) {\n  return (index >= 0 && index <= list->size);\n}\n// Allocates memory for a list object\nlist_t* list_malloc() {\n  return (list_t*)malloc(sizeof(list_t));\n}\n// Constructor of a list object\nvoid list_init(list_t* list) {\n  list->size = 0;\n  // Allocates from the heap memory\n  list->items = (int*)malloc(MAX_SIZE * sizeof(int));\n}\n// Destructor of a list object\nvoid list_destroy(list_t* list) {\n  // Deallocates the allocated memory\n  free(list->items);\n}\nint list_add(list_t* list, const int item) {\n  // The usage of the private behavior\n  if (__list_is_full(list)) {\n    return -1;\n  }\n  list->items[list->size++] = item;\n  return 0;\n}\nint list_get(list_t* list, const int index, int* result) {\n  if (__check_index(list, index)) {\n    *result = list->items[index];\n    return 0;\n  }\n  return -1;\n}\nvoid list_clear(list_t* list) {\n  list->size = 0;\n}\nsize_t list_size(list_t* list) {\n  return list->size;\n}\nvoid list_print(list_t* list) {\n  printf(\"[\");\n  for (size_t i = 0; i < list->size; i++) {\n    printf(\"%d \", list->items[i]);\n  }\n  printf(\"]\\n\");\n}\n```", "```cpp\n#include <stdlib.h>\n#include \"ExtremeC_examples_chapter6_3.h\"\nint reverse(struct list_t* source, struct list_t* dest) {\n  list_clear(dest);\n  for (size_t i = list_size(source) - 1; i >= 0; i--) {\n    int item;\n    if(list_get(source, i, &item)) {\n      return -1;\n    }\n    list_add(dest, item);\n  }\n  return 0;\n}\nint main(int argc, char** argv) {\n  struct list_t* list1 = list_malloc();\n  struct list_t* list2 = list_malloc();\n  // Construction\n  list_init(list1);\n  list_init(list2);\n  list_add(list1, 4);\n  list_add(list1, 6);\n  list_add(list1, 1);\n  list_add(list1, 5);\n  list_add(list2, 9);\n  reverse(list1, list2);\n  list_print(list1);\n  list_print(list2);\n  // Destruction\n  list_destroy(list1);\n  list_destroy(list2);\n  free(list1);\n  free(list2);\n  return 0;\n}\n```", "```cpp\n$ gcc -c ExtremeC_examples_chapter6_3.c -o private.o\n$ gcc -c ExtremeC_examples_chapter6_3_main.c -o main.o\n```", "```cpp\n$ gcc main.o -o ex6_3.out\nmain.o: In function 'reverse':\nExtremeC_examples_chapter6_3_main.c:(.text+0x27): undefined reference to 'list_clear'\n...\nmain.o: In function 'main':\nExtremeC_examples_chapter6_3_main.c:(.text+0xa5): undefined reference to 'list_malloc'\n...                                                                                                                               collect2: error: ld returned 1 exit status\n$\n```", "```cpp\n$ gcc main.o private.o -o ex6_3.out\n$ ./ex6_3.out\n[4 6 1 5 ]\n[5 1 6 4 ]\n$\n```", "```cpp\n$ gcc main.o private2.o -o ex6_3.out\n$ ./ex6_3.out\n[4 6 1 5 ]\n[5 1 6 4 ]\n$\n```"]