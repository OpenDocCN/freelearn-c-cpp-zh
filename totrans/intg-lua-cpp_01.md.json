["```cpp\nlua-5.4.6 % ls\nMakefile README doc src\n```", "```cpp\n% echo $SHELL\n/bin/zsh\n```", "```cpp\ncd ~/Downloads/lua-5.4.6\nlua-5.4.6 %\n```", "```cpp\nlua-5.4.6 % ls\nMakefile README doc src\n```", "```cpp\nlua-5.4.6 % ls src/*.a src/lua\nsrc/liblua.a src/lua\n```", "```cpp\nlua-5.4.6 % src/lua\nLua 5.4.6 Copyright (C) 1994-2022 Lua.org, PUC-Rio\n> 1+1\n2\n> os.exit()\n```", "```cpp\nTO_INC= lua.h luaconf.h lualib.h lauxlib.h lua.hpp\nTO_LIB= liblua.a\n```", "```cpp\nproject-with-lua-lib % tree\n.\n├── Makefile\n├── lua\n│   ├── include\n│   │   ├── lauxlib.h\n│   │   ├── lua.h\n│   │   ├── lua.hpp\n│   │   ├── luaconf.h\n│   │   └── lualib.h\n│   └── lib\n│       └── liblua.a\n└── main.cpp\n```", "```cpp\n#include <iostream>\n#include <lua.hpp>\nint main()\n{\n    lua_State *L = luaL_newstate();\n    std::cout << \"Lua version number is \"\n              << lua_version(L)\n              << std::endl;\n    lua_close(L);\n    return 0;\n}\n```", "```cpp\nproject-with-lua-lib: main.cpp\n    g++ -o project-with-lua-lib main.cpp -Ilua/include \\\n        -Llua/lib -llua\n```", "```cpp\nproject-with-lua-lib % make\nproject-with-lua-lib % ./project-with-lua-lib\nLua version number is 504\n```", "```cpp\nlua-5.4.6 % ls\nMakefile README doc src\n```", "```cpp\nproject-with-lua-src % tree\n.\n├── Makefile\n├── lua\n│   ├── Makefile\n│   ├── lapi.c\n│   ├── ...\n│   ├── lzio.c\n│   └── lzio.h\n└── main.cpp\n```", "```cpp\nproject-with-lua-src: main.cpp\n    cd lua && make\n    g++ -o project-with-lua-src main.cpp -Ilua -Llua -llua\nclean:\n    rm -f project-with-lua-src\n    cd lua && make clean\n```", "```cpp\nproject-with-lua-src % make\nproject-with-lua-src % ./project-with-lua-arc\nLua version number is 504\n```", "```cpp\nproject-with-lua-src % make clean\nrm -f project-with-lua-src\ncd lua && make clean\nrm -f liblua.a lua luac lapi.o lcode.o lctype.o ldebug.o\nldo.o ldump.o lfunc.o lgc.o llex.o lmem.o lobject.o\nlopcodes.o lparser.o lstate.o lstring.o ltable.o ltm.o\nlundump.o lvm.o lzio.o lauxlib.o lbaselib.o lcorolib.o\nldblib.o liolib.o lmathlib.o loadlib.o loslib.o lstrlib.o\nltablib.o lutf8lib.o linit.o lua.o luac.o\n```", "```cpp\n% tree\n.\n├── Chapter01\n│   ├── execute-lua-script\n│   │   ├── Makefile\n│   │   ├── main.cpp\n│   │   └── script.lua\n│   ├── project-with-lua-lib\n│   └── project-with-lua-src\n└── lua\n     ├── Makefile\n     ├── README\n     ├── doc\n     └── src\n```", "```cpp\nLUA_PATH = ../../lua\nCXX = g++\nCXXFLAGS = -Wall -Werror\nCPPFLAGS = -I ${LUA_PATH}/src\nLDFLAGS = -L ${LUA_PATH}/src\nEXECUTABLE = executable\nall: lua project\nlua:\n    @cd  ${LUA_PATH} && make\nproject: main.cpp\n    $(CXX) $(CXXFLAGS) $(CPPFLAGS) $(LDFLAGS) \\\n        -o $(EXECUTABLE) main.cpp -llua\nclean:\n    rm -f $(EXECUTABLE)\n```", "```cpp\n#include <iostream>\n#include <lua.hpp>\nint main()\n{\n    lua_State *L = luaL_newstate();\n    luaL_openlibs(L);\n    if (luaL_loadfile(L, \"script.lua\") ||\n        lua_pcall(L, 0, 0, 0))\n    {\n        std::cout << \"Error: \"\n                  << lua_tostring(L, -1)\n                  << std::endl;\n        lua_pop(L, 1);\n    }\n    lua_close(L);\n    return 0;\n}\n```", "```cpp\nexecute-lua-script % make\nexecute-lua-script % ./executable\nError: cannot open script.lua: No such file or directory\n```", "```cpp\nprint(\"Hello C++!\")\n```", "```cpp\nexecute-lua-script % ./executable\nHello C++!\n```"]