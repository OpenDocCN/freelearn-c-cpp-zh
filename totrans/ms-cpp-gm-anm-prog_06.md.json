["```cpp\nenum class appMode {\n  edit = 0,\n  view\n}; \n```", "```cpp\n appMode rdApplicationMode = appMode::edit; \n```", "```cpp\n if (mRenderData.rdApplicationMode == appMode::edit) {\n    ...\n  } \n```", "```cpp\n if (mMousePick &&\n          mRenderData.rdApplicationMode == appMode::edit) {\n        mAssimpSkinningSelectionShader.use();\n      } else {\n        mAssimpSkinningShader.use();\n      } \n```", "```cpp\n if (mRenderData.rdApplicationMode == appMode::edit) {\n    mUIDrawTimer.start();\n    mUserInterface.render();\n    mRenderData.rdUIDrawTime = mUIDrawTimer.stop();\n  } \n```", "```cpp\n if (glfwGetKey(mRenderData.rdWindow, GLFW_KEY_F10) ==\n      GLFW_PRESS) {\n    mRenderData.rdApplicationMode =\n      mRenderData.rdApplicationMode == appMode::edit ?\n      appMode::view : appMode::edit;\n    setModeInWindowTitle();\n  } \n```", "```cpp\nvoid OGLRenderer::setModeInWindowTitle() {\n  if (mRenderData.rdApplicationMode == appMode::edit) {\n    setWindowTitle(mOrigWindowTitle + \" (Edit Mode)\");\n  } else {\n    setWindowTitle(mOrigWindowTitle + \" (View Mode)\");\n  }\n} \n```", "```cpp\n mOrigWindowTitle = getWindowTitle();\n  setModeInWindowTitle(); \n```", "```cpp\nusing GetWindowTitleCallback =\n  std::function<std::string(void)>;\nusing SetWindowTitleCallback =\n  std::function<void(std::string)> \n```", "```cpp\n SetWindowTitleCallback setWindowTitle;\n    GetWindowTitleCallback getWindowTitle; \n```", "```cpp\n std::string getWindowTitle();\n    void setWindowTitle(std::string newTitle); \n```", "```cpp\n std::string mWindowTitle; \n```", "```cpp\n mRenderer->getWindowTitle = [this]()\n    { return getWindowTitle(); };\n  mRenderer->setWindowTitle = [this](std::string\n    windowTitle) { setWindowTitle(windowTitle); }; \n```", "```cpp\n std::shared_ptr<AssimpInstance> mCurrentInstance;\n    InstanceSettings mSavedInstanceSettings{}; \n```", "```cpp\n if (numberOfInstances > 0) {\n      settings = modInstData.miAssimpInstances.at(\n        modInstData.miSelectedInstance)\n        ->getInstanceSettings(); \n```", "```cpp\n if (mCurrentInstance !=\n          modInstData.miAssimpInstances.at(\n          modInstData.miSelectedInstance)) {\n        mSavedInstanceSettings = settings;\n        mCurrentInstance =\n          modInstData.miAssimpInstances.at(\n          modInstData.miSelectedInstance);\n      }\n    } \n```", "```cpp\n ImGui::SameLine();\n    if (ImGui::Button(\"Reset Values to Previous\")) {\n        settings = mSavedInstanceSettings;\n    } \n```", "```cpp\n ImGui::SameLine();\n    if (ImGui::Button(\"Apply Changes\")) {\n      mSavedInstanceSettings = settings;\n    } \n```", "```cpp\nstruct AssimpInstanceSettings {\n  std::weak_ptr<AssimpInstance> aisInstance;\n  InstanceSettings aisInstanceSettings{};\n  InstanceSettings aisSavedInstanceSettings{};\n}; \n```", "```cpp\n mModelInstData.miSettingsContainer->undo();\n  assignInstanceIndices(); \n```", "```cpp\n if (mRenderData.rdApplicationMode == appMode::edit) {\n    if (glfwGetKey(mRenderData.rdWindow,\n        GLFW_KEY_Z) == GLFW_PRESS &&\n        (glfwGetKey(mRenderData.rdWindow,\n        GLFW_KEY_LEFT_CONTROL) == GLFW_PRESS ||\n        glfwGetKey(mRenderData.rdWindow,\n        GLFW_KEY_RIGHT_CONTROL) == GLFW_PRESS)) {\n      undoLastOperation();\n    }\n    ...\n  } \n```", "```cpp\n if (ImGui::BeginMainMenuBar()) {\n    if (ImGui::BeginMenu(\"Edit\")) {\n      if (ImGui::MenuItem(\"Undo\", \"CTRL+Z\")) {\n        modInstData.miUndoCallbackFunction();\n      }\n      if (ImGui::MenuItem(\"Redo\", \"CTRL+Y\")) {\n        modInstData.miRedoCallbackFunction();\n      }\n      ImGui::EndMenu();\n    }\n    ImGui::EndMainMenuBar();\n  } \n```", "```cpp\nPractical sessions section.\n```"]