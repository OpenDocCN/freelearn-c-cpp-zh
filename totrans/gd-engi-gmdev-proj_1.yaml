- en: Introduction
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Whether it's your desired career or a recreational hobby, game development is
    a fun and rewarding endeavor. There never been a better time to get started in
    game development. Modern programming languages and tools have made it easier than
    ever to build high- quality games and distribute them to the world. If you're
    reading this book, then you've set your feet on the path to making the game of
    your dreams.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 不论是你心仪的职业还是休闲爱好，游戏开发都是一项有趣且有益的活动。现在正是开始游戏开发的绝佳时机。现代编程语言和工具使得构建高质量游戏并将其分发到全球变得更加容易。如果你正在阅读这本书，那么你已经踏上了实现梦想游戏的道路。
- en: This book is an introduction to the Godot game engine and its new 3.0 version,
    which was released in early 2018\. Godot 3.0 has a large number of new features
    and capabilities that make it a strong alternative to expensive commercial game
    engines. For beginners, it offers a friendly way to learn fundamental game development
    techniques. For more experienced developers, Godot is a powerful, customizable,
    and *open* tool for bringing your visions to life.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本书是关于Godot游戏引擎及其新3.0版本的入门指南，该版本于2018年初发布。Godot 3.0拥有大量新特性和功能，使其成为昂贵商业游戏引擎的有力替代品。对于初学者来说，它提供了一种友好的学习基础游戏开发技术的方法。对于更有经验的开发者来说，Godot是一个强大、可定制且*开放*的工具，可以帮助你将愿景变为现实。
- en: This book takes a project-based approach that will introduce you to the fundamentals
    of the engine. It consists of five games that are designed to help you achieve
    a sound understanding of game development concepts and how they're applied in
    Godot. Along the way, you will learn how Godot works and absorb important techniques
    that you can apply to your projects.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本书采用基于项目的教学方法，将向你介绍引擎的基本原理。它包含五个游戏，旨在帮助你深入理解游戏开发概念及其在Godot中的应用。在这个过程中，你将学习Godot的工作原理，并吸收可以应用于你项目的关键技术。
- en: General advice
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一般建议
- en: This section contains some general advice to readers, based on the author's
    experience as a teacher and lecturer. Keep these tips in mind as you work through
    the book, especially if you're very new to programming.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本节包含一些基于作者作为教师和讲师经验的读者一般建议。在阅读本书的过程中，特别是如果你对编程非常陌生，请记住这些提示。
- en: Try to follow the projects in the book in order. Later chapters may build on
    topics that were introduced in earlier chapters, where they are explained in more
    detail. When you encounter something that you don't remember, go back and review
    that topic in the earlier chapter. No one is timing you, and there's no prize
    for finishing the book quickly.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 尽量按照书中的项目顺序进行。后面的章节可能会基于前面章节介绍的主题，进行更详细的解释。当你遇到你不记得的内容时，回到前面的章节复习那个主题。没有人会给你计时，快速完成本书也没有奖励。
- en: There is a lot of material to absorb here. Don't feel discouraged if you don't
    get it at first. The goal is not to become an expert in game development overnight—that's
    just not possible. Repetition is the key to learning complex topics; the more
    you work with Godot's features, the more familiar and *easy* they will start to
    seem. Try looking back at [Chapter 2](f24a8958-bb32-413a-97ae-12c9e7001c2c.xhtml),
    *Coin Dash*, when you finish [Chapter 7](3d5cd7c5-b53a-4731-88f9-fab128f609a1.xhtml),
    *Additional Topics*. You'll be surprised at how much more you'll understand compared
    to the first time you read it.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有很多内容需要吸收。如果你一开始没有理解，不要气馁。目标不是一夜之间成为游戏开发专家——这是不可能的。重复是学习复杂主题的关键；你越是用Godot的功能进行工作，它们就会变得越熟悉、*越容易*。当你完成[第7章](3d5cd7c5-b53a-4731-88f9-fab128f609a1.xhtml)，“附加主题”后，试着回顾[第2章](f24a8958-bb32-413a-97ae-12c9e7001c2c.xhtml)，“金币冲刺”。你会惊讶于与第一次阅读相比，你将理解得多得多。
- en: 'If you''re using the PDF version of this book, resist the temptation to copy
    and paste the code. Typing the code yourself will engage more of your brain. It''s
    similar to how taking notes during a lecture helps you learn better than just
    listening, even if you never read the notes. If you''re a slow typist, it will
    also help you work on your typing speed. In a nutshell: you''re a programmer,
    so get used to typing code!'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是本书的PDF版本，请抵制复制粘贴代码的诱惑。自己输入代码将更多地调动你的大脑。这类似于在讲座中做笔记，即使你从未阅读过笔记，也能帮助你更好地学习，甚至比单纯听讲效果更好。如果你打字速度慢，这也有助于你提高打字速度。总之：你是一名程序员，所以习惯于输入代码！
- en: One of the biggest mistakes that new game developers make is taking on a bigger
    project than they can handle. It is very important to keep the scope of your project
    as small as possible when starting out. You will be much more successful (and
    learn more) if you finish two or three small games than if you have a large, incomplete
    project that has grown beyond your ability to manage.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 新游戏开发者犯的最大错误之一是承担了超出他们能力范围的项目。在开始时，将项目的范围尽可能缩小非常重要。如果你完成两三个小型游戏，你将比拥有一个庞大且不完整的项目（该项目已经超出了你的管理能力）更有成功的机会（并且学到更多）。
- en: You'll notice that the five games in this book follow this strategy very strictly.
    They are all small in scope, both for practical reasons—to fit reasonably into
    book-sized lessons—but also to remain focused on teaching you the basics. As you
    build them, you will likely find yourself thinking of additional features and
    gameplay elements right away. *What if the spaceship had upgrades?* *What if the
    character could do wall jumps?*
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到，这本书中的五个游戏非常严格地遵循这种策略。它们在范围上都较小，这不仅出于实际原因——以便合理地适应书籍大小的课程——而且为了保持专注于教授基础知识。当你构建它们时，你可能会立即想到额外的功能和游戏元素。*如果太空船有升级会怎样？*
    *如果角色能做墙壁跳跃会怎样？*
- en: Ideas are great, but if you haven't finished the basic project yet, write them
    down and save them for later. Don't let yourself be sidetracked by one *cool idea*
    after another. Developers call this *feature creep*, and it's a trap that has
    led to many an unfinished game. Don't fall victim to it.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 灵感是伟大的，但如果你还没有完成基本项目，就把它们写下来并保存起来，留待以后使用。不要让自己被一个又一个“酷炫的想法”所分心。开发者称之为“功能蔓延”，这是一个导致许多游戏未完成的陷阱。不要成为受害者。
- en: Finally, don't forget to take a break now and again. You shouldn't try and power
    through the whole book in just a few sittings. After each new concept, and especially
    after each chapter, give yourself time to absorb the new information before you
    dive into the next one. You'll find that you not only retain more information,
    but you'll probably enjoy the process more.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，别忘了时不时地休息一下。你不应该在几场阅读中就试图完成整本书。在每个新概念之后，尤其是在每个章节之后，在你深入研究下一个概念之前，给自己一些时间来吸收新信息。你会发现，你不仅记得更多信息，而且可能会更享受这个过程。
- en: What is a game engine?
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是游戏引擎？
- en: Game development is complex and involves a wide variety of knowledge and skills. In
    order to build a modern game, you need a great deal of underlying technology before
    you can make the actual game itself. Imagine that you had to build your own computer
    and write your own operating system before you could even start programming. Game
    development would be a lot like that if you truly had to start from scratch and
    build *everything* you needed.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏开发是复杂的，涉及广泛的知识和技能。为了构建现代游戏，在你可以制作实际游戏之前，你需要大量的底层技术。想象一下，在你开始编程之前，你必须自己构建计算机并编写自己的操作系统。如果你真的需要从头开始构建你需要的所有东西，游戏开发就会像那样。
- en: In addition, there are a number of common needs that every game has. For example,
    no matter what the game is, it's going to need to draw things on the screen. If
    the code to do that has already been written, it makes more sense to reuse it
    than to create it all over again for every game. That's where game frameworks
    and engines come in.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，每个游戏都有一些共同的需求。例如，无论游戏是什么，它都需要在屏幕上绘制东西。如果已经编写了执行此操作的代码，那么重用它而不是为每个游戏重新创建它更有意义。这就是游戏框架和引擎发挥作用的地方。
- en: A **game framework** is a set of libraries with helper code that assists in
    building the foundational parts of a game. It doesn't necessarily provide all
    the pieces, and you may still have to write a great deal of code to tie everything
    together. Because of this, building a game with a game framework can take more
    time than one built with a full game engine.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**游戏框架**是一组带有辅助代码的库，它有助于构建游戏的基础部分。它不一定提供所有组件，你可能仍然需要编写大量代码来整合一切。正因为如此，使用游戏框架构建游戏可能比使用完整的游戏引擎花费更多时间。'
- en: A **game engine** is a collection of tools and technologies designed to ease
    the process of game-making by removing the need to *reinvent the wheel* for each
    new game project. It provides a framework of commonly needed functionality that
    often needs a significant investment in time to develop.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**游戏引擎**是一系列工具和技术集合，旨在通过消除每个新游戏项目需要重新发明轮子的需求，来简化游戏制作过程。它提供了一个通常需要的功能框架，这通常需要大量的时间投入来开发。'
- en: 'Here is a list of some of the main features a game engine will provide:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个游戏引擎将提供的一些主要功能的列表：
- en: '**Rendering (2D and 3D)**: Rendering is the process of displaying your game
    on the player''s screen. A good rendering pipeline must take into account modern
    GPU support, high-resolution displays, and effects like lighting, perspective,
    and viewports, while maintaining a very high frame rate.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**渲染（2D和3D）**：渲染是将你的游戏显示在玩家屏幕上的过程。一个好的渲染管线必须考虑到现代GPU支持、高分辨率显示器以及光照、透视和视口等效果，同时保持非常高的帧率。'
- en: '**Physics**: While a very common requirement, building a robust and accurate
    physics engine is a monumental task. Most games require some sort of collision
    detection and response system, and many need physics simulation, but few developers
    want to take on the task of writing one, especially if they have ever tried to
    do so.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**物理学**：虽然这是一个非常常见的要求，但构建一个强大且精确的物理引擎是一项艰巨的任务。大多数游戏都需要某种形式的碰撞检测和响应系统，许多游戏还需要物理模拟，但很少有开发者愿意承担编写这样一个系统的任务，尤其是如果他们曾经尝试过的话。'
- en: '**Platform support**: In today''s market, most developers want to be able to
    release their games on multiple platforms, such as consoles, mobile, PC, and/or
    the web. A game engine provides a unified exporting process to publish on multiple
    platforms without needing to rewrite game code or support multiple versions.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**平台支持**：在当今的市场中，大多数开发者都希望能够在多个平台上发布他们的游戏，例如游戏机、移动设备、PC和/或网页。游戏引擎提供了一个统一的导出过程，可以在多个平台上发布游戏，而无需重写游戏代码或支持多个版本。'
- en: '**Common development environment**: By using the same unified interface to
    make multiple games, you don''t have to re learn a new workflow every time you
    start a new project.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**常见开发环境**：通过使用相同的统一界面来制作多个游戏，你不必每次开始一个新项目时都重新学习新的工作流程。'
- en: In addition, there will be tools to assist with features such as networking,
    easing the process of working with images and sound, animations, debugging, level
    creation, and many more. Often, game engines will include the ability to import
    content from other tools such as those used to create animations or 3D models.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还将提供辅助工具，以帮助处理网络、图像和声音、动画、调试、关卡创建等功能。通常，游戏引擎将包括从其他工具导入内容的能力，例如用于创建动画或3D模型的工具。
- en: Using a game engine allows the developer to focus on building their game, rather
    than creating all of the underlying framework needed to make it work. For small
    or independent developers, this can mean the difference between releasing a game
    after one year of development instead of three, or even never at all.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 使用游戏引擎可以让开发者专注于构建他们的游戏，而不是创建使游戏运行所需的所有底层框架。对于小型或独立开发者来说，这可能意味着在开发一年后发布游戏而不是三年，甚至根本无法发布。
- en: There are dozens of popular game engines on the market today, such as Unity,
    Unreal Engine, and GameMaker Studio, just to name a few. An important fact to
    be aware of is that the majority of popular game engines are commercial products.
    They may or may not require any financial investment to get started, but they
    will require some kind of licensing and/or royalty payments if your game makes
    money. Whatever engine you choose, you need to carefully read the user agreement
    and make sure you understand what you are and are not allowed to with the engine,
    and what hidden costs, if any, you may be responsible for.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 目前市场上有很多流行的游戏引擎，例如Unity、Unreal Engine和GameMaker Studio，仅举几个例子。一个需要了解的重要事实是，大多数流行的游戏引擎都是商业产品。它们可能或可能不需要任何财务投资来开始，但如果你的游戏赚钱，它们将需要某种形式的许可和/或版税支付。无论你选择哪个引擎，你都需要仔细阅读用户协议，并确保你理解你可以和不可以使用该引擎，以及你可能需要承担的任何潜在费用。
- en: On the other hand, there are some engines which are non-commercial and *open
    source*, such as the Godot game engine, which is what this book is all about.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，有一些引擎是非商业性的和*开源*的，例如Godot游戏引擎，这正是本书的主题。
- en: What is Godot?
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是Godot？
- en: Godot is a fully featured modern game engine, providing all of the features
    described in the previous section and more. It is also completely free and open
    source, released under the very permissive MIT license. This means there are no
    fees, no hidden costs, and no royalties to pay on your game's revenue. Everything
    you make with Godot 100% belongs to you, which is not the case with many commercial
    game engines that require an ongoing contractual relationship. For many developers,
    this is very appealing.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Godot是一个功能齐全的现代游戏引擎，提供了上一节中描述的所有功能以及更多。它也是完全免费和开源的，在非常宽松的MIT许可下发布。这意味着没有费用，没有隐藏成本，也没有需要支付版税的收入。你用Godot制作的一切100%属于你，而许多要求持续合同关系的商业游戏引擎则不是这样。对于许多开发者来说，这一点非常有吸引力。
- en: If you're not familiar with the concept of open source, community-driven development,
    this may seem strange to you. However, much like the Linux kernel, Firefox browser,
    and many other very well-known pieces of software, Godot is not developed by a
    company as a commercial product. Instead, a dedicated community of passionate
    developers donate their time and expertise to building the engine, testing and
    fixing bugs, producing documentation, and more.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不太熟悉开源、社区驱动的开发概念，这可能会让你感到奇怪。然而，与Linux内核、Firefox浏览器和许多其他非常著名的软件类似，Godot不是由公司作为商业产品开发的。相反，一群热心的开发者捐赠他们的时间和专业知识来构建引擎、测试和修复错误、制作文档等等。
- en: As a game developer, the benefits of using Godot are vast. Because it is unencumbered
    by commercial licensing, you have complete control over exactly how and where
    your game is distributed. Many commercial game engines restrict the types of projects
    you can make, or require a much more expensive license to build games in certain
    categories, such as gambling.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名游戏开发者，使用Godot的好处是巨大的。因为它不受商业许可的束缚，你可以完全控制你的游戏如何以及在哪里分发。许多商业游戏引擎限制了你可以制作的项目类型，或者要求为某些类别（如赌博）的游戏购买更昂贵的许可。
- en: Godot's open source nature also means there is a level of transparency that
    doesn't exist with commercial game engines. For example, if you find that a particular
    engine feature doesn't quite meet your needs, you are free to modify the engine
    itself and add the new features you need, no permission required. This can also
    be very helpful when debugging a large project, because you have full access to
    the engine's internal workings.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Godot的开源特性也意味着它具有一种与商业游戏引擎不同的透明度。例如，如果你发现某个特定的引擎功能并不完全符合你的需求，你可以自由地修改引擎本身并添加你需要的新功能，无需任何许可。这在调试大型项目时也非常有帮助，因为你能够完全访问引擎的内部运作。
- en: It also means that you can directly contribute to Godot's future. See [Chapter
    7](3d5cd7c5-b53a-4731-88f9-fab128f609a1.xhtml), *Additional Topics*, for more
    information about how you can get involved with Godot development.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这还意味着你可以直接为Godot的未来做出贡献。参见[第7章](3d5cd7c5-b53a-4731-88f9-fab128f609a1.xhtml)，*附加主题*，了解更多关于如何参与Godot开发的信息。
- en: Downloading Godot
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载Godot
- en: You can download the latest version of Godot by visiting [https://godotengine.org/](https://godotengine.org/) and
    clicking Download. This book is written for version 3.0\. If the version you download
    has another number at the end (like 3.0.3), that's fine—this just means that it
    includes updates to version 3.0 that fix bugs or other issues.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过访问[https://godotengine.org/](https://godotengine.org/)并点击下载来获取Godot的最新版本。本书是为3.0版本编写的。如果你下载的版本末尾有另一个数字（如3.0.3），那没关系——这仅仅意味着它包含了修复3.0版本中的错误或其他问题的更新。
- en: A version 3.1 release is currently in development and may have been released
    by the time you read this book. This version may or may not include changes that
    are incompatible with the code in this book. Check the GitHub repository for this
    book for information and errata: [https://github.com/PacktPublishing/Godot-Game-Engine-Projects](https://github.com/PacktPublishing/Godot-Game-Engine-Projects)
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 目前正在开发3.1版本，在你阅读这本书的时候可能已经发布。这个版本可能包含或不包含与本书代码不兼容的更改。请检查本书的GitHub仓库以获取信息和勘误：[https://github.com/PacktPublishing/Godot-Game-Engine-Projects](https://github.com/PacktPublishing/Godot-Game-Engine-Projects)
- en: 'On the download page, there are a few options that bear explaining. First,
    32-bit versus 64-bit: this option depends on your operating system and your computer''s
    processor. If you''re not sure, you should choose the 64-bit version. You will
    also see a *Mono Version*. This is a version specially built to be used with the
    C# programming language. Don''t download this one unless you plan to use C# with
    Godot. At the time of writing, C# support is still experimental, and is not recommended
    for beginners.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在下载页面，有几个选项需要解释。首先，32 位与 64 位：此选项取决于您的操作系统和您的计算机处理器。如果您不确定，您应该选择 64 位版本。您还会看到
    *Mono 版本*。这是一个专门为与 C# 编程语言一起使用而构建的版本。除非您计划使用 C# 与 Godot 一起使用，否则请不要下载此版本。在撰写本文时，C#
    支持仍然是实验性的，不建议初学者使用。
- en: Double-click on the file you downloaded to unzip it, and you'll have the Godot
    application. Optionally, you can drag it to your `Programs` or `Applications`
    folder, if you have one. Double-click the application to launch it and you'll
    see Godot's Project Manager window.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 双击您下载的文件以解压缩它，您将获得 Godot 应用程序。如果有的话，您还可以将其拖到您的 `Programs` 或 `Applications` 文件夹中。双击应用程序以启动它，您将看到
    Godot 的项目管理器窗口。
- en: Alternate installation methods
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 替代安装方法
- en: 'There are a few other ways to get Godot on your computer besides downloading
    it from the Godot website. Note that there is no difference in functionality when
    installed this way. The following are merely alternatives for downloading the
    application:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 除了从 Godot 网站下载之外，还有几种方法可以将 Godot 安装到您的计算机上。请注意，以这种方式安装时功能没有差异。以下仅是下载应用程序的替代方法：
- en: '**Steam**: If you have an account on Steam, you can install Godot via the Steam
    desktop application. Search for Godot in the Steam store and follow the instructions
    to install it. You can launch Godot from the Steam application and it will even
    track your *playtime*.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Steam**：如果您在 Steam 上有账户，您可以通过 Steam 桌面应用程序安装 Godot。在 Steam 商店中搜索 Godot，并按照说明进行安装。您可以从
    Steam 应用程序启动 Godot，它甚至还会跟踪您的 *游戏时间*。'
- en: '**Package Managers**: If you''re using one of the following operating system
    package managers, you can install Godot via its normal install process. See the
    documentation for your package manager for details. Godot is available in these
    package managers:'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**包管理器**：如果您使用以下操作系统的包管理器之一，您可以通过其正常安装过程安装 Godot。有关详细信息，请参阅您包管理器的文档。Godot 在以下包管理器中可用：'
- en: Homebrew (macOS)
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Homebrew (macOS)
- en: Scoop (Windows)
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Scoop (Windows)
- en: Snap (Linux)
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Snap (Linux)
- en: Overview of the Godot UI
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Godot UI 概览
- en: Like most game engines, Godot has a unified development environment. This means
    that you use the same interface to work on all of the aspects of your game—code,
    visuals, audio, and so on. This section is an introduction to the interface and
    its parts. Take note of the terminology used here; it will be used throughout
    this book when referring to actions you'll take in the editor window.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 与大多数游戏引擎一样，Godot 有一个统一的开发环境。这意味着您可以使用相同的界面来处理游戏的所有方面——代码、视觉效果、音频等等。本节是关于界面及其部分的介绍。请注意这里使用的术语；当在本书中提及编辑器窗口中的操作时，这些术语将贯穿全书。
- en: Project Manager
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目管理器
- en: 'The Project Manager is the first window you''ll see when you open Godot:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当您打开 Godot 时，您首先会看到的是项目管理器窗口：
- en: '![](img/45f9d5c9-0319-410f-a5e9-139a53c59215.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/45f9d5c9-0319-410f-a5e9-139a53c59215.png)'
- en: 'In this window, you can see a list of your existing Godot projects. You can
    choose an existing project and click Run to play the game or click Edit to work
    on it in the Godot Editor (refer to the following screenshot). You can also create
    a new project by clicking New Project:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在此窗口中，您可以查看您现有的 Godot 项目列表。您可以选择一个现有项目，点击 Run 来玩游戏或点击 Edit 在 Godot 编辑器中工作（参看以下截图）。您还可以通过点击
    New Project 创建一个新项目：
- en: '![](img/57d0c336-86a3-4684-9f60-48c37b6f571f.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/57d0c336-86a3-4684-9f60-48c37b6f571f.png)'
- en: Here, you can give the project a name and create a folder to store it in. Always
    try to choose a name that describes the project. Also keep in mind that different
    operating systems handle capitalization and spaces in filenames differently. It's
    a good idea to stick to lowercase and use underscores, `_`, instead of spaces
    for maximum compatibility.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您可以给项目起一个名字并创建一个文件夹来存储它。始终尝试选择一个能描述项目的名字。同时，请注意，不同的操作系统在处理文件名中的大小写和空格方面有所不同。为了最大兼容性，最好坚持使用小写字母并使用下划线
    `_` 而不是空格。
- en: Note the warning message—in Godot, each project is stored as a separate folder
    on the computer. All the files that the project uses are in this folder. Nothing
    outside of this project folder will be accessible in the game, so you need to
    put any images, sounds, models, or other data into the project folder. This makes
    it convenient to share Godot projects; you only need to zip the project folder
    and you can be confident that another Godot user will be able to open it and not
    be missing any necessary data.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 注意警告信息——在Godot中，每个项目都存储在电脑上的一个单独文件夹中。项目使用的所有文件都存放在这个文件夹中。项目文件夹之外的内容在游戏中将不可访问，所以你需要将任何图像、声音、模型或其他数据放入项目文件夹中。这使得共享Godot项目变得方便；你只需要压缩项目文件夹，就可以确信另一个Godot用户能够打开它，并且不会缺少任何必要的数据。
- en: Choosing filenames
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择文件名
- en: 'When you''re naming your new project, there are a few simple rules you should
    try and follow that may save you some trouble in the future. Give your project
    a name that describes what it is—*Wizard Battle Arena* is a much better project
    name than *Game #2*. In the future, you''ll never be able to remember which game
    #2 was, so be as descriptive as possible.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '当你命名你的新项目时，有一些简单的规则你应该尝试遵循，这可能会在将来为你节省一些麻烦。给你的项目起一个描述性的名字——*巫师战斗竞技场*比*游戏 #2*要好得多。将来，你永远也记不住哪个游戏
    #2 是什么，所以尽可能描述得详细。'
- en: 'You should also think about how you name your project folder and the files
    in it. Some operating systems are *case-sensitive* and distinguish between `My_Game`
    and `my_game`, while others do not. This can lead to problems if you move your
    project from one computer to another. For this reason, many programmers develop
    a standardized naming scheme for their projects, for example: *No spaces in filenames,
    use "_" between words*. Regardless of what naming scheme you adopt, the most important
    thing is to be consistent.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你还应该考虑如何命名你的项目文件夹和其中的文件。一些操作系统是**大小写敏感**的，区分`My_Game`和`my_game`，而另一些则不是。如果你将项目从一个电脑移动到另一个电脑，这可能会导致问题。因此，许多程序员为他们的项目制定了一个标准化的命名方案，例如：*文件名中不使用空格，单词之间使用"_"分隔*。无论你采用什么命名方案，最重要的是要保持一致性。
- en: Once you've created the project folder, the Create & Edit button will open the
    new project in the Editor window.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你创建了项目文件夹，创建和编辑按钮将打开编辑器窗口中的新项目。
- en: 'Try it now: create a project called `test_project`.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在试试：创建一个名为`test_project`的项目。
- en: If you're using a version of the Windows operating system, you'll also see a
    console window open when you run Godot. In this window, you can see warnings and
    errors produced by the engine and/or your project. This window doesn't appear
    under macOS or Linux, but you can see the console output if you launch the application
    from the command line using a Terminal program.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是Windows操作系统的版本，当你运行Godot时，你还会看到一个控制台窗口打开。在这个窗口中，你可以看到由引擎和/或你的项目产生的警告和错误。在macOS或Linux下，这个窗口不会出现，但如果你使用终端程序从命令行启动应用程序，你可以看到控制台输出。
- en: Editor window
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编辑器窗口
- en: 'The following is a screenshot of the main Godot editor window. This is where
    you will spend most of your time when building projects in Godot. The editor interface
    is divided into several sections, each offering different functionality. The specific
    terminology for each section is described as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Godot主编辑器窗口的截图。当你使用Godot构建项目时，你将在这里花费大部分时间。编辑器界面分为几个部分，每个部分提供不同的功能。每个部分的特定术语如下所述：
- en: '![](img/9e898853-13db-4ced-b2b0-c13c3370671c.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9e898853-13db-4ced-b2b0-c13c3370671c.png)'
- en: Godot Editor Window
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Godot编辑器窗口
- en: The main portion of the editor window is the Viewport. This is where you'll
    see parts of your game as you're working on them.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑器窗口的主要部分是视口。这就是你在工作时将看到游戏部分的地方。
- en: In the upper-left corner is the Main menus, where you can save and load files,
    edit project settings, and get help.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在左上角是主菜单，你可以在这里保存和加载文件，编辑项目设置，以及获取帮助。
- en: 'In the center at the top is a list of the Workspaces you can switch between
    when working on different parts of your game. You can switch between 2D and 3D
    mode, as well Script mode, where you can edit your game''s code. The AssetLib
    is a place where you can download add-ons and example projects. See [Chapter 7](3d5cd7c5-b53a-4731-88f9-fab128f609a1.xhtml),
    *Additional Topics*, for more information on using the AssetLib. Refer to the
    following screenshot:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在顶部中央是一个你可以切换到以处理游戏不同部分的**工作空间**列表。你可以切换到2D和3D模式，以及脚本模式，在那里你可以编辑游戏代码。AssetLib是一个你可以下载插件和示例项目的地方。有关使用AssetLib的更多信息，请参阅第7章，*附加主题*。请参考以下截图：
- en: '![](img/ba56f0bf-bc0b-4186-902c-adfd03d61c50.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ba56f0bf-bc0b-4186-902c-adfd03d61c50.png)'
- en: 'The following screenshot shows the Workspaces buttons on the toolbar. The icons
    in the toolbar will change based on what kind of object you are editing. So will
    the items in the Bottom panel, which will open various smaller windows for accessing
    specific information such as debugging, audio settings, and more:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了工具栏上的工作空间按钮。工具栏中的图标将根据你正在编辑的对象类型而改变。同样，底部面板中的项目也会改变，它将打开各种小窗口以访问特定信息，如调试、音频设置等：
- en: '![](img/bcdc0fb3-a9b8-4d25-ba25-4f9ac171d7d7.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/bcdc0fb3-a9b8-4d25-ba25-4f9ac171d7d7.png)'
- en: 'The buttons in the upper-right Playtest area are for launching the game and
    interacting with it when it''s running:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 上右角的**Playtest**区域的按钮用于启动游戏并在游戏运行时与之交互：
- en: '![](img/ccb6753f-8b55-4419-a88b-e2b2df28535d.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ccb6753f-8b55-4419-a88b-e2b2df28535d.png)'
- en: 'Finally, on the left and right sides are the Docksyou can use to view and select
    game items and set their properties. The left-hand dock contains the FileSystem
    tab:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在左侧和右侧是你可以用来查看和选择游戏项目并设置其属性的**停靠栏**。左侧停靠栏包含文件系统标签页：
- en: '![](img/c0fdd007-c791-49f2-9ef5-84462553b1bf.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c0fdd007-c791-49f2-9ef5-84462553b1bf.png)'
- en: 'All of the files inside the project folder are shown here, and you can click
    on folders to open them and see what they contain. All resources in your project
    will be located relative to `res://`, which is the project''s root folder. For
    example, a file path might look like this: `res://player/Player.tscn`.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这里显示了项目文件夹内的所有文件，你可以点击文件夹以打开它们并查看它们的内容。你的项目中的所有资源都将位于`res://`的相对位置，这是项目的根文件夹。例如，文件路径可能看起来像这样：`res://player/Player.tscn`。
- en: 'In the right-hand dock, you can see several tabs. The Scene tab shows the current
    scene you are working on in the Viewport. In the Inspector tab below it, you can
    see and adjust the properties of any object you select. Refer to the following
    screenshot:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在右侧的停靠栏中，你可以看到几个标签页。场景标签页显示了你在视图中正在工作的当前场景。在其下方的检查器标签页中，你可以查看和调整所选任何对象的属性。请参考以下截图：
- en: '![](img/548db3d8-c0e8-4234-8879-ef634bd4e58d.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/548db3d8-c0e8-4234-8879-ef634bd4e58d.png)'
- en: 'Selecting the Import tab and clicking on a file in the FileSystem tab lets
    you adjust how Godot imports resources like textures, meshes, and sounds, as shown
    in the following screenshot:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 选择导入标签页并在文件系统标签页中点击一个文件，让你可以调整Godot导入资源的方式，如纹理、网格和声音，如下面的截图所示：
- en: '![](img/944b8294-9eaf-4926-8a84-081175e8cdaa.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/944b8294-9eaf-4926-8a84-081175e8cdaa.png)'
- en: As you work through the game projects in this book, you'll learn about the functionality
    of these items and become familiar with navigating the editor interface. However,
    there are a few other concepts you need to know about before getting started.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在你通过本书中的游戏项目工作时，你会了解这些项目的功能并熟悉导航编辑器界面。然而，在开始之前，你需要了解一些其他概念。
- en: About nodes and scenes
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于节点和场景
- en: '**Nodes** are the basic building blocks for creating games in Godot. A node
    is an object that can represent a variety of specialized game functions. A given
    type of node might display graphics, play an animation, or represent a 3D model
    of an object. The node also contains a collection of properties, allowing you
    to customize its behavior. Which nodes you add to your project depends on what
    functionality you need. It''s a modular system designed to give you flexibility
    in building your game objects.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**节点**是Godot中创建游戏的基本构建块。节点是一个可以代表各种专用游戏功能的对象。给定类型的节点可能显示图形、播放动画或表示对象的3D模型。节点还包含一组属性，允许你自定义其行为。你添加到项目中的节点取决于你需要的功能。这是一个模块化系统，旨在在构建游戏对象时为你提供灵活性。'
- en: 'In your project, the nodes you add are organized into a *tree* structure. In
    a tree, nodes are added as *children* of other nodes. A particular node can have
    any number of children, but only one *parent* node. When a group of nodes are
    collected into a tree, it is called a **scene**, and the tree is referred to as
    the **scene tree**:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的项目中，你添加的节点被组织成一个 *树* 结构。在树中，节点被添加为其他节点的 *子节点*。一个特定的节点可以有任意数量的子节点，但只有一个 *父节点*。当一组节点被收集成一个树时，它被称为一个
    **场景**，而树被称为 **场景树**：
- en: '![](img/3b876fac-ec8b-4b81-b33b-bec54b1319b7.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3b876fac-ec8b-4b81-b33b-bec54b1319b7.png)'
- en: 'Scenes in Godot are typically used to create and organize the various game
    objects in your project. You might have a player scene that contains all the nodes
    and scripts that make the player''s character work. Then, you might create another
    scene that defines the game''s map: the obstacles and items that the player must
    navigate through. You can then combine these various scenes into the final game
    using *instancing*, which you''ll learn about later.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Godot 中，场景通常用于创建和组织项目中的各种游戏对象。你可能有一个包含所有使玩家角色工作的节点和脚本的玩家场景。然后，你可能创建另一个场景来定义游戏的地图：玩家必须导航的障碍和物品。然后，你可以使用
    *实例化* 将这些各种场景组合成最终游戏，你将在后面的学习中了解到这一点。
- en: While nodes come with a variety of properties and functions, any node's behavior
    and capabilities can also be extended by attaching a *script* to the node. This
    allows you to write code that makes the node do more than it can in its default
    state. For example, you can add a Sprite node to your scene to display an image,
    but if you want that image to move or disappear when clicked, you'll need to add
    a script to create that behavior.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然节点具有各种属性和函数，但也可以通过将 *脚本*附加到节点来扩展任何节点的行为和能力。这允许你编写代码，使节点能够执行其默认状态之外的操作。例如，你可以在场景中添加一个
    Sprite 节点来显示图像，但如果你想让该图像在点击时移动或消失，你需要添加一个脚本来创建这种行为。
- en: Scripting in Godot
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Godot 中的脚本编写
- en: 'At the time of writing, Godot provides three official languages for scripting
    nodes: GDScript, VisualScript, and C#. GDScript is the dedicated built-in language,
    providing the tightest integration with the engine, and is the most straightforward
    to use. VisualScript is still very new and in the *testing* stage, and should
    be avoided until you have a good understanding of Godot''s workings. For most
    projects, C# is best reserved for those portions of the game where there is a
    specific performance need; most Godot projects will not need this level of additional
    performance. For those that do, Godot gives the flexibility to use a combination
    of GDScript and C# where you need them.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，Godot 为脚本节点提供了三种官方语言：GDScript、VisualScript 和 C#。GDScript 是专门的内置语言，提供与引擎最紧密的集成，并且使用起来最直接。VisualScript
    仍然非常新，处于 *测试* 阶段，在你对 Godot 的工作原理有良好理解之前应避免使用。对于大多数项目，C# 最好保留用于游戏中需要特定性能需求的那些部分；大多数
    Godot 项目不需要这种级别的额外性能。对于确实需要这种性能的项目，Godot 提供了灵活性，可以在需要的地方使用 GDScript 和 C# 的组合。
- en: In addition to the three supported scripting languages, Godot itself is written
    in C++ and you can get even more performance and control by extending the engine's
    functionality directly. See [Chapter 7](3d5cd7c5-b53a-4731-88f9-fab128f609a1.xhtml),
    *Additional Topics*, for information on using other languages and extending the
    engine.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 除了三种支持的脚本语言之外，Godot 本身是用 C++ 编写的，你可以通过直接扩展引擎的功能来获得更多的性能和控制。有关使用其他语言和扩展引擎的信息，请参阅第
    7 章，*附加主题*。
- en: All of the games in this book use GDScript. For the majority of projects, GDScript
    is the best choice of language. It is very tightly integrated with Godot's **Application
    Programming Interface** (**API**), and is designed for rapid development.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的所有游戏都使用 GDScript。对于大多数项目，GDScript 是最佳的语言选择。它与 Godot 的 **应用程序编程接口**（**API**）紧密结合，并专为快速开发设计。
- en: About GDScript
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于 GDScript
- en: GDScript's syntax is very closely modeled on the Python language. If you are
    familiar with Python already, you will find GDScript very familiar. If you are
    comfortable with another dynamic language, such as JavaScript, you should find
    it relatively easy to learn. Python is very often recommended as a good beginner
    language, and GDScript shares that user-friendliness.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: GDScript 的语法非常接近 Python 语言。如果你已经熟悉 Python，你会发现 GDScript 非常熟悉。如果你对其他动态语言，如 JavaScript，感到舒适，你应该会发现学习它相对容易。Python
    经常被推荐为一种良好的入门语言，GDScript 也具有这种用户友好性。
- en: This book assumes you have at least *some* programming experience already. If
    you've never coded before, you may find it a little more difficult. Learning a
    game engine is a large task on its own; learning to code at the same time means
    you've taken on a major challenge. If you find yourself struggling with the code
    in this book, you may find that working through an introductory Python lesson
    will help you grasp the basics.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 本书假设你已经有了一些编程经验。如果你之前从未编写过代码，你可能会觉得这有点困难。学习游戏引擎本身就是一项艰巨的任务；同时学习编程意味着你接受了一个巨大的挑战。如果你发现自己在这本书的代码中遇到困难，你可能发现通过完成一个Python入门课程将帮助你掌握基础知识。
- en: Like Python, GDScript is a *dynamically typed* language, meaning you do not
    need to declare a variable's type when creating it, and it uses *whitespace* (indentation)
    to denote code blocks. Overall, the result of using GDScript for your game's logic
    is that you write less code, which means faster development and fewer mistakes
    to fix.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 与Python一样，GDScript是一种*动态类型*语言，这意味着在创建变量时不需要声明其类型，它使用*空白字符*（缩进）来表示代码块。总的来说，使用GDScript为你的游戏逻辑编写代码意味着你写的代码更少，这意味着开发速度更快，需要修复的错误也更少。
- en: 'To give you an idea of what GDScript looks like, here is a small script that
    causes a sprite to move from left to right across the screen at a given speed:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让你对GDScript有一个大致的了解，这里有一个小脚本，它可以使精灵以给定的速度在屏幕上从左到右移动：
- en: '[PRE0]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Don't worry if this doesn't make sense to you yet. In the following chapters,
    you'll be writing lots of code, which will be accompanied by explanations of how
    it all works.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在还不理解，请不要担心。在接下来的章节中，你将编写大量的代码，同时会有关于这些代码如何工作的解释。
- en: Summary
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you were introduced to the concept of a game engine in general
    and to Godot in particular. Most importantly, you downloaded Godot and launched
    it!
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你了解了游戏引擎的一般概念，特别是Godot。最重要的是，你已经下载了Godot并启动了它！
- en: You learned some important vocabulary that will be used throughout this book
    when referring to various parts of the Godot editor window. You also learned about
    the concepts of nodes and scenes, which are the fundamental building blocks of
    Godot.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 你学习了一些重要的词汇，这些词汇将在本书中用来指代Godot编辑器窗口的各个部分。你还了解了节点和场景的概念，它们是Godot的基本构建块。
- en: You also received some advice on how to approach the projects in this book and
    game development in general. If you ever find yourself getting frustrated as you
    are working through this book, go back and reread the *General advice* section.
    There's a lot to learn, and it's okay if it doesn't all make sense the first time.
    You'll make five different games over the course of this book, and each one will
    help you understand things a little bit more.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 你还得到了一些关于如何处理本书中的项目和游戏开发的一般建议。如果你在阅读本书时感到沮丧，请返回并重新阅读*一般建议*部分。有很多东西要学习，第一次可能不会全部理解。在这本书的过程中，你将制作五个不同的游戏，每个游戏都会帮助你更好地理解一些东西。
- en: You're ready to move on to [Chapter 2](a56e3c2d-5d7f-41d6-98c4-c1d95e17fc31.xhtml),
    *Coin Dash*, where you'll start building your first game in Godot.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经准备好进入[第二章](a56e3c2d-5d7f-41d6-98c4-c1d95e17fc31.xhtml)，*币冲浪*，在那里你将开始构建你的第一个Godot游戏。
