- en: What Are Embedded Systems?
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是嵌入式系统？
- en: Essentially , the *embedded* part of an *embedded system* refers to the state
    of being embedded into a larger system. The system that has been embedded is a
    computer system of some description, which has one or more very specific functions
    in the overall system, rather than being a general-purpose component. This larger
    system can be digital, mechanical, or analog in nature, while the additional integrated
    digital circuitry tightly interacts with data from and to interfaces, sensors
    and memory to implement the actual system functionality.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，**嵌入式系统**中的**嵌入式**部分指的是嵌入到更大系统中的状态。被嵌入的系统是某种描述的计算机系统，它在整体系统中具有一个或多个非常具体的功能，而不是作为一个通用组件。这个更大的系统可以是数字的、机械的或模拟的，而额外的集成数字电路与来自和到接口、传感器和内存的数据紧密交互，以实现实际系统功能。
- en: 'In this chapter, we will look at the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨以下主题：
- en: Different categories of embedded platforms
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 嵌入式平台的各个类别
- en: Examples of each category
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个类别的示例
- en: Development challenges of each category
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个类别的开发挑战
- en: The many faces of embedded systems
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 嵌入式系统的多面性
- en: Every computerized function in today's devices is implemented using one or multiple
    microprocessors, meaning a computer processor (central processing unit, or CPU)
    usually contained in a single **integrated circuit** (**IC**). The microprocessor
    comprises at least the **arithmetic logic unit** (**ALU**) and control circuitry,
    but logically also registers, and **input/output** (**I/O**) banks, in addition
    to more advanced features commonly tailored to a specific product category (wearables,
    low power sensors, mixed signal, ...) or market (consumer, medical, automotive,
    ...).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 今天设备中的每个计算机化功能都是使用一个或多个微处理器实现的，这意味着计算机处理器（中央处理单元，或CPU）通常包含在一个单一的**集成电路**（**IC**）中。微处理器至少包括**算术逻辑单元**（**ALU**）和控制电路，但逻辑上还包括寄存器和**输入/输出**（**I/O**）银行，以及针对特定产品类别（可穿戴设备、低功耗传感器、混合信号等）或市场（消费、医疗、汽车等）的更高级功能。
- en: At this point in history, almost all microprocessors are found in embedded systems.
    Even though people are likely to possess a computer, laptop, and smartphone, maybe
    even a tablet, the number of embedded microprocessors in a given household far
    dwarfs the number of general-purpose microprocessors.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个历史时刻，几乎所有微处理器都存在于嵌入式系统中。尽管人们可能拥有电脑、笔记本电脑和智能手机，甚至可能有平板电脑，但一个家庭中嵌入式微处理器的数量远远超过通用微处理器的数量。
- en: Even within a laptop or PC, there are a number of embedded microprocessors in
    addition to its general-purpose CPU. These microprocessors have tasks like handling
    keyboard or mouse input, processing touch-screen inputs, converting streams of
    data into Ethernet packages, or creating video or audio output.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在笔记本电脑或PC中，除了其通用CPU外，还有许多嵌入式微处理器。这些微处理器执行的任务包括处理键盘或鼠标输入、处理触摸屏输入、将数据流转换为以太网包，或创建视频或音频输出。
- en: In older systems, such as the Commodore 64, this same pattern can be seen, with
    a CPU IC, sound IC, video IC, and so on. Whereas the CPU runs whatever code the
    application developer has written, the other chips in the system have very specific
    purposes, down to the controller IC for the floppy or hard disk drive.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在较老的系统中，如Commodore 64，我们可以看到相同的模式，有一个CPU集成电路、声音集成电路、视频集成电路等。CPU运行应用程序开发者编写的任何代码，而系统中的其他芯片具有非常具体的目的，甚至包括软盘或硬盘驱动器的控制器集成电路。
- en: Outside of general-purpose computers, we find embedded microprocessors everywhere,
    often in the form of even further integrated MCUs. They control kitchen devices,
    washing machines, and the engines of our cars, in addition to the higher-level
    functions and the processing of sensor information.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在通用计算机之外，我们到处都能找到嵌入式微处理器，通常以更集成的MCU形式存在。它们控制厨房设备、洗衣机和我们的汽车引擎，以及高级功能和传感器信息的处理。
- en: While the first microwaves were analog devices, using mechanical timers and
    variable resistors to set power level and duration, today's microwaves contain
    at least one microcontroller, which is responsible for handling user input, driving
    a display of some type, and configuring the microwave's systems. The display itself
    can have its own microcontroller, depending on the complexity of the chosen configuration.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然最初的微波炉是模拟设备，使用机械定时器和可变电阻来设置功率水平和持续时间，但今天的微波炉至少包含一个微控制器，负责处理用户输入、驱动某种类型的显示以及配置微波炉的系统。显示本身也可以有自己的微控制器，这取决于所选配置的复杂性。
- en: Perhaps more excitingly, embedded systems also provide monitoring, automation
    and fail-safe features that keep airplanes flying, ensure that guided missiles
    and space rockets perform as intended, and enable ever-increasing possibilities
    in areas such as medicine and robotics. The avionics of an airplane constantly
    monitor countless parameters from a multitude of sensors, running the same code
    on its triple-redundant configuration to detect any possible glitches.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 更令人兴奋的是，嵌入式系统还提供了监控、自动化和故障安全功能，这些功能使飞机能够飞行，确保导弹和太空火箭按预期工作，并在医学和机器人等领域实现越来越多的可能性。飞机的航空电子设备不断监控来自众多传感器的无数参数，在它的三重冗余配置上运行相同的代码以检测任何可能的故障。
- en: Tiny yet powerful microprocessors enable the rapid analysis of chemicals and
    DNA or RNA strands, which would have taken racks of equipment before. With the
    progress of technology, an embedded system has become small enough that it can
    be sent through the human body to monitor its health.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 微型但强大的微处理器能够快速分析化学物质和DNA或RNA链，这在以前需要成排的设备。随着技术的进步，嵌入式系统已经变得足够小，可以穿过人体来监测其健康状况。
- en: Beyond Earth, space probes and rovers on Mars, the Moon, and asteroids are performing
    a myriad of duties every day, again with the courtesy of well-tested embedded
    systems. The Moon missions themselves were made possible due to the first major
    example of an embedded system in the form of the Apollo Guidance Computer. This
    1966-era embedded system consisted of wire-wrapped boards full of triple-input
    NOR logic gates, built for the explicit purpose of handling navigation, guidance,
    and control of the Command Module and Lunar Module launched by the Saturn V rockets.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 超出地球之外，火星、月球和小行星上的太空探测器与漫游车每天都在执行着各种各样的任务，这一切都得益于经过充分测试的嵌入式系统的便利。月球任务本身之所以成为可能，归功于第一个以阿波罗导航计算机为形式的嵌入式系统的重要实例。这个1966年代的嵌入式系统由充满三输入NOR逻辑门的绕线板组成，专为处理由土星V火箭发射的指挥舱和登月舱的导航、指导和控制而构建。
- en: The ubiquitous and versatile nature of embedded systems has made them an inseparable
    part of modern life.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌入式系统的普遍性和多功能性使它们成为现代生活不可或缺的一部分。
- en: 'For embedded systems, they are usually distinguished between the following
    categories:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 对于嵌入式系统来说，它们通常被划分为以下几类：
- en: '**Microcontrollers** (**MCUs**)'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**微控制器**（MCU）'
- en: '**System-on-Chip** (**SoC**), often as a **Single-Board Computer** (**SBC**)'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**片上系统**（SoC），通常作为**单板计算机**（SBC）'
- en: Microcontrollers
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微控制器
- en: 'One of the driving factors of innovation in the field of embedded systems is
    cost, since they will often be high-volume, cheap consumer products. To that end,
    it helps to have the entire microprocessor, memory, storage, and input/output
    peripherals on a single chip, simplifying implementation effort, reducing PCB
    real estate, all with the added benefit of faster and simpler design and production
    with higher yield. This led to the development of **microcontrollers** (**MCUs**)
    during the 1970s: single-chip computer systems that could be added to a new design
    for a minimal cost.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌入式系统领域的创新动力之一是成本，因为它们通常会是高产量、低成本的消费产品。为此，将整个微处理器、内存、存储和输入/输出外围设备集成到单个芯片上是有帮助的，这简化了实施工作，减少了PCB面积，同时还有更快、更简单的设计和生产以及更高的产出的额外好处。这导致了20世纪70年代**微控制器**（MCU）的发展：可以以最低成本添加到新设计中的单片计算机系统。
- en: With the introduction of **Electrically Erasable Programmable Read-Only Memory**
    (**EEPROM**) to MCUs in the early 1990s, it first became possible to rewrite the
    program memory of MCUs repeatedly without having to resort to erasing memory content
    using ultraviolet light through a special quartz window in the MCU's packaging.
    This allowed for much easier prototyping and further reduced cost and - as far
    as development and lower-volume production is concerned - in-circuit programming.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在20世纪90年代初将**电可擦可编程只读存储器**（EEPROM）引入微控制器（MCU）之后，首次实现了在不使用紫外线通过MCU封装中的特殊石英窗口擦除内存内容的情况下，重复写入MCU的程序内存。这使得原型设计更加容易，进一步降低了成本，并且在开发和低产量生产方面，还降低了电路编程的难度。
- en: As a result of this, many systems that were previously controlled by intricate
    mechanical and analog mechanisms (like elevators and temperature controllers)
    now contain one or more MCUs, which handle the same functionality while reducing
    costs and increasing reliability. By having the features handled in software,
    developers were also free to add advanced features such as complex preset programs
    (for washing machines, microwaves, and so on) and simple to complex displays to
    provide feedback to the user.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，许多以前由复杂的机械和模拟机制（如电梯和温度控制器）控制的系统现在包含一个或多个MCU，它们处理相同的功能，同时降低成本并提高可靠性。通过在软件中处理功能，开发人员还可以自由添加高级功能，如复杂的预设程序（用于洗衣机、微波炉等）和简单到复杂的显示，以向用户提供反馈。
- en: TMS 1000
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TMS 1000
- en: The first commercially available MCU was Texas Instrument's TMS 1000, a general-purpose
    4-bit, single-chip system. It was first made available for sale in 1974\. The
    original model had 1 KB of ROM, 64 x 4 bits of RAM, and 23 I/O pins. They could
    be clocked at speeds from 100 to 400 KHz, with each instruction executing in six
    clock cycles.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 第一款商业可用的MCU是德州仪器的TMS 1000，一款通用的4位单片系统。它首次于1974年上市销售。原始型号有1 KB的ROM，64 x 4位的RAM和23个I/O引脚。它们的时钟速度可以从100到400
    KHz，每个指令执行六个时钟周期。
- en: 'Later models would increase the ROM and RAM sizes, though the basic design
    remained largely unchanged until production ceased in 1981:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 后续型号会增加ROM和RAM的容量，尽管基本设计在1981年停产之前基本保持不变：
- en: '![](img/3b757a88-54d0-4f2c-a0d1-367c2523d7c2.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3b757a88-54d0-4f2c-a0d1-367c2523d7c2.png)'
- en: The size of the MCU die was roughly 5 x 5 millimeters, small enough to fit in
    a DIP package. This type of MCU used mask-programmable ROM, meaning that you could
    not get a blank TMS 1000 chip and program it. Instead, you would have to send
    the debugged program to Texas Instruments to have it physically produced using
    a photolithography mask, resulting in a metallic bridge for each bit.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: MCU芯片的尺寸大约为5 x 5毫米，足够小，可以装入DIP封装中。这种类型的MCU使用掩模编程的ROM，这意味着你不能得到一个空白的TMS 1000芯片并对其进行编程。相反，你必须将调试后的程序发送给德州仪器，以便使用光刻掩模物理生产，从而为每个位产生一个金属桥。
- en: 'Being a fairly primitive design (relative to later MCUs), it lacked a stack
    and interrupts, had a set of 43 instructions and two general-purpose registers,
    making it quite similar to the Intel 4004 CPU. Some models had special peripherals
    for driving **vacuum fluorescent displays** (**VFD**) and for continuously reading
    inputs to handle user input via a keyboard without interrupting the main program.
    Its basic pinout looked as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一种相对原始的设计（相对于后来的MCU），它缺少堆栈和中断，有一组43条指令和两个通用寄存器，使其与英特尔4004 CPU非常相似。一些型号具有用于驱动**真空荧光显示器**（**VFD**）和连续读取输入的特殊外围设备，以通过键盘处理用户输入而不中断主程序。其基本引脚排列如下：
- en: '![](img/d3dc0886-0ef2-4ab9-906d-8c68a6eeff37.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d3dc0886-0ef2-4ab9-906d-8c68a6eeff37.png)'
- en: Obviously the pin functions predate the **general purpose input/output** (**GPIO**)
    pins we know today - the **K** pins can only be used for input, while output pins
    are denoted as **O** and control pins are marked with **R**. The **OSC** pins
    are to be connected to an external oscillator circuit. Much like with discrete
    logic ICs, the **Init** pin is used to initialize the chip on power-up and has
    to be kept high for at least six cycles, whereas recent MCUs have integrated Power-On
    Reset (POR) and a reset pin that needs at most a discrete resistor and capacitor.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，引脚功能早于我们今天所知的**通用输入/输出**（**GPIO**）引脚 - **K**引脚只能用于输入，而输出引脚标记为**O**，控制引脚标记为**R**。**OSC**引脚需要连接到外部振荡器电路。与离散逻辑IC类似，**Init**引脚用于在电源开启时初始化芯片，并且至少需要保持六个周期的高电平，而最近的MCU集成了上电复位（POR）和一个最多需要一个离散电阻和电容的复位引脚。
- en: According to the original Texas Instruments press release from 1974, these microcontrollercould
    be had for as little as $3 or less if you bought them in large quantity. They
    would be used in popular toys such as the Speak and Spell, but also just about
    everywhere else, including household appliances, automobiles, and scientific equipment.
    By the time production ceased in the early 1980s, many millions had been sold.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 根据1974年原始德州仪器新闻稿，如果你大量购买，这些微控制器可以以3美元或更少的低价获得。它们将被用于流行的玩具，如Speak and Spell，但几乎无处不在，包括家用电器、汽车和科学设备。到20世纪80年代初生产停止时，已经售出了数百万台。
- en: It's also interesting to note that while one-time programmable low cost microcontrollers
    have gone down in price a lot, the class of products has persevered - as an example,
    the Padauk PMS150C can now be had for $0.03 and whilst offering an 8 bit architecture,
    its 1K words of ROM and 64 bytes of RAM sound oddly familiar.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 同样值得注意的是，尽管一次性可编程低成本微控制器的价格大幅下降，但这类产品仍然坚持了下来——以Padauk PMS150C为例，现在只需0.03美元即可购买，尽管它提供的是8位架构，但其1K字节的ROM和64字节的RAM听起来有些奇怪地熟悉。
- en: Intel MCS-48
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Intel MCS-48
- en: Intel's response to Texas Instrument's successful TMS 1000 MCU was the MCS-48
    series, with the 8048, 8035, and 8748 being the first models released in 1976\.
    The 8048 has 1 KB of ROM and 64 bytes of RAM. It is an 8-bit design with a Harvard
    architecture (split code/data memory), introducing a native word size of 8 bits
    and interrupt support (two single-level) and is compatible with 8080/8085 peripherals,
    making it a highly versatile MCU. The advantage of wider ALU and register word
    sizes is still perceivable today, where for example a 32 bit addition is sequentially
    executed on an 8 bit MCU as a series of 8 bit additions with carry.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 英特尔对德州仪器的成功TMS 1000 MCU的回应是MCS-48系列，8048、8035和8748是1976年首次发布的型号。8048有1 KB的ROM和64字节的RAM。它是一个8位设计，具有哈佛架构（代码/数据内存分离），引入了8位的原生字长和中断支持（两级单级）并且与8080/8085外围设备兼容，使其成为一个高度通用的MCU。更宽的ALU和寄存器字长的好处至今仍可感知，例如，在8位MCU上，32位加法是作为一系列8位加法带进位顺序执行的。
- en: The MCS-48 features over 96 instructions, most of them a single byte in length,
    and allows for external memory to be added in addition to the internal memory.
    In a community effort, available information on the MCS-48 family has been compiled
    and released at [https://devsaurus.github.io/mcs-48/mcs-48.pdf](https://devsaurus.github.io/mcs-48/mcs-48.pdf)
    .
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: MCS-48具有超过96条指令，其中大多数长度为单字节，并且允许添加外部内存以补充内部内存。在社区的努力下，有关MCS-48系列的信息已被汇编并发布在[https://devsaurus.github.io/mcs-48/mcs-48.pdf](https://devsaurus.github.io/mcs-48/mcs-48.pdf)
    。
- en: 'Here we consider the simplicity of the MCS-48 functional block diagram and
    compare it to that of its successors as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们考虑MCS-48功能框图的简单性，并将其与后继产品进行比较如下：
- en: '![](img/b5d1ac0d-9dea-45f2-a35b-77b9c74a8ade.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b5d1ac0d-9dea-45f2-a35b-77b9c74a8ade.png)'
- en: Even for a design that was introduced just a few years after the TMS 1000, the
    rapid evolution of MCU designs is evident. Since MCU design evolved alongside
    popular CPU designs of the time, including the 6502, its 16-bit version, and what
    would eventually become the M68K processor family, there are many similarities
    to be found.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 即使是比TMS 1000晚几年推出的设计，MCU设计的快速演变也是显而易见的。由于MCU设计是与当时流行的CPU设计同步发展的，包括6502、其16位版本以及最终成为M68K处理器家族的处理器，因此可以发现许多相似之处。
- en: Due to its flexible design, it remained popular and in production until the
    1990s, until the MCS-51 (8051) series gradually replaced it. See the next section
    for more details on the 8051.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 由于其灵活的设计，它一直流行并生产到20世纪90年代，直到MCS-51（8051）系列逐渐取代它。下一节将详细介绍8051。
- en: The MCS-48 was used in the keyboard of the original IBM PC as its controller.
    It was also used with the 80286 and 80386 to perform A20 line gating and reset
    functions in the case of the former. Later PCs would integrate these features
    into Super I/O devices.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: MCS-48被用于原始IBM PC的键盘控制器。它还与80286和80386一起使用，在80286的情况下执行A20线选通和复位功能。后来的PC将把这些功能集成到超级I/O设备中。
- en: Other notable uses of the MCS-48 include the Magnavox Odyssey video game console
    and a range of Korg and Roland analog synthesizers. While masked ROM (up to 2
    KB) was an option with the MCS-48 family, the 87P50 used an external ROM module
    for its programming, and the 8748 and 8749 featured up to 2 KB EPROM, which allowed
    for the MCU's internal programming to be altered repeatedly.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: MCS-48的其他显著用途包括Magnavox Odyssey视频游戏机和一系列Korg和Roland模拟合成器。虽然MCS-48系列提供了掩模ROM（高达2
    KB）作为选项，但87P50使用外部ROM模块进行编程，而8748和8749具有高达2 KB的EPROM，这使得MCU的内部编程可以反复更改。
- en: 'Like with standalone EPROM modules, this requires the package to contain a
    fused quartz window, which allows for ultraviolet light to reach the MCU die,
    as can clearly be seen in the following photograph of an 8749 MCU with EPROM (by
    Konstantin Lanzet, CC BY-SA 3.0):'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 就像独立的EPROM模块一样，这需要封装中包含一个熔融石英窗口，它允许紫外线到达MCU芯片，如下面的8749 MCU带EPROM的照片中可以清楚地看到（由Konstantin
    Lanzet提供，CC BY-SA 3.0）：
- en: '![](img/4ad70b0c-1c97-4323-ae7e-4c79e53867d6.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4ad70b0c-1c97-4323-ae7e-4c79e53867d6.png)'
- en: 'The charge stored in the EPROM cells that defines bits as written dissipates
    within a 20-30 minute exposure to strong ultraviolet light. The same can be achieved
    in direct sunlight over the course of a few weeks. The erase cycle usually implies
    removing the package and putting it in the light tight erasing device. After this,
    the EPROM can be programmed anew. The specified data retention of an EPROM is
    about 10-20 years at 85°C, and because the degradation accelerates exponentially
    with temperature, statements of 100 years or more at room temperature are not
    uncommon (27C512A: 200 years).'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 定义位为写入的EPROM单元中存储的电荷在20-30分钟的强紫外光照射下耗散。同样，在几周内直接阳光下也能达到相同效果。擦除周期通常意味着移除封装并将其放入光密擦除设备中。之后，EPROM可以重新编程。EPROM的指定数据保留时间为约10-20年（在85°C下），由于温度的退化呈指数加速，室温下100年或更长时间的声明并不罕见（27C512A：200年）。
- en: Due to the expense of creating the quartz window and integrating it into the
    package, one-time programmable EPROMs were used for a while, which allow for the
    easy programming of an EPROM, but mounted the programmed die in an opaque package
    so that it could not be reprogrammed any more. Ultimately, EEPROMs became available
    in the early 1980s, which replaced EPROMs almost completely. EEPROMs can be rewritten
    about a million times before they begin to develop issues when retaining stored
    data. Their data retention performance is similar to that of EPROMs.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 由于创建石英窗口并将其集成到封装中的成本，曾经使用了一段时间的一次性可编程EPROM，它允许轻松编程EPROM，但将编程好的芯片封装在不透明的封装中，因此无法再编程。最终，在20世纪80年代初，EEPROM变得可用，几乎完全取代了EPROM。EEPROM可以在大约一百万次重写之前开始出现保留存储数据的问题。它们的数据保留性能与EPROM相似。
- en: Intel MCS-51
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 英特尔MCS-51
- en: Recent chips from Cypress CY7C68013A (USB peripheral controller) to Ti CC2541
    (a Bluetooth SoC) feature commodity 8051 cores, demonstrating that the Intel MCS-51
    family design remains popular to this day. There's a plethora of derived MCUs
    by other manufacturers as well, even though Intel stopped producing this series
    of MCUs in March of 2007\. First introduced in the 1980s, it's an 8-bit MCU like
    the 8048, but expands heavily on its feature set.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 从Cypress CY7C68013A（USB外围控制器）到Ti CC2541（一款蓝牙SoC）的最近芯片都具备商品化的8051核心，这表明英特尔MCS-51系列的设计至今仍很受欢迎。其他制造商也有大量的派生型MCU，尽管英特尔在2007年3月停止生产这一系列的MCU。首次在20世纪80年代推出，它是一款与8048类似的8位MCU，但其功能集得到了大幅扩展。
- en: 'The functional block diagram as depicted in the Intel 80xxAH datasheet is shown
    as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如英特尔80xxAH数据表所示的功能框图如下所示：
- en: '![](img/893fbdf4-9c16-48cd-8446-bc058a32f4f0.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/893fbdf4-9c16-48cd-8446-bc058a32f4f0.png)'
- en: It's very similar to the Atmel (now microchip) AT89S51  which is still in production
    today.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 它与Atmel（现在是微芯）AT89S51非常相似，该产品至今仍在生产。
- en: 'Datasheets commonly address size and performance metrics in a *Features* list,
    as quoted below for the AT89S51:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 数据表通常在*特性*列表中讨论尺寸和性能指标，如下面的AT89S51所示：
- en: 4K Bytes of **in-system programmable** (**ISP**) flash memory
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 4K字节的**系统内可编程**（**ISP**）闪存
- en: '- Endurance: 10,000 write/erase cycles (was 1,000,000 for EEPROM)'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 耐用性：10,000次写入/擦除周期（EEPROM为1,000,000次）'
- en: 4.0 V to 5.5 V operating range
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 4.0 V至5.5 V的工作范围
- en: 'Fully static operation: 0 Hz to 33 MHz (was 12 MHz)'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完全静态操作：0 Hz至33 MHz（之前为12 MHz）
- en: Three-level program memory lock
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 三级程序存储器锁定
- en: 128 x 8-bit internal RAM
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 128 x 8位内部RAM
- en: 32 programmable I/O lines
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 32个可编程I/O线
- en: 'but then the list goes on with modern core, peripheral, low power and usability
    features:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 但随后列表继续扩展到现代核心、外围、低功耗和可用性功能：
- en: Two 16-bit timer/counters
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个16位定时器/计数器
- en: Six interrupt sources
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 六个中断源
- en: Full duplex UART serial channel
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 全双工UART串行通道
- en: Low-power Idle and power-down modes
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 低功耗空闲和掉电模式
- en: Interrupt recovery from power-down mode
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从掉电模式中断恢复
- en: Watchdog timer
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 看门狗定时器
- en: Dual data pointer
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 双数据指针
- en: Power-off flag
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 断电标志
- en: Fast programming time
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快速编程时间
- en: Flexible ISP programming, byte- and page-mode
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 灵活的ISP编程，字节和页面模式
- en: The only major changes to the 8051 architecture over the past decades involved
    migrating from the original **n-type metal oxide semiconductor** (**NMOS**) transistor
    technology to **complementary MOS** (**CMOS**) – usually denoted as 80C51 – and
    more recently the addition of USB, I2C, and SPI interfaces, as well as advanced
    power management and debugging interfaces that have become ubiquitous since the
    beginning of this century. The Atmel application note 3487A doesn't give a concise
    explanation for the letter S, however the then new in-circuit serial programming
    (ISP) might thereby be highlighted.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 过去几十年中，8051架构的唯一重大变化是从原始的**n型金属氧化物半导体**（**NMOS**）晶体管技术迁移到**互补MOS**（**CMOS**）——通常表示为80C51——以及最近USB、I2C和SPI接口的添加，以及从本世纪初开始变得普遍的先进电源管理和调试接口。Atmel应用笔记3487A没有给出字母S的简洁解释，然而当时新引入的电路内串行编程（ISP）可能因此被突出。
- en: 'The pinout diagram of the AT89S51 documents the SPI pins (MOSI, MISO, SCK):'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: AT89S51的引脚图说明了SPI引脚（MOSI、MISO、SCK）：
- en: '![](img/a764f469-f62f-4b51-99ee-5cc20c141900.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a764f469-f62f-4b51-99ee-5cc20c141900.png)'
- en: Beyond standalone MCUs, 8051 cores are also integrated into larger systems where
    a low-power, basic MCU is dedicated to diverse, low speed, real-time or high I/O
    count tasks. A broad range of chips from the likes of Ti CC2541 (Bluetooth low
    energy SoC) to Cypress CY7C68013A (FX2LP™ USB peripheral controller) underline
    the utility and relevance of the 8051 architecture to this day.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 除了独立的MCU之外，8051核心还被集成到更大的系统中，其中低功耗、基本MCU被用于各种低速度、实时或高I/O计数任务。从Ti CC2541（蓝牙低功耗SoC）到Cypress
    CY7C68013A（FX2LP™ USB外围控制器）等广泛芯片证明了8051架构至今的实用性和相关性。
- en: In **field-programmable gate array** (**FPGA**) or **application specific integration
    circuit** (**ASIC**) development, 8051-type processors are also commonly deployed
    as soft cores, where they are adapted and added to VHDL and Verilog HDL projects
    to handle tasks that lend themselves better to sequential execution without the
    need for tight timing or large bandwidth. Last but not least, the charm of soft
    cores lies in the ability to use full-featured development and debugging tools
    while maintaining tight integration with the remaining hardware design. The equivalent
    of only a few hundred bytes of program code run by a soft core might well be a
    large state machine, memories, counters and ALU-like logic, all of which raises
    the question which implementation is easier to validate and maintain.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在**现场可编程门阵列**（**FPGA**）或**专用集成电路**（**ASIC**）开发中，8051型处理器也常作为软核使用，它们被适应并添加到VHDL和Verilog
    HDL项目中，以处理更适合顺序执行的任务，无需紧密的时序或大带宽。最后但同样重要的是，软核的魅力在于能够在保持与剩余硬件设计紧密集成的同时，使用全功能的开发和调试工具。软核运行的程序代码可能只有几百字节，但可能是一个大型状态机、内存、计数器和类似ALU的逻辑，这些都引发了哪个实现更容易验证和维护的问题。
- en: PIC
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PIC
- en: The PIC family of MCUs was first introduced in 1976 by General Instrument, using
    their new CP1600 16-bit CPU. This CPU was nearly compatible with the PDP-11 series
    of processors with its instruction set.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: MCU的PIC系列首次由通用仪器于1976年推出，使用他们新的CP1600 16位CPU。这个CPU的指令集几乎与PDP-11系列处理器兼容。
- en: 'In 1987, General Instrument spun off its microelectronics division to create
    Microchip Technology, which became an independent company in 1989\. Microchip
    technology produces new PIC designs to this day.  Alongside the evolution of PIC
    cores and peripherals, on-chip memory technology development yielded the introduction
    of light tight encapsulated EPROM for on-time programmable and later EEPROM for
    in-circuit reprogramming capabilities. Like most MCUs, PIC MCUs have a Harvard
    architecture. Today, PIC designs range from 8-bit to 32-bit, with a wide range
    of features. These are the PIC families as the time of writing this book:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 1987年，通用仪器将其微电子部门剥离出来，创建了Microchip Technology，该公司于1989年成为一家独立公司。Microchip技术至今仍在生产新的PIC设计。随着PIC核心和外设的演变，片上内存技术的发展导致了光密封装的EPROM的引入，用于及时编程，后来又引入了EEPROM，用于电路编程能力。像大多数MCU一样，PIC
    MCU具有哈佛架构。今天，PIC设计从8位到32位，具有广泛的功能。以下是本书写作时的PIC系列：
- en: '| **Family** | **Pins** | **Memories** | **Details** |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| **系列** | **引脚** | **内存** | **详情** |'
- en: '| PIC10 | 6-8 | 384-896 bytes ROM, 64-512 bytes RAM  | 8-bit, 8-16 MHz, modified
    Harvard |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| PIC10 | 6-8 | 384-896 bytes ROM，64-512 bytes RAM | 8位，8-16 MHz，修改后的哈佛架构 |'
- en: '| PIC12 | 8 | 2-16 KB ROM, 256 bytes RAM | 8-bit, 16 MHz, modified Harvard
    |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| PIC12 | 8 | 2-16 KB ROM，256 bytes RAM | 8位，16 MHz，修改后的哈佛架构 |'
- en: '| PIC16 | 8-64 | 3.5-56 KB ROM,  1-4 KB RAM  | 8-bit modified Harvard |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| PIC16 | 8-64 | 3.5-56 KB ROM, 1-4 KB RAM | 8位改进的哈佛架构|'
- en: '| PIC17 | 40-68 | 4-16 KB ROM, 232-454 bytes RAM | 8-bit, 33 MHz, superseded
    by the PIC18, though third-party clones exist. |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| PIC17 | 40-68 | 4-16 KB ROM, 232-454 bytes RAM | 8位，33 MHz，被PIC18取代，尽管存在第三方克隆。|'
- en: '| PIC18 | 28-100 | 16-128 KB ROM, 3,728-4,096 bytes RAM  | 8-bit modified Harvard
    |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| PIC18 | 28-100 | 16-128 KB ROM, 3,728-4,096 bytes RAM | 8位改进的哈佛架构|'
- en: '| PIC24 (dsPIC) | 14-144 | 64-1,024KB ROM, 8-16 KB RAM | 16-bit, DsPIC (dsPIC33)
    MCUs have digital signal processing (DSP) peripherals built in. |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| PIC24 (dsPIC) | 14-144 | 64-1,024KB ROM, 8-16 KB RAM | 16位，DsPIC（dsPIC33）微控制器内置数字信号处理（DSP）外设。|'
- en: '| PIC32MX | 64-100 | 32-512 KB ROM, 8-32 KB RAM | 32-bit, 200 MHz MIPS M4K
    with MIPS16e mode, released in 2007. |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| PIC32MX | 64-100 | 32-512 KB ROM, 8-32 KB RAM | 32位，200 MHz MIPS M4K，带有MIPS16e模式，2007年发布。|'
- en: '| PIC32MZ ECPIC32MZ EFPIC32MZ DA | 64-288 | 512-2,048 KB ROM, 256-640 KB static
    RAM (32 MB DDR2 DRAM) | 32-bit, MIPS ISA (2013), PIC32MZ DA version (2017) having
    a graphics core. Core speeds of 200 MHz (EC, DA) and 252 MHz (EF). |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| PIC32MZ ECPIC32MZ EFPIC32MZ DA | 64-288 | 512-2,048 KB ROM, 256-640 KB静态RAM（32
    MB DDR2 DRAM） | 32位，MIPS ISA（2013），PIC32MZ DA版本（2017）具有图形核心。核心速度为200 MHz（EC、DA）和252
    MHz（EF）。|'
- en: '| PIC32MM | 20-64 | 16-256 KB RAM, 4-32 KB RAM | 32-bit microMIPS, 25 MHz,
    variant optimized for low cost and low power. |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| PIC32MM | 20-64 | 16-256 KB RAM, 4-32 KB RAM | 32位microMIPS，25 MHz，针对低成本和低功耗优化的变体。|'
- en: '| PIC32MK | 64-100 | 512-1,024 KB ROM, 128-256 KB RAM | 32-bit, 120 MHz, MIPS
    ISA, variant introduced in 2017\. Targeted at industrial control and other forms
    of deeply integrated applications. |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| PIC32MK | 64-100 | 512-1,024 KB ROM, 128-256 KB RAM | 32位，120 MHz，MIPS指令集架构（ISA），2017年推出的变体。针对工业控制和深度集成应用。|'
- en: The PIC32 families are interesting in that they're based on an MIPS processor
    core, and use this **Instruction Set Architecture** (**ISA**) instead of the PIC
    ISA that's used by all other PIC MCUs. The processor core design they share is
    the M4K, a 32-bit MIPS32 core from MIPS Technology. Between these families, the
    differences are easy to spot when looking at the block diagrams from their respective
    datasheets.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: PIC32系列家族有趣之处在于它们基于MIPS处理器核心，并使用这种**指令集架构（ISA**）而不是所有其他PIC微控制器使用的PIC ISA。它们共享的处理器核心设计是M4K，来自MIPS技术的32位MIPS32核心。在这些家族之间，从各自的数据表中的块图来看，差异很容易发现。
- en: 'The decades of development in the PIC line of microcontrollers are perhaps
    best made tangible in the form of functional block diagrams, so we start by looking
    at the PIC10:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 微控制器系列PIC的发展几十年，或许最好通过功能块图来具体体现，所以我们首先看看PIC10：
- en: '![](img/90869401-7d48-4657-b198-ad7556ad1ca8.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/90869401-7d48-4657-b198-ad7556ad1ca8.png)'
- en: These are very small MCUs, with barely any peripherals around a processor core
    not more closely defined here—and the referenced table only mentions the memory
    layout. The I/O port is very minimal and the I2C and UART interfaces we know today
    are not implemented as peripheral logic. To pick an example for a controller next
    in line, the PIC16F84 datasheet is very detailed in terms of processor architecture
    and shows that more power-up and reset circuitry has been added while also expanding
    GPIO and adding EEPROM for easy integrated non-volatile storage.  Self-contained
    serial peripherals are still absent.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是非常小的微控制器，处理器核心周围几乎没有外设——这里没有更详细地定义——引用的表格仅提到内存布局。I/O端口非常有限，我们今天所知的I2C和UART接口并未作为外设逻辑实现。以选择下一个控制器为例，PIC16F84数据表在处理器架构方面非常详细，显示在同时扩展GPIO和添加EEPROM以实现易于集成的非易失性存储的同时，还增加了更多的上电和复位电路。自包含的串行外设仍然不存在。
- en: 'Next, we''ll have a look at the PIC18:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看看PIC18：
- en: '![](img/e6ce1ab5-1c0f-4c29-b0c3-7e061f2310c5.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e6ce1ab5-1c0f-4c29-b0c3-7e061f2310c5.png)'
- en: The PIC18 family is the latest 8-bit PIC architecture, with MCUs covering a
    wide range of applications. It has significantly more I/O options than the PIC10,
    PIC12, and PIC16 families, while also offering more options in terms of ROM and
    RAM and now providing USART in conjunction with a synchronous serial port for
    4-wire SPI. Also note that the ports now have alternate pin functions and the
    routing from peripherals to the pins and the corresponding configuration registers
    are not shown for simplicity.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: PIC18系列是最新8位PIC架构，其微控制器覆盖了广泛的应用范围。它比PIC10、PIC12和PIC16系列具有更多的I/O选项，同时在ROM和RAM方面也提供了更多选项，现在还提供了与同步串行端口一起的USART，用于4线SPI。请注意，端口现在具有备用引脚功能，并且为了简化，没有显示从外设到引脚以及相应的配置寄存器的路由。
- en: 'Next, let''s observe the focus shifting from the core to Port and Peripheral
    capabilities in the  PIC24 functional block diagram:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们观察在PIC24功能块图中，焦点从核心转移到端口和外围功能的变化：
- en: '![](img/7c2d613d-7ecb-41b3-b888-92bc4c9eb493.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7c2d613d-7ecb-41b3-b888-92bc4c9eb493.png)'
- en: The diagram is similar to that of the PIC10, with the CPU abstracted away as
    a single block relative to the rest of the MCU. Each of the `PORT` blocks being
    a set of I/O pins, we're running out of space to display all the possible pin
    functions.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 该图与PIC10的图类似，CPU相对于整个微控制器被抽象为一个单独的块。每个`PORT`块代表一组I/O引脚，我们正在耗尽空间来显示所有可能的引脚功能。
- en: Each I/O pin can have a fixed function (linked with a peripheral module), or
    have an assignable function (hardware-level rerouting, or done in software). Generally,
    the more complex the MCU, the more likely it is that I/O pins are generic and
    not fixed-function.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 每个I/O引脚都可以具有一个固定功能（与外围模块相关联），或者具有一个可分配的功能（硬件级重路由，或在软件中完成）。一般来说，微控制器越复杂，I/O引脚越可能是通用的，而不是固定功能的。
- en: 'Finally we have look at the PIC32:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们来看看PIC32：
- en: '![](img/473399ca-4ada-4083-8265-cae721ce7a90.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/473399ca-4ada-4083-8265-cae721ce7a90.png)'
- en: This block diagram is for PIC32MX1XX/2XX devices in the PIC32MX family. It is
    usually clocked at 50 MHz.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这个框图是针对PIC32MX1XX/2XX系列中的PIC32设备的。它通常以50 MHz的频率运行。
- en: An interesting property of the PIC32 architecture is that it effectively turns
    the Harvard architecture M4K MIPS CPU into a more John von Neumann-like architecture
    by having both program instructions and data travel over the System Bus Matrix. 
    Note that the space dedicated to a single processor register in the PIC10 diagram
    now casually depicts a complex digital or mixed signal peripheral, or the powerful
    JTAG in-circuit programming and debugging interface.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: PIC32架构的一个有趣特性是，它通过让程序指令和数据都通过系统总线矩阵传输，有效地将哈佛架构的M4K MIPS CPU转变为更类似于约翰·冯·诺伊曼的架构。请注意，在PIC10图中专门为单个处理器寄存器分配的空间现在随意表示一个复杂的数字或混合信号外围设备，或者强大的JTAG在电路编程和调试接口。
- en: AVR
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AVR
- en: The AVR architecture was developed by two students at the Norwegian Institute
    of Technology, with the original AVR MCU developed at Nordic VLSI (now Nordic
    Semiconductor). It was originally known as μRISC and available for licensing until
    the technology was sold to Atmel. The first Atmel AVR MCU was released in 1997.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: AVR架构是由挪威理工学院的两名学生开发的，原始的AVR微控制器是在Nordic VLSI（现在为Nordic Semiconductor）开发的。它最初被称为μRISC，可用于许可，直到这项技术被Atmel收购。第一个Atmel
    AVR微控制器于1997年发布。
- en: 'Today, we can look back on a multitude of 8-bit AVR families:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以回顾众多8位AVR系列：
- en: '| **Family** | **Pins** | **Memories** | **Details** |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| **系列** | **引脚数** | **存储器** | **详细信息** |'
- en: '| ATtiny | 6-32 | 0.5-16KB ROM 0-2 KB RAM | 1.6-20 MHz. Compact, power-efficient
    MCUs, with limited peripherals. |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| ATtiny | 6-32 | 0.5-16KB ROM 0-2 KB RAM | 1.6-20 MHz. 紧凑、高效、功能有限的微控制器。|'
- en: '| ATmega | 32-100 | 4-256 KB ROM 0.5-32 KB RAM |  |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| ATmega | 32-100 | 4-256 KB ROM 0.5-32 KB RAM |  |'
- en: '| ATxmega | 44-100 | 16-384 KB ROM, 1-32 KB RAM | 32 MHz, largest AVR MCUs,
    with extensive peripherals and performance-enhancing features such as DMA. |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| ATxmega | 44-100 | 16-384 KB ROM, 1-32 KB RAM | 32 MHz，最大的AVR微控制器，具有广泛的外围设备和性能增强功能，如DMA。|'
- en: There also used to be an 32-bit AVR32 architecture, but it was deprecated by
    Atmel as it moved to the ARM 32-bit architecture instead (SAM). See the *ARM-based
    MCU* section for more details on SAM. More detailed information is found in the
    corresponding [Product Selection Guide](http://ww1.microchip.com/downloads/en/DeviceDoc/Atmel-45154-Product-Selection-Guide_Brochure.pdf).
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 曾经还有一个32位的AVR32架构，但Atmel已经将其弃用，因为它转向了ARM 32位架构（SAM）。有关SAM的更多详细信息，请参阅*基于ARM的微控制器*部分。更详细的信息可以在相应的[产品选择指南](http://ww1.microchip.com/downloads/en/DeviceDoc/Atmel-45154-Product-Selection-Guide_Brochure.pdf)中找到。
- en: 'Additionally, Atmel used to have so-called **Field Programmable System Level
    Integrated Circuit** (**FPSLIC**) MCUs: hybrid AVR/FPGA systems. These essentially
    allowed you to add your own peripherals and functionality to the hardware of an
    AVR MCU.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Atmel曾经拥有所谓的**现场可编程系统级集成电路**（**FPSLIC**）微控制器：混合AVR/FPGA系统。这些系统实际上允许你向AVR微控制器的硬件中添加自己的外围设备和功能。
- en: 'Let''s look at the ATtiny family. This is the block diagram of the ATtiny212/412
    series of MCUs:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看ATtiny系列。这是ATtiny212/412系列微控制器的框图：
- en: '![](img/05383bb6-99ec-434c-b603-09548ed2532e.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/05383bb6-99ec-434c-b603-09548ed2532e.png)'
- en: 'This series of ATtiny MCUs can run up to 20 MHz, with up to 4 KB of Flash ROM
    and 256 bytes of SRAM, as well as up to 128 bytes of EEPROM, all in an 8-pin package.
    Despite its small size, it has a large number of peripherals, which can be routed
    to any supported pin:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这一系列的 ATtiny MCU 可以运行高达 20 MHz，具有高达 4 KB 的闪存 ROM 和 256 字节的 SRAM，以及高达 128 字节的
    EEPROM，所有这些都在一个 8 引脚封装中。尽管体积小巧，但它具有大量外设，可以路由到任何支持的引脚：
- en: '![](img/ad999a59-ffc7-4ab8-9089-7bf6be05bb22.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ad999a59-ffc7-4ab8-9089-7bf6be05bb22.png)'
- en: 'Contrast this with the popular ATmega2560 and related MCUs, which have the
    following properties:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 与流行的 ATmega2560 和相关 MCU 相比，以下是其特性：
- en: '| **Device** | **Flash (KB)** | **EEPROM (KB)** | **RAM (KB)** | **General
    purpose I/O pins** | **16-bit PWM channels** | **UART** | **ADC channels** |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| **设备** | **闪存 (KB)** | **EEPROM (KB)** | **RAM (KB)** | **通用 I/O 引脚** | **16
    位 PWM 通道** | **UART** | **ADC 通道** |'
- en: '| ATmega640 | 64 | 4 | 8 | 86 | 12 | 4 | 16 |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| ATmega640 | 64 | 4 | 8 | 86 | 12 | 4 | 16 |'
- en: '| ATmega1280 | 128 | 4 | 8 | 86 | 12 | 4 | 16 |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| ATmega1280 | 128 | 4 | 8 | 86 | 12 | 4 | 16 |'
- en: '| ATmega1281 | 128 | 4 | 8 | 54 | 6 | 2 | 8 |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| ATmega1281 | 128 | 4 | 8 | 54 | 6 | 2 | 8 |'
- en: '| ATmega2560 | 256 | 4 | 8 | 86 | 12 | 4 | 16 |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| ATmega2560 | 256 | 4 | 8 | 86 | 12 | 4 | 16 |'
- en: '| ATmega2561 | 256 | 4 | 8 | 54 | 6 | 2 | 8 |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| ATmega2561 | 256 | 4 | 8 | 54 | 6 | 2 | 8 |'
- en: 'With GPIO pins numbering in the dozens, the block diagram is correspondingly
    more complex, with many more port blocks for the I/O pins:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 GPIO 引脚数量达到数十个，因此框图也相应地更加复杂，具有更多用于 I/O 引脚的端口块：
- en: '![](img/ce7750cb-a33d-49af-842d-a414db0e2b60.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ce7750cb-a33d-49af-842d-a414db0e2b60.png)'
- en: Here, all the incoming and outgoing arrows indicate a single pin or block of
    pins, most of them general-purpose. Because of the large number of pins, it is
    no longer practical to use an inline package format (DIP, SOIC, and so on) for
    the physical chip.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，所有进入和出去的箭头都表示一个引脚或一组引脚，其中大多数是通用引脚。由于引脚数量众多，对于物理芯片来说，再使用内联封装格式（DIP、SOIC 等）已不再实用。
- en: 'For the ATmega640, 1280 and 2560, a 100-pin TQFP package is used, here with
    the functionality of each pin indicated as found in its datasheet:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 ATmega640、1280 和 2560，使用 100 引脚 TQFP 封装，这里每个引脚的功能如数据表所示：
- en: '![](img/7d0a8e35-d4cb-4e8b-825f-247338630835.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7d0a8e35-d4cb-4e8b-825f-247338630835.png)'
- en: The ATxmega family is very similar to the ATmega, with a similar pinout, mostly
    differentiating themselves using architectural changes and optimizations, more
    ROM and RAM, and peripheral options.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: ATxmega 系列与 ATmega 非常相似，具有相似的引脚排列，主要通过架构变更和优化、更多的 ROM 和 RAM 以及外设选项来区分自己。
- en: Whether to pick an ATtiny, ATmega, or ATxmega MCU depends first and foremost
    on the requirements you have for your project, specifically the required input
    and output, types of peripherals (serial, SPI, I2C, CAN, and so on), and the size
    of both the code and the RAM required to run this code.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 选择 ATtiny、ATmega 或 ATxmega MCU 首先取决于您项目的要求，特别是所需的输入和输出、外设类型（串行、SPI、I2C、CAN 等），以及运行此代码所需的代码和
    RAM 的大小。
- en: M68k and Z80-based
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于 M68k 和 Z80
- en: The Zilog Z80 8-bit processor is an Intel 8080-compatible processor, which competed
    with other microprocessors during the 1980s, powering home computers and gaming
    systems including the Nintendo Game Boy, Sega Master System, Sinclair ZX80/ZX81/Spectrum,
    MSX, and Tandy TRS-80.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: Zilog Z80 8 位处理器是一种与 Intel 8080 兼容的处理器，在 1980 年代与其他微处理器竞争，为家用电脑和游戏系统供电，包括任天堂
    Game Boy、世嘉 Master System、 Sinclair ZX80/ZX81/Spectrum、MSX 和 Tandy TRS-80。
- en: Zilog introduced an MCU (Z380) based around the Z80 microprocessor in 1994,
    with various updates over the years, including the Z8, eZ80, and others. Z80 clones
    are also quite common.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: Zilog 于 1994 年推出了一种基于 Z80 微处理器的 MCU（Z380），多年来进行了各种更新，包括 Z8、eZ80 等。Z80 克隆机也很常见。
- en: Another popular 1980s era microprocessor is the Motorola 68k (or 68000). It's
    16-bit for its ALU and external data bus, but with 32-bit registers and 32-bit
    internal data bus. After its introduction in 1979, its architecture is still in
    use today, with Freescale Semiconductor (now NXP) producing a number of 68k microprocessors.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种流行的 1980 年代微处理器是摩托罗拉 68k（或 68000）。它的算术逻辑单元和外部数据总线是 16 位，但具有 32 位寄存器和 32 位内部数据总线。自
    1979 年推出以来，其架构至今仍在使用，飞思卡尔半导体（现为 NXP）生产了多种 68k 微处理器。
- en: Motorola introduced numerous MCUs based around the 68k architecture, including
    the MC68320 communications controller in 1989\. Current 68k-based MCU designs
    include the ColdFire, which is a fully 32-bit design.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 摩托罗拉在 1989 年推出了基于 68k 架构的多种 MCU，包括 MC68320 通信控制器。当前的 68k 基于的 MCU 设计包括 ColdFire，它是一个完全
    32 位的设计。
- en: ARM Cortex-M
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ARM Cortex-M
- en: A very common type of 32-bit MCU is the ARM Cortex-M family. It includes the
    M0, M0+, M1, M3, M4, M7, M23, and M33, with a number of them having a **floating
    point unit** (**FPU**) option for increased floating point performance.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 32位MCU中非常常见的一种是ARM Cortex-M系列。它包括M0、M0+、M1、M3、M4、M7、M23和M33，其中许多具有**浮点单元**（**FPU**）选项，以提高浮点性能。
- en: Not only are they used as standalone MCUs, they are also commonly integrated
    into **System-on-Chip** (**SoC**) devices to provide specific functionality, such
    as touchscreen, sensor, or power management functionality. As Arm Holdings doesn't
    manufacture any MCUs themselves, many third-party manufacturers have licensed
    the designs, sometimes making their own modifications and improvements.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 它们不仅被用作独立的MCU，还通常集成到**片上系统**（**SoC**）设备中，以提供特定的功能，例如触摸屏、传感器或电源管理功能。由于Arm Holdings本身不制造任何MCU，许多第三方制造商已获得设计许可，有时会进行自己的修改和改进。
- en: 'Here is a brief overview of these MCUs:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是这些MCU的简要概述：
- en: '| **Core** | **Announced** | **Architecture** | **Instruction set** |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| **核心** | **发布** | **架构** | **指令集** |'
- en: '| M0 | 2009 | Armv6-M | Thumb-1, some of Thumb-2. |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| M0 | 2009 | Armv6-M | Thumb-1，部分Thumb-2。 |'
- en: '| M0+ | 2012 | Armv6-M | Thumb-1, some of Thumb-2. |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| M0+ | 2012 | Armv6-M | Thumb-1，部分Thumb-2。 |'
- en: '| M1 | 2007 | Armv6-M | Thumb-1, some of Thumb-2. |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| M1 | 2007 | Armv6-M | Thumb-1，部分Thumb-2。 |'
- en: '| M3 | 2004 | Armv7-M | Thumb-1, Thumb-2. |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| M3 | 2004 | Armv7-M | Thumb-1，Thumb-2。 |'
- en: '| M4 | 2010 | Armv7-M | Thumb1, Thumb-2, optional FPU. |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| M4 | 2010 | Armv7-M | Thumb1，Thumb-2，可选FPU。 |'
- en: '| M7 | 2014 | Armv7E-M | Thumb-1, Thumb-2, optional FPU. |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| M7 | 2014 | Armv7E-M | Thumb-1，Thumb-2，可选FPU。 |'
- en: '| M23 | 2016 | Armv8-M | Thumb-1, some of Thumb-2. |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| M23 | 2016 | Armv8-M | Thumb-1，部分Thumb-2。 |'
- en: '| M33 | 2016 | Armv8-M | Thumb 1, Thumb-2, optional FPU. |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| M33 | 2016 | Armv8-M | Thumb 1，Thumb-2，可选FPU。 |'
- en: The **Thumb** instruction sets are compact, 16-bit-length instructions, making
    them ideal for embedded, resource-restricted systems. Other ARM microprocessor
    families can also support this Thumb instruction set in addition to the 32-bit
    instruction set.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '**Thumb** 指令集是紧凑的、16位长度的指令，这使得它们非常适合嵌入式、资源受限的系统。除了32位指令集之外，其他ARM微处理器系列也可以支持这个Thumb指令集。'
- en: H8 (SuperH)
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: H8（SuperH）
- en: H8 family MCUs were commonly used with 8-, 16-, and 32-bit variations. Originally
    created in the early 1990s by Hitachi, new designs were still being created by
    Renesas Technology until a few years ago, though the latter recommends new designs
    use the RX (32-bit) or RL78 (16-bit) families. A notable use of an H8 MCU is in
    the Lego Mindstorms RCX controller, which uses an H8/300 MCU.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: H8系列MCU通常与8位、16位和32位变体一起使用。最初由日立公司在20世纪90年代初创建，直到几年前，Renesas Technology仍在创建新的设计，尽管后者建议新设计使用RX（32位）或RL78（16位）系列。H8
    MCU的一个显著用途是在乐高Mindstorms RCX控制器中，该控制器使用H8/300 MCU。
- en: ESP8266/ESP32
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ESP8266/ESP32
- en: The ESP family are 32-bit MCUs that are produced by Espressif Systems, with
    integrated Wi-Fi (both) and Bluetooth (ESP32) functionality.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: ESP系列MCU是由Espressif Systems生产的32位MCU，集成了Wi-Fi（两者）和蓝牙（ESP32）功能。
- en: The ESP8266 first appeared in 2014, when it was sold by a third-party manufacturer,
    Ai-Thinker, in the form of a module (ESP-01) that could be used by another MCU
    or microprocessor-based systems to provide Wi-Fi functionality. The ESP-01 module
    contained firmware for this purpose, which allowed the module to be addressed
    using Hayes-style modem commands.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: ESP8266首次出现在2014年，当时由第三方制造商Ai-Thinker以模块（ESP-01）的形式出售，该模块可以被其他MCU或基于微处理器的系统使用，以提供Wi-Fi功能。该模块包含用于此目的的固件，允许使用Hayes风格的调制解调器命令来寻址该模块。
- en: 'Its system specifications are as follows:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 其系统规格如下：
- en: Tensilica Xtensa Diamond Standard L106 microprocessor (32-bit)
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Tensilica Xtensa Diamond Standard L106微处理器（32位）
- en: 80-160 MHz CPU speed
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 80-160 MHz CPU速度
- en: Less than 50 KB of RAM available for user applications (with Wi-Fi stack loaded)
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户应用程序可用的RAM少于50 KB（加载Wi-Fi堆栈后）
- en: External SPI ROM (512 KB to 16 MB)
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外部SPI ROM（512 KB至16 MB）
- en: Wi-Fi support for 802.11 b/g/n
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持802.11 b/g/n的Wi-Fi
- en: As the 32-bit MCU on the ESP-01 module was found to be capable of far more than
    the simple modem task assigned to it, it soon came to be used for more general-purpose
    tasks, with a range of upgraded ESP8266 modules (with integrated EEPROM chip),
    as well as breakout boards. Of the latter, the NodeMCU-style board has become
    very popular, though a number of other third-party manufacturers have made their
    own breakout boards, which provide different form factors and functionality.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 由于ESP-01模块上的32位MCU被发现能够完成比分配给它的简单调制解调器任务多得多的任务，它很快就被用于更通用的任务，包括一系列升级的ESP8266模块（带有集成EEPROM芯片）以及分线板。在后者中，NodeMCU风格的板变得非常受欢迎，尽管许多第三方制造商也制作了自己的分线板，这些分线板提供不同的外形和功能。
- en: 'The basic block diagram for the ESP8266EX looks as follows:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: ESP8266EX的基本框图如下：
- en: '![](img/f0bed65c-4e5c-4765-9d54-34ed7cdd3ee6.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f0bed65c-4e5c-4765-9d54-34ed7cdd3ee6.png)'
- en: 'After the immense success of the ESP8266, Espressif Systems developed the ESP32,
    which used an upgraded, dual-core CPU, among other changes. Its block diagram
    looks like this:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在ESP8266取得巨大成功之后，Espressif Systems开发了ESP32，它采用了升级的双核CPU以及其他一些变化。其框图如下：
- en: '![](img/56fe4fde-18fb-4f1c-b82f-4f07034f5fc3.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/56fe4fde-18fb-4f1c-b82f-4f07034f5fc3.png)'
- en: 'Its specifications are as follows:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 其规格如下：
- en: Xtensa 32-bit LX6 (dual-core) microprocessor
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Xtensa 32位LX6（双核）微处理器
- en: 160-240 MHz CPU speed
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 160-240 MHz的CPU速度
- en: 520 KB of SRAM
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 520 KB的SRAM
- en: Wi-Fi support for 802.11 b/g/n
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持802.11 b/g/n的Wi-Fi
- en: Bluetooth v4.2 and BLE (low energy)
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 蓝牙v4.2和BLE（低功耗）
- en: 'Both the ESP8266 and ESP32 are generally sold as complete modules, with the
    MCU, external ROM module, and a Wi-Fi antenna either integrated into the board
    or with an external antenna option:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: ESP8266和ESP32通常作为完整的模块出售，其中MCU、外部ROM模块和Wi-Fi天线要么集成到板上，要么提供外部天线选项：
- en: '![](img/e66a9c6a-5202-4624-ac38-6a6d2b8273ca.png)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e66a9c6a-5202-4624-ac38-6a6d2b8273ca.png)'
- en: The metal shielding can covering the board helps to protect the board from electromagnetic
    interference,  benefiting its Wi-Fi (and Bluetooth, in the case of the ESP32)
    transceiver, but the whole design with a fixed antenna and geometry is required
    for FCC certification and later use as an approved module. Connecting an external
    antenna with higher gain may violate local regulations. The FCC ID it comes with
    is instrumental in getting a product containing such a module approved for commercialization.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 金属屏蔽可以覆盖板子，有助于保护板子免受电磁干扰，从而有利于其Wi-Fi（以及ESP32的情况下的蓝牙）收发器，但整个设计需要固定天线和几何形状才能通过FCC认证，并在以后作为批准的模块使用。连接增益更高的外部天线可能违反当地法规。附带的FCC
    ID对于获得包含此类模块的产品商业化批准至关重要。
- en: Others
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他
- en: In addition to the previously listed MCUs, there is a wide range of MCUs available
    from a number of manufacturers with different architectures. Some, like the Propeller
    MCU from Parallax with its multi-core architecture, are fairly unique, whereas
    most simply implement the usual single-core CPU architecture with a number of
    peripherals, RAM, and internal or external ROM.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 除了之前列出的MCU之外，还有许多制造商提供具有不同架构的广泛MCU。一些，如Parallax的Propeller MCU，具有多核架构，相当独特，而大多数只是实现了常见的单核CPU架构，并带有多个外围设备、RAM和内部或外部ROM。
- en: Beyond physical chips, Altera (now Intel), Lattice Semiconductor, and Xilinx
    provide so-called soft cores, which are MCUs that are meant to be run on a FPGA chip,
    either as standalone components or as part of a larger design on that FPGA. These
    can also be targeted by C/C++ compilers.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 除了物理芯片之外，Altera（现在是Intel）、Lattice Semiconductor和Xilinx提供所谓的软核，这些MCU旨在在FPGA芯片上运行，无论是作为独立组件还是作为该FPGA上更大设计的一部分。这些也可以由C/C++编译器针对。
- en: Challenges
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 挑战
- en: The main development challenges with MCUs lie in the relatively limited resources
    that are available. Especially with the small, low-pin-count MCUs, you have to
    have a good idea of how many resources (CPU cycles, RAM, and ROM) a particular
    piece of code takes up, and whether it's realistic to add a specific feature.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: MCU的主要开发挑战在于可用的资源相对有限。特别是对于小型、低引脚数的MCU，你必须很好地了解特定代码片段占用多少资源（CPU周期、RAM和ROM），以及添加特定功能是否现实。
- en: This also means that picking the right MCU for a particular project takes both
    technical knowledge and experience. The former is required to pick an MCU that
    will suit the task; the latter is very helpful for the optimal MCU and helps to
    shorten the time that's required to make a choice.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 这也意味着为特定项目选择合适的MCU需要技术和经验。前者是选择适合任务的MCU所必需的；后者对于选择最优的MCU非常有帮助，并有助于缩短做出选择所需的时间。
- en: System-on-Chip/Single Board Computer
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 系统级芯片/单板计算机
- en: '**Systems-on-Chips** (**SoCs**) are similar to MCUs, but distinguish themselves
    from those types of embedded systems by having some level of integration while
    still requiring a number of external components to function. They are commonly
    found as part of a single board implementation (**Single Board Computer** (**SBC**)),
    including the PC/104 standard, and more recently form factors such as the Raspberry
    Pi and derivative boards:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '**系统级芯片（SoC**）与MCU类似，但通过在某种程度上实现集成同时仍需要一定数量的外部组件来区分这些类型的嵌入式系统。它们通常作为单板实现的一部分（**单板计算机（SBC**））出现，包括PC/104标准，以及最近出现的形态，如Raspberry
    Pi及其衍生板：'
- en: '![](img/4dae667e-c4de-480b-9abb-3fda933f6019.png)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4dae667e-c4de-480b-9abb-3fda933f6019.png)'
- en: This diagram was used from [https://xdevs.com/article/rpi3_oc/](https://xdevs.com/article/rpi3_oc/).
    It clearly shows how an SBC (in this case, the Raspberry Pi 3) is laid out. The
    BCM2837 is the ARM-based SoC, providing the CPU core and basic peripherals (mostly
    broken out into the header section). All of the RAM is in an external module,
    as are the Ethernet and Wi-Fi peripherals. ROM is provided in the form of an SD
    (Flash) card, which also provides storage.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 此图来自[https://xdevs.com/article/rpi3_oc/](https://xdevs.com/article/rpi3_oc/)。它清楚地展示了单板计算机（在本例中为Raspberry
    Pi 3）的布局。BCM2837是基于ARM的SoC，提供CPU核心和基本外设（大部分集成到引脚部分）。所有RAM都位于外部模块中，以太网和Wi-Fi外设也是如此。ROM以SD（闪存）卡的形式提供，同时也提供存储。
- en: Most SoCs are ARM-based (Cortex-A family), though MIPS is quite common as well.
    SBCs are commonly used in industrial settings.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数SoC都是基于ARM的（Cortex-A系列），尽管MIPS也很常见。SBC在工业环境中被广泛使用。
- en: Other instances are mass produced boards, such as those for smartphones, which
    do not form a predefined form factor, but still follow the same pattern of having
    the SoC and external RAM, ROM, and storage, as well as various peripherals. This
    is in contrast with the MCUs of the previous section, which would always be able
    to function by themselves, except for the few requiring an external ROM.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 其他实例是大规模生产的板，如智能手机板，它们不形成预定义的形态，但仍然遵循相同的模式，即具有SoC和外部RAM、ROM和存储，以及各种外设。这与上一节中的MCU形成对比，MCU总是能够独立工作，除了少数需要外部ROM的MCU。
- en: Challenges
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 挑战
- en: Compared to MCUs, the development challenges of SoCs tend to be far less severe.
    Some of them are on the level and have an interface where you can even develop
    directly on the device, even doing compilation cycles on the device without having
    to do cross-compilation on a PC and copying over the binary. This is also helped
    by running a full OS instead of developing for the bare hardware.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 与MCU相比，SoC的开发挑战通常要小得多。其中一些挑战与水平相当，并且有一个接口可以直接在设备上开发，甚至可以在设备上直接进行编译周期，而无需在PC上进行交叉编译并复制二进制文件。运行完整的操作系统而不是为裸机开发也有助于这一点。
- en: The obvious disadvantage is that with this increase in features comes an increase
    in complexity, and the resulting complications, such as having to deal with user
    accounts, setting permissions, managing device drivers, and so on.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 显而易见的缺点是，随着功能的增加，复杂性也随之增加，随之而来的复杂问题，如处理用户账户、设置权限、管理设备驱动程序等。
- en: Summary
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we got an in-depth look at what constitutes an embedded system.
    We learned how to distinguish between the various types of embedded systems, as
    well as how to determine the basics of picking the right MCU or SoC for a project.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们深入了解了嵌入式系统的构成。我们学习了如何区分各种类型的嵌入式系统，以及如何确定选择合适MCU或SoC的项目基础。
- en: After this chapter, the reader should feel comfortable reading through datasheets
    for MCUs and SoCs, explaining the differences between both, and determining what
    is needed for a given project.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章之后，读者应该能够舒适地阅读MCU和SoC的数据表，解释两者之间的差异，并确定特定项目所需的内容。
- en: The next chapter will look at why C++ is a highly suitable choice for the programming
    of embedded systems.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将探讨为什么C++是嵌入式系统编程的一个高度合适的选择。
