["```cpp\nQT       += multimedia multimediawidgets\n```", "```cpp\n#ifndef MAINWINDOW_H\n#define MAINWINDOW_H\n\n#include <QMainWindow>\n#include <QCamera>\n#include <QCameraInfo>\n#include <QCameraImageCapture>\n\nnamespace Ui {\n  class MainWindow;\n}\n\nclass MainWindow : public QMainWindow\n{\n  Q_OBJECT\n\npublic:\n  explicit MainWindow(QWidget *parent = 0);\n  ~MainWindow();\n\nprivate:\n  Ui::MainWindow *ui;\n  QList<QCameraInfo> camList;\n  QCamera *camera;\n  QCameraImageCapture *imgCapture;\n\nprivate slots:\n  void onCameraChanged(int);\n  void onCaptureButtonClicked();\n  void onImageCaptured(int, const QImage &);\n};\n\n#endif // MAINWINDOW_H\n```", "```cpp\n#include \"mainwindow.h\"\n#include \"ui_mainwindow.h\"\n\nMainWindow::MainWindow(QWidget *parent) :\n  QMainWindow(parent),\n  ui(new Ui::MainWindow)\n{\n  ui->setupUi(this);\n\n  camera = NULL;\n  connect(ui->captureButton, &QPushButton::clicked, this, &MainWindow::onCaptureButtonClicked);\n  connect(ui->cameraComboBox, static_cast<void (QComboBox::*) (int)>(&QComboBox::currentIndexChanged), this, &MainWindow::onCameraChanged);\n\n  camList = QCameraInfo::availableCameras();\n  for (QList<QCameraInfo>::iterator it = camList.begin(); it != camList.end(); ++it) {\n    ui->cameraComboBox->addItem(it->description());\n  }\n}\n\nMainWindow::~MainWindow()\n{\n  delete ui;\n}\n\nvoid MainWindow::onCameraChanged(int idx)\n{\n  if (camera != NULL) {\n    camera->stop();\n  }\n\n  camera = new QCamera(camList.at(idx), this);\n  camera->setViewfinder(ui->viewfinder);\n  camera->setCaptureMode(QCamera::CaptureStillImage);\n  camera->start();\n}\n\nvoid MainWindow::onCaptureButtonClicked()\n{\n  imgCapture = new QCameraImageCapture(camera, this);\n  connect(imgCapture, &QCameraImageCapture::imageCaptured, this, &MainWindow::onImageCaptured);\n  camera->searchAndLock();\n  imgCapture->setCaptureDestination(QCameraImageCapture::CaptureToFile);\n  imgCapture->capture();\n}\n\nvoid MainWindow::onImageCaptured(int, const QImage &img)\n{\n  QPixmap pix = QPixmap::fromImage(img).scaled(ui->previewLabel->size(), Qt::KeepAspectRatio);\n  ui->previewLabel->setPixmap(pix);\n  camera->unlock();\n  imgCapture->deleteLater();\n}\n```", "```cpp\nconnect(ui->cameraComboBox, SIGNAL(currentIndexChanged(int)), this, SLOT(onCameraChanged(int)));\n```", "```cpp\nQCameraFocus *cameraFocus;\nqreal maximumOptZoom;\n```", "```cpp\nvoid onZoomChanged(int);\n```", "```cpp\nconnect(ui->zoomSlider, &QSlider::valueChanged, this, &MainWindow::onZoomChanged);\n```", "```cpp\ncameraFocus = camera->focus();\n```", "```cpp\nmaximumOptZoom = cameraFocus->maximumOpticalZoom();\nui->zoomSlider->setMaximum(maximumOptZoom * cameraFocus->maximumDigitalZoom() * 10);\n```", "```cpp\nvoid MainWindow::onZoomChanged(int z)\n{\n  qreal zoom = qreal(z) / 10.0;\n  if (zoom > maximumOptZoom) {\n    cameraFocus->zoomTo(maximumOptZoom, zoom / maximumOptZoom);\n  }\n  else {\n    cameraFocus->zoomTo(zoom, 1.0);\n  }\n}\n```", "```cpp\nvoid onCameraError();\nvoid onImageCaptureError(int, QCameraImageCapture::Error, const QString &);\n```", "```cpp\nvoid MainWindow::onCameraError()\n{\n  ui->statusBar->showMessage(camera->errorString(), 5000);\n}\n\nvoid MainWindow::onImageCaptureError(int, QCameraImageCapture::Error, const QString &err)\n{\n  ui->statusBar->showMessage(err, 5000);\n  imgCapture->deleteLater();\n}\n```", "```cpp\nconnect(camera, static_cast<void (QCamera::*) (QCamera::Error)>(&QCamera::error), this, &MainWindow::onCameraError);\n```", "```cpp\nconnect(imgCapture, static_cast<void (QCameraImageCapture::*) (int, QCameraImageCapture::Error, const QString &)>(&QCameraImageCapture::error), this, &MainWindow::onImageCaptureError);\n```", "```cpp\n#ifndef CAMERASTATUSWIDGET_H\n#define CAMERASTATUSWIDGET_H\n\n#include <QLabel>\n#include <QCamera>\n\nclass CameraStatusWidget : public QLabel\n{\n  Q_OBJECT\n  public:\n    explicit CameraStatusWidget(QWidget *parent = 0);\n\n  public slots:\n    void onCameraStatusChanged(QCamera::Status);\n};\n\n#endif // CAMERASTATUSWIDGET_H\n```", "```cpp\n#include \"camerastatuswidget.h\"\n\nCameraStatusWidget::CameraStatusWidget(QWidget *parent) :\n  QLabel(parent)\n{\n}\n\nvoid CameraStatusWidget::onCameraStatusChanged(QCamera::Status s)\n{\n  QString status;\n  switch (s) {\n    case QCamera::ActiveStatus:\n      status = QString(\"Active\");\n      break;\n    case QCamera::StartingStatus:\n      status = QString(\"Starting\");\n      break;\n    case QCamera::StoppingStatus:\n      status = QString(\"Stopping\");\n      break;\n    case QCamera::StandbyStatus:\n      status = QString(\"Standby\");\n      break;\n    case QCamera::LoadedStatus:\n      status = QString(\"Loaded\");\n      break;\n    case QCamera::LoadingStatus:\n      status = QString(\"Loading\");\n      break;\n    case QCamera::UnloadingStatus:\n      status = QString(\"Unloading\");\n      break;\n    case QCamera::UnloadedStatus:\n      status = QString(\"Unloaded\");\n      break;\n    case QCamera::UnavailableStatus:\n      status = QString(\"Unavailable\");\n      break;\n    default:\n      status = QString(\"Unknown\");\n  }\n  this->setText(status);\n}\n```", "```cpp\nCameraStatusWidget *camStatusWid;\n```", "```cpp\ncamStatusWid = new CameraStatusWidget(ui->statusBar);\nui->statusBar->addPermanentWidget(camStatusWid);\n```", "```cpp\nconnect(camera, &QCamera::statusChanged, camStatusWid, &CameraStatusWidget::onCameraStatusChanged);\n```", "```cpp\nQLabel *zoomStatus;\n```", "```cpp\nzoomStatus = new QLabel(QString::number(qreal(ui->zoomSlider->value()) / 10.0), this);\nui->statusBar->addPermanentWidget(zoomStatus);\n```", "```cpp\nzoomStatus->setText(QString::number(zoom));\n```", "```cpp\nconnect(ui->actionExit, &QAction::triggered, this, &MainWindow::close);\n```", "```cpp\nvoid onAboutTriggered();\n```", "```cpp\n#include <QMessageBox>\n```", "```cpp\nvoid MainWindow::onAboutTriggered()\n{\n  QMessageBox::about(this, QString(\"About\"), QString(\"Camera Demonstration of Qt5\"));\n}\n```", "```cpp\nconnect(ui->actionAbout, &QAction::triggered, this, &MainWindow::onAboutTriggered);\n```", "```cpp\nvoid MainWindow::onCaptureButtonClicked()\n{\n  imgCapture = new QCameraImageCapture(camera, this);\n  connect(imgCapture, static_cast<void (QCameraImageCapture::*) (int, QCameraImageCapture::Error, const QString &)>(&QCameraImageCapture::error), this, &MainWindow::onImageCaptureError);\n  connect(imgCapture, &QCameraImageCapture::imageCaptured, this, &MainWindow::onImageCaptured);\n\n  camera->searchAndLock();\n  imgCapture->setCaptureDestination(QCameraImageCapture::CaptureToFile);\n  QString location = QFileDialog::getSaveFileName(this, QString(\"Save Photo As\"), QString(), \"JPEG Image (*.jpg)\");\n  imgCapture->capture(location);\n}\n```", "```cpp\nQString QFileDialog::getSaveFileName(QWidget * parent = 0, const QString & caption = QString(), const QString & dir = QString(), const QString & filter = QString(), QString * selectedFilter = 0, Options options = 0)\n```", "```cpp\n\"JPEG (*.jpeg *.jpg);;PNG (*.png);;BMP (*.bmp)\"\n```", "```cpp\nimport QtQuick 2.3\nimport QtQuick.Controls 1.2\nimport QtMultimedia 5.3\nimport \"qrc:/\"\n\nApplicationWindow {\n  visible: true\n  width: 640\n  height: 480\n  title: qsTr(\"QML Camera Demo\")\n\n  Camera {\n    id: camera\n\n    imageCapture {\n      onImageCaptured: {\n        photoPreview.source = preview\n        photoPreview.visible = true;\n        previewTimer.running = true;\n      }\n    }\n  }\n\n  VideoOutput {\n    id: viewfinder\n    source: camera\n    anchors.fill: parent\n  }\n\n  Image {\n    id: photoPreview\n    anchors.fill: viewfinder\n  }\n\n  Timer {\n    id: previewTimer\n    interval: 2000\n    onTriggered: photoPreview.visible = false;\n  }\n\n  CaptureButton {\n    anchors.right: parent.right\n    anchors.verticalCenter: parent.verticalCenter\n    diameter: 50\n  }\n}\n```", "```cpp\nimport QtQuick 2.3\n\nRectangle {\n  property real diameter\n\n  width: diameter\n  height: diameter\n\n  color: \"blue\"\n  border.color: \"grey\"\n  border.width: diameter / 5\n  radius: diameter * 0.5\n\n  MouseArea {\n    anchors.fill: parent\n    onClicked: camera.imageCapture.capture()\n  }\n}\n```", "```cpp\nimport QtQuick.Dialogs 1.2\n```", "```cpp\nFileDialog {\n  id: saveDlg\n  property string location\n\n  title: \"Save Photo As\"\n  selectExisting: false\n  nameFilters: [ \"JPEG (*.jpg)\" ]\n  onAccepted: {\n    location = saveDlg.fileUrl\n    camera.imageCapture.captureToLocation(location.slice(8))\n  }\n}\n```", "```cpp\nMouseArea {\n  anchors.fill: parent\n  onClicked: saveDlg.open()\n  onPressed: parent.color = \"black\"\n  onReleased: parent.color = \"blue\"\n}\n```", "```cpp\nimport QtQuick 2.3\n\nItem {\n  property real zoom: camera.opticalZoom * camera.digitalZoom\n\n  function zoomControl() {\n    if (zoom > camera.maximumOpticalZoom) {\n      camera.digitalZoom = zoom / camera.maximumOpticalZoom\n      camera.opticalZoom = camera.maximumOpticalZoom\n    }\n    else {\n      camera.digitalZoom = 1.0\n      camera.opticalZoom = zoom\n    }\n  }\n\n  Text {\n    id: indicator\n    anchors.fill: parent\n    horizontalAlignment: Text.AlignHCenter\n    verticalAlignment: Text.AlignVCenter\n    color: \"darkgrey\"\n    font.bold: true\n    font.family: \"Segoe\"\n    font.pointSize: 20\n    style: Text.Raised\n    styleColor: \"black\"\n  }\n\n  Timer {\n    id: indicatorTimer\n    interval: 2000\n    onTriggered: indicator.visible = false\n  }\n\n  MouseArea {\n    anchors.fill: parent\n    onWheel: {\n      if (wheel.angleDelta.y > 0) {\n        zoom += 1.0\n        if (zoom > camera.maximumOpticalZoom * camera.maximumOpticalZoom) {\n          zoom -= 1.0\n        }\n        else {\n          zoomControl()\n        }\n      }\n      else {\n        zoom -= 1.0\n        if (zoom < camera.maximumOpticalZoom * camera.maximumOpticalZoom) {\n          zoom += 1.0\n        }\n        else {\n          zoomControl()\n        }\n      }\n      indicator.text = \"X \" + zoom.toString()\n      indicator.visible = true\n      indicatorTimer.running = true\n    }\n  }\n}\n```", "```cpp\nZoomControl {\n  anchors.fill: viewfinder\n}\n```"]