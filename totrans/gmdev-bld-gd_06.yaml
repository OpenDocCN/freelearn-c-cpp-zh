- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Exporting Blender Assets
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导出Blender资产
- en: Your journey in Blender has taken you to this point, where you want to take
    your creations in Blender and deploy them in Godot Engine. We’ll cover importing
    these assets into Godot in the next chapter, but first, we must make sure everything
    we have in Blender is up to Godot’s standard. So, we’ve got to iron out a few
    kinks before exporting.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 你的Blender之旅已经带你到了这个阶段，你想要将Blender中的创作部署到Godot引擎中。我们将在下一章中介绍如何将这些资产导入Godot，但首先，我们必须确保我们在Blender中的所有内容都符合Godot的标准。因此，在导出之前，我们必须解决一些小问题。
- en: First, we are going to make sure the geometry of our models is fine. We have
    already talked about polygons; we’ll dive deeper to understand them better to
    achieve models with better geometry. Origin points are an important concept in
    both Blender and Godot. We’ll discuss why they are important and learn how to
    alter the origin points.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们要确保我们模型的几何形状是正确的。我们已经讨论了多边形；我们将更深入地了解它们，以实现具有更好几何形状的模型。原点在Blender和Godot中都是一个重要的概念。我们将讨论为什么它们很重要，并学习如何更改原点。
- en: 'We have not discussed the dimensions of our models so far. However, more important
    than the dimensions of your models, we’ll investigate a concept called **scale**
    or **scale factor**, which is crucial when you send your assets to not only Godot
    Engine but also to other game engines. The final part of getting your models ready
    is an organizational practice: naming your assets.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们还没有讨论过我们模型的维度。然而，比你的模型维度更重要的是，我们将研究一个称为**尺度**或**尺度因子**的概念，这在将你的资产发送到Godot引擎以及其他游戏引擎时至关重要。准备你的模型的最后部分是一个组织实践：给你的资产命名。
- en: After we finish making our preparations, we’ll need to convert our assets into
    a format Godot understands. To that end, we’ll explore **glTF** and compare this
    format to a few others. Once Godot imports this file type, it will understand
    how to make sense of vertices, materials, and animations stored in a Blender file.
    We’ll look into importing in the next chapter, though.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们完成准备工作后，我们需要将我们的资产转换为Godot能理解的格式。为此，我们将探索**glTF**并比较这种格式与其他几种格式。一旦Godot导入这种文件类型，它将理解如何理解存储在Blender文件中的顶点、材质和动画。我们将在下一章中探讨导入。
- en: Lastly, just because we can transfer assets out of a Blender file doesn’t mean
    we should be all-inclusive. We’ll discuss which objects in a Blender scene are
    useful from a game development perspective. During this exercise, we’ll also learn
    how to store our preferences for selecting the objects we want to export under
    **presets** so that we don’t have to remember the export conditions every single
    time.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，仅仅因为我们可以从Blender文件中传输资产，并不意味着我们应该无所不包。我们将讨论从游戏开发角度来看，Blender场景中哪些对象是有用的。在这个练习中，我们还将学习如何将我们想要导出的对象的偏好存储在**预设**中，这样我们就不必每次都记住导出条件。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Getting ready to export
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备导出
- en: Exploring glTF and other export formats
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索glTF和其他导出格式
- en: Deciding what to export
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 决定导出什么
- en: By the end of this chapter, you’ll know what to do to get your models ready
    for export, choose an appropriate export format and configure it, and learn how
    to export only the stuff you want.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将知道如何为导出准备你的模型，选择合适的导出格式并配置它，以及如何仅导出你想要的材料。
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This is a chapter about understanding some concepts rather than practicing,
    so you’ll do a minimum amount of work, such as looking at the value of certain
    things and occasionally rotating some objects. You’ll likely revisit this chapter
    later to remember how to export your work samples. So, it’s OK to do a preliminary
    reading first and come back again for another read.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一章关于理解一些概念而不是实践的内容，所以你将做最少的作业，比如查看某些值，偶尔旋转一些对象。你可能会稍后再次查阅本章，以记住如何导出你的工作样本。因此，先进行初步阅读，然后再回来重读是完全可以的。
- en: 'Wherever it’s relevant in this chapter, the appropriate filenames in the `Start`
    and `Finish` folders will be mentioned. The files that contain the necessary assets
    have been provided for you in this book’s GitHub repository: [https://github.com/PacktPublishing/Game-Development-with-Blender-and-Godot](https://github.com/PacktPublishing/Game-Development-with-Blender-and-Godot).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的相关部分，将提到`Start`和`Finish`文件夹中适当的文件名。包含必要资产的文件已提供在本书的GitHub仓库中：[https://github.com/PacktPublishing/Game-Development-with-Blender-and-Godot](https://github.com/PacktPublishing/Game-Development-with-Blender-and-Godot)。
- en: Getting ready to export
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备导出
- en: There are plans to make the transition between Blender and Godot Engine more
    seamless in future versions. For example, you’ll be able to deploy your Blender
    file directly in a Godot project and start accessing the elements from your Blender
    scene directly in Godot. However, we are not there yet, so we need to do a bit
    of housekeeping before we send our stuff to Godot.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 计划在未来的版本中使Blender和Godot引擎之间的转换更加无缝。例如，你将能够直接在Godot项目中部署你的Blender文件，并直接在Godot中访问你的Blender场景中的元素。然而，我们还没有达到那个阶段，所以在我们将内容发送到Godot之前，我们需要做一些整理工作。
- en: 'The following is not a complete list, but it covers the most common problems
    many artists face when they go between Blender and Godot:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列表并不完整，但它涵盖了艺术家在从Blender到Godot转换时遇到的最常见问题：
- en: Deciding what to do with n-gons
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 决定如何处理n边形
- en: Setting origin points
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置原点
- en: Applying rotation and scale
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用旋转和缩放
- en: Naming things properly
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正确命名事物
- en: Now, let’s discuss these topics (problems) and their solutions. We’ll start
    with more labor-intensive topics and finish off with easier things to take care
    of before you hit the export button.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们讨论这些主题（问题）及其解决方案。我们将从劳动密集型主题开始，并在点击导出按钮之前完成更容易处理的事情。
- en: Deciding what to do with n-gons
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 决定如何处理n边形
- en: 'Let’s give a formal definition of an **n-gon** and move on to its relevance
    in our work. Mathematically, a closed plane with *n* edges is an n-gon, but we
    use friendlier names for some of these n-gons. For example, a triangle is another
    name for a 3-gon. Moreover, for any number of edges equal to or more than five,
    we generally use Greek prefixes to describe them – this includes pentagons, hexagons,
    heptagons, and others. Lastly, a question for you to ponder on: what do you call
    a 4-gon, a square or a rectangle?'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们给**n边形**一个正式的定义，并继续讨论它在我们的工作中的相关性。从数学上讲，有*n*条边的封闭平面是一个n边形，但我们为其中一些n边形使用了更友好的名称。例如，三角形是3边形的另一个名称。此外，对于等于或超过五条边的任何数量的边，我们通常使用希腊前缀来描述它们——这包括五边形、六边形、七边形以及其他。最后，一个问题供你思考：你如何称呼四边形，是正方形还是矩形？
- en: Although nothing is stopping you from creating 3D objects with faces that can
    make up any type of n-gon, you should avoid it in some circumstances. It’s not
    a hard rule but it’s something to keep in mind. So, why is this important for
    us?
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然没有阻止你创建由可以组成任何类型n边形的面构成的三维对象，但在某些情况下你应该避免这样做。这不是一条硬性规则，但这是你需要记住的事情。那么，这对我们为什么很重要呢？
- en: 'We briefly discussed the role of a **Graphics Processing Unit** (**GPU**) in
    [*Chapter 1*](B17473_01.xhtml#_idTextAnchor013), *Creating Low-Poly Models*. Just
    as a reminder, a GPU takes a polygon and dissects it into the tiniest n-gon, namely
    a triangle. So, when you throw a bunch of complex polygons such as a pentagon
    or worse at the GPU, it processes these complex shapes to the best of its capability
    into triangles. This process is called **triangulation**. The following figure
    shows a few examples of triangulation:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[*第1章*](B17473_01.xhtml#_idTextAnchor013)中简要讨论了**图形处理单元**（**GPU**）在*创建低多边形模型*中的作用。作为一个提醒，GPU会将多边形分解成最小的n边形，即三角形。所以，当你向GPU扔出一堆复杂的多边形，如五边形或更复杂的形状时，它会尽其所能将这些复杂形状处理成三角形。这个过程称为**三角化**。以下图显示了三角化的几个示例：
- en: '![Figure 6.1 – The triangulation result could be different for the same polygon
    ](img/Figures_6.1_B17473.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图6.1 – 同一多边形的三角化结果可能不同](img/Figures_6.1_B17473.jpg)'
- en: Figure 6.1 – The triangulation result could be different for the same polygon
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.1 – 同一多边形的三角化结果可能不同
- en: Thus, when you leave the triangulation task to the GPU, it makes assumptions
    about which vertices should connect. Keep in mind that we don’t want all the vertices
    to be connected, just the minimum number without creating any overlapping edges.
    So, for a pentagon, we can have five different triangulation cases. That’s a lot
    of guesswork for a GPU to know which one you’d prefer.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当你将三角化任务留给GPU时，它会假设哪些顶点应该连接。记住，我们不想所有顶点都连接，只希望连接最少的顶点，而不创建任何重叠的边。所以，对于一个五边形，我们可以有五种不同的三角化情况。这对GPU来说是一个很大的猜测工作，以确定你更喜欢哪一种。
- en: In [*Chapter 5*](B17473_05.xhtml#_idTextAnchor075), *Setting Up Animation and
    Rigging*, we discussed the role of **topology**, which mainly involves distributing
    edges and faces. If you studied the content in more detail by following the URLs
    provided in that chapter, you must have come across the notion of edge flow. If
    you have a rig that’s supposed to bend the model, you’ll want the edges to follow
    a line as straight as possible into the bent part. Consequently, it pays off to
    do your own triangulation to create a smooth edge flow or simply avoid any n-gons
    altogether.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [*第五章*](B17473_05.xhtml#_idTextAnchor075) *设置动画和绑定* 中，我们讨论了 **拓扑** 的作用，这主要涉及分布边和面。如果你通过该章节提供的
    URL 仔细研究了内容，你一定已经遇到了边流的概念。如果你有一个应该弯曲模型的绑定，你希望边尽可能直地进入弯曲部分。因此，自己进行三角剖分以创建平滑的边流或完全避免任何
    n-边形都是有益的。
- en: 'N-gons usually occur when you do loop cuts, but you can also create them accidentally
    while editing other parts of your model without noticing it. A quick way to get
    rid of them, if you can’t avoid creating them, is to connect some of the vertices
    manually. You’ll find an object with five vertices, hence five edges sharing one
    face, inside the `Ngons.blend` file in the `Start` folder. That’s a 5-gon or a
    pentagon right there. Let’s see how we can fix it:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: n-边形通常在你进行环切时出现，但你也可以在编辑模型的其他部分时意外地创建它们，而没注意到。如果你无法避免创建它们，一个快速去除它们的方法是手动连接一些顶点。你会在
    `Start` 文件夹中的 `Ngons.blend` 文件内找到一个具有五个顶点的对象，因此有五个边共享一个面。那是一个五边形或五角形。让我们看看我们如何修复它：
- en: Select the vertex at the top and one of the bottom vertices by holding *Shift*.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择顶部的顶点和一个底部的顶点，通过按住 *Shift* 键。
- en: Press *J* to trigger the **Connect Vertex Path** operation.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *J* 键触发 **连接顶点路径** 操作。
- en: 'This may not look much different, but you have added one more face by connecting
    those two vertices. You must have two faces now. Let’s do something similar but
    pay attention to the number of faces shown on the right-hand side of the status
    bar. It should show **Faces: 0/3** after you do the following:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能看起来没有太大区别，但你通过连接这两个顶点已经增加了一个面。你现在必须有两个面了。让我们做类似的事情，但要注意状态栏右侧显示的面数。在你完成以下操作后，它应该显示
    **面数：0/3**：
- en: Select the vertex at the top and then the other bottom vertex by holding *Shift*.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择顶部的顶点，然后通过按住 *Shift* 键选择其他底部的顶点。
- en: Press *J* to connect these two vertices.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *J* 键连接这两个顶点。
- en: After your previous edits, your pentagon will look like the third case in *Figure
    6.1*. If you fancy it, you can undo your steps and connect another set of vertices.
    Which vertices you should connect depends on your situation, so there is no hard
    rule.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在你之前的编辑之后，你的五边形将看起来像 *图 6.1* 中的第三种情况。如果你喜欢，你可以撤销你的步骤并连接另一组顶点。你应该连接哪些顶点取决于你的情况，所以没有硬性规则。
- en: Despite the number of vertices staying the same, you now have two more faces
    and two more edges compared to the initial state. Speaking of the initial conditions,
    take a look at `Ngons.blend` without saving; you’ll see that **Tris** in the status
    bar will still show **3**. That’s because the GPU was implicitly triangulating
    the pentagon. You have now explicitly defined which vertices should connect, hence
    where the edges and faces should be.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管顶点的数量保持不变，但你现在比初始状态多了两个面和两个边。说到初始条件，看一下未保存的 `Ngons.blend`；你会看到状态栏中的 **三角面**
    仍然显示 **3**。这是因为 GPU 隐式地三角剖分了五边形。你现在明确地定义了哪些顶点应该连接，因此边和面应该在何处。
- en: Now that we have covered why and when it is important to fix the n-gons, here
    is a situation where you may not need to be concerned about n-gons at all. If
    you have a model that you know, for sure, you won’t be animating (hence there
    is no rigging that would require a clean topology), then you can do without fixing
    your n-gons. Professionals insist on fixing n-gons because chances are the models
    will be animated, so they do it just in case. However, you now know you also have
    a choice.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经讨论了为什么和什么时候固定 n-边形很重要，这里有一个你可能根本不需要担心 n-边形的情况。如果你有一个模型，你确信你不会对其进行动画处理（因此没有需要干净拓扑的绑定），那么你可以不固定你的
    n-边形。专业人士坚持固定 n-边形，因为模型很可能会被动画化，所以他们只是以防万一。然而，你现在知道你也有选择。
- en: Setting origin points
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置原点
- en: An origin point is a point where all your transformations start. This often
    sounds a bit technical, so sometimes, it’s easier to think of it as the center
    of gravity. However, that might be a misleading definition because you can change
    the origin point for your models, whereas the center of gravity doesn’t normally
    change in real life.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 原点是一个所有变换开始的位置。这听起来可能有点技术性，所以有时，把它想象成重心可能更容易理解。然而，这个定义可能有些误导，因为你可以为你的模型改变原点，而在现实生活中，重心通常不会改变。
- en: 'We must open `Origins.blend` in the `Start` folder to get to the bottom of
    origin points. For now, let’s just look at the following screenshot:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须打开 `Origins.blend` 文件在 `Start` 文件夹中，以深入了解原点。现在，让我们先看看以下截图：
- en: '![Figure 6.2 – These two barrels look very similar, but are they? ](img/Figures_6.2_B17473.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图6.2 – 这两个桶看起来非常相似，但它们真的相似吗？](img/Figures_6.2_B17473.jpg)'
- en: Figure 6.2 – These two barrels look very similar, but are they?
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.2 – 这两个桶看起来非常相似，但它们真的相似吗？
- en: The `Origins.blend` file will contain two barrels, one painted in red and another
    painted in yellow. If you select the red and yellow barrels back and forth, you’ll
    notice that an orange dot inside the outlined shape is in a different spot for
    each barrel. To get a better view of what’s going on, you can switch to the **Right
    Orthographic** view by pressing *3* and observing that orange dot after you select
    either barrel. That dot is the origin point.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`Origins.blend` 文件将包含两个桶，一个涂成红色，另一个涂成黄色。如果你交替选择红色和黄色桶，你会注意到轮廓内的橙色点在每个桶中都在不同的位置。为了更好地观察正在发生的事情，你可以通过按
    *3* 切换到**右侧正交**视图，并在选择任意一个桶后观察那个橙色点。那个点就是原点。'
- en: 'Follow these steps to understand the role of the origin point:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤了解原点的作用：
- en: Select the red barrel.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择红色桶。
- en: Press *R* to rotate and then *X* to constrain the rotation axis. Then, type
    `-45`.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *R* 旋转，然后按 *X* 限制旋转轴。然后，输入 `-45`。
- en: Select the yellow barrel.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择黄色桶。
- en: Press *R* to rotate and then *X* to constrain the rotation axis. Then, type
    `45`.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *R* 旋转，然后按 *X* 限制旋转轴。然后，输入 `45`。
- en: 'The values for the rotation were carefully selected to make these barrels tilt
    toward each other so that you can compare their final conditions. Although both
    barrels rotated the same amount, the yellow barrel seems to have leaned closer
    to the ground. To compare your results, you can refer to `Origins-1.blend` in
    the `Finish` folder, or take a look at the following screenshot:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 旋转的值被仔细选择，以便这两个桶向彼此倾斜，这样你就可以比较它们的最终条件。尽管两个桶旋转了相同的角度，但黄色桶似乎更靠近地面。要比较你的结果，你可以参考
    `Finish` 文件夹中的 `Origins-1.blend`，或者看看以下截图：
- en: '![Figure 6.3 – Barrels rotated toward each other by the same amount around
    their origin point ](img/Figures_6.3_B17473.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图6.3 – 桶围绕其原点以相同量旋转](img/Figures_6.3_B17473.jpg)'
- en: Figure 6.3 – Barrels rotated toward each other by the same amount around their
    origin point
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.3 – 桶围绕其原点以相同量旋转
- en: Did you realize that both barrels were rotating around their origin point? We
    could take this a step further and place the origin point at the bottom of one
    of the planks of the barrel’s body.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你意识到两个桶都是围绕原点旋转的吗？我们可以更进一步，将原点放在桶身体的一块板的底部。
- en: 'To make the barrel look like it’s leaning around a more accurate pivot point,
    follow these steps:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 要使桶看起来像是在一个更准确的支点周围倾斜，请按照以下步骤操作：
- en: Select the yellow barrel and press *Alt* + *R* to reset the rotation.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择黄色桶，然后按 *Alt* + *R* 重置旋转。
- en: Go to **Edit Mode** and select the left-most vertex. Alternatively, hold down
    the middle mouse button to get a better view of the vertex that goes along the
    green **Y** axis.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入 **编辑模式** 并选择最左边的顶点。或者，按住鼠标中键以获得更好的视图，观察沿着绿色 **Y** 轴的顶点。
- en: 'We still need to complete a few more steps to set the new origin, but the following
    screenshot should help you find this mysterious vertex:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要完成几个步骤来设置新的原点，但以下截图应该能帮助你找到这个神秘的顶点：
- en: '![Figure 6.4 – This vertex will be the new origin point soon ](img/Figures_6.4_B17473.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图6.4 – 这个顶点很快将成为新的原点](img/Figures_6.4_B17473.jpg)'
- en: Figure 6.4 – This vertex will be the new origin point soon
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.4 – 这个顶点很快将成为新的原点
- en: In [*Chapter 1*](B17473_01.xhtml#_idTextAnchor013), *Creating Low-Poly Models*,
    we briefly mentioned 3D cursors. You might be used to working with other types
    of cursors, such as the ones you often see in a word processor or code editor.
    They usually blink regularly and place the character right there when you type
    on the keyboard.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第1章*](B17473_01.xhtml#_idTextAnchor013)，*创建低多边形模型*中，我们简要提到了3D光标。你可能习惯于使用其他类型的光标，例如你经常在文字处理器或代码编辑器中看到的那些。它们通常在键盘输入时定期闪烁，并将字符放置在那里。
- en: 'Well, this is a 3D cursor, and it doesn’t blink, but its role is similar. You
    can see it sitting where the **X** and **Y** axes meet in the preceding screenshot.
    To move that 3D cursor to the selected vertex and set a new origin, do the following:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，这是一个3D光标，它不会闪烁，但它的作用是相似的。你可以在前面的屏幕截图中看到它位于**X**和**Y**轴的交汇处。要将3D光标移动到所选顶点并设置新的原点，请执行以下操作：
- en: Press *Shift* + *S*. A radial menu will appear and offer many choices for snapping.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*Shift* + *S*。将出现一个径向菜单，提供许多吸附选项。
- en: Select **Cursor to Selected** or press *2*.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**光标到所选**或按*2*。
- en: 'The choice we selected snapped the 3D cursor to the vertex you have selected.
    We are not quite done with moving the origin yet since we haven’t told the *barrel
    object* where the new origin is. For that, we need to do the following:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择的选项将3D光标吸附到所选的顶点上。我们还没有完成移动原点的操作，因为我们还没有告诉*桶对象*新的原点在哪里。为此，我们需要执行以下操作：
- en: Go back to **Object Mode**.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到**对象模式**。
- en: Right-click and choose **Origin to 3D Cursor** under **Set Origin**.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击，然后在**设置原点**下选择**原点到3D光标**。
- en: 'This will move the origin point of the barrel to the 3D cursor. That’s why
    we had to move the 3D cursor to a specific vertex so that we could designate it
    as a new origin. The following screenshot shows the context menu and where to
    find the origin options:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这将移动桶的原点至3D光标。这就是为什么我们必须将3D光标移动到特定的顶点，以便我们可以将其指定为新的原点。以下屏幕截图显示了上下文菜单和找到原点选项的位置：
- en: '![Figure 6.5 – Setting the origin is a common operation, so it’s part of the
    context menu ](img/Figures_6.5_B17473.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图6.5 – 设置原点是常见操作，所以它是上下文菜单的一部分](img/Figures_6.5_B17473.jpg)'
- en: Figure 6.5 – Setting the origin is a common operation, so it’s part of the context
    menu
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.5 – 设置原点是常见操作，因此它是上下文菜单的一部分
- en: You can open `Origins-2.blend` in the `Finish` folder to see the yellow barrel
    applied with the same rotation from before, but, this time, the rotation is happening
    around a different origin point.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在`Finish`文件夹中打开`Origins-2.blend`来查看应用了之前相同旋转的黄色桶，但这次旋转是围绕不同的原点发生的。
- en: In the end, in most situations, setting a new origin point involves going into
    **Edit Mode** to select where you’ll move the origin, then shifting the 3D cursor
    to this point temporarily so that you can set the origin in **Object Mode**. You
    could, of course, designate a completely arbitrary point outside the volume of
    your objects as their origin too.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在大多数情况下，设置新的原点需要进入**编辑模式**选择你将移动原点的位置，然后将3D光标临时移到这个点，以便你可以在**对象模式**中设置原点。当然，你也可以指定一个完全随意的点作为你对象的原点。
- en: An origin point will be used in Godot later, similar to Blender. If you set
    the origin point for a door at one of the hinges in Blender, rotating that door
    in Godot around the **Y** axis will use the hinge to revolve the door so that
    everything will look correctly calculated and adjusted.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在Godot中稍后将会使用一个原点，类似于Blender。如果你在Blender中为门设置一个铰链作为原点，那么在Godot中绕**Y**轴旋转该门时，将使用铰链使门旋转，以确保一切看起来都正确计算和调整。
- en: Applying rotation and scale
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用旋转和缩放
- en: This is, by far, one of the most important topics to take care of before you
    export your Blender asset. It has been mentioned several times in this book that
    looks can be deceiving. Applying rotation and scale falls under the false looks
    category. Let’s understand this issue better by opening `Scale.blend` in the `Start`
    folder.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这无疑是你在导出Blender资产之前需要关注的最重要的话题之一。在这本书中已经多次提到，外观可能会欺骗人。应用旋转和缩放属于虚假外观类别。让我们通过在`Start`文件夹中打开`Scale.blend`来更好地理解这个问题。
- en: You should see two cubes, as shown in the following screenshot, that are on
    either side of the **X** axis. Also, the **Transform** panel is already expanded
    for you to look at the transform these cubes have, and you can use the *N* shortcut
    to toggle it on and off in the future. An object’s transform is defined by its
    location, rotation, scale, and dimensions, but we’re only interested in rotation
    and scale.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能看到两个立方体，如图所示，它们位于**X**轴的两侧。此外，**变换**面板已经展开，以便你可以查看这些立方体的变换，并且你可以使用*N*快捷键在将来切换它开和关。一个对象的变换由其位置、旋转、缩放和尺寸定义，但我们只对旋转和缩放感兴趣。
- en: Those two cubes sure look the same, except one is green and the other is red,
    but they also are different in another way. Start by selecting the red cube, then
    the green cube. Do this a bunch of times while paying attention to what’s changing
    in the **Transform** panel.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个立方体看起来确实很相似，除了一个是绿色，另一个是红色，但它们在另一个方面也有所不同。首先选择红色立方体，然后选择绿色立方体。重复多次这个操作，同时注意**变换**面板中发生了什么变化。
- en: 'The following screenshot also shows you where you can find this panel:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图也显示了你可以找到这个面板的位置：
- en: '![Figure 6.6 – The Transform panel is in the top-right corner of the 3D Viewport
    area ](img/Figures_6.6_B17473.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![图6.6 – 变换面板位于3D视图区域的右上角](img/Figures_6.6_B17473.jpg)'
- en: Figure 6.6 – The Transform panel is in the top-right corner of the 3D Viewport
    area
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.6 – 变换面板位于3D视图区域的右上角
- en: 'Both cubes’ dimensions are 4 x 4 x 4 meters. Their location, individually,
    indicates where they are supposed to be. So far, so good. The scale and rotation
    values tell us a different story, though. So, how did this happen? Simply, the
    author of this file did what even the most advanced users sometimes do: they started
    modifying the properties of the red cube in **Object Mode**, whereas the green
    cube received its changes in **Edit Mode**.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 两个立方体的尺寸都是4 x 4 x 4米。它们的位置分别指示它们应该在哪里。到目前为止，一切顺利。然而，缩放和旋转的值告诉我们一个不同的故事。那么，这是怎么发生的呢？简单来说，这个文件的作者做了即使是高级用户有时也会做的事情：他们在**对象模式**中开始修改红色立方体的属性，而绿色立方体的变化是在**编辑模式**中接收的。
- en: Making such a simple mistake is quite common, and in fact, it may not even be
    considered a mistake because sometimes, you just want to select things and start
    editing without worrying too much about which mode the object is in. However,
    once you are done, you need to reset the rotation and scale back to `1` for game
    engines to do their job. This is one of the most common things people fix before
    they deploy their models to any game engine, so the situation is export format-agnostic.
    So, if you want to export your files as FBX so that you can import them into Unity,
    you’ll still need to do this.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这样简单的错误相当常见，实际上，它甚至可能不被认为是错误，因为有时你只是想选择一些东西并开始编辑，而不太关心对象处于哪种模式。然而，一旦你完成编辑，你需要将旋转和缩放重置回`1`，以便游戏引擎能够正常工作。这是人们在将模型部署到任何游戏引擎之前最常见的问题之一，所以这种情况与导出格式无关。因此，如果你想将文件导出为FBX格式以便将其导入Unity，你仍然需要这样做。
- en: Luckily, the fix is simple. You can select the object that has a transform you
    want to fix, then press *Ctrl* + *A*. A popup menu will ask you what properties
    you would like to apply, which will reset the object’s transform for the selected
    property. The fifth option, **Rotation & Scale**, is what we are looking for.
    When you trigger that option, you’ll see that the red cube’s rotation and scale
    values will reset to their default values.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，修复方法很简单。你可以选择你想要修复变换的对象，然后按*Ctrl* + *A*。一个弹出菜单会询问你想要应用哪些属性，这将重置对象所选属性的变换。第五个选项**旋转
    & 缩放**就是我们想要的。当你触发这个选项时，你会看到红色立方体的旋转和缩放值将重置为默认值。
- en: After you import your models into Godot Engine, or another game engine for that
    matter, when your models behave in a weird way, such as some faces are missing
    or the animations are acting up, often, the rotation and scale are the culprits.
    So, make sure they are zeroed in before you export.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在你将模型导入Godot引擎或任何其他游戏引擎之后，当你的模型行为异常，例如某些面缺失或动画出现问题，通常，旋转和缩放是罪魁祸首。所以，在导出之前，请确保它们被归零。
- en: Naming things properly
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 正确命名事物
- en: 'Phil Karlton, who worked at Netscape, now a disbanded company that paved the
    way for browsing the internet with their web browser *Netscape Navigator*, famously
    uttered the following words:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Phil Karlton，曾在Netscape工作，现在是一家解散的公司，他们通过他们的网络浏览器*Netscape Navigator*为浏览互联网铺平了道路，曾著名地说过以下的话：
- en: '“There are only two hard things in computer science: cache invalidation and
    naming things.”'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: “在计算机科学中，只有两件难事：缓存失效和命名事物。”
- en: This quote is often passed around as a joke but, like most jokes, there is a
    hint of truth. If not in cache invalidation, there certainly is for naming things.
    Seeing meaningful names will make it easier for the future you or for a colleague
    to remember and understand what was done before.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这句话经常被当作玩笑来传，但就像大多数玩笑一样，其中有一丝真理。如果不是在缓存失效方面，那么在命名事物方面肯定有。看到有意义的名称将使未来的你或同事更容易记住和理解之前所做的工作。
- en: 'When you start with primitive objects, Blender will label them for what they
    are: cube, plane, light, and so on. Your models will eventually get more complex
    at some point, and they will most likely have parts that will no longer look like
    a cube. So, keeping the original names will make your life harder at some point,
    both while working in Blender and Godot and even in another application if you
    use your exported assets.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 当你从原始对象开始时，Blender会根据它们的类型来标记它们：立方体、平面、灯光等等。你的模型在某个时候最终会变得更加复杂，它们很可能会有不再看起来像立方体的部分。因此，保留原始名称将在某个时候使你在Blender和Godot中工作，甚至在其他应用程序中使用你导出的资产时，生活变得更加困难。
- en: So, give your objects names!
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，给你的对象命名吧！
- en: Wrapping up
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: You’ll likely do some of these fixes more regularly than others. It’s easy to
    forget to apply transformations, for instance, but it’s an easy fix. Changing
    the origin point is a useful method during the modeling process for you to scale
    and rotate things smartly. In the end, you’ll most likely leave it at its last
    position, so it’s OK to come back to Blender to set it to its permanent position
    for your game to apply correct transformations later. Peruse the list of topics
    presented in this section as often as you need, and you’ll develop a habit over
    time.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会比其他一些修复更频繁地做这些修复。忘记应用变换很容易，但这是一个简单的修复。在建模过程中改变原点是让你智能地缩放和旋转事物的一个有用方法。最后，你很可能会将其留在最后的位置，所以回到Blender将其设置为永久位置以供游戏应用正确的变换是完全可以的。经常浏览本节中提出的主题列表，随着时间的推移，你将养成习惯。
- en: If you would like to practice the notions presented so far, we have prepared
    a `Fix-Me.blend` file in the `Start` folder. We wanted to design a simple heavyweight
    very fast, so that effort left the object with its default name. Also, its rotation
    and scale values look premature. While you are at it, you can also fix the n-gon
    and move the origin point to a different corner.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要练习到目前为止所提出的概念，我们在“开始”文件夹中准备了一个`Fix-Me.blend`文件。我们想要设计一个简单而快速的重型对象，所以这个努力让对象保留了默认名称。此外，它的旋转和缩放值看起来有些过早。当你这样做的时候，你还可以修复n-边形并将原点移动到不同的角落。
- en: At some point, you’ll eventually want to transfer your files to Godot. To that
    end, we often use exchange formats when both applications don’t share a common
    file format. That’ll be the case for us since we can’t directly open and process
    Blender files in Godot. Therefore, we will discover a file format, glTF, that’s
    been gaining popularity in recent years. It will help us transfer our work in
    Blender to Godot Engine.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在某个时候，你最终会想要将你的文件转移到Godot中。为此，当这两个应用程序不共享一个共同的文件格式时，我们通常会使用交换格式。对我们来说，情况就是这样，因为我们不能直接在Godot中打开和处理Blender文件。因此，我们将发现一个近年来越来越受欢迎的文件格式，即glTF，这将帮助我们把我们Blender中的工作转移到Godot引擎中。
- en: Exploring glTF and other export formats
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索glTF和其他导出格式
- en: Compatibility between different software has always been a delicate matter.
    Actually, with most physical things, it is still a common problem even in modern
    life. Electric plugs and sockets, for example, come in different shapes and sizes
    in many countries. At the time of writing, 15 plug types are used worldwide according
    to [https://www.worldstandards.eu/electricity/plugs-and-sockets/](https://www.worldstandards.eu/electricity/plugs-and-sockets/).
    You may want to make sure your devices are compatible before you leave home for
    a long distance.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 不同软件之间的兼容性一直是一个微妙的问题。实际上，在现代社会，大多数物理事物仍然是一个常见问题。例如，许多国家的电源插座和插头形状和尺寸各不相同。在撰写本文时，根据[https://www.worldstandards.eu/electricity/plugs-and-sockets/](https://www.worldstandards.eu/electricity/plugs-and-sockets/)，全球有15种插头类型在使用。在你离家长途旅行之前，你可能想要确保你的设备是兼容的。
- en: It seems there is no consensus on what type of plug is best. Similarly, when
    it comes to exchanging data between different pieces of software, there are a
    plethora of options you could choose from. So, in the next few sections, we will
    discuss different types of export formats to see why we should choose glTF over
    other formats and how gITF is the better choice. Then, we will discuss gITF in
    detail.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 似乎没有关于哪种插件最好的共识。同样，当涉及到不同软件之间的数据交换时，有大量的选项可以选择。因此，在接下来的几节中，我们将讨论不同类型的导出格式，以了解为什么我们应该选择glTF而不是其他格式，以及为什么glTF是更好的选择。然后，我们将详细讨论glTF。
- en: Comparing gITF with other formats
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将glTF与其他格式进行比较
- en: 'Out of the dozen file formats Blender employs in its arsenal of export options,
    we’ll focus on glTF because it works well with Godot Engine. That being said,
    let’s present a few popularly used formats such as **Collada**, **FBX**, and **OBJ**
    first before we get to the good stuff:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在Blender提供的众多导出选项中，我们将重点关注glTF格式，因为它与Godot引擎配合得很好。话虽如此，在我们深入探讨之前，让我们先介绍一些常用的格式，如**Collada**、**FBX**和**OBJ**：
- en: '**Collada**: This format, which has DAE as its file extension, was conceived
    to be a data exchange format between 3D applications. This sounds promising at
    first, but although a game engine could be considered a 3D application, it’s not
    – at least regarding the way this format was intended to be used. Collada was
    designed more for exchanging information between more classic 3D authoring programs
    such as Blender, Studio Max, Maya, and others, but not so much for game engines.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Collada**：这种格式，其文件扩展名为DAE，最初是为了在3D应用程序之间作为数据交换格式而设计的。一开始听起来很有前途，但尽管游戏引擎可以被视为3D应用程序，但它并不是——至少就这种格式预期使用的方式而言。Collada更多地是为了在更经典的3D创作程序之间交换信息而设计的，如Blender、Studio
    Max、Maya等，而不是为了游戏引擎。'
- en: It’s based on XML, so you can open a Collada file with a text editor. This format
    fell out of favor over time since the specifications were ambiguous and have been
    incorrectly interpreted and implemented. For earlier versions of Godot, especially
    before glTF was out, Collada used to be the preferred file type. Now, we have
    glTF as a much better option.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 它基于XML，因此你可以用文本编辑器打开Collada文件。随着时间的推移，这种格式不再受欢迎，因为规范模糊，并且被错误地解释和实现。对于Godot的早期版本，特别是在glTF出现之前，Collada曾经是首选的文件类型。现在，我们有glTF作为更好的选择。
- en: '**FBX**: This is a proprietary file format offered by Autodesk. Since there
    are no official format specifications available to the public, and FBX’s license
    doesn’t let open source projects use FBX, even if the specifications are privately
    acquired, there have been attempts to reverse-engineer this format to write exporters
    for it. That’s how Blender implemented the FBX exporter to the best of their guesses.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**FBX**：这是Autodesk提供的一种专有文件格式。由于没有官方的格式规范可供公众获取，并且FBX的许可证不允许开源项目使用FBX，即使私下获取了规范，也已有尝试逆向工程此格式以编写导出器的行为。这就是Blender根据他们的猜测实现了FBX导出器的方式。'
- en: Additionally, Godot engineers did their best to implement an FBX importer. Nevertheless,
    all this has been a bit of guesswork since the specifications are not open. To
    prevent hidden surprises and for a more seamless transition over to Godot, we
    won’t use this format.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Godot工程师们尽力实现了FBX导入器。尽管如此，由于规范不公开，所有这些都只是一些猜测。为了防止隐藏的惊喜，以及更平滑地过渡到Godot，我们不会使用这种格式。
- en: '**OBJ**: This is a simple plain text data format created by Wavefront Technologies.
    So, yes, this too can be opened with a text editor. Plain text data formats offer
    ease of editing, but since they are not compressed files, it’s often slow to parse
    and import them. OBJ suffers from a different problem, though. It can’t store
    animations and light sources, but it’s a simple and good format to primarily hold
    mesh information.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OBJ**：这是由Wavefront Technologies创建的一种简单的纯文本数据格式。所以，是的，这也可以用文本编辑器打开。纯文本数据格式提供了编辑的便利性，但由于它们不是压缩文件，解析和导入它们通常很慢。尽管OBJ存在不同的问题，它不能存储动画和光源，但它是一个简单且良好的格式，主要用于存储网格信息。'
- en: This also means it doesn’t store material and texture information. To achieve
    that, you need to create an MTL file alongside the OBJ file you are creating.
    OBJ is an old and reliable format and is considered an industry standard, but
    it’s not cut out for modern game engines.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这也意味着它不存储材质和纹理信息。为了实现这一点，你需要创建一个MTL文件，与你要创建的OBJ文件一起。OBJ是一种古老且可靠的格式，被认为是行业标准，但它不适合现代游戏引擎。
- en: Now that we have seen which formats we won’t use, let’s focus on what makes
    glTF a better choice for us. We’ll do this by providing a brief history of glTF,
    followed by presenting which settings we must choose in Blender’s export settings
    for our efforts.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经看到了我们不会使用的格式，让我们关注一下glTF为什么是我们更好的选择。我们将通过提供glTF的简要历史，然后展示在Blender的导出设置中我们必须选择哪些设置来做到这一点。
- en: Introducing glTF
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍glTF
- en: Short for **Graphics Language Transmission Format**, glTF was first released
    in 2015 by Khronos Group, a member-driven non-profit consortium founded and empowered
    by many big corporations. Not every member corporation is in the digital content
    creation business, but they have a stake in the consortium because Khronos maintains
    other standards such as OpenGL and WebGL, two well-known graphics APIs that serve
    many industries.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 简称**图形语言传输格式**的glTF，首次由Khronos Group于2015年发布，这是一个由许多大型企业成立和授权的成员驱动型非营利性联盟。并非每个成员企业都从事数字内容创作业务，但他们因为Khronos维护其他标准，如OpenGL和WebGL，这两种广为人知的图形API服务于许多行业，所以他们对联盟有所投资。
- en: The discussion about the reliability of a file format might be important at
    this point, especially if you are planning to reduce long-term maintenance problems
    and costs. For example, how many of us remember the early internet days’ video
    file formats? Just to name a few, there was RealMedia, QuickTime, DivX, and many
    others, for which we’d have to install codecs, plugins, and more just to watch
    a few cat videos. Our desire to watch our furry companions never changed, thankfully.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段讨论文件格式的可靠性可能很重要，特别是如果你计划减少长期维护问题和成本。例如，我们中有多少人还记得早期互联网时代的视频文件格式？仅举几个例子，有RealMedia、QuickTime、DivX等等，我们不得不安装编解码器、插件等等，只是为了看几个猫视频。幸运的是，我们观看我们毛茸茸的伴侣的愿望从未改变。
- en: Nevertheless, things coalesce eventually, and it gives way to better and more
    maintainable file formats. Hence, guidance from a standards group such as Khronos
    is a good thing since they ensure that the file format receives proper attention
    and stays up to date with the ever-changing needs of the industry. glTF is one
    of these healthy cases, and the fact that it’s open source and many corporations
    would like to support it is a good sign. It would be a terrible day if you had
    a bunch of assets sitting in your game engine one day and you learned that you
    can no longer export in that file type. What would you do with the existing assets
    – throw them out and convert them into a new format?
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，事物最终会汇聚在一起，并为更好的、更易于维护的文件格式让路。因此，来自像Khronos这样的标准组织的指导是一个好事情，因为他们确保文件格式得到适当的关注，并随着行业不断变化的需求保持更新。glTF就是这样一种健康的情况，而且它是开源的，许多公司都愿意支持它，这是一个好兆头。如果你有一天发现你的游戏引擎中有一堆资产，而你又得知你不能再导出这种文件类型，那将是一个糟糕的日子。你会如何处理现有的资产——扔掉它们并将它们转换成新格式？
- en: 'Now that we’ve had a brief history lesson, let’s get to know the relevant parts
    for us. We’ll utilize Blender’s glTF implementation, which supports the following
    features:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经简要回顾了历史，让我们了解对我们相关的部分。我们将利用Blender的glTF实现，它支持以下功能：
- en: Meshes
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网格
- en: Materials (Principled BSDF) and Shadeless (Unlit)
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 材质（原理BSDF）和无阴影（未照亮）
- en: Textures
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 纹理
- en: Cameras
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 相机
- en: Punctual lights (point, spot, and directional)
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准时灯光（点、聚光灯和方向光）
- en: Extensions
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展
- en: Custom properties
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义属性
- en: Animation (keyframe, shape key, and skinning)
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动画（关键帧、形状关键和蒙皮）
- en: We won’t use even half of this feature set. We discussed why we won’t fuss over
    cameras and lights in [*Chapter 4*](B17473_04.xhtml#_idTextAnchor060), *Adjusting
    Cameras and Lights*, for we’ll set them up when we are building our game in Godot.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会使用这个功能集的一半。我们在[*第4章*](B17473_04.xhtml#_idTextAnchor060)中讨论了为什么我们不会对相机和灯光过于纠结，*调整相机和灯光*，因为当我们使用Godot构建游戏时，我们会设置它们。
- en: 'A quick note on what Blender’s glTF exporter does with meshes: n-gons will
    automatically be triangulated. So, it won’t be left to the GPU’s mercy. The *Deciding
    what to do with n-gons* section of this chapter covered how to split faces into
    triangles if you need a reminder on how to triangulate manually.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 关于Blender的glTF导出器如何处理网格的快速说明：n-边形将被自动三角化。因此，不会留给GPU的仁慈。本章的*决定如何处理n-边形*部分介绍了如果需要手动三角化的提醒。
- en: 'Let’s finish this section off by presenting three different flavors of glTF
    you can use. To access the list of variations, you’ve got to choose the **glTF
    2.0 (.glb/.gltf)** option after expanding the **Export** menu item in the **File**
    menu. In the pop-up screen that appears, you’ll see a **Format** dropdown on the
    right-hand side, which will show the variations that you can see in the following
    screenshot:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过展示三种不同的 glTF 变体来结束本节。要访问变体列表，您需要在 **文件** 菜单中展开 **导出** 菜单项后选择 **glTF 2.0
    (.glb/.gltf)** 选项。在出现的弹出窗口中，您将在右侧看到一个 **格式** 下拉菜单，它将显示以下截图中的变体：
- en: '![Figure 6.7 – Three possible variations you can use for a glTF export ](img/Figures_6.7_B17473.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.7 – 您可以为 glTF 导出使用的三种可能变体](img/Figures_6.7_B17473.jpg)'
- en: Figure 6.7 – Three possible variations you can use for a glTF export
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.7 – 您可以为 glTF 导出使用的三种可能变体
- en: 'These format variations will work the same, regardless of what settings you
    choose. We’ll cover these in the next section, so first, let’s get to know what
    each variation does:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这些格式变体将根据您选择的设置工作相同。我们将在下一节中介绍这些内容，因此首先，让我们了解每个变体做什么：
- en: '`.glb` file extension. We’ll use this variation throughout this book, and you’ll
    most likely use it in your workflow as well since it stores everything you need
    in one file, and it’s compressed. This makes it easy to share with other people
    and transfer over the internet.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.glb` 文件扩展名。我们将在本书中使用这种变体，您也可能会在您的流程中使用它，因为它将所有需要的文件存储在一个文件中，并且进行了压缩。这使得与他人分享和在互联网上传输变得容易。'
- en: '`.gltf` file extension and will make the file size larger but open to easy
    modifications with text editors if you wish. There is no practical reason why
    we should choose this variation over the binary option.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.gltf` 文件扩展名会使文件大小增大，但如果您希望使用文本编辑器进行修改，则非常方便。我们没有实际的理由选择这种变体而不是二进制选项。'
- en: '`.gltf` file extension, similar to the one you get if you choose the `.bin`
    file that holds the data, and optionally all the textures you’ve used with either
    `.jpg` or `.png` extensions. So, it likes to keep things separate. Since the data
    is stored in the `.bin` file, it keeps the `.gltf` portion smaller, unlike the
    **Embedded** variation. Nevertheless, there is still no practical reason for us
    to prefer this format. Also, if you had to send your model away, you’d have to
    remember to send all the separate parts too.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.gltf` 文件扩展名，类似于您选择包含数据的 `.bin` 文件时得到的扩展名，以及可选的您使用 `.jpg` 或 `.png` 扩展名使用的所有纹理。因此，它倾向于将事物分开。由于数据存储在
    `.bin` 文件中，它使 `.gltf` 部分保持较小，与 **嵌入式** 变体不同。尽管如此，我们仍然没有实际的理由偏好这种格式。另外，如果您必须发送您的模型，您还需要记得发送所有单独的部分。'
- en: Regardless of the variation, the importing software will follow the glTF instructions
    set by the Khronos standards group to create your models, materials, animation,
    and others. So, choosing a variety may only be needed when it’s necessary and
    for more advanced cases. For our work in this book, the binary variation will
    satisfy our needs.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 无论选择哪种变体，导入软件都将遵循 Khronos 标准组制定的 glTF 指令来创建您的模型、材质、动画等。因此，选择一种变体可能只有在必要时和更复杂的情况下才是必要的。对于本书中的工作，二进制变体将满足我们的需求。
- en: Now that we know which variation is best for us, we must reflect on our own
    needs so that we can tick the right options in the exporter’s interface. That’s
    what we’ll cover in the next section.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了哪种变体最适合我们，我们必须反思我们的自身需求，以便在导出器的界面中勾选正确的选项。这就是我们将在下一节中讨论的内容。
- en: Deciding what to export
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 决定要导出什么
- en: Not everything in your scene should be exported. For example, as mentioned previously,
    we will create the camera and light conditions for the game world inside Godot
    Engine. So, once that’s done, there is no need to keep a camera and light object
    in your Blender scene. However, they might be useful for you to take test renders
    to get a better feeling for your scene without constantly exporting your models
    to Godot. In this section, we’ll determine the better export candidates and how
    to use the export settings to facilitate that.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 您场景中的不是所有内容都应该导出。例如，如前所述，我们将在 Godot 引擎内部为游戏世界创建相机和灯光条件。因此，一旦完成，就没有必要在 Blender
    场景中保留相机和灯光对象。然而，它们可能对您进行测试渲染以更好地感受场景很有用，而无需不断将模型导出到 Godot。在本节中，我们将确定更好的导出候选对象以及如何使用导出设置来促进这一点。
- en: The export options are categorized, and we’ll go through some of the options
    where appropriate. We’ll do this by discussing how these options relate to the
    objects you have in your scene. Note that the export window is separate, so you
    don’t need to close it before you select your objects in the scene. You can go
    back and forth between these two windows during this effort.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 导出选项被分类，我们将在适当的时候讨论一些选项。我们将通过讨论这些选项如何与场景中的对象相关来做到这一点。请注意，导出窗口是独立的，所以在你选择场景中的对象之前，你不需要关闭它。你可以在这两个窗口之间来回切换。
- en: Include
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 包含
- en: 'Although the category’s title is straightforward, the implications of what
    to include might be very important. By default, none of the options in this category
    are selected. So, it’s up to your workflow. There are two groups you will see
    when you expand this section:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这个类别的标题很直接，但包含内容的含义可能非常重要。默认情况下，这个类别中的所有选项都没有被选中。因此，这取决于你的工作流程。当你展开这个部分时，你会看到两个组：
- en: '**Limit to**: This is where you select what you want to include specifically
    as a mesh. We’ll discuss this in more detail in the upcoming paragraphs.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**限制到**：这是你选择具体想要作为网格包含的内容的地方。我们将在接下来的段落中更详细地讨论这个问题。'
- en: '**Data**: Anything that is not a mesh could be considered data. For example,
    cameras and lights are not physical objects with mesh information but complementary
    tools that help you render a scene. We’ll leave everything under here unchecked.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据**：任何不是网格的内容都可以被认为是数据。例如，相机和灯光不是具有网格信息的物理对象，而是帮助你渲染场景的辅助工具。我们将保留这里所有内容不勾选。'
- en: By default, all the options for both groups come unchecked. We’ve already said
    to leave the data untouched, but out of the four choices you can select under
    the **Limit to** section, the most important one is **Selected Objects**.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，两个组的所有选项都没有勾选。我们已经说过要保留数据不变，但在**限制到**部分下你可以选择的四个选项中，最重要的是**选中的对象**。
- en: If you leave this unchecked, then Blender will include everything in your scene.
    This means that at the end of our exercise in the *Setting origin points* section,
    when we had two barrels, Blender would try to export both of those barrels. That’s
    not something you’d most likely want. Chances are you’d want to design a barrel
    and export only that to Godot. So, we’ve got to have the **Selected Objects**
    export option checked first. Then, we need to go into our scene and select the
    object(s) we want to export. There might be some inconvenience in doing this so
    easily, though.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有勾选这个选项，那么Blender将会包含场景中的所有内容。这意味着在我们“设置原点”部分练习的结尾，当我们有两个桶时，Blender会尝试导出这两个桶。这并不是你很可能想要的结果。你可能会想要设计一个桶，并将其导出到Godot中。因此，我们首先需要勾选**选中的对象**导出选项。然后，我们需要进入场景并选择我们想要导出的对象。尽管这样做很方便，但可能会有些不便。
- en: We have been designing relatively small models with a few different parts. The
    greatest number of separate parts we designed was with the three distinct parts
    of a barrel. In the future, during your work, if you happen to have a dozen or
    more parts in your Blender scene, it will quickly get tedious to select all these
    parts again and again before you hit the export button. If only we had an option
    that would not export the camera and light but what we deem as important so that
    we can have the best of both worlds…
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们一直在设计相对较小的模型，包含几个不同的部分。我们设计的独立部分最多是桶的三个不同部分。在未来，在你的工作中，如果你在Blender场景中恰好有十几个或更多的部分，在你点击导出按钮之前，再次选择所有这些部分会变得非常繁琐。如果只有一个选项，它不会导出相机和灯光，但导出我们认为重要的内容，这样我们就可以兼得两者之长了……
- en: That option is **Visible Objects**. Start by deselecting **Selected Objects**
    and keep the **Visible Objects** option on. For this option to work for us, we
    need to hide the camera and light objects so that they are no longer considered
    candidate objects to the exporter. You can do that by clicking the eye icon in
    the **Outliner** area for any object you don’t want to export.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这个选项是**可见对象**。首先，取消选择**选中的对象**，并保持**可见对象**选项选中。为了使这个选项对我们有效，我们需要隐藏相机和灯光对象，这样它们就不再被视为导出器的候选对象。你可以通过点击**大纲**区域中任何你不想导出的对象的眼睛图标来实现这一点。
- en: In the end, you have a mixed bag of solutions when it comes to what to include
    in your export. There are no right or wrong answers here, but you must choose
    what’s efficient for you.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在决定导出内容时，你将面临各种解决方案。这里没有正确或错误的选择，但你必须选择对你来说最有效的方法。
- en: Transform
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变换
- en: We’ll cover this category for the sake of completeness. You’ll rarely touch
    this category since it has one and only one option, which is on by default. Let’s
    explain why, though, and learn what **+Y Up** means.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为了完整性会涵盖这个类别。你很少会触及这个类别，因为它只有一个选项，默认是开启的。不过，让我们解释一下原因，并了解**+Y Up**的含义。
- en: In Blender, the three axes or the coordinate system, **XYZ**, is set up, so
    the **Z** axis defines how tall or elevated an object is. In some other applications,
    such as Godot Engine, the **Y** axis is used as the going up axis. So, the higher
    the **Y** position of an object is in Godot Engine, the higher it sits in the
    game world. Therefore, this Blender export option converts Blender’s **Z** axis
    into Godot’s **Y** axis. It’s a handy thing, so you don’t have to arbitrarily
    rotate your models so that they match the correct direction.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在Blender中，三个轴或坐标系，**XYZ**，已经设置好，所以**Z**轴定义了一个对象有多高或有多高。在一些其他的应用程序中，例如Godot引擎，**Y**轴被用作上升轴。因此，在Godot引擎中，一个对象的**Y**位置越高，它在游戏世界中的位置就越高。因此，这个Blender导出选项将Blender的**Z**轴转换为Godot的**Y**轴。这是一个方便的事情，所以你不需要任意旋转你的模型以匹配正确的方向。
- en: Geometry
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 几何
- en: 'We’ll leave most of the options under this category as-is and only discuss
    what matters to us. These options are as follows:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在这个类别下保留大多数选项不变，只讨论对我们来说重要的事项。这些选项如下：
- en: '**Apply Modifiers**: We first discovered modifiers in [*Chapter 1*](B17473_01.xhtml#_idTextAnchor013),
    *Creating Low-Poly Models.* We used a few that helped us model a barrel in no
    time. The fact that you can stack modifiers and change the order of operation
    is great. However, they are temporary additions to the core objects. So, unless
    you turn this option on in the export settings, the base object will be exported
    without any modifiers applied. This will make your objects look quite awkward
    and primitive in Godot.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用修改器**：我们首次在[*第一章*](B17473_01.xhtml#_idTextAnchor013)中发现了修改器，*创建低多边形模型*。我们使用了一些帮助我们快速建模桶的修改器。你可以堆叠修改器并改变操作顺序的事实很棒。然而，它们是核心对象上的临时添加。所以，除非你在导出设置中开启这个选项，否则基础对象将不会应用任何修改器导出。这将使你的对象在Godot中看起来非常不自然和原始。'
- en: '**Materials**: The default status of this option is to export all your materials.
    This might be a good thing for a beginner or quick results. When we discuss materials
    again when we cover Godot, and should you decide to make your own materials in
    Godot, you may want to pick the **No Export** choice so that they are no longer
    included in the resulting file.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**材质**：这个选项的默认状态是导出所有材质。这可能对初学者或快速结果来说是个好事。当我们再次讨论材质时，当我们涵盖Godot时，如果你决定在Godot中创建自己的材质，你可能想选择**不导出**选项，这样它们就不会包含在生成的文件中。'
- en: In more advanced export scenarios, you may want to enable the **Loose Edges**
    and **Loose Points** options as well, so you can keep the loose geometry as a
    part of the exported file.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在更高级的导出场景中，你可能还想启用**松散边缘**和**松散点**选项，这样你就可以将松散几何形状作为导出文件的一部分保留。
- en: Animation
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动画
- en: We won’t change any of the default options in this category. We discussed how
    to create multiple animations in the *Getting animations ready for Godot* section
    of [*Chapter 5*](B17473_05.xhtml#_idTextAnchor075), *Setting Up Animation and
    Rigging*. The default settings will take care of converting the animations – more
    specifically, actions.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会更改这个类别中的任何默认选项。我们在[*第五章*](B17473_05.xhtml#_idTextAnchor075)的*为Godot准备动画*部分讨论了如何创建多个动画。默认设置将负责转换动画——更具体地说，是动作。
- en: Creating presets
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建预设
- en: If you find yourself turning some of the options on and off under certain scenarios
    and memorizing the correct combination is becoming hard or monotonous, you can
    create a preset of export options. The top part of the export options has a dropdown
    with two buttons next to it. Using that area, you can create your own presets
    – perhaps one for a selected objects case and another one for a visible objects
    case.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你发现自己需要在某些场景下打开和关闭某些选项，并且记住正确的组合变得越来越困难或单调，你可以创建一个导出选项预设。导出选项的上半部分有一个下拉菜单，旁边有两个按钮。使用这个区域，你可以创建自己的预设——也许一个用于选定的对象情况，另一个用于可见对象情况。
- en: Choosing the correct export options depends on the different conditions your
    project requires. So, you must experiment and find what works best for you. At
    some point, you’ll import the result into Godot Engine to visualize the glTF file.
    However, that might be a lot of work to go in between two applications if you
    want to get a quick feeling about your creation. The following are two options
    you can us[e to preview glTF files:](https://gltf-viewer.donmccurdy.com/)
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 选择正确的导出选项取决于你的项目所需的不同条件。因此，你必须进行实验，找到最适合你的方法。在某个时候，你将把结果导入 Godot 引擎以可视化 glTF
    文件。然而，如果你想要快速了解你的创作，在两个应用程序之间进行大量工作可能是一项繁重的工作。以下是你可以使用来预览 glTF 文件的两种选项：](https://gltf-viewer.donmccurdy.com/)
- en: '[glTF Viewe](https://gltf-viewer.donmccurdy.com/)r at [https://gltf-viewer.donmccurdy.com/](https://gltf-viewer.donmccurdy.com/)'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[glTF 查看器](https://gltf-viewer.donmccurdy.com/) 在 [https://gltf-viewer.donmccurdy.com/](https://gltf-viewer.donmccurdy.com/)'
- en: Microsoft 3D Viewer
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Microsoft 3D 查看器
- en: This concludes the investigation of the export options that are relevant to
    our case. Let’s see what other discoveries you have made so far.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这项针对我们案例相关的出口选项的调查就此结束。让我们看看到目前为止你发现了哪些其他发现。
- en: Summary
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter was mainly about making your work compatible with Godot Engine.
    To that end, we needed to go over a few different topics.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 本章主要介绍了如何使你的工作与 Godot 引擎兼容。为此，我们需要探讨几个不同的主题。
- en: Firstly, we wanted to make sure our models had received the correct final touches.
    This involved getting rid of n-gons and converting these polygons into more manageable
    and ideal triangular faces. After that, you learned how to set origin points for
    your models, which may also be helpful during the modeling phase. Making transformations
    permanent is essential, so that’s something to remember if your models, especially
    during animations, behave awkwardly. Then, we looked at the idea of naming things
    meaningfully. This is something you’ll eventually find yourself needing more and
    more down the line when you have more experience.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们想要确保我们的模型已经得到了正确的最终修饰。这涉及到去除 n-边形并将这些多边形转换为更易于管理和理想的三角形面。之后，你学习了如何为你的模型设置原点，这在建模阶段也可能很有帮助。使变换永久化是至关重要的，所以如果你的模型，尤其是在动画中，表现得笨拙，这是你需要记住的事情。然后，我们探讨了给事物赋予有意义的名称的想法。当你有更多经验时，你会发现这最终是你越来越需要的。
- en: Then, out of the many formats Blender offers for exporting assets, we evaluated
    a few, such as Collada, FBX, and OBJ. During that effort, we presented that glTF
    has become the de facto format for communicating between Blender and Godot. Lastly,
    we discovered some options for the glTF exporter and presented a few likely scenarios
    you may wish to employ. Finally, you learned how to store the export options that
    work best for you.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在 Blender 提供的许多用于导出资产的格式中，我们评估了几种，例如 Collada、FBX 和 OBJ。在这个过程中，我们提出 glTF 已经成为
    Blender 和 Godot 之间通信的事实上的格式。最后，我们发现了一些 glTF 导出器的选项，并介绍了一些你可能希望采用的几种可能场景。最后，你学习了如何存储最适合你的导出选项。
- en: Now, we’re ready to start importing our Blender assets into Godot. That’s exactly
    what we’ll do in the next chapter. In a real-life scenario, chances are you’ll
    be conducting the operations presented in this and the next chapter quite often
    in almost every phase of your game development journey. Let’s give you a few more
    useful resources before we move on.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们准备开始将 Blender 资产导入 Godot。这正是我们在下一章将要做的。在实际场景中，你可能会在游戏开发的几乎每个阶段经常执行本章和下一章中展示的操作。在我们继续之前，让我们给你提供一些更多有用的资源。
- en: Further reading
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: Khronos Group is a maintainer of many other standards we use day-to-day. This
    is thanks to their impressive list of members, which you can view at [https://www.khronos.org/members/list](https://www.khronos.org/members/list).
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: Khronos Group 是我们日常使用的许多标准的维护者。这得益于他们令人印象深刻的成员名单，你可以在 [https://www.khronos.org/members/list](https://www.khronos.org/members/list)
    上查看。
- en: 'We primarily used their glTF standard. The following links provide more technical
    information about it:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们主要使用了他们的 glTF 标准。以下链接提供了更多关于它的技术信息：
- en: '[https://docs.fileformat.com/3d/gltf/](https://docs.fileformat.com/3d/gltf/)'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.fileformat.com/3d/gltf/](https://docs.fileformat.com/3d/gltf/)'
- en: '[https://docs.fileformat.com/3d/glb/](https://docs.fileformat.com/3d/glb/)'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.fileformat.com/3d/glb/](https://docs.fileformat.com/3d/glb/)'
- en: '[https://www.marxentlabs.com/gltf-files/](https://www.marxentlabs.com/gltf-files/)'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.marxentlabs.com/gltf-files/](https://www.marxentlabs.com/gltf-files/)'
- en: '[https://www.marxentlabs.com/glb-files/](https://www.marxentlabs.com/glb-files/)'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.marxentlabs.com/glb-files/](https://www.marxentlabs.com/glb-files/)'
- en: 'Thanks to its nifty specifications, the glTF exchange format has been gaining
    popularity not only in the gaming industry but in other industries as well. Here
    is NASA’s famous *Voyager* spacecraft in all its glory: [https://solarsystem.nasa.gov/resources/2340/voyager-3d-model/](https://solarsystem.nasa.gov/resources/2340/voyager-3d-model/).'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 由于其巧妙的规格，glTF交换格式不仅在游戏行业，而且在其他行业也日益受到欢迎。这里展示的是NASA著名的**旅行者**号航天器，其全貌如下：[https://solarsystem.nasa.gov/resources/2340/voyager-3d-model/](https://solarsystem.nasa.gov/resources/2340/voyager-3d-model/).
- en: 'You may have come across websites where Collada is still used for Godot projects.
    Perhaps you already have access to a large repository of Collada files. If you
    would like to give it a try, but with a bit more finesse, here is a GitHub repository
    that can help you: [https://github.com/godotengine/collada-exporter](https://github.com/godotengine/collada-exporter).'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能遇到过仍在使用Collada格式进行Godot项目的网站。也许你已经拥有了一个包含大量Collada文件的庞大仓库。如果你想尝试一下，但希望做得更加精细，这里有一个GitHub仓库可以帮助你：[https://github.com/godotengine/collada-exporter](https://github.com/godotengine/collada-exporter).
- en: 'Last but not least, cleaning up your models and keeping them export-ready will
    be an ongoing task. Blender’s user manual has a page on many tools and methods
    you can use to help you in your efforts: [https://docs.blender.org/manual/en/2.93/modeling/meshes/editing/mesh/cleanup.xhtml](https://docs.blender.org/manual/en/2.93/modeling/meshes/editing/mesh/cleanup.xhtml).'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，清理你的模型并保持它们随时可导出将是持续的任务。Blender的用户手册中有一页介绍了许多工具和方法，可以帮助你在这一过程中：[https://docs.blender.org/manual/en/2.93/modeling/meshes/editing/mesh/cleanup.xhtml](https://docs.blender.org/manual/en/2.93/modeling/meshes/editing/mesh/cleanup.xhtml).
