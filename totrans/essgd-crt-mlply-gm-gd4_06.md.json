["```cpp\nextends Node2D\nsignal selected\nsignal deselected\nenum Teams{BLACK, WHITE}\n@export var team: Teams = Teams.BLACK\n@export var is_king = false: set = _set_is_king\n@export var king_texture = preload(\"res://\n    06.building-online-checkers/WhiteKing.svg\")\n@onready var area = $SelectionArea2D\n@onready var selected_color_rect = $SelectedColorRect\n@onready var enabled_color_rect = $EnabledColorRect\n@onready var sprite = $Sprite2D\nvar is_selected = false\n```", "```cpp\nfunc _set_is_king(new_value):\n  is_king = new_value\n  if not is_inside_tree():\n    await(ready)\n  if is_king:\n    sprite.texture = king_texture\n```", "```cpp\nfunc _on_area_2d_input_event(viewport, event, shape_idx):\n  if event is InputEventMouseButton:\n    if event.button_index == 1 and event.pressed:\n      select()\n```", "```cpp\nfunc select():\n  get_tree().call_group(\"selected\", \"deselect\")\n  add_to_group(\"selected\")\n  selected_color_rect.show()\n  is_selected = true\n  selected.emit()\n```", "```cpp\nfunc deselect():\n  remove_from_group(\"selected\")\n  selected_color_rect.hide()\n  is_selected = false\n  deselected.emit()\n```", "```cpp\nfunc enable():\n  area.input_pickable = true\n  enabled_color_rect.visible = true\n```", "```cpp\nfunc disable():\n  area.input_pickable = false\n  enabled_color_rect.visible = false\n```", "```cpp\nextends Area2D\nsignal selected(cell_position)\nfunc _input_event(viewport, event, shape_idx):\n     if event is InputEventMouseButton:\n          if event.button_index == 1 and event.pressed:\n               select()\nfunc select():\n     selected.emit(self.position)\n```", "```cpp\nfunc create_meta_board():\n     for cell in get_used_cells(0):\n          meta_board[cell] = null\nfunc map_pieces(team):\n     for piece in team.get_children():\n          var piece_position = local_to_map(piece.position)\n          meta_board[piece_position] = piece\n          piece.selected.connect(_on_piece_selected.bind\n              (piece))\n```", "```cpp\nfunc update_cells(previous_cell, target_cell):\n     meta_board[target_cell] = meta_board[previous_cell]\n     meta_board[previous_cell] = null\n```", "```cpp\n    @rpc(\"any_peer\", \"call_local\")\n    func update_cells(previous_cell, target_cell):\n    ```", "```cpp\n    func move_selected_piece(target_cell):\n         var current_cell = local_to_map\n             (selected_piece.position)\n         Selected_piece.position = map_to_local\n             (target_cell)\n         rpc(\"update_cells\", current_cell, target_cell)\n         if not is_free_cell(target_cell):\n              crown(target_cell)\n    ```", "```cpp\n    @rpc(\"any_peer\", \"call_local\")\n    func crown(cell):\n    ```", "```cpp\n    func move_selected_piece(target_cell):\n         var current_cell = local_to_map\n             (selected_piece.position)\n         selected_piece.position = map_to_local\n             (target_cell)\n         rpc(\"update_cells\", current_cell, target_cell)\n         if not is_free_cell(target_cell):\n              rpc(\"crown\", target_cell)\n    ```", "```cpp\nfunc remove_piece(piece_cell):\n     if not is_on_board(piece_cell):\n          return\n     if is_free_cell(piece_cell):\n          return\n     var piece = meta_board[piece_cell]\n     piece.get_parent().remove_child(piece)\n     piece.free()\n     meta_board[piece_cell] = null\n```", "```cpp\n    @rpc(\"any_peer\", \"call_local\")\n    func remove_piece(piece_cell):\n    ```", "```cpp\n    func capture_pieces(target_cell):\n         var origin_cell = local_to_map(selected_piece.\n             position)\n         var direction = Vector2(target_cell -origin_cell)\n             .normalized()\n         direction = Vector2i(direction.round())\n         var cell = target_cell - direction\n         if not is_on_board(cell):\n              return\n         if not is_free_cell(cell):\n              rpc(\"remove_piece\", cell)\n              move_selected_piece(target_cell)\n    ```", "```cpp\n    @rpc(\"authority\", \"call_local\")\n    func setup_team(team, peer_id):\n    ```", "```cpp\n    @rpc(\"authority\", \"call_local\")\n    func setup_team(team, peer_id):\n         if team == Teams.BLACK:\n              black_team.set_multiplayer_authority\n                  (peer_id)\n    ```", "```cpp\n    @rpc(\"authority\", \"call_local\")\n    func setup_team(team, peer_id):\n         if team == Teams.BLACK:\n              black_team.set_multiplayer_authority\n                  (peer_id)\n         else:\n              white_team.set_multiplayer_authority\n                  (peer_id)\n    ```", "```cpp\n    func _ready():\n         if multiplayer.get_peers().size() > 0:\n    ```", "```cpp\n    func _ready():\n         if multiplayer.get_peers().size() > 0:\n              if is_multiplayer_authority():\n    ```", "```cpp\n    func _ready():\n         if multiplayer.get_peers().size() > 0:\n              if is_multiplayer_authority():\n                   rpc(\"setup_team\", Teams.BLACK,\n                       multiplayer.get_peers()[0])\n    ```", "```cpp\n    func _ready():\n         if multiplayer.get_peers().size() > 0:\n              if is_multiplayer_authority():\n                   rpc(\"setup_team\", Teams.BLACK,\n                       multiplayer.get_peers()[0])\n                   rpc(\"setup_team\", Teams.WHITE,\n                       multiplayer.get_peers()[1])\n    ```", "```cpp\nfunc toggle_turn():\n     clear_free_cells()\n     disable_pieces(white_team)\n     disable_pieces(black_team)\n     var winner = get_winner()\n     if winner:\n          player_won.emit(winner)\n          return\n     if current_turn == Teams.BLACK:\n          current_turn = Teams.WHITE\n          enable_pieces(white_team)\n     else:\n          current_turn = Teams.BLACK\n          enable_pieces(black_team)\n```", "```cpp\n    @rpc(\"any_peer\", \"call_local\")\n    func toggle_turn():\n    ```", "```cpp\n    if current_turn == Teams.BLACK:\n              current_turn = Teams.WHITE\n              if not multiplayer.get_peers().size() > 0:\n                   enable_pieces(white_team)\n    ```", "```cpp\n    if current_turn == Teams.BLACK:\n              current_turn = Teams.WHITE\n              if not multiplayer.get_peers().size() > 0:\n                   enable_pieces(white_team)\n              elif white_team.get_multiplayer_authority()\n                  == multiplayer.get_unique_id():\n                   enable_pieces(white_team)\n    ```", "```cpp\n    else:\n              current_turn = Teams.BLACK\n              if not multiplayer.get_peers().size() > 0:\n                   enable_pieces(black_team)\n              elif black_team.get_multiplayer_authority()\n                  == multiplayer.get_unique_id():\n                   enable_pieces(black_team)\n    ```", "```cpp\nfunc _on_free_cell_selected(free_cell_position):\n     var free_cell = local_to_map(free_cell_position)\n     if can_capture(selected_piece):\n          capture_pieces(free_cell)\n     else:\n          move_selected_piece(free_cell)\n     rpc(\"toggle_turn\")\n     selected_piece.deselect()\n```", "```cpp\n    @rpc(\"any_peer\", \"call_local\")\n    func update_winner(winner):\n    ```", "```cpp\n    @rpc(\"any_peer\", \"call_local\")\n    func rematch():\n    ```", "```cpp\n    func _on_checker_board_player_won(winner):\n         rpc(\"update_winner\", winner)\n    ```", "```cpp\n    func _on_rematch_button_pressed():\n         rpc(\"rematch\")\n    ```"]