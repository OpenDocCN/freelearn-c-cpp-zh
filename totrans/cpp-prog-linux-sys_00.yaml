- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Greetings, dear reader! You are among friends. Welcome to this journey of advanced
    skills, unexpected surprises, cunning knowledge, and novel programming tools.
    Suppose you are an experienced software engineer who knows how to write quality
    code and is aware of some build and operating systems. You have also met several
    computer architectures and fixed one or two bugs. And how about the following:
    You are a student who just learns how to do the job of a software engineer. You
    want to be a good professional someday. And you want to be the expert, whom others
    call, whenever the software behaves unpredictably. Or you just have picked up
    this book out of initial interest, still not knowing what to expect. Then perfect!'
  prefs: []
  type: TYPE_NORMAL
- en: We challenge you to remember any situations in your practice, where, to this
    day, you have no explanation of what happened. No, we do not mean the supernatural
    – although this topic is rather arcane. We speak about the system and how we conduct
    its behavior as professional engineers. Our code is just an instrument that tells
    the machine what to do. So, let’s say you have remembered that one bug that has
    been bugging you for some time – how do you proceed? What if it stands between
    you and your next promotion? How about when it disappoints a client that is important
    to you? Or you just want to impress your teacher. We get you! We are there, too.
  prefs: []
  type: TYPE_NORMAL
- en: Do not be fooled, though. We give you the opportunity to enrich the way you
    engineer through some fundamental pointers, but we do not have all the answers.
    We strongly believe that changing the way you see how code works will make you
    a more robust expert, no matter your professional field. And you should care because
    the world of technology is rapidly advancing. It is impossible to keep up with
    every innovation, algorithm, language, operating system, and architecture. But
    you could start asking yourself the right questions at the right moment. You have
    the possibility to know how to optimize further, design better, validate your
    environment, and encourage yourself to understand your own work thoroughly.
  prefs: []
  type: TYPE_NORMAL
- en: We challenge you again. This time to be more self-aware and efficient through
    our experience and expertise. There are some sophisticated real-world challenges
    that we so impatiently want to share with you. Please remember, it will take you
    some time. As friends, we hope you enjoy this book and share the exciting parts
    with others. Chop-chop... Let’s go!
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is for programmers and developers who want to boost their programming
    knowledge in C++ for Linux and Unix-based operating systems. Whether you are a
    beginner looking to learn how to use C++ in such an environment or an experienced
    programmer looking to explore the latest C++20 features applicable to system programming,
    you’ll find this book helpful.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*Chapter 1*](B20833_01.xhtml#_idTextAnchor014), *Getting Started with the
    Linux Systems and the POSIX Standard*, introduces the reader to the reasoning
    behind the existence of different operating systems. The Linux specifics are discussed,
    and the reader proceeds to the fundamentals of Unix-based OS programming. The
    kernel space and user spaces are mentioned as the System Call Interface is explained
    thoroughly. Afterward, we use this opportunity to present POSIX and some standard
    function calls in order to let the reader grasp the benefits of the system programming.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 2*](B20833_02.xhtml#_idTextAnchor029), *Learning More about Process
    Management*, expands on learnings from the previous chapter and states that if
    the operating system is the main resource manager, then the process is the main
    resource user. It does so through a routine, which could get complex and needs
    to be well analyzed. Therefore, the chapter goes through the main process’s life
    cycle - its startup, running, and final states. The nature of the thread is presented
    as well. We go through the OS’s scheduling algorithms as well. A sample C++ application
    is introduced and its `main()` function is discussed as an entry point. In addition,
    different ways to initiate a process are presented: `fork()`, `vfork()`, and `exec()`.
    Other fundamental functions such as `wait()`, `exit()`, `pthread_create()`, and
    `pthread_join()` are discussed as well.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 3*](B20833_03.xhtml#_idTextAnchor047), *Navigating through the Filesystems*,
    shows how the file is the basic resource representation in Linux - both for data
    and access to I/O devices. This abstraction allows the user to manipulate streams
    or store data in the same manner, through the same system interfaces. The file
    system structure - metadata and inodes, is discussed. Examples of C++ file system
    operations are presented to the reader. We use this opportunity to introduce the
    pipes as an initial instrument for inter-process communication. The `string_view`
    C++20 object is offered as well. At the end, we mention signal handling as it
    will be required for later chapters.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B20833_04.xhtml#_idTextAnchor060), *Diving Deep into the C++
    Object*, guides the reader through some core C++ features like the process of
    object creation and its initialization. We discuss lifetime object problems, temporaries,
    RVO, RAII pattern, and C++20\. We also cover function objects and lambda expressions
    together with their specifics and guidance on how to use them. Next, we will get
    deeper into lambdas. In the end, we will focus on some specific examples of how
    to use lambdas in STL and multithreading.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B20833_05.xhtml#_idTextAnchor075), *Handling Errors with C++*,
    explores the different kinds of error reporting in C++ programming for Unix-based
    operating systems, such as error codes, exceptions, and asserts. We will discuss
    the best practices in exception handling and exception manipulation and what happens
    with uncaught exceptions in the system. We will discuss the exception specifications
    and why we prefer the `noexcept` keyword. We will go through the performance impact
    when using exceptions and the mechanics behind them. Next, we will discuss how
    we can use `std::optional` to handle errors. At the end, we will discuss what
    `std::uncaught_exceptions` functionality provides.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B20833_06.xhtml#_idTextAnchor086), *Concurrent System Programming
    with C++*, discusses the fundamentals and the theory behind processes and threads
    in Unix-based operating systems. We will go through the changes in the memory
    model of C++ in order to natively support concurrency. We will get acquainted
    with the C++ primitives which enable multithreading support - thread, jthread,
    and task. Next, we will learn how to synchronize the execution of parallel code
    using C++ synchronization primitives. We will also investigate what STL provides
    in the direction of parallel algorithms. In the end, we will learn how to write
    lock-free code.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B20833_07.xhtml#_idTextAnchor101), *Proceeding with Inter-process
    Communication*, guides readers through the basic IPC mechanisms in the Linux environment
    (as they already have the impression of the multithreading’s challenges). It is
    important that the processes are able to communicate with each other easily, therefore,
    we go quickly through message queues. They allow the exchange of data without
    blocking processes. We will spend some time discussing synchronization mechanisms
    – semaphore and mutex- and then proceed with the shared memory. It provides quick
    access to some data and, at the same time, allows heterogeneous systems to have
    a common point for data exchange. At last, the sockets are frequently used, but
    mainly for their possibility to allow communication between computer systems on
    the network.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B20833_08.xhtml#_idTextAnchor116), *Using Clocks, Timers, and
    Signals in Linux*, introduces the signals and timers in Unix-based operating systems.
    We will initially present how the signaling system works and how the user can
    effectively manage the time of operations. We will cover what C++ language provides
    as functionality to handle clocks and timers. We will introduce the standard time
    API, `std::chrono`, predefined clocks and times. Next, we will cover how to use
    them correctly and what to expect from them. Next, we will focus on the duration
    capabilities that the standard provides and user-defined clocks. Ultimately, we
    will cover the calendar and time zone libraries introduced in C++20.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B20833_09.xhtml#_idTextAnchor129), *Understanding the C++ Memory
    Model*, explores some new C++20 features. It guides the reader through some crucial
    remarks on how and why to manage dynamic resources. It proceeds with a discussion
    on the conditional variables and mutex usages, as well as lazy initialization
    and cache friendliness. An introduction to the C++ memory order follows as we
    discuss ways to choose from different synchronization mechanisms. The spinlock/ticketlock
    techniques are also presented.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 10*](B20833_10.xhtml#_idTextAnchor147), *Using Coroutines in C++
    for System Programming*, talks about coroutines, an already existing term with
    implementations in some programming languages, but now they are introduced in
    C++20\. They are described as stackless functions suspended during execution and
    resumed later. The chapter discusses those exact valuable features in the area
    of system programming. Their disadvantages are also discussed, for example, keeping
    the suspended coroutine state on the heap. Some practical usages are presented.'
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some familiarity with the basics of the C++ language and POSIX programming in
    C language is required before starting with this book. Prior knowledge of the
    fundamentals of Linux and Unix will be helpful but not necessary.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Software covered in** **the book** | **Operating** **system requirements**
    |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| C++20 | Linux Mint 21 |'
  prefs: []
  type: TYPE_TB
- en: '| GCC12.2 |  |'
  prefs: []
  type: TYPE_TB
- en: '| godbolt.org |  |'
  prefs: []
  type: TYPE_TB
- en: If you are using the digital version of this book, we advise you to type the
    code yourself or access the code from the book’s GitHub repository (a link is
    available in the next section). Doing so will help you avoid any potential errors
    in copying and pasting code.
  prefs: []
  type: TYPE_NORMAL
- en: Each chapter has its respective Technical requirements. All examples are run
    through them. The code is system-dependent, so it might not work directly in your
    environment.
  prefs: []
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download the example code files for this book from GitHub at [https://github.com/PacktPublishing/C-Programming-for-Linux-Systems](https://github.com/PacktPublishing/C-Programming-for-Linux-Systems).
    If there’s an update to the code, it will be updated in the GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: We also have other code bundles from our rich catalog of books and videos available
    at [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/).
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`Code in text`: Indicates code words in text, database table names, folder
    names, filenames, file extensions, pathnames, dummy URLs, user input, and Twitter
    handles. Here is an example: “The example uses the `open()` and `close()` POSIX
    functions, which try to open and close a file from the filesystem of our Linux
    test environment.”'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Tips or important notes
  prefs: []
  type: TYPE_NORMAL
- en: Appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Get in touch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome.
  prefs: []
  type: TYPE_NORMAL
- en: '**General feedback**: If you have questions about any aspect of this book,
    email us at [customercare@packtpub.com](mailto:customercare@packtpub.com) and
    mention the book title in the subject of your message.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Errata**: Although we have taken every care to ensure the accuracy of our
    content, mistakes do happen. If you have found a mistake in this book, we would
    be grateful if you would report this to us. Please visit [www.packtpub.com/support/errata](http://www.packtpub.com/support/errata)
    and fill in the form.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Piracy**: If you come across any illegal copies of our works in any form
    on the internet, we would be grateful if you would provide us with the location
    address or website name. Please contact us at [copyright@packt.com](mailto:copyright@packt.com)
    with a link to the material.'
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are interested in becoming an author**: If there is a topic that you
    have expertise in and you are interested in either writing or contributing to
    a book, please visit [authors.packtpub.com](http://authors.packtpub.com).'
  prefs: []
  type: TYPE_NORMAL
- en: Share Your Thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you’ve read *C++ Programming for Linux Systems*, we’d love to hear your
    thoughts! Please [click here to go straight to the Amazon review page](https://packt.link/r/1805129007)
    for this book and share your feedback.
  prefs: []
  type: TYPE_NORMAL
- en: Your review is important to us and the tech community and will help us make
    sure we’re delivering excellent quality content.
  prefs: []
  type: TYPE_NORMAL
- en: Download a free PDF copy of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thanks for purchasing this book!
  prefs: []
  type: TYPE_NORMAL
- en: Do you like to read on the go but are unable to carry your print books everywhere?
  prefs: []
  type: TYPE_NORMAL
- en: Is your eBook purchase not compatible with the device of your choice?
  prefs: []
  type: TYPE_NORMAL
- en: Don’t worry, now with every Packt book you get a DRM-free PDF version of that
    book at no cost.
  prefs: []
  type: TYPE_NORMAL
- en: Read anywhere, any place, on any device. Search, copy, and paste code from your
    favorite technical books directly into your application.
  prefs: []
  type: TYPE_NORMAL
- en: The perks don’t stop there, you can get exclusive access to discounts, newsletters,
    and great free content in your inbox daily
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these simple steps to get the benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: Scan the QR code or visit the link below
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B20833_QR_Free_PDF.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[https://packt.link/free-ebook/9781805129004](https://packt.link/free-ebook/9781805129004)'
  prefs: []
  type: TYPE_NORMAL
- en: Submit your proof of purchase
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That’s it! We’ll send your free PDF and other benefits to your email directly
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Part 1:Securing the Fundamentals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This part of the book will provide you with the necessary instruments to get
    into the advanced topics of system programming. Experienced readers will find
    it helpful, too, as some of the C++20 features are practically presented in the
    area of system programming. This part ensures that the readers are on the same
    page with the presented subjects and provides the opportunity to extract the best
    from the technical examples. At the same time, it notes important aspects of the
    Linux system development.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part has the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 1*](B20833_01.xhtml#_idTextAnchor014)*, Getting Started with Linux
    Systems and the POSIX Standard*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 2*](B20833_02.xhtml#_idTextAnchor029)*, Learning More about Process
    Management*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 3*](B20833_03.xhtml#_idTextAnchor047)*, Navigating through the Filesystems*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B20833_04.xhtml#_idTextAnchor060)*, Diving Deep into the C++
    Object*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B20833_05.xhtml#_idTextAnchor075)*, Handling Errors with C++*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
