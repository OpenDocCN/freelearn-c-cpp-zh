["```cpp\nQT += widgets uiplugin \nCONFIG += plugin \nCONFIG += c++14 \nTEMPLATE = lib \nDEFINES += FILTERPLUGINDESIGNER_LIBRARY \n\nTARGET = $$qtLibraryTarget($$TARGET) \nINSTALLS += target \n\n```", "```cpp\nwindows { \ntarget.path = $$(QTDIR)/../../Tools/QtCreator/bin/plugins/designer \n\ndebug:target_lib.files = $$OUT_PWD/debug/$${TARGET}.lib \nrelease:target_lib.files = $$OUT_PWD/release/$${TARGET}.lib \ntarget_lib.path = $$(QTDIR)/../../Tools/QtCreator/bin/plugins/designer \n    INSTALLS += target_lib \n\n    INCLUDEPATH += $$(OPENCV_HOME)/../../include \n    LIBS += -L$$(OPENCV_HOME)/lib \n        -lopencv_core2413 \n        -lopencv_imgproc2413 \n} \n\n```", "```cpp\napt-get install libopencv\nyum install opencv\n\n```", "```cpp\nlinux { \ntarget.path = $$(QTDIR)/../../Tools/QtCreator/lib/Qt/plugins/designer/ \n\n    CONFIG += link_pkgconfig \n    PKGCONFIG += opencv \n} \n\n```", "```cpp\nbrew install opencv\n\n```", "```cpp\nmacx { \ntarget.path = \"$$(QTDIR)/../../QtCreator.app/Contents/PlugIns/designer/\" \ntarget_lib.files = $$OUT_PWD/lib$${TARGET}.dylib \ntarget_lib.path = \"$$(QTDIR)/../../QtCreator.app/Contents/PlugIns/designer/\" \n    INSTALLS += target_lib \n\n    INCLUDEPATH += /usr/local/Cellar/opencv/2.4.13/include/ \n\n    LIBS += -L/usr/local/lib \\ \n         -lopencv_core \\ \n        -lopencv_imgproc \n} \n\n```", "```cpp\n//Filter.h \nclass Filter \n{ \npublic: \nFilter(); \nvirtual ~Filter(); \n\nvirtualQImage process(constQImage& image) = 0; \n}; \n\n//Filter.cpp \nFilter::Filter() {} \nFilter::~Filter() {} \n\n```", "```cpp\nclass FilterOriginal : public Filter \n{ \npublic: \nFilterOriginal(); \n    ~FilterOriginal(); \n\nQImageprocess(constQImage& image) override; \n}; \n\n```", "```cpp\nFilterOriginal::FilterOriginal() : \nFilter() \n{ \n} \n\nFilterOriginal::~FilterOriginal() \n{ \n} \n\nQImageFilterOriginal::process(constQImage& image) \n{ \nreturn image; \n} \n\n```", "```cpp\nQImageFilterGrayscale::process(constQImage& image) \n{ \n    // QImage => cv::mat \ncv::Mattmp(image.height(), \nimage.width(), \n                CV_8UC4, \n                (uchar*)image.bits(), \nimage.bytesPerLine()); \n\ncv::MatresultMat; \n    cv::cvtColor(tmp, resultMat, CV_BGR2GRAY); \n\n    // cv::mat =>QImage \nQImageresultImage((constuchar *) resultMat.data, \nresultMat.cols, \nresultMat.rows, \nresultMat.step, \nQImage::Format_Grayscale8); \nreturnresultImage.copy(); \n} \n\n```", "```cpp\n// with OpenCV \ncv::cvtColor(mat, mat, CV_BGR2RGB); \n\n// with Qt \nQImage swapped = image.rgbSwapped(); \n\n```", "```cpp\n// with OpenCV \nmat.clone(); \n\n// with Qt \nimage.copy(); \n\n```", "```cpp\nQImageFilterBlur::process(constQImage& image) \n{ \n    // QImage => cv::mat \ncv::Mattmp(image.height(), \nimage.width(), \n                CV_8UC4, \n                (uchar*)image.bits(), \nimage.bytesPerLine()); \n\nint blur = 17; \ncv::MatresultMat; \n    cv::GaussianBlur(tmp, \nresultMat, \n                     cv::Size(blur, blur), \n                     0.0, \n                     0.0); \n\n    // cv::mat =>QImage \nQImageresultImage((constuchar *) resultMat.data, \nresultMat.cols, \nresultMat.rows, \nresultMat.step, \nQImage::Format_RGB32); \nreturnresultImage.copy(); \n} \n\n```", "```cpp\nclass FILTERPLUGINDESIGNERSHARED_EXPORT FilterWidget : public QWidget \n{ \n    Q_OBJECT \n\n    Q_ENUMS(FilterType) \n    Q_PROPERTY(QString title READ title WRITE setTitle) \n    Q_PROPERTY(FilterTypefilterType READ filterType WRITE setFilterType) \n\npublic: \nenumFilterType { Original, Blur, Grayscale }; \n\nexplicitFilterWidget(QWidget *parent = 0); \n    ~FilterWidget(); \n\nvoid process(); \nvoidsetSourcePicture(constQImage&sourcePicture); \nvoidupdateThumbnail(constQImage&sourceThumbnail); \n\nQStringtitle() const; \nFilterTypefilterType() const; \n\npublic slots: \nvoidsetTitle(constQString& tile); \nvoidsetFilterType(FilterTypefilterType); \n\nsignals: \nvoidpictureProcessed(constQImage& picture); \n\nprotected: \nvoidmousePressEvent(QMouseEvent*) override; \n\nprivate: \nUi::FilterWidget *ui; \nstd::unique_ptr<Filter>mFilter; \nFilterTypemFilterType; \n\nQImagemDefaultSourcePicture; \nQImagemSourcePicture; \nQImagemSourceThumbnail; \n\nQImagemFilteredPicture; \nQImagemFilteredThumbnail; \n}; \n\n```", "```cpp\nQ_PROPERTY(<type><name> READ <getter> WRITE <setter>) \n\n```", "```cpp\nFilterWidget::FilterWidget(QWidget *parent) : \nQWidget(parent), \nui(new Ui::FilterWidget), \nmFilterType(Original), \nmDefaultSourcePicture(\":/lenna.jpg\"), \nmSourcePicture(), \nmSourceThumbnail(mDefaultSourcePicture.scaled(QSize(256, 256), \nQt::KeepAspectRatio, \nQt::SmoothTransformation)), \nmFilteredPicture(), \nmFilteredThumbnail() \n{ \nui->setupUi(this); \nsetFilterType(Original); \n} \n\nFilterWidget::~FilterWidget() \n{ \ndeleteui; \n} \n\n```", "```cpp\nvoidFilterWidget::process() \n{ \nmFilteredPicture = mFilter->process(mSourcePicture); \nemitpictureProcessed(mFilteredPicture); \n} \n\n```", "```cpp\nvoidFilterWidget::setSourcePicture(constQImage&sourcePicture) \n{ \nmSourcePicture = sourcePicture; \n} \n\nvoidFilterWidget::updateThumbnail(constQImage&sourceThumbnail) \n{ \nmSourceThumbnail = sourceThumbnail; \nmFilteredThumbnail = mFilter->process(mSourceThumbnail); \nQPixmappixmap = QPixmap::fromImage(mFilteredThumbnail); \nui->thumbnailLabel->setPixmap(pixmap); \n} \n\n```", "```cpp\nvoidFilterWidget::setTitle(constQString& tile) \n{ \nui->titleLabel->setText(tile); \n} \n\nvoidFilterWidget::setFilterType(FilterWidget::FilterTypefilterType) \n{ \nif (filterType == mFilterType&&mFilter) { \nreturn; \n    } \nmFilterType = filterType; \n\nswitch (filterType) { \ncase Original: \nmFilter = make_unique<FilterOriginal>(); \nbreak; \n\ncase Blur: \nmFilter = make_unique<FilterBlur>(); \nbreak; \n\ncase Grayscale: \nmFilter = make_unique<FilterGrayscale>(); \nbreak; \n\ndefault: \nbreak; \n    } \n\nupdateThumbnail(mSourceThumbnail); \n} \n\n```", "```cpp\nQStringFilterWidget::title() const \n{ \nreturnui->titleLabel->text(); \n} \n\nFilterWidget::FilterTypeFilterWidget::filterType() const \n{ \nreturnmFilterType; \n} \n\nvoidFilterWidget::mousePressEvent(QMouseEvent*) \n{ \nprocess(); \n} \n\n```", "```cpp\n#include <QtUiPlugin/QDesignerCustomWidgetInterface> \n\nclass  FilterPluginDesigner : public QObject, public QDesignerCustomWidgetInterface \n{ \n    Q_OBJECT \n    Q_PLUGIN_METADATA(IID \n        \"org.masteringqt.imagefilter.FilterWidgetPluginInterface\") \n    Q_INTERFACES(QDesignerCustomWidgetInterface) \npublic: \nFilterPluginDesigner(QObject* parent = 0); \n}; \n\n```", "```cpp\nclass  FilterPluginDesigner : public QObject, public QDesignerCustomWidgetInterface \n{ \n    ... \nFilterPluginDesigner(QObject* parent = 0); \n\nQStringname() const override; \nQStringgroup() const override; \nQStringtoolTip() const override; \nQStringwhatsThis() const override; \nQStringincludeFile() const override; \nQIconicon() const override; \nboolisContainer() const override; \nQWidget* createWidget(QWidget* parent) override; \nboolisInitialized() const override; \nvoid initialize(QDesignerFormEditorInterface* core) override; \n\nprivate: \nboolmInitialized; \n}; \n\n```", "```cpp\nQStringFilterPluginDesigner::name() const \n{ \nreturn \"FilterWidget\"; \n} \n\nQStringFilterPluginDesigner::group() const \n{ \nreturn \"Mastering Qt5\"; \n} \n\nQStringFilterPluginDesigner::toolTip() const \n{ \nreturn \"A filtered picture\"; \n} \n\nQStringFilterPluginDesigner::whatsThis() const \n{ \nreturn \"The filter widget applies an image effect\"; \n} \n\nQIconFilterPluginDesigner::icon() const \n{ \nreturnQIcon(\":/icon.jpg\"); \n} \n\nboolFilterPluginDesigner::isContainer() const \n{ \nreturn false; \n} \n\n```", "```cpp\nQStringFilterPluginDesigner::includeFile() const \n{ \nreturn \"FilterWidget.h\"; \n} \n\n```", "```cpp\nQWidget* FilterPluginDesigner::createWidget(QWidget* parent) \n{ \nreturn new FilterWidget(parent); \n} \n\n```", "```cpp\nvoidFilterPluginDesigner::initialize(QDesignerFormEditorInterface*) \n{ \nif (mInitialized) \nreturn; \n\nmInitialized = true; \n} \n\n```", "```cpp\nQT       += core gui \n\ngreaterThan(QT_MAJOR_VERSION, 4): QT += widgets \n\nTARGET = image-filter \nTEMPLATE = app \n\nINCLUDEPATH += ../filter-plugin-designer \n\nwin32 { \n    LIBS += -L$$(QTDIR)/../../Tools/QtCreator/bin/plugins/designer -lfilter-plugin-designer \n} \n\nmacx { \n    LIBS += -L$$(QTDIR)/../../\"QtCreator.app\"/Contents/PlugIns/designer/ -lfilter-plugin-designer \n} \n\nlinux { \n    LIBS += -L$$(QTDIR)/../../Tools/QtCreator/lib/Qt/plugins/designer/ -lfilter-plugin-designer \n} \n\nSOURCES += main.cpp\\ \n        MainWindow.cpp \n\nHEADERS  += MainWindow.h \n\nFORMS    += MainWindow.ui \n\n```", "```cpp\n#include <QMainWindow> \n#include <QImage> \n#include <QVector> \n\nnamespaceUi { \nclassMainWindow; \n} \n\nclassFilterWidget; \n\nclassMainWindow : public QMainWindow \n{ \n    Q_OBJECT \n\npublic: \nexplicitMainWindow(QWidget *parent = 0); \n    ~MainWindow(); \n\nvoidloadPicture(); \n\nprivate slots: \nvoiddisplayPicture(constQImage& picture); \n\nprivate: \nvoidinitFilters(); \nvoidupdatePicturePixmap(); \n\nprivate: \nUi::MainWindow *ui; \nQImagemSourcePicture; \nQImagemSourceThumbnail; \nQPixmapmCurrentPixmap; \nFilterWidget* mCurrentFilter; \nQVector<FilterWidget*>mFilters; \n}; \n\n```", "```cpp\n#include <QFileDialog> \n#include <QPixmap> \n#include <QDir> \n\n#include \"FilterWidget.h\" \n\nMainWindow::MainWindow(QWidget *parent) : \nQMainWindow(parent), \nui(new Ui::MainWindow), \nmSourcePicture(), \nmSourceThumbnail(), \nmCurrentPixmap(), \nmCurrentFilter(nullptr), \nmFilters() \n{ \nui->setupUi(this); \nui->pictureLabel->setMinimumSize(1, 1); \n\nconnect(ui->actionOpenPicture, &QAction::triggered,  \n    this, &MainWindow::loadPicture); \nconnect(ui->actionExit, &QAction::triggered,  \n    this, &QMainWindow::close); \ninitFilters(); \n} \n\n```", "```cpp\nvoidMainWindow::initFilters() \n{ \nmFilters.push_back(ui->filterWidgetOriginal); \nmFilters.push_back(ui->filterWidgetBlur); \nmFilters.push_back(ui->filterWidgetGrayscale); \n\nfor (inti = 0; i<mFilters.size(); ++i) { \nconnect(mFilters[i], &FilterWidget::pictureProcessed, \nthis, &MainWindow::displayPicture); \n    } \nmCurrentFilter = mFilters[0]; \n} \n\n```", "```cpp\nvoidMainWindow::loadPicture() \n{ \nQString filename = QFileDialog::getOpenFileName(this, \n        \"Open Picture\", \n        QDir::homePath(), \n  tr(\"Images (*.png *.jpg)\")); \nif (filename.isEmpty()) { \nreturn; \n    } \nmSourcePicture = QImage(filename); \nmSourceThumbnail = mSourcePicture.scaled(QSize(256, 256), \n  Qt::KeepAspectRatio,                                                   Qt::SmoothTransformation); \nfor (inti = 0; i<mFilters.size(); ++i) { \nmFilters[i]->setSourcePicture(mSourcePicture); \nmFilters[i]->updateThumbnail(mSourceThumbnail); \n    } \n\nmCurrentFilter->process(); \n} \n\n```", "```cpp\nvoidMainWindow::displayPicture(constQImage& picture) \n{ \nmCurrentPixmap = QPixmap::fromImage(picture); \nupdatePicturePixmap(); \n} \n\n```", "```cpp\nvoidMainWindow::updatePicturePixmap() \n{ \nif (mCurrentPixmap.isNull()) { \nreturn; \n    } \nui->pictureLabel->setPixmap( \nmCurrentPixmap.scaled(ui->pictureLabel->size(), \n      Qt::KeepAspectRatio, \nQt::SmoothTransformation)); \n} \n\n```", "```cpp\n// In MainWindow.h \nclassMainWindow : public QMainWindow \n{ \n    ... \nvoidloadPicture(); \n\nprotected: \nvoidresizeEvent(QResizeEvent* event) override; \n    ... \n}; \n\n// In MainWindow.cpp \nvoidMainWindow::resizeEvent(QResizeEvent* /*event*/) \n{ \nupdatePicturePixmap(); \n} \n\n```", "```cpp\nclassMainWindow : public QMainWindow \n{ \n    ... \n\nprivate slots: \nvoiddisplayPicture(constQImage& picture); \nvoidsaveAsPicture(); \n    ... \n\nprivate: \nUi::MainWindow *ui; \nQImagemSourcePicture; \nQImagemSourceThumbnail; \nQImage&mFilteredPicture; \n    ... \n}; \n\n```", "```cpp\n// In MainWindow.cpp \nMainWindow::MainWindow(QWidget *parent) : \nQMainWindow(parent), \nui(new Ui::MainWindow), \nmSourcePicture(), \nmSourceThumbnail(), \nmFilteredPicture(mSourcePicture), \n    ... \n{ \nui->setupUi(this); \nui->actionSaveAs->setEnabled(false); \nui->pictureLabel->setMinimumSize(1, 1); \n\nconnect(ui->actionOpenPicture, &QAction::triggered, \nthis, &MainWindow::loadPicture); \nconnect(ui->actionSaveAs, &QAction::triggered, \nthis, &MainWindow::saveAsPicture); \n    ... \n} \n\nvoidMainWindow::loadPicture() \n{ \n    ... \nif (filename.isEmpty()) { \nreturn; \n    } \nui->actionSaveAs->setEnabled(true); \n    ... \n} \n\nvoidMainWindow::displayPicture(constQImage& picture) \n{ \nmFilteredPicture = picture; \nmCurrentPixmap = QPixmap::fromImage(picture); \nupdatePicturePixmap(); \n} \n\nvoidMainWindow::saveAsPicture() \n{ \nQString filename = QFileDialog::getSaveFileName(this, \n            \"Save Picture\", \nQDir::homePath(), \ntr(\"Images (*.png *.jpg)\")); \nif (filename.isEmpty()) { \nreturn; \n    } \nmFilteredPicture.save(filename); \n} \n\n```"]