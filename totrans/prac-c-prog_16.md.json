["```cpp\nbinintodec.c\n#include <stdio.h>\nvoid main()\n{\n    int num,bin,temp,dec=0,topower=0;\n\n    printf(\"Enter the binary number: \");\n    scanf(\"%d\",&bin);\n    temp=bin;\n    while(bin >0)\n    {\n        num=bin %10;\n        num=num<<topower;\n        dec=dec+num;\n        topower++;\n        bin=bin/10;\n    }    \n    printf(\"The decimal of %d is %d\\n\",temp,dec);\n}\n```", "```cpp\nD:\\CBook>gcc binintodec.c -o binintodec\n```", "```cpp\nD:\\CBook>binintodec\nEnter the binary number: 1101\nThe decimal of 1101 is 13\n```", "```cpp\nconvertintobin.c\n#include <stdio.h>\nvoid main()\n{\n    int num,i,x,temp;\n    int p[10];\n    printf(\"Enter Decimal Number : \");\n    scanf(\"%d\",&num);\n    temp=num;\n    x=0;\n    while(num > 0)\n    {\n        if((num & 1) == 0 )\n        {\n            p[x]=0;                                                            x++;\n        }\n        else\n        {\n            p[x]=1;\n            x++;\n        }\n        num = num >> 1;\n    }\n    printf(\"Binary of %d is \",temp);\n    for(i=x-1;i>=0;i--)printf(\"%d\",p[i]);\n}\n```", "```cpp\nD:\\CBook>gcc convertintobin.c -o convertintobin\n```", "```cpp\nD:\\CBook>convertintobin\nEnter Decimal Number : 13\nBinary of 13 is 1101\n```", "```cpp\ndecintobin.c\n#include <stdio.h>\nvoid main()\n{\n    int i, totbits;\n    unsigned mask,num;\n    printf(\"Enter decimal value: \");\n    scanf(\"%d\", &num);\n    totbits=32;\n    mask = 1 << (totbits - 1);\n    for(i = 0; i < totbits; i++)\n    {\n        if((num & mask) == 0 )\n            printf(\"0\");\n        else\n            printf(\"1\");\n        mask >>= 1;\n    }\n}\n```", "```cpp\nD:\\CBook>gcc decintobin.c -o decintobin\n```", "```cpp\nD:\\CBook>decintobin\nEnter decimal value: 13\n00000000000000000000000000001101\n```", "```cpp\nasm [volatile] (\nasm statements\n: output statements\n: input statements\n);\n```", "```cpp\n#include <stdio.h>\n#include <stdint.h>\nint main(int argc, char **argv)\n{\n    int32_t var1=10, var2=20, multi = 0;\n    asm volatile (\"imull %%ebx,%%eax;\"\n        : \"=a\" (multi)          \n        : \"a\" (var1), \"b\" (var2) \n    );\n    printf(\"Multiplication = %d\\n\", multi);\n    return 0;\n}\n```", "```cpp\nD:\\CBook>gcc multiasm.c -o multiasm\n```", "```cpp\nD:\\CBook>multiasm\nMultiplication = 200\n```", "```cpp\nasmdivide.c\n#include <stdio.h>\nvoid main() {\n    int var1=19,var2=4, var3=0, remainder, quotient;\n    asm(\"divl %%ebx;\"\n        \"movl %%edx, %0\"\n        : \"=b\" (remainder) , \"=r\" (quotient)\n        : \"a\" (var1), \"b\" (var2), \"d\" (var3) \n    );\n    printf (\"On dividing %d by %d, you get %d quotient and %d remainder\\n\", var1, var2, quotient, remainder);\n}\n```", "```cpp\nD:\\CBook>gcc asmdivide.c -o asmdivide\n```", "```cpp\nD:\\CBook>asmdivide\nOn dividing 19 by 4, you get 4 quotient and 3 remainder\n```"]