["```cpp\nMereTDD project root folder\n    Test.h\n    tests folder\n        main.cpp\n        Confirm.cpp\n        Creation.cpp\n```", "```cpp\n#include \"../Test.h\"\nTEST(\"Test will pass without any confirms\")\n{\n}\n```", "```cpp\nTEST(\"Test can be created\")\n{\n}\n```", "```cpp\nld: 5 duplicate symbols for architecture x86_64\n```", "```cpp\nduplicate symbol 'Test3::run()'\n```", "```cpp\n#define TEST( testName ) \\\nnamespace { \\\nclass MERETDD_CLASS : public MereTDD::TestBase \\\n{ \\\npublic: \\\n    MERETDD_CLASS (std::string_view name) \\\n    : TestBase(name) \\\n    { \\\n        MereTDD::getTests().push_back(this); \\\n    } \\\n    void run () override; \\\n}; \\\n} /* end of unnamed namespace */ \\\nMERETDD_CLASS MERETDD_INSTANCE(testName); \\\nvoid MERETDD_CLASS::run ()\n```", "```cpp\n#define TEST_EX( testName, exceptionType ) \\\nnamespace { \\\nclass MERETDD_CLASS : public MereTDD::TestBase \\\n{ \\\npublic: \\\n    MERETDD_CLASS (std::string_view name) \\\n    : TestBase(name) \\\n    { \\\n        MereTDD::getTests().push_back(this); \\\n    } \\\n    void runEx () override \\\n    { \\\n        try \\\n        { \\\n            run(); \\\n        } \\\n        catch (exceptionType const &) \\\n        { \\\n            return; \\\n        } \\\n        throw MereTDD::MissingException(#exceptionType); \\\n    } \\\n    void run () override; \\\n}; \\\n} /* end of unnamed namespace */ \\\nMERETDD_CLASS MERETDD_INSTANCE(testName); \\\nvoid MERETDD_CLASS::run ()\n```", "```cpp\nRunning 7 tests\n---------------\nTest will pass without any confirms\nPassed\n---------------\nTest can be created\nPassed\n---------------\n```", "```cpp\nTEST(\"Test passing grades\")\n{\n    bool result = isPassingGrade(0);\n    if (result)\n    {\n        throw 1;\n    }\n}\n```", "```cpp\nTEST(\"Test passing grades\")\n{\n    bool result = isPassingGrade(0);\n    if (result)\n    {\n        throw 1;\n    }\n    result = isPassingGrade(100);\n    if (not result)\n    {\n        throw 1;\n    }\n}\n```", "```cpp\nbool isPassingGrade (int value)\n{\n    return true;\n}\n```", "```cpp\n---------------\nTest passing grades\nFailed\nUnexpected exception thrown.\n---------------\n```", "```cpp\nTEST(\"Test passing grades\")\n{\n    bool result = isPassingGrade(0);\n    if (result)\n    {\n        throw 1;\n    }\n    result = isPassingGrade(100);\n    if (not result)\n    {\n        throw 1;\n    }\n}\n```", "```cpp\nTEST(\"Test passing grades\")\n{\n    bool result = isPassingGrade(0);\n    if (result)\n    {\n        throw MereTDD::BoolConfirmException(false, 17);\n    }\n    result = isPassingGrade(100);\n    if (not result)\n    {\n        throw MereTDD::BoolConfirmException(true, 23);\n    }\n}\n```", "```cpp\nnamespace MereTDD\n{\nclass ConfirmException\n{\npublic:\n    ConfirmException () = default;\n    virtual ~ConfirmException () = default;\n    std::string_view reason () const\n    {\n        return mReason;\n    }\nprotected:\n    std::string mReason;\n};\n```", "```cpp\nclass BoolConfirmException : public ConfirmException\n{\npublic:\n    BoolConfirmException (bool expected, int line)\n    {\n        mReason =  \"Confirm failed on line \";\n        mReason += std::to_string(line) + \"\\n\";\n        mReason += \"    Expected: \";\n        mReason += expected ? \"true\" : \"false\";\n    }\n};\n```", "```cpp\n        try\n        {\n            test->runEx();\n        }\n        catch (ConfirmException const & ex)\n        {\n            test->setFailed(ex.reason());\n        }\n```", "```cpp\n---------------\nTest passing grades\nFailed\nConfirm failed on line 17\n    Expected: false\n---------------\n```", "```cpp\nTEST(\"Test passing grades\")\n{\n    bool result = isPassingGrade(0);\n    CONFIRM_FALSE(result);\n    result = isPassingGrade(100);\n    CONFIRM_TRUE(result);\n}\n```", "```cpp\n#define CONFIRM_FALSE( actual ) \\\nif (actual) \\\n{ \\\n    throw MereTDD::BoolConfirmException(false, __LINE__); \\\n}\n#define CONFIRM_TRUE( actual ) \\\nif (not actual) \\\n{ \\\n    throw MereTDD::BoolConfirmException(true, __LINE__); \\\n}\n```", "```cpp\n---------------\nTest passing grades\nFailed\nConfirm failed on line 15\n    Expected: false\n---------------\n```", "```cpp\nTEST(\"Test passing grades\")\n{\n    bool result = isPassingGrade(0);\n    CONFIRM_FALSE(result);\n    result = isPassingGrade(100);\n    CONFIRM_TRUE(result);\n}\n```", "```cpp\nbool isPassingGrade (int value)\n{\n    return true;\n}\n```", "```cpp\nbool isPassingGrade (int value)\n{\n    if (value < 60)\n    {\n        return false;\n    }\n    return true;\n}\n```", "```cpp\n---------------\nTest passing grades\nPassed\n---------------\n```"]