- en: Using a Relay
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are times where we want to control higher voltage items such as a light,
    fan or any other household appliance. However, the Arduino and every project so
    far in this book uses **direct current** (**DC**) while your household appliances
    use **alternating current** (**AC**). There are significant differences between
    AC and DC. In this chapter, we will look at how we can use a relay with an Arduino
    to control a lamp that runs on AC.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn:'
  prefs: []
  type: TYPE_NORMAL
- en: What a relay is
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use a relay to control an AC-powered device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use a relay to control a DC-powered device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to isolate circuits using a relay
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**WARNING:** In this chapter, we will be using 120V or 240V AC depending on
    what country you live in, which is significantly more powerful than anything else
    we have used in this book.'
  prefs: []
  type: TYPE_NORMAL
- en: Mishandling, incorrect or improper use of the relay or the power cables can
    result in serious injury and even death. Make sure that you have read and understood
    how your relay board works, the voltage and current it is rated for, and the risks
    involved when using AC power before you attempt the project in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '**Do not be afraid to seek professional help** if you are uncertain about anything.
    AC power is significantly more dangerous than the DC power that we have used previously
    in this book.'
  prefs: []
  type: TYPE_NORMAL
- en: If you do not feel comfortable using AC power in a project or if you are not
    familiar enough with it, there will be two circuit diagrams for this chapter.
    One diagram will show how to connect an AC-powered lamp to the relay and the other
    shows how to connect a motor and a 9V power source with a relay. The code for
    this chapter will work with either project and will turn the lamp or motor off
    and on.
  prefs: []
  type: TYPE_NORMAL
- en: When working on an AC-powered device, *always* make sure the device is unplugged
    prior to doing any work on it. An electrical shock from a wall socket can cause
    serious injury and even death.
  prefs: []
  type: TYPE_NORMAL
- en: A relay can be thought of as an electric switch. Many relays use electromagnets
    to mechanically operate the switch. However, there are other ways to control a
    relay. An example of this is a solid-state relay, which uses no mechanical parts.
    Most relays that we would use with the Arduino use electromagnets to operate the
    switch.
  prefs: []
  type: TYPE_NORMAL
- en: Relays are used when there is a need to isolate two or more circuits from each
    other while still having the ability for a component from one of the circuits
    (the Arduino) to control a component in the other circuits. When you are using
    DC power for all components in the project, there usually isn't a need to isolate
    the circuits; however, when you want to control an AC-powered device, such as
    a desk lamp, then a device like a relay is needed.
  prefs: []
  type: TYPE_NORMAL
- en: As we mentioned earlier, if you are not familiar with working on AC-powered
    devices, then use the DC motor project rather than the lamp project. The same
    concepts are used in both projects; however, one is powered by AC, and the other
    is powered by DC.
  prefs: []
  type: TYPE_NORMAL
- en: 'The plug for the AC-powered devices contains two wires. In order to connect
    this device to a relay, we will need to cut one of the wires and connect one end
    to the COM connection on the relay and the other to the NO connection on the relay.
    The other cable is left intact. The following photograph illustrates this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/606d069a-b049-48c1-b280-cb9cec591d14.png)'
  prefs: []
  type: TYPE_IMG
- en: The **NO** label on the relay stands for **Normally Open** while the **NC**
    label stands for **Normally Closed**. The COM connection, which is usually between
    the NO and NC connections is the common connection. When the relay is off, power
    runs through the NC connection, which means that if the AC-powered device should
    be on when the relay is off, then it should be connected to the COM and NC connections.
    If the AC-powered device should be on only when the relay is turned on, then it
    should be connected to the COM and NO connections as we are doing here.
  prefs: []
  type: TYPE_NORMAL
- en: Relays are typically rated with a maximum voltage of 230 VAC to 250 VAC or 30
    VDC at 10A. You will want to verify that the relay in your project can handle
    the voltage and current that you are running.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows how a relay works:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9427cc72-8190-4316-9f90-d4d4601f6d07.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding images, we see that when no voltage is applied to the relay,
    (image on the left) the NC pin is connected to the COM terminal, thereby completing
    that circuit. When a voltage is applied, the armature is pulled to the NO pin
    connecting it to the COM terminal, completing that circuit.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding photograph, a board with a single relay was used. However,
    there are boards that contain multiple relays, which give us the ability to control
    components in multiple circuits. The following photograph shows a board with four
    relays:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ec6fb4f6-a5f2-4908-bc1e-46d013ebb8ac.png)'
  prefs: []
  type: TYPE_IMG
- en: The relays that were shown in this chapter are rated for both AC and DC circuits.
    Therefore, they can be used for either project in this chapter. You could even
    attempt to do both projects if you would like.
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at the components that we will need for this chapter's projects.
  prefs: []
  type: TYPE_NORMAL
- en: Components needed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One Arduino Uno or compatible board
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One relay board
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jumper wires
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One AC-powered device that you would like to control with the Arduino, such
    as a desk lamp, or if you wish to use a DC power device rather than an AC powered
    one
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One 9V battery adapter with a battery with a DC motor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Circuit diagrams
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following diagrams show how we would connect an AC-powered device and an
    Arduino to a relay:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/44799267-d7a5-45e0-a89f-871ae2c4b7a5.png)'
  prefs: []
  type: TYPE_IMG
- en: The AC-powered device is connected to the relay as described in the *Introduction*
    section. The **VCC** pin on the relay is connected to the **5V** out on the Arduino,
    and the **GND** pin on the relay is connected to the **GND** pin on the Arduino.
    We connect the digital 3 pin on the Arduino to the pin labeled **IN** on the relay.
    The digital 3 pin will be used to control the relay.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows how we would use a relay to control a DC motor
    and 9V power source with the Arduino:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9b0592dc-af2a-4144-b364-3b741757916d.png)'
  prefs: []
  type: TYPE_IMG
- en: In preceding circuits, we stressed the need to have a common ground between
    the various components; however, in this circuit, you will notice that there is
    not a common ground between the Arduino and the motor/9V battery circuit. When
    using a relay, the circuits on opposite sides of the relay are isolated from each
    other; therefore, we do not want a common ground between them. If you wish to
    have a common ground between the two circuits, then a relay is not necessary because
    a relay is used to isolate two circuits.
  prefs: []
  type: TYPE_NORMAL
- en: Now let's look at the code for these circuits.
  prefs: []
  type: TYPE_NORMAL
- en: Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following is the code for the projects in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This code should look pretty familiar by now. This code starts off by defining
    that the relay is connected to the digital 3 pin on the Arduino. In the `setup()`
    function, we enable the relay pin for output because we want to use the `digitalWrite()`
    function to turn the relay on and off.
  prefs: []
  type: TYPE_NORMAL
- en: In the `loop()` function, we use the `digitalWrite()` function to set the relay
    pin to high, pause three seconds, use the `digitalWrite()` function again to set
    the relay pin to low and finally pause three seconds again. This will turn the
    components connected to the relay on and off every three seconds. This code will
    work with either the AC circuit or the DC circuit shown previously in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Challenge
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this chapter's challenge, use a board with four relays and try connecting
    a component to each relay that can be controlled by the Arduino. Keep in mind
    that each circuit needs its own isolated power source.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we saw how we could use a relay to control both AC and DC components.
    We also saw that the circuits on either side of the relay need their own isolated
    power source.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will see how we can use radio frequencies to remotely
    control the Arduino.
  prefs: []
  type: TYPE_NORMAL
