["```cpp\n$ mingw-get list\n\n```", "```cpp\n$ mingw-get install gcc g++ gdb\n\n```", "```cpp\n#define WIN32_LEAN_AND_MEAN\n#include <windows.h>\n#include \"resource.h\"\n\nBOOL CALLBACK DialogProc(HWND hwndDlg, UINT uMsg, WPARAM wParam, LPARAM lParam)\n{\n    switch(uMsg)\n    {\n        case WM_CLOSE:\n            EndDialog(hwndDlg, 0);\n            return TRUE;\n\n        case WM_COMMAND:\n            switch(LOWORD(wParam))\n            {\n                case IDC_BTN_QUIT:\n                    EndDialog(hwndDlg, 0);\n                    return TRUE;\n\n                case IDC_BTN_TEST:\n                    MessageBox(hwndDlg, \"Message text\", \"Information\", MB_ICONINFORMATION);\n                    return TRUE;\n            }\n    }\n\n    return FALSE;\n}\n\nint WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nShowCmd)\n{\n    return DialogBox(hInstance, MAKEINTRESOURCE(DLG_MAIN), NULL, (DLGPROC)DialogProc);\n}\n```", "```cpp\n#include \"resource.h\"\n\nDLG_MAIN DIALOGEX 6, 5, 138, 75\n\nCAPTION \"Typical Windows Application\"\n\nFONT 10, \"Tahoma\"\n\nSTYLE 0x10CE0804\n\nBEGIN\n  CONTROL \"&Message\", IDC_BTN_TEST, \"Button\", 0x10010000, 46, 15, 46, 15\n  CONTROL \"&Quit\", IDC_BTN_QUIT, \"Button\", 0x10010000, 46, 45, 46, 15\nEND\n```", "```cpp\n#include <windows.h>\n\n#define DLG_MAIN 100\n#define IDC_BTN_TEST 101\n#define IDC_BTN_QUIT 102\n```", "```cpp\nwin32-app.exe: main.cpp resource.rc.res.o\n  g++ -o win32-app.exe main.cpp resource.rc.res.o\n\nresource.rc.res.o: resource.rc\n  windres -o resource.rc.res.o -i resource.rc\n\nclean:\n  rm -f *.o win32-app.exe\n```", "```cpp\n$ g++ --help\n\n```", "```cpp\n    $ cd /c/Projects\n\n    ```", "```cpp\n$ make -f OtherMakefile other_target\n\n```", "```cpp\nwin32-app.exe: main.cpp resource.rc.res.o\n  g++ -o win32-app.exe main.cpp resource.rc.res.o\n\nresource.rc.res.o: resource.rc\n  windres -o resource.rc.res.o -i resource.rc\n\nclean:\n  rm -f *.o win32-app.exe\n```", "```cpp\nEXE=win32-app.exe\nCPP=main.cpp\nRES=resource.rc \n\n$(EXE): $(CPP) $(RES).res.o\n  g++ -o $(EXE) $(CPP) $(RES).res.o\n\n$(RES).res.o: $(RES)\n  windres  -o $(RES).res.o -i $(RES)\n\nclean:\n  rm -f *.o *.exe\n```", "```cpp\nCPP=main.cpp\nRES=resource.rc\n\nwin32-app.exe: $(CPP) $(RES).res.o\n  g++ -o $@ $^\n\n$(RES).res.o: $(RES)\n  windres -o $@ -i $^\n\nclean:\n  rm -f *.o *.exe\n```", "```cpp\nOBJ=main.o options.o\nRES=resource.rc\n\nCXXFLAGS+=-IC:\\MinGW\\include\nLIBS+=-LC:\\MinGW\\lib -lboost_program_options\n\nwin32-app.exe: $(OBJ) $(RES).res.o\n  g++ -o $@ $^ $(LIBS)\n\n$(RES).res.o: $(RES)\n  windres -o $@ -i $^\n\nclean:\n  rm -f *.o *.exe\n```", "```cpp\nCXXFLAGS+=-IC:\\first_include_path -IC:\\second_include_path\n```", "```cpp\n$ make -p\n\n```", "```cpp\nOBJ=main.o\nRES=resource.rc\n\nCXXFLAGS+=-IC:\\MinGW\\include\nLIBS+=-LC:\\MinGW\\git\\bin â€“lz\n\nwin32-app.exe: $(OBJ) $(RES).res.o\n  $(CXX) -o $@ $^ $(LIBS)\n\n$(RES).res.o: $(RES)\n  windres -o $@ -i $^\n\nclean:\n  rm -f *.o *.exe\n```", "```cpp\nSUBDIRS = foo bar\n\n.PHONY: subdirs $(SUBDIRS)\n\nsubdirs: $(SUBDIRS)\n\n$(SUBDIRS):\n  $(MAKE) -C $@\n```", "```cpp\ninclude Makefile.mingw\n```", "```cpp\n    #define name value\n    ```", "```cpp\nnamespace po = boost::program_options;\nclass Options\n{\npublic:\n    Options(int argc, char* argv[]);\n\n    std::string GetString(std::string option_name);\n    po::options_description& GetDescription();\n    bool IsUnzip();\n    bool IsComplete();\n\nprivate:\n    po::variables_map options_;\n    po::options_description description_;\n};\n```", "```cpp\nOptions::Options(int argc, char* argv[])\n{\n    description_.add_options()\n        (kHelp.c_str(), \"produce help message\")\n        (kInFile.c_str(), po::value<string>(), \"input file name\")\n        (kOutFile.c_str(), po::value<string>(), \"output file name\")\n        (kUnzip.c_str(), \"unzip the archive\");\n\n    try\n    {\n        po::store(po::parse_command_line(argc, argv, description_),\n                       options_);\n    }\n    catch(...)\n    {\n        cout << GetDescription() << \"\\n\";\n        exit(1);\n    }\n}\n```", "```cpp\nstatic const std::string kHelp = \"help\";\nstatic const std::string kInFile = \"in\";\nstatic const std::string kOutFile = \"out\";\nstatic const std::string kUnzip = \"unzip\";\n```", "```cpp\nstring Options::GetString(string option_name)\n{\n    if ( options_.count(option_name) == 0 )\n        return string();\n\n    return options_[option_name].as<string>();\n}\n```", "```cpp\nclass Packer\n{\npublic:\n  static void Compress(std::string in_file, std::string out_file);\n  static void Decompress(std::string in_file, std::string out_file);\n};\n```", "```cpp\nvoid Packer::Compress(string in_file, string out_file)\n{\n  io::filtering_ostreambuf out;\n  out.push(io::zlib_compressor());\n  out.push(io::file_sink(out_file.c_str(), ios::binary));\n  io::copy(io::file_source(in_file.c_str(), ios::binary), out);\n}\n```", "```cpp\nvoid Packer::Decompress(std::string in_file, std::string out_file)\n{\n  io::filtering_istreambuf in;\n  in.push(io::zlib_decompressor());\n  in.push(io::file_source(in_file.c_str(), ios::binary));\n  io::copy(in, io::file_sink(out_file.c_str(), ios::binary));\n}\n```", "```cpp\nint main(int argc, char* argv[])\n{\n    Options options(argc, argv);\n\n    If ( ! options.IsComplete() )\n    {\n        cout << options.GetDescription() << \"\\n\";\n        return 1;\n    }\n\n    if ( options.IsUnzip() )\n        Packer::Decompress(options.GetString(kInFile), options.GetString(kOutFile));\n    else\n        Packer::Compress(options.GetString(kInFile), options.GetString(kOutFile));\n    return 0;\n}\n```", "```cpp\n$ z_pack.exe --in test.txt --out test.zip\n\n```", "```cpp\n$ z_pack.exe --unzip --in test.zip --out test.txt\n\n```", "```cpp\n    #include \"stdafx.h\"\n    ```", "```cpp\n    SUBDIRS = core z_pack\n\n    .PHONY: all $(SUBDIRS)\n\n    all: $(SUBDIRS)\n\n    $(SUBDIRS):\n      $(MAKE) -C $@ clean\n      $(MAKE) -C $@\n    ```", "```cpp\n    OBJ=options.o packer.o\n\n    CXXFLAGS+=-IC:\\MinGW\\include\n\n    libcore.a: $(OBJ)\n      ar rcs $@ $^\n\n    clean:\n      rm -f *.o *.a\n    ```", "```cpp\n    $ ar --help\n\n    ```", "```cpp\n    OBJ=z_pack.o\n\n    MINGW_DIR=C:\\MinGW\n    CXXFLAGS+=-I..\\core\n    LIBS+=-L..\\core -lcore -L$(MINGW_DIR)\\lib -lboost_program_options -lboost_iostreams -L$(MINGW_DIR)\\git\\bin -lz\n\n    z_pack.exe: $(OBJ)\n      $(CXX) -o $@ $^ $(LIBS)\n\n    clean:\n      rm -f *.o *.exe\n    ```", "```cpp\nOBJ=options.o packer.o\n\nMINGW_DIR=C:\\MinGW\nCXXFLAGS+=-I$(MINGW_DIR)\\include\nLIBS+=-L$(MINGW_DIR)\\lib -lboost_program_options -lboost_iostreams -L$(MINGW_DIR)\\git\\bin -lz\n\nlibcore.dll: $(OBJ)\n  $(CXX) -shared -o $@ $^ $(LIBS)\n\nclean:\n  rm -f *.o *.dll\n```", "```cpp\nOBJ=z_pack.o\n\nCXXFLAGS+=-I..\\core\nLIBS+=-L..\\core -lcore\n\nz_pack.exe: $(OBJ)\n  $(CXX) -o $@ $^ $(LIBS)\n\nclean:\n  rm -f *.o *.exe *.dll\n```", "```cpp\n    $ gdb --help\n\n    ```", "```cpp\n#include <string.h>\n\nvoid bar()\n{\n  int* pointer = NULL;\n  *pointer = 10;\n}\n\nvoid foo()\n{\n  bar();\n}\n\nint main()\n{\n  foo();\n\n  return 0;\n}\n```", "```cpp\nOBJ=segfault.o\n\nCXXFLAGS+=-g\n\nsegfault.exe: $(OBJ)\n  $(CXX) -o $@ $^\n\nclean:\n  rm -f *.o *.exe\n```", "```cpp\n$ gdb segfault.exe\n\n```", "```cpp\n$ gdb --args z_pack.exe --in test.txt --out test.zip\n\n```", "```cpp\n(gdb) r\n\n```", "```cpp\n*pointer = 10;\n```", "```cpp\n(gdb) bt\n\n```", "```cpp\n(gdb) l\n\n```", "```cpp\n(gdb) q\n\n```", "```cpp\n$ gdb --directory=. segfault.exe\n\n```", "```cpp\n(gdb) show directories\n\n```", "```cpp\n(gdb) b segfault.cpp:foo\n\n```", "```cpp\n(gdb) b segfault.cpp:5\n\n```", "```cpp\n(gdb) i b\n\n```", "```cpp\n(gdb) r\n\n```", "```cpp\n(gdb) c\n\n```", "```cpp\n(gdb) aw pointer\n\n```", "```cpp\n(gdb) display pointer\n\n```", "```cpp\n(gdb) disable 1\n\n```", "```cpp\n(gdb) enable 1\n\n```", "```cpp\n(gdb) d 1\n\n```", "```cpp\n    (gdb) s\n\n    ```", "```cpp\n    (gdb) n\n\n    ```", "```cpp\n    (gdb) fin\n\n    ```", "```cpp\n$ strip segfault.exe\n\n```", "```cpp\nint main()\n{\n  ReadData();\n\n  SortData();\n\n  WriteResult();\n\n  return 0;\n}\n```", "```cpp\nvoid ReadData()\n{\n  ifstream in_file(\"source.txt\", ios::in | ios::binary);\n\n  copy(istream_iterator<char>(in_file), istream_iterator<char>(), \n     back_inserter(gData));\n}\n```", "```cpp\nvoid SortData()\n{\n  char temp;\n  size_t size = gData.size();\n\n  for (int i = (size - 1); i > 0; i--)\n  {\n    for (int j = 1; j <= i; j++)\n    {\n    if (gData[j-1] > gData[j])\n    {\n      temp = gData[j-1];\n      gData[j-1] = gData[j];\n      gData[j] = temp;\n    }\n    }\n  }\n}\n```", "```cpp\nvoid WriteResult()\n{\n  ofstream out_file(\"result.txt\", ios::out | ios::binary);\n  out_file.write(&gData[0], gData.size());\n}\n```", "```cpp\nOBJ=sorting.o\n\nCXXFLAGS+=-pg\n\nsorting.exe: $(OBJ)\n  $(CXX) -o $@ $^ $(CXXFLAGS)\n\nclean:\n  rm -f *.o *.exe *.out *.dot\n```", "```cpp\n    $ gprof -zq sorting.exe > profile.txt\n    ```", "```cpp\n    $ gprof2dot.py -s profile.txt > profile.dot\n\n    ```", "```cpp\nvoid SortData()\n{\n  sort(gData.begin(), gData.end());\n}\n```", "```cpp\n$ strip sorting.exe\n\n```", "```cpp\nint main(int argc, char* argv[])\n{\n  QApplication application(argc, argv);\n\n  QMainWindow* window = CreateWindow();\n\n  CreateMsgButton(window);\n\n  CreateQuitButton(window, application);\n\n  return application.exec();\n}\n```", "```cpp\nQMainWindow* CreateWindow()\n{\n  QMainWindow* window = new QMainWindow(0, Qt::Window);\n\n  window->resize(250, 150);\n  window->setWindowTitle(\"Qt Application\");\n  window->show();\n\n  return window;\n}\n```", "```cpp\nvoid CreateMsgButton(QMainWindow* window)\n{\n  QMessageBox* message = new QMessageBox(window);\n  message->setText(\"Message text\");\n\n  QPushButton* button = new QPushButton(\"Message\", window);\n  button->move(85, 40);\n  button->resize(80, 25);\n  button->show();\n  QObject::connect(button, SIGNAL(released()), message, SLOT(exec()));\n}\n```", "```cpp\nvoid CreateQuitButton(QMainWindow* window, QApplication& application)\n{\n  QPushButton* quit_button = new QPushButton(\"Quit\", window);\n  quit_button->move(85, 85);\n  quit_button->resize(80, 25);\n  quit_button->show();\n  QObject::connect(quit_button, SIGNAL(released()), &application, SLOT(quit()));\n}\n```", "```cpp\n    $ qmake -project\n\n    ```", "```cpp\n    $ qmake\n\n    ```", "```cpp\n    $ mingw32-make\n\n    ```", "```cpp\n$ mingw32-make release\n\n```", "```cpp\nint main(int argc, char* argv[])\n{\n  gtk_init(&argc, &argv);\n\n  GtkWidget* window = CreateWindow();\n\n  GtkWidget* box = gtk_vbox_new(FALSE, 0);\n  gtk_widget_show(box);\n\n  CreateMsgButton(box);\n\n  CreateQuitButton(box);\n\n  gtk_container_add(GTK_CONTAINER(window), box);\n  gtk_widget_show(window);\n  gtk_main();\n\n  return 0;\n}\n```", "```cpp\nGtkWidget* CreateWindow()\n{\n  GtkWidget* window = gtk_window_new(GTK_WINDOW_TOPLEVEL);\n\n  gtk_window_set_title(GTK_WINDOW(window), \"Gtk+ Application\");\n  g_signal_connect(window, \"delete-event\",                           G_CALLBACK(gtk_main_quit), NULL);\n  g_signal_connect(window, \"destroy\", G_CALLBACK(gtk_main_quit),               NULL);\n\n  return window;\n}\n```", "```cpp\nvoid CreateMsgButton(GtkWidget* box)\n{\n  GtkWidget* button = gtk_button_new_with_label(\"Message\"); \n  gtk_widget_show(button);\t\n  g_signal_connect(G_OBJECT(button), \"clicked\",\n                     G_CALLBACK(ShowMessage), NULL);\n  gtk_container_add(GTK_CONTAINER(box), button);\n}\n```", "```cpp\nvoid ShowMessage(GtkWidget* widget, gpointer data)\n{\n  GtkWidget* message = gtk_message_dialog_new((GtkWindow*)data, GTK_DIALOG_MODAL, GTK_MESSAGE_INFO, GTK_BUTTONS_OK, \"Message text\");\n  gtk_dialog_run(GTK_DIALOG(message));\n  gtk_widget_destroy(message);\n}\n```", "```cpp\nvoid CreateQuitButton(GtkWidget* box)\n{\n  GtkWidget* button = gtk_button_new_with_label(\"Quit\"); \n  gtk_widget_show(button);\t\n  g_signal_connect(G_OBJECT(button), \"clicked\",\n                     G_CALLBACK(gtk_main_quit), NULL);\n  gtk_container_add(GTK_CONTAINER(box), button);\n}\n```", "```cpp\nOBJ=main.o\n\nCXXFLAGS+='pkg-config --cflags gtk+-win32-2.0'\nLIBS+='pkg-config --libs gtk+-win32-2.0'\n\ngtk.exe: $(OBJ)\n  $(CXX) -o $@ $^ $(LIBS)\n\nclean:\n  rm -f *.o *.exe\n```", "```cpp\n    cd C:\\wxWidgets\\build\\msw\n    make -f makefile.gcc SHARED=1 UNICODE=1 BUILD=release clean\n    make -f makefile.gcc SHARED=1 UNICODE=1 BUILD=release\n\n    ```", "```cpp\nclass MyApp : public wxApp\n{\npublic:\n  virtual ~MyApp() {}\n\nprivate:\n  virtual bool OnInit();\n};\n```", "```cpp\nbool MyApp::OnInit()\n{\n  MyDialog* dialog = new MyDialog(NULL, 0, _(\"wxWidgets application\"));\n\n  wxSizer* sizer = dialog->CreateButtonSizer(wxOK | wxCANCEL);\n  sizer->SetDimension(175, 50, 100, 100);\n\n    while ( dialog->ShowModal() == wxID_OK )\n    {\n      wxMessageBox(_(\"Message text\"), \n                    _(\"Information\"),\n                    wxOK | wxICON_INFORMATION, dialog);\n  }\n\n  dialog->Destroy();\n  return true;\n}\n```", "```cpp\nclass MyDialog : public wxDialog\n{\npublic:\n  MyDialog(wxWindow* parent, wxWindowID id,\n              const wxString& title) : wxDialog(parent, id, title) {}\n  virtual ~MyDialog() {}\n};\n```", "```cpp\nIMPLEMENT_APP(MyApp)\n```", "```cpp\nOBJ=main.o\n\nCXXFLAGS+='wx-config --cxxflags --wxcfg=gcc_dll/mswu'\nLIBS+='wx-config --libs --wxcfg=gcc_dll/mswu'\n\nwxwidgets.exe: $(OBJ)\n  $(CXX) -o $@ $^ $(LIBS)\n\nclean:\n  rm -f *.o *.exe\n```"]