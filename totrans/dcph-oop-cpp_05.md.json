["```cpp\n#include <iostream>\nusing std::cout;    // preferred to: using namespace std;\nusing std::endl;\nusing std::string;\nstruct student\n{ \n    string name;\n    float gpa;\n    void Initialize(string, float);  // fn. prototype\n    void Print();\n};\nclass University\n{\npublic:\n    string name;\n    int numStudents;\n    void Initialize(string, int);   // fn. prototype\n    void Print();\n};\n```", "```cpp\nvoid student::Initialize(string n, float avg)\n{ \n    name = n;    // simple assignment\n    gpa = avg;   // we'll see preferred init. shortly\n}\nvoid student::Print()\n{ \n    cout << name << \" GPA: \" << gpa << endl;\n}\nvoid University::Initialize(string n, int num)\n{ \n    name = n;           // simple assignment; we will see\n    numStudents = num;  // preferred initialization shortly\n} \nvoid University::Print()\n{ \n    cout << name << \" Enrollment: \" << numStudents << endl;\n}\n```", "```cpp\nint main()\n{ \n    student s1;  // instantiate a student (struct instance)\n    s1.Initialize(\"Gabby Doone\", 4.0);\n    s1.Print();\n    University u1;  // instantiate a University (class)\n    u1.Initialize(\"GWU\", 25600);\n    u1.Print();\n    University *u2;         // pointer declaration\n    u2 = new University();  // instantiation with new()\n    u2->Initialize(\"UMD\", 40500);  \n    u2->Print();  // or alternatively: (*u2).Print();\n    delete u2;  \n    return 0;\n}\n```", "```cpp\nGabby Doone GPA: 4.4\nGWU Enrollment: 25600\nUMD Enrollment: 40500\n```", "```cpp\n#include <iostream>\n#include <cstring> // though we'll prefer std::string, one\n                   // pointer data member will illustrate \n                   // important concepts\nusing std::cout;   // preferred to: using namespace std;\nusing std::endl;\nusing std::string;\nclass Student\n{\n// for now, let's put everything public access region\npublic:  \n    string firstName;  // data members\n    string lastName;\n    char middleInitial;\n    float gpa;\n    char *currentCourse;  // ptr to illustrate key concepts \n    // member function prototypes\n    void Initialize(string, string, char, float,\n                    const char *);\n    void Print();\n};\n```", "```cpp\n// Member function definition\nvoid Student::Initialize(string fn, string ln, char mi,\n                         float gpa, const char *course)\n{\n    firstName = fn;\n    lastName = ln;  \n    this->middleInitial = mi;  // optional use of 'this'\n    this->gpa = gpa;  // required, explicit use of 'this'\n    // remember to allocate memory for ptr data members\n    currentCourse = new char [strlen(course) + 1];\n    strcpy(currentCourse, course);\n}\n// It is as if Student::Initialize() is written as:\n// void Student_Initialize_str_str_char_float_constchar*\n//     (Student *const this, string fn, string ln,\n//      char mi, float avg, const char *course) \n// {\n//    this->firstName = fn;\n//    this->lastName = ln;\n//    this->middleInitial = mi;\n//    this->gpa = avg;\n//    this->currentCourse = new char [strlen(course) + 1];\n//    strcpy(this->currentCourse, course);\n// }\n// Member function definition\nvoid Student::Print()\n{\n   cout << firstName << \" \";\n   cout << middleInitial << \". \";\n   cout << lastName << \" has a gpa of: \";\n   cout << gpa << \" and is enrolled in: \";\n   cout << currentCourse << endl;\n}\n// It is as if Student::Print() is written as:\n// void Student_Print(Student *const this)\n// {\n//    cout << this->firstName << \" \";\n//    cout << this->middleInitial << \". \";\n//    cout << this->lastName << \" has a gpa of: \";\n//    cout << this->gpa << \" and is enrolled in: \";\n//    cout << this->currentCourse << endl;\n// }\n```", "```cpp\nint main()\n{\n    Student s1;   // instance\n    Student *s2 = new Student; // ptr to an instance\n    s1.Initialize(\"Mary\", \"Jacobs\", 'I', 3.9, \"C++\");\n    s2->Initialize(\"Sam\", \"Nelson\", 'B', 3.2, \"C++\");\n    s1.Print();\n    s2->Print(); // or use (*s2).Print();\n    delete [] s1.currentCourse;     // delete dynamically \n    delete [] s2->currentCourse; // allocated data members\n    delete s2;    // delete dynamically allocated instance\n    return 0;\n}\n```", "```cpp\nMary I. Jacobs has a gpa of: 3.9 and is enrolled in: C++\nSam B. Nelson has a gpa of: 3.2 and is enrolled in: C++\n```", "```cpp\n#include <iostream>\n#include <cstring>    // though we'll prefer std::string, \n// one ptr data member will illustrate important concepts\nusing std::cout;      // preferred to: using namespace std;\nusing std::endl;\nusing std::string;\nclass Student\n{\n// private members are accessible only within the scope of\n// the class (that is, within member functions or friends) \nprivate: \n    string firstName;     // data members\n    string lastName;\n    char middleInitial;\n    float gpa;\n    char *currentCourse;  // ptr to illustrate key concepts\npublic:   // public members are accessible from any scope\n    // member function prototypes\n    void Initialize();  \n    void Initialize(string, string, char, float,  \n                    const char *);\n    void CleanUp();\n    void Print();\n};\n```", "```cpp\nvoid Student::Initialize()\n{   // even though string data members are initialized with\n    // empty strings, we are showing how to clear these \n    // strings, should Initialize() be called more than 1x\n    firstName.clear();   \n    lastName.clear(); \n    middleInitial = '\\0';      // null character\n    gpa = 0.0;\n    currentCourse = nullptr; \n}\n// Overloaded member function definition\nvoid Student::Initialize(string fn, string ln, char mi,\n                         float avg, const char *course) \n{\n    firstName = fn;\n    lastName = ln;\n    middleInitial = mi; \n    gpa = avg;   \n    // dynamically allocate memory for pointer data member\n    currentCourse = new char [strlen(course) + 1];\n    strcpy(currentCourse, course);\n}\n// Member function definition\nvoid Student::CleanUp()\n{   // deallocate previously allocated memory\n    delete [] currentCourse;  \n}                          \n// Member function definition\nvoid Student::Print()\n{\n    cout << firstName << \" \" << middleInitial << \". \";\n    cout << lastName << \" has gpa: \" << gpa;\n    cout << \" and enrolled in: \" << currentCourse << endl;\n}\n```", "```cpp\nint main()\n{\n    Student s1;\n    // Initialize() is public; accessible from any scope\n    s1.Initialize(\"Ming\", \"Li\", 'I', 3.9, \"C++\", \"178GW\"); \n    s1.Print(); // public Print() accessible from main() \n    // Error! private firstName is not accessible in main()\n    // cout << s1.firstName << endl;  \n    // CleanUp() is public, accessible from any scope\n    s1.CleanUp(); \n    return 0;\n}\n```", "```cpp\nMing I. Li has gpa: 3.9 and enrolled in: C++\n```", "```cpp\n#include <iostream>\nusing std::cout;   // preferred to: using namespace std;\nusing std::endl;\nusing std::string;\nclass University\n{\nprivate:\n    string name;\n    int numStudents;\npublic: \n    // constructor prototypes\n    University(); // default constructor\n    University(const string &, int);\n    void Print();\n    void CleanUp();\n};\nUniversity::University()\n{   // Because a string is a class type, all strings are \n    // constructed with an empty value by default. \n    // For that reason, we do not need to explicitly \n    // initialize strings if an empty string is desired. \n    // We'll see a preferred manner of initialization \n    // for all data members shortly in this chapter.    \n    // Hence, name is constructed by default (empty string)\n    numStudents = 0;\n}\nUniversity::University(const string &n, int num)\n{   // any pointer data members should be allocated here\n    name = n; // assignment between strings is deep assign.\n    numStudents = num;\n}\nvoid University::Print()\n{\n    cout << \"University: \" << name;\n    cout << \" Enrollment: \" << numStudents << endl;\n}\nvoid University::CleanUp()\n{   // deallocate any previously allocated memory\n}\nint main()\n{\n    University u1; // Implicit call to default constructor\n    // alternate constructor instantiation and invocation\n    University u2(\"University of Delaware\", 23800);\n    University u3{\"Temple University\", 20500}; // note {}  \n    u1.Print();\n    u2.Print();\n    u3.Print();\n    u1.CleanUp();\n    u2.CleanUp();\n    u3.CleanUp();\n    return 0;\n}\n```", "```cpp\nUniversity: Enrollment: 0\nUniversity: University of Delaware Enrollment: 23800\nUniversity: Temple Enrollment: 20000\n```", "```cpp\nclass University\n{\nprivate:\n    string name {\"None\"}; // in-class initializer to be\n    int numStudents {0};  // used when values not set in\n                          // constructor\n    // Above line same as: int numStudents = 0;\npublic:                   \n    University(); // default constructor\n    // assume remainder of class def is as previously shown\n};\nUniversity::University()\n{   // Because there are no initializations (or\n    // assignments) of data members name, numStudents \n    // in this constructor, the in-class initializer\n    // values will persist.\n    // This constructor, with its signature, is still \n    // required for the instantiation below, in main()\n}\n// assume remaining member functions exist here\nint main()\n{\n    University u1;  // in-class initializers are used\n}\n```", "```cpp\nclass University\n{\nprivate:\n    string name {\"None\"}; // in-class init. to be used when\n    int numStudents {0};  // values not set in constructor\npublic: \n    // request the default constructor be linked in     \n    University() = default; \n    University(const string &, int);\n    void Print();\n    void CleanUp();\n};\n```", "```cpp\n    // disallow copying during construction\n    Student(const Student &) = delete;   // prototype\n```", "```cpp\n#include <iostream>  \n#include <cstring>    // though we'll prefer std::string, \n// one ptr data member will illustrate important concepts\nusing std::cout;      // preferred to: using namespace std;\nusing std::endl;\nusing std::string;\nclass Student\n{\nprivate: \n    // data members\n    string firstName;\n    string lastName;\n    char middleInitial;\n    float gpa;\n    char *currentCourse;  // ptr to illustrate key concepts\npublic:\n    // member function prototypes\n    Student();  // default constructor\n    Student(const string &, const string &, char, float, \n            const char *); \n    Student(const Student &);  // copy constructor proto.\n    void CleanUp();\n    void Print();\n    void SetFirstName(const string &);\n};\n```", "```cpp\n// default constructor\nStudent::Student()\n{\n    // Because firstName and lastName are member objects of\n    // type string, they are default constructed and hence\n    // 'empty' by default. They HAVE been initialized.\n    middleInitial = '\\0';   // with a relevant value\n    gpa = 0.0;\n    currentCourse = 0;\n}\n// Alternate constructor member function definition\nStudent::Student(const string &fn, const string &ln, \n                 char mi, float avg, const char *course)\n{\n    firstName = fn;  // not to worry, assignment for string\n    lastName = ln;   // is a deep copy into destination str\n    middleInitial = mi;\n    gpa = avg;\n    // dynamically allocate memory for pointer data member\n    currentCourse = new char [strlen(course) + 1];\n    strcpy(currentCourse, course);\n}\n// Copy constructor definition – implement a deep copy\nStudent::Student(const Student &s)\n{   // assignment between strings will do a deep 'copy'\n    firstName = s.firstName;\n    lastName = s.lastName;\n    middleInitial = s.middleInitial;\n    gpa = s.gpa;\n    // for ptr data members, ensure a deep copy \n    // allocate memory for destination\n    currentCourse = new char [strlen(s.currentCourse) + 1];\n    // then copy contents from source to destination\n    strcpy(currentCourse, s.currentCourse); \n}\n// Member function definition\nvoid Student::CleanUp()\n{   // deallocate any previously allocated memory\n    delete [] currentCourse;   \n}\n\n// Member function definitions\nvoid Student::Print()\n{\n    cout << firstName << \" \" << middleInitial << \". \";\n    cout << lastName << \" has a gpa of: \" << gpa;\n    cout << \" and is enrolled in: \" << currentCourse;\n    cout << endl;\n}\nvoid Student::SetFirstName(const string &fn)\n{\n    firstName = fn;\n}\n```", "```cpp\nint main()\n{ \n    // instantiate two Students\n    Student s1(\"Zachary\", \"Moon\", 'R', 3.7, \"C++\");\n    Student s2(\"Gabrielle\", \"Doone\", 'A', 3.7, \"C++\");\n    // These inits implicitly invoke copy constructor\n    Student s3(s1);  \n    Student s4 = s2;\n    s3.SetFirstName(\"Zack\");// alter each object slightly\n    s4.SetFirstName(\"Gabby\"); \n    // This sequence does not invoke copy constructor \n    // This is instead an assignment.\n    // Student s5(\"Giselle\", \"LeBrun\", 'A', 3.1, \"C++);\n    // Student s6;\n    // s6 = s5;   // this is assignment, not initialization\n    s1.Print();   // print each instance\n    s3.Print();\n    s2.Print();\n    s4.Print();\n    s1.CleanUp(); // Since some data members are pointers,\n    s2.CleanUp(); // let's call a function to delete() them\n    s3.CleanUp();\n    s4.CleanUp();\n    return 0;\n}\n```", "```cpp\nZachary R. Moon has a gpa of: 3.7 and is enrolled in: C++\nZack R. Moon has a gpa of: 3.7 and is enrolled in: C++\nGabrielle A. Doone has a gpa of: 3.7 and is enrolled in: C++\nGabby A. Doone has a gpa of: 3.7 and is enrolled in: C++\n```", "```cpp\n#include <iostream>   \n#include <cstring>   // though we'll prefer std::string, \n// one ptr data member will illustrate important concepts\nusing std::cout;     // preferred to: using namespace std;\nusing std::endl;\nusing std::string;\nclass Student;      // forward declaration of Student class\nclass Employee\n{\nprivate:\n    string firstName;\n    string lastName;\n    float salary;\npublic:\n    Employee();\n    Employee(const string &, const string &, float);\n    Employee(Student &);  // conversion constructor\n    void Print();\n};\nclass Student\n{\nprivate: // data members\n    string firstName;\n    string lastName;\n    char middleInitial;\n    float gpa;\n    char *currentCourse;  // ptr to illustrate key concepts\npublic:               \n    // constructor prototypes\n    Student();  // default constructor\n    Student(const string &, const string &, char, float, \n            const char *);\n    Student(const Student &);  // copy constructor\n    void Print();\n    void CleanUp();\n    float GetGpa(); // access function for private data mbr\n    const string &GetFirstName();\n    const string &GetLastName();\n};\n```", "```cpp\nEmployee::Employee()  // default constructor\n{\n    // Remember, firstName, lastName are member objects of\n    // type string; they are default constructed and hence\n    // 'empty' by default. They HAVE been initialized.\n    salary = 0.0;\n}\n// alternate constructor\nEmployee::Employee(const string &fn, const string &ln, \n                   float money)\n{\n    firstName = fn;\n    lastName = ln;\n    salary = money;\n}\n// conversion constructor param. is a Student not Employee\n// Eventually, we can properly const qualify parameter, but\n// we'll need to learn about const member functions first…\nEmployee::Employee(Student &s)\n{\n    firstName = s.GetFirstName();\n    lastName = s.GetLastName();\n    if (s.GetGpa() >= 4.0)\n        salary = 75000;\n    else if (s.GetGpa() >= 3.0)\n        salary = 60000;\n    else\n        salary = 50000; \n}\nvoid Employee::Print()\n{\n    cout << firstName << \" \" << lastName << \" \" << salary;\n    cout << endl;\n}\n// Definitions for Student's default, alternate, copy\n// constructors, Print()and CleanUp() have been omitted \n// for space, but are same as the prior Student example.\nfloat Student::GetGpa()\n{\n    return gpa;\n}\nconst string &Student::GetFirstName()\n{\n    return firstName;\n}\nconst string &Student::GetLastName()\n{\n    return lastName;\n}\n```", "```cpp\nint main()\n{\n    Student s1(\"Giselle\", \"LeBrun\", 'A', 3.5, \"C++\");\n    Employee e1(s1);  // conversion constructor\n    e1.Print();\n    s1.CleanUp();  // CleanUp() will delete() s1's \n    return 0;      // dynamically allocated data members\n}\n```", "```cpp\nGiselle LeBrun 60000\n```", "```cpp\n#include <iostream>  \n#include <cstring>    // though we'll prefer std::string, \n// one ptr data member will illustrate important concepts\nusing std::cout;      // preferred to: using namespace std;\nusing std::endl;\nusing std::string;\nclass University\n{\nprivate:\n    char *name;   // ptr data member shows destructor \n                  // purpose\n    int numStudents;\npublic: \n    // constructor prototypes\n    University(); // default constructor\n    University(const char *, int); // alternate constructor\n    University(const University &);  // copy constructor\n    ~University();  // destructor prototype\n    void Print();\n};\n```", "```cpp\nUniversity::University()  // default constructor\n{\n    name = nullptr;\n    numStudents = 0;\n}\nUniversity::University(const char *n, int num) \n{   // allocate memory for pointer data member\n    name = new char [strlen(n) + 1];\n    strcpy(name, n);\n    numStudents = num;\n}\nUniversity::University(const University &u) // copy const\n{\n    name = new char [strlen(u.name) + 1];  // deep copy\n    strcpy(name, u.name);\n    numStudents = u.numStudents;\n}\nUniversity::~University()  // destructor definition\n{  \n    delete [] name;  // deallocate previously allocated mem\n    cout << \"Destructor called \" << this << endl;\n}\nvoid University::Print()\n{\n    cout << \"University: \" << name;\n    cout << \" Enrollment: \" << numStudents << endl;\n}\n```", "```cpp\nint main()\n{\n    University u1(\"Temple University\", 39500);\n    University *u2 = new University(\"Boston U\", 32500);\n    u1.Print();\n    u2->Print();\n    delete u2; // destructor will be called before delete()\n               // and destructor for u1 will be called \n    return 0;  // before program completes \n}\n```", "```cpp\nUniversity: Temple University Enrollment: 39500\nUniversity: Boston U Enrollment: 32500\nDestructor called 0x10d1958\nDestructor called 0x60fe74\n```", "```cpp\n#include <iostream>  \n#include <cstring>   // though we'll prefer std::string, \n                     // one ptr data member will illustrate\n                     // important concepts\nusing std::cout;     // preferred to: using namespace std;\nusing std::endl;\nusing std::string;\nclass Student\n{\nprivate: \n    // data members\n    string firstName;\n    string lastName;\n    char middleInitial;\n    float gpa;\n    char *currentCourse;  // ptr to illustrate key concepts\npublic:\n    // member function prototypes\n    Student();  // default constructor\n    Student(const student &, const student &, char, float, \n            const char *); \n    Student(const Student &);  // copy constructor\n    ~Student();  // destructor\n    void Print();\n    // inline function definitions\n    const string &GetFirstName() { return firstName; }  \n    const string &GetLastName() { return lastName; }    \n    char GetMiddleInitial() { return middleInitial; }\n    float GetGpa() { return gpa; }\n    const char *GetCurrentCourse() \n        { return currentCourse; }\n    // prototype only, see inline function definition below\n    void SetCurrentCourse(const char *);\n};\ninline void Student::SetCurrentCourse(const char *c)\n{   // notice the detailed work to reset ptr data member;\n    // it's more involved than if currentCourse was a str\n    delete [] currentCourse;  \n    currentCourse = new char [strlen(c) + 1];\n    strcpy(currentCourse, c); \n}\n```", "```cpp\n// Definitions for default, alternate, copy constructor,\n// and Print() have been omitted for space,\n// but are same as last example for class Student\n// the destructor is shown because we have not yet seen\n// an example destructor for the Student class\nStudent::~Student()\n{   // deallocate previously allocated memory\n    delete [] currentCourse;\n}\nint main()\n{\n    Student s1(\"Jo\", \"Muritz\", 'Z', 4.0, \"C++\"); \n    cout << s1.GetFirstName() << \" \" << s1.GetLastName();\n    cout << \" Enrolled in: \" << s1.GetCurrentCourse();\n    cout << endl;\n    s1.SetCurrentCourse(\"Advanced C++ Programming\"); \n    cout << s1.GetFirstName() << \" \" << s1.GetLastName();\n    cout << \" New course: \" << s1.GetCurrentCourse(); \n    cout << endl;\n    return 0;\n}\n```", "```cpp\nJo Muritz Enrolled in: C++\nJo Muritz New course: Advanced C++ Programming\n```", "```cpp\nStudent::Student(): gpa(0.0), middleInitial('\\0')\n{   \n    // Remember, firstName, lastName are member objects of\n    // type string; they are default constructed and hence\n    // 'empty' by default. They HAVE been initialized. \n    currentCourse = nullptr; // don't worry – we'll change\n}                        // currentCourse to a string next!\n```", "```cpp\n#include <iostream>  \nusing std::cout;    // preferred to: using namespace std;\nusing std::endl;\nusing std::string;\nclass Student\n{\nprivate: \n    // data members\n    string firstName;\n    string lastName;\n    char middleInitial;\n    float gpa;\n    string currentCourse; // let's finally change to string\n    const int studentId;  // added, constant data member\npublic:\n    // member function prototypes\n    Student();  // default constructor\n    Student(const string &, const string &, char, float, \n            const string &, int); \n    Student(const Student &);  // copy constructor\n    ~Student();  // destructor\n    void Print();\n    const string &GetFirstName() { return firstName; }  \n    const string &GetLastName() { return lastName; }    \n    char GetMiddleInitial() { return middleInitial; }\n    float GetGpa() { return gpa; }\n    const string &GetCurrentCourse() \n        { return currentCourse; }\n    void SetCurrentCourse(const string &);  // proto. only\n}; \n```", "```cpp\n// Definitions for the destructor, Print(), and \n// SetCurrentCourse() have been omitted to save space.\n// They are similar to what we have seen previously.\n// Constructor w/ member init. list to set data mbrs\nStudent::Student(): firstName(), lastName(),\nmiddleInitial('\\0'), gpa(0.0), \n                    currentCourse(), studentId(0) \n{\n    // You may still set data members here, but using above\n    // initialization is more efficient than assignment\n    // Note: firstName, lastName are shown in member init.\n    // list selecting default constructor for init.\n    // However, as this is the default action for member \n    // objects (string), we don't need to explicitly incl.\n    // these members in the member initialization list\n    // (nor will we include them in future examples).\n}\nStudent::Student(const string &fn, const string &ln, \n         char mi, float avg, const string &course, int id): \n         firstName(fn), lastName(ln), middleInitial(mi),\n         gpa(avg), currentCourse(course), studentId (id) \n{\n   // For string data members, the above init. calls    \n   // the string constructor that matches the arg in ().\n   // This is preferred to default constructing a string\n   // and then resetting it via assignment in the\n   // constructor body.\n}\nStudent::Student(const Student &s): firstName(s.firstName),\n      lastName(s.lastName), middleInitial(s.middleInitial),\ngpa(s.gpa), currentCourse(s.currentCourse), \n      studentId(s.studentId)\n{\n   // remember to do a deep copy for any ptr data members\n}\nint main()\n{ \n    Student s1(\"Renee\", \"Alexander\", 'Z', 3.7, \n               \"C++\", 1290);\n    cout << s1.GetFirstName() << \" \" << s1.GetLastName();\n    cout << \" has gpa of: \" << s1.GetGpa() << endl;\n    return 0;\n}\n```", "```cpp\nRenee Alexander has gpa of: 3.7\n```", "```cpp\nStudent::Student(const string &fn, const string &ln, \n         char mi, float avg, const string &course, int id): \n         firstName{fn}, lastName{ln}, middleInitial{mi},\n         gpa{avg}, currentCourse{course}, studentId{id} \n{\n}\n```", "```cpp\n#include <iostream>  \nusing std::cout;   // preferred to: using namespace std;\nusing std::endl;\nusing std::string;\nclass Student\n{\nprivate: \n    // data members\n    string firstName;\n    string lastName;\n    char middleInitial;\n    float gpa;\n    string currentCourse;\n    const int studentId;   // constant data member\npublic:\n    // member function prototypes\n    Student();  // default constructor\n    Student(const string &, const string &, char, float, \n            const string &, int); \n    Student(const Student &);  // copy constructor\n    ~Student();  // destructor\n    void Print() const;\n    const string &GetFirstName() const \n        { return firstName; }  \n    const string &GetLastName() const \n        { return lastName; }    \n    char GetMiddleInitial() const { return middleInitial; }\n    float GetGpa() const { return gpa; }\n    const string &GetCurrentCourse() const\n        { return currentCourse; }\n    int GetStudentId() const { return studentId; }\n    void SetCurrentCourse(const string &);  // proto. only\n};\n```", "```cpp\n// Definitions for the constructors, destructor, and \n// SetCurrentCourse() have been omitted to save space.\n// Student::Print() has been revised, so it is shown below:\nvoid Student::Print() const\n{\n    cout << firstName << \" \" << middleInitial << \". \";\n    cout << lastName << \" with id: \" << studentId;\n    cout << \" and gpa: \" << gpa << \" is enrolled in: \";\n    cout << currentCourse << endl;\n}\nint main()\n{\n    Student s1(\"Zack\", \"Moon\", 'R', 3.75, \"C++\", 1378); \n    cout << s1.GetFirstName() << \" \" << s1.GetLastName();\n    cout << \" Enrolled in \" << s1.GetCurrentCourse();\n    cout << endl;\n    s1.SetCurrentCourse(\"Advanced C++ Programming\");  \n    cout << s1.GetFirstName() << \" \" << s1.GetLastName();\n    cout << \" New course: \" << s1.GetCurrentCourse();\n    cout << endl;\n    const Student s2(\"Gabby\", \"Doone\", 'A', 4.0, \n                     \"C++\", 2239);\n    s2.Print();\n    // Not allowed, s2 is const\n    // s2.SetCurrentCourse(\"Advanced C++ Programming\");  \n    return 0;\n}\n```", "```cpp\nZack Moon Enrolled in C++\nZack Moon New course: Advanced C++ Programming\nGabby A. Doone with id: 2239 and gpa: 3.9 is enrolled in: C++\n```", "```cpp\n#include <iostream>  \n#include <cstring>   // though we'll prefer std::string, \n// one pointer data member will illustrate one last concept\nusing std::cout;     // preferred to: using namespace std;\nusing std::endl;\nusing std::string;\nclass Student\n{\nprivate: \n    // data members\n    string firstName;\n    string lastName;\n    char middleInitial;\n    float gpa;\n    string currentCourse;\n    const char *studentId;  // pointer to constant string\n    static int numStudents; // static data member\npublic:\n    // member function prototypes\n    Student();  // default constructor\n    Student(const string &, const string &, char, float, \n            const string &, const char *); \n    Student(const Student &);  // copy constructor\n    ~Student();  // destructor\n    void Print() const;\n    const string &GetFirstName() const \n        { return firstName; }  \n    const string &GetLastName() const { return lastName; } \n    char GetMiddleInitial() const { return middleInitial; }\n    float GetGpa() const { return gpa; }\n    const string &GetCurrentCourse() const \n        { return currentCourse; }\n    const char *GetStudentId() const { return studentId; }\n    void SetCurrentCourse(const string &);\n    static int GetNumberStudents(); // static mbr function \n};\n// definition for static data member \n// (which is implemented as an external variable)\nint Student::numStudents = 0;  // notice initial value of 0\n                    // which is default for integral values\n// Definition for static member function\ninline int Student::GetNumberStudents()\n{\n    return numStudents;\n}\ninline void Student::SetCurrentCourse(const char *c) \n{\n    // far easier implementation to reset using a string\n    currentCourse = c;\n}\n```", "```cpp\n// Default constructor (note member init. list usage)\n// Note: firstName, lastName, currentCourse as member \n// objects (type string), will be default constructed \n// to empty strings\nStudent::Student(): middleInitial('\\0'), gpa(0.0), \n                    studentId(nullptr)\n{\n    numStudents++;       // increment static counter\n}\n// Alternate constructor member function definition\nStudent::Student(const char *fn, const char *ln, char mi, \n          float avg, const char *course, const char *id): \n          firstName(fn), lastName(ln), middleInitial(mi),\n          gpa(avg), currentCourse(course)\n{   \n    // Because studentId is a const char *, we can't change\n    // value pointed to directly! We enlist temp for help.\n    char *temp = new char [strlen(id) + 1];\n    strcpy (temp, id);  // studentId can't be an l-value,  \n    studentId = temp;   // but temp can!\n    numStudents++;      // increment static counter\n}\n// copy constructor\nStudent::Student(const Student &s): firstName(s.firstName),\n       lastName(s.lastName),middleInitial(s.middleInitial),\n       gpa(s.gpa), currentCourse(s.currentCourse)\n{\n    delete studentId;  // release prev. allocated studentId\n    // Because studentId is a const char *, we can't change\n    // value pointed to directly! Temp helps w deep copy.\n    char *temp = new char [strlen(s.studentId) + 1];\n    strcpy (temp, s.studentId); // studentId can't be an \n    studentId = temp;           // l-value, but temp can!\n    numStudents++;    // increment static counter\n}\n\nStudent::~Student()    // destructor definition\n{   \n    delete [] studentId;\n    numStudents--;   // decrement static counter\n}\nvoid Student::Print() const\n{\n   cout << firstName << \" \" << middleInitial << \". \";\n   cout << lastName << \" with id: \" << studentId;\n   cout << \" and gpa: \" << gpa << \" and is enrolled in: \";\n   cout << currentCourse << endl;\n}\n```", "```cpp\nint main()\n{\n   Student s1(\"Nick\", \"Cole\", 'S', 3.65, \"C++\", \"112HAV\"); \n   Student s2(\"Alex\", \"Tost\", 'A', 3.78, \"C++\", \"674HOP\"); \n   cout << s1.GetFirstName() << \" \" << s1.GetLastName();\n   cout << \" Enrolled in \" << s1.GetCurrentCourse();\n   cout << endl;\n   cout << s2.GetFirstName() << \" \" << s2.GetLastName();\n   cout << \" Enrolled in \" << s2.GetCurrentCourse();\n   cout << endl;\n\n   // call a static member function in the preferred manner\n   cout << \"There are \" << Student::GetNumberStudents(); \n   cout << \" students\" << endl;\n   // Though not preferable, we could also use:\n   // cout << \"There are \" << s1.GetNumberStudents(); \n   // cout << \" students\" << endl;\n   return 0;\n}\n```", "```cpp\nNick Cole Enrolled in C++\nAlex Tost Enrolled in C++\nThere are 2 students\n```"]