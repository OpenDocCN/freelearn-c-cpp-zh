- en: '12'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Animation Blending and Montages
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you were able to bring the player character to life
    by implementing movement animations in a Blend Space and using that Blend Space
    in an Animation Blueprint to drive the animations based on the player’s speed.
    You were then able to implement functionality in C++ based on player input to
    allow the character to sprint. Lastly, you took advantage of the Animation State
    Machine built-in Animation Blueprints to drive the character’s movement state
    and jumping states to allow fluid transitions between walking and jumping.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: With the player character’s Animation Blueprint and State Machine working, it’s
    time to introduce Animation Montages and Anim Slots by implementing the character’s
    `Throw` animation. In this chapter, you will learn more about animation blending,
    see how Unreal Engine handles the blending of multiple animations by creating
    an Animation Montage, and work with a new Anim Slot for the player’s throwing
    animation. From there, you will use the Anim Slot in the player’s Animation Blueprint
    by implementing new functions such as `Save Cached Pose` and `Layered blend per
    bone` so that the player can correctly blend the movement animations you handled
    in the previous chapter with the new throwing animation you will implement in
    this chapter.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you’ll learn about the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: How to use Anim Slots to create layered animation blending for the player character
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an Animation Montage for the character’s `Throw` animation
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the `Layered blend per bone node` within the Animation Blueprint to blend
    together the upper body `Throw` animation and the lower body movement animations
    of the character
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will be able to use the `Animation Montage`
    tool to create a unique throwing animation using the `Throw` animation sequence
    you imported in [*Chapter 10*](B18531_10.xhtml#_idTextAnchor199), *Creating the
    SuperSideScroller Game*. With this montage, you will create and use Anim Slots
    that will allow you to blend animations in the Animation Blueprint for the player
    character. You will also get to know how to use blending nodes to effectively
    blend the movement and throwing animations of the character.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: After finalizing the player character animation, you will create the required
    class and assets for the enemy AI and learn more about Materials and Material
    Instances, which will give this enemy a unique visual color so that it can be
    differentiated in-game. Finally, the enemy will be ready for [*Chapter 13*](B18531_13.xhtml#_idTextAnchor268),
    *Creating and Adding the Enemy Artificial Intelligence*, where you will begin
    to create the AI behavior logic.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this chapter, you will need Unreal Engine 5 installed
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start by learning about what Animation Montages and Anim Slots are and
    how they can be used for character animation.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: 'The project for this chapter can be found in the Chapter12 folder of the code
    bundle for this book, which can be downloaded here: [https://github.com/PacktPublishing/Elevating-Game-Experiences-with-Unreal-Engine-5-Second-Edition](https://github.com/PacktPublishing/Elevating-Game-Experiences-with-Unreal-Engine-5-Second-Edition).'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Animation blending, Anim Slots, and Animation Montages
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Animation blending is the process of transitioning between multiple animations
    on a skeletal mesh as seamlessly as possible. You are already familiar with the
    techniques of animation blending because you created a `Blend` `Spaces` asset
    for the player character in [*Chapter 11*](B18531_11.xhtml#_idTextAnchor222),
    *Working with Blend Space 1D, Key Bindings, and State Machines*. In this Blend
    Space, the character smoothly blends between the `Idle`, `Walking`, and `Running`
    animations. You will now extend this knowledge by exploring and implementing new
    additive techniques to combine the movement animations of the character with a
    throwing animation. Through the use of an Anim Slot, you will send the throwing
    animation to a set of upper body bones, and its children’s bones, to allow movement
    and throwing animations to apply at the same time without negatively impacting
    the other. But first, let’s talk more about Animation Montages.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: Animation Montages are very powerful assets that allow you to combine multiple
    animations and split these combined animations into what are called **Sections**.
    Sections can then be played back individually, in a specific sequence, or even
    looped.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Animation Montages are also useful because you can control animations through
    montages from Blueprints or C++; this means you can call logic, update variables,
    replicate data, and so on, based on the animation section being played, or if
    any Notifies are called within the montage. In C++, there is the `UAnimInstance`
    object, which you can use to call functions such as `UAnimInstance::Montage_Play`,
    which allows you to access and play montages from C++.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: This method will be used in [*Chapter 14*](B18531_14.xhtml#_idTextAnchor298),
    *Spawning the Player Projectile*, when you will begin to add polish to the game.
    More information about how animations and Notifies are handled by Unreal Engine
    5 in C++ can be found at [https://docs.unrealengine.com/en-US/API/Runtime/Engine/Animation/AnimNotifies/UAnimNotifyState/index.xhtml](https://docs.unrealengine.com/en-US/API/Runtime/Engine/Animation/AnimNotifies/UAnimNotifyState/index.xhtml).
    You will learn more about Notifies in the first exercise of this chapter, and
    you will code your own notify state in [*Chapter 14*](B18531_14.xhtml#_idTextAnchor298),
    *Spawning the Player Projectile*.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: 'The following figure shows the Persona editor for Animation Montages. However,
    this will be broken down even further in *Exercise 12.01*, *Setting up the Animation
    Montage*:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.1 – The Persona editor, which opens when editing an Animation Montage
    ](img/Figure_12.01_B18531.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![图12.1 – 当编辑动画蒙太奇时打开的Persona编辑器](img/Figure_12.01_B18531.jpg)'
- en: Figure 12.1 – The Persona editor, which opens when editing an Animation Montage
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.1 – 当编辑动画蒙太奇时打开的Persona编辑器
- en: Just like in Animation Sequences, Animation Montages allow Notifies to be triggered
    along the timeline of a section of an animation, which can then trigger sounds,
    particle effects, and events. Event Notifies will allow us to call logic from
    Blueprint or C++. Epic Games provides an example in their documentation of a weapon
    reload Animation Montage that is split between animations for `reload start`,
    `reload loop`, and `reload complete`. By splitting these animations and applying
    Notifies for sounds and events, developers have complete control over how long
    the `reload loop` animation will play based on internal variables, and control
    over any additional sounds or effects to play during the course of the animation.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在动画序列中一样，动画蒙太奇允许在动画某个部分的时间线上触发通知，然后可以触发声音、粒子效果和事件。事件通知将允许我们从蓝图或C++中调用逻辑。Epic
    Games在其文档中提供了一个示例，即一个武器装填动画蒙太奇，它被分为`reload start`、`reload loop`和`reload complete`的动画。通过将这些动画拆分并应用声音和事件的通知，开发者可以完全控制`reload
    loop`动画的播放时长，基于内部变量，并控制动画过程中播放的任何附加声音或效果。
- en: Lastly, Animation Montages support **Anim Slots**. Anim Slots allow you to categorize
    an animation, or a set of animations, that can later be referenced in Animation
    Blueprints to allow unique blending behavior based on the slot. This means that
    you can define an Anim Slot that can later be used in Animation Blueprints to
    allow animations using this slot to blend on top of the base movement animations
    in any way you want; in our case, only affecting the upper body of the player
    character and not the lower body.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，动画蒙太奇支持**动画槽**。动画槽允许你分类一个动画或一组动画，以后可以在动画蓝图中引用，以允许基于槽的独特混合行为。这意味着你可以定义一个动画槽，以后可以在动画蓝图中使用，以允许使用此槽的动画以任何你想要的方式在基本移动动画之上混合；在我们的案例中，仅影响玩家角色的上半身，而不影响下半身。
- en: Let’s begin by creating the Animation Montage for the player character’s `Throw`
    animation in the first exercise.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建玩家角色在第一个练习中的`Throw`动画蒙太奇开始。
- en: Exercise 12.01 – Setting up the Animation Montage
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习12.01 – 设置动画蒙太奇
- en: One of the first things you need to do for the player character is to set up
    the Anim Slot that will separately categorize this animation as an upper-body
    animation. You will use this Anim Slot in conjunction with blending functions
    in the Animation Blueprint to allow the player character to throw a projectile,
    while still correctly animating the lower body while moving and jumping.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 对于玩家角色，你需要做的第一件事是为这个动画设置一个动画槽，以便将其单独分类为上半身动画。你将使用这个动画槽与动画蓝图中的混合函数一起使用，以便玩家角色在投掷投射物的同时，还能正确地动画化移动和跳跃时的下半身。
- en: By the end of this exercise, the player character will be able to play the `Throw`
    animation only with their upper body, while their lower body will still use the
    movement animation that you defined in the previous chapter.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习结束时，玩家角色将只能用上半身播放`Throw`动画，而下半身仍将使用你在上一章中定义的移动动画。
- en: 'Let’s begin by creating the Animation Montage for the character, throwing and
    setting up the Anim Slot there:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要为角色创建动画蒙太奇，将动画槽设置在那里：
- en: First, navigate to the `/MainCharacter/Animation` directory, which is where
    all of the animation assets are located.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，导航到`/MainCharacter/Animation`目录，这是所有动画资产所在的位置。
- en: Now, right-click in the content drawer and hover over the **Animation** option
    from the available drop-down menu.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在内容抽屉中右键单击，并将鼠标悬停在可用的下拉菜单中的**动画**选项上。
- en: Then, left-click to select the **Animation Montage** option from the additional
    drop-down menu that appears.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，左键单击以从出现的附加下拉菜单中选择**动画蒙太奇**选项。
- en: Just as with creating other animation-based assets, such as `Blend Spaces` or
    `Animation Blueprints`, Unreal Engine will ask you to assign a `Skeleton` object
    for this Animation Montage. In this case, select `MainCharacter_Skeleton`.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就像创建其他基于动画的资产一样，例如`Blend Spaces`或`Animation Blueprints`，Unreal Engine将要求你为这个动画蒙太奇分配一个`Skeleton`对象。在这种情况下，选择`MainCharacter_Skeleton`。
- en: Name the new Animation Montage `AM_Throw`. Now, double-left-click to open the
    montage.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新的动画蒙太奇命名为`AM_Throw`。现在，双击左键打开蒙太奇。
- en: When you open the `Animation Montage` asset, you are presented with a similar
    editor layout as you would when opening an Animation Sequence. There is a **Preview**
    window that shows the main character skeleton in the default T pose, but once
    you add animations to this montage, the skeleton will update to reflect those
    changes.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: With this exercise complete, you have successfully created an `Throw` animation
    and Anim Slot you need in order to blend the `Throw` animation with the existing
    character movement animations.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: Animation Montages
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Have a look at the following figure:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.2 – The Preview window alongside the Montage and Sections areas
    ](img/Figure_12.02_B18531.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
- en: Figure 12.2 – The Preview window alongside the Montage and Sections areas
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: 'Underneath the **Preview** window, you have the main montage timeline, in addition
    to other sections. Let’s evaluate these sections from top to bottom:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '**Montage**: The **Montage** section is a collection of animations that can
    have one or more animations. You can also right-click on any point in the timeline
    to create a section.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Montage Sections**: Sections allow you to compartmentalize the different
    parts of the montage into their own self-contained section, which allows you to
    set the order of how the individual animation sequences are played and whether
    a section should loop.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For the purposes of the `Throw` montage, you do not need to use this feature
    since you will only be using one animation in this montage:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '**Timing**: The **Timing** section gives you a preview of the montage and the
    sequential order of the varied aspects of the montage. The playback order of **Notifies**,
    the **Montage** section, and other elements will be visually displayed here to
    give you a quick preview of how the montage will work.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Play Sound` or `Play Particle Effect`, allow you to play a sound or particle
    at a specific time in the animation. You will use these Notifies later on in this
    project when you implement the throwing projectile:'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 12.3 – The Timing and Notifies areas ](img/Figure_12.03_B18531.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
- en: Figure 12.3 – The Timing and Notifies areas
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: Now that you are familiar with the interface for Animation Montages, you can
    add the `Throw` animation to the montage by following the next exercise.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 12.02 – Adding the Throw animation to the montage
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that you have a better understanding of what Animation Montages are and
    how these assets work, it is time to add the `Throw` animation to the montage
    you created in *Exercise 12.01*, *Setting up the Animation Montage*. Although
    you will only be adding one animation to this montage, it is important to emphasize
    that you can add multiple unique animations to a montage that you can then play
    back. Now, let’s start by adding the `Throw` animation you imported into the project
    in [*Chapter 10*](B18531_10.xhtml#_idTextAnchor199), *Creating the SuperSideScroller
    Game*:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: 'In `Throw` animation asset. Then, left-click and drag it onto the timeline
    in the **Montage** section:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.4 – The Asset Browser window with animation-based assets ](img/Figure_12.04_B18531.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
- en: Figure 12.4 – The Asset Browser window with animation-based assets
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: 'Once an animation is added to the Animation Montage, the character skeleton
    in the **Preview** window will update to reflect this change and begin playing
    the animation:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.5 – The player character begins to animate ](img/Figure_12.05_B18531.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
- en: Figure 12.5 – The player character begins to animate
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: Now that the `Throw` animation has been added to the Animation Montage, you
    can move on to create the Anim Slot.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: The **Anim Slot Manager** tab should be docked next to the **Asset Browser**
    tab on the right-hand side. If you don’t see the **Anim Slot Manager** tab, you
    can access it by navigating to the **Window** tab in the toolbar at the top of
    the **Animation Montage** editor window. There, left-click to select the option
    for **Anim Slot Manager**, and the window will appear.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: By completing this exercise, you have added the `Throw` animation to your new
    Animation Montage and you were able to play back the animation to preview how
    it looks in the editor through **Persona**.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: Now, you can move on to learn more about Anim Slots and Anim Slot Manager before
    adding your own unique Anim Slot to use for animation blending later in this chapter.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: Anim Slot Manager
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Face` to articulate to others that the slots within this group affect the
    face of the character. By default, Unreal Engine provides you with a group called
    `DefaultGroup` and an Anim Slot called `DefaultSlot`, which is in that group.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: In the following exercise, we will create a new Anim Slot specifically for the
    upper body of the player character.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 12.03 – Adding a new Anim Slot
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that you have a better understanding of Anim Slots and `Upper Body`. Once
    you have this new slot created, it can then be used and referenced in your Animation
    Blueprint to handle animation blending, which you will do in a later exercise.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s create the Anim Slot by doing the following:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: In **Anim Slot Manager**, left-click on the **Add Slot** option.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When adding a new slot, Unreal will ask you to give this Anim Slot a name. Name
    this slot `Upper Body`. Anim Slot naming is important, much like naming any other
    assets and parameters, as you will be referencing this slot in the Animation Blueprint
    later.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the Anim Slot created, you can now update the slot used for the Throw montage.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `DefaultGroup.DefaultSlot`. Left-click, and from the drop-down menu,
    select `DefaultGroup.Upper Body`:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.6 – The new Anim Slot will appear in the drop-down list ](img/Figure_12.06_B18531.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
- en: Figure 12.6 – The new Anim Slot will appear in the drop-down list
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: After changing the Anim Slot, you may notice that the player character stops
    animating and returns to the T pose. Don’t worry – if this happens, just close
    the Animation Montage and reopen it. Once reopened, the character will play the
    `Throw` animation again.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在更改动画槽后，你可能注意到玩家角色停止了动画并回到了T姿态。别担心——如果发生这种情况，只需关闭动画蒙太奇并重新打开它。一旦重新打开，角色将再次播放`投掷`动画。
- en: With your Anim Slot created and in place in the `Throw` montage, it is now time
    for you to update the Animation Blueprint so that the player character is aware
    of this slot and animates correctly based on it.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的动画槽在`投掷`蒙太奇中创建并放置好后，现在是你更新动画蓝图的时候了，以便玩家角色能够意识到这个槽并根据它正确地动画化。
- en: With this exercise complete, you have created your first Anim Slot using Anim
    Slot Manager, available in the Animation Montage. With this slot in place, it
    can now be used and referenced in the player character Animation Blueprint to
    handle the animation blending required to blend the `Throw` animation and the
    movement animations you implemented in the previous chapter. Before you do this,
    you need to learn more about the `Save Cached Pose` node in Animation Blueprints.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 通过完成这个练习，你已使用动画蒙太奇中的动画槽管理器创建了你的第一个动画槽。有了这个槽，现在它可以在玩家角色动画蓝图中使用和引用，以处理混合`投掷`动画和你在上一章中实现的移动动画所需的动画混合。在你这样做之前，你需要更多地了解动画蓝图中的`保存缓存姿态`节点。
- en: Save Cached Pose
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保存缓存姿态
- en: There are cases when working with complex animations and characters requires
    you to reference a pose that is outputted by a State Machine in more than one
    place. If you hadn’t noticed already, the output pose from your `Movement` State
    Machine cannot be connected to more than one other node. This is where the `Save
    Cached Pose` node comes in handy; it allows you to cache (or store) a pose that
    can then be referenced in multiple places at once. You will need to use this to
    set up the new Anim Slot for the upper body animation.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理复杂动画和角色时，有时需要你在多个地方引用由状态机输出的姿态。如果你还没有注意到，你的`移动`状态机的输出姿态不能连接到多个其他节点。这就是`保存缓存姿态`节点派上用场的地方；它允许你缓存（或存储）一个姿态，然后可以同时引用多个地方。你需要使用这个来设置新的上半身动画槽。
- en: In the next exercise, you will implement the `Save Cached Pose` node to cache
    the `Movement` State Machine.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个练习中，你将实现`保存缓存姿态`节点以缓存`移动`状态机。
- en: Exercise 12.04 – Save Cached Pose of the Movement State Machine
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习12.04 – 保存移动状态机的缓存姿态
- en: 'To effectively blend the `Throw` animation, which uses the `Upper Body` Anim
    Slot you created in the previous exercise with the movement animations already
    in place for the player character, you need to be able to reference the `Movement`
    State Machine in the Animation Blueprint. To do this, do the following to implement
    the `Save Cached Pose` node in the Animation Blueprint:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 为了有效地混合使用你之前练习中创建的`Upper Body`动画槽的`投掷`动画，你需要能够在动画蓝图中引用`移动`状态机。为此，你需要在动画蓝图中执行以下操作以实现`保存缓存姿态`节点：
- en: 'In the Anim Graph of `AnimBP_SuperSideScroller_MainCharacter`, right-click
    and search for `New Save Cached Pose`. Name this `Movement Cache`:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`AnimBP_SuperSideScroller_MainCharacter`的动画图中，右键单击并搜索`新建保存缓存姿态`。将此命名为`移动缓存`：
- en: '![Figure 12.7 – The pose will be evaluated once per frame and then cached ](img/Figure_12.07_B18531.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图12.7 – 每帧将评估一次姿态，然后进行缓存](img/Figure_12.07_B18531.jpg)'
- en: Figure 12.7 – The pose will be evaluated once per frame and then cached
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.7 – 每帧将评估一次姿态，然后进行缓存
- en: 'Now, instead of connecting your `Movement` state machine directly to the output
    pose, connect it to the cache node:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你不需要直接将`移动`状态机连接到输出姿态，而是将其连接到缓存节点：
- en: '![Figure 12.8 – The Movement State Machine is being cached ](img/Figure_12.08_B18531.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图12.8 – 移动状态机正在被缓存](img/Figure_12.08_B18531.jpg)'
- en: Figure 12.8 – The Movement State Machine is being cached
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.8 – 移动状态机正在被缓存
- en: With the `Movement` State Machine pose being cached, all you have to do now
    is reference it. This can be done by searching for the `Use Cached Pose` node.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当`移动`状态机的姿态被缓存后，你现在只需引用它。这可以通过搜索`使用缓存姿态`节点来完成。
- en: Note
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: All cached poses will show in the context-sensitive menu. Just make sure you
    select the cached pose with the name you gave it in *step 1*.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 所有缓存的姿态都会显示在上下文相关菜单中。只需确保你选择你根据*步骤1*给出的名称的缓存姿态。
- en: 'With the cached pose node available, connect it to `Output Pose` of the Anim
    Graph:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.9 – The cached pose is now feeding directly to Output Pose ](img/Figure_12.09_B18531.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
- en: Figure 12.9 – The cached pose is now feeding directly to Output Pose
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: 'You will notice now, after *step 4*, that the main character will animate correctly
    and move as you expect after the last chapter. This proves that the caching of
    the `Movement` State Machine is working. The following figure shows the player
    character back in his `Idle` animation in the **Preview** window of the Animation
    Blueprint:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.10 – The main character is animating as expected ](img/Figure_12.10_B18531.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
- en: Figure 12.10 – The main character is animating as expected
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you have the caching of the `Movement` State Machine working, you
    will use this cache to blend animations through the skeleton based on the Anim
    Slot you created:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: With this exercise complete, you now have the ability to reference the cached
    `Movement` State Machine pose anywhere you would like within the Animation Blueprint.
    With this accessibility in place, you can now use the cached pose to begin the
    blending between the cached movement pose and the `Upper Body` Anim Slot using
    a function called `Layered blend per bone`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: Layered blend per bone
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The node that you will use to blend animations here is called `Layered blend
    per bone`. This node masks out a set of bones on the character’s skeleton for
    an animation to ignore those bones.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: In the case of our player character and the `Throw` animation, you will mask
    out the lower body so that only the upper body animates. The goal is to be able
    to perform the `Throw` and movement animations at the same time and have these
    animations blend together; otherwise, when you perform the throw, the movement
    animations would completely break.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: In the following exercise, you will use `Layered blend per bone` to mask out
    the lower half of the player character so that the `Throw` animation only affects
    the upper body of the character.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 12.05 – Blending animation with the Upper Body Anim Slot
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Layered blend per bone` function allows us to blend the `Throw` animation
    with the movement animations you implemented in the previous chapter, and give
    you control over how much influence the `Throw` animation will have on the player
    character’s skeleton.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, you will use the `Layered blend per bone` function to completely
    mask out the lower body of the character when playing the `Throw` animation so
    that it does not influence the character movement animation of the lower body.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s begin by adding the `Layered blend per bone` node and discussing its
    input parameters and its settings:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the Animation Blueprint, right-click and search for `Layered blend per
    bone` in the `Layered blend per bone` node and its parameters:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The first parameter, `Base Pose`, is for the base pose of the character; in
    this case, the cached pose of the `Movement` State Machine will be the base pose.
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The second parameter is the `Blend Poses 0` node that you want to layer on top
    of `Base Pose`; keep in mind that selecting `Blend Poses` and `Blend Weights`
    parameters. For now, you will only be working with one `Blend Poses` node.
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The last parameter is `Blend Weights`, which is how much `Blend Poses` will
    affect `Base Pose` on a scale from `0.0` to `1.0` as an alpha:'
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 12.11 – The Layered blend per bone node ](img/Figure_12.11_B18531.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
- en: Figure 12.11 – The Layered blend per bone node
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: Before you connect anything to this node, you will need to add a layer to its
    properties.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: Left-click to select the node and navigate to `0`, of this setup. Left-click
    on **+** next to **Branch Filters** to create a new filter.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'There are again two parameters here, namely the following:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '`Bone Name`: The bone to specify where the blending will take place and determine
    the child hierarchy of bones masked out. In the case of the main character skeleton
    for this project, set `Bone Name` to `Spine`. *Figure 12.12* shows how the `Spine`
    bone and its children are unassociated with the lower body of the main character.
    This can be seen in the `Skeleton` asset, `MainCharacter_Skeleton`:'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 12.12 – The Spine bone and its children are associated with the upper
    body of the main character ](img/Figure_12.12_B18531.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
- en: Figure 12.12 – The Spine bone and its children are associated with the upper
    body of the main character
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '`Blend Depth`: The depth in which bones and their children will be affected
    by the animation. A value of `0` will not affect the rooted children of the selected
    bone.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Mesh Space Rotation Blend`: Determines whether or not to blend bone rotations
    in mesh space or local space. Mesh space rotation refers to the skeletal mesh’s
    bounding box as its base rotation, while local space rotation refers to the local
    rotation of the bone name in question. In this case, we want the rotation blend
    to occur in mesh space, so we will set this parameter to `true`.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Blending is propagated to all the children of a bone to stop blending on particular
    bones, add them to the array, and make their blend depth value `0`. The final
    result is as follows:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.13 – You can set up multiple layers with one blend node ](img/Figure_12.13_B18531.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
- en: Figure 12.13 – You can set up multiple layers with one blend node
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: 'With the settings in place on the `Layered blend per bone` node, you can connect
    the `Movement Cache` cached pose into the `Base Pose` node of the layered blend.
    Make sure you connect the output of the `Layered blend per bone` node to `Output
    Pose` of the Animation Blueprint:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.14 – Add the cached pose for the Movement State Machine to the
    Layered blend per bone node ](img/Figure_12.14_B18531.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
- en: Figure 12.14 – Add the cached pose for the Movement State Machine to the Layered
    blend per bone node
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: Now, it’s time to use the Anim Slot you created earlier to filter only the animations
    using this slot through the `Layered blend per bone` node.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: Right-click in the Anim Graph and search for `DefaultSlot`. Left-click to select
    the `Slot` node and navigate to `Slot Name` property. Left-click on this dropdown
    to find and select the `DefaultGroup.Upper Body` slot.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When changing the `Slot Name` property, the `Slot` node will update to represent
    this new name. The `Slot` node requires a source pose, which will again be a reference
    to the `Movement` State Machine. This means that you need to create another `Use
    Cached Pose` node for the `Movement Cache` pose.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: 'Connect the cached pose to the source of the `Slot` node:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.15 – Filtering the cached movement pose through the Anim Slot ](img/Figure_12.15_B18531.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
- en: Figure 12.15 – Filtering the cached movement pose through the Anim Slot
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: 'All that is left to do now is to connect the `Upper Body` slot node to the
    `Blend Poses 0` input. Then, connect the final pose of the `Layered blend per
    bone` to the result of the `Output Pose` Animation Blueprint:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.16 – The final setup of the main character’s Animation Blueprint
    ](img/Figure_12.16_B18531.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
- en: Figure 12.16 – The final setup of the main character’s Animation Blueprint
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: With the Anim Slot and the `Layered blend per bone` node in place within the
    main character’s Animation Blueprint, you are finally done with the animation
    side of the main character.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: With the Animation Blueprint updated, we can now move on to the next exercise,
    where we can finally preview the `Throw` animation in action.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 12.06 – Previewing the Throw animation
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the previous exercise, you did a lot of work to allow animation blending
    between the player character’s `Movement` animations and the `Throw` animation
    by using the `Save Cached Pose` and `Layered blend per bone` nodes. Perform the
    following steps to preview the `Throw` animation in-game and see the fruits of
    your labor:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the `/MainCharacter/Blueprints/` directory and open the character’s
    `BP_SuperSideScroller_MainCharacter` Blueprint.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you recall, in the last chapter, you created `Enhanced Input Action` for
    throwing with `IA_Throw` .
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside `Event Graph` of the character’s Blueprint, right-click and search for
    `EnhancedInputAction IA_Throw` in the **Context Sensitive** drop-down search.
    Select it with a left-click to create the event node in the graph.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With this event in place, you need a function that allows you to play an Animation
    Montage when the player uses the left mouse button to throw.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: Right-click in `Event Graph` and search for `Play Montage`. Make sure not to
    confuse this with a similar function, `Play Anim Montage`.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `Play Montage` function requires two important inputs:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: '`Montage to Play`'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`In Skeletal Mesh Component`'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s first handle the `Skeletal Mesh` component.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: 'The player character has a `Skeletal Mesh` component that can be found in the
    `Mesh`. Left-click and drag out a `Get` reference to this variable and connect
    it to the `In Skeletal Mesh Component` input of this function:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 玩家角色有一个 `Skeletal Mesh` 组件，可以在 `Mesh` 中找到。左键单击并拖动以创建对这个变量的 `Get` 引用，并将其连接到该函数的
    `In Skeletal Mesh Component` 输入：
- en: '![Figure 12.17 – The mesh of the player character connected to the In Skeletal
    Mesh Component input ](img/Figure_12.17_B18531.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.17 – 玩家角色网格连接到 In Skeletal Mesh Component 输入](img/Figure_12.17_B18531.jpg)'
- en: Figure 12.17 – The mesh of the player character connected to the In Skeletal
    Mesh Component input
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.17 – 玩家角色网格连接到 In Skeletal Mesh Component 输入
- en: 'The last thing to do now is to tell this function which montage to play. Luckily
    for you, there is only one montage that exists in this project: `AM_Throw`.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 现在最后要做的就是告诉这个函数要播放哪个蒙太奇。幸运的是，在这个项目中只有一个蒙太奇：`AM_Throw`。
- en: Left-click on the drop-down menu under the `Montage to Play` input and left-click
    to select `AM_Throw`.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Montage to Play` 输入下的下拉菜单中左键单击，然后左键单击以选择 `AM_Throw`。
- en: 'Finally, connect the `Triggered` execution output of the `EnhancedInputAction
    IA_Throw` event to the execution input pin of the `Play Montage` function:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将 `EnhancedInputAction IA_Throw` 事件的 `Triggered` 执行输出连接到 `Play Montage` 函数的执行输入引脚：
- en: '![Figure 12.18 – Now the AM_Throw montage plays when the ThrowProjectile input
    is pressed ](img/Figure_12.18_B18531.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.18 – 现在当按下 `ThrowProjectile` 输入时播放 AM_Throw 蒙太奇](img/Figure_12.18_B18531.jpg)'
- en: Figure 12.18 – Now the AM_Throw montage plays when the ThrowProjectile input
    is pressed
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.18 – 现在当按下 `ThrowProjectile` 输入时播放 AM_Throw 蒙太奇
- en: Now, when you click your left mouse button, the player character will play the
    throwing Animation Montage.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，当你点击左鼠标按钮时，玩家角色将播放投掷动画蒙太奇。
- en: 'Notice now how you can walk and run at the same time as throwing, and each
    animation blends together so as not to interfere with one another:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 注意现在你可以边走边跑同时投掷，每个动画都融合在一起，不会相互干扰：
- en: '![Figure 12.19 – The player character can now move and throw ](img/Figure_12.19_B18531.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.19 – 玩家角色现在可以移动并投掷](img/Figure_12.19_B18531.jpg)'
- en: Figure 12.19 – The player character can now move and throw
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.19 – 玩家角色现在可以移动并投掷
- en: Don’t worry about any bugs you might see when using the left mouse button action
    repeatedly to play the `Throw` montage; these issues will be addressed when you
    implement the projectile that will be thrown in a later chapter for this project.
    For now, you just want to know that the work done on the Anim Slot and the Animation
    Blueprint give the desired result for animation blending.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 不要担心在使用左鼠标按钮动作重复播放 `Throw` 蒙太奇时可能看到的任何错误；这些问题将在你实现项目后续章节中将要投掷的投射物时得到解决。现在，你只需要知道，在
    Anim Slot 和动画蓝图上所做的工能够实现动画融合的预期结果。
- en: Let’s continue with the **SuperSideScroller** project by now creating the C++
    class, the Blueprints, and the materials necessary to set up the enemy for use
    in the next chapter.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续 **SuperSideScroller** 项目，现在创建 C++ 类、蓝图和必要的材料，为下一章中敌人使用做准备。
- en: The SuperSideScroller game enemy
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SuperSideScroller 游戏的敌人
- en: With the player character animating correctly when moving and performing the
    `Throw` animation, it is time to talk about the enemy type that the **SuperSideScroller**
    game will feature.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 当玩家角色在移动和执行 `Throw` 动画时动画正确，现在是时候讨论 **SuperSideScroller** 游戏将采用的敌人类型了。
- en: This enemy will have a basic back-and-forth movement pattern and will not support
    any attacks; only by colliding with the player character will it be able to inflict
    damage.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 这个敌人将有一个基本的来回移动模式，并且不支持任何攻击；只有通过碰撞玩家角色，它才能造成伤害。
- en: In the next exercise, you will set up the base enemy class in C++ for the first
    enemy type and configure the enemy’s Blueprint and Animation Blueprint in preparation
    for [*Chapter 13*](B18531_13.xhtml#_idTextAnchor268), *Creating and Adding the
    Enemy Artificial Intelligence*, where you will implement the AI of this enemy.
    For the sake of efficiency and time, you will use the assets already provided
    by Unreal Engine 5 in the **SideScroller** template for the enemy. This means
    you will be using the skeleton, skeletal mesh, animations, and the Animation Blueprint
    of the default mannequin asset. Let’s begin by creating the first enemy class.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 12.07 – Creating the enemy base C++ class
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The goal of this exercise is to create a new enemy class from scratch and to
    have the enemy ready to use in [*Chapter 13*](B18531_13.xhtml#_idTextAnchor268),
    *Creating and Adding the Enemy Artificial Intelligence*, when you will develop
    the AI. To start, create a new enemy class in C++ by following these steps:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: In the editor, navigate to `SuperSideScrollreCharacter` parent class.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Give this class a name and select a directory. Name this class `EnemyBase` and
    do not change the directory path. When ready, left-click on the **Create Class**
    button to have Unreal Engine create the new class for you.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let’s create the folder structure in the content drawer for the enemy assets
    next.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: 'Head back to the Unreal Engine 5 editor, navigate to the content drawer, and
    create a new folder called `Enemy`:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.20 – The new Enemy folder ](img/Figure_12.20_B18531.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
- en: Figure 12.20 – The new Enemy folder
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Enemy` folder, create another folder called `Blueprints`, where you
    will create and save the Blueprint assets for the enemy. Right-click and select
    `EnemyBase`, as shown here:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.21 – Now, the new EnemyBase class is available for you to create
    a Blueprint from ](img/Figure_12.21_B18531.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
- en: Figure 12.21 – Now, the new EnemyBase class is available for you to create a
    Blueprint from
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: Name this `BP_Enemy`.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that you have the Blueprint for the first enemy using the `EnemyBase` class
    as the parent class, it is time to handle the Animation Blueprint. You will use
    the default Animation Blueprint that is provided to you by Unreal Engine in the
    `/Enemy/Blueprints` directory.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 12.08 – Creating and applying the enemy Animation Blueprint
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous exercise, you created a Blueprint for the first enemy using
    the `EnemyBase` class as the parent class. In this exercise, you will be working
    with the Animation Blueprint.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps will help you complete this exercise:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the `/Mannequin/Animations` directory and find the `ThirdPerson_AnimBP`
    asset.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, duplicate the `ThirdPerson_AnimBP` asset. There are two ways to duplicate
    an asset:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the desired asset in the content drawer and press *Ctrl* + *W*.
  id: totrans-186
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the desired asset in the content drawer and select `Duplicate`
    from the drop-down menu.
  id: totrans-187
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, left-click and drag this duplicate asset into the `/Enemy/Blueprints` directory
    and select the option to move when you release the left-click mouse button.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，左键单击并拖动这个副本资产到 `/Enemy/Blueprints` 目录，并在释放左键鼠标按钮时选择移动选项。
- en: Name this duplicate asset `AnimBP_Enemy`. It is best to create a duplicate of
    an asset that you can later modify if you so desire without risking the functionality
    of the original.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将这个副本资产命名为 `AnimBP_Enemy`。最好创建一个资产副本，这样你可以在以后修改它，而不会影响原始资产的功能。
- en: With the enemy Blueprint and Animation Blueprint created, it’s time to update
    the enemy Blueprint to use the default `Skeletal Mesh` mannequin and the new Animation
    Blueprint duplicate.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建了敌人蓝图和动画蓝图之后，现在是时候更新敌人蓝图以使用默认的 `骨骼网格` 模特和新的动画蓝图副本了。
- en: Navigate to `/Enemy/Blueprints` and open `BP_Enemy`.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 `/Enemy/Blueprints` 并打开 `BP_Enemy`。
- en: 'Next, navigate to the `Mesh` component and select it to access its **Details**
    panel. First, assign **SK_Mannequin** to the **Skeletal Mesh** parameter, as shown
    here:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，导航到 `Mesh` 组件并选择它以访问其 **详细信息** 面板。首先，将 **SK_Mannequin** 分配给 **骨骼网格** 参数，如图所示：
- en: '![Figure 12.22 – You will use the default SK_Mannequin skeletal mesh for the
    new enemy ](img/Figure_12.22_B18531.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![图12.22 – 您将为新敌人使用默认的 SK_Mannequin 骨骼网格](img/Figure_12.22_B18531.jpg)'
- en: Figure 12.22 – You will use the default SK_Mannequin skeletal mesh for the new
    enemy
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.22 – 您将为新敌人使用默认的 SK_Mannequin 骨骼网格
- en: 'Now, you need to apply the `AnimBP_Enemy` Animation Blueprint to the `Mesh`
    component. Navigate to the `Animation` category of the `Mesh` component’s `AnimBP_Enemy`:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您需要将 `AnimBP_Enemy` 动画蓝图应用到 `Mesh` 组件上。导航到 `Mesh` 组件的 `Animation` 类别的 `AnimBP_Enemy`：
- en: '![Figure 12.23 – Assign the new AnimBP_Enemy as the Anim class  ](img/Figure_12.23_B18531.jpg)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![图12.23 – 将新的 AnimBP_Enemy 分配为 Anim 类](img/Figure_12.23_B18531.jpg)'
- en: Figure 12.23 – Assign the new AnimBP_Enemy as the Anim class
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.23 – 将新的 AnimBP_Enemy 分配为 Anim 类
- en: Lastly, you will notice that the character mesh is positioned and rotated incorrectly
    when previewing the character in the `X` = `0.000000`, `Y` = `0.000000`, `Z` =
    `-90.000000`)
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，您会发现当在 `X` = `0.000000`, `Y` = `0.000000`, `Z` = `-90.000000` 预览角色时，角色网格的位置和旋转不正确。
- en: '`0.000000`, Pitch= `0`, Yaw= `-90.000000`)'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`0.000000`, Pitch= `0`, Yaw= `-90.000000`)'
- en: '`X` = `1.000000`, `Y` = `1.000000`, `Z` = `1.000000`)'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`X` = `1.000000`, `Y` = `1.000000`, `Z` = `1.000000`)'
- en: 'The `Transform` settings will appear as follows:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '`变换` 设置将如下所示：'
- en: '![Figure 12.24 – The final Transform settings for the enemy character ](img/Figure_12.24_B18531.jpg)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![图12.24 – 敌人角色的最终变换设置](img/Figure_12.24_B18531.jpg)'
- en: Figure 12.24 – The final Transform settings for the enemy character
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.24 – 敌人角色的最终变换设置
- en: 'The following figure shows the settings of the **Mesh** component so far. Please
    make sure your settings match what is displayed in *Figure 12.25*:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图显示了到目前为止的 **网格** 组件设置。请确保您的设置与 *图12.25* 中显示的相匹配：
- en: '![Figure 12.25 – The settings for the Mesh component of your enemy character
    ](img/Figure_12.25_B18531.jpg)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![图12.25 – 敌人角色网格组件的设置](img/Figure_12.25_B18531.jpg)'
- en: Figure 12.25 – The settings for the Mesh component of your enemy character
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.25 – 敌人角色网格组件的设置
- en: The last thing to do here is to create a Material Instance of the mannequin’s
    primary material so that this enemy can have a unique color that helps differentiate
    it from the other enemy type.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里要做的最后一件事是创建一个模特主要材质的材质实例，这样这个敌人就可以有一个独特的颜色，帮助它与其他敌人类型区分开来。
- en: Let’s begin by first learning more about Materials and Material Instances.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从首先了解更多关于材质和材质实例开始。
- en: Materials and Material Instances
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 材质和材质实例
- en: Before moving on to the next exercise, we need to first briefly discuss what
    Material Instances are before you can work with these assets and apply them to
    the new enemy character. Although this book is more focused on the technical aspects
    of game development using Unreal Engine 5, it is still important that you know,
    on a surface level, what Material Instances are and how they are used in video
    games. A Material Instance is an extension of a Material, where you do not have
    access or control over the base Material from which the Material Instance derives,
    but you do have control over the parameters that the creator of the Material exposes
    to you. Many parameters can be exposed to you to work with from inside Material
    Instances.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information about Materials and Material Instances, please refer to
    the following Epic Games documentation pages: [https://docs.unrealengine.com/en-US/Engine/Rendering/Materials/index.xhtml](https://docs.unrealengine.com/en-US/Engine/Rendering/Materials/index.xhtml)
    and [https://docs.unrealengine.com/4.27/en-US/API/Runtime/Engine/Materials/UMaterialInstanceDynamic/](https://docs.unrealengine.com/4.27/en-US/API/Runtime/Engine/Materials/UMaterialInstanceDynamic/).'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: 'Unreal Engine provides us with an example of a Material Instance in the Side
    Scroller template project called `M_UE4Man_ChestLogo`, found in the `/Mannequin/Character/Materials/`
    directory. The following figure shows the set of exposed parameters given to the
    Material Instance based on the parent material, `M_Male_Body`. The most important
    parameter to focus on is the `Vector` parameter, called `BodyColor`. You will
    use this parameter in the Material Instance you create in the next exercise to
    give the enemy a unique color:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.26 – The list of parameters for the M_UE4Man_ChestLogo Material
    Instance asset ](img/Figure_12.26_B18531.jpg)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
- en: Figure 12.26 – The list of parameters for the M_UE4Man_ChestLogo Material Instance
    asset
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: In the following exercise, you will take this knowledge of Material Instances
    and apply them to create a unique Material Instance to be used for the enemy character
    you created earlier.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 12.09 – Creating and applying the enemy Material Instance
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that you have a basic understanding of what Material Instances are, it is
    time to create your own Material Instance from the `M_MannequinUE4_Body` asset.
    With this Material Instance, you will adjust the `BodyColor` parameter to give
    the enemy character a unique visual representation.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps will help you complete this exercise:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the `Characters/Mannequin_UE4/Materials` directory to find the Material
    used by the default mannequin character, `M_MannequinUE4_Body`.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A Material Instance can be created by right-clicking on the `Material` asset,
    `M_MannequinUE4_Body`, and left-clicking on the `MI_Enemy01`.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.27 – Any material can be used to create a Material Instance ](img/Figure_12.27_B18531.jpg)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
- en: Figure 12.27 – Any material can be used to create a Material Instance
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new folder called `Materials` in the `Enemy` folder. Left-click and
    drag the Material Instance into the `/Enemy/Materials` directory to move the asset
    to this new folder:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.28 – Rename the Material Instance MI_Enemy ](img/Figure_12.28_B18531.jpg)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
- en: Figure 12.28 – Rename the Material Instance MI_Enemy
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: 'Double-left-click the Material Instance and find the **Details** panel on the
    left-hand side. There, you will find a **Vector Parameter** property called **BodyColor**.
    Make sure the checkbox is checked to enable this parameter, and then change its
    value to a red color. Now, the Material Instance should be colored red, as shown
    here:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.29 – Now, the enemy material is red ](img/Figure_12.29_B18531.jpg)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
- en: Figure 12.29 – Now, the enemy material is red
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: 'Save the`BP_Enemy01` Blueprint. Select the `MI_Enemy`:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.30 – Assign the MI_Enemy material instance to the enemy character
    Mesh ](img/Figure_12.30_B18531.jpg)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
- en: Figure 12.30 – Assign the MI_Enemy material instance to the enemy character
    Mesh
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, the first enemy type is visually ready and has the appropriate Blueprint
    and Animation Blueprint assets prepared for the next chapter, where you will develop
    its AI:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.31 – The final enemy character set up ](img/Figure_12.31_B18531.jpg)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
- en: Figure 12.31 – The final enemy character set up
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: With this exercise complete, you have now created a Material Instance and applied
    it to the enemy character so that it has a unique visual representation.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: Let’s conclude this chapter by moving on to a short activity that will help
    you better understand the blending of animations using the `Layered blend per
    bone` node that was used in the earlier exercises.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: Activity 12.01 – Updating Blend Weights
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At the end of *Exercise 12.06*, *Previewing the Throw animation*, you were able
    to blend the movement animations and the `Throw` animation so that they could
    be played in tandem without negatively influencing each other. The result is the
    player character animating correctly when walking or running, while also performing
    the `Throw` animation on the upper body.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you will experiment with the blend bias values and parameters
    of the `Layered blend per bone` node to have a better understanding of how animation
    blending works.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps will help you complete the activity:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: Update the `Blend Weights` input parameter of the `Layered blend per bone` node
    so that there is absolutely no blending of the `Throw` animation additive pose
    with the base movement pose. Try using values here such as `0.0f` and `0.5f` to
    compare the differences in the animation.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: Make sure to return this value to `1.0f` after you are done so as not to affect
    the blending you set up in the previous exercise.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: Update the settings of the `Layered blend per bone` node to change which bone
    is affected by the blend so that the whole character’s body is affected by the
    blend. It’s a good idea to start with the root bone in the skeleton hierarchy
    of the `MainCharacter_Skeleton` asset.
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Keeping the settings from the previous step in place, add a new array element
    to the branch filters and, in this new array element, add the bone name and a
    blend depth value of `–1.0f`, which allows only the character’s left leg to continue
    to animate the movement correctly when blending the `Throw` animation.
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: After this activity, make sure to return the settings of the `Layered blend
    per bone` node to the values you set at the end of the first exercise to ensure
    no progress is lost in the character’s animation.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: 'The expected output for the first part of the activity is shown here:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.32 – Output showing the entire character’s body affected ](img/Figure_12.32_B18531.jpg)'
  id: totrans-250
  prefs: []
  type: TYPE_IMG
- en: Figure 12.32 – Output showing the entire character’s body affected
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: 'The expected output for the last part of the activity is shown here:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.33 – The left leg continues to animate the movement correctly when
    blending the Throw animation ](img/Figure_12.33_B18531.jpg)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
- en: Figure 12.33 – The left leg continues to animate the movement correctly when
    blending the Throw animation
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: 'The solution to this activity can be found on GitHub here: [https://github.com/PacktPublishing/Elevating-Game-Experiences-with-Unreal-Engine-5-Second-Edition/tree/main/Activity%20solutions](https://github.com/PacktPublishing/Elevating-Game-Experiences-with-Unreal-Engine-5-Second-Edition/tree/main/Activity%20solutions).'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: 'Before concluding this activity, please return the `Layered blend per bone`
    settings to the values you set at the end of *Exercise 12.05*, *Blending animation
    with the Upper Body Anim Slot*. If you do not return these values back to their
    original settings, the animation results in upcoming exercises and activities
    in the next chapters will not be the same. You can either set the original values
    manually or refer to the file with these settings at the following link: [https://github.com/PacktPublishing/Elevating-Game-Experiences-with-Unreal-Engine-5-Second-Edition/tree/main/Chapter12/Exercise12.05](https://github.com/PacktPublishing/Elevating-Game-Experiences-with-Unreal-Engine-5-Second-Edition/tree/main/Chapter12/Exercise12.05).'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: With this activity complete, you now have a stronger understanding of how animation
    blending works and how blending weighting can affect the influence of additive
    poses on base poses using the `Layered blend per bone` node.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: There are a lot of techniques for animation blending that you haven’t used in
    this project, and it’s strongly recommended that you research these techniques,
    starting with the documentation at [https://docs.unrealengine.com/en-US/Engine/Animation/AnimationBlending/index.xhtml](https://docs.unrealengine.com/en-US/Engine/Animation/AnimationBlending/index.xhtml).
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你还没有使用许多动画混合技术，强烈建议你研究这些技术，从[https://docs.unrealengine.com/en-US/Engine/Animation/AnimationBlending/index.xhtml](https://docs.unrealengine.com/en-US/Engine/Animation/AnimationBlending/index.xhtml)的文档开始。
- en: Summary
  id: totrans-261
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: With the enemy set up with the C++ class, Blueprint, and Material, you are ready
    to move on to the next chapter, where you will create the AI for this enemy by
    taking advantage of systems such as behavior trees in Unreal Engine 5.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用C++类、蓝图和材质设置好敌人之后，你就可以进入下一章了，在那里你将通过利用Unreal Engine 5中的行为树等系统来创建这个敌人的AI。
- en: From the exercises and activities of this chapter, you learned how to create
    an Animation Montage that allows the playing of animations. You also learned how
    to set up an Anim Slot within this montage to categorize it for the player character’s
    upper body.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章的练习和活动，你学习了如何创建一个动画蒙太奇，允许播放动画。你还学习了如何在蒙太奇中设置一个Anim槽，以便为玩家角色的上半身分类。
- en: Next, you learned how to cache the output pose of a State Machine by using the
    `Use Cached Pose` node so that this pose can be referenced in multiple instances
    for more complex Animation Blueprints. Then, by learning about the `Layered blend
    per bone` function, you were able to blend the base movement pose with the additive
    layer of the `Throw` animation by using the Anim Slot.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你学习了如何通过使用`Use Cached Pose`节点来缓存状态机的输出姿态，这样这个姿态就可以在多个实例中引用，以便在更复杂的动画蓝图中使用。然后，通过了解`Layered
    blend per bone`功能，你能够使用Anim槽将基本动作姿态与`Throw`动画的叠加层混合。
- en: Lastly, you put together the base of the enemy by creating the C++ class, Blueprint,
    and other assets so that they will be ready for the next chapter. With the enemy
    ready, let’s move on to creating the AI of the enemy so that it can interact with
    the player.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你通过创建C++类、蓝图和其他资产来构建敌人的基础，以便为下一章做好准备。敌人准备就绪后，让我们继续创建敌人的AI，以便它能与玩家互动。
