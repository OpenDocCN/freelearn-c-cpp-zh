- en: Setting Up Your C Compiler on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Microsoft Windows is one of the most popular desktop operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: Before beginning, I highly recommend that you install **7-Zip** from [https://www.7-zip.org](https://www.7-zip.org)/.
    7-Zip will allow you to extract the various compression archive formats that library
    source code is distributed in.
  prefs: []
  type: TYPE_NORMAL
- en: Let's continue and get MinGW, OpenSSL, and `libssh` set up on Windows 10.
  prefs: []
  type: TYPE_NORMAL
- en: Installing MinGW GCC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MinGW is a port of GCC to Windows. It is the compiler we recommend for this
    book.
  prefs: []
  type: TYPE_NORMAL
- en: You can obtain MinGW from [http://www.mingw.org/](http://www.mingw.org/). Find
    the download link on that page and download and run the **MinGW Installation Manager**
    (**mingw-get**).
  prefs: []
  type: TYPE_NORMAL
- en: 'The MinGW Installation Manager is a GUI tool for installing MinGW. It''s shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/84679923-d996-454e-914b-7077bac444c6.png)'
  prefs: []
  type: TYPE_IMG
- en: Click Install. Then, click Continue. Wait while some files download, and then
    click Continue once again.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, the tool will give you a list of packages that you can install.
    You need to mark mingw32-base-bin, msys-base-bin, and mingw32-gcc-g++-bin for
    installation. This is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0c4584f0-3672-41e6-912d-ca2c5e8311da.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will also want to select the mingw32-libz-dev package. It is listed under
    the MinGW Libraries section. The following screenshot shows this selection:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f80d717a-c480-4811-b918-af1b220e155a.png)'
  prefs: []
  type: TYPE_IMG
- en: The `g++` and `libz` packages we've selected are required for building `libssh`
    later.
  prefs: []
  type: TYPE_NORMAL
- en: When you're ready to proceed, click Installation from the menu and select Apply
    Changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'A new dialog will show the changes to be made. The following screenshot shows
    what this dialog may look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8e98f21f-e4d0-442c-9707-f5d06334bdcc.png)'
  prefs: []
  type: TYPE_IMG
- en: Click the Apply button to download and install the packages. Once the installation
    is complete, you can close the MinGW Installation Manager.
  prefs: []
  type: TYPE_NORMAL
- en: To be able to use MinGW from the command line easily, you will need to add MinGW
    to your `PATH`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The steps for adding MinGW to your `PATH` are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the System control panel (Windows key + *Pause*/*Break*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select Advanced system settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e776b32e-ffa4-4c58-a8f4-878ebfc15151.png)'
  prefs: []
  type: TYPE_IMG
- en: 'From the System Properties window, navigate to the Advanced tab and click the Environment Variables...
    button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c57bf130-4e24-406a-90f1-4733d447a8da.png)'
  prefs: []
  type: TYPE_IMG
- en: From this screen, find the `PATH` variable under System variables. Select it
    and press **Edit...**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click New and type in the MinGW path—`C:\mingw\bin`, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9f990d51-0b4b-4e7a-ad35-55e58858f68e.png)'
  prefs: []
  type: TYPE_IMG
- en: Click OK to save your changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once MinGW has been added to your `PATH`, you can open a new command window
    and enter `gcc --version` to ensure that `gcc` has been installed correctly. This
    is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0558634c-758f-49ab-ac91-9ad356da1c56.png)'
  prefs: []
  type: TYPE_IMG
- en: Installing Git
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to have the `git` version control software installed to download
    this book's code.
  prefs: []
  type: TYPE_NORMAL
- en: '`git` is available from [https://git-scm.com/download](https://git-scm.com/download).
    A handy GUI-based installer is provided, and you shouldn''t have any issues getting
    it working. When installing, be sure to check the option for adding `git` to your
    `PATH`. This is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f0b7a8df-4d1e-45fa-bc23-fb303a42bf62.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After `git` has finished installing, you can test it by opening a new command
    window and entering `git --version`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5ad52e29-8376-4e11-8232-5d6ff30c9744.png)'
  prefs: []
  type: TYPE_IMG
- en: Installing OpenSSL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The OpenSSL library can be tricky to get going on Windows.
  prefs: []
  type: TYPE_NORMAL
- en: If you are brave, you can obtain the OpenSSL library source code directly from [https://www.openssl.org/source/](https://www.openssl.org/source/).
    You will, of course, need to build OpenSSL before it can be used. Building OpenSSL
    is not easy, but instructions are provided in the `INSTALL` and `NOTES.WIN` files
    included with the OpenSSL source code.
  prefs: []
  type: TYPE_NORMAL
- en: An easier alternative is to install prebuilt OpenSSL binaries. You can find
    a list of prebuilt OpenSSL binaries from the OpenSSL wiki at [https://wiki.openssl.org/index.php/Binaries](https://wiki.openssl.org/index.php/Binaries).
    You will need to locate binaries that match your operating system and compiler.
    Installing them will be a matter of copying the relevant files to the MinGW `include`,
    `lib`, and `bin` directories.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows a binary OpenSSL distribution. The `include`
    and `lib` folders should be copied over to `c:\mingw\` and merged with the existing
    folders, while `openssl.exe` and the two DLL files need to be placed in `c:\mingw\bin\`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f9238f39-e6e9-4b9c-a17a-1e9b05038b65.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can try building `openssl_version.c` from [Chapter 9](47ba170d-42d9-4e38-b5d8-89503e005708.xhtml),
    *Loading Secure Web Pages with HTTPS and OpenSSL*, to test that everything is
    installed correctly. It should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b798e570-c39f-4c2f-a3cd-62b920b3e749.png)'
  prefs: []
  type: TYPE_IMG
- en: Installing libssh
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can obtain the latest `libssh` library from [https://www.libssh.org/](https://www.libssh.org/).
    If you are proficient in installing C libraries, feel free to give it a go. Otherwise,
    read on for step-by-step instructions.
  prefs: []
  type: TYPE_NORMAL
- en: Before beginning, be sure that you've first installed the OpenSSL libraries
    successfully. These are required by the `libssh` library.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will need CMake installed in order to build `libssh`. You can obtain CMake
    from [https://cmake.org/](https://cmake.org/). They provide a nice GUI installer,
    and you shouldn''t run into any difficulties. Make sure you select the option
    to add CMake to your `PATH` during installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e80c6ca3-2751-432e-a3b5-afdf77b81058.png)'
  prefs: []
  type: TYPE_IMG
- en: Once you have the CMake tool and the OpenSSL libraries installed, navigate to
    the `libssh` website to download the `libssh` source code. At the time of writing,
    Version 0.8.7 is the latest, and it is available from [https://www.libssh.org/files/0.8/](https://www.libssh.org/files/0.8/).
    Download and extract the `libssh` source code.
  prefs: []
  type: TYPE_NORMAL
- en: Take a look at the included `INSTALL` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, open a command window in the `libssh` source code directory. Create a
    new `build` folder with the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Keep this command window open. We'll do the build here in a minute.
  prefs: []
  type: TYPE_NORMAL
- en: Start CMake 3.14.3 (**cmake-gui**) from the start menu or desktop shortcut.
  prefs: []
  type: TYPE_NORMAL
- en: 'You need to set the source code and build locations using the Browse Source...
    and Browse Build... buttons. This is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c4cf41a7-8d2d-4576-8b81-ab20ddd20bde.png)'
  prefs: []
  type: TYPE_IMG
- en: Then, click Configure.
  prefs: []
  type: TYPE_NORMAL
- en: On the next screen, select MinGW Makefiles as the generator for this project.
    Click Finish.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/349233d1-58f1-492d-85fa-76bec0dd6ae1.png)'
  prefs: []
  type: TYPE_IMG
- en: It may take a moment to process.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the configuration options, make the following changes:'
  prefs: []
  type: TYPE_NORMAL
- en: Uncheck WITH_NACL
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Uncheck WITH_GSSAPI
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change `CMAKE_INSTALL_PREFIX` to `c:\mingw`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, click Configure again. It will take a moment. If everything worked, click
    Generate.
  prefs: []
  type: TYPE_NORMAL
- en: You should now be able to build `libssh`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go back to your command window in the build directory. Use the following command
    to complete the build:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'After the build completes, use the following command to copy the files over
    to your MinGW installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You can try building `ssh_version.c` from [Chapter 11](c9d0a1dc-878b-4961-825e-65688fac08ae.xhtml),
    *Establishing SSH Connections with libssh*, to test that everything is installed
    correctly. It should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cb20c15a-dc94-4992-9eb1-11dffc687062.png)'
  prefs: []
  type: TYPE_IMG
- en: Alternatives
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, we recommend free software whenever possible. This is important
    for user freedom, and this is one reason we recommend GCC throughout the book.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, to MinGW GCC, the Clang C compiler is also open source and excellent
    quality. The code in this book was also tested to run successfully using Clang
    on Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Command-line tools such as GCC and Clang are often easier to integrate into
    the complicated workflows required for larger projects. These open source tools
    also provide better standards compliance than Microsoft's compilers.
  prefs: []
  type: TYPE_NORMAL
- en: That said, the code in this book also works with Microsoft's compilers. The
    code was tested for both Microsoft Visual Studio 2015 and Microsoft Visual Studio
    2017.
  prefs: []
  type: TYPE_NORMAL
