["```cpp\n        unzip Godot_v4.2.1-stable_linux.x86_64.zip -d Godot\n        ```", "```cpp\nextends Node2D\n# Called when the node enters the scene tree for the first time.\nfunc _ready():\n¬†¬†¬†pass # Replace with function body.\n# Called every frame. 'delta' is the elapsed time since the previous frame.\nfunc _process(delta):\n¬†¬†¬†pass\n```", "```cpp\n¬†¬†¬†print(\"Hello, World\")\n```", "```cpp\nextends Node2D\nfunc _ready():\nprint statement we added. We add this *tab* because it shows that the line of code belongs to the _ready function. We call the practice of adding *tabs* in front of lines indentation.\n\t\t\tImportant note\n\t\t\tThroughout this book, we haven‚Äôt used tabs in the text due to editorial reasons. We will use three spaces to represent one tab. This is why you‚Äôre better off not copying and pasting code from this book into the editor. The complete code for this book can be accessed and copied from this book‚Äôs GitHub repository (link in the *Technical* *requirements* section).\n\t\t\tAll the lines within the `_ready` function will run when the node is ready, we‚Äôll see what this means in more detail later. For now, it suffices to know that this function gets executed when the node is ready to be used.\n\t\t\t![Figure 1.19 ‚Äì A function contains a code block](img/B19358_01_20.jpg)\n\n\t\t\tFigure 1.19 ‚Äì A function contains a code block\n\t\t\tFunctions are small groups of code a computer can execute. A function is always introduced by the `func` keyword, followed by the name of the function.\n\t\t\tYou can see that the pre-filled script also provided us with a `_process` function, which we will not use for now, so we deleted it. We‚Äôll return to functions in [*Chapter 4*](B19358_04.xhtml#_idTextAnchor164). Remember that every line of code within the `_ready` function will execute from the moment our game runs and that a *tab* must precede these lines.\n\t\t\tUse the *Tab* key to insert these tabs. The symbol on your keyboard looks like this: ‚Üπ\n\t\t\tThe last line of interest in the script says `extends Node2D`. This simply says that we are using **Node2D**, the type of node we added to the scene, as a base for the script to start from. Everything in the script is an extension of the functionality that **Node2D** completes. We‚Äôll learn more about extending scripts and classes in [*Chapter 4*](B19358_04.xhtml#_idTextAnchor164).\n\t\t\tNow, press the play button in the top right to run our project:\n\t\t\t![Figure 1.20 ‚Äì The play button is used to run the project](img/B19358_01_21.jpg)\n\n\t\t\tFigure 1.20 ‚Äì The play button is used to run the project\n\t\t\tA popup will ask us which scene we want to use as the main scene. Choose **Select Current** to set the current scene as the main one:\n\t\t\t![Figure 1.21 ‚Äì Godot Editor will ask us to define a main scene. We can just select the current one](img/B19358_01_22.jpg)\n\n\t\t\tFigure 1.21 ‚Äì Godot Editor will ask us to define a main scene. We can just select the current one\n\t\t\tAn empty, gray screen will pop up. We did not add anything visually to our game yet. Later, there will be a sprawling and exciting game here. But this gray screen is what we should expect for now:\n\t\t\t![Figure 1.22 ‚Äì An empty game window](img/B19358_01_23.jpg)\n\n\t\t\tFigure 1.22 ‚Äì An empty game window\n\t\t\tThe actual exciting part is happening in the editor window itself. You‚Äôll see a new little window unfolding from the bottom where the text **Hello, World** is printed out:\n\t\t\t![Figure 1.23 ‚Äì The output of the game shows Hello, World](img/B19358_01_24.jpg)\n\n\t\t\tFigure 1.23 ‚Äì The output of the game shows Hello, World\n\t\t\tSuccess! We wrote our first script!\n\t\t\tAs an experiment, try changing the text within the double quotes of *step 4* and rerun the program. You should see the new text printed in the output window:\n\t\t\t![Figure 1.24 ‚Äì The output of the game after changing the printed text](img/B19358_01_25.jpg)\n\n\t\t\tFigure 1.24 ‚Äì The output of the game after changing the printed text\n\t\t\tThose were our first steps in creating a scene and script within the Godot game engine. Throughout this book, we‚Äôll learn everything we need to know to create a whole game from scratch, but we‚Äôll leave it here for now. Next, we‚Äôll take a quick look at joining the game development community.\n\t\t\tThe Godot Engine Documentation\n\t\t\tIf you ever feel lost, there is also the official **Godot Engine Documentation**. This is a very exhaustive source of information on all the different classes and nodes and contains manuals on all the different subsystems related to the engine.\n\t\t\tYou can access the documentation here: [https://docs.godotengine.org/](https://docs.godotengine.org/).\n\t\t\tWhenever you are searching how to use a certain part of the engine or something in the book is not 100% clear, you could consult the documentation.\n\t\t\tJoin our community!\n\t\t\tAs the last part of this chapter, I invite you to join our community! If you need any help, encounter a bug, or just want to chat with other game developers, come and find us on any of the platforms mentioned at [https://godotengine.org/community](https://godotengine.org/community).\n\t\t\tI also encourage you to post your progress on ùïè, Facebook, Instagram, Mastodon, or any other social media platform. Getting feedback and extra eyes on your projects is always fun! If you decide to do so, don‚Äôt forget to use these hashtags: `#GodotEngine`, `#indiedev`, and `#gamedev`.\n\t\t\tWant to reach out to me personally? Check out my site for the most up-to-date contact information: [www.sandervanhove.com](http://www.sandervanhove.com).\n\t\t\tIn the last part of this book, I‚Äôll go into more detail about the community and how you can join and maybe even help. But for now, let‚Äôs focus on learning the trade ourselves!\n\t\t\tSummary\n\t\t\tIn this chapter, we learned about Godot Engine, which is a FOSS. Then, we downloaded the engine for ourselves and created our first project. Lastly, we saw that the built-in programming language is GDScript and made our first `\"Hello,` `World\"` script.\n\t\t\tIn the next chapter, we‚Äôll start our journey of learning how to program. See you there!\n\t\t\tQuiz time\n\n\t\t\t\t*   What does the acronym FOSS mean and where is it used?\n\t\t\t\t*   Is the Godot engine an open-source project?\n\t\t\t\t*   What line of code did we add to show *‚ÄúHello, World‚Äù* in the Output? Why did we add a *tab* at the beginning of this line?\n\t\t\t\t*   What are *nodes* in Godot Engine and how do they relate to *scenes*?\n\n```"]