["```cpp\n\tdef msg_send(obj, name, *args):\n\t\tmessage_arguments = [obj]\n\t\tmessage_arguments.extend(args)\n\t\treturn getattr(obj,name)(*message_arguments)\n```", "```cpp\n    def delegate(other, name):\n        return getattr(other, name)\n```", "```cpp\n    def doesNotUnderstand(obj, name):\n        raise ValueError(\"object {} does not respond to selector {}\".format(obj, name))\n\tBase = type('Base', (), {\n        '__getattr__': (lambda this, name:\n            (lambda myself: myself) if name==\"this\"\n            else (lambda myself: doesNotUnderstand(myself, name)))\n        })\n```", "```cpp\n    def create_object():\n        my_module = inspect.getmodule(create_object)\n        gw = execnet.makegateway()\n        channel = gw.remote_exec(my_module)\n        return channel\n```", "```cpp\n    if __name__ == '__channelexec__':\n        global receiver\n        receiver = channel\n        channel.setcallback(handler)\n        channel.waitclose()\n```", "```cpp\n    (defun words () (interactive) (shell-command (concat \"wc -w \" buffer-file-name)))\n```"]